<div id="Creating-the-branch-after-editing"></div>
<div class="header">
<p>
 &nbsp; |[[cvs: Index#SEC_Contents|Contents]]||[[cvs: Index#Index|Index]]|</p>
</div>

----

===== Creating the branch after editing =====

Say you have been working on some extremely
experimental software, based on whatever revision you
happened to checkout last week.  If others in your
group would like to work on this software with you, but
without disturbing main-line development, you could
commit your change to a new branch.  Others can then
checkout your experimental stuff and utilize the full
benefit of <small>CVS</small> conflict resolution.  The scenario might
look like:

<div class="example" style="margin-left: 3.2em">
 <nowiki>[[</nowiki> hacked sources are present <nowiki>]]</nowiki>
 $ cvs tag -b EXPR1
 $ cvs update -r EXPR1
 $ cvs commit
</div>

The <code>update</code> command will make the &lsquo;<code>-r
EXPR1</code>&rsquo; option sticky on all files.  Note that your
changes to the files will never be removed by the
<code>update</code> command.  The <code>commit</code> will
automatically commit to the correct branch, because the
&lsquo;<code>-r</code>&rsquo; is sticky.  You could also do like this:

<div class="example" style="margin-left: 3.2em">
 <nowiki>[[</nowiki> hacked sources are present <nowiki>]]</nowiki>
 $ cvs tag -b EXPR1
 $ cvs commit -r EXPR1
</div>

but then, only those files that were changed by you
will have the &lsquo;<code>-r EXPR1</code>&rsquo; sticky flag.  If you hack
away, and commit without specifying the &lsquo;<code>-r EXPR1</code>&rsquo;
flag, some files may accidentally end up on the main
trunk.

To work with you on the experimental change, others
would simply do

<div class="example" style="margin-left: 3.2em">
 $ cvs checkout -r EXPR1 whatever_module
</div>

This document was generated on <i>a sunny day</i> using [http://www.gnu.org/software/texinfo/ <i>texi2html</i>].
