<div id="Revision-management"></div>
<div class="node">
<p>
Next: [cvs: Keyword substitution#Keyword-substitution Keyword substitution], Previous: [cvs: Multiple developers#Multiple-developers Multiple developers], Up: [[cvs#Top|Top]] &nbsp; |[cvs: Index#SEC_Contents Contents]||[cvs: Index#Index Index]|</p>
</div>
<div id="Revision-management-1"></div>
== Revision management ==
<div id="index-Revision-management"></div>


<p>If you have read this far, you probably have a pretty
good grasp on what <small>CVS</small> can do for you.  This
chapter talks a little about things that you still have
to decide.
</p>
<p>If you are doing development on your own using <small>CVS</small>
you could probably skip this chapter.  The questions
this chapter takes up become more important when more
than one person is working in a repository.
</p>
<pre class="menu-preformatted"><nowiki></nowiki>&bull;[[#When-to-commit| When to commit]]::<nowiki>              Some discussion on the subject
</nowiki></pre>
<hr>
<div id="When-to-commit"></div>
<div class="node">
<p>
Up: [[#Revision-management|Revision management]] &nbsp; |[cvs: Index#SEC_Contents Contents]||[cvs: Index#Index Index]|</p>
</div>
<div id="When-to-commit_003f"></div>
=== When to commit? ===
<div id="index-When-to-commit"></div>
<div id="index-Committing_002c-when-to"></div>
<div id="index-Policy"></div>

<p>Your group should decide which policy to use regarding
commits.  Several policies are possible, and as your
experience with <small>CVS</small> grows you will probably find
out what works for you.
</p>
<p>If you commit files too quickly you might commit files
that do not even compile.  If your partner updates his
working sources to include your buggy file, he will be
unable to compile the code.  On the other hand, other
persons will not be able to benefit from the
improvements you make to the code if you commit very
seldom, and conflicts will probably be more common.
</p>
<p>It is common to only commit files after making sure
that they can be compiled.  Some sites require that the
files pass a test suite.  Policies like this can be
enforced using the commitinfo file
(see [cvs: Reference manual for Administrative files#commitinfo commitinfo]), but you should think twice before
you enforce such a convention.  By making the
development environment too controlled it might become
too regimented and thus counter-productive to the real
goal, which is to get software written.
</p>
<hr>
<div class="node">
<p>
Up: [[#Revision-management|Revision management]] &nbsp; |[cvs: Index#SEC_Contents Contents]||[cvs: Index#Index Index]|</p>
</div>
This document was generated on <i>a sunny day</i> using [http://www.nongnu.org/texi2html/ <i>texi2html</i>].
