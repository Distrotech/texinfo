This is texinfo, produced by makeinfo version 4.13 from texinfo.texi.

This manual is for GNU Texinfo (version 4.2, 28 March 2002), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by the
     Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. Update info/dir entries.
* texi2dvi: (texinfo)Format with texi2dvi.      Print Texinfo documents.
* texindex: (texinfo)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo: (texinfo)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo,  Node: Print Glyph,  Next: Error Glyph,  Prev: expansion,  Up: Glyphs

13.9.4 `@print{}' (-|): Indicating Printed Output
-------------------------------------------------

Sometimes an expression will print output during its execution.  You can
indicate the printed output with the `@print{}' command.

  The `@print{}' command is displayed as `-|' in Info and similarly, as
a horizontal dash butting against a vertical bar, in the printed output.

  In the following example, the printed text is indicated with `-|', and
the value of the expression follows on the last line.

     (progn (print 'foo) (print 'bar))
          -| foo
          -| bar
          => bar

In a Texinfo source file, this example is written as follows:

     @lisp
     (progn (print 'foo) (print 'bar))
          @print{} foo
          @print{} bar
          @result{} bar
     @end lisp


File: texinfo,  Node: Error Glyph,  Next: Equivalence,  Prev: Print Glyph,  Up: Glyphs

13.9.5 `@error{}' (error-->): Indicating an Error Message
---------------------------------------------------------

A piece of code may cause an error when you evaluate it.  You can
designate the error message with the `@error{}' command.

  The `@error{}' command is displayed as `error-->' in Info and as the
word `error' in a box in the printed output.

  Thus,

     @lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end lisp

produces

     (+ 23 'x)
     error--> Wrong type argument: integer-or-marker-p, x

This indicates that the following error message is printed when you
evaluate the expression:

     Wrong type argument: integer-or-marker-p, x

  `error-->' itself is not part of the error message.


File: texinfo,  Node: Equivalence,  Next: Point Glyph,  Prev: Error Glyph,  Up: Glyphs

13.9.6 `@equiv{}' (==): Indicating Equivalence
----------------------------------------------

Sometimes two expressions produce identical results.  You can indicate
the exact equivalence of two forms with the `@equiv{}' command.

  The `@equiv{}' command is displayed as `==' in Info and as a three
parallel horizontal lines in the printed output.

  Thus,

     @lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end lisp

produces

     (make-sparse-keymap) == (list 'keymap)

This indicates that evaluating `(make-sparse-keymap)' produces identical
results to evaluating `(list 'keymap)'.


File: texinfo,  Node: Point Glyph,  Prev: Equivalence,  Up: Glyphs

13.9.7 `@point{}' (-!-): Indicating Point in a Buffer
-----------------------------------------------------

Sometimes you need to show an example of text in an Emacs buffer.  In
such examples, the convention is to include the entire contents of the
buffer in question between two lines of dashes containing the buffer
name.

  You can use the `@point{}' command to show the location of point in
the text in the buffer.  (The symbol for point, of course, is not part
of the text in the buffer; it indicates the place _between_ two
characters where point is located.)

  The `@point{}' command is displayed as `-!-' in Info and as a small
five pointed star in the printed output.

  The following example shows the contents of buffer `foo' before and
after evaluating a Lisp command to insert the word `changed'.

     ---------- Buffer: foo ----------
     This is the -!-contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
          => nil
     ---------- Buffer: foo ----------
     This is the changed -!-contents of foo.
     ---------- Buffer: foo ----------

  In a Texinfo source file, the example is written like this:

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
          @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo,  Node: Footnotes,  Next: Images,  Prev: Glyphs,  Up: Insertions

13.10 Footnotes
===============

A "footnote" is for a reference that documents or elucidates the primary
text.(1) (*note Footnotes-Footnote-1::)

* Menu:

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.


File: texinfo,  Node: Footnotes-Footnotes,  Up: Footnotes

  (1) A footnote should complement or expand upon the primary text, but a
reader should not need to read a footnote to understand the primary
text.  For a thorough discussion of footnotes, see `The Chicago Manual
of Style', which is published by the University of Chicago Press.


File: texinfo,  Node: Footnote Commands,  Next: Footnote Styles,  Up: Footnotes

13.10.1 Footnote Commands
-------------------------

In Texinfo, footnotes are created with the `@footnote' command.  This
command is followed immediately by a left brace, then by the text of the
footnote, and then by a terminating right brace.  Footnotes may be of
any length (they will be broken across pages if necessary), but are
usually short.  The template is:

     ordinary text@footnote{TEXT OF FOOTNOTE}

  As shown here, the `@footnote' command should come right after the
text being footnoted, with no intervening space; otherwise, the footnote
marker might end up starting a line.

  For example, this clause is followed by a sample footnote(1) (*note
Footnote Commands-Footnote-1::); in the Texinfo source, it looks like
this:

     ...a sample footnote@footnote{Here is the sample
     footnote.}; in the Texinfo source...

  As you can see, the source includes two punctuation marks next to each
other; in this case, `.};' is the sequence.  This is normal (the first
ends the footnote and the second belongs to the sentence being
footnoted), so don't worry that it looks odd.

  In a printed manual or book, the reference mark for a footnote is a
small, superscripted number; the text of the footnote appears at the
bottom of the page, below a horizontal line.

  In Info, the reference mark for a footnote is a pair of parentheses
with the footnote number between them, like this: `(1)'.  The reference
mark is followed by a cross-reference link to the footnote's text.

  In the HTML output, footnote references are marked with a small,
superscripted number which is rendered as a hypertext link to the
footnote text.

  By the way, footnotes in the argument of an `@item' command for a
`@table' must be on the same line as the `@item' (as usual).  *Note
Two-column Tables::.


File: texinfo,  Node: Footnote Commands-Footnotes,  Up: Footnote Commands

  (1) Here is the sample footnote.


File: texinfo,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

13.10.2 Footnote Styles
-----------------------

Info has two footnote styles, which determine where the text of the
footnote is located:

   * In the `End' node style, all the footnotes for a single node are
     placed at the end of that node.  The footnotes are separated from
     the rest of the node by a line of dashes with the word `Footnotes'
     within it.  Each footnote begins with an `(N)' reference mark.

     Here is an example of a single footnote in the end of node style:

           --------- Footnotes ---------

          (1)  Here is a sample footnote.

   * In the `Separate' node style, all the footnotes for a single node
     are placed in an automatically constructed node of their own.  In
     this style, a "footnote reference" follows each `(N)' reference
     mark in the body of the node.  The footnote reference is actually a
     cross reference which you use to reach the footnote node.

     The name of the node with the footnotes is constructed by appending
     `-Footnotes' to the name of the node that contains the footnotes.
     (Consequently, the footnotes' node for the `Footnotes' node is
     `Footnotes-Footnotes'!)  The footnotes' node has an `Up' node
     pointer that leads back to its parent node.

     Here is how the first footnote in this manual looks after being
     formatted for Info in the separate node style:

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview

          (1) The first syllable of "Texinfo" is pronounced like "speck", not
          "hex". ...

  A Texinfo file may be formatted into an Info file with either footnote
style.

  Use the `@footnotestyle' command to specify an Info file's footnote
style.  Write this command at the beginning of a line followed by an
argument, either `end' for the end node style or `separate' for the
separate node style.

  For example,

     @footnotestyle end
or
     @footnotestyle separate

  Write an `@footnotestyle' command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  (If you include
the `@footnotestyle' command between the start-of-header and
end-of-header lines, the region formatting commands will format
footnotes as specified.)

  If you do not specify a footnote style, the formatting commands use
their default style.  Currently, `texinfo-format-buffer' and
`texinfo-format-region' use the `separate' style and `makeinfo' uses the
`end' style.

  This chapter contains two footnotes.


File: texinfo,  Node: Images,  Prev: Footnotes,  Up: Insertions

13.11 Inserting Images
======================

You can insert an image given in an external file with the `@image'
command:

     @image{FILENAME, [WIDTH], [HEIGHT], [ALTTEXT], [EXTENSION]}

  The FILENAME argument is mandatory, and must not have an extension,
because the different processors support different formats:
   * TeX reads the file `FILENAME.eps' (Encapsulated PostScript format).

   * PDFTeX reads `FILENAME.pdf' (Adobe's Portable Document Format).

   * `makeinfo' uses `FILENAME.txt' verbatim for Info output (more or
     less as if it was an `@example').

   * `makeinfo' uses the optional fifth argument to `@image' for the
     extension if you supply it.  For example:

          @image{foo,,,,xpm}

     will cause `makeinfo --html' to try `foo.xpm'.

     If you do not supply the optional fifth argument, `makeinfo
     ---html' first tries `FILENAME.png'; if that does not exist, it
     tries `FILENAME.jpg'.  If that does not exist either, it complains.
     (We cannot support GIF format directly due to software patents.)

  The optional WIDTH and HEIGHT arguments specify the size to scale the
image to (they are ignored for Info output).  If neither is specified,
the image is presented in its natural size (given in the file); if only
one is specified, the other is scaled proportionately; and if both are
specified, both are respected, thus possibly distorting the original
image by changing its aspect ratio.

  The WIDTH and HEIGHT may be specified using any valid TeX dimension,
namely:

pt
     point (72.27pt = 1in)

pc
     pica (1pc = 12pt)

bp
     big point (72bp = 1in)

in
     inch

cm
     centimeter (2.54cm = 1in)

mm
     millimeter (10mm = 1cm)

dd
     dido^t point (1157dd = 1238pt)

cc
     cicero (1cc = 12dd)

sp
     scaled point (65536sp = 1pt)

  For example, the following will scale a file `ridt.eps' to one inch
vertically, with the width scaled proportionately:

     @image{ridt,,1in}

  For `@image' to work with TeX, the file `epsf.tex' must be installed
somewhere that TeX can find it.  (The standard location is
`TEXMF/tex/generic/dvips/epsf.tex', where TEXMF is a root of your TeX
directory tree.)  This file is included in the Texinfo distribution and
is also available from `ftp://tug.org/tex/epsf.tex', among other places.

  `@image' can be used within a line as well as for displayed figures.
Therefore, if you intend it to be displayed, be sure to leave a blank
line before the command, or the output will run into the preceding text.

  When producing html, `makeinfo' sets the "alt attribute" for inline
images to the optional fourth argument to `@image', if supplied.  If not
supplied, `makeinfo' uses the full file name of the image being
displayed.


File: texinfo,  Node: Breaks,  Next: Definition Commands,  Prev: Insertions,  Up: Top

14 Making and Preventing Breaks
*******************************

Usually, a Texinfo file is processed both by TeX and by one of the Info
formatting commands.  Line, paragraph, or page breaks sometimes occur in
the `wrong' place in one or other form of output.  You must ensure that
text looks right both in the printed manual and in the Info file.

  For example, in a printed manual, page breaks may occur awkwardly in
the middle of an example; to prevent this, you can hold text together
using a grouping command that keeps the text from being split across two
pages.  Conversely, you may want to force a page break where none would
occur normally.  Fortunately, problems like these do not often arise.
When they do, use the break, break prevention, or pagination commands.

* Menu:

* Break Commands::              Cause and prevent splits.
* Line Breaks::                 How to force a single line to use two lines.
* - and hyphenation::           How to tell TeX about hyphenation points.
* w::                           How to prevent unwanted line breaks.
* sp::                          How to insert blank lines.
* page::                        How to force the start of a new page.
* group::                       How to prevent unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.


File: texinfo,  Node: Break Commands,  Next: Line Breaks,  Prev: Breaks,  Up: Breaks

Break Commands
==============

The break commands create or allow line and paragraph breaks:

`@*'
     Force a line break.

`@sp N'
     Skip N blank lines.

`@-'
     Insert a discretionary hyphen.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Define hyphen points in HY-PHEN-A-TED WORDS.

  The line-break-prevention command holds text together all on one line:

`@w{TEXT}'
     Prevent TEXT from being split and hyphenated across two lines.

  The pagination commands apply only to printed output, since Info files
do not have pages.

`@page'
     Start a new page in the printed manual.

`@group'
     Hold text together that must appear on one printed page.

`@need MILS'
     Start a new printed page if not enough space on this one.


File: texinfo,  Node: Line Breaks,  Next: - and hyphenation,  Up: Breaks

14.1 `@*': Generate Line Breaks
===============================

The `@*' command forces a line break in both the printed manual and in
Info.

  For example,

     This line @* is broken @*in two places.

produces

     This line
      is broken
     in two places.

(Note that the space after the first `@*' command is faithfully carried
down to the next line.)

  The `@*' command is often used in a file's copyright page:

     This is edition 2.0 of the Texinfo documentation,@*
     and is for ...

In this case, the `@*' command keeps TeX from stretching the line across
the whole page in an ugly manner.

     *Please note:* Do not write braces after an `@*' command; they are
     not needed.

     Do not write an `@refill' command at the end of a paragraph
     containing an `@*' command; it will cause the paragraph to be
     refilled after the line break occurs, negating the effect of the
     line break.


File: texinfo,  Node: - and hyphenation,  Next: w,  Prev: Line Breaks,  Up: Breaks

14.2 `@-' and `@hyphenation': Helping TeX hyphenate
===================================================

Although TeX's hyphenation algorithm is generally pretty good, it does
miss useful hyphenation points from time to time.  (Or, far more rarely,
insert an incorrect hyphenation.)  So, for documents with an unusual
vocabulary or when fine-tuning for a printed edition, you may wish to
help TeX out.  Texinfo supports two commands for this:

`@-'
     Insert a discretionary hyphen, i.e., a place where TeX can (but
     does not have to) hyphenate.  This is especially useful when you
     notice an overfull hbox is due to TeX missing a hyphenation (*note
     Overfull hboxes::).  TeX will not insert any hyphenation points
     itself into a word containing `@-'.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Tell TeX how to hyphenate HY-PHEN-A-TED WORDS.  As shown, you put a
     `-' at each hyphenation point.  For example:

          @hyphenation{man-u-script man-u-scripts}

     TeX only uses the specified hyphenation points when the words match
     exactly, so give all necessary variants.

  Info output is not hyphenated, so these commands have no effect there.


File: texinfo,  Node: w,  Next: sp,  Prev: - and hyphenation,  Up: Breaks

14.3 `@w'{TEXT}: Prevent Line Breaks
====================================

`@w{TEXT}' outputs TEXT and prohibits line breaks within TEXT.

  You can use the `@w' command to prevent TeX from automatically
hyphenating a long name or phrase that happens to fall near the end of a
line.  For example:

     You can copy GNU software from @w{@samp{ftp.gnu.org}}.

produces

     You can copy GNU software from `ftp.gnu.org'.

  You can also use `@w' to produce a non-breakable space:

     None of the formatters will break at this@w{ }space.


File: texinfo,  Node: sp,  Next: page,  Prev: w,  Up: Breaks

14.4 `@sp' N: Insert Blank Lines
================================

A line beginning with and containing only `@sp N' generates N blank
lines of space in both the printed manual and the Info file.  `@sp' also
forces a paragraph break.  For example,

     @sp 2

generates two blank lines.

  The `@sp' command is most often used in the title page.


File: texinfo,  Node: page,  Next: group,  Prev: sp,  Up: Breaks

14.5 `@page': Start a New Page
==============================

A line containing only `@page' starts a new page in a printed manual.
The command has no effect on Info files since they are not paginated.
An `@page' command is often used in the `@titlepage' section of a
Texinfo file to start the copyright page.


File: texinfo,  Node: group,  Next: need,  Prev: page,  Up: Breaks

14.6 `@group': Prevent Page Breaks
==================================

The `@group' command (on a line by itself) is used inside an `@example'
or similar construct to begin an unsplittable vertical group, which will
appear entirely on one page in the printed output.  The group is
terminated by a line containing only `@end group'.  These two lines
produce no output of their own, and in the Info file output they have no
effect at all.

  Although `@group' would make sense conceptually in a wide variety of
contexts, its current implementation works reliably only within
`@example' and variants, and within `@display', `@format', `@flushleft'
and `@flushright'.  *Note Quotations and Examples::.  (What all these
commands have in common is that each line of input produces a line of
output.)  In other contexts, `@group' can cause anomalous vertical
spacing.

  This formatting requirement means that you should write:

     @example
     @group
     ...
     @end group
     @end example

with the `@group' and `@end group' commands inside the `@example' and
`@end example' commands.

  The `@group' command is most often used to hold an example together on
one page.  In this Texinfo manual, more than 100 examples contain text
that is enclosed between `@group' and `@end group'.

  If you forget to end a group, you may get strange and unfathomable
error messages when you run TeX.  This is because TeX keeps trying to
put the rest of the Texinfo file onto the one page and does not start to
generate error messages until it has processed considerable text.  It is
a good rule of thumb to look for a missing `@end group' if you get
incomprehensible error messages in TeX.


File: texinfo,  Node: need,  Prev: group,  Up: Breaks

14.7 `@need MILS': Prevent Page Breaks
======================================

A line containing only `@need N' starts a new page in a printed manual
if fewer than N mils (thousandths of an inch) remain on the current
page.  Do not use braces around the argument N.  The `@need' command has
no effect on Info files since they are not paginated.

  This paragraph is preceded by an `@need' command that tells TeX to
start a new page if fewer than 800 mils (eight-tenths inch) remain on
the page.  It looks like this:

     @need 800
     This paragraph is preceded by ...

  The `@need' command is useful for preventing orphans (single lines at
the bottoms of printed pages).


File: texinfo,  Node: Definition Commands,  Next: Conditionals,  Prev: Breaks,  Up: Top

15 Definition Commands
**********************

The `@deffn' command and the other "definition commands" enable you to
describe functions, variables, macros, commands, user options, special
forms and other such artifacts in a uniform format.

  In the Info file, a definition causes the entity category--`Function',
`Variable', or whatever--to appear at the beginning of the first line of
the definition, followed by the entity's name and arguments.  In the
printed manual, the command causes TeX to print the entity's name and
its arguments on the left margin and print the category next to the
right margin.  In both output formats, the body of the definition is
indented.  Also, the name of the entity is entered into the appropriate
index: `@deffn' enters the name into the index of functions, `@defvr'
enters it into the index of variables, and so on.

  A manual need not and should not contain more than one definition for
a given name.  An appendix containing a summary should use `@table'
rather than the definition commands.

* Menu:

* Def Cmd Template::            How to structure a description using a
                                  definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::  


File: texinfo,  Node: Def Cmd Template,  Next: Optional Arguments,  Prev: Definition Commands,  Up: Definition Commands

15.1 The Template for a Definition
==================================

The `@deffn' command is used for definitions of entities that resemble
functions.  To write a definition using the `@deffn' command, write the
`@deffn' command at the beginning of a line and follow it on the same
line by the category of the entity, the name of the entity itself, and
its arguments (if any).  Then write the body of the definition on
succeeding lines.  (You may embed examples in the body.)  Finally, end
the definition with an `@end deffn' command written on a line of its
own.  (The other definition commands follow the same format.)

  The template for a definition looks like this:

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

For example,

     @deffn Command forward-word count
     This command moves point forward @var{count} words
     (or backward if @var{count} is negative). ...
     @end deffn

produces

      -- Command: forward-word count
          This function moves point forward COUNT words (or backward if
          COUNT is negative). ...

  Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase `Interactive Command', write
braces around it.  For example:

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

Otherwise, the second word will be mistaken for the name of the entity.

  Some of the definition commands are more general than others.  The
`@deffn' command, for example, is the general definition command for
functions and the like--for entities that may take arguments.  When you
use this command, you specify the category to which the entity belongs.
The `@deffn' command possesses three predefined, specialized variations,
`@defun', `@defmac', and `@defspec', that specify the category for you:
"Function", "Macro", and "Special Form" respectively.  (In Lisp, a
special form is an entity much like a function.)  The `@defvr' command
also is accompanied by several predefined, specialized variations for
describing particular kinds of variables.

  The template for a specialized definition, such as `@defun', is
similar to the template for a generalized definition, except that you do
not need to specify the category:

     @defun NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end defun

Thus,

     @defun buffer-end flag
     This function returns @code{(point-min)} if @var{flag}
     is less than 1, @code{(point-max)} otherwise.
     ...
     @end defun

produces

      -- Function: buffer-end flag
          This function returns `(point-min)' if FLAG is less than 1,
          `(point-max)' otherwise.  ...

*Note Sample Function Definition: Sample Function Definition, for a more
detailed example of a function definition, including the use of
`@example' inside the definition.

  The other specialized commands work like `@defun'.

  Note that, due to implementation difficulties, macros are not expanded
in `@deffn' and all the other definition commands.


File: texinfo,  Node: Optional Arguments,  Next: deffnx,  Prev: Def Cmd Template,  Up: Definition Commands

15.2 Optional and Repeated Arguments
====================================

Some entities take optional or repeated arguments, which may be
specified by a distinctive glyph that uses square brackets and ellipses.
For example, a special form often breaks its argument list into separate
arguments in more complicated ways than a straightforward function.

  An argument enclosed within square brackets is optional.  Thus,
[OPTIONAL-ARG] means that OPTIONAL-ARG is optional.  An argument
followed by an ellipsis is optional and may be repeated more than once.
Thus, REPEATED-ARGS... stands for zero or more arguments.  Parentheses
are used when several arguments are grouped into additional levels of
list structure in Lisp.

  Here is the `@defspec' line of an example of an imaginary special
form:

      -- Special Form: foobar (VAR [FROM TO [INC]]) BODY...

In this example, the arguments FROM and TO are optional, but must both
be present or both absent.  If they are present, INC may optionally be
specified as well.  These arguments are grouped with the argument VAR
into a list, to distinguish them from BODY, which includes all remaining
elements of the form.

  In a Texinfo source file, this `@defspec' line is written like this
(except it would not be split over two lines, as it is in this example).

     @defspec foobar (@var{var} [@var{from} @var{to}
          [@var{inc}]]) @var{body}@dots{}

The function is listed in the Command and Variable Index under `foobar'.


File: texinfo,  Node: deffnx,  Next: Def Cmds in Detail,  Prev: Optional Arguments,  Up: Definition Commands

15.3 Two or More `First' Lines
==============================

To create two or more `first' or header lines for a definition, follow
the first `@deffn' line by a line beginning with `@deffnx'.  The
`@deffnx' command works exactly like `@deffn' except that it does not
generate extra vertical white space between it and the preceding line.

  For example,

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     These two search commands are similar except ...
     @end deffn

produces

 -- Interactive Command: isearch-forward
 -- Interactive Command: isearch-backward
     These two search commands are similar except ...

  Each definition command has an `x' form: `@defunx', `@defvrx',
`@deftypefunx', etc.

  The `x' forms work just like `@itemx'; see *note `@itemx': itemx.


File: texinfo,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: deffnx,  Up: Definition Commands

15.4 The Definition Commands
============================

Texinfo provides more than a dozen definition commands, all of which are
described in this section.

  The definition commands automatically enter the name of the entity in
the appropriate index: for example, `@deffn', `@defun', and `@defmac'
enter function names in the index of functions; `@defvr' and `@defvar'
enter variable names in the index of variables.

  Although the examples that follow mostly illustrate Lisp, the commands
can be used for other programming languages.

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.


File: texinfo,  Node: Functions Commands,  Next: Variables Commands,  Prev: Def Cmds in Detail,  Up: Def Cmds in Detail

15.4.1 Functions and Similar Entities
-------------------------------------

This section describes the commands for describing functions and similar
entities:

`@deffn CATEGORY NAME ARGUMENTS...'
     The `@deffn' command is the general definition command for
     functions, interactive commands, and similar entities that may take
     arguments.  You must choose a term to describe the category of
     entity being defined; for example, "Function" could be used if the
     entity is a function.  The `@deffn' command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, the name of this particular
     entity, and its arguments, if any.  Terminate the definition with
     `@end deffn' on a line of its own.

     For example, here is a definition:

          @deffn Command forward-char nchars
          Move point forward @var{nchars} characters.
          @end deffn

     This shows a rather terse definition for a "command" named
     `forward-char' with one argument, NCHARS.

     `@deffn' prints argument names such as NCHARS in italics or upper
     case, as if `@var' had been used, because we think of these names
     as metasyntactic variables--they stand for the actual argument
     values.  Within the text of the description, write an argument name
     explicitly with `@var' to refer to the value of the argument.  In
     the example above, we used `@var{nchars}' in this way.

     The template for `@deffn' is:

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     The `@defun' command is the definition command for functions.
     `@defun' is equivalent to `@deffn Function ...'.

     For example,

          @defun set symbol new-value
          Change the value of the symbol @var{symbol}
          to @var{new-value}.
          @end defun

     shows a rather terse definition for a function `set' whose
     arguments are SYMBOL and NEW-VALUE.  The argument names on the
     `@defun' line automatically appear in italics or upper case as if
     they were enclosed in `@var'.  Terminate the definition with `@end
     defun' on a line of its own.

     The template is:

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

     `@defun' creates an entry in the index of functions.

`@defmac NAME ARGUMENTS...'
     The `@defmac' command is the definition command for macros.
     `@defmac' is equivalent to `@deffn Macro ...' and works like
     `@defun'.

`@defspec NAME ARGUMENTS...'
     The `@defspec' command is the definition command for special forms.
     (In Lisp, a special form is an entity much like a function, *note
     Special Forms: (elisp)Special Forms..)  `@defspec' is equivalent to
     `@deffn {Special Form} ...' and works like `@defun'.


File: texinfo,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

15.4.2 Variables and Similar Entities
-------------------------------------

Here are the commands for defining variables and similar entities:

`@defvr CATEGORY NAME'
     The `@defvr' command is a general definition command for something
     like a variable--an entity that records a value.  You must choose a
     term to describe the category of entity being defined; for example,
     "Variable" could be used if the entity is a variable.  Write the
     `@defvr' command at the beginning of a line and follow it on the
     same line by the category of the entity and the name of the entity.

     Capitalize the category name like a title.  If the name of the
     category contains spaces, as in the name "User Option", enclose it
     in braces.  Otherwise, the second word will be mistaken for the
     name of the entity.  For example,

          @defvr {User Option} fill-column
          This buffer-local variable specifies
          the maximum width of filled lines.
          ...
          @end defvr

     Terminate the definition with `@end defvr' on a line of its own.

     The template is:

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr' creates an entry in the index of variables for NAME.

`@defvar NAME'
     The `@defvar' command is the definition command for variables.
     `@defvar' is equivalent to `@defvr Variable ...'.

     For example:

          @defvar kill-ring
          ...
          @end defvar

     The template is:

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar' creates an entry in the index of variables for NAME.

`@defopt NAME'
     The `@defopt' command is the definition command for "user options",
     i.e., variables intended for users to change according to taste;
     Emacs has many such (*note Variables: (emacs)Variables.).
     `@defopt' is equivalent to `@defvr {User Option} ...' and works
     like `@defvar'.


File: texinfo,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

15.4.3 Functions in Typed Languages
-----------------------------------

The `@deftypefn' command and its variations are for describing functions
in languages in which you must declare types of variables and functions,
such as C and C++.

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefn' command is the general definition command for
     functions and similar entities that may take arguments and that are
     typed.  The `@deftypefn' command is written at the beginning of a
     line and is followed on the same line by the category of entity
     being described, the type of the returned value, the name of this
     particular entity, and its arguments, if any.

     For example,

          @deftypefn {Library Function} int foobar
             (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     (where the text before the "...", shown above as two lines, would
     actually be a single line in a real Texinfo file) produces the
     following in Info:

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     This means that `foobar' is a "library function" that returns an
     `int', and its arguments are FOO (an `int') and BAR (a `float').

     The argument names that you write in `@deftypefn' are not subject
     to an implicit `@var'--since the actual names of the arguments in
     `@deftypefn' are typically scattered among data type names and
     keywords, Texinfo cannot find them without help.  Instead, you must
     write `@var' explicitly around the argument names.  In the example
     above, the argument names are `foo' and `bar'.

     The template for `@deftypefn' is:

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     Note that if the CATEGORY or DATA TYPE is more than one word then
     it must be enclosed in braces to make it a single argument.

     If you are describing a procedure in a language that has packages,
     such as Ada, you might consider using `@deftypefn' in a manner
     somewhat contrary to the convention described in the preceding
     paragraphs.

     For example:

          @deftypefn stacks private push
                  (@var{s}:in out stack;
                  @var{n}:in integer)
          ...
          @end deftypefn

     (The `@deftypefn' arguments are shown split into three lines, but
     would be a single line in a real Texinfo file.)

     In this instance, the procedure is classified as belonging to the
     package `stacks' rather than classified as a `procedure' and its
     data type is described as `private'.  (The name of the procedure is
     `push', and its arguments are S and N.)

     `@deftypefn' creates an entry in the index of functions for NAME.

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefun' command is the specialized definition command for
     functions in typed languages.  The command is equivalent to
     `@deftypefn Function ...'.

     Thus,

          @deftypefun int foobar (int @var{foo}, float @var{bar})
          ...
          @end deftypefun

     produces the following in Info:

          -- Function: int foobar (int FOO, float BAR)
          ...

     The template is:

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun' creates an entry in the index of functions for NAME.


File: texinfo,  Node: Typed Variables,  Next: Abstract Objects,  Prev: Typed Functions,  Up: Def Cmds in Detail

15.4.4 Variables in Typed Languages
-----------------------------------

Variables in typed languages are handled in a manner similar to
functions in typed languages.  *Note Typed Functions::.  The general
definition command `@deftypevr' corresponds to `@deftypefn' and the
specialized definition command `@deftypevar' corresponds to
`@deftypefun'.

`@deftypevr CATEGORY DATA-TYPE NAME'
     The `@deftypevr' command is the general definition command for
     something like a variable in a typed language--an entity that
     records a value.  You must choose a term to describe the category
     of the entity being defined; for example, "Variable" could be used
     if the entity is a variable.

     The `@deftypevr' command is written at the beginning of a line and
     is followed on the same line by the category of the entity being
     described, the data type, and the name of this particular entity.

     For example:

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     produces the following in Info:

          -- Global Flag: int enable
          ...

     The template is:

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

     `@deftypevr' creates an entry in the index of variables for NAME.

`@deftypevar DATA-TYPE NAME'
     The `@deftypevar' command is the specialized definition command for
     variables in typed languages.  `@deftypevar' is equivalent to
     `@deftypevr Variable ...'.

     For example:

          @deftypevar int fubar
          ...
          @end deftypevar

     produces the following in Info:

          -- Variable: int fubar
          ...

     The template is:

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

     `@deftypevar' creates an entry in the index of variables for NAME.


File: texinfo,  Node: Abstract Objects,  Next: Data Types,  Prev: Typed Variables,  Up: Def Cmds in Detail

15.4.5 Object-Oriented Programming
----------------------------------

Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is a
defined type of abstract object.  An instance of a class is a particular
object that has the type of the class.  An instance variable is a
variable that belongs to the class but for which each instance has its
own value.

  In a definition, if the name of a class is truly a name defined in the
programming system for a class, then you should write an `@code' around
it.  Otherwise, it is printed in the usual text font.

`@defcv CATEGORY CLASS NAME'
     The `@defcv' command is the general definition command for
     variables associated with classes in object-oriented programming.
     The `@defcv' command is followed by three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  Thus,

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     illustrates how you would write the first line of a definition of
     the `border-pattern' class option of the class `Window'.

     The template is:

          @defcv CATEGORY CLASS NAME
          ...
          @end defcv

     `@defcv' creates an entry in the index of variables.

`@defivar CLASS NAME'
     The `@defivar' command is the definition command for instance
     variables in object-oriented programming.  `@defivar' is equivalent
     to `@defcv {Instance Variable} ...'

     The template is:

          @defivar CLASS INSTANCE-VARIABLE-NAME
          BODY-OF-DEFINITION
          @end defivar

     `@defivar' creates an entry in the index of variables.

`@deftypeivar CLASS DATA-TYPE NAME'
     The `@deftypeivar' command is the definition command for typed
     instance variables in object-oriented programming.  It is similar
     to `@defivar' with the addition of the DATA-TYPE parameter to
     specify the type of the instance variable.  `@deftypeivar' creates
     an entry in the index of variables.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     The `@defop' command is the general definition command for entities
     that may resemble methods in object-oriented programming.  These
     entities take arguments, as functions do, but are associated with
     particular classes of objects.

     For example, some systems have constructs called "wrappers" that
     are associated with classes as methods are, but that act more like
     macros than like functions.  You could use `@defop Wrapper' to
     describe one of these.

     Sometimes it is useful to distinguish methods and "operations".
     You can think of an operation as the specification for a method.
     Thus, a window system might specify that all window classes have a
     method named `expose'; we would say that this window system defines
     an `expose' operation on windows in general.  Typically, the
     operation has a name and also specifies the pattern of arguments;
     all methods that implement the operation must accept the same
     arguments, since applications that use the operation do so without
     knowing which method will implement it.

     Often it makes more sense to document operations than methods.  For
     example, window application developers need to know about the
     `expose' operation, but need not be concerned with whether a given
     class of windows has its own method to implement this operation.
     To describe this operation, you would write:

          @defop Operation windows expose

     The `@defop' command is written at the beginning of a line and is
     followed on the same line by the overall name of the category of
     operation, the name of the class of the operation, the name of the
     operation, and its arguments, if any.

     The template is:

          @defop CATEGORY CLASS NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defop

     `@defop' creates an entry, such as ``expose' on `windows'', in the
     index of functions.

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     The `@deftypeop' command is the definition command for typed
     operations in object-oriented programming.  It is similar to
     `@defop' with the addition of the DATA-TYPE parameter to specify
     the return type of the method.  `@deftypeop' creates an entry in
     the index of functions.

`@defmethod CLASS NAME ARGUMENTS...'
     The `@defmethod' command is the definition command for methods in
     object-oriented programming.  A method is a kind of function that
     implements an operation for a particular class of objects and its
     subclasses.

     `@defmethod' is equivalent to `@defop Method ...'.  The command is
     written at the beginning of a line and is followed by the name of
     the class of the method, the name of the method, and its arguments,
     if any.

     For example:

          @defmethod `bar-class' bar-method argument
          ...
          @end defmethod

     illustrates the definition for a method called `bar-method' of the
     class `bar-class'.  The method takes an argument.

     The template is:

          @defmethod CLASS METHOD-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defmethod

     `@defmethod' creates an entry, such as ``bar-method' on
     `bar-class'', in the index of functions.

`@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...'
     The `@deftypemethod' command is the definition command for methods
     in object-oriented typed languages, such as C++ and Java.  It is
     similar to the `@defmethod' command with the addition of the
     DATA-TYPE parameter to specify the return type of the method.


File: texinfo,  Node: Data Types,  Prev: Abstract Objects,  Up: Def Cmds in Detail

15.4.6 Data Types
-----------------

Here is the command for data types:

`@deftp CATEGORY NAME ATTRIBUTES...'
     The `@deftp' command is the generic definition command for data
     types.  The command is written at the beginning of a line and is
     followed on the same line by the category, by the name of the type
     (which is a word like `int' or `float'), and then by names of
     attributes of objects of that type.  Thus, you could use this
     command for describing `int' or `float', in which case you could
     use `data type' as the category.  (A data type is a category of
     certain objects for purposes of deciding which operations can be
     performed on them.)

     In Lisp, for example,  "pair" names a particular data type, and an
     object of that type has two slots called the CAR and the CDR.  Here
     is how you would write the first line of a definition of `pair'.

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     The template is:

          @deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...
          BODY-OF-DEFINITION
          @end deftp

     `@deftp' creates an entry in the index of data types.


File: texinfo,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Def Cmds in Detail,  Up: Definition Commands

15.5 Conventions for Writing Definitions
========================================

When you write a definition using `@deffn', `@defun', or one of the
other definition commands, please take care to use arguments that
indicate the meaning, as with the COUNT argument to the `forward-word'
function.  Also, if the name of an argument contains the name of a type,
such as INTEGER, take care that the argument actually is of that type.


File: texinfo,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

15.6 A Sample Function Definition
=================================

A function definition uses the `@defun' and `@end defun' commands.  The
name of the function follows immediately after the `@defun' command and
it is followed, on the same line, by the parameter list.

  Here is a definition from *note Calling Functions: (elisp)Calling
Functions.

      -- Function: apply function &rest arguments
          `apply' calls FUNCTION with ARGUMENTS, just like `funcall' but
          with one difference: the last of ARGUMENTS is a list of
          arguments to give to FUNCTION, rather than a single argument.
          We also say that this list is "appended" to the other
          arguments.

          `apply' returns the result of calling FUNCTION.  As with
          `funcall', FUNCTION must either be a Lisp function or a
          primitive function; special forms and macros do not make sense
          in `apply'.

               (setq f 'list)
                    => list
               (apply f 'x 'y 'z)
               error--> Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                    => 10
               (apply '+ '(1 2 3 4))
                    => 10

               (apply 'append '((a b c) nil (x y z) nil))
                    => (a b c x y z)

          An interesting example of using `apply' is found in the
          description of `mapcar'.

  In the Texinfo source file, this example looks like this:

     @defun apply function &rest arguments
     @code{apply} calls @var{function} with
     @var{arguments}, just like @code{funcall} but with one
     difference: the last of @var{arguments} is a list of
     arguments to give to @var{function}, rather than a single
     argument.  We also say that this list is @dfn{appended}
     to the other arguments.

     @code{apply} returns the result of calling
     @var{function}.  As with @code{funcall},
     @var{function} must either be a Lisp function or a
     primitive function; special forms and macros do not make
     sense in @code{apply}.

     @example
     (setq f 'list)
          @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
          @result{} 10
     (apply '+ '(1 2 3 4))
          @result{} 10

     (apply 'append '((a b c) nil (x y z) nil))
          @result{} (a b c x y z)
     @end example

     An interesting example of using @code{apply} is found
     in the description of @code{mapcar}.
     @end defun

In this manual, this function is listed in the Command and Variable
Index under `apply'.

  Ordinary variables and user options are described using a format like
that for functions except that variables do not take arguments.


File: texinfo,  Node: Conditionals,  Next: Internationalization,  Prev: Definition Commands,  Up: Top

16 Conditionally Visible Text
*****************************

Sometimes it is good to use different text for different output formats.
For example, you can use the "conditional commands" to specify different
text for the printed manual and the Info output.

  Conditional commands may not be nested.

  The conditional commands comprise the following categories.

   * Commands for HTML, Info, or TeX.

   * Commands for not HTML, Info, or TeX.

   * Raw TeX or HTML commands.

   * Substituting text for all formats, and testing if a flag is set or
     clear.

* Menu:

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.


File: texinfo,  Node: Conditional Commands,  Next: Conditional Not Commands,  Up: Conditionals

16.1 Conditional Commands
=========================

Texinfo has a pair of commands for each output format, to allow
conditional inclusion of text for a particular output format.

  `@ifinfo' begins segments of text that should be ignored by TeX when
it typesets the printed manual.  The segment of text appears only in the
Info file and (for historical compatibility) the plain text output.  The
`@ifinfo' command should appear on a line by itself; end the Info-only
text with a line containing `@end ifinfo' by itself.

  The `@iftex' and `@end iftex' commands are analogous to the `@ifinfo'
and `@end ifinfo' commands; they specify text that will appear in the
printed manual but not in the Info file.  Likewise for `@ifhtml' and
`@end ifhtml', which specify text to appear only in HTML output.  And
for `@ifplaintext' and `@end ifplaintext', which specify text to appear
only in plain text output.

  For example,

     @iftex
     This text will appear only in the printed manual.
     @end iftex
     @ifinfo
     However, this text will appear only in Info (or plain text).
     @end ifinfo
     @ifhtml
     And this text will only appear in HTML.
     @end ifhtml
     @ifplaintext
     Whereas this text will only appear in plain text.
     @end ifplaintext

The preceding example produces the following line: However, this text
will appear only in Info (or plain text).

Notice that you only see one of the input lines, depending on which
version of the manual you are reading.


File: texinfo,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

16.2 Conditional Not Commands
=============================

You can specify text to be included in any output format _other_ than
some given one with the `@ifnot...' commands:
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnotplaintext ... @end ifnotplaintext
     @ifnottex ... @end ifnottex
(The `@ifnot...' command and the `@end' command must appear on lines by
themselves in your actual source file.)

  If the output file is _not_ being made for the given format, the
region is included.  Otherwise, it is ignored.

  With one exception (for historical compatibility): `@ifnotinfo' text
is omitted for both Info and plain text output, not just Info.  To
specify text which appears only in Info and not in plain text, use
`@ifnotplaintext', like this:
     This will be in Info, but not plain text.

  The regions delimited by these commands are ordinary Texinfo source as
with `@iftex', not raw formatter source as with `@tex' (*note Raw
Formatter Commands::).


File: texinfo,  Node: Raw Formatter Commands,  Next: set clear value,  Prev: Conditional Not Commands,  Up: Conditionals

16.3 Raw Formatter Commands
===========================

Inside a region delineated by `@iftex' and `@end iftex', you can embed
some raw TeX commands.  Info will ignore these commands since they are
only in that part of the file which is seen by TeX.  You can write the
TeX commands as you would write them in a normal TeX file, except that
you must replace the `\' used by TeX with an `@'.  For example, in the
`@titlepage' section of a Texinfo file, you can use the TeX command
`@vskip' to format the copyright page.  (The `@titlepage' command causes
Info to ignore the region automatically, as it does with the `@iftex'
command.)

  However, many features of plain TeX will not work, as they are
overridden by Texinfo features.

  You can enter plain TeX completely, and use `\' in the TeX commands,
by delineating a region with the `@tex' and `@end tex' commands.  (The
`@tex' command also causes Info to ignore the region, like the `@iftex'
command.)  The sole exception is that the `@' character still introduces
a command, so that `@end tex' can be recognized properly.

  For example, here is a mathematical expression written in plain TeX:

     @tex
     $$ \chi^2 = \sum_{i=1}^N
               \left (y_i - (a + b x_i)
               \over \sigma_i\right)^2 $$
     @end tex

The output of this example will appear only in a printed manual.  If you
are reading this in Info, you will not see the equation that appears in
the printed manual.

  Analogously, you can use `@ifhtml ... @end ifhtml' to delimit a region
to be included in HTML output only, and `@html ...  @end html' for a
region of raw HTML (again, except that `@' is still the escape
character, so the `@end' command can be recognized.)


File: texinfo,  Node: set clear value,  Prev: Raw Formatter Commands,  Up: Conditionals

16.4 `@set', `@clear', and `@value'
===================================

You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the `@set', `@clear', `@ifset', and `@ifclear'
commands.

  Brief descriptions:

`@set FLAG [VALUE]'
     Set the variable FLAG, to the optional VALUE if specifed.

`@clear FLAG'
     Undefine the variable FLAG, whether or not it was previously
     defined.

`@ifset FLAG'
     If FLAG is set, text through the next `@end ifset' command is
     formatted.  If FLAG is clear, text through the following `@end
     ifset' command is ignored.

`@ifclear FLAG'
     If FLAG is set, text through the next `@end ifclear' command is
     ignored.  If FLAG is clear, text through the following `@end
     ifclear' command is formatted.

* Menu:

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.


File: texinfo,  Node: set value,  Next: ifset ifclear,  Up: set clear value

16.4.1 `@set' and `@value'
--------------------------

You use the `@set' command to specify a value for a flag, which is later
expanded by the `@value' command.

  A "flag" is an identifier.  In general, it is best to use only letters
and numerals in a flag name, not `-' or `_'--they will work in some
contexts, but not all, due to limitations in TeX.

  The value is the remainder of the input line, and can contain
anything.

  Write the `@set' command like this:

     @set foo This is a string.

This sets the value of the flag `foo' to "This is a string.".

  The Texinfo formatters then replace an `@value{FLAG}' command with the
string to which FLAG is set.  Thus, when `foo' is set as shown above,
the Texinfo formatters convert this:

     @value{foo}
to this:
     This is a string.

  You can write an `@value' command within a paragraph; but you must
write an `@set' command on a line of its own.

  If you write the `@set' command like this:

     @set foo

without specifying a string, the value of `foo' is the empty string.

  If you clear a previously set flag with `@clear FLAG', a subsequent
`@value{flag}' command will report an error.

  For example, if you set `foo' as follows:

     @set how-much very, very, very

then the formatters transform

     It is a @value{how-much} wet day.
into
     It is a very, very, very wet day.

  If you write

     @clear how-much

then the formatters transform

     It is a @value{how-much} wet day.
into
     It is a {No value for "how-much"} wet day.


File: texinfo,  Node: ifset ifclear,  Next: value Example,  Prev: set value,  Up: set clear value

16.4.2 `@ifset' and `@ifclear'
------------------------------

When a FLAG is set, the Texinfo formatting commands format text between
subsequent pairs of `@ifset FLAG' and `@end ifset' commands.  When the
FLAG is cleared, the Texinfo formatting commands do _not_ format the
text.  `@ifclear' operates analogously.

  Write the conditionally formatted text between `@ifset FLAG' and `@end
ifset' commands, like this:

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

  For example, you can create one document that has two variants, such
as a manual for a `large' and `small' model:

     You can use this machine to dig up shrubs
     without hurting them.

     @set large

     @ifset large
     It can also dig up fully grown trees.
     @end ifset

     Remember to replant promptly ...

In the example, the formatting commands will format the text between
`@ifset large' and `@end ifset' because the `large' flag is set.

  When FLAG is cleared, the Texinfo formatting commands do _not_ format
the text between `@ifset FLAG' and `@end ifset'; that text is ignored
and does not appear in either printed or Info output.

  For example, if you clear the flag of the preceding example by writing
an `@clear large' command after the `@set large' command (but before the
conditional text), then the Texinfo formatting commands ignore the text
between the `@ifset large' and `@end ifset' commands.  In the formatted
output, that text does not appear; in both printed and Info output, you
see only the lines that say, "You can use this machine to dig up shrubs
without hurting them.  Remember to replant promptly ...".

  If a flag is cleared with an `@clear FLAG' command, then the
formatting commands format text between subsequent pairs of `@ifclear'
and `@end ifclear' commands.  But if the flag is set with `@set FLAG',
then the formatting commands do _not_ format text between an `@ifclear'
and an `@end ifclear' command; rather, they ignore that text.  An
`@ifclear' command looks like this:

     @ifclear FLAG


File: texinfo,  Node: value Example,  Prev: ifset ifclear,  Up: set clear value

16.4.3 `@value' Example
-----------------------

You can use the `@value' command to minimize the number of places you
need to change when you record an update to a manual.  *Note GNU Sample
Texts::, for an example of this same principle can work with Automake
distributions, and full texts.

  Here is an example adapted from *note Overview: (make)Top.):

  1. Set the flags:

          @set EDITION 0.35 Beta
          @set VERSION 3.63 Beta
          @set UPDATED 14 August 1992
          @set UPDATE-MONTH August 1992

  2. Write text for the `@copying' section (*note copying::):

          @copying
          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.

          Copyright ...

          Permission is granted ...
          @end copying

  3. Write text for the title page, for people reading the printed
     manual:

          @titlepage
          @title GNU Make
          @subtitle A Program for Directing Recompilation
          @subtitle Edition @value{EDITION}, ...
          @subtitle @value{UPDATE-MONTH}
          @page
          @insertcopying
          ...
          @end titlepage

     (On a printed cover, a date listing the month and the year looks
     less fussy than a date listing the day as well as the month and
     year.)

  4. Write text for the Top node, for people reading the Info file:

          @ifnottex
          @node Top
          @top Make

          @insertcopying
          ...
          @end ifnottex

     After you format the manual, the `@value' constructs have been
     expanded, so the output contains text like this:

          This is Edition 0.35 Beta, last updated 14 August 1992,
          of `The GNU Make Manual', for `make', Version 3.63 Beta.

  When you update the manual, you change only the values of the flags;
you do not need to edit the three sections.


File: texinfo,  Node: Internationalization,  Next: Defining New Texinfo Commands,  Prev: Conditionals,  Up: Top

17 Internationalization
***********************

Texinfo has some support for writing in languages other than English,
although this area still needs considerable work.

  For a list of the various accented and special characters Texinfo
supports, see *note Inserting Accents::.

* Menu:

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.


File: texinfo,  Node: documentlanguage,  Next: documentencoding,  Up: Internationalization

17.1 `@documentlanguage CC': Set the Document Language
======================================================

The `@documentlanguage' command declares the current document language.
Write it on a line by itself, with a two-letter ISO-639 language code
following (list is included below).  If you have a multilingual
document, the intent is to be able to use this command multiple times,
to declare each language change.  If the command is not used at all, the
default is `en' for English.

  At present, this command is ignored in Info and HTML output.  For TeX,
it causes the file `txi-CC.tex' to be read (if it exists).  Such a file
appropriately redefines the various English words used in TeX output,
such as `Chapter', `See', and so on.

  It would be good if this command also changed TeX's ideas of the
current hyphenation patterns (via the TeX primitive `\language'), but
this is unfortunately not currently implemented.

  Hereare the valid language codes, from ISO-639.

`aa'  Afar                `ab'  Abkhazian           `af'  Afrikaans
`am'  Amharic             `ar'  Arabic              `as'  Assamese
`ay'  Aymara              `az'  Azerbaijani         `ba'  Bashkir
`be'  Byelorussian        `bg'  Bulgarian           `bh'  Bihari
`bi'  Bislama             `bn'  Bengali; Bangla     `bo'  Tibetan
`br'  Breton              `ca'  Catalan             `co'  Corsican
`cs'  Czech               `cy'  Welsh               `da'  Danish
`de'  German              `dz'  Bhutani             `el'  Greek
`en'  English             `eo'  Esperanto           `es'  Spanish
`et'  Estonian            `eu'  Basque              `fa'  Persian
`fi'  Finnish             `fj'  Fiji                `fo'  Faroese
`fr'  French              `fy'  Frisian             `ga'  Irish
`gd'  Scots Gaelic        `gl'  Galician            `gn'  Guarani
`gu'  Gujarati            `ha'  Hausa               `he'  Hebrew
`hi'  Hindi               `hr'  Croatian            `hu'  Hungarian
`hy'  Armenian            `ia'  Interlingua         `id'  Indonesian
`ie'  Interlingue         `ik'  Inupiak             `is'  Icelandic
`it'  Italian             `iu'  Inuktitut           `ja'  Japanese
`jw'  Javanese            `ka'  Georgian            `kk'  Kazakh
`kl'  Greenlandic         `km'  Cambodian           `kn'  Kannada
`ks'  Kashmiri            `ko'  Korean              `ku'  Kurdish
`ky'  Kirghiz             `la'  Latin               `ln'  Lingala
`lt'  Lithuanian          `lo'  Laothian            `lv'  Latvian, Lettish
`mg'  Malagasy            `mi'  Maori               `mk'  Macedonian
`ml'  Malayalam           `mn'  Mongolian           `mo'  Moldavian
`mr'  Marathi             `ms'  Malay               `mt'  Maltese
`my'  Burmese             `na'  Nauru               `ne'  Nepali
`nl'  Dutch               `no'  Norwegian           `oc'  Occitan
`om'  (Afan) Oromo        `or'  Oriya               `pa'  Punjabi
`pl'  Polish              `ps'  Pashto, Pushto      `pt'  Portuguese
`qu'  Quechua             `rm'  Rhaeto-Romance      `rn'  Kirundi
`ro'  Romanian            `ru'  Russian             `rw'  Kinyarwanda
`sa'  Sanskrit            `sd'  Sindhi              `sg'  Sangro
`sh'  Serbo-Croatian      `si'  Sinhalese           `sk'  Slovak
`sl'  Slovenian           `sm'  Samoan              `sn'  Shona
`so'  Somali              `sq'  Albanian            `sr'  Serbian
`ss'  Siswati             `st'  Sesotho             `su'  Sundanese
`sv'  Swedish             `sw'  Swahili             `ta'  Tamil
`te'  Telugu              `tg'  Tajik               `th'  Thai
`ti'  Tigrinya            `tk'  Turkmen             `tl'  Tagalog
`tn'  Setswana            `to'  Tonga               `tr'  Turkish
`ts'  Tsonga              `tt'  Tatar               `tw'  Twi
`ug'  Uighur              `uk'  Ukrainian           `ur'  Urdu
`uz'  Uzbek               `vi'  Vietnamese          `vo'  Volapuk
`wo'  Wolof               `xh'  Xhosa               `yi'  Yiddish
`yo'  Yoruba              `za'  Zhuang              `zh'  Chinese
`zu'  Zulu


File: texinfo,  Node: documentencoding,  Prev: documentlanguage,  Up: Internationalization

17.2 `@documentencoding ENC': Set Input Encoding
================================================

The `@documentencoding' command declares the input document encoding.
Write it on a line by itself, with a valid encoding specification
following, such as `ISO-8859-1'.

  At present, this is used only in HTML output from `makeinfo'.  If a
document encoding ENC is specified, it is used in a `<meta>' tag
included in the `<head>' of the output:

     <meta http-equiv="Content-Type" content="text/html;
           charset=ENC">


File: texinfo,  Node: Defining New Texinfo Commands,  Next: Hardcopy,  Prev: Internationalization,  Up: Top

18 Defining New Texinfo Commands
********************************

Texinfo provides several ways to define new commands:

   * A Texinfo "macro" allows you to define a new Texinfo command as any
     sequence of text and/or existing commands (including other macros).
     The macro can have any number of "parameters"--text you supply each
     time you use the macro.

     Incidentally, these macros have nothing to do with the `@defmac'
     command, which is for documenting macros in the subject of the
     manual (*note Def Cmd Template::).

   * `@alias' is a convenient way to define a new name for an existing
     command.

   * `@definfoenclose' allows you to define new commands with customized
     output in the Info file.

* Menu:

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.


File: texinfo,  Node: Defining Macros,  Next: Invoking Macros,  Up: Defining New Texinfo Commands

18.1 Defining Macros
====================

You use the Texinfo `@macro' command to define a macro, like this:

     @macro MACRONAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

  The "parameters" PARAM1, PARAM2, ... correspond to arguments supplied
when the macro is subsequently used in the document (described in the
next section).

  For a macro to work with TeX, MACRONAME must consist entirely of
letters: no digits, hyphens, underscores, or other special characters.

  If a macro needs no parameters, you can define it either with an empty
list (`@macro foo {}') or with no braces at all (`@macro foo').

  The definition or "body" of the macro can contain most Texinfo
commands, including previously-defined macros.  Not-yet-defined macro
invocations are not allowed; thus, it is not possible to have mutually
recursive Texinfo macros.  Also, a macro definition that defines another
macro does not work in TeX due to limitations in the design of `@macro'.

  In the macro body, instances of a parameter name surrounded by
backslashes, as in `\PARAM1\' in the example above, are replaced by the
corresponding argument from the macro invocation.  You can use parameter
names any number of times in the body, including zero.

  To get a single `\' in the macro expansion, use `\\'.  Any other use
of `\' in the body yields a warning.

  The newlines after the `@macro' line and before the `@end macro' line
are ignored, that is, not included in the macro body.  All other
whitespace is treated according to the usual Texinfo rules.

  To allow a macro to be used recursively, that is, in an argument to a
call to itself, you must define it with `@rmacro', like this:

     @rmacro rmac {arg}
     a\arg\b
     @end rmacro
     ...
     @rmac{1@rmac{text}2}

  This produces the output `a1atextb2b'.  With `@macro' instead of
`@rmacro', an error message is given.

  You can undefine a macro FOO with `@unmacro FOO'.  It is not an error
to undefine a macro that is already undefined.  For example:

     @unmacro foo


File: texinfo,  Node: Invoking Macros,  Next: Macro Details,  Prev: Defining Macros,  Up: Defining New Texinfo Commands

18.2 Invoking Macros
====================

After a macro is defined (see the previous section), you can use
("invoke") it in your document like this:

     @MACRONAME {ARG1, ARG2, ...}

and the result will be just as if you typed the body of MACRONAME at
that spot.  For example:

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

produces:

     Together: a & b.

  Thus, the arguments and parameters are separated by commas and
delimited by braces; any whitespace after (but not before) a comma is
ignored.  The braces are required in the invocation (but not the
definition), even when the macro takes no arguments, consistent with all
other Texinfo commands.  For example:

     @macro argless {}
     No arguments here.
     @end macro
     @argless{}

produces:

     No arguments here.

  To insert a comma, brace, or backslash in an argument, prepend a
backslash, as in

     @MACNAME {\\\{\}\,}

which will pass the (almost certainly error-producing) argument `\{},'
to MACNAME.  However, commas in parameters, even if escaped by a
backslash, might cause trouble in TeX.

  If the macro is defined to take a single argument, and is invoked
without any braces, the entire rest of the line after the macro name is
supplied as the argument.  For example:

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar aah

produces:

     Twice: aah & aah.

  If the macro is defined to take a single argument, and is invoked with
braces, the braced text is passed as the argument, regardless of commas.
For example:

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar{a,b}

produces:

     Twice: a,b & a,b.


File: texinfo,  Node: Macro Details,  Next: alias,  Prev: Invoking Macros,  Up: Defining New Texinfo Commands

18.3 Macro Details
==================

Due to unavoidable disparities in the TeX and `makeinfo'
implementations, Texinfo macros have the following limitations.

   * All macros are expanded inside at least one TeX group.  This means
     that `@set' and other such commands will have no effect inside a
     macro.

   * Macros containing a command which must be on a line by itself, such
     as a conditional, cannot be invoked in the middle of a line.

   * Commas in macro arguments, even if escaped by a backslash, don't
     always work.

   * The TeX implementation cannot construct macros that define macros
     in the natural way.  To do this, you must use conditionals and raw
     TeX.  For example:

          @ifnottex
          @macro ctor {name, arg}
          @macro \name\
          something involving \arg\ somehow
          @end macro
          @end macro
          @end ifnottex
          @tex
          \gdef\ctor#1{\ctorx#1,}
          \gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
          @end tex

   * It is best to avoid comments inside macro definitions.

  If some macro feature causes errors when producing the printed version
of a manual, try expanding the macros with `makeinfo' by invoking
`texi2dvi' with the `-e' option; see *note Format with texi2dvi::.


File: texinfo,  Node: alias,  Next: definfoenclose,  Prev: Macro Details,  Up: Defining New Texinfo Commands

18.4 `@alias NEW=EXISTING'
==========================

The `@alias' command defines a new command to be just like an existing
one.  This is useful for defining additional markup names, thus
preserving semantic information in the input even though the output
result may be the same.

  Write the `@alias' command on a line by itself, followed by the new
command name, an equals sign, and the existing command name.  Whitespace
around the equals sign is ignored.  Thus:
     @alias NEW = EXISTING

  For example, if your document contains citations for both books and
some other media (movies, for example), you might like to define a macro
`@moviecite{}' that does the same thing as an ordinary `@cite{}' but
conveys the extra semantic information as well.  You'd do this as
follows:

     @alias moviecite = cite

  Macros do not always have the same effect due to vagaries of argument
parsing.  Also, aliases are much simpler to define than macros.  So the
command is not redundant.  (It was also heavily used in the Jargon
File!)

  Aliases must not be recursive, directly or indirectly.


File: texinfo,  Node: definfoenclose,  Prev: alias,  Up: Defining New Texinfo Commands

18.5 `definfoenclose': Customized Highlighting
==============================================

A `@definfoenclose' command may be used to define a highlighting command
for Info, but not for TeX.  A command defined using `@definfoenclose'
marks text by enclosing it in strings that precede and follow the text.
You can use this to get closer control of your Info output.

  Presumably, if you define a command with `@definfoenclose' for Info,
you will create a corresponding command for TeX, either in
`texinfo.tex', `texinfo.cnf', or within an `@iftex' in your document.

  Write a `@definfoenclose' command on a line and follow it with three
arguments separated by commas.  The first argument to `@definfoenclose'
is the @-command name (without the `@'); the second argument is the Info
start delimiter string; and the third argument is the Info end delimiter
string.  The latter two arguments enclose the highlighted text in the
Info file.  A delimiter string may contain spaces.  Neither the start
nor end delimiter is required.  If you do not want a start delimiter but
do want an end delimiter, you must follow the command name with two
commas in a row; otherwise, the Info formatting commands will naturally
misinterpret the end delimiter string you intended as the start
delimiter string.

  If you do a `@definfoenclose' on the name of a pre-defined macro (such
as `@emph', `@strong', `@t', or `@i'), the enclosure definition will
override the built-in definition.

  An enclosure command defined this way takes one argument in braces;
this is intended for new markup commands (*note Marking Text::).

  For example, you can write:

     @definfoenclose phoo,//,\\

near the beginning of a Texinfo file to define `@phoo' as an Info
formatting command that inserts `//' before and `\\' after the argument
to `@phoo'.  You can then write `@phoo{bar}' wherever you want `//bar\\'
highlighted in Info.

  Also, for TeX formatting, you could write

     @iftex
     @global@let@phoo=@i
     @end iftex

to define `@phoo' as a command that causes TeX to typeset the argument
to `@phoo' in italics.

  Each definition applies to its own formatter: one for TeX, the other
for `texinfo-format-buffer' or `texinfo-format-region'.  The
`@definfoenclose' command need not be within `@ifinfo', but the raw TeX
commands do need to be in `@iftex'.

  Here is another example: write

     @definfoenclose headword, , :

near the beginning of the file, to define `@headword' as an Info
formatting command that inserts nothing before and a colon after the
argument to `@headword'.

  `@definfoenclose' definitions must not be recursive, directly or
indirectly.


File: texinfo,  Node: Hardcopy,  Next: Creating and Installing Info Files,  Prev: Defining New Texinfo Commands,  Up: Top

19 Formatting and Printing Hardcopy
***********************************

There are three major shell commands for making a printed manual from a
Texinfo file: one for converting the Texinfo file into a file that will
be printed, a second for sorting indices, and a third for printing the
formatted document.  When you use the shell commands, you can either
work directly in the operating system shell or work within a shell
inside GNU Emacs.

  If you are using GNU Emacs, you can use commands provided by Texinfo
mode instead of shell commands.  In addition to the three commands to
format a file, sort the indices, and print the result, Texinfo mode
offers key bindings for commands to recenter the output buffer, show the
print queue, and delete a job from the print queue.

* Menu:

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                                of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.


File: texinfo,  Node: Use TeX,  Next: Format with tex/texindex,  Up: Hardcopy

19.1 Use TeX
============

The typesetting program called TeX is used for formatting a Texinfo
file.  TeX is a very powerful typesetting program and, if used
correctly, does an exceptionally good job.  (*Note How to Obtain TeX:
Obtaining TeX, for information on how to obtain TeX.)

  The standalone `makeinfo' program and Emacs functions
`texinfo-format-region' and `texinfo-format-buffer' commands read the
very same @-commands in the Texinfo file as does TeX, but process them
differently to make an Info file (*note Creating an Info File::).


File: texinfo,  Node: Format with tex/texindex,  Next: Format with texi2dvi,  Prev: Use TeX,  Up: Hardcopy

19.2 Format with `tex' and `texindex'
=====================================

Format the Texinfo file with the shell command `tex' followed by the
name of the Texinfo file.  For example:

     tex foo.texi

TeX will produce a "DVI file" as well as several auxiliary files
containing information for indices, cross references, etc.  The DVI file
(for "DeVice Independent" file) can be printed on virtually any device
(see the following sections).

  The `tex' formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  (The `texi2dvi' command
automatically generates indices; *note Format with `texi2dvi': Format
with texi2dvi..)  To generate a printed index after running the `tex'
command, you first need a sorted index to work from.  The `texindex'
command sorts indices.  (The source file `texindex.c' comes as part of
the standard Texinfo distribution, among other places.)

  The `tex' formatting command outputs unsorted index files under names
that obey a standard convention: the name of your main input file with
any `.tex' (or similar, *note tex invocation: (web2c)tex invocation.)
extension removed, followed by the two letter names of indices.  For
example, the raw index output files for the input file `foo.texinfo'
would be `foo.cp', `foo.vr', `foo.fn', `foo.tp', `foo.pg' and `foo.ky'.
Those are exactly the arguments to give to `texindex'.

  Instead of specifying all the unsorted index file names explicitly,
you can use `??' as shell wildcards and give the command in this form:

     texindex foo.??

This command will run `texindex' on all the unsorted index files,
including any that you have defined yourself using `@defindex' or
`@defcodeindex'.  (You may execute `texindex foo.??' even if there are
similarly named files with two letter extensions that are not index
files, such as `foo.el'.  The `texindex' command reports but otherwise
ignores such files.)

  For each file specified, `texindex' generates a sorted index file
whose name is made by appending `s' to the input file name.  The
`@printindex' command looks for a file with that name (*note Printing
Indices & Menus::).  `texindex' does not alter the raw index output
file.

  After you have sorted the indices, you need to rerun the `tex'
formatting command on the Texinfo file.  This regenerates the DVI file,
this time with up-to-date index entries.

  Finally, you may need to run `tex' one more time, to get the page
numbers in the cross-references correct.

  To summarize, this is a five step process:

  1. Run `tex' on your Texinfo file.  This generates a DVI file (with
     undefined cross-references and no indices), and the raw index files
     (with two letter extensions).

  2. Run `texindex' on the raw index files.  This creates the
     corresponding sorted index files (with three letter extensions).

  3. Run `tex' again on your Texinfo file.  This regenerates the DVI
     file, this time with indices and defined cross-references, but with
     page numbers for the cross-references from last time, generally
     incorrect.

  4. Sort the indices again, with `texindex'.

  5. Run `tex' one last time.  This time the correct page numbers are
     written for the cross-references.

  Alternatively, it's a one-step process: run `texi2dvi' (*note Format
with texi2dvi::).

  You need not run `texindex' each time after you run `tex'.  If you do
not, on the next run, the `tex' formatting command will use whatever
sorted index files happen to exist from the previous use of `texindex'.
This is usually ok while you are debugging.

  Sometimes you may wish to print a document while you know it is
incomplete, or to print just one chapter of a document.  In that case,
the usual auxiliary files that TeX creates and warnings TeX gives when
cross-references are not satisfied are just nuisances.  You can avoid
them with the `@novalidate' command, which you must give _before_ the
`@setfilename' command (*note `@setfilename': setfilename.).  Thus, the
beginning of your file would look approximately like this:

     \input texinfo
     @novalidate
     @setfilename myfile.info
     ...

`@novalidate' also turns off validation in `makeinfo', just like its
`--no-validate' option (*note Pointer Validation::).


File: texinfo,  Node: Format with texi2dvi,  Next: Print with lpr,  Prev: Format with tex/texindex,  Up: Hardcopy

19.3 Format with `texi2dvi'
===========================

The `texi2dvi' command automatically runs both `tex' and `texindex' as
many times as necessary to produce a DVI file with sorted indices and
all cross-references resolved.  It simplifies the
`tex'--`texindex'--`tex'--`tex' sequence described in the previous
section.

  To run `texi2dvi' on an input file `foo.texi', do this (where `prompt$
' is your shell prompt):

     prompt$ `texi2dvi foo.texi'

  As shown in this example, the input filenames to `texi2dvi' must
include any extension (`.texi', `.texinfo', etc.).  Under MS-DOS and
perhaps in other circumstances, you may need to run `sh texi2dvi
foo.texi' instead of relying on the operating system to invoke the shell
on the `texi2dvi' script.

  Perhaps the most useful option to `texi2dvi' is `--texinfo=CMD'.  This
inserts CMD on a line by itself after the `@setfilename' in a temporary
copy of the input file before running TeX.  With this, you can specify
different printing formats, such as `@smallbook' (*note smallbook::),
`@afourpaper' (*note A4 Paper::), or `@pagesizes' (*note pagesizes::),
without actually changing the document source.  (You can also do this on
a site-wide basis with `texinfo.cnf'; *note Preparing for TeX: Preparing
for TeX.).

  For a list of other options, run `texi2dvi --help'.


File: texinfo,  Node: Print with lpr,  Next: Within Emacs,  Prev: Format with texi2dvi,  Up: Hardcopy

19.4 Shell Print Using `lpr -d'
===============================

The precise command to print a DVI file depends on your system
installation.  Two common ones are `dvips foo.dvi -o' and `lpr -d
foo.dvi'.

  For example, the following commands will (perhaps) suffice to sort the
indices, format, and print the `Bison Manual':

     tex bison.texinfo
     texindex bison.??
     tex bison.texinfo
     lpr -d bison.dvi

(Remember that the shell commands may be different at your site; but
these are commonly used versions.)

  Using the `texi2dvi' shell script (see the previous section):

     texi2dvi bison.texinfo
     lpr -d bison.dvi
     # or perhaps dvips bison.dvi -o

  `lpr' is a standard program on Unix systems, but it is usually absent
on MS-DOS/MS-Windows.  Some network packages come with a program named
`lpr', but these are usually limited to sending files to a print server
over the network, and generally don't support the `-d' option.  If you
are unfortunate enough to work on one of these systems, you have several
alternative ways of printing DVI files:

   * Find and install a Unix-like `lpr' program, or its clone.  If you
     can do that, you will be able to print DVI files just like
     described above.

   * Send the DVI files to a network printer queue for DVI files.  Some
     network printers have special queues for printing DVI files.  You
     should be able to set up your network software to send files to
     that queue.  In some cases, the version of `lpr' which comes with
     your network software will have a special option to send a file to
     specific queues, like this:

          lpr -Qdvi -hprint.server.domain bison.dvi

   * Convert the DVI file to a Postscript or PCL file and send it to
     your local printer.  *Note dvips invocation: (dvips)dvips
     invocation, and the man pages for `dvilj', for detailed description
     of these tools.  Once the DVI file is converted to the format your
     local printer understands directly, just send it to the appropriate
     port, usually `PRN'.


File: texinfo,  Node: Within Emacs,  Next: Texinfo Mode Printing,  Prev: Print with lpr,  Up: Hardcopy

19.5 From an Emacs Shell
========================

You can give formatting and printing commands from a shell within GNU
Emacs.  To create a shell within Emacs, type `M-x shell'.  In this
shell, you can format and print the document.  *Note Format and Print
Hardcopy: Hardcopy, for details.

  You can switch to and from the shell buffer while `tex' is running and
do other editing.  If you are formatting a long document on a slow
machine, this can be very convenient.

  You can also use `texi2dvi' from an Emacs shell.  For example, here is
how to use `texi2dvi' to format and print `Using and Porting GNU CC'
from a shell within Emacs:

     texi2dvi gcc.texinfo
     lpr -d gcc.dvi

  *Note Texinfo Mode Printing::, for more information about formatting
and printing in Texinfo mode.


File: texinfo,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Prev: Within Emacs,  Up: Hardcopy

19.6 Formatting and Printing in Texinfo Mode
============================================

Texinfo mode provides several predefined key commands for TeX formatting
and printing.  These include commands for sorting indices, looking at
the printer queue, killing the formatting job, and recentering the
display of the buffer in which the operations occur.

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     Run `texi2dvi' on the current buffer.

`C-c C-t C-r'
`M-x texinfo-tex-region'
     Run TeX on the current region.

`C-c C-t C-i'
`M-x texinfo-texindex'
     Sort the indices of a Texinfo file formatted with
     `texinfo-tex-region'.

`C-c C-t C-p'
`M-x texinfo-tex-print'
     Print a DVI file that was made with `texinfo-tex-region' or
     `texinfo-tex-buffer'.

`C-c C-t C-q'
`M-x tex-show-print-queue'
     Show the print queue.

`C-c C-t C-d'
`M-x texinfo-delete-from-print-queue'
     Delete a job from the print queue; you will be prompted for the job
     number shown by a preceding `C-c C-t C-q' command
     (`texinfo-show-tex-print-queue').

`C-c C-t C-k'
`M-x tex-kill-job'
     Kill the currently running TeX job started by either
     `texinfo-tex-region' or `texinfo-tex-buffer', or any other process
     running in the Texinfo shell buffer.

`C-c C-t C-x'
`M-x texinfo-quit-job'
     Quit a TeX formatting job that has stopped because of an error by
     sending an <x> to it.  When you do this, TeX preserves a record of
     what it did in a `.log' file.

`C-c C-t C-l'
`M-x tex-recenter-output-buffer'
     Redisplay the shell buffer in which the TeX printing and formatting
     commands are run to show its most recent output.

  Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):

     C-c C-t C-b             Run `texi2dvi' on the buffer.
     C-c C-t C-p             Print the DVI file.
     C-c C-t C-q             Display the printer queue.

  The Texinfo mode TeX formatting commands start a subshell in Emacs
called the `*tex-shell*'.  The `texinfo-tex-command',
`texinfo-texindex-command', and `tex-dvi-print-command' commands are all
run in this shell.

  You can watch the commands operate in the `*tex-shell*' buffer, and
you can switch to and from and use the `*tex-shell*' buffer as you would
any other shell buffer.

  The formatting and print commands depend on the values of several
variables.  The default values are:

          Variable                              Default value

     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

  You can change the values of these variables with the `M-x
edit-options' command (*note Editing Variable Values: (emacs)Edit
Options.), with the `M-x set-variable' command (*note Examining and
Setting Variables: (emacs)Examining.), or with your `.emacs'
initialization file (*note Init File: (emacs)Init File.).

  Beginning with version 20, GNU Emacs offers a user-friendly interface,
called "Customize", for changing values of user-definable variables.
*Note Easy Customization Interface: (emacs)Easy Customization, for more
details about this.  The Texinfo variables can be found in the
`Development/Docs/Texinfo' group, once you invoke the `M-x customize'
command.


File: texinfo,  Node: Compile-Command,  Next: Requirements Summary,  Prev: Texinfo Mode Printing,  Up: Hardcopy

19.7 Using the Local Variables List
===================================

Yet another way to apply the TeX formatting command to a Texinfo file is
to put that command in a "local variables list" at the end of the
Texinfo file.  You can then specify the `tex' or `texi2dvi' commands as
a `compile-command' and have Emacs run it by typing `M-x compile'.  This
creates a special shell called the `*compilation*' buffer in which Emacs
runs the compile command.  For example, at the end of the `gdb.texinfo'
file, after the `@bye', you could put the following:

     Local Variables:
     compile-command: "texi2dvi gdb.texinfo"
     End:

This technique is most often used by programmers who also compile
programs this way; see *note Compilation: (emacs)Compilation.


File: texinfo,  Node: Requirements Summary,  Next: Preparing for TeX,  Prev: Compile-Command,  Up: Hardcopy

19.8 TeX Formatting Requirements Summary
========================================

Every Texinfo file that is to be input to TeX must begin with a `\input'
command and must contain an `@setfilename' command:

     \input texinfo
     @setfilename ARG-NOT-USED-BY-TeX

The first command instructs TeX to load the macros it needs to process a
Texinfo file and the second command opens auxiliary files.

  Every Texinfo file must end with a line that terminates TeX's
processing and forces out unfinished pages:

     @bye

  Strictly speaking, these lines are all a Texinfo file needs to be
processed successfully by TeX.

  Usually, however, the beginning includes an `@settitle' command to
define the title of the printed manual, an `@setchapternewpage' command,
a title page, a copyright page, and permissions.  Besides an `@bye', the
end of a file usually includes indices and a table of contents.  (And of
course most manuals contain a body of text as well.)

  For more information, see:
   * *note `@settitle': settitle.

   * *note `@setchapternewpage': setchapternewpage.

   * *note Page Headings: Headings.

   * *note Titlepage & Copyright Page::

   * *note Printing Indices & Menus::

   * *note Contents::


File: texinfo,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Requirements Summary,  Up: Hardcopy

19.9 Preparing for TeX
======================

TeX needs to know where to find the `texinfo.tex' file that the `\input
texinfo' command on the first line reads.  The `texinfo.tex' file tells
TeX how to handle @-commands; it is included in all standard GNU
distributions.

  Usually, the installer has put the `texinfo.tex' file in the default
directory that contains TeX macros when GNU Texinfo, Emacs or other GNU
software is installed.  In this case, TeX will find the file and you do
not need to do anything special.  If this has not been done, you can put
`texinfo.tex' in the current directory when you run TeX, and TeX will
find it there.

  Also, you should install `epsf.tex', if it is not already installed
from another distribution.  More details are at the end of the
description of the `@image' command (*note Images::).

  Likewise for `pdfcolor.tex', if it is not already installed and you
use pdftex.

  Optionally, you may create an additional `texinfo.cnf', and install it
as well.  This file is read by TeX when the `@setfilename' command is
executed (*note `@setfilename': setfilename.).  You can put any commands
you like there, according to local site-wide conventions.  They will be
read by TeX when processing any Texinfo document.  For example, if
`texinfo.cnf' contains the line `@afourpaper' (*note A4 Paper::), then
all Texinfo documents will be processed with that page size in effect.
If you have nothing to put in `texinfo.cnf', you do not need to create
it.

  If neither of the above locations for these system files suffice for
you, you can specify the directories explicitly.  For `texinfo.tex', you
can do this by writing the complete path for the file after the `\input'
command.  Another way, that works for both `texinfo.tex' and
`texinfo.cnf' (and any other file TeX might read), is to set the
`TEXINPUTS' environment variable in your `.cshrc' or `.profile' file.

  Which you use of `.cshrc' or `.profile' depends on whether you use a
Bourne shell-compatible (`sh', `bash', `ksh', ...) or C shell-compatible
(`csh', `tcsh') command interpreter.  The latter read the `.cshrc' file
for initialization information, and the former read `.profile'.

  In a `.cshrc' file, you could use the following `csh' command
sequence:

     setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros

  In a `.profile' file, you could use the following `sh' command
sequence:

     TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
     export TEXINPUTS

  On MS-DOS/MS-Windows, you would say it like this(1) (*note Preparing
for TeX-Footnote-1::):

     set TEXINPUTS=.;d:/home/me/mylib;c:/usr/lib/tex/macros

It is customary for DOS/Windows users to put such commands in the
`autoexec.bat' file, or in the Windows Registry.

These settings would cause TeX to look for `\input' file first in the
current directory, indicated by the `.', then in a hypothetical user's
`me/mylib' directory, and finally in a system directory
`/usr/lib/tex/macros'.

  Finally, you may wish to dump a `.fmt' file (*note Memory dumps:
(web2c)Memory dumps.) so that TeX can load Texinfo faster.  (The
disadvantage is that then updating `texinfo.tex' requires redumping.)
You can do this by running this command, assuming `epsf.tex' is findable
by TeX:

     initex texinfo @dump

  (`dump' is a TeX primitive.)  Then, move `texinfo.fmt' to wherever
your `.fmt' files are found; typically, this will be in the subdirectory
`web2c' of your TeX installation.


File: texinfo,  Node: Preparing for TeX-Footnotes,  Up: Preparing for TeX

  (1) Note the use of the `;' character, instead of `:', as directory
separator on these systems.


File: texinfo,  Node: Overfull hboxes,  Next: smallbook,  Prev: Preparing for TeX,  Up: Hardcopy

19.10 Overfull "hboxes"
=======================

TeX is sometimes unable to typeset a line without extending it into the
right margin.  This can occur when TeX comes upon what it interprets as
a long word that it cannot hyphenate, such as an electronic mail network
address or a very long title.  When this happens, TeX prints an error
message like this:

     Overfull @hbox (20.76302pt too wide)

(In TeX, lines are in "horizontal boxes", hence the term, "hbox".
`@hbox' is a TeX primitive not needed in the Texinfo language.)

  TeX also provides the line number in the Texinfo source file and the
text of the offending line, which is marked at all the places that TeX
considered hyphenation.  *Note Catching Errors with TeX Formatting:
Debugging with TeX, for more information about typesetting errors.

  If the Texinfo file has an overfull hbox, you can rewrite the sentence
so the overfull hbox does not occur, or you can decide to leave it.  A
small excursion into the right margin often does not matter and may not
even be noticeable.

  If you have many overfull boxes and/or an antipathy to rewriting, you
can coerce TeX into greatly increasing the allowable interword spacing,
thus (if you're lucky) avoiding many of the bad line breaks, like this:

     @tex
     \global\emergencystretch = .9\hsize
     @end tex

(You should adjust the fraction as needed.)  This huge value for
`\emergencystretch' cannot be the default, since then the typeset output
would generally be of noticeably lower quality; the default is
`.15\hsize'.  `\hsize' is the TeX dimension containing the current line
width.

  For what overfull boxes you have, however, TeX will print a large,
ugly, black rectangle beside the line that contains the overfull hbox
unless told otherwise.  This is so you will notice the location of the
problem if you are correcting a draft.

  To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the `@titlepage' command:

     @finalout


File: texinfo,  Node: smallbook,  Next: A4 Paper,  Prev: Overfull hboxes,  Up: Hardcopy

19.11 Printing "Small" Books
============================

By default, TeX typesets pages for printing in an 8.5 by 11 inch format.
However, you can direct TeX to typeset a document in a 7 by 9.25 inch
format that is suitable for bound books by inserting the following
command on a line by itself at the beginning of the Texinfo file, before
the title page:

     @smallbook

(Since many books are about 7 by 9.25 inches, this command might better
have been called the `@regularbooksize' command, but it came to be
called the `@smallbook' command by comparison to the 8.5 by 11 inch
format.)

  If you write the `@smallbook' command between the start-of-header and
end-of-header lines, the Texinfo mode TeX region formatting command,
`texinfo-tex-region', will format the region in "small" book size (*note
Start of Header::).

  *Note small::, for information about commands that make it easier to
produce examples for a smaller manual.

  *Note Format with texi2dvi::, and *note Preparing for TeX: Preparing
for TeX, for other ways to format with `@smallbook' that do not require
changing the source file.


File: texinfo,  Node: A4 Paper,  Next: pagesizes,  Prev: smallbook,  Up: Hardcopy

19.12 Printing on A4 Paper
==========================

You can tell TeX to format a document for printing on European size A4
paper (or A5) with the `@afourpaper' (or `@afivepaper') command.  Write
the command on a line by itself near the beginning of the Texinfo file,
before the title page.  For example, this is how you would write the
header for this manual:

     \input texinfo    @c -*-texinfo-*-
     @c %**start of header
     @setfilename texinfo
     @settitle Texinfo
     @afourpaper
     @c %**end of header

  *Note Format with texi2dvi::, and *note Preparing for TeX: Preparing
for TeX, for other ways to format for different paper sizes that do not
require changing the source file.

  You may or may not prefer the formatting that results from the command
`@afourlatex'.  There's also `@afourwide' for A4 paper in wide format.


File: texinfo,  Node: pagesizes,  Next: Cropmarks and Magnification,  Prev: A4 Paper,  Up: Hardcopy

19.13 `@pagesizes' [WIDTH][, HEIGHT]: Custom page sizes
=======================================================

You can explicitly specify the height and (optionally) width of the main
text area on the page with the `@pagesizes' command.  Write this on a
line by itself near the beginning of the Texinfo file, before the title
page.  The height comes first, then the width if desired, separated by a
comma.  Examples:

     @pagesizes 200mm,150mm  
and
     @pagesizes 11.5in      

  This would be reasonable for printing on B5-size paper.  To emphasize,
this command specifies the size of the _text area_, not the size of the
paper (which is 250mm by 177mm for B5, 14in by 8.5in for legal).

  To make more elaborate changes, such as changing any of the page
margins, you must define a new command in `texinfo.tex' (or
`texinfo.cnf', *note Preparing for TeX: Preparing for TeX.).

  *Note Format with texi2dvi::, and *note Preparing for TeX: Preparing
for TeX, for other ways to specify `@pagesizes' that do not require
changing the source file.

  `@pagesizes' is ignored by `makeinfo'.


File: texinfo,  Node: Cropmarks and Magnification,  Next: PDF Output,  Prev: pagesizes,  Up: Hardcopy

19.14 Cropmarks and Magnification
=================================

You can (attempt to) direct TeX to print cropmarks at the corners of
pages with the `@cropmarks' command.  Write the `@cropmarks' command on
a line by itself between `@iftex' and `@end iftex' lines near the
beginning of the Texinfo file, before the title page, like this:

     @iftex
     @cropmarks
     @end iftex

  This command is mainly for printers that typeset several pages on one
sheet of film; but you can attempt to use it to mark the corners of a
book set to 7 by 9.25 inches with the `@smallbook' command.  (Printers
will not produce cropmarks for regular sized output that is printed on
regular sized paper.)  Since different printing machines work in
different ways, you should explore the use of this command with a spirit
of adventure.  You may have to redefine the command in `texinfo.tex'.

  You can attempt to direct TeX to typeset pages larger or smaller than
usual with the `\mag' TeX command.  Everything that is typeset is scaled
proportionally larger or smaller.  (`\mag' stands for "magnification".)
This is _not_ a Texinfo @-command, but is a plain TeX command that is
prefixed with a backslash.  You have to write this command between
`@tex' and `@end tex' (*note Raw Formatter Commands::).

  Follow the `\mag' command with an `=' and then a number that is 1000
times the magnification you desire.  For example, to print pages at 1.2
normal size, write the following near the beginning of the Texinfo file,
before the title page:

     @tex
     \mag=1200
     @end tex

  With some printing technologies, you can print normal-sized copies
that look better than usual by giving a larger-than-normal master to
your print shop.  They do the reduction, thus effectively increasing the
resolution.

  Depending on your system, DVI files prepared with a nonstandard-`\mag'
may not print or may print only with certain magnifications.  Be
prepared to experiment.


File: texinfo,  Node: PDF Output,  Prev: Cropmarks and Magnification,  Up: Hardcopy

19.15 PDF Output
================

You can generate a PDF output file from Texinfo source by using the
`pdftex' program to process your file instead of plain `tex'.  Just run
`pdftex foo.texi' instead of `tex foo.texi', or give the `--pdf' option
to `texi2dvi'.

  "PDF" stands for `Portable Document Format'. It was invented by Adobe
Systems some years ago for document interchange, based on their
PostScript language.  A PDF reader (http://www.foolabs.com/xpdf/) for
the X window system is freely available, as is the definition of the
file format (http://partners.adobe.com/asn/developer/technotes/).  Since
PDF is a binary format, there are no `@ifpdf' or `@pdf' commands as with
the other output formats.

  Despite the `portable' in the name, PDF files are nowhere near as
portable in practice as the plain ASCII formats (Info, HTML) that
Texinfo supports (DVI portability is arguable).  They also tend to be
much larger and do not support the bitmap fonts used by TeX (by default)
very well.  Nevertheless, a PDF file does preserve an actual printed
document on a screen as faithfully as possible, so it has its place.

  PDF support in Texinfo is fairly rudimentary.


File: texinfo,  Node: Creating and Installing Info Files,  Next: Command List,  Prev: Hardcopy,  Up: Top

20 Creating and Installing Info Files
*************************************

This chapter describes how to create and install Info files.  *Note Info
Files::, for general information about the file format itself.

* Menu:

* Creating an Info File::       
* Installing an Info File::     


File: texinfo,  Node: Creating an Info File,  Next: Installing an Info File,  Up: Creating and Installing Info Files

20.1 Creating an Info File
==========================

`makeinfo' is a program that converts a Texinfo file into an Info file,
HTML file, or plain text.  `texinfo-format-region' and
`texinfo-format-buffer' are GNU Emacs functions that convert Texinfo to
Info.

  For information on installing the Info file in the Info system, *note
Installing an Info File::.

* Menu:

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                  to run better.
* makeinfo html::               Generating HTML output.


File: texinfo,  Node: makeinfo advantages,  Next: Invoking makeinfo,  Up: Creating an Info File

20.1.1 `makeinfo' Preferred
---------------------------

The `makeinfo' utility creates an Info file from a Texinfo source file
more quickly than either of the Emacs formatting commands and provides
better error messages.  We recommend it.  `makeinfo' is a C program that
is independent of Emacs.  You do not need to run Emacs to use
`makeinfo', which means you can use `makeinfo' on machines that are too
small to run Emacs.  You can run `makeinfo' in any one of three ways:
from an operating system shell, from a shell inside Emacs, or by typing
the `C-c C-m C-r' or the `C-c C-m C-b' command in Texinfo mode in Emacs.

  The `texinfo-format-region' and the `texinfo-format-buffer' commands
are useful if you cannot run `makeinfo'.  Also, in some circumstances,
they format short regions or buffers more quickly than `makeinfo'.


File: texinfo,  Node: Invoking makeinfo,  Next: makeinfo options,  Prev: makeinfo advantages,  Up: Creating an Info File

20.1.2 Running `makeinfo' from a Shell
--------------------------------------

To create an Info file from a Texinfo file, type `makeinfo' followed by
the name of the Texinfo file.  Thus, to create the Info file for Bison,
type the following to the shell:

     makeinfo bison.texinfo

  (You can run a shell inside Emacs by typing `M-x shell'.)

  Sometimes you will want to specify options.  For example, if you wish
to discover which version of `makeinfo' you are using, type:

     makeinfo --version

  *Note makeinfo options::, for more information.


File: texinfo,  Node: makeinfo options,  Next: Pointer Validation,  Prev: Invoking makeinfo,  Up: Creating an Info File

20.1.3 Options for `makeinfo'
-----------------------------

The `makeinfo' command takes a number of options.  Most often, options
are used to set the value of the fill column and specify the footnote
style.  Each command line option is a word preceded by `--' or a letter
preceded by `-'.  You can use abbreviations for the long option names as
long as they are unique.

  For example, you could use the following shell command to create an
Info file for `bison.texinfo' in which each line is filled to only 68
columns:

     makeinfo --fill-column=68 bison.texinfo

  You can write two or more options in sequence, like this:

     makeinfo --no-split --fill-column=70 ...

This would keep the Info file together as one possibly very long file
and would also set the fill column to 70.

  The options are:

`-D VAR'
     Cause the variable VAR to be defined.  This is equivalent to `@set
     VAR' in the Texinfo file (*note set clear value::).

`--commands-in-node-names'
     Allow `@'-commands in node names.  This is not recommended, as it
     can probably never be implemented in TeX.  It also makes `makeinfo'
     much slower.  Also, this option is ignored when `--no-validate' is
     used.  *Note Pointer Validation::, for more details.

`--docbook'
     Generate DocBook output rather than Info.

`--error-limit=LIMIT'
`-e LIMIT'
     Set the maximum number of errors that `makeinfo' will report before
     exiting (on the assumption that continuing would be useless);
     default 100.

`--fill-column=WIDTH'
`-f WIDTH'
     Specify the maximum number of columns in a line; this is the
     right-hand edge of a line.  Paragraphs that are filled will be
     filled to this width.  (Filling is the process of breaking up and
     connecting lines so that lines are the same length as or shorter
     than the number specified as the fill column.  Lines are broken
     between words.) The default value is 72.  Ignored with `--html'.

`--footnote-style=STYLE'
`-s STYLE'
     Set the footnote style to STYLE, either `end' for the end node
     style (the default) or `separate' for the separate node style.  The
     value set by this option overrides the value set in a Texinfo file
     by an `@footnotestyle' command (*note Footnotes::).  When the
     footnote style is `separate', `makeinfo' makes a new node
     containing the footnotes found in the current node.  When the
     footnote style is `end', `makeinfo' places the footnote references
     at the end of the current node.  Ignored with `--html'.

`--force'
`-F'
     Ordinarily, if the input file has errors, the output files are not
     created.  With this option, they are preserved.

`--help'
`-h'
     Print a usage message listing all available options, then exit
     successfully.

`--html'
     Generate HTML output rather than Info.  *Note makeinfo html::.  By
     default, the HTML output is split into one output file per source
     node, and the split output is written into a subdirectory with the
     name of the top-level info file.

`-I DIR'
     Append DIR to the directory search list for finding files that are
     included using the `@include' command.  By default, `makeinfo'
     searches only the current directory.  If DIR is not given, the
     current directory `.' is appended.  Note that DIR can actually be a
     list of several directories separated by the usual path separator
     character (`:' on Unix, `;' on MS-DOS/MS-Windows).

`--macro-expand=FILE'
`-E FILE'
     Output the Texinfo source with all the macros expanded to the named
     file.  Normally, the results of macro expansion are used internally
     by `makeinfo' and then discarded.  This option is used by
     `texi2dvi' if you are using an old version of `texinfo.tex' that
     does not support `@macro'.

`--no-headers'
     For Info output, do not include menus or node separator lines in
     the output.  This results in a simple plain text file that you can
     (for example) send in email without complications, or include in a
     distribution (as in an `INSTALL' file).

     For HTML output, likewise omit menus.  And if `--no-split' is also
     specified, do not include a navigation links at the top of each
     node (these are never included in the default case of split
     output).  *Note makeinfo html::.

     In both cases, write to standard output by default (can still be
     overridden by `-o').

`--no-split'
     Suppress the splitting stage of `makeinfo'.  By default, large
     output files (where the size is greater than 70k bytes) are split
     into smaller subfiles.  For Info output, each one is approximately
     50k bytes.  For HTML output, each file contains one node (*note
     makeinfo html::).

`--no-pointer-validate'
`--no-validate'
     Suppress the pointer-validation phase of `makeinfo'.  This can also
     be done with the `@novalidate' command (*note Use TeX: Use TeX.).
     Normally, after a Texinfo file is processed, some consistency
     checks are made to ensure that cross references can be resolved,
     etc.  *Note Pointer Validation::.

`--no-warn'
     Suppress warning messages (but _not_ error messages).  You might
     want this if the file you are creating has examples of Texinfo
     cross references within it, and the nodes that are referenced do
     not actually exist.

`--number-sections'
     Output chapter, section, and appendix numbers as in printed
     manuals.

`--no-number-footnotes'
     Suppress automatic footnote numbering.  By default, `makeinfo'
     numbers each footnote sequentially in a single node, resetting the
     current footnote number to 1 at the start of each node.

`--output=FILE'
`-o FILE'
     Specify that the output should be directed to FILE and not to the
     file name specified in the `@setfilename' command found in the
     Texinfo source (*note setfilename::).  If FILE is `-', output goes
     to standard output and `--no-split' is implied.  For split HTML
     output, FILE is the name for the directory into which all HTML
     nodes are written (*note makeinfo html::).

`-P DIR'
     Prepend DIR to the directory search list for `@include'.  If DIR is
     not given, the current directory `.' is prepended.  See `-I' for
     more details.

`--paragraph-indent=INDENT'
`-p INDENT'
     Set the paragraph indentation style to INDENT.  The value set by
     this option overrides the value set in a Texinfo file by an
     `@paragraphindent' command (*note paragraphindent::).  The value of
     INDENT is interpreted as follows:

     `asis'
          Preserve any existing indentation at the starts of paragraphs.

     `0' or `none'
          Delete any existing indentation.

     NUM
          Indent each paragraph by NUM spaces.

`--reference-limit=LIMIT'
`-r LIMIT'
     Set the value of the number of references to a node that `makeinfo'
     will make without reporting a warning.  If a node has more than
     this number of references in it, `makeinfo' will make the
     references but also report a warning.  The default is 1000.

`-U VAR'
     Cause VAR to be undefined.  This is equivalent to `@clear VAR' in
     the Texinfo file (*note set clear value::).

`--verbose'
     Cause `makeinfo' to display messages saying what it is doing.
     Normally, `makeinfo' only outputs messages if there are errors or
     warnings.

`--version'
`-V'
     Print the version number, then exit successfully.

`--xml'
     Generate XML output rather than Info.


File: texinfo,  Node: Pointer Validation,  Next: makeinfo in Emacs,  Prev: makeinfo options,  Up: Creating an Info File

20.1.4 Pointer Validation
-------------------------

If you do not suppress pointer validation with the `--no-validate'
option or the `@novalidate' command in the source file (*note Use TeX:
Use TeX.), `makeinfo' will check the validity of the final Info file.
Mostly, this means ensuring that nodes you have referenced really exist.
Here is a complete list of what is checked:

  1. If a `Next', `Previous', or `Up' node reference is a reference to a
     node in the current file and is not an external reference such as
     to `(dir)', then the referenced node must exist.

  2. In every node, if the `Previous' node is different from the `Up'
     node, then the node pointed to by the `Previous' field must have a
     `Next' field which points back to this node.

  3. Every node except the `Top' node must have an `Up' pointer.

  4. The node referenced by an `Up' pointer must itself reference the
     current node through a menu item, unless the node referenced by
     `Up' has the form `(FILE)'.

  5. If the `Next' reference of a node is not the same as the `Next'
     reference of the `Up' reference, then the node referenced by the
     `Next' pointer must have a `Previous' pointer that points back to
     the current node.  This rule allows the last node in a section to
     point to the first node of the next chapter.

  6. Every node except `Top' should be referenced by at least one other
     node, either via the `Previous' or `Next' links, or via a menu or a
     cross-reference.

  Some Texinfo documents might fail during the validation phase because
they use commands like `@value' and `@definfoenclose' in node
definitions and cross-references inconsistently.  Consider the following
example:

     @set nodename Node 1

     @node @value{nodename}, Node 2, Top, Top

     This is node 1.

     @node Node 2, , Node 1, Top

     This is node 2.

Here, the node "Node 1" was referenced both verbatim and through
`@value'.

  By default, `makeinfo' fails such cases, because node names are not
fully expanded until they are written to the output file.  You should
always try to reference nodes consistently; e.g., in the above example,
the second `@node' line should have also used `@value'.  However, if,
for some reason, you _must_ reference node names inconsistently, and
`makeinfo' fails to validate the file, you can use the
`--commands-in-node-names' option to force `makeinfo' to perform the
expensive expansion of all node names it finds in the document.  This
might considerably slow down the program, though; twofold increase in
conversion time was measured for large documents such as the Jargon
file.

  The support for `@'-commands in `@node' directives is not general
enough to be freely used.  For example, if the example above redefined
`nodename' somewhere in the document, `makeinfo' will fail to convert
it, even if invoked with the `--commands-in-node-names' option.

  `--commands-in-node-names' has no effect if the `--no-validate' option
is given.


File: texinfo,  Node: makeinfo in Emacs,  Next: texinfo-format commands,  Prev: Pointer Validation,  Up: Creating an Info File

20.1.5 Running `makeinfo' inside Emacs
--------------------------------------

You can run `makeinfo' in GNU Emacs Texinfo mode by using either the
`makeinfo-region' or the `makeinfo-buffer' commands.  In Texinfo mode,
the commands are bound to `C-c C-m C-r' and `C-c C-m C-b' by default.

`C-c C-m C-r'
`M-x makeinfo-region'
     Format the current region for Info.

`C-c C-m C-b'
`M-x makeinfo-buffer'
     Format the current buffer for Info.

  When you invoke either `makeinfo-region' or `makeinfo-buffer', Emacs
prompts for a file name, offering the name of the visited file as the
default.  You can edit the default file name in the minibuffer if you
wish, before pressing <RET> to start the `makeinfo' process.

  The Emacs `makeinfo-region' and `makeinfo-buffer' commands run the
`makeinfo' program in a temporary shell buffer.  If `makeinfo' finds any
errors, Emacs displays the error messages in the temporary buffer.

  You can parse the error messages by typing `C-x `' (`next-error').
This causes Emacs to go to and position the cursor on the line in the
Texinfo source that `makeinfo' thinks caused the error.  *Note Running
`make' or Compilers Generally: (emacs)Compilation, for more information
about using the `next-error' command.

  In addition, you can kill the shell in which the `makeinfo' command is
running or make the shell buffer display its most recent output.

`C-c C-m C-k'
`M-x makeinfo-kill-job'
     Kill the current running `makeinfo' job (from `makeinfo-region' or
     `makeinfo-buffer').

`C-c C-m C-l'
`M-x makeinfo-recenter-output-buffer'
     Redisplay the `makeinfo' shell buffer to display its most recent
     output.

(Note that the parallel commands for killing and recentering a TeX job
are `C-c C-t C-k' and `C-c C-t C-l'.  *Note Texinfo Mode Printing::.)

  You can specify options for `makeinfo' by setting the
`makeinfo-options' variable with either the `M-x edit-options' or the
`M-x set-variable' command, or by setting the variable in your `.emacs'
initialization file.

  For example, you could write the following in your `.emacs' file:

     (setq makeinfo-options
           "--paragraph-indent=0 --no-split
            --fill-column=70 --verbose")

For more information, see
*note Editing Variable Values: (emacs)Edit Options,
*note Examining and Setting Variables: (emacs)Examining,
*note Init File: (emacs)Init File, and
*note Options for `makeinfo': makeinfo options.


File: texinfo,  Node: texinfo-format commands,  Next: Batch Formatting,  Prev: makeinfo in Emacs,  Up: Creating an Info File

20.1.6 The `texinfo-format...' Commands
---------------------------------------

In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the `texinfo-format-region' command.  This formats the current
region and displays the formatted text in a temporary buffer called
`*Info Region*'.

  Similarly, you can format a buffer with the `texinfo-format-buffer'
command.  This command creates a new buffer and generates the Info file
in it.  Typing `C-x C-s' will save the Info file under the name
specified by the `@setfilename' line which must be near the beginning of
the Texinfo file.

`C-c C-e C-r'
``texinfo-format-region''
     Format the current region for Info.

`C-c C-e C-b'
``texinfo-format-buffer''
     Format the current buffer for Info.

  The `texinfo-format-region' and `texinfo-format-buffer' commands
provide you with some error checking, and other functions can provide
you with further help in finding formatting errors.  These procedures
are described in an appendix; see *note Catching Mistakes::.  However,
the `makeinfo' program is often faster and provides better error
checking (*note makeinfo in Emacs::).


File: texinfo,  Node: Batch Formatting,  Next: Tag and Split Files,  Prev: texinfo-format commands,  Up: Creating an Info File

20.1.7 Batch Formatting
-----------------------

You can format Texinfo files for Info using `batch-texinfo-format' and
Emacs Batch mode.  You can run Emacs in Batch mode from any shell,
including a shell inside of Emacs.  (*Note Command Line Switches and
Arguments: (emacs)Command Switches.)

  Here is a shell command to format all the files that end in `.texinfo'
in the current directory:

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.

  Run `batch-texinfo-format' only with Emacs in Batch mode as shown; it
is not interactive.  It kills the Batch mode Emacs on completion.

  `batch-texinfo-format' is convenient if you lack `makeinfo' and want
to format several Texinfo files at once.  When you use Batch mode, you
create a new Emacs process.  This frees your current Emacs, so you can
continue working in it.  (When you run `texinfo-format-region' or
`texinfo-format-buffer', you cannot use that Emacs for anything else
until the command finishes.)


File: texinfo,  Node: Tag and Split Files,  Next: makeinfo html,  Prev: Batch Formatting,  Up: Creating an Info File

20.1.8 Tag Files and Split Files
--------------------------------

If a Texinfo file has more than 30,000 bytes, `texinfo-format-buffer'
automatically creates a tag table for its Info file;  `makeinfo' always
creates a tag table.  With a "tag table", Info can jump to new nodes
more quickly than it can otherwise.

  In addition, if the Texinfo file contains more than about 70,000
bytes, `texinfo-format-buffer' and `makeinfo' split the large Info file
into shorter "indirect" subfiles of about 50,000 bytes each.  Big files
are split into smaller files so that Emacs does not need to make a large
buffer to hold the whole of a large Info file; instead, Emacs allocates
just enough memory for the small, split-off file that is needed at the
time.  This way, Emacs avoids wasting memory when you run Info.  (Before
splitting was implemented, Info files were always kept short and
"include files" were designed as a way to create a single, large printed
manual out of the smaller Info files.  *Note Include Files::, for more
information.  Include files are still used for very large documents,
such as `The Emacs Lisp Reference Manual', in which each chapter is a
separate file.)

  When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to the
files that were split off.  The split-off files are called "indirect"
files.

  The split-off files have names that are created by appending `-1',
`-2', `-3' and so on to the file name specified by the `@setfilename'
command.  The shortened version of the original file continues to have
the name specified by `@setfilename'.

  At one stage in writing this document, for example, the Info file was
saved as the file `test-texinfo' and that file looked like this:

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo

     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(But `test-texinfo' had far more nodes than are shown here.)  Each of
the split-off, indirect files, `test-texinfo-1', `test-texinfo-2', and
`test-texinfo-3', is listed in this file after the line that says
`Indirect:'.  The tag table is listed after the line that says `Tag
table:'.

  In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect files,
not counting the file list itself, the tag table, or the permissions
text in each file.  In the tag table, the number following the node name
records the location of the beginning of the node, in bytes from the
beginning of the (unsplit) output.

  If you are using `texinfo-format-buffer' to create Info files, you may
want to run the `Info-validate' command.  (The `makeinfo' command does
such a good job on its own, you do not need `Info-validate'.)  However,
you cannot run the `M-x Info-validate' node-checking command on indirect
files.  For information on how to prevent files from being split and how
to validate the structure of the nodes, see *note Using Info-validate::.


File: texinfo,  Node: makeinfo html,  Prev: Tag and Split Files,  Up: Creating an Info File

20.1.9 Generating HTML
----------------------

Besides generating output in the Info format, you can use the `--html'
option to generate output in HTML format, for installation on a web site
(for example).  By default, the HTML output is split at node level.

  When splitting, the HTML output files are written into a subdirectory.
The subdirectory is named according to the name from `@setfilename' with
any extension removed; for example, HTML output for `@setfilename
emacs.info' would be written into a subdirectory named `emacs'.  If that
directory cannot be created for any reason, then `.html' is appended to
the directory name, as in `emacs.html' (this is necessary because
sometimes the info file is named without an extension, e.g., `texinfo').
If the `NAME.html' directory can't be created either, `makeinfo' gives
up.  In any case, the top-level output file within the directory is
always named `index.html'.

  Monolithic output (`--no-split') is named according to `@setfilename'
or `--outfile'.  Cross-document node references are not supported in
monolithic HTML.

  Texinfo input marked up with the `@ifhtml' command will produce output
only with the `--html' option supplied.  Input marked up with the
`@html' is passed literally to the output (suppressing the normal
escaping of input `<', `>' and `&' characters which have special
significance in HTML).

  The `--footnote-style' option is currently ignored for HTML output;
footnotes are linked to the end of the output file.

  The HTML generated is mostly standard (i.e., HTML 2.0, RFC-1866).  The
exception is that HTML 3.2 tables are generated from the `@multitable'
command, but tagged to degrade as well as possible in browsers without
table support.  The HTML 4 `lang' attribute on the `<html>' attribute is
also used.  Please report output from an error-free run of `makeinfo'
which has browser portability problems as a bug.

  Navigation bars are inserted at the start of nodes, similarly to Info
output.  The `--no-headers' option will suppress this if used with
`--no-split'.  Header `<link>' elements in split output can support
info-like navigation with browsers like Lynx and Emacs W3 which
implement this HTML 1.0 feature.  `@xref' commands to other documents
are generated assuming the other document is available in split HTML
form, and installed in the same HTML documentation tree, at
`../<info-document>/'.


File: texinfo,  Node: Installing an Info File,  Prev: Creating an Info File,  Up: Creating and Installing Info Files

20.2 Installing an Info File
============================

Info files are usually kept in the `info' directory.  You can read Info
files using the standalone Info program or the Info reader built into
Emacs.  (*note info: (info)Top, for an introduction to Info.)

* Menu:

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                  located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                  to the Info directory.
* Invoking install-info::       `install-info' options.


File: texinfo,  Node: Directory File,  Next: New Info File,  Up: Installing an Info File

20.2.1 The Directory File `dir'
-------------------------------

For Info to work, the `info' directory must contain a file that serves
as a top level directory for the Info system.  By convention, this file
is called `dir'.  (You can find the location of this file within Emacs
by typing `C-h i' to enter Info and then typing `C-x C-f' to see the
pathname to the `info' directory.)

  The `dir' file is itself an Info file.  It contains the top level menu
for all the Info files in the system.  The menu looks like this:

     * Menu:
     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                            text editor.
     * Texinfo: (texinfo).  With one source file, make
                            either a printed manual using
                            @TeX{} or an Info file.
     ...

  Each of these menu entries points to the `Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to specify
the `Top' node, since Info goes to the `Top' node if no node name is
mentioned.  *Note Nodes in Other Info Files: Other Info Files.)

  Thus, the `Info' entry points to the `Top' node of the `info' file and
the `Emacs' entry points to the `Top' node of the `emacs' file.

  In each of the Info files, the `Up' pointer of the `Top' node refers
back to the `dir' file.  For example, the line for the `Top' node of the
Emacs manual looks like this in Info:

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

In this case, the `dir' file name is written in upper case letters--it
can be written in either upper or lower case.  This is not true in
general, it is a special case for `dir'.


File: texinfo,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory File,  Up: Installing an Info File

20.2.2 Listing a New Info File
------------------------------

To add a new Info file to your system, you must write a menu entry to
add to the menu in the `dir' file in the `info' directory.  For example,
if you were adding documentation for GDB, you would write the following
new entry:

     * GDB: (gdb).           The source-level C debugger.

The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.

  The name of an Info file often has a `.info' extension.  Thus, the
Info file for GDB might be called either `gdb' or `gdb.info'.  The Info
reader programs automatically try the file name both with and without
`.info'(1) (*note New Info File-Footnote-1::); so it is better to avoid
clutter and not to write `.info' explicitly in the menu entry.  For
example, the GDB menu entry should use just `gdb' for the file name, not
`gdb.info'.


File: texinfo,  Node: New Info File-Footnotes,  Up: New Info File

  (1) On MS-DOS/MS-Windows systems, Info will try the `.inf' extension as
well.


File: texinfo,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Installing an Info File

20.2.3 Info Files in Other Directories
--------------------------------------

If an Info file is not in the `info' directory, there are three ways to
specify its location:

  1. Write the pathname in the `dir' file as the second part of the
     menu.

  2. If you are using Emacs, list the name of the file in a second `dir'
     file, in its directory; and then add the name of that directory to
     the `Info-directory-list' variable in your personal or site
     initialization file.

     This variable tells Emacs where to look for `dir' files (the files
     must be named `dir').  Emacs merges the files named `dir' from each
     of the listed directories.  (In Emacs version 18, you can set the
     `Info-directory' variable to the name of only one directory.)

  3. Specify the Info directory name in the `INFOPATH' environment
     variable in your `.profile' or `.cshrc' initialization file.  (Only
     you and others who set this environment variable will be able to
     find Info files whose location is specified this way.)

  For example, to reach a test file in the `/home/bob/info' directory,
you could add an entry like this to the menu in the standard `dir' file:

     * Test: (/home/bob/info/info-test).  Bob's own test file.

In this case, the absolute file name of the `info-test' file is written
as the second part of the menu entry.

  Alternatively, you could write the following in your `.emacs' file:

     (require 'info)
     (setq Info-directory-list
       (cons (expand-file-name "/home/bob/info")
             Info-directory-list))

  This tells Emacs to merge the system `dir' file with the `dir' file in
`/home/bob/info'.  Thus, Info will list the `/home/bob/info/info-test'
file as a menu entry in the `/home/bob/info/dir' file.  Emacs does the
merging only when `M-x info' is first run, so if you want to set
`Info-directory-list' in an Emacs session where you've already run
`info', you must `(setq Info-dir-contents nil)' to force Emacs to
recompose the `dir' file.

  Finally, you can tell Info where to look by setting the `INFOPATH'
environment variable in your shell startup file, such as `.cshrc',
`.profile' or `autoexec.bat'.  If you use a Bourne-compatible shell such
as `sh' or `bash' for your shell command interpreter, you set the
`INFOPATH' environment variable in the `.profile' initialization file;
but if you use `csh' or `tcsh', you set the variable in the `.cshrc'
initialization file.  On MS-DOS/MS-Windows systems, you must set
`INFOPATH' in your `autoexec.bat' file or in the Registry.  Each type of
shell uses a different syntax.

   * In a `.cshrc' file, you could set the `INFOPATH' variable as
     follows:

          setenv INFOPATH .:~/info:/usr/local/emacs/info

   * In a `.profile' file, you would achieve the same effect by writing:

          INFOPATH=.:$HOME/info:/usr/local/emacs/info
          export INFOPATH

   * In a `autoexec.bat' file, you write this command(1) (*note Other
     Info Directories-Footnote-1::):

          set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info

The `.' indicates the current directory as usual.  Emacs uses the
`INFOPATH' environment variable to initialize the value of Emacs's own
`Info-directory-list' variable.  The stand-alone Info reader merges any
files named `dir' in any directory listed in the `INFOPATH' variable
into a single menu presented to you in the node called `(dir)Top'.

  However you set `INFOPATH', if its last character is a colon(2) (*note
Other Info Directories-Footnote-2::), this is replaced by the default
(compiled-in) path.  This gives you a way to augment the default path
with new directories without having to list all the standard places.
For example (using `sh' syntax):

     INFOPATH=/local/info:
     export INFOPATH

will search `/local/info' first, then the standard directories.  Leading
or doubled colons are not treated specially.

  When you create your own `dir' file for use with `Info-directory-list'
or `INFOPATH', it's easiest to start by copying an existing `dir' file
and replace all the text after the `* Menu:' with your desired entries.
That way, the punctuation and special CTRL-_ characters that Info needs
will be present.


File: texinfo,  Node: Other Info Directories-Footnotes,  Up: Other Info Directories

  (1) Note the use of `;' as the directory separator, and a different
syntax for using values of other environment variables.

  (2) On MS-DOS/MS-Windows systems, use semi-colon instead.


File: texinfo,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Installing an Info File

20.2.4 Installing Info Directory Files
--------------------------------------

When you install an Info file onto your system, you can use the program
`install-info' to update the Info directory file `dir'.  Normally the
makefile for the package runs `install-info', just after copying the
Info file into its proper installed location.

  In order for the Info file to work with `install-info', you include
the commands `@dircategory' and `@direntry'...`@end direntry' in the
Texinfo source file.  Use `@direntry' to specify the menu entries to add
to the Info directory file, and use `@dircategory' to specify which part
of the Info directory to put it in.  Here is how these commands are used
in this manual:

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

  Here's what this produces in the Info file:

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

The `install-info' program sees these lines in the Info file, and that
is how it knows what to do.

  Always use the `@direntry' and `@dircategory' commands near the
beginning of the Texinfo input, before the first `@node' command.  If
you use them later on in the input, `install-info' will not notice them.

  If you use `@dircategory' more than once in the Texinfo source, each
usage specifies the `current' category; any subsequent `@direntry'
commands will add to that category.

  Here are some recommended `@dircategory' categories:

     GNU packages
     GNU programming tools
     GNU programming documentation
     GNU Emacs Lisp
     GNU libraries
     TeX
     Individual utilities

  The idea is to include the `Invoking' node for every program installed
by a package under `Individual utilities', and an entry for the manual
as a whole in the appropriate other category.


File: texinfo,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Installing an Info File

20.2.5 Invoking install-info
----------------------------

`install-info' inserts menu entries from an Info file into the top-level
`dir' file in the Info system (see the previous sections for an
explanation of how the `dir' file works).  It's most often run as part
of software installation, or when constructing a `dir' file for all
manuals on a system.  Synopsis:

     install-info [OPTION]... [INFO-FILE [DIR-FILE]]

  If INFO-FILE or DIR-FILE are not specified, the options (described
below) that define them must be.  There are no compile-time defaults,
and standard input is never used.  `install-info' can read only one Info
file and write only one `dir' file per invocation.

  If DIR-FILE (however specified) does not exist, `install-info' creates
it if possible (with no entries).

  If any input file is compressed with `gzip' (*note Invoking gzip:
(gzip)Invoking gzip.), `install-info' automatically uncompresses it for
reading.  And if DIR-FILE is compressed, `install-info' also
automatically leaves it compressed after writing any changes.  If
DIR-FILE itself does not exist, `install-info' tries to open
`DIR-FILE.gz'.

  Options:

`--delete'
     Delete the entries in INFO-FILE from DIR-FILE.  The file name in
     the entry in DIR-FILE must be INFO-FILE (except for an optional
     `.info' in either one).  Don't insert any new entries.

`--dir-file=NAME'
`-d NAME'
     Specify file name of the Info directory file.  This is equivalent
     to using the DIR-FILE argument.

`--entry=TEXT'
`-e TEXT'
     Insert TEXT as an Info directory entry; TEXT should have the form
     of an Info menu item line plus zero or more extra lines starting
     with whitespace.  If you specify more than one entry, they are all
     added.  If you don't specify any entries, they are determined from
     information in the Info file itself.

`--help'
`-h'
     Display a usage message listing basic usage and all available
     options, then exit successfully.

`--info-file=FILE'
`-i FILE'
     Specify Info file to install in the directory.  Equivalent to using
     the INFO-FILE argument.

`--info-dir=DIR'
`-D DIR'
     Specify the directory where `dir' resides.  Equivalent to
     `--dir-file=DIR/dir'.

`--item=TEXT'
     Same as `--entry=TEXT'.  An Info directory entry is actually a menu
     item.

`--quiet'
     Suppress warnings.

`--remove'
`-r'
     Same as `--delete'.

`--section=SEC'
`-s SEC'
     Put this file's entries in section SEC of the directory.  If you
     specify more than one section, all the entries are added in each of
     the sections.  If you don't specify any sections, they are
     determined from information in the Info file itself.

`--version'
`-V'
     Display version information and exit successfully.


File: texinfo,  Node: Command List,  Next: Tips,  Prev: Creating and Installing Info Files,  Up: Top

Appendix A @-Command List
*************************

Here is an alphabetical list of the @-commands in Texinfo.  Square
brackets, [ ], indicate optional arguments; an ellipsis, `...',
indicates repeated text.


`@WHITESPACE'
     An `@' followed by a space, tab, or newline produces a normal,
     stretchable, interword space.  *Note Multiple Spaces::.

`@!'
     Generate an exclamation point that really does end a sentence
     (usually after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@"'
`@''
     Generate an umlaut or acute accent, respectively, over the next
     character, as in o" and o'.  *Note Inserting Accents::.

`@*'
     Force a line break. Do not end a paragraph that uses `@*' with an
     `@refill' command.  *Note Line Breaks::.

`@,{C}'
     Generate a cedilla accent under C, as in c,.  *Note Inserting
     Accents::.

`@-'
     Insert a discretionary hyphenation point.  *Note - and
     hyphenation::.

`@.'
     Produce a period that really does end a sentence (usually after an
     end-of-sentence capital letter).  *Note Ending a Sentence::.

`@:'
     Indicate to TeX that an immediately preceding period, question
     mark, exclamation mark, or colon does not end a sentence.  Prevent
     TeX from inserting extra whitespace as it does at the end of a
     sentence.  The command has no effect on the Info file output.
     *Note Not Ending a Sentence::.

`@='
     Generate a macron (bar) accent over the next character, as in o=.
     *Note Inserting Accents::.

`@?'
     Generate a question mark that really does end a sentence (usually
     after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@@'
     Stands for an at sign, `@'.  *Note Inserting @ and braces: Braces
     Atsigns.

`@\'
     Stands for a backslash (`\') inside `@math'.  *Note `math': math.

`@^'
`@`'
     Generate a circumflex (hat) or grave accent, respectively, over the
     next character, as in o^ and e`.  *Note Inserting Accents::.

`@{'
     Stands for a left brace, `{'.  *Note Inserting @ and braces: Braces
     Atsigns.

`@}'
     Stands for a right-hand brace, `}'.
     *Note Inserting @ and braces: Braces Atsigns.

`@~'
     Generate a tilde accent over the next character, as in N~.  *Note
     Inserting Accents::.

`@AA{}'
`@aa{}'
     Generate the uppercase and lowercase Scandinavian A-ring letters,
     respectively: AA, aa.  *Note Inserting Accents::.

`@acronym{ABBREV}'
     Tag ABBREV as an acronym, that is, an abbreviation written in all
     capital letters, such as `NASA'.  *Note `acronym': acronym.

`@AE{}'
`@ae{}'
     Generate the uppercase and lowercase AE ligatures, respectively:
     AE, ae.  *Note Inserting Accents::.

`@afivepaper'
     Change page dimensions for the A5 paper size.  *Note A4 Paper::.

`@afourlatex'
`@afourpaper'
`@afourwide'
     Change page dimensions for the A4 paper size.  *Note A4 Paper::.

`@alias NEW=EXISTING'
     Make the command `@NEW' an alias for the existing command
     `@EXISTING'.  *Note alias::.

`@anchor{NAME}'
     Define NAME as the current location for use as a cross-reference
     target.  *Note `@anchor': anchor.

`@appendix TITLE'
     Begin an appendix.  The title appears in the table of contents of a
     printed manual.  In Info, the title is underlined with asterisks.
     *Note The `@unnumbered' and `@appendix' Commands: unnumbered &
     appendix.

`@appendixsec TITLE'
`@appendixsection TITLE'
     Begin an appendix section within an appendix.  The section title
     appears in the table of contents of a printed manual.  In Info, the
     title is underlined with equal signs.  `@appendixsection' is a
     longer spelling of the `@appendixsec' command.  *Note Section
     Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     Begin an appendix subsection within an appendix.  The title appears
     in the table of contents of a printed manual.  In Info, the title
     is underlined with hyphens.  *Note Subsection Commands:
     unnumberedsubsec appendixsubsec subheading.

`@appendixsubsubsec TITLE'
     Begin an appendix subsubsection within an appendix subsection.  The
     title appears in the table of contents of a printed manual.  In
     Info, the title is underlined with periods.  *Note The `subsub'
     Commands: subsubsection.

`@asis'
     Used following `@table', `@ftable', and `@vtable' to print the
     table's first column without highlighting ("as is").  *Note Making
     a Two-column Table: Two-column Tables.

`@author AUTHOR'
     Typeset AUTHOR flushleft and underline it.  *Note The `@title' and
     `@author' Commands: title subtitle author.

`@b{TEXT}'
     Print TEXT in bold font.  No effect in Info.  *Note Fonts::.

`@bullet{}'
     Generate a large round dot, or the closest possible thing to one.
     *Note `@bullet': bullet.

`@bye'
     Stop formatting a file.  The formatters do not see the contents of
     a file following an `@bye' command.  *Note Ending a File::.

`@c COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for
     `@comment'.  *Note Comments: Comments.

`@cartouche'
     Highlight an example or quotation by drawing a box with rounded
     corners around it.  Pair with `@end cartouche'.  No effect in Info.
     *Note Drawing Cartouches Around Examples: cartouche.)

`@center LINE-OF-TEXT'
     Center the line of text following the command.  *Note `@center':
     titlefont center sp.

`@centerchap LINE-OF-TEXT'
     Like `@chapter', but centers the chapter title.  *Note `@chapter':
     chapter.

`@chapheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@majorheading' and `@chapheading':
     majorheading & chapheading.

`@chapter TITLE'
     Begin a chapter.  The chapter title appears in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@chapter': chapter.

`@cindex ENTRY'
     Add ENTRY to the index of concepts.  *Note Defining the Entries of
     an Index: Index Entries.

`@cite{REFERENCE}'
     Highlight the name of a book or other reference that lacks a
     companion Info file.  *Note `@cite': cite.

`@clear FLAG'
     Unset FLAG, preventing the Texinfo formatting commands from
     formatting text between subsequent pairs of `@ifset FLAG' and `@end
     ifset' commands, and preventing `@value{FLAG}' from expanding to
     the value to which FLAG is set.  *Note `@set' `@clear' `@value':
     set clear value.

`@code{SAMPLE-CODE}'
     Highlight text that is an expression, a syntactically complete
     token of a program, or a program name.  *Note `@code': code.

`@command{COMMAND-NAME}'
     Indicate a command name, such as `ls'.  *Note `@command': command.

`@comment COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for `@c'.
     *Note Comments::.

`@contents'
     Print a complete table of contents.  Has no effect in Info, which
     uses menus instead.  *Note Generating a Table of Contents:
     Contents.

`@copyright{}'
     Generate a copyright symbol.  *Note `@copyright': copyright symbol.

`@defcodeindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in an
     `@code' font.  *Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
`@defcvx CATEGORY CLASS NAME'
     Format a description for a variable associated with a class in
     object-oriented programming.  Takes three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  *Note Definition Commands::, and *note Def Cmds in Detail:
     deffnx.

`@deffn CATEGORY NAME ARGUMENTS...'
`@deffnx CATEGORY NAME ARGUMENTS...'
     Format a description for a function, interactive command, or
     similar entity that may take arguments.  `@deffn' takes as
     arguments the category of entity being described, the name of this
     particular entity, and its arguments, if any.  *Note Definition
     Commands::.

`@defindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in a
     roman font.  *Note Defining New Indices: New Indices.

`@definfoenclose NEWCMD, BEFORE, AFTER,'
     Create new @-command NEWCMD for Info that marks text by enclosing
     it in strings that precede and follow the text.  *Note
     definfoenclose::.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
`@defivarx CLASS INSTANCE-VARIABLE-NAME'
     This command formats a description for an instance variable in
     object-oriented programming.  The command is equivalent to `@defcv
     {Instance Variable} ...'.  *Note Definition Commands::, and *note
     Def Cmds in Detail: deffnx.

`@defmac MACRONAME ARGUMENTS...'
`@defmacx MACRONAME ARGUMENTS...'
     Format a description for a macro.  The command is equivalent to
     `@deffn Macro ...'.  *Note Definition Commands::, and *note Def
     Cmds in Detail: deffnx.

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
`@defmethodx CLASS METHOD-NAME ARGUMENTS...'
     Format a description for a method in object-oriented programming.
     The command is equivalent to `@defop Method ...'.  Takes as
     arguments the name of the class of the method, the name of the
     method, and its arguments, if any.  *Note Definition Commands::,
     and *note Def Cmds in Detail: deffnx.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
`@defopx CATEGORY CLASS NAME ARGUMENTS...'
     Format a description for an operation in object-oriented
     programming.  `@defop' takes as arguments the overall name of the
     category of operation, the name of the class of the operation, the
     name of the operation, and its arguments, if any.  *Note Definition
     Commands::, and *note Abstract Objects::.

`@defopt OPTION-NAME'
`@defoptx OPTION-NAME'
     Format a description for a user option.  The command is equivalent
     to `@defvr {User Option} ...'.  *Note Definition Commands::, and
     *note Def Cmds in Detail: deffnx.

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
`@defspecx SPECIAL-FORM-NAME ARGUMENTS...'
     Format a description for a special form.  The command is equivalent
     to `@deffn {Special Form} ...'.  *Note Definition Commands::, and
     *note Def Cmds in Detail: deffnx.

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
`@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     Format a description for a data type.  `@deftp' takes as arguments
     the category, the name of the type (which is a word like `int' or
     `float'), and then the names of attributes of objects of that type.
     *Note Definition Commands::, and *note Data Types::.

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
`@deftypefnx CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     Format a description for a function or similar entity that may take
     arguments and that is typed.  `@deftypefn' takes as arguments the
     classification of entity being described, the type, the name of the
     entity, and its arguments, if any.  *Note Definition Commands::,
     and *note Def Cmds in Detail: deffnx.

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
`@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     Format a description for a function in a typed language.  The
     command is equivalent to `@deftypefn Function ...'.  *Note
     Definition Commands::, and *note Def Cmds in Detail: deffnx.

`@deftypeivar CLASS DATA-TYPE VARIABLE-NAME'
`@deftypeivarx CLASS DATA-TYPE VARIABLE-NAME'
     Format a description for a typed instance variable in
     object-oriented programming. *Note Definition Commands::, and *note
     Abstract Objects::.

`@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
`@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
     Format a description for a typed method in object-oriented
     programming.  *Note Definition Commands::, and *note Def Cmds in
     Detail: deffnx.

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
`@deftypeopx CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     Format a description for a typed operation in object-oriented
     programming.  *Note Definition Commands::, and *note Abstract
     Objects::.

`@deftypevar DATA-TYPE VARIABLE-NAME'
`@deftypevarx DATA-TYPE VARIABLE-NAME'
     Format a description for a variable in a typed language.  The
     command is equivalent to `@deftypevr Variable ...'.  *Note
     Definition Commands::, and *note Def Cmds in Detail: deffnx.

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
`@deftypevrx CLASSIFICATION DATA-TYPE NAME'
     Format a description for something like a variable in a typed
     language--an entity that records a value.  Takes as arguments the
     classification of entity being described, the type, and the name of
     the entity.  *Note Definition Commands::, and *note Def Cmds in
     Detail: deffnx.

`@defun FUNCTION-NAME ARGUMENTS...'
`@defunx FUNCTION-NAME ARGUMENTS...'
     Format a description for functions.  The command is equivalent to
     `@deffn Function ...'.  *Note Definition Commands::, and *note Def
     Cmds in Detail: deffnx.

`@defvar VARIABLE-NAME'
`@defvarx VARIABLE-NAME'
     Format a description for variables.  The command is equivalent to
     `@defvr Variable ...'.  *Note Definition Commands::, and *note Def
     Cmds in Detail: deffnx.

`@defvr CATEGORY NAME'
`@defvrx CATEGORY NAME'
     Format a description for any kind of variable.  `@defvr' takes as
     arguments the category of the entity and the name of the entity.
     *Note Definition Commands::, and *note Def Cmds in Detail: deffnx.

`@detailmenu'
     Avoid `makeinfo' confusion stemming from the detailed node listing
     in a master menu.  *Note Master Menu Parts::.

`@dfn{TERM}'
     Highlight the introductory or defining use of a term.  *Note
     `@dfn': dfn.

`@dircategory DIRPART'
     Specify a part of the Info directory menu where this file's entry
     should go.  *Note Installing Dir Entries::.

`@direntry'
     Begin the Info directory menu entry for this file.  Pair with `@end
     direntry'.  *Note Installing Dir Entries::.

`@display'
     Begin a kind of example.  Like `@example' (indent text, do not
     fill), but do not select a new font.  Pair with `@end display'.
     *Note `@display': display.

`@dmn{DIMENSION}'
     Format a unit of measure, as in 12pt.  Causes TeX to insert a thin
     space before DIMENSION.  No effect in Info.  *Note `@dmn': dmn.

`@documentdescription'
     Set the document description text, included in the HTML output.
     Pair with `@end documentdescription'.  *Note
     `@documentdescription': documentdescription.

`@documentencoding ENC'
     Declare the input encoding to be ENC.  *Note `@documentencoding':
     documentencoding.

`@documentlanguage CC'
     Declare the document language as the two-character ISO-639
     abbreviation CC.  *Note `@documentlanguage': documentlanguage.

`@dotaccent{C}'
     Generate a dot accent over the character C, as in o..  *Note
     Inserting Accents::.

`@dots{}'
     Insert an ellipsis: `...'.  *Note `@dots': dots.

`@email{ADDRESS[, DISPLAYED-TEXT]}'
     Indicate an electronic mail address.  *Note `@email': email.

`@emph{TEXT}'
     Highlight TEXT; text is displayed in _italics_ in printed output,
     and surrounded by asterisks in Info.  *Note Emphasizing Text:
     Emphasis.

`@end ENVIRONMENT'
     Ends ENVIRONMENT, as in `@end example'.  *Note @-commands:
     Formatting Commands.

`@env{ENVIRONMENT-VARIABLE}'
     Indicate an environment variable name, such as `PATH'.  *Note
     `@env': env.

`@enddots{}'
     Generate an end-of-sentence of ellipsis, like this ...  *Note
     `@dots{}': dots.

`@enumerate [NUMBER-OR-LETTER]'
     Begin a numbered list, using `@item' for each entry.  Optionally,
     start list with NUMBER-OR-LETTER.  Pair with `@end enumerate'.
     *Note `@enumerate': enumerate.

`@equiv{}'
     Indicate to the reader the exact equivalence of two forms with a
     glyph: `=='.  *Note Equivalence::.

`@error{}'
     Indicate to the reader with a glyph that the following text is an
     error message: `error-->'.  *Note Error Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for even-numbered (left-hand)
     pages.  *Note How to Make Your Own Headings: Custom Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for every page.  Not relevant
     to Info.  *Note How to Make Your Own Headings: Custom Headings.

`@example'
     Begin an example.  Indent text, do not fill, and select fixed-width
     font.  Pair with `@end example'.  *Note `@example': example.

`@exampleindent INDENT'
     Indent example-like environments by INDENT number of spaces
     (perhaps 0).  *Note Paragraph Indenting: exampleindent.

`@exclamdown{}'
     Produce an upside-down exclamation point.  *Note Inserting
     Accents::.

`@exdent LINE-OF-TEXT'
     Remove any indentation a line might have.  *Note Undoing the
     Indentation of a Line: exdent.

`@expansion{}'
     Indicate the result of a macro expansion to the reader with a
     special glyph: `==>'.  *Note ==> Indicating an Expansion:
     expansion.

`@file{FILENAME}'
     Highlight the name of a file, buffer, node, or directory.  *Note
     `@file': file.

`@finalout'
     Prevent TeX from printing large black warning rectangles beside
     over-wide lines.  *Note Overfull hboxes::.

`@findex ENTRY'
     Add ENTRY to the index of functions.  *Note Defining the Entries of
     an Index: Index Entries.

`@flushleft'
`@flushright'
     Left justify every line but leave the right end ragged.  Leave font
     as is.  Pair with `@end flushleft'.  `@flushright' analogous.
     *Note `@flushleft' and `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     Enter a footnote.  Footnote text is printed at the bottom of the
     page by TeX; Info may format in either `End' node or `Separate'
     node style.  *Note Footnotes::.

`@footnotestyle STYLE'
     Specify an Info file's footnote style, either `end' for the end
     node style or `separate' for the separate node style.  *Note
     Footnotes::.

`@format'
     Begin a kind of example.  Like `@display', but do not narrow the
     margins.  Pair with `@end format'.  *Note `@example': example.

`@ftable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of functions.  Pair with `@end ftable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@group'
     Hold text together that must appear on one printed page.  Pair with
     `@end group'.  Not relevant to Info.  *Note `@group': group.

`@H{C}'
     Generate the long Hungarian umlaut accent over C, as in o''.

`@heading TITLE'
     Print an unnumbered section-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with equal signs.  *Note Section Commands: unnumberedsec
     appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     Turn page headings on or off, and/or specify single-sided or
     double-sided page headings for printing.  *Note The `@headings'
     Command: headings on off.

`@html'
     Enter HTML completely.  Pair with `@end html'.  *Note Raw Formatter
     Commands::.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Explicitly define hyphenation points.  *Note `@-' and
     `@hyphenation': - and hyphenation.

`@i{TEXT}'
     Print TEXT in italic font.  No effect in Info.  *Note Fonts::.

`@ifclear FLAG'
     If FLAG is cleared, the Texinfo formatting commands format text
     between `@ifclear FLAG' and the following `@end ifclear' command.
     *Note `@set' `@clear' `@value': set clear value.

`@ifhtml'
`@ifinfo'
     Begin a stretch of text that will be ignored by TeX when it
     typesets the printed manual.  `@ifhtml' text appears only in the
     HTML output.  `@ifinfo' output appears in both Info and (for
     historical compatibility) plain text output .  Pair with `@end
     ifhtml' resp. `@end ifinfo'.  *Note Conditionals::.

`@ifnothtml'
`@ifnotinfo'
`@ifnotplaintext'
`@ifnottex'
     Begin a stretch of text that will be ignored in one output format
     but not the others.  The text appears in the formats not specified:
     `@ifnothtml' text is omitted from html output, etc.  The exception
     is `@ifnotinfo' text, which is omitted from plain text output as
     well as Info output.  Pair with `@end ifnothtml' resp. `@end
     ifnotinfo' resp. `@end ifnotplaintext' resp. `@end ifnottex'.
     *Note Conditionals::.

`@ifplaintext'
     Begin a stretch of text that appears only in the plain text output.
     Pair with `@end ifplaintext'.  *Note Conditionals::.

`@ifset FLAG'
     If FLAG is set, the Texinfo formatting commands format text between
     `@ifset FLAG' and the following `@end ifset' command.  *Note `@set'
     `@clear' `@value': set clear value.

`@iftex'
     Begin a stretch of text that will not appear in the Info file, but
     will be processed only by TeX.  Pair with `@end iftex'.  *Note
     Conditionally Visible Text: Conditionals.

`@ignore'
     Begin a stretch of text that will not appear in either the Info
     file or the printed output.  Pair with `@end ignore'.  *Note
     Comments and Ignored Text: Comments.

`@image{FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]}'
     Include graphics image in external FILENAME scaled to the given
     WIDTH and/or HEIGHT, using ALT text and looking for `FILENAME.EXT'
     in HTML.  *Note Images::.

`@include FILENAME'
     Incorporate the contents of the file FILENAME into the Info file or
     printed document.  *Note Include Files::.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     Make a cross reference to an Info file for which there is no
     printed manual.  *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     Use the specified macro definitions file.  This command is used
     only in the first line of a Texinfo file to cause TeX to make use
     of the `texinfo' macro definitions file.  The backslash in `\input'
     is used instead of an `@' because TeX does not recognize `@' until
     after it has read the definitions file.  *Note Texinfo File
     Header::.

`@item'
     Indicate the beginning of a marked paragraph for `@itemize' and
     `@enumerate'; indicate the beginning of the text of a first column
     entry for `@table', `@ftable', and `@vtable'.  *Note Lists and
     Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     Produce a sequence of indented paragraphs, with a mark inside the
     left margin at the beginning of each paragraph.  Pair with `@end
     itemize'.  *Note `@itemize': itemize.

`@itemx'
     Like `@item' but do not generate extra vertical space above the
     item text.  *Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     Indicate text that is characters of input to be typed by users.
     *Note `@kbd': kbd.

`@kbdinputstyle STYLE'
     Specify when `@kbd' should use a font distinct from `@code'.  *Note
     `@kbd': kbd.

`@key{KEY-NAME}'
     Indicate a name for a key on a keyboard.  *Note `@key': key.

`@kindex ENTRY'
     Add ENTRY to the index of keys.  *Note Defining the Entries of an
     Index: Index Entries.

`@L{}'
`@l{}'
     Generate the uppercase and lowercase Polish suppressed-L letters,
     respectively: /L, /l.

`@lisp'
     Begin an example of Lisp code.  Indent text, do not fill, and
     select fixed-width font.  Pair with `@end lisp'.  *Note `@lisp':
     lisp.

`@lowersections'
     Change subsequent chapters to sections, sections to subsections,
     and so on. *Note `@raisesections' and `@lowersections': Raise/lower
     sections.

`@macro MACRONAME {PARAMS}'
     Define a new Texinfo command `@MACRONAME{PARAMS}'.  Only supported
     by `makeinfo' and `texi2dvi'.  *Note Defining Macros::.

`@majorheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  Generate more vertical whitespace
     before the heading than the `@chapheading' command.  In Info, the
     chapter heading line is underlined with asterisks.  *Note
     `@majorheading' and `@chapheading': majorheading & chapheading.

`@math{MATHEMATICAL-EXPRESSION}'
     Format a mathematical expression.  *Note `@math': Inserting
     Mathematical Expressions: math.

`@menu'
     Mark the beginning of a menu of nodes in Info.  No effect in a
     printed manual.  Pair with `@end menu'.  *Note Menus::.

`@minus{}'
     Generate a minus sign, `-'.  *Note `@minus': minus.

`@multitable COLUMN-WIDTH-SPEC'
     Begin a multi-column table.  Pair with `@end multitable'.  *Note
     Multitable Column Widths::.

`@need N'
     Start a new page in a printed manual if fewer than N mils
     (thousandths of an inch) remain on the current page.  *Note
     `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Define the beginning of a new node in Info, and serve as a locator
     for references for TeX.  *Note `@node': node.

`@noindent'
     Prevent text from being indented as if it were a new paragraph.
     *Note `@noindent': noindent.

`@novalidate'
     Suppress validation of node references, omit creation of auxiliary
     files with TeX.  Use before `@setfilename'.  *Note Pointer
     Validation::.

`@O{}'
`@o{}'
     Generate the uppercase and lowercase O-with-slash letters,
     respectively: /O, /o.

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for odd-numbered (right-hand)
     pages.  *Note How to Make Your Own Headings: Custom Headings.

`@OE{}'
`@oe{}'
     Generate the uppercase and lowercase OE ligatures, respectively:
     OE, oe.  *Note Inserting Accents::.

`@option{OPTION-NAME}'
     Indicate a command-line option, such as `-l' or `--help'.  *Note
     `@option': option.

`@page'
     Start a new page in a printed manual.  No effect in Info.  *Note
     `@page': page.

`@pagesizes [WIDTH][, HEIGHT]'
     Change page dimensions.  *Note pagesizes::.

`@paragraphindent INDENT'
     Indent paragraphs by INDENT number of spaces (perhaps 0); preserve
     source file indentation if INDENT is `asis'.  *Note Paragraph
     Indenting: paragraphindent.

`@pindex ENTRY'
     Add ENTRY to the index of programs.  *Note Defining the Entries of
     an Index: Index Entries.

`@point{}'
     Indicate the position of point in a buffer to the reader with a
     glyph: `-!-'.  *Note Indicating Point in a Buffer: Point Glyph.

`@pounds{}'
     Generate the pounds sterling currency sign.  *Note `@pounds{}':
     pounds.

`@print{}'
     Indicate printed output to the reader with a glyph: `-|'.  *Note
     Print Glyph::.

`@printindex INDEX-NAME'
     Print an alphabetized two-column index in a printed manual or
     generate an alphabetized menu of index entries for Info.  *Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with a lower case `see' in a printed
     manual.  Use within parentheses only.  Do not follow command with a
     punctuation mark--the Info formatting commands automatically insert
     terminating punctuation as needed.  Only the first argument is
     mandatory.  *Note `@pxref': pxref.

`@questiondown{}'
     Generate an upside-down question mark.  *Note Inserting Accents::.

`@quotation'
     Narrow the margins to indicate text that is quoted from another
     real or imaginary work.  Write command on a line of its own.  Pair
     with `@end quotation'.  *Note `@quotation': quotation.

`@r{TEXT}'
     Print TEXT in roman font.  No effect in Info.  *Note Fonts::.

`@raisesections'
     Change subsequent sections to chapters, subsections to sections,
     and so on.  *Note `@raisesections' and `@lowersections':
     Raise/lower sections.

`@ref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference.  In a printed manual, the reference does not
     start with a `See'.  Follow command with a punctuation mark.  Only
     the first argument is mandatory.  *Note `@ref': ref.

`@refill'
     In Info, refill and indent the paragraph after all the other
     processing has been done.  No effect on TeX, which always refills.
     This command is no longer needed, since all formatters now
     automatically refill.  *Note Refilling Paragraphs::.

`@result{}'
     Indicate the result of an expression to the reader with a special
     glyph: `=>'.  *Note `@result': result.

`@ringaccent{C}'
     Generate a ring accent over the next character, as in o*.  *Note
     Inserting Accents::.

`@samp{TEXT}'
     Highlight TEXT that is a literal example of a sequence of
     characters.  Used for single characters, for statements, and often
     for entire shell commands.  *Note `@samp': samp.

`@sc{TEXT}'
     Set TEXT in a printed output in THE SMALL CAPS FONT and set text in
     the Info file in uppercase letters.  *Note Smallcaps::.

`@section TITLE'
     Begin a section within a chapter.  In a printed manual, the section
     title is numbered and appears in the table of contents.  In Info,
     the title is underlined with equal signs.  *Note `@section':
     section.

`@set FLAG [STRING]'
     Make FLAG active, causing the Texinfo formatting commands to format
     text between subsequent pairs of `@ifset FLAG' and `@end ifset'
     commands.  Optionally, set value of FLAG to STRING.  *Note `@set'
     `@clear' `@value': set clear value.

`@setchapternewpage ON-OFF-ODD'
     Specify whether chapters start on new pages, and if so, whether on
     odd-numbered (right-hand) new pages.  *Note `@setchapternewpage':
     setchapternewpage.

`@setcontentsaftertitlepage'
     Put the table of contents after the `@end titlepage' even if the
     `@contents' command is not there.  *Note Contents::.

`@setfilename INFO-FILE-NAME'
     Provide a name to be used by the Info file.  This command is
     essential for TeX formatting as well, even though it produces no
     output.  *Note `@setfilename': setfilename.

`@setshortcontentsaftertitlepage'
     Place the short table of contents after the `@end titlepage'
     command even if the `@shortcontents' command is not there.  *Note
     Contents::.

`@settitle TITLE'
     Provide a title for page headers in a printed manual, and the
     default document description for HTML `<head>'.  *Note `@settitle':
     settitle.

`@shortcontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@summarycontents'.  *Note Generating a Table of Contents:
     Contents.

`@shorttitlepage TITLE'
     Generate a minimal title page.  *Note `@titlepage': titlepage.

`@smallbook'
     Cause TeX to produce a printed manual in a 7 by 9.25 inch format
     rather than the regular 8.5 by 11 inch format.  *Note Printing
     Small Books: smallbook.  Also, see *note small::.

`@smalldisplay'
     Begin a kind of example.  Like `@smallexample' (narrow margins, no
     filling), but do not select the fixed-width font.  Pair with `@end
     smalldisplay'.  *Note small::.

`@smallexample'
     Indent text to indicate an example.  Do not fill, select
     fixed-width font, narrow the margins.  In printed manuals, print
     text in a smaller font than with `@example'.  Pair with `@end
     smallexample'.  *Note small::.

`@smallformat'
     Begin a kind of example.  Like `@smalldisplay', but do not narrow
     the margins.  Pair with `@end smallformat'.  *Note small::.

`@smalllisp'
     Begin an example of Lisp code.  Same as `@smallexample'.  Pair with
     `@end smalllisp'.  *Note small::.

`@sp N'
     Skip N blank lines.  *Note `@sp': sp.

`@ss{}'
     Generate the German sharp-S es-zet letter, ss.  *Note Inserting
     Accents::.

`@strong {TEXT}'
     Emphasize TEXT by typesetting it in a *bold* font for the printed
     manual and by surrounding it with asterisks for Info.  *Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     Print an unnumbered subsection-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with hyphens.  *Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@subsection TITLE'
     Begin a subsection within a section.  In a printed manual, the
     subsection title is numbered and appears in the table of contents.
     In Info, the title is underlined with hyphens.  *Note
     `@subsection': subsection.

`@subsubheading TITLE'
     Print an unnumbered subsubsection-like heading in the text, but not
     in the table of contents of a printed manual.  In Info, the title
     is underlined with periods.  *Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     Begin a subsubsection within a subsection.  In a printed manual,
     the subsubsection title is numbered and appears in the table of
     contents.  In Info, the title is underlined with periods.  *Note
     The `subsub' Commands: subsubsection.

`@subtitle TITLE'
     In a printed manual, set a subtitle in a normal sized font flush to
     the right-hand side of the page.  Not relevant to Info, which does
     not have title pages.  *Note `@title' `@subtitle' and `@author'
     Commands: title subtitle author.

`@summarycontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@shortcontents'.  *Note Generating a Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument, printing the entries from the first index in
     `@code' font.  *Note Combining Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument.  Do not change the font of FROM-INDEX entries.
     *Note Combining Indices::.

`@t{TEXT}'
     Print TEXT in a fixed-width, typewriter-like font.  No effect in
     Info.  *Note Fonts::.

`@tab'
     Separate columns in a multitable.  *Note Multitable Rows::.

`@table FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.  Write each
     first column entry on the same line as `@item'.  First column
     entries are printed in the font resulting from FORMATTING-COMMAND.
     Pair with `@end table'.  *Note Making a Two-column Table:
     Two-column Tables.  Also see *note `@ftable' and `@vtable': ftable
     vtable, and *note `@itemx': itemx.

`@TeX{}'
     Insert the logo TeX.  *Note Inserting TeX and (C): TeX and
     copyright.

`@tex'
     Enter TeX completely.  Pair with `@end tex'.  *Note Raw Formatter
     Commands::.

`@thischapter'
`@thischaptername'
`@thisfile'
`@thispage'
`@thistitle'
     Only allowed in a heading or footing.  Stands for the number and
     name of the current chapter (in the format `Chapter 1: Title'), the
     chapter name only, the filename, the current page number, and the
     title of the document, respectively.  *Note How to Make Your Own
     Headings: Custom Headings.

`@tieaccent{CC}'
     Generate a tie-after accent over the next two characters CC, as in
     `oo['.  *Note Inserting Accents::.

`@tindex ENTRY'
     Add ENTRY to the index of data types.  *Note Defining the Entries
     of an Index: Index Entries.

`@title TITLE'
     In a printed manual, set a title flush to the left-hand side of the
     page in a larger than normal font and underline it with a black
     rule.  Not relevant to Info, which does not have title pages.
     *Note The `@title' `@subtitle' and `@author' Commands: title
     subtitle author.

`@titlefont{TEXT}'
     In a printed manual, print TEXT in a larger than normal font.  Not
     relevant to Info, which does not have title pages.  *Note The
     `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Indicate to Texinfo the beginning of the title page.  Write command
     on a line of its own.  Pair with `@end titlepage'.  Nothing between
     `@titlepage' and `@end titlepage' appears in Info.  *Note
     `@titlepage': titlepage.

`@today{}'
     Insert the current date, in `1 Jan 1900' style.  *Note How to Make
     Your Own Headings: Custom Headings.

`@top TITLE'
     In a Texinfo file to be formatted with `makeinfo', identify the
     topmost `@node' in the file, which must be written on the line
     immediately preceding the `@top' command.  Used for `makeinfo''s
     node pointer insertion feature.  The title is underlined with
     asterisks.  Both the `@node' line and the `@top' line normally
     should be enclosed by `@ifnottex' and `@end ifnottex'.  In TeX and
     `texinfo-format-buffer', the `@top' command is merely a synonym for
     `@unnumbered'.  *Note Creating Pointers with `makeinfo': makeinfo
     Pointer Creation.

`@u{C}'
`@ubaraccent{C}'
`@udotaccent{C}'
     Generate a breve, underbar, or underdot accent, respectively, over
     or under the character C, as in o(, o_, .o.  *Note Inserting
     Accents::.

`@unnumbered TITLE'
     In a printed manual, begin a chapter that appears without chapter
     numbers of any kind.  The title appears in the table of contents of
     a printed manual.  In Info, the title is underlined with asterisks.
     *Note `@unnumbered' and `@appendix': unnumbered & appendix.

`@unnumberedsec TITLE'
     In a printed manual, begin a section that appears without section
     numbers of any kind.  The title appears in the table of contents of
     a printed manual.  In Info, the title is underlined with equal
     signs.  *Note Section Commands: unnumberedsec appendixsec heading.

`@unnumberedsubsec TITLE'
     In a printed manual, begin an unnumbered subsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with hyphens.  *Note
     `@unnumberedsubsec' `@appendixsubsec' `@subheading':
     unnumberedsubsec appendixsubsec subheading.

`@unnumberedsubsubsec TITLE'
     In a printed manual, begin an unnumbered subsubsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with periods.  *Note The
     `subsub' Commands: subsubsection.

`@uref{URL[, DISPLAYED-TEXT][, REPLACEMENT}'
     Define a cross reference to an external uniform resource locator
     for the World Wide Web.  *Note `@uref': uref.

`@url{URL}'
     Indicate text that is a uniform resource locator for the World Wide
     Web.  *Note `@url': url.

`@v{C}'
     Generate check accent over the character C, as in o<.  *Note
     Inserting Accents::.

`@value{FLAG}'
     Replace FLAG with the value to which it is set by `@set FLAG'.
     *Note `@set' `@clear' `@value': set clear value.

`@var{METASYNTACTIC-VARIABLE}'
     Highlight a metasyntactic variable, which is something that stands
     for another piece of text.  *Note Indicating Metasyntactic
     Variables: var.

`@verb{DELIM LITERAL DELIM}'
     Output LITERAL, delimited by the single character DELIM, exactly as
     is (in the fixed-width font), including any whitespace or Texinfo
     special characters.  *Note `verb': verb.

`@verbatim'
     Output the text of the environment exactly as is (in the
     fixed-width font).  Pair with `@end verbatim'.  *Note `verbatim':
     verbatim.

`@verbatiminclude FILENAME'
     Output the contents of FILENAME exactly as is (in the fixed-width
     font).  *Note `verbatiminclude': verbatiminclude.

`@vindex ENTRY'
     Add ENTRY to the index of variables.  *Note Defining the Entries of
     an Index: Index Entries.

`@vskip AMOUNT'
     In a printed manual, insert whitespace so as to push text on the
     remainder of the page towards the bottom of the page.  Used in
     formatting the copyright page with the argument `0pt plus 1filll'.
     (Note spelling of `filll'.)  `@vskip' may be used only in contexts
     ignored for Info.  *Note Copyright::.

`@vtable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of variables.  Pair with `@end vtable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@w{TEXT}'
     Prevent TEXT from being split across two lines.  Do not end a
     paragraph that uses `@w' with an `@refill' command.  *Note `@w': w.

`@xref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with `See' in a printed manual.
     Follow command with a punctuation mark.  Only the first argument is
     mandatory.  *Note `@xref': xref.


File: texinfo,  Node: Tips,  Next: Sample Texinfo Files,  Prev: Command List,  Up: Top

Appendix B Tips and Hints
*************************

Here are some tips for writing Texinfo documentation:

   * Write in the present tense, not in the past or the future.

   * Write actively!  For example, write "We recommend that ..." rather
     than "It is recommended that ...".

   * Use 70 or 72 as your fill column.  Longer lines are hard to read.

   * Include a copyright notice and copying permissions.

Index, Index, Index!
....................

Write many index entries, in different ways.  Readers like indices; they
are helpful and convenient.

  Although it is easiest to write index entries as you write the body of
the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.

  Here are more hints we have found valuable:

   * Write each index entry differently, so each entry refers to a
     different place in the document.

   * Write index entries only where a topic is discussed significantly.
     For example, it is not useful to index "debugging information" in a
     chapter on reporting bugs.  Someone who wants to know about
     debugging information will certainly not find it in that chapter.

   * Consistently capitalize the first word of every concept index
     entry, or else consistently use lower case.  Terse entries often
     call for lower case; longer entries for capitalization.  Whichever
     case convention you use, please use one or the other consistently!
     Mixing the two styles looks bad.

   * Always capitalize or use upper case for those words in an index for
     which this is proper, such as names of countries or acronyms.
     Always use the appropriate case for case-sensitive names, such as
     those in C or Lisp.

   * Write the indexing commands that refer to a whole section
     immediately after the section command, and write the indexing
     commands that refer to a paragraph before that paragraph.

     In the example that follows, a blank line comes after the index
     entry for "Leaping":

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping

          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (Note that the example shows entries for the same concept that are
     written in different ways--`Lazy dog', and `Dog, lazy'--so readers
     can look up the concept in different ways.)

Blank Lines
...........

   * Insert a blank line between a sectioning command and the first
     following sentence or paragraph, or between the indexing commands
     associated with the sectioning command and the first following
     sentence or paragraph, as shown in the tip on indexing.  Otherwise,
     a formatter may fold title and paragraph together.

   * Always insert a blank line before an `@table' command and after an
     `@end table' command; but never insert a blank line after an
     `@table' command or before an `@end table' command.

     For example,

          Types of fox:

          @table @samp
          @item Quick
          Jump over lazy dogs.

          @item Brown
          Also jump over lazy dogs.
          @end table

          @noindent
          On the other hand, ...

     Insert blank lines before and after `@itemize' ... `@end itemize'
     and `@enumerate' ... `@end enumerate' in the same way.

Complete Phrases
................

Complete phrases are easier to read than ...

   * Write entries in an itemized list as complete sentences; or at
     least, as complete phrases.  Incomplete expressions ... awkward ...
     like this.

   * Write the prefatory sentence or phrase for a multi-item list or
     table as a complete expression.  Do not write "You can set:";
     instead, write "You can set these variables:".  The former
     expression sounds cut off.

Editions, Dates and Versions
............................

Include edition numbers, version numbers, and dates in the `@copying'
text (for people reading the Texinfo file, and for the legal copyright
in the output files).  Then use `@insertcopying' in the `@titlepage'
section (for people reading the printed output) and the Top node (for
people reading the online output).

  It is easiest to do this using `@set' and `@value'.  *Note `@value'
Example: value Example, and *note GNU Sample Texts::.

Definition Commands
...................

Definition commands are `@deffn', `@defun', `@defmac', and the like, and
enable you to write descriptions in a uniform format.

   * Write just one definition command for each entity you define with a
     definition command.  The automatic indexing feature creates an
     index entry that leads the reader to the definition.

   * Use `@table' ... `@end table' in an appendix that contains a
     summary of functions, not `@deffn' or other definition commands.

Capitalization
..............

   * Capitalize "Texinfo"; it is a name.  Do not write the `x' or `i' in
     upper case.

   * Capitalize "Info"; it is a name.

   * Write TeX using the `@TeX{}' command.  Note the uppercase `T' and
     `X'.  This command causes the formatters to typeset the name
     according to the wishes of Donald Knuth, who wrote TeX.

Spaces
......

Do not use spaces to format a Texinfo file, except inside of `@example'
... `@end example' and similar commands.

  For example, TeX fills the following:

         @kbd{C-x v}
         @kbd{M-x vc-next-action}
            Perform the next logical operation
            on the version-controlled file
            corresponding to the current buffer.

so it looks like this:

     `C-x v' `M-x vc-next-action' Perform the next logical operation on
     the version-controlled file corresponding to the current buffer.

In this case, the text should be formatted with `@table', `@item', and
`@itemx', to create a table.

@code, @samp, @var, and `---'
.............................

   * Use `@code' around Lisp symbols, including command names.  For
     example,

          The main function is @code{vc-next-action}, ...

   * Avoid putting letters such as `s' immediately after an `@code'.
     Such letters look bad.

   * Use `@var' around meta-variables.  Do not write angle brackets
     around them.

   * Use three hyphens in a row, `---', to indicate a long dash.  TeX
     typesets these as a long dash and the Info formatters reduce three
     hyphens to two.

Periods Outside of Quotes
.........................

Place periods and other punctuation marks _outside_ of quotations,
unless the punctuation is part of the quotation.  This practice goes
against publishing conventions in the United States, but enables the
reader to distinguish between the contents of the quotation and the
whole passage.

  For example, you should write the following sentence with the period
outside the end quotation marks:

     Evidently, `au' is an abbreviation for ``author''.

since `au' does _not_ serve as an  abbreviation for `author.' (with a
period following the word).

Introducing New Terms
.....................

   * Introduce new terms so that a reader who does not know them can
     understand them from context; or write a definition for the term.

     For example, in the following, the terms "check in", "register" and
     "delta" are all appearing for the first time; the example sentence
     should be rewritten so they are understandable.

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   * Use the `@dfn' command around a word being introduced, to indicate
     that the reader should not expect to know the meaning already, and
     should expect to learn the meaning from this passage.

@pxref
......

Absolutely never use `@pxref' except in the special context for which it
is designed: inside parentheses, with the closing parenthesis following
immediately after the closing brace.  One formatter automatically
inserts closing punctuation and the other does not.  This means that the
output looks right both in printed output and in an Info file, but only
when the command is used inside parentheses.

Invoking from a Shell
.....................

You can invoke programs such as Emacs, GCC, and `gawk' from a shell.
The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, they are difficult for users to find.

  So, there is a convention to name such sections with a phrase
beginning with the word `Invoking', as in `Invoking Emacs'; this way,
users can find the section easily.

ANSI C Syntax
.............

When you use `@example' to describe a C function's calling conventions,
use the ANSI C syntax, like this:

     void dld_init (char *@var{path});

And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with `@var'.

  Avoid the obsolete style that looks like this:

     #include <dld.h>

     dld_init (path)
     char *path;

  Also, it is best to avoid writing `#include' above the declaration
just to indicate that the function is declared in a header file.  The
practice may give the misimpression that the `#include' belongs near the
declaration of the function.  Either state explicitly which header file
holds the declaration or, better yet, name the header file used for a
group of functions at the beginning of the section that describes the
functions.

Bad Examples
............

Here are several examples of bad writing to avoid:

  In this example, say, " ... you must `@dfn'{check in} the new
version."  That flows better.

     When you are done editing the file, you must perform a `@dfn'{check
     in}.

  In the following example, say, "... makes a unified interface such as
VC mode possible."

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

  And in this example, you should specify what `it' refers to:

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

And Finally ...
...............

   * Pronounce TeX as if the `X' were a Greek `chi', as the last sound
     in the name `Bach'.  But pronounce Texinfo as in `speck':
     "teckinfo".

   * Write notes for yourself at the very end of a Texinfo file after
     the `@bye'.  None of the formatters process text after the `@bye';
     it is as if the text were within `@ignore' ...  `@end ignore'.


File: texinfo,  Node: Sample Texinfo Files,  Next: Include Files,  Prev: Tips,  Up: Top

Appendix C Sample Texinfo Files
*******************************

The first example is from the first chapter (*note Short Sample::),
given here in its entirety, without commentary.  The second sample
includes the full texts to be used in GNU manuals.

* Menu:

* Short Sample Texinfo File::   
* GNU Sample Texts::            


File: texinfo,  Node: Short Sample Texinfo File,  Next: GNU Sample Texts,  Up: Sample Texinfo Files

C.1 Short Sample
================

Here is a complete, short sample Texinfo file, without any commentary.
You can see this file, with comments, in the first chapter.  *Note Short
Sample::.

  In a nutshell: The `makeinfo' program transforms a Texinfo source file
such as this into an Info file or HTML; and TeX typesets it for a
printed manual.


     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

     @copying
     This is a short example of a complete Texinfo file.

     Copyright (C) 2002 Free Software Foundation, Inc.
     @end copying

     @titlepage
     @title Sample Title
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @c Output the table of the contents at the beginning.
     @contents

     @ifnottex
     @node Top

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu


     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first

     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo,  Node: GNU Sample Texts,  Prev: Short Sample Texinfo File,  Up: Sample Texinfo Files

C.2 GNU Sample Texts
====================

Here is a sample Texinfo document with the full texts that should be
used in GNU manuals.

  As well as the legal texts, it also serves as a practical example of
how many elements in a GNU system can affect the manual.  If you're not
familiar with all these different elements, don't worry.  They're not
required and a perfectly good manual can be written without them.
They're included here nonetheless because many manuals do (or could)
benefit from them.

  *Note Short Sample::, for a minimal example of a Texinfo file.  *Note
Beginning a File::, for a full explanation of that minimal example.

  Here are some notes on the example:

   * The `Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $'
     comment is for CVS (*note Overview: (cvs)Top.) or RCS (see
     rcsintro(1)) version control systems, which expand it into a string
     such as:

          Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $

     (This is useful in all sources that use version control, not just
     manuals.)

   * The `version.texi' in the `@include' command is maintained
     automatically by Automake (*note Introduction: (automake)Top.).  It
     sets the `VERSION' and `UPDATED' values used elsewhere.  If your
     distribution doesn't use Automake, you can mimic these or
     equivalent settings.

   * The `@syncodeindex' command reflects the recommendation to use only
     one index if at all possible, to make it easier for readers.

   * The `@dircategory' is for constructing the Info directory.  *Note
     Installing Dir Entries::, which includes a variety of recommended
     category names.

   * The `Invoking' node is a GNU standard to help users find the basic
     information about command-line usage of a given program.  *Note
     Manual Structure Details: (standards)Manual Structure Details.

   * It is best to include the entire GNU Free Documentation License in
     a GNU manual, unless the manual is only a few pages long.  Of
     course this sample is even shorter than that, but it includes the
     FDL anyway in order to show one conventional way of doing so.  The
     `fdl.texi' file is available on the GNU machines (and in the
     Texinfo and other GNU distributions).

     The FDL provides for omitting itself under certain conditions, but
     in that case the sample texts given here have to be modified.
     *Note GNU Free Documentation License::.

   * If your manual has invariant sections (again, see the license
     itself for details), then don't forget to include them.

  Here is the sample document:

     \input texinfo    @c -*-texinfo-*-
     @comment Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $
     @comment %**start of header
     @setfilename sample.info
     @include version.texi
     @settitle GNU Sample @value{VERSION}
     @syncodeindex pg cp
     @comment %**end of header
     @copying
     This manual is for GNU Sample
     (version @value{VERSION}, @value{UPDATED}),
     which is an example in the Texinfo documentation.

     Copyright @copyright{} 2002 Free Software Foundation, Inc.

     @quotation
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1 or
     any later version published by the Free Software Foundation; with no
     Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
     and with the Back-Cover Texts as in (a) below.  A copy of the
     license is included in the section entitled ``GNU Free Documentation
     License.''

     (a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
     this GNU Manual, like GNU software.  Copies published by the Free
     Software Foundation raise funds for GNU development.''
     @end quotation
     @end copying

     @dircategory Texinfo documentation system
     @direntry
     * sample: (sample)Invoking sample.    
     @end direntry

     @titlepage
     @title GNU Sample
     @subtitle for version @value{VERSION}, @value{UPDATED}
     @author A.U. Thor (@email{bug-texinfo@@gnu.org})
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @contents

     @ifnottex
     @node Top
     @top GNU Sample

     @insertcopying
     @end ifnottex

     @menu
     * Invoking sample::
     * Copying This Manual::
     * Index::
     @end menu


     @node Invoking sample
     @chapter Invoking sample

     @pindex sample
     @cindex invoking @command{sample}

     This is a sample manual.  There is no sample program to
     invoke, but if there was, you could see its basic usage
     and command line options here.


     @node Copying This Manual
     @appendix Copying This Manual

     @menu
     * GNU Free Documentation License::  License for copying this manual.
     @end menu

     @include fdl.texi


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo,  Node: Include Files,  Next: Headings,  Prev: Sample Texinfo Files,  Up: Top

Appendix D Include Files
************************

When TeX or an Info formatting command sees an `@include' command in a
Texinfo file, it processes the contents of the file named by the command
and incorporates them into the DVI or Info file being created.  Index
entries from the included file are incorporated into the indices of the
output file.

  Include files let you keep a single large document as a collection of
conveniently small parts.

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.


File: texinfo,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Prev: Include Files,  Up: Include Files

D.1 How to Use Include Files
============================

To include another file within a Texinfo file, write the `@include'
command at the beginning of a line and follow it on the same line by the
name of a file to be included.  For example:

     @include buffers.texi

  An included file should simply be a segment of text that you expect to
be included as is into the overall or "outer" Texinfo file; it should
not contain the standard beginning and end parts of a Texinfo file.  In
particular, you should not start an included file with a line saying
`\input texinfo'; if you do, that phrase is inserted into the output
file as is.  Likewise, you should not end an included file with an
`@bye' command; nothing after `@bye' is formatted.

  In the past, you were required to write an `@setfilename' line at the
beginning of an included file, but no longer.  Now, it does not matter
whether you write such a line.  If an `@setfilename' line exists in an
included file, it is ignored.

  Conventionally, an included file begins with an `@node' line that is
followed by an `@chapter' line.  Each included file is one chapter.
This makes it easy to use the regular node and menu creating and
updating commands to create the node pointers and menus within the
included file.  However, the simple Emacs node and menu creating and
updating commands do not work with multiple Texinfo files.  Thus you
cannot use these commands to fill in the `Next', `Previous', and `Up'
pointers of the `@node' line that begins the included file.  Also, you
cannot use the regular commands to create a master menu for the whole
file.  Either you must insert the menus and the `Next', `Previous', and
`Up' pointers by hand, or you must use the GNU Emacs Texinfo mode
command, `texinfo-multiple-files-update', that is designed for
`@include' files.


File: texinfo,  Node: texinfo-multiple-files-update,  Next: Include File Requirements,  Prev: Using Include Files,  Up: Include Files

D.2 `texinfo-multiple-files-update'
===================================

GNU Emacs Texinfo mode provides the `texinfo-multiple-files-update'
command.  This command creates or updates `Next', `Previous', and `Up'
pointers of included files as well as those in the outer or overall
Texinfo file, and it creates or updates a main menu in the outer file.
Depending whether you call it with optional arguments, the command
updates only the pointers in the first `@node' line of the included
files or all of them:

`M-x texinfo-multiple-files-update'
     Called without any arguments:

        - Create or update the `Next', `Previous', and `Up' pointers of
          the first `@node' line in each file included in an outer or
          overall Texinfo file.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - Create or update a main menu in the outer file.

`C-u M-x texinfo-multiple-files-update'
     Called with `C-u' as a prefix argument:

        - Create or update pointers in the first `@node' line in each
          included file.

        - Create or update the `Top' level node pointers of the outer
          file.

        - Create and insert a master menu in the outer file.  The master
          menu is made from all the menus in all the included files.

`C-u 8 M-x texinfo-multiple-files-update'
     Called with a numeric prefix argument, such as `C-u 8':

        - Create or update *all* the `Next', `Previous', and `Up'
          pointers of all the included files.

        - Create or update *all* the menus of all the included files.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - And then create a master menu in the outer file.  This is
          similar to invoking `texinfo-master-menu' with an argument
          when you are working with just one file.

  Note the use of the prefix argument in interactive use: with a regular
prefix argument, just `C-u', the `texinfo-multiple-files-update' command
inserts a master menu; with a numeric prefix argument, such as `C-u 8',
the command updates *every* pointer and menu in *all* the files and then
inserts a master menu.


File: texinfo,  Node: Include File Requirements,  Next: Sample Include File,  Prev: texinfo-multiple-files-update,  Up: Include Files

D.3 Include File Requirements
=============================

If you plan to use the `texinfo-multiple-files-update' command, the
outer Texinfo file that lists included files within it should contain
nothing but the beginning and end parts of a Texinfo file, and a number
of `@include' commands listing the included files.  It should not even
include indices, which should be listed in an included file of their
own.

  Moreover, each of the included files must contain exactly one highest
level node (conventionally, `@chapter' or equivalent), and this node
must be the first node in the included file.  Furthermore, each of these
highest level nodes in each included file must be at the same
hierarchical level in the file structure.  Usually, each is an
`@chapter', an `@appendix', or an `@unnumbered' node.  Thus, normally,
each included file contains one, and only one, chapter or
equivalent-level node.

  The outer file should contain only _one_ node, the `Top' node.  It
should _not_ contain any nodes besides the single `Top' node.  The
`texinfo-multiple-files-update' command will not process them.


File: texinfo,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: Include File Requirements,  Up: Include Files

D.4 Sample File with `@include'
===============================

Here is an example of a complete outer Texinfo file with `@include'
files within it before running `texinfo-multiple-files-update', which
would insert a main or master menu:

     \input texinfo @c -*-texinfo-*-
     @setfilename  include-example.info
     @settitle Include Example

     @setchapternewpage odd
     @titlepage
     @sp 12
     @center @titlefont{Include Example}
     @sp 2
     @center by Whom Ever

     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     @end titlepage

     @ifinfo
     @node Top, First, , (dir)
     @top Master Menu
     @end ifinfo

     @include foo.texinfo
     @include bar.texinfo
     @include concept-index.texinfo

     @summarycontents
     @contents

     @bye

  An included file, such as `foo.texinfo', might look like this:

     @node First, Second, , Top
     @chapter First Chapter

     Contents of first chapter ...

  The full contents of `concept-index.texinfo' might be as simple as
this:

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

  The outer Texinfo source file for `The GNU Emacs Lisp Reference
Manual' is named `elisp.texi'.  This outer file contains a master menu
with 417 entries and a list of 41 `@include' files.


File: texinfo,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

D.5 Evolution of Include Files
==============================

When Info was first created, it was customary to create many small Info
files on one subject.  Each Info file was formatted from its own Texinfo
source file.  This custom meant that Emacs did not need to make a large
buffer to hold the whole of a large Info file when someone wanted
information; instead, Emacs allocated just enough memory for the small
Info file that contained the particular information sought.  This way,
Emacs could avoid wasting memory.

  References from one file to another were made by referring to the file
name as well as the node name. (*Note Referring to Other Info Files:
Other Info Files.  Also, see *note `@xref' with Four and Five Arguments:
Four and Five Arguments.)

  Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so TeX could
automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint indices;
each of the individual Texinfo files had to be formatted for Info
individually.  (Each, therefore, required its own `@setfilename' line.)

  However, because large Info files are now split automatically, it is
no longer necessary to keep them small.

  Nowadays, multiple Texinfo files are used mostly for large documents,
such as `The GNU Emacs Lisp Reference Manual', and for projects in which
several different people write different sections of a document
simultaneously.

  In addition, the Info formatting commands have been extended to work
with the `@include' command so as to create a single large Info file
that is split into smaller files if necessary.  This means that you can
write menus and cross references without naming the different Texinfo
files.


File: texinfo,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

Appendix E Page Headings
************************

Most printed manuals contain headings along the top of every page except
the title and copyright pages.  Some manuals also contain footings.
(Headings and footings have no meaning to Info, which is not paginated.)

* Menu:

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo,  Node: Headings Introduced,  Next: Heading Format,  Prev: Headings,  Up: Headings

Headings Introduced
===================

Texinfo provides standard page heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Typically, you will use these
formats, but you can specify your own format if you wish.

  In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.

  By convention, a book is printed on both sides of each sheet of paper.
When you open a book, the right-hand page is odd-numbered, and chapters
begin on right-hand pages--a preceding left-hand page is left blank if
necessary.  Reports, however, are often printed on just one side of
paper, and chapters begin on a fresh page immediately following the end
of the preceding chapter.  In short or informal reports, chapters often
do not begin on a new page at all, but are separated from the preceding
text by a small amount of whitespace.

  The `@setchapternewpage' command controls whether chapters begin on
new pages, and whether one of the standard heading formats is used.  In
addition, Texinfo has several heading and footing commands that you can
use to generate your own heading and footing formats.

  In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the right
part is set flushright.


File: texinfo,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

E.1 Standard Heading Formats
============================

Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed on
both sides of the paper.

  By default, nothing is specified for the footing of a Texinfo file, so
the footing remains blank.

  The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page number.

  A single-sided page looks like this:

        _______________________
       |                       |
       | chapter   page number |
       |                       |
       | Start of text ...     |
       | ...                   |
       |                       |

  The standard format for two-sided printing depends on whether the page
number is even or odd.  By convention, even-numbered pages are on the
left- and odd-numbered pages are on the right.  (TeX will adjust the
widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly--sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)

  In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
`@settitle' command).  The left part of the right-hand (odd-numbered)
page contains the name of the chapter, the central part is blank, and
the right part contains the page number.

  Two pages, side by side as in an open book, look like this:

        _______________________     _______________________
       |                       |   |                       |
       | page number     title |   | chapter   page number |
       |                       |   |                       |
       | Start of text ...     |   | More  text ...        |
       | ...                   |   | ...                   |
       |                       |   |                       |

The chapter name is preceded by the word "Chapter", the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.


File: texinfo,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

E.2 Specifying the Type of Heading
==================================

TeX does not begin to generate page headings for a standard Texinfo file
until it reaches the `@end titlepage' command.  Thus, the title and
copyright pages are not numbered.  The `@end titlepage' command causes
TeX to begin to generate page headings according to a standard format
specified by the `@setchapternewpage' command that precedes the
`@titlepage' section.

  There are four possibilities:

No `@setchapternewpage' command
     Cause TeX to specify the single-sided heading format, with chapters
     on new pages. This is the same as `@setchapternewpage on'.

`@setchapternewpage on'
     Specify the single-sided heading format, with chapters on new
     pages.

`@setchapternewpage off'
     Cause TeX to start a new chapter on the same page as the last page
     of the preceding chapter, after skipping some vertical whitespace.
     Also cause TeX to typeset for single-sided printing.  (You can
     override the headers format with the `@headings double' command;
     see *note The `@headings' Command: headings on off.)

`@setchapternewpage odd'
     Specify the double-sided heading format, with chapters on new
     pages.

Texinfo lacks an `@setchapternewpage even' command.


File: texinfo,  Node: Custom Headings,  Prev: Heading Choice,  Up: Headings

E.3 How to Make Your Own Headings
=================================

You can use the standard headings provided with Texinfo or specify your
own.  By default, Texinfo has no footers, so if you specify them, the
available page size for the main text will be slightly reduced.

  Texinfo provides six commands for specifying headings and footings:
   * `@everyheading' `@everyfooting' generate page headers and footers
     that are the same for both even- and odd-numbered pages.

   * `@evenheading' and `@evenfooting' command generate headers and
     footers for even-numbered (left-hand) pages.

   * `@oddheading' and `@oddfooting' generate headers and footers for
     odd-numbered (right-hand) pages.

  Write custom heading specifications in the Texinfo file immediately
after the `@end titlepage' command.  You must cancel the predefined
heading commands with the `@headings off' command before defining your
own specifications.

  Here is how to tell TeX to place the chapter name at the left, the
page number in the center, and the date at the right of every header for
both even- and odd-numbered pages:

     @headings off
     @everyheading @thischapter @| @thispage @| @today{}

You need to divide the left part from the central part and the central
part from the right part by inserting `@|' between parts.  Otherwise,
the specification command will not be able to tell where the text for
one part ends and the next part begins.

  Each part can contain text or @-commands.  The text is printed as if
the part were within an ordinary paragraph in the body of the page.  The
@-commands replace themselves with the page number, date, chapter name,
or whatever.

  Here are the six heading and footing commands:

`@everyheading LEFT @| CENTER @| RIGHT'
`@everyfooting LEFT @| CENTER @| RIGHT'
     The `every' commands specify the format for both even- and
     odd-numbered pages.  These commands are for documents that are
     printed on one side of each sheet of paper, or for documents in
     which you want symmetrical headers or footers.

`@evenheading LEFT @| CENTER @| RIGHT'
`@oddheading  LEFT @| CENTER @| RIGHT'
`@evenfooting LEFT @| CENTER @| RIGHT'
`@oddfooting  LEFT @| CENTER @| RIGHT'
     The `even' and `odd' commands specify the format for even-numbered
     pages and odd-numbered pages.  These commands are for books and
     manuals that are printed on both sides of each sheet of paper.

  Use the `@this...' series of @-commands to provide the names of
chapters and sections and the page number.  You can use the `@this...'
commands in the left, center, or right portions of headers and footers,
or anywhere else in a Texinfo file so long as they are between `@iftex'
and `@end iftex' commands.

  Here are the `@this...' commands:

`@thispage'
     Expands to the current page number.

`@thischaptername'
     Expands to the name of the current chapter.

`@thischapter'
     Expands to the number and name of the current chapter, in the
     format `Chapter 1: Title'.

`@thistitle'
     Expands to the name of the document, as specified by the
     `@settitle' command.

`@thisfile'
     For `@include' files only: expands to the name of the current
     `@include' file.  If the current Texinfo source file is not an
     `@include' file, this command has no effect.  This command does
     _not_ provide the name of the current Texinfo source file unless it
     is an `@include' file.  (*Note Include Files::, for more
     information about `@include' files.)

You can also use the `@today{}' command, which expands to the current
date, in `1 Jan 1900' format.

  Other @-commands and text are printed in a header or footer just as if
they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:

     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}

  Beware of overlong titles: they may overlap another part of the header
or footer and blot it out.


File: texinfo,  Node: Catching Mistakes,  Next: Refilling Paragraphs,  Prev: Headings,  Up: Top

Appendix F Formatting Mistakes
******************************

Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo: you can make mistakes with
@-commands, and you can make mistakes with the structure of the nodes
and chapters.

  Emacs has two tools for catching the @-command mistakes and two for
catching structuring mistakes.

  For finding problems with @-commands, you can run TeX or a region
formatting command on the region that has a problem; indeed, you can run
these commands on each region as you write it.

  For finding problems with the structure of nodes and chapters, you can
use `C-c C-s' (`texinfo-show-structure') and the related `occur' command
and you can use the `M-x Info-validate' command.

* Menu:

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.


File: texinfo,  Node: makeinfo Preferred,  Next: Debugging with Info,  Prev: Catching Mistakes,  Up: Catching Mistakes

`makeinfo' Find Errors
======================

The `makeinfo' program does an excellent job of catching errors and
reporting them--far better than `texinfo-format-region' or
`texinfo-format-buffer'.  In addition, the various functions for
automatically creating and updating node pointers and menus remove many
opportunities for human error.

  If you can, use the updating commands to create and insert pointers
and menus.  These prevent many errors.  Then use `makeinfo' (or its
Texinfo mode manifestations, `makeinfo-region' and `makeinfo-buffer') to
format your file and check for other errors.  This is the best way to
work with Texinfo.  But if you cannot use `makeinfo', or your problem is
very puzzling, then you may want to use the tools described in this
appendix.


File: texinfo,  Node: Debugging with Info,  Next: Debugging with TeX,  Prev: makeinfo Preferred,  Up: Catching Mistakes

F.1 Catching Errors with Info Formatting
========================================

After you have written part of a Texinfo file, you can use the
`texinfo-format-region' or the `makeinfo-region' command to see whether
the region formats properly.

  Most likely, however, you are reading this section because for some
reason you cannot use the `makeinfo-region' command; therefore, the rest
of this section presumes that you are using `texinfo-format-region'.

  If you have made a mistake with an @-command, `texinfo-format-region'
will stop processing at or after the error and display an error message.
To see where in the buffer the error occurred, switch to the `*Info
Region*' buffer; the cursor will be in a position that is after the
location of the error.  Also, the text will not be formatted after the
place where the error occurred (or more precisely, where it was
detected).

  For example, if you accidentally end a menu with the command `@end
menus' with an `s' on the end, instead of with `@end menu', you will see
an error message that says:

     @end menus is not handled by texinfo

The cursor will stop at the point in the buffer where the error occurs,
or not long after it.  The buffer will look like this:

     ---------- Buffer: *Info Region* ----------
     * Menu:

     * Using texinfo-show-structure::  How to use
                                       `texinfo-show-structure'
                                       to catch mistakes.
     * Running Info-Validate::         How to check for
                                       unreferenced nodes.
     @end menus
     -!-
     ---------- Buffer: *Info Region* ----------

  The `texinfo-format-region' command sometimes provides slightly odd
error messages.  For example, the following cross reference fails to
format:

     (@xref{Catching Mistakes, for more info.)

In this case, `texinfo-format-region' detects the missing closing brace
but displays a message that says `Unbalanced parentheses' rather than
`Unbalanced braces'.  This is because the formatting command looks for
mismatches between braces as if they were parentheses.

  Sometimes `texinfo-format-region' fails to detect mistakes.  For
example, in the following, the closing brace is swapped with the closing
parenthesis:

     (@xref{Catching Mistakes), for more info.}

Formatting produces:
     (*Note for more info.: Catching Mistakes)

  The only way for you to detect this error is to realize that the
reference should have looked like this:

     (*Note Catching Mistakes::, for more info.)

  Incidentally, if you are reading this node in Info and type `f <RET>'
(`Info-follow-reference'), you will generate an error message that says:

     No such node: "Catching Mistakes) The only way ...

This is because Info perceives the example of the error as the first
cross reference in this node and if you type a <RET> immediately after
typing the Info `f' command, Info will attempt to go to the referenced
node.  If you type `f catch <TAB> <RET>', Info will complete the node
name of the correctly written example and take you to the `Catching
Mistakes' node.  (If you try this, you can return from the `Catching
Mistakes' node by typing `l' (`Info-last').)


File: texinfo,  Node: Debugging with TeX,  Next: Using texinfo-show-structure,  Prev: Debugging with Info,  Up: Catching Mistakes

F.2 Catching Errors with TeX Formatting
=======================================

You can also catch mistakes when you format a file with TeX.

  Usually, you will want to do this after you have run
`texinfo-format-buffer' (or, better, `makeinfo-buffer') on the same
file, because `texinfo-format-buffer' sometimes displays error messages
that make more sense than TeX.  (*Note Debugging with Info::, for more
information.)

  For example, TeX was run on a Texinfo file, part of which is shown
here:

     ---------- Buffer: texinfo.texi ----------
     name of the Texinfo file as an extension.  The
     @samp{??} are `wildcards' that cause the shell to
     substitute all the raw index files.  (@xref{sorting
     indices, for more information about sorting
     indices.)@refill
     ---------- Buffer: texinfo.texi ----------

(The cross reference lacks a closing brace.)  TeX produced the following
output, after which it stopped:

     ---------- Buffer: *tex-shell* ----------
     Runaway argument?
     {sorting indices, for more information about sorting
     indices.) @refill @ETC.
     ! Paragraph ended before @xref was complete.
     <to be read again>
                        @par
     l.27

     ?
     ---------- Buffer: *tex-shell* ----------

  In this case, TeX produced an accurate and understandable error
message:

     Paragraph ended before @xref was complete.

`@par' is an internal TeX command of no relevance to Texinfo.  `l.27'
means that TeX detected the problem on line 27 of the Texinfo file.  The
`?' is the prompt TeX uses in this circumstance.

  Unfortunately, TeX is not always so helpful, and sometimes you must
truly be a Sherlock Holmes to discover what went wrong.

  In any case, if you run into a problem like this, you can do one of
three things.

  1. You can tell TeX to continue running and ignore just this error by
     typing <RET> at the `?' prompt.

  2. You can tell TeX to continue running and to ignore all errors as
     best it can by typing `r <RET>' at the `?' prompt.

     This is often the best thing to do.  However, beware: the one error
     may produce a cascade of additional error messages as its
     consequences are felt through the rest of the file.  To stop TeX
     when it is producing such an avalanche of error messages, type
     `C-c' (or `C-c C-c', if you are running a shell inside Emacs).

  3. You can tell TeX to stop this run by typing `x <RET>' at the `?'
     prompt.

  If you are running TeX inside Emacs, you need to switch to the shell
buffer and line at which TeX offers the `?' prompt.

  Sometimes TeX will format a file without producing error messages even
though there is a problem.  This usually occurs if a command is not
ended but TeX is able to continue processing anyhow.  For example, if
you fail to end an itemized list with the `@end itemize' command, TeX
will write a DVI file that you can print out.  The only error message
that TeX will give you is the somewhat mysterious comment that

     (@end occurred inside a group at level 1)

However, if you print the DVI file, you will find that the text of the
file that follows the itemized list is entirely indented as if it were
part of the last item in the itemized list.  The error message is the
way TeX says that it expected to find an `@end' command somewhere in the
file; but that it could not determine where it was needed.

  Another source of notoriously hard-to-find errors is a missing `@end
group' command.  If you ever are stumped by incomprehensible errors,
look for a missing `@end group' command first.

  If the Texinfo file lacks header lines, TeX may stop in the beginning
of its run and display output that looks like the following.  The `*'
indicates that TeX is waiting for input.

     This is TeX, Version 3.14159 (Web2c 7.0)
     (test.texinfo [1])
     *

In this case, simply type `\end <RET>' after the asterisk.  Then write
the header lines in the Texinfo file and run the TeX command again.
(Note the use of the backslash, `\'.  TeX uses `\' instead of `@'; and
in this circumstance, you are working directly with TeX, not with
Texinfo.)


File: texinfo,  Node: Using texinfo-show-structure,  Next: Using occur,  Prev: Debugging with TeX,  Up: Catching Mistakes

F.3 Using `texinfo-show-structure'
==================================

It is not always easy to keep track of the nodes, chapters, sections,
and subsections of a Texinfo file.  This is especially true if you are
revising or adding to a Texinfo file that someone else has written.

  In GNU Emacs, in Texinfo mode, the `texinfo-show-structure' command
lists all the lines that begin with the @-commands that specify the
structure: `@chapter', `@section', `@appendix', and so on.  With an
argument (`C-u' as prefix argument, if interactive), the command also
shows the `@node' lines.  The `texinfo-show-structure' command is bound
to `C-c C-s' in Texinfo mode, by default.

  The lines are displayed in a buffer called the `*Occur*' buffer,
indented by hierarchical level.  For example, here is a part of what was
produced by running `texinfo-show-structure' on this manual:

      Lines matching "^@\\(chapter \\|sect\\|subs\\|subh\\|
      unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
      in buffer texinfo.texi.
      ...
      4177:@chapter Nodes
      4198:    @heading Two Paths
      4231:    @section Node and Menu Illustration
      4337:    @section The @code{@@node} Command
      4393:        @subheading Choosing Node and Pointer Names
      4417:        @subsection How to Write an @code{@@node} Line
      4469:        @subsection @code{@@node} Line Tips
      ...

  This says that lines 4337, 4393, and 4417 of `texinfo.texi' begin with
the `@section', `@subheading', and `@subsection' commands respectively.
If you move your cursor into the `*Occur*' window, you can position the
cursor over one of the lines and use the `C-c C-c' command
(`occur-mode-goto-occurrence'), to jump to the corresponding spot in the
Texinfo file.  *Note Using Occur: (emacs)Other Repeating Search, for
more information about `occur-mode-goto-occurrence'.

  The first line in the `*Occur*' window describes the "regular
expression" specified by TEXINFO-HEADING-PATTERN.  This regular
expression is the pattern that `texinfo-show-structure' looks for.
*Note Using Regular Expressions: (emacs)Regexps, for more information.

  When you invoke the `texinfo-show-structure' command, Emacs will
display the structure of the whole buffer.  If you want to see the
structure of just a part of the buffer, of one chapter, for example, use
the `C-x n n' (`narrow-to-region') command to mark the region.  (*Note
Narrowing: (emacs)Narrowing.)  This is how the example used above was
generated.  (To see the whole buffer again, use `C-x n w' (`widen').)

  If you call `texinfo-show-structure' with a prefix argument by typing
`C-u C-c C-s', it will list lines beginning with `@node' as well as the
lines beginning with the @-sign commands for `@chapter', `@section', and
the like.

  You can remind yourself of the structure of a Texinfo file by looking
at the list in the `*Occur*' window; and if you have mis-named a node or
left out a section, you can correct the mistake.


File: texinfo,  Node: Using occur,  Next: Running Info-Validate,  Prev: Using texinfo-show-structure,  Up: Catching Mistakes

F.4 Using `occur'
=================

Sometimes the `texinfo-show-structure' command produces too much
information.  Perhaps you want to remind yourself of the overall
structure of a Texinfo file, and are overwhelmed by the detailed list
produced by `texinfo-show-structure'.  In this case, you can use the
`occur' command directly.  To do this, type

     `M-x occur'

and then, when prompted, type a "regexp", a regular expression for the
pattern you want to match.  (*Note Regular Expressions: (emacs)Regexps.)
The `occur' command works from the current location of the cursor in the
buffer to the end of the buffer.  If you want to run `occur' on the
whole buffer, place the cursor at the beginning of the buffer.

  For example, to see all the lines that contain the word `@chapter' in
them, just type `@chapter'.  This will produce a list of the chapters.
It will also list all the sentences with `@chapter' in the middle of the
line.

  If you want to see only those lines that start with the word
`@chapter', type `^@chapter' when prompted by `occur'.  If you want to
see all the lines that end with a word or phrase, end the last word with
a `$'; for example, `catching mistakes$'.  This can be helpful when you
want to see all the nodes that are part of the same chapter or section
and therefore have the same `Up' pointer.

  *Note Using Occur: (emacs)Other Repeating Search, for more
information.


File: texinfo,  Node: Running Info-Validate,  Prev: Using occur,  Up: Catching Mistakes

F.5 Finding Badly Referenced Nodes
==================================

You can use the `Info-validate' command to check whether any of the
`Next', `Previous', `Up' or other node pointers fail to point to a node.
This command checks that every node pointer points to an existing node.
The `Info-validate' command works only on Info files, not on Texinfo
files.

  The `makeinfo' program validates pointers automatically, so you do not
need to use the `Info-validate' command if you are using `makeinfo'.
You only may need to use `Info-validate' if you are unable to run
`makeinfo' and instead must create an Info file using
`texinfo-format-region' or `texinfo-format-buffer', or if you write an
Info file from scratch.

* Menu:

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.


File: texinfo,  Node: Using Info-validate,  Next: Unsplit,  Prev: Running Info-Validate,  Up: Running Info-Validate

F.5.1 Running `Info-validate'
-----------------------------

To use `Info-validate', visit the Info file you wish to check and type:

     M-x Info-validate

Note that the `Info-validate' command requires an upper case `I'.  You
may also need to create a tag table before running `Info-validate'.
*Note Tagifying::.

  If your file is valid, you will receive a message that says "File
appears valid".  However, if you have a pointer that does not point to a
node, error messages will be displayed in a buffer called `*problems in
info file*'.

  For example, `Info-validate' was run on a test file that contained
only the first node of this manual.  One of the messages said:

     In node "Overview", invalid Next: Texinfo Mode

This meant that the node called `Overview' had a `Next' pointer that did
not point to anything (which was true in this case, since the test file
had only one node in it).

  Now suppose we add a node named `Texinfo Mode' to our test case but we
do not specify a `Previous' for this node.  Then we will get the
following error message:

     In node "Texinfo Mode", should have Previous: Overview

This is because every `Next' pointer should be matched by a `Previous'
(in the node where the `Next' points) which points back.

  `Info-validate' also checks that all menu entries and cross references
point to actual nodes.

  `Info-validate' requires a tag table and does not work with files that
have been split.  (The `texinfo-format-buffer' command automatically
splits large files.)  In order to use `Info-validate' on a large file,
you must run `texinfo-format-buffer' with an argument so that it does
not split the Info file; and you must create a tag table for the unsplit
file.


File: texinfo,  Node: Unsplit,  Next: Tagifying,  Prev: Using Info-validate,  Up: Running Info-Validate

F.5.2 Creating an Unsplit File
------------------------------

You can run `Info-validate' only on a single Info file that has a tag
table.  The command will not work on the indirect subfiles that are
generated when a master file is split.  If you have a large file (longer
than 70,000 bytes or so), you need to run the `texinfo-format-buffer' or
`makeinfo-buffer' command in such a way that it does not create indirect
subfiles.  You will also need to create a tag table for the Info file.
After you have done this, you can run `Info-validate' and look for badly
referenced nodes.

  The first step is to create an unsplit Info file.  To prevent
`texinfo-format-buffer' from splitting a Texinfo file into smaller Info
files, give a prefix to the `M-x texinfo-format-buffer' command:

     C-u M-x texinfo-format-buffer

or else

     C-u C-c C-e C-b

When you do this, Texinfo will not split the file and will not create a
tag table for it.


File: texinfo,  Node: Tagifying,  Next: Splitting,  Prev: Unsplit,  Up: Running Info-Validate

F.5.3 Tagifying a File
----------------------

After creating an unsplit Info file, you must create a tag table for it.
Visit the Info file you wish to tagify and type:

     M-x Info-tagify

(Note the upper case `I' in `Info-tagify'.)  This creates an Info file
with a tag table that you can validate.

  The third step is to validate the Info file:

     M-x Info-validate

(Note the upper case `I' in `Info-validate'.)  In brief, the steps are:

     C-u M-x texinfo-format-buffer
     M-x Info-tagify
     M-x Info-validate

  After you have validated the node structure, you can rerun
`texinfo-format-buffer' in the normal way so it will construct a tag
table and split the file automatically, or you can make the tag table
and split the file manually.


File: texinfo,  Node: Splitting,  Prev: Tagifying,  Up: Running Info-Validate

F.5.4 Splitting a File Manually
-------------------------------

You should split a large file or else let the `texinfo-format-buffer' or
`makeinfo-buffer' command do it for you automatically.  (Generally you
will let one of the formatting commands do this job for you.  *Note
Creating an Info File::.)

  The split-off files are called the indirect subfiles.

  Info files are split to save memory.  With smaller files, Emacs does
not have make such a large buffer to hold the information.

  If an Info file has more than 30 nodes, you should also make a tag
table for it. *Note Using Info-validate::, for information about
creating a tag table.  (Again, tag tables are usually created
automatically by the formatting command; you only need to create a tag
table yourself if you are doing the job manually.  Most likely, you will
do this for a large, unsplit file on which you have run
`Info-validate'.)

  Visit the Info file you wish to tagify and split and type the two
commands:

     M-x Info-tagify
     M-x Info-split

(Note that the `I' in `Info' is upper case.)

  When you use the `Info-split' command, the buffer is modified into a
(small) Info file which lists the indirect subfiles.  This file should
be saved in place of the original visited file.  The indirect subfiles
are written in the same directory the original file is in, with names
generated by appending `-' and a number to the original file name.

  The primary file still functions as an Info file, but it contains just
the tag table and a directory of subfiles.


File: texinfo,  Node: Refilling Paragraphs,  Next: Command Syntax,  Prev: Catching Mistakes,  Up: Top

Appendix G Refilling Paragraphs
*******************************

The `@refill' command refills and, optionally, indents the first line of
a paragraph.(1) (*note Refilling Paragraphs-Footnote-1::) The `@refill'
command is no longer important, but we describe it here because you once
needed it.  You will see it in many old Texinfo files.

  Without refilling, paragraphs containing long @-constructs may look
bad after formatting because the formatter removes @-commands and
shortens some lines more than others.  In the past, neither the
`texinfo-format-region' command nor the `texinfo-format-buffer' command
refilled paragraphs automatically.  The `@refill' command had to be
written at the end of every paragraph to cause these formatters to fill
them.  (Both TeX and `makeinfo' have always refilled paragraphs
automatically.)  Now, all the Info formatters automatically fill and
indent those paragraphs that need to be filled and indented.

  The `@refill' command causes `texinfo-format-region' and
`texinfo-format-buffer' to refill a paragraph in the Info file _after_
all the other processing has been done.  For this reason, you can not
use `@refill' with a paragraph containing either `@*' or `@w{ ... }'
since the refilling action will override those two commands.

  The `texinfo-format-region' and `texinfo-format-buffer' commands now
automatically append `@refill' to the end of each paragraph that should
be filled.  They do not append `@refill' to the ends of paragraphs that
contain `@*' or `@w{ ...}' and therefore do not refill or indent them.


File: texinfo,  Node: Refilling Paragraphs-Footnotes,  Up: Refilling Paragraphs

  (1) Perhaps the command should have been called the `@refillandindent'
command, but `@refill' is shorter and the name was chosen before
indenting was possible.


File: texinfo,  Node: Command Syntax,  Next: Obtaining TeX,  Prev: Refilling Paragraphs,  Up: Top

Appendix H @-Command Syntax
***************************

The character `@' is used to start special Texinfo commands.  (It has
the same meaning that `\' has in plain TeX.)  Texinfo has four types of
@-command:

1. Non-alphabetic commands.
     These commands consist of an @ followed by a punctuation mark or
     other character that is not part of the alphabet.  Non-alphabetic
     commands are almost always part of the text within a paragraph, and
     never take any argument.  The two characters (@ and the other one)
     are complete in themselves; none is followed by braces.  The
     non-alphabetic commands are: `@.', `@:', `@*', `@`SPACE'',
     `@`TAB'', `@`NL'', `@@', `@{', and `@}'.

2. Alphabetic commands that do not require arguments.
     These commands start with @ followed by a word followed by left-
     and right-hand braces.  These commands insert special symbols in
     the document; they do not require arguments.  For example,
     `@dots{}' => `...', `@equiv{}' => `==', `@TeX{}' => `TeX', and
     `@bullet{}' => `*'.

3. Alphabetic commands that require arguments within braces.
     These commands start with @ followed by a letter or a word,
     followed by an argument within braces.  For example, the command
     `@dfn' indicates the introductory or defining use of a term; it is
     used as follows: `In Texinfo, @@-commands are @dfn{mark-up}
     commands.'

4. Alphabetic commands that occupy an entire line.
     These commands occupy an entire line.  The line starts with @,
     followed by the name of the command (a word); for example,
     `@center' or `@cindex'.  If no argument is needed, the word is
     followed by the end of the line.  If there is an argument, it is
     separated from the command name by a space.  Braces are not used.

  Thus, the alphabetic commands fall into classes that have different
argument syntaxes.  You cannot tell to which class a command belongs by
the appearance of its name, but you can tell by the command's meaning:
if the command stands for a glyph, it is in class 2 and does not require
an argument; if it makes sense to use the command together with other
text as part of a paragraph, the command is in class 3 and must be
followed by an argument in braces; otherwise, it is in class 4 and uses
the rest of the line as its argument.

  The purpose of having a different syntax for commands of classes 3 and
4 is to make Texinfo files easier to read, and also to help the GNU
Emacs paragraph and filling commands work properly.  There is only one
exception to this rule: the command `@refill', which is always used at
the end of a paragraph immediately following the final period or other
punctuation character.  `@refill' takes no argument and does _not_
require braces.  `@refill' never confuses the Emacs paragraph commands
because it cannot appear at the beginning of a line.


File: texinfo,  Node: Obtaining TeX,  Next: Copying This Manual,  Prev: Command Syntax,  Up: Top

Appendix I How to Obtain TeX
****************************

TeX is freely redistributable.  You can obtain TeX for Unix systems via
anonymous ftp or on physical media.  The core material consists of the
Web2c TeX distribution (`http://tug.org/web2c').

  Instructions for retrieval by anonymous ftp and information on other
available distributions:
     `ftp://tug.org/tex/unixtex.ftp'
     `http://tug.org/unixtex.ftp'

  The Free Software Foundation provides a core distribution on its
Source Code CD-ROM suitable for printing Texinfo manuals.  To order it,
contact:

     Free Software Foundation, Inc.
     59 Temple Place Suite 330
     Boston, MA   02111-1307
     USA
     Telephone: +1-617-542-5942
     Fax: (including Japan) +1-617-542-2652
     Free Dial Fax (in Japan):
           0031-13-2473 (KDD)
           0066-3382-0158 (IDC)
     Electronic mail: `gnu@gnu.org'

  Many other TeX distributions are available; see `http://tug.org/'.


File: texinfo,  Node: Copying This Manual,  Next: Command and Variable Index,  Prev: Obtaining TeX,  Up: Top

Appendix J Copying This Manual
******************************

* Menu:

* GNU Free Documentation License::  License for copying this manual.


File: texinfo,  Node: GNU Free Documentation License,  Up: Copying This Manual

J.1 GNU Free Documentation License
==================================

                        Version 1.1, March 2000

     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (For example, if the
     Document is in part a textbook of mathematics, a Secondary Section
     may not explain any mathematics.)  The relationship could be a
     matter of historical connection with the subject or with related
     matters, or of legal, commercial, philosophical, ethical or
     political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed to
     thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML designed for human modification.  Opaque formats
     include PostScript, PDF, proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML produced by some word processors for
     output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a publicly-accessible computer-network location
     containing a complete Transparent copy of the Document, free of
     added material, which the general network-using public has access
     to download anonymously at no charge using public-standard network
     protocols.  If you use the latter option, you must take reasonably
     prudent steps, when you begin distribution of Opaque copies in
     quantity, to ensure that this Transparent copy will remain thus
     accessible at the stated location until at least one year after the
     last time you distribute an Opaque copy (directly or through your
     agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation copyright
     is claimed for the compilation.  Such a compilation is called an
     "aggregate", and this License does not apply to the other
     self-contained works thus compiled with the Document, on account of
     their being thus compiled, if they are not themselves derivative
     works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses terminated
     so long as such parties remain in full compliance.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.

J.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

  If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

  If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: texinfo,  Node: Command and Variable Index,  Next: Concept Index,  Prev: Copying This Manual,  Up: Top

Command and Variable Index
**************************

This is an alphabetical list of all the @-commands, assorted Emacs Lisp
functions, and several variables.  To make the list easier to use, the
commands are listed without their preceding `@'.

 [index ]
* Menu:

* ! (end of sentence):                   Ending a Sentence.   (line   5)
* " (umlaut accent):                     Inserting Accents.   (line  12)
* ' (umlaut accent):                     Inserting Accents.   (line  12)
* (newline):                             Multiple Spaces.     (line   5)
* (space):                               Multiple Spaces.     (line   5)
* (tab):                                 Multiple Spaces.     (line   5)
* * (force line break):                  Line Breaks.         (line   5)
* , (cedilla accent):                    Inserting Accents.   (line  12)
* - (discretionary hyphen):              - and hyphenation.   (line   5)
* .  (end of sentence):                  Ending a Sentence.   (line   5)
* <colon> (suppress widening):           Not Ending a Sentence.
                                                              (line  15)
* = (macron accent):                     Inserting Accents.   (line  12)
* ? (end of sentence):                   Ending a Sentence.   (line   5)
* @ (literal `@'):                       Inserting An Atsign. (line   5)
* \ (literal \ in `@math'):              math.                (line  25)
* \emergencystretch:                     Overfull hboxes.     (line  30)
* \input (raw TeX startup):              Minimum.             (line  23)
* \mag (raw TeX magnification):          Cropmarks and Magnification.
                                                              (line  22)
* ^ (circumflex accent):                 Inserting Accents.   (line  12)
* ` (grave accent):                      Inserting Accents.   (line  12)
* { (literal `{'):                       Inserting Braces.    (line   5)
* } (literal `}'):                       Inserting Braces.    (line   5)
* ~ (tilde accent):                      Inserting Accents.   (line  12)
* aa:                                    Inserting Accents.   (line  32)
* AA:                                    Inserting Accents.   (line  32)
* acronym:                               acronym.             (line   5)
* ae:                                    Inserting Accents.   (line  32)
* AE:                                    Inserting Accents.   (line  32)
* afourlatex:                            A4 Paper.            (line  22)
* afourpaper:                            A4 Paper.            (line   5)
* afourwide:                             A4 Paper.            (line  22)
* alias:                                 alias.               (line   5)
* anchor:                                anchor.              (line   5)
* appendix:                              unnumbered & appendix.
                                                              (line   5)
* appendixsec:                           unnumberedsec appendixsec heading.
                                                              (line   5)
* appendixsection:                       unnumberedsec appendixsec heading.
                                                              (line  18)
* appendixsubsec:                        unnumberedsubsec appendixsubsec subheading.
                                                              (line   5)
* appendixsubsubsec:                     subsubsection.       (line   5)
* apply:                                 Sample Function Definition.
                                                              (line  13)
* asis:                                  table.               (line  18)
* author:                                title subtitle author.
                                                              (line   5)
* b (bold font):                         Fonts.               (line   5)
* buffer-end:                            Def Cmd Template.    (line  73)
* bullet:                                bullet.              (line   5)
* bye:                                   Ending a File.       (line   5)
* bye <1>:                               File End.            (line   5)
* c (comment):                           Comments.            (line   5)
* cartouche:                             cartouche.           (line   5)
* center:                                titlefont center sp. (line   5)
* centerchap:                            chapter.             (line  24)
* chapheading:                           majorheading & chapheading.
                                                              (line   5)
* chapter:                               chapter.             (line   5)
* cindex:                                Indexing Commands.   (line  55)
* cite:                                  cite.                (line   5)
* code:                                  code.                (line   5)
* columnfractions:                       Multitable Column Widths.
                                                              (line  11)
* command:                               command.             (line   5)
* comment:                               Comments.            (line   5)
* contents:                              Contents.            (line   5)
* copying:                               copying.             (line   5)
* copyright:                             copying.             (line  34)
* copyright <1>:                         copyright symbol.    (line   5)
* cropmarks:                             Cropmarks and Magnification.
                                                              (line   5)
* defcodeindex:                          New Indices.         (line   5)
* defcv:                                 Abstract Objects.    (line  17)
* deffn:                                 Functions Commands.  (line   9)
* deffnx:                                deffnx.              (line   5)
* defindex:                              New Indices.         (line   5)
* definfoenclose:                        definfoenclose.      (line   5)
* defivar:                               Abstract Objects.    (line  39)
* defmac:                                Functions Commands.  (line  67)
* defmethod:                             Abstract Objects.    (line 110)
* defmethod <1>:                         Abstract Objects.    (line 139)
* defop:                                 Abstract Objects.    (line  59)
* defopt:                                Variables Commands.  (line  55)
* defspec:                               Functions Commands.  (line  72)
* deftp:                                 Data Types.          (line   8)
* deftypefn:                             Typed Functions.     (line  10)
* deftypefun:                            Typed Functions.     (line  75)
* deftypeivar:                           Abstract Objects.    (line  52)
* deftypeop:                             Abstract Objects.    (line 102)
* deftypevar:                            Typed Variables.     (line  42)
* deftypevr:                             Typed Variables.     (line  12)
* defun:                                 Functions Commands.  (line  42)
* defvar:                                Variables Commands.  (line  37)
* defvr:                                 Variables Commands.  (line   8)
* dfn:                                   dfn.                 (line   5)
* dircategory:                           Installing Dir Entries.
                                                              (line  10)
* direntry:                              Installing Dir Entries.
                                                              (line  10)
* display:                               display.             (line   5)
* dmn:                                   dmn.                 (line   5)
* documentdescription:                   documentdescription. (line   5)
* documentencoding:                      documentencoding.    (line   5)
* documentlanguage:                      documentlanguage.    (line   5)
* dotaccent:                             Inserting Accents.   (line  12)
* dotless:                               Inserting Accents.   (line  32)
* dots:                                  dots.                (line   5)
* email:                                 email.               (line   5)
* emph:                                  emph & strong.       (line   5)
* end:                                   Quotations and Examples.
                                                              (line  15)
* end <1>:                               Introducing Lists.   (line  20)
* end titlepage:                         end titlepage.       (line   5)
* enddots:                               dots.                (line   5)
* enumerate:                             enumerate.           (line   5)
* env:                                   env.                 (line   5)
* equiv:                                 Equivalence.         (line   5)
* error:                                 Error Glyph.         (line   5)
* evenfooting:                           Custom Headings.     (line  51)
* evenheading:                           Custom Headings.     (line  51)
* everyfooting:                          Custom Headings.     (line  43)
* everyheading:                          Custom Headings.     (line  43)
* example:                               example.             (line   5)
* exampleindent:                         exampleindent.       (line   5)
* exclamdown:                            Inserting Accents.   (line  32)
* exdent:                                exdent.              (line   5)
* expansion:                             expansion.           (line   5)
* file:                                  file.                (line   5)
* filll TeX dimension:                   Copyright.           (line  11)
* finalout:                              Overfull hboxes.     (line  45)
* findex:                                Indexing Commands.   (line  58)
* flushleft:                             flushleft & flushright.
                                                              (line   5)
* flushright:                            flushleft & flushright.
                                                              (line   5)
* foobar:                                Optional Arguments.  (line  21)
* footnote:                              Footnotes.           (line   5)
* footnotestyle:                         Footnote Styles.     (line  42)
* format:                                format.              (line   5)
* forward-word:                          Def Cmd Template.    (line  30)
* ftable:                                ftable vtable.       (line   5)
* group:                                 group.               (line   5)
* H (Hungarian umlaut accent):           Inserting Accents.   (line  12)
* hbox:                                  Overfull hboxes.     (line  13)
* heading:                               unnumberedsec appendixsec heading.
                                                              (line   5)
* headings:                              headings on off.     (line   5)
* headword:                              definfoenclose.      (line  56)
* html:                                  Raw Formatter Commands.
                                                              (line  36)
* hyphenation:                           - and hyphenation.   (line   5)
* i (italic font):                       Fonts.               (line   5)
* ifclear:                               ifset ifclear.       (line  46)
* ifhtml:                                Conditional Commands.
                                                              (line  14)
* ifhtml <1>:                            Raw Formatter Commands.
                                                              (line  36)
* ifinfo:                                Conditional Commands.
                                                              (line   8)
* ifnothtml:                             Conditional Not Commands.
                                                              (line   5)
* ifnotinfo:                             Conditional Not Commands.
                                                              (line   5)
* ifnotplaintext:                        Conditional Not Commands.
                                                              (line   5)
* ifnottex:                              Conditional Not Commands.
                                                              (line   5)
* ifplaintext:                           Conditional Commands.
                                                              (line  14)
* ifset:                                 ifset ifclear.       (line   5)
* iftex:                                 Conditional Commands.
                                                              (line  14)
* ignore:                                Comments.            (line  18)
* image:                                 Images.              (line   5)
* include:                               Using Include Files. (line   5)
* Info-validate:                         Running Info-Validate.
                                                              (line   5)
* inforef:                               inforef.             (line   5)
* insertcopying:                         insertcopying.       (line   5)
* isearch-backward:                      deffnx.              (line  21)
* isearch-forward:                       deffnx.              (line  20)
* item:                                  itemize.             (line  21)
* item <1>:                              table.               (line  27)
* item <2>:                              Multitable Rows.     (line   5)
* itemize:                               itemize.             (line   5)
* itemx:                                 itemx.               (line   5)
* kbd:                                   kbd.                 (line   5)
* kbdinputstyle:                         kbd.                 (line  19)
* key:                                   key.                 (line   5)
* kindex:                                Indexing Commands.   (line  64)
* l:                                     Inserting Accents.   (line  32)
* L:                                     Inserting Accents.   (line  32)
* lisp:                                  lisp.                (line   5)
* lowersections:                         Raise/lower sections.
                                                              (line   5)
* macro:                                 Defining Macros.     (line   5)
* majorheading:                          majorheading & chapheading.
                                                              (line   5)
* makeinfo-buffer:                       makeinfo in Emacs.   (line  16)
* makeinfo-kill-job:                     makeinfo in Emacs.   (line  38)
* makeinfo-recenter-output-buffer:       makeinfo in Emacs.   (line  43)
* makeinfo-region:                       makeinfo in Emacs.   (line  12)
* math:                                  math.                (line   5)
* menu:                                  Menus.               (line   5)
* minus:                                 minus.               (line   5)
* multitable:                            Multi-column Tables. (line   5)
* need:                                  need.                (line   5)
* next-error:                            makeinfo in Emacs.   (line  26)
* node:                                  node.                (line   5)
* noindent:                              noindent.            (line   5)
* novalidate:                            Format with tex/texindex.
                                                              (line  83)
* o:                                     Inserting Accents.   (line  32)
* O:                                     Inserting Accents.   (line  32)
* occur:                                 Using occur.         (line   5)
* occur-mode-goto-occurrence:            Showing the Structure.
                                                              (line  22)
* oddfooting:                            Custom Headings.     (line  51)
* oddheading:                            Custom Headings.     (line  51)
* oe:                                    Inserting Accents.   (line  32)
* OE:                                    Inserting Accents.   (line  32)
* option:                                option.              (line   5)
* page:                                  page.                (line   5)
* page, within `@titlepage':             titlepage.           (line  16)
* pagesizes:                             pagesizes.           (line   5)
* paragraphindent:                       paragraphindent.     (line   5)
* phoo:                                  definfoenclose.      (line  33)
* pindex:                                Indexing Commands.   (line  67)
* point:                                 Point Glyph.         (line   5)
* pounds:                                pounds.              (line   5)
* print:                                 Print Glyph.         (line   5)
* printindex:                            Printing Indices & Menus.
                                                              (line   5)
* pxref:                                 pxref.               (line   5)
* questiondown:                          Inserting Accents.   (line  32)
* quotation:                             quotation.           (line   5)
* r (Roman font):                        Fonts.               (line   5)
* raisesections:                         Raise/lower sections.
                                                              (line   5)
* ref:                                   ref.                 (line   5)
* refill:                                Refilling Paragraphs.
                                                              (line   5)
* result:                                result.              (line   5)
* ringaccent:                            Inserting Accents.   (line  12)
* rmacro:                                Defining Macros.     (line  39)
* samp:                                  samp.                (line   5)
* sc (small caps font):                  Smallcaps.           (line   5)
* section:                               section.             (line   5)
* setchapternewpage:                     setchapternewpage.   (line   5)
* setcontentsaftertitlepage:             Contents.            (line  51)
* setfilename:                           setfilename.         (line   5)
* setshortcontentsaftertitlepage:        Contents.            (line  51)
* settitle:                              settitle.            (line   5)
* shortcontents:                         Contents.            (line   5)
* shorttitlepage:                        titlepage.           (line  45)
* smallbook:                             smallbook.           (line   5)
* smalldisplay:                          small.               (line   5)
* smalldisplay <1>:                      display.             (line  15)
* smallexample:                          small.               (line   5)
* smallformat:                           small.               (line   5)
* smallformat <1>:                       format.              (line  14)
* smalllisp:                             small.               (line   5)
* sp (line spacing):                     sp.                  (line   5)
* sp (titlepage line spacing):           titlefont center sp. (line   5)
* ss:                                    Inserting Accents.   (line  32)
* strong:                                emph & strong.       (line   5)
* subheading:                            unnumberedsubsec appendixsubsec subheading.
                                                              (line   5)
* subsection:                            subsection.          (line   5)
* subsubheading:                         subsubsection.       (line   5)
* subsubsection:                         subsubsection.       (line   5)
* subtitle:                              title subtitle author.
                                                              (line   5)
* summarycontents:                       Contents.            (line   5)
* syncodeindex:                          syncodeindex.        (line   5)
* syncodeindex <1>:                      syncodeindex.        (line   9)
* synindex:                              synindex.            (line   5)
* t (typewriter font):                   Fonts.               (line   5)
* tab:                                   Multitable Rows.     (line   5)
* table:                                 Two-column Tables.   (line   5)
* tex:                                   Raw Formatter Commands.
                                                              (line  18)
* tex (command):                         tex.                 (line   5)
* texinfo-all-menus-update:              Updating Commands.   (line 112)
* texinfo-every-node-update:             Updating Commands.   (line 107)
* texinfo-format-buffer:                 Info Formatting.     (line  22)
* texinfo-format-buffer <1>:             texinfo-format commands.
                                                              (line   5)
* texinfo-format-buffer <2>:             texinfo-format commands.
                                                              (line  23)
* texinfo-format-region:                 Info Formatting.     (line  13)
* texinfo-format-region <1>:             texinfo-format commands.
                                                              (line   5)
* texinfo-format-region <2>:             texinfo-format commands.
                                                              (line  19)
* texinfo-indent-menu-description:       Other Updating Commands.
                                                              (line  45)
* texinfo-insert-@code:                  Inserting.           (line  15)
* texinfo-insert-@dfn:                   Inserting.           (line  19)
* texinfo-insert-@end:                   Inserting.           (line  23)
* texinfo-insert-@example:               Inserting.           (line  62)
* texinfo-insert-@item:                  Inserting.           (line  30)
* texinfo-insert-@kbd:                   Inserting.           (line  35)
* texinfo-insert-@node:                  Inserting.           (line  39)
* texinfo-insert-@noindent:              Inserting.           (line  44)
* texinfo-insert-@samp:                  Inserting.           (line  49)
* texinfo-insert-@table:                 Inserting.           (line  53)
* texinfo-insert-@var:                   Inserting.           (line  58)
* texinfo-insert-braces:                 Inserting.           (line  67)
* texinfo-insert-node-lines:             Other Updating Commands.
                                                              (line  10)
* texinfo-make-menu:                     Updating Commands.   (line  93)
* texinfo-master-menu:                   Updating Commands.   (line  55)
* texinfo-multiple-files-update:         texinfo-multiple-files-update.
                                                              (line   5)
* texinfo-multiple-files-update (in brief): Other Updating Commands.
                                                              (line  34)
* texinfo-sequential-node-update:        Other Updating Commands.
                                                              (line  54)
* texinfo-show-structure:                Showing the Structure.
                                                              (line  18)
* texinfo-show-structure <1>:            Using texinfo-show-structure.
                                                              (line   5)
* texinfo-start-menu-description:        Inserting.           (line  93)
* texinfo-tex-buffer:                    Printing.            (line  21)
* texinfo-tex-print:                     Printing.            (line  42)
* texinfo-tex-region:                    Printing.            (line  27)
* texinfo-update-node:                   Updating Commands.   (line  83)
* thischapter:                           Custom Headings.     (line  73)
* thischaptername:                       Custom Headings.     (line  70)
* thisfile:                              Custom Headings.     (line  81)
* thispage:                              Custom Headings.     (line  67)
* thistitle:                             Custom Headings.     (line  77)
* tieaccent:                             Inserting Accents.   (line  12)
* tindex:                                Indexing Commands.   (line  70)
* title:                                 title subtitle author.
                                                              (line   5)
* titlefont:                             titlefont center sp. (line   5)
* titlepage:                             titlepage.           (line   5)
* today:                                 Custom Headings.     (line  90)
* top:                                   The Top Node.        (line  12)
* top (@-command):                       makeinfo top command.
                                                              (line   5)
* u (breve accent):                      Inserting Accents.   (line  12)
* ubaraccent:                            Inserting Accents.   (line  12)
* udotaccent:                            Inserting Accents.   (line  12)
* unmacro:                               Defining Macros.     (line  51)
* unnumbered:                            unnumbered & appendix.
                                                              (line   5)
* unnumberedsec:                         unnumberedsec appendixsec heading.
                                                              (line   5)
* unnumberedsubsec:                      unnumberedsubsec appendixsubsec subheading.
                                                              (line   5)
* unnumberedsubsubsec:                   subsubsection.       (line   5)
* up-list:                               Inserting.           (line  72)
* uref:                                  uref.                (line   5)
* url:                                   url.                 (line   5)
* v (check accent):                      Inserting Accents.   (line  12)
* value:                                 set value.           (line   5)
* var:                                   var.                 (line   5)
* verb:                                  verb.                (line   5)
* verbatim:                              verbatim.            (line   5)
* verbatiminclude:                       verbatiminclude.     (line   5)
* vindex:                                Indexing Commands.   (line  61)
* vskip TeX vertical skip:               Copyright.           (line  11)
* vtable:                                ftable vtable.       (line   5)
* w (prevent line break):                w.                   (line   5)
* xref:                                  xref.                (line   5)

