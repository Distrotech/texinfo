<?xml version="1.0"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V4.12//EN" "http://www.gnu.org/software/texinfo/dtd/4.12/texinfo.dtd">
<texinfo xml:lang="en">

<setfilename>texinfo.xml</setfilename>

<!-- Automake automatically updates version.texi to @set VERSION and -->
<!-- @set UPDATED to appropriate values. -->
<setvalue name="UPDATED">28 March 2002</setvalue>
<setvalue name="UPDATED-MONTH">March 2002</setvalue>
<setvalue name="EDITION">4.2</setvalue>
<setvalue name="VERSION">4.2</setvalue>
<settitle>GNU Texinfo 4.2</settitle>

<!-- Define a new index for options. -->
<!-- Put everything except function (command, in this case) names in one -->
<!-- index (arbitrarily chosen to be the concept index). -->

<footnotestyle></footnotestyle><!-- finalout -->

<!-- %**end of header -->

<para>This manual is for GNU Texinfo (version 4.2, 28 March 2002),
a documentation system that can produce both online information and a
printed manual from a single source.
</para>
<para>Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.
</para>
<quotation>
<para>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being &ldquo;A GNU Manual,&rdquo;
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled &ldquo;GNU Free Documentation License.&rdquo;
</para>
<para>(a) The FSF's Back-Cover Text is: &ldquo;You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.&rdquo;
</para></quotation>

<dircategory>Texinfo documentation system</dircategory>
<direntry>
<menuentry>
<menunode> (texinfo)</menunode>
<menutitle> Texinfo</menutitle>
<menucomment>           The GNU documentation format.
</menucomment>
</menuentry><menuentry>
<menunode> (texinfo)Invoking install-info</menunode>
<menutitle> install-info</menutitle>
<menucomment> Update info/dir entries.
</menucomment>
</menuentry><menuentry>
<menunode> (texinfo)Format with texi2dvi</menunode>
<menutitle> texi2dvi</menutitle>
<menucomment>      Print Texinfo documents.
</menucomment>
</menuentry><menuentry>
<menunode> (texinfo)Format with tex/texindex</menunode>
<menutitle> texindex</menutitle>
<menucomment>  Sort Texinfo index files.
</menucomment>
</menuentry><menuentry>
<menunode> (texinfo)Invoking makeinfo</menunode>
<menutitle> makeinfo</menutitle>
<menucomment>         Translate Texinfo source.
</menucomment>
</menuentry></direntry>

<!-- Before release, run C-u C-c C-u C-a (texinfo-all-menus-update with a -->
<!-- prefix arg).  This updates the node pointers, which texinfmt.el needs. -->

<!-- Set smallbook if printing in smallbook format so the example of the -->
<!-- smallbook font is actually written using smallbook; in bigbook, a kludge -->
<!-- is used for TeX output.  Do this through the -t option to texi2dvi, -->
<!-- so this same source can be used for other paper sizes as well. -->
<!-- smallbook -->
<!-- set smallbook -->
<!-- @@clear smallbook -->

<!-- If you like blank pages, add through texi2dvi -t. -->
<!-- setchapternewpage odd -->

<!-- Currently undocumented command, 5 December 1993: -->
<!-- nwnode          (Same as node, but no warnings; for `makeinfo'.) -->



<titlepage>
<booktitle>Texinfo</booktitle>
<booksubtitle>The GNU Documentation Format</booksubtitle>
<booksubtitle>for Texinfo version 4.2, 28 March 2002</booksubtitle>

<author>Robert J. Chassell</author>
<author>Richard M. Stallman</author>

<!-- Include the Distribution inside the titlepage so -->
<!-- that headings are turned off. -->

<page></page>
<vskip></vskip><para>This manual is for GNU Texinfo (version 4.2, 28 March 2002),
a documentation system that can produce both online information and a
printed manual from a single source.
</para>
<para>Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.
</para>
<quotation>
<para>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being &ldquo;A GNU Manual,&rdquo;
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled &ldquo;GNU Free Documentation License.&rdquo;
</para>
<para>(a) The FSF's Back-Cover Text is: &ldquo;You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.&rdquo;
</para></quotation>

<para>Published by the Free Software Foundation &linebreak;
59 Temple Place Suite 330 &linebreak;
Boston, MA 02111-1307 &linebreak;
USA &linebreak;
ISBN 1-882114-67-1 <!-- for version 4.0, September 1999. -->
<!-- ISBN 1-882114-65-5 is for version 3.12, March 1998. -->
<!-- ISBN 1-882114-64-7 is for edition 2.24 of November 1996. -->
<!-- ISBN 1-882114-63-9 is for edition 2.20 of 28 February 1995 -->
</para>
<para>Cover art by Etienne Suvasa.
</para></titlepage>


<summarycontents></summarycontents>
<contents></contents>


<node>
<nodename>Top</nodename>
<nodenext>Copying Conditions</nodenext>
<nodeup>(dir)</nodeup>
<unnumbered>
<title>Texinfo</title>

<para>This manual is for GNU Texinfo (version 4.2, 28 March 2002),
a documentation system that can produce both online information and a
printed manual from a single source.
</para>
<para>Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.
</para>
<quotation>
<para>Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being &ldquo;A GNU Manual,&rdquo;
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled &ldquo;GNU Free Documentation License.&rdquo;
</para>
<para>(a) The FSF's Back-Cover Text is: &ldquo;You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.&rdquo;
</para></quotation>

<para>The first part of this master menu lists the major nodes in this Info
document, including the @-command and concept indices.  The rest of
the menu lists all the lower level nodes in the document.
</para>

<menu>
<menuentry>
<menunode> Copying Conditions</menunode>
<menutitle> Copying Conditions</menutitle>
<menucomment>          Your rights.
</menucomment>
</menuentry><menuentry>
<menunode> Overview</menunode>
<menutitle> Overview</menutitle>
<menucomment>                    Texinfo in brief.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo Mode</menunode>
<menutitle> Texinfo Mode</menutitle>
<menucomment>                How to use Texinfo mode.
</menucomment>
</menuentry><menuentry>
<menunode> Beginning a File</menunode>
<menutitle> Beginning a File</menutitle>
<menucomment>            What is at the beginning of a Texinfo file?
</menucomment>
</menuentry><menuentry>
<menunode> Ending a File</menunode>
<menutitle> Ending a File</menutitle>
<menucomment>               What is at the end of a Texinfo file?
</menucomment>
</menuentry><menuentry>
<menunode> Structuring</menunode>
<menutitle> Structuring</menutitle>
<menucomment>                 How to create chapters, sections, subsections,
                                  appendices, and other parts.
</menucomment>
</menuentry><menuentry>
<menunode> Nodes</menunode>
<menutitle> Nodes</menutitle>
<menucomment>                       How to write nodes.
</menucomment>
</menuentry><menuentry>
<menunode> Menus</menunode>
<menutitle> Menus</menutitle>
<menucomment>                       How to write menus.
</menucomment>
</menuentry><menuentry>
<menunode> Cross References</menunode>
<menutitle> Cross References</menutitle>
<menucomment>            How to write cross references.
</menucomment>
</menuentry><menuentry>
<menunode> Marking Text</menunode>
<menutitle> Marking Text</menutitle>
<menucomment>                How to mark words and phrases as code,
                                  keyboard input, meta-syntactic
                                  variables, and the like.
</menucomment>
</menuentry><menuentry>
<menunode> Quotations and Examples</menunode>
<menutitle> Quotations and Examples</menutitle>
<menucomment>     How to write quotations, examples, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Lists and Tables</menunode>
<menutitle> Lists and Tables</menutitle>
<menucomment>            How to write lists and tables.
</menucomment>
</menuentry><menuentry>
<menunode> Indices</menunode>
<menutitle> Indices</menutitle>
<menucomment>                     How to create indices.
</menucomment>
</menuentry><menuentry>
<menunode> Insertions</menunode>
<menutitle> Insertions</menutitle>
<menucomment>                  How to insert @-signs, braces, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Breaks</menunode>
<menutitle> Breaks</menutitle>
<menucomment>                      How to force and prevent line and page breaks.
</menucomment>
</menuentry><menuentry>
<menunode> Definition Commands</menunode>
<menutitle> Definition Commands</menutitle>
<menucomment>         How to describe functions and the like
                                  in a uniform manner.
</menucomment>
</menuentry><menuentry>
<menunode> Conditionals</menunode>
<menutitle> Conditionals</menutitle>
<menucomment>                How to specify text for either &tex; or Info.
</menucomment>
</menuentry><menuentry>
<menunode> Internationalization</menunode>
<menutitle> Internationalization</menutitle>
<menucomment>        
</menucomment>
</menuentry><menuentry>
<menunode> Defining New Texinfo Commands</menunode>
<menutitle> Defining New Texinfo Commands</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> Hardcopy</menunode>
<menutitle> Hardcopy</menutitle>
<menucomment>                    How to convert a Texinfo file to a file
                                  for printing and how to print that file.
</menucomment>
</menuentry><menuentry>
<menunode> Creating and Installing Info Files</menunode>
<menutitle> Creating and Installing Info Files</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> Command List</menunode>
<menutitle> Command List</menutitle>
<menucomment>                All the Texinfo @-commands.
</menucomment>
</menuentry><menuentry>
<menunode> Tips</menunode>
<menutitle> Tips</menutitle>
<menucomment>                        Hints on how to write a Texinfo document.
</menucomment>
</menuentry><menuentry>
<menunode> Sample Texinfo Files</menunode>
<menutitle> Sample Texinfo Files</menutitle>
<menucomment>        Complete examples, including full texts.
</menucomment>
</menuentry><menuentry>
<menunode> Include Files</menunode>
<menutitle> Include Files</menutitle>
<menucomment>               How to incorporate other Texinfo files.
</menucomment>
</menuentry><menuentry>
<menunode> Headings</menunode>
<menutitle> Headings</menutitle>
<menucomment>                    How to write page headings and footings.
</menucomment>
</menuentry><menuentry>
<menunode> Catching Mistakes</menunode>
<menutitle> Catching Mistakes</menutitle>
<menucomment>           How to find formatting mistakes.
</menucomment>
</menuentry><menuentry>
<menunode> Refilling Paragraphs</menunode>
<menutitle> Refilling Paragraphs</menutitle>
<menucomment>        All about paragraph refilling.
</menucomment>
</menuentry><menuentry>
<menunode> Command Syntax</menunode>
<menutitle> Command Syntax</menutitle>
<menucomment>              A description of @-Command syntax.
</menucomment>
</menuentry><menuentry>
<menunode> Obtaining TeX</menunode>
<menutitle> Obtaining TeX</menutitle>
<menucomment>               How to Obtain &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Copying This Manual</menunode>
<menutitle> Copying This Manual</menutitle>
<menucomment>         The GNU Free Documentation License.
</menucomment>
</menuentry><menuentry>
<menunode> Command and Variable Index</menunode>
<menutitle> Command and Variable Index</menutitle>
<menucomment>  A menu containing commands and variables.
</menucomment>
</menuentry><menuentry>
<menunode> Concept Index</menunode>
<menutitle> Concept Index</menutitle>
<menucomment>               A menu covering many topics.
</menucomment>
</menuentry><detailmenu>
<para> &mdash; The Detailed Node Listing &mdash;
</para>
<para>Overview of Texinfo
</para>
<menuentry>
<menunode> Reporting Bugs</menunode>
<menutitle> Reporting Bugs</menutitle>
<menucomment>              Submitting effective bug reports.
</menucomment>
</menuentry><menuentry>
<menunode> Using Texinfo</menunode>
<menutitle> Using Texinfo</menutitle>
<menucomment>               Create printed or online output.
</menucomment>
</menuentry><menuentry>
<menunode> Info Files</menunode>
<menutitle> Info Files</menutitle>
<menucomment>                  What is an Info file?
</menucomment>
</menuentry><menuentry>
<menunode> Printed Books</menunode>
<menutitle> Printed Books</menutitle>
<menucomment>               Characteristics of a printed book or manual.
</menucomment>
</menuentry><menuentry>
<menunode> Formatting Commands</menunode>
<menutitle> Formatting Commands</menutitle>
<menucomment>         @-commands are used for formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Conventions</menunode>
<menutitle> Conventions</menutitle>
<menucomment>                 General rules for writing a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Comments</menunode>
<menutitle> Comments</menutitle>
<menucomment>                    Writing comments and ignored text in general.
</menucomment>
</menuentry><menuentry>
<menunode> Minimum</menunode>
<menutitle> Minimum</menutitle>
<menucomment>                     What a Texinfo file must have.
</menucomment>
</menuentry><menuentry>
<menunode> Six Parts</menunode>
<menutitle> Six Parts</menutitle>
<menucomment>                   Usually, a Texinfo file has six parts.
</menucomment>
</menuentry><menuentry>
<menunode> Short Sample</menunode>
<menutitle> Short Sample</menutitle>
<menucomment>                A short sample Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> History</menunode>
<menutitle> History</menutitle>
<menucomment>                     Acknowledgements, contributors and genesis.
</menucomment>
</menuentry>
<para>Using Texinfo Mode
</para>
<menuentry>
<menunode> Texinfo Mode Overview</menunode>
<menutitle> Texinfo Mode Overview</menutitle>
<menucomment>       How Texinfo mode can help you.
</menucomment>
</menuentry><menuentry>
<menunode> Emacs Editing</menunode>
<menutitle> Emacs Editing</menutitle>
<menucomment>               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting</menunode>
<menutitle> Inserting</menutitle>
<menucomment>                   How to insert frequently used @-commands.
</menucomment>
</menuentry><menuentry>
<menunode> Showing the Structure</menunode>
<menutitle> Showing the Structure</menutitle>
<menucomment>       How to show the structure of a file.
</menucomment>
</menuentry><menuentry>
<menunode> Updating Nodes and Menus</menunode>
<menutitle> Updating Nodes and Menus</menutitle>
<menucomment>    How to update or create new nodes and menus.
</menucomment>
</menuentry><menuentry>
<menunode> Info Formatting</menunode>
<menutitle> Info Formatting</menutitle>
<menucomment>             How to format for Info.
</menucomment>
</menuentry><menuentry>
<menunode> Printing</menunode>
<menutitle> Printing</menutitle>
<menucomment>                    How to format and print part or all of a file.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo Mode Summary</menunode>
<menutitle> Texinfo Mode Summary</menutitle>
<menucomment>        Summary of all the Texinfo mode commands.
</menucomment>
</menuentry>
<para>Updating Nodes and Menus
</para>
<menuentry>
<menunode> Updating Commands</menunode>
<menutitle> Updating Commands</menutitle>
<menucomment>           Five major updating commands.
</menucomment>
</menuentry><menuentry>
<menunode> Updating Requirements</menunode>
<menutitle> Updating Requirements</menutitle>
<menucomment>       How to structure a Texinfo file for
                                  using the updating command.
</menucomment>
</menuentry><menuentry>
<menunode> Other Updating Commands</menunode>
<menutitle> Other Updating Commands</menutitle>
<menucomment>     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.
</menucomment>
</menuentry>
<para>Beginning a Texinfo File
</para>
<menuentry>
<menunode> Sample Beginning</menunode>
<menutitle> Sample Beginning</menutitle>
<menucomment>            A sample beginning for a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo File Header</menunode>
<menutitle> Texinfo File Header</menutitle>
<menucomment>         
</menucomment>
</menuentry><menuentry>
<menunode> Document Permissions</menunode>
<menutitle> Document Permissions</menutitle>
<menucomment>        
</menucomment>
</menuentry><menuentry>
<menunode> Titlepage &amp; Copyright Page</menunode>
<menutitle> Titlepage &amp; Copyright Page</menutitle>
<menucomment>  Creating the title and copyright pages.
</menucomment>
</menuentry><menuentry>
<menunode> The Top Node</menunode>
<menutitle> The Top Node</menutitle>
<menucomment>                Creating the `Top' node and master menu.
</menucomment>
</menuentry><menuentry>
<menunode> Global Document Commands</menunode>
<menutitle> Global Document Commands</menutitle>
<menucomment>    
</menucomment>
</menuentry><menuentry>
<menunode> Software Copying Permissions</menunode>
<menutitle> Software Copying Permissions</menutitle>
<menucomment>  Ensure that you and others continue to
                                    have the right to use and share software.
</menucomment>
</menuentry>
<para>Texinfo File Header
</para>
<menuentry>
<menunode> First Line</menunode>
<menutitle> First Line</menutitle>
<menucomment>                  The first line of a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Start of Header</menunode>
<menutitle> Start of Header</menutitle>
<menucomment>             Formatting a region requires this.
</menucomment>
</menuentry><menuentry>
<menunode> setfilename</menunode>
<menutitle> setfilename</menutitle>
<menucomment>                 Tell Info the name of the Info file.
</menucomment>
</menuentry><menuentry>
<menunode> settitle</menunode>
<menutitle> settitle</menutitle>
<menucomment>                    Create a title for the printed work.
</menucomment>
</menuentry><menuentry>
<menunode> End of Header</menunode>
<menutitle> End of Header</menutitle>
<menucomment>               Formatting a region requires this.
</menucomment>
</menuentry>
<para>Document Permissions
</para>
<menuentry>
<menunode> copying</menunode>
<menutitle> copying</menutitle>
<menucomment>                     Declare the document's copying permissions.
</menucomment>
</menuentry><menuentry>
<menunode> insertcopying</menunode>
<menutitle> insertcopying</menutitle>
<menucomment>               Where to insert the permissions.
</menucomment>
</menuentry>
<para>Title and Copyright Pages
</para>
<menuentry>
<menunode> titlepage</menunode>
<menutitle> titlepage</menutitle>
<menucomment>                   Create a title for the printed document.
</menucomment>
</menuentry><menuentry>
<menunode> titlefont center sp</menunode>
<menutitle> titlefont center sp</menutitle>
<menucomment>         The <code>@titlefont</code>, <code>@center</code>,
                                  and <code>@sp</code> commands.
</menucomment>
</menuentry><menuentry>
<menunode> title subtitle author</menunode>
<menutitle> title subtitle author</menutitle>
<menucomment>       The <code>@title</code>, <code>@subtitle</code>,
                                  and <code>@author</code> commands.
</menucomment>
</menuentry><menuentry>
<menunode> Copyright</menunode>
<menutitle> Copyright</menutitle>
<menucomment>                   How to write the copyright notice and
                                  include copying permissions.
</menucomment>
</menuentry><menuentry>
<menunode> end titlepage</menunode>
<menutitle> end titlepage</menutitle>
<menucomment>               Turn on page headings after the title and
                                  copyright pages.
</menucomment>
</menuentry><menuentry>
<menunode> headings on off</menunode>
<menutitle> headings on off</menutitle>
<menucomment>             An option for turning headings on and off
                                  and double or single sided printing.
</menucomment>
</menuentry>
<para>The `Top' Node and Master Menu
</para>
<menuentry>
<menunode> Top Node Example</menunode>
<menutitle> Top Node Example</menutitle>
<menucomment>            
</menucomment>
</menuentry><menuentry>
<menunode> Master Menu Parts</menunode>
<menutitle> Master Menu Parts</menutitle>
<menucomment>           
</menucomment>
</menuentry>
<para>Global Document Commands
</para>
<menuentry>
<menunode> documentdescription</menunode>
<menutitle> documentdescription</menutitle>
<menucomment>         Document summary for the HTML output.
</menucomment>
</menuentry><menuentry>
<menunode> setchapternewpage</menunode>
<menutitle> setchapternewpage</menutitle>
<menucomment>           Start chapters on right-hand pages.
</menucomment>
</menuentry><menuentry>
<menunode> paragraphindent</menunode>
<menutitle> paragraphindent</menutitle>
<menucomment>             Specify paragraph indentation.
</menucomment>
</menuentry><menuentry>
<menunode> exampleindent</menunode>
<menutitle> exampleindent</menutitle>
<menucomment>               Specify environment indentation.
</menucomment>
</menuentry>
<para>Ending a Texinfo File
</para>
<menuentry>
<menunode> Printing Indices &amp; Menus</menunode>
<menutitle> Printing Indices &amp; Menus</menutitle>
<menucomment>    How to print an index in hardcopy and
                                  generate index menus in Info.
</menucomment>
</menuentry><menuentry>
<menunode> Contents</menunode>
<menutitle> Contents</menutitle>
<menucomment>                    How to create a table of contents.
</menucomment>
</menuentry><menuentry>
<menunode> File End</menunode>
<menutitle> File End</menutitle>
<menucomment>                    How to mark the end of a file.
</menucomment>
</menuentry>
<para>Chapter Structuring
</para>
<menuentry>
<menunode> Tree Structuring</menunode>
<menutitle> Tree Structuring</menutitle>
<menucomment>            A manual is like an upside down tree &dots;
</menucomment>
</menuentry><menuentry>
<menunode> Structuring Command Types</menunode>
<menutitle> Structuring Command Types</menutitle>
<menucomment>   How to divide a manual into parts.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo top</menunode>
<menutitle> makeinfo top</menutitle>
<menucomment>                The <code>@top</code> command, part of the `Top' node.
</menucomment>
</menuentry><menuentry>
<menunode> chapter</menunode>
<menutitle> chapter</menutitle>
<menucomment>                     
</menucomment>
</menuentry><menuentry>
<menunode> unnumbered &amp; appendix</menunode>
<menutitle> unnumbered &amp; appendix</menutitle>
<menucomment>       
</menucomment>
</menuentry><menuentry>
<menunode> majorheading &amp; chapheading</menunode>
<menutitle> majorheading &amp; chapheading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> section</menunode>
<menutitle> section</menutitle>
<menucomment>                     
</menucomment>
</menuentry><menuentry>
<menunode> unnumberedsec appendixsec heading</menunode>
<menutitle> unnumberedsec appendixsec heading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> subsection</menunode>
<menutitle> subsection</menutitle>
<menucomment>                  
</menucomment>
</menuentry><menuentry>
<menunode> unnumberedsubsec appendixsubsec subheading</menunode>
<menutitle> unnumberedsubsec appendixsubsec subheading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> subsubsection</menunode>
<menutitle> subsubsection</menutitle>
<menucomment>               Commands for the lowest level sections.
</menucomment>
</menuentry><menuentry>
<menunode> Raise/lower sections</menunode>
<menutitle> Raise/lower sections</menutitle>
<menucomment>        How to change commands' hierarchical level.
</menucomment>
</menuentry>
<para>Nodes
</para>
<menuentry>
<menunode> Two Paths</menunode>
<menutitle> Two Paths</menutitle>
<menucomment>                   Different commands to structure
                                  Info output and printed output.
</menucomment>
</menuentry><menuentry>
<menunode> Node Menu Illustration</menunode>
<menutitle> Node Menu Illustration</menutitle>
<menucomment>      A diagram, and sample nodes and menus.
</menucomment>
</menuentry><menuentry>
<menunode> node</menunode>
<menutitle> node</menutitle>
<menucomment>                        Creating nodes, in detail.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo Pointer Creation</menunode>
<menutitle> makeinfo Pointer Creation</menutitle>
<menucomment>   Letting makeinfo determine node pointers.
</menucomment>
</menuentry><menuentry>
<menunode> anchor</menunode>
<menutitle> anchor</menutitle>
<menucomment>                      Defining arbitrary cross-reference targets.
</menucomment>
</menuentry>
<para>The <code>@node</code> Command
</para>
<menuentry>
<menunode> Node Names</menunode>
<menutitle> Node Names</menutitle>
<menucomment>                  How to choose node and pointer names.
</menucomment>
</menuentry><menuentry>
<menunode> Writing a Node</menunode>
<menutitle> Writing a Node</menutitle>
<menucomment>              How to write an <code>@node</code> line.
</menucomment>
</menuentry><menuentry>
<menunode> Node Line Tips</menunode>
<menutitle> Node Line Tips</menutitle>
<menucomment>              Keep names short.
</menucomment>
</menuentry><menuentry>
<menunode> Node Line Requirements</menunode>
<menutitle> Node Line Requirements</menutitle>
<menucomment>      Keep names unique, without @-commands.
</menucomment>
</menuentry><menuentry>
<menunode> First Node</menunode>
<menutitle> First Node</menutitle>
<menucomment>                  How to write a `Top' node.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo top command</menunode>
<menutitle> makeinfo top command</menutitle>
<menucomment>        How to use the <code>@top</code> command.
</menucomment>
</menuentry>
<para>Menus
</para>
<menuentry>
<menunode> Menu Location</menunode>
<menutitle> Menu Location</menutitle>
<menucomment>               Put a menu in a short node.
</menucomment>
</menuentry><menuentry>
<menunode> Writing a Menu</menunode>
<menutitle> Writing a Menu</menutitle>
<menucomment>              What is a menu?
</menucomment>
</menuentry><menuentry>
<menunode> Menu Parts</menunode>
<menutitle> Menu Parts</menutitle>
<menucomment>                  A menu entry has three parts.
</menucomment>
</menuentry><menuentry>
<menunode> Less Cluttered Menu Entry</menunode>
<menutitle> Less Cluttered Menu Entry</menutitle>
<menucomment>   Two part menu entry.
</menucomment>
</menuentry><menuentry>
<menunode> Menu Example</menunode>
<menutitle> Menu Example</menutitle>
<menucomment>                Two and three part menu entries.
</menucomment>
</menuentry><menuentry>
<menunode> Other Info Files</menunode>
<menutitle> Other Info Files</menutitle>
<menucomment>            How to refer to a different Info file.
</menucomment>
</menuentry>
<para>Cross References
</para>
<menuentry>
<menunode> References</menunode>
<menutitle> References</menutitle>
<menucomment>                  What cross references are for.
</menucomment>
</menuentry><menuentry>
<menunode> Cross Reference Commands</menunode>
<menutitle> Cross Reference Commands</menutitle>
<menucomment>    A summary of the different commands.
</menucomment>
</menuentry><menuentry>
<menunode> Cross Reference Parts</menunode>
<menutitle> Cross Reference Parts</menutitle>
<menucomment>       A cross reference has several parts.
</menucomment>
</menuentry><menuentry>
<menunode> xref</menunode>
<menutitle> xref</menutitle>
<menucomment>                        Begin a reference with `See' &dots;
</menucomment>
</menuentry><menuentry>
<menunode> Top Node Naming</menunode>
<menutitle> Top Node Naming</menutitle>
<menucomment>             How to refer to the beginning of another file.
</menucomment>
</menuentry><menuentry>
<menunode> ref</menunode>
<menutitle> ref</menutitle>
<menucomment>                         A reference for the last part of a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> pxref</menunode>
<menutitle> pxref</menutitle>
<menucomment>                       How to write a parenthetical cross reference.
</menucomment>
</menuentry><menuentry>
<menunode> inforef</menunode>
<menutitle> inforef</menutitle>
<menucomment>                     How to refer to an Info-only file.
</menucomment>
</menuentry><menuentry>
<menunode> uref</menunode>
<menutitle> uref</menutitle>
<menucomment>                        How to refer to a uniform resource locator.
</menucomment>
</menuentry>
<para><code>@xref</code>
</para>
<menuentry>
<menunode> Reference Syntax</menunode>
<menutitle> Reference Syntax</menutitle>
<menucomment>            What a reference looks like and requires.
</menucomment>
</menuentry><menuentry>
<menunode> One Argument</menunode>
<menutitle> One Argument</menutitle>
<menucomment>                <code>@xref</code> with one argument.
</menucomment>
</menuentry><menuentry>
<menunode> Two Arguments</menunode>
<menutitle> Two Arguments</menutitle>
<menucomment>               <code>@xref</code> with two arguments.
</menucomment>
</menuentry><menuentry>
<menunode> Three Arguments</menunode>
<menutitle> Three Arguments</menutitle>
<menucomment>             <code>@xref</code> with three arguments.
</menucomment>
</menuentry><menuentry>
<menunode> Four and Five Arguments</menunode>
<menutitle> Four and Five Arguments</menutitle>
<menucomment>     <code>@xref</code> with four and five arguments.
</menucomment>
</menuentry>
<para>Marking Words and Phrases
</para>
<menuentry>
<menunode> Indicating</menunode>
<menutitle> Indicating</menutitle>
<menucomment>                  How to indicate definitions, files, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Emphasis</menunode>
<menutitle> Emphasis</menutitle>
<menucomment>                    How to emphasize text.
</menucomment>
</menuentry>
<para>Indicating Definitions, Commands, etc.
</para>
<menuentry>
<menunode> Useful Highlighting</menunode>
<menutitle> Useful Highlighting</menutitle>
<menucomment>         Highlighting provides useful information.
</menucomment>
</menuentry><menuentry>
<menunode> code</menunode>
<menutitle> code</menutitle>
<menucomment>                        Indicating program code.
</menucomment>
</menuentry><menuentry>
<menunode> kbd</menunode>
<menutitle> kbd</menutitle>
<menucomment>                         Showing keyboard input.
</menucomment>
</menuentry><menuentry>
<menunode> key</menunode>
<menutitle> key</menutitle>
<menucomment>                         Specifying keys.
</menucomment>
</menuentry><menuentry>
<menunode> samp</menunode>
<menutitle> samp</menutitle>
<menucomment>                        A literal sequence of characters.
</menucomment>
</menuentry><menuentry>
<menunode> verb</menunode>
<menutitle> verb</menutitle>
<menucomment>                        A verbatim sequence of characters.
</menucomment>
</menuentry><menuentry>
<menunode> var</menunode>
<menutitle> var</menutitle>
<menucomment>                         Indicating metasyntactic variables.
</menucomment>
</menuentry><menuentry>
<menunode> env</menunode>
<menutitle> env</menutitle>
<menucomment>                         Indicating environment variables.
</menucomment>
</menuentry><menuentry>
<menunode> file</menunode>
<menutitle> file</menutitle>
<menucomment>                        Indicating file names.
</menucomment>
</menuentry><menuentry>
<menunode> command</menunode>
<menutitle> command</menutitle>
<menucomment>                     Indicating command names.
</menucomment>
</menuentry><menuentry>
<menunode> option</menunode>
<menutitle> option</menutitle>
<menucomment>                      Indicating option names.
</menucomment>
</menuentry><menuentry>
<menunode> dfn</menunode>
<menutitle> dfn</menutitle>
<menucomment>                         Specifying definitions.
</menucomment>
</menuentry><menuentry>
<menunode> cite</menunode>
<menutitle> cite</menutitle>
<menucomment>                        Referring to books not in the  Info system.
</menucomment>
</menuentry><menuentry>
<menunode> acronym</menunode>
<menutitle> acronym</menutitle>
<menucomment>                     Indicating acronyms.
</menucomment>
</menuentry><menuentry>
<menunode> url</menunode>
<menutitle> url</menutitle>
<menucomment>                         Indicating a World Wide Web reference.
</menucomment>
</menuentry><menuentry>
<menunode> email</menunode>
<menutitle> email</menutitle>
<menucomment>                       Indicating an electronic mail address.
</menucomment>
</menuentry>
<para>Emphasizing Text
</para>
<menuentry>
<menunode> emph &amp; strong</menunode>
<menutitle> emph &amp; strong</menutitle>
<menucomment>               How to emphasize text in Texinfo.
</menucomment>
</menuentry><menuentry>
<menunode> Smallcaps</menunode>
<menutitle> Smallcaps</menutitle>
<menucomment>                   How to use the small caps font.
</menucomment>
</menuentry><menuentry>
<menunode> Fonts</menunode>
<menutitle> Fonts</menutitle>
<menucomment>                       Various font commands for printed output.
</menucomment>
</menuentry>
<para>Quotations and Examples
</para>
<menuentry>
<menunode> Block Enclosing Commands</menunode>
<menutitle> Block Enclosing Commands</menutitle>
<menucomment>    Different constructs for different purposes.
</menucomment>
</menuentry><menuentry>
<menunode> quotation</menunode>
<menutitle> quotation</menutitle>
<menucomment>                   Writing a quotation.
</menucomment>
</menuentry><menuentry>
<menunode> example</menunode>
<menutitle> example</menutitle>
<menucomment>                     Writing an example in a fixed-width font.
</menucomment>
</menuentry><menuentry>
<menunode> verbatim</menunode>
<menutitle> verbatim</menutitle>
<menucomment>                    Writing a verbatim example.
</menucomment>
</menuentry><menuentry>
<menunode> verbatiminclude</menunode>
<menutitle> verbatiminclude</menutitle>
<menucomment>             Including a file verbatim.
</menucomment>
</menuentry><menuentry>
<menunode> lisp</menunode>
<menutitle> lisp</menutitle>
<menucomment>                        Illustrating Lisp code.
</menucomment>
</menuentry><menuentry>
<menunode> small</menunode>
<menutitle> small</menutitle>
<menucomment>                       Forms for <code>@smallbook</code>.
</menucomment>
</menuentry><menuentry>
<menunode> display</menunode>
<menutitle> display</menutitle>
<menucomment>                     Writing an example in the current font.
</menucomment>
</menuentry><menuentry>
<menunode> format</menunode>
<menutitle> format</menutitle>
<menucomment>                      Writing an example without narrowed margins.
</menucomment>
</menuentry><menuentry>
<menunode> exdent</menunode>
<menutitle> exdent</menutitle>
<menucomment>                      Undo indentation on a line.
</menucomment>
</menuentry><menuentry>
<menunode> flushleft &amp; flushright</menunode>
<menutitle> flushleft &amp; flushright</menutitle>
<menucomment>      Pushing text flush left or flush right.
</menucomment>
</menuentry><menuentry>
<menunode> noindent</menunode>
<menutitle> noindent</menutitle>
<menucomment>                    Preventing paragraph indentation.
</menucomment>
</menuentry><menuentry>
<menunode> cartouche</menunode>
<menutitle> cartouche</menutitle>
<menucomment>                   Drawing rounded rectangles around examples.
</menucomment>
</menuentry>
<para>Lists and Tables
</para>
<menuentry>
<menunode> Introducing Lists</menunode>
<menutitle> Introducing Lists</menutitle>
<menucomment>           Texinfo formats lists for you.
</menucomment>
</menuentry><menuentry>
<menunode> itemize</menunode>
<menutitle> itemize</menutitle>
<menucomment>                     How to construct a simple list.
</menucomment>
</menuentry><menuentry>
<menunode> enumerate</menunode>
<menutitle> enumerate</menutitle>
<menucomment>                   How to construct a numbered list.
</menucomment>
</menuentry><menuentry>
<menunode> Two-column Tables</menunode>
<menutitle> Two-column Tables</menutitle>
<menucomment>           How to construct a two-column table.
</menucomment>
</menuentry><menuentry>
<menunode> Multi-column Tables</menunode>
<menutitle> Multi-column Tables</menutitle>
<menucomment>         How to construct generalized tables.
</menucomment>
</menuentry>
<para>Making a Two-column Table
</para>
<menuentry>
<menunode> table</menunode>
<menutitle> table</menutitle>
<menucomment>                       How to construct a two-column table.
</menucomment>
</menuentry><menuentry>
<menunode> ftable vtable</menunode>
<menutitle> ftable vtable</menutitle>
<menucomment>               Automatic indexing for two-column tables.
</menucomment>
</menuentry><menuentry>
<menunode> itemx</menunode>
<menutitle> itemx</menutitle>
<menucomment>                       How to put more entries in the first column.
</menucomment>
</menuentry>
<para>Multi-column Tables
</para>
<menuentry>
<menunode> Multitable Column Widths</menunode>
<menutitle> Multitable Column Widths</menutitle>
<menucomment>    Defining multitable column widths.
</menucomment>
</menuentry><menuentry>
<menunode> Multitable Rows</menunode>
<menutitle> Multitable Rows</menutitle>
<menucomment>             Defining multitable rows, with examples.
</menucomment>
</menuentry>
<para>Indices
</para>
<menuentry>
<menunode> Index Entries</menunode>
<menutitle> Index Entries</menutitle>
<menucomment>               Choose different words for index entries.
</menucomment>
</menuentry><menuentry>
<menunode> Predefined Indices</menunode>
<menutitle> Predefined Indices</menutitle>
<menucomment>          Use different indices for different kinds
                                  of entry.
</menucomment>
</menuentry><menuentry>
<menunode> Indexing Commands</menunode>
<menutitle> Indexing Commands</menutitle>
<menucomment>           How to make an index entry.
</menucomment>
</menuentry><menuentry>
<menunode> Combining Indices</menunode>
<menutitle> Combining Indices</menutitle>
<menucomment>           How to combine indices.
</menucomment>
</menuentry><menuentry>
<menunode> New Indices</menunode>
<menutitle> New Indices</menutitle>
<menucomment>                 How to define your own indices.
</menucomment>
</menuentry>
<para>Combining Indices
</para>
<menuentry>
<menunode> syncodeindex</menunode>
<menutitle> syncodeindex</menutitle>
<menucomment>                How to merge two indices, using <code>@code</code>
                                  font for the merged-from index.
</menucomment>
</menuentry><menuentry>
<menunode> synindex</menunode>
<menutitle> synindex</menutitle>
<menucomment>                    How to merge two indices, using the
                                  default font of the merged-to index.
</menucomment>
</menuentry>
<para>Special Insertions
</para>
<menuentry>
<menunode> Braces Atsigns</menunode>
<menutitle> Braces Atsigns</menutitle>
<menucomment>              How to insert braces, <samp>@</samp>.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Space</menunode>
<menutitle> Inserting Space</menutitle>
<menucomment>             How to insert the right amount of space
                                  within a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Accents</menunode>
<menutitle> Inserting Accents</menutitle>
<menucomment>           How to insert accents and special characters.
</menucomment>
</menuentry><menuentry>
<menunode> Dots Bullets</menunode>
<menutitle> Dots Bullets</menutitle>
<menucomment>                How to insert dots and bullets.
</menucomment>
</menuentry><menuentry>
<menunode> TeX and copyright</menunode>
<menutitle> TeX and copyright</menutitle>
<menucomment>           How to insert the &tex; logo
                                  and the copyright symbol.
</menucomment>
</menuentry><menuentry>
<menunode> pounds</menunode>
<menutitle> pounds</menutitle>
<menucomment>                      How to insert the pounds currency symbol.
</menucomment>
</menuentry><menuentry>
<menunode> minus</menunode>
<menutitle> minus</menutitle>
<menucomment>                       How to insert a minus sign.
</menucomment>
</menuentry><menuentry>
<menunode> math</menunode>
<menutitle> math</menutitle>
<menucomment>                        How to format a mathematical expression.
</menucomment>
</menuentry><menuentry>
<menunode> Glyphs</menunode>
<menutitle> Glyphs</menutitle>
<menucomment>                      How to indicate results of evaluation,
                                  expansion of macros, errors, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Footnotes</menunode>
<menutitle> Footnotes</menutitle>
<menucomment>                   How to include footnotes.
</menucomment>
</menuentry><menuentry>
<menunode> Images</menunode>
<menutitle> Images</menutitle>
<menucomment>                      How to include graphics.
</menucomment>
</menuentry>
<para>Inserting @ and Braces
</para>
<menuentry>
<menunode> Inserting An Atsign</menunode>
<menutitle> Inserting An Atsign</menutitle>
<menucomment>         How to insert <samp>@</samp>.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Braces</menunode>
<menutitle> Inserting Braces</menutitle>
<menucomment>            How to insert <samp>{</samp> and <samp>}</samp>.
</menucomment>
</menuentry>
<para>Inserting Space
</para>
<menuentry>
<menunode> Not Ending a Sentence</menunode>
<menutitle> Not Ending a Sentence</menutitle>
<menucomment>       Sometimes a . doesn't end a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> Ending a Sentence</menunode>
<menutitle> Ending a Sentence</menutitle>
<menucomment>           Sometimes it does.
</menucomment>
</menuentry><menuentry>
<menunode> Multiple Spaces</menunode>
<menutitle> Multiple Spaces</menutitle>
<menucomment>             Inserting multiple spaces.
</menucomment>
</menuentry><menuentry>
<menunode> dmn</menunode>
<menutitle> dmn</menutitle>
<menucomment>                         How to format a dimension.
</menucomment>
</menuentry>
<para>Inserting Ellipsis and Bullets
</para>
<menuentry>
<menunode> dots</menunode>
<menutitle> dots</menutitle>
<menucomment>                        How to insert dots &dots;
</menucomment>
</menuentry><menuentry>
<menunode> bullet</menunode>
<menutitle> bullet</menutitle>
<menucomment>                      How to insert a bullet.
</menucomment>
</menuentry>
<para>Inserting &tex; and the Copyright Symbol
</para>
<menuentry>
<menunode> tex</menunode>
<menutitle> tex</menutitle>
<menucomment>                         How to insert the &tex; logo.
</menucomment>
</menuentry><menuentry>
<menunode> copyright symbol</menunode>
<menutitle> copyright symbol</menutitle>
<menucomment>            How to use <code>@copyright</code>{}.
</menucomment>
</menuentry>
<para>Glyphs for Examples
</para>
<menuentry>
<menunode> Glyphs Summary</menunode>
<menutitle> Glyphs Summary</menutitle>
<menucomment>              
</menucomment>
</menuentry><menuentry>
<menunode> result</menunode>
<menutitle> result</menutitle>
<menucomment>                      How to show the result of expression.
</menucomment>
</menuentry><menuentry>
<menunode> expansion</menunode>
<menutitle> expansion</menutitle>
<menucomment>                   How to indicate an expansion.
</menucomment>
</menuentry><menuentry>
<menunode> Print Glyph</menunode>
<menutitle> Print Glyph</menutitle>
<menucomment>                 How to indicate printed output.
</menucomment>
</menuentry><menuentry>
<menunode> Error Glyph</menunode>
<menutitle> Error Glyph</menutitle>
<menucomment>                 How to indicate an error message.
</menucomment>
</menuentry><menuentry>
<menunode> Equivalence</menunode>
<menutitle> Equivalence</menutitle>
<menucomment>                 How to indicate equivalence.
</menucomment>
</menuentry><menuentry>
<menunode> Point Glyph</menunode>
<menutitle> Point Glyph</menutitle>
<menucomment>                 How to indicate the location of point.
</menucomment>
</menuentry>
<para>Glyphs Summary
</para>
<menuentry>
<menunode> result</menunode>
<menutitle> result</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> expansion</menunode>
<menutitle> expansion</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Print Glyph</menunode>
<menutitle> Print Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Error Glyph</menunode>
<menutitle> Error Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Equivalence</menunode>
<menutitle> Equivalence</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Point Glyph</menunode>
<menutitle> Point Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry>
<para>Footnotes
</para>
<menuentry>
<menunode> Footnote Commands</menunode>
<menutitle> Footnote Commands</menutitle>
<menucomment>           How to write a footnote in Texinfo.
</menucomment>
</menuentry><menuentry>
<menunode> Footnote Styles</menunode>
<menutitle> Footnote Styles</menutitle>
<menucomment>             Controlling how footnotes appear in Info.
</menucomment>
</menuentry>
<para>Making and Preventing Breaks
</para>
<menuentry>
<menunode> Break Commands</menunode>
<menutitle> Break Commands</menutitle>
<menucomment>              Cause and prevent splits.
</menucomment>
</menuentry><menuentry>
<menunode> Line Breaks</menunode>
<menutitle> Line Breaks</menutitle>
<menucomment>                 How to force a single line to use two lines.
</menucomment>
</menuentry><menuentry>
<menunode> - and hyphenation</menunode>
<menutitle> - and hyphenation</menutitle>
<menucomment>           How to tell &tex; about hyphenation points.
</menucomment>
</menuentry><menuentry>
<menunode> w</menunode>
<menutitle> w</menutitle>
<menucomment>                           How to prevent unwanted line breaks.
</menucomment>
</menuentry><menuentry>
<menunode> sp</menunode>
<menutitle> sp</menutitle>
<menucomment>                          How to insert blank lines.
</menucomment>
</menuentry><menuentry>
<menunode> page</menunode>
<menutitle> page</menutitle>
<menucomment>                        How to force the start of a new page.
</menucomment>
</menuentry><menuentry>
<menunode> group</menunode>
<menutitle> group</menutitle>
<menucomment>                       How to prevent unwanted page breaks.
</menucomment>
</menuentry><menuentry>
<menunode> need</menunode>
<menutitle> need</menutitle>
<menucomment>                        Another way to prevent unwanted page breaks.
</menucomment>
</menuentry>
<para>Definition Commands
</para>
<menuentry>
<menunode> Def Cmd Template</menunode>
<menutitle> Def Cmd Template</menutitle>
<menucomment>            How to structure a description using a
                                  definition command.
</menucomment>
</menuentry><menuentry>
<menunode> Optional Arguments</menunode>
<menutitle> Optional Arguments</menutitle>
<menucomment>          How to handle optional and repeated arguments.
</menucomment>
</menuentry><menuentry>
<menunode> deffnx</menunode>
<menutitle> deffnx</menutitle>
<menucomment>                      How to group two or more `first' lines.
</menucomment>
</menuentry><menuentry>
<menunode> Def Cmds in Detail</menunode>
<menutitle> Def Cmds in Detail</menutitle>
<menucomment>          All the definition commands.
</menucomment>
</menuentry><menuentry>
<menunode> Def Cmd Conventions</menunode>
<menutitle> Def Cmd Conventions</menutitle>
<menucomment>         Conventions for writing definitions.
</menucomment>
</menuentry><menuentry>
<menunode> Sample Function Definition</menunode>
<menutitle> Sample Function Definition</menutitle>
<menucomment>  
</menucomment>
</menuentry>
<para>The Definition Commands
</para>
<menuentry>
<menunode> Functions Commands</menunode>
<menutitle> Functions Commands</menutitle>
<menucomment>          Commands for functions and similar entities.
</menucomment>
</menuentry><menuentry>
<menunode> Variables Commands</menunode>
<menutitle> Variables Commands</menutitle>
<menucomment>          Commands for variables and similar entities.
</menucomment>
</menuentry><menuentry>
<menunode> Typed Functions</menunode>
<menutitle> Typed Functions</menutitle>
<menucomment>             Commands for functions in typed languages.
</menucomment>
</menuentry><menuentry>
<menunode> Typed Variables</menunode>
<menutitle> Typed Variables</menutitle>
<menucomment>             Commands for variables in typed languages.
</menucomment>
</menuentry><menuentry>
<menunode> Abstract Objects</menunode>
<menutitle> Abstract Objects</menutitle>
<menucomment>            Commands for object-oriented programming.
</menucomment>
</menuentry><menuentry>
<menunode> Data Types</menunode>
<menutitle> Data Types</menutitle>
<menucomment>                  The definition command for data types.
</menucomment>
</menuentry>
<para>Conditionally Visible Text
</para>
<menuentry>
<menunode> Conditional Commands</menunode>
<menutitle> Conditional Commands</menutitle>
<menucomment>        Specifying text for HTML, Info, or &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Conditional Not Commands</menunode>
<menutitle> Conditional Not Commands</menutitle>
<menucomment>    Specifying text for not HTML, Info, or &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Raw Formatter Commands</menunode>
<menutitle> Raw Formatter Commands</menutitle>
<menucomment>      Using raw &tex; or HTML commands.
</menucomment>
</menuentry><menuentry>
<menunode> set clear value</menunode>
<menutitle> set clear value</menutitle>
<menucomment>             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.
</menucomment>
</menuentry>
<para><code>@set</code>, <code>@clear</code>, and <code>@value</code>
</para>
<menuentry>
<menunode> set value</menunode>
<menutitle> set value</menutitle>
<menucomment>                   Expand a flag variable to a string.
</menucomment>
</menuentry><menuentry>
<menunode> ifset ifclear</menunode>
<menutitle> ifset ifclear</menutitle>
<menucomment>               Format a region if a flag is set.
</menucomment>
</menuentry><menuentry>
<menunode> value Example</menunode>
<menutitle> value Example</menutitle>
<menucomment>               An easy way to update edition information.
</menucomment>
</menuentry>
<para>Internationalization
</para>
<menuentry>
<menunode> documentlanguage</menunode>
<menutitle> documentlanguage</menutitle>
<menucomment>            Declaring the current language.
</menucomment>
</menuentry><menuentry>
<menunode> documentencoding</menunode>
<menutitle> documentencoding</menutitle>
<menucomment>            Declaring the input encoding.
</menucomment>
</menuentry>
<para>Defining New Texinfo Commands
</para>
<menuentry>
<menunode> Defining Macros</menunode>
<menutitle> Defining Macros</menutitle>
<menucomment>             Defining and undefining new commands.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking Macros</menunode>
<menutitle> Invoking Macros</menutitle>
<menucomment>             Using a macro, once you've defined it.
</menucomment>
</menuentry><menuentry>
<menunode> Macro Details</menunode>
<menutitle> Macro Details</menutitle>
<menucomment>               Beyond basic macro usage.
</menucomment>
</menuentry><menuentry>
<menunode> alias</menunode>
<menutitle> alias</menutitle>
<menucomment>                       Command aliases.
</menucomment>
</menuentry><menuentry>
<menunode> definfoenclose</menunode>
<menutitle> definfoenclose</menutitle>
<menucomment>              Customized highlighting.
</menucomment>
</menuentry>
<para>Formatting and Printing Hardcopy
</para>
<menuentry>
<menunode> Use TeX</menunode>
<menutitle> Use TeX</menutitle>
<menucomment>                     Use &tex; to format for hardcopy.
</menucomment>
</menuentry><menuentry>
<menunode> Format with tex/texindex</menunode>
<menutitle> Format with tex/texindex</menutitle>
<menucomment>    How to format with explicit shell commands.
</menucomment>
</menuentry><menuentry>
<menunode> Format with texi2dvi</menunode>
<menutitle> Format with texi2dvi</menutitle>
<menucomment>        A simpler way to format.
</menucomment>
</menuentry><menuentry>
<menunode> Print with lpr</menunode>
<menutitle> Print with lpr</menutitle>
<menucomment>              How to print.
</menucomment>
</menuentry><menuentry>
<menunode> Within Emacs</menunode>
<menutitle> Within Emacs</menutitle>
<menucomment>                How to format and print from an Emacs shell.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo Mode Printing</menunode>
<menutitle> Texinfo Mode Printing</menutitle>
<menucomment>       How to format and print in Texinfo mode.
</menucomment>
</menuentry><menuentry>
<menunode> Compile-Command</menunode>
<menutitle> Compile-Command</menutitle>
<menucomment>             How to print using Emacs's compile command.
</menucomment>
</menuentry><menuentry>
<menunode> Requirements Summary</menunode>
<menutitle> Requirements Summary</menutitle>
<menucomment>        &tex; formatting requirements summary.
</menucomment>
</menuentry><menuentry>
<menunode> Preparing for TeX</menunode>
<menutitle> Preparing for TeX</menutitle>
<menucomment>           What to do before you use &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Overfull hboxes</menunode>
<menutitle> Overfull hboxes</menutitle>
<menucomment>             What are and what to do with overfull hboxes.
</menucomment>
</menuentry><menuentry>
<menunode> smallbook</menunode>
<menutitle> smallbook</menutitle>
<menucomment>                   How to print small format books and manuals.
</menucomment>
</menuentry><menuentry>
<menunode> A4 Paper</menunode>
<menutitle> A4 Paper</menutitle>
<menucomment>                    How to print on A4 or A5 paper.
</menucomment>
</menuentry><menuentry>
<menunode> pagesizes</menunode>
<menutitle> pagesizes</menutitle>
<menucomment>                   How to print with customized page sizes.
</menucomment>
</menuentry><menuentry>
<menunode> Cropmarks and Magnification</menunode>
<menutitle> Cropmarks and Magnification</menutitle>
<menucomment>  How to print marks to indicate the size
                                of pages and how to print scaled up output.
</menucomment>
</menuentry><menuentry>
<menunode> PDF Output</menunode>
<menutitle> PDF Output</menutitle>
<menucomment>                  Portable Document Format output.
</menucomment>
</menuentry>
<para>Creating and Installing Info Files
</para>
<menuentry>
<menunode> Creating an Info File</menunode>
<menutitle> Creating an Info File</menutitle>
<menucomment>       
</menucomment>
</menuentry><menuentry>
<menunode> Installing an Info File</menunode>
<menutitle> Installing an Info File</menutitle>
<menucomment>     
</menucomment>
</menuentry>
<para>Creating an Info File
</para>
<menuentry>
<menunode> makeinfo advantages</menunode>
<menutitle> makeinfo advantages</menutitle>
<menucomment>         <code>makeinfo</code> provides better error checking.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking makeinfo</menunode>
<menutitle> Invoking makeinfo</menutitle>
<menucomment>           How to run <code>makeinfo</code> from a shell.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo options</menunode>
<menutitle> makeinfo options</menutitle>
<menucomment>            Specify fill-column and other options.
</menucomment>
</menuentry><menuentry>
<menunode> Pointer Validation</menunode>
<menutitle> Pointer Validation</menutitle>
<menucomment>          How to check that pointers point somewhere.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo in Emacs</menunode>
<menutitle> makeinfo in Emacs</menutitle>
<menucomment>           How to run <code>makeinfo</code> from Emacs.
</menucomment>
</menuentry><menuentry>
<menunode> texinfo-format commands</menunode>
<menutitle> texinfo-format commands</menutitle>
<menucomment>     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to <code>makeinfo</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Batch Formatting</menunode>
<menutitle> Batch Formatting</menutitle>
<menucomment>            How to format for Info in Emacs Batch mode.
</menucomment>
</menuentry><menuentry>
<menunode> Tag and Split Files</menunode>
<menutitle> Tag and Split Files</menutitle>
<menucomment>         How tagged and split files help Info
                                  to run better.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo html</menunode>
<menutitle> makeinfo html</menutitle>
<menucomment>               Generating HTML output.
</menucomment>
</menuentry>
<para>Installing an Info File
</para>
<menuentry>
<menunode> Directory File</menunode>
<menutitle> Directory File</menutitle>
<menucomment>              The top level menu for all Info files.
</menucomment>
</menuentry><menuentry>
<menunode> New Info File</menunode>
<menutitle> New Info File</menutitle>
<menucomment>               Listing a new Info file.
</menucomment>
</menuentry><menuentry>
<menunode> Other Info Directories</menunode>
<menutitle> Other Info Directories</menutitle>
<menucomment>      How to specify Info files that are
                                  located in other directories.
</menucomment>
</menuentry><menuentry>
<menunode> Installing Dir Entries</menunode>
<menutitle> Installing Dir Entries</menutitle>
<menucomment>      How to specify what menu entry to add
                                  to the Info directory.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking install-info</menunode>
<menutitle> Invoking install-info</menutitle>
<menucomment>       <code>install-info</code> options.
</menucomment>
</menuentry>
<para>Sample Texinfo Files
</para>
<menuentry>
<menunode> Short Sample Texinfo File</menunode>
<menutitle> Short Sample Texinfo File</menutitle>
<menucomment>   
</menucomment>
</menuentry><menuentry>
<menunode> GNU Sample Texts</menunode>
<menutitle> GNU Sample Texts</menutitle>
<menucomment>            
</menucomment>
</menuentry>
<para>Include Files
</para>
<menuentry>
<menunode> Using Include Files</menunode>
<menutitle> Using Include Files</menutitle>
<menucomment>         How to use the <code>@include</code> command.
</menucomment>
</menuentry><menuentry>
<menunode> texinfo-multiple-files-update</menunode>
<menutitle> texinfo-multiple-files-update</menutitle>
<menucomment>  How to create and update nodes and
                                  menus when using included files.
</menucomment>
</menuentry><menuentry>
<menunode> Include File Requirements</menunode>
<menutitle> Include File Requirements</menutitle>
<menucomment>   What <code>texinfo-multiple-files-update</code> expects.
</menucomment>
</menuentry><menuentry>
<menunode> Sample Include File</menunode>
<menutitle> Sample Include File</menutitle>
<menucomment>         A sample outer file with included files
                                  within it; and a sample included file.
</menucomment>
</menuentry><menuentry>
<menunode> Include Files Evolution</menunode>
<menutitle> Include Files Evolution</menutitle>
<menucomment>     How use of the <code>@include</code> command
                                  has changed over time.
</menucomment>
</menuentry>
<para>Page Headings
</para>
<menuentry>
<menunode> Headings Introduced</menunode>
<menutitle> Headings Introduced</menutitle>
<menucomment>         Conventions for using page headings.
</menucomment>
</menuentry><menuentry>
<menunode> Heading Format</menunode>
<menutitle> Heading Format</menutitle>
<menucomment>              Standard page heading formats.
</menucomment>
</menuentry><menuentry>
<menunode> Heading Choice</menunode>
<menutitle> Heading Choice</menutitle>
<menucomment>              How to specify the type of page heading.
</menucomment>
</menuentry><menuentry>
<menunode> Custom Headings</menunode>
<menutitle> Custom Headings</menutitle>
<menucomment>             How to create your own headings and footings.
</menucomment>
</menuentry>
<para>Formatting Mistakes
</para>
<menuentry>
<menunode> makeinfo Preferred</menunode>
<menutitle> makeinfo Preferred</menutitle>
<menucomment>          <code>makeinfo</code> finds errors.
</menucomment>
</menuentry><menuentry>
<menunode> Debugging with Info</menunode>
<menutitle> Debugging with Info</menutitle>
<menucomment>         How to catch errors with Info formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Debugging with TeX</menunode>
<menutitle> Debugging with TeX</menutitle>
<menucomment>          How to catch errors with &tex; formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Using texinfo-show-structure</menunode>
<menutitle> Using texinfo-show-structure</menutitle>
<menucomment>  How to use <code>texinfo-show-structure</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Using occur</menunode>
<menutitle> Using occur</menutitle>
<menucomment>                 How to list all lines containing a pattern.
</menucomment>
</menuentry><menuentry>
<menunode> Running Info-Validate</menunode>
<menutitle> Running Info-Validate</menutitle>
<menucomment>       How to find badly referenced nodes.
</menucomment>
</menuentry>
<para>Finding Badly Referenced Nodes
</para>
<menuentry>
<menunode> Using Info-validate</menunode>
<menutitle> Using Info-validate</menutitle>
<menucomment>         How to run <code>Info-validate</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Unsplit</menunode>
<menutitle> Unsplit</menutitle>
<menucomment>                     How to create an unsplit file.
</menucomment>
</menuentry><menuentry>
<menunode> Tagifying</menunode>
<menutitle> Tagifying</menutitle>
<menucomment>                   How to tagify a file.
</menucomment>
</menuentry><menuentry>
<menunode> Splitting</menunode>
<menutitle> Splitting</menutitle>
<menucomment>                   How to split a file manually.
</menucomment>
</menuentry>
<para>Copying This Manual
</para>
<menuentry>
<menunode> GNU Free Documentation License</menunode>
<menutitle> GNU Free Documentation License</menutitle>
<menucomment>  License for copying this manual.
</menucomment>
</menuentry></detailmenu>
</menu>

<!-- Reward readers for getting to the end of the menu :). -->
<!-- Contributed by Arnold Robbins. -->
<quotation>
<para>Documentation is like sex: when it is good, it is very, very good; and
when it is bad, it is better than nothing.
&mdash;Dick Brandon
</para></quotation>


</unnumbered>
</node>
<node>
<nodename>Copying Conditions</nodename>
<nodenext>Overview</nodenext>
<nodeprev>Top</nodeprev>
<nodeup>Top</nodeup>
<unnumbered>
<title>Texinfo Copying Conditions</title>
<para><indexterm index="cp">Copying conditions</indexterm><indexterm index="cp">Conditions for copying Texinfo</indexterm></para>
<para>The programs currently being distributed that relate to Texinfo include
<code>makeinfo</code>, <code>info</code>, <code>texindex</code>, and <file>texinfo.tex</file>.
These programs are <dfn>free</dfn>; this means that everyone is free to use
them and free to redistribute them on a free basis.  The Texinfo-related
programs are not in the public domain; they are copyrighted and there
are restrictions on their distribution, but these restrictions are
designed to permit everything that a good cooperating citizen would want
to do.  What is not allowed is to try to prevent others from further
sharing any version of these programs that they might get from you.
</para>
<para>Specifically, we want to make sure that you have the right to give away
copies of the programs that relate to Texinfo, that you receive source
code or else can get it if you want it, that you can change these
programs or use pieces of them in new free programs, and that you know
you can do these things.
</para>
<para>To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the Texinfo related programs, you must give the recipients all
the rights that you have.  You must make sure that they, too, receive or
can get the source code.  And you must tell them their rights.
</para>
<para>Also, for our own protection, we must make certain that everyone finds
out that there is no warranty for the programs that relate to Texinfo.
If these programs are modified by someone else and passed on, we want
their recipients to know that what they have is not what we distributed,
so that any problems introduced by others will not reflect on our
reputation.
</para>
<para>The precise conditions of the licenses for the programs currently being
distributed that relate to Texinfo are found in the General Public
Licenses that accompany them.  This manual specifically is covered by
the GNU Free Documentation License (see <xref><xrefnodename>GNU Free Documentation License</xrefnodename></xref>).
</para>

</unnumbered>
</node>
<node>
<nodename>Overview</nodename>
<nodenext>Texinfo Mode</nodenext>
<nodeprev>Copying Conditions</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Overview of Texinfo</title>
<para><indexterm index="cp">Overview of Texinfo</indexterm><indexterm index="cp">Texinfo overview</indexterm></para>
<para><dfn>Texinfo</dfn><footnote><para>The first syllable of &ldquo;Texinfo&rdquo; is pronounced
like &ldquo;speck&rdquo;, not &ldquo;hex&rdquo;.  This odd pronunciation is derived from,
but is not the same as, the pronunciation of &tex;.  In the word
&tex;, the <samp>X</samp> is actually the Greek letter &ldquo;chi&rdquo; rather than
the English letter &ldquo;ex&rdquo;.  Pronounce &tex; as if the <samp>X</samp> were the
last sound in the name `Bach'; but pronounce Texinfo as if the <samp>x</samp>
were a `k'.  Spell &ldquo;Texinfo&rdquo; with a capital &ldquo;T&rdquo; and the other
letters in lower case.
</para></footnote>  is a documentation system that uses a single
source file to produce both online information and printed output.  This
means that instead of writing two different documents, one for the
online information and the other for a printed work, you need write only
one document.  Therefore, when the work is revised, you need revise only
that one document.
</para>
<menu>
<menuentry>
<menunode> Reporting Bugs</menunode>
<menutitle> Reporting Bugs</menutitle>
<menucomment>              Submitting effective bug reports.
</menucomment>
</menuentry><menuentry>
<menunode> Using Texinfo</menunode>
<menutitle> Using Texinfo</menutitle>
<menucomment>               Create printed or online output.
</menucomment>
</menuentry><menuentry>
<menunode> Info Files</menunode>
<menutitle> Info Files</menutitle>
<menucomment>                  What is an Info file?
</menucomment>
</menuentry><menuentry>
<menunode> Printed Books</menunode>
<menutitle> Printed Books</menutitle>
<menucomment>               Characteristics of a printed book or manual.
</menucomment>
</menuentry><menuentry>
<menunode> Formatting Commands</menunode>
<menutitle> Formatting Commands</menutitle>
<menucomment>         @-commands are used for formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Conventions</menunode>
<menutitle> Conventions</menutitle>
<menucomment>                 General rules for writing a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Comments</menunode>
<menutitle> Comments</menutitle>
<menucomment>                    Writing comments and ignored text in general.
</menucomment>
</menuentry><menuentry>
<menunode> Minimum</menunode>
<menutitle> Minimum</menutitle>
<menucomment>                     What a Texinfo file must have.
</menucomment>
</menuentry><menuentry>
<menunode> Six Parts</menunode>
<menutitle> Six Parts</menutitle>
<menucomment>                   Usually, a Texinfo file has six parts.
</menucomment>
</menuentry><menuentry>
<menunode> Short Sample</menunode>
<menutitle> Short Sample</menutitle>
<menucomment>                A short sample Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> History</menunode>
<menutitle> History</menutitle>
<menucomment>                     Acknowledgements, contributors and genesis.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Reporting Bugs</nodename>
<nodenext>Using Texinfo</nodenext>
<nodeup>Overview</nodeup>
<section>
<title>Reporting Bugs</title>

<para><indexterm index="cp">Bugs, reporting</indexterm><indexterm index="cp">Suggestions for Texinfo, making</indexterm><indexterm index="cp">Reporting bugs</indexterm>We welcome bug reports and suggestions for any aspect of the Texinfo system,
programs, documentation, installation, anything.  Please email them to
<email><emailaddress>bug-texinfo@gnu.org</emailaddress></email>.  You can get the latest version of Texinfo
from <uref><urefurl>ftp://ftp.gnu.org/gnu/texinfo/</urefurl></uref> and its mirrors worldwide.
</para>
<para><indexterm index="cp">Checklist for bug reports</indexterm>For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item><para> the version number of Texinfo and the program(s) or manual(s) involved.
</para></item>
<item><para> hardware and operating system names and versions.
</para></item>
<item><para> the contents of any input files necessary to reproduce the bug.
</para></item>
<item><para> a description of the problem and samples of any erroneous output.
</para></item>
<item><para> any unusual options you gave to <command>configure</command>.
</para></item>
<item><para> anything else that you think would be helpful.
</para></item>
</itemize>

<para>When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.
</para>
<para><indexterm index="cp">Patches, contributing</indexterm>Patches are most welcome; if possible, please make them with
<samp>diff -c<!-- /@w --></samp> (see <xref><xrefnodename>Top</xrefnodename><xrefprinteddesc>Overview</xrefprinteddesc><xrefinfofile>diffutils</xrefinfofile><xrefprintedname>Comparing and Merging Files</xrefprintedname></xref>) and include <file>ChangeLog</file> entries (see <xref><xrefnodename>Change Log</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).
</para>
<para>When sending patches, if possible please do not encode or split them in
any way; it's much easier to deal with one plain text message, however
large, than many small ones.  <uref><urefurl>ftp://ftp.gnu.org/gnu/sharutils/</urefurl><urefdesc>GNU shar</urefdesc></uref> is a convenient way of packaging multiple and/or binary files
for email.
</para>

</section>
</node>
<node>
<nodename>Using Texinfo</nodename>
<nodenext>Info Files</nodenext>
<nodeprev>Reporting Bugs</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>Using Texinfo</title>

<para><indexterm index="cp">Using Texinfo in general</indexterm><indexterm index="cp">Texinfo, introduction to</indexterm><indexterm index="cp">Introduction to Texinfo</indexterm></para>
<para>Using Texinfo, you can create a printed document with the normal
features of a book, including chapters, sections, cross references, and
indices.  From the same Texinfo source file, you can create a
menu-driven, online Info file with nodes, menus, cross references, and
indices.  You can also create from that same source file an HTML output
file suitable for use with a web browser, or an XML file.  <cite>The GNU
Emacs Manual</cite> is a good example of a Texinfo file, as is this manual.
</para>
<para>To make a printed document, you process a Texinfo source file with the
&tex; typesetting program (but the Texinfo language is very different
and much stricter than &tex;'s usual language, plain &tex;).  This
creates a DVI file that you can typeset and print as a book or report
(see <xref><xrefnodename>Hardcopy</xrefnodename></xref>).
</para>
<para><indexterm index="cp">makeinfo</indexterm>To output an Info file, process your Texinfo source with the
<code>makeinfo</code> utility or Emacs's <code>texinfo-format-buffer</code> command.
You can install the result in your Info tree (see <xref><xrefnodename>Installing an Info File</xrefnodename></xref>).
</para>
<para>To output an HTML file, run <code>makeinfo --html</code> on your Texinfo
source.  You can (for example) install the result on your web site.
</para>
<para><indexterm index="cp">Docbook, converting to Texinfo</indexterm><indexterm index="cp">Conversion, from Docbook to Texinfo</indexterm>To output an XML file, run <code>makeinfo --xml</code> on your Texinfo source.
To output DocBook (a particular form of XML), run <code>makeinfo
--docbook</code>.  If you want to convert from Docbook <emph>to</emph> Texinfo,
please see <uref><urefurl>http://docbook2X.sourceforge.net/</urefurl></uref>.
</para>
<para><indexterm index="cp">Output formats, supporting more</indexterm><indexterm index="cp">SGML-tools output format</indexterm>If you are a programmer and would like to contribute to the GNU project
by implementing additional output formats for Texinfo, that would be
excellent.  But please do not write a separate translator texi2foo for
your favorite format foo!  That is the hard way to do the job, and makes
extra work in subsequent maintenance, since the Texinfo language is
continually being enhanced and updated.  Instead, the best approach is
modify <code>makeinfo</code> to generate the new format, as it does now for
Info, plain text, HTML, XML, and DocBook.
</para>
<para>&tex; works with virtually all printers; Info works with virtually all
computer terminals; the HTML output works with virtually all web
browsers.  Thus Texinfo can be used by almost any computer user.
</para>
<para><indexterm index="cp">Source file</indexterm>A Texinfo source file is a plain <sc>ascii</sc> file containing text and
<dfn>@-commands</dfn> (words preceded by an <samp>@</samp>) that tell the
typesetting and formatting programs what to do.  You may edit a Texinfo
file with any text editor; but it is especially convenient to use GNU
Emacs since that editor has a special mode, called Texinfo mode, that
provides various Texinfo-related features.  (See <xref><xrefnodename>Texinfo Mode</xrefnodename></xref>.)
</para>
<para>Before writing a Texinfo source file, you should learn about nodes,
menus, cross references, and the rest, for example by reading this
manual.
</para>
<para>You can use Texinfo to create both online help and printed manuals;
moreover, Texinfo is freely redistributable.  For these reasons, Texinfo
is the official documentation format of the GNU project.  More
information is available at the <uref><urefurl>http://www.gnu.org/doc/</urefurl><urefdesc>GNU documentation web page</urefdesc></uref>.
</para>
<para><indexterm index="cp">Man page output, not supported</indexterm>From time to time, proposals are made to generate traditional Unix man
pages from Texinfo source.  This is not likely to ever be supported,
because man pages have a very strict conventional format.  Merely
enhancing <command>makeinfo</command> to output troff format would be
insufficient.  Generating a good man page therefore requires a
completely different source than the typical Texinfo applications of
writing a good user tutorial or a good reference manual.  This makes
generating man pages incompatible with the Texinfo design goal of not
having to document the same information in different ways for different
output formats.  You might as well just write the man page directly.
</para>
<para><indexterm index="cp">help2man</indexterm><indexterm index="cp">O'Dea, Brendan</indexterm>Man pages still have their place, and if you wish to support them, the
program <command>help2man</command> may be useful; it generates a traditional man
page from the <samp>--help</samp> output of a program.  In fact, this is
currently used to generate man pages for the Texinfo programs
themselves.  It is GNU software written by Brendan O'Dea, available from
<uref><urefurl>ftp://ftp.gnu.org/gnu/help2man/</urefurl></uref>.
</para>

</section>
</node>
<node>
<nodename>Info Files</nodename>
<nodenext>Printed Books</nodenext>
<nodeprev>Using Texinfo</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>Info files</title>
<para><indexterm index="cp">Info files</indexterm></para>
<para>An Info file is a Texinfo file formatted so that the Info documentation
reading program can operate on it.  (<code>makeinfo</code>
and <code>texinfo-format-buffer</code> are two commands that convert a Texinfo file
into an Info file.)
</para>
<para>Info files are divided into pieces called <dfn>nodes</dfn>, each of which
contains the discussion of one topic.  Each node has a name, and
contains both text for the user to read and pointers to other nodes,
which are identified by their names.  The Info program displays one node
at a time, and provides commands with which the user can move to other
related nodes.
</para>

<para>Each node of an Info file may have any number of child nodes that
describe subtopics of the node's topic.  The names of child
nodes are listed in a <dfn>menu</dfn> within the parent node; this
allows you to use certain Info commands to move to one of the child
nodes.  Generally, an Info file is organized like a book.  If a node
is at the logical level of a chapter, its child nodes are at the level
of sections; likewise, the child nodes of sections are at the level
of subsections.
</para>
<para>All the children of any one parent are linked together in a
bidirectional chain of `Next' and `Previous' pointers.  The `Next'
pointer provides a link to the next section, and the `Previous' pointer
provides a link to the previous section.  This means that all the nodes
that are at the level of sections within a chapter are linked together.
Normally the order in this chain is the same as the order of the
children in the parent's menu.  Each child node records the parent node
name as its `Up' pointer.  The last child has no `Next' pointer, and the
first child has the parent both as its `Previous' and as its `Up'
pointer.<footnote><para>In some documents, the first child has no `Previous'
pointer.  Occasionally, the last child has the node name of the next
following higher level node as its `Next' pointer.
</para></footnote>
</para>
<para>The book-like structuring of an Info file into nodes that correspond
to chapters, sections, and the like is a matter of convention, not a
requirement.  The `Up', `Previous', and `Next' pointers of a node can
point to any other nodes, and a menu can contain any other nodes.
Thus, the node structure can be any directed graph.  But it is usually
more comprehensible to follow a structure that corresponds to the
structure of chapters and sections in a printed book or report.
</para>
<para>In addition to menus and to `Next', `Previous', and `Up' pointers, Info
provides pointers of another kind, called references, that can be
sprinkled throughout the text.  This is usually the best way to
represent links that do not fit a hierarchical structure.
</para>
<para>Usually, you will design a document so that its nodes match the
structure of chapters and sections in the printed output.  But
occasionally there are times when this is not right for the material
being discussed.  Therefore, Texinfo uses separate commands to specify
the node structure for the Info file and the section structure for the
printed output.
</para>
<para>Generally, you enter an Info file through a node that by convention is
named `Top'.  This node normally contains just a brief summary of the
file's purpose, and a large menu through which the rest of the file is
reached.  From this node, you can either traverse the file
systematically by going from node to node, or you can go to a specific
node listed in the main menu, or you can search the index menus and then
go directly to the node that has the information you want.  Alternatively,
with the standalone Info program, you can specify specific menu items on
the command line (see <xref><xrefnodename>Top</xrefnodename><xrefinfofile>info</xrefinfofile><xrefprintedname>Info</xrefprintedname></xref>).
</para>
<para>If you want to read through an Info file in sequence, as if it were a
printed manual, you can hit <key>SPC</key> repeatedly, or you get the whole
file with the advanced Info command <kbd>g *</kbd>.  (See <inforef><inforefnodename>Expert</inforefnodename><inforefrefname>Advanced Info commands</inforefrefname><inforefinfoname>info</inforefinfoname></inforef>.)
</para>
<!-- !!! dir file may be located in one of many places: -->
<!--     /usr/local/emacs/info            mentioned in info.c DEFAULT_INFOPATH -->
<!--     /usr/local/lib/emacs/info        mentioned in info.c DEFAULT_INFOPATH -->
<!--     /usr/gnu/info                    mentioned in info.c DEFAULT_INFOPATH -->
<!--     /usr/local/info -->
<!--     /usr/local/lib/info -->
<para>The <file>dir</file> file in the <file>info</file> directory serves as the
departure point for the whole Info system.  From it, you can reach the
`Top' nodes of each of the documents in a complete Info system.
</para>
<para><indexterm index="cp">URI syntax for Info</indexterm>If you wish to refer to an Info file in a URI, you can use the
(unofficial) syntax exemplified in the following.  This works with
Emacs/W3, for example:
</para><example xml:space="preserve">info:///usr/info/emacs#Dissociated%20Press
info:emacs#Dissociated%20Press
info://localhost/usr/info/emacs#Dissociated%20Press
</example>
<para>The <command>info</command> program itself does not follow URI's of any kind.
</para>

</section>
</node>
<node>
<nodename>Printed Books</nodename>
<nodenext>Formatting Commands</nodenext>
<nodeprev>Info Files</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>Printed Books</title>
<para><indexterm index="cp">Printed book and manual characteristics</indexterm><indexterm index="cp">Manual characteristics, printed</indexterm><indexterm index="cp">Book characteristics, printed</indexterm><indexterm index="cp">Texinfo printed book characteristics</indexterm><indexterm index="cp">Characteristics, printed books or manuals</indexterm></para>
<para><indexterm index="cp">Knuth, Donald</indexterm>A Texinfo file can be formatted and typeset as a printed book or manual.
To do this, you need &tex;, a powerful, sophisticated typesetting
program written by Donald Knuth.<footnote><para>You can also use the
<indexterm index="cp">texi2roff<r>, unsupported software</r></indexterm><uref><urefurl>ftp://tug.org/texi2roff.tar.gz</urefurl><urefdesc><code>texi2roff</code></urefdesc></uref> program if you
do not have &tex;; since Texinfo is designed for use with &tex;,
<code>texi2roff</code> is not described here.  <code>texi2roff</code> is not part of
the standard GNU distribution and is not maintained or up-to-date with
all the Texinfo features described in this manual.
</para></footnote>
</para>
<para>A Texinfo-based book is similar to any other typeset, printed work: it
can have a title page, copyright page, table of contents, and preface,
as well as chapters, numbered or unnumbered sections and subsections,
page headers, cross references, footnotes, and indices.
</para>
<para>You can use Texinfo to write a book without ever having the intention
of converting it into online information.  You can use Texinfo for
writing a printed novel, and even to write a printed memo, although
this latter application is not recommended since electronic mail is so
much easier.
</para>
<para>&tex; is a general purpose typesetting program.  Texinfo provides a
file <file>texinfo.tex</file> that contains information (definitions or
<dfn>macros</dfn>) that &tex; uses when it typesets a Texinfo file.
(<file>texinfo.tex</file> tells &tex; how to convert the Texinfo @-commands
to &tex; commands, which &tex; can then process to create the typeset
document.)  <file>texinfo.tex</file> contains the specifications for printing
a document.  You can get the latest version of <file>texinfo.tex</file> from
<uref><urefurl>ftp://ftp.gnu.org/gnu/texinfo.tex</urefurl></uref>.
</para>
<para>In the United States, documents are most often printed on 8.5 inch by 11
inch pages (216<dmn>mm</dmn> by 280<dmn>mm</dmn>); this is the default size.  But
you can also print for 7 inch by 9.25 inch pages (178<dmn>mm</dmn> by
235<dmn>mm</dmn>, the <code>@smallbook</code> size; or on A4 or A5 size paper
(<code>@afourpaper</code>, <code>@afivepaper</code>).  (See <xref><xrefnodename>smallbook</xrefnodename><xrefprinteddesc>Printing &ldquo;Small&rdquo; Books</xrefprinteddesc></xref>.  Also, see <xref><xrefnodename>A4 Paper</xrefnodename><xrefprinteddesc>Printing on A4 Paper</xrefprinteddesc></xref>.)
</para>
<para>By changing the parameters in <file>texinfo.tex</file>, you can change the
size of the printed document.  In addition, you can change the style in
which the printed document is formatted; for example, you can change the
sizes and fonts used, the amount of indentation for each paragraph, the
degree to which words are hyphenated, and the like.  By changing the
specifications, you can make a book look dignified, old and serious, or
light-hearted, young and cheery.
</para>
<para>&tex; is freely distributable.  It is written in a superset of Pascal
called WEB and can be compiled either in Pascal or (by using a
conversion program that comes with the &tex; distribution) in C.
(See <xref><xrefnodename>TeX Mode</xrefnodename><xrefprinteddesc>&tex; Mode</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for information
about &tex;.)
</para>
<para>&tex; is very powerful and has a great many features.  Because a
Texinfo file must be able to present information both on a
character-only terminal in Info form and in a typeset book, the
formatting commands that Texinfo supports are necessarily limited.
</para>
<para>To get a copy of &tex;, see
<xref><xrefnodename>Obtaining TeX</xrefnodename><xrefprinteddesc>How to Obtain &tex;</xrefprinteddesc></xref>.
</para>

</section>
</node>
<node>
<nodename>Formatting Commands</nodename>
<nodenext>Conventions</nodenext>
<nodeprev>Printed Books</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>@-commands</title>
<para><indexterm index="cp">@-commands</indexterm><indexterm index="cp">Formatting commands</indexterm></para>
<para>In a Texinfo file, the commands that tell &tex; how to typeset the
printed manual and tell <code>makeinfo</code> and
<code>texinfo-format-buffer</code> how to create an Info file are preceded
by <samp>@</samp>; they are called <dfn>@-commands</dfn>.  For example,
<code>@node</code> is the command to indicate a node and <code>@chapter</code>
is the command to indicate the start of a chapter.
</para>
<quotation>
<para><strong>Please note:</strong> All the @-commands, with the exception of the
<code>@TeX{}</code> command, must be written entirely in lower case.
</para></quotation>

<para>The Texinfo @-commands are a strictly limited set of constructs.  The
strict limits make it possible for Texinfo files to be understood both
by &tex; and by the code that converts them into Info files.  You can
display Info files on any terminal that displays alphabetic and
numeric characters.  Similarly, you can print the output generated by
&tex; on a wide variety of printers.
</para>
<para>Depending on what they do or what arguments<footnote><para>The word
<dfn>argument</dfn> comes from the way it is used in mathematics and does not
refer to a dispute between two people; it refers to the information
presented to the command.  According to the <cite>Oxford English
Dictionary</cite>, the word derives from the Latin for <dfn>to make clear,
prove</dfn>; thus it came to mean `the evidence offered as proof', which is
to say, `the information offered', which led to its mathematical
meaning.  In its other thread of derivation, the word came to mean `to
assert in a manner against which others may make counter assertions',
which led to the meaning of `argument' as a dispute.
</para></footnote> they take, you
need to write @-commands on lines of their own or as part of
sentences:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Write a command such as <code>@noindent</code> at the beginning of a line as
the only text on the line.  (<code>@noindent</code> prevents the beginning of
the next line from being indented as the beginning of a
paragraph.)
</para>
</item>
<item>
<para>Write a command such as <code>@chapter</code> at the beginning of a line
followed by the command's arguments, in this case the chapter title, on
the rest of the line.  (<code>@chapter</code> creates chapter titles.)
</para>
</item>
<item>
<para>Write a command such as <code>@dots{}</code> wherever you wish but usually
within a sentence. (<code>@dots{}</code> creates dots &dots;)
</para>
</item>
<item>
<para>Write a command such as <code>@code{<var>sample-code</var>}</code> wherever you
wish (but usually within a sentence) with its argument,
<var>sample-code</var> in this example, between the braces.  (<code>@code</code>
marks text as being code.)
</para>
</item>
<item>
<para>Write a command such as <code>@example</code> on a line of its own; write the
body-text on following lines; and write the matching <code>@end</code>
command, <code>@end example</code> in this case, at the on a line of its own
after the body-text. (<code>@example</code> &dots; <code>@end example</code>
indents and typesets body-text as an example.)  It's usually ok to
indent environment commands like this, but in complicated and
hard-to-define circumstances the extra spaces cause extra space to
appear in the output, so beware.
</para></item>
</itemize>

<para><indexterm index="cp">Braces, when to use</indexterm>As a general rule, a command requires braces if it mingles among other
text; but it does not need braces if it starts a line of its own.  The
non-alphabetic commands, such as <code>@:</code>, are exceptions to the rule;
they do not need braces.
</para>
<para>As you gain experience with Texinfo, you will rapidly learn how to
write the different commands: the different ways to write commands
make it easier to write and read Texinfo files than if all commands
followed exactly the same syntax.  (For details about @-command
syntax, see <xref><xrefnodename>Command Syntax</xrefnodename><xrefprinteddesc>@-Command Syntax</xrefprinteddesc></xref>.)
</para>

</section>
</node>
<node>
<nodename>Conventions</nodename>
<nodenext>Comments</nodenext>
<nodeprev>Formatting Commands</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>General Syntactic Conventions</title>
<para><indexterm index="cp">General syntactic conventions</indexterm><indexterm index="cp">Syntactic conventions</indexterm><indexterm index="cp">Conventions, syntactic</indexterm></para>
<para>This section describes the general conventions used in all Texinfo documents.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>All printable <sc>ascii</sc> characters except <samp>@</samp>, <samp>{</samp> and
<samp>}</samp> can appear in a Texinfo file and stand for themselves.
<samp>@</samp> is the escape character which introduces commands, while
<samp>{</samp> and <samp>}</samp> are used to surround arguments to certain
commands.  To put one of these special characters into the document, put
an <samp>@</samp> character in front of it, like this: <samp>@@</samp>,
<samp>@{</samp>, and <samp>@}</samp>.
</para>
</item>
<item>
<para>It is customary in &tex; to use doubled single-quote characters to
begin and end quotations: <tt>`<!-- /@w -->`&dots;'<!-- /@w -->'</tt><!-- /@w -->.  This
convention should be followed in Texinfo files.  &tex; converts
two single quotes to left- and right-hand doubled
quotation marks, 
<!-- this comes out as "like this" in Info, of course, which is just confusing. -->
and Info converts doubled single-quote characters to <sc>ascii</sc>
double-quotes: <tt>`<!-- /@w -->`&dots;'<!-- /@w -->'</tt><!-- /@w --> becomes <tt>&quot;&dots;&quot;</tt><!-- /@w -->.
</para>
</item>
<item>
<para>Use three hyphens in a row, <samp>---</samp>, for a dash&mdash;like this.  In
&tex;, a single or double hyphen produces a printed dash that is
shorter than the usual typeset dash. Info reduces three hyphens to two
for display on the screen.
</para>
</item>
<item>
<para>To prevent a paragraph from being indented in the printed manual, put
the command <code>@noindent</code> on a line by itself before the
paragraph.
</para>
</item>
<item>
<para>If you mark off a region of the Texinfo file with the <code>@iftex</code>
and <code>@end iftex</code><!-- /@w --> commands, that region will appear only in
the printed copy; in that region, you can use certain commands
borrowed from plain &tex; that you cannot use in Info.  Conversely,
text surrounded by <code>@ifnottex</code> and <code>@end ifnottex</code> will
appear in all output formats <emph>except</emph> &tex;.
</para>
<para>Each of the other output formats (<code>html</code>, <code>info</code>,
<code>plaintext</code>) have an analogous pair of commands.  See <xref><xrefnodename>Conditionals</xrefnodename></xref>.
</para></item>
</itemize>

<para><indexterm index="cp">Tabs; don't use!</indexterm></para><quotation>
<para><strong>Caution:</strong> Do not use tab characters in a Texinfo file (except in
verbatim modes)!  &tex; uses variable-width fonts, which means that it
is impractical at best to define a tab to work in all circumstances.
Consequently, &tex; treats tabs like single spaces, and that is not
what they look like.  Furthermore, <code>makeinfo</code> does nothing special
with tabs, and thus a tab character in your input file may appear
differently in the output, for example, in indented text.
</para>
<para>To avoid this problem, Texinfo mode causes GNU Emacs to insert multiple
spaces when you press the <key>TAB</key> key.
</para>
<para>Also, you can run <code>untabify</code> in Emacs to convert tabs in a region
to multiple spaces.
</para></quotation>


</section>
</node>
<node>
<nodename>Comments</nodename>
<nodenext>Minimum</nodenext>
<nodeprev>Conventions</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>Comments</title>

<para><indexterm index="cp">Comments</indexterm><indexterm index="fn">comment</indexterm><indexterm index="fn">c <r>(comment)</r></indexterm></para>
<para>You can write comments in a Texinfo file that will not appear in
either the Info file or the printed manual by using the
<code>@comment</code> command (which may be abbreviated to <code>@c</code>).
Such comments are for the person who revises the Texinfo file.  All the
text on a line that follows either <code>@comment</code> or <code>@c</code> is a
comment; the rest of the line does not appear in either the Info file
or the printed manual.
</para>
<para>Often, you can write the <code>@comment</code> or <code>@c</code> in the middle of
a line, and only the text that follows after the <code>@comment</code> or
<code>@c</code> command does not appear; but some commands, such as
<code>@settitle</code> and <code>@setfilename</code>, work on a whole line.  You
cannot use <code>@comment</code> or <code>@c</code> in a line beginning with such
a command.
</para>
<para><indexterm index="cp">Ignored text</indexterm><indexterm index="cp">Unprocessed text</indexterm><indexterm index="fn">ignore</indexterm>You can write long stretches of text that will not appear in either
the Info file or the printed manual by using the <code>@ignore</code> and
<code>@end ignore</code> commands.  Write each of these commands on a line
of its own, starting each command at the beginning of the line.  Text
between these two commands does not appear in the processed output.
You can use <code>@ignore</code> and <code>@end ignore</code> for writing
comments.
</para>
<para>Text enclosed by <code>@ignore</code> or by failing <code>@ifset</code> or
<code>@ifclear</code> conditions is ignored in the sense that it will not
contribute to the formatted output.  However, &tex; and makeinfo must
still parse the ignored text, in order to understand when to <emph>stop</emph>
ignoring text from the source file; that means that you may still get
error messages if you have invalid Texinfo commands within ignored text.
</para>

</section>
</node>
<node>
<nodename>Minimum</nodename>
<nodenext>Six Parts</nodenext>
<nodeprev>Comments</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>What a Texinfo File Must Have</title>
<para><indexterm index="cp">Minimal Texinfo file (requirements)</indexterm><indexterm index="cp">Must have in Texinfo file</indexterm><indexterm index="cp">Required in Texinfo file</indexterm><indexterm index="cp">Texinfo file minimum</indexterm></para>
<para>By convention, the namea of a Texinfo file ends with (in order of
preference) one of the extensions <file>.texinfo</file>, <file>.texi</file>,
<file>.txi</file>, or <file>.tex</file>.  The longer extensions are preferred since
they describe more clearly to a human reader the nature of the file.
The shorter extensions are for operating systems that cannot handle long
file names.
</para>
<para>In order to be made into a printed manual and an Info file, a Texinfo
file <strong>must</strong> begin with lines like this:
</para>
<example xml:space="preserve"><group>
\input texinfo
@setfilename <var>info-file-name</var>
@settitle <var>name-of-manual</var>
</group>
</example>
<para>The contents of the file follow this beginning, and then you
<strong>must</strong> end a Texinfo file with a line like this:
</para>
<example xml:space="preserve">@bye
</example>
<para><indexterm index="fn">\input <r>(raw &tex; startup)</r></indexterm>Here's an explanation:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>The <samp>\input texinfo</samp> line tells &tex; to use the
<file>texinfo.tex</file> file, which tells &tex; how to translate the Texinfo
@-commands into &tex; typesetting commands.  (Note the use of the
backslash, <samp>\</samp>; this is correct for &tex;.)
</para>
</item>
<item>
<para>The <code>@setfilename</code> line provides a name for the Info file and
tells &tex; to open auxiliary files.  <strong>All text before
<code>@setfilename</code> is ignored!</strong>
</para>
</item>
<item>
<para>The <code>@settitle</code> line specifies a title for the page headers (or
footers) of the printed manual, and the default document description for
the <samp>&lt;head&gt;</samp> in HTML format.  Strictly speaking, <code>@settitle</code>
is optional&mdash;if you don't mind your document being titled `Untitled'.
</para>
</item>
<item>
<para>The <code>@bye</code> line at the end of the file on a line of its own tells
the formatters that the file is ended and to stop formatting.
</para>
</item>
</itemize>

<para>Typically, you will not use quite such a spare format, but will include
mode setting and start-of-header and end-of-header lines at the
beginning of a Texinfo file, like this:
</para>
<example xml:space="preserve"><group>
\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename <var>info-file-name</var>
@settitle <var>name-of-manual</var>
@c %**end of header
</group>
</example>
<para>In the first line, <samp>-*-texinfo-*-</samp> causes Emacs to switch into
Texinfo mode when you edit the file.
</para>
<para>The <code>@c</code> lines which surround the <code>@setfilename</code> and
<code>@settitle</code> lines are optional, but you need them in order to
run &tex; or Info on just part of the file.  (See <xref><xrefnodename>Start of Header</xrefnodename></xref>.)
</para>
<para>Furthermore, you will usually provide a Texinfo file with a title page,
indices, and the like, all of which are explained in this manual.  But
the minimum, which can be useful for short documents, is just the three
lines at the beginning and the one line at the end.
</para>

</section>
</node>
<node>
<nodename>Six Parts</nodename>
<nodenext>Short Sample</nodenext>
<nodeprev>Minimum</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>Six Parts of a Texinfo File</title>

<para>Generally, a Texinfo file contains more than the minimal beginning and
end described in the previous section&mdash;it usually contains the six
parts listed below.  These are described fully in the following sections.
</para>
<table><tableitem><tableterm><r>1. Header</r></tableterm>
<item><para>The <dfn>Header</dfn> names the file, tells &tex; which definitions file to
use, and other such housekeeping tasks.
</para>
</item></tableitem><tableitem><tableterm><r>2. Summary and Copyright</r></tableterm>
<item><para>The <dfn>Summary and Copyright</dfn> segment describes the document and
contains the copyright notice and copying permissions.  This is done
with the <code>@copying</code> command.
</para>
</item></tableitem><tableitem><tableterm><r>3. Title and Copyright</r></tableterm>
<item><para>The <dfn>Title and Copyright</dfn> segment contains the title and copyright
pages for the printed manual.  The segment must be enclosed between
<code>@titlepage</code> and <code>@end titlepage</code> commands.  The title and
copyright page appear only in the printed manual.
</para>
</item></tableitem><tableitem><tableterm><r>4. `Top' Node and Master Menu</r></tableterm>
<item><para>The `Top' node starts off the online output; it does not appear in the
printed manual.  We recommend including the copying permissions here as
well as the segments above.  And it contains at least a top-level menu
listing the chapters, and possibly a <dfn>Master Menu</dfn> listing all the
nodes in the entire document.
</para>
</item></tableitem><tableitem><tableterm><r>5. Body</r></tableterm>
<item><para>The <dfn>Body</dfn> of the document is typically structured like a
traditional book or encyclopedia, but it may be free form.
</para>
</item></tableitem><tableitem><tableterm><r>6. End</r></tableterm>
<item><para>The <dfn>End</dfn> segment contains commands for printing indices and
generating the table of contents, and the <code>@bye</code> command on a line
of its own.
</para></item></tableitem></table>


</section>
</node>
<node>
<nodename>Short Sample</nodename>
<nodenext>History</nodenext>
<nodeprev>Six Parts</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>A Short Sample Texinfo File</title>
<para><indexterm index="cp">Sample Texinfo file, with comments</indexterm></para>
<para>Here is a very short but complete Texinfo file, in the six conventional
parts enumerated in the previous section, so you can see how Texinfo
source appears in practice.  The first three parts of the file, from
<samp>\input texinfo</samp> through to <samp>@end titlepage</samp>, look more
intimidating than they are: most of the material is standard
boilerplate; when writing a manual, you simply change the names as
appropriate.
</para>
<para>See <xref><xrefnodename>Beginning a File</xrefnodename></xref>, for full documentation on the commands listed
here.  See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>, for the full texts to be used in GNU manuals.
</para>
<para>In the following, the sample text is <emph>indented</emph>; comments on it are
not.  The complete file, without interspersed comments, is shown in
<xref><xrefnodename>Short Sample Texinfo File</xrefnodename></xref>.
</para>
<subheading>Part 1: Header</subheading>

<para>The header does not appear in either the Info file or the
printed output.  It sets various parameters, including the
name of the Info file and the title used in the header.
</para>
<example xml:space="preserve"><group>
\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sample.info
@settitle Sample Manual 1.0
@c %**end of header
</group>
</example>
<subheading>Part 2: Summary Description and Copyright</subheading>

<para>A real manual includes more text here, according to the license under
which it is distributed.  See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>.
</para>
<example xml:space="preserve"><group>
@copying
This is a short example of a complete Texinfo file, version 1.0.

Copyright @copyright{} 2002 Free Software Foundation, Inc.
@end copying
</group>
</example>
<subheading>Part 3: Titlepage, Contents, Copyright</subheading>

<para>The titlepage segment does not appear in the online output, only in the
printed manual.  We use the <code>@insertcopying</code> command to
include the permission text from the previous section, instead of
writing it out again; it is output on the back of the title page.  The
<code>@contents</code> command generates a table of contents.
</para>
<example xml:space="preserve"><group>
@titlepage
@title Sample Title
</group>

<group>
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
</group>

@c Output the table of contents at the beginning.
@contents
</example>
<subheading>Part 4: `Top' Node and Master Menu</subheading>

<para>The `Top' node contains the master menu for the Info file.  Since a
printed manual uses a table of contents rather than a menu, the master
menu appears only in online output.  We also include the copying text
again for the benefit of online readers.  And since the copying text
begins with a brief description of the manual, no other text is needed.
</para>
<example xml:space="preserve"><group>
@ifnottex
@node Top
@end ifnottex
</group>
</example>
<example xml:space="preserve"><group>
@insertcopying

@menu
* First Chapter::    The first chapter is the
                       only chapter in this sample.
* Index::            Complete index.
@end menu
</group>
</example>

<subheading>Part 5: The Body of the Document</subheading>

<para>The body segment contains all the text of the document, but not the
indices or table of contents.  This example illustrates a node and a
chapter containing an enumerated list.
</para>
<example xml:space="preserve"><group>
@node First Chapter
@chapter First Chapter

@cindex chapter, first
</group>

<group>
This is the first chapter.
@cindex index entry, another
</group>

<group>
Here is a numbered list.

@enumerate
@item
This is the first item.

@item
This is the second item.
@end enumerate
</group>
</example>

<subheading>Part 6: The End of the Document</subheading>

<para>The end segment contains commands for generating an index in a node and
unnumbered chapter of its own, and the <code>@bye</code> command that marks
the end of the document.
</para>
<example xml:space="preserve"><group>
@node Index
@unnumbered Index
</group>

<group>
@printindex cp

@bye
</group>
</example>

<subheading>Some Results</subheading>

<para>Here is what the contents of the first chapter of the sample look like:
</para>
<sp lines="1"></sp>
<need></need><quotation>
<para>This is the first chapter.
</para>
<para>Here is a numbered list.
</para>
<enumerate first="1"><item>
<para>This is the first item.
</para>
</item>
<item>
<para>This is the second item.
</para></item>
</enumerate>
</quotation>


</section>
</node>
<node>
<nodename>History</nodename>
<nodeprev>Short Sample</nodeprev>
<nodeup>Overview</nodeup>
<section>
<title>History</title>

<para><indexterm index="cp">Stallman, Richard M.</indexterm><indexterm index="cp">Chassell, Robert J.</indexterm><indexterm index="cp">Fox, Brian</indexterm><indexterm index="cp">Berry, Karl</indexterm>Richard M&period; Stallman invented the Texinfo format, wrote the initial
processors, and created Edition 1.0 of this manual.  Robert J&period;<!-- /@w -->
Chassell greatly revised and extended the manual, starting with Edition
1.1.  Brian Fox was responsible for the standalone Texinfo distribution
until version 3.8, and wrote the standalone <command>makeinfo</command> and
<command>info</command> programs.  Karl Berry has continued maintenance since
Texinfo 3.8 (manual edition 2.22).
</para>
<para><indexterm index="cp">Pinard, Fran&ccedil;ois</indexterm><indexterm index="cp">Zuhn, David D.</indexterm><indexterm index="cp">Weisshaus, Melissa</indexterm><indexterm index="cp">Zaretskii, Eli</indexterm><indexterm index="cp">Schwab, Andreas</indexterm><indexterm index="cp">Weinberg, Zack</indexterm>Our thanks go out to all who helped improve this work, particularly the
indefatigable Eli Zaretskii and Andreas Schwab, who have provided
patches beyond counting.  Fran&ccedil;ois Pinard and David D&period; Zuhn<!-- /@w -->,
tirelessly recorded and reported mistakes and obscurities.  Zack
Weinberg did the impossible by implementing the macro syntax in
<file>texinfo.tex</file>.  Special thanks go to Melissa Weisshaus for her
frequent reviews of nearly similar editions.  Dozens of others have
contributed patches and suggestions, they are gratefully acknowledged in
the <file>ChangeLog</file> file.  Our mistakes are our own.
</para>
<para><indexterm index="cp">Scribe</indexterm><indexterm index="cp">Reid, Brian</indexterm><indexterm index="cp">History of Texinfo</indexterm><indexterm index="cp">Texinfo history</indexterm>A bit of history: in the 1970's at CMU, Brian Reid developed a program
and format named Scribe to mark up documents for printing.  It used the
<code>@</code> character to introduce commands, as Texinfo does.  Much more
consequentially, it strived to describe document contents rather than
formatting, an idea wholeheartedly adopted by Texinfo.
</para>
<para><indexterm index="cp">Bolio</indexterm><indexterm index="cp">Bo&tex;</indexterm>Meanwhile, people at MIT developed another, not too dissimilar format
called Bolio.  This then was converted to using &tex; as its typesetting
language: Bo&tex;.  The earliest Bo&tex; version seems to have been
0.02 on October 31, 1984.
</para>
<para>Bo&tex; could only be used as a markup language for documents to be
printed, not for online documents.  Richard Stallman (RMS) worked on
both Bolio and Bo&tex;.  He also developed a nifty on-line help format
called Info, and then combined Bo&tex; and Info to create Texinfo, a
mark up language for text that is intended to be read both online and
as printed hard copy.
</para>

</section>
</node>
<node>
<nodename>Texinfo Mode</nodename>
<nodenext>Beginning a File</nodenext>
<nodeprev>Overview</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Using Texinfo Mode</title>
<para><indexterm index="cp">Texinfo mode</indexterm><indexterm index="cp">Mode, using Texinfo</indexterm><indexterm index="cp">GNU Emacs</indexterm><indexterm index="cp">Emacs</indexterm></para>
<para>You may edit a Texinfo file with any text editor you choose.  A Texinfo
file is no different from any other <sc>ascii</sc> file.  However, GNU Emacs
comes with a special mode, called Texinfo mode, that provides Emacs
commands and tools to help ease your work.
</para>
<para>This chapter describes features of GNU Emacs' Texinfo mode but not any
features of the Texinfo formatting language.  So if you are reading this
manual straight through from the beginning, you may want to skim through
this chapter briefly and come back to it after reading succeeding
chapters which describe the Texinfo formatting language in detail.
</para>
<menu>
<menuentry>
<menunode> Texinfo Mode Overview</menunode>
<menutitle> Texinfo Mode Overview</menutitle>
<menucomment>       How Texinfo mode can help you.
</menucomment>
</menuentry><menuentry>
<menunode> Emacs Editing</menunode>
<menutitle> Emacs Editing</menutitle>
<menucomment>               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting</menunode>
<menutitle> Inserting</menutitle>
<menucomment>                   How to insert frequently used @-commands.
</menucomment>
</menuentry><menuentry>
<menunode> Showing the Structure</menunode>
<menutitle> Showing the Structure</menutitle>
<menucomment>       How to show the structure of a file.
</menucomment>
</menuentry><menuentry>
<menunode> Updating Nodes and Menus</menunode>
<menutitle> Updating Nodes and Menus</menutitle>
<menucomment>    How to update or create new nodes and menus.
</menucomment>
</menuentry><menuentry>
<menunode> Info Formatting</menunode>
<menutitle> Info Formatting</menutitle>
<menucomment>             How to format for Info.
</menucomment>
</menuentry><menuentry>
<menunode> Printing</menunode>
<menutitle> Printing</menutitle>
<menucomment>                    How to format and print part or all of a file.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo Mode Summary</menunode>
<menutitle> Texinfo Mode Summary</menutitle>
<menucomment>        Summary of all the Texinfo mode commands.
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>Texinfo Mode Overview</nodename>
<nodenext>Emacs Editing</nodenext>
<nodeprev>Texinfo Mode</nodeprev>
<nodeup>Texinfo Mode</nodeup>

<para>Texinfo mode provides special features for working with Texinfo
files.
You can:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Insert frequently used @-commands. 
</para>
</item>
<item>
<para>Automatically create <code>@node</code> lines.
</para>
</item>
<item>
<para>Show the structure of a Texinfo source file.
</para>
</item>
<item>
<para>Automatically create or update the `Next',
`Previous', and `Up' pointers of a node.
</para>
</item>
<item>
<para>Automatically create or update menus.
</para>
</item>
<item>
<para>Automatically create a master menu.
</para>
</item>
<item>
<para>Format a part or all of a file for Info.
</para>
</item>
<item>
<para>Typeset and print part or all of a file.
</para></item>
</itemize>

<para>Perhaps the two most helpful features are those for inserting frequently
used @-commands and for creating node pointers and menus.
</para>
</node>
<node>
<nodename>Emacs Editing</nodename>
<nodenext>Inserting</nodenext>
<nodeprev>Texinfo Mode Overview</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<section>
<title>The Usual GNU Emacs Editing Commands</title>

<para>In most cases, the usual Text mode commands work the same in Texinfo
mode as they do in Text mode.  Texinfo mode adds new editing commands
and tools to GNU Emacs' general purpose editing features.  The major
difference concerns filling.  In Texinfo mode, the paragraph
separation variable and syntax table are redefined so that Texinfo
commands that should be on lines of their own are not inadvertently
included in paragraphs.  Thus, the <kbd>M-q</kbd> (<code>fill-paragraph</code>)
command will refill a paragraph but not mix an indexing command on a
line adjacent to it into the paragraph.
</para>
<para>In addition, Texinfo mode sets the <code>page-delimiter</code> variable to
the value of <code>texinfo-chapter-level-regexp</code>; by default, this is
a regular expression matching the commands for chapters and their
equivalents, such as appendices.  With this value for the page
delimiter, you can jump from chapter title to chapter title with the
<kbd>C-x ]</kbd> (<code>forward-page</code>) and <kbd>C-x [</kbd>
(<code>backward-page</code>) commands and narrow to a chapter with the
<kbd>C-x p</kbd> (<code>narrow-to-page</code>) command.  (See <xref><xrefnodename>Pages</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for details about the page commands.)
</para>
<para>You may name a Texinfo file however you wish, but the convention is to
end a Texinfo file name with one of the extensions
<file>.texinfo</file>, <file>.texi</file>, <file>.txi</file>, or <file>.tex</file>.  A longer
extension is preferred, since it is explicit, but a shorter extension
may be necessary for operating systems that limit the length of file
names.  GNU Emacs automatically enters Texinfo mode when you visit a
file with a <file>.texinfo</file>, <file>.texi</file> or <file>.txi</file>
extension.  Also, Emacs switches to Texinfo mode
when you visit a
file that has <samp>-*-texinfo-*-</samp> in its first line.  If ever you are
in another mode and wish to switch to Texinfo mode, type <code>M-x
texinfo-mode</code>.
</para>
<para>Like all other Emacs features, you can customize or enhance Texinfo
mode as you wish.  In particular, the keybindings are very easy to
change.  The keybindings described here are the default or standard
ones.
</para>
</section>
</node>
<node>
<nodename>Inserting</nodename>
<nodenext>Showing the Structure</nodenext>
<nodeprev>Emacs Editing</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Inserting Frequently Used Commands</title>
<para><indexterm index="cp">Inserting frequently used commands</indexterm><indexterm index="cp">Frequently used commands, inserting</indexterm><indexterm index="cp">Commands, inserting them</indexterm></para>
<para>Texinfo mode provides commands to insert various frequently used
@-commands into the buffer.  You can use these commands to save
keystrokes.
</para>
<para>The insert commands are invoked by typing <kbd>C-c</kbd> twice and then the
first letter of the @-command:
</para>
<table><tableitem><tableterm><kbd>C-c C-c c</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@code</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@code</indexterm>Insert <code>@code{}</code> and put the
cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c d</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@dfn</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@dfn</indexterm>Insert <code>@dfn{}</code> and put the
cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c e</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@end</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@end</indexterm>Insert <code>@end</code> and attempt to insert the correct following word,
such as <samp>example</samp> or <samp>table</samp>.  (This command does not handle
nested lists correctly, but inserts the word appropriate to the
immediately preceding list.)
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c i</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@item</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@item</indexterm>Insert <code>@item</code> and put the
cursor at the beginning of the next line.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c k</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@kbd</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@kbd</indexterm>Insert <code>@kbd{}</code> and put the
cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c n</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@node</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@node</indexterm>Insert <code>@node</code> and a comment line
listing the sequence for the `Next',
`Previous', and `Up' nodes.
Leave point after the <code>@node</code>.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c o</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@noindent</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@noindent</indexterm>Insert <code>@noindent</code> and put the
cursor at the beginning of the next line.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c s</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@samp</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@samp</indexterm>Insert <code>@samp{}</code> and put the
cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c t</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@table</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@table</indexterm>Insert <code>@table</code> followed by a <key>SPC</key>
and leave the cursor after the <key>SPC</key>.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c v</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@var</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@var</indexterm>Insert <code>@var{}</code> and put the
cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c x</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-@example</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-@example</indexterm>Insert <code>@example</code> and put the
cursor at the beginning of the next line.
</para>
<!-- M-@{  was the binding for texinfo-insert-braces; -->
<!-- in Emacs 19, backward-paragraph will take this binding. -->
</item></tableitem><tableitem><tableterm><kbd>C-c C-c {</kbd></tableterm>
<tableterm><kbd>M-x texinfo-insert-braces</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-braces</indexterm>Insert <code>{}</code> and put the cursor between the braces.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c }</kbd></tableterm>
<tableterm><kbd>C-c C-c ]</kbd></tableterm>
<tableterm><kbd>M-x up-list</kbd></tableterm>
<item><para><indexterm index="fn">up-list</indexterm>Move from between a pair of braces forward past the closing brace.
Typing <kbd>C-c C-c ]</kbd> is easier than typing <kbd>C-c C-c }</kbd>, which
is, however, more mnemonic; hence the two keybindings.  (Also, you can
move out from between braces by typing <kbd>C-f</kbd>.)
</para></item></tableitem></table>

<para>To put a command such as <code>@code{&dots;}</code><!-- /@w --> around an
<emph>existing</emph> word, position the cursor in front of the word and type
<kbd>C-u 1 C-c C-c c</kbd>.  This makes it easy to edit existing plain text.
The value of the prefix argument tells Emacs how many words following
point to include between braces&mdash;<samp>1</samp> for one word, <samp>2</samp> for
two words, and so on.  Use a negative argument to enclose the previous
word or words.  If you do not specify a prefix argument, Emacs inserts
the @-command string and positions the cursor between the braces.  This
feature works only for those @-commands that operate on a word or words
within one line, such as <code>@kbd</code> and <code>@var</code>.
</para>
<para>This set of insert commands was created after analyzing the frequency
with which different @-commands are used in the <cite>GNU Emacs
Manual</cite> and the <cite>GDB Manual</cite>.  If you wish to add your own insert
commands, you can bind a keyboard macro to a key, use abbreviations,
or extend the code in <file>texinfo.el</file>.
</para>
<para><indexterm index="fn">texinfo-start-menu-description</indexterm><indexterm index="cp">Menu description, start</indexterm><indexterm index="cp">Description for menu, start</indexterm><kbd>C-c C-c C-d</kbd> (<code>texinfo-start-menu-description</code>) is an insert
command that works differently from the other insert commands.  It
inserts a node's section or chapter title in the space for the
description in a menu entry line.  (A menu entry has three parts, the
entry name, the node name, and the description.  Only the node name is
required, but a description helps explain what the node is about.
See <xref><xrefnodename>Menu Parts</xrefnodename><xrefprinteddesc>The Parts of a Menu</xrefprinteddesc></xref>.)
</para>
<para>To use <code>texinfo-start-menu-description</code>, position point in a menu
entry line and type <kbd>C-c C-c C-d</kbd>.  The command looks for and copies
the title that goes with the node name, and inserts the title as a
description; it positions point at beginning of the inserted text so you
can edit it.  The function does not insert the title if the menu entry
line already contains a description.
</para>
<para>This command is only an aid to writing descriptions; it does not do the
whole job.  You must edit the inserted text since a title tends to use
the same words as a node name but a useful description uses different
words.
</para>
</section>
</node>
<node>
<nodename>Showing the Structure</nodename>
<nodenext>Updating Nodes and Menus</nodenext>
<nodeprev>Inserting</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Showing the Section Structure of a File</title>
<para><indexterm index="cp">Showing the section structure of a file</indexterm><indexterm index="cp">Section structure of a file, showing it</indexterm><indexterm index="cp">Structure of a file, showing it</indexterm><indexterm index="cp">Outline of file structure, showing it</indexterm><indexterm index="cp">Contents-like outline of file structure</indexterm><indexterm index="cp">File section structure, showing it</indexterm><indexterm index="cp">Texinfo file section structure, showing it</indexterm></para>
<para>You can show the section structure of a Texinfo file by using the
<kbd>C-c C-s</kbd> command (<code>texinfo-show-structure</code>).  This command
shows the section structure of a Texinfo file by listing the lines
that begin with the @-commands for <code>@chapter</code>,
<code>@section</code>, and the like.  It constructs what amounts
to a table of contents.  These lines are displayed in another buffer
called the <samp>*Occur*</samp> buffer.  In that buffer, you can position
the cursor over one of the lines and use the <kbd>C-c C-c</kbd> command
(<code>occur-mode-goto-occurrence</code>), to jump to the corresponding spot
in the Texinfo file.
</para>
<table><tableitem><tableterm><kbd>C-c C-s</kbd></tableterm>
<tableterm><kbd>M-x texinfo-show-structure</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-show-structure</indexterm>Show the <code>@chapter</code>, <code>@section</code>, and such lines of a
Texinfo file.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-c</kbd></tableterm>
<tableterm><kbd>M-x occur-mode-goto-occurrence</kbd></tableterm>
<item><para><indexterm index="fn">occur-mode-goto-occurrence</indexterm>Go to the line in the Texinfo file corresponding to the line under the
cursor in the <file>*Occur*</file> buffer.
</para></item></tableitem></table>

<para>If you call <code>texinfo-show-structure</code> with a prefix argument by
typing <kbd>C-u C-c C-s</kbd><!-- /@w -->, it will list not only those lines with the
@-commands for <code>@chapter</code>, <code>@section</code>, and the like, but
also the <code>@node</code> lines.  You can use <code>texinfo-show-structure</code>
with a prefix argument to check whether the `Next', `Previous', and `Up'
pointers of an <code>@node</code> line are correct.
</para>
<para>Often, when you are working on a manual, you will be interested only
in the structure of the current chapter.  In this case, you can mark
off the region of the buffer that you are interested in by using the
<kbd>C-x n n</kbd> (<code>narrow-to-region</code>) command and
<code>texinfo-show-structure</code> will work on only that region.  To see
the whole buffer again, use <kbd>C-x n w</kbd><!-- /@w --> (<code>widen</code>).
(See <xref><xrefnodename>Narrowing</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for more
information about the narrowing commands.)
</para>
<para><indexterm index="cp">page-delimiter</indexterm><indexterm index="cp">Page delimiter in Texinfo mode</indexterm>In addition to providing the <code>texinfo-show-structure</code> command,
Texinfo mode sets the value of the page delimiter variable to match
the chapter-level @-commands.  This enables you to use the <kbd>C-x
]</kbd> (<code>forward-page</code>) and <kbd>C-x [</kbd> (<code>backward-page</code>)
commands to move forward and backward by chapter, and to use the
<kbd>C-x p</kbd> (<code>narrow-to-page</code>) command to narrow to a chapter.
See <xref><xrefnodename>Pages</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for more information
about the page commands.
</para>
</section>
</node>
<node>
<nodename>Updating Nodes and Menus</nodename>
<nodenext>Info Formatting</nodenext>
<nodeprev>Showing the Structure</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Updating Nodes and Menus</title>
<para><indexterm index="cp">Updating nodes and menus</indexterm><indexterm index="cp">Create nodes, menus automatically</indexterm><indexterm index="cp">Insert nodes, menus automatically</indexterm><indexterm index="cp">Automatically insert nodes, menus</indexterm></para>
<para>Texinfo mode provides commands for automatically creating or updating
menus and node pointers.  The commands are called &ldquo;update&rdquo; commands
because their most frequent use is for updating a Texinfo file after you
have worked on it; but you can use them to insert the `Next',
`Previous', and `Up' pointers into an <code>@node</code> line that has none
and to create menus in a file that has none.
</para>
<para>If you do not use the updating commands, you need to write menus and
node pointers by hand, which is a tedious task.
</para>
<menu>
<menuentry>
<menunode> Updating Commands</menunode>
<menutitle> Updating Commands</menutitle>
<menucomment>           Five major updating commands.
</menucomment>
</menuentry><menuentry>
<menunode> Updating Requirements</menunode>
<menutitle> Updating Requirements</menutitle>
<menucomment>       How to structure a Texinfo file for
                                  using the updating command.
</menucomment>
</menuentry><menuentry>
<menunode> Other Updating Commands</menunode>
<menutitle> Other Updating Commands</menutitle>
<menucomment>     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Updating Commands</nodename>
<nodenext>Updating Requirements</nodenext>
<nodeprev>Updating Nodes and Menus</nodeprev>
<nodeup>Updating Nodes and Menus</nodeup>

<para>You can use the updating commands to:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>insert or update the `Next', `Previous', and `Up' pointers of a
node,
</para>
</item>
<item>
<para>insert or update the menu for a section, and
</para>
</item>
<item>
<para>create a master menu for a Texinfo source file.
</para></item>
</itemize>

<para>You can also use the commands to update all the nodes and menus in a
region or in a whole Texinfo file.
</para>
<para>The updating commands work only with conventional Texinfo files, which
are structured hierarchically like books.  In such files, a structuring
command line must follow closely after each <code>@node</code> line, except
for the `Top' <code>@node</code> line.  (A <dfn>structuring command line</dfn> is
a line beginning with <code>@chapter</code>, <code>@section</code>, or other
similar command.)
</para>
<para>You can write the structuring command line on the line that follows
immediately after an <code>@node</code> line or else on the line that
follows after a single <code>@comment</code> line or a single
<code>@ifinfo</code> line.  You cannot interpose more than one line between
the <code>@node</code> line and the structuring command line; and you may
interpose only an <code>@comment</code> line or an <code>@ifinfo</code> line.
</para>
<para>Commands which work on a whole buffer require that the `Top' node be
followed by a node with an <code>@chapter</code> or equivalent-level command.
The menu updating commands will not create a main or master menu for a
Texinfo file that has only <code>@chapter</code>-level nodes!  The menu
updating commands only create menus <emph>within</emph> nodes for lower level
nodes.  To create a menu of chapters, you must provide a `Top'
node.
</para>
<para>The menu updating commands remove menu entries that refer to other Info
files since they do not refer to nodes within the current buffer.  This
is a deficiency.  Rather than use menu entries, you can use cross
references to refer to other Info files.  None of the updating commands
affect cross references.
</para>
<para>Texinfo mode has five updating commands that are used most often: two
are for updating the node pointers or menu of a single node (or a
region); two are for updating every node pointer and menu in a file;
and one, the <code>texinfo-master-menu</code> command, is for creating a
master menu for a complete file, and optionally, for updating every
node and menu in the whole Texinfo file.
</para>
<para>The <code>texinfo-master-menu</code> command is the primary command:
</para>
<table><tableitem><tableterm><kbd>C-c C-u m</kbd></tableterm>
<tableterm><kbd>M-x texinfo-master-menu</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-master-menu</indexterm>Create or update a master menu that includes all the other menus
(incorporating the descriptions from pre-existing menus, if
any).
</para>
<para>With an argument (prefix argument, <kbd>C-u,</kbd> if interactive), first create or
update all the nodes and all the regular menus in the buffer before
constructing the master menu.  (See <xref><xrefnodename>The Top Node</xrefnodename><xrefprinteddesc>The Top Node and Master Menu</xrefprinteddesc></xref>, for more about a master menu.)
</para>
<para>For <code>texinfo-master-menu</code> to work, the Texinfo file must have a
`Top' node and at least one subsequent node.
</para>
<para>After extensively editing a Texinfo file, you can type the following:
</para>
<example xml:space="preserve">C-u M-x texinfo-master-menu
<exdent></exdent>or
C-u C-c C-u m
</example>
<para>This updates all the nodes and menus completely and all at once.
</para></item></tableitem></table>

<para>The other major updating commands do smaller jobs and are designed for
the person who updates nodes and menus as he or she writes a Texinfo
file.
</para>
<need></need><para>The commands are:
</para>
<table><tableitem><tableterm><kbd>C-c C-u C-n</kbd></tableterm>
<tableterm><kbd>M-x texinfo-update-node</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-update-node</indexterm>Insert the `Next', `Previous', and `Up' pointers for the node that point is
within (i.e., for the <code>@node</code> line preceding point).  If the
<code>@node</code> line has pre-existing `Next', `Previous', or `Up'
pointers in it, the old pointers are removed and new ones inserted.
With an argument (prefix argument, <kbd>C-u</kbd>, if interactive), this command
updates all <code>@node</code> lines in the region (which is the text
between point and mark).
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-u C-m</kbd></tableterm>
<tableterm><kbd>M-x texinfo-make-menu</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-make-menu</indexterm>Create or update the menu in the node that point is within.
With an argument (<kbd>C-u</kbd> as prefix argument, if
interactive), the command makes or updates menus for the
nodes which are either within or a part of the
region.
</para>
<para>Whenever <code>texinfo-make-menu</code> updates an existing menu, the
descriptions from that menu are incorporated into the new menu.  This
is done by copying descriptions from the existing menu to the entries
in the new menu that have the same node names.  If the node names are
different, the descriptions are not copied to the new menu.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-u C-e</kbd></tableterm>
<tableterm><kbd>M-x texinfo-every-node-update</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-every-node-update</indexterm>Insert or update the `Next', `Previous', and `Up' pointers for every
node in the buffer.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-u C-a</kbd></tableterm>
<tableterm><kbd>M-x texinfo-all-menus-update</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-all-menus-update</indexterm>Create or update all the menus in the buffer.  With an argument
(<kbd>C-u</kbd> as prefix argument, if interactive), first insert
or update all the node
pointers before working on the menus.
</para>
<para>If a master menu exists, the <code>texinfo-all-menus-update</code> command
updates it; but the command does not create a new master menu if none
already exists.  (Use the <code>texinfo-master-menu</code> command for
that.)
</para>
<para>When working on a document that does not merit a master menu, you can
type the following:
</para>
<example xml:space="preserve">C-u C-c C-u C-a
<exdent></exdent>or
C-u M-x texinfo-all-menus-update
</example>
<para>This updates all the nodes and menus.
</para></item></tableitem></table>

<para>The <code>texinfo-column-for-description</code> variable specifies the
column to which menu descriptions are indented.  By default, the value
is 32 although it is often useful to reduce it to as low as 24.  You
can set the variable with the <kbd>M-x edit-options</kbd> command
(see <xref><xrefnodename>Edit Options</xrefnodename><xrefprinteddesc>Editing Variable Values</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>) or with the <kbd>M-x set-variable</kbd> command (see <xref><xrefnodename>Examining</xrefnodename><xrefprinteddesc>Examining and Setting Variables</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).
</para>
<para>Also, the <code>texinfo-indent-menu-description</code> command may be used to
indent existing menu descriptions to a specified column.  Finally, if
you wish, you can use the <code>texinfo-insert-node-lines</code> command to
insert missing <code>@node</code> lines into a file.  (See <xref><xrefnodename>Other Updating Commands</xrefnodename></xref>, for more information.)
</para>
</node>
<node>
<nodename>Updating Requirements</nodename>
<nodenext>Other Updating Commands</nodenext>
<nodeup>Updating Nodes and Menus</nodeup>
<subsection>
<title>Updating Requirements</title>
<para><indexterm index="cp">Updating requirements</indexterm><indexterm index="cp">Requirements for updating commands</indexterm></para>
<para>To use the updating commands, you must organize the Texinfo file
hierarchically with chapters, sections, subsections, and the like.
When you construct the hierarchy of the manual, do not `jump down'
more than one level at a time: you can follow the `Top' node with a
chapter, but not with a section; you can follow a chapter with a
section, but not with a subsection.  However, you may `jump up' any
number of levels at one time&mdash;for example, from a subsection to a
chapter.
</para>
<para>Each <code>@node</code> line, with the exception of the line for the `Top'
node, must be followed by a line with a structuring command such as
<code>@chapter</code>, <code>@section</code>, or
<code>@unnumberedsubsec</code>.
</para>
<para>Each <code>@node</code> line/structuring-command line combination
must look either like this:
</para>
<example xml:space="preserve"><group>
@node     Comments,  Minimum, Conventions, Overview
@comment  node-name, next,    previous,    up
@section Comments
</group>
</example>
<para>or like this (without the <code>@comment</code> line):
</para>
<example xml:space="preserve"><group>
@node Comments, Minimum, Conventions, Overview
@section Comments
</group>
</example>
<para>or like this (without the explicit node pointers):
</para>
<example xml:space="preserve"><group>
@node Comments
@section Comments
</group>
</example>
<para>In this example, `Comments' is the name of both the node and the
section.  The next node is called `Minimum' and the previous node is
called `Conventions'.  The `Comments' section is within the `Overview'
node, which is specified by the `Up' pointer.  (Instead of an
<code>@comment</code> line, you may also write an <code>@ifinfo</code> line.)
</para>
<para>If a file has a `Top' node, it must be called <samp>top</samp> or <samp>Top</samp>
and be the first node in the file.
</para>
<para>The menu updating commands create a menu of sections within a chapter,
a menu of subsections within a section, and so on.  This means that
you must have a `Top' node if you want a menu of chapters.
</para>
<para>Incidentally, the <code>makeinfo</code> command will create an Info file for a
hierarchically organized Texinfo file that lacks `Next', `Previous' and
`Up' pointers.  Thus, if you can be sure that your Texinfo file will be
formatted with <code>makeinfo</code>, you have no need for the update node
commands.  (See <xref><xrefnodename>Creating an Info File</xrefnodename></xref>, for more information about
<code>makeinfo</code>.)  However, both <code>makeinfo</code> and the
<code>texinfo-format-&dots;</code> commands require that you insert menus in
the file.
</para>

</subsection>
</node>
<node>
<nodename>Other Updating Commands</nodename>
<nodeprev>Updating Requirements</nodeprev>
<nodeup>Updating Nodes and Menus</nodeup>
<subsection>
<title>Other Updating Commands</title>

<para>In addition to the five major updating commands, Texinfo mode
possesses several less frequently used updating commands:
</para>
<table><tableitem><tableterm><kbd>M-x texinfo-insert-node-lines</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-insert-node-lines</indexterm>Insert <code>@node</code> lines before the <code>@chapter</code>,
<code>@section</code>, and other sectioning commands wherever they are
missing throughout a region in a Texinfo file.
</para>
<para>With an argument (<kbd>C-u</kbd> as prefix argument, if interactive), the
<code>texinfo-insert-node-lines</code> command not only inserts
<code>@node</code> lines but also inserts the chapter or section titles as
the names of the corresponding nodes.  In addition, it inserts the
titles as node names in pre-existing <code>@node</code> lines that lack
names.  Since node names should be more concise than section or
chapter titles, you must manually edit node names so inserted.
</para>
<para>For example, the following marks a whole buffer as a region and inserts
<code>@node</code> lines and titles throughout:
</para>
<example xml:space="preserve">C-x h C-u M-x texinfo-insert-node-lines
</example>
<para>This command inserts titles as node names in <code>@node</code> lines; the
<code>texinfo-start-menu-description</code> command (see <xref><xrefnodename>Inserting</xrefnodename><xrefinfoname>Inserting Frequently Used Commands</xrefinfoname></xref>) inserts titles as descriptions in
menu entries, a different action.  However, in both cases, you need to
edit the inserted text.
</para>
</item></tableitem><tableitem><tableterm><kbd>M-x texinfo-multiple-files-update</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-multiple-files-update <r>(in brief)</r></indexterm>Update nodes and menus in a document built from several separate files.
With <kbd>C-u</kbd> as a prefix argument, create and insert a master menu in
the outer file.  With a numeric prefix argument, such as <kbd>C-u 2</kbd>, first
update all the menus and all the `Next', `Previous', and `Up' pointers
of all the included files before creating and inserting a master menu in
the outer file.  The <code>texinfo-multiple-files-update</code> command is
described in the appendix on <code>@include</code> files.
</para>
</item></tableitem><tableitem><tableterm><kbd>M-x texinfo-indent-menu-description</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-indent-menu-description</indexterm>Indent every description in the menu following point to the specified
column.  You can use this command to give yourself more space for
descriptions.  With an argument (<kbd>C-u</kbd> as prefix argument, if
interactive), the <code>texinfo-indent-menu-description</code> command indents
every description in every menu in the region.  However, this command
does not indent the second and subsequent lines of a multi-line
description.
</para>
</item></tableitem><tableitem><tableterm><kbd>M-x texinfo-sequential-node-update</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-sequential-node-update</indexterm>Insert the names of the nodes immediately following and preceding the
current node as the `Next' or `Previous' pointers regardless of those
nodes' hierarchical level.  This means that the `Next' node of a
subsection may well be the next chapter.  Sequentially ordered nodes are
useful for novels and other documents that you read through
sequentially.  (However, in Info, the <kbd>g *</kbd> command lets
you look through the file sequentially, so sequentially ordered nodes
are not strictly necessary.)  With an argument (prefix argument, if
interactive), the <code>texinfo-sequential-node-update</code> command
sequentially updates all the nodes in the region.
</para></item></tableitem></table>

</subsection>
</node>
<node>
<nodename>Info Formatting</nodename>
<nodenext>Printing</nodenext>
<nodeprev>Updating Nodes and Menus</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Formatting for Info</title>
<para><indexterm index="cp">Formatting for Info</indexterm><indexterm index="cp">Running an Info formatter</indexterm><indexterm index="cp">Info formatting</indexterm></para>
<para>Texinfo mode provides several commands for formatting part or all of a
Texinfo file for Info.  Often, when you are writing a document, you
want to format only part of a file&mdash;that is, a region.
</para>
<para>You can use either the <code>texinfo-format-region</code> or the
<code>makeinfo-region</code> command to format a region:
</para>
<table><para><indexterm index="fn">texinfo-format-region</indexterm></para><tableitem><tableterm><kbd>C-c C-e C-r</kbd></tableterm>
<tableterm><kbd>M-x texinfo-format-region</kbd></tableterm>
<tableterm><kbd>C-c C-m C-r</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-region</kbd></tableterm>
<item><para>Format the current region for Info.
</para></item></tableitem></table>

<para>You can use either the <code>texinfo-format-buffer</code> or the
<code>makeinfo-buffer</code> command to format a whole buffer:
</para>
<table><para><indexterm index="fn">texinfo-format-buffer</indexterm></para><tableitem><tableterm><kbd>C-c C-e C-b</kbd></tableterm>
<tableterm><kbd>M-x texinfo-format-buffer</kbd></tableterm>
<tableterm><kbd>C-c C-m C-b</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-buffer</kbd></tableterm>
<item><para>Format the current buffer for Info.
</para></item></tableitem></table>

<need></need><para>For example, after writing a Texinfo file, you can type the following:
</para>
<example xml:space="preserve">C-u C-c C-u m
<exdent></exdent>or
C-u M-x texinfo-master-menu
</example>
<para>This updates all the nodes and menus.  Then type the following to create
an Info file:
</para>
<example xml:space="preserve">C-c C-m C-b
<exdent></exdent>or
M-x makeinfo-buffer
</example>
<para>For &tex; or the Info formatting commands to work, the file <emph>must</emph>
include a line that has <code>@setfilename</code> in its header.
</para>
<para>See <xref><xrefnodename>Creating an Info File</xrefnodename></xref>, for details about Info formatting.
</para>
</section>
</node>
<node>
<nodename>Printing</nodename>
<nodenext>Texinfo Mode Summary</nodenext>
<nodeprev>Info Formatting</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!-- node-name,  next,  previous,  up -->
<section>
<title>Formatting and Printing</title>
<para><indexterm index="cp">Formatting for printing</indexterm><indexterm index="cp">Printing a region or buffer</indexterm><indexterm index="cp">Region formatting and printing</indexterm><indexterm index="cp">Buffer formatting and printing</indexterm><indexterm index="cp">Part of file formatting and printing</indexterm></para>
<para>Typesetting and printing a Texinfo file is a multi-step process in which
you first create a file for printing (called a DVI file), and then
print the file.  Optionally, you may also create indices.  To do this,
you must run the <code>texindex</code> command after first running the
<code>tex</code> typesetting command; and then you must run the <code>tex</code>
command again.  Or else run the <code>texi2dvi</code> command which
automatically creates indices as needed (see <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>).
</para>
<para>Often, when you are writing a document, you want to typeset and print
only part of a file to see what it will look like.  You can use the
<code>texinfo-tex-region</code> and related commands for this purpose.  Use
the <code>texinfo-tex-buffer</code> command to format all of a
buffer.
</para>
<table><tableitem><tableterm><kbd>C-c C-t C-b</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-buffer</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-tex-buffer</indexterm>Run <code>texi2dvi</code> on the buffer.  In addition to running &tex; on the
buffer, this command automatically creates or updates indices as
needed.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-r</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-region</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-tex-region</indexterm>Run &tex; on the region.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-i</kbd></tableterm>
<tableterm><kbd>M-x texinfo-texindex</kbd></tableterm>
<item><para>Run <code>texindex</code> to sort the indices of a Texinfo file formatted with
<code>texinfo-tex-region</code>.  The <code>texinfo-tex-region</code> command does
not run <code>texindex</code> automatically; it only runs the <code>tex</code>
typesetting command.  You must run the <code>texinfo-tex-region</code> command
a second time after sorting the raw index files with the <code>texindex</code>
command.  (Usually, you do not format an index when you format a region,
only when you format a buffer.  Now that the <code>texi2dvi</code> command
exists, there is little or no need for this command.)
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-p</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-print</kbd></tableterm>
<item><para><indexterm index="fn">texinfo-tex-print</indexterm>Print the file (or the part of the file) previously formatted with
<code>texinfo-tex-buffer</code> or <code>texinfo-tex-region</code>.
</para></item></tableitem></table>

<para>For <code>texinfo-tex-region</code> or <code>texinfo-tex-buffer</code> to work, the
file <emph>must</emph> start with a <samp>\input texinfo</samp> line and must
include an <code>@settitle</code> line.  The file must end with <code>@bye</code>
on a line by itself.  (When you use <code>texinfo-tex-region</code>, you must
surround the <code>@settitle</code> line with start-of-header and
end-of-header lines.)
</para>
<para>See <xref><xrefnodename>Hardcopy</xrefnodename></xref>, for a description of the other &tex; related
commands, such as <code>tex-show-print-queue</code>.
</para>
</section>
</node>
<node>
<nodename>Texinfo Mode Summary</nodename>
<nodeprev>Printing</nodeprev>
<nodeup>Texinfo Mode</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Texinfo Mode Summary</title>

<para>In Texinfo mode, each set of commands has default keybindings that
begin with the same keys.  All the commands that are custom-created
for Texinfo mode begin with <kbd>C-c</kbd>.  The keys are somewhat
mnemonic.
</para>
<subheading>Insert Commands</subheading>

<para>The insert commands are invoked by typing <kbd>C-c</kbd> twice and then the
first letter of the @-command to be inserted.  (It might make more
sense mnemonically to use <kbd>C-c C-i</kbd>, for `custom insert', but
<kbd>C-c C-c</kbd> is quick to type.)
</para>
<example xml:space="preserve">C-c C-c c       <r>Insert</r> <samp>@code</samp>.
C-c C-c d       <r>Insert</r> <samp>@dfn</samp>.
C-c C-c e       <r>Insert</r> <samp>@end</samp>.
C-c C-c i       <r>Insert</r> <samp>@item</samp>.
C-c C-c n       <r>Insert</r> <samp>@node</samp>.
C-c C-c s       <r>Insert</r> <samp>@samp</samp>.
C-c C-c v       <r>Insert</r> <samp>@var</samp>.
C-c C-c {       <r>Insert braces.</r>
C-c C-c ]
C-c C-c }       <r>Move out of enclosing braces.</r>

<group>
C-c C-c C-d     <r>Insert a node's section title</r>
                <r>in the space for the description</r>
                <r>in a menu entry line.</r>
</group>
</example>
<subheading>Show Structure</subheading>

<para>The <code>texinfo-show-structure</code> command is often used within a
narrowed region.
</para>
<example xml:space="preserve">C-c C-s         <r>List all the headings.</r>
</example>
<subheading>The Master Update Command</subheading>

<para>The <code>texinfo-master-menu</code> command creates a master menu; and can
be used to update every node and menu in a file as well.
</para>
<!-- Probably should use @tables in this section. -->
<example xml:space="preserve"><group>
C-c C-u m
M-x texinfo-master-menu
                <r>Create or update a master menu.</r>
</group>

<group>
C-u C-c C-u m   <r>With <kbd>C-u</kbd> as a prefix argument, first</r>
                <r>create or update all nodes and regular</r>
                <r>menus, and then create a master menu.</r>
</group>
</example>
<subheading>Update Pointers</subheading>

<para>The update pointer commands are invoked by typing <kbd>C-c C-u</kbd> and
then either <kbd>C-n</kbd> for <code>texinfo-update-node</code> or <kbd>C-e</kbd> for
<code>texinfo-every-node-update</code>.
</para>
<example xml:space="preserve">C-c C-u C-n     <r>Update a node.</r>
C-c C-u C-e     <r>Update every node in the buffer.</r>
</example>
<subheading>Update Menus</subheading>

<para>Invoke the  update menu commands by typing <kbd>C-c C-u</kbd>
and then either <kbd>C-m</kbd> for <code>texinfo-make-menu</code> or
<kbd>C-a</kbd> for <code>texinfo-all-menus-update</code>.  To update
both nodes and menus at the same time, precede <kbd>C-c C-u
C-a</kbd> with <kbd>C-u</kbd>.
</para>
<example xml:space="preserve">C-c C-u C-m     <r>Make or update a menu.</r>

<group>
C-c C-u C-a     <r>Make or update all</r>
                <r>menus in a buffer.</r>
</group>

<group>
C-u C-c C-u C-a <r>With <kbd>C-u</kbd> as a prefix argument,</r>
                <r>first create or update all nodes and</r>
                <r>then create or update all menus.</r>
</group>
</example>
<subheading>Format for Info</subheading>

<para>The Info formatting commands that are written in Emacs Lisp are
invoked by typing <kbd>C-c C-e</kbd> and then either <kbd>C-r</kbd> for a region
or <kbd>C-b</kbd> for the whole buffer.
</para>
<para>The Info formatting commands that are written in C and based on the
<code>makeinfo</code> program are invoked by typing <kbd>C-c C-m</kbd> and then
either <kbd>C-r</kbd> for a region or <kbd>C-b</kbd> for the whole buffer.
</para>
<need></need><para>Use the <code>texinfo-format&dots;</code> commands:
</para>
<example xml:space="preserve"><group>
C-c C-e C-r     <r>Format the region.</r>
C-c C-e C-b     <r>Format the buffer.</r>
</group>
</example>
<need></need><para>Use <code>makeinfo</code>:
</para>
<example xml:space="preserve">C-c C-m C-r     <r>Format the region.</r>
C-c C-m C-b     <r>Format the buffer.</r>
C-c C-m C-l     <r>Recenter the <code>makeinfo</code> output buffer.</r>
C-c C-m C-k     <r>Kill the <code>makeinfo</code> formatting job.</r>
</example>
<subheading>Typeset and Print</subheading>

<para>The &tex; typesetting and printing commands are invoked by typing
<kbd>C-c C-t</kbd> and then another control command: <kbd>C-r</kbd> for
<code>texinfo-tex-region</code>, <kbd>C-b</kbd> for <code>texinfo-tex-buffer</code>,
and so on.
</para>
<example xml:space="preserve">C-c C-t C-r     <r>Run &tex; on the region.</r>
C-c C-t C-b     <r>Run</r> <code>texi2dvi</code> <r>on the buffer.</r>
C-c C-t C-i     <r>Run</r> <code>texindex</code>.
C-c C-t C-p     <r>Print the DVI file.</r>
C-c C-t C-q     <r>Show the print queue.</r>
C-c C-t C-d     <r>Delete a job from the print queue.</r>
C-c C-t C-k     <r>Kill the current &tex; formatting job.</r>
C-c C-t C-x     <r>Quit a currently stopped &tex; formatting job.</r>
C-c C-t C-l     <r>Recenter the output buffer.</r>
</example>
<subheading>Other Updating Commands</subheading>

<para>The remaining updating commands do not have standard keybindings because
they are rarely used.
</para>
<example xml:space="preserve"><group>
M-x texinfo-insert-node-lines
                <r>Insert missing <code>@node</code> lines in region.</r>
                <r>With <kbd>C-u</kbd> as a prefix argument,</r>
                <r>use section titles as node names.</r>
</group>

<group>
M-x texinfo-multiple-files-update
                <r>Update a multi-file document.</r>
                <r>With <kbd>C-u 2</kbd> as a prefix argument,</r>
                <r>create or update all nodes and menus</r>
                <r>in all included files first.</r>
</group>

<group>
M-x texinfo-indent-menu-description
                <r>Indent descriptions.</r>
</group>

<group>
M-x texinfo-sequential-node-update
                <r>Insert node pointers in strict sequence.</r>
</group>
</example>

</section>
</node>
<node>
<nodename>Beginning a File</nodename>
<nodenext>Ending a File</nodenext>
<nodeprev>Texinfo Mode</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Beginning a Texinfo File</title>
<para><indexterm index="cp">Beginning a Texinfo file</indexterm><indexterm index="cp">Texinfo file beginning</indexterm><indexterm index="cp">File beginning</indexterm></para>
<para>Certain pieces of information must be provided at the beginning of a
Texinfo file, such as the name for the output file(s), the title of the
document, and the Top node.
</para>
<para>This chapter expands on the minimal complete Texinfo source file
previously given (see <xref><xrefnodename>Six Parts</xrefnodename></xref>).
</para>
<menu>
<menuentry>
<menunode> Sample Beginning</menunode>
<menutitle> Sample Beginning</menutitle>
<menucomment>            A sample beginning for a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo File Header</menunode>
<menutitle> Texinfo File Header</menutitle>
<menucomment>         The first lines.
</menucomment>
</menuentry><menuentry>
<menunode> Document Permissions</menunode>
<menutitle> Document Permissions</menutitle>
<menucomment>        Ensuring your manual is free.
</menucomment>
</menuentry><menuentry>
<menunode> Titlepage &amp; Copyright Page</menunode>
<menutitle> Titlepage &amp; Copyright Page</menutitle>
<menucomment>  Creating the title and copyright pages.
</menucomment>
</menuentry><menuentry>
<menunode> The Top Node</menunode>
<menutitle> The Top Node</menutitle>
<menucomment>                Creating the `Top' node and master menu.
</menucomment>
</menuentry><menuentry>
<menunode> Global Document Commands</menunode>
<menutitle> Global Document Commands</menutitle>
<menucomment>    Affecting formatting throughout.
</menucomment>
</menuentry><menuentry>
<menunode> Software Copying Permissions</menunode>
<menutitle> Software Copying Permissions</menutitle>
<menucomment>  Ensure that you and others continue to
                                    have the right to use and share software.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Sample Beginning</nodename>
<nodenext>Texinfo File Header</nodenext>
<nodeup>Beginning a File</nodeup>
<section>
<title>Sample Texinfo File Beginning</title>

<para><indexterm index="cp">Example beginning of Texinfo file</indexterm></para>
<para>The following sample shows what is needed.  The elements given here are
explained in more detail in the following sections.  Other commands are
often included at the beginning of Texinfo files, but the ones here are
the most critical.
</para>
<para>See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>, for the full texts to be used in GNU manuals.
</para>
<example xml:space="preserve">\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename <var>infoname</var>.info
@settitle <var>name-of-manual</var> <var>version</var>
@c %**end of header

@copying
This manual is for <var>program</var>, version <var>version</var>.

Copyright @copyright{} <var>years</var> <var>copyright-owner</var>.

<group>
@quotation
Permission is granted to &dots;
@end quotation
@end copying
</group>

<group>
@titlepage
@title <var>name-of-manual-when-printed</var>
@subtitle <var>subtitle-if-any</var>
@subtitle <var>second-subtitle</var>
@author <var>author</var>
</group>

<group>
@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
</group>

Published by &dots;
@end titlepage

@c So the toc is printed in the right place.
@contents

@ifnottex
@node Top
@top <var>title</var>

@insertcopying
@end ifnottex

<group>
@menu
* First Chapter::    Getting started &dots;
* Second Chapter::          &dots;
  &dots;
* Copying::          Your rights and freedoms.
@end menu
</group>

<group>
@node First Chapter
@chapter First Chapter

@cindex first chapter
@cindex chapter, first
&dots;
</group>
</example>

</section>
</node>
<node>
<nodename>Texinfo File Header</nodename>
<nodenext>Document Permissions</nodenext>
<nodeprev>Sample Beginning</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>Texinfo File Header</title>
<para><indexterm index="cp">Header for Texinfo files</indexterm><indexterm index="cp">Texinfo file header</indexterm></para>
<para>Texinfo files start with at least three lines that provide Info and
&tex; with necessary information.  These are the <code>\input texinfo</code>
line, the <code>@settitle</code> line, and the <code>@setfilename</code> line.
</para>
<para>Also, if you want to format just part of the Texinfo file, you must
write the <code>@settitle</code> and <code>@setfilename</code> lines between
start-of-header and end-of-header lines.  The start- and end-of-header
lines are optional, but they do no harm, so you might as well always
include them.
</para>
<para>Any command that affects document formatting as a whole makes sense to
include in the header.  <code>@synindex</code> (see <xref><xrefnodename>synindex</xrefnodename></xref>), for
instance, is another command often included in the header.  See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>, for complete sample texts.
</para>
<para>Thus, the beginning of a Texinfo file generally looks like this:
</para>
<example xml:space="preserve"><group>
\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sample.info
@settitle Sample Manual 1.0
@c %**end of header
</group>
</example>
<menu>
<menuentry>
<menunode> First Line</menunode>
<menutitle> First Line</menutitle>
<menucomment>                  The first line of a Texinfo file.
</menucomment>
</menuentry><menuentry>
<menunode> Start of Header</menunode>
<menutitle> Start of Header</menutitle>
<menucomment>             Formatting a region requires this.
</menucomment>
</menuentry><menuentry>
<menunode> setfilename</menunode>
<menutitle> setfilename</menutitle>
<menucomment>                 Tell Info the name of the Info file.
</menucomment>
</menuentry><menuentry>
<menunode> settitle</menunode>
<menutitle> settitle</menutitle>
<menucomment>                    Create a title for the printed work.
</menucomment>
</menuentry><menuentry>
<menunode> End of Header</menunode>
<menutitle> End of Header</menutitle>
<menucomment>               Formatting a region requires this.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>First Line</nodename>
<nodenext>Start of Header</nodenext>
<nodeup>Texinfo File Header</nodeup>
<subsection>
<title>The First Line of a Texinfo File</title>
<para><indexterm index="cp">First line of a Texinfo file</indexterm><indexterm index="cp">Beginning line of a Texinfo file</indexterm><indexterm index="cp">Header of a Texinfo file</indexterm></para>
<para>Every Texinfo file that is to be the top-level input to &tex; must begin
with a line that looks like this:
</para>
<example xml:space="preserve">\input texinfo   @c -*-texinfo-*-
</example>
<para>This line serves two functions:
</para>
<enumerate first="1"><item>
<para>When the file is processed by &tex;, the <samp>\input texinfo</samp> command
tells &tex; to load the macros needed for processing a Texinfo file.
These are in a file called <file>texinfo.tex</file>, which should have been
installed on your system along with either the &tex; or Texinfo
software.  &tex; uses the backslash, <samp>\</samp>, to mark the beginning of
a command, exactly as Texinfo uses <samp>@</samp>.  The <file>texinfo.tex</file>
file causes the switch from <samp>\</samp> to <samp>@</samp>; before the switch
occurs, &tex; requires <samp>\</samp>, which is why it appears at the
beginning of the file.
</para>
</item>
<item>
<para>When the file is edited in GNU Emacs, the <samp>-*-texinfo-*-</samp> mode
specification tells Emacs to use Texinfo mode.
</para></item>
</enumerate>


</subsection>
</node>
<node>
<nodename>Start of Header</nodename>
<nodenext>setfilename</nodenext>
<nodeprev>First Line</nodeprev>
<nodeup>Texinfo File Header</nodeup>
<subsection>
<title>Start of Header</title>
<para><indexterm index="cp">Start of header line</indexterm></para>
<para>A start-of-header line is a Texinfo comment that looks like this:
</para>
<example xml:space="preserve">@c %**start of header
</example>
<para>Write the start-of-header line on the second line of a Texinfo file.
Follow the start-of-header line with <code>@setfilename</code> and
<code>@settitle</code> lines and, optionally, with other commands that
globally affect the document formatting, such as <code>@synindex</code> or
<code>@footnotestyle</code>; and then by an end-of-header line (see <xref><xrefnodename>End of Header</xrefnodename></xref>).
</para>
<para>The start- and end-of-header lines allow you to format only part of a
Texinfo file for Info or printing.  See <xref><xrefnodename>texinfo-format commands</xrefnodename></xref>.
</para>
<para>The odd string of characters, <samp>%**</samp>, is to ensure that no other
comment is accidentally taken for a start-of-header line.  You can
change it if you wish by setting the <code>tex-start-of-header</code> and/or
<code>tex-end-of-header</code> Emacs variables.  See <xref><xrefnodename>Texinfo Mode Printing</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>setfilename</nodename>
<nodenext>settitle</nodenext>
<nodeprev>Start of Header</nodeprev>
<nodeup>Texinfo File Header</nodeup>
<subsection>
<title><code>@setfilename</code>: Set the output file name</title>
<para><indexterm index="fn">setfilename</indexterm><indexterm index="cp">Texinfo requires <code>@setfilename</code></indexterm></para>
<para>In order to serve as the primary input file for either <code>makeinfo</code>
or &tex;, a Texinfo file must contain a line that looks like this:
</para>
<example xml:space="preserve">@setfilename <var>info-file-name</var>
</example>
<para>Write the <code>@setfilename</code> command at the beginning of a line and
follow it on the same line by the Info file name.  Do not write anything
else on the line; anything on the line after the command is considered
part of the file name, including what would otherwise be a
comment.
</para>
<para><indexterm index="cp">Ignored before <code>@setfilename</code></indexterm><indexterm index="cp"><samp>\input</samp> source line ignored</indexterm>The Info formatting commands ignore everything written before the
<code>@setfilename</code> line, which is why the very first line of
the file (the <code>\input</code> line) does not show up in the output.
</para>
<para>The <code>@setfilename</code> line specifies the name of the output file to
be generated.  This name must be different from the name of the Texinfo
file.  There are two conventions for choosing the name: you can either
remove the extension (such as <samp>.texi</samp>) entirely from the input file
name, or, preferably, replace it with the <samp>.info</samp> extension.
</para>
<para><indexterm index="cp">Length of file names</indexterm><indexterm index="cp">File name collision</indexterm><indexterm index="cp">Info file name, choosing</indexterm>Although an explicit <samp>.info</samp> extension is preferable, some
operating systems cannot handle long file names.  You can run into a
problem even when the file name you specify is itself short enough.
This occurs because the Info formatters split a long Info file into
short indirect subfiles, and name them by appending <samp>-1</samp>,
<samp>-2</samp>, &dots;, <samp>-10</samp>, <samp>-11</samp>, and so on, to the original
file name.  (See <xref><xrefnodename>Tag and Split Files</xrefnodename></xref>.)  The subfile name
<file>texinfo.info-10</file>, for example, is too long for old systems with a
14-character limit on filenames; so the Info file name for this document
is <file>texinfo</file> rather than <file>texinfo.info</file>.  When <code>makeinfo</code>
is running on operating systems such as MS-DOS which impose severe
limits on file names, it may remove some characters from the original
file name to leave enough space for the subfile suffix, thus producing
files named <file>texin-10</file>, <file>gcc.i12</file>, etc.
</para>
<para>When producing HTML output, <code>makeinfo</code> will replace any extension
with <samp>html</samp>, or add <samp>.html</samp> if the given name has no
extension.
</para>
<para><indexterm index="cp">texinfo.cnf</indexterm>The <code>@setfilename</code> line produces no output when you typeset a
manual with &tex;, but it is nevertheless essential: it opens the
index, cross-reference, and other auxiliary files used by Texinfo, and
also reads <file>texinfo.cnf</file> if that file is present on your system
(see <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>).
</para>

</subsection>
</node>
<node>
<nodename>settitle</nodename>
<nodenext>End of Header</nodenext>
<nodeprev>setfilename</nodeprev>
<nodeup>Texinfo File Header</nodeup>
<subsection>
<title><code>@settitle</code>: Set the document title</title>
<para><indexterm index="fn">settitle</indexterm></para>
<para>In order to be made into a printed manual, a Texinfo file must contain
a line that looks like this:
</para>
<example xml:space="preserve">@settitle <var>title</var>
</example>
<para>Write the <code>@settitle</code> command at the beginning of a line and
follow it on the same line by the title.  This tells &tex; the title to
use in a header or footer.  Do not write anything else on the line;
anything on the line after the command is considered part of the title,
including what would otherwise be a comment.
</para>
<para>The <code>@settitle</code> command should precede everything that generates
actual output in &tex;.
</para>
<para><indexterm index="cp">&lt;title&gt; HTML tag</indexterm>In the HTML file produced by <command>makeinfo</command>, <var>title</var> also serves
as the document <samp>&lt;title&gt;</samp> and the default document description in
the <samp>&lt;head&gt;</samp> part; see <xref><xrefnodename>documentdescription</xrefnodename></xref>, for how to change
that.
</para>
<para>The title in the <code>@settitle</code> command does not affect the title as
it appears on the title page.  Thus, the two do not need not match
exactly.  A practice we recommend is to include the version or edition
number of the manual in the <code>@settitle</code> title; on the title page,
the version number generally appears as a <code>@subtitle</code> so it would
be omitted from the <code>@title</code>.  (See <xref><xrefnodename>titlepage</xrefnodename></xref>.)
</para>
<para>Conventionally, when &tex; formats a Texinfo file for double-sided
output, the title is printed in the left-hand (even-numbered) page
headings and the current chapter title is printed in the right-hand
(odd-numbered) page headings.  (&tex; learns the title of each chapter
from each <code>@chapter</code> command.)  By default, no page footer is
printed.
</para>
<para>Even if you are printing in a single-sided style, &tex; looks for an
<code>@settitle</code> command line, in case you include the manual title
in the heading.
</para>
<para>&tex; prints page headings only for that text that comes after the
<code>@end titlepage</code> command in the Texinfo file, or that comes
after an <code>@headings</code> command that turns on headings.
(See <xref><xrefnodename>headings on off</xrefnodename><xrefprinteddesc>The <code>@headings</code> Command</xrefprinteddesc></xref>, for more
information.)
</para>
<para>You may, if you wish, create your own, customized headings and footings.
See <xref><xrefnodename>Headings</xrefnodename></xref>, for a detailed discussion of this.
</para>

</subsection>
</node>
<node>
<nodename>End of Header</nodename>
<nodeprev>settitle</nodeprev>
<nodeup>Texinfo File Header</nodeup>
<subsection>
<title>End of Header</title>
<para><indexterm index="cp">End of header line</indexterm></para>
<para>Follow the header lines with an end-of-header<!-- /@w --> line, which is a
Texinfo comment that looks like this:
</para>
<example xml:space="preserve">@c %**end of header
</example>
<para>See <xref><xrefnodename>Start of Header</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>Document Permissions</nodename>
<nodenext>Titlepage &amp; Copyright Page</nodenext>
<nodeprev>Texinfo File Header</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>Document Permissions</title>
<para><indexterm index="cp">Document Permissions</indexterm><indexterm index="cp">Copying Permissions</indexterm></para>
<para>The copyright notice and copying permissions for a document need to
appear in several places in the various Texinfo output formats.
Therefore, Texinfo provides a command (<code>@copying</code>) to declare
this text once, and another command (<code>@insertcopying</code>) to
insert the text at appropriate points.
</para>
<menu>
<menuentry>
<menunode> copying</menunode>
<menutitle> copying</menutitle>
<menucomment>                 Declare the document's copying permissions.
</menucomment>
</menuentry><menuentry>
<menunode> insertcopying</menunode>
<menutitle> insertcopying</menutitle>
<menucomment>           Where to insert the permissions.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>copying</nodename>
<nodenext>insertcopying</nodenext>
<nodeup>Document Permissions</nodeup>
<subsection>
<title><code>@copying</code>: Declare copying permissions</title>
<para><indexterm index="fn">copying</indexterm></para>
<para>The <code>@copying</code> command should be given very early in the document;
right after the header material (see <xref><xrefnodename>Texinfo File Header</xrefnodename></xref>) is the
recommended location.  It conventionally consists of a sentence or two
about what the program is, the legal copyright line, and the copying
permissions.  Here is a skeletal example:
</para>
<example xml:space="preserve">@copying
This manual is for <var>program</var> (version <var>version</var>),
which &dots;

Copyright @copyright{} <var>years</var> <var>copyright-owner</var>.

@quotation
Permission is granted to &dots;
@end quotation
@end copying
</example>
<para>The <code>@quotation</code> has no legal significance; it's there to improve
readability in some contexts.
</para>
<para>See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>, for the full text to be used in GNU manuals.
See <xref><xrefnodename>GNU Free Documentation License</xrefnodename></xref>, for the license itself under
which GNU and other free manuals are distributed.
</para>
<para>The text of <code>@copying</code> is output as a comment at the beginning of
Info, HTML, and XML output files.  It is <emph>not</emph> output implicitly in
plain text or &tex;; it's up to you to use <code>@insertcopying</code> to
emit the copying information.  See the next section for details.
</para>
<para><indexterm index="fn">copyright</indexterm>In output formats that support it (print and HTML), the
<code>@copyright{}</code> command generates a <samp>c</samp> inside a circle.  In
Info and plain text, it generates <samp>(C)</samp>.  The copyright notice
itself has the following legally defined sequence:
</para>
<example xml:space="preserve">Copyright &copyright; <var>years</var> <var>copyright-owner</var>.
</example>
<para><indexterm index="cp">Copyright word, always in English</indexterm>The word `Copyright' must always be written in English, even if the
manual is otherwise in another language.  This is due to international
law.
</para>
<para><indexterm index="cp">Years, in copyright line</indexterm>The list of years should include all years in which a version was
completed (even if it was released in a subsequent year).  Ranges are
not allowed, each year must be written out individually, separated by
commas.
</para>
<para><indexterm index="cp">Copyright owner for FSF works</indexterm>The copyright owner (or owners) is whoever holds legal copyright on the
work.  In the case of works assigned to the FSF, the owner is `Free
Software Foundation, Inc.'.
</para>
<para>See <xref><xrefnodename>Copyright Notices</xrefnodename><xrefinfofile>maintain</xrefinfofile><xrefprintedname>GNU Maintenance Instructions</xrefprintedname></xref>, for
additional information.
</para>

</subsection>
</node>
<node>
<nodename>insertcopying</nodename>
<nodeprev>copying</nodeprev>
<nodeup>Document Permissions</nodeup>
<subsection>
<title><code>@insertcopying</code>: Include permissions text</title>
<para><indexterm index="fn">insertcopying</indexterm><indexterm index="cp">Copying text, including</indexterm><indexterm index="cp">Permissions text, including</indexterm><indexterm index="cp">Including permissions text</indexterm></para>
<para>The <code>@insertcopying</code> command is simply written on a line by
itself, like this:
</para>
<example xml:space="preserve">@insertcopying
</example>
<para>It inserts the text previously defined by <code>@copying</code>.  Legally, it
must be used on the copyright page in the printed manual
(see <xref><xrefnodename>Copyright</xrefnodename></xref>).
</para>
<para>Although it's not a legal requirement, we also strongly recommend using
<code>@insertcopying</code> in the Top node of your manual (see <xref><xrefnodename>The Top Node</xrefnodename></xref>).  Here's why:
</para>
<para>The <code>@copying</code> command itself causes the permissions text to
appear in an Info file <emph>before</emph> the first node.  The text is also
copied into the beginning of each split Info output file, as is legally
necessary.  This location implies a human reading the manual using Info
does <emph>not</emph> see this text (except when using the advanced Info
command <kbd>g *</kbd>).  Therefore, an explicit <code>@insertcopying</code>
in the Top node makes it apparent to readers that the manual is free.
</para>
<para>Similarly, the <code>@copying</code> text is automatically included at the
beginning of each HTML output file, as an HTML comment.  Again, this
text is not visible (unless the reader views the HTML source).  And
therefore again, the <code>@insertcopying</code> in the Top node is valuable
because it makes the copying permissions visible and thus promotes
freedom.
</para>
<para>The permissions text defined by <code>@copying</code> also appears
automatically at the beginning of the XML output file.
</para>

</subsection>
</node>
<node>
<nodename>Titlepage &amp; Copyright Page</nodename>
<nodenext>The Top Node</nodenext>
<nodeprev>Document Permissions</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>Title and Copyright Pages</title>

<para>In hard copy output, the manual's name and author are usually printed on
a title page.  Copyright information is usually printed on the back of
the title page.
</para>
<para>The title and copyright pages appear in the printed manual, but not in
the Info file.  Because of this, it is possible to use several slightly
obscure &tex; typesetting commands that cannot be used in an Info file.
In addition, this part of the beginning of a Texinfo file contains the
text of the copying permissions that appears in the printed manual.
</para>
<para><indexterm index="cp">Title page, for plain text</indexterm><indexterm index="cp">Copyright page, for plain text</indexterm>You may wish to include titlepage-like information for plain text
output.  Simply place any such leading material between
<code>@ifplaintext</code> and <code>@end ifplaintext</code>; <command>makeinfo</command>
includes this when writing plain text (<samp>--no-headers</samp>), along with
an <code>@insertcopying</code>.
</para>
<menu>
<menuentry>
<menunode> titlepage</menunode>
<menutitle> titlepage</menutitle>
<menucomment>                   Create a title for the printed document.
</menucomment>
</menuentry><menuentry>
<menunode> titlefont center sp</menunode>
<menutitle> titlefont center sp</menutitle>
<menucomment>         The <code>@titlefont</code>, <code>@center</code>,
                                  and <code>@sp</code> commands.
</menucomment>
</menuentry><menuentry>
<menunode> title subtitle author</menunode>
<menutitle> title subtitle author</menutitle>
<menucomment>       The <code>@title</code>, <code>@subtitle</code>,
                                  and <code>@author</code> commands.
</menucomment>
</menuentry><menuentry>
<menunode> Copyright</menunode>
<menutitle> Copyright</menutitle>
<menucomment>                   How to write the copyright notice and
                                  include copying permissions.
</menucomment>
</menuentry><menuentry>
<menunode> end titlepage</menunode>
<menutitle> end titlepage</menutitle>
<menucomment>               Turn on page headings after the title and
                                  copyright pages.
</menucomment>
</menuentry><menuentry>
<menunode> headings on off</menunode>
<menutitle> headings on off</menutitle>
<menucomment>             An option for turning headings on and off
                                  and double or single sided printing.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>titlepage</nodename>
<nodenext>titlefont center sp</nodenext>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title><code>@titlepage</code></title>
<para><indexterm index="cp">Title page</indexterm><indexterm index="fn">titlepage</indexterm></para>
<para>Start the material for the title page and following copyright page
with <code>@titlepage</code> on a line by itself and end it with
<code>@end titlepage</code> on a line by itself.
</para>
<para>The <code>@end titlepage</code> command starts a new page and turns on page
numbering.  (See <xref><xrefnodename>Headings</xrefnodename><xrefprinteddesc>Page Headings</xrefprinteddesc></xref>, for details about how to
generate page headings.)  All the material that you want to appear on
unnumbered pages should be put between the <code>@titlepage</code> and
<code>@end titlepage</code> commands.  You can force the table of contents to
appear there with the <code>@setcontentsaftertitlepage</code> command
(see <xref><xrefnodename>Contents</xrefnodename></xref>).
</para>
<para><indexterm index="fn">page<r>, within <code>@titlepage</code></r></indexterm>By using the <code>@page</code> command you can force a page break within the
region delineated by the <code>@titlepage</code> and <code>@end titlepage</code>
commands and thereby create more than one unnumbered page.  This is how
the copyright page is produced.  (The <code>@titlepage</code> command might
perhaps have been better named the <code>@titleandadditionalpages</code>
command, but that would have been rather long!)
</para>
<para>When you write a manual about a computer program, you should write the
version of the program to which the manual applies on the title page.
If the manual changes more frequently than the program or is independent
of it, you should also include an edition number<footnote><para>We have found
that it is helpful to refer to versions of independent manuals as
`editions' and versions of programs as `versions'; otherwise, we find we
are liable to confuse each other in conversation by referring to both
the documentation and the software with the same words.
</para></footnote> for the manual.
This helps readers keep track of which manual is for which version of
the program.  (The `Top' node should also contain this information; see
<xref><xrefnodename>The Top Node</xrefnodename></xref>.)
</para>
<para>Texinfo provides two main methods for creating a title page.  One method
uses the <code>@titlefont</code>, <code>@sp</code>, and <code>@center</code> commands
to generate a title page in which the words on the page are
centered.
</para>
<para>The second method uses the <code>@title</code>, <code>@subtitle</code>, and
<code>@author</code> commands to create a title page with black rules under
the title and author lines and the subtitle text set flush to the
right hand side of the page.  With this method, you do not specify any
of the actual formatting of the title page.  You specify the text
you want, and Texinfo does the formatting.
</para>
<para>You may use either method, or you may combine them; see the examples in
the sections below.
</para>
<para><indexterm index="fn">shorttitlepage</indexterm><indexterm index="cp">Bastard title page</indexterm><indexterm index="cp">Title page, bastard</indexterm>For extremely simple applications, and for the bastard title page in
traditional book front matter, Texinfo also provides a command
<code>@shorttitlepage</code> which takes the rest of the line as the title.
The argument is typeset on a page by itself and followed by a blank
page.
</para>

</subsection>
</node>
<node>
<nodename>titlefont center sp</nodename>
<nodenext>title subtitle author</nodenext>
<nodeprev>titlepage</nodeprev>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title><code>@titlefont</code>, <code>@center</code>, and <code>@sp</code></title>
<para><indexterm index="fn">titlefont</indexterm><indexterm index="fn">center</indexterm><indexterm index="fn">sp <r>(titlepage line spacing)</r></indexterm></para>
<para>You can use the <code>@titlefont</code>, <code>@sp</code>, and <code>@center</code>
commands to create a title page for a printed document.  (This is the
first of the two methods for creating a title page in Texinfo.)
</para>
<para>Use the <code>@titlefont</code> command to select a large font suitable for
the title itself.  You can use <code>@titlefont</code> more than once if you
have an especially long title.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve">@titlefont{Texinfo}
</example>
<para>Use the <code>@center</code> command at the beginning of a line to center
the remaining text on that line.  Thus,
</para>
<example xml:space="preserve">@center @titlefont{Texinfo}
</example>
<para>centers the title, which in this example is &ldquo;Texinfo&rdquo; printed
in the title font.
</para>
<para>Use the <code>@sp</code> command to insert vertical space.  For example:
</para>
<example xml:space="preserve">@sp 2
</example>
<para>This inserts two blank lines on the printed page.  (See <xref><xrefnodename>sp</xrefnodename><xrefprinteddesc><code>@sp</code></xrefprinteddesc></xref>, for more information about the <code>@sp</code>
command.)
</para>
<para>A template for this method looks like this:
</para>
<example xml:space="preserve"><group>
@titlepage
@sp 10
@center @titlefont{<var>name-of-manual-when-printed</var>}
@sp 2
@center <var>subtitle-if-any</var>
@sp 2
@center <var>author</var>
&dots;
@end titlepage
</group>
</example>
<para>The spacing of the example fits an 8.5 by 11 inch manual.
</para>

</subsection>
</node>
<node>
<nodename>title subtitle author</nodename>
<nodenext>Copyright</nodenext>
<nodeprev>titlefont center sp</nodeprev>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title><code>@title</code>, <code>@subtitle</code>, and <code>@author</code></title>
<para><indexterm index="fn">title</indexterm><indexterm index="fn">subtitle</indexterm><indexterm index="fn">author</indexterm></para>
<para>You can use the <code>@title</code>, <code>@subtitle</code>, and <code>@author</code>
commands to create a title page in which the vertical and horizontal
spacing is done for you automatically.  This contrasts with the method
described in the previous section, in which the <code>@sp</code> command is
needed to adjust vertical spacing.
</para>
<para>Write the <code>@title</code>, <code>@subtitle</code>, or <code>@author</code>
commands at the beginning of a line followed by the title, subtitle,
or author.
</para>
<para>The <code>@title</code> command produces a line in which the title is set
flush to the left-hand side of the page in a larger than normal font.
The title is underlined with a black rule.  Only a single line is
allowed; the <code>@*</code> command may not be used to break the title into
two lines.  To handle very long titles, you may find it profitable to
use both <code>@title</code> and <code>@titlefont</code>; see the final example in
this section.
</para>
<para>The <code>@subtitle</code> command sets subtitles in a normal-sized font
flush to the right-hand side of the page.
</para>
<para>The <code>@author</code> command sets the names of the author or authors in
a middle-sized font flush to the left-hand side of the page on a line
near the bottom of the title page.  The names are underlined with a
black rule that is thinner than the rule that underlines the title.
(The black rule only occurs if the <code>@author</code> command line is
followed by an <code>@page</code> command line.)
</para>
<para>There are two ways to use the <code>@author</code> command: you can write
the name or names on the remaining part of the line that starts with
an <code>@author</code> command:
</para>
<example xml:space="preserve">@author by Jane Smith and John Doe
</example>
<para>or you can write the names one above each other by using two (or more)
<code>@author</code> commands:
</para>
<example xml:space="preserve"><group>
@author Jane Smith
@author John Doe
</group>
</example>
<para>(Only the bottom name is underlined with a black rule.)
</para>
<need></need><para>A template for this method looks like this:
</para>
<example xml:space="preserve"><group>
@titlepage
@title <var>name-of-manual-when-printed</var>
@subtitle <var>subtitle-if-any</var>
@subtitle <var>second-subtitle</var>
@author <var>author</var>
@page
&dots;
@end titlepage
</group>
</example>
<para>You may also combine the <code>@titlefont</code> method described in the
previous section and <code>@title</code> method described in this one.  This
may be useful if you have a very long title.  Here is a real-life example:
</para>
<example xml:space="preserve"><group>
@titlepage
@titlefont{GNU Software}
@sp 1
@title for MS-Windows and MS-DOS
@subtitle Edition @value{e} for Release @value{cde}
@author by Daniel Hagerty, Melissa Weisshaus
@author and Eli Zaretskii
</group>
</example>
<para>(The use of <code>@value</code> here is explained in <xref><xrefnodename>value Example</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>Copyright</nodename>
<nodenext>end titlepage</nodenext>
<nodeprev>title subtitle author</nodeprev>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title>Copyright Page</title>
<para><indexterm index="cp">Copyright page</indexterm><indexterm index="cp">Printed permissions</indexterm><indexterm index="cp">Permissions, printed</indexterm></para>
<para>By international treaty, the copyright notice for a book must be either
on the title page or on the back of the title page.  When the copyright
notice is on the back of the title page, that page is customarily not
numbered.  Therefore, in Texinfo, the information on the copyright page
should be within <code>@titlepage</code> and <code>@end titlepage</code>
commands.
</para>
<para><indexterm index="fn">vskip <r>&tex; vertical skip</r></indexterm><indexterm index="fn">filll <r>&tex; dimension</r></indexterm>Use the <code>@page</code> command to cause a page break.  To push the
copyright notice and the other text on the copyright page towards the
bottom of the page, use the following incantantion after <code>@page</code>:
</para>
<example xml:space="preserve">@vskip 0pt plus 1filll
</example>
<para>This is a &tex; command that is not supported by the Info formatting
commands.  The <code>@vskip</code> command inserts whitespace.  The <samp>0pt
plus 1filll</samp> means to put in zero points of mandatory whitespace, and as
much optional whitespace as needed to push the following text to the
bottom of the page.  Note the use of three <samp>l</samp>s in the word
<samp>filll</samp>; this is correct.
</para>
<para>To insert the copyright text itself, write <code>@insertcopying</code>
next (see <xref><xrefnodename>Document Permissions</xrefnodename></xref>):
</para>
<example xml:space="preserve">@insertcopying
</example>
<para>Follow the copying text by the publisher, ISBN numbers, cover art
credits, and other such information.
</para>
<para>Here is an example putting all this together:
</para>
<example xml:space="preserve">@titlepage
&dots;
@page
@vskip 0pt plus 1filll
@insertcopying

Published by &dots;

Cover art by &dots;
@end titlepage
</example>

</subsection>
</node>
<node>
<nodename>end titlepage</nodename>
<nodenext>headings on off</nodenext>
<nodeprev>Copyright</nodeprev>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title>Heading Generation</title>
<para><indexterm index="fn">end titlepage</indexterm><indexterm index="cp">Headings, page, begin to appear</indexterm><indexterm index="cp">Titlepage end starts headings</indexterm><indexterm index="cp">End titlepage starts headings</indexterm></para>
<para>The <code>@end titlepage</code> command must be written on a line by itself.
It not only marks the end of the title and copyright pages, but also
causes &tex; to start generating page headings and page numbers.
</para>
<para>To repeat what is said elsewhere,  Texinfo has two standard page heading
formats, one for documents which are printed on one side of each sheet of paper
(single-sided printing), and the other for documents which are printed on both
sides of each sheet (double-sided printing).
You can specify these formats in different ways:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>The conventional way is to write an <code>@setchapternewpage</code> command
before the title page commands, and then have the <code>@end
titlepage</code> command start generating page headings in the manner desired.
(See <xref><xrefnodename>setchapternewpage</xrefnodename></xref>.)
</para>
</item>
<item>
<para>Alternatively, you can use the <code>@headings</code> command to prevent page
headings from being generated or to start them for either single or
double-sided printing.  (Write an <code>@headings</code> command immediately
after the <code>@end titlepage</code> command.  See <xref><xrefnodename>headings on off</xrefnodename><xrefprinteddesc>The <code>@headings</code> Command</xrefprinteddesc></xref>, for more information.)
</para>
</item>
<item>
<para>Or, you may specify your own page heading and footing format.
See <xref><xrefnodename>Headings</xrefnodename><xrefprinteddesc>Page Headings</xrefprinteddesc></xref>, for detailed
information about page headings and footings.
</para></item>
</itemize>

<para>Most documents are formatted with the standard single-sided or
double-sided format, using <code>@setchapternewpage odd</code> for
double-sided printing and no <code>@setchapternewpage</code> command for
single-sided printing.
</para>

</subsection>
</node>
<node>
<nodename>headings on off</nodename>
<nodeprev>end titlepage</nodeprev>
<nodeup>Titlepage &amp; Copyright Page</nodeup>
<subsection>
<title>The <code>@headings</code> Command</title>
<para><indexterm index="fn">headings</indexterm></para>
<para>The <code>@headings</code> command is rarely used.  It specifies what kind of
page headings and footings to print on each page.  Usually, this is
controlled by the <code>@setchapternewpage</code> command.  You need the
<code>@headings</code> command only if the <code>@setchapternewpage</code> command
does not do what you want, or if you want to turn off pre-defined page
headings prior to defining your own.  Write an <code>@headings</code> command
immediately after the <code>@end titlepage</code> command.
</para>
<para>You can use <code>@headings</code> as follows:
</para>
<table><tableitem><tableterm><code>@headings off</code></tableterm>
<item><para>Turn off printing of page headings.
</para>
</item></tableitem><tableitem><tableterm><code>@headings single</code></tableterm>
<item><para>Turn on page headings appropriate for single-sided printing.
</para>

</item></tableitem><tableitem><tableterm><code>@headings double</code></tableterm>
<tableterm><code>@headings on</code></tableterm>
<item><para>Turn on page headings appropriate for double-sided printing.  The two
commands, <code>@headings on</code> and <code>@headings double</code>, are
synonymous.
</para>
</item></tableitem><tableitem><tableterm><code>@headings singleafter</code></tableterm>
<tableterm><code>@headings doubleafter</code></tableterm>
<item><para>Turn on <code>single</code> or <code>double</code> headings, respectively, after the
current page is output.
</para>
</item></tableitem><tableitem><tableterm><code>@headings on</code></tableterm>
<item><para>Turn on page headings: <code>single</code> if <samp>@setchapternewpage
on</samp>, <code>double</code> otherwise.
</para></item></tableitem></table>

<para>For example, suppose you write <code>@setchapternewpage off</code> before the
<code>@titlepage</code> command to tell &tex; to start a new chapter on the
same page as the end of the last chapter.  This command also causes
&tex; to typeset page headers for single-sided printing.  To cause
&tex; to typeset for double sided printing, write <code>@headings
double</code> after the <code>@end titlepage</code> command.
</para>
<para>You can stop &tex; from generating any page headings at all by
writing <code>@headings off</code> on a line of its own immediately after the
line containing the <code>@end titlepage</code> command, like this:
</para>
<example xml:space="preserve">@end titlepage
@headings off
</example>
<para>The <code>@headings off</code> command overrides the <code>@end titlepage</code>
command, which would otherwise cause &tex; to print page
headings.
</para>
<para>You can also specify your own style of page heading and footing.
See <xref><xrefnodename>Headings</xrefnodename><xrefprinteddesc>Page Headings</xrefprinteddesc></xref>, for more information.
</para>

</subsection>
</node>
<node>
<nodename>The Top Node</nodename>
<nodenext>Global Document Commands</nodenext>
<nodeprev>Titlepage &amp; Copyright Page</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>The `Top' Node and Master Menu</title>
<para><indexterm index="cp">Top node</indexterm><indexterm index="cp">Node, `Top'</indexterm></para>
<para>The `Top' node is the node in which a reader enters an Info manual.  As
such, it should begin with the <code>@insertcopying</code> command
(see <xref><xrefnodename>Document Permissions</xrefnodename></xref>) to provide a brief description of the
manual (including the version number) and copying permissions, and end
with a master menu for the whole manual.  Of course you should include
any other general information you feel a reader would find helpful.
</para>
<para><indexterm index="fn">top</indexterm>It is also conventional to write an <code>@top</code> sectioning command line
containing the title of the document immediately after the <code>@node
Top</code> line (see <xref><xrefnodename>makeinfo top command</xrefnodename><xrefprinteddesc>The <code>@top</code> Sectioning Command</xrefprinteddesc></xref>).
</para>
<para>The contents of the `Top' node should appear only in the online output;
none of it should appear in printed output, so enclose it between
<code>@ifnottex</code> and <code>@end ifnottex</code> commands.  (&tex; does not
print either an <code>@node</code> line or a menu; they appear only in Info;
strictly speaking, you are not required to enclose these parts between
<code>@ifnottex</code> and <code>@end ifnottext</code>, but it is simplest to do
so.  See <xref><xrefnodename>Conditionals</xrefnodename><xrefprinteddesc>Conditionally Visible Text</xrefprinteddesc></xref>.)
</para>
<menu>
<menuentry>
<menunode> Top Node Example</menunode>
<menutitle> Top Node Example</menutitle>
<menucomment>            
</menucomment>
</menuentry><menuentry>
<menunode> Master Menu Parts</menunode>
<menutitle> Master Menu Parts</menutitle>
<menucomment>           
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Top Node Example</nodename>
<nodenext>Master Menu Parts</nodenext>
<nodeup>The Top Node</nodeup>
<subsection>
<title>Top Node Example</title>

<para><indexterm index="cp">Top node example</indexterm></para>
<para>Here is an example of a Top node.
</para>
<example xml:space="preserve"><group>
@ifnottex
@node Top
@top Sample Title

@insertcopying
</group>

Additional general information.

<group>
@menu
* First Chapter::
* Second Chapter::
&dots;
* Index::
</group>
@end menu
</example>

</subsection>
</node>
<node>
<nodename>Master Menu Parts</nodename>
<nodeprev>Top Node Example</nodeprev>
<nodeup>The Top Node</nodeup>
<subsection>
<title>Parts of a Master Menu</title>
<para><indexterm index="cp">Master menu</indexterm><indexterm index="cp">Menu, master</indexterm><indexterm index="cp">Parts of a master menu</indexterm></para>
<para>A <dfn>master menu</dfn> is a detailed main menu listing all the nodes in a
file.
</para>
<para>A master menu is enclosed in <code>@menu</code> and <code>@end menu</code>
commands and does not appear in the printed document.
</para>
<para>Generally, a master menu is divided into parts.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>The first part contains the major nodes in the Texinfo file: the nodes
for the chapters, chapter-like sections, and the appendices.
</para>
</item>
<item>
<para>The second part contains nodes for the indices.
</para>
</item>
<item>
<para>The third and subsequent parts contain a listing of the other, lower
level nodes, often ordered by chapter.  This way, rather than go
through an intermediary menu, an inquirer can go directly to a
particular node when searching for specific information.  These menu
items are not required; add them if you think they are a
convenience.  If you do use them, put <code>@detailmenu</code> before the
first one, and <code>@end detailmenu</code> after the last; otherwise,
<code>makeinfo</code> will get confused.
</para></item>
</itemize>

<para>Each section in the menu can be introduced by a descriptive line.  So
long as the line does not begin with an asterisk, it will not be
treated as a menu entry.  (See <xref><xrefnodename>Writing a Menu</xrefnodename></xref>, for more
information.)
</para>
<para>For example, the master menu for this manual looks like the following
(but has many more entries):
</para>
<example xml:space="preserve"><group>
@menu
* Copying Conditions::  Your rights.
* Overview::            Texinfo in brief.
&dots;
</group>
<group>
* Command and Variable Index::
* Concept Index::       
</group>

<group>
@detailmenu
 --- The Detailed Node Listing ---

Overview of Texinfo

* Reporting Bugs:: &dots;
&dots;
</group>

<group>
Beginning a Texinfo File

* Sample Beginning:: &dots;
&dots;
@end detailmenu
@end menu
</group>
</example>

</subsection>
</node>
<node>
<nodename>Global Document Commands</nodename>
<nodenext>Software Copying Permissions</nodenext>
<nodeprev>The Top Node</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>Global Document Commands</title>
<para><indexterm index="cp">Global Document Commands</indexterm></para>
<para>Besides the basic commands mentioned in the previous sections, here are
additional commands which affect the document as a whole.  They are
generally all given before the Top node, if they are given at all.
</para>
<menu>
<menuentry>
<menunode> documentdescription</menunode>
<menutitle> documentdescription</menutitle>
<menucomment>         Document summary for the HTML output.
</menucomment>
</menuentry><menuentry>
<menunode> setchapternewpage</menunode>
<menutitle> setchapternewpage</menutitle>
<menucomment>           Start chapters on right-hand pages.
</menucomment>
</menuentry><menuentry>
<menunode> paragraphindent</menunode>
<menutitle> paragraphindent</menutitle>
<menucomment>             Specify paragraph indentation.
</menucomment>
</menuentry><menuentry>
<menunode> exampleindent</menunode>
<menutitle> exampleindent</menutitle>
<menucomment>               Specify environment indentation.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>documentdescription</nodename>
<nodenext>setchapternewpage</nodenext>
<nodeup>Global Document Commands</nodeup>
<subsection>
<title><code>@documentdescription</code>: Summary text</title>
<para><indexterm index="cp">Document description</indexterm><indexterm index="cp">Description of document</indexterm><indexterm index="cp">Summary of document</indexterm><indexterm index="cp">Abstract of document</indexterm><indexterm index="cp">&lt;meta&gt; HTML tag, and document description</indexterm><indexterm index="fn">documentdescription</indexterm></para>
<para>When producing HTML output for a document, <command>makeinfo</command> writes a
<samp>&lt;meta&gt;</samp> element in the <samp>&lt;head&gt;</samp> to give some idea of the
content of the document.  By default, this <dfn>description</dfn> is the title
of the document, taken from the <code>@settitle</code> command
(see <xref><xrefnodename>settitle</xrefnodename></xref>).  To change this, use the <code>@documentdescription</code>
environment, as in:
</para>
<example xml:space="preserve">@documentdescription
descriptive text.
@end documentdescription
</example>
<para>This will produce the following output in the <samp>&lt;head&gt;</samp> of the HTML:
</para>
<example xml:space="preserve">&lt;meta name=description content=&quot;descriptive text.&quot;&gt;
</example>
<para><code>@documentdescription</code> must be specified before the first node of
the document.
</para>

</subsection>
</node>
<node>
<nodename>setchapternewpage</nodename>
<nodenext>paragraphindent</nodenext>
<nodeprev>documentdescription</nodeprev>
<nodeup>Global Document Commands</nodeup>
<subsection>
<title><code>@setchapternewpage</code>:</title>
<para><indexterm index="cp">Starting chapters</indexterm><indexterm index="cp">Pages, starting odd</indexterm><indexterm index="fn">setchapternewpage</indexterm></para>
<para>In an officially bound book, text is usually printed on both sides of
the paper, chapters start on right-hand pages, and right-hand pages have
odd numbers.  But in short reports, text often is printed only on one
side of the paper.  Also in short reports, chapters sometimes do not
start on new pages, but are printed on the same page as the end of the
preceding chapter, after a small amount of vertical whitespace.
</para>
<para>You can use the <code>@setchapternewpage</code> command with various
arguments to specify how &tex; should start chapters and whether it
should format headers for printing on one or both sides of the paper
(single-sided or double-sided printing).
</para>
<para>Write the <code>@setchapternewpage</code> command at the beginning of a
line followed by its argument.
</para>
<para>For example, you would write the following to cause each chapter to
start on a fresh odd-numbered page:
</para>
<example xml:space="preserve">@setchapternewpage odd
</example>
<para>You can specify one of three alternatives with the
<code>@setchapternewpage</code> command:
</para>
<table><tableitem><tableterm><code>@setchapternewpage off</code></tableterm>
<item><para>Cause &tex; to typeset a new chapter on the same page as the last
chapter, after skipping some vertical whitespace.  Also, cause &tex; to
format page headers for single-sided printing.
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage on</code></tableterm>
<item><para>Cause &tex; to start new chapters on new pages and to format page
headers for single-sided printing.  This is the form most often used for
short reports or personal printing. This is the default.
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage odd</code></tableterm>
<item><para>Cause &tex; to start new chapters on new, odd-numbered pages
(right-handed pages) and to typeset for double-sided printing.  This is
the form most often used for books and manuals.
</para></item></tableitem></table>

<para>Texinfo does not have an <code>@setchapternewpage even</code> command,
because there is no printing tradition of starting chapters or books on
an even-numbered page.
</para>
<para>If you don't like the default headers that <code>@setchapternewpage</code>
sets, you can explicit control them with the <code>@headings</code> command.
See <xref><xrefnodename>headings on off</xrefnodename><xrefprinteddesc>The <code>@headings</code> Command</xrefprinteddesc></xref>.
</para>
<para>At the beginning of a manual or book, pages are not numbered&mdash;for
example, the title and copyright pages of a book are not numbered.  By
convention, table of contents and frontmatter pages are numbered with
roman numerals and not in sequence with the rest of the document.
</para>
<para>Since an Info file does not have pages, the <code>@setchapternewpage</code>
command has no effect on it.
</para>
<para>We recommend not including any <code>@setchapternewpage</code> command in
your manual sources at all, since the desired output is not intrinsic to
the document.  For a particular hard copy run, if you don't want the
default option (no blank pages, same headers on all pages) use the
<option>--texinfo</option> option to <command>texi2dvi</command> to specify the output
you want.
</para>

</subsection>
</node>
<node>
<nodename>paragraphindent</nodename>
<nodenext>exampleindent</nodenext>
<nodeprev>setchapternewpage</nodeprev>
<nodeup>Global Document Commands</nodeup>
<subsection>
<title>Paragraph Indenting</title>
<para><indexterm index="cp">Indenting paragraphs, control of</indexterm><indexterm index="cp">Paragraph indentation control</indexterm><indexterm index="fn">paragraphindent</indexterm></para>
<para>The Texinfo processors may insert whitespace at the beginning of the
first line of each paragraph, thereby indenting that paragraph.  You can
use the <code>@paragraphindent</code> command to specify this indentation.
Write an <code>@paragraphindent</code> command at the beginning of a line
followed by either <samp>asis</samp> or a number:
</para>
<example xml:space="preserve">@paragraphindent <var>indent</var>
</example>
<para>The indentation is according to the value of <var>indent</var>:
</para>
<table><tableitem><tableterm><code>asis</code></tableterm>
<item><para>Do not change the existing indentation (not implemented in &tex;).
</para>
</item></tableitem><tableitem><tableterm><code>none</code></tableterm>
<tableterm>0</tableterm>
<item><para>Omit all indentation.
</para>
</item></tableitem><tableitem><tableterm><var>n</var></tableterm>
<item><para>Indent by <var>n</var> space characters in Info output, by <var>n</var> ems in
&tex;.
</para>
</item></tableitem></table>

<para>The default value of <var>indent</var> is 3.  <code>@paragraphindent</code> is
ignored for HTML output.
</para>
<para>It is best to write the <code>@paragraphindent</code> command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  See <xref><xrefnodename>Start of Header</xrefnodename></xref>.
</para>
<para>A peculiarity of the <code>texinfo-format-buffer</code> and
<code>texinfo-format-region</code> commands is that they do not indent (nor
fill) paragraphs that contain <code>@w</code> or <code>@*</code> commands.
See <xref><xrefnodename>Refilling Paragraphs</xrefnodename></xref>, for further information.
</para>

</subsection>
</node>
<node>
<nodename>exampleindent</nodename>
<nodeprev>paragraphindent</nodeprev>
<nodeup>Global Document Commands</nodeup>
<subsection>
<title><code>@exampleindent</code>: Environment Indenting</title>
<para><indexterm index="cp">Indenting environments</indexterm><indexterm index="cp">Environment indentation</indexterm><indexterm index="cp">Example indentation</indexterm><indexterm index="fn">exampleindent</indexterm></para>
<para>The Texinfo processors indent each line of <code>@example</code> and similar
environments.  You can use the <code>@exampleindent</code> command to specify
this indentation.  Write an <code>@exampleindent</code> command at the
beginning of a line followed by either <samp>asis</samp> or a number:
</para>
<example xml:space="preserve">@exampleindent <var>indent</var>
</example>
<para>The indentation is according to the value of <var>indent</var>:
</para>
<table><tableitem><tableterm><code>asis</code></tableterm>
<item><para>Do not change the existing indentation (not implemented in &tex;).
</para>
</item></tableitem><tableitem><tableterm>0</tableterm>
<item><para>Omit all indentation.
</para>
</item></tableitem><tableitem><tableterm><var>n</var></tableterm>
<item><para>Indent environments by <var>n</var> space characters in Info output, by
<var>n</var> ems in &tex;.
</para>
</item></tableitem></table>

<para>The default value of <var>indent</var> is 5.  <code>@exampleindent</code> is
ignored for HTML output.
</para>
<para>It is best to write the <code>@exampleindent</code> command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  See <xref><xrefnodename>Start of Header</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>Software Copying Permissions</nodename>
<nodeprev>Global Document Commands</nodeprev>
<nodeup>Beginning a File</nodeup>
<section>
<title>Software Copying Permissions</title>
<para><indexterm index="cp">Software copying permissions</indexterm><indexterm index="cp">Copying software</indexterm><indexterm index="cp">Distribution</indexterm><indexterm index="cp">License agreement</indexterm></para>
<para>If the Texinfo file has a section containing the &ldquo;General Public
License&rdquo; and the distribution information and a warranty disclaimer for
the software that is documented, we recommend placing this right after
the `Top' node.  The General Public License is very important to Project
GNU software.  It ensures that you and others will continue to have a
right to use and share the software.
</para>
<para>The copying and distribution information and the disclaimer are followed
by an introduction or else by the first chapter of the manual.
</para>
<para><indexterm index="cp">Introduction, as part of file</indexterm>Although an introduction is not a required part of a Texinfo file, it
is very helpful.  Ideally, it should state clearly and concisely what
the file is about and who would be interested in reading it.  In
general, an introduction would follow the licensing and distribution
information, although sometimes people put it earlier in the document.
</para>

</section>
</node>
<node>
<nodename>Ending a File</nodename>
<nodenext>Structuring</nodenext>
<nodeprev>Beginning a File</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Ending a Texinfo File</title>
<para><indexterm index="cp">Ending a Texinfo file</indexterm><indexterm index="cp">Texinfo file ending</indexterm><indexterm index="cp">File ending</indexterm><indexterm index="fn">bye</indexterm></para>
<para>The end of a Texinfo file should include commands to create indices and
(perhaps) to generate both the full and summary tables of contents.
Finally, it must include the <code>@bye</code> command that marks the last
line to be processed.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve">@node Index
@unnumbered Index

@printindex cp

@shortcontents
@contents

@bye
</example>
<menu>
<menuentry>
<menunode> Printing Indices &amp; Menus</menunode>
<menutitle> Printing Indices &amp; Menus</menutitle>
<menucomment>    How to print an index in hardcopy and
                                  generate index menus in Info.
</menucomment>
</menuentry><menuentry>
<menunode> Contents</menunode>
<menutitle> Contents</menutitle>
<menucomment>                    How to create a table of contents.
</menucomment>
</menuentry><menuentry>
<menunode> File End</menunode>
<menutitle> File End</menutitle>
<menucomment>                    How to mark the end of a file.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Printing Indices &amp; Menus</nodename>
<nodenext>Contents</nodenext>
<nodeup>Ending a File</nodeup>
<section>
<title>Printing Indices and Menus</title>
<para><indexterm index="fn">printindex</indexterm><indexterm index="cp">Printing an index</indexterm><indexterm index="cp">Indices, printing and menus</indexterm><indexterm index="cp">Generating menus with indices</indexterm><indexterm index="cp">Menus generated with indices</indexterm></para>
<para>To print an index means to include it as part of a manual or Info file.
This does not happen automatically just because you use <code>@cindex</code>
or other index-entry generating commands in the Texinfo file; those just
cause the raw data for the index to be accumulated.  To generate an
index, you must include the <code>@printindex</code> command at the place in
the document where you want the index to appear.  Also, as part of the
process of creating a printed manual, you must run a program called
<code>texindex</code> (see <xref><xrefnodename>Hardcopy</xrefnodename></xref>) to sort the raw data to produce a
sorted index file.  The sorted index file is what is actually used to
print the index.
</para>
<para>Texinfo offers six separate types of predefined index, each with a
two-letter abbreviation, as illustrated in the following table.
However, you may merge indices (see <xref><xrefnodename>Combining Indices</xrefnodename></xref>) or define
your own indices (see <xref><xrefnodename>New Indices</xrefnodename></xref>).
</para>
<para>Here are the predefined indices, their abbreviations, and the
corresponding index entry commands:
</para>
<table><tableitem><tableterm><samp>cp</samp></tableterm>
<item><para>concept index (<code>@cindex</code>)
</para></item></tableitem><tableitem><tableterm><samp>fn</samp></tableterm>
<item><para>function index (<code>@findex</code>)
</para></item></tableitem><tableitem><tableterm><samp>vr</samp></tableterm>
<item><para>variable index (<code>@index</code>)
</para></item></tableitem><tableitem><tableterm><samp>ky</samp></tableterm>
<item><para>key index (<code>@kindex</code>)
</para></item></tableitem><tableitem><tableterm><samp>pg</samp></tableterm>
<item><para>program index (<code>@pindex</code>)
</para></item></tableitem><tableitem><tableterm><samp>tp</samp></tableterm>
<item><para>data type index (<code>@tindex</code>)
</para></item></tableitem></table>

<para>The <code>@printindex</code> command takes a two-letter index abbreviation,
reads the corresponding sorted index file and formats it appropriately
into an index.
</para>
<para>The <code>@printindex</code> command does not generate a chapter heading for
the index.  Consequently, you should precede the <code>@printindex</code>
command with a suitable section or chapter command (usually
<code>@appendix</code> or <code>@unnumbered</code>) to supply the chapter heading
and put the index into the table of contents.  Precede the
<code>@unnumbered</code> command with an <code>@node</code> line.
</para>
<para>For example:
</para>
<smallexample xml:space="preserve"><group>
@node Variable Index
@unnumbered Variable Index

@printindex vr
</group>

<group>
@node Concept Index
@unnumbered Concept Index

@printindex cp
</group>
</smallexample>

<para>We recommend placing the concept index last, since that makes it easiest
to find.  We also recommend having a single index whenever possible,
since then readers have only one place to look (see <xref><xrefnodename>Combining Indices</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>Contents</nodename>
<nodenext>File End</nodenext>
<nodeprev>Printing Indices &amp; Menus</nodeprev>
<nodeup>Ending a File</nodeup>
<section>
<title>Generating a Table of Contents</title>
<para><indexterm index="cp">Table of contents</indexterm><indexterm index="cp">Contents, Table of</indexterm><indexterm index="cp">Short table of contents</indexterm><indexterm index="fn">contents</indexterm><indexterm index="fn">summarycontents</indexterm><indexterm index="fn">shortcontents</indexterm></para>
<para>The <code>@chapter</code>, <code>@section</code>, and other structuring commands
supply the information to make up a table of contents, but they do not
cause an actual table to appear in the manual.  To do this, you must use
the <code>@contents</code> and/or <code>@summarycontents</code> command(s).
</para>
<table><tableitem><tableterm><code>@contents</code></tableterm>
<item><para>Generate a table of contents in a printed manual, including all
chapters, sections, subsections, etc., as well as appendices and
unnumbered chapters.  Headings generated by the <code>@heading</code>
series of commands do not appear in the table of contents.
</para>
</item></tableitem><tableitem><tableterm><code>@shortcontents</code></tableterm>
<tableterm><code>@summarycontents</code></tableterm>
<item><para>(<code>@summarycontents</code> is a synonym for <code>@shortcontents</code>.)
</para>
<para>Generate a short or summary table of contents that lists only the
chapters, appendices, and unnumbered chapters.  Sections, subsections
and subsubsections are omitted.  Only a long manual needs a short table
of contents in addition to the full table of contents.
</para>
</item></tableitem></table>

<para>Both contents commands should be written on a line by themselves.
The contents commands automatically generate a chapter-like heading at
the top of the first table of contents page, so don't include any
sectioning command such as <code>@unnumbered</code> before them.
</para>
<para>Since an Info file uses menus instead of tables of contents, the Info
formatting commands ignore the contents commands.  But the contents are
included in plain text output (generated by <code>makeinfo
--no-headers</code>), unless <code>makeinfo</code> is writing its output to standard
output.
</para>
<para>When <code>makeinfo</code> writes a short table of contents while producing
html output, the links in the short table of contents point to
corresponding entries in the full table of contents rather than the text
of the document. The links in the full table of contents point to the
main text of the document.
</para>
<para>The contents commands can be placed either at the very end of the file,
after any indices (see the previous section) and just before the
<code>@bye</code> (see the next section), or near the beginning of the file,
after the <code>@end titlepage</code> (see <xref><xrefnodename>titlepage</xrefnodename></xref>).  The advantage to
the former is that then the contents output is always up to date,
because it reflects the processing just done.  The advantage to the
latter is that the contents are printed in the proper place, thus you do
not need to rearrange the DVI file with <command>dviselect</command> or shuffle
paper.
</para>
<para><indexterm index="fn">setcontentsaftertitlepage</indexterm><indexterm index="fn">setshortcontentsaftertitlepage</indexterm><indexterm index="cp">Contents, after title page</indexterm><indexterm index="cp">Table of contents, after title page</indexterm>As an author, you can put the contents commands wherever you prefer.
But if you are a user simply printing a manual, you may wish to print
the contents after the title page even if the author put the contents
commands at the end of the document (as is the case in most existing
Texinfo documents, at this writing).  You can do this by specifying
<code>@setcontentsaftertitlepage</code> and/or
<code>@setshortcontentsaftertitlepage</code>.  The first prints only the main
contents after the <code>@end titlepage</code>; the second prints both the
short contents and the main contents.  In either case, any subsequent
<code>@contents</code> or <code>@shortcontents</code> is ignored (unless no
<code>@end titlepage</code> is ever encountered).
</para>
<para>You need to include the <code>@set&dots;contentsaftertitlepage</code>
commands early in the document (just after <code>@setfilename</code>, for
example).  We recommend using <command>texi2dvi</command> (see <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>) to specify this without altering the source file at all.  For
example:
</para><example xml:space="preserve">texi2dvi --texinfo=@setcontentsaftertitlepage foo.texi
</example>

</section>
</node>
<node>
<nodename>File End</nodename>
<nodeprev>Contents</nodeprev>
<nodeup>Ending a File</nodeup>
<section>
<title><code>@bye</code> File Ending</title>
<para><indexterm index="fn">bye</indexterm></para>
<para>An <code>@bye</code> command terminates &tex; or Info formatting.  None of
the formatting commands reading anything following <code>@bye</code>.  The
<code>@bye</code> command should be on a line by itself.
</para>
<para>If you wish, you may follow the <code>@bye</code> line with notes. These
notes will not be formatted and will not appear in either Info or a
printed manual; it is as if text after <code>@bye</code> were within
<code>@ignore</code> &dots; <code>@end ignore</code>.  Also, you may follow the
<code>@bye</code> line with a local variables list for Emacs.
See <xref><xrefnodename>Compile-Command</xrefnodename><xrefprinteddesc>Using Local Variables and the Compile Command</xrefprinteddesc></xref>,
for more information.
</para>

</section>
</node>
<node>
<nodename>Structuring</nodename>
<nodenext>Nodes</nodenext>
<nodeprev>Ending a File</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Chapter Structuring</title>
<para><indexterm index="cp">Chapter structuring</indexterm><indexterm index="cp">Structuring of chapters</indexterm></para>
<para>The <dfn>chapter structuring</dfn> commands divide a document into a hierarchy of
chapters, sections, subsections, and subsubsections.  These commands
generate large headings; they also provide information for the table
of contents of a printed manual (see <xref><xrefnodename>Contents</xrefnodename><xrefprinteddesc>Generating a Table of Contents</xrefprinteddesc></xref>).
</para>
<para>The chapter structuring commands do not create an Info node structure,
so normally you should put an <code>@node</code> command immediately before
each chapter structuring command (see <xref><xrefnodename>Nodes</xrefnodename></xref>).  The only time you
are likely to use the chapter structuring commands without using the
node structuring commands is if you are writing a document that
contains no cross references and will never be transformed into Info
format.
</para>
<para>It is unlikely that you will ever write a Texinfo file that is
intended only as an Info file and not as a printable document.  If you
do, you might still use chapter structuring commands to create a
heading at the top of each node&mdash;but you don't need to.
</para>
<menu>
<menuentry>
<menunode> Tree Structuring</menunode>
<menutitle> Tree Structuring</menutitle>
<menucomment>            A manual is like an upside down tree &dots;
</menucomment>
</menuentry><menuentry>
<menunode> Structuring Command Types</menunode>
<menutitle> Structuring Command Types</menutitle>
<menucomment>   How to divide a manual into parts.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo top</menunode>
<menutitle> makeinfo top</menutitle>
<menucomment>                The <code>@top</code> command, part of the `Top' node.
</menucomment>
</menuentry><menuentry>
<menunode> chapter</menunode>
<menutitle> chapter</menutitle>
<menucomment>                     
</menucomment>
</menuentry><menuentry>
<menunode> unnumbered &amp; appendix</menunode>
<menutitle> unnumbered &amp; appendix</menutitle>
<menucomment>       
</menucomment>
</menuentry><menuentry>
<menunode> majorheading &amp; chapheading</menunode>
<menutitle> majorheading &amp; chapheading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> section</menunode>
<menutitle> section</menutitle>
<menucomment>                     
</menucomment>
</menuentry><menuentry>
<menunode> unnumberedsec appendixsec heading</menunode>
<menutitle> unnumberedsec appendixsec heading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> subsection</menunode>
<menutitle> subsection</menutitle>
<menucomment>                  
</menucomment>
</menuentry><menuentry>
<menunode> unnumberedsubsec appendixsubsec subheading</menunode>
<menutitle> unnumberedsubsec appendixsubsec subheading</menutitle>
<menucomment>  
</menucomment>
</menuentry><menuentry>
<menunode> subsubsection</menunode>
<menutitle> subsubsection</menutitle>
<menucomment>               Commands for the lowest level sections.
</menucomment>
</menuentry><menuentry>
<menunode> Raise/lower sections</menunode>
<menutitle> Raise/lower sections</menutitle>
<menucomment>        How to change commands' hierarchical level.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Tree Structuring</nodename>
<nodenext>Structuring Command Types</nodenext>
<nodeup>Structuring</nodeup>
<section>
<title>Tree Structure of Sections</title>
<para><indexterm index="cp">Tree structuring</indexterm></para>
<para>A Texinfo file is usually structured like a book with chapters,
sections, subsections, and the like.  This structure can be visualized
as a tree (or rather as an upside-down tree) with the root at the top
and the levels corresponding to chapters, sections, subsection, and
subsubsections.
</para>
<para>Here is a diagram that shows a Texinfo file with three chapters,
each of which has two sections.
</para>
<example xml:space="preserve"><group>
                          Top
                           |
         -------------------------------------
        |                  |                  |
     Chapter 1          Chapter 2          Chapter 3
        |                  |                  |
     --------           --------           --------
    |        |         |        |         |        |
 Section  Section   Section  Section   Section  Section
   1.1      1.2       2.1      2.2       3.1      3.2

</group>
</example>
<para>In a Texinfo file that has this structure, the beginning of Chapter 2
looks like this:
</para>
<example xml:space="preserve"><group>
@node    Chapter 2,  Chapter 3, Chapter 1, top
@chapter Chapter 2
</group>
</example>
<para>The chapter structuring commands are described in the sections that
follow; the <code>@node</code> and <code>@menu</code> commands are described in
following chapters. (See <xref><xrefnodename>Nodes</xrefnodename></xref>, and see <xref><xrefnodename>Menus</xrefnodename></xref>.)
</para>

</section>
</node>
<node>
<nodename>Structuring Command Types</nodename>
<nodenext>makeinfo top</nodenext>
<nodeprev>Tree Structuring</nodeprev>
<nodeup>Structuring</nodeup>
<section>
<title>Structuring Command Types</title>

<para>The chapter structuring commands fall into four groups or series, each
of which contains structuring commands corresponding to the
hierarchical levels of chapters, sections, subsections, and
subsubsections.
</para>
<para>The four groups are the <code>@chapter</code> series, the
<code>@unnumbered</code> series, the <code>@appendix</code> series, and the
<code>@heading</code> series.
</para>
<para>Each command produces titles that have a different appearance on the
printed page or Info file; only some of the commands produce
titles that are listed in the table of contents of a printed book or
manual.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>The <code>@chapter</code> and <code>@appendix</code> series of commands produce
numbered or lettered entries both in the body of a printed work and in
its table of contents.
</para>
</item>
<item>
<para>The <code>@unnumbered</code> series of commands produce unnumbered entries
both in the body of a printed work and in its table of contents.  The
<code>@top</code> command, which has a special use, is a member of this
series (see <xref><xrefnodename>makeinfo top</xrefnodename><xrefprinteddesc><code>@top</code></xrefprinteddesc></xref>).
</para>
</item>
<item>
<para>The <code>@heading</code> series of commands produce unnumbered headings
that do not appear in a table of contents.  The heading commands never
start a new page.
</para>
</item>
<item>
<para>The <code>@majorheading</code> command produces results similar to using
the <code>@chapheading</code> command but generates a larger vertical
whitespace before the heading.
</para>
</item>
<item>
<para>When an <code>@setchapternewpage</code> command says to do so, the
<code>@chapter</code>, <code>@unnumbered</code>, and <code>@appendix</code> commands
start new pages in the printed manual; the <code>@heading</code> commands
do not.
</para></item>
</itemize>

<para>Here are the four groups of chapter structuring commands:
</para>

<multitable><columnfraction>19</columnfraction>
<columnfraction>30</columnfraction>
<columnfraction>29</columnfraction>
<columnfraction>22</columnfraction>
<tbody><row><entry>                        </entry><entry>                              </entry><entry>                       </entry><entry> No new page
</entry></row><row><entry> <i>Numbered</i>           </entry><entry> <i>Unnumbered</i>               </entry><entry> <i>Lettered/numbered</i> </entry><entry> <i>Unnumbered</i>
</entry></row><row><entry> In contents            </entry><entry> In contents                  </entry><entry> In contents           </entry><entry> Omitted from&linebreak;contents
</entry></row><row><entry>                        </entry><entry> <code>@top</code>                 </entry><entry>                       </entry><entry> <code>@majorheading</code>
</entry></row><row><entry> <code>@chapter</code>       </entry><entry> <code>@unnumbered</code>          </entry><entry> <code>@appendix</code> </entry><entry> <code>@chapheading</code>
</entry></row><row><entry> <code>@section</code>       </entry><entry> <code>@unnumberedsec</code>       </entry><entry> <code>@appendixsec</code> </entry><entry> <code>@heading</code>
</entry></row><row><entry> <code>@subsection</code>    </entry><entry> <code>@unnumberedsubsec</code>    </entry><entry> <code>@appendixsubsec</code> </entry><entry> <code>@subheading</code>
</entry></row><row><entry> <code>@subsubsection</code> </entry><entry> <code>@unnumberedsubsubsec</code> </entry><entry> <code>@appendixsubsubsec</code> </entry><entry> <code>@subsubheading</code>
</entry></row></tbody></multitable>


</section>
</node>
<node>
<nodename>makeinfo top</nodename>
<nodenext>chapter</nodenext>
<nodeprev>Structuring Command Types</nodeprev>
<nodeup>Structuring</nodeup>
<section>
<title><code>@top</code></title>

<para>The <code>@top</code> command is a special sectioning command that you use
only after an <samp>@node Top</samp> line at the beginning of a Texinfo file.
The <code>@top</code> command tells the <code>makeinfo</code> formatter which node
is the `Top' node, so it can use it as the root of the node tree if your
manual uses implicit pointers.  It has the same typesetting effect as
<code>@unnumbered</code> (see <xref><xrefnodename>unnumbered &amp; appendix</xrefnodename><xrefprinteddesc><code>@unnumbered</code> and <code>@appendix</code></xrefprinteddesc></xref>).  For detailed information, see <xref><xrefnodename>makeinfo top command</xrefnodename><xrefprinteddesc>The <code>@top</code> Command</xrefprinteddesc></xref>.
</para>
<para>The <code>@top</code> node and its menu (if any) is conventionally wrapped in
an <code>@ifnottex</code> conditional so that it will appear only in Info and
HTML output, not &tex;.
</para>

</section>
</node>
<node>
<nodename>chapter</nodename>
<nodenext>unnumbered &amp; appendix</nodenext>
<nodeprev>makeinfo top</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@chapter</code></title>
<para><indexterm index="fn">chapter</indexterm></para>
<para><code>@chapter</code> identifies a chapter in the document.  Write the
command at the beginning of a line and follow it on the same line by
the title of the chapter.
</para>
<para>For example, this chapter in this manual is entitled &ldquo;Chapter
Structuring&rdquo;; the <code>@chapter</code> line looks like this:
</para>
<example xml:space="preserve">@chapter Chapter Structuring
</example>
<para>In &tex;, the <code>@chapter</code> command creates a chapter in the
document, specifying the chapter title.  The chapter is numbered
automatically.
</para>
<para>In Info, the <code>@chapter</code> command causes the title to appear on a
line by itself, with a line of asterisks inserted underneath.  Thus,
in Info, the above example produces the following output:
</para>
<example xml:space="preserve">Chapter Structuring
*******************
</example>
<para><indexterm index="fn">centerchap</indexterm>Texinfo also provides a command <code>@centerchap</code>, which is analogous
to <code>@unnumbered</code>, but centers its argument in the printed output.
This kind of stylistic choice is not usually offered by Texinfo.
<!-- but the Hacker's Dictionary wanted it ... -->
</para>

</section>
</node>
<node>
<nodename>unnumbered &amp; appendix</nodename>
<nodenext>majorheading &amp; chapheading</nodenext>
<nodeprev>chapter</nodeprev>
<nodeup>Structuring</nodeup>
<section>
<title><code>@unnumbered</code> and <code>@appendix</code></title>
<para><indexterm index="fn">unnumbered</indexterm><indexterm index="fn">appendix</indexterm></para>
<para>Use the <code>@unnumbered</code> command to create a chapter that appears
in a printed manual without chapter numbers of any kind.  Use the
<code>@appendix</code> command to create an appendix in a printed manual
that is labelled by letter instead of by number.
</para>
<para>For Info file output, the <code>@unnumbered</code> and <code>@appendix</code>
commands are equivalent to <code>@chapter</code>: the title is printed on a
line by itself with a line of asterisks underneath.  (See <xref><xrefnodename>chapter</xrefnodename><xrefprinteddesc><code>@chapter</code></xrefprinteddesc></xref>.)
</para>
<para>To create an appendix or an unnumbered chapter, write an
<code>@appendix</code> or <code>@unnumbered</code> command at the beginning of a
line and follow it on the same line by the title, as you would if you
were creating a chapter.
</para>

</section>
</node>
<node>
<nodename>majorheading &amp; chapheading</nodename>
<nodenext>section</nodenext>
<nodeprev>unnumbered &amp; appendix</nodeprev>
<nodeup>Structuring</nodeup>
<section>
<title><code>@majorheading</code>, <code>@chapheading</code></title>
<para><indexterm index="fn">majorheading</indexterm><indexterm index="fn">chapheading</indexterm></para>
<para>The <code>@majorheading</code> and <code>@chapheading</code> commands put
chapter-like headings in the body of a document.
</para>
<para>However, neither command causes &tex; to produce a numbered heading
or an entry in the table of contents; and neither command causes
&tex; to start a new page in a printed manual.
</para>
<para>In &tex;, an <code>@majorheading</code> command generates a larger vertical
whitespace before the heading than an <code>@chapheading</code> command but
is otherwise the same.
</para>
<para>In Info,
the <code>@majorheading</code> and
<code>@chapheading</code> commands are equivalent to
<code>@chapter</code>: the title is printed on a line by itself with a line
of asterisks underneath.  (See <xref><xrefnodename>chapter</xrefnodename><xrefprinteddesc><code>@chapter</code></xrefprinteddesc></xref>.)
</para>
</section>
</node>
<node>
<nodename>section</nodename>
<nodenext>unnumberedsec appendixsec heading</nodenext>
<nodeprev>majorheading &amp; chapheading</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@section</code></title>
<para><indexterm index="fn">section</indexterm></para>
<para>In a printed manual, an <code>@section</code> command identifies a
numbered section within a chapter.  The section title appears in the
table of contents.  In Info, an <code>@section</code> command provides a
title for a segment of text, underlined with <samp>=</samp>.
</para>
<para>This section is headed with an <code>@section</code> command and looks like
this in the Texinfo file:
</para>
<example xml:space="preserve">@section @code{@@section}
</example>
<para>To create a section, write the <code>@section</code> command at the
beginning of a line and follow it on the same line by the section
title.
</para>
<para>Thus,
</para>
<example xml:space="preserve">@section This is a section
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
This is a section
=================
</group>
</example>
<para>in Info.
</para>
</section>
</node>
<node>
<nodename>unnumberedsec appendixsec heading</nodename>
<nodenext>subsection</nodenext>
<nodeprev>section</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@unnumberedsec</code>, <code>@appendixsec</code>, <code>@heading</code></title>
<para><indexterm index="fn">unnumberedsec</indexterm><indexterm index="fn">appendixsec</indexterm><indexterm index="fn">heading</indexterm></para>
<para>The <code>@unnumberedsec</code>, <code>@appendixsec</code>, and <code>@heading</code>
commands are, respectively, the unnumbered, appendix-like, and
heading-like equivalents of the <code>@section</code> command.
(See <xref><xrefnodename>section</xrefnodename><xrefprinteddesc><code>@section</code></xrefprinteddesc></xref>.)
</para>
<table><tableitem><tableterm><code>@unnumberedsec</code></tableterm>
<item><para>The <code>@unnumberedsec</code> command may be used within an
unnumbered chapter or within a regular chapter or appendix to
provide an unnumbered section.
</para>
</item></tableitem><tableitem><tableterm><code>@appendixsec</code></tableterm>
<tableterm><code>@appendixsection</code></tableterm>
<item><para><code>@appendixsection</code> is a longer spelling of the
<code>@appendixsec</code> command; the two are synonymous.
<indexterm index="fn">appendixsection</indexterm></para>
<para>Conventionally, the <code>@appendixsec</code> or <code>@appendixsection</code>
command is used only within appendices.
</para>
</item></tableitem><tableitem><tableterm><code>@heading</code></tableterm>
<item><para>You may use the <code>@heading</code> command anywhere you wish for a
section-style heading that will not appear in the table of contents.
</para></item></tableitem></table>

</section>
</node>
<node>
<nodename>subsection</nodename>
<nodenext>unnumberedsubsec appendixsubsec subheading</nodenext>
<nodeprev>unnumberedsec appendixsec heading</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>The <code>@subsection</code> Command</title>
<para><indexterm index="fn">subsection</indexterm></para>
<para>Subsections are to sections as sections are to chapters.
(See <xref><xrefnodename>section</xrefnodename><xrefprinteddesc><code>@section</code></xrefprinteddesc></xref>.)  In Info, subsection titles are
underlined with <samp>-</samp>.  For example,
</para>
<example xml:space="preserve">@subsection This is a subsection
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
This is a subsection
--------------------
</group>
</example>
<para>In a printed manual, subsections are listed in the table of contents
and are numbered three levels deep.
</para>
</section>
</node>
<node>
<nodename>unnumberedsubsec appendixsubsec subheading</nodename>
<nodenext>subsubsection</nodenext>
<nodeprev>subsection</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>The <code>@subsection</code>-like Commands</title>
<para><indexterm index="cp">Subsection-like commands</indexterm><indexterm index="fn">unnumberedsubsec</indexterm><indexterm index="fn">appendixsubsec</indexterm><indexterm index="fn">subheading</indexterm></para>
<para>The <code>@unnumberedsubsec</code>, <code>@appendixsubsec</code>, and
<code>@subheading</code> commands are, respectively, the unnumbered,
appendix-like, and heading-like equivalents of the <code>@subsection</code>
command.  (See <xref><xrefnodename>subsection</xrefnodename><xrefprinteddesc><code>@subsection</code></xrefprinteddesc></xref>.)
</para>
<para>In Info, the <code>@subsection</code>-like commands generate a title
underlined with hyphens.  In a printed manual, an <code>@subheading</code>
command produces a heading like that of a subsection except that it is
not numbered and does not appear in the table of contents.  Similarly,
an <code>@unnumberedsubsec</code> command produces an unnumbered heading like
that of a subsection and an <code>@appendixsubsec</code> command produces a
subsection-like heading labelled with a letter and numbers; both of
these commands produce headings that appear in the table of
contents.
</para>
</section>
</node>
<node>
<nodename>subsubsection</nodename>
<nodenext>Raise/lower sections</nodenext>
<nodeprev>unnumberedsubsec appendixsubsec subheading</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>The `subsub' Commands</title>
<para><indexterm index="cp">Subsub commands</indexterm><indexterm index="fn">subsubsection</indexterm><indexterm index="fn">unnumberedsubsubsec</indexterm><indexterm index="fn">appendixsubsubsec</indexterm><indexterm index="fn">subsubheading</indexterm></para>
<para>The fourth and lowest level sectioning commands in Texinfo are the
`subsub' commands.  They are:
</para>
<table><tableitem><tableterm><code>@subsubsection</code></tableterm>
<item><para>Subsubsections are to subsections as subsections are to sections.
(See <xref><xrefnodename>subsection</xrefnodename><xrefprinteddesc><code>@subsection</code></xrefprinteddesc></xref>.)  In a printed manual,
subsubsection titles appear in the table of contents and are numbered
four levels deep.
</para>
</item></tableitem><tableitem><tableterm><code>@unnumberedsubsubsec</code></tableterm>
<item><para>Unnumbered subsubsection titles appear in the table of contents of a
printed manual, but lack numbers.  Otherwise, unnumbered
subsubsections are the same as subsubsections.  In Info, unnumbered
subsubsections look exactly like ordinary subsubsections.
</para>
</item></tableitem><tableitem><tableterm><code>@appendixsubsubsec</code></tableterm>
<item><para>Conventionally, appendix commands are used only for appendices and are
lettered and numbered appropriately in a printed manual.  They also
appear in the table of contents.  In Info, appendix subsubsections look
exactly like ordinary subsubsections.
</para>
</item></tableitem><tableitem><tableterm><code>@subsubheading</code></tableterm>
<item><para>The <code>@subsubheading</code> command may be used anywhere that you need
a small heading that will not appear in the table of contents.  In
Info, subsubheadings look exactly like ordinary subsubsection
headings.
</para></item></tableitem></table>

<para>In Info,  `subsub' titles are underlined with periods.
For example,
</para>
<example xml:space="preserve">@subsubsection This is a subsubsection
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
This is a subsubsection
.......................
</group>
</example>
</section>
</node>
<node>
<nodename>Raise/lower sections</nodename>
<nodeprev>subsubsection</nodeprev>
<nodeup>Structuring</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@raisesections</code> and <code>@lowersections</code></title>
<para><indexterm index="fn">raisesections</indexterm><indexterm index="fn">lowersections</indexterm><indexterm index="cp">Raising and lowering sections</indexterm><indexterm index="cp">Sections, raising and lowering</indexterm></para>
<para>The <code>@raisesections</code> and <code>@lowersections</code> commands raise and
lower the hierarchical level of chapters, sections, subsections and the
like.  The <code>@raisesections</code> command changes sections to chapters,
subsections to sections, and so on.  The <code>@lowersections</code> command
changes chapters to sections, sections to subsections, and so on.
</para>
<para><indexterm index="cp">Include files, and section levels</indexterm>An <code>@lowersections</code> command is useful if you wish to include text
that is written as an outer or standalone Texinfo file in another
Texinfo file as an inner, included file.  If you write the command at
the beginning of the file, all your <code>@chapter</code> commands are
formatted as if they were <code>@section</code> commands, all your
<code>@section</code> command are formatted as if they were
<code>@subsection</code> commands, and so on.
</para>
<need></need><para><code>@raisesections</code> raises a command one level in the chapter
structuring hierarchy:
</para>
<example xml:space="preserve"><group>
  <r>Change</r>           <r>To</r>

@subsection     @section,
@section        @chapter,
@heading        @chapheading,
          <r>etc.</r>
</group>
</example>
<need></need><para><code>@lowersections</code> lowers a command one level in the chapter
structuring hierarchy:
</para>
<example xml:space="preserve"><group>
  <r>Change</r>           <r>To</r>

@chapter        @section,
@subsection     @subsubsection,
@heading        @subheading,
          <r>etc.</r>
</group>
</example>
<para>An <code>@raisesections</code> or <code>@lowersections</code> command changes only
those structuring commands that follow the command in the Texinfo file.
Write an <code>@raisesections</code> or <code>@lowersections</code> command on a
line of its own.
</para>
<para>An <code>@lowersections</code> command cancels an <code>@raisesections</code>
command, and vice versa.  Typically, the commands are used like this:
</para>
<example xml:space="preserve">@lowersections
@include somefile.texi
@raisesections
</example>
<para>Without the <code>@raisesections</code>, all the subsequent sections in your
document will be lowered.
</para>
<para>Repeated use of the commands continue to raise or lower the hierarchical
level a step at a time.
</para>
<para>An attempt to raise above `chapters' reproduces chapter commands; an
attempt to lower below `subsubsections' reproduces subsubsection
commands.
</para>
</section>
</node>
<node>
<nodename>Nodes</nodename>
<nodenext>Menus</nodenext>
<nodeprev>Structuring</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Nodes</title>

<para><dfn>Nodes</dfn> are the primary segments of a Texinfo file.  They do not
themselves impose a hierarchical or any other kind of structure on a file.
Nodes contain <dfn>node pointers</dfn> that name other nodes, and can contain
<dfn>menus</dfn> which are lists of nodes.  In Info, the movement commands
can carry you to a pointed-to node or to a node listed in a menu.  Node
pointers and menus provide structure for Info files just as chapters,
sections, subsections, and the like, provide structure for printed
books.
</para>
<menu>
<menuentry>
<menunode> Two Paths</menunode>
<menutitle> Two Paths</menutitle>
<menucomment>                   Different commands to structure
                                  Info output and printed output.
</menucomment>
</menuentry><menuentry>
<menunode> Node Menu Illustration</menunode>
<menutitle> Node Menu Illustration</menutitle>
<menucomment>      A diagram, and sample nodes and menus.
</menucomment>
</menuentry><menuentry>
<menunode> node</menunode>
<menutitle> node</menutitle>
<menucomment>                        Creating nodes, in detail.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo Pointer Creation</menunode>
<menutitle> makeinfo Pointer Creation</menutitle>
<menucomment>   Letting makeinfo determine node pointers.
</menucomment>
</menuentry><menuentry>
<menunode> anchor</menunode>
<menutitle> anchor</menutitle>
<menucomment>                      Defining arbitrary cross-reference targets.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Two Paths</nodename>
<nodenext>Node Menu Illustration</nodenext>
<nodeup>Nodes</nodeup>
<section>
<title>Two Paths</title>

<para>The node and menu commands and the chapter structuring commands are
technically independent of each other:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>In Info, node and menu commands provide structure.  The chapter
structuring commands generate headings with different kinds of
underlining&mdash;asterisks for chapters, hyphens for sections, and so on;
they do nothing else.
</para>
</item>
<item>
<para>In &tex;, the chapter structuring commands generate chapter and section
numbers and tables of contents.  The node and menu commands provide
information for cross references; they do nothing else.
</para></item>
</itemize>

<para>You can use node pointers and menus to structure an Info file any way
you want; and you can write a Texinfo file so that its Info output has a
different structure than its printed output.  However, virtually all
Texinfo files are written such that the structure for the Info output
corresponds to the structure for the printed output.  It is neither
convenient nor understandable to the reader to do otherwise.
</para>
<para>Generally, printed output is structured in a tree-like hierarchy in
which the chapters are the major limbs from which the sections branch
out.  Similarly, node pointers and menus are organized to create a
matching structure in the Info output.
</para>

</section>
</node>
<node>
<nodename>Node Menu Illustration</nodename>
<nodenext>node</nodenext>
<nodeprev>Two Paths</nodeprev>
<nodeup>Nodes</nodeup>
<section>
<title>Node and Menu Illustration</title>

<para>Here is a copy of the diagram shown earlier that illustrates a Texinfo
file with three chapters, each of which contains two sections.
</para>
<para>The &ldquo;root&rdquo; is at the top of the diagram and the &ldquo;leaves&rdquo; are at the
bottom.  This is how such a diagram is drawn conventionally; it
illustrates an upside-down tree.  For this reason, the root node is
called the `Top' node, and `Up' node pointers carry you closer to the
root.
</para>
<example xml:space="preserve"><group>
                          Top
                           |
         -------------------------------------
        |                  |                  |
     Chapter 1          Chapter 2          Chapter 3
        |                  |                  |
     --------           --------           --------
    |        |         |        |         |        |
 Section  Section   Section  Section   Section  Section
   1.1      1.2       2.1      2.2       3.1      3.2
</group>
</example>
<para>The fully-written command to start Chapter 2 would be this:
</para>
<example xml:space="preserve"><group>
@node     Chapter 2,  Chapter 3, Chapter 1, Top
@comment  node-name,  next,      previous,  up
</group>
</example>
<para>This <code>@node</code> line says that the name of this node is &ldquo;Chapter
2&rdquo;, the name of the `Next' node is &ldquo;Chapter 3&rdquo;, the name of the
`Previous' node is &ldquo;Chapter 1&rdquo;, and the name of the `Up' node is
&ldquo;Top&rdquo;.  You can omit writing out these node names if your document is
hierarchically organized (see <xref><xrefnodename>makeinfo Pointer Creation</xrefnodename></xref>), but the
pointer relationships still obtain.
</para>
<quotation>
<para><strong>Please Note:</strong> `Next' refers to the next node at the same
hierarchical level in the manual, not necessarily to the next node
within the Texinfo file.  In the Texinfo file, the subsequent node may
be at a lower level&mdash;a section-level node most often follows a
chapter-level node, for example.  `Next' and `Previous' refer to nodes
at the <emph>same</emph> hierarchical level.  (The `Top' node contains the
exception to this rule.  Since the `Top' node is the only node at that
level, `Next' refers to the first following node, which is almost always
a chapter or chapter-level node.)
</para></quotation>

<para>To go to Sections 2.1 and 2.2 using Info, you need a menu inside Chapter
2.  (See <xref><xrefnodename>Menus</xrefnodename></xref>.)  You would write the menu just
before the beginning of Section 2.1, like this:
</para>
<example xml:space="preserve"><group>
    @menu
    * Sect. 2.1::    Description of this section.
    * Sect. 2.2::
    @end menu
</group>
</example>
<para>Write the node for Sect. 2.1 like this:
</para>
<example xml:space="preserve"><group>
    @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
    @comment  node-name, next,      previous,  up
</group>
</example>
<para>In Info format, the `Next' and `Previous' pointers of a node usually
lead to other nodes at the same level&mdash;from chapter to chapter or from
section to section (sometimes, as shown, the `Previous' pointer points
up); an `Up' pointer usually leads to a node at the level above (closer
to the `Top' node); and a `Menu' leads to nodes at a level below (closer
to `leaves').  (A cross reference can point to a node at any level;
see <xref><xrefnodename>Cross References</xrefnodename></xref>.)
</para>
<para>Usually, an <code>@node</code> command and a chapter structuring command are
used in sequence, along with indexing commands.  (You may follow the
<code>@node</code> line with a comment line that reminds you which pointer is
which.)
</para>
<para>Here is the beginning of the chapter in this manual called &ldquo;Ending a
Texinfo File&rdquo;.  This shows an <code>@node</code> line followed by a comment
line, an <code>@chapter</code> line, and then by indexing lines.
</para>
<example xml:space="preserve"><group>
@node    Ending a File, Structuring, Beginning a File, Top
@comment node-name,     next,        previous,         up
@chapter Ending a Texinfo File
@cindex Ending a Texinfo file
@cindex Texinfo file ending
@cindex File ending
</group>
</example>

</section>
</node>
<node>
<nodename>node</nodename>
<nodenext>makeinfo Pointer Creation</nodenext>
<nodeprev>Node Menu Illustration</nodeprev>
<nodeup>Nodes</nodeup>
<section>
<title>The <code>@node</code> Command</title>

<para><indexterm index="cp">Node, defined</indexterm><indexterm index="fn">node</indexterm></para>
<para>A <dfn>node</dfn> is a segment of text that begins at an <code>@node</code>
command and continues until the next <code>@node</code> command.  The
definition of node is different from that for chapter or section.  A
chapter may contain sections and a section may contain subsections;
but a node cannot contain subnodes; the text of a node continues only
until the next <code>@node</code> command in the file.  A node usually
contains only one chapter structuring command, the one that follows
the <code>@node</code> line.  On the other hand, in printed output nodes
are used only for cross references, so a chapter or section may
contain any number of nodes.  Indeed, a chapter usually contains
several nodes, one for each section, subsection, and
subsubsection.
</para>
<para>To create a node, write an <code>@node</code> command at the beginning of a
line, and follow it with up to four arguments, separated by commas, on
the rest of the same line.  The first argument is required; it is the
name of this node.  The subsequent arguments are the names of the
`Next', `Previous', and `Up' pointers, in that order, and may be omitted
if your Texinfo document is hierarchically organized (see <xref><xrefnodename>makeinfo Pointer Creation</xrefnodename></xref>).
</para>
<para>You may insert spaces before each name if you wish; the spaces are
ignored.  You must write the name of the node and the names of the
`Next', `Previous', and `Up' pointers all on the same line.  Otherwise,
the formatters fail.  (See <inforef><inforefnodename>Top</inforefnodename><inforefrefname>info</inforefrefname><inforefinfoname>info</inforefinfoname></inforef>, for more information
about nodes in Info.)
</para>
<para>Usually, you write one of the chapter-structuring command lines
immediately after an <code>@node</code> line&mdash;for example, an
<code>@section</code> or <code>@subsection</code> line.  (See <xref><xrefnodename>Structuring Command Types</xrefnodename></xref>.)
</para>
<quotation>
<para><strong>Please note:</strong> The GNU Emacs Texinfo mode updating commands work
only with Texinfo files in which <code>@node</code> lines are followed by chapter
structuring lines.  See <xref><xrefnodename>Updating Requirements</xrefnodename></xref>.
</para></quotation>

<para>&tex; uses <code>@node</code> lines to identify the names to use for cross
references.  For this reason, you must write <code>@node</code> lines in a
Texinfo file that you intend to format for printing, even if you do not
intend to format it for Info.  (Cross references, such as the one at the
end of this sentence, are made with <code>@xref</code> and related commands;
see <xref><xrefnodename>Cross References</xrefnodename></xref>.)
</para>
<menu>
<menuentry>
<menunode> Node Names</menunode>
<menutitle> Node Names</menutitle>
<menucomment>                  How to choose node and pointer names.
</menucomment>
</menuentry><menuentry>
<menunode> Writing a Node</menunode>
<menutitle> Writing a Node</menutitle>
<menucomment>              How to write an <code>@node</code> line.
</menucomment>
</menuentry><menuentry>
<menunode> Node Line Tips</menunode>
<menutitle> Node Line Tips</menutitle>
<menucomment>              Keep names short.
</menucomment>
</menuentry><menuentry>
<menunode> Node Line Requirements</menunode>
<menutitle> Node Line Requirements</menutitle>
<menucomment>      Keep names unique, without @-commands.
</menucomment>
</menuentry><menuentry>
<menunode> First Node</menunode>
<menutitle> First Node</menutitle>
<menucomment>                  How to write a `Top' node.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo top command</menunode>
<menutitle> makeinfo top command</menutitle>
<menucomment>        How to use the <code>@top</code> command.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Node Names</nodename>
<nodenext>Writing a Node</nodenext>
<nodeup>node</nodeup>
<subsection>
<title>Choosing Node and Pointer Names</title>

<para><indexterm index="cp">Node names, choosing</indexterm>The name of a node identifies the node.  The pointers enable
you to reach other nodes and consist of the names of those nodes.
</para>
<para>Normally, a node's `Up' pointer contains the name of the node whose menu
mentions that node.  The node's `Next' pointer contains the name of the
node that follows that node in that menu and its `Previous' pointer
contains the name of the node that precedes it in that menu.  When a
node's `Previous' node is the same as its `Up' node, both node pointers
name the same node.
</para>
<para>Usually, the first node of a Texinfo file is the `Top' node, and its
`Up' and `Previous' pointers point to the <file>dir</file> file, which
contains the main menu for all of Info.
</para>
<para>The `Top' node itself contains the main or master menu for the manual.
Also, it is helpful to include a brief description of the manual in the
`Top' node.  See <xref><xrefnodename>First Node</xrefnodename></xref>, for information on how to write the
first node of a Texinfo file.
</para>
<para>Even when you explicitly specify all pointers, that does not mean you
can write the nodes in the Texinfo source file in an arbitrary order!
Because &tex; processes the file sequentially, irrespective of node
pointers, you must write the nodes in the order you wish them to appear
in the printed output.
</para>

</subsection>
</node>
<node>
<nodename>Writing a Node</nodename>
<nodenext>Node Line Tips</nodenext>
<nodeprev>Node Names</nodeprev>
<nodeup>node</nodeup>
<subsection>
<title>How to Write an <code>@node</code> Line</title>
<para><indexterm index="cp">Writing an <code>@node</code> line</indexterm><indexterm index="cp"><code>@node</code> line writing</indexterm><indexterm index="cp">Node line writing</indexterm></para>
<para>The easiest way to write an <code>@node</code> line is to write <code>@node</code>
at the beginning of a line and then the name of the node, like
this:
</para>
<example xml:space="preserve">@node <var>node-name</var>
</example>
<para>If you are using GNU Emacs, you can use the update node commands
provided by Texinfo mode to insert the names of the pointers; or you
can leave the pointers out of the Texinfo file and let <code>makeinfo</code>
insert node pointers into the Info file it creates.  (See <xref><xrefnodename>Texinfo Mode</xrefnodename></xref>, and <xref><xrefnodename>makeinfo Pointer Creation</xrefnodename></xref>.)
</para>
<para>Alternatively, you can insert the `Next', `Previous', and `Up'
pointers yourself.  If you do this, you may find it helpful to use the
Texinfo mode keyboard command <kbd>C-c C-c n</kbd>.  This command inserts
<samp>@node</samp> and a comment line listing the names of the pointers in
their proper order.  The comment line helps you keep track of which
arguments are for which pointers.  This comment line is especially useful
if you are not familiar with Texinfo.
</para>
<para>The template for a fully-written-out node line with `Next', `Previous',
and `Up' pointers looks like this:
</para>
<example xml:space="preserve">@node <var>node-name</var>, <var>next</var>, <var>previous</var>, <var>up</var>
</example>
<para>If you wish, you can ignore <code>@node</code> lines altogether in your first
draft and then use the <code>texinfo-insert-node-lines</code> command to
create <code>@node</code> lines for you.  However, we do not recommend this
practice.  It is better to name the node itself at the same time that
you write a segment so you can easily make cross references.  A large
number of cross references are an especially important feature of a good
Info file.
</para>
<para>After you have inserted an <code>@node</code> line, you should immediately
write an @-command for the chapter or section and insert its name.
Next (and this is important!), put in several index entries.  Usually,
you will find at least two and often as many as four or five ways of
referring to the node in the index.  Use them all.  This will make it
much easier for people to find the node.
</para>

</subsection>
</node>
<node>
<nodename>Node Line Tips</nodename>
<nodenext>Node Line Requirements</nodenext>
<nodeprev>Writing a Node</nodeprev>
<nodeup>node</nodeup>
<subsection>
<title><code>@node</code> Line Tips</title>

<para>Here are three suggestions:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Try to pick node names that are informative but short.
</para>
<para>In the Info file, the file name, node name, and pointer names are all
inserted on one line, which may run into the right edge of the window.
(This does not cause a problem with Info, but is ugly.)
</para>
</item>
<item>
<para>Try to pick node names that differ from each other near the beginnings
of their names.  This way, it is easy to use automatic name completion in
Info.
</para>
</item>
<item>
<para>By convention, node names are capitalized just as they would be for
section or chapter titles&mdash;initial and significant words are
capitalized; others are not.
</para></item>
</itemize>


</subsection>
</node>
<node>
<nodename>Node Line Requirements</nodename>
<nodenext>First Node</nodenext>
<nodeprev>Node Line Tips</nodeprev>
<nodeup>node</nodeup>
<subsection>
<title><code>@node</code> Line Requirements</title>

<para><indexterm index="cp">Node line requirements</indexterm><indexterm index="cp">Restrictions on node names</indexterm>Here are several requirements for <code>@node</code> lines:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item><para><indexterm index="cp">Unique nodename requirement</indexterm><indexterm index="cp">Node name must be unique</indexterm></para></item>
<item>
<para>All the node names for a single Info file must be unique.
</para>
<para>Duplicates confuse the Info movement commands.  This means, for
example, that if you end every chapter with a summary, you must name
each summary node differently.  You cannot just call each one
&ldquo;Summary&rdquo;.  You may, however, duplicate the titles of chapters, sections,
and the like.  Thus you can end each chapter in a book with a section
called &ldquo;Summary&rdquo;, so long as the node names for those sections are all
different.
</para>
</item>
<item>
<para>A pointer name must be the name of a node.
</para>
<para>The node to which a pointer points may come before or after the
node containing the pointer.
</para>
<para><indexterm index="cp">@-commands in nodename</indexterm><indexterm index="cp">Node name, should not contain @-commands</indexterm></para></item>
<item>
<para>@-commands<!-- /@w --> used in node names generally confuse Info, so you
should avoid them.  This includes punctuation characters that are
escaped with a <samp>@</samp>, such as <code>@</code> and <code>{</code>.  For a few
rare cases when this is useful, Texinfo has limited support for using
@-commands<!-- /@w --> in node names; see <xref><xrefnodename>Pointer Validation</xrefnodename></xref>.
</para>
<need></need><para>Thus, the beginning of the section called <code>@chapter</code> looks like
this:
</para>
<smallexample xml:space="preserve"><group>
@node  chapter, unnumbered &amp; appendix, makeinfo top, Structuring
@comment  node-name,  next,  previous,  up
@section @code{@@chapter}
@findex chapter
</group>
</smallexample>
</item>
<item>
<para><indexterm index="cp">Parentheses in nodename</indexterm>You cannot use parentheses in node names, because a node name such as
<samp>(foo)bar</samp> is interpreted by the Info readers as a node
<samp>bar</samp> in an Info file <file>foo</file>.
</para>
</item>
<item>
<para><indexterm index="cp">Apostrophe in nodename</indexterm><indexterm index="cp">Colon in nodename</indexterm><indexterm index="cp">Comma in nodename</indexterm><indexterm index="cp">Period in nodename</indexterm><indexterm index="cp">Characters, invalid in node name</indexterm><indexterm index="cp">Invalid characters in node names</indexterm>Unfortunately, you cannot use periods, commas, colons or apostrophes
within a node name; these confuse &tex; or the Info formatters.
</para>
<need></need><para>For example, the following is a section title:
</para>
<smallexample xml:space="preserve">@code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}
</smallexample>
<para>The corresponding node name is:
</para>
<smallexample xml:space="preserve">unnumberedsec appendixsec heading
</smallexample>
<para><indexterm index="cp">Case in node name</indexterm></para></item>
<item>
<para>Case is significant.
</para></item>
</itemize>


</subsection>
</node>
<node>
<nodename>First Node</nodename>
<nodenext>makeinfo top command</nodenext>
<nodeprev>Node Line Requirements</nodeprev>
<nodeup>node</nodeup>
<subsection>
<title>The First Node</title>
<para><indexterm index="cp">Top node is first</indexterm><indexterm index="cp">First node</indexterm></para>
<para>The first node of a Texinfo file is the <dfn>Top</dfn> node, except in an
included file (see <xref><xrefnodename>Include Files</xrefnodename></xref>).  The Top node should contain a
short summary, copying permissions, and a master menu.  See <xref><xrefnodename>The Top Node</xrefnodename></xref>, for more information on the Top node contents and examples.
</para>
<para>Here is a description of the node pointers to be used in the Top node:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para><indexterm index="cp">Up node of Top node</indexterm><indexterm index="cp">(dir) as Up node of Top node</indexterm>The Top node (which must be named <samp>top</samp> or <samp>Top</samp>) should have
as its `Up' node the name of a node in another file, where there is a
menu that leads to this file.  Specify the file name in parentheses.
</para>
<para>Usually, all Info files are installed in the same Info directory tree;
in this case, use <samp>(dir)</samp> as the parent of the Top node; this is
short for <samp>(dir)top</samp>, and specifies the Top node in the <file>dir</file>
file, which contains the main menu for the Info system as a whole. 
</para>
</item>
<item>
<para><indexterm index="cp">Previous node of Top node</indexterm>On the other hand, do not define the `Previous' node of the Top node to
be <samp>(dir)</samp>, as it causes confusing behavior for users: if you are
in the Top node and hits <key>DEL</key> to go backwards, you wind up in the
middle of the some other entry in the <file>dir</file> file, which has nothing
to do with what you were reading.
</para>
</item>
<item>
<para><indexterm index="cp">Next node of Top node</indexterm>The `Next' node of the Top node should be the first chapter in your
document.
</para>
</item>
</itemize>

<para>See <xref><xrefnodename>Installing an Info File</xrefnodename></xref>, for more information about installing
an Info file in the <file>info</file> directory.
</para>
<para>For concreteness, here is an example with explicit pointers (which you
can maintain automatically with the texinfo mode commands):
</para>
<para>Or you can leave the pointers off entirely and let the tools implicitly
define them.  This is recommended.  Thus:
</para>
<example xml:space="preserve">@node Top
</example>

</subsection>
</node>
<node>
<nodename>makeinfo top command</nodename>
<nodeprev>First Node</nodeprev>
<nodeup>node</nodeup>
<subsection>
<title>The <code>@top</code> Sectioning Command</title>
<para><indexterm index="fn">top <r>(@-command)</r></indexterm></para>
<para>A special sectioning command, <code>@top</code> should be used with the
<code>@node Top</code> line.  The <code>@top</code> sectioning command tells
<code>makeinfo</code> that it marks the `Top' node in the file.  It provides
the information that <code>makeinfo</code> needs to insert node pointers
automatically.  Write the <code>@top</code> command at the beginning of the
line immediately following the <code>@node Top</code> line.  Write the title
on the remaining part of the same line as the <code>@top</code> command.
</para>
<para>In Info, the <code>@top</code> sectioning command causes the title to appear
on a line by itself, with a line of asterisks inserted underneath, as
other sectioning commands do.
</para>
<para>In &tex; and <code>texinfo-format-buffer</code>, the <code>@top</code>
sectioning command is merely a synonym for <code>@unnumbered</code>.
Neither of these formatters require an <code>@top</code> command, and do
nothing special with it.  You can use <code>@chapter</code> or
<code>@unnumbered</code> after the <code>@node Top</code> line when you use
these formatters.  Also, you can use <code>@chapter</code> or
<code>@unnumbered</code> when you use the Texinfo updating commands to
create or update pointers and menus.
</para>
<para>Thus, in practice, a Top node starts like this:
</para>
<example xml:space="preserve">@node Top
@top Your Manual Title
</example>

</subsection>
</node>
<node>
<nodename>makeinfo Pointer Creation</nodename>
<nodenext>anchor</nodenext>
<nodeprev>node</nodeprev>
<nodeup>Nodes</nodeup>
<section>
<title>Creating Pointers with <code>makeinfo</code></title>
<para><indexterm index="cp">Creating pointers with <code>makeinfo</code></indexterm><indexterm index="cp">Pointer creation with <code>makeinfo</code></indexterm><indexterm index="cp">Automatic pointer creation with <code>makeinfo</code></indexterm></para>
<para>The <code>makeinfo</code> program has a feature for automatically defining
node pointers for a hierarchically organized file.
</para>
<para>When you take advantage of this feature, you do not need to write the
`Next', `Previous', and `Up' pointers after the name of a node.
However, you must write a sectioning command, such as <code>@chapter</code>
or <code>@section</code>, on the line immediately following each truncated
<code>@node</code> line (except that comment lines may intervene).
</para>
<para>In addition, you must follow the `Top' <code>@node</code> line with a line
beginning with <code>@top</code> to mark the `Top' node in the
file.  See <xref><xrefnodename>makeinfo top</xrefnodename><xrefprinteddesc><code>@top</code></xrefprinteddesc></xref>.
</para>
<para>Finally, you must write the name of each node (except for the `Top'
node) in a menu that is one or more hierarchical levels above the
node's hierarchical level.
</para>
<para>This node pointer insertion feature in <code>makeinfo</code> relieves you from
the need to update menus and pointers manually or with Texinfo mode
commands.  (See <xref><xrefnodename>Updating Nodes and Menus</xrefnodename></xref>.)
</para>
<para>In most cases, you will want to take advantage of this feature and not
redundantly specify node pointers.  However, Texinfo documents are not
required to be organized hierarchically or in fact contain sectioning
commands at all.  For example, if you never intend the document to be
printed.  In those cases, you will need to explicitly specify the pointers.
</para>

</section>
</node>
<node>
<nodename>anchor</nodename>
<nodeprev>makeinfo Pointer Creation</nodeprev>
<nodeup>Nodes</nodeup>
<section>
<title><code>@anchor</code>: Defining Arbitrary Cross-reference Targets</title>

<para><indexterm index="fn">anchor</indexterm><indexterm index="cp">Anchors</indexterm><indexterm index="cp">Cross-reference targets, arbitrary</indexterm><indexterm index="cp">Targets for cross-references, arbitrary</indexterm></para>
<para>An <dfn>anchor</dfn> is a position in your document, labeled so that
cross-references can refer to it, just as they can to nodes.  You create
an anchor with the <code>@anchor</code> command, and give the label as a
normal brace-delimited argument.  For example:
</para>
<example xml:space="preserve">This marks the @anchor{x-spot}spot.
&dots;
@xref{x-spot,,the spot}.
</example>
<para>produces:
</para>
<example xml:space="preserve">This marks the spot.
&dots;
See [the spot], page 1.
</example>
<para>As you can see, the <code>@anchor</code> command itself produces no output.
This example defines an anchor `x-spot' just before the word `spot'.
You can refer to it later with an <code>@xref</code> or other cross-reference
command, as shown.  See <xref><xrefnodename>Cross References</xrefnodename></xref>, for details on the
cross-reference commands.
</para>
<para>It is best to put <code>@anchor</code> commands just before the position you
wish to refer to; that way, the reader's eye is led on to the correct
text when they jump to the anchor.  You can put the <code>@anchor</code>
command on a line by itself if that helps readability of the source.
Spaces are always ignored after <code>@anchor</code>.
</para>
<para>Anchor names and node names may not conflict.  Anchors and nodes are
given similar treatment in some ways; for example, the <code>goto-node</code>
command in standalone Info takes either an anchor name or a node name as
an argument.  (See <xref><xrefnodename>goto-node</xrefnodename><xrefinfofile>info-stnd</xrefinfofile><xrefprintedname>GNU Info</xrefprintedname></xref>.)
</para>

</section>
</node>
<node>
<nodename>Menus</nodename>
<nodenext>Cross References</nodenext>
<nodeprev>Nodes</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Menus</title>
<para><indexterm index="cp">Menus</indexterm><indexterm index="fn">menu</indexterm></para>
<para><dfn>Menus</dfn> contain pointers to subordinate nodes.<footnote><para>Menus can
carry you to any node, regardless of the hierarchical structure; even to
nodes in a different Info file.  However, the GNU Emacs Texinfo mode
updating commands work only to create menus of subordinate nodes.
Conventionally, cross references are used to refer to other nodes.
</para></footnote> In
Info, you use menus to go to such nodes.  Menus have no effect in
printed manuals and do not appear in them.
</para>
<para>By convention, a menu is put at the end of a node since a reader who
uses the menu may not see text that follows it.  Furthermore, a node
that has a menu should not contain much text. If you have a lot of text
and a menu, move most of the text into a new subnode&mdash;all but a few
lines.  Otherwise, a reader with a terminal that displays only a few
lines may miss the menu and its associated text.  As a practical matter,
you should locate a menu within 20 lines of the beginning of the
node.
</para>
<menu>
<menuentry>
<menunode> Menu Location</menunode>
<menutitle> Menu Location</menutitle>
<menucomment>               Put a menu in a short node.
</menucomment>
</menuentry><menuentry>
<menunode> Writing a Menu</menunode>
<menutitle> Writing a Menu</menutitle>
<menucomment>              What is a menu?
</menucomment>
</menuentry><menuentry>
<menunode> Menu Parts</menunode>
<menutitle> Menu Parts</menutitle>
<menucomment>                  A menu entry has three parts.
</menucomment>
</menuentry><menuentry>
<menunode> Less Cluttered Menu Entry</menunode>
<menutitle> Less Cluttered Menu Entry</menutitle>
<menucomment>   Two part menu entry.
</menucomment>
</menuentry><menuentry>
<menunode> Menu Example</menunode>
<menutitle> Menu Example</menutitle>
<menucomment>                Two and three part menu entries.
</menucomment>
</menuentry><menuentry>
<menunode> Other Info Files</menunode>
<menutitle> Other Info Files</menutitle>
<menucomment>            How to refer to a different Info file.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Menu Location</nodename>
<nodenext>Writing a Menu</nodenext>
<nodeprev>Menus</nodeprev>
<nodeup>Menus</nodeup>
<para><indexterm index="cp">Menu location</indexterm><indexterm index="cp">Location of menus</indexterm><indexterm index="cp">Nodes for menus are short</indexterm><indexterm index="cp">Short nodes for menus</indexterm></para>
<para>The short text before a menu may look awkward in a printed manual.  To
avoid this, you can write a menu near the beginning of its node and
follow the menu by an <code>@node</code> line, and then an <code>@heading</code>
line located within <code>@ifinfo</code> and <code>@end ifinfo</code>.  This way,
the menu, <code>@node</code> line, and title appear only in the Info file,
not the printed document.
</para>
<para>For example, the preceding two paragraphs follow an Info-only menu,
<code>@node</code> line, and heading, and look like this:
</para>
<example xml:space="preserve"><group>
@menu
* Menu Location::             Put a menu in a short node.
* Writing a Menu::            What is a menu?
* Menu Parts::                A menu entry has three parts.
* Less Cluttered Menu Entry:: Two part menu entry.
* Menu Example::              Two and three part entries.
* Other Info Files::          How to refer to a different
                                Info file.
@end menu

@node Menu Location, Writing a Menu, , Menus
@ifinfo
@heading Menus Need Short Nodes
@end ifinfo
</group>
</example>
<para>The Texinfo file for this document contains a number of
examples of this procedure; one is at the beginning of this chapter.
</para>

</node>
<node>
<nodename>Writing a Menu</nodename>
<nodenext>Menu Parts</nodenext>
<nodeprev>Menu Location</nodeprev>
<nodeup>Menus</nodeup>
<section>
<title>Writing a Menu</title>
<para><indexterm index="cp">Writing a menu</indexterm><indexterm index="cp">Menu writing</indexterm></para>
<para>A menu consists of an <code>@menu</code> command on a line by
itself followed by menu entry lines or menu comment lines
and then by an <code>@end menu</code> command on a line by
itself.
</para>
<para>A menu looks like this:
</para>
<example xml:space="preserve"><group>
@menu
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                  several files at once.
@end menu
</group>
</example>
<para>In a menu, every line that begins with an <samp>* </samp><!-- /@w --> is a <dfn>menu
entry</dfn>.  (Note the space after the asterisk.)  A line that does not
start with an <samp>* </samp><!-- /@w --> may also appear in a menu.  Such a line is
not a menu entry but is a menu comment line that appears in the Info
file.  In the example above, the line <samp>Larger Units of Text</samp> is a
menu comment line; the two lines starting with <samp>* </samp><!-- /@w --> are menu
<indexterm index="cp">Spaces, in menus</indexterm>entries.  Space characters in a menu are preserved as-is; this allows
you to format the menu as you wish.
</para>

</section>
</node>
<node>
<nodename>Menu Parts</nodename>
<nodenext>Less Cluttered Menu Entry</nodenext>
<nodeprev>Writing a Menu</nodeprev>
<nodeup>Menus</nodeup>
<section>
<title>The Parts of a Menu</title>
<para><indexterm index="cp">Parts of a menu</indexterm><indexterm index="cp">Menu parts</indexterm><indexterm index="cp"><code>@menu</code> parts</indexterm></para>
<para>A menu entry has three parts, only the second of which is required:
</para>
<enumerate first="1"><item>
<para>The menu entry name (optional).
</para>
</item>
<item>
<para>The name of the node (required).
</para>
</item>
<item>
<para>A description of the item (optional).
</para></item>
</enumerate>

<para>The template for a menu entry looks like this:
</para>
<example xml:space="preserve">* <var>menu-entry-name</var>: <var>node-name</var>.   <var>description</var>
</example>
<para>Follow the menu entry name with a single colon and follow the node name
with tab, comma, period, or newline.
</para>
<para>In Info, a user selects a node with the <kbd>m</kbd> (<code>Info-menu</code>)
command.  The menu entry name is what the user types after the <kbd>m</kbd>
command.
</para>
<para>The third part of a menu entry is a descriptive phrase or sentence.
Menu entry names and node names are often short; the description
explains to the reader what the node is about.  A useful description
complements the node name rather than repeats it.  The description,
which is optional, can spread over two or more lines; if it does, some
authors prefer to indent the second line while others prefer to align it
with the first (and all others).  It's up to you.
</para>

</section>
</node>
<node>
<nodename>Less Cluttered Menu Entry</nodename>
<nodenext>Menu Example</nodenext>
<nodeprev>Menu Parts</nodeprev>
<nodeup>Menus</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Less Cluttered Menu Entry</title>
<para><indexterm index="cp">Two part menu entry</indexterm><indexterm index="cp">Double-colon menu entries</indexterm><indexterm index="cp">Menu entries with two colons</indexterm><indexterm index="cp">Less cluttered menu entry</indexterm><indexterm index="cp">Uncluttered menu entry</indexterm></para>
<para>When the menu entry name and node name are the same, you can write
the name immediately after the asterisk and space at the beginning of
the line and follow the name with two colons.
</para>
<need></need><para>For example, write
</para>
<example xml:space="preserve">* Name::                                    <var>description</var>
</example>
<need></need><para>instead of
</para>
<example xml:space="preserve">* Name: Name.                               <var>description</var>
</example>
<para>You should use the node name for the menu entry name whenever possible,
since it reduces visual clutter in the menu.
</para>
</section>
</node>
<node>
<nodename>Menu Example</nodename>
<nodenext>Other Info Files</nodenext>
<nodeprev>Less Cluttered Menu Entry</nodeprev>
<nodeup>Menus</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>A Menu Example</title>
<para><indexterm index="cp">Menu example</indexterm><indexterm index="cp">Example menu</indexterm></para>
<para>A menu looks like this in Texinfo:
</para>
<example xml:space="preserve"><group>
@menu
* menu entry name: Node name.   A short description.
* Node name::                   This form is preferred.
@end menu
</group>
</example>
<need></need><para>This produces:
</para>
<example xml:space="preserve"><group>
* menu:

* menu entry name: Node name.   A short description.
* Node name::                   This form is preferred.
</group>
</example>
<need></need><para>Here is an example as you might see it in a Texinfo file:
</para>
<example xml:space="preserve"><group>
@menu
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                  several files at once.
@end menu
</group>
</example>
<need></need><para>This produces:
</para>
<example xml:space="preserve"><group>
* menu:
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                  several files at once.
</group>
</example>
<para>In this example, the menu has two entries.  <samp>Files</samp> is both a menu
entry name and the name of the node referred to by that name.
<samp>Multiples</samp> is the menu entry name; it refers to the node named
<samp>Buffers</samp>. The line <samp>Larger Units of Text</samp> is a comment; it
appears in the menu, but is not an entry.
</para>
<para>Since no file name is specified with either <samp>Files</samp> or
<samp>Buffers</samp>, they must be the names of nodes in the same Info file
(see <xref><xrefnodename>Other Info Files</xrefnodename><xrefprinteddesc>Referring to Other Info Files</xrefprinteddesc></xref>).
</para>
</section>
</node>
<node>
<nodename>Other Info Files</nodename>
<nodeprev>Menu Example</nodeprev>
<nodeup>Menus</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Referring to Other Info Files</title>
<para><indexterm index="cp">Referring to other Info files</indexterm><indexterm index="cp">Nodes in other Info files</indexterm><indexterm index="cp">Other Info files' nodes</indexterm><indexterm index="cp">Going to other Info files' nodes</indexterm><indexterm index="cp">Info; other files' nodes</indexterm></para>
<para>You can create a menu entry that enables a reader in Info to go to a
node in another Info file by writing the file name in parentheses just
before the node name.  In this case, you should use the three-part menu
entry format, which saves the reader from having to type the file
name.
</para>
<need></need><para>The format looks like this:
</para>
<example xml:space="preserve"><group>
@menu
* <var>first-entry-name</var>:(<var>filename</var>)<var>nodename</var>.     <var>description</var>
* <var>second-entry-name</var>:(<var>filename</var>)<var>second-node</var>. <var>description</var>
@end menu
</group>
</example>
<para>For example, to refer directly to the <samp>Outlining</samp> and
<samp>Rebinding</samp> nodes in the <cite>Emacs Manual</cite>, you would write a
menu like this:
</para>
<example xml:space="preserve"><group>
@menu
* Outlining: (emacs)Outline Mode. The major mode for
                                  editing outlines.
* Rebinding: (emacs)Rebinding.    How to redefine the
                                  meaning of a key.
@end menu
</group>
</example>
<para>If you do not list the node name, but only name the file, then Info
presumes that you are referring to the `Top' node.
</para>
<para>The <file>dir</file> file that contains the main menu for Info has menu
entries that list only file names.  These take you directly to the `Top'
nodes of each Info document.  (See <xref><xrefnodename>Installing an Info File</xrefnodename></xref>.)
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
* Info: (info).         Documentation browsing system.
* Emacs: (emacs).       The extensible, self-documenting
                        text editor.
</group>
</example>
<para>(The <file>dir</file> top level directory for the Info system is an Info file,
not a Texinfo file, but a menu entry looks the same in both types of
file.)
</para>
<para>The GNU Emacs Texinfo mode menu updating commands only work with nodes
within the current buffer, so you cannot use them to create menus that
refer to other files.  You must write such menus by hand.
</para>

</section>
</node>
<node>
<nodename>Cross References</nodename>
<nodenext>Marking Text</nodenext>
<nodeprev>Menus</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Cross References</title>
<para><indexterm index="cp">Making cross references</indexterm><indexterm index="cp">Cross references</indexterm><indexterm index="cp">References</indexterm></para>
<para><dfn>Cross references</dfn> are used to refer the reader to other parts of the
same or different Texinfo files.  In Texinfo, nodes and anchors are the
places to which cross references can refer.
</para>
<menu>
<menuentry>
<menunode> References</menunode>
<menutitle> References</menutitle>
<menucomment>                  What cross references are for.
</menucomment>
</menuentry><menuentry>
<menunode> Cross Reference Commands</menunode>
<menutitle> Cross Reference Commands</menutitle>
<menucomment>    A summary of the different commands.
</menucomment>
</menuentry><menuentry>
<menunode> Cross Reference Parts</menunode>
<menutitle> Cross Reference Parts</menutitle>
<menucomment>       A cross reference has several parts.
</menucomment>
</menuentry><menuentry>
<menunode> xref</menunode>
<menutitle> xref</menutitle>
<menucomment>                        Begin a reference with `See' &dots;
</menucomment>
</menuentry><menuentry>
<menunode> Top Node Naming</menunode>
<menutitle> Top Node Naming</menutitle>
<menucomment>             How to refer to the beginning of another file.
</menucomment>
</menuentry><menuentry>
<menunode> ref</menunode>
<menutitle> ref</menutitle>
<menucomment>                         A reference for the last part of a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> pxref</menunode>
<menutitle> pxref</menutitle>
<menucomment>                       How to write a parenthetical cross reference.
</menucomment>
</menuentry><menuentry>
<menunode> inforef</menunode>
<menutitle> inforef</menutitle>
<menucomment>                     How to refer to an Info-only file.
</menucomment>
</menuentry><menuentry>
<menunode> uref</menunode>
<menutitle> uref</menutitle>
<menucomment>                        How to refer to a uniform resource locator.
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>References</nodename>
<nodenext>Cross Reference Commands</nodenext>
<nodeprev>Cross References</nodeprev>
<nodeup>Cross References</nodeup>

<para>Often, but not always, a printed document should be designed so that
it can be read sequentially.  People tire of flipping back and forth
to find information that should be presented to them as they need
it.
</para>
<para>However, in any document, some information will be too detailed for
the current context, or incidental to it; use cross references to
provide access to such information.  Also, an online help system or a
reference manual is not like a novel; few read such documents in
sequence from beginning to end.  Instead, people look up what they
need.  For this reason, such creations should contain many cross
references to help readers find other information that they may not
have read.
</para>
<para>In a printed manual, a cross reference results in a page reference,
unless it is to another manual altogether, in which case the cross
reference names that manual.
</para>
<para>In Info, a cross reference results in an entry that you can follow using
the Info <samp>f</samp> command.  (See <inforef><inforefnodename>Help-Adv</inforefnodename><inforefrefname>Some advanced Info commands</inforefrefname><inforefinfoname>info</inforefinfoname></inforef>.)
</para>
<para>The various cross reference commands use nodes (or anchors,
see <xref><xrefnodename>anchor</xrefnodename><xrefprinteddesc><code>@anchor</code></xrefprinteddesc></xref>) to define cross reference locations.
This is evident in Info, in which a cross reference takes you to the
specified location.  &tex; also uses nodes to define cross reference
locations, but the action is less obvious.  When &tex; generates a DVI
file, it records each node's page number and uses the page numbers in making
references.  Thus, if you are writing a manual that will only be
printed, and will not be used online, you must nonetheless write
<code>@node</code> lines to name the places to which you make cross
references.
</para>
<need></need></node>
<node>
<nodename>Cross Reference Commands</nodename>
<nodenext>Cross Reference Parts</nodenext>
<nodeprev>References</nodeprev>
<nodeup>Cross References</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Different Cross Reference Commands</title>
<para><indexterm index="cp">Different cross reference commands</indexterm></para>
<para>There are four different cross reference commands:
</para>
<table><tableitem><tableterm><code>@xref</code></tableterm>
<item><para>Used to start a sentence in the printed manual saying `See &dots;'<!-- /@w -->
or an Info cross-reference saying <samp>*Note <var>name</var>: <var>node</var>.</samp>.
</para>
</item></tableitem><tableitem><tableterm><code>@ref</code></tableterm>
<item><para>Used within or, more often, at the end of a sentence; same as
<code>@xref</code> for Info; produces just the reference in the printed
manual without a preceding `See'.
</para>
</item></tableitem><tableitem><tableterm><code>@pxref</code></tableterm>
<item><para>Used within parentheses to make a reference that suits both an Info
file and a printed book.  Starts with a lower case `see' within the
printed manual. (<samp>p</samp> is for `parenthesis'.)
</para>
</item></tableitem><tableitem><tableterm><code>@inforef</code></tableterm>
<item><para>Used to make a reference to an Info file for which there is no printed
manual.
</para></item></tableitem></table>

<para>(The <code>@cite</code> command is used to make references to books and
manuals for which there is no corresponding Info file and, therefore,
no node to which to point.   See <xref><xrefnodename>cite</xrefnodename><xrefprinteddesc><code>@cite</code></xrefprinteddesc></xref>.)
</para>
</section>
</node>
<node>
<nodename>Cross Reference Parts</nodename>
<nodenext>xref</nodenext>
<nodeprev>Cross Reference Commands</nodeprev>
<nodeup>Cross References</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Parts of a Cross Reference</title>
<para><indexterm index="cp">Cross reference parts</indexterm><indexterm index="cp">Parts of a cross reference</indexterm></para>
<para>A cross reference command requires only one argument, which is the
name of the node to which it refers.  But a cross reference command
may contain up to four additional arguments.  By using these
arguments, you can provide a cross reference name for Info, a topic
description or section title for the printed output, the name of a
different Info file, and the name of a different printed
manual.
</para>
<para>Here is a simple cross reference example:
</para>
<example xml:space="preserve">@xref{Node name}.
</example>
<para>which produces
</para>
<example xml:space="preserve">*Note Node name::.
</example>
<para>and
</para>
<quotation>
<para>See Section <var>nnn</var> [Node name], page <var>ppp</var>.
</para></quotation>

<need></need><para>Here is an example of a full five-part cross reference:
</para>
<example xml:space="preserve"><group>
@xref{Node name, Cross Reference Name, Particular Topic,
info-file-name, A Printed Manual}, for details.
</group>
</example>
<para>which produces
</para>
<example xml:space="preserve">*Note Cross Reference Name: (info-file-name)Node name,
for details.
</example>
<para>in Info and
</para>
<quotation>
<para>See section &ldquo;Particular Topic&rdquo; in <i>A Printed Manual</i>, for details.
</para></quotation>

<para>in a printed book.
</para>
<para>The five possible arguments for a cross reference are:
</para>
<enumerate first="1"><item>
<para>The node or anchor name (required).  This is the location to which the
cross reference takes you.  In a printed document, the location of the
node provides the page reference only for references within the same
document.
</para>
</item>
<item>
<para>The cross reference name for the Info reference, if it is to be different
from the node name.  If you include this argument, it becomes
the first part of the cross reference.  It is usually omitted.
</para>
</item>
<item>
<para>A topic description or section name.  Often, this is the title of the
section.  This is used as the name of the reference in the printed
manual.  If omitted, the node name is used.
</para>
</item>
<item>
<para>The name of the Info file in which the reference is located, if it is
different from the current file.  You need not include any <samp>.info</samp>
suffix on the file name, since Info readers try appending it
automatically.
</para>
</item>
<item>
<para>The name of a printed manual from a different Texinfo file.
</para></item>
</enumerate>

<para>The template for a full five argument cross reference looks like
this:
</para>
<example xml:space="preserve"><group>
@xref{<var>node-name</var>, <var>cross-reference-name</var>, <var>title-or-topic</var>,
<var>info-file-name</var>, <var>printed-manual-title</var>}.
</group>
</example>
<para>Cross references with one, two, three, four, and five arguments are
described separately following the description of <code>@xref</code>.
</para>
<para>Write a node name in a cross reference in exactly the same way as in
the <code>@node</code> line, including the same capitalization; otherwise, the
formatters may not find the reference.
</para>
<para>You can write cross reference commands within a paragraph, but note
how Info and &tex; format the output of each of the various commands:
write <code>@xref</code> at the beginning of a sentence; write
<code>@pxref</code> only within parentheses, and so on.
</para>
</section>
</node>
<node>
<nodename>xref</nodename>
<nodenext>Top Node Naming</nodenext>
<nodeprev>Cross Reference Parts</nodeprev>
<nodeup>Cross References</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@xref</code></title>
<para><indexterm index="fn">xref</indexterm><indexterm index="cp">Cross references using <code>@xref</code></indexterm><indexterm index="cp">References using <code>@xref</code></indexterm></para>
<para>The <code>@xref</code> command generates a cross reference for the
beginning of a sentence.  The Info formatting commands convert it into
an Info cross reference, which the Info <samp>f</samp> command can use to
bring you directly to another node.  The &tex; typesetting commands
convert it into a page reference, or a reference to another book or
manual.
</para>
<menu>
<menuentry>
<menunode> Reference Syntax</menunode>
<menutitle> Reference Syntax</menutitle>
<menucomment>            What a reference looks like and requires.
</menucomment>
</menuentry><menuentry>
<menunode> One Argument</menunode>
<menutitle> One Argument</menutitle>
<menucomment>                <code>@xref</code> with one argument.
</menucomment>
</menuentry><menuentry>
<menunode> Two Arguments</menunode>
<menutitle> Two Arguments</menutitle>
<menucomment>               <code>@xref</code> with two arguments.
</menucomment>
</menuentry><menuentry>
<menunode> Three Arguments</menunode>
<menutitle> Three Arguments</menutitle>
<menucomment>             <code>@xref</code> with three arguments.
</menucomment>
</menuentry><menuentry>
<menunode> Four and Five Arguments</menunode>
<menutitle> Four and Five Arguments</menutitle>
<menucomment>     <code>@xref</code> with four and five arguments.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Reference Syntax</nodename>
<nodenext>One Argument</nodenext>
<nodeprev>xref</nodeprev>
<nodeup>xref</nodeup>

<para>Most often, an Info cross reference looks like this:
</para>
<example xml:space="preserve">*Note <var>node-name</var>::.
</example>
<para>or like this
</para>
<example xml:space="preserve">*Note <var>cross-reference-name</var>: <var>node-name</var>.
</example>
<para>In &tex;, a cross reference looks like this:
</para>
<quotation>
<para>See Section <var>section-number</var> [<var>node-name</var>], page <var>page</var>.
</para></quotation>

<para>or like this
</para>
<quotation>
<para>See Section <var>section-number</var> [<var>title-or-topic</var>], page <var>page</var>.
</para></quotation>

<para>The <code>@xref</code> command does not generate a period or comma to end
the cross reference in either the Info file or the printed output.
You must write that period or comma yourself; otherwise, Info will not
recognize the end of the reference.  (The <code>@pxref</code> command works
differently.  See <xref><xrefnodename>pxref</xrefnodename><xrefprinteddesc><code>@pxref</code></xrefprinteddesc></xref>.)
</para>
<quotation>
<para><strong>Please note:</strong> A period or comma <strong>must</strong> follow the closing
brace of an <code>@xref</code>.  It is required to terminate the cross
reference.  This period or comma will appear in the output, both in
the Info file and in the printed manual.
</para></quotation>

<para><code>@xref</code> must refer to an Info node by name.  Use <code>@node</code>
to define the node (see <xref><xrefnodename>Writing a Node</xrefnodename></xref>).
</para>
<para><code>@xref</code> is followed by several arguments inside braces, separated by
commas.  Whitespace before and after these commas is ignored.
</para>
<para>A cross reference requires only the name of a node; but it may contain
up to four additional arguments.  Each of these variations produces a
cross reference that looks somewhat different.
</para>
<quotation>
<para><strong>Please note:</strong> Commas separate arguments in a cross reference;
avoid including them in the title or other part lest the formatters
mistake them for separators.
</para></quotation>

</node>
<node>
<nodename>One Argument</nodename>
<nodenext>Two Arguments</nodenext>
<nodeprev>Reference Syntax</nodeprev>
<nodeup>xref</nodeup>
<subsection>
<title><code>@xref</code> with One Argument</title>

<para>The simplest form of <code>@xref</code> takes one argument, the name of
another node in the same Info file.    The Info formatters produce
output that the Info readers can use to jump to the reference; &tex;
produces output that specifies the page and section number for you.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">@xref{Tropical Storms}.
</example>
<para>produces
</para>
<example xml:space="preserve">*Note Tropical Storms::.
</example>
<para>and
</para>
<quotation>
<para>See Section 3.1 [Tropical Storms], page 24.
</para></quotation>

<para>(Note that in the preceding example the closing brace is followed by a
period.)
</para>
<para>You can write a clause after the cross reference, like this:
</para>
<example xml:space="preserve">@xref{Tropical Storms}, for more info.
</example>
<para>which produces
</para>
<example xml:space="preserve">*Note Tropical Storms::, for more info.
</example>
<para>and
</para>
<quotation>
<para>See Section 3.1 [Tropical Storms], page 24, for more info.
</para></quotation>

<para>(Note that in the preceding example the closing brace is followed by a
comma, and then by the clause, which is followed by a period.)
</para>
</subsection>
</node>
<node>
<nodename>Two Arguments</nodename>
<nodenext>Three Arguments</nodenext>
<nodeprev>One Argument</nodeprev>
<nodeup>xref</nodeup>
<subsection>
<title><code>@xref</code> with Two Arguments</title>

<para>With two arguments, the second is used as the name of the Info cross
reference, while the first is still the name of the node to which the
cross reference points.
</para>
<need></need><para>The template is like this:
</para>
<example xml:space="preserve">@xref{<var>node-name</var>, <var>cross-reference-name</var>}.
</example>
<need></need><para>For example,
</para>
<example xml:space="preserve">@xref{Electrical Effects, Lightning}.
</example>
<para>produces:
</para>
<example xml:space="preserve">*Note Lightning: Electrical Effects.
</example>
<para>and
</para>
<quotation>
<para>See Section 5.2 [Electrical Effects], page 57.
</para></quotation>

<para>(Note that in the preceding example the closing brace is followed by a
period; and that the node name is printed, not the cross reference name.)
</para>
<para>You can write a clause after the cross reference, like this:
</para>
<example xml:space="preserve">@xref{Electrical Effects, Lightning}, for more info.
</example>
<para>which produces
</para><example xml:space="preserve">*Note Lightning: Electrical Effects, for more info.
</example>
<para>and
</para>
<quotation>
<para>See Section 5.2 [Electrical Effects], page 57, for more info.
</para></quotation>

<para>(Note that in the preceding example the closing brace is followed by a
comma, and then by the clause, which is followed by a period.)
</para>
</subsection>
</node>
<node>
<nodename>Three Arguments</nodename>
<nodenext>Four and Five Arguments</nodenext>
<nodeprev>Two Arguments</nodeprev>
<nodeup>xref</nodeup>
<subsection>
<title><code>@xref</code> with Three Arguments</title>

<para>A third argument replaces the node name in the &tex; output.  The third
argument should be the name of the section in the printed output, or
else state the topic discussed by that section.  Often, you will want to
use initial upper case letters so it will be easier to read when the
reference is printed.  Use a third argument when the node name is
unsuitable because of syntax or meaning.
</para>
<para>Remember to avoid placing a comma within the title or topic section of
a cross reference, or within any other section.  The formatters divide
cross references into arguments according to the commas; a comma
within a title or other section will divide it into two arguments.  In
a reference, you need to write a title such as &ldquo;Clouds, Mist, and
Fog&rdquo; without the commas.
</para>
<para>Also, remember to write a comma or period after the closing brace of an
<code>@xref</code> to terminate the cross reference.  In the following
examples, a clause follows a terminating comma.
</para>

<need></need><para>The template is like this:
</para>
<example xml:space="preserve"><group>
@xref{<var>node-name</var>, <var>cross-reference-name</var>, <var>title-or-topic</var>}.
</group>
</example>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@xref{Electrical Effects, Lightning, Thunder and Lightning},
for details.
</group>
</example>
<para>produces
</para>
<example xml:space="preserve">*Note Lightning: Electrical Effects, for details.
</example>
<para>and
</para>
<quotation>
<para>See Section 5.2 [Thunder and Lightning], page 57, for details.
</para></quotation>

<para>If a third argument is given and the second one is empty, then the
third argument serves both.  (Note how two commas, side by side, mark
the empty second argument.)
</para>
<example xml:space="preserve"><group>
@xref{Electrical Effects, , Thunder and Lightning},
for details.
</group>
</example>
<para>produces
</para>
<example xml:space="preserve">*Note Thunder and Lightning: Electrical Effects, for details.
</example>
<para>and
</para>
<quotation>
<para>See Section 5.2 [Thunder and Lightning], page 57, for details.
</para></quotation>

<para>As a practical matter, it is often best to write cross references with
just the first argument if the node name and the section title are the
same, and with the first and third arguments if the node name and title
are different.
</para>
<para>Here are several examples from <cite>The GNU Awk User's Guide</cite>:
</para>
<smallexample xml:space="preserve">@xref{Sample Program}.
@xref{Glossary}.
@xref{Case-sensitivity, ,Case-sensitivity in Matching}.
@xref{Close Output, , Closing Output Files and Pipes},
   for more information.
@xref{Regexp, , Regular Expressions as Patterns}.
</smallexample>
</subsection>
</node>
<node>
<nodename>Four and Five Arguments</nodename>
<nodeprev>Three Arguments</nodeprev>
<nodeup>xref</nodeup>
<subsection>
<title><code>@xref</code> with Four and Five Arguments</title>

<para>In a cross reference, a fourth argument specifies the name of another
Info file, different from the file in which the reference appears, and
a fifth argument specifies its title as a printed manual.
</para>
<para>Remember that a comma or period must follow the closing brace of an
<code>@xref</code> command to terminate the cross reference.  In the
following examples, a clause follows a terminating comma.
</para>
<need></need><para>The template is:
</para>
<example xml:space="preserve"><group>
@xref{<var>node-name</var>, <var>cross-reference-name</var>, <var>title-or-topic</var>,
<var>info-file-name</var>, <var>printed-manual-title</var>}.
</group>
</example>
<need></need><para>For example,
</para>
<example xml:space="preserve">@xref{Electrical Effects, Lightning, Thunder and Lightning,
weather, An Introduction to Meteorology}, for details.
</example>
<para>produces
</para>
<example xml:space="preserve">*Note Lightning: (weather)Electrical Effects, for details.
</example>
<para>The name of the Info file is enclosed in parentheses and precedes
the name of the node.
</para>
<para>In a printed manual, the reference looks like this:
</para>
<quotation>
<para>See section &ldquo;Thunder and Lightning&rdquo; in <i>An Introduction to
Meteorology</i>, for details.
</para></quotation>

<para>The title of the printed manual is typeset in italics; and the
reference lacks a page number since &tex; cannot know to which page a
reference refers when that reference is to another manual.
</para>
<para>Often, you will leave out the second argument when you use the long
version of <code>@xref</code>.  In this case, the third argument, the topic
description, will be used as the cross reference name in Info.
</para>
<para>The template looks like this:
</para>
<example xml:space="preserve">@xref{<var>node-name</var>, , <var>title-or-topic</var>, <var>info-file-name</var>,
<var>printed-manual-title</var>}, for details.
</example>
<para>which produces
</para>
<example xml:space="preserve">*Note <var>title-or-topic</var>: (<var>info-file-name</var>)<var>node-name</var>, for details.
</example>
<para>and
</para>
<quotation>
<para>See section <var>title-or-topic</var> in <var>printed-manual-title</var>, for details.
</para></quotation>

<need></need><para>For example,
</para>
<example xml:space="preserve">@xref{Electrical Effects, , Thunder and Lightning,
weather, An Introduction to Meteorology}, for details.
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
*Note Thunder and Lightning: (weather)Electrical Effects,
for details.
</group>
</example>
<para>and
</para>
<quotation>
<para>See section &ldquo;Thunder and Lightning&rdquo; in <i>An Introduction to
Meteorology</i>, for details.
</para></quotation>

<para>On rare occasions, you may want to refer to another Info file that
is within a single printed manual&mdash;when multiple Texinfo files are
incorporated into the same &tex; run but make separate Info files.
In this case, you need to specify only the fourth argument, and not
the fifth.
</para>
</subsection>
</node>
<node>
<nodename>Top Node Naming</nodename>
<nodenext>ref</nodenext>
<nodeprev>xref</nodeprev>
<nodeup>Cross References</nodeup>
<section>
<title>Naming a `Top' Node</title>
<para><indexterm index="cp">Naming a `Top' Node in references</indexterm><indexterm index="cp"><samp><r>Top</r></samp> node naming for references</indexterm></para>
<para>In a cross reference, you must always name a node.  This means that in
order to refer to a whole manual, you must identify the `Top' node by
writing it as the first argument to the <code>@xref</code> command.  (This
is different from the way you write a menu entry; see <xref><xrefnodename>Other Info Files</xrefnodename><xrefprinteddesc>Referring to Other Info Files</xrefprinteddesc></xref>.)  At the same time, to
provide a meaningful section topic or title in the printed cross
reference (instead of the word `Top'), you must write an appropriate
entry for the third argument to the <code>@xref</code> command.
</para>

<para>Thus, to make a cross reference to <cite>The GNU Make Manual</cite>,
write:
</para>
<example xml:space="preserve">@xref{Top, , Overview, make, The GNU Make Manual}.
</example>
<para>which produces
</para>
<example xml:space="preserve">*Note Overview: (make)Top.
</example>
<para>and
</para>
<quotation>
<para>See section &ldquo;Overview&rdquo; in <i>The GNU Make Manual</i>.
</para></quotation>

<para>In this example, <samp>Top</samp> is the name of the first node, and
<samp>Overview</samp> is the name of the first section of the manual.
</para></section>
</node>
<node>
<nodename>ref</nodename>
<nodenext>pxref</nodenext>
<nodeprev>Top Node Naming</nodeprev>
<nodeup>Cross References</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@ref</code></title>
<para><indexterm index="cp">Cross references using <code>@ref</code></indexterm><indexterm index="cp">References using <code>@ref</code></indexterm><indexterm index="fn">ref</indexterm></para>
<para><code>@ref</code> is nearly the same as <code>@xref</code> except that it does
not generate a `See' in the printed output, just the reference itself.
This makes it useful as the last part of a sentence.
</para>
<need></need><para>For example,
</para>
<para><indexterm index="cp">Hurricanes</indexterm></para><example xml:space="preserve">For more information, see @ref{Hurricanes}.
</example>
<para>produces
</para>
<example xml:space="preserve">For more information, see *Note Hurricanes::.
</example>
<para>and
</para>
<quotation>
<para>For more information, see Section 8.2 [Hurricanes], page 123.
</para></quotation>

<para>The <code>@ref</code> command sometimes leads writers to express themselves
in a manner that is suitable for a printed manual but looks awkward
in the Info format.  Bear in mind that your audience will be using
both the printed and the Info format.
</para>
<need></need><para>For example,
</para>
<para><indexterm index="cp">Sea surges</indexterm></para><example xml:space="preserve"><group>
Sea surges are described in @ref{Hurricanes}.
</group>
</example>
<need></need><para>produces
</para>
<quotation>
<para>Sea surges are described in Section 6.7 [Hurricanes], page 72.
</para></quotation>

<need></need><para>in a printed document, and the following in Info:
</para>
<example xml:space="preserve">Sea surges are described in *Note Hurricanes::.
</example>
<quotation>
<para><strong>Caution:</strong> You <emph>must</emph> write a period, comma, or right
parenthesis immediately after an <code>@ref</code> command with two or more
arguments.  Otherwise, Info will not find the end of the cross reference
entry and its attempt to follow the cross reference will fail.  As a
general rule, you should write a period or comma after every
<code>@ref</code> command.  This looks best in both the printed and the Info
output.
</para></quotation>

</section>
</node>
<node>
<nodename>pxref</nodename>
<nodenext>inforef</nodenext>
<nodeprev>ref</nodeprev>
<nodeup>Cross References</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@pxref</code></title>
<para><indexterm index="cp">Cross references using <code>@pxref</code></indexterm><indexterm index="cp">References using <code>@pxref</code></indexterm><indexterm index="fn">pxref</indexterm></para>
<para>The parenthetical reference command, <code>@pxref</code>, is nearly the
same as <code>@xref</code>, but you use it <emph>only</emph> inside parentheses
and you do <emph>not</emph> type a comma or period after the command's
closing brace.  The command differs from <code>@xref</code> in two
ways:
</para>
<enumerate first="1"><item>
<para>&tex; typesets the reference for the printed manual with a lower case
`see' rather than an upper case `See'.
</para>
</item>
<item>
<para>The Info formatting commands automatically end the reference with a
closing colon or period.
</para></item>
</enumerate>

<para>Because one type of formatting automatically inserts closing
punctuation and the other does not, you should use <code>@pxref</code>
<emph>only</emph> inside parentheses as part of another sentence.  Also, you
yourself should not insert punctuation after the reference, as you do
with <code>@xref</code>.
</para>
<para><code>@pxref</code> is designed so that the output looks right and works
right between parentheses both in printed output and in an Info file.
In a printed manual, a closing comma or period should not follow a
cross reference within parentheses; such punctuation is wrong.  But in
an Info file, suitable closing punctuation must follow the cross
reference so Info can recognize its end.  <code>@pxref</code> spares you
the need to use complicated methods to put a terminator into one form
of the output and not the other.
</para>
<para>With one argument, a parenthetical cross reference looks like
this:
</para>
<para><indexterm index="cp">Flooding</indexterm></para><example xml:space="preserve">&dots; storms cause flooding (@pxref{Hurricanes}) &dots;
</example>
<need></need><para>which produces
</para>
<example xml:space="preserve"><group>
&dots; storms cause flooding (*Note Hurricanes::) &dots;
</group>
</example>
<para>and
</para>
<quotation>
<para>&dots; storms cause flooding (see Section 6.7 [Hurricanes], page 72) &dots;
</para></quotation>

<para>With two arguments, a parenthetical cross reference has this
template:
</para>
<example xml:space="preserve">&dots; (@pxref{<var>node-name</var>, <var>cross-reference-name</var>}) &dots;
</example>
<para>which produces
</para>
<example xml:space="preserve">&dots; (*Note <var>cross-reference-name</var>: <var>node-name</var>.) &dots;
</example>
<para>and
</para>
<need></need><quotation>
<para>&dots; (see Section <var>nnn</var> [<var>node-name</var>], page <var>ppp</var>) &dots;
</para></quotation>

<para><code>@pxref</code> can be used with up to five arguments just like
<code>@xref</code> (see <xref><xrefnodename>xref</xrefnodename><xrefprinteddesc><code>@xref</code></xrefprinteddesc></xref>).
</para>
<quotation>
<para><strong>Please note:</strong> Use <code>@pxref</code> only as a parenthetical
reference.  Do not try to use <code>@pxref</code> as a clause in a sentence.
It will look bad in either the Info file, the printed output, or
both.
</para>
<para>Also, parenthetical cross references look best at the ends of sentences.
Although you may write them in the middle of a sentence, that location
breaks up the flow of text.
</para></quotation>

</section>
</node>
<node>
<nodename>inforef</nodename>
<nodenext>uref</nodenext>
<nodeprev>pxref</nodeprev>
<nodeup>Cross References</nodeup>
<section>
<title><code>@inforef</code></title>
<para><indexterm index="cp">Cross references using <code>@inforef</code></indexterm><indexterm index="cp">References using <code>@inforef</code></indexterm><indexterm index="fn">inforef</indexterm></para>
<para><code>@inforef</code> is used for cross references to Info files for which
there are no printed manuals.  Even in a printed manual,
<code>@inforef</code> generates a reference directing the user to look in
an Info file.
</para>
<para>The command takes either two or three arguments, in the following
order:
</para>
<enumerate first="1"><item>
<para>The node name.
</para>
</item>
<item>
<para>The cross reference name (optional).
</para>
</item>
<item>
<para>The Info file name.
</para></item>
</enumerate>

<para>Separate the arguments with commas, as with <code>@xref</code>.  Also, you
must terminate the reference with a comma or period after the
<samp>}</samp>, as you do with <code>@xref</code>.
</para>
<para>The template is:
</para>
<example xml:space="preserve">@inforef{<var>node-name</var>, <var>cross-reference-name</var>, <var>info-file-name</var>},
</example>
<need></need><para>Thus,
</para>
<example xml:space="preserve"><group>
@inforef{Expert, Advanced Info commands, info},
for more information.
</group>
</example>
<need></need><para>produces
</para>
<example xml:space="preserve"><group>
*Note Advanced Info commands: (info)Expert,
for more information.
</group>
</example>
<need></need><para>and
</para>
<quotation>
<para>See Info file <file>info</file>, node <samp>Expert</samp>, for more information.
</para></quotation>

<need></need><para>Similarly,
</para>
<example xml:space="preserve"><group>
@inforef{Expert, , info}, for more information.
</group>
</example>
<need></need><para>produces
</para>
<example xml:space="preserve">*Note (info)Expert::, for more information.
</example>
<need></need><para>and
</para>
<quotation>
<para>See Info file <file>info</file>, node <samp>Expert</samp>, for more information.
</para></quotation>

<para>The converse of <code>@inforef</code> is <code>@cite</code>, which is used to
refer to printed works for which no Info form exists.  See <xref><xrefnodename>cite</xrefnodename><xrefprinteddesc><code>@cite</code></xrefprinteddesc></xref>.
</para>

</section>
</node>
<node>
<nodename>uref</nodename>
<nodeprev>inforef</nodeprev>
<nodeup>Cross References</nodeup>
<section>
<title><code>@uref{<var>url</var>[, <var>text</var>][, <var>replacement</var>]}</code></title>
<para><indexterm index="fn">uref</indexterm><indexterm index="cp">Uniform resource locator, referring to</indexterm><indexterm index="cp">URL, referring to</indexterm></para>
<para><indexterm index="cp"><code>href</code>, producing HTML</indexterm><code>@uref</code> produces a reference to a uniform resource locator (url).
It takes one mandatory argument, the url, and two optional arguments
which control the text that is displayed.  In HTML output, <code>@uref</code>
produces a link you can follow.
</para>
<para>The second argument, if specified, is the text to display (the default
is the url itself); in Info and DVI output, but not in HTML output, the
url is also output.
</para>
<para><indexterm index="cp">Man page, reference to</indexterm>The third argument, on the other hand, if specified is also the text to
display, but the url is <emph>not</emph> output in any format.  This is useful
when the text is already sufficiently referential, as in a man page.  If
the third argument is given, the second argument is ignored.
</para>
<para>The simple one argument form, where the url is both the target and the
text of the link:
</para>
<example xml:space="preserve">The official GNU ftp site is @uref{ftp://ftp.gnu.org/gnu}.
</example>
<para>produces:
</para><display xml:space="preserve">The official GNU ftp site is <uref><urefurl>ftp://ftp.gnu.org/gnu</urefurl></uref>.
</display>

<para>An example of the two-argument form:
</para><example xml:space="preserve">The official @uref{ftp://ftp.gnu.org/gnu, GNU ftp site}
holds programs and texts.
</example>
<para>produces:
</para><display xml:space="preserve">The official <uref><urefurl>ftp://ftp.gnu.org/gnu</urefurl><urefdesc>GNU ftp site</urefdesc></uref>
holds programs and texts.
</display>
<para>that is, the Info output is this:
</para><example xml:space="preserve">The official GNU ftp site (ftp://ftp.gnu.org/gnu)
holds programs and texts.
</example>
<para>and the HTML output is this:
</para><example xml:space="preserve">The official &lt;a href=&quot;ftp://ftp.gnu.org/gnu&quot;&gt;GNU ftp site&lt;/a&gt;
holds programs and texts.
</example>

<para>An example of the three-argument form:
</para><example xml:space="preserve">The @uref{/man.cgi/1/ls,,ls(1)} program &dots;
</example>
<para>produces:
</para><display xml:space="preserve">The <uref><urefurl>/man.cgi/1/ls</urefurl><urefreplacement>ls(1)</urefreplacement></uref> program &dots;
</display>
<para>but with HTML:
</para><example xml:space="preserve">The &lt;a href=&quot;/man.cgi/1/ls&quot;&gt;ls(1)&lt;/a&gt; program &dots;
</example>
<para>To merely indicate a url without creating a link people can follow, use
<code>@url</code> (see <xref><xrefnodename>url</xrefnodename><xrefinfoname><code>@url</code></xrefinfoname></xref>).
</para>
<para>Some people prefer to display url's in the unambiguous format:
</para>
<display xml:space="preserve">&lt;URL:http://<var>host</var>/<var>path</var>&gt;
</display>
<para><indexterm index="cp">&lt;URL convention, not used</indexterm>You can use this form in the input file if you wish.  We feel it's not
necessary to clutter up the output with the extra <samp>&lt;URL:</samp> and
<samp>&gt;</samp>, since any software that tries to detect url's in text already
has to detect them without the <samp>&lt;URL:</samp> to be useful.
</para>

</section>
</node>
<node>
<nodename>Marking Text</nodename>
<nodenext>Quotations and Examples</nodenext>
<nodeprev>Cross References</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Marking Words and Phrases</title>
<para><indexterm index="cp">Paragraph, marking text within</indexterm><indexterm index="cp">Marking words and phrases</indexterm><indexterm index="cp">Words and phrases, marking them</indexterm><indexterm index="cp">Marking text within a paragraph</indexterm><indexterm index="cp">Text, marking up</indexterm></para>
<para>In Texinfo, you can mark words and phrases in a variety of ways.
The Texinfo formatters use this information to determine how to
highlight the text.
You can specify, for example, whether a word or phrase is a
defining occurrence, a metasyntactic variable, or a symbol used in a
program.  Also, you can emphasize text, in several different ways.
</para>
<menu>
<menuentry>
<menunode> Indicating</menunode>
<menutitle> Indicating</menutitle>
<menucomment>                  How to indicate definitions, files, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Emphasis</menunode>
<menutitle> Emphasis</menutitle>
<menucomment>                    How to emphasize text.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Indicating</nodename>
<nodenext>Emphasis</nodenext>
<nodeprev>Marking Text</nodeprev>
<nodeup>Marking Text</nodeup>
<section>
<title>Indicating Definitions, Commands, etc.</title>
<para><indexterm index="cp">Highlighting text</indexterm><indexterm index="cp">Indicating commands, definitions, etc.</indexterm></para>
<para>Texinfo has commands for indicating just what kind of object a piece of
text refers to.  For example, metasyntactic variables are marked by
<code>@var</code>, and code by <code>@code</code>.  Since the pieces of text are
labelled by commands that tell what kind of object they are, it is easy
to change the way the Texinfo formatters prepare such text.  (Texinfo is
an <emph>intentional</emph> formatting language rather than a <emph>typesetting</emph>
formatting language.)
</para>
<para>For example, in a printed manual,
code is usually illustrated in a typewriter font;
<code>@code</code> tells &tex; to typeset this text in this font.  But it
would be easy to change the way &tex; highlights code to use another
font, and this change would not affect how keystroke examples are
highlighted.  If straight typesetting commands were used in the body
of the file and you wanted to make a change, you would need to check
every single occurrence to make sure that you were changing code and
not something else that should not be changed.
</para>
<menu>
<menuentry>
<menunode> Useful Highlighting</menunode>
<menutitle> Useful Highlighting</menutitle>
<menucomment>         Highlighting provides useful information.
</menucomment>
</menuentry><menuentry>
<menunode> code</menunode>
<menutitle> code</menutitle>
<menucomment>                        Indicating program code.
</menucomment>
</menuentry><menuentry>
<menunode> kbd</menunode>
<menutitle> kbd</menutitle>
<menucomment>                         Showing keyboard input.
</menucomment>
</menuentry><menuentry>
<menunode> key</menunode>
<menutitle> key</menutitle>
<menucomment>                         Specifying keys.
</menucomment>
</menuentry><menuentry>
<menunode> samp</menunode>
<menutitle> samp</menutitle>
<menucomment>                        A literal sequence of characters.
</menucomment>
</menuentry><menuentry>
<menunode> verb</menunode>
<menutitle> verb</menutitle>
<menucomment>                        A verbatim sequence of characters.
</menucomment>
</menuentry><menuentry>
<menunode> var</menunode>
<menutitle> var</menutitle>
<menucomment>                         Indicating metasyntactic variables.
</menucomment>
</menuentry><menuentry>
<menunode> env</menunode>
<menutitle> env</menutitle>
<menucomment>                         Indicating environment variables.
</menucomment>
</menuentry><menuentry>
<menunode> file</menunode>
<menutitle> file</menutitle>
<menucomment>                        Indicating file names.
</menucomment>
</menuentry><menuentry>
<menunode> command</menunode>
<menutitle> command</menutitle>
<menucomment>                     Indicating command names.
</menucomment>
</menuentry><menuentry>
<menunode> option</menunode>
<menutitle> option</menutitle>
<menucomment>                      Indicating option names.
</menucomment>
</menuentry><menuentry>
<menunode> dfn</menunode>
<menutitle> dfn</menutitle>
<menucomment>                         Specifying definitions.
</menucomment>
</menuentry><menuentry>
<menunode> cite</menunode>
<menutitle> cite</menutitle>
<menucomment>                        Referring to books not in the  Info system.
</menucomment>
</menuentry><menuentry>
<menunode> acronym</menunode>
<menutitle> acronym</menutitle>
<menucomment>                     Indicating acronyms.
</menucomment>
</menuentry><menuentry>
<menunode> url</menunode>
<menutitle> url</menutitle>
<menucomment>                         Indicating a World Wide Web reference.
</menucomment>
</menuentry><menuentry>
<menunode> email</menunode>
<menutitle> email</menutitle>
<menucomment>                       Indicating an electronic mail address.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Useful Highlighting</nodename>
<nodenext>code</nodenext>
<nodeprev>Indicating</nodeprev>
<nodeup>Indicating</nodeup>

<para>The highlighting commands can be used to extract useful information
from the file, such as lists of functions or file names.  It is
possible, for example, to write a program in Emacs Lisp (or a keyboard
macro) to insert an index entry after every paragraph that contains
words or phrases marked by a specified command.  You could do this to
construct an index of functions if you had not already made the
entries.
</para>
<para>The commands serve a variety of purposes:
</para>
<table><tableitem><tableterm><code>@code{<var>sample-code</var>}</code></tableterm>
<item><para>Indicate text that is a literal example of a piece of a program.
</para>
</item></tableitem><tableitem><tableterm><code>@kbd{<var>keyboard-characters</var>}</code></tableterm>
<item><para>Indicate keyboard input.
</para>
</item></tableitem><tableitem><tableterm><code>@key{<var>key-name</var>}</code></tableterm>
<item><para>Indicate the conventional name for a key on a keyboard.
</para>
</item></tableitem><tableitem><tableterm><code>@samp{<var>text</var>}</code></tableterm>
<item><para>Indicate text that is a literal example of a sequence of characters.
</para>
</item></tableitem><tableitem><tableterm><code>@var{<var>metasyntactic-variable</var>}</code></tableterm>
<item><para>Indicate a metasyntactic variable.
</para>
</item></tableitem><tableitem><tableterm><code>@env{<var>environment-variable</var>}</code></tableterm>
<item><para>Indicate an environment variable.
</para>
</item></tableitem><tableitem><tableterm><code>@file{<var>file-name</var>}</code></tableterm>
<item><para>Indicate the name of a file.
</para>
</item></tableitem><tableitem><tableterm><code>@command{<var>command-name</var>}</code></tableterm>
<item><para>Indicate the name of a command.
</para>
</item></tableitem><tableitem><tableterm><code>@option{<var>option</var>}</code></tableterm>
<item><para>Indicate a command-line option.
</para>
</item></tableitem><tableitem><tableterm><code>@dfn{<var>term</var>}</code></tableterm>
<item><para>Indicate the introductory or defining use of a term.
</para>
</item></tableitem><tableitem><tableterm><code>@cite{<var>reference</var>}</code></tableterm>
<item><para>Indicate the name of a book.
</para>
</item></tableitem><tableitem><tableterm><code>@acronym{<var>acronym</var>}</code></tableterm>
<item><para>Indicate an acronym.
</para>
</item></tableitem><tableitem><tableterm><code>@url{<var>uniform-resource-locator</var>}</code></tableterm>
<item><para>Indicate a uniform resource locator for the World Wide Web.
</para>
</item></tableitem><tableitem><tableterm><code>@email{<var>email-address</var>[, <var>displayed-text</var>]}</code></tableterm>
<item><para>Indicate an electronic mail address.
</para>
</item></tableitem></table>


</node>
<node>
<nodename>code</nodename>
<nodenext>kbd</nodenext>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@code</code>{<var>sample-code</var>}</title>
<para><indexterm index="fn">code</indexterm></para>
<para><indexterm index="cp">Syntactic tokens, indicating</indexterm>Use the <code>@code</code> command to indicate text that is a piece of a
program and which consists of entire syntactic tokens.  Enclose the
text in braces.
</para>
<para><indexterm index="cp">Expressions in a program, indicating</indexterm><indexterm index="cp">Keywords, indicating</indexterm><indexterm index="cp">Reserved words, indicating</indexterm>Thus, you should use <code>@code</code> for an expression in a program, for
the name of a variable or function used in a program, or for a
keyword in a programming language.
</para>
<para>Use <code>@code</code> for command names in languages that resemble
programming languages, such as Texinfo.  For example, <code>@code</code> and
<code>@samp</code> are produced by writing <samp>@code{@@code}</samp> and
<samp>@code{@@samp}</samp> in the Texinfo source, respectively.
</para>
<para><indexterm index="cp">Case, not altering in <code>@code</code></indexterm>It is incorrect to alter the case of a word inside an <code>@code</code>
command when it appears at the beginning of a sentence.  Most computer
languages are case sensitive.  In C, for example, <code>Printf</code> is
different from the identifier <code>printf</code>, and most likely is a
misspelling of it.  Even in languages which are not case sensitive, it
is confusing to a human reader to see identifiers spelled in different
ways.  Pick one spelling and always use that.  If you do not want to
start a sentence with a command name written all in lower case, you
should rearrange the sentence.
</para>
<para>In the printed manual, <code>@code</code> causes &tex; to typeset the
argument in a typewriter face.  In the Info file, it causes the Info
formatting commands to use single quotation marks around the text.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">The function returns @code{nil}.
</example>
<para>produces this in the printed manual:
</para>
<quotation>
<para>The function returns <code>nil</code>.
</para></quotation>


<para>Here are some cases for which it is preferable not to use <code>@code</code>:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>For shell command names such as <command>ls</command> (use <code>@command</code>).
</para>
</item>
<item>
<para>For shell options such as <samp>-c</samp> when such options stand alone (use
<code>@option</code>).
</para>
</item>
<item>
<para>Also, an entire shell command often looks better if written using
<code>@samp</code> rather than <code>@code</code>.  In this case, the rule is to
choose the more pleasing format.
</para>
</item>
<item>
<para>For environment variable such as <env>TEXINPUTS</env> (use <code>@env</code>).
</para>
</item>
<item>
<para>For a string of characters shorter than a syntactic token.  For example,
if you are writing about <samp>goto-ch</samp>, which is just a part of the
name for the <code>goto-char</code> Emacs Lisp function, you should use
<code>@samp</code>.
</para>
</item>
<item>
<para>In general, when writing about the characters used in a token; for
example, do not use <code>@code</code> when you are explaining what letters
or printable symbols can be used in the names of functions.  (Use
<code>@samp</code>.)  Also, you should not use <code>@code</code> to mark text
that is considered input to programs unless the input is written in a
language that is like a programming language.  For example, you should
not use <code>@code</code> for the keystroke commands of GNU Emacs (use
<code>@kbd</code> instead) although you may use <code>@code</code> for the names
of the Emacs Lisp functions that the keystroke commands invoke.
</para>
</item>
</itemize>

<para>Since <code>@command</code>, <code>@option</code>, and <code>@env</code> were
introduced relatively recently, it is acceptable to use <code>@code</code> or
<code>@samp</code> for command names, options, and environment variables.
The new commands allow you to express the markup more precisely, but
there is no real harm in using the older commands, and of course the
long-standing manuals do so.
</para>

</subsection>
</node>
<node>
<nodename>kbd</nodename>
<nodenext>key</nodenext>
<nodeprev>code</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@kbd</code>{<var>keyboard-characters</var>}</title>
<para><indexterm index="fn">kbd</indexterm><indexterm index="cp">Keyboard input</indexterm></para>
<para>Use the <code>@kbd</code> command for characters of input to be typed by
users.  For example, to refer to the characters <kbd>M-a</kbd>,
write
</para>
<example xml:space="preserve">@kbd{M-a}
</example>
<para>and to refer to the characters <kbd>M-x shell</kbd>, write
</para>
<example xml:space="preserve">@kbd{M-x shell}
</example>
<para><indexterm index="cp">user input</indexterm><indexterm index="cp">slanted typewriter font, for <code>@kbd</code></indexterm>The <code>@kbd</code> command has the same effect as <code>@code</code> in Info,
but by default produces a different font (slanted typewriter instead of
normal typewriter) in the printed manual, so users can distinguish the
characters they are supposed to type from those the computer outputs.
</para>
<para><indexterm index="fn">kbdinputstyle</indexterm>Since the usage of <code>@kbd</code> varies from manual to manual, you can
control the font switching with the <code>@kbdinputstyle</code> command.
This command has no effect on Info output.  Write this command at the
beginning of a line with a single word as an argument, one of the
following:
<indexterm index="cp">distinct<r>, arg to @kbdinputstyle</r></indexterm><indexterm index="cp">example<r>, arg to @kbdinputstyle</r></indexterm><indexterm index="cp">code<r>, arg to @kbdinputstyle</r></indexterm></para><table><tableitem><tableterm><samp>code</samp></tableterm>
<item><para>Always use the same font for <code>@kbd</code> as <code>@code</code>.
</para></item></tableitem><tableitem><tableterm><samp>example</samp></tableterm>
<item><para>Use the distinguishing font for <code>@kbd</code> only in <code>@example</code>
and similar environments.
</para></item></tableitem><tableitem><tableterm><samp>distinct</samp></tableterm>
<item><para>(the default) Always use the distinguishing font for <code>@kbd</code>.
</para></item></tableitem></table>

<para>You can embed another @-command inside the braces of an <code>@kbd</code>
command.  Here, for example, is the way to describe a command that
would be described more verbosely as &ldquo;press an <samp>r</samp> and then
press the <key>RET</key> key&rdquo;:
</para>
<example xml:space="preserve">@kbd{r @key{RET}}
</example>
<para>This produces: <kbd>r <key>RET</key></kbd>
</para>
<para>You also use the <code>@kbd</code> command if you are spelling out the letters
you type; for example:
</para>
<example xml:space="preserve">To give the @code{logout} command,
type the characters @kbd{l o g o u t @key{RET}}.
</example>
<para>This produces:
</para>
<quotation>
<para>To give the <code>logout</code> command,
type the characters <kbd>l o g o u t <key>RET</key></kbd>.
</para></quotation>

<para>(Also, this example shows that you can add spaces for clarity.  If you
really want to mention a space character as one of the characters of
input, write <kbd>@key{SPC}</kbd> for it.)
</para>

</subsection>
</node>
<node>
<nodename>key</nodename>
<nodenext>samp</nodenext>
<nodeprev>kbd</nodeprev>
<nodeup>Indicating</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title><code>@key</code>{<var>key-name</var>}</title>
<para><indexterm index="fn">key</indexterm></para>
<para>Use the <code>@key</code> command for the conventional name for a key on a
keyboard, as in:
</para>
<example xml:space="preserve">@key{RET}
</example>
<para>You can use the <code>@key</code> command within the argument of an
<code>@kbd</code> command when the sequence of characters to be typed
includes one or more keys that are described by name.
</para>
<need></need><para>For example, to produce <kbd>C-x <key>ESC</key></kbd> you would type:
</para>
<example xml:space="preserve">@kbd{C-x @key{ESC}}
</example>
<para>Here is a list of the recommended names for keys:
<indexterm index="cp">Recommended names for keys</indexterm><indexterm index="cp">Keys, recommended names</indexterm><indexterm index="cp">Names recommended for keys</indexterm><indexterm index="cp">Abbreviations for keys</indexterm></para>
<quotation>
<table><tableitem><tableterm><tt>SPC</tt></tableterm>
<item><para>Space
</para></item></tableitem><tableitem><tableterm><tt>RET</tt></tableterm>
<item><para>Return
</para></item></tableitem><tableitem><tableterm><tt>LFD</tt></tableterm>
<item><para>Linefeed (however, since most keyboards nowadays do not have a Linefeed key,
it might be better to call this character <kbd>C-j</kbd>.
</para></item></tableitem><tableitem><tableterm><tt>TAB</tt></tableterm>
<item><para>Tab
</para></item></tableitem><tableitem><tableterm><tt>BS</tt></tableterm>
<item><para>Backspace
</para></item></tableitem><tableitem><tableterm><tt>ESC</tt></tableterm>
<item><para>Escape
</para></item></tableitem><tableitem><tableterm><tt>DEL</tt></tableterm>
<item><para>Delete
</para></item></tableitem><tableitem><tableterm><tt>SHIFT</tt></tableterm>
<item><para>Shift
</para></item></tableitem><tableitem><tableterm><tt>CTRL</tt></tableterm>
<item><para>Control
</para></item></tableitem><tableitem><tableterm><tt>META</tt></tableterm>
<item><para>Meta
</para></item></tableitem></table>
</quotation>

<para><indexterm index="cp">META key</indexterm>There are subtleties to handling words like `meta' or `ctrl' that are
names of modifier keys.  When mentioning a character in which the
modifier key is used, such as <kbd>Meta-a</kbd>, use the <code>@kbd</code> command
alone; do not use the <code>@key</code> command; but when you are referring
to the modifier key in isolation, use the <code>@key</code> command.  For
example, write <samp>@kbd{Meta-a}</samp> to produce <kbd>Meta-a</kbd> and
<samp>@key{META}</samp> to produce <key>META</key>.
</para>
<!-- I don't think this is a good explanation. -->
<!-- I think it will puzzle readers more than it clarifies matters.  - rms. -->
<!-- In other words, use @code{@@kbd} for what you do, and use @code{@@key} -->
<!-- for what you talk about: ``Press @code{@@kbd@{M-a@}} to move point to -->
<!-- the beginning of the sentence.  The @code{@@key@{META@}} key is often in -->
<!-- the lower left of the keyboard.''@refill -->

</subsection>
</node>
<node>
<nodename>samp</nodename>
<nodenext>verb</nodenext>
<nodeprev>key</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@samp</code>{<var>text</var>}</title>
<para><indexterm index="fn">samp</indexterm></para>
<para>Use the <code>@samp</code> command to indicate text that is a literal example
or `sample' of a sequence of characters in a file, string, pattern, etc.
Enclose the text in braces.  The argument appears within single
quotation marks in both the Info file and the printed manual; in
addition, it is printed in a fixed-width font.
</para>
<example xml:space="preserve">To match @samp{foo} at the end of the line,
use the regexp @samp{foo$}.
</example>
<para>produces
</para>
<quotation>
<para>To match <samp>foo</samp> at the end of the line, use the regexp
<samp>foo$</samp>.
</para></quotation>

<para>Any time you are referring to single characters, you should use
<code>@samp</code> unless <code>@kbd</code> or <code>@key</code> is more appropriate.
Also, you may use <code>@samp</code> for entire statements in C and for entire
shell commands&mdash;in this case, <code>@samp</code> often looks better than
<code>@code</code>.  Basically, <code>@samp</code> is a catchall for whatever is
not covered by <code>@code</code>, <code>@kbd</code>, or <code>@key</code>.
</para>
<para>Only include punctuation marks within braces if they are part of the
string you are specifying.  Write punctuation marks outside the braces
if those punctuation marks are part of the English text that surrounds
the string.  In the following sentence, for example, the commas and
period are outside of the braces:
</para>
<example xml:space="preserve"><group>
In English, the vowels are @samp{a}, @samp{e},
@samp{i}, @samp{o}, @samp{u}, and sometimes
@samp{y}.
</group>
</example>
<para>This produces:
</para>
<quotation>
<para>In English, the vowels are <samp>a</samp>, <samp>e</samp>,
<samp>i</samp>, <samp>o</samp>, <samp>u</samp>,  and sometimes
<samp>y</samp>.
</para></quotation>


</subsection>
</node>
<node>
<nodename>verb</nodename>
<nodenext>var</nodenext>
<nodeprev>samp</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@verb</code>{&lt;char&gt;<var>text</var>&lt;char&gt;}</title>
<para><indexterm index="fn">verb</indexterm><indexterm index="cp">Verbatim in-line text</indexterm></para>
<para><indexterm index="cp">Delimiter character, for verbatim</indexterm>Use the <code>@verb</code> command to print a verbatim sequence of
characters.
</para>
<para>Like La&tex;'s <code>\verb</code> command, the verbatim text can be quoted using
any unique delimiter character.  Enclose the verbatim text, including the
delimiters, in braces.  Text is printed in a fixed-width font:
</para>
<example xml:space="preserve">How many @verb{|@|}-escapes does one need to print this
@verb{.@a @b @c.} string or @verb{+@'e&eosquest;`&eosexcl;`{}\+} this?
</example>
<para>produces
</para>
<example xml:space="preserve">How many @ -escapes does one need to print this
@a @b @c string or these @'e?`{}!`\ this?
</example>
<para>This is in contrast to <code>@samp</code> (see the previous
section), whose argument is normal Texinfo text, where the characters
<code>@{}</code> are special; with <code>@verb</code>, nothing is special except
the delimiter character you choose.
</para>

</subsection>
</node>
<node>
<nodename>var</nodename>
<nodenext>env</nodenext>
<nodeprev>verb</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@var</code>{<var>metasyntactic-variable</var>}</title>
<para><indexterm index="fn">var</indexterm></para>
<para>Use the <code>@var</code> command to indicate metasyntactic variables.  A
<dfn>metasyntactic variable</dfn> is something that stands for another piece of
text.  For example, you should use a metasyntactic variable in the
documentation of a function to describe the arguments that are passed
to that function.
</para>
<para>Do not use <code>@var</code> for the names of particular variables in
programming languages.  These are specific names from a program, so
<code>@code</code> is correct for them (see <xref><xrefnodename>code</xrefnodename></xref>).  For example, the
Emacs Lisp variable <code>texinfo-tex-command</code> is not a metasyntactic
variable; it is properly formatted using <code>@code</code>.
</para>
<para>Do not use <code>@var</code> for environment variables either; <code>@env</code>
is correct for them (see the next section).
</para>
<para>The effect of <code>@var</code> in the Info file is to change the case of the
argument to all upper case.  In the printed manual and HTML output, the
argument is printed in slanted type.  
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">To delete file @var{filename},
type @samp{rm @var{filename}}.
</example>
<para>produces
</para>
<quotation>
<para>To delete file <var>filename</var>, type <samp>rm <var>filename</var></samp>.
</para></quotation>

<para>(Note that <code>@var</code> may appear inside <code>@code</code>,
<code>@samp</code>, <code>@file</code>, etc.)
</para>
<para>Write a metasyntactic variable all in lower case without spaces, and
use hyphens to make it more readable.  Thus, the Texinfo source for
the illustration of how to begin a Texinfo manual looks like
this:
</para>
<example xml:space="preserve"><group>
\input texinfo
@@setfilename @var{info-file-name}
@@settitle @var{name-of-manual}
</group>
</example>
<para>This produces:
</para>
<example xml:space="preserve"><group>
\input texinfo
@setfilename <var>info-file-name</var>
@settitle <var>name-of-manual</var>
</group>
</example>
<para>In some documentation styles, metasyntactic variables are shown with
angle brackets, for example:
</para>
<example xml:space="preserve">&dots;, type rm &lt;filename&gt;
</example>
<para>However, that is not the style that Texinfo uses.  (You can, of
course, modify the sources to <file>texinfo.tex</file> and the Info formatting commands
to output the <code>&lt;&dots;&gt;</code> format if you wish.)
</para>

</subsection>
</node>
<node>
<nodename>env</nodename>
<nodenext>file</nodenext>
<nodeprev>var</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@env</code>{<var>environment-variable</var>}</title>
<para><indexterm index="fn">env</indexterm></para>
<para>Use the <code>@env</code> command to indicate environment variables, as used
by many operating systems, including GNU.  Do not use it for
metasyntactic variables; use <code>@var</code> instead (see the previous
section).
</para>
<para><code>@env</code> is equivalent to <code>@code</code> in its effects.
For example:
</para>
<example xml:space="preserve">The @env{PATH} environment variable &dots;
</example><para>produces
</para><quotation>
<para>The <env>PATH</env> environment variable &dots;
</para></quotation>


</subsection>
</node>
<node>
<nodename>file</nodename>
<nodenext>command</nodenext>
<nodeprev>env</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@file</code>{<var>file-name</var>}</title>
<para><indexterm index="fn">file</indexterm></para>
<para>Use the <code>@file</code> command to indicate text that is the name of a
file, buffer, or directory, or is the name of a node in Info.  You can
also use the command for file name suffixes.  Do not use <code>@file</code>
for symbols in a programming language; use <code>@code</code>.
</para>
<para>Currently, <code>@file</code> is equivalent to <code>@samp</code> in its effects.
For example,
</para>
<example xml:space="preserve">The @file{.el} files are in
the @file{/usr/local/emacs/lisp} directory.
</example>
<para>produces
</para>
<quotation>
<para>The <file>.el</file> files are in
the <file>/usr/local/emacs/lisp</file> directory.
</para></quotation>


</subsection>
</node>
<node>
<nodename>command</nodename>
<nodenext>option</nodenext>
<nodeprev>file</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@command</code>{<var>command-name</var>}</title>
<para><indexterm index="fn">command</indexterm><indexterm index="cp">Command names, indicating</indexterm><indexterm index="cp">Program names, indicating</indexterm></para>
<para>Use the <code>@command</code> command to indicate command names, such as
<command>ls</command> or <command>cc</command>.
</para>
<para><code>@command</code> is equivalent to <code>@code</code> in its effects.
For example:
</para>
<example xml:space="preserve">The command @command{ls} lists directory contents.
</example><para>produces
</para><quotation>
<para>The command <command>ls</command> lists directory contents.
</para></quotation>

<para>You should write the name of a program in the ordinary text font, rather
than using <code>@command</code>, if you regard it as a new English word,
such as `Emacs' or `Bison'.
</para>
<para>When writing an entire shell command invocation, as in <samp>ls -l</samp>,
you should use either <code>@samp</code> or <code>@code</code> at your discretion.
</para>

</subsection>
</node>
<node>
<nodename>option</nodename>
<nodenext>dfn</nodenext>
<nodeprev>command</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@option</code>{<var>option-name</var>}</title>
<para><indexterm index="fn">option</indexterm></para>
<para>Use the <code>@option</code> command to indicate a command-line option; for
example, <option>-l</option> or <option>--version</option> or
<option>--output=<var>filename</var></option>.
</para>
<para><code>@option</code> is equivalent to <code>@samp</code> in its effects.
For example:
</para>
<example xml:space="preserve">The option @option{-l} produces a long listing.
</example><para>produces
</para><quotation>
<para>The option <option>-l</option> produces a long listing.
</para></quotation>

<para>In tables, putting options inside <code>@code</code> produces a
more pleasing effect.
</para>
</subsection>
</node>
<node>
<nodename>dfn</nodename>
<nodenext>cite</nodenext>
<nodeprev>option</nodeprev>
<nodeup>Indicating</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title><code>@dfn</code>{<var>term</var>}</title>
<para><indexterm index="fn">dfn</indexterm></para>
<para>Use the <code>@dfn</code> command to identify the introductory or defining
use of a technical term.  Use the command only in passages whose
purpose is to introduce a term which will be used again or which the
reader ought to know.  Mere passing mention of a term for the first
time does not deserve <code>@dfn</code>.  The command generates italics in
the printed manual, and double quotation marks in the Info file.  For
example:
</para>
<example xml:space="preserve">Getting rid of a file is called @dfn{deleting} it.
</example>
<para>produces
</para>
<quotation>
<para>Getting rid of a file is called <dfn>deleting</dfn> it.
</para></quotation>

<para>As a general rule, a sentence containing the defining occurrence of a
term should be a definition of the term.  The sentence does not need
to say explicitly that it is a definition, but it should contain the
information of a definition&mdash;it should make the meaning clear.
</para>
</subsection>
</node>
<node>
<nodename>cite</nodename>
<nodenext>acronym</nodenext>
<nodeprev>dfn</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@cite</code>{<var>reference</var>}</title>
<para><indexterm index="fn">cite</indexterm></para>
<para>Use the <code>@cite</code> command for the name of a book that lacks a
companion Info file.  The command produces italics in the printed
manual, and quotation marks in the Info file.
</para>
<para>If a book is written in Texinfo, it is better to use a cross reference
command since a reader can easily follow such a reference in Info.
See <xref><xrefnodename>xref</xrefnodename><xrefprinteddesc><code>@xref</code></xrefprinteddesc></xref>.
</para>



</subsection>
</node>
<node>
<nodename>acronym</nodename>
<nodenext>url</nodenext>
<nodeprev>cite</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@acronym</code>{<var>acronym</var>}</title>
<para><indexterm index="fn">acronym</indexterm></para>
<para><indexterm index="cp">NASA, as acronym</indexterm><indexterm index="cp">F.B.I., as acronym</indexterm><indexterm index="cp">Abbreviations, tagging</indexterm><indexterm index="cp">Acronyms, tagging</indexterm>Use the <code>@acronym</code> command for abbreviations written in all
capital letters, such as `<acronym><acronymword>NASA</acronymword></acronym>'.  The abbreviation is given as
the single argument in braces, as in <samp>@acronym{NASA}</samp>.  As
a matter of style, or for particular abbreviations, you may prefer to
use periods, as in <samp>@acronym{F.B.I.}</samp>.
</para>
<para>In &tex; and HTML, the argument is printed in a slightly smaller font
size.  In Info or plain text output, this command changes nothing.
</para>

</subsection>
</node>
<node>
<nodename>url</nodename>
<nodenext>email</nodenext>
<nodeprev>acronym</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@url</code>{<var>uniform-resource-locator</var>}</title>
<para><indexterm index="fn">url</indexterm><indexterm index="cp">Uniform resource locator, indicating</indexterm><indexterm index="cp">URL, indicating</indexterm></para>
<para>Use the <code>@url</code> command to indicate a uniform resource locator on
the World Wide Web.  This is analogous to <code>@file</code>, <code>@var</code>,
etc., and is purely for markup purposes.  It does not produce a link you
can follow in HTML output (use the <code>@uref</code> command for that,
see <xref><xrefnodename>uref</xrefnodename><xrefprinteddesc><code>@uref</code></xrefprinteddesc></xref>).  It is useful for url's which do
not actually exist.  For example:
</para>
<!-- Two lines because one is too long for smallbook format. -->
<example xml:space="preserve">For example, the url might be @url{http://example.org/path}.
</example>
<para>which produces:
</para>
<display xml:space="preserve">For example, the url might be <uref><urefurl>http://example.org/path</urefurl></uref>.
</display>

</subsection>
</node>
<node>
<nodename>email</nodename>
<nodeprev>url</nodeprev>
<nodeup>Indicating</nodeup>
<subsection>
<title><code>@email</code>{<var>email-address</var>[, <var>displayed-text</var>]}</title>
<para><indexterm index="fn">email</indexterm></para>
<para>Use the <code>@email</code> command to indicate an electronic mail address.
It takes one mandatory argument, the address, and one optional argument, the
text to display (the default is the address itself).
</para>
<para><indexterm index="cp">mailto link</indexterm>In Info and &tex;, the address is shown in angle brackets, preceded by
the text to display if any.  In HTML output, <code>@email</code> produces a
<samp>mailto</samp> link that usually brings up a mail composition window.
For example:
</para>
<example xml:space="preserve">Send bug reports to @email{bug-texinfo@@gnu.org},
suggestions to the @email{bug-texinfo@@gnu.org, same place}.
</example><para>produces
</para><display xml:space="preserve">Send bug reports to <email><emailaddress>bug-texinfo@gnu.org</emailaddress></email>,
suggestions to the <email><emailaddress>bug-texinfo@gnu.org</emailaddress><emailname>same place</emailname></email>.
</display>

</subsection>
</node>
<node>
<nodename>Emphasis</nodename>
<nodeprev>Indicating</nodeprev>
<nodeup>Marking Text</nodeup>
<!-- node-name,  next,  previous,  up -->
<section>
<title>Emphasizing Text</title>
<para><indexterm index="cp">Emphasizing text</indexterm></para>
<para>Usually, Texinfo changes the font to mark words in the text according to
what category the words belong to; an example is the <code>@code</code> command.
Most often, this is the best way to mark words.
However, sometimes you will want to emphasize text without indicating a
category.  Texinfo has two commands to do this.  Also, Texinfo has
several commands that specify the font in which &tex; will typeset
text.  These commands have no effect on Info and only one of them,
the <code>@r</code> command, has any regular use.
</para>
<menu>
<menuentry>
<menunode> emph &amp; strong</menunode>
<menutitle> emph &amp; strong</menutitle>
<menucomment>               How to emphasize text in Texinfo.
</menucomment>
</menuentry><menuentry>
<menunode> Smallcaps</menunode>
<menutitle> Smallcaps</menutitle>
<menucomment>                   How to use the small caps font.
</menucomment>
</menuentry><menuentry>
<menunode> Fonts</menunode>
<menutitle> Fonts</menutitle>
<menucomment>                       Various font commands for printed output.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>emph &amp; strong</nodename>
<nodenext>Smallcaps</nodenext>
<nodeup>Emphasis</nodeup>
<subsection>
<title><code>@emph</code>{<var>text</var>} and <code>@strong</code>{<var>text</var>}</title>
<para><indexterm index="cp">Emphasizing text, font for</indexterm><indexterm index="fn">emph</indexterm><indexterm index="fn">strong</indexterm></para>
<para>The <code>@emph</code> and <code>@strong</code> commands are for emphasis;
<code>@strong</code> is stronger.  In printed output, <code>@emph</code> produces
<emph>italics</emph> and <code>@strong</code> produces <strong>bold</strong>.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@quotation
@strong{Caution:} @samp{rm * .[^.]*} removes @emph{all}
files in the directory.
@end quotation
</group>
</example>

<example xml:space="preserve">     *Caution*: `rm * .[^.]*' removes _all_
     files in the directory.
</example>
<para>The <code>@strong</code> command is seldom used except to mark what is, in
effect, a typographical element, such as the word `Caution' in the
preceding example.
</para>
<para>In the Info output, <code>@emph</code> surrounds the text with underscores
(<samp>_</samp>), and <code>@strong</code> puts asterisks around the text.
</para>
<quotation>
<para><strong>Caution:</strong> Do not use <code>@strong</code> with the word <samp>Note</samp>;
Info will mistake the combination for a cross reference.  Use a phrase
such as <strong>Please note</strong> or <strong>Caution</strong> instead.
</para></quotation>


</subsection>
</node>
<node>
<nodename>Smallcaps</nodename>
<nodenext>Fonts</nodenext>
<nodeprev>emph &amp; strong</nodeprev>
<nodeup>Emphasis</nodeup>
<subsection>
<title><code>@sc</code>{<var>text</var>}: The Small Caps Font</title>
<para><indexterm index="cp">Small caps font</indexterm><indexterm index="fn">sc <r>(small caps font)</r></indexterm></para>
<para>Use the <samp>@sc</samp> command to set text in the printed and the HTML
output in <sc>a small caps font</sc> and set text in the Info file in upper
case letters.  Write the text you want to be in small caps (where
possible) between braces in lower case, like this:
</para>
<example xml:space="preserve">The @sc{acm} and @sc{ieee} are technical societies.
</example>
<para>This produces:
</para>
<display xml:space="preserve">The <sc>acm</sc> and <sc>ieee</sc> are technical societies.
</display>
<para>&tex; typesets the small caps font in a manner that prevents the
letters from `jumping out at you on the page'.  This makes small caps
text easier to read than text in all upper case&mdash;but it's usually
better to use regular mixed case anyway.  The Info formatting commands
set all small caps text in upper case.  In HTML, the text is upper-cased
and a smaller font is used to render it.
</para>
<para>If the text between the braces of an <code>@sc</code> command is uppercase,
&tex; typesets in FULL-SIZE CAPITALS.  Use full-size capitals
sparingly, if ever, and since it's redundant to mark all-uppercase text
with <code>@sc</code>, <command>makeinfo</command> warns about such usage.
</para>
<para>You may also use the small caps font for a jargon word such as
<sc>ato</sc> (a <sc>nasa</sc> word meaning `abort to orbit').
</para>
<para>There are subtleties to using the small caps font with a jargon word
such as <sc>cdr</sc>, a word used in Lisp programming.  In this case, you
should use the small caps font when the word refers to the second and
subsequent elements of a list (the <sc>cdr</sc> of the list), but you
should use <samp>@code</samp> when the word refers to the Lisp function of
the same spelling.
</para>

</subsection>
</node>
<node>
<nodename>Fonts</nodename>
<nodeprev>Smallcaps</nodeprev>
<nodeup>Emphasis</nodeup>
<subsection>
<title>Fonts for Printing, Not Info</title>
<para><indexterm index="cp">Fonts for printing, not for Info</indexterm><indexterm index="fn">i <r>(italic font)</r></indexterm><indexterm index="fn">b <r>(bold font)</r></indexterm><indexterm index="fn">t <r>(typewriter font)</r></indexterm><indexterm index="fn">r <r>(Roman font)</r></indexterm></para>
<para>Texinfo provides four font commands that specify font changes in the
printed manual but have no effect in the Info file.  <code>@i</code>
requests <i>italic</i> font (in some versions of &tex;, a slanted font
is used), <code>@b</code> requests <b>bold</b> face, <code>@t</code> requests the
<tt>fixed-width</tt>, typewriter-style font used by <code>@code</code>, and <code>@r</code> requests a
<r>roman</r> font, which is the usual font in which text is printed.  All
four commands apply to an argument that follows, surrounded by
braces.
</para>
<para>Only the <code>@r</code> command has much use: in example programs, you
can use the <code>@r</code> command to convert code comments from the
fixed-width font to a roman font.  This looks better in printed
output.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@lisp
(+ 2 2)    ; @r{Add two plus two.}
@end lisp
</group>
</example>
<para>produces
</para>
<lisp xml:space="preserve">(+ 2 2)    ; <r>Add two plus two.</r>
</lisp>
<para>If possible, you should avoid using the other three font commands.  If
you need to use one, it probably indicates a gap in the Texinfo
language.
</para>

</subsection>
</node>
<node>
<nodename>Quotations and Examples</nodename>
<nodenext>Lists and Tables</nodenext>
<nodeprev>Marking Text</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Quotations and Examples</title>

<para>Quotations and examples are blocks of text consisting of one or more
whole paragraphs that are set off from the bulk of the text and
treated differently.  They are usually indented.
</para>
<para>In Texinfo, you always begin a quotation or example by writing an
@-command at the beginning of a line by itself, and end it by writing
an <code>@end</code> command that is also at the beginning of a line by
itself.  For instance, you begin an example by writing <code>@example</code>
by itself at the beginning of a line and end the example by writing
<code>@end example</code> on a line by itself, at the beginning of that
line.
<indexterm index="fn">end</indexterm></para>
<menu>
<menuentry>
<menunode> Block Enclosing Commands</menunode>
<menutitle> Block Enclosing Commands</menutitle>
<menucomment>    Different constructs for different purposes.
</menucomment>
</menuentry><menuentry>
<menunode> quotation</menunode>
<menutitle> quotation</menutitle>
<menucomment>                   Writing a quotation.
</menucomment>
</menuentry><menuentry>
<menunode> example</menunode>
<menutitle> example</menutitle>
<menucomment>                     Writing an example in a fixed-width font.
</menucomment>
</menuentry><menuentry>
<menunode> verbatim</menunode>
<menutitle> verbatim</menutitle>
<menucomment>                    Writing a verbatim example.
</menucomment>
</menuentry><menuentry>
<menunode> verbatiminclude</menunode>
<menutitle> verbatiminclude</menutitle>
<menucomment>             Including a file verbatim.
</menucomment>
</menuentry><menuentry>
<menunode> lisp</menunode>
<menutitle> lisp</menutitle>
<menucomment>                        Illustrating Lisp code.
</menucomment>
</menuentry><menuentry>
<menunode> small</menunode>
<menutitle> small</menutitle>
<menucomment>                       Forms for <code>@smallbook</code>.
</menucomment>
</menuentry><menuentry>
<menunode> display</menunode>
<menutitle> display</menutitle>
<menucomment>                     Writing an example in the current font.
</menucomment>
</menuentry><menuentry>
<menunode> format</menunode>
<menutitle> format</menutitle>
<menucomment>                      Writing an example without narrowed margins.
</menucomment>
</menuentry><menuentry>
<menunode> exdent</menunode>
<menutitle> exdent</menutitle>
<menucomment>                      Undo indentation on a line.
</menucomment>
</menuentry><menuentry>
<menunode> flushleft &amp; flushright</menunode>
<menutitle> flushleft &amp; flushright</menutitle>
<menucomment>      Pushing text flush left or flush right.
</menucomment>
</menuentry><menuentry>
<menunode> noindent</menunode>
<menutitle> noindent</menutitle>
<menucomment>                    Preventing paragraph indentation.
</menucomment>
</menuentry><menuentry>
<menunode> cartouche</menunode>
<menutitle> cartouche</menutitle>
<menucomment>                   Drawing rounded rectangles around examples.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Block Enclosing Commands</nodename>
<nodenext>quotation</nodenext>
<nodeup>Quotations and Examples</nodeup>
<section>
<title>Block Enclosing Commands</title>

<para>Here are commands for quotations and examples, explained further in the
following sections:
</para>
<table><tableitem><tableterm><code>@quotation</code></tableterm>
<item><para>Indicate text that is quoted. The text is filled, indented, and
printed in a roman font by default.
</para>
</item></tableitem><tableitem><tableterm><code>@example</code></tableterm>
<item><para>Illustrate code, commands, and the like. The text is printed
in a fixed-width font, and indented but not filled.
</para>
</item></tableitem><tableitem><tableterm><code>@verbatim</code></tableterm>
<item><para>Mark a piece of text that is to be printed verbatim; no character 
substitutions are made and all commands are ignored, until the next
<code>@end verbatim</code>.  The text is printed in a fixed-width font, 
and not indented or filled.  Extra spaces and blank lines are 
significant, and tabs are expanded.
</para>
</item></tableitem><tableitem><tableterm><code>@smallexample</code></tableterm>
<item><para>Same as <code>@example</code>, except that in &tex; this command typesets
text in a smaller font.
</para>
</item></tableitem><tableitem><tableterm><code>@lisp</code></tableterm>
<item><para>Like <code>@example</code>, but specifically for illustrating Lisp code. The
text is printed in a fixed-width font, and indented but not filled.
</para>
</item></tableitem><tableitem><tableterm><code>@smalllisp</code></tableterm>
<item><para>Is to <code>@lisp</code> as <code>@smallexample</code> is to <code>@example</code>.
</para>
</item></tableitem><tableitem><tableterm><code>@display</code></tableterm>
<item><para>Display illustrative text.  The text is indented but not filled, and
no font is selected (so, by default, the font is roman).
</para>
</item></tableitem><tableitem><tableterm><code>@smalldisplay</code></tableterm>
<item><para>Is to <code>@display</code> as <code>@smallexample</code> is to <code>@example</code>.
</para>
</item></tableitem><tableitem><tableterm><code>@format</code></tableterm>
<item><para>Like <code>@display</code> (the text is not filled and no font is selected),
but the text is not indented.
</para>
</item></tableitem><tableitem><tableterm><code>@smallformat</code></tableterm>
<item><para>Is to <code>@format</code> as <code>@smallexample</code> is to <code>@example</code>.
</para></item></tableitem></table>

<para>The <code>@exdent</code> command is used within the above constructs to
undo the indentation of a line.
</para>
<para>The <code>@flushleft</code> and <code>@flushright</code> commands are used to line
up the left or right margins of unfilled text.
</para>
<para>The <code>@noindent</code> command may be used after one of the above
constructs to prevent the following text from being indented as a new
paragraph.
</para>
<para>You can use the <code>@cartouche</code> command within one of the above
constructs to highlight the example or quotation by drawing a box with
rounded corners around it.  See <xref><xrefnodename>cartouche</xrefnodename><xrefprinteddesc>Drawing Cartouches Around Examples</xrefprinteddesc></xref>.
</para>

</section>
</node>
<node>
<nodename>quotation</nodename>
<nodenext>example</nodenext>
<nodeprev>Block Enclosing Commands</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@quotation</code></title>
<para><indexterm index="cp">Quotations</indexterm><indexterm index="fn">quotation</indexterm></para>
<para>The text of a quotation is processed normally except that:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>the margins are closer to the center of the page, so the whole of the
quotation is indented;
</para>
</item>
<item>
<para>the first lines of paragraphs are indented no more than other
lines;
</para>
</item>
<item>
<para>in the printed output, interparagraph spacing is reduced.
</para></item>
</itemize>

<quotation>
<para>This is an example of text written between an <code>@quotation</code>
command and an <code>@end quotation</code> command.  An <code>@quotation</code>
command is most often used to indicate text that is excerpted from
another (real or hypothetical) printed work.
</para></quotation>

<para>Write an <code>@quotation</code> command as text on a line by itself.  This
line will disappear from the output.  Mark the end of the quotation
with a line beginning with and containing only <code>@end quotation</code>.
The <code>@end quotation</code> line will likewise disappear from the
output.  Thus, the following,
</para>
<example xml:space="preserve">@quotation
This is
a foo.
@end quotation
</example>
<para>produces
</para>
<quotation>
<para>This is a foo.
</para></quotation>


</section>
</node>
<node>
<nodename>example</nodename>
<nodenext>verbatim</nodenext>
<nodeprev>quotation</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@example</code>: Example Text</title>
<para><indexterm index="cp">Examples, formatting them</indexterm><indexterm index="cp">Formatting examples</indexterm><indexterm index="fn">example</indexterm></para>
<para>The <code>@example</code> command is used to indicate an example that is
not part of the running text, such as computer input or output.
</para>
<example xml:space="preserve"><group>
This is an example of text written between an
<code>@example</code> command
and an <code>@end example</code> command.
The text is indented but not filled.
</group>

<group>
In the printed manual, the text is typeset in a
fixed-width font, and extra spaces and blank lines are
significant.  In the Info file, an analogous result is
obtained by indenting each line with five spaces.
</group>
</example>
<para>Write an <code>@example</code> command at the beginning of a line by itself.
Mark the end of the example
with an <code>@end example</code> command, also written at the beginning of a
line by itself.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">@example
mv foo bar
@end example
</example>
<para>produces
</para>
<example xml:space="preserve">mv foo bar
</example>
<para>The lines containing <code>@example</code> and <code>@end example</code>
will disappear from the output.
To make the output look good,
you should put a blank line before the
<code>@example</code> and another blank line after the <code>@end example</code>.
Note that blank lines inside the beginning
<code>@example</code> and the ending <code>@end example</code> will appear in
the output.
</para>
<quotation>
<para><strong>Caution:</strong> Do not use tabs in the lines of an example or anywhere
else in Texinfo (except in verbatim environments)!  The &tex;
implementation of Texinfo treats tabs as single spaces, and that is not
what they look like.  (If necessary, in Emacs, you can use <kbd>M-x
untabify</kbd> to convert tabs in a region to multiple spaces.)
</para></quotation>

<para>Examples are often, logically speaking, &ldquo;in the middle&rdquo; of a
paragraph, and the text that continues after an example should not be
indented.  The <code>@noindent</code> command prevents a piece of text from
being indented as if it were a new paragraph.
</para>
<para>(The <code>@code</code> command is used for examples of code that are
embedded within sentences, not set off from preceding and following
text.  See <xref><xrefnodename>code</xrefnodename><xrefprinteddesc><code>@code</code></xrefprinteddesc></xref>.)
</para>

</section>
</node>
<node>
<nodename>verbatim</nodename>
<nodenext>verbatiminclude</nodenext>
<nodeprev>example</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@verbatim</code>: Literal Text</title>
<para><indexterm index="fn">verbatim</indexterm><indexterm index="cp">Verbatim environment</indexterm></para>
<para>Use the <code>@verbatim</code> environment for printing of text that may
contain special characters or commands that should not be interpreted,
such as computer input or output (<code>@example</code> interprets its text
as regular Texinfo commands).  This is especially useful for including
automatically generated output in a Texinfo manual.  Here is an example;
the output you see is just the same as the input, with a line
<code>@verbatim</code> before and a line <code>@end verbatim</code> after.
</para>
<verbatim xml:space="preserve">This is an example of text written in a @verbatim
block.  No character substitutions are made.  All commands
are ignored, until `&lt;at&gt;end verbatim'.

In the printed manual, the text is typeset in a
fixed-width font, and not indented or filled.  All
spaces and blank lines are significant, including tabs.
</verbatim>
<para>Write a <code>@verbatim</code> command at the beginning of a line by itself.
This line will disappear from the output.  Mark the end of the verbatim
block with a <code>@end verbatim</code> command, also written at the
beginning of a line by itself.  The <code>@end verbatim</code> will also
disappear from the output.
</para>
<para>For example:
<!-- oops, got to trick this a bit: can't use @end verbatim inside @verbatim -->
</para>
<example xml:space="preserve"><exdent></exdent>@verbatim
<exdent></exdent>{
<exdent></exdent>&lt;tab&gt;@command with strange characters: @'e 
<exdent></exdent>expand&lt;tab&gt;me
<exdent></exdent>}
<exdent></exdent>@end verbatim
</example>
<para>produces
</para>
<verbatim xml:space="preserve">{
	@command with strange characters: @'e 
expand	me
}
</verbatim>
<para>Since the lines containing <code>@verbatim</code> and <code>@end verbatim</code>
produce no output, tyically you should put a blank line before the
<code>@verbatim</code> and another blank line after the <code>@end
verbatim</code>.  Blank lines between the beginning <code>@verbatim</code> and the
ending <code>@end verbatim</code> will appear in the output.
</para>

</section>
</node>
<node>
<nodename>verbatiminclude</nodename>
<nodenext>lisp</nodenext>
<nodeprev>verbatim</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@verbatiminclude</code> <var>file</var>: Include a File Verbatim</title>
<para><indexterm index="cp">Verbatim, include file</indexterm><indexterm index="cp">Including a file verbatim</indexterm><indexterm index="fn">verbatiminclude</indexterm></para>
<para>You can include the exact contents of a file in the document with the
<code>@verbatiminclude</code> command:
</para>
<example xml:space="preserve">@verbatiminclude <var>filename</var>
</example>
<para>The contents of <var>filename</var> is printed in a verbatim environment
(see <xref><xrefnodename>verbatim</xrefnodename><xrefprinteddesc><code>@verbatim</code></xrefprinteddesc></xref>).  Generally, the file is printed
exactly as it is, with all special characters and white space retained.
</para>

</section>
</node>
<node>
<nodename>lisp</nodename>
<nodenext>small</nodenext>
<nodeprev>verbatiminclude</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@lisp</code>: Marking a Lisp Example</title>
<para><indexterm index="fn">lisp</indexterm><indexterm index="cp">Lisp example</indexterm></para>
<para>The <code>@lisp</code> command is used for Lisp code.  It is synonymous
with the <code>@example</code> command.
</para>
<lisp xml:space="preserve">This is an example of text written between an
<code>@lisp</code> command and an <code>@end lisp</code> command.
</lisp>
<para>Use <code>@lisp</code> instead of <code>@example</code> to preserve information
regarding the nature of the example.  This is useful, for example, if
you write a function that evaluates only and all the Lisp code in a
Texinfo file.  Then you can use the Texinfo file as a Lisp
library.<footnote><para>It would be straightforward to extend Texinfo to work
in a similar fashion for C, Fortran, or other languages.
</para></footnote>
</para>
<para>Mark the end of <code>@lisp</code> with <code>@end lisp</code> on a line by
itself.
</para>

</section>
</node>
<node>
<nodename>small</nodename>
<nodenext>display</nodenext>
<nodeprev>lisp</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@small&dots;</code> Block Commands</title>
<para><indexterm index="cp">Small examples</indexterm><indexterm index="cp">Examples in smaller fonts</indexterm><indexterm index="cp">Lisp examples in smaller fonts</indexterm><indexterm index="fn">smalldisplay</indexterm><indexterm index="fn">smallexample</indexterm><indexterm index="fn">smallformat</indexterm><indexterm index="fn">smalllisp</indexterm></para>
<para>In addition to the regular <code>@example</code> and <code>@lisp</code> commands,
Texinfo has &ldquo;small&rdquo; example-style commands.  These are
<code>@smalldisplay</code>, <code>@smallexample</code>, <code>@smallformat</code>, and
<code>@smalllisp</code>.
</para>
<para>In &tex;, the <code>@small&dots;</code> commands typeset text in a smaller
font than the non-small example commands.  Consequently, many examples
containing long lines fit on a page without needing to be shortened.
</para>
<para>In Info, the <code>@small&dots;</code> commands are equivalent to their
non-small companion commands.
</para>
<para>Mark the end of an <code>@small&dots;</code> block with a corresponding
<code>@end small&dots;</code>.  For example, pair <code>@smallexample</code> with
<code>@end smallexample</code>.
</para>

<para>The <code>@small&dots;</code> commands make it easier to prepare manuals
without forcing you to edit examples by hand to fit them onto narrower
pages.
</para>
<para>As a general rule, a printed document looks better if you use only one
of (for example) <code>@example</code> or in <code>@smallexample</code>
consistently within a chapter.  Only occasionally should you mix the two
formats.
</para>
<para>See <xref><xrefnodename>smallbook</xrefnodename><xrefprinteddesc>Printing &ldquo;Small&rdquo; Books</xrefprinteddesc></xref>, for more information
about the <code>@smallbook</code> command.
</para>

</section>
</node>
<node>
<nodename>display</nodename>
<nodenext>format</nodenext>
<nodeprev>small</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@display</code> and <code>@smalldisplay</code></title>
<para><indexterm index="cp">Display formatting</indexterm><indexterm index="fn">display</indexterm></para>
<para>The <code>@display</code> command begins a kind of example.  It is like the
<code>@example</code> command
except that, in
a printed manual, <code>@display</code> does not select the fixed-width
font.  In fact, it does not specify the font at all, so that the text
appears in the same font it would have appeared in without the
<code>@display</code> command.
</para>
<display xml:space="preserve">This is an example of text written between an <code>@display</code> command
and an <code>@end display</code> command.  The <code>@display</code> command
indents the text, but does not fill it.
</display>
<para><indexterm index="fn">smalldisplay</indexterm>Texinfo also provides a command <code>@smalldisplay</code>, which is like
<code>@display</code> but uses a smaller font in <code>@smallbook</code> format.
See <xref><xrefnodename>small</xrefnodename></xref>.
</para>

</section>
</node>
<node>
<nodename>format</nodename>
<nodenext>exdent</nodenext>
<nodeprev>display</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@format</code> and <code>@smallformat</code></title>
<para><indexterm index="fn">format</indexterm></para>
<para>The <code>@format</code> command is similar to <code>@example</code> except
that, in the printed manual, <code>@format</code> does not select the
fixed-width font and does not narrow the margins.
</para>
<format xml:space="preserve">This is an example of text written between an <code>@format</code> command
and an <code>@end format</code> command.  As you can see
from this example,
the <code>@format</code> command does not fill the text.
</format>
<para><indexterm index="fn">smallformat</indexterm>Texinfo also provides a command <code>@smallformat</code>, which is like
<code>@format</code> but uses a smaller font in <code>@smallbook</code> format.
See <xref><xrefnodename>small</xrefnodename></xref>.
</para>


</section>
</node>
<node>
<nodename>exdent</nodename>
<nodenext>flushleft &amp; flushright</nodenext>
<nodeprev>format</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@exdent</code>: Undoing a Line's Indentation</title>
<para><indexterm index="cp">Indentation undoing</indexterm><indexterm index="fn">exdent</indexterm></para>
<para>The <code>@exdent</code> command removes any indentation a line might have.
The command is written at the beginning of a line and applies only to
the text that follows the command that is on the same line.  Do not use
braces around the text.  In a printed manual, the text on an
<code>@exdent</code> line is printed in the roman font.
</para>
<para><code>@exdent</code> is usually used within examples.  Thus,
</para>
<example xml:space="preserve"><group>
@example
This line follows an @@example command.
@exdent This line is exdented.
This line follows the exdented line.
The @@end example comes on the next line.
@end group
</group>
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
This line follows an @example command.
<exdent></exdent>This line is exdented.
This line follows the exdented line.
The @end example comes on the next line.
</group>
</example>
<para>In practice, the <code>@exdent</code> command is rarely used.
Usually, you un-indent text by ending the example and
returning the page to its normal width.
</para>

</section>
</node>
<node>
<nodename>flushleft &amp; flushright</nodename>
<nodenext>noindent</nodenext>
<nodeprev>exdent</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@flushleft</code> and <code>@flushright</code></title>
<para><indexterm index="fn">flushleft</indexterm><indexterm index="fn">flushright</indexterm><indexterm index="cp">ragged right</indexterm><indexterm index="cp">ragged left</indexterm></para>
<para>The <code>@flushleft</code> and <code>@flushright</code> commands line up the
ends of lines on the left and right margins of a page,
but do not fill the text.  The commands are written on lines of their
own, without braces.  The <code>@flushleft</code> and <code>@flushright</code>
commands are ended by <code>@end flushleft</code> and <code>@end
flushright</code> commands on lines of their own.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@flushleft
This text is
written flushleft.
@end flushleft
</group>
</example>
<para>produces
</para>
<quotation>
<para>This text is
written flushleft.
</para></quotation>


<para><code>@flushright</code> produces the type of indentation often used in the
return address of letters.  For example,
</para>
<example xml:space="preserve"><group>
@flushright
Here is an example of text written
flushright.  The @code{@flushright} command
right justifies every line but leaves the
left end ragged.
@end flushright
</group>
</example>
<para>produces
</para>
<para>Here is an example of text written
flushright.  The <code>@flushright</code> command
right justifies every line but leaves the
left end ragged.
</para>

</section>
</node>
<node>
<nodename>noindent</nodename>
<nodenext>cartouche</nodenext>
<nodeprev>flushleft &amp; flushright</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@noindent</code>: Omitting Indentation</title>
<para><indexterm index="fn">noindent</indexterm></para>
<para>An example or other inclusion can break a paragraph into segments.
Ordinarily, the formatters indent text that follows an example as a new
paragraph.  However, you can prevent this by writing <code>@noindent</code>
at the beginning of a line by itself preceding the continuation
text.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
@example
This is an example
@end example

@noindent
This line is not indented.  As you can see, the
beginning of the line is fully flush left with the line
that follows after it.  (This whole example is between
@code{@@display} and @code{@@end display}.)
</group>
</example>
<para>produces
</para>
<display xml:space="preserve"><example xml:space="preserve">This is an example
</example>
This line is not indented.  As you can see, the
beginning of the line is fully flush left with the line
that follows after it.  (This whole example is between
<code>@display</code> and <code>@end display</code>.)
</display>
<para>To adjust the number of blank lines properly in the Info file output,
remember that the line containing <code>@noindent</code> does not generate a
blank line, and neither does the <code>@end example</code> line.
</para>
<para>In the Texinfo source file for this manual, each line that says
`produces' is preceded by a line containing <code>@noindent</code>.
</para>
<para>Do not put braces after an <code>@noindent</code> command; they are not
necessary, since <code>@noindent</code> is a command used outside of
paragraphs (see <xref><xrefnodename>Command Syntax</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>cartouche</nodename>
<nodeprev>noindent</nodeprev>
<nodeup>Quotations and Examples</nodeup>
<section>
<title><code>@cartouche</code>: Rounded Rectangles Around Examples</title>
<para><indexterm index="fn">cartouche</indexterm><indexterm index="cp">Box with rounded corners</indexterm><indexterm index="cp">Rounded rectangles, around examples</indexterm></para>
<para>In a printed manual, the <code>@cartouche</code> command draws a box with
rounded corners around its contents.  You can use this command to
further highlight an example or quotation.  For instance, you could
write a manual in which one type of example is surrounded by a cartouche
for emphasis.
</para>
<para><code>@cartouche</code> affects only the printed manual; it has no effect in
other output files.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@example
@cartouche
% pwd
/usr/local/share/emacs
@end cartouche
@end example
</group>
</example>
<para>surrounds the two-line example with a box with rounded corners, in the
printed manual.
</para>


</section>
</node>
<node>
<nodename>Lists and Tables</nodename>
<nodenext>Indices</nodenext>
<nodeprev>Quotations and Examples</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Lists and Tables</title>
<para><indexterm index="cp">Making lists and tables</indexterm><indexterm index="cp">Lists and tables, making</indexterm><indexterm index="cp">Tables and lists, making</indexterm></para>
<para>Texinfo has several ways of making lists and tables.  Lists can be
bulleted or numbered; two-column tables can highlight the items in
the first column; multi-column tables are also supported.
</para>
<menu>
<menuentry>
<menunode> Introducing Lists</menunode>
<menutitle> Introducing Lists</menutitle>
<menucomment>           Texinfo formats lists for you.
</menucomment>
</menuentry><menuentry>
<menunode> itemize</menunode>
<menutitle> itemize</menutitle>
<menucomment>                     How to construct a simple list.
</menucomment>
</menuentry><menuentry>
<menunode> enumerate</menunode>
<menutitle> enumerate</menutitle>
<menucomment>                   How to construct a numbered list.
</menucomment>
</menuentry><menuentry>
<menunode> Two-column Tables</menunode>
<menutitle> Two-column Tables</menutitle>
<menucomment>           How to construct a two-column table.
</menucomment>
</menuentry><menuentry>
<menunode> Multi-column Tables</menunode>
<menutitle> Multi-column Tables</menutitle>
<menucomment>         How to construct generalized tables.
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>Introducing Lists</nodename>
<nodenext>itemize</nodenext>
<nodeprev>Lists and Tables</nodeprev>
<nodeup>Lists and Tables</nodeup>

<para>Texinfo automatically indents the text in lists or tables, and numbers
an enumerated list.  This last feature is useful if you modify the
list, since you do not need to renumber it yourself.
</para>
<para>Numbered lists and tables begin with the appropriate @-command at the
beginning of a line, and end with the corresponding <code>@end</code>
command on a line by itself.  The table and itemized-list commands
also require that you write formatting information on the same line as
the beginning @-command.
</para>
<para>Begin an enumerated list, for example, with an <code>@enumerate</code>
command and end the list with an <code>@end enumerate</code> command.
Begin an itemized list with an <code>@itemize</code> command, followed on
the same line by a formatting command such as <code>@bullet</code>, and end
the list with an <code>@end itemize</code> command.
<indexterm index="fn">end</indexterm></para>
<para>Precede each element of a list with an <code>@item</code> or <code>@itemx</code>
command.
</para>
<sp lines="1"></sp>
<para>Here is an itemized list of the different kinds of table and lists:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Itemized lists with and without bullets.
</para>
</item>
<item>
<para>Enumerated lists, using numbers or letters.
</para>
</item>
<item>
<para>Two-column tables with highlighting.
</para></item>
</itemize>

<sp lines="1"></sp>
<para>Here is an enumerated list with the same items:
</para>
<enumerate first="1"><item>
<para>Itemized lists with and without bullets.
</para>
</item>
<item>
<para>Enumerated lists, using numbers or letters.
</para>
</item>
<item>
<para>Two-column tables with highlighting.
</para></item>
</enumerate>

<sp lines="1"></sp>
<para>And here is a two-column table with the same items and their
@-commands<!-- /@w -->:
</para>
<table><tableitem><tableterm><code>@itemize</code></tableterm>
<item><para>Itemized lists with and without bullets.
</para>
</item></tableitem><tableitem><tableterm><code>@enumerate</code></tableterm>
<item><para>Enumerated lists, using numbers or letters.
</para>
</item></tableitem><tableitem><tableterm><code>@table</code></tableterm>
<tableterm><code>@ftable</code></tableterm>
<tableterm><code>@vtable</code></tableterm>
<item><para>Two-column tables, optionally with indexing.
</para></item></tableitem></table>


</node>
<node>
<nodename>itemize</nodename>
<nodenext>enumerate</nodenext>
<nodeup>Lists and Tables</nodeup>
<section>
<title><code>@itemize</code>: Making an Itemized List</title>
<para><indexterm index="cp">Itemization</indexterm><indexterm index="fn">itemize</indexterm></para>
<para>The <code>@itemize</code> command produces sequences of indented
paragraphs, with a bullet or other mark inside the left margin
at the beginning of each paragraph for which such a mark is desired.
</para>
<para><indexterm index="cp"><code>@w</code>, for blank items</indexterm>Begin an itemized list by writing <code>@itemize</code> at the beginning of
a line.  Follow the command, on the same line, with a character or a
Texinfo command that generates a mark.  Usually, you will write
<code>@bullet</code> after <code>@itemize</code>, but you can use
<code>@minus</code>, or any command or character that results in a single
character in the Info file.  If you don't want any mark at all, use
<code>@w</code>.  (When you write the mark command such as
<code>@bullet</code> after an <code>@itemize</code> command, you may omit the
<samp>{}</samp>.)  If you don't specify a mark command, the default is
<code>@bullet</code>.
</para>
<para>Write the text of the indented paragraphs themselves after the
<code>@itemize</code>, up to another line that says <code>@end
itemize</code>.
</para>
<para><indexterm index="fn">item</indexterm>Before each paragraph for which a mark in the margin is desired, write a
line that says just <code>@item</code>.  It is ok to have text following the
<code>@item</code>.
</para>
<para>Usually, you should put a blank line before an <code>@item</code>.  This
puts a blank line in the Info file. (&tex; inserts the proper
interline whitespace in either case.)  Except when the entries are
very brief, these blank lines make the list look better.
</para>
<para>Here is an example of the use of <code>@itemize</code>, followed by the
output it produces.  <code>@bullet</code> produces an <samp>*</samp> in Info and a
round dot in &tex;.
</para>
<example xml:space="preserve"><group>
@itemize @bullet
@item
Some text for foo.

@item
Some text
for bar.
@end itemize
</group>
</example>
<para>This produces:
</para>
<quotation>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Some text for foo.
</para>
</item>
<item>
<para>Some text
for bar.
</para></item>
</itemize>
</quotation>

<para>Itemized lists may be embedded within other itemized lists.  Here is a
list marked with dashes embedded in a list marked with bullets:
</para>
<example xml:space="preserve"><group>
@itemize @bullet
@item
First item.

@itemize @minus
@item
Inner item.

@item
Second inner item.
@end itemize

@item
Second outer item.
@end itemize
</group>
</example>
<para>This produces:
</para>
<quotation>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>First item.
</para>
<itemize><itemfunction>&minus;</itemfunction><item>
<para>Inner item.
</para>
</item>
<item>
<para>Second inner item.
</para></item>
</itemize>

</item>
<item>
<para>Second outer item.
</para></item>
</itemize>
</quotation>


</section>
</node>
<node>
<nodename>enumerate</nodename>
<nodenext>Two-column Tables</nodenext>
<nodeprev>itemize</nodeprev>
<nodeup>Lists and Tables</nodeup>
<section>
<title><code>@enumerate</code>: Making a Numbered or Lettered List</title>
<para><indexterm index="cp">Enumeration</indexterm><indexterm index="fn">enumerate</indexterm></para>
<para><code>@enumerate</code> is like <code>@itemize</code> (see <xref><xrefnodename>itemize</xrefnodename><xrefprinteddesc><code>@itemize</code></xrefprinteddesc></xref>), except that the labels on the items are
successive integers or letters instead of bullets.
</para>
<para>Write the <code>@enumerate</code> command at the beginning of a line.  The
command does not require an argument, but accepts either a number or a
letter as an option.  Without an argument, <code>@enumerate</code> starts the
list with the number <samp>1</samp>.  With a numeric argument, such as
<samp>3</samp>, the command starts the list with that number.  With an upper
or lower case letter, such as <samp>a</samp> or <samp>A</samp>, the command starts
the list with that letter.
</para>
<para>Write the text of the enumerated list in the same way you write an
itemized list: put <code>@item</code> on a line of its own before the start
of each paragraph that you want enumerated.  Do not write any other text
on the line beginning with <code>@item</code>.
</para>
<para>You should put a blank line between entries in the list.
This generally makes it easier to read the Info file.
</para>
<need></need><para>Here is an example of <code>@enumerate</code> without an argument:
</para>
<example xml:space="preserve"><group>
@enumerate
@item
Underlying causes.

@item
Proximate causes.
@end enumerate
</group>
</example>
<para>This produces:
</para>
<enumerate first="1"><item>
<para>Underlying causes.
</para>
</item>
<item>
<para>Proximate causes.
</para></item>
</enumerate>
<sp lines="1"></sp>
<para>Here is an example with an argument of <kbd>3</kbd>:
</para><sp lines="1"></sp>
<example xml:space="preserve"><group>
@enumerate 3
@item
Predisposing causes.

@item
Precipitating causes.

@item
Perpetuating causes.
@end enumerate
</group>
</example>
<para>This produces:
</para>
<enumerate first="3"><item>
<para>Predisposing causes.
</para>
</item>
<item>
<para>Precipitating causes.
</para>
</item>
<item>
<para>Perpetuating causes.
</para></item>
</enumerate>
<sp lines="1"></sp>
<para>Here is a brief summary of the alternatives.  The summary is constructed
using <code>@enumerate</code> with an argument of <kbd>a</kbd>.
</para><sp lines="1"></sp>
<enumerate first="a"><item>
<para><code>@enumerate</code>
</para>
<para>Without an argument, produce a numbered list, starting with the number
1.
</para>
</item>
<item>
<para><code>@enumerate <var>positive-integer</var></code>
</para>
<para>With a (positive) numeric argument, start a numbered list with that
number.  You can use this to continue a list that you interrupted with
other text.
</para>
</item>
<item>
<para><code>@enumerate <var>upper-case-letter</var></code>
</para>
<para>With an upper case letter as argument, start a list
in which each item is marked
by a letter, beginning with that upper case letter.
</para>
</item>
<item>
<para><code>@enumerate <var>lower-case-letter</var></code>
</para>
<para>With a lower case letter as argument, start a list
in which each item is marked by
a letter, beginning with that lower case letter.
</para></item>
</enumerate>

<para>You can also nest enumerated lists, as in an outline.
</para>
</section>
</node>
<node>
<nodename>Two-column Tables</nodename>
<nodenext>Multi-column Tables</nodenext>
<nodeprev>enumerate</nodeprev>
<nodeup>Lists and Tables</nodeup>
<section>
<title>Making a Two-column Table</title>
<para><indexterm index="cp">Tables, making two-column</indexterm><indexterm index="fn">table</indexterm></para>
<para><code>@table</code> is similar to <code>@itemize</code> (see <xref><xrefnodename>itemize</xrefnodename><xrefprinteddesc><code>@itemize</code></xrefprinteddesc></xref>), but allows you to specify a name or heading line for
each item.  The <code>@table</code> command is used to produce two-column
tables, and is especially useful for glossaries, explanatory
exhibits, and command-line option summaries.
</para>
<menu>
<menuentry>
<menunode> table</menunode>
<menutitle> table</menutitle>
<menucomment>                       How to construct a two-column table.
</menucomment>
</menuentry><menuentry>
<menunode> ftable vtable</menunode>
<menutitle> ftable vtable</menutitle>
<menucomment>               Automatic indexing for two-column tables.
</menucomment>
</menuentry><menuentry>
<menunode> itemx</menunode>
<menutitle> itemx</menutitle>
<menucomment>                       How to put more entries in the first column.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>table</nodename>
<nodenext>ftable vtable</nodenext>
<nodeprev>Two-column Tables</nodeprev>
<nodeup>Two-column Tables</nodeup>

<para>Write the <code>@table</code> command at the beginning of a line and follow
it on the same line with an argument that is a Texinfo &ldquo;indicating&rdquo;
command such as <code>@code</code>, <code>@samp</code>, <code>@var</code>, or
<code>@kbd</code> (see <xref><xrefnodename>Indicating</xrefnodename></xref>).  Although these commands are usually
followed by arguments in braces, in this case you use the command name
without an argument because <code>@item</code> will supply the argument.
This command will be applied to the text that goes into the first column
of each item and determines how it will be highlighted.  For example,
<code>@code</code> will cause the text in the first column to be highlighted
with an <code>@code</code> command.  (We recommend <code>@code</code> for
<code>@table</code>'s of command-line options.)
</para>
<para><indexterm index="fn">asis</indexterm>You may also choose to use the <code>@asis</code> command as an argument to
<code>@table</code>.  <code>@asis</code> is a command that does nothing; if you
use this command after <code>@table</code>, &tex; and the Info formatting
commands output the first column entries without added highlighting
(&ldquo;as is&rdquo;).
</para>
<para>(The <code>@table</code> command may work with other commands besides those
listed here.  However, you can only use commands that normally take
arguments in braces.)
</para>
<para><indexterm index="fn">item</indexterm>Begin each table entry with an <code>@item</code> command at the beginning
of a line.  Write the first column text on the same line as the
<code>@item</code> command.  Write the second column text on the line
following the <code>@item</code> line and on subsequent lines.  (You do not
need to type anything for an empty second column entry.)  You may
write as many lines of supporting text as you wish, even several
paragraphs.  But only text on the same line as the <code>@item</code> will
be placed in the first column, including any footnote.
</para>
<para>Normally, you should put a blank line before an <code>@item</code> line.
This puts a blank like in the Info file.  Except when the entries are
very brief, a blank line looks better.
</para>
<need></need><para>The following table, for example, highlights the text in the first
column with an <code>@samp</code> command:
</para>
<example xml:space="preserve"><group>
@table @samp
@item foo
This is the text for
@samp{foo}.

@item bar
Text for @samp{bar}.
@end table
</group>
</example>
<para>This produces:
</para>
<table><tableitem><tableterm><samp>foo</samp></tableterm>
<item><para>This is the text for
<samp>foo</samp>.
</para></item></tableitem><tableitem><tableterm><samp>bar</samp></tableterm>
<item><para>Text for <samp>bar</samp>.
</para></item></tableitem></table>

<para>If you want to list two or more named items with a single block of
text, use the <code>@itemx</code> command.  (See <xref><xrefnodename>itemx</xrefnodename><xrefprinteddesc><code>@itemx</code></xrefprinteddesc></xref>.)
</para>

</node>
<node>
<nodename>ftable vtable</nodename>
<nodenext>itemx</nodenext>
<nodeup>Two-column Tables</nodeup>
<subsection>
<title><code>@ftable</code> and <code>@vtable</code></title>
<para><indexterm index="cp">Tables with indexes</indexterm><indexterm index="cp">Indexing table entries automatically</indexterm><indexterm index="fn">ftable</indexterm><indexterm index="fn">vtable</indexterm></para>
<para>The <code>@ftable</code> and <code>@vtable</code> commands are the same as the
<code>@table</code> command except that <code>@ftable</code> automatically enters
each of the items in the first column of the table into the index of
functions and <code>@vtable</code> automatically enters each of the items in
the first column of the table into the index of variables.  This
simplifies the task of creating indices.  Only the items on the same
line as the <code>@item</code> commands are indexed, and they are indexed in
exactly the form that they appear on that line.  See <xref><xrefnodename>Indices</xrefnodename></xref>,
for more information about indices.
</para>
<para>Begin a two-column table using <code>@ftable</code> or <code>@vtable</code> by
writing the @-command at the beginning of a line, followed on the same
line by an argument that is a Texinfo command such as <code>@code</code>,
exactly as you would for an <code>@table</code> command; and end the table
with an <code>@end ftable</code> or <code>@end vtable</code> command on a line by
itself.
</para>
<para>See the example for <code>@table</code> in the previous section.
</para>
</subsection>
</node>
<node>
<nodename>itemx</nodename>
<nodeprev>ftable vtable</nodeprev>
<nodeup>Two-column Tables</nodeup>
<subsection>
<title><code>@itemx</code></title>
<para><indexterm index="cp">Two named items for <code>@table</code></indexterm><indexterm index="fn">itemx</indexterm></para>
<para>Use the <code>@itemx</code> command inside a table when you have two or more
first column entries for the same item, each of which should appear on a
line of its own.  Use <code>@itemx</code> for all but the first entry;
<code>@itemx</code> should always follow an <code>@item</code> command.  The
<code>@itemx</code> command works exactly like <code>@item</code> except that it
does not generate extra vertical space above the first column text.
</para>
<para>For example,
</para>
<example xml:space="preserve"><group>
@table @code
@item upcase
@itemx downcase
These two functions accept a character or a string as
argument, and return the corresponding upper case (lower
case) character or string.
@end table
</group>
</example>
<para>This produces:
</para>
<table><tableitem><tableterm><code>upcase</code></tableterm>
<tableterm><code>downcase</code></tableterm>
<item><para>These two functions accept a character or a string as
argument, and return the corresponding upper case (lower
case) character or string.
</para></item></tableitem></table>

<para>(Note also that this example illustrates multi-line supporting text in
a two-column table.)
</para>

</subsection>
</node>
<node>
<nodename>Multi-column Tables</nodename>
<nodeprev>Two-column Tables</nodeprev>
<nodeup>Lists and Tables</nodeup>
<section>
<title>Multi-column Tables</title>
<para><indexterm index="cp">Tables, making multi-column</indexterm><indexterm index="fn">multitable</indexterm></para>
<para><code>@multitable</code> allows you to construct tables with any number of
columns, with each column having any width you like.
</para>
<para>You define the column widths on the <code>@multitable</code> line itself, and
write each row of the actual table following an <code>@item</code> command,
with columns separated by an <code>@tab</code> command.  Finally, <code>@end
multitable</code> completes the table.  Details in the sections below.
</para>
<menu>
<menuentry>
<menunode> Multitable Column Widths</menunode>
<menutitle> Multitable Column Widths</menutitle>
<menucomment>    Defining multitable column widths.
</menucomment>
</menuentry><menuentry>
<menunode> Multitable Rows</menunode>
<menutitle> Multitable Rows</menutitle>
<menucomment>             Defining multitable rows, with examples.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Multitable Column Widths</nodename>
<nodenext>Multitable Rows</nodenext>
<nodeup>Multi-column Tables</nodeup>
<subsection>
<title>Multitable Column Widths</title>
<para><indexterm index="cp">Multitable column widths</indexterm><indexterm index="cp">Column widths, defining for multitables</indexterm><indexterm index="cp">Widths, defining multitable column</indexterm></para>
<para>You can define the column widths for a multitable in two ways: as
fractions of the line length; or with a prototype row.  Mixing the two
methods is not supported.  In either case, the widths are defined
entirely on the same line as the <code>@multitable</code> command.
</para>
<enumerate first="1"><item>
<para><indexterm index="fn">columnfractions</indexterm><indexterm index="cp">Line length, column widths as fraction of</indexterm>To specify column widths as fractions of the line length, write
<code>@columnfractions</code> and the decimal numbers (presumably less than
1) after the <code>@multitable</code> command, as in:
</para>
<example xml:space="preserve">@multitable @columnfractions .33 .33 .33
</example>
<para>The fractions need not add up exactly to 1.0, as these do
not.  This allows you to produce tables that do not need the full line
length.  You can use a leading zero if you wish.
</para>
</item>
<item>
<para><indexterm index="cp">Prototype row, column widths defined by</indexterm>To specify a prototype row, write the longest entry for each column
enclosed in braces after the <code>@multitable</code> command.  For example:
</para>
<example xml:space="preserve">@multitable {some text for column one} {for column two}
</example>
<para>The first column will then have the width of the typeset `some text for
column one', and the second column the width of `for column two'.
</para>
<para>The prototype entries need not appear in the table itself.
</para>
<para>Although we used simple text in this example, the prototype entries can
contain Texinfo commands; markup commands such as <code>@code</code> are
particularly likely to be useful.
</para>
</item>
</enumerate>


</subsection>
</node>
<node>
<nodename>Multitable Rows</nodename>
<nodeprev>Multitable Column Widths</nodeprev>
<nodeup>Multi-column Tables</nodeup>
<subsection>
<title>Multitable Rows</title>
<para><indexterm index="cp">Multitable rows</indexterm><indexterm index="cp">Rows, of a multitable</indexterm></para>
<para><indexterm index="fn">item</indexterm><indexterm index="fn">tab</indexterm>After the <code>@multitable</code> command defining the column widths (see
the previous section), you begin each row in the body of a multitable
with <code>@item</code>, and separate the column entries with <code>@tab</code>.
Line breaks are not special within the table body, and you may break
input lines in your source file as necessary.
</para>
<para>Here is a complete example of a multi-column table (the text is from
<cite>The GNU Emacs Manual</cite>, see <xref><xrefnodename>Split Window</xrefnodename><xrefprinteddesc>Splitting Windows</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>):
</para>
<example xml:space="preserve">@multitable @columnfractions .15 .45 .4
@item Key @tab Command @tab Description
@item C-x 2
@tab @code{split-window-vertically}
@tab Split the selected window into two windows,
with one above the other.
@item C-x 3
@tab @code{split-window-horizontally}
@tab Split the selected window into two windows
positioned side by side.
@item C-Mouse-2
@tab
@tab In the mode line or scroll bar of a window,
split that window.
@end multitable
</example>
<para>produces:
</para>
<multitable><columnfraction>15</columnfraction>
<columnfraction>45</columnfraction>
<columnfraction>40</columnfraction>
<tbody><row><entry> Key </entry><entry> Command </entry><entry> Description
</entry></row><row><entry> C-x 2
</entry><entry> <code>split-window-vertically</code>
</entry><entry> Split the selected window into two windows,
with one above the other.
</entry></row><row><entry> C-x 3
</entry><entry> <code>split-window-horizontally</code>
</entry><entry> Split the selected window into two windows
positioned side by side.
</entry></row><row><entry> C-Mouse-2
</entry><entry>
</entry><entry> In the mode line or scroll bar of a window,
split that window.
</entry></row></tbody></multitable>


</subsection>
</node>
<node>
<nodename>Indices</nodename>
<nodenext>Insertions</nodenext>
<nodeprev>Lists and Tables</nodeprev>
<nodeup>Top</nodeup>
<!-- node-name,  next,  previous,  up -->
<chapter>
<title>Indices</title>
<para><indexterm index="cp">Indices</indexterm></para>
<para>Using Texinfo, you can generate indices without having to sort and
collate entries manually.  In an index, the entries are listed in
alphabetical order, together with information on how to find the
discussion of each entry.  In a printed manual, this information
consists of page numbers.  In an Info file, this information is a menu
entry leading to the first node referenced.
</para>
<para>Texinfo provides several predefined kinds of index: an index
for functions, an index for variables, an index for concepts, and so
on.  You can combine indices or use them for other than their
canonical purpose.  If you wish, you can define your own indices.
</para>
<menu>
<menuentry>
<menunode> Index Entries</menunode>
<menutitle> Index Entries</menutitle>
<menucomment>               Choose different words for index entries.
</menucomment>
</menuentry><menuentry>
<menunode> Predefined Indices</menunode>
<menutitle> Predefined Indices</menutitle>
<menucomment>          Use different indices for different kinds
                                  of entry.
</menucomment>
</menuentry><menuentry>
<menunode> Indexing Commands</menunode>
<menutitle> Indexing Commands</menutitle>
<menucomment>           How to make an index entry.
</menucomment>
</menuentry><menuentry>
<menunode> Combining Indices</menunode>
<menutitle> Combining Indices</menutitle>
<menucomment>           How to combine indices.
</menucomment>
</menuentry><menuentry>
<menunode> New Indices</menunode>
<menutitle> New Indices</menutitle>
<menucomment>                 How to define your own indices.
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>Index Entries</nodename>
<nodenext>Predefined Indices</nodenext>
<nodeprev>Indices</nodeprev>
<nodeup>Indices</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Making Index Entries</title>
<para><indexterm index="cp">Index entries, making</indexterm><indexterm index="cp">Entries, making index</indexterm></para>
<para>When you are making index entries, it is good practice to think of the
different ways people may look for something.  Different people
<emph>do not</emph> think of the same words when they look something up.  A
helpful index will have items indexed under all the different words
that people may use.  For example, one reader may think it obvious that
the two-letter names for indices should be listed under &ldquo;Indices,
two-letter names&rdquo;, since the word &ldquo;Index&rdquo; is the general concept.
But another reader may remember the specific concept of two-letter
names and search for the entry listed as &ldquo;Two letter names for
indices&rdquo;.  A good index will have both entries and will help both
readers.
</para>
<para>Like typesetting, the construction of an index is a highly skilled,
professional art, the subtleties of which are not appreciated until you
need to do it yourself.
</para>
<para>See <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>, for information about printing an index
at the end of a book or creating an index menu in an Info file.
</para>
</section>
</node>
<node>
<nodename>Predefined Indices</nodename>
<nodenext>Indexing Commands</nodenext>
<nodeprev>Index Entries</nodeprev>
<nodeup>Indices</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Predefined Indices</title>

<para>Texinfo provides six predefined indices:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>A <dfn>concept index</dfn> listing concepts that are discussed.
</para>
</item>
<item>
<para>A <dfn>function index</dfn> listing functions (such as entry points of
libraries).
</para>
</item>
<item>
<para>A <dfn>variables index</dfn> listing variables (such as global variables
of libraries).
</para>
</item>
<item>
<para>A <dfn>keystroke index</dfn> listing keyboard commands.
</para>
</item>
<item>
<para>A <dfn>program index</dfn> listing names of programs.
</para>
</item>
<item>
<para>A <dfn>data type index</dfn> listing data types (such as structures defined in
header files).
</para></item>
</itemize>

<para>Not every manual needs all of these, and most manuals use two or three
of them.  This manual has two indices: a
concept index and an @-command index (that is actually the function
index but is called a command index in the chapter heading).  Two or
more indices can be combined into one using the <code>@synindex</code> or
<code>@syncodeindex</code> commands.  See <xref><xrefnodename>Combining Indices</xrefnodename></xref>.
</para>
</section>
</node>
<node>
<nodename>Indexing Commands</nodename>
<nodenext>Combining Indices</nodenext>
<nodeprev>Predefined Indices</nodeprev>
<nodeup>Indices</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Defining the Entries of an Index</title>
<para><indexterm index="cp">Defining indexing entries</indexterm><indexterm index="cp">Index entries</indexterm><indexterm index="cp">Entries for an index</indexterm><indexterm index="cp">Specifying index entries</indexterm><indexterm index="cp">Creating index entries</indexterm></para>
<para>The data to make an index come from many individual indexing commands
scattered throughout the Texinfo source file.  Each command says to add
one entry to a particular index; after formatting, the index will give
the current page number or node name as the reference.
</para>
<para>An index entry consists of an indexing command at the beginning of a
line followed, on the rest of the line, by the entry.
</para>
<para>For example, this section begins with the following five entries for
the concept index:
</para>
<example xml:space="preserve">@cindex Defining indexing entries
@cindex Index entries
@cindex Entries for an index
@cindex Specifying index entries
@cindex Creating index entries
</example>
<para>Each predefined index has its own indexing command&mdash;<code>@cindex</code>
for the concept index, <code>@findex</code> for the function index, and so
on.
</para>
<para><indexterm index="cp">Writing index entries</indexterm><indexterm index="cp">Index entry writing</indexterm>Concept index entries consist of text.  The best way to write an index
is to choose entries that are terse yet clear.  If you can do this,
the index often looks better if the entries are not capitalized, but
written just as they would appear in the middle of a sentence.
(Capitalize proper names and acronyms that always call for upper case
letters.)  This is the case convention we use in most GNU manuals'
indices.
</para>
<para>If you don't see how to make an entry terse yet clear, make it longer
and clear&mdash;not terse and confusing.  If many of the entries are several
words long, the index may look better if you use a different convention:
to capitalize the first word of each entry.  But do not capitalize a
case-sensitive name such as a C or Lisp function name or a shell
command; that would be a spelling error.
</para>
<para>Whichever case convention you use, please use it consistently!
</para>
<para>Entries in indices other than the concept index are symbol names in
programming languages, or program names; these names are usually
case-sensitive, so use upper and lower case as required for them.
</para>
<para>By default, entries for a concept index are printed in a small roman
font and entries for the other indices are printed in a small
<code>@code</code> font.  You may change the way part of an entry is
printed with the usual Texinfo commands, such as <code>@file</code> for
file names and <code>@emph</code> for emphasis (see <xref><xrefnodename>Marking Text</xrefnodename></xref>).
<indexterm index="cp">Index font types</indexterm></para>
<para><indexterm index="cp">Predefined indexing commands</indexterm><indexterm index="cp">Indexing commands, predefined</indexterm>The six indexing commands for predefined indices are:
</para>
<table><tableitem><tableterm><code>@cindex <var>concept</var></code></tableterm>
<item><para><indexterm index="fn">cindex</indexterm>Make an entry in the concept index for <var>concept</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@findex <var>function</var></code></tableterm>
<item><para><indexterm index="fn">findex</indexterm>Make an entry in the function index for <var>function</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@vindex <var>variable</var></code></tableterm>
<item><para><indexterm index="fn">vindex</indexterm>Make an entry in the variable index for <var>variable</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@kindex <var>keystroke</var></code></tableterm>
<item><para><indexterm index="fn">kindex</indexterm>Make an entry in the key index for <var>keystroke</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@pindex <var>program</var></code></tableterm>
<item><para><indexterm index="fn">pindex</indexterm>Make an entry in the program index for <var>program</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@tindex <var>data type</var></code></tableterm>
<item><para><indexterm index="fn">tindex</indexterm>Make an entry in the data type index for <var>data type</var>.
</para></item></tableitem></table>

<quotation>
<para><strong>Caution:</strong> Do not use a colon in an index entry.  In Info, a
colon separates the menu entry name from the node name, so a colon in
the entry itself confuses Info.  See <xref><xrefnodename>Menu Parts</xrefnodename><xrefprinteddesc>The Parts of a Menu</xrefprinteddesc></xref>, for more information about the structure of a menu entry.
</para></quotation>

<para>You are not actually required to use the predefined indices for their
canonical purposes.  For example, suppose you wish to index some C
preprocessor macros.  You could put them in the function index along
with actual functions, just by writing <code>@findex</code> commands for
them; then, when you print the &ldquo;Function Index&rdquo; as an unnumbered
chapter, you could give it the title `Function and Macro Index' and
all will be consistent for the reader.  Or you could put the macros in
with the data types by writing <code>@tindex</code> commands for them, and
give that index a suitable title so the reader will understand.
(See <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>.)
</para>
</section>
</node>
<node>
<nodename>Combining Indices</nodename>
<nodenext>New Indices</nodenext>
<nodeprev>Indexing Commands</nodeprev>
<nodeup>Indices</nodeup>
<!-- node-name,  next,  previous,  up -->
<section>
<title>Combining Indices</title>
<para><indexterm index="cp">Combining indices</indexterm><indexterm index="cp">Indices, combining them</indexterm></para>
<para>Sometimes you will want to combine two disparate indices such as functions
and concepts, perhaps because you have few enough of one of them that
a separate index for them would look silly.
</para>
<para>You could put functions into the concept index by writing
<code>@cindex</code> commands for them instead of <code>@findex</code> commands,
and produce a consistent manual by printing the concept index with the
title `Function and Concept Index' and not printing the `Function
Index' at all; but this is not a robust procedure.  It works only if
your document is never included as part of another
document that is designed to have a separate function index; if your
document were to be included with such a document, the functions from
your document and those from the other would not end up together.
Also, to make your function names appear in the right font in the
concept index, you would need to enclose every one of them between
the braces of <code>@code</code>.
</para>
<menu>
<menuentry>
<menunode> syncodeindex</menunode>
<menutitle> syncodeindex</menutitle>
<menucomment>                How to merge two indices, using <code>@code</code>
                                  font for the merged-from index.
</menucomment>
</menuentry><menuentry>
<menunode> synindex</menunode>
<menutitle> synindex</menutitle>
<menucomment>                    How to merge two indices, using the
                                  default font of the merged-to index.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>syncodeindex</nodename>
<nodenext>synindex</nodenext>
<nodeup>Combining Indices</nodeup>
<subsection>
<title><code>@syncodeindex</code></title>
<para><indexterm index="fn">syncodeindex</indexterm></para>
<para>When you want to combine functions and concepts into one index, you
should index the functions with <code>@findex</code> and index the concepts
with <code>@cindex</code>, and use the <code>@syncodeindex</code> command to
redirect the function index entries into the concept index.
<indexterm index="fn">syncodeindex</indexterm></para>
<para>The <code>@syncodeindex</code> command takes two arguments; they are the name
of the index to redirect, and the name of the index to redirect it to.
The template looks like this:
</para>
<example xml:space="preserve">@syncodeindex <var>from</var> <var>to</var>
</example>
<para><indexterm index="cp">Predefined names for indices</indexterm><indexterm index="cp">Two letter names for indices</indexterm><indexterm index="cp">Indices, two letter names</indexterm><indexterm index="cp">Names for indices</indexterm>For this purpose, the indices are given two-letter names:
</para>
<table><tableitem><tableterm><samp>cp</samp></tableterm>
<item><para>concept index
</para></item></tableitem><tableitem><tableterm><samp>fn</samp></tableterm>
<item><para>function index
</para></item></tableitem><tableitem><tableterm><samp>vr</samp></tableterm>
<item><para>variable index
</para></item></tableitem><tableitem><tableterm><samp>ky</samp></tableterm>
<item><para>key index
</para></item></tableitem><tableitem><tableterm><samp>pg</samp></tableterm>
<item><para>program index
</para></item></tableitem><tableitem><tableterm><samp>tp</samp></tableterm>
<item><para>data type index
</para></item></tableitem></table>

<para>Write an <code>@syncodeindex</code> command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  For example,
to merge a function index with a concept index, write the
following:
</para>
<example xml:space="preserve">@syncodeindex fn cp
</example>
<para>This will cause all entries designated for the function index to merge
in with the concept index instead.
</para>
<para>To merge both a variables index and a function index into a concept
index, write the following:
</para>
<example xml:space="preserve"><group>
@syncodeindex vr cp
@syncodeindex fn cp
</group>
</example>
<para><indexterm index="cp">Fonts for indices</indexterm>The <code>@syncodeindex</code> command puts all the entries from the `from'
index (the redirected index) into the <code>@code</code> font, overriding
whatever default font is used by the index to which the entries are
now directed.  This way, if you direct function names from a function
index into a concept index, all the function names are printed in the
<code>@code</code> font as you would expect.
</para>
</subsection>
</node>
<node>
<nodename>synindex</nodename>
<nodeprev>syncodeindex</nodeprev>
<nodeup>Combining Indices</nodeup>
<subsection>
<title><code>@synindex</code></title>
<para><indexterm index="fn">synindex</indexterm></para>
<para>The <code>@synindex</code> command is nearly the same as the
<code>@syncodeindex</code> command, except that it does not put the
`from' index  entries into the <code>@code</code> font; rather it puts
them in the roman font.  Thus, you use <code>@synindex</code> when you
merge a concept index into a function index.
</para>
<para>See <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>, for information about printing an index
at the end of a book or creating an index menu in an Info file.
</para>
</subsection>
</node>
<node>
<nodename>New Indices</nodename>
<nodeprev>Combining Indices</nodeprev>
<nodeup>Indices</nodeup>
<section>
<title>Defining New Indices</title>
<para><indexterm index="cp">Defining new indices</indexterm><indexterm index="cp">Indices, defining new</indexterm><indexterm index="cp">New index defining</indexterm><indexterm index="fn">defindex</indexterm><indexterm index="fn">defcodeindex</indexterm></para>
<para>In addition to the predefined indices, you may use the
<code>@defindex</code> and <code>@defcodeindex</code> commands to define new
indices.  These commands create new indexing @-commands with which
you mark index entries.  The <code>@defindex </code>command is used like
this:
</para>
<example xml:space="preserve">@defindex <var>name</var>
</example>
<para>The name of an index should be a two letter word, such as <samp>au</samp>.
For example:
</para>
<example xml:space="preserve">@defindex au
</example>
<para>This defines a new index, called the <samp>au</samp> index.  At the same
time, it creates a new indexing command, <code>@auindex</code>, that you
can use to make index entries.  Use the new indexing command just as
you would use a predefined indexing command.
</para>
<para>For example, here is a section heading followed by a concept index
entry and two <samp>au</samp> index entries.
</para>
<example xml:space="preserve">@section Cognitive Semantics
@cindex kinesthetic image schemas
@auindex Johnson, Mark
@auindex Lakoff, George
</example>
<para>(Evidently, <samp>au</samp> serves here as an abbreviation for &ldquo;author&rdquo;.)
Texinfo constructs the new indexing command by concatenating the name
of the index with <samp>index</samp>; thus, defining an <samp>au</samp> index
leads to the automatic creation of an <code>@auindex</code> command.
</para>
<para>Use the <code>@printindex</code> command to print the index, as you do with
the predefined indices.  For example:
</para>
<example xml:space="preserve"><group>
@node Author Index, Subject Index, , Top
@unnumbered Author Index

@printindex au
</group>
</example>
<para>The <code>@defcodeindex</code> is like the <code>@defindex</code> command, except
that, in the printed output, it prints entries in an <code>@code</code> font
instead of a roman font.  Thus, it parallels the <code>@findex</code> command
rather than the <code>@cindex</code> command.
</para>
<para>You should define new indices within or right after the end-of-header
line of a Texinfo file, before any <code>@synindex</code> or
<code>@syncodeindex</code> commands (see <xref><xrefnodename>Texinfo File Header</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>Insertions</nodename>
<nodenext>Breaks</nodenext>
<nodeprev>Indices</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Special Insertions</title>
<para><indexterm index="cp">Inserting special characters and symbols</indexterm><indexterm index="cp">Special insertions</indexterm></para>
<para>Texinfo provides several commands for inserting characters that have
special meaning in Texinfo, such as braces, and for other graphic
elements that do not correspond to simple characters you can type.
</para>

<menu>
<menuentry>
<menunode> Braces Atsigns</menunode>
<menutitle> Braces Atsigns</menutitle>
<menucomment>              How to insert braces, <samp>@</samp>.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Space</menunode>
<menutitle> Inserting Space</menutitle>
<menucomment>             How to insert the right amount of space
                                  within a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Accents</menunode>
<menutitle> Inserting Accents</menutitle>
<menucomment>           How to insert accents and special characters.
</menucomment>
</menuentry><menuentry>
<menunode> Dots Bullets</menunode>
<menutitle> Dots Bullets</menutitle>
<menucomment>                How to insert dots and bullets.
</menucomment>
</menuentry><menuentry>
<menunode> TeX and copyright</menunode>
<menutitle> TeX and copyright</menutitle>
<menucomment>           How to insert the &tex; logo
                                  and the copyright symbol.
</menucomment>
</menuentry><menuentry>
<menunode> pounds</menunode>
<menutitle> pounds</menutitle>
<menucomment>                      How to insert the pounds currency symbol.
</menucomment>
</menuentry><menuentry>
<menunode> minus</menunode>
<menutitle> minus</menutitle>
<menucomment>                       How to insert a minus sign.
</menucomment>
</menuentry><menuentry>
<menunode> math</menunode>
<menutitle> math</menutitle>
<menucomment>                        How to format a mathematical expression.
</menucomment>
</menuentry><menuentry>
<menunode> Glyphs</menunode>
<menutitle> Glyphs</menutitle>
<menucomment>                      How to indicate results of evaluation,
                                  expansion of macros, errors, etc.
</menucomment>
</menuentry><menuentry>
<menunode> Footnotes</menunode>
<menutitle> Footnotes</menutitle>
<menucomment>                   How to include footnotes.
</menucomment>
</menuentry><menuentry>
<menunode> Images</menunode>
<menutitle> Images</menutitle>
<menucomment>                      How to include graphics.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Braces Atsigns</nodename>
<nodenext>Inserting Space</nodenext>
<nodeprev>Insertions</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting @ and Braces</title>
<para><indexterm index="cp">Inserting @, braces</indexterm><indexterm index="cp">Braces, inserting</indexterm><indexterm index="cp">Special characters, commands to insert</indexterm><indexterm index="cp">Commands to insert special characters</indexterm></para>
<para><samp>@</samp> and curly braces are special characters in Texinfo.  To insert
these characters so they appear in text, you must put an <samp>@</samp> in
front of these characters to prevent Texinfo from misinterpreting
them.
</para>
<para>Do not put braces after any of these commands; they are not
necessary.
</para>
<menu>
<menuentry>
<menunode> Inserting An Atsign</menunode>
<menutitle> Inserting An Atsign</menutitle>
<menucomment>         How to insert <samp>@</samp>.
</menucomment>
</menuentry><menuentry>
<menunode> Inserting Braces</menunode>
<menutitle> Inserting Braces</menutitle>
<menucomment>            How to insert <samp>{</samp> and <samp>}</samp>.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Inserting An Atsign</nodename>
<nodenext>Inserting Braces</nodenext>
<nodeprev>Braces Atsigns</nodeprev>
<nodeup>Braces Atsigns</nodeup>
<subsection>
<title>Inserting <samp>@</samp> with @@</title>
<para><indexterm index="fn">@ <r>(literal <samp>@</samp>)</r></indexterm></para>
<para><code>@@</code> stands for a single <samp>@</samp> in either printed or Info
output.
</para>
<para>Do not put braces after an <code>@@</code> command.
</para>

</subsection>
</node>
<node>
<nodename>Inserting Braces</nodename>
<nodeprev>Inserting An Atsign</nodeprev>
<nodeup>Braces Atsigns</nodeup>
<subsection>
<title>Inserting <samp>{</samp> and <samp>}</samp>with @{ and @}</title>
<para><indexterm index="fn">{ <r>(literal <samp>{</samp>)</r></indexterm><indexterm index="fn">} <r>(literal <samp>}</samp>)</r></indexterm></para>
<para><code>@{</code> stands for a single <samp>{</samp> in either printed or Info
output.
</para>
<para><code>@}</code> stands for a single <samp>}</samp> in either printed or Info
output.
</para>
<para>Do not put braces after either an <code>@{</code> or an <code>@}</code>
command.
</para>

</subsection>
</node>
<node>
<nodename>Inserting Space</nodename>
<nodenext>Inserting Accents</nodenext>
<nodeprev>Braces Atsigns</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting Space</title>

<para><indexterm index="cp">Inserting space</indexterm><indexterm index="cp">Spacing, inserting</indexterm>The following sections describe commands that control spacing of various
kinds within and after sentences.
</para>
<menu>
<menuentry>
<menunode> Not Ending a Sentence</menunode>
<menutitle> Not Ending a Sentence</menutitle>
<menucomment>       Sometimes a . doesn't end a sentence.
</menucomment>
</menuentry><menuentry>
<menunode> Ending a Sentence</menunode>
<menutitle> Ending a Sentence</menutitle>
<menucomment>           Sometimes it does.
</menucomment>
</menuentry><menuentry>
<menunode> Multiple Spaces</menunode>
<menutitle> Multiple Spaces</menutitle>
<menucomment>             Inserting multiple spaces.
</menucomment>
</menuentry><menuentry>
<menunode> dmn</menunode>
<menutitle> dmn</menutitle>
<menucomment>                         How to format a dimension.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Not Ending a Sentence</nodename>
<nodenext>Ending a Sentence</nodenext>
<nodeup>Inserting Space</nodeup>
<subsection>
<title>Not Ending a Sentence</title>

<para><indexterm index="cp">Not ending a sentence</indexterm><indexterm index="cp">Sentence non-ending punctuation</indexterm><indexterm index="cp">Periods, inserting</indexterm>Depending on whether a period or exclamation point or question mark is
inside or at the end of a sentence, less or more space is inserted after
a period in a typeset manual.  Since it is not always possible
to determine when a period ends a sentence and when it is used
in an abbreviation, special commands are needed in some circumstances.
Usually, Texinfo can guess how to handle periods, so you do not need to
use the special commands; you just enter a period as you would if you
were using a typewriter, which means you put two spaces after the
period, question mark, or exclamation mark that ends a sentence.
</para>
<para><indexterm index="fn">&lt;colon&gt; <r>(suppress widening)</r></indexterm>Use the <code>@:</code> command after a period, question mark,
exclamation mark, or colon that should not be followed by extra space.
For example, use <code>@:</code> after periods that end abbreviations
which are not at the ends of sentences.
</para>
<para>For example,
</para>
<example xml:space="preserve">The s.o.p.@: has three parts &dots;
The s.o.p. has three parts &dots;
</example>

<quotation>
<para>The s.o.p&period; has three parts &dots;&linebreak;
The s.o.p. has three parts &dots;
</para></quotation>

<para>(Incidentally, <samp>s.o.p.</samp> is an abbreviation for &ldquo;Standard Operating
Procedure&rdquo;.)
</para>
<para><code>@:</code> has no effect on the Info output.  Do not put braces after
<code>@:</code>.
</para>

</subsection>
</node>
<node>
<nodename>Ending a Sentence</nodename>
<nodenext>Multiple Spaces</nodenext>
<nodeprev>Not Ending a Sentence</nodeprev>
<nodeup>Inserting Space</nodeup>
<subsection>
<title>Ending a Sentence</title>

<para><indexterm index="cp">Ending a Sentence</indexterm><indexterm index="cp">Sentence ending punctuation</indexterm></para>
<para><indexterm index="fn">.  <r>(end of sentence)</r></indexterm><indexterm index="fn">! <r>(end of sentence)</r></indexterm><indexterm index="fn">? <r>(end of sentence)</r></indexterm>Use <code>@.</code> instead of a period, <code>@!</code> instead of an
exclamation point, and <code>@?</code> instead of a question mark at the end
of a sentence that ends with a single capital letter.  Otherwise, &tex;
will think the letter is an abbreviation and will not insert the correct
end-of-sentence spacing.  Here is an example:
</para>
<example xml:space="preserve">Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.
Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
</example>

<quotation>
<para>Give it to M.I.B. and to M.E.W&eosperiod;  Also, give it to R.J.C&eosperiod;&linebreak;
Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
</para></quotation>

<para>In the Info file output, <code>@.</code> is equivalent to a simple
<samp>.</samp>; likewise for <code>@!</code> and <code>@?</code>.
</para>
<para>The meanings of <code>@:</code> and <code>@.</code> in Texinfo are designed to
work well with the Emacs sentence motion commands (see <xref><xrefnodename>Sentences</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).
</para>
<para>Do not put braces after any of these commands.
</para>

</subsection>
</node>
<node>
<nodename>Multiple Spaces</nodename>
<nodenext>dmn</nodenext>
<nodeprev>Ending a Sentence</nodeprev>
<nodeup>Inserting Space</nodeup>
<subsection>
<title>Multiple Spaces</title>

<para><indexterm index="cp">Multiple spaces</indexterm><indexterm index="cp">Whitespace, inserting</indexterm><indexterm index="cp">Space, inserting horizontal</indexterm><indexterm index="fn">(space)</indexterm><indexterm index="fn">(tab)</indexterm><indexterm index="fn">(newline)</indexterm></para>
<para>Ordinarily, &tex; collapses multiple whitespace characters (space, tab,
and newline) into a single space.  Info output, on the other hand,
preserves whitespace as you type it, except for changing a newline into
a space; this is why it is important to put two spaces at the end of
sentences in Texinfo documents.
</para>
<para>Occasionally, you may want to actually insert several consecutive
spaces, either for purposes of example (what your program does with
multiple spaces as input), or merely for purposes of appearance in
headings or lists.  Texinfo supports three commands:
<code>@<kbd>SPACE</kbd></code>, <code>@<kbd>TAB</kbd></code>, and <code>@<kbd>NL</kbd></code>, all of
which insert a single space into the output.  (Here,
<code>@<kbd>SPACE</kbd></code> represents an <samp>@</samp> character followed by a
space, i.e., <samp>@ </samp>, and <kbd>TAB</kbd> and <kbd>NL</kbd> represent the tab
character and end-of-line, i.e., when <samp>@</samp> is the last character on
a line.)
</para>
<para>For example,
</para><example xml:space="preserve">Spacey@ @ @ @
example.
</example>
<para>produces
</para>
<example xml:space="preserve">Spacey&space;&space;&space;&space;example.
</example>
<para>Other possible uses of <code>@<kbd>SPACE</kbd></code> have been subsumed by
<code>@multitable</code> (see <xref><xrefnodename>Multi-column Tables</xrefnodename></xref>).
</para>
<para>Do not follow any of these commands with braces.
</para>
<para>To produce a non-breakable space, see <xref><xrefnodename>w</xrefnodename><xrefinfoname>non-breakable space</xrefinfoname></xref>.
</para>

</subsection>
</node>
<node>
<nodename>dmn</nodename>
<nodeprev>Multiple Spaces</nodeprev>
<nodeup>Inserting Space</nodeup>
<subsection>
<title><code>@dmn</code>{<var>dimension</var>}: Format a Dimension</title>
<para><indexterm index="cp">Thin space between number, dimension</indexterm><indexterm index="cp">Dimension formatting</indexterm><indexterm index="cp">Format a dimension</indexterm><indexterm index="fn">dmn</indexterm></para>
<para>At times, you may want to write <samp>12<dmn>pt</dmn></samp> or
<samp>8.5<dmn>in</dmn></samp> with little or no space between the number and the
abbreviation for the dimension.  You can use the <code>@dmn</code> command
to do this.  On seeing the command, &tex; inserts just enough space
for proper typesetting; the Info formatting commands insert no space
at all, since the Info file does not require it.
</para>
<para>To use the <code>@dmn</code> command, write the number and then follow it
immediately, with no intervening space, by <code>@dmn</code>, and then by
the dimension within braces.  For example,
</para>
<example xml:space="preserve">A4 paper is 8.27@dmn{in} wide.
</example>
<para>produces
</para>
<quotation>
<para>A4 paper is 8.27<dmn>in</dmn> wide.
</para></quotation>

<para>Not everyone uses this style.  Some people prefer <samp>8.27 in.@:</samp><!-- /@w -->
or <samp>8.27 inches</samp><!-- /@w --> to <samp>8.27@dmn{in}</samp> in the Texinfo file.
In these cases, however, the formatters may insert a line break between
the number and the dimension, so use <code>@w</code> (see <xref><xrefnodename>w</xrefnodename></xref>).  Also, if
you write a period after an abbreviation within a sentence, you should
write <samp>@:</samp> after the period to prevent &tex; from inserting extra
whitespace, as shown here.  See <xref><xrefnodename>Not Ending a Sentence</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>Inserting Accents</nodename>
<nodenext>Dots Bullets</nodenext>
<nodeprev>Inserting Space</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting Accents</title>

<para><indexterm index="cp">Inserting accents</indexterm><indexterm index="cp">Accents, inserting</indexterm><indexterm index="cp">Floating accents, inserting</indexterm></para>
<para>Here is a table with the commands Texinfo provides for inserting
floating accents.  The commands with non-alphabetic names do not take
braces around their argument (which is taken to be the next character).
(Exception: <code>@,</code> <emph>does</emph> take braces around its argument.)
This is so as to make the source as convenient to type and read as
possible, since accented characters are very common in some languages.
</para>
<para><indexterm index="fn">&quot; <r>(umlaut accent)</r></indexterm><indexterm index="cp">Umlaut accent</indexterm><indexterm index="fn">' <r>(umlaut accent)</r></indexterm><indexterm index="cp">Acute accent</indexterm><indexterm index="fn">= <r>(macron accent)</r></indexterm><indexterm index="cp">Macron accent</indexterm><indexterm index="fn">^ <r>(circumflex accent)</r></indexterm><indexterm index="cp">Circumflex accent</indexterm><indexterm index="fn">` <r>(grave accent)</r></indexterm><indexterm index="cp">Grave accent</indexterm><indexterm index="fn">~ <r>(tilde accent)</r></indexterm><indexterm index="cp">Tilde accent</indexterm><indexterm index="fn">, <r>(cedilla accent)</r></indexterm><indexterm index="cp">Cedilla accent</indexterm><indexterm index="fn">dotaccent</indexterm><indexterm index="cp">Dot accent</indexterm><indexterm index="fn">H <r>(Hungarian umlaut accent)</r></indexterm><indexterm index="cp">Hungarian umlaut accent</indexterm><indexterm index="fn">ringaccent</indexterm><indexterm index="cp">Ring accent</indexterm><indexterm index="fn">tieaccent</indexterm><indexterm index="cp">Tie-after accent</indexterm><indexterm index="fn">u <r>(breve accent)</r></indexterm><indexterm index="cp">Breve accent</indexterm><indexterm index="fn">ubaraccent</indexterm><indexterm index="cp">Underbar accent</indexterm><indexterm index="fn">udotaccent</indexterm><indexterm index="cp">Underdot accent</indexterm><indexterm index="fn">v <r>(check accent)</r></indexterm><indexterm index="cp">Check accent</indexterm></para><multitable><columnfraction>17</columnfraction>
<columnfraction>8</columnfraction>
<columnfraction>23</columnfraction>
<tbody><row><entry> Command               </entry><entry> Output         </entry><entry> What
</entry></row><row><entry> <tt>@&quot;o</tt>              </entry><entry> &ouml;            </entry><entry> umlaut accent
</entry></row><row><entry> <tt>@'o</tt>              </entry><entry> &oacute;            </entry><entry> acute accent
</entry></row><row><entry> <tt>@,{c}</tt>          </entry><entry> &ccedil;          </entry><entry> cedilla accent
</entry></row><row><entry> <tt>@=o</tt>              </entry><entry> o&macr;            </entry><entry> macron/overbar accent
</entry></row><row><entry> <tt>@^o</tt>              </entry><entry> &ocirc;            </entry><entry> circumflex accent
</entry></row><row><entry> <tt>@`o</tt>              </entry><entry> &ograve;            </entry><entry> grave accent
</entry></row><row><entry> <tt>@~o</tt>              </entry><entry> &otilde;            </entry><entry> tilde accent
</entry></row><row><entry> <tt>@dotaccent{o}</tt>  </entry><entry> o.  </entry><entry> overdot accent
</entry></row><row><entry> <tt>@H{o}</tt>          </entry><entry> o''          </entry><entry> long Hungarian umlaut
</entry></row><row><entry> <tt>@ringaccent{o}</tt> </entry><entry> o* </entry><entry> ring accent
</entry></row><row><entry> <tt>@tieaccent{oo}</tt> </entry><entry> oo[ </entry><entry> tie-after accent
</entry></row><row><entry> <tt>@u{o}</tt>          </entry><entry> o(          </entry><entry> breve accent
</entry></row><row><entry> <tt>@ubaraccent{o}</tt> </entry><entry> o_ </entry><entry> underbar accent
</entry></row><row><entry> <tt>@udotaccent{o}</tt> </entry><entry> .o </entry><entry> underdot accent
</entry></row><row><entry> <tt>@v{o}</tt>          </entry><entry> o&lt;          </entry><entry> hacek or check accent
</entry></row></tbody></multitable>

<para>This table lists the Texinfo commands for inserting other characters
commonly used in languages other than English.
</para>
<para><indexterm index="fn">questiondown</indexterm><indexterm index="cp">&iquest;</indexterm><indexterm index="fn">exclamdown</indexterm><indexterm index="cp">&iexcl;</indexterm><indexterm index="fn">aa</indexterm><indexterm index="cp">&aring;</indexterm><indexterm index="fn">AA</indexterm><indexterm index="cp">&Aring;</indexterm><indexterm index="fn">ae</indexterm><indexterm index="cp">&aelig;</indexterm><indexterm index="fn">AE</indexterm><indexterm index="cp">&AElig;</indexterm><indexterm index="fn">dotless</indexterm><indexterm index="cp">i</indexterm><indexterm index="cp">j</indexterm><indexterm index="cp">Dotless i, j</indexterm><indexterm index="fn">l</indexterm><indexterm index="cp">/l</indexterm><indexterm index="fn">L</indexterm><indexterm index="cp">/L</indexterm><indexterm index="fn">o</indexterm><indexterm index="cp">&oslash;</indexterm><indexterm index="fn">O</indexterm><indexterm index="cp">&Oslash;</indexterm><indexterm index="fn">oe</indexterm><indexterm index="cp">&oelig;</indexterm><indexterm index="fn">OE</indexterm><indexterm index="cp">&OElig;</indexterm><indexterm index="fn">ss</indexterm><indexterm index="cp">&szlig;</indexterm><indexterm index="cp">Es-zet</indexterm><indexterm index="cp">Sharp S</indexterm><indexterm index="cp">German S</indexterm></para><multitable><columnfraction>18</columnfraction>
<columnfraction>7</columnfraction>
<columnfraction>19</columnfraction>
<tbody><row><entry> <tt>@exclamdown{}</tt>   </entry><entry> &iexcl;   </entry><entry> upside-down !
</entry></row><row><entry> <tt>@questiondown{}</tt> </entry><entry> &iquest; </entry><entry> upside-down ?
</entry></row><row><entry> <tt>@aa{},@AA{}</tt>  </entry><entry> &aring;,&Aring;     </entry><entry> a,A with circle
</entry></row><row><entry> <tt>@ae{},@AE{}</tt>  </entry><entry> &aelig;,&AElig;     </entry><entry> ae,AE ligatures
</entry></row><row><entry> <tt>@dotless{i}</tt>     </entry><entry> i     </entry><entry> dotless i
</entry></row><row><entry> <tt>@dotless{j}</tt>     </entry><entry> j     </entry><entry> dotless j
</entry></row><row><entry> <tt>@l{},@L{}</tt>    </entry><entry> /l,/L       </entry><entry> suppressed-L,l
</entry></row><row><entry> <tt>@o{},@O{}</tt>    </entry><entry> &oslash;,&Oslash;       </entry><entry> O,o with slash
</entry></row><row><entry> <tt>@oe{},@OE{}</tt>  </entry><entry> &oelig;,&OElig;     </entry><entry> oe,OE ligatures
</entry></row><row><entry> <tt>@ss{}</tt>           </entry><entry> &szlig;           </entry><entry> es-zet or sharp S
</entry></row></tbody></multitable>


</section>
</node>
<node>
<nodename>Dots Bullets</nodename>
<nodenext>TeX and copyright</nodenext>
<nodeprev>Inserting Accents</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting Ellipsis and Bullets</title>
<para><indexterm index="cp">Dots, inserting</indexterm><indexterm index="cp">Bullets, inserting</indexterm><indexterm index="cp">Ellipsis, inserting</indexterm><indexterm index="cp">Inserting ellipsis</indexterm><indexterm index="cp">Inserting dots</indexterm><indexterm index="cp">Special typesetting commands</indexterm><indexterm index="cp">Typesetting commands for dots, etc.</indexterm></para>
<para>An <dfn>ellipsis</dfn> (a line of dots) is not typeset as a string of
periods, so a special command is used for ellipsis in Texinfo.  The
<code>@bullet</code> command is special, too.  Each of these commands is
followed by a pair of braces, <samp>{}</samp>, without any whitespace
between the name of the command and the braces.  (You need to use braces
with these commands because you can use them next to other text; without
the braces, the formatters would be confused.  See <xref><xrefnodename>Command Syntax</xrefnodename><xrefprinteddesc>@-Command Syntax</xrefprinteddesc></xref>, for further information.)
</para>
<menu>
<menuentry>
<menunode> dots</menunode>
<menutitle> dots</menutitle>
<menucomment>                        How to insert dots &dots;
</menucomment>
</menuentry><menuentry>
<menunode> bullet</menunode>
<menutitle> bullet</menutitle>
<menucomment>                      How to insert a bullet.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>dots</nodename>
<nodenext>bullet</nodenext>
<nodeup>Dots Bullets</nodeup>
<subsection>
<title><code>@dots</code>{} (&dots;) and <code>@enddots</code>{} (&enddots;)</title>
<para><indexterm index="fn">dots</indexterm><indexterm index="fn">enddots</indexterm><indexterm index="cp">Inserting dots</indexterm><indexterm index="cp">Dots, inserting</indexterm></para>
<para>Use the <code>@dots{}</code> command to generate an ellipsis, which is
three dots in a row, appropriately spaced, like this: `&dots;'.  Do
not simply write three periods in the input file; that would work for
the Info file output, but would produce the wrong amount of space
between the periods in the printed manual.
</para>
<para>Similarly, the <code>@enddots{}</code> command generates an
end-of-sentence ellipsis (four dots) &enddots;
</para>


</subsection>
</node>
<node>
<nodename>bullet</nodename>
<nodeprev>dots</nodeprev>
<nodeup>Dots Bullets</nodeup>
<subsection>
<title><code>@bullet</code>{} (&bullet;)</title>
<para><indexterm index="fn">bullet</indexterm></para>
<para>Use the <code>@bullet{}</code> command to generate a large round dot, or
the closest possible thing to one.  In Info, an asterisk is used.
</para>
<para>Here is a bullet: &bullet;
</para>
<para>When you use <code>@bullet</code> in <code>@itemize</code>, you do not need to
type the braces, because <code>@itemize</code> supplies them.
(See <xref><xrefnodename>itemize</xrefnodename><xrefprinteddesc><code>@itemize</code></xrefprinteddesc></xref>.)
</para>

</subsection>
</node>
<node>
<nodename>TeX and copyright</nodename>
<nodenext>pounds</nodenext>
<nodeprev>Dots Bullets</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting &tex; and the Copyright Symbol</title>

<para>The logo `&tex;' is typeset in a special fashion and it needs an
@-command.  The copyright symbol, `&copyright;', is also special.
Each of these commands is followed by a pair of braces, <samp>{}</samp>,
without any whitespace between the name of the command and the
braces.
</para>
<menu>
<menuentry>
<menunode> tex</menunode>
<menutitle> tex</menutitle>
<menucomment>                         How to insert the &tex; logo.
</menucomment>
</menuentry><menuentry>
<menunode> copyright symbol</menunode>
<menutitle> copyright symbol</menutitle>
<menucomment>            How to use <code>@copyright</code>{}.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>tex</nodename>
<nodenext>copyright symbol</nodenext>
<nodeup>TeX and copyright</nodeup>
<subsection>
<title><code>@TeX</code>{} (&tex;)</title>
<para><indexterm index="fn">tex (command)</indexterm></para>
<para>Use the <code>@TeX{}</code> command to generate `&tex;'.  In a printed
manual, this is a special logo that is different from three ordinary
letters.  In Info, it just looks like <samp>TeX</samp>.  The
<code>@TeX{}</code> command is unique among Texinfo commands in that the
<samp>T</samp> and the <samp>X</samp> are in upper case.
</para>

</subsection>
</node>
<node>
<nodename>copyright symbol</nodename>
<nodeprev>tex</nodeprev>
<nodeup>TeX and copyright</nodeup>
<subsection>
<title><code>@copyright</code>{} (&copyright;)</title>
<para><indexterm index="fn">copyright</indexterm></para>
<para>Use the <code>@copyright{}</code> command to generate `&copyright;'.  In
a printed manual, this is a <samp>c</samp> inside a circle, and in Info,
this is <samp>(C)</samp>.
</para>

</subsection>
</node>
<node>
<nodename>pounds</nodename>
<nodenext>minus</nodenext>
<nodeprev>TeX and copyright</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title><code>@pounds</code>{} (&pound;): Pounds Sterling</title>
<para><indexterm index="fn">pounds</indexterm></para>
<para>Use the <code>@pounds{}</code> command to generate `&pound;'.  In a
printed manual, this is the symbol for the currency pounds sterling.
In Info, it is a <samp>#</samp>.  Other currency symbols are unfortunately not
available.
</para>

</section>
</node>
<node>
<nodename>minus</nodename>
<nodenext>math</nodenext>
<nodeprev>pounds</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title><code>@minus</code>{} (&minus;): Inserting a Minus Sign</title>
<para><indexterm index="fn">minus</indexterm></para>
<para><indexterm index="cp">em-dash</indexterm><indexterm index="cp">hyphen</indexterm>Use the <code>@minus{}</code> command to generate a minus sign.  In a
fixed-width font, this is a single hyphen, but in a proportional font,
the symbol is the customary length for a minus sign&mdash;a little longer
than a hyphen, shorter than an em-dash:
</para>
<display xml:space="preserve"><samp>&minus;</samp> is a minus sign generated with <samp>@minus{}</samp>,

`-' is a hyphen generated with the character <samp>-</samp>,

`&mdash;' is an em-dash for text.
</display>
<para>In the fixed-width font used by Info, <code>@minus{}</code> is the same
as a hyphen.
</para>
<para>You should not use <code>@minus{}</code> inside <code>@code</code> or
<code>@example</code> because the width distinction is not made in the
fixed-width font they use.
</para>
<para>When you use <code>@minus</code> to specify the mark beginning each entry in
an itemized list, you do not need to type the braces
(see <xref><xrefnodename>itemize</xrefnodename><xrefprinteddesc><code>@itemize</code></xrefprinteddesc></xref>.)
</para>

</section>
</node>
<node>
<nodename>math</nodename>
<nodenext>Glyphs</nodenext>
<nodeprev>minus</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title><code>@math</code>: Inserting Mathematical Expressions</title>
<para><indexterm index="fn">math</indexterm><indexterm index="cp">Mathematical expressions</indexterm><indexterm index="cp">Formulas, mathematical</indexterm></para>
<para>You can write a short mathematical expression with the <code>@math</code>
command.  Write the mathematical expression between braces, like this:
</para>
<example xml:space="preserve">@math{(a + b)(a + b) = a^2 + 2ab + b^2}
</example>

<example xml:space="preserve">(a + b)(a + b) = a^2 + 2ab + b^2
</example>
<para>Thus, the <code>@math</code> command has no effect on the Info output.
</para>
<para><code>@math</code> implies <code>@tex</code>.  This not only makes it possible to
write superscripts and subscripts (as in the above example), but also
allows you to use any of the plain &tex; math control sequences.  It's
conventional to use <samp>\</samp> instead of <samp>@</samp> for these commands.
As in:
</para><example xml:space="preserve">@math{\sin 2\pi \equiv \cos 3\pi}
</example>
<para>which looks like the input in Info and HTML:
</para><example xml:space="preserve">\sin 2\pi \equiv \cos 3\pi
</example>
<para><indexterm index="fn">\ <r>(literal \ in <code>@math</code>)</r></indexterm>Since <samp>\</samp> is an escape character inside <code>@math</code>, you can use
<code>@\</code> to get a literal backslash (<code>\\</code> will work in &tex;,
but you'll get the literal <samp>\\</samp> in Info).  <code>@\</code> is not
defined outside of <code>@math</code>, since a <samp>\</samp> ordinarily produces a
literal <samp>\</samp>.
</para>

<para><indexterm index="cp">Displayed equations</indexterm><indexterm index="cp">Equations, displayed</indexterm>For displayed equations, you must at present use &tex; directly
(see <xref><xrefnodename>Raw Formatter Commands</xrefnodename></xref>).  
</para>

</section>
</node>
<node>
<nodename>Glyphs</nodename>
<nodenext>Footnotes</nodenext>
<nodeprev>math</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Glyphs for Examples</title>
<para><indexterm index="cp">Glyphs</indexterm><indexterm index="cp">Examples, glyphs for</indexterm></para>
<para>In Texinfo, code is often illustrated in examples that are delimited
by <code>@example</code> and <code>@end example</code>, or by <code>@lisp</code> and
<code>@end lisp</code>.  In such examples, you can indicate the results of
evaluation or an expansion using <samp>&rArr;</samp> or
<samp>==&gt;</samp>.  Likewise, there are commands to insert glyphs
to indicate
printed output, error messages, equivalence of expressions, and the
location of point.
</para>
<para>The glyph-insertion commands do not need to be used within an example, but
most often they are.  Every  glyph-insertion command is followed by a pair of
left- and right-hand braces.
</para>
<menu>
<menuentry>
<menunode> Glyphs Summary</menunode>
<menutitle> Glyphs Summary</menutitle>
<menucomment>              
</menucomment>
</menuentry><menuentry>
<menunode> result</menunode>
<menutitle> result</menutitle>
<menucomment>                      How to show the result of expression.
</menucomment>
</menuentry><menuentry>
<menunode> expansion</menunode>
<menutitle> expansion</menutitle>
<menucomment>                   How to indicate an expansion.
</menucomment>
</menuentry><menuentry>
<menunode> Print Glyph</menunode>
<menutitle> Print Glyph</menutitle>
<menucomment>                 How to indicate printed output.
</menucomment>
</menuentry><menuentry>
<menunode> Error Glyph</menunode>
<menutitle> Error Glyph</menutitle>
<menucomment>                 How to indicate an error message.
</menucomment>
</menuentry><menuentry>
<menunode> Equivalence</menunode>
<menutitle> Equivalence</menutitle>
<menucomment>                 How to indicate equivalence.
</menucomment>
</menuentry><menuentry>
<menunode> Point Glyph</menunode>
<menutitle> Point Glyph</menutitle>
<menucomment>                 How to indicate the location of point.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Glyphs Summary</nodename>
<nodenext>result</nodenext>
<nodeup>Glyphs</nodeup>
<subsection>
<title>Glyphs Summary</title>

<para>Here are the different glyph commands:
</para>
<table><tableitem><tableterm>&rArr;</tableterm>
<item><para><code>@result{}</code> points to the result of an expression.
</para>
</item></tableitem><tableitem><tableterm>==&gt;</tableterm>
<item><para><code>@expansion{}</code> shows the results of a macro expansion.
</para>
</item></tableitem><tableitem><tableterm>-|</tableterm>
<item><para><code>@print{}</code> indicates printed output.
</para>
</item></tableitem><tableitem><tableterm>error--&gt;</tableterm>
<item><para><code>@error{}</code> indicates that the following text is an error
message.
</para>
</item></tableitem><tableitem><tableterm>==</tableterm>
<item><para><code>@equiv{}</code> indicates the exact equivalence of two forms.
</para>
</item></tableitem><tableitem><tableterm>-!-</tableterm>
<item><para><code>@point{}</code> shows the location of point.
</para></item></tableitem></table>

<menu>
<menuentry>
<menunode> result</menunode>
<menutitle> result</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> expansion</menunode>
<menutitle> expansion</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Print Glyph</menunode>
<menutitle> Print Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Error Glyph</menunode>
<menutitle> Error Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Equivalence</menunode>
<menutitle> Equivalence</menutitle>
<menucomment>
</menucomment>
</menuentry><menuentry>
<menunode> Point Glyph</menunode>
<menutitle> Point Glyph</menutitle>
<menucomment>
</menucomment>
</menuentry></menu>


</subsection>
</node>
<node>
<nodename>result</nodename>
<nodenext>expansion</nodenext>
<nodeprev>Glyphs Summary</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@result{}</code> (&rArr;): Indicating Evaluation</title>
<para><indexterm index="cp">Result of an expression</indexterm><indexterm index="cp">Indicating evaluation</indexterm><indexterm index="cp">Evaluation glyph</indexterm><indexterm index="cp">Value of an expression, indicating</indexterm><indexterm index="fn">result</indexterm></para>
<para>Use the <code>@result{}</code> command to indicate the result of
evaluating an expression.
</para>

<para>Thus, the following,
</para>
<lisp xml:space="preserve">(cdr '(1 2 3))
     &rArr; (2 3)
</lisp>
<para>may be read as &ldquo;<code>(cdr '(1 2 3))</code> evaluates to <code>(2 3)</code>&rdquo;.
</para>

</subsection>
</node>
<node>
<nodename>expansion</nodename>
<nodenext>Print Glyph</nodenext>
<nodeprev>result</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@expansion{}</code> (==&gt;): Indicating an Expansion</title>
<para><indexterm index="cp">Expansion, indicating it</indexterm><indexterm index="fn">expansion</indexterm></para>
<para>When an expression is a macro call, it expands into a new expression.
You can indicate the result of the expansion with the
<code>@expansion{}</code> command.
</para>

<need></need><para>For example, the following
</para>
<example xml:space="preserve"><group>
@lisp
(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c
@end lisp
</group>
</example>
<para>produces
</para>
<lisp xml:space="preserve"><group>
(third '(a b c))
     ==&gt; (car (cdr (cdr '(a b c))))
     &rArr; c
</group>
</lisp>
<para>which may be read as:
</para>
<quotation>
<para><code>(third '(a b c))</code> expands to <code>(car (cdr (cdr '(a b c))))</code>;
the result of evaluating the expression is <code>c</code>.
</para></quotation>

<para>Often, as in this case, an example looks better if the
<code>@expansion{}</code> and <code>@result{}</code> commands are indented
five spaces.
</para>

</subsection>
</node>
<node>
<nodename>Print Glyph</nodename>
<nodenext>Error Glyph</nodenext>
<nodeprev>expansion</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@print{}</code> (-|): Indicating Printed Output</title>
<para><indexterm index="cp">Printed output, indicating it</indexterm><indexterm index="fn">print</indexterm></para>
<para>Sometimes an expression will print output during its execution.  You
can indicate the printed output with the <code>@print{}</code> command.
</para>

<para>In the following example, the printed text is indicated with
<samp>-|</samp>, and the value of the expression follows on the
last line.
</para>
<lisp xml:space="preserve"><group>
(progn (print 'foo) (print 'bar))
     -| foo
     -| bar
     &rArr; bar
</group>
</lisp>
<para>In a Texinfo source file, this example is written as follows:
</para>
<lisp xml:space="preserve"><group>
@lisp
(progn (print 'foo) (print 'bar))
     @print{} foo
     @print{} bar
     @result{} bar
@end lisp
</group>
</lisp>

</subsection>
</node>
<node>
<nodename>Error Glyph</nodename>
<nodenext>Equivalence</nodenext>
<nodeprev>Print Glyph</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@error{}</code> (error--&gt;): Indicating an Error Message</title>
<para><indexterm index="cp">Error message, indicating it</indexterm><indexterm index="fn">error</indexterm></para>
<para>A piece of code may cause an error when you evaluate it.  You can
designate the error message with the <code>@error{}</code> command.
</para>

<need></need><para>Thus,
</para>
<example xml:space="preserve">@lisp
(+ 23 'x)
@error{} Wrong type argument: integer-or-marker-p, x
@end lisp
</example>
<para>produces
</para>
<lisp xml:space="preserve">(+ 23 'x)
error--&gt; Wrong type argument: integer-or-marker-p, x
</lisp>
<para>This indicates that the following error message is printed
when you evaluate the expression:
</para>
<lisp xml:space="preserve">Wrong type argument: integer-or-marker-p, x
</lisp>
<para><samp>error--&gt;</samp> itself is not part of the error message.
</para>

</subsection>
</node>
<node>
<nodename>Equivalence</nodename>
<nodenext>Point Glyph</nodenext>
<nodeprev>Error Glyph</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@equiv{}</code> (==): Indicating Equivalence</title>
<para><indexterm index="cp">Equivalence, indicating it</indexterm><indexterm index="fn">equiv</indexterm></para>
<para>Sometimes two expressions produce identical results.  You can indicate the
exact equivalence of two forms with the <code>@equiv{}</code> command.
</para>

<para>Thus,
</para>
<example xml:space="preserve">@lisp
(make-sparse-keymap) @equiv{} (list 'keymap)
@end lisp
</example>
<para>produces
</para>
<lisp xml:space="preserve">(make-sparse-keymap) == (list 'keymap)
</lisp>
<para>This indicates that evaluating <code>(make-sparse-keymap)</code> produces
identical results to evaluating <code>(list 'keymap)</code>.
</para>

</subsection>
</node>
<node>
<nodename>Point Glyph</nodename>
<nodeprev>Equivalence</nodeprev>
<nodeup>Glyphs</nodeup>
<subsection>
<title><code>@point{}</code> (-!-): Indicating Point in a Buffer</title>
<para><indexterm index="cp">Point, indicating in a buffer</indexterm><indexterm index="fn">point</indexterm></para>
<para>Sometimes you need to show an example of text in an Emacs buffer.  In
such examples, the convention is to include the entire contents of the
buffer in question between two lines of dashes containing the buffer
name.
</para>
<para>You can use the <samp>@point{}</samp> command to show the location of point
in the text in the buffer.  (The symbol for point, of course, is not
part of the text in the buffer; it indicates the place <emph>between</emph>
two characters where point is located.)
</para>

<para>The following example shows the contents of buffer <file>foo</file> before
and after evaluating a Lisp command to insert the word <code>changed</code>.
</para>
<example xml:space="preserve"><group>
---------- Buffer: foo ----------
This is the -!-contents of foo.
---------- Buffer: foo ----------

</group>
</example>
<example xml:space="preserve"><group>
(insert &quot;changed &quot;)
     &rArr; nil
---------- Buffer: foo ----------
This is the changed -!-contents of foo.
---------- Buffer: foo ----------

</group>
</example>
<para>In a Texinfo source file, the example is written like this:
</para>
<example xml:space="preserve">@example
---------- Buffer: foo ----------
This is the @point{}contents of foo.
---------- Buffer: foo ----------

(insert &quot;changed &quot;)
     @result{} nil
---------- Buffer: foo ----------
This is the changed @point{}contents of foo.
---------- Buffer: foo ----------
@end example
</example>

</subsection>
</node>
<node>
<nodename>Footnotes</nodename>
<nodenext>Images</nodenext>
<nodeprev>Glyphs</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Footnotes</title>
<para><indexterm index="cp">Footnotes</indexterm><indexterm index="fn">footnote</indexterm></para>
<para>A <dfn>footnote</dfn> is for a reference that documents or elucidates the
primary text.<footnote><para>A footnote should complement or expand upon
the primary text, but a reader should not need to read a footnote to
understand the primary text.  For a thorough discussion of footnotes,
see <cite>The Chicago Manual of Style</cite>, which is published by the
University of Chicago Press.
</para></footnote>
</para>
<menu>
<menuentry>
<menunode> Footnote Commands</menunode>
<menutitle> Footnote Commands</menutitle>
<menucomment>           How to write a footnote in Texinfo.
</menucomment>
</menuentry><menuentry>
<menunode> Footnote Styles</menunode>
<menutitle> Footnote Styles</menutitle>
<menucomment>             Controlling how footnotes appear in Info.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Footnote Commands</nodename>
<nodenext>Footnote Styles</nodenext>
<nodeup>Footnotes</nodeup>
<subsection>
<title>Footnote Commands</title>

<para>In Texinfo, footnotes are created with the <code>@footnote</code> command.
This command is followed immediately by a left brace, then by the text
of the footnote, and then by a terminating right brace.  Footnotes may
be of any length (they will be broken across pages if necessary), but
are usually short.  The template is:
</para>
<example xml:space="preserve">ordinary text@footnote{<var>text of footnote</var>}
</example>
<para>As shown here, the <code>@footnote</code> command should come right after the
text being footnoted, with no intervening space; otherwise, the footnote
marker might end up starting a line.
</para>
<para>For example, this clause is followed by a sample footnote<footnote><para>Here
is the sample footnote.
</para></footnote>; in the Texinfo source, it looks like
this:
</para>
<example xml:space="preserve">&dots;a sample footnote@footnote{Here is the sample
footnote.}; in the Texinfo source&dots;
</example>
<para>As you can see, the source includes two punctuation marks next to each
other; in this case, <samp>.};</samp> is the sequence.  This is normal (the
first ends the footnote and the second belongs to the sentence being
footnoted), so don't worry that it looks odd.
</para>
<para>In a printed manual or book, the reference mark for a footnote is a
small, superscripted number; the text of the footnote appears at the
bottom of the page, below a horizontal line.
</para>
<para>In Info, the reference mark for a footnote is a pair of parentheses
with the footnote number between them, like this: <samp>(1)</samp>.  The
reference mark is followed by a cross-reference link to the footnote's
text.
</para>
<para>In the HTML output, footnote references are marked with a small,
superscripted number which is rendered as a hypertext link to the
footnote text.
</para>
<para>By the way, footnotes in the argument of an <code>@item</code> command for a
<code>@table</code> must be on the same line as the <code>@item</code>
(as usual).  See <xref><xrefnodename>Two-column Tables</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>Footnote Styles</nodename>
<nodeprev>Footnote Commands</nodeprev>
<nodeup>Footnotes</nodeup>
<subsection>
<title>Footnote Styles</title>

<para>Info has two footnote styles, which determine where the text of the
footnote is located:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item><para><indexterm index="cp"><samp><r>End</r></samp> node footnote style</indexterm></para></item>
<item>
<para>In the `End' node style, all the footnotes for a single node
are placed at the end of that node.  The footnotes are separated from
the rest of the node by a line of dashes with the word
<samp>Footnotes</samp> within it.  Each footnote begins with an
<samp>(<var>n</var>)</samp> reference mark.
</para>
<need></need><para>Here is an example of a single footnote in the end of node style:
</para>
<example xml:space="preserve"><group>
 --------- Footnotes ---------

(1)  Here is a sample footnote.
</group>
</example>
<para><indexterm index="cp"><samp><r>Separate</r></samp> footnote style</indexterm></para></item>
<item>
<para>In the `Separate' node style, all the footnotes for a single
node are placed in an automatically constructed node of
their own.  In this style, a &ldquo;footnote reference&rdquo; follows
each <samp>(<var>n</var>)</samp> reference mark in the body of the
node.  The footnote reference is actually a cross reference
which you use to reach the footnote node.
</para>
<para>The name of the node with the footnotes is constructed
by appending <samp>-Footnotes</samp><!-- /@w --> to the name of the node
that contains the footnotes. (Consequently, the footnotes'
node for the <file>Footnotes</file> node is
<file>Footnotes-Footnotes</file><!-- /@w -->!)  The footnotes' node has an
`Up' node pointer that leads back to its parent node.
</para>
<para>Here is how the first footnote in this manual looks after being
formatted for Info in the separate node style:
</para>
<smallexample xml:space="preserve"><group>
File: texinfo.info  Node: Overview-Footnotes, Up: Overview

(1) The first syllable of &quot;Texinfo&quot; is pronounced like &quot;speck&quot;, not
&quot;hex&quot;. &dots;
</group>
</smallexample></item>
</itemize>

<para>A Texinfo file may be formatted into an Info file with either footnote
style.
</para>
<para><indexterm index="fn">footnotestyle</indexterm>Use the <code>@footnotestyle</code> command to specify an Info file's
footnote style.  Write this command at the beginning of a line followed
by an argument, either <samp>end</samp> for the end node style or
<samp>separate</samp> for the separate node style.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">@footnotestyle end
</example><para>or
</para><example xml:space="preserve">@footnotestyle separate
</example>
<para>Write an <code>@footnotestyle</code> command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  (If you
include the <code>@footnotestyle</code> command between the start-of-header
and end-of-header lines, the region formatting commands will format
footnotes as specified.)
</para>
<para>If you do not specify a footnote style, the formatting commands use
their default style.  Currently, <code>texinfo-format-buffer</code> and
<code>texinfo-format-region</code> use the `separate' style and
<code>makeinfo</code> uses the `end' style.
</para>
<!-- !!! note: makeinfo's -footnote-style option overrides footnotestyle -->


<!-- this should be described with figures when we have them -->
<!-- perhaps in the quotation/example chapter. -->
</subsection>
</node>
<node>
<nodename>Images</nodename>
<nodeprev>Footnotes</nodeprev>
<nodeup>Insertions</nodeup>
<section>
<title>Inserting Images</title>

<para><indexterm index="cp">Images, inserting</indexterm><indexterm index="cp">Pictures, inserting</indexterm><indexterm index="fn">image</indexterm></para>
<para>You can insert an image given in an external file with the
<code>@image</code> command:
</para>
<example xml:space="preserve">@image{<var>filename</var>, <r>[</r><var>width</var><r>]</r>, <r>[</r><var>height</var><r>]</r>, <r>[</r><var>alttext</var><r>]</r>, <r>[</r><var>extension</var><r>]</r>}
</example>
<para><indexterm index="cp">Formats for images</indexterm><indexterm index="cp">Image formats</indexterm>The <var>filename</var> argument is mandatory, and must not have an
extension, because the different processors support different formats:
</para><itemize><itemfunction>&bullet;</itemfunction><item>
<para>&tex; reads the file <file><var>filename</var>.eps</file> (Encapsulated PostScript
format).
</para></item>
<item>
<para><indexterm index="cp">pdftex<r>, and images</r></indexterm>PDF&tex; reads <file><var>filename</var>.pdf</file> (Adobe's Portable Document Format).
</para></item>
<item>
<para><code>makeinfo</code> uses <file><var>filename</var>.txt</file> verbatim for
Info output (more or less as if it was an <code>@example</code>).
</para></item>
<item>
<para><code>makeinfo</code>
uses the optional fifth argument to <code>@image</code> for the extension if
you supply it.  For example:
</para>
<para><indexterm index="cp">XPM image format</indexterm></para><example xml:space="preserve">@image{foo,,,,xpm}
</example>
<para>will cause <samp>makeinfo --html</samp> to try <file>foo.xpm</file>.
</para>
<para><indexterm index="cp">GIF, unsupported due to patents</indexterm><indexterm index="cp">PNG image format</indexterm><indexterm index="cp">JPG image format</indexterm>If you do not supply the optional fifth argument, <samp>makeinfo
---html</samp> first tries <file><var>filename</var>.png</file>; if that does not exist,
it tries <file><var>filename</var>.jpg</file>.  If that does not exist either, it
complains.  (We cannot support GIF format directly due to software
patents.)
</para></item>
</itemize>

<para><indexterm index="cp">Width of images</indexterm><indexterm index="cp">Height of images</indexterm><indexterm index="cp">Aspect ratio of images</indexterm><indexterm index="cp">Distorting images</indexterm>The optional <var>width</var> and <var>height</var> arguments specify the size to
scale the image to (they are ignored for Info output).  If neither is
specified, the image is presented in its natural size (given in the
file); if only one is specified, the other is scaled proportionately;
and if both are specified, both are respected, thus possibly distorting
the original image by changing its aspect ratio.
</para>
<para><indexterm index="cp">Dimensions and image sizes</indexterm>The <var>width</var> and <var>height</var> may be specified using any valid &tex;
dimension, namely:
</para>
<table><tableitem><tableterm>pt</tableterm>
<item><para><indexterm index="cp">Points (dimension)</indexterm>point (72.27pt = 1in)
</para></item></tableitem><tableitem><tableterm>pc</tableterm>
<item><para><indexterm index="cp">Picas</indexterm>pica (1pc = 12pt)
</para></item></tableitem><tableitem><tableterm>bp</tableterm>
<item><para><indexterm index="cp">Big points</indexterm>big point (72bp = 1in)
</para></item></tableitem><tableitem><tableterm>in</tableterm>
<item><para><indexterm index="cp">Inches</indexterm>inch
</para></item></tableitem><tableitem><tableterm>cm</tableterm>
<item><para><indexterm index="cp">Centimeters</indexterm>centimeter (2.54cm = 1in)
</para></item></tableitem><tableitem><tableterm>mm</tableterm>
<item><para><indexterm index="cp">Millimeters</indexterm>millimeter (10mm = 1cm)
</para></item></tableitem><tableitem><tableterm>dd</tableterm>
<item><para><indexterm index="cp">Did&ocirc;t points</indexterm>did&ocirc;t point (1157dd = 1238pt)
</para></item></tableitem><tableitem><tableterm>cc</tableterm>
<item><para><indexterm index="cp">Ciceros</indexterm>cicero (1cc = 12dd)
</para></item></tableitem><tableitem><tableterm>sp</tableterm>
<item><para><indexterm index="cp">Scaled points</indexterm>scaled point (65536sp = 1pt)
</para></item></tableitem></table>

<para><indexterm index="cp">ridt.eps</indexterm>For example, the following will scale a file <file>ridt.eps</file> to one
inch vertically, with the width scaled proportionately:
</para>
<example xml:space="preserve">@image{ridt,,1in}
</example>
<para><indexterm index="cp">epsf.tex</indexterm>For <code>@image</code> to work with &tex;, the file <file>epsf.tex</file> must be
installed somewhere that &tex; can find it.  (The standard location is
<file><var>texmf</var>/tex/generic/dvips/epsf.tex</file>, where <var>texmf</var> is a
root of your &tex; directory tree.)  This file is included in the
Texinfo distribution and is also available from
<uref><urefurl>ftp://tug.org/tex/epsf.tex</urefurl></uref>, among other places.
</para>
<para><code>@image</code> can be used within a line as well as for displayed
figures.  Therefore, if you intend it to be displayed, be sure to leave
a blank line before the command, or the output will run into the
preceding text.
</para>
<para><indexterm index="cp">alt attribute for images</indexterm><indexterm index="cp">alternate text for images</indexterm>When producing html, <code>makeinfo</code> sets the <dfn>alt attribute</dfn> for
inline images to the optional fourth argument to <code>@image</code>, if
supplied.  If not supplied, <code>makeinfo</code> uses the full file name of
the image being displayed.
</para>

</section>
</node>
<node>
<nodename>Breaks</nodename>
<nodenext>Definition Commands</nodenext>
<nodeprev>Insertions</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Making and Preventing Breaks</title>
<para><indexterm index="cp">Making line and page breaks</indexterm><indexterm index="cp">Preventing line and page breaks</indexterm></para>
<para><indexterm index="cp">Line breaks</indexterm>Usually, a Texinfo file is processed both by &tex; and by one of the
Info formatting commands.  Line, paragraph, or page breaks sometimes
occur in the `wrong' place in one or other form of output.  You must
ensure that text looks right both in the printed manual and in the
Info file.
</para>
<para><indexterm index="cp">White space, excessive</indexterm><indexterm index="cp">Page breaks</indexterm>For example, in a printed manual, page breaks may occur awkwardly in
the middle of an example; to prevent this, you can hold text together
using a grouping command that keeps the text from being split across
two pages.  Conversely, you may want to force a page break where none
would occur normally.  Fortunately, problems like these do not often
arise.  When they do, use the break, break prevention, or pagination
commands.
</para>
<menu>
<menuentry>
<menunode> Break Commands</menunode>
<menutitle> Break Commands</menutitle>
<menucomment>              Cause and prevent splits.
</menucomment>
</menuentry><menuentry>
<menunode> Line Breaks</menunode>
<menutitle> Line Breaks</menutitle>
<menucomment>                 How to force a single line to use two lines.
</menucomment>
</menuentry><menuentry>
<menunode> - and hyphenation</menunode>
<menutitle> - and hyphenation</menutitle>
<menucomment>           How to tell &tex; about hyphenation points.
</menucomment>
</menuentry><menuentry>
<menunode> w</menunode>
<menutitle> w</menutitle>
<menucomment>                           How to prevent unwanted line breaks.
</menucomment>
</menuentry><menuentry>
<menunode> sp</menunode>
<menutitle> sp</menutitle>
<menucomment>                          How to insert blank lines.
</menucomment>
</menuentry><menuentry>
<menunode> page</menunode>
<menutitle> page</menutitle>
<menucomment>                        How to force the start of a new page.
</menucomment>
</menuentry><menuentry>
<menunode> group</menunode>
<menutitle> group</menutitle>
<menucomment>                       How to prevent unwanted page breaks.
</menucomment>
</menuentry><menuentry>
<menunode> need</menunode>
<menutitle> need</menutitle>
<menucomment>                        Another way to prevent unwanted page breaks.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Break Commands</nodename>
<nodenext>Line Breaks</nodenext>
<nodeprev>Breaks</nodeprev>
<nodeup>Breaks</nodeup>

<para>The break commands create or allow line and paragraph breaks:
</para>
<table><tableitem><tableterm><code>@*</code></tableterm>
<item><para>Force a line break.
</para>
</item></tableitem><tableitem><tableterm><code>@sp <var>n</var></code></tableterm>
<item><para>Skip <var>n</var> blank lines.
</para>
</item></tableitem><tableitem><tableterm><code>@-</code></tableterm>
<item><para>Insert a discretionary hyphen.
</para>
</item></tableitem><tableitem><tableterm><code>@hyphenation{<var>hy-phen-a-ted words</var>}</code></tableterm>
<item><para>Define hyphen points in <var>hy-phen-a-ted words</var>.
</para></item></tableitem></table>

<para>The line-break-prevention command holds text together all on one
line:
</para>
<table><tableitem><tableterm><code>@w{<var>text</var>}</code></tableterm>
<item><para>Prevent <var>text</var> from being split and hyphenated across two lines.
</para></item></tableitem></table>

<para>The pagination commands apply only to printed output, since Info
files do not have pages.
</para>
<table><tableitem><tableterm><code>@page</code></tableterm>
<item><para>Start a new page in the printed manual.
</para>
</item></tableitem><tableitem><tableterm><code>@group</code></tableterm>
<item><para>Hold text together that must appear on one printed page.
</para>
</item></tableitem><tableitem><tableterm><code>@need <var>mils</var></code></tableterm>
<item><para>Start a new printed page if not enough space on this one.
</para></item></tableitem></table>

</node>
<node>
<nodename>Line Breaks</nodename>
<nodenext>- and hyphenation</nodenext>
<nodeup>Breaks</nodeup>
<section>
<title><code>@*</code>: Generate Line Breaks</title>
<para><indexterm index="fn">* <r>(force line break)</r></indexterm><indexterm index="cp">Line breaks</indexterm><indexterm index="cp">Breaks in a line</indexterm></para>
<para>The <code>@*</code> command forces a line break in both the printed manual and
in Info.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve">This line @* is broken @*in two places.
</example>
<para>produces
</para>
<example xml:space="preserve"><group>
This line
 is broken
in two places.
</group>
</example>
<para>(Note that the space after the first <code>@*</code> command is faithfully
carried down to the next line.)
</para>
<need></need><para>The <code>@*</code> command is often used in a file's copyright page:
</para>
<example xml:space="preserve"><group>
This is edition 2.0 of the Texinfo documentation,@*
and is for &dots;
</group>
</example>
<para>In this case, the <code>@*</code> command keeps &tex; from stretching the
line across the whole page in an ugly manner.
</para>
<quotation>
<para><strong>Please note:</strong> Do not write braces after an <code>@*</code> command;
they are not needed.
</para>
<para>Do not write an <code>@refill</code> command at the end of a paragraph
containing an <code>@*</code> command; it will cause the paragraph to be
refilled after the line break occurs, negating the effect of the line
break.
</para></quotation>


</section>
</node>
<node>
<nodename>- and hyphenation</nodename>
<nodenext>w</nodenext>
<nodeprev>Line Breaks</nodeprev>
<nodeup>Breaks</nodeup>
<section>
<title><code>@-</code> and <code>@hyphenation</code>: Helping &tex; hyphenate</title>

<para><indexterm index="fn">- <r>(discretionary hyphen)</r></indexterm><indexterm index="fn">hyphenation</indexterm><indexterm index="cp">Hyphenation, helping &tex; do</indexterm><indexterm index="cp">Fine-tuning, and hyphenation</indexterm></para>
<para>Although &tex;'s hyphenation algorithm is generally pretty good, it
does miss useful hyphenation points from time to time.  (Or, far more
rarely, insert an incorrect hyphenation.)  So, for documents with an
unusual vocabulary or when fine-tuning for a printed edition, you may
wish to help &tex; out.  Texinfo supports two commands for this:
</para>
<table><tableitem><tableterm><code>@-</code></tableterm>
<item><para>Insert a discretionary hyphen, i.e., a place where &tex; can (but does
not have to) hyphenate.  This is especially useful when you notice an
overfull hbox is due to &tex; missing a hyphenation (see <xref><xrefnodename>Overfull hboxes</xrefnodename></xref>).  &tex; will not insert any hyphenation points itself into a
word containing <code>@-</code>.
</para>
</item></tableitem><tableitem><tableterm><code>@hyphenation{<var>hy-phen-a-ted words</var>}</code></tableterm>
<item><para>Tell &tex; how to hyphenate <var>hy-phen-a-ted words</var>.  As shown, you
put a <samp>-</samp> at each hyphenation point.  For example:
</para><example xml:space="preserve">@hyphenation{man-u-script man-u-scripts}
</example><para>&tex; only uses the specified hyphenation points when the
words match exactly, so give all necessary variants.
</para></item></tableitem></table>

<para>Info output is not hyphenated, so these commands have no effect there.
</para>
</section>
</node>
<node>
<nodename>w</nodename>
<nodenext>sp</nodenext>
<nodeprev>- and hyphenation</nodeprev>
<nodeup>Breaks</nodeup>
<section>
<title><code>@w</code>{<var>text</var>}: Prevent Line Breaks</title>
<para><indexterm index="fn">w <r>(prevent line break)</r></indexterm><indexterm index="cp">Line breaks, preventing</indexterm><indexterm index="cp">Hyphenation, preventing</indexterm></para>
<para><code>@w{<var>text</var>}</code> outputs <var>text</var> and prohibits line breaks
within <var>text</var>.
</para>
<para>You can use the <code>@w</code> command to prevent &tex; from automatically
hyphenating a long name or phrase that happens to fall near the end of a
line.  For example:
</para>
<example xml:space="preserve">You can copy GNU software from @w{@samp{ftp.gnu.org}}.
</example>
<para>produces
</para>
<quotation>
<para>You can copy GNU software from <samp>ftp.gnu.org</samp><!-- /@w -->.
</para></quotation>

<para><indexterm index="cp">Non-breakable space</indexterm><indexterm index="cp">Unbreakable space</indexterm><indexterm index="cp">Tied space</indexterm>You can also use <code>@w</code> to produce a non-breakable space:
</para>
<example xml:space="preserve">None of the formatters will break at this@w{ }space.
</example>

</section>
</node>
<node>
<nodename>sp</nodename>
<nodenext>page</nodenext>
<nodeprev>w</nodeprev>
<nodeup>Breaks</nodeup>
<section>
<title><code>@sp</code> <var>n</var>: Insert Blank Lines</title>
<para><indexterm index="fn">sp <r>(line spacing)</r></indexterm><indexterm index="cp">Space, inserting vertical</indexterm><indexterm index="cp">Blank lines</indexterm><indexterm index="cp">Line spacing</indexterm></para>
<para>A line beginning with and containing only <code>@sp <var>n</var></code>
generates <var>n</var> blank lines of space in both the printed manual and
the Info file.  <code>@sp</code> also forces a paragraph break.  For
example,
</para>
<example xml:space="preserve">@sp 2
</example>
<para>generates two blank lines.
</para>
<para>The <code>@sp</code> command is most often used in the title page.
</para>


</section>
</node>
<node>
<nodename>page</nodename>
<nodenext>group</nodenext>
<nodeprev>sp</nodeprev>
<nodeup>Breaks</nodeup>
<section>
<title><code>@page</code>: Start a New Page</title>
<para><indexterm index="cp">Page breaks</indexterm><indexterm index="fn">page</indexterm></para>
<para>A line containing only <code>@page</code> starts a new page in a printed
manual.  The command has no effect on Info files since they are not
paginated.  An <code>@page</code> command is often used in the <code>@titlepage</code>
section of a Texinfo file to start the copyright page.
</para>

</section>
</node>
<node>
<nodename>group</nodename>
<nodenext>need</nodenext>
<nodeprev>page</nodeprev>
<nodeup>Breaks</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@group</code>: Prevent Page Breaks</title>
<para><indexterm index="cp">Group (hold text together vertically)</indexterm><indexterm index="cp">Holding text together vertically</indexterm><indexterm index="cp">Vertically holding text together</indexterm><indexterm index="fn">group</indexterm></para>
<para>The <code>@group</code> command (on a line by itself) is used inside an
<code>@example</code> or similar construct to begin an unsplittable vertical
group, which will appear entirely on one page in the printed output.
The group is terminated by a line containing only <code>@end group</code>.
These two lines produce no output of their own, and in the Info file
output they have no effect at all.
</para>
<!-- Once said that these environments -->
<!-- turn off vertical spacing between ``paragraphs''. -->
<!-- Also, quotation used to work, but doesn't in texinfo-2.72 -->
<para>Although <code>@group</code> would make sense conceptually in a wide
variety of contexts, its current implementation works reliably only
within <code>@example</code> and variants, and within <code>@display</code>,
<code>@format</code>, <code>@flushleft</code> and <code>@flushright</code>.
See <xref><xrefnodename>Quotations and Examples</xrefnodename></xref>.  (What all these commands have in
common is that each line of input produces a line of output.)  In
other contexts, <code>@group</code> can cause anomalous vertical
spacing.
</para>
<need></need><para>This formatting requirement means that you should write:
</para>
<example xml:space="preserve"><group>
@example
@group
&dots;
@end group
@end example
</group>
</example>
<para>with the <code>@group</code> and <code>@end group</code> commands inside the
<code>@example</code> and <code>@end example</code> commands.
</para>
<para>The <code>@group</code> command is most often used to hold an example
together on one page.  In this Texinfo manual, more than 100 examples
contain text that is enclosed between <code>@group</code> and <code>@end
group</code>.
</para>
<para>If you forget to end a group, you may get strange and unfathomable
error messages when you run &tex;.  This is because &tex; keeps
trying to put the rest of the Texinfo file onto the one page and does
not start to generate error messages until it has processed
considerable text.  It is a good rule of thumb to look for a missing
<code>@end group</code> if you get incomprehensible error messages in
&tex;.
</para>
</section>
</node>
<node>
<nodename>need</nodename>
<nodeprev>group</nodeprev>
<nodeup>Breaks</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title><code>@need <var>mils</var></code>: Prevent Page Breaks</title>
<para><indexterm index="cp">Need space at page bottom</indexterm><indexterm index="fn">need</indexterm></para>
<para>A line containing only <code>@need <var>n</var></code> starts
a new page in a printed manual if fewer than <var>n</var> mils (thousandths
of an inch) remain on the current page.  Do not use
braces around the argument <var>n</var>.  The <code>@need</code> command has no
effect on Info files since they are not paginated.
</para>
<need></need><para>This paragraph is preceded by an <code>@need</code> command that tells
&tex; to start a new page if fewer than 800 mils (eight-tenths
inch) remain on the page.  It looks like this:
</para>
<example xml:space="preserve"><group>
@need 800
This paragraph is preceded by &dots;
</group>
</example>
<para>The <code>@need</code> command is useful for preventing orphans (single
lines at the bottoms of printed pages).
</para>

</section>
</node>
<node>
<nodename>Definition Commands</nodename>
<nodenext>Conditionals</nodenext>
<nodeprev>Breaks</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Definition Commands</title>
<para><indexterm index="cp">Definition commands</indexterm></para>
<para>The <code>@deffn</code> command and the other <dfn>definition commands</dfn>
enable you to describe functions, variables, macros, commands, user
options, special forms and other such artifacts in a uniform
format.
</para>
<para>In the Info file, a definition causes the entity
category&mdash;`Function', `Variable', or whatever&mdash;to appear at the
beginning of the first line of the definition, followed by the
entity's name and arguments.  In the printed manual, the command
causes &tex; to print the entity's name and its arguments on the left
margin and print the category next to the right margin.  In both
output formats, the body of the definition is indented.  Also, the
name of the entity is entered into the appropriate index:
<code>@deffn</code> enters the name into the index of functions,
<code>@defvr</code> enters it into the index of variables, and so
on.
</para>
<para>A manual need not and should not contain more than one definition for
a given name.  An appendix containing a summary should use
<code>@table</code> rather than the definition commands.
</para>
<menu>
<menuentry>
<menunode> Def Cmd Template</menunode>
<menutitle> Def Cmd Template</menutitle>
<menucomment>            How to structure a description using a
                                  definition command.
</menucomment>
</menuentry><menuentry>
<menunode> Optional Arguments</menunode>
<menutitle> Optional Arguments</menutitle>
<menucomment>          How to handle optional and repeated arguments.
</menucomment>
</menuentry><menuentry>
<menunode> deffnx</menunode>
<menutitle> deffnx</menutitle>
<menucomment>                      How to group two or more `first' lines.
</menucomment>
</menuentry><menuentry>
<menunode> Def Cmds in Detail</menunode>
<menutitle> Def Cmds in Detail</menutitle>
<menucomment>          All the definition commands.
</menucomment>
</menuentry><menuentry>
<menunode> Def Cmd Conventions</menunode>
<menutitle> Def Cmd Conventions</menutitle>
<menucomment>         Conventions for writing definitions.
</menucomment>
</menuentry><menuentry>
<menunode> Sample Function Definition</menunode>
<menutitle> Sample Function Definition</menutitle>
<menucomment>  
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>Def Cmd Template</nodename>
<nodenext>Optional Arguments</nodenext>
<nodeprev>Definition Commands</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>The Template for a Definition</title>
<para><indexterm index="cp">Definition template</indexterm><indexterm index="cp">Template for a definition</indexterm></para>
<para>The <code>@deffn</code> command is used for definitions of entities that
resemble functions.  To write a definition using the <code>@deffn</code>
command, write the <code>@deffn</code> command at the beginning of a line
and follow it on the same line by the category of the entity, the name
of the entity itself, and its arguments (if any).  Then write the body
of the definition on succeeding lines.  (You may embed examples in the
body.)  Finally, end the definition with an <code>@end deffn</code> command
written on a line of its own.  (The other definition commands follow
the same format.)
</para>
<para>The template for a definition looks like this:
</para>
<example xml:space="preserve"><group>
@deffn <var>category</var> <var>name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end deffn
</group>
</example>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@deffn Command forward-word count
This command moves point forward @var{count} words
(or backward if @var{count} is negative). &dots;
@end deffn
</group>
</example>
<para>produces
</para>
<quotation>
<definition><definitionterm><indexterm index="fn">forward-word</indexterm><defcategory>Command</defcategory><deffunction>forward-word</deffunction><defparam> count</defparam></definitionterm>
<definitionitem><para>This function moves point forward <var>count</var> words
(or backward if <var>count</var> is negative). &dots;
</para></definitionitem></definition></quotation>

<para>Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase `Interactive Command',
write braces around it.  For example:
</para>
<example xml:space="preserve"><group>
@deffn {Interactive Command} isearch-forward
&dots;
@end deffn
</group>
</example>
<para>Otherwise, the second word will be mistaken for the name of the
entity.
</para>
<para>Some of the definition commands are more general than others.  The
<code>@deffn</code> command, for example, is the general definition command
for functions and the like&mdash;for entities that may take arguments.  When
you use this command, you specify the category to which the entity
belongs.  The <code>@deffn</code> command possesses three predefined,
specialized variations, <code>@defun</code>, <code>@defmac</code>, and
<code>@defspec</code>, that specify the category for you: &ldquo;Function&rdquo;,
&ldquo;Macro&rdquo;, and &ldquo;Special Form&rdquo; respectively.  (In Lisp, a special form
is an entity much like a function.)  The <code>@defvr</code> command also is
accompanied by several predefined, specialized variations for describing
particular kinds of variables.
</para>
<para>The template for a specialized definition, such as <code>@defun</code>, is
similar to the template for a generalized definition, except that you
do not need to specify the category:
</para>
<example xml:space="preserve"><group>
@defun <var>name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end defun
</group>
</example>
<para>Thus,
</para>
<example xml:space="preserve"><group>
@defun buffer-end flag
This function returns @code{(point-min)} if @var{flag}
is less than 1, @code{(point-max)} otherwise.
&dots;
@end defun
</group>
</example>
<para>produces
</para>
<quotation>
<definition><definitionterm><indexterm index="fn">buffer-end</indexterm><defcategory>Function</defcategory><deffunction>buffer-end</deffunction><defparam> flag</defparam></definitionterm>
<definitionitem><para>This function returns <code>(point-min)</code> if <var>flag</var> is less than 1,
<code>(point-max)</code> otherwise.  &dots;
</para></definitionitem></definition></quotation>

<para>See <xref><xrefnodename>Sample Function Definition</xrefnodename><xrefinfoname>Sample Function Definition</xrefinfoname><xrefprinteddesc>A Sample Function Definition</xrefprinteddesc></xref>, for a more detailed example of a function
definition, including the use of <code>@example</code> inside the
definition.
</para>
<para>The other specialized commands work like <code>@defun</code>.
</para>
<para><indexterm index="cp">Macros in definition commands</indexterm>Note that, due to implementation difficulties, macros are not expanded
in <code>@deffn</code> and all the other definition commands.
</para>
</section>
</node>
<node>
<nodename>Optional Arguments</nodename>
<nodenext>deffnx</nodenext>
<nodeprev>Def Cmd Template</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>Optional and Repeated Arguments</title>
<para><indexterm index="cp">Optional and repeated arguments</indexterm><indexterm index="cp">Repeated and optional arguments</indexterm><indexterm index="cp">Arguments, repeated and optional</indexterm><indexterm index="cp">Syntax, optional &amp; repeated arguments</indexterm><indexterm index="cp">Meta-syntactic chars for arguments</indexterm></para>
<para>Some entities take optional or repeated arguments, which may be
specified by a distinctive glyph that uses square brackets and
ellipses.  For example<!-- /@w -->, a special form often breaks its argument list
into separate arguments in more complicated ways than a
straightforward function.
</para>
<!-- The following looks better in Info (no `r', `samp' and `code'): -->

<para>Here is the <code>@defspec</code> line of an example of an imaginary
special form:
</para>
<quotation>
<definition><definitionterm><indexterm index="fn">foobar</indexterm><defcategory>Special Form</defcategory><deffunction>foobar</deffunction><defdelimiter> (</defdelimiter><defparam><var>var</var></defparam><defdelimiter> [</defdelimiter><defparam><var>from</var></defparam><defparam> <var>to</var></defparam><defdelimiter> [</defdelimiter><defparam><var>inc</var></defparam><defdelimiter>]</defdelimiter><defdelimiter>]</defdelimiter><defdelimiter>)</defdelimiter><defparam> <var>body</var></defparam><defparam>&dots;</defparam></definitionterm>
</definition></quotation>

<para>In this example, the arguments <var>from</var> and <var>to</var> are optional,
but must both be present or both absent.  If they are present,
<var>inc</var> may optionally be specified as well.  These arguments are
grouped with the argument <var>var</var> into a list, to distinguish them
from <var>body</var>, which includes all remaining elements of the
form.
</para>
<para>In a Texinfo source file, this <code>@defspec</code> line is written like
this (except it would not be split over two lines, as it is in this
example).
</para>
<example xml:space="preserve"><group>
@defspec foobar (@var{var} [@var{from} @var{to}
     [@var{inc}]]) @var{body}@dots{}
</group>
</example>
<para>The function is listed in the Command and Variable Index under
<samp>foobar</samp>.
</para>
</section>
</node>
<node>
<nodename>deffnx</nodename>
<nodenext>Def Cmds in Detail</nodenext>
<nodeprev>Optional Arguments</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>Two or More `First' Lines</title>
<para><indexterm index="cp">Two `First' Lines for <code>@deffn</code></indexterm><indexterm index="cp">Grouping two definitions together</indexterm><indexterm index="cp">Definitions grouped together</indexterm><indexterm index="fn">deffnx</indexterm></para>
<para>To create two or more `first' or header lines for a definition, follow
the first <code>@deffn</code> line by a line beginning with <code>@deffnx</code>.
The <code>@deffnx</code> command works exactly like <code>@deffn</code>
except that it does not generate extra vertical white space between it
and the preceding line.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@deffn {Interactive Command} isearch-forward
@deffnx {Interactive Command} isearch-backward
These two search commands are similar except &dots;
@end deffn
</group>
</example>
<para>produces
</para>
<definition><definitionterm><indexterm index="fn">isearch-forward</indexterm><defcategory>Interactive Command</defcategory><deffunction>isearch-forward</deffunction></definitionterm>
<definitionterm><indexterm index="fn">isearch-backward</indexterm><defcategory>Interactive Command</defcategory><deffunction>isearch-backward</deffunction></definitionterm>
<definitionitem><para>These two search commands are similar except &dots;
</para></definitionitem></definition>
<para>Each definition command has an `x' form: <code>@defunx</code>,
<code>@defvrx</code>, <code>@deftypefunx</code>, etc.
</para>
<para>The `x' forms work just like <code>@itemx</code>; see <xref><xrefnodename>itemx</xrefnodename><xrefprinteddesc><code>@itemx</code></xrefprinteddesc></xref>.
</para>
</section>
</node>
<node>
<nodename>Def Cmds in Detail</nodename>
<nodenext>Def Cmd Conventions</nodenext>
<nodeprev>deffnx</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>The Definition Commands</title>

<para>Texinfo provides more than a dozen definition commands, all of which
are described in this section.
</para>
<para>The definition commands automatically enter the name of the entity in
the appropriate index: for example, <code>@deffn</code>, <code>@defun</code>,
and <code>@defmac</code> enter function names in the index of functions;
<code>@defvr</code> and <code>@defvar</code> enter variable names in the index
of variables.
</para>
<para>Although the examples that follow mostly illustrate Lisp, the commands
can be used for other programming languages.
</para>
<menu>
<menuentry>
<menunode> Functions Commands</menunode>
<menutitle> Functions Commands</menutitle>
<menucomment>          Commands for functions and similar entities.
</menucomment>
</menuentry><menuentry>
<menunode> Variables Commands</menunode>
<menutitle> Variables Commands</menutitle>
<menucomment>          Commands for variables and similar entities.
</menucomment>
</menuentry><menuentry>
<menunode> Typed Functions</menunode>
<menutitle> Typed Functions</menutitle>
<menucomment>             Commands for functions in typed languages.
</menucomment>
</menuentry><menuentry>
<menunode> Typed Variables</menunode>
<menutitle> Typed Variables</menutitle>
<menucomment>             Commands for variables in typed languages.
</menucomment>
</menuentry><menuentry>
<menunode> Abstract Objects</menunode>
<menutitle> Abstract Objects</menutitle>
<menucomment>            Commands for object-oriented programming.
</menucomment>
</menuentry><menuentry>
<menunode> Data Types</menunode>
<menutitle> Data Types</menutitle>
<menucomment>                  The definition command for data types.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Functions Commands</nodename>
<nodenext>Variables Commands</nodenext>
<nodeprev>Def Cmds in Detail</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Functions and Similar Entities</title>

<para>This section describes the commands for describing functions and similar
entities:
</para>
<table><para><indexterm index="fn">deffn</indexterm></para><tableitem><tableterm><code>@deffn <var>category</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@deffn</code> command is the general definition command for
functions, interactive commands, and similar entities that may take
arguments.  You must choose a term to describe the category of entity
being defined; for example, &ldquo;Function&rdquo; could be used if the entity is
a function.  The <code>@deffn</code> command is written at the beginning of a
line and is followed on the same line by the category of entity being
described, the name of this particular entity, and its arguments, if
any.  Terminate the definition with <code>@end deffn</code> on a line of its
own.
</para>
<need></need><para>For example, here is a definition:
</para>
<example xml:space="preserve"><group>
@deffn Command forward-char nchars
Move point forward @var{nchars} characters.
@end deffn
</group>
</example>
<para>This shows a rather terse definition for a &ldquo;command&rdquo; named
<code>forward-char</code> with one argument, <var>nchars</var>.
</para>
<para><code>@deffn</code> prints argument names such as <var>nchars</var> in italics or
upper case, as if <code>@var</code> had been used, because we think of these
names as metasyntactic variables&mdash;they stand for the actual argument
values.  Within the text of the description, write an argument name
explicitly with <code>@var</code> to refer to the value of the argument.  In
the example above, we used <samp>@var{nchars}</samp> in this way.
</para>
<para>The template for <code>@deffn</code> is:
</para>
<example xml:space="preserve"><group>
@deffn <var>category</var> <var>name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end deffn
</group>
</example>
<para><indexterm index="fn">defun</indexterm></para></item></tableitem><tableitem><tableterm><code>@defun <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@defun</code> command is the definition command for functions.
<code>@defun</code> is equivalent to <samp>@deffn Function
&dots;</samp>.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@defun set symbol new-value
Change the value of the symbol @var{symbol}
to @var{new-value}.
@end defun
</group>
</example>
<para>shows a rather terse definition for a function <code>set</code> whose
arguments are <var>symbol</var> and <var>new-value</var>.  The argument names on
the <code>@defun</code> line automatically appear in italics or upper case as
if they were enclosed in <code>@var</code>.  Terminate the definition with
<code>@end defun</code> on a line of its own.
</para>
<para>The template is:
</para>
<example xml:space="preserve"><group>
@defun <var>function-name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end defun
</group>
</example>
<para><code>@defun</code> creates an entry in the index of functions.
</para>
<para><indexterm index="fn">defmac</indexterm></para></item></tableitem><tableitem><tableterm><code>@defmac <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@defmac</code> command is the definition command for macros.
<code>@defmac</code> is equivalent to <samp>@deffn Macro &dots;</samp> and
works like <code>@defun</code>.
</para>
<para><indexterm index="fn">defspec</indexterm></para></item></tableitem><tableitem><tableterm><code>@defspec <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@defspec</code> command is the definition command for special
forms.  (In Lisp, a special form is an entity much like a function,
see <xref><xrefnodename>Special Forms</xrefnodename><xrefinfofile>elisp</xrefinfofile><xrefprintedname>GNU Emacs Lisp Reference Manual</xrefprintedname></xref>.)
<code>@defspec</code> is equivalent to <samp>@deffn {Special Form}
&dots;</samp> and works like <code>@defun</code>.
</para></item></tableitem></table>

</subsection>
</node>
<node>
<nodename>Variables Commands</nodename>
<nodenext>Typed Functions</nodenext>
<nodeprev>Functions Commands</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Variables and Similar Entities</title>

<para>Here are the commands for defining variables and similar
entities:
</para>
<table><para><indexterm index="fn">defvr</indexterm></para><tableitem><tableterm><code>@defvr <var>category</var> <var>name</var></code></tableterm>
<item><para>The <code>@defvr</code> command is a general definition command for
something like a variable&mdash;an entity that records a value.  You must
choose a term to describe the category of entity being defined; for
example, &ldquo;Variable&rdquo; could be used if the entity is a variable.
Write the <code>@defvr</code> command at the beginning of a line and
follow it on the same line by the category of the entity and the
name of the entity.
</para>
<para>Capitalize the category name like a title.  If the name of the category
contains spaces, as in the name &ldquo;User Option&rdquo;, enclose it in braces.
Otherwise, the second word will be mistaken for the name of the entity.
For example,
</para>
<example xml:space="preserve"><group>
@defvr {User Option} fill-column
This buffer-local variable specifies
the maximum width of filled lines.
&dots;
@end defvr
</group>
</example>
<para>Terminate the definition with <code>@end defvr</code> on a line of its
own.
</para>
<para>The template is:
</para>
<example xml:space="preserve"><group>
@defvr <var>category</var> <var>name</var>
<var>body-of-definition</var>
@end defvr
</group>
</example>
<para><code>@defvr</code> creates an entry in the index of variables for <var>name</var>.
</para>
<para><indexterm index="fn">defvar</indexterm></para></item></tableitem><tableitem><tableterm><code>@defvar <var>name</var></code></tableterm>
<item><para>The <code>@defvar</code> command is the definition command for variables.
<code>@defvar</code> is equivalent to <samp>@defvr Variable
&dots;</samp>.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
@defvar kill-ring
&dots;
@end defvar
</group>
</example>
<para>The template is:
</para>
<example xml:space="preserve"><group>
@defvar <var>name</var>
<var>body-of-definition</var>
@end defvar
</group>
</example>
<para><code>@defvar</code> creates an entry in the index of variables for
<var>name</var>.
</para>
<para><indexterm index="fn">defopt</indexterm></para></item></tableitem><tableitem><tableterm><code>@defopt <var>name</var></code></tableterm>
<item><para><indexterm index="cp">User options, marking</indexterm>The <code>@defopt</code> command is the definition command for <dfn>user
options</dfn>, i.e., variables intended for users to change according to
taste; Emacs has many such (see <xref><xrefnodename>Variables</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).  <code>@defopt</code> is equivalent to <samp>@defvr {User
Option} &dots;</samp> and works like <code>@defvar</code>.
</para></item></tableitem></table>


</subsection>
</node>
<node>
<nodename>Typed Functions</nodename>
<nodenext>Typed Variables</nodenext>
<nodeprev>Variables Commands</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Functions in Typed Languages</title>

<para>The <code>@deftypefn</code> command and its variations are for describing
functions in languages in which you must declare types of variables and
functions, such as C and C++.
</para>
<table><para><indexterm index="fn">deftypefn</indexterm></para><tableitem><tableterm><code>@deftypefn <var>category</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@deftypefn</code> command is the general definition command for
functions and similar entities that may take arguments and that are
typed.  The <code>@deftypefn</code> command is written at the beginning of
a line and is followed on the same line by the category of entity
being described, the type of the returned value, the name of this
particular entity, and its arguments, if any.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
@deftypefn {Library Function} int foobar
   (int @var{foo}, float @var{bar})
&dots;
@end deftypefn
</group>
</example>
<need></need><para>(where the text before the &ldquo;&dots;&rdquo;, shown above as two lines, would
actually be a single line in a real Texinfo file) produces the following
in Info:
</para>
<smallexample xml:space="preserve"><group>
-- Library Function: int foobar (int FOO, float BAR)
&dots;
</group>
</smallexample>
<para>This means that <code>foobar</code> is a &ldquo;library function&rdquo; that returns an
<code>int</code>, and its arguments are <var>foo</var> (an <code>int</code>) and
<var>bar</var> (a <code>float</code>).
</para>
<para>The argument names that you write in <code>@deftypefn</code> are not subject
to an implicit <code>@var</code>&mdash;since the actual names of the arguments in
<code>@deftypefn</code> are typically scattered among data type names and
keywords, Texinfo cannot find them without help.  Instead, you must write
<code>@var</code> explicitly around the argument names.  In the example
above, the argument names are <samp>foo</samp> and <samp>bar</samp>.
</para>
<para>The template for <code>@deftypefn</code> is:
</para>
<example xml:space="preserve"><group>
@deftypefn <var>category</var> <var>data-type</var> <var>name</var> <var>arguments</var> &dots;
<var>body-of-description</var>
@end deftypefn
</group>
</example>
<para>Note that if the <var>category</var> or <var>data type</var> is more than one
word then it must be enclosed in braces to make it a single argument.
</para>
<para>If you are describing a procedure in a language that has packages,
such as Ada, you might consider using <code>@deftypefn</code> in a manner
somewhat contrary to the convention described in the preceding
paragraphs.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
@deftypefn stacks private push
        (@var{s}:in out stack;
        @var{n}:in integer)
&dots;
@end deftypefn
</group>
</example>
<para>(The <code>@deftypefn</code> arguments are shown split into three lines, but
would be a single line in a real Texinfo file.)
</para>
<para>In this instance, the procedure is classified as belonging to the
package <code>stacks</code> rather than classified as a `procedure' and its
data type is described as <code>private</code>.  (The name of the procedure
is <code>push</code>, and its arguments are <var>s</var> and <var>n</var>.)
</para>
<para><code>@deftypefn</code> creates an entry in the index of functions for
<var>name</var>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypefun <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para><indexterm index="fn">deftypefun</indexterm>The <code>@deftypefun</code> command is the specialized definition command
for functions in typed languages.  The command is equivalent to
<samp>@deftypefn Function &dots;</samp>.
</para>
<need></need><para>Thus,
</para>
<smallexample xml:space="preserve"><group>
@deftypefun int foobar (int @var{foo}, float @var{bar})
&dots;
@end deftypefun
</group>
</smallexample>
<para>produces the following in Info:
</para>
<example xml:space="preserve"><group>
-- Function: int foobar (int FOO, float BAR)
&dots;
</group>
</example>
<need></need><para>The template is:
</para>
<example xml:space="preserve"><group>
@deftypefun <var>type</var> <var>name</var> <var>arguments</var>&dots;
<var>body-of-description</var>
@end deftypefun
</group>
</example>
<para><code>@deftypefun</code> creates an entry in the index of functions for
<var>name</var>.
</para>
</item></tableitem></table>


</subsection>
</node>
<node>
<nodename>Typed Variables</nodename>
<nodenext>Abstract Objects</nodenext>
<nodeprev>Typed Functions</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Variables in Typed Languages</title>

<para>Variables in typed languages are handled in a manner similar to
functions in typed languages.  See <xref><xrefnodename>Typed Functions</xrefnodename></xref>.  The general
definition command <code>@deftypevr</code> corresponds to
<code>@deftypefn</code> and the specialized definition command
<code>@deftypevar</code> corresponds to <code>@deftypefun</code>.
</para>
<table><para><indexterm index="fn">deftypevr</indexterm></para><tableitem><tableterm><code>@deftypevr <var>category</var> <var>data-type</var> <var>name</var></code></tableterm>
<item><para>The <code>@deftypevr</code> command is the general definition command for
something like a variable in a typed language&mdash;an entity that records
a value.  You must choose a term to describe the category of the
entity being defined; for example, &ldquo;Variable&rdquo; could be used if the
entity is a variable.
</para>
<para>The <code>@deftypevr</code> command is written at the beginning of a line
and is followed on the same line by the category of the entity
being described, the data type, and the name of this particular
entity.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
@deftypevr {Global Flag} int enable
&dots;
@end deftypevr
</group>
</example>
<para>produces the following in Info:
</para>
<example xml:space="preserve"><group>
-- Global Flag: int enable
&dots;
</group>
</example>
<need></need><para>The template is:
</para>
<example xml:space="preserve">@deftypevr <var>category</var> <var>data-type</var> <var>name</var>
<var>body-of-description</var>
@end deftypevr
</example>
<para><code>@deftypevr</code> creates an entry in the index of variables for
<var>name</var>.
</para>
<para><indexterm index="fn">deftypevar</indexterm></para></item></tableitem><tableitem><tableterm><code>@deftypevar <var>data-type</var> <var>name</var></code></tableterm>
<item><para>The <code>@deftypevar</code> command is the specialized definition command
for variables in typed languages.  <code>@deftypevar</code> is equivalent
to <samp>@deftypevr Variable &dots;</samp>.
</para>
<need></need><para>For example:
</para>
<example xml:space="preserve"><group>
@deftypevar int fubar
&dots;
@end deftypevar
</group>
</example>
<para>produces the following in Info:
</para>
<example xml:space="preserve"><group>
-- Variable: int fubar
&dots;
</group>
</example>
<need></need><para>The template is:
</para>
<example xml:space="preserve"><group>
@deftypevar <var>data-type</var> <var>name</var>
<var>body-of-description</var>
@end deftypevar
</group>
</example>
<para><code>@deftypevar</code> creates an entry in the index of variables for
<var>name</var>.
</para></item></tableitem></table>

</subsection>
</node>
<node>
<nodename>Abstract Objects</nodename>
<nodenext>Data Types</nodenext>
<nodeprev>Typed Variables</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Object-Oriented Programming</title>

<para>Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is
a defined type of abstract object.  An instance of a class is a
particular object that has the type of the class.  An instance
variable is a variable that belongs to the class but for which each
instance has its own value.
</para>
<para>In a definition, if the name of a class is truly a name defined in the
programming system for a class, then you should write an <code>@code</code>
around it.  Otherwise, it is printed in the usual text font.
</para>
<table><para><indexterm index="fn">defcv</indexterm></para><tableitem><tableterm><code>@defcv <var>category</var> <var>class</var> <var>name</var></code></tableterm>
<item><para>The <code>@defcv</code> command is the general definition command for
variables associated with classes in object-oriented programming.  The
<code>@defcv</code> command is followed by three arguments: the category of
thing being defined, the class to which it belongs, and its
name.  Thus,
</para>
<example xml:space="preserve"><group>
@defcv {Class Option} Window border-pattern
&dots;
@end defcv
</group>
</example>
<para>illustrates how you would write the first line of a definition of the
<code>border-pattern</code> class option of the class <code>Window</code>.
</para>
<para>The template is:
</para><example xml:space="preserve"><group>
@defcv <var>category</var> <var>class</var> <var>name</var>
&dots;
@end defcv
</group>
</example>
<para><code>@defcv</code> creates an entry in the index of variables.
</para>
<para><indexterm index="fn">defivar</indexterm></para></item></tableitem><tableitem><tableterm><code>@defivar <var>class</var> <var>name</var></code></tableterm>
<item><para>The <code>@defivar</code> command is the definition command for instance
variables in object-oriented programming.  <code>@defivar</code> is
equivalent to <samp>@defcv {Instance Variable} &dots;</samp>
</para>
<para>The template is:
</para><example xml:space="preserve"><group>
@defivar <var>class</var> <var>instance-variable-name</var>
<var>body-of-definition</var>
@end defivar
</group>
</example>
<para><code>@defivar</code> creates an entry in the index of variables.
</para>
<para><indexterm index="fn">deftypeivar</indexterm></para></item></tableitem><tableitem><tableterm><code>@deftypeivar <var>class</var> <var>data-type</var> <var>name</var></code></tableterm>
<item><para>The <code>@deftypeivar</code> command is the definition command for typed
instance variables in object-oriented programming.  It is similar to
<code>@defivar</code> with the addition of the <var>data-type</var> parameter to
specify the type of the instance variable.  <code>@deftypeivar</code> creates an
entry in the index of variables.
</para>
<para><indexterm index="fn">defop</indexterm></para></item></tableitem><tableitem><tableterm><code>@defop <var>category</var> <var>class</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@defop</code> command is the general definition command for
entities that may resemble methods in object-oriented programming.
These entities take arguments, as functions do, but are associated with
particular classes of objects.
</para>
<para>For example, some systems have constructs called <dfn>wrappers</dfn> that
are associated with classes as methods are, but that act more like
macros than like functions.  You could use <code>@defop Wrapper</code> to
describe one of these.
</para>
<para>Sometimes it is useful to distinguish methods and <dfn>operations</dfn>.
You can think of an operation as the specification for a method.
Thus, a window system might specify that all window classes have a
method named <code>expose</code>; we would say that this window system
defines an <code>expose</code> operation on windows in general.  Typically,
the operation has a name and also specifies the pattern of arguments;
all methods that implement the operation must accept the same
arguments, since applications that use the operation do so without
knowing which method will implement it.
</para>
<para>Often it makes more sense to document operations than methods.  For
example, window application developers need to know about the
<code>expose</code> operation, but need not be concerned with whether a
given class of windows has its own method to implement this operation.
To describe this operation, you would write:
</para>
<example xml:space="preserve">@defop Operation windows expose
</example>
<para>The <code>@defop</code> command is written at the beginning of a line and
is followed on the same line by the overall name of the category of
operation, the name of the class of the operation, the name of the
operation, and its arguments, if any.
</para>
<para>The template is:
</para><example xml:space="preserve"><group>
@defop <var>category</var> <var>class</var> <var>name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end defop
</group>
</example>
<para><code>@defop</code> creates an entry, such as `<code>expose</code> on
<code>windows</code>', in the index of functions.
</para>
<para><indexterm index="fn">deftypeop</indexterm></para></item></tableitem><tableitem><tableterm><code>@deftypeop <var>category</var> <var>class</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>The <code>@deftypeop</code> command is the definition command for typed
operations in object-oriented programming.  It is similar to
<code>@defop</code> with the addition of the <var>data-type</var> parameter to
specify the return type of the method.  <code>@deftypeop</code> creates an
entry in the index of functions.
</para>
</item></tableitem><tableitem><tableterm><code>@defmethod <var>class</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para><indexterm index="fn">defmethod</indexterm>The <code>@defmethod</code> command is the definition command for methods
in object-oriented programming.  A method is a kind of function that
implements an operation for a particular class of objects and its
subclasses.
</para>
<para><code>@defmethod</code> is equivalent to <samp>@defop Method &dots;</samp>.
The command is written at the beginning of a line and is followed by
the name of the class of the method, the name of the method, and its
arguments, if any.
</para>
<para>For example:
</para><example xml:space="preserve"><group>
@defmethod <code>bar-class</code> bar-method argument
&dots;
@end defmethod
</group>
</example>
<para>illustrates the definition for a method called <code>bar-method</code> of
the class <code>bar-class</code>.  The method takes an argument.
</para>
<para>The template is:
</para>
<example xml:space="preserve"><group>
@defmethod <var>class</var> <var>method-name</var> <var>arguments</var>&dots;
<var>body-of-definition</var>
@end defmethod
</group>
</example>
<para><code>@defmethod</code> creates an entry, such as `<code>bar-method</code> on
<code>bar-class</code>', in the index of functions.
</para>

</item></tableitem><tableitem><tableterm><code>@deftypemethod <var>class</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para><indexterm index="fn">defmethod</indexterm>The <code>@deftypemethod</code> command is the definition command for methods
in object-oriented typed languages, such as C++ and Java.  It is similar
to the <code>@defmethod</code> command with the addition of the
<var>data-type</var> parameter to specify the return type of the method.
</para>
</item></tableitem></table>


</subsection>
</node>
<node>
<nodename>Data Types</nodename>
<nodeprev>Abstract Objects</nodeprev>
<nodeup>Def Cmds in Detail</nodeup>
<subsection>
<title>Data Types</title>

<para>Here is the command for data types:
</para>
<table><para><indexterm index="fn">deftp</indexterm></para><tableitem><tableterm><code>@deftp <var>category</var> <var>name</var> <var>attributes</var>&dots;</code></tableterm>
<item><para>The <code>@deftp</code> command is the generic definition command for data
types.  The command is written at the beginning of a line and is
followed on the same line by the category, by the name of the type
(which is a word like <code>int</code> or <code>float</code>), and then by names of
attributes of objects of that type.  Thus, you could use this command
for describing <code>int</code> or <code>float</code>, in which case you could use
<code>data type</code> as the category.  (A data type is a category of
certain objects for purposes of deciding which operations can be
performed on them.)
</para>
<para>In Lisp, for example,  <dfn>pair</dfn> names a particular data
type, and an object of that type has two slots called the
<sc>car</sc> and the <sc>cdr</sc>.  Here is how you would write the first line
of a definition of <code>pair</code>.
</para>
<example xml:space="preserve"><group>
@deftp {Data type} pair car cdr
&dots;
@end deftp
</group>
</example>
<need></need><para>The template is:
</para>
<example xml:space="preserve"><group>
@deftp <var>category</var> <var>name-of-type</var> <var>attributes</var>&dots;
<var>body-of-definition</var>
@end deftp
</group>
</example>
<para><code>@deftp</code> creates an entry in the index of data types.
</para></item></tableitem></table>

</subsection>
</node>
<node>
<nodename>Def Cmd Conventions</nodename>
<nodenext>Sample Function Definition</nodenext>
<nodeprev>Def Cmds in Detail</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>Conventions for Writing Definitions</title>
<para><indexterm index="cp">Definition conventions</indexterm><indexterm index="cp">Conventions for writing definitions</indexterm></para>
<para>When you write a definition using <code>@deffn</code>, <code>@defun</code>, or
one of the other definition commands, please take care to use
arguments that indicate the meaning, as with the <var>count</var> argument
to the <code>forward-word</code> function.  Also, if the name of an argument
contains the name of a type, such as <var>integer</var>, take care that the
argument actually is of that type.
</para>
</section>
</node>
<node>
<nodename>Sample Function Definition</nodename>
<nodeprev>Def Cmd Conventions</nodeprev>
<nodeup>Definition Commands</nodeup>
<section>
<title>A Sample Function Definition</title>
<para><indexterm index="cp">Function definitions</indexterm><indexterm index="cp">Command definitions</indexterm><indexterm index="cp">Macro definitions</indexterm><indexterm index="cp">Sample function definition</indexterm></para>
<para>A function definition uses the <code>@defun</code> and <code>@end defun</code>
commands.  The name of the function follows immediately after the
<code>@defun</code> command and it is followed, on the same line, by the
parameter list.
</para>
<para>Here is a definition from <xref><xrefnodename>Calling Functions</xrefnodename><xrefinfofile>elisp</xrefinfofile><xrefprintedname>The GNU Emacs Lisp Reference Manual</xrefprintedname></xref>.
</para>
<quotation>
<definition><definitionterm><indexterm index="fn">apply</indexterm><defcategory>Function</defcategory><deffunction>apply</deffunction><defparam> function</defparam><defparam> &amp;rest</defparam><defparam> arguments</defparam></definitionterm>
<definitionitem><para><code>apply</code> calls <var>function</var> with <var>arguments</var>, just
like <code>funcall</code> but with one difference: the last of
<var>arguments</var> is a list of arguments to give to
<var>function</var>, rather than a single argument.  We also say
that this list is <dfn>appended</dfn> to the other arguments.
</para>
<para><code>apply</code> returns the result of calling <var>function</var>.
As with <code>funcall</code>, <var>function</var> must either be a Lisp
function or a primitive function; special forms and macros
do not make sense in <code>apply</code>.
</para>
<example xml:space="preserve">(setq f 'list)
     &rArr; list
(apply f 'x 'y 'z)
error--&gt; Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
     &rArr; 10
(apply '+ '(1 2 3 4))
     &rArr; 10

(apply 'append '((a b c) nil (x y z) nil))
     &rArr; (a b c x y z)
</example>
<para>An interesting example of using <code>apply</code> is found in the description
of <code>mapcar</code>.
</para></definitionitem></definition></quotation>

<need></need><para>In the Texinfo source file, this example looks like this:
</para>
<example xml:space="preserve"><group>
@defun apply function &amp;rest arguments
@code{apply} calls @var{function} with
@var{arguments}, just like @code{funcall} but with one
difference: the last of @var{arguments} is a list of
arguments to give to @var{function}, rather than a single
argument.  We also say that this list is @dfn{appended}
to the other arguments.
</group>

<group>
@code{apply} returns the result of calling
@var{function}.  As with @code{funcall},
@var{function} must either be a Lisp function or a
primitive function; special forms and macros do not make
sense in @code{apply}.
</group>

<group>
@example
(setq f 'list)
     @result{} list
(apply f 'x 'y 'z)
@error{} Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
     @result{} 10
(apply '+ '(1 2 3 4))
     @result{} 10

(apply 'append '((a b c) nil (x y z) nil))
     @result{} (a b c x y z)
@end example
</group>

<group>
An interesting example of using @code{apply} is found
in the description of @code{mapcar}.
@end defun
</group>
</example>
<para>In this manual, this function is listed in the Command and Variable
Index under <code>apply</code>.
</para>
<para>Ordinary variables and user options are described using a format like
that for functions except that variables do not take arguments.
</para>

</section>
</node>
<node>
<nodename>Conditionals</nodename>
<nodenext>Internationalization</nodenext>
<nodeprev>Definition Commands</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Conditionally Visible Text</title>
<para><indexterm index="cp">Conditionally visible text</indexterm><indexterm index="cp">Text, conditionally visible</indexterm><indexterm index="cp">Visibility of conditional text</indexterm><indexterm index="cp">If text conditionally visible</indexterm></para>
<para>Sometimes it is good to use different text for different output formats.
For example, you can use the <dfn>conditional commands</dfn> to specify
different text for the printed manual and the Info output.
</para>
<para>Conditional commands may not be nested.
</para>
<para>The conditional commands comprise the following categories.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item><para> Commands for HTML, Info, or &tex;.
</para></item>
<item><para> Commands for not HTML, Info, or &tex;.
</para></item>
<item><para> Raw &tex; or HTML commands.
</para></item>
<item>
<para>Substituting text for all formats, and testing if a flag is set or clear.
</para></item>
</itemize>

<menu>
<menuentry>
<menunode> Conditional Commands</menunode>
<menutitle> Conditional Commands</menutitle>
<menucomment>        Specifying text for HTML, Info, or &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Conditional Not Commands</menunode>
<menutitle> Conditional Not Commands</menutitle>
<menucomment>    Specifying text for not HTML, Info, or &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Raw Formatter Commands</menunode>
<menutitle> Raw Formatter Commands</menutitle>
<menucomment>      Using raw &tex; or HTML commands.
</menucomment>
</menuentry><menuentry>
<menunode> set clear value</menunode>
<menutitle> set clear value</menutitle>
<menucomment>             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Conditional Commands</nodename>
<nodenext>Conditional Not Commands</nodenext>
<nodeup>Conditionals</nodeup>
<section>
<title>Conditional Commands</title>

<para>Texinfo has a pair of commands for each output format, to allow
conditional inclusion of text for a particular output format.
</para>
<para><indexterm index="fn">ifinfo</indexterm><code>@ifinfo</code> begins segments of text that should be ignored by &tex;
when it typesets the printed manual.  The segment of text appears only
in the Info file and (for historical compatibility) the plain text
output.  The <code>@ifinfo</code> command should appear on a line by itself;
end the Info-only text with a line containing <code>@end ifinfo</code> by
itself.
</para>
<para><indexterm index="fn">iftex</indexterm><indexterm index="fn">ifhtml</indexterm><indexterm index="fn">ifplaintext</indexterm>The <code>@iftex</code> and <code>@end iftex</code> commands are analogous to the
<code>@ifinfo</code> and <code>@end ifinfo</code> commands; they specify text that
will appear in the printed manual but not in the Info file.  Likewise
for <code>@ifhtml</code> and <code>@end ifhtml</code>, which specify text to
appear only in HTML output.  And for <code>@ifplaintext</code> and
<code>@end ifplaintext</code>, which specify text to appear only in plain
text output.
</para>
<para>For example,
</para>
<example xml:space="preserve">@iftex
This text will appear only in the printed manual.
@end iftex
@ifinfo
However, this text will appear only in Info (or plain text).
@end ifinfo
@ifhtml
And this text will only appear in HTML.
@end ifhtml
@ifplaintext
Whereas this text will only appear in plain text.
@end ifplaintext
</example>
<para>The preceding example produces the following line:
</para>
<para>Notice that you only see one of the input lines, depending on which
version of the manual you are reading.
</para>

</section>
</node>
<node>
<nodename>Conditional Not Commands</nodename>
<nodenext>Raw Formatter Commands</nodenext>
<nodeprev>Conditional Commands</nodeprev>
<nodeup>Conditionals</nodeup>
<section>
<title>Conditional Not Commands</title>
<para><indexterm index="fn">ifnothtml</indexterm><indexterm index="fn">ifnotinfo</indexterm><indexterm index="fn">ifnotplaintext</indexterm><indexterm index="fn">ifnottex</indexterm></para>
<para>You can specify text to be included in any output format <emph>other</emph>
than some given one with the <code>@ifnot&dots;</code> commands:
</para><example xml:space="preserve">@ifnothtml &dots; @end ifnothtml
@ifnotinfo &dots; @end ifnotinfo
@ifnotplaintext &dots; @end ifnotplaintext
@ifnottex &dots; @end ifnottex
</example><para>(The <code>@ifnot&dots;</code> command and the <code>@end</code> command must
appear on lines by themselves in your actual source file.)
</para>
<para>If the output file is <emph>not</emph> being made for the given format, the
region is included.  Otherwise, it is ignored.
</para>
<para>With one exception (for historical compatibility): <code>@ifnotinfo</code>
text is omitted for both Info and plain text output, not just Info.  To
specify text which appears only in Info and not in plain text, use
<code>@ifnotplaintext</code>, like this:
</para>
<para>The regions delimited by these commands are ordinary Texinfo source as
with <code>@iftex</code>, not raw formatter source as with <code>@tex</code>
(see <xref><xrefnodename>Raw Formatter Commands</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>Raw Formatter Commands</nodename>
<nodenext>set clear value</nodenext>
<nodeprev>Conditional Not Commands</nodeprev>
<nodeup>Conditionals</nodeup>
<section>
<title>Raw Formatter Commands</title>
<para><indexterm index="cp">&tex; commands, using ordinary</indexterm><indexterm index="cp">HTML commands, using ordinary</indexterm><indexterm index="cp">Raw formatter commands</indexterm><indexterm index="cp">Ordinary &tex; commands, using</indexterm><indexterm index="cp">Ordinary HTML commands, using</indexterm><indexterm index="cp">Commands using raw &tex;</indexterm><indexterm index="cp">Commands using raw HTML</indexterm><indexterm index="cp">plain &tex;</indexterm></para>
<para>Inside a region delineated by <code>@iftex</code> and <code>@end iftex</code>, you
can embed some raw &tex; commands.  Info will ignore these commands
since they are only in that part of the file which is seen by &tex;.
You can write the &tex; commands as you would write them in a normal
&tex; file, except that you must replace the <samp>\</samp> used by &tex;
with an <samp>@</samp>.  For example, in the <code>@titlepage</code> section of a
Texinfo file, you can use the &tex; command <code>@vskip</code> to format
the copyright page.  (The <code>@titlepage</code> command causes Info to
ignore the region automatically, as it does with the <code>@iftex</code>
command.)
</para>
<para>However, many features of plain &tex; will not work, as they are
overridden by Texinfo features.
</para>
<para><indexterm index="fn">tex</indexterm>You can enter plain &tex; completely, and use <samp>\</samp> in the &tex;
commands, by delineating a region with the <code>@tex</code> and <code>@end
tex</code> commands.  (The <code>@tex</code> command also causes Info to ignore the
region, like the <code>@iftex</code> command.)  The sole exception is that the
<code>@</code> character still introduces a command, so that <code>@end tex</code>
can be recognized properly.
</para>
<para><indexterm index="cp">Mathematical expressions</indexterm>For example, here is a mathematical expression written in
plain &tex;:
</para>
<example xml:space="preserve">@tex
$$ \chi^2 = \sum_{i=1}^N
          \left (y_i - (a + b x_i)
          \over \sigma_i\right)^2 $$
@end tex
</example>
<para>The output of this example will appear only in a printed manual.  If
you are reading this in Info, you will not see the equation that appears
in the printed manual.
</para>

<para><indexterm index="fn">ifhtml</indexterm><indexterm index="fn">html</indexterm>Analogously, you can use <code>@ifhtml &dots; @end ifhtml</code> to delimit
a region to be included in HTML output only, and <code>@html &dots;
@end html</code> for a region of raw HTML (again, except that <code>@</code> is
still the escape character, so the <code>@end</code> command can be
recognized.)
</para>

</section>
</node>
<node>
<nodename>set clear value</nodename>
<nodeprev>Raw Formatter Commands</nodeprev>
<nodeup>Conditionals</nodeup>
<section>
<title><code>@set</code>, <code>@clear</code>, and <code>@value</code></title>

<para>You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the <code>@set</code>, <code>@clear</code>, <code>@ifset</code>,
and <code>@ifclear</code> commands.
</para>
<para>Brief descriptions:
</para>
<table><tableitem><tableterm><code>@set <var>flag</var> [<var>value</var>]</code></tableterm>
<item><para>Set the variable <var>flag</var>, to the optional <var>value</var> if specifed.
</para>
</item></tableitem><tableitem><tableterm><code>@clear <var>flag</var></code></tableterm>
<item><para>Undefine the variable <var>flag</var>, whether or not it was previously defined.
</para>
</item></tableitem><tableitem><tableterm><code>@ifset <var>flag</var></code></tableterm>
<item><para>If <var>flag</var> is set, text through the next <code>@end ifset</code> command
is formatted.  If <var>flag</var> is clear, text through the following
<code>@end ifset</code> command is ignored.
</para>
</item></tableitem><tableitem><tableterm><code>@ifclear <var>flag</var></code></tableterm>
<item><para>If <var>flag</var> is set, text through the next <code>@end ifclear</code> command
is ignored.  If <var>flag</var> is clear, text through the following
<code>@end ifclear</code> command is formatted.
</para></item></tableitem></table>

<menu>
<menuentry>
<menunode> set value</menunode>
<menutitle> set value</menutitle>
<menucomment>                   Expand a flag variable to a string.
</menucomment>
</menuentry><menuentry>
<menunode> ifset ifclear</menunode>
<menutitle> ifset ifclear</menutitle>
<menucomment>               Format a region if a flag is set.
</menucomment>
</menuentry><menuentry>
<menunode> value Example</menunode>
<menutitle> value Example</menutitle>
<menucomment>               An easy way to update edition information.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>set value</nodename>
<nodenext>ifset ifclear</nodenext>
<nodeup>set clear value</nodeup>
<subsection>
<title><code>@set</code> and <code>@value</code></title>
<para><indexterm index="fn">value</indexterm></para>
<para>You use the <code>@set</code> command to specify a value for a flag, which is
later expanded by the <code>@value</code> command.
</para>
<para>A <dfn>flag</dfn> is an identifier.  In general, it is best to use only
letters and numerals in a flag name, not <samp>-</samp> or <samp>_</samp>&mdash;they
will work in some contexts, but not all, due to limitations in &tex;.
</para>
<para>The value is the remainder of the input line, and can contain anything.
</para>
<para>Write the <code>@set</code> command like this:
</para>
<example xml:space="preserve">@set foo This is a string.
</example>
<para>This sets the value of the flag <code>foo</code> to &ldquo;This is a string.&rdquo;.
</para>
<para>The Texinfo formatters then replace an <code>@value{<var>flag</var>}</code>
command with the string to which <var>flag</var> is set.  Thus, when
<code>foo</code> is set as shown above, the Texinfo formatters convert this:
</para>
<example xml:space="preserve"><group>
@value{foo}
<exdent></exdent><r>to this:</r>
This is a string.
</group>
</example>
<para>You can write an <code>@value</code> command within a paragraph; but you
must write an <code>@set</code> command on a line of its own.
</para>
<para>If you write the <code>@set</code> command like this:
</para>
<example xml:space="preserve">@set foo
</example>
<para>without specifying a string, the value of <code>foo</code> is the empty string.
</para>
<para>If you clear a previously set flag with <code>@clear <var>flag</var></code>, a
subsequent <code>@value{flag}</code> command will report an error.
</para>
<para>For example, if you set <code>foo</code> as follows:
</para>
<example xml:space="preserve">@set how-much very, very, very
</example>
<para>then the formatters transform
</para>
<example xml:space="preserve"><group>
It is a @value{how-much} wet day.
<exdent></exdent><r>into</r>
It is a very, very, very wet day.
</group>
</example>
<para>If you write
</para>
<example xml:space="preserve">@clear how-much
</example>
<para>then the formatters transform
</para>
<example xml:space="preserve"><group>
It is a @value{how-much} wet day.
<exdent></exdent><r>into</r>
It is a {No value for &quot;how-much&quot;} wet day.
</group>
</example>

</subsection>
</node>
<node>
<nodename>ifset ifclear</nodename>
<nodenext>value Example</nodenext>
<nodeprev>set value</nodeprev>
<nodeup>set clear value</nodeup>
<subsection>
<title><code>@ifset</code> and <code>@ifclear</code></title>

<para><indexterm index="fn">ifset</indexterm>When a <var>flag</var> is set, the Texinfo formatting commands format text
between subsequent pairs of <code>@ifset <var>flag</var></code> and <code>@end
ifset</code> commands.  When the <var>flag</var> is cleared, the Texinfo formatting
commands do <emph>not</emph> format the text.  <code>@ifclear</code> operates
analogously.
</para>
<para>Write the conditionally formatted text between <code>@ifset <var>flag</var></code>
and <code>@end ifset</code> commands, like this:
</para>
<example xml:space="preserve"><group>
@ifset <var>flag</var>
<var>conditional-text</var>
@end ifset
</group>
</example>
<para>For example, you can create one document that has two variants, such as
a manual for a `large' and `small' model:
</para>
<para><indexterm index="cp">shrubbery</indexterm></para><example xml:space="preserve">You can use this machine to dig up shrubs
without hurting them.

@set large

@ifset large
It can also dig up fully grown trees.
@end ifset

Remember to replant promptly &dots;
</example>
<para>In the example, the formatting commands will format the text between
<code>@ifset large</code> and <code>@end ifset</code> because the <code>large</code>
flag is set.
</para>
<para>When <var>flag</var> is cleared, the Texinfo formatting commands do
<emph>not</emph> format the text between <code>@ifset <var>flag</var></code> and
<code>@end ifset</code>; that text is ignored and does not appear in either
printed or Info output.
</para>
<para>For example, if you clear the flag of the preceding example by writing
an <code>@clear large</code> command after the <code>@set large</code> command
(but before the conditional text), then the Texinfo formatting commands
ignore the text between the <code>@ifset large</code> and <code>@end ifset</code>
commands.  In the formatted output, that text does not appear; in both
printed and Info output, you see only the lines that say, &ldquo;You can use
this machine to dig up shrubs without hurting them.  Remember to replant
promptly &dots;&rdquo;.
</para>
<para><indexterm index="fn">ifclear</indexterm>If a flag is cleared with an <code>@clear <var>flag</var></code> command, then
the formatting commands format text between subsequent pairs of
<code>@ifclear</code> and <code>@end ifclear</code> commands.  But if the flag
is set with <code>@set <var>flag</var></code>, then the formatting commands do
<emph>not</emph> format text between an <code>@ifclear</code> and an <code>@end
ifclear</code> command; rather, they ignore that text.  An <code>@ifclear</code>
command looks like this:
</para>
<example xml:space="preserve">@ifclear <var>flag</var>
</example>

</subsection>
</node>
<node>
<nodename>value Example</nodename>
<nodeprev>ifset ifclear</nodeprev>
<nodeup>set clear value</nodeup>
<subsection>
<title><code>@value</code> Example</title>

<para>You can use the <code>@value</code> command to minimize the number of places
you need to change when you record an update to a manual.  See <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>, for an example of this same principle can work with
Automake distributions, and full texts.
</para>
<para>Here is an example adapted from <xref><xrefnodename>Top</xrefnodename><xrefprinteddesc>Overview</xrefprinteddesc><xrefinfofile>make</xrefinfofile><xrefprintedname>The GNU Make Manual</xrefprintedname></xref>):
</para>
<enumerate first="1"><item>
<para>Set the flags:
</para>
<example xml:space="preserve"><group>
@set EDITION 0.35 Beta
@set VERSION 3.63 Beta
@set UPDATED 14 August 1992
@set UPDATE-MONTH August 1992
</group>
</example>
</item>
<item>
<para>Write text for the <code>@copying</code> section (see <xref><xrefnodename>copying</xrefnodename></xref>):
</para>
<example xml:space="preserve"><group>
@copying
This is Edition @value{EDITION},
last updated @value{UPDATED},
of @cite{The GNU Make Manual},
for @code{make}, version @value{VERSION}.

Copyright &dots;

Permission is granted &dots;
@end copying
</group>
</example>
</item>
<item>
<para>Write text for the title page, for people reading the printed manual:
</para>
<example xml:space="preserve"><group>
@titlepage
@title GNU Make
@subtitle A Program for Directing Recompilation
@subtitle Edition @value{EDITION}, &dots;
@subtitle @value{UPDATE-MONTH}
@page
@insertcopying
&dots;
@end titlepage
</group>
</example>
<para>(On a printed cover, a date listing the month and the year looks less
fussy than a date listing the day as well as the month and year.)
</para>
</item>
<item>
<para>Write text for the Top node, for people reading the Info file:
</para>
<example xml:space="preserve"><group>
@ifnottex
@node Top
@top Make

@insertcopying
&dots;
@end ifnottex
</group>
</example>
<para>After you format the manual, the <code>@value</code> constructs have been
expanded, so the output contains text like this:
</para>
<example xml:space="preserve"><group>
This is Edition 0.35 Beta, last updated 14 August 1992,
of `The GNU Make Manual', for `make', Version 3.63 Beta.
</group>
</example></item>
</enumerate>

<para>When you update the manual, you change only the values of the flags; you
do not need to edit the three sections.
</para>

</subsection>
</node>
<node>
<nodename>Internationalization</nodename>
<nodenext>Defining New Texinfo Commands</nodenext>
<nodeprev>Conditionals</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Internationalization</title>

<para><indexterm index="cp">Internationalization</indexterm>Texinfo has some support for writing in languages other than English,
although this area still needs considerable work.
</para>
<para>For a list of the various accented and special characters Texinfo
supports, see <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
<menu>
<menuentry>
<menunode> documentlanguage</menunode>
<menutitle> documentlanguage</menutitle>
<menucomment>            Declaring the current language.
</menucomment>
</menuentry><menuentry>
<menunode> documentencoding</menunode>
<menutitle> documentencoding</menutitle>
<menucomment>            Declaring the input encoding.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>documentlanguage</nodename>
<nodenext>documentencoding</nodenext>
<nodeup>Internationalization</nodeup>
<section>
<title><code>@documentlanguage <var>cc</var></code>: Set the Document Language</title>

<para><indexterm index="fn">documentlanguage</indexterm><indexterm index="cp">Language, declaring</indexterm><indexterm index="cp">Document language, declaring</indexterm></para>
<para>The <code>@documentlanguage</code> command declares the current document
language.  Write it on a line by itself, with a two-letter ISO-639
language code following (list is included below).  If you have a
multilingual document, the intent is to be able to use this command
multiple times, to declare each language change.  If the command is not
used at all, the default is <code>en</code> for English.
</para>
<para><indexterm index="cp"><file>txi-<var>cc</var>.tex</file></indexterm>At present, this command is ignored in Info and HTML output.  For
&tex;, it causes the file <file>txi-<var>cc</var>.tex</file> to be read (if it
exists).  Such a file appropriately redefines the various English words
used in &tex; output, such as `Chapter', `See', and so on.
</para>
<para><indexterm index="cp">Hyphenation patterns, language-dependent</indexterm>It would be good if this command also changed &tex;'s ideas of the
current hyphenation patterns (via the &tex; primitive
<code>\language</code>), but this is unfortunately not currently implemented.
</para>
<para><indexterm index="cp">ISO 639 codes</indexterm><indexterm index="cp">Language codes</indexterm>Hereare the valid language codes, from ISO-639.
</para>
<multitable><columnfraction>7</columnfraction>
<columnfraction>26</columnfraction>
<columnfraction>7</columnfraction>
<columnfraction>26</columnfraction>
<columnfraction>7</columnfraction>
<columnfraction>26</columnfraction>
<tbody><row><entry>
<code>aa</code> </entry><entry> Afar </entry><entry>
<code>ab</code> </entry><entry> Abkhazian </entry><entry>
<code>af</code> </entry><entry> Afrikaans
</entry></row><row><entry>
<code>am</code> </entry><entry> Amharic </entry><entry>
<code>ar</code> </entry><entry> Arabic </entry><entry>
<code>as</code> </entry><entry> Assamese
</entry></row><row><entry>
<code>ay</code> </entry><entry> Aymara </entry><entry>
<code>az</code> </entry><entry> Azerbaijani </entry><entry>
<code>ba</code> </entry><entry> Bashkir
</entry></row><row><entry>
<code>be</code> </entry><entry> Byelorussian </entry><entry>
<code>bg</code> </entry><entry> Bulgarian </entry><entry>
<code>bh</code> </entry><entry> Bihari
</entry></row><row><entry>
<code>bi</code> </entry><entry> Bislama </entry><entry>
<code>bn</code> </entry><entry> Bengali; Bangla </entry><entry>
<code>bo</code> </entry><entry> Tibetan
</entry></row><row><entry>
<code>br</code> </entry><entry> Breton </entry><entry>
<code>ca</code> </entry><entry> Catalan </entry><entry>
<code>co</code> </entry><entry> Corsican
</entry></row><row><entry>
<code>cs</code> </entry><entry> Czech </entry><entry>
<code>cy</code> </entry><entry> Welsh </entry><entry>
<code>da</code> </entry><entry> Danish
</entry></row><row><entry>
<code>de</code> </entry><entry> German </entry><entry>
<code>dz</code> </entry><entry> Bhutani </entry><entry>
<code>el</code> </entry><entry> Greek
</entry></row><row><entry>
<code>en</code> </entry><entry> English </entry><entry>
<code>eo</code> </entry><entry> Esperanto </entry><entry>
<code>es</code> </entry><entry> Spanish
</entry></row><row><entry>
<code>et</code> </entry><entry> Estonian </entry><entry>
<code>eu</code> </entry><entry> Basque </entry><entry>
<code>fa</code> </entry><entry> Persian
</entry></row><row><entry>
<code>fi</code> </entry><entry> Finnish </entry><entry>
<code>fj</code> </entry><entry> Fiji </entry><entry>
<code>fo</code> </entry><entry> Faroese
</entry></row><row><entry>
<code>fr</code> </entry><entry> French </entry><entry>
<code>fy</code> </entry><entry> Frisian </entry><entry>
<code>ga</code> </entry><entry> Irish
</entry></row><row><entry>
<code>gd</code> </entry><entry> Scots Gaelic </entry><entry>
<code>gl</code> </entry><entry> Galician </entry><entry>
<code>gn</code> </entry><entry> Guarani
</entry></row><row><entry>
<code>gu</code> </entry><entry> Gujarati </entry><entry>
<code>ha</code> </entry><entry> Hausa </entry><entry>
<code>he</code> </entry><entry> Hebrew
</entry></row><row><entry>
<code>hi</code> </entry><entry> Hindi </entry><entry>
<code>hr</code> </entry><entry> Croatian </entry><entry>
<code>hu</code> </entry><entry> Hungarian
</entry></row><row><entry>
<code>hy</code> </entry><entry> Armenian </entry><entry>
<code>ia</code> </entry><entry> Interlingua </entry><entry>
<code>id</code> </entry><entry> Indonesian
</entry></row><row><entry>
<code>ie</code> </entry><entry> Interlingue </entry><entry>
<code>ik</code> </entry><entry> Inupiak </entry><entry>
<code>is</code> </entry><entry> Icelandic
</entry></row><row><entry>
<code>it</code> </entry><entry> Italian </entry><entry>
<code>iu</code> </entry><entry> Inuktitut </entry><entry>
<code>ja</code> </entry><entry> Japanese
</entry></row><row><entry>
<code>jw</code> </entry><entry> Javanese </entry><entry>
<code>ka</code> </entry><entry> Georgian </entry><entry>
<code>kk</code> </entry><entry> Kazakh
</entry></row><row><entry>
<code>kl</code> </entry><entry> Greenlandic </entry><entry>
<code>km</code> </entry><entry> Cambodian </entry><entry>
<code>kn</code> </entry><entry> Kannada
</entry></row><row><entry>
<code>ks</code> </entry><entry> Kashmiri </entry><entry>
<code>ko</code> </entry><entry> Korean </entry><entry>
<code>ku</code> </entry><entry> Kurdish
</entry></row><row><entry>
<code>ky</code> </entry><entry> Kirghiz </entry><entry>
<code>la</code> </entry><entry> Latin </entry><entry>
<code>ln</code> </entry><entry> Lingala
</entry></row><row><entry>
<code>lt</code> </entry><entry> Lithuanian </entry><entry>
<code>lo</code> </entry><entry> Laothian </entry><entry>
<code>lv</code> </entry><entry> Latvian, Lettish
</entry></row><row><entry>
<code>mg</code> </entry><entry> Malagasy </entry><entry>
<code>mi</code> </entry><entry> Maori </entry><entry>
<code>mk</code> </entry><entry> Macedonian
</entry></row><row><entry>
<code>ml</code> </entry><entry> Malayalam </entry><entry>
<code>mn</code> </entry><entry> Mongolian </entry><entry>
<code>mo</code> </entry><entry> Moldavian
</entry></row><row><entry>
<code>mr</code> </entry><entry> Marathi </entry><entry>
<code>ms</code> </entry><entry> Malay </entry><entry>
<code>mt</code> </entry><entry> Maltese
</entry></row><row><entry>
<code>my</code> </entry><entry> Burmese </entry><entry>
<code>na</code> </entry><entry> Nauru </entry><entry>
<code>ne</code> </entry><entry> Nepali
</entry></row><row><entry>
<code>nl</code> </entry><entry> Dutch </entry><entry>
<code>no</code> </entry><entry> Norwegian </entry><entry>
<code>oc</code> </entry><entry> Occitan
</entry></row><row><entry>
<code>om</code> </entry><entry> (Afan) Oromo </entry><entry>
<code>or</code> </entry><entry> Oriya </entry><entry>
<code>pa</code> </entry><entry> Punjabi
</entry></row><row><entry>
<code>pl</code> </entry><entry> Polish </entry><entry>
<code>ps</code> </entry><entry> Pashto, Pushto </entry><entry>
<code>pt</code> </entry><entry> Portuguese
</entry></row><row><entry>
<code>qu</code> </entry><entry> Quechua </entry><entry>
<code>rm</code> </entry><entry> Rhaeto-Romance </entry><entry>
<code>rn</code> </entry><entry> Kirundi
</entry></row><row><entry>
<code>ro</code> </entry><entry> Romanian </entry><entry>
<code>ru</code> </entry><entry> Russian </entry><entry>
<code>rw</code> </entry><entry> Kinyarwanda
</entry></row><row><entry>
<code>sa</code> </entry><entry> Sanskrit </entry><entry>
<code>sd</code> </entry><entry> Sindhi </entry><entry>
<code>sg</code> </entry><entry> Sangro
</entry></row><row><entry>
<code>sh</code> </entry><entry> Serbo-Croatian </entry><entry>
<code>si</code> </entry><entry> Sinhalese </entry><entry>
<code>sk</code> </entry><entry> Slovak
</entry></row><row><entry>
<code>sl</code> </entry><entry> Slovenian </entry><entry>
<code>sm</code> </entry><entry> Samoan </entry><entry>
<code>sn</code> </entry><entry> Shona
</entry></row><row><entry>
<code>so</code> </entry><entry> Somali </entry><entry>
<code>sq</code> </entry><entry> Albanian </entry><entry>
<code>sr</code> </entry><entry> Serbian
</entry></row><row><entry>
<code>ss</code> </entry><entry> Siswati </entry><entry>
<code>st</code> </entry><entry> Sesotho </entry><entry>
<code>su</code> </entry><entry> Sundanese
</entry></row><row><entry>
<code>sv</code> </entry><entry> Swedish </entry><entry>
<code>sw</code> </entry><entry> Swahili </entry><entry>
<code>ta</code> </entry><entry> Tamil
</entry></row><row><entry>
<code>te</code> </entry><entry> Telugu </entry><entry>
<code>tg</code> </entry><entry> Tajik </entry><entry>
<code>th</code> </entry><entry> Thai
</entry></row><row><entry>
<code>ti</code> </entry><entry> Tigrinya </entry><entry>
<code>tk</code> </entry><entry> Turkmen </entry><entry>
<code>tl</code> </entry><entry> Tagalog
</entry></row><row><entry>
<code>tn</code> </entry><entry> Setswana </entry><entry>
<code>to</code> </entry><entry> Tonga </entry><entry>
<code>tr</code> </entry><entry> Turkish
</entry></row><row><entry>
<code>ts</code> </entry><entry> Tsonga </entry><entry>
<code>tt</code> </entry><entry> Tatar </entry><entry>
<code>tw</code> </entry><entry> Twi
</entry></row><row><entry>
<code>ug</code> </entry><entry> Uighur </entry><entry>
<code>uk</code> </entry><entry> Ukrainian </entry><entry>
<code>ur</code> </entry><entry> Urdu
</entry></row><row><entry>
<code>uz</code> </entry><entry> Uzbek </entry><entry>
<code>vi</code> </entry><entry> Vietnamese </entry><entry>
<code>vo</code> </entry><entry> Volapuk
</entry></row><row><entry>
<code>wo</code> </entry><entry> Wolof </entry><entry>
<code>xh</code> </entry><entry> Xhosa </entry><entry>
<code>yi</code> </entry><entry> Yiddish
</entry></row><row><entry>
<code>yo</code> </entry><entry> Yoruba </entry><entry>
<code>za</code> </entry><entry> Zhuang </entry><entry>
<code>zh</code> </entry><entry> Chinese
</entry></row><row><entry>
<code>zu</code> </entry><entry> Zulu
</entry></row></tbody></multitable>


</section>
</node>
<node>
<nodename>documentencoding</nodename>
<nodeprev>documentlanguage</nodeprev>
<nodeup>Internationalization</nodeup>
<section>
<title><code>@documentencoding <var>enc</var></code>: Set Input Encoding</title>

<para><indexterm index="fn">documentencoding</indexterm><indexterm index="cp">Encoding, declaring</indexterm><indexterm index="cp">Input encoding, declaring</indexterm><indexterm index="cp">Document input encoding</indexterm></para>
<para>The <code>@documentencoding</code> command declares the input document
encoding.  Write it on a line by itself, with a valid encoding
specification following, such as <samp>ISO-8859-1</samp>.
</para>
<para><indexterm index="cp">http-equiv, and charset</indexterm><indexterm index="cp">meta HTML tag, and charset</indexterm>At present, this is used only in HTML output from <code>makeinfo</code>.  If a
document encoding <var>enc</var> is specified, it is used in a
<samp>&lt;meta&gt;</samp> tag included in the <samp>&lt;head&gt;</samp> of the output:
</para>
<example xml:space="preserve">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;
      charset=<var>enc</var>&quot;&gt;
</example>

</section>
</node>
<node>
<nodename>Defining New Texinfo Commands</nodename>
<nodenext>Hardcopy</nodenext>
<nodeprev>Internationalization</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Defining New Texinfo Commands</title>
<para><indexterm index="cp">Macros</indexterm><indexterm index="cp">Defining new Texinfo commands</indexterm><indexterm index="cp">New Texinfo commands, defining</indexterm><indexterm index="cp">Texinfo commands, defining new</indexterm><indexterm index="cp">User-defined Texinfo commands</indexterm></para>
<para>Texinfo provides several ways to define new commands:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>A Texinfo <dfn>macro</dfn> allows you to define a new Texinfo command as any
sequence of text and/or existing commands (including other macros).  The
macro can have any number of <dfn>parameters</dfn>&mdash;text you supply each
time you use the macro.
</para>
<para>Incidentally, these macros have nothing to do with the <code>@defmac</code>
command, which is for documenting macros in the subject of the manual
(see <xref><xrefnodename>Def Cmd Template</xrefnodename></xref>).
</para>
</item>
<item>
<para><samp>@alias</samp> is a convenient way to define a new name for an existing
command.
</para>
</item>
<item>
<para><samp>@definfoenclose</samp> allows you to define new commands with
customized output in the Info file.
</para>
</item>
</itemize>

<menu>
<menuentry>
<menunode> Defining Macros</menunode>
<menutitle> Defining Macros</menutitle>
<menucomment>             Defining and undefining new commands.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking Macros</menunode>
<menutitle> Invoking Macros</menutitle>
<menucomment>             Using a macro, once you've defined it.
</menucomment>
</menuentry><menuentry>
<menunode> Macro Details</menunode>
<menutitle> Macro Details</menutitle>
<menucomment>               Beyond basic macro usage.
</menucomment>
</menuentry><menuentry>
<menunode> alias</menunode>
<menutitle> alias</menutitle>
<menucomment>                       Command aliases.
</menucomment>
</menuentry><menuentry>
<menunode> definfoenclose</menunode>
<menutitle> definfoenclose</menutitle>
<menucomment>              Customized highlighting.
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Defining Macros</nodename>
<nodenext>Invoking Macros</nodenext>
<nodeup>Defining New Texinfo Commands</nodeup>
<section>
<title>Defining Macros</title>
<para><indexterm index="cp">Defining macros</indexterm><indexterm index="cp">Macro definitions</indexterm></para>
<para><indexterm index="fn">macro</indexterm>You use the Texinfo <code>@macro</code> command to define a macro, like this:
</para>
<example xml:space="preserve">@macro <var>macroname</var>{<var>param1</var>, <var>param2</var>, &dots;}
<var>text</var> &dots; \<var>param1</var>\ &dots;
@end macro
</example>
<para>The <dfn>parameters</dfn> <var>param1</var>, <var>param2</var>, &dots; correspond to
arguments supplied when the macro is subsequently used in the document
(described in the next section).
</para>
<para>For a macro to work with &tex;, <var>macroname</var> must consist entirely
of letters: no digits, hyphens, underscores, or other special characters.
</para>
<para>If a macro needs no parameters, you can define it either with an empty
list (<samp>@macro foo {}</samp>) or with no braces at all (<samp>@macro
foo</samp>).
</para>
<para><indexterm index="cp">Body of a macro</indexterm><indexterm index="cp">Mutually recursive macros</indexterm><indexterm index="cp">Recursion, mutual</indexterm>The definition or <dfn>body</dfn> of the macro can contain most Texinfo
commands, including previously-defined macros.  Not-yet-defined macro
invocations are not allowed; thus, it is not possible to have mutually
recursive Texinfo macros.  Also, a macro definition that defines another
macro does not work in &tex; due to limitations in the design of
<code>@macro</code>.
</para>
<para><indexterm index="cp">Parameters to macros</indexterm>In the macro body, instances of a parameter name surrounded by
backslashes, as in <samp>\<var>param1</var>\</samp> in the example above, are
replaced by the corresponding argument from the macro invocation.  You
can use parameter names any number of times in the body, including zero.
</para>
<para><indexterm index="cp">Backslash in macros</indexterm>To get a single <samp>\</samp> in the macro expansion, use <samp>\\</samp>.  Any
other use of <samp>\</samp> in the body yields a warning.
</para>
<para><indexterm index="cp">Spaces in macros</indexterm><indexterm index="cp">Whitespace in macros</indexterm>The newlines after the <code>@macro</code> line and before the <code>@end
macro</code> line are ignored, that is, not included in the macro body.  All
other whitespace is treated according to the usual Texinfo rules.
</para>
<para><indexterm index="cp">Recursive macro invocations</indexterm><indexterm index="fn">rmacro</indexterm>To allow a macro to be used recursively, that is, in an argument to a
call to itself, you must define it with <samp>@rmacro</samp>, like this:
</para>
<example xml:space="preserve">@rmacro rmac {arg}
a\arg\b
@end rmacro
&dots;
@rmac{1@rmac{text}2}
</example>
<para>This produces the output `a1atextb2b'.  With <samp>@macro</samp> instead of
<samp>@rmacro</samp>, an error message is given.
</para>
<para><indexterm index="fn">unmacro</indexterm><indexterm index="cp">Macros, undefining</indexterm><indexterm index="cp">Undefining macros</indexterm>You can undefine a macro <var>foo</var> with <code>@unmacro <var>foo</var></code>.
It is not an error to undefine a macro that is already undefined.
For example:
</para>
<example xml:space="preserve">@unmacro foo
</example>

</section>
</node>
<node>
<nodename>Invoking Macros</nodename>
<nodenext>Macro Details</nodenext>
<nodeprev>Defining Macros</nodeprev>
<nodeup>Defining New Texinfo Commands</nodeup>
<section>
<title>Invoking Macros</title>
<para><indexterm index="cp">Invoking macros</indexterm><indexterm index="cp">Expanding macros</indexterm><indexterm index="cp">Running macros</indexterm><indexterm index="cp">Macro invocation</indexterm></para>
<para>After a macro is defined (see the previous section), you can use
(<dfn>invoke</dfn>) it in your document like this:
</para>
<example xml:space="preserve">@<var>macroname</var> {<var>arg1</var>, <var>arg2</var>, &dots;}
</example>
<para>and the result will be just as if you typed the body of
<var>macroname</var> at that spot.  For example:
</para>
<example xml:space="preserve">@macro foo {p, q}
Together: \p\ &amp; \q\.
@end macro
@foo{a, b}
</example>
<para>produces:
</para>
<display xml:space="preserve">Together: a &amp; b.
</display>
<para><indexterm index="cp">Backslash, and macros</indexterm>Thus, the arguments and parameters are separated by commas and delimited
by braces; any whitespace after (but not before) a comma is ignored.
The braces are required in the invocation (but not the definition), even
when the macro takes no arguments, consistent with all other Texinfo
commands.  For example:
</para>
<example xml:space="preserve">@macro argless {}
No arguments here.
@end macro
@argless{}
</example>
<para>produces:
</para>
<display xml:space="preserve">No arguments here.
</display>
<para><indexterm index="cp">Comma, in macro arguments</indexterm><indexterm index="cp">Braces, in macro arguments</indexterm>To insert a comma, brace, or backslash in an argument, prepend a
backslash, as in
</para>
<example xml:space="preserve">@<var>macname</var> {\\\{\}\,}
</example>
<para>which will pass the (almost certainly error-producing) argument
<samp>\{},</samp> to <var>macname</var>.  However, commas in parameters, even
if escaped by a backslash, might cause trouble in &tex;.
</para>
<para>If the macro is defined to take a single argument, and is invoked
without any braces, the entire rest of the line after the macro name is
supplied as the argument.  For example:
</para>
<example xml:space="preserve">@macro bar {p}
Twice: \p\ &amp; \p\.
@end macro
@bar aah
</example>
<para>produces:
</para>
<!-- Sorry for cheating, but let's not require macros to process the manual. -->
<display xml:space="preserve">Twice: aah &amp; aah.
</display>
<para>If the macro is defined to take a single argument, and is invoked with
braces, the braced text is passed as the argument, regardless of
commas.  For example:
</para>
<example xml:space="preserve">@macro bar {p}
Twice: \p\ &amp; \p\.
@end macro
@bar{a,b}
</example>
<para>produces:
</para>
<display xml:space="preserve">Twice: a,b &amp; a,b.
</display>

</section>
</node>
<node>
<nodename>Macro Details</nodename>
<nodenext>alias</nodenext>
<nodeprev>Invoking Macros</nodeprev>
<nodeup>Defining New Texinfo Commands</nodeup>
<section>
<title>Macro Details</title>
<para><indexterm index="cp">Macro details</indexterm><indexterm index="cp">Details of macro usage</indexterm></para>
<para>Due to unavoidable disparities in the &tex; and <command>makeinfo</command>
implementations, Texinfo macros have the following limitations.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>All macros are expanded inside at least one &tex; group.  This means
that <code>@set</code> and other such commands will have no effect inside a
macro.
</para>
</item>
<item>
<para>Macros containing a command which must be on a line by itself, such as a
conditional, cannot be invoked in the middle of a line.
</para>
</item>
<item>
<para>Commas in macro arguments, even if escaped by a backslash, don't
always work.
</para>
</item>
<item>
<para>The &tex; implementation cannot construct macros that define macros in
the natural way.  To do this, you must use conditionals and raw &tex;.
For example:
</para>
<example xml:space="preserve">@ifnottex
@macro ctor {name, arg}
@macro \name\
something involving \arg\ somehow
@end macro
@end macro
@end ifnottex
@tex
\gdef\ctor#1{\ctorx#1,}
\gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
@end tex
</example>
</item>
<item>
<para>It is best to avoid comments inside macro definitions.
</para>
</item>
</itemize>

<para>If some macro feature causes errors when producing the printed version
of a manual, try expanding the macros with <command>makeinfo</command> by
invoking <command>texi2dvi</command> with the <samp>-e</samp> option; see <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>.
</para>
</section>
</node>
<node>
<nodename>alias</nodename>
<nodenext>definfoenclose</nodenext>
<nodeprev>Macro Details</nodeprev>
<nodeup>Defining New Texinfo Commands</nodeup>
<section>
<title><samp>@alias <var>new</var>=<var>existing</var></samp></title>
<para><indexterm index="cp">Aliases, command</indexterm><indexterm index="cp">Command aliases</indexterm><indexterm index="fn">alias</indexterm></para>
<para>The <samp>@alias</samp> command defines a new command to be just like an
existing one.  This is useful for defining additional markup names, thus
preserving semantic information in the input even though the output
result may be the same.
</para>
<para>Write the <samp>@alias</samp> command on a line by itself, followed by the
new command name, an equals sign, and the existing command name.
Whitespace around the equals sign is ignored.  Thus:
</para><example xml:space="preserve">@alias <var>new</var> = <var>existing</var>
</example>
<para>For example, if your document contains citations for both books and
some other media (movies, for example), you might like to define a
macro <code>@moviecite{}</code> that does the same thing as an ordinary
<code>@cite{}</code> but conveys the extra semantic information as well.
You'd do this as follows:
</para>
<example xml:space="preserve">@alias moviecite = cite
</example>
<para>Macros do not always have the same effect due to vagaries of argument
parsing.  Also, aliases are much simpler to define than macros.  So the
command is not redundant.  (It was also heavily used in the Jargon File!)
</para>
<para>Aliases must not be recursive, directly or indirectly.
</para>
</section>
</node>
<node>
<nodename>definfoenclose</nodename>
<nodeprev>alias</nodeprev>
<nodeup>Defining New Texinfo Commands</nodeup>
<section>
<title><samp>definfoenclose</samp>: Customized Highlighting</title>
<para><indexterm index="cp">Highlighting, customized</indexterm><indexterm index="cp">Customized highlighting</indexterm><indexterm index="fn">definfoenclose</indexterm></para>
<para>A <code>@definfoenclose</code> command may be used to define a highlighting
command for Info, but not for &tex;.  A command defined using
<code>@definfoenclose</code> marks text by enclosing it in strings that
precede and follow the text.  You can use this to get closer control of
your Info output.
</para> 
<para>Presumably, if you define a command with <code>@definfoenclose</code> for Info,
you will create a corresponding command for &tex;, either in
<file>texinfo.tex</file>, <file>texinfo.cnf</file>, or within an <samp>@iftex</samp> in
your document.
</para>
<para>Write a <code>@definfoenclose</code> command on a line and follow it with
three arguments separated by commas.  The first argument to
<code>@definfoenclose</code> is the @-command name (without the <code>@</code>);
the second argument is the Info start delimiter string; and the third
argument is the Info end delimiter string.  The latter two arguments
enclose the highlighted text in the Info file.  A delimiter string may
contain spaces.  Neither the start nor end delimiter is required.  If
you do not want a start delimiter but do want an end delimiter, you must
follow the command name with two commas in a row; otherwise, the Info
formatting commands will naturally misinterpret the end delimiter string
you intended as the start delimiter string.
</para>
<para>If you do a <code>@definfoenclose</code> on the name of a pre-defined macro
(such as <code>@emph</code>, <code>@strong</code>, <code>@t</code>, or <code>@i</code>), the
enclosure definition will override the built-in definition.
</para> 
<para>An enclosure command defined this way takes one argument in braces; this
is intended for new markup commands (see <xref><xrefnodename>Marking Text</xrefnodename></xref>).
</para>
<para><indexterm index="fn">phoo</indexterm>For example, you can write:
</para>
<example xml:space="preserve">@definfoenclose phoo,//,\\
</example>
<para>near the beginning of a Texinfo file to define <code>@phoo</code> as an Info
formatting command that inserts `//' before and `\\' after the argument
to <code>@phoo</code>.  You can then write <code>@phoo{bar}</code> wherever you
want `//bar\\' highlighted in Info.
</para>
<para>Also, for &tex; formatting, you could write 
</para>
<example xml:space="preserve">@iftex
@global@let@phoo=@i
@end iftex
</example>
<para>to define <code>@phoo</code> as a command that causes &tex; to typeset the
argument to <code>@phoo</code> in italics.
</para>
<para>Each definition applies to its own formatter: one for &tex;, the other
for <code>texinfo-format-buffer</code> or <code>texinfo-format-region</code>.  The
<code>@definfoenclose</code> command need not be within <samp>@ifinfo</samp>, but
the raw &tex; commands do need to be in <samp>@iftex</samp>.
</para>
<para><indexterm index="fn">headword</indexterm>Here is another example: write
</para>
<example xml:space="preserve">@definfoenclose headword, , :
</example>
<para>near the beginning of the file, to define <code>@headword</code> as an Info
formatting command that inserts nothing before and a colon after the
argument to <code>@headword</code>.
</para>
<para><samp>@definfoenclose</samp> definitions must not be recursive, directly or
indirectly.
</para>

</section>
</node>
<node>
<nodename>Hardcopy</nodename>
<nodenext>Creating and Installing Info Files</nodenext>
<nodeprev>Defining New Texinfo Commands</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Formatting and Printing Hardcopy</title>
<para><indexterm index="cp">Format and print hardcopy</indexterm><indexterm index="cp">Printing hardcopy</indexterm><indexterm index="cp">Hardcopy, printing it</indexterm><indexterm index="cp">Making a printed manual</indexterm><indexterm index="cp">Sorting indices</indexterm><indexterm index="cp">Indices, sorting</indexterm><indexterm index="cp">&tex; index sorting</indexterm><indexterm index="cp">texindex</indexterm></para>
<para>There are three major shell commands for making a printed manual from a
Texinfo file: one for converting the Texinfo file into a file that will be
printed, a second for sorting indices, and a third for printing the
formatted document.  When you use the shell commands, you can either
work directly in the operating system shell or work within a shell
inside GNU Emacs.
</para>
<para>If you are using GNU Emacs, you can use commands provided by Texinfo
mode instead of shell commands.  In addition to the three commands to
format a file, sort the indices, and print the result, Texinfo mode
offers key bindings for commands to recenter the output buffer, show the
print queue, and delete a job from the print queue.
</para>
<menu>
<menuentry>
<menunode> Use TeX</menunode>
<menutitle> Use TeX</menutitle>
<menucomment>                     Use &tex; to format for hardcopy.
</menucomment>
</menuentry><menuentry>
<menunode> Format with tex/texindex</menunode>
<menutitle> Format with tex/texindex</menutitle>
<menucomment>    How to format with explicit shell commands.
</menucomment>
</menuentry><menuentry>
<menunode> Format with texi2dvi</menunode>
<menutitle> Format with texi2dvi</menutitle>
<menucomment>        A simpler way to format.
</menucomment>
</menuentry><menuentry>
<menunode> Print with lpr</menunode>
<menutitle> Print with lpr</menutitle>
<menucomment>              How to print.
</menucomment>
</menuentry><menuentry>
<menunode> Within Emacs</menunode>
<menutitle> Within Emacs</menutitle>
<menucomment>                How to format and print from an Emacs shell.
</menucomment>
</menuentry><menuentry>
<menunode> Texinfo Mode Printing</menunode>
<menutitle> Texinfo Mode Printing</menutitle>
<menucomment>       How to format and print in Texinfo mode.
</menucomment>
</menuentry><menuentry>
<menunode> Compile-Command</menunode>
<menutitle> Compile-Command</menutitle>
<menucomment>             How to print using Emacs's compile command.
</menucomment>
</menuentry><menuentry>
<menunode> Requirements Summary</menunode>
<menutitle> Requirements Summary</menutitle>
<menucomment>        &tex; formatting requirements summary.
</menucomment>
</menuentry><menuentry>
<menunode> Preparing for TeX</menunode>
<menutitle> Preparing for TeX</menutitle>
<menucomment>           What to do before you use &tex;.
</menucomment>
</menuentry><menuentry>
<menunode> Overfull hboxes</menunode>
<menutitle> Overfull hboxes</menutitle>
<menucomment>             What are and what to do with overfull hboxes.
</menucomment>
</menuentry><menuentry>
<menunode> smallbook</menunode>
<menutitle> smallbook</menutitle>
<menucomment>                   How to print small format books and manuals.
</menucomment>
</menuentry><menuentry>
<menunode> A4 Paper</menunode>
<menutitle> A4 Paper</menutitle>
<menucomment>                    How to print on A4 or A5 paper.
</menucomment>
</menuentry><menuentry>
<menunode> pagesizes</menunode>
<menutitle> pagesizes</menutitle>
<menucomment>                   How to print with customized page sizes.
</menucomment>
</menuentry><menuentry>
<menunode> Cropmarks and Magnification</menunode>
<menutitle> Cropmarks and Magnification</menutitle>
<menucomment>  How to print marks to indicate the size
                                of pages and how to print scaled up output.
</menucomment>
</menuentry><menuentry>
<menunode> PDF Output</menunode>
<menutitle> PDF Output</menutitle>
<menucomment>                  Portable Document Format output.
</menucomment>
</menuentry></menu>

</chapter>
</node>
<node>
<nodename>Use TeX</nodename>
<nodenext>Format with tex/texindex</nodenext>
<nodeup>Hardcopy</nodeup>
<section>
<title>Use &tex;</title>

<para>The typesetting program called &tex; is used for formatting a Texinfo
file.  &tex; is a very powerful typesetting program and, if used correctly,
does an exceptionally good job.  (See <xref><xrefnodename>Obtaining TeX</xrefnodename><xrefprinteddesc>How to Obtain &tex;</xrefprinteddesc></xref>, for information on how to obtain &tex;.)
</para>
<para>The standalone <code>makeinfo</code> program and Emacs functions
<code>texinfo-format-region</code> and <code>texinfo-format-buffer</code> commands
read the very same @-commands in the Texinfo file as does &tex;, but
process them differently to make an Info file (see <xref><xrefnodename>Creating an Info File</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>Format with tex/texindex</nodename>
<nodenext>Format with texi2dvi</nodenext>
<nodeprev>Use TeX</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Format with <code>tex</code> and <code>texindex</code></title>
<para><indexterm index="cp">Shell formatting with <code>tex</code> and <code>texindex</code></indexterm><indexterm index="cp">Formatting with <code>tex</code> and <code>texindex</code></indexterm><indexterm index="cp">DVI file</indexterm></para>
<para>Format the Texinfo file with the shell command <code>tex</code> followed by
the name of the Texinfo file.  For example:
</para>
<example xml:space="preserve">tex foo.texi
</example>
<para>&tex; will produce a <dfn>DVI file</dfn> as well as several auxiliary
files containing information for indices, cross references, etc.  The
DVI file (for <dfn>DeVice Independent</dfn> file) can be printed on virtually
any device (see the following sections).
</para>
<para><indexterm index="cp">texindex</indexterm>The <code>tex</code> formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  (The <code>texi2dvi</code>
command automatically generates indices; see <xref><xrefnodename>Format with texi2dvi</xrefnodename><xrefprinteddesc>Format with <code>texi2dvi</code></xrefprinteddesc></xref>.)  To generate a printed index after
running the <code>tex</code> command, you first need a sorted index to work
from.  The <code>texindex</code> command sorts indices.  (The source file
<file>texindex.c</file> comes as part of the standard Texinfo distribution,
among other places.)
</para>
<para><indexterm index="cp">Names of index files</indexterm><indexterm index="cp">Index file names</indexterm>The <code>tex</code> formatting command outputs unsorted index files under
names that obey a standard convention: the name of your main input file
with any <samp>.tex</samp> (or similar, see <xref><xrefnodename>tex invocation</xrefnodename><xrefinfofile>web2c</xrefinfofile><xrefprintedname>Web2c</xrefprintedname></xref>) extension removed, followed by the two letter names of indices.
For example, the raw index output files for the input file
<file>foo.texinfo</file> would be <file>foo.cp</file>, <file>foo.vr</file>, <file>foo.fn</file>,
<file>foo.tp</file>, <file>foo.pg</file> and <file>foo.ky</file>.  Those are exactly the
arguments to give to <code>texindex</code>.
</para>
<need></need><para><indexterm index="cp">Wildcards</indexterm><indexterm index="cp">Globbing</indexterm>Instead of specifying all the unsorted index file names explicitly, you
can use <samp>??</samp> as shell wildcards and give the command in this
form:
</para>
<example xml:space="preserve">texindex foo.??
</example>
<para>This command will run <code>texindex</code> on all the unsorted index files,
including any that you have defined yourself using <code>@defindex</code>
or <code>@defcodeindex</code>.  (You may execute <samp>texindex foo.??</samp>
even if there are similarly named files with two letter extensions
that are not index files, such as <samp>foo.el</samp>.  The <code>texindex</code>
command reports but otherwise ignores such files.)
</para>
<para>For each file specified, <code>texindex</code> generates a sorted index file
whose name is made by appending <samp>s</samp> to the input file name.  The
<code>@printindex</code> command looks for a file with that name
(see <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>).  <code>texindex</code> does not alter the
raw index output file.
</para>
<para>After you have sorted the indices, you need to rerun the <code>tex</code>
formatting command on the Texinfo file.  This regenerates the DVI file,
this time with up-to-date index entries.
</para>
<para>Finally, you may need to run <code>tex</code> one more time, to get the page
numbers in the cross-references correct.
</para>
<para>To summarize, this is a five step process:
</para>
<enumerate first="1"><item>
<para>Run <code>tex</code> on your Texinfo file.  This generates a DVI file (with
undefined cross-references and no indices), and the raw index files
(with two letter extensions).
</para>
</item>
<item>
<para>Run <code>texindex</code> on the raw index files.  This creates the
corresponding sorted index files (with three letter extensions).
</para>
</item>
<item>
<para>Run <code>tex</code> again on your Texinfo file.  This regenerates the DVI
file, this time with indices and defined cross-references, but with page
numbers for the cross-references from last time, generally incorrect.
</para>
</item>
<item>
<para>Sort the indices again, with <code>texindex</code>.
</para>
</item>
<item>
<para>Run <code>tex</code> one last time.  This time the correct page numbers are
written for the cross-references.
</para></item>
</enumerate>

<para><indexterm index="cp">texi2dvi</indexterm>Alternatively, it's a one-step process: run <code>texi2dvi</code>
(see <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>).
</para>
<para>You need not run <code>texindex</code> each time after you run <code>tex</code>.  If
you do not, on the next run, the <code>tex</code> formatting command will use
whatever sorted index files happen to exist from the previous use of
<code>texindex</code>.  This is usually ok while you are debugging.
</para>
<para><indexterm index="cp">Auxiliary files, avoiding</indexterm><indexterm index="fn">novalidate</indexterm><indexterm index="cp">Pointer validation, suppressing</indexterm><indexterm index="cp">Chapters, formatting one at a time</indexterm>Sometimes you may wish to print a document while you know it is
incomplete, or to print just one chapter of a document.  In that case,
the usual auxiliary files that &tex; creates and warnings &tex; gives
when cross-references are not satisfied are just nuisances.  You can
avoid them with the <code>@novalidate</code> command, which you must give
<emph>before</emph> the <code>@setfilename</code> command
(see <xref><xrefnodename>setfilename</xrefnodename><xrefprinteddesc><code>@setfilename</code></xrefprinteddesc></xref>).  Thus, the beginning of
your file would look approximately like this:
</para>
<example xml:space="preserve">\input texinfo
@novalidate
@setfilename myfile.info
&dots;
</example>
<para><code>@novalidate</code> also turns off validation in
<code>makeinfo</code>, just like its <code>--no-validate</code> option
(see <xref><xrefnodename>Pointer Validation</xrefnodename></xref>).
</para>

</section>
</node>
<node>
<nodename>Format with texi2dvi</nodename>
<nodenext>Print with lpr</nodenext>
<nodeprev>Format with tex/texindex</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Format with <code>texi2dvi</code></title>
<para><indexterm index="cp">texi2dvi <r>(shell script)</r></indexterm></para>
<para>The <code>texi2dvi</code> command automatically runs both <code>tex</code> and
<code>texindex</code> as many times as necessary to produce a DVI file with
sorted indices and all cross-references resolved.  It simplifies the
<code>tex</code>&mdash;<code>texindex</code>&mdash;<code>tex</code>&mdash;<code>tex</code> sequence
described in the previous section.
</para>
<para>To run <code>texi2dvi</code> on an input file <file>foo.texi</file>, do this (where
<samp>prompt$ </samp> is your shell prompt):
</para>
<example xml:space="preserve">prompt$ <kbd>texi2dvi foo.texi</kbd>
</example>
<para>As shown in this example, the input filenames to <code>texi2dvi</code> must
include any extension (<samp>.texi</samp>, <samp>.texinfo</samp>, etc.).  Under
MS-DOS and perhaps in other circumstances, you may need to run <samp>sh
texi2dvi foo.texi</samp> instead of relying on the operating system to invoke
the shell on the <samp>texi2dvi</samp> script.
</para>
<para>Perhaps the most useful option to <code>texi2dvi</code> is
<samp>--texinfo=<var>cmd</var></samp>.  This inserts <var>cmd</var> on a line by itself
after the <code>@setfilename</code> in a temporary copy of the input file
before running &tex;.  With this, you can specify different printing
formats, such as <code>@smallbook</code> (see <xref><xrefnodename>smallbook</xrefnodename></xref>),
<code>@afourpaper</code> (see <xref><xrefnodename>A4 Paper</xrefnodename></xref>), or <code>@pagesizes</code>
(see <xref><xrefnodename>pagesizes</xrefnodename></xref>), without actually changing the document source.
(You can also do this on a site-wide basis with <file>texinfo.cnf</file>;
see <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>).
</para>
<para>For a list of other options, run <samp>texi2dvi --help</samp>.
</para>

</section>
</node>
<node>
<nodename>Print with lpr</nodename>
<nodenext>Within Emacs</nodenext>
<nodeprev>Format with texi2dvi</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Shell Print Using <code>lpr -d</code></title>
<para><indexterm index="cp">lpr <r>(DVI print command)</r></indexterm></para>
<para>The precise command to print a DVI file depends on your system
installation.  Two common ones are <samp>dvips foo.dvi -o</samp> and <samp>lpr
-d foo.dvi</samp>.  
</para>
<para>For example, the following commands will (perhaps) suffice to sort the
indices, format, and print the <cite>Bison Manual</cite>:
</para>
<example xml:space="preserve"><group>
tex bison.texinfo
texindex bison.??
tex bison.texinfo
lpr -d bison.dvi
</group>
</example>
<para>(Remember that the shell commands may be different at your site; but
these are commonly used versions.)
</para>
<para>Using the <code>texi2dvi</code> shell script (see the previous section):
</para>
<example xml:space="preserve"><group>
texi2dvi bison.texinfo
lpr -d bison.dvi
# or perhaps dvips bison.dvi -o
</group>
</example>
<para><indexterm index="cp">Shell printing, on MS-DOS/MS-Windows</indexterm><indexterm index="cp">Printing DVI files, on MS-DOS/MS-Windows</indexterm><indexterm index="cp">lpr<r>-d, replacements on MS-DOS/MS-Windows</r></indexterm><code>lpr</code> is a standard program on Unix systems, but it is usually
absent on MS-DOS/MS-Windows.  Some network packages come with a
program named <code>lpr</code>, but these are usually limited to sending files
to a print server over the network, and generally don't support the
<samp>-d</samp> option.  If you are unfortunate enough to work on one of these
systems, you have several alternative ways of printing DVI files:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item><para> Find and install a Unix-like <code>lpr</code> program, or its clone.
If you can do that, you will be able to print DVI files just like
described above.
</para>
</item>
<item><para> Send the DVI files to a network printer queue for DVI files.
Some network printers have special queues for printing DVI files.  You
should be able to set up your network software to send files to that
queue.  In some cases, the version of <code>lpr</code> which comes with your
network software will have a special option to send a file to specific
queues, like this:
</para>
<example xml:space="preserve">lpr -Qdvi -hprint.server.domain bison.dvi
</example>
</item>
<item><para> Convert the DVI file to a Postscript or PCL file and send it to your
local printer.  See <xref><xrefnodename>dvips invocation</xrefnodename><xrefinfofile>dvips</xrefinfofile><xrefprintedname>Dvips</xrefprintedname></xref>, and the man
pages for <code>dvilj</code>, for detailed description of these tools.  Once
the DVI file is converted to the format your local printer understands
directly, just send it to the appropriate port, usually <samp>PRN</samp>.
</para></item>
</itemize>


</section>
</node>
<node>
<nodename>Within Emacs</nodename>
<nodenext>Texinfo Mode Printing</nodenext>
<nodeprev>Print with lpr</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>From an Emacs Shell</title>
<para><indexterm index="cp">Print, format from Emacs shell</indexterm><indexterm index="cp">Format, print from Emacs shell</indexterm><indexterm index="cp">Shell, format, print from</indexterm><indexterm index="cp">Emacs shell, format, print from</indexterm><indexterm index="cp">GNU Emacs shell, format, print from</indexterm></para>
<para>You can give formatting and printing commands from a shell within GNU
Emacs.  To create a shell within Emacs, type <kbd>M-x shell</kbd>.  In this
shell, you can format and print the document.  See <xref><xrefnodename>Hardcopy</xrefnodename><xrefprinteddesc>Format and Print Hardcopy</xrefprinteddesc></xref>, for details.
</para>
<para>You can switch to and from the shell buffer while <code>tex</code> is
running and do other editing.  If you are formatting a long document
on a slow machine, this can be very convenient.
</para>
<para>You can also use <code>texi2dvi</code> from an Emacs shell.  For example,
here is how to use <code>texi2dvi</code> to format and print <cite>Using and
Porting GNU CC</cite> from a shell within Emacs:
</para>
<example xml:space="preserve"><group>
texi2dvi gcc.texinfo
lpr -d gcc.dvi
</group>
</example>

</section>
</node>
<node>
<nodename>Texinfo Mode Printing</nodename>
<nodenext>Compile-Command</nodenext>
<nodeprev>Within Emacs</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Formatting and Printing in Texinfo Mode</title>
<para><indexterm index="cp">Region printing in Texinfo mode</indexterm><indexterm index="cp">Format and print in Texinfo mode</indexterm><indexterm index="cp">Print and format in Texinfo mode</indexterm></para>
<para>Texinfo mode provides several predefined key commands for &tex;
formatting and printing.  These include commands for sorting indices,
looking at the printer queue, killing the formatting job, and
recentering the display of the buffer in which the operations
occur.
</para>
<table><tableitem><tableterm><kbd>C-c C-t C-b</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-buffer</kbd></tableterm>
<item><para>Run <code>texi2dvi</code> on the current buffer.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-r</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-region</kbd></tableterm>
<item><para>Run &tex; on the current region.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-i</kbd></tableterm>
<tableterm><kbd>M-x texinfo-texindex</kbd></tableterm>
<item><para>Sort the indices of a Texinfo file formatted with
<code>texinfo-tex-region</code>.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-p</kbd></tableterm>
<tableterm><kbd>M-x texinfo-tex-print</kbd></tableterm>
<item><para>Print a DVI file that was made with <code>texinfo-tex-region</code> or
<code>texinfo-tex-buffer</code>.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-q</kbd></tableterm>
<tableterm><kbd>M-x tex-show-print-queue</kbd></tableterm>
<item><para>Show the print queue.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-d</kbd></tableterm>
<tableterm><kbd>M-x texinfo-delete-from-print-queue</kbd></tableterm>
<item><para>Delete a job from the print queue; you will be prompted for the job
number shown by a preceding <kbd>C-c C-t C-q</kbd> command
(<code>texinfo-show-tex-print-queue</code>).
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-k</kbd></tableterm>
<tableterm><kbd>M-x tex-kill-job</kbd></tableterm>
<item><para>Kill the currently running &tex; job started by either
<code>texinfo-tex-region</code> or <code>texinfo-tex-buffer</code>, or any other
process running in the Texinfo shell buffer.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-x</kbd></tableterm>
<tableterm><kbd>M-x texinfo-quit-job</kbd></tableterm>
<item><para>Quit a &tex; formatting job that has stopped because of an error by
sending an <key>x</key> to it.  When you do this, &tex; preserves a record
of what it did in a <file>.log</file> file.
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-t C-l</kbd></tableterm>
<tableterm><kbd>M-x tex-recenter-output-buffer</kbd></tableterm>
<item><para>Redisplay the shell buffer in which the &tex; printing and formatting
commands are run to show its most recent output.
</para></item></tableitem></table>

<need></need><para>Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):
</para>
<example xml:space="preserve"><group>
C-c C-t C-b             <r>Run <code>texi2dvi</code> on the buffer.</r>
C-c C-t C-p             <r>Print the DVI file.</r>
C-c C-t C-q             <r>Display the printer queue.</r>
</group>
</example>
<para>The Texinfo mode &tex; formatting commands start a subshell in Emacs
called the <file>*tex-shell*</file>.  The <code>texinfo-tex-command</code>,
<code>texinfo-texindex-command</code>, and <code>tex-dvi-print-command</code>
commands are all run in this shell.
</para>
<para>You can watch the commands operate in the <samp>*tex-shell*</samp> buffer,
and you can switch to and from and use the <samp>*tex-shell*</samp> buffer
as you would any other shell buffer.
</para>
<need></need><para>The formatting and print commands depend on the values of several variables.
The default values are:
</para>
<example xml:space="preserve"><group>
     <r>Variable</r>                              <r>Default value</r>

texinfo-texi2dvi-command                  &quot;texi2dvi&quot;
texinfo-tex-command                       &quot;tex&quot;
texinfo-texindex-command                  &quot;texindex&quot;
texinfo-delete-from-print-queue-command   &quot;lprm&quot;
texinfo-tex-trailer                       &quot;@bye&quot;
tex-start-of-header                       &quot;%**start&quot;
tex-end-of-header                         &quot;%**end&quot;
tex-dvi-print-command                     &quot;lpr -d&quot;
tex-show-queue-command                    &quot;lpq&quot;
</group>
</example>
<para>You can change the values of these variables with the <kbd>M-x
edit-options</kbd> command (see <xref><xrefnodename>Edit Options</xrefnodename><xrefprinteddesc>Editing Variable Values</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>), with the <kbd>M-x set-variable</kbd> command
(see <xref><xrefnodename>Examining</xrefnodename><xrefprinteddesc>Examining and Setting Variables</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>), or with your <file>.emacs</file> initialization file
(see <xref><xrefnodename>Init File</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>).
</para>
<para><indexterm index="cp">Customize Emacs package (<tt>Development/Docs/Texinfo</tt>)</indexterm>Beginning with version 20, GNU Emacs offers a user-friendly interface,
called <dfn>Customize</dfn>, for changing values of user-definable variables.
See <xref><xrefnodename>Easy Customization</xrefnodename><xrefprinteddesc>Easy Customization Interface</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for more details about this.  The Texinfo variables can
be found in the <samp>Development/Docs/Texinfo</samp> group, once you invoke
the <kbd>M-x customize</kbd> command.
</para>

</section>
</node>
<node>
<nodename>Compile-Command</nodename>
<nodenext>Requirements Summary</nodenext>
<nodeprev>Texinfo Mode Printing</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Using the Local Variables List</title>
<para><indexterm index="cp">Local variables</indexterm><indexterm index="cp">Compile command for formatting</indexterm><indexterm index="cp">Format with the compile command</indexterm></para>
<para>Yet another way to apply the &tex; formatting command to a Texinfo file
is to put that command in a <dfn>local variables list</dfn> at the end of the
Texinfo file.  You can then specify the <code>tex</code> or <code>texi2dvi</code>
commands as a <code>compile-command</code> and have Emacs run it by typing
<kbd>M-x compile</kbd>.  This creates a special shell called the
<file>*compilation*</file> buffer in which Emacs runs the compile command.
For example, at the end of the <file>gdb.texinfo</file> file, after the
<code>@bye</code>, you could put the following:
</para>
<example xml:space="preserve"><group>
Local Variables:
compile-command: &quot;texi2dvi gdb.texinfo&quot;
End:
</group>
</example>
<para>This technique is most often used by programmers who also compile programs
this way; see <xref><xrefnodename>Compilation</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>.
</para>

</section>
</node>
<node>
<nodename>Requirements Summary</nodename>
<nodenext>Preparing for TeX</nodenext>
<nodeprev>Compile-Command</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>&tex; Formatting Requirements Summary</title>
<para><indexterm index="cp">Requirements for formatting</indexterm><indexterm index="cp">Minimal requirements for formatting</indexterm><indexterm index="cp">Formatting requirements</indexterm></para>
<para>Every Texinfo file that is to be input to &tex; must begin with a
<code>\input</code> command and must contain an <code>@setfilename</code> command:
</para>
<example xml:space="preserve">\input texinfo
@setfilename <var>arg-not-used-by-&tex;</var>
</example>
<para>The first command instructs &tex; to load the macros it needs to
process a Texinfo file and the second command opens auxiliary files.
</para>
<para>Every Texinfo file must end with a line that terminates &tex;'s
processing and forces out unfinished pages:
</para>
<example xml:space="preserve">@bye
</example>
<para>Strictly speaking, these lines are all a Texinfo file needs to be
processed successfully by &tex;.
</para>
<para>Usually, however, the beginning includes an <code>@settitle</code> command to
define the title of the printed manual, an <code>@setchapternewpage</code>
command, a title page, a copyright page, and permissions.  Besides an
<code>@bye</code>, the end of a file usually includes indices and a table of
contents.  (And of course most manuals contain a body of text as well.)
</para>
<para>For more information, see:
</para><itemize><itemfunction>&bullet;</itemfunction><item><para> <xref><xrefnodename>settitle</xrefnodename><xrefprinteddesc><code>@settitle</code></xrefprinteddesc></xref>
</para></item>
<item><para> <xref><xrefnodename>setchapternewpage</xrefnodename><xrefprinteddesc><code>@setchapternewpage</code></xrefprinteddesc></xref>
</para></item>
<item><para> <xref><xrefnodename>Headings</xrefnodename><xrefprinteddesc>Page Headings</xrefprinteddesc></xref>
</para></item>
<item><para> <xref><xrefnodename>Titlepage &amp; Copyright Page</xrefnodename></xref>
</para></item>
<item><para> <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>
</para></item>
<item><para> <xref><xrefnodename>Contents</xrefnodename></xref>
</para></item>
</itemize>


</section>
</node>
<node>
<nodename>Preparing for TeX</nodename>
<nodenext>Overfull hboxes</nodenext>
<nodeprev>Requirements Summary</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Preparing for &tex;</title>
<para><indexterm index="cp">Preparing for &tex;</indexterm><indexterm index="cp">&tex; input initialization</indexterm><indexterm index="cp"><code>TEXINPUTS</code> environment variable</indexterm><indexterm index="cp">TEXINPUTS</indexterm><indexterm index="cp"><b>.profile</b> initialization file</indexterm><indexterm index="cp"><b>.cshrc</b> initialization file</indexterm><indexterm index="cp">Initialization file for &tex; input</indexterm></para>
<para>&tex; needs to know where to find the <file>texinfo.tex</file> file that the
<samp>\input texinfo</samp> command on the first line reads.  The
<file>texinfo.tex</file> file tells &tex; how to handle @-commands; it is
included in all standard GNU distributions.
</para>
<para><indexterm index="cp">texinfo.tex<r>, installing</r></indexterm></para>
<para>Usually, the installer has put the <file>texinfo.tex</file> file in the
default directory that contains &tex; macros when GNU Texinfo, Emacs or
other GNU software is installed.  In this case, &tex; will find the
file and you do not need to do anything special.  If this has not been
done, you can put <file>texinfo.tex</file> in the current directory when you
run &tex;, and &tex; will find it there.
</para>
<para><indexterm index="cp">epsf.tex<r>, installing</r></indexterm>Also, you should install <file>epsf.tex</file>, if it is not already installed
from another distribution.  More details are at the end of the description
of the <code>@image</code> command (see <xref><xrefnodename>Images</xrefnodename></xref>).
</para>
<para><indexterm index="cp">pdfcolor.tex<r>, installing</r></indexterm>Likewise for <file>pdfcolor.tex</file>, if it is not already installed and you
use pdftex.
</para>
<para><indexterm index="cp">texinfo.cnf <r>installation</r></indexterm><indexterm index="cp">Customizing of &tex; for Texinfo</indexterm><indexterm index="cp">Site-wide Texinfo configuration file</indexterm>Optionally, you may create an additional <file>texinfo.cnf</file>, and install
it as well.  This file is read by &tex; when the <code>@setfilename</code>
command is executed (see <xref><xrefnodename>setfilename</xrefnodename><xrefprinteddesc><code>@setfilename</code></xrefprinteddesc></xref>).  You can put any
commands you like there, according to local site-wide conventions.  They
will be read by &tex; when processing any Texinfo document.  For
example, if <file>texinfo.cnf</file> contains the line <samp>@afourpaper</samp>
(see <xref><xrefnodename>A4 Paper</xrefnodename></xref>), then all Texinfo documents will be processed with
that page size in effect.  If you have nothing to put in
<file>texinfo.cnf</file>, you do not need to create it.
</para>
<para><indexterm index="cp">TEXINPUTS</indexterm>If neither of the above locations for these system files suffice for
you, you can specify the directories explicitly.  For
<file>texinfo.tex</file>, you can do this by writing the complete path for the
file after the <code>\input</code> command.  Another way, that works for both
<file>texinfo.tex</file> and <file>texinfo.cnf</file> (and any other file &tex;
might read), is to set the <code>TEXINPUTS</code> environment variable in your
<file>.cshrc</file> or <file>.profile</file> file.
</para>
<para>Which you use of <file>.cshrc</file> or <file>.profile</file> depends on
whether you use a Bourne shell-compatible (<code>sh</code>, <code>bash</code>,
<code>ksh</code>, &dots;) or C shell-compatible (<code>csh</code>, <code>tcsh</code>)
command interpreter.  The latter read the <file>.cshrc</file> file for
initialization information, and the former read <file>.profile</file>.
</para>
<para>In a <file>.cshrc</file> file, you could use the following <code>csh</code> command
sequence:
</para>
<example xml:space="preserve">setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros
</example>
<need></need><para>In a <file>.profile</file> file, you could use the following <code>sh</code> command
sequence:
</para>
<example xml:space="preserve"><group>
TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
export TEXINPUTS
</group>
</example>
<para>On MS-DOS/MS-Windows, you would say it like this<footnote><para>Note the use
of the <samp>;</samp> character, instead of <samp>:</samp>, as directory separator
on these systems.
</para></footnote>:
</para>
<example xml:space="preserve"><group>
set TEXINPUTS=.;d:/home/me/mylib;c:/usr/lib/tex/macros
</group>
</example>
<para>It is customary for DOS/Windows users to put such commands in the
<file>autoexec.bat</file> file, or in the Windows Registry.
</para>
<para>These settings would cause &tex; to look for <file>\input</file> file first
in the current directory, indicated by the <samp>.</samp>, then in a
hypothetical user's <file>me/mylib</file> directory, and finally in a system
directory <file>/usr/lib/tex/macros</file>.
</para>
<para><indexterm index="cp">Dumping a .fmt file</indexterm><indexterm index="cp">Format file, dumping</indexterm>Finally, you may wish to dump a <file>.fmt</file> file (see <xref><xrefnodename>Memory dumps</xrefnodename><xrefinfofile>web2c</xrefinfofile><xrefprintedname>Web2c</xrefprintedname></xref>) so that &tex; can load Texinfo faster.  (The
disadvantage is that then updating <file>texinfo.tex</file> requires
redumping.)  You can do this by running this command, assuming
<file>epsf.tex</file> is findable by &tex;:
</para>
<example xml:space="preserve">initex texinfo @dump
</example>
<para>(<code>dump</code> is a &tex; primitive.)  Then, move <file>texinfo.fmt</file> to
wherever your <code>.fmt</code> files are found; typically, this will be in the
subdirectory <file>web2c</file> of your &tex; installation.
</para>

</section>
</node>
<node>
<nodename>Overfull hboxes</nodename>
<nodenext>smallbook</nodenext>
<nodeprev>Preparing for TeX</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Overfull &ldquo;hboxes&rdquo;</title>
<para><indexterm index="cp">Overfull <samp>hboxes</samp></indexterm><indexterm index="cp"><samp>hboxes</samp>, overfull</indexterm><indexterm index="cp">Final output</indexterm></para>
<para>&tex; is sometimes unable to typeset a line without extending it into
the right margin.  This can occur when &tex; comes upon what it
interprets as a long word that it cannot hyphenate, such as an
electronic mail network address or a very long title.  When this
happens, &tex; prints an error message like this:
</para>
<example xml:space="preserve">Overfull @hbox (20.76302pt too wide)
</example>
<para><indexterm index="fn">hbox</indexterm>(In &tex;, lines are in &ldquo;horizontal boxes&rdquo;, hence the term, &ldquo;hbox&rdquo;.
<samp>@hbox</samp> is a &tex; primitive not needed in the Texinfo language.)
</para>
<para>&tex; also provides the line number in the Texinfo source file and
the text of the offending line, which is marked at all the places that
&tex; considered hyphenation.
See <xref><xrefnodename>Debugging with TeX</xrefnodename><xrefprinteddesc>Catching Errors with &tex; Formatting</xrefprinteddesc></xref>,
for more information about typesetting errors.
</para>
<para>If the Texinfo file has an overfull hbox, you can rewrite the sentence
so the overfull hbox does not occur, or you can decide to leave it.  A
small excursion into the right margin often does not matter and may not
even be noticeable.
</para>
<para>If you have many overfull boxes and/or an antipathy to rewriting, you
can coerce &tex; into greatly increasing the allowable interword
spacing, thus (if you're lucky) avoiding many of the bad line breaks,
like this:
</para>
<para><indexterm index="fn">\emergencystretch</indexterm></para><example xml:space="preserve">@tex
\global\emergencystretch = .9\hsize
@end tex
</example>
<para>(You should adjust the fraction as needed.)  This huge value for
<code>\emergencystretch</code> cannot be the default, since then the typeset
output would generally be of noticeably lower quality; the default
is <samp>.15\hsize</samp>.  <code>\hsize</code> is the &tex; dimension
containing the current line width.
</para>
<para><indexterm index="cp">Black rectangle in hardcopy</indexterm><indexterm index="cp">Rectangle, black in hardcopy</indexterm><indexterm index="cp">Box, ugly black in hardcopy</indexterm><indexterm index="cp">Ugly black rectangles in hardcopy</indexterm>For what overfull boxes you have, however, &tex; will print a large,
ugly, black rectangle beside the line that contains the overfull hbox
unless told otherwise.  This is so you will notice the location of the
problem if you are correcting a draft.
</para>
<para><indexterm index="fn">finalout</indexterm>To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the <code>@titlepage</code> command:
</para>
<example xml:space="preserve">@finalout
</example>

</section>
</node>
<node>
<nodename>smallbook</nodename>
<nodenext>A4 Paper</nodenext>
<nodeprev>Overfull hboxes</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Printing &ldquo;Small&rdquo; Books</title>
<para><indexterm index="fn">smallbook</indexterm><indexterm index="cp">Small book size</indexterm><indexterm index="cp">Book, printing small</indexterm><indexterm index="cp">Page sizes for books</indexterm><indexterm index="cp">Size of printed book</indexterm></para>
<para>By default, &tex; typesets pages for printing in an 8.5 by 11 inch
format.  However, you can direct &tex; to typeset a document in a 7 by
9.25 inch format that is suitable for bound books by inserting the
following command on a line by itself at the beginning of the Texinfo
file, before the title page:
</para>
<example xml:space="preserve">@smallbook
</example>
<para>(Since many books are about 7 by 9.25 inches, this command might better
have been called the <code>@regularbooksize</code> command, but it came to be
called the <code>@smallbook</code> command by comparison to the 8.5 by 11 inch format.)
</para>
<para>If you write the <code>@smallbook</code> command between the
start-of-header and end-of-header lines, the Texinfo mode &tex;
region formatting command, <code>texinfo-tex-region</code>, will format the
region in &ldquo;small&rdquo; book size (see <xref><xrefnodename>Start of Header</xrefnodename></xref>).
</para>
<para>See <xref><xrefnodename>small</xrefnodename></xref>, for information about
commands that make it easier to produce examples for a smaller manual.
</para>
<para>See <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>, and <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>, for other ways to format with <code>@smallbook</code> that do not
require changing the source file.
</para>

</section>
</node>
<node>
<nodename>A4 Paper</nodename>
<nodenext>pagesizes</nodenext>
<nodeprev>smallbook</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Printing on A4 Paper</title>
<para><indexterm index="cp">A4 paper, printing on</indexterm><indexterm index="cp">A5 paper, printing on</indexterm><indexterm index="cp">Paper size, A4</indexterm><indexterm index="cp">European A4 paper</indexterm><indexterm index="fn">afourpaper</indexterm></para>
<para>You can tell &tex; to format a document for printing on European size
A4 paper (or A5) with the <code>@afourpaper</code> (or <code>@afivepaper</code>)
command.  Write the command on a line by itself near the beginning of
the Texinfo file, before the title page.  For example, this is how you
would write the header for this manual:
</para>
<example xml:space="preserve"><group>
\input texinfo    @c -*-texinfo-*-
@c %**start of header
@setfilename texinfo
@settitle Texinfo
@afourpaper
@c %**end of header
</group>
</example>
<para>See <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>, and <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>, for other ways to format for different paper sizes that do not
require changing the source file.
</para>
<para><indexterm index="fn">afourlatex</indexterm><indexterm index="fn">afourwide</indexterm>You may or may not prefer the formatting that results from the command
<code>@afourlatex</code>.  There's also <code>@afourwide</code> for A4 paper in
wide format.
</para>
</section>
</node>
<node>
<nodename>pagesizes</nodename>
<nodenext>Cropmarks and Magnification</nodenext>
<nodeprev>A4 Paper</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title><code>@pagesizes</code> [<var>width</var>][, <var>height</var>]: Custom page sizes</title>
<para><indexterm index="fn">pagesizes</indexterm><indexterm index="cp">Custom page sizes</indexterm><indexterm index="cp">Page sizes, customized</indexterm><indexterm index="cp">Text width and height</indexterm><indexterm index="cp">Width of text area</indexterm><indexterm index="cp">Height of text area</indexterm><indexterm index="cp">Depth of text area</indexterm></para>
<para>You can explicitly specify the height and (optionally) width of the main
text area on the page with the <code>@pagesizes</code> command.  Write this
on a line by itself near the beginning of the Texinfo file, before the
title page.  The height comes first, then the width if desired,
separated by a comma.  Examples:
</para>
<example xml:space="preserve">@pagesizes 200mm,150mm  <!-- for b5 paper -->
</example><para>and
</para><example xml:space="preserve">@pagesizes 11.5in      <!-- for legal paper -->
</example>
<para><indexterm index="cp">B5 paper, printing on</indexterm><indexterm index="cp">Legal paper, printing on</indexterm>This would be reasonable for printing on B5-size paper.  To emphasize,
this command specifies the size of the <emph>text area</emph>, not the size of
the paper (which is 250<dmn>mm</dmn> by 177<dmn>mm</dmn> for B5, 14<dmn>in</dmn> by
8.5<dmn>in</dmn> for legal).
</para>
<para><indexterm index="cp">Margins on page, not controllable</indexterm>To make more elaborate changes, such as changing any of the page
margins, you must define a new command in <file>texinfo.tex</file> (or
<file>texinfo.cnf</file>, see <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>).
</para>
<para>See <xref><xrefnodename>Format with texi2dvi</xrefnodename></xref>, and <xref><xrefnodename>Preparing for TeX</xrefnodename><xrefprinteddesc>Preparing for &tex;</xrefprinteddesc></xref>, for other ways to specify <code>@pagesizes</code> that do not
require changing the source file.
</para>
<para><code>@pagesizes</code> is ignored by <code>makeinfo</code>.
</para>

</section>
</node>
<node>
<nodename>Cropmarks and Magnification</nodename>
<nodenext>PDF Output</nodenext>
<nodeprev>pagesizes</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>Cropmarks and Magnification</title>
<para><indexterm index="fn">cropmarks</indexterm><indexterm index="cp">Cropmarks for printing</indexterm><indexterm index="cp">Printing cropmarks</indexterm>You can (attempt to) direct &tex; to print cropmarks at the corners of
pages with the <code>@cropmarks</code> command.  Write the <code>@cropmarks</code>
command on a line by itself between <code>@iftex</code> and <code>@end
iftex</code> lines near the beginning of the Texinfo file, before the title
page, like this:
</para>
<example xml:space="preserve"><group>
@iftex
@cropmarks
@end iftex
</group>
</example>
<para>This command is mainly for printers that typeset several pages on one
sheet of film; but you can attempt to use it to mark the corners of a
book set to 7 by 9.25 inches with the <code>@smallbook</code> command.
(Printers will not produce cropmarks for regular sized output that is
printed on regular sized paper.)  Since different printing machines work
in different ways, you should explore the use of this command with a
spirit of adventure.  You may have to redefine the command in
<file>texinfo.tex</file>.
</para>
<para><indexterm index="fn">\mag <r>(raw &tex; magnification)</r></indexterm><indexterm index="cp">Magnified printing</indexterm><indexterm index="cp">Larger or smaller pages</indexterm>You can attempt to direct &tex; to typeset pages larger or smaller than
usual with the <code>\mag</code> &tex; command.  Everything that is typeset
is scaled proportionally larger or smaller.  (<code>\mag</code> stands for
&ldquo;magnification&rdquo;.)  This is <emph>not</emph> a Texinfo @-command, but is a
plain &tex; command that is prefixed with a backslash.  You have to
write this command between <code>@tex</code> and <code>@end tex</code>
(see <xref><xrefnodename>Raw Formatter Commands</xrefnodename></xref>).
</para>
<para>Follow the <code>\mag</code> command with an <samp>=</samp> and then a number that
is 1000 times the magnification you desire.  For example, to print pages
at 1.2 normal size, write the following near the beginning of the
Texinfo file, before the title page:
</para>
<example xml:space="preserve"><group>
@tex
\mag=1200
@end tex
</group>
</example>
<para>With some printing technologies, you can print normal-sized copies that
look better than usual by giving a larger-than-normal master to your
print shop.  They do the reduction, thus effectively increasing the
resolution.
</para>
<para>Depending on your system, DVI files prepared with a
nonstandard-<code>\mag</code> may not print or may print only with certain
magnifications.  Be prepared to experiment.
</para>

</section>
</node>
<node>
<nodename>PDF Output</nodename>
<nodeprev>Cropmarks and Magnification</nodeprev>
<nodeup>Hardcopy</nodeup>
<section>
<title>PDF Output</title>
<para><indexterm index="cp">PDF output</indexterm></para>
<para><indexterm index="cp">pdftex</indexterm>You can generate a PDF output file from Texinfo source by using the
<command>pdftex</command> program to process your file instead of plain
<command>tex</command>.  Just run <samp>pdftex foo.texi</samp> instead of <samp>tex
foo.texi</samp>, or give the <samp>--pdf</samp> option to <command>texi2dvi</command>.
</para>
<para><dfn>PDF</dfn> stands for `Portable Document Format'. It was invented by
Adobe Systems some years ago for document interchange, based on their
PostScript language.  A <uref><urefurl>http://www.foolabs.com/xpdf/</urefurl><urefdesc>PDF reader</urefdesc></uref>
for the X window system is freely available, as is the
<uref><urefurl>http://partners.adobe.com/asn/developer/technotes/</urefurl><urefdesc>definition of the file format</urefdesc></uref>.  Since PDF is a binary format, there are no
<samp>@ifpdf</samp> or <samp>@pdf</samp> commands as with the other output
formats.
</para>
<para>Despite the `portable' in the name, PDF files are nowhere near as
portable in practice as the plain ASCII formats (Info, HTML) that
Texinfo supports (DVI portability is arguable).  They also tend to be
much larger and do not support the bitmap fonts used by &tex; (by
default) very well.  Nevertheless, a PDF file does preserve an actual
printed document on a screen as faithfully as possible, so it has its place.
</para>
<para>PDF support in Texinfo is fairly rudimentary.
</para>

</section>
</node>
<node>
<nodename>Creating and Installing Info Files</nodename>
<nodenext>Command List</nodenext>
<nodeprev>Hardcopy</nodeprev>
<nodeup>Top</nodeup>
<chapter>
<title>Creating and Installing Info Files</title>

<para>This chapter describes how to create and install Info files.  See <xref><xrefnodename>Info Files</xrefnodename></xref>, for general information about the file format itself.
</para>
<menu>
<menuentry>
<menunode> Creating an Info File</menunode>
<menutitle> Creating an Info File</menutitle>
<menucomment>       
</menucomment>
</menuentry><menuentry>
<menunode> Installing an Info File</menunode>
<menutitle> Installing an Info File</menutitle>
<menucomment>     
</menucomment>
</menuentry></menu>


</chapter>
</node>
<node>
<nodename>Creating an Info File</nodename>
<nodenext>Installing an Info File</nodenext>
<nodeup>Creating and Installing Info Files</nodeup>
<section>
<title>Creating an Info File</title>
<para><indexterm index="cp">Creating an Info file</indexterm><indexterm index="cp">Info, creating an online file</indexterm><indexterm index="cp">Formatting a file for Info</indexterm></para>
<para><code>makeinfo</code> is a program that converts a Texinfo file into an Info
file, HTML file, or plain text.  <code>texinfo-format-region</code> and
<code>texinfo-format-buffer</code> are GNU Emacs functions that convert
Texinfo to Info.
</para>
<para>For information on installing the Info file in the Info system,
see <xref><xrefnodename>Installing an Info File</xrefnodename></xref>.
</para>
<menu>
<menuentry>
<menunode> makeinfo advantages</menunode>
<menutitle> makeinfo advantages</menutitle>
<menucomment>         <code>makeinfo</code> provides better error checking.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking makeinfo</menunode>
<menutitle> Invoking makeinfo</menutitle>
<menucomment>           How to run <code>makeinfo</code> from a shell.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo options</menunode>
<menutitle> makeinfo options</menutitle>
<menucomment>            Specify fill-column and other options.
</menucomment>
</menuentry><menuentry>
<menunode> Pointer Validation</menunode>
<menutitle> Pointer Validation</menutitle>
<menucomment>          How to check that pointers point somewhere.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo in Emacs</menunode>
<menutitle> makeinfo in Emacs</menutitle>
<menucomment>           How to run <code>makeinfo</code> from Emacs.
</menucomment>
</menuentry><menuentry>
<menunode> texinfo-format commands</menunode>
<menutitle> texinfo-format commands</menutitle>
<menucomment>     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to <code>makeinfo</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Batch Formatting</menunode>
<menutitle> Batch Formatting</menutitle>
<menucomment>            How to format for Info in Emacs Batch mode.
</menucomment>
</menuentry><menuentry>
<menunode> Tag and Split Files</menunode>
<menutitle> Tag and Split Files</menutitle>
<menucomment>         How tagged and split files help Info
                                  to run better.
</menucomment>
</menuentry><menuentry>
<menunode> makeinfo html</menunode>
<menutitle> makeinfo html</menutitle>
<menucomment>               Generating HTML output.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>makeinfo advantages</nodename>
<nodenext>Invoking makeinfo</nodenext>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title><code>makeinfo</code> Preferred</title>

<para>The <code>makeinfo</code> utility creates an Info file from a Texinfo source
file more quickly than either of the Emacs formatting commands and
provides better error messages.  We recommend it.  <code>makeinfo</code> is a
C program that is independent of Emacs.  You do not need to run Emacs to
use <code>makeinfo</code>, which means you can use <code>makeinfo</code> on machines
that are too small to run Emacs.  You can run <code>makeinfo</code> in any one
of three ways: from an operating system shell, from a shell inside
Emacs, or by typing the <kbd>C-c C-m C-r</kbd> or the <kbd>C-c C-m C-b</kbd>
command in Texinfo mode in Emacs.
</para>

<para>The <code>texinfo-format-region</code> and the <code>texinfo-format-buffer</code>
commands are useful if you cannot run <code>makeinfo</code>.  Also, in some
circumstances, they format short regions or buffers more quickly than
<code>makeinfo</code>.
</para>
</subsection>
</node>
<node>
<nodename>Invoking makeinfo</nodename>
<nodenext>makeinfo options</nodenext>
<nodeprev>makeinfo advantages</nodeprev>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title>Running <code>makeinfo</code> from a Shell</title>

<para>To create an Info file from a Texinfo file, type <code>makeinfo</code>
followed by the name of the Texinfo file.  Thus, to create the Info
file for Bison, type the following to the shell:
</para>
<example xml:space="preserve">makeinfo bison.texinfo
</example>
<para>(You can run a shell inside Emacs by typing <kbd>M-x shell</kbd>.)
</para>


</subsection>
</node>
<node>
<nodename>makeinfo options</nodename>
<nodenext>Pointer Validation</nodenext>
<nodeprev>Invoking makeinfo</nodeprev>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title>Options for <code>makeinfo</code></title>
<para><indexterm index="cp"><code>makeinfo</code> options</indexterm><indexterm index="cp">Options for <code>makeinfo</code></indexterm></para>
<para>The <code>makeinfo</code> command takes a number of options.  Most often,
options are used to set the value of the fill column and specify the
footnote style.  Each command line option is a word preceded by
<samp>--</samp> or a letter preceded by <samp>-</samp>.  You can use abbreviations
for the long option names as long as they are unique.
</para>
<para>For example, you could use the following shell command to create an Info
file for <file>bison.texinfo</file> in which each line is filled to only 68
columns:
</para>
<example xml:space="preserve">makeinfo --fill-column=68 bison.texinfo
</example>
<para>You can write two or more options in sequence, like this:
</para>
<example xml:space="preserve">makeinfo --no-split --fill-column=70 &dots;
</example>
<para>This would keep the Info file together as one possibly very long
file and would also set the fill column to 70.
</para>
<para>The options are:
</para>
<table><tableitem><tableterm><code>-D <var>var</var></code></tableterm>
<item><para><indexterm index="cp">-D <var>var</var></indexterm>Cause the variable <var>var</var> to be defined.  This is equivalent to
<code>@set <var>var</var></code> in the Texinfo file (see <xref><xrefnodename>set clear value</xrefnodename></xref>).
</para>
</item></tableitem><tableitem><tableterm><code>--commands-in-node-names</code></tableterm>
<item><para><indexterm index="cp">&ndash;commands-in-node-names</indexterm>Allow <code>@</code>-commands in node names.  This is not recommended, as it
can probably never be implemented in &tex;.  It also makes
<code>makeinfo</code> much slower.  Also, this option is ignored when
<samp>--no-validate</samp> is used.  See <xref><xrefnodename>Pointer Validation</xrefnodename></xref>, for more
details.
</para>
</item></tableitem><tableitem><tableterm><code>--docbook</code></tableterm>
<item><para><indexterm index="cp">&ndash;docbook</indexterm>Generate DocBook output rather than Info.  
</para>
</item></tableitem><tableitem><tableterm><code>--error-limit=<var>limit</var></code></tableterm>
<tableterm><code>-e <var>limit</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;error-limit=<var>limit</var></indexterm><indexterm index="cp">-e <var>limit</var></indexterm>Set the maximum number of errors that <code>makeinfo</code> will report
before exiting (on the assumption that continuing would be useless);
default 100.
</para>
</item></tableitem><tableitem><tableterm><code>--fill-column=<var>width</var></code></tableterm>
<tableterm><code>-f <var>width</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;fill-column=<var>width</var></indexterm><indexterm index="cp">-f <var>width</var></indexterm>Specify the maximum number of columns in a line; this is the right-hand
edge of a line.  Paragraphs that are filled will be filled to this
width.  (Filling is the process of breaking up and connecting lines so
that lines are the same length as or shorter than the number specified
as the fill column.  Lines are broken between words.) The default value
is 72.  Ignored with <samp>--html</samp>.
</para>
</item></tableitem><tableitem><tableterm><code>--footnote-style=<var>style</var></code></tableterm>
<tableterm><code>-s <var>style</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;footnote-style=<var>style</var></indexterm><indexterm index="cp">-s <var>style</var></indexterm>Set the footnote style to <var>style</var>, either <samp>end</samp> for the end
node style (the default) or <samp>separate</samp> for the separate node style.
The value set by this option overrides the value set in a Texinfo file
by an <code>@footnotestyle</code> command (see <xref><xrefnodename>Footnotes</xrefnodename></xref>).  When the
footnote style is <samp>separate</samp>, <code>makeinfo</code> makes a new node
containing the footnotes found in the current node.  When the footnote
style is <samp>end</samp>, <code>makeinfo</code> places the footnote references at
the end of the current node.  Ignored with <samp>--html</samp>.
</para>
</item></tableitem><tableitem><tableterm><code>--force</code></tableterm>
<tableterm><code>-F</code></tableterm>
<item><para><indexterm index="cp">&ndash;force</indexterm><indexterm index="cp">-F</indexterm>Ordinarily, if the input file has errors, the output files are not
created.  With this option, they are preserved.
</para>
</item></tableitem><tableitem><tableterm><code>--help</code></tableterm>
<tableterm><code>-h</code></tableterm>
<item><para><indexterm index="cp">&ndash;help</indexterm><indexterm index="cp">-h</indexterm>Print a usage message listing all available options, then exit successfully.
</para>
</item></tableitem><tableitem><tableterm><code>--html</code></tableterm>
<item><para><indexterm index="cp">&ndash;html</indexterm>Generate HTML output rather than Info.  See <xref><xrefnodename>makeinfo html</xrefnodename></xref>.  By
default, the HTML output is split into one output file per source node,
and the split output is written into a subdirectory with the name of the
top-level info file.
</para>
</item></tableitem><tableitem><tableterm><code>-I <var>dir</var></code></tableterm>
<item><para><indexterm index="cp">-I <var>dir</var></indexterm>Append <var>dir</var> to the directory search list for finding files that
are included using the <code>@include</code> command.  By default,
<code>makeinfo</code> searches only the current directory.  If <var>dir</var> is
not given, the current directory <file>.</file> is appended.  Note that
<var>dir</var> can actually be a list of several directories separated by the
usual path separator character (<samp>:</samp> on Unix, <samp>;</samp> on
MS-DOS/MS-Windows).
</para>
</item></tableitem><tableitem><tableterm><code>--macro-expand=<var>file</var></code></tableterm>
<tableterm><code>-E <var>file</var></code></tableterm>
<item><para>Output the Texinfo source with all the macros expanded to the named
file.  Normally, the results of macro expansion are used internally by
<code>makeinfo</code> and then discarded.  This option is used by
<command>texi2dvi</command> if you are using an old version of <file>texinfo.tex</file>
that does not support <code>@macro</code>.
</para>
</item></tableitem><tableitem><tableterm><code>--no-headers</code></tableterm>
<item><para><indexterm index="cp">&ndash;no-headers</indexterm><indexterm index="cp">Plain text output</indexterm><indexterm index="cp">ASCII text output</indexterm><indexterm index="cp">Generating plain text files</indexterm><indexterm index="cp"><file>INSTALL</file> file, generating</indexterm><indexterm index="cp">Node separators, omitting</indexterm><indexterm index="cp">Menus, omitting</indexterm>For Info output, do not include menus or node separator lines in the
output.  This results in a simple plain text file that you can (for
example) send in email without complications, or include in a
distribution (as in an <file>INSTALL</file> file).
</para>
<para><indexterm index="cp">Navigation links, omitting</indexterm>For HTML output, likewise omit menus.  And if <samp>--no-split</samp> is also
specified, do not include a navigation links at the top of each node
(these are never included in the default case of split output).
See <xref><xrefnodename>makeinfo html</xrefnodename></xref>.
</para>
<para>In both cases, write to standard output by default (can still be
overridden by <option>-o</option>).
</para>
</item></tableitem><tableitem><tableterm><code>--no-split</code></tableterm>
<item><para><indexterm index="cp">&ndash;no-split</indexterm><indexterm index="cp">Splitting of output files</indexterm><indexterm index="cp">Output file splitting</indexterm>Suppress the splitting stage of <code>makeinfo</code>.  By default, large
output files (where the size is greater than 70k bytes) are split into
smaller subfiles.  For Info output, each one is approximately 50k bytes.
For HTML output, each file contains one node (see <xref><xrefnodename>makeinfo html</xrefnodename></xref>).
</para>
</item></tableitem><tableitem><tableterm><code>--no-pointer-validate</code></tableterm>
<tableterm><code>--no-validate</code></tableterm>
<item><para><indexterm index="cp">&ndash;no-pointer-validate</indexterm><indexterm index="cp">&ndash;no-validate</indexterm><indexterm index="cp">Pointer validation, suppressing</indexterm>Suppress the pointer-validation phase of <code>makeinfo</code>.  This can also
be done with the <code>@novalidate</code> command (see <xref><xrefnodename>Use TeX</xrefnodename><xrefprinteddesc>Use &tex;</xrefprinteddesc></xref>).  Normally, after a Texinfo file is processed, some consistency
checks are made to ensure that cross references can be resolved, etc.
See <xref><xrefnodename>Pointer Validation</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>--no-warn</code></tableterm>
<item><para><indexterm index="cp">&ndash;no-warn</indexterm>Suppress warning messages (but <emph>not</emph> error messages).  You might
want this if the file you are creating has examples of Texinfo cross
references within it, and the nodes that are referenced do not actually
exist.
</para>
</item></tableitem><tableitem><tableterm><code>--number-sections</code></tableterm>
<item><para><indexterm index="cp">&ndash;number-sections</indexterm>Output chapter, section, and appendix numbers as in printed manuals.
</para>
</item></tableitem><tableitem><tableterm><code>--no-number-footnotes</code></tableterm>
<item><para><indexterm index="cp">&ndash;no-number-footnotes</indexterm>Suppress automatic footnote numbering.  By default, <code>makeinfo</code>
numbers each footnote sequentially in a single node, resetting the
current footnote number to 1 at the start of each node.
</para>
</item></tableitem><tableitem><tableterm><code>--output=<var>file</var></code></tableterm>
<tableterm><code>-o <var>file</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;output=<var>file</var></indexterm><indexterm index="cp">-o <var>file</var></indexterm>Specify that the output should be directed to <var>file</var> and not to the
file name specified in the <code>@setfilename</code> command found in the
Texinfo source (see <xref><xrefnodename>setfilename</xrefnodename></xref>).  If <var>file</var> is <samp>-</samp>, output
goes to standard output and <samp>--no-split</samp> is implied.  For split
HTML output, <var>file</var> is the name for the directory into which all
HTML nodes are written (see <xref><xrefnodename>makeinfo html</xrefnodename></xref>).
</para>
</item></tableitem><tableitem><tableterm><code>-P <var>dir</var></code></tableterm>
<item><para><indexterm index="cp">-P <var>dir</var></indexterm>Prepend <var>dir</var> to the directory search list for <code>@include</code>.
If <var>dir</var> is not given, the current directory <file>.</file> is prepended.
See <samp>-I</samp> for more details.
</para>
</item></tableitem><tableitem><tableterm><code>--paragraph-indent=<var>indent</var></code></tableterm>
<tableterm><code>-p <var>indent</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;paragraph-indent=<var>indent</var></indexterm><indexterm index="cp">-p <var>indent</var></indexterm>Set the paragraph indentation style to <var>indent</var>.  The value set by
this option overrides the value set in a Texinfo file by an
<code>@paragraphindent</code> command (see <xref><xrefnodename>paragraphindent</xrefnodename></xref>).  The value
of <var>indent</var> is interpreted as follows:
</para>
<table><tableitem><tableterm><samp>asis</samp></tableterm>
<item><para>Preserve any existing indentation at the starts of paragraphs.
</para>
</item></tableitem><tableitem><tableterm><samp>0</samp> or <samp>none</samp></tableterm>
<item><para>Delete any existing indentation.
</para>
</item></tableitem><tableitem><tableterm><var>num</var></tableterm>
<item><para>Indent each paragraph by <var>num</var> spaces.
</para></item></tableitem></table>

</item></tableitem><tableitem><tableterm><code>--reference-limit=<var>limit</var></code></tableterm>
<tableterm><code>-r <var>limit</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;reference-limit=<var>limit</var></indexterm><indexterm index="cp">-r <var>limit</var></indexterm>Set the value of the number of references to a node that
<code>makeinfo</code> will make without reporting a warning.  If a node has more
than this number of references in it, <code>makeinfo</code> will make the
references but also report a warning.  The default is 1000.
</para>
</item></tableitem><tableitem><tableterm><code>-U <var>var</var></code></tableterm>
<item><para>Cause <var>var</var> to be undefined.  This is equivalent to
<code>@clear <var>var</var></code> in the Texinfo file (see <xref><xrefnodename>set clear value</xrefnodename></xref>).
</para>
</item></tableitem><tableitem><tableterm><code>--verbose</code></tableterm>
<item><para><indexterm index="cp">&ndash;verbose</indexterm>Cause <code>makeinfo</code> to display messages saying what it is doing.
Normally, <code>makeinfo</code> only outputs messages if there are errors or
warnings.
</para>
</item></tableitem><tableitem><tableterm><code>--version</code></tableterm>
<tableterm><code>-V</code></tableterm>
<item><para><indexterm index="cp">&ndash;version</indexterm><indexterm index="cp">-V</indexterm>Print the version number, then exit successfully.
</para>
</item></tableitem><tableitem><tableterm><code>--xml</code></tableterm>
<item><para><indexterm index="cp">&ndash;xml</indexterm>Generate XML output rather than Info.  
</para>
</item></tableitem></table>


</subsection>
</node>
<node>
<nodename>Pointer Validation</nodename>
<nodenext>makeinfo in Emacs</nodenext>
<nodeprev>makeinfo options</nodeprev>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title>Pointer Validation</title>
<para><indexterm index="cp">Pointer validation with <code>makeinfo</code></indexterm><indexterm index="cp">Validation of pointers</indexterm></para>
<para>If you do not suppress pointer validation with the <samp>--no-validate</samp>
option or the <code>@novalidate</code> command in the source file (see <xref><xrefnodename>Use TeX</xrefnodename><xrefprinteddesc>Use &tex;</xrefprinteddesc></xref>), <code>makeinfo</code> will check the validity of the final
Info file.  Mostly, this means ensuring that nodes you have referenced
really exist.  Here is a complete list of what is checked:
</para>
<enumerate first="1"><item>
<para>If a `Next', `Previous', or `Up' node reference is a reference to a
node in the current file and is not an external reference such as to
<file>(dir)</file>, then the referenced node must exist.
</para>
</item>
<item>
<para>In every node, if the `Previous' node is different from the `Up' node,
then the node pointed to by the `Previous' field must have a `Next'
field which points back to this node.
</para>
</item>
<item>
<para>Every node except the `Top' node must have an `Up' pointer.
</para>
</item>
<item>
<para>The node referenced by an `Up' pointer must itself reference the current
node through a menu item, unless the node referenced by `Up'
has the form `(<var>file</var>)'.
</para>
</item>
<item>
<para>If the `Next' reference of a node is not the same as the `Next' reference
of the `Up' reference, then the node referenced by the `Next' pointer
must have a `Previous' pointer that points back to the current node.
This rule allows the last node in a section to point to the first node
of the next chapter.
</para>
</item>
<item>
<para>Every node except `Top' should be referenced by at least one other node,
either via the `Previous' or `Next' links, or via a menu or a
cross-reference.
</para></item>
</enumerate>

<para><indexterm index="cp">@-commands in @node, limited support</indexterm>Some Texinfo documents might fail during the validation phase because
they use commands like <code>@value</code> and <code>@definfoenclose</code> in
node definitions and cross-references inconsistently.  Consider the
following example:
</para>
<example xml:space="preserve"><group>
@set nodename Node 1

@node @value{nodename}, Node 2, Top, Top

This is node 1.

@node Node 2, , Node 1, Top

This is node 2.
</group>
</example>
<para>Here, the node &ldquo;Node 1&rdquo; was referenced both verbatim and through
<code>@value</code>.
</para>
<para>By default, <code>makeinfo</code> fails such cases, because node names are not
fully expanded until they are written to the output file.  You should
always try to reference nodes consistently; e.g., in the above example,
the second <code>@node</code> line should have also used <code>@value</code>.
However, if, for some reason, you <emph>must</emph> reference node names
inconsistently, and <code>makeinfo</code> fails to validate the file, you can
use the <samp>--commands-in-node-names</samp> option to force <code>makeinfo</code>
to perform the expensive expansion of all node names it finds in the
document.  This might considerably slow down the program, though;
twofold increase in conversion time was measured for large documents
such as the Jargon file.
</para>
<para><indexterm index="cp">@value in @node lines</indexterm>The support for <code>@</code>-commands in <code>@node</code> directives is not
general enough to be freely used.  For example, if the example above
redefined <code>nodename</code> somewhere in the document, <code>makeinfo</code>
will fail to convert it, even if invoked with the
<samp>--commands-in-node-names</samp> option.
</para>
<para><samp>--commands-in-node-names</samp> has no effect if the <samp>--no-validate</samp>
option is given.
</para>

</subsection>
</node>
<node>
<nodename>makeinfo in Emacs</nodename>
<nodenext>texinfo-format commands</nodenext>
<nodeprev>Pointer Validation</nodeprev>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title>Running <code>makeinfo</code> inside Emacs</title>
<para><indexterm index="cp">Running <code>makeinfo</code> in Emacs</indexterm><indexterm index="cp"><code>makeinfo</code> inside Emacs</indexterm><indexterm index="cp">Shell, running <code>makeinfo</code> in</indexterm></para>
<para>You can run <code>makeinfo</code> in GNU Emacs Texinfo mode by using either the
<code>makeinfo-region</code> or the <code>makeinfo-buffer</code> commands.  In
Texinfo mode, the commands are bound to <kbd>C-c C-m C-r</kbd> and <kbd>C-c
C-m C-b</kbd> by default.
</para>
<table><tableitem><tableterm><kbd>C-c C-m C-r</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-region</kbd></tableterm>
<item><para>Format the current region for Info.
<indexterm index="fn">makeinfo-region</indexterm></para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-m C-b</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-buffer</kbd></tableterm>
<item><para>Format the current buffer for Info.
<indexterm index="fn">makeinfo-buffer</indexterm></para></item></tableitem></table>

<para>When you invoke either <code>makeinfo-region</code> or
<code>makeinfo-buffer</code>, Emacs prompts for a file name, offering the
name of the visited file as the default.  You can edit the default
file name in the minibuffer if you wish, before pressing <key>RET</key> to
start the <code>makeinfo</code> process.
</para>
<para>The Emacs <code>makeinfo-region</code> and <code>makeinfo-buffer</code> commands
run the <code>makeinfo</code> program in a temporary shell buffer.  If
<code>makeinfo</code> finds any errors, Emacs displays the error messages in
the temporary buffer.
</para>
<para><indexterm index="cp">Errors, parsing</indexterm><indexterm index="cp">Parsing errors</indexterm><indexterm index="fn">next-error</indexterm>You can parse the error messages by typing <kbd>C-x `</kbd>
(<code>next-error</code>).  This causes Emacs to go to and position the
cursor on the line in the Texinfo source that <code>makeinfo</code> thinks
caused the error.  See <xref><xrefnodename>Compilation</xrefnodename><xrefprinteddesc>Running <code>make</code> or Compilers Generally</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for more
information about using the <code>next-error</code> command.
</para>
<para>In addition, you can kill the shell in which the <code>makeinfo</code>
command is running or make the shell buffer display its most recent
output.
</para>
<table><tableitem><tableterm><kbd>C-c C-m C-k</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-kill-job</kbd></tableterm>
<item><para><indexterm index="fn">makeinfo-kill-job</indexterm>Kill the current running <code>makeinfo</code> job
(from <code>makeinfo-region</code> or <code>makeinfo-buffer</code>).
</para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-m C-l</kbd></tableterm>
<tableterm><kbd>M-x makeinfo-recenter-output-buffer</kbd></tableterm>
<item><para><indexterm index="fn">makeinfo-recenter-output-buffer</indexterm>Redisplay the <code>makeinfo</code> shell buffer to display its most recent
output.
</para></item></tableitem></table>

<para>(Note that the parallel commands for killing and recentering a &tex;
job are <kbd>C-c C-t C-k</kbd> and <kbd>C-c C-t C-l</kbd>.  See <xref><xrefnodename>Texinfo Mode Printing</xrefnodename></xref>.)
</para>
<para>You can specify options for <code>makeinfo</code> by setting the
<code>makeinfo-options</code> variable with either the <kbd>M-x
edit-options</kbd> or the <kbd>M-x set-variable</kbd> command, or by setting the
variable in your <file>.emacs</file> initialization file.
</para>
<para>For example, you could write the following in your <file>.emacs</file> file:
</para>
<example xml:space="preserve"><group>
(setq makeinfo-options
      &quot;--paragraph-indent=0 --no-split
       --fill-column=70 --verbose&quot;)
</group>
</example>
<!-- If you write these three cross references using xref, you see -->
<!-- three references to the same named manual, which looks strange. -->

</subsection>
</node>
<node>
<nodename>texinfo-format commands</nodename>
<nodenext>Batch Formatting</nodenext>
<nodeprev>makeinfo in Emacs</nodeprev>
<nodeup>Creating an Info File</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title>The <code>texinfo-format&dots;</code> Commands</title>
<para><indexterm index="fn">texinfo-format-region</indexterm><indexterm index="fn">texinfo-format-buffer</indexterm></para>
<para>In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the <code>texinfo-format-region</code> command.  This formats the
current region and displays the formatted text in a temporary buffer
called <samp>*Info Region*</samp>.
</para>
<para>Similarly, you can format a buffer with the
<code>texinfo-format-buffer</code> command.  This command creates a new
buffer and generates the Info file in it.  Typing <kbd>C-x C-s</kbd> will
save the Info file under the name specified by the
<code>@setfilename</code> line which must be near the beginning of the
Texinfo file.
</para>
<table><tableitem><tableterm><kbd>C-c C-e C-r</kbd></tableterm>
<tableterm><kbd><code>texinfo-format-region</code></kbd></tableterm>
<item><para>Format the current region for Info.
<indexterm index="fn">texinfo-format-region</indexterm></para>
</item></tableitem><tableitem><tableterm><kbd>C-c C-e C-b</kbd></tableterm>
<tableterm><kbd><code>texinfo-format-buffer</code></kbd></tableterm>
<item><para>Format the current buffer for Info.
<indexterm index="fn">texinfo-format-buffer</indexterm></para></item></tableitem></table>

<para>The <code>texinfo-format-region</code> and <code>texinfo-format-buffer</code>
commands provide you with some error checking, and other functions can
provide you with further help in finding formatting errors.  These
procedures are described in an appendix; see <xref><xrefnodename>Catching Mistakes</xrefnodename></xref>.
However, the <code>makeinfo</code> program is often faster and
provides better error checking (see <xref><xrefnodename>makeinfo in Emacs</xrefnodename></xref>).
</para>
</subsection>
</node>
<node>
<nodename>Batch Formatting</nodename>
<nodenext>Tag and Split Files</nodenext>
<nodeprev>texinfo-format commands</nodeprev>
<nodeup>Creating an Info File</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title>Batch Formatting</title>
<para><indexterm index="cp">Batch formatting for Info</indexterm><indexterm index="cp">Info batch formatting</indexterm></para>
<para>You can format Texinfo files for Info using <code>batch-texinfo-format</code>
and Emacs Batch mode.  You can run Emacs in Batch mode from any shell,
including a shell inside of Emacs.  (See <xref><xrefnodename>Command Switches</xrefnodename><xrefprinteddesc>Command Line Switches and Arguments</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>.)
</para>
<para>Here is a shell command to format all the files that end in
<file>.texinfo</file> in the current directory:
</para>
<example xml:space="preserve">emacs -batch -funcall batch-texinfo-format *.texinfo
</example>
<para>Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.
</para>
<para>Run <code>batch-texinfo-format</code> only with Emacs in Batch mode as shown;
it is not interactive.  It kills the Batch mode Emacs on completion.
</para>
<para><code>batch-texinfo-format</code> is convenient if you lack <code>makeinfo</code>
and want to format several Texinfo files at once.  When you use Batch
mode, you create a new Emacs process.  This frees your current Emacs, so
you can continue working in it.  (When you run
<code>texinfo-format-region</code> or <code>texinfo-format-buffer</code>, you cannot
use that Emacs for anything else until the command finishes.)
</para>
</subsection>
</node>
<node>
<nodename>Tag and Split Files</nodename>
<nodenext>makeinfo html</nodenext>
<nodeprev>Batch Formatting</nodeprev>
<nodeup>Creating an Info File</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title>Tag Files and Split Files</title>
<para><indexterm index="cp">Making a tag table automatically</indexterm><indexterm index="cp">Tag table, making automatically</indexterm></para>
<para>If a Texinfo file has more than 30,000 bytes,
<code>texinfo-format-buffer</code> automatically creates a tag table
for its Info file;  <code>makeinfo</code> always creates a tag table.  With
a <dfn>tag table</dfn>, Info can jump to new nodes more quickly than it can
otherwise.
</para>
<para><indexterm index="cp">Indirect subfiles</indexterm>In addition, if the Texinfo file contains more than about 70,000
bytes, <code>texinfo-format-buffer</code> and <code>makeinfo</code> split the
large Info file into shorter <dfn>indirect</dfn> subfiles of about 50,000
bytes each.  Big files are split into smaller files so that Emacs does
not need to make a large buffer to hold the whole of a large Info
file; instead, Emacs allocates just enough memory for the small, split-off
file that is needed at the time.  This way, Emacs avoids wasting
memory when you run Info.  (Before splitting was implemented, Info
files were always kept short and <dfn>include files</dfn> were designed as
a way to create a single, large printed manual out of the smaller Info
files.  See <xref><xrefnodename>Include Files</xrefnodename></xref>, for more information.  Include files are
still used for very large documents, such as <cite>The Emacs Lisp
Reference Manual</cite>, in which each chapter is a separate file.)
</para>
<para>When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to
the files that were split off.  The split-off files are called
<dfn>indirect</dfn> files.
</para>
<para>The split-off files have names that are created by appending <samp>-1</samp><!-- /@w -->,
<samp>-2</samp><!-- /@w -->, <samp>-3</samp><!-- /@w --> and so on to the file name specified by the
<code>@setfilename</code> command.  The shortened version of the original file
continues to have the name specified by <code>@setfilename</code>.
</para>
<para>At one stage in writing this document, for example, the Info file was saved
as the file <file>test-texinfo</file> and that file looked like this:
</para>
<example xml:space="preserve"><group>
Info file: test-texinfo,    -*-Text-*-
produced by texinfo-format-buffer
from file: new-texinfo-manual.texinfo

^_
Indirect:
test-texinfo-1: 102
test-texinfo-2: 50422
</group>
<group>
test-texinfo-3: 101300
^_^L
Tag table:
(Indirect)
Node: overview^?104
Node: info file^?1271
</group>
<group>
Node: printed manual^?4853
Node: conventions^?6855
&dots;
</group>
</example>
<para>(But <file>test-texinfo</file> had far more nodes than are shown here.)  Each of
the split-off, indirect files, <file>test-texinfo-1</file>,
<file>test-texinfo-2</file>, and <file>test-texinfo-3</file>, is listed in this file
after the line that says <samp>Indirect:</samp>.  The tag table is listed after
the line that says <samp>Tag table:</samp>. 
</para>
<para>In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect files,
not counting the file list itself, the tag table, or the permissions
text in each file.  In the tag table, the number following the node name
records the location of the beginning of the node, in bytes from the
beginning of the (unsplit) output.
</para>
<para>If you are using <code>texinfo-format-buffer</code> to create Info files,
you may want to run the <code>Info-validate</code> command.  (The
<code>makeinfo</code> command does such a good job on its own, you do not
need <code>Info-validate</code>.)  However, you cannot run the <kbd>M-x
Info-validate</kbd> node-checking command on indirect files.  For
information on how to prevent files from being split and how to
validate the structure of the nodes, see <xref><xrefnodename>Using Info-validate</xrefnodename></xref>.
</para>

</subsection>
</node>
<node>
<nodename>makeinfo html</nodename>
<nodeprev>Tag and Split Files</nodeprev>
<nodeup>Creating an Info File</nodeup>
<subsection>
<title>Generating HTML</title>
<para><indexterm index="cp">HTML</indexterm></para>
<para>Besides generating output in the Info format, you can use the
<samp>--html</samp> option to generate output in HTML format, for installation
on a web site (for example).  By default, the HTML output is split at
node level.
</para>
<para>When splitting, the HTML output files are written into a subdirectory.
The subdirectory is named according to the name from
<code>@setfilename</code> with any extension removed; for example, HTML
output for <code>@setfilename emacs.info</code> would be written into a
subdirectory named <samp>emacs</samp>.  If that directory cannot be created
for any reason, then <samp>.html</samp> is appended to the directory name, as
in <samp>emacs.html</samp> (this is necessary because sometimes the info file
is named without an extension, e.g., <samp>texinfo</samp>).  If the
<samp><var>name</var>.html</samp> directory can't be created either,
<code>makeinfo</code> gives up.  In any case, the top-level output file within
the directory is always named <samp>index.html</samp>.
</para>
<para>Monolithic output (<code>--no-split</code>) is named according to
<code>@setfilename</code> or <code>--outfile</code>.  Cross-document node
references are not supported in monolithic HTML.
</para>
<para>Texinfo input marked up with the <code>@ifhtml</code> command will produce
output only with the <samp>--html</samp> option supplied.  Input marked up
with the <code>@html</code> is passed literally to the output (suppressing
the normal escaping of input <samp>&lt;</samp>, <samp>&gt;</samp> and <samp>&amp;</samp> characters
which have special significance in HTML).
</para>
<para>The <samp>--footnote-style</samp> option is currently ignored for HTML output;
footnotes are linked to the end of the output file.
</para>
<para>The HTML generated is mostly standard (i.e., HTML 2.0, RFC-1866).  The
exception is that HTML 3.2 tables are generated from the
<code>@multitable</code> command, but tagged to degrade as well as possible
in browsers without table support.  The HTML 4 <samp>lang</samp> attribute on
the <samp>&lt;html&gt;</samp> attribute is also used.  Please report output from an
error-free run of <code>makeinfo</code> which has browser portability problems
as a bug.
</para>
<para>Navigation bars are inserted at the start of nodes, similarly to Info
output.  The <samp>--no-headers</samp> option will suppress this if used with
<samp>--no-split</samp>.  Header <code>&lt;link&gt;</code> elements in split output can
support info-like navigation with browsers like Lynx and Emacs W3<!-- /@w -->
which implement this HTML 1.0<!-- /@w --> feature.  <samp>@xref</samp> commands to
other documents are generated assuming the other document is available
in split HTML form, and installed in the same HTML documentation tree,
at <file>../&lt;info-document&gt;/</file>.
</para>

</subsection>
</node>
<node>
<nodename>Installing an Info File</nodename>
<nodeprev>Creating an Info File</nodeprev>
<nodeup>Creating and Installing Info Files</nodeup>
<section>
<title>Installing an Info File</title>
<para><indexterm index="cp">Installing an Info file</indexterm><indexterm index="cp">Info file installation</indexterm><indexterm index="cp"><file>dir</file> directory for Info installation</indexterm></para>
<para>Info files are usually kept in the <file>info</file> directory.  You can read
Info files using the standalone Info program or the Info reader built
into Emacs.  (See <inforef><inforefnodename>Top</inforefnodename><inforefrefname>info</inforefrefname><inforefinfoname>info</inforefinfoname></inforef>, for an introduction to Info.)
</para>
<menu>
<menuentry>
<menunode> Directory File</menunode>
<menutitle> Directory File</menutitle>
<menucomment>              The top level menu for all Info files.
</menucomment>
</menuentry><menuentry>
<menunode> New Info File</menunode>
<menutitle> New Info File</menutitle>
<menucomment>               Listing a new Info file.
</menucomment>
</menuentry><menuentry>
<menunode> Other Info Directories</menunode>
<menutitle> Other Info Directories</menutitle>
<menucomment>      How to specify Info files that are
                                  located in other directories.
</menucomment>
</menuentry><menuentry>
<menunode> Installing Dir Entries</menunode>
<menutitle> Installing Dir Entries</menutitle>
<menucomment>      How to specify what menu entry to add
                                  to the Info directory.
</menucomment>
</menuentry><menuentry>
<menunode> Invoking install-info</menunode>
<menutitle> Invoking install-info</menutitle>
<menucomment>       <code>install-info</code> options.
</menucomment>
</menuentry></menu>


</section>
</node>
<node>
<nodename>Directory File</nodename>
<nodenext>New Info File</nodenext>
<nodeup>Installing an Info File</nodeup>
<subsection>
<title>The Directory File <file>dir</file></title>

<para>For Info to work, the <file>info</file> directory must contain a file that
serves as a top level directory for the Info system.  By convention,
this file is called <file>dir</file>.  (You can find the location of this file
within Emacs by typing <kbd>C-h i</kbd> to enter Info and then typing
<kbd>C-x C-f</kbd> to see the pathname to the <file>info</file> directory.)
</para>
<para>The <file>dir</file> file is itself an Info file.  It contains the top level
menu for all the Info files in the system.  The menu looks like
this:
</para>
<example xml:space="preserve"><group>
* Menu:
* Info:    (info).     Documentation browsing system.
* Emacs:   (emacs).    The extensible, self-documenting
                       text editor.
* Texinfo: (texinfo).  With one source file, make
                       either a printed manual using
                       @TeX{} or an Info file.
&dots;
</group>
</example>
<para>Each of these menu entries points to the `Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to
specify the `Top' node, since Info goes to the `Top' node if no node
name is mentioned.  See <xref><xrefnodename>Other Info Files</xrefnodename><xrefprinteddesc>Nodes in Other Info Files</xrefprinteddesc></xref>.)
</para>
<para>Thus, the <samp>Info</samp> entry points to the `Top' node of the
<file>info</file> file and the <samp>Emacs</samp> entry points to the `Top' node
of the <file>emacs</file> file.
</para>
<para>In each of the Info files, the `Up' pointer of the `Top' node refers
back to the <code>dir</code> file.  For example, the line for the `Top'
node of the Emacs manual looks like this in Info:
</para>
<example xml:space="preserve">File: emacs  Node: Top, Up: (DIR), Next: Distrib
</example>
<para>In this case, the <file>dir</file> file name is written in upper case
letters&mdash;it can be written in either upper or lower case.  This is not
true in general, it is a special case for <file>dir</file>.
</para>

</subsection>
</node>
<node>
<nodename>New Info File</nodename>
<nodenext>Other Info Directories</nodenext>
<nodeprev>Directory File</nodeprev>
<nodeup>Installing an Info File</nodeup>
<subsection>
<title>Listing a New Info File</title>
<para><indexterm index="cp">Adding a new Info file</indexterm><indexterm index="cp">Listing a new Info file</indexterm><indexterm index="cp">New Info file, listing it in <file>dir</file> file</indexterm><indexterm index="cp">Info file, listing a new</indexterm><indexterm index="cp"><file>dir</file> file listing</indexterm></para>
<para>To add a new Info file to your system, you must write a menu entry to
add to the menu in the <file>dir</file> file in the <file>info</file> directory.
For example, if you were adding documentation for GDB, you would write
the following new entry:
</para>
<example xml:space="preserve">* GDB: (gdb).           The source-level C debugger.
</example>
<para>The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.
</para>
<para>The name of an Info file often has a <file>.info</file> extension.  Thus, the
Info file for GDB might be called either <file>gdb</file> or <file>gdb.info</file>.
The Info reader programs automatically try the file name both with and
without <file>.info</file><footnote><para>On MS-DOS/MS-Windows systems, Info will
try the <file>.inf</file> extension as well.
</para></footnote>; so it is better to avoid
clutter and not to write <samp>.info</samp> explicitly in the menu entry.  For
example, the GDB menu entry should use just <samp>gdb</samp> for the file
name, not <samp>gdb.info</samp>.
</para>

</subsection>
</node>
<node>
<nodename>Other Info Directories</nodename>
<nodenext>Installing Dir Entries</nodenext>
<nodeprev>New Info File</nodeprev>
<nodeup>Installing an Info File</nodeup>
<subsection>
<title>Info Files in Other Directories</title>
<para><indexterm index="cp">Installing Info in another directory</indexterm><indexterm index="cp">Info installed in another directory</indexterm><indexterm index="cp">Another Info directory</indexterm><indexterm index="cp"><file>dir</file> files and Info directories</indexterm></para>
<para>If an Info file is not in the <file>info</file> directory, there are three
ways to specify its location:
</para>
<enumerate first="1"><item>
<para>Write the pathname in the <file>dir</file> file as the second part of the menu.
</para>
</item>
<item>
<para>If you are using Emacs, list the name of the file in a second <file>dir</file>
file, in its directory; and then add the name of that directory to the
<code>Info-directory-list</code> variable in your personal or site
initialization file.
</para>
<para>This variable tells Emacs where to look for <file>dir</file> files (the files
must be named <file>dir</file>).  Emacs merges the files named <file>dir</file> from
each of the listed directories.  (In Emacs version 18, you can set the
<code>Info-directory</code> variable to the name of only one
directory.)
</para>
</item>
<item>
<para>Specify the Info directory name in the <code>INFOPATH</code> environment
variable in your <file>.profile</file> or <file>.cshrc</file> initialization file.
(Only you and others who set this environment variable will be able to
find Info files whose location is specified this way.)
</para></item>
</enumerate>

<para>For example, to reach a test file in the <file>/home/bob/info</file>
directory, you could add an entry like this to the menu in the
standard <file>dir</file> file:
</para>
<example xml:space="preserve">* Test: (/home/bob/info/info-test).  Bob's own test file.
</example>
<para>In this case, the absolute file name of the <file>info-test</file> file is
written as the second part of the menu entry.
</para>
<para>Alternatively, you could write the following in your <file>.emacs</file> file:
</para>
<para><indexterm index="cp">Info-directory-list</indexterm></para><example xml:space="preserve"><group>
(require 'info)
(setq Info-directory-list
  (cons (expand-file-name &quot;/home/bob/info&quot;)
        Info-directory-list))
</group>
</example>
<para>This tells Emacs to merge the system <file>dir</file> file with the <file>dir</file>
file in <file>/home/bob/info</file>.  Thus, Info will list the
<file>/home/bob/info/info-test</file> file as a menu entry in the
<file>/home/bob/info/dir</file> file.  Emacs does the merging only when
<kbd>M-x info</kbd> is first run, so if you want to set
<code>Info-directory-list</code> in an Emacs session where you've already run
<code>info</code>, you must <code>(setq Info-dir-contents nil)</code> to force Emacs
to recompose the <file>dir</file> file.
</para>
<para><indexterm index="cp">INFOPATH</indexterm>Finally, you can tell Info where to look by setting the <code>INFOPATH</code>
environment variable in your shell startup file, such as <file>.cshrc</file>,
<file>.profile</file> or <file>autoexec.bat</file>.  If you use a Bourne-compatible
shell such as <code>sh</code> or <code>bash</code> for your shell command
interpreter, you set the <code>INFOPATH</code> environment variable in the
<file>.profile</file> initialization file; but if you use <code>csh</code> or
<code>tcsh</code>, you set the variable in the <file>.cshrc</file> initialization
file.  On MS-DOS/MS-Windows systems, you must set <code>INFOPATH</code> in
your <file>autoexec.bat</file> file or in the Registry.  Each type of shell
uses a different syntax.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>In a <file>.cshrc</file> file, you could set the <code>INFOPATH</code>
variable as follows:
</para>
<smallexample xml:space="preserve">setenv INFOPATH .:~/info:/usr/local/emacs/info
</smallexample>
</item>
<item>
<para>In a <file>.profile</file> file, you would achieve the same effect by
writing:
</para>
<smallexample xml:space="preserve">INFOPATH=.:$HOME/info:/usr/local/emacs/info
export INFOPATH
</smallexample>
</item>
<item>
<para><indexterm index="cp">autoexec.bat</indexterm>In a <file>autoexec.bat</file> file, you write this command<footnote><para>Note the
use of <samp>;</samp> as the directory separator, and a different syntax for
using values of other environment variables.
</para></footnote>:
</para>
<smallexample xml:space="preserve">set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info
</smallexample></item>
</itemize>

<para>The <samp>.</samp> indicates the current directory as usual.  Emacs uses the
<code>INFOPATH</code> environment variable to initialize the value of Emacs's
own <code>Info-directory-list</code> variable.  The stand-alone Info reader
merges any files named <file>dir</file> in any directory listed in the
<env>INFOPATH</env> variable into a single menu presented to you in the node
called <samp>(dir)Top</samp>.
</para>
<para><indexterm index="cp">colon, last in <env>INFOPATH</env></indexterm>However you set <env>INFOPATH</env>, if its last character is a
colon<footnote><para>On MS-DOS/MS-Windows systems, use semi-colon instead.
</para></footnote>, this
is replaced by the default (compiled-in) path.  This gives you a way to
augment the default path with new directories without having to list all
the standard places.  For example (using <code>sh</code> syntax):
</para>
<example xml:space="preserve">INFOPATH=/local/info:
export INFOPATH
</example>
<para>will search <file>/local/info</file> first, then the standard directories.
Leading or doubled colons are not treated specially.
</para>
<para><indexterm index="cp"><file>dir</file> file, creating your own</indexterm>When you create your own <file>dir</file> file for use with
<code>Info-directory-list</code> or <env>INFOPATH</env>, it's easiest to start by
copying an existing <file>dir</file> file and replace all the text after the
<samp>* Menu:</samp> with your desired entries.  That way, the punctuation and
special CTRL-_ characters that Info needs will be present.
</para>

</subsection>
</node>
<node>
<nodename>Installing Dir Entries</nodename>
<nodenext>Invoking install-info</nodenext>
<nodeprev>Other Info Directories</nodeprev>
<nodeup>Installing an Info File</nodeup>
<subsection>
<title>Installing Info Directory Files</title>

<para>When you install an Info file onto your system, you can use the program
<code>install-info</code> to update the Info directory file <file>dir</file>.
Normally the makefile for the package runs <code>install-info</code>, just
after copying the Info file into its proper installed location.
</para>
<para><indexterm index="fn">dircategory</indexterm><indexterm index="fn">direntry</indexterm>In order for the Info file to work with <code>install-info</code>, you include
the commands <code>@dircategory</code> and
<code>@direntry</code>&dots;<code>@end direntry</code> in the Texinfo source
file.  Use <code>@direntry</code> to specify the menu entries to add to the
Info directory file, and use <code>@dircategory</code> to specify which part
of the Info directory to put it in.  Here is how these commands are used
in this manual:
</para>
<smallexample xml:space="preserve">@dircategory Texinfo documentation system
@direntry
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. &dots;
&dots;
@end direntry
</smallexample>
<para>Here's what this produces in the Info file:
</para>
<smallexample xml:space="preserve">INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. &dots;
&dots;
END-INFO-DIR-ENTRY
</smallexample>
<para>The <code>install-info</code> program sees these lines in the Info file, and
that is how it knows what to do.
</para>
<para>Always use the <code>@direntry</code> and <code>@dircategory</code> commands near
the beginning of the Texinfo input, before the first <code>@node</code>
command.  If you use them later on in the input, <code>install-info</code>
will not notice them.
</para>
<para>If you use <code>@dircategory</code> more than once in the Texinfo source,
each usage specifies the `current' category; any subsequent
<code>@direntry</code> commands will add to that category.  
</para>
<para>Here are some recommended <code>@dircategory</code> categories:
</para>
<display xml:space="preserve">GNU packages
GNU programming tools
GNU programming documentation
GNU Emacs Lisp
GNU libraries
TeX
Individual utilities
</display>
<para>The idea is to include the `Invoking' node for every program installed
by a package under `Individual utilities', and an entry for the manual
as a whole in the appropriate other category.
</para>

</subsection>
</node>
<node>
<nodename>Invoking install-info</nodename>
<nodeprev>Installing Dir Entries</nodeprev>
<nodeup>Installing an Info File</nodeup>
<subsection>
<title>Invoking install-info</title>

<para><indexterm index="cp">install-info</indexterm></para>
<para><code>install-info</code> inserts menu entries from an Info file into the
top-level <file>dir</file> file in the Info system (see the previous sections
for an explanation of how the <file>dir</file> file works).  It's most often
run as part of software installation, or when constructing a <file>dir</file> file
for all manuals on a system.  Synopsis:
</para>
<example xml:space="preserve">install-info [<var>option</var>]&dots; [<var>info-file</var> [<var>dir-file</var>]]
</example>
<para>If <var>info-file</var> or <var>dir-file</var> are not specified, the options
(described below) that define them must be.  There are no compile-time
defaults, and standard input is never used.  <code>install-info</code> can
read only one Info file and write only one <file>dir</file> file per invocation.
</para>
<para><indexterm index="cp"><file>dir</file>, created by <code>install-info</code></indexterm>If <var>dir-file</var> (however specified) does not exist,
<code>install-info</code> creates it if possible (with no entries).
</para>
<para><indexterm index="cp">Compressed files, reading</indexterm><indexterm index="cp">Dir files, compressed</indexterm>If any input file is compressed with <code>gzip</code> (see <xref><xrefnodename>Invoking gzip</xrefnodename><xrefinfofile>gzip</xrefinfofile><xrefprintedname>Gzip</xrefprintedname></xref>), <code>install-info</code> automatically uncompresses it
for reading.  And if <var>dir-file</var> is compressed, <code>install-info</code>
also automatically leaves it compressed after writing any changes.
If <var>dir-file</var> itself does not exist, <code>install-info</code> tries to
open <file><var>dir-file</var>.gz</file>.
</para>
<para>Options:
</para>
<table><tableitem><tableterm><code>--delete</code></tableterm>
<item><para><indexterm index="cp">&ndash;delete</indexterm>Delete the entries in <var>info-file</var> from <var>dir-file</var>.  The file
name in the entry in <var>dir-file</var> must be <var>info-file</var> (except for
an optional <samp>.info</samp> in either one).  Don't insert any new entries.
</para>
</item></tableitem><tableitem><tableterm><code>--dir-file=<var>name</var></code></tableterm>
<tableterm><code>-d <var>name</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;dir-file=<var>name</var></indexterm><indexterm index="cp">-d <var>name</var></indexterm>Specify file name of the Info directory file.  This is equivalent to
using the <var>dir-file</var> argument.
</para>
</item></tableitem><tableitem><tableterm><code>--entry=<var>text</var></code></tableterm>
<tableterm><code>-e <var>text</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;entry=<var>text</var></indexterm><indexterm index="cp">-e <var>text</var></indexterm>Insert <var>text</var> as an Info directory entry; <var>text</var> should have the
form of an Info menu item line plus zero or more extra lines starting
with whitespace.  If you specify more than one entry, they are all
added.  If you don't specify any entries, they are determined from
information in the Info file itself.
</para>
</item></tableitem><tableitem><tableterm><code>--help</code></tableterm>
<tableterm><code>-h</code></tableterm>
<item><para><indexterm index="cp">&ndash;help</indexterm><indexterm index="cp">-h</indexterm>Display a usage message listing basic usage and all available options,
then exit successfully.
</para>
</item></tableitem><tableitem><tableterm><code>--info-file=<var>file</var></code></tableterm>
<tableterm><code>-i <var>file</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;info-file=<var>file</var></indexterm><indexterm index="cp">-i <var>file</var></indexterm>Specify Info file to install in the directory.
Equivalent to using the <var>info-file</var> argument.
</para>
</item></tableitem><tableitem><tableterm><code>--info-dir=<var>dir</var></code></tableterm>
<tableterm><code>-D <var>dir</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;info-dir=<var>dir</var></indexterm><indexterm index="cp">-D <var>dir</var></indexterm>Specify the directory where <file>dir</file> resides.
Equivalent to <samp>--dir-file=<var>dir</var>/dir</samp>.
</para>
</item></tableitem><tableitem><tableterm><code>--item=<var>text</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;item=<var>text</var></indexterm>Same as <samp>--entry=<var>text</var></samp>.  An Info directory entry is actually
a menu item.
</para>
</item></tableitem><tableitem><tableterm><code>--quiet</code></tableterm>
<item><para><indexterm index="cp">&ndash;quiet</indexterm>Suppress warnings.
</para>
</item></tableitem><tableitem><tableterm><code>--remove</code></tableterm>
<tableterm><code>-r</code></tableterm>
<item><para><indexterm index="cp">&ndash;remove</indexterm><indexterm index="cp">-r</indexterm>Same as <samp>--delete</samp>.
</para>
</item></tableitem><tableitem><tableterm><code>--section=<var>sec</var></code></tableterm>
<tableterm><code>-s <var>sec</var></code></tableterm>
<item><para><indexterm index="cp">&ndash;section=<var>sec</var></indexterm><indexterm index="cp">-s <var>sec</var></indexterm>Put this file's entries in section <var>sec</var> of the directory.  If you
specify more than one section, all the entries are added in each of the
sections.  If you don't specify any sections, they are determined from
information in the Info file itself.
</para>
</item></tableitem><tableitem><tableterm><code>--version</code></tableterm>
<tableterm><code>-V</code></tableterm>
<item><para><indexterm index="cp">&ndash;version</indexterm><indexterm index="cp">-V</indexterm><indexterm index="cp">version number, finding</indexterm>Display version information and exit successfully.
</para>
</item></tableitem></table>


</subsection>
</node>
<node>
<nodename>Command List</nodename>
<nodenext>Tips</nodenext>
<nodeprev>Creating and Installing Info Files</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>@-Command List</title>
<para><indexterm index="cp">Alphabetical @-command list</indexterm><indexterm index="cp">List of  @-commands</indexterm><indexterm index="cp">@-command list</indexterm><indexterm index="cp">Reference to @-commands</indexterm></para>
<para>Here is an alphabetical list of the @-commands in Texinfo.  Square
brackets, <tt>[</tt> <!-- /@w --><tt>]</tt>, indicate optional arguments; an ellipsis,
<samp>&dots;</samp>, indicates repeated text.
</para>
<sp lines="1"></sp>
<table><tableitem><tableterm><code>@<var>whitespace</var></code></tableterm>
<item><para>An <code>@</code> followed by a space, tab, or newline produces a normal,
stretchable, interword space.  See <xref><xrefnodename>Multiple Spaces</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@!</code></tableterm>
<item><para>Generate an exclamation point that really does end a sentence (usually
after an end-of-sentence capital letter).  See <xref><xrefnodename>Ending a Sentence</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@&quot;</code></tableterm>
<tableterm><code>@'</code></tableterm>
<item><para>Generate an umlaut or acute accent, respectively, over the next
character, as in &ouml; and &oacute;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@*</code></tableterm>
<item><para>Force a line break. Do not end a paragraph that uses <code>@*</code> with
an <code>@refill</code> command.  See <xref><xrefnodename>Line Breaks</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@,{<var>c</var>}</code></tableterm>
<item><para>Generate a cedilla accent under <var>c</var>, as in &ccedil;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@-</code></tableterm>
<item><para>Insert a discretionary hyphenation point.  See <xref><xrefnodename>- and hyphenation</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@.</code></tableterm>
<item><para>Produce a period that really does end a sentence (usually after an
end-of-sentence capital letter).  See <xref><xrefnodename>Ending a Sentence</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@:</code></tableterm>
<item><para>Indicate to &tex; that an immediately preceding period, question
mark, exclamation mark, or colon does not end a sentence.  Prevent
&tex; from inserting extra whitespace as it does at the end of a
sentence.  The command has no effect on the Info file output.
See <xref><xrefnodename>Not Ending a Sentence</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@=</code></tableterm>
<item><para>Generate a macron (bar) accent over the next character, as in o&macr;.
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@?</code></tableterm>
<item><para>Generate a question mark that really does end a sentence (usually after
an end-of-sentence capital letter).  See <xref><xrefnodename>Ending a Sentence</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@@</code></tableterm>
<item><para>Stands for an at sign, <samp>@</samp>.
See <xref><xrefnodename>Braces Atsigns</xrefnodename><xrefprinteddesc>Inserting @ and braces</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@\</code></tableterm>
<item><para>Stands for a backslash (<samp>\</samp>) inside <code>@math</code>.
See <xref><xrefnodename>math</xrefnodename><xrefprinteddesc><code>math</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@^</code></tableterm>
<tableterm><code>@`</code></tableterm>
<item><para>Generate a circumflex (hat) or grave accent, respectively, over the next
character, as in &ocirc; and &egrave;.
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@{</code></tableterm>
<item><para>Stands for a left brace, <samp>{</samp>.
See <xref><xrefnodename>Braces Atsigns</xrefnodename><xrefprinteddesc>Inserting @ and braces</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@}</code></tableterm>
<item><para>Stands for a right-hand brace, <samp>}</samp>.&linebreak;
See <xref><xrefnodename>Braces Atsigns</xrefnodename><xrefprinteddesc>Inserting @ and braces</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@~</code></tableterm>
<item><para>Generate a tilde accent over the next character, as in &Ntilde;.
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@AA{}</code></tableterm>
<tableterm><code>@aa{}</code></tableterm>
<item><para>Generate the uppercase and lowercase Scandinavian A-ring letters,
respectively: &Aring;, &aring;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@acronym{<var>abbrev</var>}</code></tableterm>
<item><para>Tag <var>abbrev</var> as an acronym, that is, an abbreviation written in all
capital letters, such as `NASA'.  See <xref><xrefnodename>acronym</xrefnodename><xrefprinteddesc><code>acronym</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@AE{}</code></tableterm>
<tableterm><code>@ae{}</code></tableterm>
<item><para>Generate the uppercase and lowercase AE ligatures, respectively:
&AElig;, &aelig;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item><tableterm><code>@afivepaper</code></tableterm>
<item><para>Change page dimensions for the A5 paper size.  See <xref><xrefnodename>A4 Paper</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@afourlatex</code></tableterm>
<tableterm><code>@afourpaper</code></tableterm>
<tableterm><code>@afourwide</code></tableterm>
<item><para>Change page dimensions for the A4 paper size.  See <xref><xrefnodename>A4 Paper</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@alias <var>new</var>=<var>existing</var></code></tableterm>
<item><para>Make the command <samp>@<var>new</var></samp> an alias for the existing command
<samp>@<var>existing</var></samp>.  See <xref><xrefnodename>alias</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@anchor{<var>name</var>}</code></tableterm>
<item><para>Define <var>name</var> as the current location for use as a cross-reference
target.  See <xref><xrefnodename>anchor</xrefnodename><xrefprinteddesc><code>@anchor</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@appendix <var>title</var></code></tableterm>
<item><para>Begin an appendix.  The title appears in the table
of contents of a printed manual.  In Info, the title is
underlined with asterisks.  See <xref><xrefnodename>unnumbered &amp; appendix</xrefnodename><xrefprinteddesc>The <code>@unnumbered</code> and <code>@appendix</code> Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@appendixsec <var>title</var></code></tableterm>
<tableterm><code>@appendixsection <var>title</var></code></tableterm>
<item><para>Begin an appendix section within an appendix.  The section title appears
in the table of contents of a printed manual.  In Info, the title is
underlined with equal signs.  <code>@appendixsection</code> is a longer
spelling of the <code>@appendixsec</code> command.  See <xref><xrefnodename>unnumberedsec appendixsec heading</xrefnodename><xrefprinteddesc>Section Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@appendixsubsec <var>title</var></code></tableterm>
<item><para>Begin an appendix subsection within an appendix.  The title appears
in the table of contents of a printed manual.  In Info, the title is
underlined with hyphens.  See <xref><xrefnodename>unnumberedsubsec appendixsubsec subheading</xrefnodename><xrefprinteddesc>Subsection Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@appendixsubsubsec <var>title</var></code></tableterm>
<item><para>Begin an appendix subsubsection within an appendix subsection.  The
title appears in the table of contents of a printed manual.  In Info,
the title is underlined with periods.  See <xref><xrefnodename>subsubsection</xrefnodename><xrefprinteddesc>The `subsub' Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@asis</code></tableterm>
<item><para>Used following <code>@table</code>, <code>@ftable</code>, and <code>@vtable</code> to
print the table's first column without highlighting (&ldquo;as is&rdquo;).
See <xref><xrefnodename>Two-column Tables</xrefnodename><xrefprinteddesc>Making a Two-column Table</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@author <var>author</var></code></tableterm>
<item><para>Typeset <var>author</var> flushleft and underline it.  See <xref><xrefnodename>title subtitle author</xrefnodename><xrefprinteddesc>The <code>@title</code> and <code>@author</code> Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@b{<var>text</var>}</code></tableterm>
<item><para>Print <var>text</var> in <b>bold</b> font.  No effect in Info.  See <xref><xrefnodename>Fonts</xrefnodename></xref>.
</para>

</item></tableitem><tableitem><tableterm><code>@bullet{}</code></tableterm>
<item><para>Generate a large round dot, or the closest possible
thing to one.  See <xref><xrefnodename>bullet</xrefnodename><xrefprinteddesc><code>@bullet</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@bye</code></tableterm>
<item><para>Stop formatting a file.  The formatters do not see the contents of a
file following an <code>@bye</code> command.  See <xref><xrefnodename>Ending a File</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@c <var>comment</var></code></tableterm>
<item><para>Begin a comment in Texinfo.  The rest of the line does not appear in
either the Info file or the printed manual.  A synonym for
<code>@comment</code>.  See <xref><xrefnodename>Comments</xrefnodename><xrefprinteddesc>Comments</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@cartouche</code></tableterm>
<item><para>Highlight an example or quotation by drawing a box with rounded
corners around it.  Pair with <code>@end cartouche</code>.  No effect in
Info.  See <xref><xrefnodename>cartouche</xrefnodename><xrefprinteddesc>Drawing Cartouches Around Examples</xrefprinteddesc></xref>.)
</para>
</item></tableitem><tableitem><tableterm><code>@center <var>line-of-text</var></code></tableterm>
<item><para>Center the line of text following the command.
See <xref><xrefnodename>titlefont center sp</xrefnodename><xrefprinteddesc><code>@center</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@centerchap <var>line-of-text</var></code></tableterm>
<item><para>Like <code>@chapter</code>, but centers the chapter title.  See <xref><xrefnodename>chapter</xrefnodename><xrefprinteddesc><code>@chapter</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@chapheading <var>title</var></code></tableterm>
<item><para>Print a chapter-like heading in the text, but not in the table of
contents of a printed manual.  In Info, the title is underlined with
asterisks.  See <xref><xrefnodename>majorheading &amp; chapheading</xrefnodename><xrefprinteddesc><code>@majorheading</code> and <code>@chapheading</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@chapter <var>title</var></code></tableterm>
<item><para>Begin a chapter.  The chapter title appears in the table of
contents of a printed manual.  In Info, the title is underlined with
asterisks.  See <xref><xrefnodename>chapter</xrefnodename><xrefprinteddesc><code>@chapter</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@cindex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of concepts.  See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@cite{<var>reference</var>}</code></tableterm>
<item><para>Highlight the name of a book or other reference that lacks a
companion Info file.  See <xref><xrefnodename>cite</xrefnodename><xrefprinteddesc><code>@cite</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@clear <var>flag</var></code></tableterm>
<item><para>Unset <var>flag</var>, preventing the Texinfo formatting commands from
formatting text between subsequent pairs of <code>@ifset <var>flag</var></code>
and <code>@end ifset</code> commands, and preventing
<code>@value{<var>flag</var>}</code> from expanding to the value to which
<var>flag</var> is set.
See <xref><xrefnodename>set clear value</xrefnodename><xrefprinteddesc><code>@set</code> <code>@clear</code> <code>@value</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@code{<var>sample-code</var>}</code></tableterm>
<item><para>Highlight text that is an expression, a syntactically complete token
of a program, or a program name.  See <xref><xrefnodename>code</xrefnodename><xrefprinteddesc><code>@code</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@command{<var>command-name</var>}</code></tableterm>
<item><para>Indicate a command name, such as <command>ls</command>.
See <xref><xrefnodename>command</xrefnodename><xrefprinteddesc><code>@command</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@comment <var>comment</var></code></tableterm>
<item><para>Begin a comment in Texinfo.  The rest of the line does not appear in
either the Info file or the printed manual.  A synonym for <code>@c</code>.
See <xref><xrefnodename>Comments</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@contents</code></tableterm>
<item><para>Print a complete table of contents.  Has no effect in Info, which uses
menus instead.  See <xref><xrefnodename>Contents</xrefnodename><xrefprinteddesc>Generating a Table of Contents</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@copyright{}</code></tableterm>
<item><para>Generate a copyright symbol.  See <xref><xrefnodename>copyright symbol</xrefnodename><xrefprinteddesc><code>@copyright</code></xrefprinteddesc></xref>.
</para>

</item></tableitem><tableitem><tableterm><code>@defcodeindex <var>index-name</var></code></tableterm>
<item><para>Define a new index and its indexing command.  Print entries in an
<code>@code</code> font.  See <xref><xrefnodename>New Indices</xrefnodename><xrefprinteddesc>Defining New Indices</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defcv <var>category</var> <var>class</var> <var>name</var></code></tableterm>
<tableterm><code>@defcvx <var>category</var> <var>class</var> <var>name</var></code></tableterm>
<item><para>Format a description for a variable associated with a class in
object-oriented programming.  Takes three arguments: the category of
thing being defined, the class to which it belongs, and its name.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deffn <var>category</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@deffnx <var>category</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a function, interactive command, or similar
entity that may take arguments.  <code>@deffn</code> takes as arguments the
category of entity being described, the name of this particular
entity, and its arguments, if any.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defindex <var>index-name</var></code></tableterm>
<item><para>Define a new index and its indexing command.  Print entries in a roman
font.  See <xref><xrefnodename>New Indices</xrefnodename><xrefprinteddesc>Defining New Indices</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@definfoenclose <var>newcmd</var>, <var>before</var>, <var>after</var>,</code></tableterm>
<item><para>Create new @-command <var>newcmd</var> for Info that marks text by enclosing
it in strings that precede and follow the text.  See <xref><xrefnodename>definfoenclose</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defivar <var>class</var> <var>instance-variable-name</var></code></tableterm>
<tableterm><code>@defivarx <var>class</var> <var>instance-variable-name</var></code></tableterm>
<item><para>This command formats a description for an instance variable in
object-oriented programming.  The command is equivalent to <samp>@defcv
{Instance Variable} &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defmac <var>macroname</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@defmacx <var>macroname</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a macro.  The command is equivalent to
<samp>@deffn Macro &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defmethod <var>class</var> <var>method-name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@defmethodx <var>class</var> <var>method-name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a method in object-oriented programming.  The
command is equivalent to <samp>@defop Method &dots;</samp>.  Takes as
arguments the name of the class of the method, the name of the
method, and its arguments, if any.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defop <var>category</var> <var>class</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@defopx <var>category</var> <var>class</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for an operation in object-oriented programming.
<code>@defop</code> takes as arguments the overall name of the category of
operation, the name of the class of the operation, the name of the
operation, and its arguments, if any.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>Abstract Objects</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defopt <var>option-name</var></code></tableterm>
<tableterm><code>@defoptx <var>option-name</var></code></tableterm>
<item><para>Format a description for a user option.  The command is equivalent to
<samp>@defvr {User Option} &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defspec <var>special-form-name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@defspecx <var>special-form-name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a special form.  The command is equivalent to
<samp>@deffn {Special Form} &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>,
and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftp <var>category</var> <var>name-of-type</var> <var>attributes</var>&dots;</code></tableterm>
<tableterm><code>@deftpx <var>category</var> <var>name-of-type</var> <var>attributes</var>&dots;</code></tableterm>
<item><para>Format a description for a data type.  <code>@deftp</code> takes as arguments
the category, the name of the type (which is a word like <samp>int</samp> or
<samp>float</samp>), and then the names of attributes of objects of that type.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>Data Types</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypefn <var>classification</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@deftypefnx <var>classification</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a function or similar entity that may take
arguments and that is typed.  <code>@deftypefn</code> takes as arguments the
classification of entity being described, the type, the name of the
entity, and its arguments, if any.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypefun <var>data-type</var> <var>function-name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@deftypefunx <var>data-type</var> <var>function-name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a function in a typed language.
The command is equivalent to <samp>@deftypefn Function &dots;</samp>.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypeivar <var>class</var> <var>data-type</var> <var>variable-name</var></code></tableterm>
<tableterm><code>@deftypeivarx <var>class</var> <var>data-type</var> <var>variable-name</var></code></tableterm>
<item><para>Format a description for a typed instance variable in object-oriented
programming. See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>Abstract Objects</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypemethod <var>class</var> <var>data-type</var> <var>method-name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@deftypemethodx <var>class</var> <var>data-type</var> <var>method-name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a typed method in object-oriented programming.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypeop <var>category</var> <var>class</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@deftypeopx <var>category</var> <var>class</var> <var>data-type</var> <var>name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for a typed operation in object-oriented programming.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>Abstract Objects</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypevar <var>data-type</var> <var>variable-name</var></code></tableterm>
<tableterm><code>@deftypevarx <var>data-type</var> <var>variable-name</var></code></tableterm>
<item><para>Format a description for a variable in a typed language.  The command is
equivalent to <samp>@deftypevr Variable &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@deftypevr <var>classification</var> <var>data-type</var> <var>name</var></code></tableterm>
<tableterm><code>@deftypevrx <var>classification</var> <var>data-type</var> <var>name</var></code></tableterm>
<item><para>Format a description for something like a variable in a typed
language&mdash;an entity that records a value.  Takes as arguments the
classification of entity being described, the type, and the name of the
entity.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defun <var>function-name</var> <var>arguments</var>&dots;</code></tableterm>
<tableterm><code>@defunx <var>function-name</var> <var>arguments</var>&dots;</code></tableterm>
<item><para>Format a description for functions.  The command is equivalent to
<samp>@deffn Function &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defvar <var>variable-name</var></code></tableterm>
<tableterm><code>@defvarx <var>variable-name</var></code></tableterm>
<item><para>Format a description for variables.  The command is equivalent to
<samp>@defvr Variable &dots;</samp>.  See <xref><xrefnodename>Definition Commands</xrefnodename></xref>, and
<xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@defvr <var>category</var> <var>name</var></code></tableterm>
<tableterm><code>@defvrx <var>category</var> <var>name</var></code></tableterm>
<item><para>Format a description for any kind of variable.  <code>@defvr</code> takes
as arguments the category of the entity and the name of the entity.
See <xref><xrefnodename>Definition Commands</xrefnodename></xref>,
and <xref><xrefnodename>deffnx</xrefnodename><xrefprinteddesc>Def Cmds in Detail</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@detailmenu</code></tableterm>
<item><para>Avoid <code>makeinfo</code> confusion stemming from the detailed node listing
in a master menu.  See <xref><xrefnodename>Master Menu Parts</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@dfn{<var>term</var>}</code></tableterm>
<item><para>Highlight the introductory or defining use of a term.
See <xref><xrefnodename>dfn</xrefnodename><xrefprinteddesc><code>@dfn</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@dircategory <var>dirpart</var></code></tableterm>
<item><para>Specify a part of the Info directory menu where this file's entry should
go.  See <xref><xrefnodename>Installing Dir Entries</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@direntry</code></tableterm>
<item><para>Begin the Info directory menu entry for this file.  Pair with
<code>@end direntry</code>.  See <xref><xrefnodename>Installing Dir Entries</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@display</code></tableterm>
<item><para>Begin a kind of example.  Like <code>@example</code> (indent text, do not
fill), but do not select a new font.  Pair with <code>@end display</code>.
See <xref><xrefnodename>display</xrefnodename><xrefprinteddesc><code>@display</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@dmn{<var>dimension</var>}</code></tableterm>
<item><para>Format a unit of measure, as in 12<dmn>pt</dmn>.  Causes &tex; to insert a
thin space before <var>dimension</var>.  No effect in Info.
See <xref><xrefnodename>dmn</xrefnodename><xrefprinteddesc><code>@dmn</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@documentdescription</code></tableterm>
<item><para>Set the document description text, included in the HTML output.  Pair
with <code>@end documentdescription</code>.  See <xref><xrefnodename>documentdescription</xrefnodename><xrefprinteddesc><code>@documentdescription</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@documentencoding <var>enc</var></code></tableterm>
<item><para>Declare the input encoding to be <var>enc</var>.
See <xref><xrefnodename>documentencoding</xrefnodename><xrefprinteddesc><code>@documentencoding</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@documentlanguage <var>CC</var></code></tableterm>
<item><para>Declare the document language as the two-character ISO-639 abbreviation
<var>CC</var>.  See <xref><xrefnodename>documentlanguage</xrefnodename><xrefprinteddesc><code>@documentlanguage</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@dotaccent{<var>c</var>}</code></tableterm>
<item><para>Generate a dot accent over the character <var>c</var>, as in o..
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@dots{}</code></tableterm>
<item><para>Insert an ellipsis: <samp>&dots;</samp>.
See <xref><xrefnodename>dots</xrefnodename><xrefprinteddesc><code>@dots</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@email{<var>address</var>[, <var>displayed-text</var>]}</code></tableterm>
<item><para>Indicate an electronic mail address.
See <xref><xrefnodename>email</xrefnodename><xrefprinteddesc><code>@email</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@emph{<var>text</var>}</code></tableterm>
<item><para>Highlight <var>text</var>; text is displayed in <emph>italics</emph> in printed
output, and surrounded by asterisks in Info.  See <xref><xrefnodename>Emphasis</xrefnodename><xrefprinteddesc>Emphasizing Text</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@end <var>environment</var></code></tableterm>
<item><para>Ends <var>environment</var>, as in <samp>@end example</samp>.  See <xref><xrefnodename>Formatting Commands</xrefnodename><xrefprinteddesc>@-commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@env{<var>environment-variable</var>}</code></tableterm>
<item><para>Indicate an environment variable name, such as <env>PATH</env>.
See <xref><xrefnodename>env</xrefnodename><xrefprinteddesc><code>@env</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@enddots{}</code></tableterm>
<item><para>Generate an end-of-sentence of ellipsis, like this &enddots;
See <xref><xrefnodename>dots</xrefnodename><xrefprinteddesc><code>@dots{}</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@enumerate [<var>number-or-letter</var>]</code></tableterm>
<item><para>Begin a numbered list, using <code>@item</code> for each entry.
Optionally, start list with <var>number-or-letter</var>.  Pair with
<code>@end enumerate</code>.  See <xref><xrefnodename>enumerate</xrefnodename><xrefprinteddesc><code>@enumerate</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@equiv{}</code></tableterm>
<item><para>Indicate to the reader the exact equivalence of two forms with a
glyph: <samp>==</samp>.  See <xref><xrefnodename>Equivalence</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@error{}</code></tableterm>
<item><para>Indicate to the reader with a glyph that the following text is
an error message: <samp>error--&gt;</samp>.  See <xref><xrefnodename>Error Glyph</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@evenfooting [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<tableterm><code>@evenheading [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<item><para>Specify page footings resp&period; headings for even-numbered (left-hand)
pages.  See <xref><xrefnodename>Custom Headings</xrefnodename><xrefprinteddesc>How to Make Your Own Headings</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@everyfooting [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<tableterm><code>@everyheading [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<item><para>Specify page footings resp&period; headings for every page.  Not relevant to
Info.  See <xref><xrefnodename>Custom Headings</xrefnodename><xrefprinteddesc>How to Make Your Own Headings</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@example</code></tableterm>
<item><para>Begin an example.  Indent text, do not fill, and select fixed-width font.
Pair with <code>@end example</code>.  See <xref><xrefnodename>example</xrefnodename><xrefprinteddesc><code>@example</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@exampleindent <var>indent</var></code></tableterm>
<item><para>Indent example-like environments by <var>indent</var> number of spaces
(perhaps 0).  See <xref><xrefnodename>exampleindent</xrefnodename><xrefprinteddesc>Paragraph Indenting</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@exclamdown{}</code></tableterm>
<item><para>Produce an upside-down exclamation point.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@exdent <var>line-of-text</var></code></tableterm>
<item><para>Remove any indentation a line might have.  See <xref><xrefnodename>exdent</xrefnodename><xrefprinteddesc>Undoing the Indentation of a Line</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@expansion{}</code></tableterm>
<item><para>Indicate the result of a macro expansion to the reader with a special
glyph: <samp>==&gt;</samp>.
See <xref><xrefnodename>expansion</xrefnodename><xrefprinteddesc>==&gt; Indicating an Expansion</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@file{<var>filename</var>}</code></tableterm>
<item><para>Highlight the name of a file, buffer, node, or directory.  See <xref><xrefnodename>file</xrefnodename><xrefprinteddesc><code>@file</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@finalout</code></tableterm>
<item><para>Prevent &tex; from printing large black warning rectangles beside
over-wide lines.  See <xref><xrefnodename>Overfull hboxes</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@findex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of functions.  See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@flushleft</code></tableterm>
<tableterm><code>@flushright</code></tableterm>
<item><para>Left justify every line but leave the right end ragged.
Leave font as is.  Pair with <code>@end flushleft</code>.
<code>@flushright</code> analogous.
See <xref><xrefnodename>flushleft &amp; flushright</xrefnodename><xrefprinteddesc><code>@flushleft</code> and <code>@flushright</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@footnote{<var>text-of-footnote</var>}</code></tableterm>
<item><para>Enter a footnote.  Footnote text is printed at the bottom of the page
by &tex;; Info may format in either `End' node or `Separate' node style.
See <xref><xrefnodename>Footnotes</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@footnotestyle <var>style</var></code></tableterm>
<item><para>Specify an Info file's footnote style, either <samp>end</samp> for the end
node style or <samp>separate</samp> for the separate node style.
See <xref><xrefnodename>Footnotes</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@format</code></tableterm>
<item><para>Begin a kind of example.  Like <code>@display</code>, but do not narrow the
margins.  Pair with <code>@end format</code>.  See <xref><xrefnodename>example</xrefnodename><xrefprinteddesc><code>@example</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ftable <var>formatting-command</var></code></tableterm>
<item><para>Begin a two-column table, using <code>@item</code> for each entry.
Automatically enter each of the items in the first column into the
index of functions.  Pair with <code>@end ftable</code>.  The same as
<code>@table</code>, except for indexing.  See <xref><xrefnodename>ftable vtable</xrefnodename><xrefprinteddesc><code>@ftable</code> and <code>@vtable</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@group</code></tableterm>
<item><para>Hold text together that must appear on one printed page.  Pair with
<code>@end group</code>.  Not relevant to Info.  See <xref><xrefnodename>group</xrefnodename><xrefprinteddesc><code>@group</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@H{<var>c</var>}</code></tableterm>
<item><para>Generate the long Hungarian umlaut accent over <var>c</var>, as in o''.
</para>
</item></tableitem><tableitem><tableterm><code>@heading <var>title</var></code></tableterm>
<item><para>Print an unnumbered section-like heading in the text, but not in the
table of contents of a printed manual.  In Info, the title is
underlined with equal signs.  See <xref><xrefnodename>unnumberedsec appendixsec heading</xrefnodename><xrefprinteddesc>Section Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@headings <var>on-off-single-double</var></code></tableterm>
<item><para>Turn page headings on or off, and/or specify single-sided or double-sided
page headings for printing.  See <xref><xrefnodename>headings on off</xrefnodename><xrefprinteddesc>The <code>@headings</code> Command</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@html</code></tableterm>
<item><para>Enter HTML completely.  Pair with <code>@end html</code>.  See <xref><xrefnodename>Raw Formatter Commands</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@hyphenation{<var>hy-phen-a-ted words</var>}</code></tableterm>
<item><para>Explicitly define hyphenation points.  See <xref><xrefnodename>- and hyphenation</xrefnodename><xrefprinteddesc><code>@-</code> and <code>@hyphenation</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@i{<var>text</var>}</code></tableterm>
<item><para>Print <var>text</var> in <i>italic</i> font.  No effect in Info.  See <xref><xrefnodename>Fonts</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ifclear <var>flag</var></code></tableterm>
<item><para>If <var>flag</var> is cleared, the Texinfo formatting commands format text
between <code>@ifclear <var>flag</var></code> and the following <code>@end
ifclear</code> command.
See <xref><xrefnodename>set clear value</xrefnodename><xrefprinteddesc><code>@set</code> <code>@clear</code> <code>@value</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ifhtml</code></tableterm>
<tableterm><code>@ifinfo</code></tableterm>
<item><para>Begin a stretch of text that will be ignored by &tex; when it typesets
the printed manual.  <code>@ifhtml</code> text appears only in the HTML
output.  <code>@ifinfo</code> output appears in both Info and (for historical
compatibility) plain text output .  Pair with <code>@end ifhtml</code>
resp&period; <code>@end ifinfo</code>.  See <xref><xrefnodename>Conditionals</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ifnothtml</code></tableterm>
<tableterm><code>@ifnotinfo</code></tableterm>
<tableterm><code>@ifnotplaintext</code></tableterm>
<tableterm><code>@ifnottex</code></tableterm>
<item><para>Begin a stretch of text that will be ignored in one output format but
not the others.  The text appears in the formats not specified:
<code>@ifnothtml</code> text is omitted from html output, etc.  The exception
is <code>@ifnotinfo</code> text, which is omitted from plain text output as
well as Info output.  Pair with <code>@end ifnothtml</code> resp&period;
<code>@end ifnotinfo</code> resp&period; <code>@end ifnotplaintext</code> resp&period;
<code>@end ifnottex</code>.  See <xref><xrefnodename>Conditionals</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ifplaintext</code></tableterm>
<item><para>Begin a stretch of text that appears only in the plain text output.
Pair with <code>@end ifplaintext</code>.  See <xref><xrefnodename>Conditionals</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ifset <var>flag</var></code></tableterm>
<item><para>If <var>flag</var> is set, the Texinfo formatting commands format text
between <code>@ifset <var>flag</var></code> and the following <code>@end ifset</code>
command.
See <xref><xrefnodename>set clear value</xrefnodename><xrefprinteddesc><code>@set</code> <code>@clear</code> <code>@value</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@iftex</code></tableterm>
<item><para>Begin a stretch of text that will not appear in the Info file, but
will be processed only by &tex;.  Pair with <code>@end iftex</code>.
See <xref><xrefnodename>Conditionals</xrefnodename><xrefprinteddesc>Conditionally Visible Text</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ignore</code></tableterm>
<item><para>Begin a stretch of text that will not appear in either the Info file
or the printed output.  Pair with <code>@end ignore</code>.
See <xref><xrefnodename>Comments</xrefnodename><xrefprinteddesc>Comments and Ignored Text</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@image{<var>filename</var>, [<var>width</var>], [<var>height</var>], [<var>alt</var>], [<var>ext</var>]}</code></tableterm>
<item><para>Include graphics image in external <var>filename</var> scaled to the given
<var>width</var> and/or <var>height</var>, using <var>alt</var> text and looking for
<samp><var>filename</var>.<var>ext</var></samp> in HTML.  See <xref><xrefnodename>Images</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@include <var>filename</var></code></tableterm>
<item><para>Incorporate the contents of the file <var>filename</var> into the Info file
or printed document.  See <xref><xrefnodename>Include Files</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@inforef{<var>node-name</var>, [<var>entry-name</var>], <var>info-file-name</var>}</code></tableterm>
<item><para>Make a cross reference to an Info file for which there is no printed
manual.  See <xref><xrefnodename>inforef</xrefnodename><xrefprinteddesc>Cross references using <code>@inforef</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>\input <var>macro-definitions-file</var></code></tableterm>
<item><para>Use the specified macro definitions file.  This command is used only
in the first line of a Texinfo file to cause &tex; to make use of the
<file>texinfo</file> macro definitions file.  The backslash in <code>\input</code>
is used instead of an <code>@</code> because &tex; does not
recognize <code>@</code> until after it has read the definitions file.
See <xref><xrefnodename>Texinfo File Header</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@item</code></tableterm>
<item><para>Indicate the beginning of a marked paragraph for <code>@itemize</code> and
<code>@enumerate</code>; indicate the beginning of the text of a first column
entry for <code>@table</code>, <code>@ftable</code>, and <code>@vtable</code>.
See <xref><xrefnodename>Lists and Tables</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@itemize  <var>mark-generating-character-or-command</var></code></tableterm>
<item><para>Produce a sequence of indented paragraphs, with a mark inside the left
margin at the beginning of each paragraph.  Pair with <code>@end
itemize</code>.  See <xref><xrefnodename>itemize</xrefnodename><xrefprinteddesc><code>@itemize</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@itemx</code></tableterm>
<item><para>Like <code>@item</code> but do not generate extra vertical space above the
item text.  See <xref><xrefnodename>itemx</xrefnodename><xrefprinteddesc><code>@itemx</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@kbd{<var>keyboard-characters</var>}</code></tableterm>
<item><para>Indicate text that is characters of input to be typed by
users.  See <xref><xrefnodename>kbd</xrefnodename><xrefprinteddesc><code>@kbd</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@kbdinputstyle <var>style</var></code></tableterm>
<item><para>Specify when <code>@kbd</code> should use a font distinct from <code>@code</code>.
See <xref><xrefnodename>kbd</xrefnodename><xrefprinteddesc><code>@kbd</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@key{<var>key-name</var>}</code></tableterm>
<item><para>Indicate a name for a key on a keyboard.
See <xref><xrefnodename>key</xrefnodename><xrefprinteddesc><code>@key</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@kindex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of keys.
See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@L{}</code></tableterm>
<tableterm><code>@l{}</code></tableterm>
<item><para>Generate the uppercase and lowercase Polish suppressed-L letters,
respectively: /L, /l.
</para>
<!-- Possibly this can be tossed now that we have macros.  -karl, 16sep96. -->
<!-- Yes, let's toss it, it's pretty weird.  -karl, 15jun97. -->
<!-- @item @@global@@let@var{new-command}=@var{existing-command} -->
<!-- Equate a new highlighting command with an existing one.  Only for -->
<!-- @TeX{}.  Write definition inside of @code{@@iftex} @dots{} @code{@@end -->
<!-- iftex}.  @xref{Customized Highlighting}.@refill -->

</item></tableitem><tableitem><tableterm><code>@lisp</code></tableterm>
<item><para>Begin an example of Lisp code.  Indent text, do not fill, and select
fixed-width font.  Pair with <code>@end lisp</code>.  See <xref><xrefnodename>lisp</xrefnodename><xrefprinteddesc><code>@lisp</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@lowersections</code></tableterm>
<item><para>Change subsequent chapters to sections, sections to subsections, and so
on. See <xref><xrefnodename>Raise/lower sections</xrefnodename><xrefprinteddesc><code>@raisesections</code> and <code>@lowersections</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@macro <var>macroname</var> {<var>params</var>}</code></tableterm>
<item><para>Define a new Texinfo command <code>@<var>macroname</var>{<var>params</var>}</code>.
Only supported by <code>makeinfo</code> and <code>texi2dvi</code>.  See <xref><xrefnodename>Defining Macros</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@majorheading <var>title</var></code></tableterm>
<item><para>Print a chapter-like heading in the text, but not in the table of
contents of a printed manual.  Generate more vertical whitespace before
the heading than the <code>@chapheading</code> command.  In Info, the chapter
heading line is underlined with asterisks.  See <xref><xrefnodename>majorheading &amp; chapheading</xrefnodename><xrefprinteddesc><code>@majorheading</code> and <code>@chapheading</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@math{<var>mathematical-expression</var>}</code></tableterm>
<item><para>Format a mathematical expression.
See <xref><xrefnodename>math</xrefnodename><xrefprinteddesc><code>@math</code>: Inserting Mathematical Expressions</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@menu</code></tableterm>
<item><para>Mark the beginning of a menu of nodes in Info.  No effect in a printed
manual.  Pair with <code>@end menu</code>.  See <xref><xrefnodename>Menus</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@minus{}</code></tableterm>
<item><para>Generate a minus sign, `&minus;'.  See <xref><xrefnodename>minus</xrefnodename><xrefprinteddesc><code>@minus</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@multitable <var>column-width-spec</var></code></tableterm>
<item><para>Begin a multi-column table.  Pair with <code>@end multitable</code>.
See <xref><xrefnodename>Multitable Column Widths</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@need <var>n</var></code></tableterm>
<item><para>Start a new page in a printed manual if fewer than <var>n</var> mils
(thousandths of an inch) remain on the current page.  See <xref><xrefnodename>need</xrefnodename><xrefprinteddesc><code>@need</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@node <var>name</var>, <var>next</var>, <var>previous</var>, <var>up</var></code></tableterm>
<item><para>Define the beginning of a new node in Info, and serve as a locator for
references for &tex;.  See <xref><xrefnodename>node</xrefnodename><xrefprinteddesc><code>@node</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@noindent</code></tableterm>
<item><para>Prevent text from being indented as if it were a new paragraph.
See <xref><xrefnodename>noindent</xrefnodename><xrefprinteddesc><code>@noindent</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@novalidate</code></tableterm>
<item><para>Suppress validation of node references, omit creation of auxiliary files
with &tex;.  Use before <code>@setfilename</code>.  See <xref><xrefnodename>Pointer Validation</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@O{}</code></tableterm>
<tableterm><code>@o{}</code></tableterm>
<item><para>Generate the uppercase and lowercase O-with-slash letters, respectively:
&Oslash;, &oslash;.
</para>
</item></tableitem><tableitem><tableterm><code>@oddfooting [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<tableterm><code>@oddheading [<var>left</var>] @| [<var>center</var>] @| [<var>right</var>]</code></tableterm>
<item><para>Specify page footings resp&period; headings for odd-numbered (right-hand)
pages.  See <xref><xrefnodename>Custom Headings</xrefnodename><xrefprinteddesc>How to Make Your Own Headings</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@OE{}</code></tableterm>
<tableterm><code>@oe{}</code></tableterm>
<item><para>Generate the uppercase and lowercase OE ligatures, respectively:
&OElig;, &oelig;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@option{<var>option-name</var>}</code></tableterm>
<item><para>Indicate a command-line option, such as <option>-l</option> or <option>--help</option>.
See <xref><xrefnodename>option</xrefnodename><xrefprinteddesc><code>@option</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@page</code></tableterm>
<item><para>Start a new page in a printed manual.  No effect in Info.
See <xref><xrefnodename>page</xrefnodename><xrefprinteddesc><code>@page</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@pagesizes [<var>width</var>][, <var>height</var>]</code></tableterm>
<item><para>Change page dimensions.  See <xref><xrefnodename>pagesizes</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@paragraphindent <var>indent</var></code></tableterm>
<item><para>Indent paragraphs by <var>indent</var> number of spaces (perhaps 0); preserve
source file indentation if <var>indent</var> is <code>asis</code>.
See <xref><xrefnodename>paragraphindent</xrefnodename><xrefprinteddesc>Paragraph Indenting</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@pindex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of programs.  See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@point{}</code></tableterm>
<item><para>Indicate the position of point in a buffer to the reader with a
glyph: <samp>-!-</samp>.  See <xref><xrefnodename>Point Glyph</xrefnodename><xrefprinteddesc>Indicating Point in a Buffer</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@pounds{}</code></tableterm>
<item><para>Generate the pounds sterling currency sign.
See <xref><xrefnodename>pounds</xrefnodename><xrefprinteddesc><code>@pounds{}</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@print{}</code></tableterm>
<item><para>Indicate printed output to the reader with a glyph:
<samp>-|</samp>.  See <xref><xrefnodename>Print Glyph</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@printindex <var>index-name</var></code></tableterm>
<item><para>Print an alphabetized two-column index in a printed manual or generate
an alphabetized menu of index entries for Info.  See <xref><xrefnodename>Printing Indices &amp; Menus</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@pxref{<var>node-name</var>, [<var>entry</var>], [<var>topic-or-title</var>], [<var>info-file</var>], [<var>manual</var>]}</code></tableterm>
<item><para>Make a reference that starts with a lower case `see' in a printed
manual.  Use within parentheses only.  Do not follow command with a
punctuation mark&mdash;the Info formatting commands automatically insert
terminating punctuation as needed.  Only the first argument is mandatory.
See <xref><xrefnodename>pxref</xrefnodename><xrefprinteddesc><code>@pxref</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@questiondown{}</code></tableterm>
<item><para>Generate an upside-down question mark.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@quotation</code></tableterm>
<item><para>Narrow the margins to indicate text that is quoted from another real
or imaginary work.  Write command on a line of its own.  Pair with
<code>@end quotation</code>.  See <xref><xrefnodename>quotation</xrefnodename><xrefprinteddesc><code>@quotation</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@r{<var>text</var>}</code></tableterm>
<item><para>Print <var>text</var> in <r>roman</r> font.  No effect in Info.
See <xref><xrefnodename>Fonts</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@raisesections</code></tableterm>
<item><para>Change subsequent sections to chapters, subsections to sections, and so
on.  See <xref><xrefnodename>Raise/lower sections</xrefnodename><xrefprinteddesc><code>@raisesections</code> and <code>@lowersections</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ref{<var>node-name</var>, [<var>entry</var>], [<var>topic-or-title</var>], [<var>info-file</var>], [<var>manual</var>]}</code></tableterm>
<item><para>Make a reference.  In a printed manual, the reference does not start
with a `See'.  Follow command with a punctuation mark.  Only the first
argument is mandatory.  See <xref><xrefnodename>ref</xrefnodename><xrefprinteddesc><code>@ref</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@refill</code></tableterm>
<item><para>In Info, refill and indent the paragraph after all the other processing
has been done.  No effect on &tex;, which always refills.  This command
is no longer needed, since all formatters now automatically refill.
See <xref><xrefnodename>Refilling Paragraphs</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@result{}</code></tableterm>
<item><para>Indicate the result of an expression to the reader with a special
glyph: <samp>&rArr;</samp>.  See <xref><xrefnodename>result</xrefnodename><xrefprinteddesc><code>@result</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ringaccent{<var>c</var>}</code></tableterm>
<item><para>Generate a ring accent over the next character, as in o*.
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@samp{<var>text</var>}</code></tableterm>
<item><para>Highlight <var>text</var> that is a literal example of a sequence of
characters.  Used for single characters, for statements, and often for
entire shell commands.  See <xref><xrefnodename>samp</xrefnodename><xrefprinteddesc><code>@samp</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@sc{<var>text</var>}</code></tableterm>
<item><para>Set <var>text</var> in a printed output in <sc>the small caps font</sc> and
set text in the Info file in uppercase letters.
See <xref><xrefnodename>Smallcaps</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@section <var>title</var></code></tableterm>
<item><para>Begin a section within a chapter.  In a printed manual, the section
title is numbered and appears in the table of contents.  In Info, the
title is underlined with equal signs.  See <xref><xrefnodename>section</xrefnodename><xrefprinteddesc><code>@section</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@set <var>flag</var> [<var>string</var>]</code></tableterm>
<item><para>Make <var>flag</var> active, causing the Texinfo formatting commands to
format text between subsequent pairs of <code>@ifset <var>flag</var></code> and
<code>@end ifset</code> commands.  Optionally, set value of <var>flag</var> to
<var>string</var>.
See <xref><xrefnodename>set clear value</xrefnodename><xrefprinteddesc><code>@set</code> <code>@clear</code> <code>@value</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage <var>on-off-odd</var></code></tableterm>
<item><para>Specify whether chapters start on new pages, and if so, whether on
odd-numbered (right-hand) new pages.  See <xref><xrefnodename>setchapternewpage</xrefnodename><xrefprinteddesc><code>@setchapternewpage</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@setcontentsaftertitlepage</code></tableterm>
<item><para>Put the table of contents after the <samp>@end titlepage</samp> even if the
<code>@contents</code> command is not there.  See <xref><xrefnodename>Contents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@setfilename <var>info-file-name</var></code></tableterm>
<item><para>Provide a name to be used by the Info file.  This command is essential
for &tex; formatting as well, even though it produces no output.
See <xref><xrefnodename>setfilename</xrefnodename><xrefprinteddesc><code>@setfilename</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@setshortcontentsaftertitlepage</code></tableterm>
<item><para>Place the short table of contents after the <samp>@end titlepage</samp>
command even if the <code>@shortcontents</code> command is not there.
See <xref><xrefnodename>Contents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@settitle <var>title</var></code></tableterm>
<item><para>Provide a title for page headers in a printed manual, and the default
document description for HTML <samp>&lt;head&gt;</samp>.
See <xref><xrefnodename>settitle</xrefnodename><xrefprinteddesc><code>@settitle</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@shortcontents</code></tableterm>
<item><para>Print a short table of contents.  Not relevant to Info, which uses
menus rather than tables of contents.  A synonym for
<code>@summarycontents</code>.  See <xref><xrefnodename>Contents</xrefnodename><xrefprinteddesc>Generating a Table of Contents</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@shorttitlepage <var>title</var></code></tableterm>
<item><para>Generate a minimal title page.  See <xref><xrefnodename>titlepage</xrefnodename><xrefprinteddesc><code>@titlepage</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@smallbook</code></tableterm>
<item><para>Cause &tex; to produce a printed manual in a 7 by 9.25 inch format
rather than the regular 8.5 by 11 inch format.  See <xref><xrefnodename>smallbook</xrefnodename><xrefprinteddesc>Printing Small Books</xrefprinteddesc></xref>.  Also, see <xref><xrefnodename>small</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@smalldisplay</code></tableterm>
<item><para>Begin a kind of example.  Like <code>@smallexample</code> (narrow margins, no
filling), but do not select the fixed-width font.  Pair with <code>@end
smalldisplay</code>.  See <xref><xrefnodename>small</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@smallexample</code></tableterm>
<item><para>Indent text to indicate an example.  Do not fill, select fixed-width
font, narrow the margins.  In printed manuals, print text in a smaller
font than with <code>@example</code>.  Pair with <code>@end smallexample</code>.
See <xref><xrefnodename>small</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@smallformat</code></tableterm>
<item><para>Begin a kind of example.  Like <code>@smalldisplay</code>, but do not narrow
the margins.  Pair with <code>@end smallformat</code>.  See <xref><xrefnodename>small</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@smalllisp</code></tableterm>
<item><para>Begin an example of Lisp code.  Same as <code>@smallexample</code>.  Pair
with <code>@end smalllisp</code>.  See <xref><xrefnodename>small</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@sp <var>n</var></code></tableterm>
<item><para>Skip <var>n</var> blank lines.  See <xref><xrefnodename>sp</xrefnodename><xrefprinteddesc><code>@sp</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@ss{}</code></tableterm>
<item><para>Generate the German sharp-S es-zet letter, &szlig;.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@strong {<var>text</var>}</code></tableterm>
<item><para>Emphasize <var>text</var> by typesetting it in a <strong>bold</strong> font for the
printed manual and by surrounding it with asterisks for Info.
See <xref><xrefnodename>emph &amp; strong</xrefnodename><xrefprinteddesc>Emphasizing Text</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@subheading <var>title</var></code></tableterm>
<item><para>Print an unnumbered subsection-like heading in the text, but not in
the table of contents of a printed manual.  In Info, the title is
underlined with hyphens.  See <xref><xrefnodename>unnumberedsubsec appendixsubsec subheading</xrefnodename><xrefprinteddesc><code>@unnumberedsubsec</code> <code>@appendixsubsec</code> <code>@subheading</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@subsection <var>title</var></code></tableterm>
<item><para>Begin a subsection within a section.  In a printed manual, the
subsection title is numbered and appears in the table of contents.  In
Info, the title is underlined with hyphens.  See <xref><xrefnodename>subsection</xrefnodename><xrefprinteddesc><code>@subsection</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@subsubheading <var>title</var></code></tableterm>
<item><para>Print an unnumbered subsubsection-like heading in the text, but not in
the table of contents of a printed manual.  In Info, the title is
underlined with periods.  See <xref><xrefnodename>subsubsection</xrefnodename><xrefprinteddesc>The `subsub' Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@subsubsection <var>title</var></code></tableterm>
<item><para>Begin a subsubsection within a subsection.  In a printed manual,
the subsubsection title is numbered and appears in the table of
contents.  In Info, the title is underlined with periods.
See <xref><xrefnodename>subsubsection</xrefnodename><xrefprinteddesc>The `subsub' Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@subtitle <var>title</var></code></tableterm>
<item><para>In a printed manual, set a subtitle in a normal sized font flush to
the right-hand side of the page.  Not relevant to Info, which does not
have title pages.  See <xref><xrefnodename>title subtitle author</xrefnodename><xrefprinteddesc><code>@title</code> <code>@subtitle</code> and <code>@author</code> Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@summarycontents</code></tableterm>
<item><para>Print a short table of contents.  Not relevant to Info, which uses
menus rather than tables of contents.  A synonym for
<code>@shortcontents</code>.  See <xref><xrefnodename>Contents</xrefnodename><xrefprinteddesc>Generating a Table of Contents</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@syncodeindex <var>from-index</var> <var>into-index</var></code></tableterm>
<item><para>Merge the index named in the first argument into the index named in
the second argument, printing the entries from the first index in
<code>@code</code> font.  See <xref><xrefnodename>Combining Indices</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@synindex <var>from-index</var> <var>into-index</var></code></tableterm>
<item><para>Merge the index named in the first argument into the index named in
the second argument.  Do not change the font of <var>from-index</var>
entries.  See <xref><xrefnodename>Combining Indices</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@t{<var>text</var>}</code></tableterm>
<item><para>Print <var>text</var> in a <tt>fixed-width</tt>, typewriter-like font.
No effect in Info.  See <xref><xrefnodename>Fonts</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@tab</code></tableterm>
<item><para>Separate columns in a multitable.  See <xref><xrefnodename>Multitable Rows</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@table <var>formatting-command</var></code></tableterm>
<item><para>Begin a two-column table, using <code>@item</code> for each entry.  Write
each first column entry on the same line as <code>@item</code>.  First
column entries are printed in the font resulting from
<var>formatting-command</var>.  Pair with <code>@end table</code>.
See <xref><xrefnodename>Two-column Tables</xrefnodename><xrefprinteddesc>Making a Two-column Table</xrefprinteddesc></xref>.
Also see <xref><xrefnodename>ftable vtable</xrefnodename><xrefprinteddesc><code>@ftable</code> and <code>@vtable</code></xrefprinteddesc></xref>,
and <xref><xrefnodename>itemx</xrefnodename><xrefprinteddesc><code>@itemx</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@TeX{}</code></tableterm>
<item><para>Insert the logo &tex;.  See <xref><xrefnodename>TeX and copyright</xrefnodename><xrefprinteddesc>Inserting &tex; and &copyright;</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@tex</code></tableterm>
<item><para>Enter &tex; completely.  Pair with <code>@end tex</code>.  See <xref><xrefnodename>Raw Formatter Commands</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@thischapter</code></tableterm>
<tableterm><code>@thischaptername</code></tableterm>
<tableterm><code>@thisfile</code></tableterm>
<tableterm><code>@thispage</code></tableterm>
<tableterm><code>@thistitle</code></tableterm>
<item><para>Only allowed in a heading or footing.  Stands for the number and name of
the current chapter (in the format `Chapter 1: Title'), the chapter name
only, the filename, the current page number, and the title of the
document, respectively.  See <xref><xrefnodename>Custom Headings</xrefnodename><xrefprinteddesc>How to Make Your Own Headings</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@tieaccent{<var>cc</var>}</code></tableterm>
<item><para>Generate a tie-after accent over the next two characters <var>cc</var>, as in
`oo['.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@tindex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of data types.  See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@title <var>title</var></code></tableterm>
<item><para>In a printed manual, set a title flush to the left-hand side of the
page in a larger than normal font and underline it with a black rule.
Not relevant to Info, which does not have title pages.  See <xref><xrefnodename>title subtitle author</xrefnodename><xrefprinteddesc>The <code>@title</code> <code>@subtitle</code> and <code>@author</code> Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@titlefont{<var>text</var>}</code></tableterm>
<item><para>In a printed manual, print <var>text</var> in a larger than normal font.
Not relevant to Info, which does not have title pages.
See <xref><xrefnodename>titlefont center sp</xrefnodename><xrefprinteddesc>The <code>@titlefont</code> <code>@center</code> and <code>@sp</code> Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@titlepage</code></tableterm>
<item><para>Indicate to Texinfo the beginning of the title page.  Write command on
a line of its own.  Pair with <code>@end titlepage</code>.  Nothing between
<code>@titlepage</code> and <code>@end titlepage</code> appears in Info.
See <xref><xrefnodename>titlepage</xrefnodename><xrefprinteddesc><code>@titlepage</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@today{}</code></tableterm>
<item><para>Insert the current date, in `1 Jan 1900' style.  See <xref><xrefnodename>Custom Headings</xrefnodename><xrefprinteddesc>How to Make Your Own Headings</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@top <var>title</var></code></tableterm>
<item><para>In a Texinfo file to be formatted with <code>makeinfo</code>, identify the
topmost <code>@node</code> in the file, which must be written on the line
immediately preceding the <code>@top</code> command.  Used for
<code>makeinfo</code>'s node pointer insertion feature.  The title is
underlined with asterisks.  Both the <code>@node</code> line and the <code>@top</code>
line normally should be enclosed by <code>@ifnottex</code> and <code>@end
ifnottex</code>.  In &tex; and <code>texinfo-format-buffer</code>, the <code>@top</code>
command is merely a synonym for <code>@unnumbered</code>.  See <xref><xrefnodename>makeinfo Pointer Creation</xrefnodename><xrefprinteddesc>Creating Pointers with <code>makeinfo</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@u{<var>c</var>}</code></tableterm>
<tableterm><code>@ubaraccent{<var>c</var>}</code></tableterm>
<tableterm><code>@udotaccent{<var>c</var>}</code></tableterm>
<item><para>Generate a breve, underbar, or underdot accent, respectively, over or
under the character <var>c</var>, as in o(, o_,
.o.  See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@unnumbered <var>title</var></code></tableterm>
<item><para>In a printed manual, begin a chapter that appears without chapter
numbers of any kind.  The title appears in the table of contents of a
printed manual.  In Info, the title is underlined with asterisks.
See <xref><xrefnodename>unnumbered &amp; appendix</xrefnodename><xrefprinteddesc><code>@unnumbered</code> and <code>@appendix</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@unnumberedsec <var>title</var></code></tableterm>
<item><para>In a printed manual, begin a section that appears without section
numbers of any kind.  The title appears in the table of contents of a
printed manual.  In Info, the title is underlined with equal signs.
See <xref><xrefnodename>unnumberedsec appendixsec heading</xrefnodename><xrefprinteddesc>Section Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@unnumberedsubsec <var>title</var></code></tableterm>
<item><para>In a printed manual, begin an unnumbered subsection within a
chapter.  The title appears in the table of contents of a printed
manual.  In Info, the title is underlined with hyphens.
See <xref><xrefnodename>unnumberedsubsec appendixsubsec subheading</xrefnodename><xrefprinteddesc><code>@unnumberedsubsec</code> <code>@appendixsubsec</code> <code>@subheading</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@unnumberedsubsubsec <var>title</var></code></tableterm>
<item><para>In a printed manual, begin an unnumbered subsubsection within a
chapter.  The title appears in the table of contents of a printed
manual.  In Info, the title is underlined with periods.
See <xref><xrefnodename>subsubsection</xrefnodename><xrefprinteddesc>The `subsub' Commands</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@uref{<var>url</var>[, <var>displayed-text</var>][, <var>replacement</var>}</code></tableterm>
<item><para>Define a cross reference to an external uniform resource locator for the
World Wide Web.  See <xref><xrefnodename>uref</xrefnodename><xrefprinteddesc><code>@uref</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@url{<var>url</var>}</code></tableterm>
<item><para>Indicate text that is a uniform resource locator for the World Wide
Web.  See <xref><xrefnodename>url</xrefnodename><xrefprinteddesc><code>@url</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@v{<var>c</var>}</code></tableterm>
<item><para>Generate check accent over the character <var>c</var>, as in o&lt;.
See <xref><xrefnodename>Inserting Accents</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@value{<var>flag</var>}</code></tableterm>
<item><para>Replace <var>flag</var> with the value to which it is set by <code>@set
<var>flag</var></code>.
See <xref><xrefnodename>set clear value</xrefnodename><xrefprinteddesc><code>@set</code> <code>@clear</code> <code>@value</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@var{<var>metasyntactic-variable</var>}</code></tableterm>
<item><para>Highlight a metasyntactic variable, which is something that stands for
another piece of text.  See <xref><xrefnodename>var</xrefnodename><xrefprinteddesc>Indicating Metasyntactic Variables</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@verb{<var>delim</var> <var>literal</var> <var>delim</var>}</code></tableterm>
<item><para>Output <var>literal</var>, delimited by the single character <var>delim</var>,
exactly as is (in the fixed-width font), including any whitespace or
Texinfo special characters.  See <xref><xrefnodename>verb</xrefnodename><xrefprinteddesc><code>verb</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@verbatim</code></tableterm>
<item><para>Output the text of the environment exactly as is (in the fixed-width
font).  Pair with <code>@end verbatim</code>.  See <xref><xrefnodename>verbatim</xrefnodename><xrefprinteddesc><code>verbatim</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@verbatiminclude <var>filename</var></code></tableterm>
<item><para>Output the contents of <var>filename</var> exactly as is (in the fixed-width font).
See <xref><xrefnodename>verbatiminclude</xrefnodename><xrefprinteddesc><code>verbatiminclude</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@vindex <var>entry</var></code></tableterm>
<item><para>Add <var>entry</var> to the index of variables.  See <xref><xrefnodename>Index Entries</xrefnodename><xrefprinteddesc>Defining the Entries of an Index</xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@vskip <var>amount</var></code></tableterm>
<item><para>In a printed manual, insert whitespace so as to push text on the
remainder of the page towards the bottom of the page.  Used in
formatting the copyright page with the argument <samp>0pt plus
1filll</samp>.  (Note spelling of <samp>filll</samp>.)  <code>@vskip</code> may be used
only in contexts ignored for Info.  See <xref><xrefnodename>Copyright</xrefnodename></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@vtable <var>formatting-command</var></code></tableterm>
<item><para>Begin a two-column table, using <code>@item</code> for each entry.
Automatically enter each of the items in the first column into the
index of variables.  Pair with <code>@end vtable</code>.  The same as
<code>@table</code>, except for indexing.  See <xref><xrefnodename>ftable vtable</xrefnodename><xrefprinteddesc><code>@ftable</code> and <code>@vtable</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@w{<var>text</var>}</code></tableterm>
<item><para>Prevent <var>text</var> from being split across two lines.  Do not end a
paragraph that uses <code>@w</code> with an <code>@refill</code> command.
See <xref><xrefnodename>w</xrefnodename><xrefprinteddesc><code>@w</code></xrefprinteddesc></xref>.
</para>
</item></tableitem><tableitem><tableterm><code>@xref{<var>node-name</var>, [<var>entry</var>], [<var>topic-or-title</var>], [<var>info-file</var>], [<var>manual</var>]}</code></tableterm>
<item><para>Make a reference that starts with `See' in a printed manual.  Follow
command with a punctuation mark.  Only the first argument is
mandatory.  See <xref><xrefnodename>xref</xrefnodename><xrefprinteddesc><code>@xref</code></xrefprinteddesc></xref>.
</para></item></tableitem></table>


</appendix>
</node>
<node>
<nodename>Tips</nodename>
<nodenext>Sample Texinfo Files</nodenext>
<nodeprev>Command List</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Tips and Hints</title>

<para>Here are some tips for writing Texinfo documentation:
</para>
<para><indexterm index="cp">Tips</indexterm><indexterm index="cp">Usage tips</indexterm><indexterm index="cp">Hints</indexterm></para><itemize><itemfunction>&bullet;</itemfunction><item>
<para>Write in the present tense, not in the past or the future.
</para>
</item>
<item>
<para>Write actively!  For example, write &ldquo;We recommend that &dots;&rdquo; rather
than &ldquo;It is recommended that &dots;&rdquo;.
</para>
</item>
<item>
<para>Use 70 or 72 as your fill column.  Longer lines are hard to read.
</para>
</item>
<item>
<para>Include a copyright notice and copying permissions.
</para></item>
</itemize>

<subsubheading>Index, Index, Index!</subsubheading>

<para>Write many index entries, in different ways.
Readers like indices; they are helpful and convenient.
</para>
<para>Although it is easiest to write index entries as you write the body of
the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.
</para>
<para>Here are more hints we have found valuable:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Write each index entry differently, so each entry refers to a different
place in the document.
</para>
</item>
<item>
<para>Write index entries only where a topic is discussed significantly.  For
example, it is not useful to index &ldquo;debugging information&rdquo; in a
chapter on reporting bugs.  Someone who wants to know about debugging
information will certainly not find it in that chapter.
</para>
</item>
<item>
<para>Consistently capitalize the first word of every concept index entry,
or else consistently use lower case.  Terse entries often call for
lower case; longer entries for capitalization.  Whichever case
convention you use, please use one or the other consistently!  Mixing
the two styles looks bad.
</para>
</item>
<item>
<para>Always capitalize or use upper case for those words in an index for
which this is proper, such as names of countries or acronyms.  Always
use the appropriate case for case-sensitive names, such as those in C or
Lisp.
</para>
</item>
<item>
<para>Write the indexing commands that refer to a whole section immediately
after the section command, and write the indexing commands that refer to
a paragraph before that paragraph.
</para>
<para>In the example that follows, a blank line comes after the index
entry for &ldquo;Leaping&rdquo;:
</para>
<example xml:space="preserve"><group>
@section The Dog and the Fox
@cindex Jumping, in general
@cindex Leaping

@cindex Dog, lazy, jumped over
@cindex Lazy dog jumped over
@cindex Fox, jumps over dog
@cindex Quick fox jumps over dog
The quick brown fox jumps over the lazy dog.
</group>
</example>
<para>(Note that the example shows entries for the same concept that are
written in different ways&mdash;<samp>Lazy dog</samp>, and <samp>Dog, lazy</samp>&mdash;so
readers can look up the concept in different ways.)
</para></item>
</itemize>

<subsubheading>Blank Lines</subsubheading>

<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Insert a blank line between a sectioning command and the first following
sentence or paragraph, or between the indexing commands associated with
the sectioning command and the first following sentence or paragraph, as
shown in the tip on indexing.  Otherwise, a formatter may fold title and
paragraph together.
</para>
</item>
<item>
<para>Always insert a blank line before an <code>@table</code> command and after an
<code>@end table</code> command; but never insert a blank line after an
<code>@table</code> command or before an <code>@end table</code> command.
</para>
<need></need><para>For example,
</para>
<example xml:space="preserve"><group>
Types of fox:

@table @samp
@item Quick
Jump over lazy dogs.
</group>

<group>
@item Brown
Also jump over lazy dogs.
@end table

</group>
<group>
@noindent
On the other hand, &dots;
</group>
</example>
<para>Insert blank lines before and after <code>@itemize</code> &dots; <code>@end
itemize</code> and <code>@enumerate</code> &dots; <code>@end enumerate</code> in the
same way.
</para></item>
</itemize>

<subsubheading>Complete Phrases</subsubheading>

<para>Complete phrases are easier to read than &dots;
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Write entries in an itemized list as complete sentences; or at least, as
complete phrases.  Incomplete expressions &dots; awkward &dots; like
this.
</para>
</item>
<item>
<para>Write the prefatory sentence or phrase for a multi-item list or table as
a complete expression.  Do not write &ldquo;You can set:&rdquo;; instead, write
&ldquo;You can set these variables:&rdquo;.  The former expression sounds cut off.
</para></item>
</itemize>

<subsubheading>Editions, Dates and Versions</subsubheading>

<para>Include edition numbers, version numbers, and dates in the
<code>@copying</code> text (for people reading the Texinfo file, and for the
legal copyright in the output files).  Then use <code>@insertcopying</code>
in the <code>@titlepage</code> section (for people reading the printed
output) and the Top node (for people reading the online output).
</para>
<para>It is easiest to do this using <code>@set</code> and <code>@value</code>.
See <xref><xrefnodename>value Example</xrefnodename><xrefprinteddesc><code>@value</code> Example</xrefprinteddesc></xref>, and <xref><xrefnodename>GNU Sample Texts</xrefnodename></xref>.
</para>

<subsubheading>Definition Commands</subsubheading>

<para>Definition commands are <code>@deffn</code>, <code>@defun</code>,
<code>@defmac</code>, and the like, and enable you to write descriptions in
a uniform format.
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Write just one definition command for each entity you define with a
definition command.  The automatic indexing feature creates an index
entry that leads the reader to the definition.
</para>
</item>
<item>
<para>Use <code>@table</code> &dots; <code>@end table</code> in an appendix that
contains a summary of functions, not <code>@deffn</code> or other definition
commands.
</para></item>
</itemize>

<subsubheading>Capitalization</subsubheading>

<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Capitalize &ldquo;Texinfo&rdquo;; it is a name.  Do not write the <samp>x</samp> or
<samp>i</samp> in upper case.
</para>
</item>
<item>
<para>Capitalize &ldquo;Info&rdquo;; it is a name.
</para>
</item>
<item>
<para>Write &tex; using the <code>@TeX{}</code> command.  Note the uppercase
<samp>T</samp> and <samp>X</samp>.  This command causes the formatters to
typeset the name according to the wishes of Donald Knuth, who wrote
&tex;.
</para></item>
</itemize>

<subsubheading>Spaces</subsubheading>

<para>Do not use spaces to format a Texinfo file, except inside of
<code>@example</code> &dots; <code>@end example</code> and similar commands.
</para>
<need></need><para>For example, &tex; fills the following:
</para>
<example xml:space="preserve"><group>
    @kbd{C-x v}
    @kbd{M-x vc-next-action}
       Perform the next logical operation
       on the version-controlled file
       corresponding to the current buffer.
</group>
</example>
<need></need><para>so it looks like this:
</para>

<para>In this case, the text should be formatted with
<code>@table</code>, <code>@item</code>, and <code>@itemx</code>, to create a table.
</para>
<subsubheading>@code, @samp, @var, and <samp>---</samp></subsubheading>

<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Use <code>@code</code> around Lisp symbols, including command names.
For example,
</para>
<example xml:space="preserve">The main function is @code{vc-next-action}, &dots;
</example>
</item>
<item>
<para>Avoid putting letters such as <samp>s</samp> immediately after an
<samp>@code</samp>.  Such letters look bad.
</para>
</item>
<item>
<para>Use <code>@var</code> around meta-variables.  Do not write angle brackets
around them.
</para>
</item>
<item>
<para>Use three hyphens in a row, <samp>---</samp>, to indicate a long dash.  &tex;
typesets these as a long dash and the Info formatters reduce three
hyphens to two.
</para></item>
</itemize>

<subsubheading>Periods Outside of Quotes</subsubheading>

<para>Place periods and other punctuation marks <emph>outside</emph> of quotations,
unless the punctuation is part of the quotation.  This practice goes
against publishing conventions in the United States, but enables the
reader to distinguish between the contents of the quotation and the
whole passage.
</para>
<para>For example, you should write the following sentence with the period
outside the end quotation marks:
</para>
<example xml:space="preserve">Evidently, <samp>au</samp> is an abbreviation for ``author''.
</example>
<para>since <samp>au</samp> does <emph>not</emph> serve as an  abbreviation for
<samp>author.</samp> (with a period following the word).
</para>
<subsubheading>Introducing New Terms</subsubheading>

<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Introduce new terms so that a reader who does not know them can
understand them from context; or write a definition for the term.
</para>
<para>For example, in the following, the terms &ldquo;check in&rdquo;, &ldquo;register&rdquo; and
&ldquo;delta&rdquo; are all appearing for the first time; the example sentence should be
rewritten so they are understandable.
</para>
<quotation>
<para>The major function assists you in checking in a file to your
version control system and registering successive sets of changes to
it as deltas.
</para></quotation>

</item>
<item>
<para>Use the <code>@dfn</code> command around a word being introduced, to indicate
that the reader should not expect to know the meaning already, and
should expect to learn the meaning from this passage.
</para></item>
</itemize>

<subsubheading>@pxref</subsubheading>

<!-- !!! maybe include this in the tips on pxref -->
<para>Absolutely never use <code>@pxref</code> except in the special context for
which it is designed: inside parentheses, with the closing parenthesis
following immediately after the closing brace.  One formatter
automatically inserts closing punctuation and the other does not.  This
means that the output looks right both in printed output and in an Info
file, but only when the command is used inside parentheses.
</para>
<subsubheading>Invoking from a Shell</subsubheading>

<para>You can invoke programs such as Emacs, GCC, and <code>gawk</code> from a
shell.  The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, they are difficult for users to find.
</para>
<para>So, there is a convention to name such sections with a phrase beginning
with the word `Invoking', as in `Invoking Emacs'; this way, users can
find the section easily.
</para>

<subsubheading>ANSI C Syntax</subsubheading>

<para>When you use <code>@example</code> to describe a C function's calling
conventions, use the ANSI C syntax, like this:
</para>
<example xml:space="preserve">void dld_init (char *@var{path});
</example>
<para>And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with
<code>@var</code>.
</para>
<need></need><para>Avoid the obsolete style that looks like this:
</para>
<example xml:space="preserve">#include &lt;dld.h&gt;

dld_init (path)
char *path;
</example>
<para>Also, it is best to avoid writing <code>#include</code> above the
declaration just to indicate that the function is declared in a
header file.  The practice may give the misimpression that the
<code>#include</code> belongs near the declaration of the function.  Either
state explicitly which header file holds the declaration or, better
yet, name the header file used for a group of functions at the
beginning of the section that describes the functions.
</para>
<subsubheading>Bad Examples</subsubheading>

<para>Here are several examples of bad writing to avoid:
</para>
<para>In this example, say, &ldquo; &dots; you must <code>@dfn</code>{check
in} the new version.&rdquo;  That flows better.
</para>
<quotation>
<para>When you are done editing the file, you must perform a
<code>@dfn</code>{check in}.
</para></quotation>

<para>In the following example, say, &ldquo;&dots; makes a unified interface such as VC
mode possible.&rdquo;
</para>
<quotation>
<para>SCCS, RCS and other version-control systems all perform similar
functions in broadly similar ways (it is this resemblance which makes
a unified control mode like this possible).
</para></quotation>

<para>And in this example, you should specify what `it' refers to:
</para>
<quotation>
<para>If you are working with other people, it assists in coordinating
everyone's changes so they do not step on each other.
</para></quotation>

<subsubheading>And Finally &dots;</subsubheading>

<itemize><itemfunction>&bullet;</itemfunction><item>
<para>Pronounce &tex; as if the <samp>X</samp> were a Greek `chi', as the last
sound in the name `Bach'.  But pronounce Texinfo as in `speck':
&ldquo;teckinfo&rdquo;.
</para>
</item>
<item>
<para>Write notes for yourself at the very end of a Texinfo file after the
<code>@bye</code>.  None of the formatters process text after the
<code>@bye</code>; it is as if the text were within <code>@ignore</code> &dots;
<code>@end ignore</code>.
</para></item>
</itemize>


</appendix>
</node>
<node>
<nodename>Sample Texinfo Files</nodename>
<nodenext>Include Files</nodenext>
<nodeprev>Tips</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Sample Texinfo Files</title>
<para><indexterm index="cp">Sample Texinfo files</indexterm></para>
<para>The first example is from the first chapter (see <xref><xrefnodename>Short Sample</xrefnodename></xref>),
given here in its entirety, without commentary.  The second sample
includes the full texts to be used in GNU manuals.
</para>
<menu>
<menuentry>
<menunode> Short Sample Texinfo File</menunode>
<menutitle> Short Sample Texinfo File</menutitle>
<menucomment>   
</menucomment>
</menuentry><menuentry>
<menunode> GNU Sample Texts</menunode>
<menutitle> GNU Sample Texts</menutitle>
<menucomment>            
</menucomment>
</menuentry></menu>


</appendix>
</node>
<node>
<nodename>Short Sample Texinfo File</nodename>
<nodenext>GNU Sample Texts</nodenext>
<nodeup>Sample Texinfo Files</nodeup>
<section>
<title>Short Sample</title>
<para><indexterm index="cp">Sample Texinfo file, no comments</indexterm></para>
<para>Here is a complete, short sample Texinfo file, without any commentary.
You can see this file, with comments, in the first chapter.  See <xref><xrefnodename>Short Sample</xrefnodename></xref>.
</para>
<para>In a nutshell: The <command>makeinfo</command> program transforms a Texinfo
source file such as this into an Info file or HTML; and &tex; typesets
it for a printed manual.
</para>

<sp lines="1"></sp>
<example xml:space="preserve">\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sample.info
@settitle Sample Manual 1.0
@c %**end of header

@copying
This is a short example of a complete Texinfo file.

Copyright (C) 2002 Free Software Foundation, Inc.
@end copying

@titlepage
@title Sample Title
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top

@insertcopying
@end ifnottex

@menu
* First Chapter::    The first chapter is the
                       only chapter in this sample.
* Index::            Complete index.
@end menu


@node First Chapter
@chapter First Chapter

@cindex chapter, first

This is the first chapter.
@cindex index entry, another

Here is a numbered list.

@enumerate
@item
This is the first item.

@item
This is the second item.
@end enumerate


@node Index
@unnumbered Index

@printindex cp

@bye
</example>

</section>
</node>
<node>
<nodename>GNU Sample Texts</nodename>
<nodeprev>Short Sample Texinfo File</nodeprev>
<nodeup>Sample Texinfo Files</nodeup>
<section>
<title>GNU Sample Texts</title>

<para><indexterm index="cp">GNU sample texts</indexterm><indexterm index="cp">Sample texts, GNU</indexterm><indexterm index="cp">Full texts, GNU</indexterm></para>
<para>Here is a sample Texinfo document with the full texts that should be
used in GNU manuals.
</para>
<para>As well as the legal texts, it also serves as a practical example of how
many elements in a GNU system can affect the manual.  If you're not
familiar with all these different elements, don't worry.  They're not
required and a perfectly good manual can be written without them.
They're included here nonetheless because many manuals do (or could)
benefit from them.
</para>
<para>See <xref><xrefnodename>Short Sample</xrefnodename></xref>, for a minimal example of a Texinfo file.
See <xref><xrefnodename>Beginning a File</xrefnodename></xref>, for a full explanation of that minimal
example.
</para>
<para>Here are some notes on the example:
</para>
<itemize><itemfunction>&bullet;</itemfunction><item>
<para><indexterm index="cp">$ <!-- Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $ comment -->
</indexterm><indexterm index="cp">CVS Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $, in Texinfo</indexterm><indexterm index="cp">RCS Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $, in Texinfo</indexterm>The <samp>Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $</samp> comment is for CVS (see <xref><xrefnodename>Top</xrefnodename><xrefprinteddesc>Overview</xrefprinteddesc><xrefinfofile>cvs</xrefinfofile><xrefprintedname>Concurrent Versions System</xrefprintedname></xref>) or RCS (see rcsintro(1)) version control
systems, which expand it into a string such as:
</para><example xml:space="preserve">Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $
</example><para>(This is useful in all sources that use version control, not just manuals.)
</para>
</item>
<item>
<para><indexterm index="cp">automake<r>, and version info</r></indexterm>The <file>version.texi</file> in the <code>@include</code> command is maintained
automatically by Automake (see <xref><xrefnodename>Top</xrefnodename><xrefprinteddesc>Introduction</xrefprinteddesc><xrefinfofile>automake</xrefinfofile><xrefprintedname>GNU Automake</xrefprintedname></xref>).  It sets the <samp>VERSION</samp> and <samp>UPDATED</samp> values used
elsewhere.  If your distribution doesn't use Automake, you can mimic
these or equivalent settings.
</para>
</item>
<item>
<para>The <code>@syncodeindex</code> command reflects the recommendation to use only
one index if at all possible, to make it easier for readers.
</para>
</item>
<item>
<para>The <code>@dircategory</code> is for constructing the Info directory.
See <xref><xrefnodename>Installing Dir Entries</xrefnodename></xref>, which includes a variety of recommended
category names.
</para>
</item>
<item>
<para>The `Invoking' node is a GNU standard to help users find the basic
information about command-line usage of a given program.  See <xref><xrefnodename>Manual Structure Details</xrefnodename><xrefinfofile>standards</xrefinfofile><xrefprintedname>GNU Coding Standards</xrefprintedname></xref>.
</para>
</item>
<item>
<para>It is best to include the entire GNU Free Documentation License in a GNU
manual, unless the manual is only a few pages long.  Of course this
sample is even shorter than that, but it includes the FDL anyway in
order to show one conventional way of doing so.  The <file>fdl.texi</file>
file is available on the GNU machines (and in the Texinfo and other GNU
distributions).
</para>
<para>The FDL provides for omitting itself under certain conditions, but in
that case the sample texts given here have to be modified.  See <xref><xrefnodename>GNU Free Documentation License</xrefnodename></xref>.
</para>
</item>
<item>
<para>If your manual has invariant sections (again, see the license itself for
details), then don't forget to include them.
</para></item>
</itemize>

<para>Here is the sample document:
</para>
<!-- We do the first part of this with @example instead of @verbatim -->
<!-- because the literal @setfilename and @include confuse Automake.  Argh. -->
<example xml:space="preserve">\input texinfo    @c -*-texinfo-*-
@comment Id: texinfo.txi,v 1.2 2003/02/24 18:17:06 pertusus Exp $
@comment %**start of header
@setfilename sample.info
@include version.texi
@settitle GNU Sample @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for GNU Sample
(version @value{VERSION}, @value{UPDATED}),
which is an example in the Texinfo documentation.

Copyright @copyright{} 2002 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* sample: (sample)Invoking sample.    
@end direntry

@titlepage
@title GNU Sample
@subtitle for version @value{VERSION}, @value{UPDATED}
@author A.U. Thor (@email{bug-texinfo@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Sample

@insertcopying
@end ifnottex

@menu
* Invoking sample::
* Copying This Manual::
* Index::
@end menu


@node Invoking sample
@chapter Invoking sample

@pindex sample
@cindex invoking @command{sample}

This is a sample manual.  There is no sample program to
invoke, but if there was, you could see its basic usage
and command line options here.


@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye
</example>

</section>
</node>
<node>
<nodename>Include Files</nodename>
<nodenext>Headings</nodenext>
<nodeprev>Sample Texinfo Files</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Include Files</title>
<para><indexterm index="cp">Include files</indexterm></para>
<para>When &tex; or an Info formatting command sees an <code>@include</code>
command in a Texinfo file, it processes the contents of the file named
by the command and incorporates them into the DVI or Info file being
created.  Index entries from the included file are incorporated into
the indices of the output file.
</para>
<para>Include files let you keep a single large document as a collection of
conveniently small parts.
</para>
<menu>
<menuentry>
<menunode> Using Include Files</menunode>
<menutitle> Using Include Files</menutitle>
<menucomment>         How to use the <code>@include</code> command.
</menucomment>
</menuentry><menuentry>
<menunode> texinfo-multiple-files-update</menunode>
<menutitle> texinfo-multiple-files-update</menutitle>
<menucomment>  How to create and update nodes and
                                  menus when using included files.
</menucomment>
</menuentry><menuentry>
<menunode> Include File Requirements</menunode>
<menutitle> Include File Requirements</menutitle>
<menucomment>   What <code>texinfo-multiple-files-update</code> expects.
</menucomment>
</menuentry><menuentry>
<menunode> Sample Include File</menunode>
<menutitle> Sample Include File</menutitle>
<menucomment>         A sample outer file with included files
                                  within it; and a sample included file.
</menucomment>
</menuentry><menuentry>
<menunode> Include Files Evolution</menunode>
<menutitle> Include Files Evolution</menutitle>
<menucomment>     How use of the <code>@include</code> command
                                  has changed over time.
</menucomment>
</menuentry></menu>

</appendix>
</node>
<node>
<nodename>Using Include Files</nodename>
<nodenext>texinfo-multiple-files-update</nodenext>
<nodeprev>Include Files</nodeprev>
<nodeup>Include Files</nodeup>
<section>
<title>How to Use Include Files</title>
<para><indexterm index="fn">include</indexterm></para>
<para>To include another file within a Texinfo file, write the
<code>@include</code> command at the beginning of a line and follow it on
the same line by the name of a file to be included.  For
example:
</para>
<example xml:space="preserve">@include buffers.texi
</example>
<para>An included file should simply be a segment of text that you expect to
be included as is into the overall or <dfn>outer</dfn> Texinfo file; it
should not contain the standard beginning and end parts of a Texinfo
file.  In particular, you should not start an included file with a
line saying <samp>\input texinfo</samp>; if you do, that phrase is inserted
into the output file as is.  Likewise, you should not end an included
file with an <code>@bye</code> command; nothing after <code>@bye</code> is
formatted.
</para>
<para>In the past, you were required to write an <code>@setfilename</code> line at the
beginning of an included file, but no longer.  Now, it does not matter
whether you write such a line.  If an <code>@setfilename</code> line exists
in an included file, it is ignored.
</para>
<para>Conventionally, an included file begins with an <code>@node</code> line that
is followed by an <code>@chapter</code> line.  Each included file is one
chapter.  This makes it easy to use the regular node and menu creating
and updating commands to create the node pointers and menus within the
included file.  However, the simple Emacs node and menu creating and
updating commands do not work with multiple Texinfo files.  Thus you
cannot use these commands to fill in the `Next', `Previous', and `Up'
pointers of the <code>@node</code> line that begins the included file.  Also,
you cannot use the regular commands to create a master menu for the
whole file.  Either you must insert the menus and the `Next',
`Previous', and `Up' pointers by hand, or you must use the GNU Emacs
Texinfo mode command, <code>texinfo-multiple-files-update</code>, that is
designed for <code>@include</code> files.
</para>
</section>
</node>
<node>
<nodename>texinfo-multiple-files-update</nodename>
<nodenext>Include File Requirements</nodenext>
<nodeprev>Using Include Files</nodeprev>
<nodeup>Include Files</nodeup>
<section>
<title><code>texinfo-multiple-files-update</code></title>
<para><indexterm index="fn">texinfo-multiple-files-update</indexterm></para>
<para>GNU Emacs Texinfo mode provides the <code>texinfo-multiple-files-update</code>
command.  This command creates or updates `Next', `Previous', and `Up'
pointers of included files as well as those in the outer or overall
Texinfo file, and it creates or updates a main menu in the outer file.
Depending whether you call it with optional arguments, the command
updates only the pointers in the first <code>@node</code> line of the
included files or all of them:
</para>
<table><tableitem><tableterm><kbd>M-x texinfo-multiple-files-update</kbd></tableterm>
<item><para>Called without any arguments:
</para>
<itemize><itemfunction>&minus;</itemfunction><item>
<para>Create or update the `Next', `Previous', and `Up' pointers of the
first <code>@node</code> line in each file included in an outer or overall
Texinfo file.
</para>
</item>
<item>
<para>Create or update the `Top' level node pointers of the outer or
overall file.
</para>
</item>
<item>
<para>Create or update a main menu in the outer file.
</para></item>
</itemize>

</item></tableitem><tableitem><tableterm><kbd>C-u M-x texinfo-multiple-files-update</kbd></tableterm>
<item><para>Called with <kbd>C-u</kbd> as a prefix argument:
</para>
<itemize><itemfunction>&minus;</itemfunction><item>
<para>Create or update pointers in the first <code>@node</code> line in each
included file.
</para>
</item>
<item>
<para>Create or update the `Top' level node pointers of the outer file.
</para>
</item>
<item>
<para>Create and insert a master menu in the outer file.  The master menu
is made from all the menus in all the included files.
</para></item>
</itemize>

</item></tableitem><tableitem><tableterm><kbd>C-u 8 M-x texinfo-multiple-files-update</kbd></tableterm>
<item><para>Called with a numeric prefix argument, such as <kbd>C-u 8</kbd>:
</para>
<itemize><itemfunction>&minus;</itemfunction><item>
<para>Create or update <strong>all</strong> the `Next', `Previous', and `Up' pointers
of all the included files.
</para>
</item>
<item>
<para>Create or update <strong>all</strong> the menus of all the included
files.
</para>
</item>
<item>
<para>Create or update the `Top' level node pointers of the outer or
overall file.
</para>
</item>
<item>
<para>And then create a master menu in the outer file.  This is similar to
invoking <code>texinfo-master-menu</code> with an argument when you are
working with just one file.
</para></item>
</itemize>
</item></tableitem></table>

<para>Note the use of the prefix argument in interactive use: with a regular
prefix argument, just <kbd>C-u</kbd><!-- /@w -->, the
<code>texinfo-multiple-files-update</code> command inserts a master menu;
with a numeric prefix argument, such as <kbd>C-u 8</kbd>, the command
updates <strong>every</strong> pointer and menu in <strong>all</strong> the files and then inserts a
master menu.
</para>

</section>
</node>
<node>
<nodename>Include File Requirements</nodename>
<nodenext>Sample Include File</nodenext>
<nodeprev>texinfo-multiple-files-update</nodeprev>
<nodeup>Include Files</nodeup>
<section>
<title>Include File Requirements</title>
<para><indexterm index="cp">Include file requirements</indexterm><indexterm index="cp">Requirements for include files</indexterm></para>
<para>If you plan to use the <code>texinfo-multiple-files-update</code> command,
the outer Texinfo file that lists included files within it should
contain nothing but the beginning and end parts of a Texinfo file, and
a number of <code>@include</code> commands listing the included files.  It
should not even include indices, which should be listed in an included
file of their own.
</para>
<para>Moreover, each of the included files must contain exactly one highest
level node (conventionally, <code>@chapter</code> or equivalent),
and this node must be the first node in the included file.
Furthermore, each of these highest level nodes in each included file
must be at the same hierarchical level in the file structure.
Usually, each is an <code>@chapter</code>, an <code>@appendix</code>, or an
<code>@unnumbered</code> node.  Thus, normally, each included file contains
one, and only one, chapter or equivalent-level node.
</para>
<para>The outer file should contain only <emph>one</emph> node, the `Top' node.  It
should <emph>not</emph> contain any nodes besides the single `Top' node.  The
<code>texinfo-multiple-files-update</code> command will not process
them.
</para>
</section>
</node>
<node>
<nodename>Sample Include File</nodename>
<nodenext>Include Files Evolution</nodenext>
<nodeprev>Include File Requirements</nodeprev>
<nodeup>Include Files</nodeup>
<section>
<title>Sample File with <code>@include</code></title>
<para><indexterm index="cp">Sample <code>@include</code> file</indexterm><indexterm index="cp">Include file sample</indexterm><indexterm index="cp"><code>@include</code> file sample</indexterm></para>
<para>Here is an example of a complete outer Texinfo file with <code>@include</code> files
within it before running <code>texinfo-multiple-files-update</code>, which
would insert a main or master menu:
</para>
<example xml:space="preserve"><group>
\input texinfo @c -*-texinfo-*-
<!-- %**start of header -->
@setfilename  include-example.info
@settitle Include Example
<!-- %**end of header -->
</group>

<group>
@setchapternewpage odd
@titlepage
@sp 12
@center @titlefont{Include Example}
@sp 2
@center by Whom Ever
</group>

<group>
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2002 Free Software Foundation, Inc.
@end titlepage
</group>

<group>
@ifinfo
@node Top, First, , (dir)
@top Master Menu
@end ifinfo
</group>

<group>
@include foo.texinfo
@include bar.texinfo
@include concept-index.texinfo
</group>

<group>
@summarycontents
@contents

@bye
</group>
</example>
<para>An included file, such as <file>foo.texinfo</file>, might look like this:
</para>
<example xml:space="preserve"><group>
@node First, Second, , Top
@chapter First Chapter

Contents of first chapter &dots;
</group>
</example>
<para>The full contents of <file>concept-index.texinfo</file> might be as simple as this:
</para>
<example xml:space="preserve"><group>
@node Concept Index
@unnumbered Concept Index

@printindex cp
</group>
</example>
<para>The outer Texinfo source file for <cite>The GNU Emacs Lisp Reference
Manual</cite> is named <file>elisp.texi</file>.  This outer file contains a master
menu with 417 entries and a list of 41 <code>@include</code>
files.
</para>

</section>
</node>
<node>
<nodename>Include Files Evolution</nodename>
<nodeprev>Sample Include File</nodeprev>
<nodeup>Include Files</nodeup>
<section>
<title>Evolution of Include Files</title>

<para>When Info was first created, it was customary to create many small
Info files on one subject.  Each Info file was formatted from its own
Texinfo source file.  This custom meant that Emacs did not need to
make a large buffer to hold the whole of a large Info file when
someone wanted information; instead, Emacs allocated just enough
memory for the small Info file that contained the particular
information sought.  This way, Emacs could avoid wasting memory.
</para>
<para>References from one file to another were made by referring to the file
name as well as the node name. (See <xref><xrefnodename>Other Info Files</xrefnodename><xrefprinteddesc>Referring to Other Info Files</xrefprinteddesc></xref>.  Also, see <xref><xrefnodename>Four and Five Arguments</xrefnodename><xrefprinteddesc><code>@xref</code> with Four and Five Arguments</xrefprinteddesc></xref>.)
</para>
<para>Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so &tex;
could automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint
indices; each of the individual Texinfo files had to be formatted for
Info individually.  (Each, therefore, required its own
<code>@setfilename</code> line.)
</para>
<para>However, because large Info files are now split automatically, it is
no longer necessary to keep them small.
</para>
<para>Nowadays, multiple Texinfo files are used mostly for large documents,
such as <cite>The GNU Emacs Lisp Reference Manual</cite>, and for projects
in which several different people write different sections of a
document simultaneously.
</para>
<para>In addition, the Info formatting commands have been extended to work
with the <code>@include</code> command so as to create a single large Info
file that is split into smaller files if necessary.  This means that
you can write menus and cross references without naming the different
Texinfo files.
</para>

</section>
</node>
<node>
<nodename>Headings</nodename>
<nodenext>Catching Mistakes</nodenext>
<nodeprev>Include Files</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Page Headings</title>
<para><indexterm index="cp">Headings</indexterm><indexterm index="cp">Footings</indexterm><indexterm index="cp">Page numbering</indexterm><indexterm index="cp">Page headings</indexterm><indexterm index="cp">Formatting headings and footings</indexterm></para>
<para>Most printed manuals contain headings along the top of every page
except the title and copyright pages.  Some manuals also contain
footings.  (Headings and footings have no meaning to Info, which is
not paginated.)
</para>
<menu>
<menuentry>
<menunode> Headings Introduced</menunode>
<menutitle> Headings Introduced</menutitle>
<menucomment>         Conventions for using page headings.
</menucomment>
</menuentry><menuentry>
<menunode> Heading Format</menunode>
<menutitle> Heading Format</menutitle>
<menucomment>              Standard page heading formats.
</menucomment>
</menuentry><menuentry>
<menunode> Heading Choice</menunode>
<menutitle> Heading Choice</menutitle>
<menucomment>              How to specify the type of page heading.
</menucomment>
</menuentry><menuentry>
<menunode> Custom Headings</menunode>
<menutitle> Custom Headings</menutitle>
<menucomment>             How to create your own headings and footings.
</menucomment>
</menuentry></menu>

</appendix>
</node>
<node>
<nodename>Headings Introduced</nodename>
<nodenext>Heading Format</nodenext>
<nodeprev>Headings</nodeprev>
<nodeup>Headings</nodeup>

<para>Texinfo provides standard page heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Typically, you will use these
formats, but you can specify your own format if you wish.
</para>
<para>In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.
</para>
<para>By convention, a book is printed on both sides of each sheet of paper.
When you open a book, the right-hand page is odd-numbered, and
chapters begin on right-hand pages&mdash;a preceding left-hand page is
left blank if necessary.  Reports, however, are often printed on just
one side of paper, and chapters begin on a fresh page immediately
following the end of the preceding chapter.  In short or informal
reports, chapters often do not begin on a new page at all, but are
separated from the preceding text by a small amount of whitespace.
</para>
<para>The <code>@setchapternewpage</code> command controls whether chapters begin
on new pages, and whether one of the standard heading formats is used.
In addition, Texinfo has several heading and footing commands that you
can use to generate your own heading and footing formats.
</para>
<para>In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the
right part is set flushright.
</para>
</node>
<node>
<nodename>Heading Format</nodename>
<nodenext>Heading Choice</nodenext>
<nodeprev>Headings Introduced</nodeprev>
<nodeup>Headings</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Standard Heading Formats</title>

<para>Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed
on both sides of the paper.
</para>
<para>By default, nothing is specified for the footing of a Texinfo file,
so the footing remains blank.
</para>
<para>The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page
number.
</para>
<need></need><para>A single-sided page looks like this:
</para>
<example xml:space="preserve"><group>
   _______________________
  |                       |
  | chapter   page number |
  |                       |
  | Start of text ...     |
  | ...                   |
  |                       |

</group>
</example>
<para>The standard format for two-sided printing depends on whether the page
number is even or odd.  By convention, even-numbered pages are on the
left- and odd-numbered pages are on the right.  (&tex; will adjust the
widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly&mdash;sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)
</para>
<para>In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
<code>@settitle</code> command).  The left part of the right-hand
(odd-numbered) page contains the name of the chapter, the central part
is blank, and the right part contains the page number.
</para>
<need></need><para>Two pages, side by side as in an open book, look like this:
</para>
<example xml:space="preserve"><group>
   _______________________     _______________________
  |                       |   |                       |
  | page number     title |   | chapter   page number |
  |                       |   |                       |
  | Start of text ...     |   | More  text ...        |
  | ...                   |   | ...                   |
  |                       |   |                       |

</group>
</example>
<para>The chapter name is preceded by the word &ldquo;Chapter&rdquo;, the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.
</para>
</section>
</node>
<node>
<nodename>Heading Choice</nodename>
<nodenext>Custom Headings</nodenext>
<nodeprev>Heading Format</nodeprev>
<nodeup>Headings</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Specifying the Type of Heading</title>

<para>&tex; does not begin to generate page headings for a standard Texinfo
file until it reaches the <code>@end titlepage</code> command.  Thus, the
title and copyright pages are not numbered.  The <code>@end
titlepage</code> command causes &tex; to begin to generate page headings
according to a standard format specified by the
<code>@setchapternewpage</code> command that precedes the
<code>@titlepage</code> section.
</para>
<need></need><para>There are four possibilities:
</para>
<table><tableitem><tableterm>No <code>@setchapternewpage</code> command</tableterm>
<item><para>Cause &tex; to specify the single-sided heading format, with chapters
on new pages. This is the same as <code>@setchapternewpage on</code>.
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage on</code></tableterm>
<item><para>Specify the single-sided heading format, with chapters on new pages.
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage off</code></tableterm>
<item><para>Cause &tex; to start a new chapter on the same page as the last page of
the preceding chapter, after skipping some vertical whitespace.  Also
cause &tex; to typeset for single-sided printing.  (You can override
the headers format with the <code>@headings double</code> command; see
<xref><xrefnodename>headings on off</xrefnodename><xrefprinteddesc>The <code>@headings</code> Command</xrefprinteddesc></xref>.)
</para>
</item></tableitem><tableitem><tableterm><code>@setchapternewpage odd</code></tableterm>
<item><para>Specify the double-sided heading format, with chapters on new pages.
</para></item></tableitem></table>

<para>Texinfo lacks an <code>@setchapternewpage even</code> command.
</para>
</section>
</node>
<node>
<nodename>Custom Headings</nodename>
<nodeprev>Heading Choice</nodeprev>
<nodeup>Headings</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>How to Make Your Own Headings</title>

<para>You can use the standard headings provided with Texinfo or specify
your own.  By default, Texinfo has no footers, so if you specify them,
the available page size for the main text will be slightly reduced.
</para>
<para>Texinfo provides six commands for specifying headings and
footings:
</para><itemize><itemfunction>&bullet;</itemfunction><item>
<para><code>@everyheading</code> <code>@everyfooting</code> generate page headers and
footers that are the same for both even- and odd-numbered pages.
</para></item>
<item>
<para><code>@evenheading</code> and <code>@evenfooting</code> command generate headers
and footers for even-numbered (left-hand) pages.
</para></item>
<item>
<para><code>@oddheading</code> and <code>@oddfooting</code> generate headers and footers
for odd-numbered (right-hand) pages.
</para></item>
</itemize>

<para>Write custom heading specifications in the Texinfo file immediately
after the <code>@end titlepage</code> command.
You must cancel the predefined heading commands with the
<code>@headings off</code> command before defining your own
specifications.
</para>
<need></need><para>Here is how to tell &tex; to place the chapter name at the left, the
page number in the center, and the date at the right of every header
for both even- and odd-numbered pages:
</para>
<example xml:space="preserve"><group>
@headings off
@everyheading @thischapter @| @thispage @| @today{}
</group>
</example>
<para>You need to divide the left part from the central part and the central
part from the right part by inserting <samp>@|</samp> between parts.
Otherwise, the specification command will not be able to tell where
the text for one part ends and the next part begins.
</para>
<para>Each part can contain text or @-commands.  The text
is printed as if the part were within an ordinary paragraph in the
body of the page.  The @-commands replace
themselves with the page number, date, chapter name, or
whatever.
</para>
<need></need><para>Here are the six heading and footing commands:
</para>
<para><indexterm index="fn">everyheading</indexterm><indexterm index="fn">everyfooting</indexterm></para><table><tableitem><tableterm><code>@everyheading <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<tableterm><code>@everyfooting <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<item>
<para>The `every' commands specify the format for both even- and odd-numbered
pages.  These commands are for documents that are printed on one side
of each sheet of paper, or for documents in which you want symmetrical
headers or footers.
</para>
<para><indexterm index="fn">evenheading</indexterm><indexterm index="fn">evenfooting</indexterm><indexterm index="fn">oddheading</indexterm><indexterm index="fn">oddfooting</indexterm></para></item></tableitem><tableitem><tableterm><code>@evenheading <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<tableterm><code>@oddheading  <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<tableterm><code>@evenfooting <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<tableterm><code>@oddfooting  <var>left</var> @| <var>center</var> @| <var>right</var></code></tableterm>
<item>
<para>The `even' and `odd' commands specify the format for even-numbered
pages and odd-numbered pages.  These commands are for books and
manuals that are printed on both sides of each sheet of paper.
</para></item></tableitem></table>

<para>Use the <samp>@this&dots;</samp> series of @-commands to
provide the names of chapters
and sections and the page number.  You can use the
<samp>@this&dots;</samp> commands in the left, center, or right portions
of headers and footers, or anywhere else in a Texinfo file so long as
they are between <code>@iftex</code> and <code>@end iftex</code> commands.
</para>
<need></need><para>Here are the <samp>@this&dots;</samp> commands:
</para>
<table><para><indexterm index="fn">thispage</indexterm></para><tableitem><tableterm><code>@thispage</code></tableterm>
<item><para>Expands to the current page number.
<!-- !!! Karl Berry says that `thissection' can fail on page breaks. -->
</para>
<para><indexterm index="fn">thischaptername</indexterm></para></item></tableitem><tableitem><tableterm><code>@thischaptername</code></tableterm>
<item><para>Expands to the name of the current chapter.
</para>
<para><indexterm index="fn">thischapter</indexterm></para></item></tableitem><tableitem><tableterm><code>@thischapter</code></tableterm>
<item><para>Expands to the number and name of the current
chapter, in the format `Chapter 1: Title'.
</para>
<para><indexterm index="fn">thistitle</indexterm></para></item></tableitem><tableitem><tableterm><code>@thistitle</code></tableterm>
<item><para>Expands to the name of the document, as specified by the
<code>@settitle</code> command.
</para>
<para><indexterm index="fn">thisfile</indexterm></para></item></tableitem><tableitem><tableterm><code>@thisfile</code></tableterm>
<item><para>For <code>@include</code> files only: expands to the name of the current
<code>@include</code> file.  If the current Texinfo source file is not an
<code>@include</code> file, this command has no effect.  This command does
<emph>not</emph> provide the name of the current Texinfo source file unless
it is an <code>@include</code> file.  (See <xref><xrefnodename>Include Files</xrefnodename></xref>, for more
information about <code>@include</code> files.)
</para></item></tableitem></table>

<para>You can also use the <code>@today{}</code> command, which expands to the
current date, in `1 Jan 1900' format.
<indexterm index="fn">today</indexterm></para>
<para>Other @-commands and text are printed in a header or footer just as
if they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:
</para>
<example xml:space="preserve"><group>
@headings off
@everyheading @emph{Draft!} @| @thispage @| @thischapter
@everyfooting @| @| Version: 0.27: @today{}
</group>
</example>
<para>Beware of overlong titles: they may overlap another part of the
header or footer and blot it out.
</para>

</section>
</node>
<node>
<nodename>Catching Mistakes</nodename>
<nodenext>Refilling Paragraphs</nodenext>
<nodeprev>Headings</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Formatting Mistakes</title>
<para><indexterm index="cp">Structure, catching mistakes in</indexterm><indexterm index="cp">Nodes, catching mistakes</indexterm><indexterm index="cp">Catching mistakes</indexterm><indexterm index="cp">Correcting mistakes</indexterm><indexterm index="cp">Mistakes, catching</indexterm><indexterm index="cp">Problems, catching</indexterm><indexterm index="cp">Debugging the Texinfo structure</indexterm></para>
<para>Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo: you can make mistakes with
@-commands, and you can make mistakes with the structure of the nodes
and chapters.
</para>
<para>Emacs has two tools for catching the @-command mistakes and two for
catching structuring mistakes.
</para>
<para>For finding problems with @-commands, you can run &tex; or a region
formatting command on the region that has a problem; indeed, you can
run these commands on each region as you write it.
</para>
<para>For finding problems with the structure of nodes and chapters, you can use
<kbd>C-c C-s</kbd> (<code>texinfo-show-structure</code>) and the related <code>occur</code>
command and you can use the <kbd>M-x Info-validate</kbd> command.
</para>
<menu>
<menuentry>
<menunode> makeinfo Preferred</menunode>
<menutitle> makeinfo Preferred</menutitle>
<menucomment>          <code>makeinfo</code> finds errors.
</menucomment>
</menuentry><menuentry>
<menunode> Debugging with Info</menunode>
<menutitle> Debugging with Info</menutitle>
<menucomment>         How to catch errors with Info formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Debugging with TeX</menunode>
<menutitle> Debugging with TeX</menutitle>
<menucomment>          How to catch errors with &tex; formatting.
</menucomment>
</menuentry><menuentry>
<menunode> Using texinfo-show-structure</menunode>
<menutitle> Using texinfo-show-structure</menutitle>
<menucomment>  How to use <code>texinfo-show-structure</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Using occur</menunode>
<menutitle> Using occur</menutitle>
<menucomment>                 How to list all lines containing a pattern.
</menucomment>
</menuentry><menuentry>
<menunode> Running Info-Validate</menunode>
<menutitle> Running Info-Validate</menutitle>
<menucomment>       How to find badly referenced nodes.
</menucomment>
</menuentry></menu>

</appendix>
</node>
<node>
<nodename>makeinfo Preferred</nodename>
<nodenext>Debugging with Info</nodenext>
<nodeprev>Catching Mistakes</nodeprev>
<nodeup>Catching Mistakes</nodeup>

<para>The <code>makeinfo</code> program does an excellent job of catching errors
and reporting them&mdash;far better than <code>texinfo-format-region</code> or
<code>texinfo-format-buffer</code>.  In addition, the various functions for
automatically creating and updating node pointers and menus remove
many opportunities for human error.
</para>
<para>If you can, use the updating commands to create and insert pointers
and menus.  These prevent many errors.  Then use <code>makeinfo</code> (or
its Texinfo mode manifestations, <code>makeinfo-region</code> and
<code>makeinfo-buffer</code>) to format your file and check for other
errors.  This is the best way to work with Texinfo.  But if you
cannot use <code>makeinfo</code>, or your problem is very puzzling, then you
may want to use the tools described in this appendix.
</para>
</node>
<node>
<nodename>Debugging with Info</nodename>
<nodenext>Debugging with TeX</nodenext>
<nodeprev>makeinfo Preferred</nodeprev>
<nodeup>Catching Mistakes</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Catching Errors with Info Formatting</title>
<para><indexterm index="cp">Catching errors with Info formatting</indexterm><indexterm index="cp">Debugging with Info formatting</indexterm></para>
<para>After you have written part of a Texinfo file, you can use the
<code>texinfo-format-region</code> or the <code>makeinfo-region</code> command to
see whether the region formats properly.
</para>
<para>Most likely, however, you are reading this section because for some
reason you cannot use the <code>makeinfo-region</code> command; therefore, the
rest of this section presumes that you are using
<code>texinfo-format-region</code>.
</para>
<para>If you have made a mistake with an @-command,
<code>texinfo-format-region</code> will stop processing at or after the
error and display an error message.  To see where in the buffer the
error occurred, switch to the <samp>*Info Region*</samp> buffer; the cursor
will be in a position that is after the location of the error.  Also,
the text will not be formatted after the place where the error
occurred (or more precisely, where it was detected).
</para>
<para>For example, if you accidentally end a menu with the command <code>@end
menus</code> with an `s' on the end, instead of with <code>@end menu</code>, you
will see an error message that says:
</para>
<example xml:space="preserve">@end menus is not handled by texinfo
</example>
<para>The cursor will stop at the point in the buffer where the error
occurs, or not long after it.  The buffer will look like this:
</para>
<example xml:space="preserve"><group>
---------- Buffer: *Info Region* ----------
* Menu:

* Using texinfo-show-structure::  How to use
                                  `texinfo-show-structure'
                                  to catch mistakes.
* Running Info-Validate::         How to check for
                                  unreferenced nodes.
@end menus
-!-
---------- Buffer: *Info Region* ----------
</group>
</example>
<para>The <code>texinfo-format-region</code> command sometimes provides slightly
odd error messages.  For example, the following cross reference fails to format:
</para>
<example xml:space="preserve">(@xref{Catching Mistakes, for more info.)
</example>
<para>In this case, <code>texinfo-format-region</code> detects the missing closing
brace but displays a message that says <samp>Unbalanced parentheses</samp>
rather than <samp>Unbalanced braces</samp>.  This is because the formatting
command looks for mismatches between braces as if they were
parentheses.
</para>
<para>Sometimes <code>texinfo-format-region</code> fails to detect mistakes.  For
example, in the following, the closing brace is swapped with the
closing parenthesis:
</para>
<example xml:space="preserve">(@xref{Catching Mistakes), for more info.}
</example>
<para>Formatting produces:
</para><example xml:space="preserve">(*Note for more info.: Catching Mistakes)
</example>
<para>The only way for you to detect this error is to realize that the
reference should have looked like this:
</para>
<example xml:space="preserve">(*Note Catching Mistakes::, for more info.)
</example>
<para>Incidentally, if you are reading this node in Info and type <kbd>f
<key>RET</key></kbd> (<code>Info-follow-reference</code>), you will generate an error
message that says:
</para>
<example xml:space="preserve">No such node: &quot;Catching Mistakes) The only way &dots;
</example>
<para>This is because Info perceives the example of the error as the first
cross reference in this node and if you type a <key>RET</key> immediately
after typing the Info <kbd>f</kbd> command, Info will attempt to go to the
referenced node.  If you type <kbd>f catch <key>TAB</key> <key>RET</key></kbd>, Info
will complete the node name of the correctly written example and take
you to the `Catching Mistakes' node.  (If you try this, you can return
from the `Catching Mistakes' node by typing <kbd>l</kbd>
(<code>Info-last</code>).)
</para>
<!-- !!! section on using Elisp debugger ignored. -->

</section>
</node>
<node>
<nodename>Debugging with TeX</nodename>
<nodenext>Using texinfo-show-structure</nodenext>
<nodeprev>Debugging with Info</nodeprev>
<nodeup>Catching Mistakes</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Catching Errors with &tex; Formatting</title>
<para><indexterm index="cp">Catching errors with &tex; formatting</indexterm><indexterm index="cp">Debugging with &tex; formatting</indexterm></para>
<para>You can also catch mistakes when you format a file with &tex;.
</para>
<para>Usually, you will want to do this after you have run
<code>texinfo-format-buffer</code> (or, better, <code>makeinfo-buffer</code>) on
the same file, because <code>texinfo-format-buffer</code> sometimes displays
error messages that make more sense than &tex;.  (See <xref><xrefnodename>Debugging with Info</xrefnodename></xref>, for more information.)
</para>
<para>For example, &tex; was run on a Texinfo file, part of which is shown
here:
</para>
<example xml:space="preserve">---------- Buffer: texinfo.texi ----------
name of the Texinfo file as an extension.  The
@samp{??} are `wildcards' that cause the shell to
substitute all the raw index files.  (@xref{sorting
indices, for more information about sorting
indices.)@refill
---------- Buffer: texinfo.texi ----------
</example>
<para>(The cross reference lacks a closing brace.)
&tex; produced the following output, after which it stopped:
</para>
<example xml:space="preserve">---------- Buffer: *tex-shell* ----------
Runaway argument?
{sorting indices, for more information about sorting
indices.) @refill @ETC.
! Paragraph ended before @xref was complete.
&lt;to be read again&gt;
                   @par
l.27

?
---------- Buffer: *tex-shell* ----------
</example>
<para>In this case, &tex; produced an accurate and
understandable error message:
</para>
<example xml:space="preserve">Paragraph ended before @xref was complete.
</example>
<para><samp>@par</samp> is an internal &tex; command of no relevance to Texinfo.
<samp>l.27</samp> means that &tex; detected the problem on line 27 of the
Texinfo file.  The <samp>?</samp> is the prompt &tex; uses in this
circumstance.
</para>
<para>Unfortunately, &tex; is not always so helpful, and sometimes you must
truly be a Sherlock Holmes to discover what went wrong.
</para>
<para>In any case, if you run into a problem like this, you can do one of three
things.
</para>
<enumerate first="1"><item>
<para>You can tell &tex; to continue running and ignore just this error by
typing <key>RET</key> at the <samp>?</samp> prompt.
</para>
</item>
<item>
<para>You can tell &tex; to continue running and to ignore all errors as best
it can by typing <kbd>r <key>RET</key></kbd> at the <samp>?</samp> prompt.
</para>
<para>This is often the best thing to do.  However, beware: the one error
may produce a cascade of additional error messages as its consequences
are felt through the rest of the file.  To stop &tex; when it is
producing such an avalanche of error messages, type <kbd>C-c</kbd> (or
<kbd>C-c C-c</kbd>, if you are running a shell inside Emacs).
</para>
</item>
<item>
<para>You can tell &tex; to stop this run by typing <kbd>x <key>RET</key></kbd>
at the <samp>?</samp> prompt.
</para></item>
</enumerate>

<para>If you are running &tex; inside Emacs, you need to switch to the shell
buffer and line at which &tex; offers the <samp>?</samp> prompt.
</para>
<para>Sometimes &tex; will format a file without producing error messages even
though there is a problem.  This usually occurs if a command is not ended
but &tex; is able to continue processing anyhow.  For example, if you fail
to end an itemized list with the <code>@end itemize</code> command, &tex; will
write a DVI file that you can print out.  The only error message that
&tex; will give you is the somewhat mysterious comment that
</para>
<example xml:space="preserve">(@end occurred inside a group at level 1)
</example>
<para>However, if you print the DVI file, you will find that the text
of the file that follows the itemized list is entirely indented as if
it were part of the last item in the itemized list.  The error message
is the way &tex; says that it expected to find an <code>@end</code>
command somewhere in the file; but that it could not determine where
it was needed.
</para>
<para>Another source of notoriously hard-to-find errors is a missing
<code>@end group</code> command.  If you ever are stumped by
incomprehensible errors, look for a missing <code>@end group</code> command
first.
</para>
<para>If the Texinfo file lacks header lines,
&tex; may stop in the
beginning of its run and display output that looks like the following.
The <samp>*</samp> indicates that &tex; is waiting for input.
</para>
<example xml:space="preserve">This is TeX, Version 3.14159 (Web2c 7.0)
(test.texinfo [1])
*
</example>
<para>In this case, simply type <kbd>\end <key>RET</key></kbd> after the asterisk.  Then
write the header lines in the Texinfo file and run the &tex; command
again. (Note the use of the backslash, <samp>\</samp>.  &tex; uses <samp>\</samp>
instead of <samp>@</samp>; and in this circumstance, you are working
directly with &tex;, not with Texinfo.)
</para>
</section>
</node>
<node>
<nodename>Using texinfo-show-structure</nodename>
<nodenext>Using occur</nodenext>
<nodeprev>Debugging with TeX</nodeprev>
<nodeup>Catching Mistakes</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Using <code>texinfo-show-structure</code></title>
<para><indexterm index="cp">Showing the structure of a file</indexterm><indexterm index="fn">texinfo-show-structure</indexterm></para>
<para>It is not always easy to keep track of the nodes, chapters, sections, and
subsections of a Texinfo file.  This is especially true if you are revising
or adding to a Texinfo file that someone else has written.
</para>
<para>In GNU Emacs, in Texinfo mode, the <code>texinfo-show-structure</code>
command lists all the lines that begin with the @-commands that
specify the structure: <code>@chapter</code>, <code>@section</code>,
<code>@appendix</code>, and so on.  With an argument (<kbd>C-u</kbd><!-- /@w -->
as prefix argument, if interactive),
the command also shows the <code>@node</code> lines.  The
<code>texinfo-show-structure</code> command is bound to <kbd>C-c C-s</kbd> in
Texinfo mode, by default.
</para>
<para>The lines are displayed in a buffer called the <samp>*Occur*</samp> buffer,
indented by hierarchical level.  For example, here is a part of what was
produced by running <code>texinfo-show-structure</code> on this manual:
</para>
<example xml:space="preserve"><group>
 Lines matching &quot;^@\\(chapter \\|sect\\|subs\\|subh\\|
 unnum\\|major\\|chapheading \\|heading \\|appendix\\)&quot;
 in buffer texinfo.texi.
 &dots;
 4177:@chapter Nodes
 4198:    @heading Two Paths
 4231:    @section Node and Menu Illustration
 4337:    @section The @code{@@node} Command
 4393:        @subheading Choosing Node and Pointer Names
 4417:        @subsection How to Write an @code{@@node} Line
 4469:        @subsection @code{@@node} Line Tips
 &dots;
</group>
</example>
<para>This says that lines 4337, 4393, and 4417 of <file>texinfo.texi</file> begin
with the <code>@section</code>, <code>@subheading</code>, and <code>@subsection</code>
commands respectively.  If you move your cursor into the <samp>*Occur*</samp>
window, you can position the cursor over one of the lines and use the
<kbd>C-c C-c</kbd> command (<code>occur-mode-goto-occurrence</code>), to jump to
the corresponding spot in the Texinfo file.  See <xref><xrefnodename>Other Repeating Search</xrefnodename><xrefprinteddesc>Using Occur</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>, for more
information about <code>occur-mode-goto-occurrence</code>.
</para>
<para>The first line in the <samp>*Occur*</samp> window describes the <dfn>regular
expression</dfn> specified by <var>texinfo-heading-pattern</var>.  This regular
expression is the pattern that <code>texinfo-show-structure</code> looks for.
See <xref><xrefnodename>Regexps</xrefnodename><xrefprinteddesc>Using Regular Expressions</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>,
for more information.
</para>
<para>When you invoke the <code>texinfo-show-structure</code> command, Emacs will
display the structure of the whole buffer.  If you want to see the
structure of just a part of the buffer, of one chapter, for example,
use the <kbd>C-x n n</kbd> (<code>narrow-to-region</code>) command to mark the
region.  (See <xref><xrefnodename>Narrowing</xrefnodename><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>.)  This is
how the example used above was generated.  (To see the whole buffer
again, use <kbd>C-x n w</kbd> (<code>widen</code>).)
</para>
<para>If you call <code>texinfo-show-structure</code> with a prefix argument by
typing <kbd>C-u C-c C-s</kbd><!-- /@w -->, it will list lines beginning with
<code>@node</code> as well as the lines beginning with the @-sign commands
for <code>@chapter</code>, <code>@section</code>, and the like.
</para>
<para>You can remind yourself of the structure of a Texinfo file by looking at
the list in the <samp>*Occur*</samp> window; and if you have mis-named a node
or left out a section, you can correct the mistake.
</para>
</section>
</node>
<node>
<nodename>Using occur</nodename>
<nodenext>Running Info-Validate</nodenext>
<nodeprev>Using texinfo-show-structure</nodeprev>
<nodeup>Catching Mistakes</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Using <code>occur</code></title>
<para><indexterm index="cp">Occurrences, listing with <code>@occur</code></indexterm><indexterm index="fn">occur</indexterm></para>
<para>Sometimes the <code>texinfo-show-structure</code> command produces too much
information.  Perhaps you want to remind yourself of the overall structure
of a Texinfo file, and are overwhelmed by the detailed list produced by
<code>texinfo-show-structure</code>.  In this case, you can use the <code>occur</code>
command directly.  To do this, type
</para>
<example xml:space="preserve"><kbd>M-x occur</kbd>
</example>
<para>and then, when prompted, type a <dfn>regexp</dfn>, a regular expression for
the pattern you want to match.  (See <xref><xrefnodename>Regexps</xrefnodename><xrefprinteddesc>Regular Expressions</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>.)  The <code>occur</code> command works from
the current location of the cursor in the buffer to the end of the
buffer.  If you want to run <code>occur</code> on the whole buffer, place
the cursor at the beginning of the buffer.
</para>
<para>For example, to see all the lines that contain the word
<samp>@chapter</samp> in them, just type <samp>@chapter</samp>.  This will
produce a list of the chapters.  It will also list all the sentences
with <samp>@chapter</samp> in the middle of the line.
</para>
<para>If you want to see only those lines that start with the word
<samp>@chapter</samp>, type <samp>^@chapter</samp> when prompted by
<code>occur</code>.  If you want to see all the lines that end with a word
or phrase, end the last word with a <samp>$</samp>; for example,
<samp>catching mistakes$</samp>.  This can be helpful when you want to see
all the nodes that are part of the same chapter or section and
therefore have the same `Up' pointer.
</para>
<para>See <xref><xrefnodename>Other Repeating Search</xrefnodename><xrefprinteddesc>Using Occur</xrefprinteddesc><xrefinfofile>emacs</xrefinfofile><xrefprintedname>The GNU Emacs Manual</xrefprintedname></xref>,
for more information.
</para>
</section>
</node>
<node>
<nodename>Running Info-Validate</nodename>
<nodeprev>Using occur</nodeprev>
<nodeup>Catching Mistakes</nodeup>
<!--  node-name,  next,  previous,  up -->
<section>
<title>Finding Badly Referenced Nodes</title>
<para><indexterm index="fn">Info-validate</indexterm><indexterm index="cp">Nodes, checking for badly referenced</indexterm><indexterm index="cp">Checking for badly referenced nodes</indexterm><indexterm index="cp">Looking for badly referenced nodes</indexterm><indexterm index="cp">Finding badly referenced nodes</indexterm><indexterm index="cp">Badly referenced nodes</indexterm></para>
<para>You can use the <code>Info-validate</code> command to check whether any of
the `Next', `Previous', `Up' or other node pointers fail to point to a
node.  This command checks that every node pointer points to an
existing node.  The <code>Info-validate</code> command works only on Info
files, not on Texinfo files.
</para>
<para>The <code>makeinfo</code> program validates pointers automatically, so you
do not need to use the <code>Info-validate</code> command if you are using
<code>makeinfo</code>.  You only may need to use <code>Info-validate</code> if you
are unable to run <code>makeinfo</code> and instead must create an Info file
using <code>texinfo-format-region</code> or <code>texinfo-format-buffer</code>, or
if you write an Info file from scratch.
</para>
<menu>
<menuentry>
<menunode> Using Info-validate</menunode>
<menutitle> Using Info-validate</menutitle>
<menucomment>         How to run <code>Info-validate</code>.
</menucomment>
</menuentry><menuentry>
<menunode> Unsplit</menunode>
<menutitle> Unsplit</menutitle>
<menucomment>                     How to create an unsplit file.
</menucomment>
</menuentry><menuentry>
<menunode> Tagifying</menunode>
<menutitle> Tagifying</menutitle>
<menucomment>                   How to tagify a file.
</menucomment>
</menuentry><menuentry>
<menunode> Splitting</menunode>
<menutitle> Splitting</menutitle>
<menucomment>                   How to split a file manually.
</menucomment>
</menuentry></menu>

</section>
</node>
<node>
<nodename>Using Info-validate</nodename>
<nodenext>Unsplit</nodenext>
<nodeprev>Running Info-Validate</nodeprev>
<nodeup>Running Info-Validate</nodeup>
<subsection>
<title>Running <code>Info-validate</code></title>
<para><indexterm index="cp">Running <code>Info-validate</code></indexterm><indexterm index="cp">Info validating a large file</indexterm><indexterm index="cp">Validating a large file</indexterm></para>
<para>To use <code>Info-validate</code>, visit the Info file you wish to check and
type:
</para>
<example xml:space="preserve">M-x Info-validate
</example>
<para>Note that the <code>Info-validate</code> command requires an upper case
`I'.  You may also need to create a tag table before running
<code>Info-validate</code>.  See <xref><xrefnodename>Tagifying</xrefnodename></xref>.
</para>
<para>If your file is valid, you will receive a message that says &ldquo;File appears
valid&rdquo;.  However, if you have a pointer that does not point to a node,
error messages will be displayed in a buffer called <samp>*problems in
info file*</samp>.
</para>
<para>For example, <code>Info-validate</code> was run on a test file that contained
only the first node of this manual.  One of the messages said:
</para>
<example xml:space="preserve">In node &quot;Overview&quot;, invalid Next: Texinfo Mode
</example>
<para>This meant that the node called <samp>Overview</samp> had a `Next' pointer that
did not point to anything (which was true in this case, since the test file
had only one node in it).
</para>
<para>Now suppose we add a node named <samp>Texinfo Mode</samp> to our test case
but we do not specify a `Previous' for this node.  Then we will get
the following error message:
</para>
<example xml:space="preserve">In node &quot;Texinfo Mode&quot;, should have Previous: Overview
</example>
<para>This is because every `Next' pointer should be matched by a
`Previous' (in the node where the `Next' points) which points back.
</para>
<para><code>Info-validate</code> also checks that all menu entries and cross references
point to actual nodes.
</para>
<para><code>Info-validate</code> requires a tag table and does not work with files
that have been split.  (The <code>texinfo-format-buffer</code> command
automatically splits large files.)  In order to use <code>Info-validate</code>
on a large file, you must run <code>texinfo-format-buffer</code> with an
argument so that it does not split the Info file; and you must create a
tag table for the unsplit file.
</para>
</subsection>
</node>
<node>
<nodename>Unsplit</nodename>
<nodenext>Tagifying</nodenext>
<nodeprev>Using Info-validate</nodeprev>
<nodeup>Running Info-Validate</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title>Creating an Unsplit File</title>
<para><indexterm index="cp">Creating an unsplit file</indexterm><indexterm index="cp">Unsplit file creation</indexterm></para>
<para>You can run <code>Info-validate</code> only on a single Info file that has a
tag table.  The command will not work on the indirect subfiles that
are generated when a master file is split.  If you have a large file
(longer than 70,000 bytes or so), you need to run the
<code>texinfo-format-buffer</code> or <code>makeinfo-buffer</code> command in such
a way that it does not create indirect subfiles.  You will also need
to create a tag table for the Info file.  After you have done this,
you can run <code>Info-validate</code> and look for badly referenced
nodes.
</para>
<para>The first step is to create an unsplit Info file.  To prevent
<code>texinfo-format-buffer</code> from splitting a Texinfo file into
smaller Info files, give a prefix to the <kbd>M-x
texinfo-format-buffer</kbd> command:
</para>
<example xml:space="preserve">C-u M-x texinfo-format-buffer
</example>
<para>or else
</para>
<example xml:space="preserve">C-u C-c C-e C-b
</example>
<para>When you do this, Texinfo will not split the file and will not create
a tag table for it. 
<indexterm index="cp">Making a tag table manually</indexterm><indexterm index="cp">Tag table, making manually</indexterm></para>
</subsection>
</node>
<node>
<nodename>Tagifying</nodename>
<nodenext>Splitting</nodenext>
<nodeprev>Unsplit</nodeprev>
<nodeup>Running Info-Validate</nodeup>
<subsection>
<title>Tagifying a File</title>

<para>After creating an unsplit Info file, you must create a tag table for
it.  Visit the Info file you wish to tagify and type:
</para>
<example xml:space="preserve">M-x Info-tagify
</example>
<para>(Note the upper case <samp>I</samp> in <code>Info-tagify</code>.)  This creates an
Info file with a tag table that you can validate.
</para>
<para>The third step is to validate the Info file:
</para>
<example xml:space="preserve">M-x Info-validate
</example>
<para>(Note the upper case <samp>I</samp> in <code>Info-validate</code>.)
In brief, the steps are:
</para>
<example xml:space="preserve"><group>
C-u M-x texinfo-format-buffer
M-x Info-tagify
M-x Info-validate
</group>
</example>
<para>After you have validated the node structure, you can rerun
<code>texinfo-format-buffer</code> in the normal way so it will construct a
tag table and split the file automatically, or you can make the tag
table and split the file manually.
</para>
</subsection>
</node>
<node>
<nodename>Splitting</nodename>
<nodeprev>Tagifying</nodeprev>
<nodeup>Running Info-Validate</nodeup>
<!--  node-name,  next,  previous,  up -->
<subsection>
<title>Splitting a File Manually</title>
<para><indexterm index="cp">Splitting an Info file manually</indexterm><indexterm index="cp">Info file, splitting manually</indexterm></para>
<para>You should split a large file or else let the
<code>texinfo-format-buffer</code> or <code>makeinfo-buffer</code> command do it
for you automatically.  (Generally you will let one of the formatting
commands do this job for you.  See <xref><xrefnodename>Creating an Info File</xrefnodename></xref>.)
</para>
<para>The split-off files are called the indirect subfiles.
</para>
<para>Info files are split to save memory.  With smaller files, Emacs does not
have make such a large buffer to hold the information.
</para>
<para>If an Info file has more than 30 nodes, you should also make a tag
table for it. See <xref><xrefnodename>Using Info-validate</xrefnodename></xref>, for information
about creating a tag table.  (Again, tag tables are usually created
automatically by the formatting command; you only need to create a tag
table yourself if you are doing the job manually.  Most likely, you
will do this for a large, unsplit file on which you have run
<code>Info-validate</code>.)
</para>
<!-- Info-split is autoloaded in `loaddefs.el' in Emacs 18.51 -->

<para>Visit the Info file you wish to tagify and split and type the two
commands:
</para>
<example xml:space="preserve">M-x Info-tagify
M-x Info-split
</example>
<para>(Note that the <samp>I</samp> in <samp>Info</samp> is upper case.)
</para>
<para>When you use the <code>Info-split</code> command, the buffer is modified into a
(small) Info file which lists the indirect subfiles.  This file should be
saved in place of the original visited file.  The indirect subfiles are
written in the same directory the original file is in, with names generated
by appending <samp>-</samp> and a number to the original file name.
</para>
<para>The primary file still functions as an Info file, but it contains just
the tag table and a directory of subfiles.
</para>

</subsection>
</node>
<node>
<nodename>Refilling Paragraphs</nodename>
<nodenext>Command Syntax</nodenext>
<nodeprev>Catching Mistakes</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Refilling Paragraphs</title>
<para><indexterm index="cp">Refilling paragraphs</indexterm><indexterm index="cp">Filling paragraphs</indexterm><indexterm index="cp">Paragraphs, filling</indexterm><indexterm index="fn">refill</indexterm></para>
<para>The <code>@refill</code> command refills and, optionally, indents the first
line of a paragraph.<footnote><para>Perhaps the command should have been
called the <code>@refillandindent</code> command, but <code>@refill</code> is
shorter and the name was chosen before indenting was possible.
</para></footnote> The
<code>@refill</code> command is no longer important, but we describe it here
because you once needed it.  You will see it in many old Texinfo
files.
</para>
<para>Without refilling, paragraphs containing long @-constructs may look
bad after formatting because the formatter removes @-commands and
shortens some lines more than others.  In the past, neither the
<code>texinfo-format-region</code> command nor the
<code>texinfo-format-buffer</code> command refilled paragraphs
automatically.  The <code>@refill</code> command had to be written at the
end of every paragraph to cause these formatters to fill them.  (Both
&tex; and <code>makeinfo</code> have always refilled paragraphs
automatically.)  Now, all the Info formatters automatically fill and
indent those paragraphs that need to be filled and indented.
</para>
<para>The <code>@refill</code> command causes <code>texinfo-format-region</code> and
<code>texinfo-format-buffer</code> to refill a paragraph in the Info file
<emph>after</emph> all the other processing has been done.  For this reason,
you can not use <code>@refill</code> with a paragraph containing either
<code>@*</code> or <code>@w{ &dots; }</code> since the refilling action will
override those two commands.
</para>
<para>The <code>texinfo-format-region</code> and <code>texinfo-format-buffer</code>
commands now automatically append <code>@refill</code> to the end of each
paragraph that should be filled.  They do not append <code>@refill</code> to
the ends of paragraphs that contain <code>@*</code> or <code>@w{ &dots;}</code><!-- /@w -->
and therefore do not refill or indent them.
</para>

</appendix>
</node>
<node>
<nodename>Command Syntax</nodename>
<nodenext>Obtaining TeX</nodenext>
<nodeprev>Refilling Paragraphs</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>@-Command Syntax</title>
<para><indexterm index="cp">@-command syntax</indexterm><indexterm index="cp">Syntax, of @-commands</indexterm><indexterm index="cp">Command syntax</indexterm></para>
<para>The character <samp>@</samp> is used to start special Texinfo commands.
(It has the same meaning that <samp>\</samp> has in plain &tex;.)  Texinfo
has four types of @-command:
</para>
<table><tableitem><tableterm>1. Non-alphabetic commands.</tableterm>
<item><para>These commands consist of an @ followed by a punctuation mark or other
character that is not part of the alphabet.  Non-alphabetic commands are
almost always part of the text within a paragraph, and never take any
argument.  The two characters (@ and the other one) are complete in
themselves; none is followed by braces.  The non-alphabetic commands
are: <code>@.</code>, <code>@:</code>, <code>@*</code>, <code>@<kbd>SPACE</kbd></code>,
<code>@<kbd>TAB</kbd></code>, <code>@<kbd>NL</kbd></code>, <code>@@</code>, <code>@{</code>, and
<code>@}</code>.
</para>
</item></tableitem><tableitem><tableterm>2. Alphabetic commands that do not require arguments.</tableterm>
<item><para>These commands start with @ followed by a word followed by left- and
right-hand braces.  These commands insert special symbols in the
document; they do not require arguments.  For example,
<code>@dots{}</code> &rArr; <samp>&dots;</samp>, <code>@equiv{}</code>
&rArr; <samp>==</samp>, <code>@TeX{}</code> &rArr; `&tex;',
and <code>@bullet{}</code> &rArr; <samp>&bullet;</samp>.
</para>
</item></tableitem><tableitem><tableterm>3. Alphabetic commands that require arguments within braces.</tableterm>
<item><para>These commands start with @ followed by a letter or a word, followed by an
argument within braces.  For example, the command <code>@dfn</code> indicates
the introductory or defining use of a term; it is used as follows: <samp>In
Texinfo, @@-commands are @dfn{mark-up} commands.</samp>
</para>
</item></tableitem><tableitem><tableterm>4. Alphabetic commands that occupy an entire line.</tableterm>
<item><para>These commands occupy an entire line.  The line starts with @,
followed by the name of the command (a word); for example, <code>@center</code>
or <code>@cindex</code>.  If no argument is needed, the word is followed by
the end of the line.  If there is an argument, it is separated from
the command name by a space.  Braces are not used.
</para></item></tableitem></table>

<para><indexterm index="cp">Braces and argument syntax</indexterm>Thus, the alphabetic commands fall into classes that have
different argument syntaxes.  You cannot tell to which class a command
belongs by the appearance of its name, but you can tell by the
command's meaning: if the command stands for a glyph, it is in
class 2 and does not require an argument; if it makes sense to use the
command together with other text as part of a paragraph, the command
is in class 3 and must be followed by an argument in braces;
otherwise, it is in class 4 and uses the rest of the line as its
argument.
</para>
<para>The purpose of having a different syntax for commands of classes 3 and
4 is to make Texinfo files easier to read, and also to help the GNU
Emacs paragraph and filling commands work properly.  There is only one
exception to this rule: the command <code>@refill</code>, which is always
used at the end of a paragraph immediately following the final period
or other punctuation character.  <code>@refill</code> takes no argument and
does <emph>not</emph> require braces.  <code>@refill</code> never confuses the
Emacs paragraph commands because it cannot appear at the beginning of
a line.
</para>

</appendix>
</node>
<node>
<nodename>Obtaining TeX</nodename>
<nodenext>Copying This Manual</nodenext>
<nodeprev>Command Syntax</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>How to Obtain &tex;</title>
<para><indexterm index="cp">Obtaining &tex;</indexterm><indexterm index="cp">&tex;, how to obtain</indexterm></para>
<!-- !!! Here is information about obtaining TeX.  Update it whenever. -->
<!-- !!! Also consider updating TeX.README on ftp.gnu.org. -->
<!--     Updated by RJC on 1 March 1995, conversation with MacKay. -->
<!--     Updated by kb@cs.umb.edu on 29 July 1996. -->
<!--     Updated by kb@cs.umb.edu on 25 April 1997. -->
<!--     Updated by kb@cs.umb.edu on 27 February 1998. -->
<para>&tex; is freely redistributable.  You can obtain &tex; for Unix
systems via anonymous ftp or on physical media.  The core material
consists of the Web2c &tex; distribution (<uref><urefurl>http://tug.org/web2c</urefurl></uref>).
</para>
<para>Instructions for retrieval by anonymous ftp and information on other
available distributions:
</para><example xml:space="preserve"><uref><urefurl>ftp://tug.org/tex/unixtex.ftp</urefurl></uref>
<uref><urefurl>http://tug.org/unixtex.ftp</urefurl></uref>
</example>
<para>The Free Software Foundation provides a core distribution on its Source
Code CD-ROM suitable for printing Texinfo manuals.  To order it, contact:
</para>
<display xml:space="preserve"><group>
Free Software Foundation, Inc.
59 Temple Place Suite 330
Boston, MA &space;&space;02111-1307
USA
Telephone: +1-617-542-5942<!-- /@w -->
Fax: (including Japan) +1-617-542-2652<!-- /@w -->
Free Dial Fax (in Japan):
 <!-- /@w -->  <!-- /@w -->  <!-- /@w --> 0031-13-2473 (KDD)
 <!-- /@w -->  <!-- /@w -->  <!-- /@w --> 0066-3382-0158 (IDC)
Electronic mail: <code>gnu@gnu.org</code>
</group>
</display>
<para>Many other &tex; distributions are available; see
<uref><urefurl>http://tug.org/</urefurl></uref>.
</para>

<!-- These are no longer ``new'', and the explanations -->
<!-- are all given elsewhere anyway, I think.  -karl, 25apr97. -->
<!-- So ignore the entire appendix. -->


</appendix>
</node>
<node>
<nodename>Copying This Manual</nodename>
<nodenext>Command and Variable Index</nodenext>
<nodeprev>Obtaining TeX</nodeprev>
<nodeup>Top</nodeup>
<appendix>
<title>Copying This Manual</title>

<menu>
<menuentry>
<menunode> GNU Free Documentation License</menunode>
<menutitle> GNU Free Documentation License</menutitle>
<menucomment>  License for copying this manual.
</menucomment>
</menuentry></menu>


</appendix>
</node>
<node>
<nodename>GNU Free Documentation License</nodename>
<nodeup>Copying This Manual</nodeup>
<appendixsec>
<title>GNU Free Documentation License</title>

<para><indexterm index="cp">FDL, GNU Free Documentation License</indexterm></para><center><para>Version 1.1, March 2000
</para></center>
<display xml:space="preserve">Copyright &copyright; 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</display>
<enumerate first="0"><item>
<para>PREAMBLE
</para>
<para>The purpose of this License is to make a manual, textbook, or other
written document <dfn>free</dfn> in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.
</para>
<para>This License is a kind of &ldquo;copyleft&rdquo;, which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</para>
<para>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</para>
</item>
<item>
<para>APPLICABILITY AND DEFINITIONS
</para>
<para>This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The &ldquo;Document&rdquo;, below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as &ldquo;you&rdquo;.
</para>
<para>A &ldquo;Modified Version&rdquo; of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</para>
<para>A &ldquo;Secondary Section&rdquo; is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</para>
<para>The &ldquo;Invariant Sections&rdquo; are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.
</para>
<para>The &ldquo;Cover Texts&rdquo; are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.
</para>
<para>A &ldquo;Transparent&rdquo; copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not &ldquo;Transparent&rdquo; is called &ldquo;Opaque&rdquo;.
</para>
<para>Examples of suitable formats for Transparent copies include plain
<sc>ascii</sc> without markup, Texinfo input format, La&tex; input format,
<acronym><acronymword>SGML</acronymword></acronym> or <acronym><acronymword>XML</acronymword></acronym> using a publicly available
<acronym><acronymword>DTD</acronymword></acronym>, and standard-conforming simple <acronym><acronymword>HTML</acronymword></acronym> designed
for human modification.  Opaque formats include PostScript,
<acronym><acronymword>PDF</acronymword></acronym>, proprietary formats that can be read and edited only by
proprietary word processors, <acronym><acronymword>SGML</acronymword></acronym> or <acronym><acronymword>XML</acronymword></acronym> for which
the <acronym><acronymword>DTD</acronymword></acronym> and/or processing tools are not generally available,
and the machine-generated <acronym><acronymword>HTML</acronymword></acronym> produced by some word
processors for output purposes only.
</para>
<para>The &ldquo;Title Page&rdquo; means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, &ldquo;Title Page&rdquo; means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.
</para>
</item>
<item>
<para>VERBATIM COPYING
</para>
<para>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</para>
<para>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</para>
</item>
<item>
<para>COPYING IN QUANTITY
</para>
<para>If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</para>
<para>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</para>
<para>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.
</para>
<para>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</para>
</item>
<item>
<para>MODIFICATIONS
</para>
<para>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</para>
<enumerate first="A"><item>
<para>Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.
</para>
</item>
<item>
<para>List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).
</para>
</item>
<item>
<para>State on the Title page the name of the publisher of the
Modified Version, as the publisher.
</para>
</item>
<item>
<para>Preserve all the copyright notices of the Document.
</para>
</item>
<item>
<para>Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.
</para>
</item>
<item>
<para>Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.
</para>
</item>
<item>
<para>Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.
</para>
</item>
<item>
<para>Include an unaltered copy of this License.
</para>
</item>
<item>
<para>Preserve the section entitled &ldquo;History&rdquo;, and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled &ldquo;History&rdquo; in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.
</para>
</item>
<item>
<para>Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the &ldquo;History&rdquo; section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.
</para>
</item>
<item>
<para>In any section entitled &ldquo;Acknowledgments&rdquo; or &ldquo;Dedications&rdquo;,
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.
</para>
</item>
<item>
<para>Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.
</para>
</item>
<item>
<para>Delete any section entitled &ldquo;Endorsements&rdquo;.  Such a section
may not be included in the Modified Version.
</para>
</item>
<item>
<para>Do not retitle any existing section as &ldquo;Endorsements&rdquo;
or to conflict in title with any Invariant Section.
</para></item>
</enumerate>

<para>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.
</para>
<para>You may add a section entitled &ldquo;Endorsements&rdquo;, provided it contains
nothing but endorsements of your Modified Version by various
parties&mdash;for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</para>
<para>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</para>
<para>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</para>
</item>
<item>
<para>COMBINING DOCUMENTS
</para>
<para>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.
</para>
<para>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</para>
<para>In the combination, you must combine any sections entitled &ldquo;History&rdquo;
in the various original documents, forming one section entitled
&ldquo;History&rdquo;; likewise combine any sections entitled &ldquo;Acknowledgments&rdquo;,
and any sections entitled &ldquo;Dedications&rdquo;.  You must delete all sections
entitled &ldquo;Endorsements.&rdquo;
</para>
</item>
<item>
<para>COLLECTIONS OF DOCUMENTS
</para>
<para>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</para>
<para>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</para>
</item>
<item>
<para>AGGREGATION WITH INDEPENDENT WORKS
</para>
<para>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an &ldquo;aggregate&rdquo;, and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.
</para>
<para>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.
</para>
</item>
<item>
<para>TRANSLATION
</para>
<para>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.
</para>
</item>
<item>
<para>TERMINATION
</para>
<para>You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.
</para>
</item>
<item>
<para>FUTURE REVISIONS OF THIS LICENSE
</para>
<para>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<uref><urefurl>http://www.gnu.org/copyleft/</urefurl></uref>.
</para>
<para>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License &ldquo;or any later version&rdquo; applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
</para></item>
</enumerate>

<page></page>
</appendixsec>
</node>
<appendixsubsec>
<title>ADDENDUM: How to use this License for your documents</title>

<para>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</para>
<smallexample xml:space="preserve"><group>
  Copyright (C)  <var>year</var>  <var>your name</var>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being <var>list their titles</var>, with the
  Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts being <var>list</var>.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</group>
</smallexample>
<para>If you have no Invariant Sections, write &ldquo;with no Invariant Sections&rdquo;
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write &ldquo;no Front-Cover Texts&rdquo; instead of
&ldquo;Front-Cover Texts being <var>list</var>&rdquo;; likewise for Back-Cover Texts.
</para>
<para>If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</para>
<!-- Local Variables: -->
<!-- ispell-local-pdict: "ispell-dict" -->
<!-- End: -->



</appendixsubsec>
</node>
<node>
<nodename>Command and Variable Index</nodename>
<nodenext>Concept Index</nodenext>
<nodeprev>Copying This Manual</nodeprev>
<nodeup>Top</nodeup>
<unnumbered>
<title>Command and Variable Index</title>

<para>This is an alphabetical list of all the @-commands, assorted Emacs Lisp
functions, and several variables.  To make the list easier to use, the
commands are listed without their preceding <samp>@</samp>.
</para>
<printindex>fn</printindex>


</unnumbered>
</node>
<node>
<nodename>Concept Index</nodename>
<nodeprev>Command and Variable Index</nodeprev>
<nodeup>Top</nodeup>
<unnumbered>
<title>Concept Index</title>

<printindex>cp</printindex>


</unnumbered>
</node>
</texinfo>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-indent-step:1
sgml-indent-data:nil
End:
-->
