5.1.68 listvar
--------------
Syntax:
listvar ( [package] )

listvar ( [package,] type )

listvar ( [package,] ring_name )

listvar ( [package,] name )

listvar ( [package,] all )
Type:
none
Purpose:
lists all (user-)defined names in the current namespace:
* listvar(): all currently visible names except procedures,
* listvar(type): all currently visible names of the given
type,
* listvar(ring_name): all names which belong to the given
ring,
* listvar(name): the object with the given name,
* listvar(all): all names except procedures.
The current basering is marked with a *.  The nesting level of
variables in procedures is shown in square brackets.

Example:
  proc t1 { }
  proc t2 { }
  ring s;
  poly ss;
  ring r;
  poly f=x+y+z;
  int i=7;
  ideal I=f,x,y;
  listvar(all);
==> // i                    [0]  int 7
==> // r                    [0]  *ring
==> //      I                    [0]  ideal, 3 generator(s)
==> //      f                    [0]  poly
==> // s                    [0]  ring
==> //      ss                   [0]  poly
==> // LIB                  [0]  string standard.lib
  listvar();
==> // i                    [0]  int 7
==> // r                    [0]  *ring
==> //      I                    [0]  ideal, 3 generator(s)
==> //      f                    [0]  poly
==> // s                    [0]  ring
==> // LIB                  [0]  string standard.lib
  listvar(r);
==> // r                    [0]  *ring
==> // I                    [0]  ideal, 3 generator(s)
==> // f                    [0]  poly
  listvar(t1);
==> // t1                   [0]  proc
  listvar(proc);
==> // t2                   [0]  proc
==> // t1                   [0]  proc
==> // fprintf              [0]  proc from standard.lib
==> // printf               [0]  proc from standard.lib
==> // sprintf              [0]  proc from standard.lib
==> // intersect1           [0]  proc from standard.lib (static)
==> // quotient4            [0]  proc from standard.lib
==> // quotient5            [0]  proc from standard.lib
==> // quotient3            [0]  proc from standard.lib
==> // quotient2            [0]  proc from standard.lib
==> // quotient1            [0]  proc from standard.lib
==> // quotient0            [0]  proc from standard.lib (static)
==> // quot1                [0]  proc from standard.lib (static)
==> // quot                 [0]  proc from standard.lib
==> // res                  [0]  proc from standard.lib
==> // groebner             [0]  proc from standard.lib
==> // stdhilb              [0]  proc from standard.lib
==> // stdfglm              [0]  proc from standard.lib
See
Names;
Names in procedures;
defined;
names;
type.
<font size="-1">
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User manual for <a href="http://www.singular.uni-kl.de/"><i>Singular</i></a> version 2-0-4, October 2002,
generated by <a href="http://www.nongnu.org/texi2html/"><i>texi2html</i></a>.
</font>

</body>
</html>
