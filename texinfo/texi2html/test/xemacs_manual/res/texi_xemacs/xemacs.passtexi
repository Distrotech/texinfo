xemacs.texi(,2) @setfilename ../../info/xemacs.info
xemacs.texi(,3) @comment  node-name,  next,  previous,  up
xemacs.texi(,4) 
xemacs.texi(,5) 
xemacs.texi(,7) @dircategory XEmacs Editor
xemacs.texi(,8) @direntry
xemacs.texi(,9) * XEmacs: (xemacs).		XEmacs Editor.
xemacs.texi(,10) @end direntry
xemacs.texi(,11) 
xemacs.texi(,12) This file documents the XEmacs editor.
xemacs.texi(,13) 
xemacs.texi(,14) Copyright (C) 1985, 1986, 1988 Richard M. Stallman.
xemacs.texi(,15) Copyright @copyright{} 1991, 1992, 1993, 1994 Lucid, Inc.
xemacs.texi(,16) Copyright @copyright{} 1993, 1994 Sun Microsystems, Inc.
xemacs.texi(,17) Copyright @copyright{} 1995 Amdahl Corporation.
xemacs.texi(,18) 
xemacs.texi(,19) Permission is granted to make and distribute verbatim copies of
xemacs.texi(,20) this manual provided the copyright notice and this permission notice
xemacs.texi(,21) are preserved on all copies.
xemacs.texi(,22) 
xemacs.texi(,30) Permission is granted to copy and distribute modified versions of this
xemacs.texi(,31) manual under the conditions for verbatim copying, provided also that the
xemacs.texi(,32) sections entitled ``The GNU Manifesto'', ``Distribution'' and ``GNU
xemacs.texi(,33) General Public License'' are included exactly as in the original, and
xemacs.texi(,34) provided that the entire resulting derived work is distributed under the
xemacs.texi(,35) terms of a permission notice identical to this one.
xemacs.texi(,36) 
xemacs.texi(,37) Permission is granted to copy and distribute translations of this manual
xemacs.texi(,38) into another language, under the above conditions for modified versions,
xemacs.texi(,39) except that the sections entitled ``The GNU Manifesto'',
xemacs.texi(,40) ``Distribution'' and ``GNU General Public License'' may be included in a
xemacs.texi(,41) translation approved by the author instead of in the original English.
xemacs.texi(,43) @c
xemacs.texi(,44) @setchapternewpage odd
xemacs.texi(,45) @settitle XEmacs User's Manual
xemacs.texi(,46) @c
xemacs.texi(,47) @titlepage
xemacs.texi(,48) @sp 6
xemacs.texi(,49) @center @titlefont{XEmacs User's Manual}
xemacs.texi(,50) @sp 4
xemacs.texi(,51) @sp 1
xemacs.texi(,52) @sp 1
xemacs.texi(,53) @center July 1994
xemacs.texi(,54) @center (General Public License upgraded, January 1991)
xemacs.texi(,55) @sp 5
xemacs.texi(,56) @center Richard Stallman
xemacs.texi(,57) @sp 1
xemacs.texi(,58) @center Lucid, Inc.
xemacs.texi(,59) @sp 1
xemacs.texi(,60) @center and
xemacs.texi(,61) @sp 1
xemacs.texi(,62) @center Ben Wing
xemacs.texi(,63) @page
xemacs.texi(,64) @vskip 0pt plus 1filll
xemacs.texi(,65) Copyright @copyright{} 1985, 1986, 1988 Richard M. Stallman.
xemacs.texi(,66) 
xemacs.texi(,67) Copyright @copyright{} 1991, 1992, 1993, 1994  Lucid, Inc.
xemacs.texi(,68) 
xemacs.texi(,69) Copyright @copyright{} 1993, 1994 Sun Microsystems, Inc.
xemacs.texi(,70) 
xemacs.texi(,71) Copyright @copyright{} 1995 Amdahl Corporation.
xemacs.texi(,72) 
xemacs.texi(,73) Permission is granted to make and distribute verbatim copies of
xemacs.texi(,74) this manual provided the copyright notice and this permission notice
xemacs.texi(,75) are preserved on all copies.
xemacs.texi(,76) 
xemacs.texi(,77) Permission is granted to copy and distribute modified versions of this
xemacs.texi(,78) manual under the conditions for verbatim copying, provided also that the
xemacs.texi(,79) sections entitled ``The GNU Manifesto'', ``Distribution'' and ``GNU
xemacs.texi(,80) General Public License'' are included exactly as in the original, and
xemacs.texi(,81) provided that the entire resulting derived work is distributed under the
xemacs.texi(,82) terms of a permission notice identical to this one.
xemacs.texi(,83) 
xemacs.texi(,84) Permission is granted to copy and distribute translations of this manual
xemacs.texi(,85) into another language, under the above conditions for modified versions,
xemacs.texi(,86) except that the sections entitled ``The GNU Manifesto'',
xemacs.texi(,87) ``Distribution'' and ``GNU General Public License'' may be included in a
xemacs.texi(,88) translation approved by the author instead of in the original English.
xemacs.texi(,89) @end titlepage
xemacs.texi(,90) @page
xemacs.texi(,92) @node Top, License,, (dir)
xemacs.texi(,93) @top The XEmacs Editor
xemacs.texi(,94) 
xemacs.texi(,95) 
xemacs.texi(,96) XEmacs is the extensible, customizable, self-documenting real-time
xemacs.texi(,97) display editor.  This Info file describes how to edit with Emacs
xemacs.texi(,98) and some of how to customize it, but not how to extend it.  It
xemacs.texi(,99) corresponds to XEmacs version 21.0.
xemacs.texi(,100) 
xemacs.texi(,101) This manual is intended as a detailed reference to XEmacs.  If
xemacs.texi(,102) you are looking for an introductory manual, see the New User's
xemacs.texi(,103) Guide.
xemacs.texi(,104) 
xemacs.texi(,106) @menu
xemacs.texi(,107) * License::     The GNU General Public License gives you permission
xemacs.texi(,108) 		to redistribute XEmacs on certain terms; and also
xemacs.texi(,109) 		explains that there is no warranty.
xemacs.texi(,110) * Distrib::     How to get XEmacs.
xemacs.texi(,111) * Intro::       An introduction to XEmacs concepts.
xemacs.texi(,112) * Glossary::    The glossary.
xemacs.texi(,113) * Manifesto::   What's GNU?  Gnu's Not Unix!
xemacs.texi(,114) 
xemacs.texi(,115) Indices, nodes containing large menus
xemacs.texi(,116) * Key Index::      An item for each standard XEmacs key sequence.
xemacs.texi(,117) * Command Index::  An item for each command name.
xemacs.texi(,118) * Variable Index:: An item for each documented variable.
xemacs.texi(,119) * Concept Index::  An item for each concept.
xemacs.texi(,120) 
xemacs.texi(,121) Important General Concepts
xemacs.texi(,122) * Frame::      How to interpret what you see on the screen.
xemacs.texi(,123) * Keystrokes::  Keyboard gestures XEmacs recognizes.
xemacs.texi(,124) * Pull-down Menus:: 
xemacs.texi(,125)                 The XEmacs Pull-down Menus available under X.
xemacs.texi(,126) * Entering Emacs::    
xemacs.texi(,127)                 Starting Emacs from the shell.
xemacs.texi(,128) * Exiting::     Stopping or killing XEmacs.
xemacs.texi(,129) * Command Switches::  
xemacs.texi(,130)                 Hairy startup options.
xemacs.texi(,131) * Startup Paths::
xemacs.texi(,132)                 How XEmacs finds Directories and Files.
xemacs.texi(,133) * Packages::    How XEmacs organizes its high-level functionality.
xemacs.texi(,134) 
xemacs.texi(,135) Fundamental Editing Commands
xemacs.texi(,136) * Basic::       The most basic editing commands.
xemacs.texi(,137) * Undo::        Undoing recently made changes in the text.
xemacs.texi(,138) * Minibuffer::  Entering arguments that are prompted for.
xemacs.texi(,139) * M-x::         Invoking commands by their names.
xemacs.texi(,140) * Help::        Commands for asking XEmacs about its commands.
xemacs.texi(,141) 
xemacs.texi(,142) Important Text-Changing Commands
xemacs.texi(,143) * Mark::        The mark: how to delimit a ``region'' of text.
xemacs.texi(,144) * Mouse Selection:: 
xemacs.texi(,145)                 Selecting text with the mouse.
xemacs.texi(,146) * Additional Mouse Operations::
xemacs.texi(,147)                 Other operations available from the mouse.
xemacs.texi(,148) * Killing::     Killing text.
xemacs.texi(,149) * Yanking::     Recovering killed text.  Moving text.
xemacs.texi(,150) * Using X Selections::
xemacs.texi(,151)                 Using primary selection, cut buffers, and highlighted regions.
xemacs.texi(,152) * Accumulating Text::
xemacs.texi(,153)                 Other ways of copying text.
xemacs.texi(,154) * Rectangles::  Operating on the text inside a rectangle on the screen.
xemacs.texi(,155) * Registers::   Saving a text string or a location in the buffer.
xemacs.texi(,156) * Display::     Controlling what text is displayed.
xemacs.texi(,157) * Search::      Finding or replacing occurrences of a string.
xemacs.texi(,158) * Fixit::       Commands especially useful for fixing typos.
xemacs.texi(,159) 
xemacs.texi(,160) Larger Units of Text
xemacs.texi(,161) * Files::       All about handling files.
xemacs.texi(,162) * Buffers::     Multiple buffers; editing several files at once.
xemacs.texi(,163) * Windows::     Viewing two pieces of text at once.
xemacs.texi(,164) * Mule::	Using world scripts.
xemacs.texi(,165) 
xemacs.texi(,166) Advanced Features
xemacs.texi(,167) * Major Modes:: Text mode vs. Lisp mode vs. C mode ...
xemacs.texi(,168) * Indentation:: Editing the white space at the beginnings of lines.
xemacs.texi(,169) * Text::        Commands and modes for editing English.
xemacs.texi(,170) * Programs::    Commands and modes for editing programs.
xemacs.texi(,171) * Running::     Compiling, running and debugging programs.
xemacs.texi(,172) * Abbrevs::     How to define text abbreviations to reduce
xemacs.texi(,173)                  the number of characters you must type.
xemacs.texi(,174) * Picture::     Editing pictures made up of characters
xemacs.texi(,175)                  using the quarter-plane screen model.
xemacs.texi(,176) * Sending Mail:: Sending mail in XEmacs.
xemacs.texi(,177) * Reading Mail:: Reading mail in XEmacs.
xemacs.texi(,178) * Calendar/Diary:: A Calendar and diary facility in XEmacs.
xemacs.texi(,179) * Sorting::	Sorting lines, paragraphs or pages within XEmacs.
xemacs.texi(,180) * Shell::       Executing shell commands from XEmacs.
xemacs.texi(,181) * Narrowing::   Restricting display and editing to a portion
xemacs.texi(,182)                  of the buffer.
xemacs.texi(,183) * Hardcopy::	Printing buffers or regions.
xemacs.texi(,184) * Recursive Edit::
xemacs.texi(,185)                 A command can allow you to do editing
xemacs.texi(,186)                  "within the command".  This is called a
xemacs.texi(,187)                  `recursive editing level'.
xemacs.texi(,188) * Dissociated Press::  Dissociating text for fun.
xemacs.texi(,189) * CONX::	       A different kind of dissociation.
xemacs.texi(,190) * Amusements::         Various games and hacks.
xemacs.texi(,191) * Emulation::	       Emulating some other editors with XEmacs.
xemacs.texi(,192) * Customization::      Modifying the behavior of XEmacs.
xemacs.texi(,193) 
xemacs.texi(,194) Recovery from Problems.
xemacs.texi(,195) * Quitting::    Quitting and aborting.
xemacs.texi(,196) * Lossage::     What to do if XEmacs is hung or malfunctioning.
xemacs.texi(,197) * Bugs::        How and when to report a bug.
xemacs.texi(,198) 
xemacs.texi(,199) Here are some other nodes which are really inferiors of the ones
xemacs.texi(,200) already listed, mentioned here so you can get to them in one step:
xemacs.texi(,201) 
xemacs.texi(,202)  --- The Detailed Node Listing ---
xemacs.texi(,203) 
xemacs.texi(,204) The Organization of the Frame
xemacs.texi(,205) 
xemacs.texi(,206) * Point::	        The place in the text where editing commands operate.  
xemacs.texi(,207) * Echo Area::           Short messages appear at the bottom of the frame.  
xemacs.texi(,208) * Mode Line::	        Interpreting the mode line.  
xemacs.texi(,209) * XEmacs under X::      Some information on using XEmacs under the X 
xemacs.texi(,210)                         Window System. 
xemacs.texi(,211) 
xemacs.texi(,212) Keystrokes
xemacs.texi(,213) 
xemacs.texi(,214) * Intro to Keystrokes::      Keystrokes as building blocks of key sequences.
xemacs.texi(,215) * Representing Keystrokes::  Using lists of modifiers and keysyms to
xemacs.texi(,216)                              represent keystrokes.
xemacs.texi(,217) * Key Sequences::            Combine key strokes into key sequences you can
xemacs.texi(,218)                              bind to commands.
xemacs.texi(,219) * String Key Sequences::     Available for upward compatibility.
xemacs.texi(,220) * Meta Key::                 Using @key{ESC} to represent @key{Meta}
xemacs.texi(,221) * Super and Hyper Keys::     Adding modifier keys on certain keyboards.
xemacs.texi(,222) * Character Representation:: How characters appear in XEmacs buffers.
xemacs.texi(,223) * Commands::                 How commands are bound to key sequences.
xemacs.texi(,224)                     
xemacs.texi(,225) Pull-down Menus
xemacs.texi(,226) 
xemacs.texi(,227) * File Menu::           Items on the File menu.
xemacs.texi(,228) * Edit Menu::           Items on the Edit menu.
xemacs.texi(,229) * Apps Menu::		Items on the Apps menu.
xemacs.texi(,230) * Options Menu::        Items on the Options menu. 
xemacs.texi(,231) * Buffers Menu::        Information about the Buffers menu.
xemacs.texi(,232) * Tools Menu::		Items on the Tools menu.
xemacs.texi(,233) * Help Menu::           Items on the Help menu. 
xemacs.texi(,234) * Menu Customization::  Adding and removing menu items and related
xemacs.texi(,235)                         operations.
xemacs.texi(,236) 
xemacs.texi(,237) Packages
xemacs.texi(,238) 
xemacs.texi(,239) * Packages::            Introduction to XEmacs Packages.
xemacs.texi(,240) * Package Terminology:: Understanding different kinds of packages.
xemacs.texi(,241) * Installing Packages:: How to install packages.
xemacs.texi(,242) * Building Packages::   Building packages from sources.
xemacs.texi(,243) * Local.rules File::    An important part of building packages.
xemacs.texi(,244) * Creating Packages::   The basics.
xemacs.texi(,245) * Available Packages::  A brief directory of packaged LISP.
xemacs.texi(,246) 
xemacs.texi(,247) Basic Editing Commands
xemacs.texi(,248) 
xemacs.texi(,249) * Blank Lines::        Commands to make or delete blank lines.
xemacs.texi(,250) * Continuation Lines:: Lines too wide for the frame.
xemacs.texi(,251) * Position Info::      What page, line, row, or column is point on?
xemacs.texi(,252) * Arguments::	       Numeric arguments for repeating a command.
xemacs.texi(,253) 
xemacs.texi(,254) The Minibuffer
xemacs.texi(,255) 
xemacs.texi(,256) * File: Minibuffer File.  Entering file names with the minibuffer.
xemacs.texi(,257) * Edit: Minibuffer Edit.  How to edit in the minibuffer.
xemacs.texi(,258) * Completion::		  An abbreviation facility for minibuffer input.
xemacs.texi(,259) * Repetition::		  Re-executing commands that used the minibuffer.
xemacs.texi(,260) 
xemacs.texi(,261) The Mark and the Region
xemacs.texi(,262) 
xemacs.texi(,263) * Setting Mark::	Commands to set the mark.
xemacs.texi(,264) * Using Region::	Summary of ways to operate on contents of the region.
xemacs.texi(,265) * Marking Objects::	Commands to put region around textual units.
xemacs.texi(,266) * Mark Ring::   	Previous mark positions saved so you can go back there.
xemacs.texi(,267) 
xemacs.texi(,268) Yanking
xemacs.texi(,269) 
xemacs.texi(,270) * Kill Ring::       Where killed text is stored.  Basic yanking.
xemacs.texi(,271) * Appending Kills:: Several kills in a row all yank together.
xemacs.texi(,272) * Earlier Kills::   Yanking something killed some time ago.
xemacs.texi(,273) 
xemacs.texi(,274) Using X Selections
xemacs.texi(,275) 
xemacs.texi(,276) * X Clipboard Selection::     	Pasting to the X clipboard.
xemacs.texi(,277) * X Selection Commands::	Other operations on the selection.
xemacs.texi(,278) * X Cut Buffers::       	X cut buffers are available for compatibility.
xemacs.texi(,279) * Active Regions::      	Using zmacs-style highlighting of the
xemacs.texi(,280)                         	 selected region.
xemacs.texi(,281) 
xemacs.texi(,282) Registers
xemacs.texi(,283) 
xemacs.texi(,284) * Position: RegPos.           Saving positions in registers.
xemacs.texi(,285) * Text: RegText.              Saving text in registers.
xemacs.texi(,286) * Rectangle: RegRect.         Saving rectangles in registers.
xemacs.texi(,287) * Configurations: RegConfig.  Saving window configurations in registers.
xemacs.texi(,288) * Files: RegFiles.            File names in registers.
xemacs.texi(,289) * Numbers: RegNumbers.        Numbers in registers.
xemacs.texi(,290) * Bookmarks::                 Bookmarks are like registers, but persistent.
xemacs.texi(,291) 
xemacs.texi(,292) Controlling the Display
xemacs.texi(,293) 
xemacs.texi(,294) * Scrolling::	           Moving text up and down in a window.
xemacs.texi(,295) * Horizontal Scrolling::   Moving text left and right in a window.
xemacs.texi(,296) * Selective Display::      Hiding lines with lots of indentation.
xemacs.texi(,297) * Display Vars::           Information on variables for customizing display.
xemacs.texi(,298) 
xemacs.texi(,299) Searching and Replacement
xemacs.texi(,300) 
xemacs.texi(,301) * Incremental Search::     Search happens as you type the string.
xemacs.texi(,302) * Non-Incremental Search:: Specify entire string and then search.
xemacs.texi(,303) * Word Search::            Search for sequence of words.
xemacs.texi(,304) * Regexp Search::          Search for match for a regexp.
xemacs.texi(,305) * Regexps::                Syntax of regular expressions.
xemacs.texi(,306) * Search Case::            To ignore case while searching, or not.
xemacs.texi(,307) * Replace::                Search, and replace some or all matches.
xemacs.texi(,308) * Other Repeating Search:: Operating on all matches for some regexp.
xemacs.texi(,309) 
xemacs.texi(,310) Replacement Commands
xemacs.texi(,311) 
xemacs.texi(,312) * Unconditional Replace::  Replacing all matches for a string.
xemacs.texi(,313) * Regexp Replace::         Replacing all matches for a regexp.
xemacs.texi(,314) * Replacement and Case::   How replacements preserve case of letters.
xemacs.texi(,315) * Query Replace::          How to use querying.
xemacs.texi(,316) 
xemacs.texi(,317) Commands for Fixing Typos
xemacs.texi(,318) 
xemacs.texi(,319) * Kill Errors:: Commands to kill a batch of recently entered text.
xemacs.texi(,320) * Transpose::   Exchanging two characters, words, lines, lists...
xemacs.texi(,321) * Fixing Case:: Correcting case of last word entered.
xemacs.texi(,322) * Spelling::    Apply spelling checker to a word, or a whole file.
xemacs.texi(,323) 
xemacs.texi(,324) File Handling
xemacs.texi(,325) 
xemacs.texi(,326) * File Names::       How to type and edit file name arguments.
xemacs.texi(,327) * Visiting::         Visiting a file prepares XEmacs to edit the file.
xemacs.texi(,328) * Saving::           Saving makes your changes permanent.
xemacs.texi(,329) * Reverting::        Reverting cancels all the changes not saved.
xemacs.texi(,330) * Auto Save::        Auto Save periodically protects against loss of data.
xemacs.texi(,331) * Version Control::  Version control systems (RCS and SCCS).
xemacs.texi(,332) * ListDir::          Listing the contents of a file directory.
xemacs.texi(,333) * Comparing Files::  Finding where two files differ.
xemacs.texi(,334) * Dired::            ``Editing'' a directory to delete, rename, etc.
xemacs.texi(,335)                      the files in it.
xemacs.texi(,336) * Misc File Ops::    Other things you can do on files.
xemacs.texi(,337) 
xemacs.texi(,338) Saving Files
xemacs.texi(,339) 
xemacs.texi(,340) * Backup::       How XEmacs saves the old version of your file.
xemacs.texi(,341) * Interlocking:: How XEmacs protects against simultaneous editing
xemacs.texi(,342)                   of one file by two users.
xemacs.texi(,343) 
xemacs.texi(,344) Backup Files
xemacs.texi(,345) 
xemacs.texi(,346) * Names: Backup Names.		How backup files are named;
xemacs.texi(,347) 				Choosing single or numbered backup files.
xemacs.texi(,348) * Deletion: Backup Deletion.	XEmacs deletes excess numbered backups.
xemacs.texi(,349) * Copying: Backup Copying.	Backups can be made by copying or renaming.
xemacs.texi(,350) 
xemacs.texi(,351) Auto-Saving: Protection Against Disasters
xemacs.texi(,352) 
xemacs.texi(,353) * Files: Auto Save Files.
xemacs.texi(,354) * Control: Auto Save Control.
xemacs.texi(,355) * Recover::		Recovering text from auto-save files.
xemacs.texi(,356) 
xemacs.texi(,357) Version Control
xemacs.texi(,358) 
xemacs.texi(,359) * Concepts of VC::		Basic version control information;
xemacs.texi(,360) 				  checking files in and out.
xemacs.texi(,361) * Editing with VC::		Commands for editing a file maintained
xemacs.texi(,362) 				  with version control.
xemacs.texi(,363) * Variables for Check-in/out::	Variables that affect the commands used
xemacs.texi(,364) 				  to check files in or out.
xemacs.texi(,365) * Log Entries::			Logging your changes.
xemacs.texi(,366) * Change Logs and VC::		Generating a change log file from log
xemacs.texi(,367) 				  entries. 
xemacs.texi(,368) * Old Versions::		Examining and comparing old versions.
xemacs.texi(,369) * VC Status::			Commands to view the VC status of files and
xemacs.texi(,370) 				  look at log entries.
xemacs.texi(,371) * Renaming and VC::		A command to rename both the source and
xemacs.texi(,372) 				  master file correctly.
xemacs.texi(,373) * Snapshots::			How to make and use snapshots, a set of
xemacs.texi(,374) 				  file versions that can be treated as a unit.
xemacs.texi(,375) * Version Headers::		Inserting version control headers into
xemacs.texi(,376) 				  working files.
xemacs.texi(,377) 
xemacs.texi(,378) Snapshots
xemacs.texi(,379) 
xemacs.texi(,380) * Making Snapshots::		The snapshot facilities.
xemacs.texi(,381) * Snapshot Caveats::		Things to be careful of when using snapshots.
xemacs.texi(,382) 
xemacs.texi(,383) Dired, the Directory Editor
xemacs.texi(,384) 
xemacs.texi(,385) * Enter: Dired Enter.         How to invoke Dired.
xemacs.texi(,386) * Edit: Dired Edit.           Editing the Dired buffer.
xemacs.texi(,387) * Deletion: Dired Deletion.   Deleting files with Dired.
xemacs.texi(,388) * Immed: Dired Immed.         Other file operations through Dired.
xemacs.texi(,389) 
xemacs.texi(,390) Using Multiple Buffers
xemacs.texi(,391) 
xemacs.texi(,392) * Select Buffer::   Creating a new buffer or reselecting an old one.
xemacs.texi(,393) * List Buffers::    Getting a list of buffers that exist.
xemacs.texi(,394) * Misc Buffer::     Renaming; changing read-onliness; copying text.
xemacs.texi(,395) * Kill Buffer::     Killing buffers you no longer need.
xemacs.texi(,396) * Several Buffers:: How to go through the list of all buffers
xemacs.texi(,397)                      and operate variously on several of them.
xemacs.texi(,398) 
xemacs.texi(,399) Multiple Windows
xemacs.texi(,400) 
xemacs.texi(,401) * Basic Window::     Introduction to XEmacs windows.
xemacs.texi(,402) * Split Window::     New windows are made by splitting existing windows.
xemacs.texi(,403) * Other Window::     Moving to another window or doing something to it.
xemacs.texi(,404) * Pop Up Window::    Finding a file or buffer in another window.
xemacs.texi(,405) * Change Window::    Deleting windows and changing their sizes.
xemacs.texi(,406) 
xemacs.texi(,407) Major Modes
xemacs.texi(,408) 
xemacs.texi(,409) * Choosing Modes::     How major modes are specified or chosen.
xemacs.texi(,410) 
xemacs.texi(,411) Indentation
xemacs.texi(,412) 
xemacs.texi(,413) * Indentation Commands:: Various commands and techniques for indentation.
xemacs.texi(,414) * Tab Stops::            You can set arbitrary "tab stops" and then
xemacs.texi(,415)                          indent to the next tab stop when you want to.
xemacs.texi(,416) * Just Spaces::          You can request indentation using just spaces.
xemacs.texi(,417) 
xemacs.texi(,418) Commands for Human Languages
xemacs.texi(,419) 
xemacs.texi(,420) * Text Mode::   The major modes for editing text files.
xemacs.texi(,421) * Nroff Mode::  The major mode for editing input to the formatter nroff.
xemacs.texi(,422) * TeX Mode::    The major modes for editing input to the formatter TeX.
xemacs.texi(,423) * Outline Mode:: The major mode for editing outlines.
xemacs.texi(,424) * Words::       Moving over and killing words.
xemacs.texi(,425) * Sentences::   Moving over and killing sentences.
xemacs.texi(,426) * Paragraphs::	Moving over paragraphs.
xemacs.texi(,427) * Pages::	Moving over pages.
xemacs.texi(,428) * Filling::     Filling or justifying text
xemacs.texi(,429) * Case::        Changing the case of text
xemacs.texi(,430) 
xemacs.texi(,431) @TeX{} Mode
xemacs.texi(,432) 
xemacs.texi(,433) * Editing: TeX Editing.   Special commands for editing in TeX mode.
xemacs.texi(,434) * Printing: TeX Print.    Commands for printing part of a file with TeX.
xemacs.texi(,435) 
xemacs.texi(,436) Outline Mode
xemacs.texi(,437) 
xemacs.texi(,438) * Format: Outline Format.	  What the text of an outline looks like.
xemacs.texi(,439) * Motion: Outline Motion.	  Special commands for moving through outlines.
xemacs.texi(,440) * Visibility: Outline Visibility. Commands to control what is visible.
xemacs.texi(,441) 
xemacs.texi(,442) Filling Text
xemacs.texi(,443) 
xemacs.texi(,444) * Auto Fill::	  Auto Fill mode breaks long lines automatically.
xemacs.texi(,445) * Fill Commands:: Commands to refill paragraphs and center lines.
xemacs.texi(,446) * Fill Prefix::   Filling when every line is indented or in a comment, etc.
xemacs.texi(,447) 
xemacs.texi(,448) Editing Programs
xemacs.texi(,449) 
xemacs.texi(,450) * Program Modes::       Major modes for editing programs.
xemacs.texi(,451) * Lists::               Expressions with balanced parentheses.
xemacs.texi(,452)                          There are editing commands to operate on them.
xemacs.texi(,453) * Defuns::              Each program is made up of separate functions.
xemacs.texi(,454)                          There are editing commands to operate on them.
xemacs.texi(,455) * Grinding::            Adjusting indentation to show the nesting.
xemacs.texi(,456) * Matching::            Insertion of a close-delimiter flashes matching open.
xemacs.texi(,457) * Comments::            Inserting, filling and aligning comments.
xemacs.texi(,458) * Balanced Editing::    Inserting two matching parentheses at once, etc.
xemacs.texi(,459) * Lisp Completion::     Completion on symbol names in Lisp code.
xemacs.texi(,460) * Documentation::       Getting documentation of functions you plan to call.
xemacs.texi(,461) * Change Log::          Maintaining a change history for your program.
xemacs.texi(,462) * Tags::                Go directly to any function in your program in one
xemacs.texi(,463)                          command.  Tags remembers which file it is in.
xemacs.texi(,464) * Fortran::		Fortran mode and its special features.
xemacs.texi(,465) * Asm Mode::            Asm mode and its special features.
xemacs.texi(,466) 
xemacs.texi(,467) Indentation for Programs
xemacs.texi(,468) 
xemacs.texi(,469) * Basic Indent::
xemacs.texi(,470) * Multi-line Indent::   Commands to reindent many lines at once.
xemacs.texi(,471) * Lisp Indent::		Specifying how each Lisp function should be indented.
xemacs.texi(,472) * C Indent::		Choosing an indentation style for C code.
xemacs.texi(,473) 
xemacs.texi(,474) Tags Tables
xemacs.texi(,475) 
xemacs.texi(,476) * Tag Syntax::		Tag syntax for various types of code and text files.  
xemacs.texi(,477) * Create Tags Table::	Creating a tags table with @code{etags}.
xemacs.texi(,478) * Select Tags Table::	How to visit a tags table.
xemacs.texi(,479) * Find Tag::		Commands to find the definition of a specific tag. 
xemacs.texi(,480) * Tags Search::		Using a tags table for searching and replacing.
xemacs.texi(,481) * List Tags::		Listing and finding tags defined in a file.
xemacs.texi(,482) 
xemacs.texi(,483) Fortran Mode
xemacs.texi(,484) 
xemacs.texi(,485) * Motion: Fortran Motion.     Moving point by statements or subprograms.
xemacs.texi(,486) * Indent: Fortran Indent.     Indentation commands for Fortran.
xemacs.texi(,487) * Comments: Fortran Comments. Inserting and aligning comments.
xemacs.texi(,488) * Columns: Fortran Columns.   Measuring columns for valid Fortran.
xemacs.texi(,489) * Abbrev: Fortran Abbrev.     Built-in abbrevs for Fortran keywords.
xemacs.texi(,490) 
xemacs.texi(,491) Fortran Indentation
xemacs.texi(,492) 
xemacs.texi(,493) * Commands: ForIndent Commands. Commands for indenting Fortran.
xemacs.texi(,494) * Numbers:  ForIndent Num.      How line numbers auto-indent.
xemacs.texi(,495) * Conv:     ForIndent Conv.     Conventions you must obey to avoid trouble.
xemacs.texi(,496) * Vars:     ForIndent Vars.     Variables controlling Fortran indent style.
xemacs.texi(,497) 
xemacs.texi(,498) Compiling and Testing Programs
xemacs.texi(,499) 
xemacs.texi(,500) * Compilation::        Compiling programs in languages other than Lisp
xemacs.texi(,501)                         (C, Pascal, etc.)
xemacs.texi(,502) * Modes: Lisp Modes.   Various modes for editing Lisp programs, with
xemacs.texi(,503)                        different facilities for running the Lisp programs.
xemacs.texi(,504) * Libraries: Lisp Libraries.      Creating Lisp programs to run in XEmacs.
xemacs.texi(,505) * Eval: Lisp Eval.     Executing a single Lisp expression in XEmacs.
xemacs.texi(,506) * Debug: Lisp Debug.   Debugging Lisp programs running in XEmacs.
xemacs.texi(,507) * Interaction: Lisp Interaction.  Executing Lisp in an XEmacs buffer.
xemacs.texi(,508) * External Lisp::      Communicating through XEmacs with a separate Lisp.
xemacs.texi(,509) 
xemacs.texi(,510) Lisp Libraries
xemacs.texi(,511) 
xemacs.texi(,512) * Loading::		Loading libraries of Lisp code into XEmacs for use.
xemacs.texi(,513) * Compiling Libraries:: Compiling a library makes it load and run faster.
xemacs.texi(,514) * Mocklisp::		Converting Mocklisp to Lisp so XEmacs can run it.
xemacs.texi(,515) 
xemacs.texi(,516) Abbrevs
xemacs.texi(,517) 
xemacs.texi(,518) * Defining Abbrevs::  Defining an abbrev, so it will expand when typed.
xemacs.texi(,519) * Expanding Abbrevs:: Controlling expansion: prefixes, canceling expansion.
xemacs.texi(,520) * Editing Abbrevs::   Viewing or editing the entire list of defined abbrevs.
xemacs.texi(,521) * Saving Abbrevs::    Saving the entire list of abbrevs for another session.
xemacs.texi(,522) * Dynamic Abbrevs::   Abbreviations for words already in the buffer.
xemacs.texi(,523) 
xemacs.texi(,524) Editing Pictures
xemacs.texi(,525) 
xemacs.texi(,526) * Basic Picture::         Basic concepts and simple commands of Picture Mode.
xemacs.texi(,527) * Insert in Picture::     Controlling direction of cursor motion
xemacs.texi(,528)                            after "self-inserting" characters.
xemacs.texi(,529) * Tabs in Picture::       Various features for tab stops and indentation.
xemacs.texi(,530) * Rectangles in Picture:: Clearing and superimposing rectangles.
xemacs.texi(,531) 
xemacs.texi(,532) Sending Mail
xemacs.texi(,533) 
xemacs.texi(,534) * Format: Mail Format.    Format of the mail being composed.
xemacs.texi(,535) * Headers: Mail Headers.  Details of allowed mail header fields.
xemacs.texi(,536) * Mode: Mail Mode.        Special commands for editing mail being composed.
xemacs.texi(,537) 
xemacs.texi(,538) Running Shell Commands from XEmacs
xemacs.texi(,539) 
xemacs.texi(,540) * Single Shell::         How to run one shell command and return.
xemacs.texi(,541) * Interactive Shell::    Permanent shell taking input via XEmacs.
xemacs.texi(,542) * Shell Mode::           Special XEmacs commands used with permanent shell.
xemacs.texi(,543) 
xemacs.texi(,544) Customization
xemacs.texi(,545) 
xemacs.texi(,546) * Minor Modes::     Each minor mode is one feature you can turn on
xemacs.texi(,547)                      independently of any others.
xemacs.texi(,548) * Variables::       Many XEmacs commands examine XEmacs variables
xemacs.texi(,549)                      to decide what to do; by setting variables,
xemacs.texi(,550)                      you can control their functioning.
xemacs.texi(,551) * Keyboard Macros:: A keyboard macro records a sequence of keystrokes
xemacs.texi(,552)                      to be replayed with a single command.
xemacs.texi(,553) * Key Bindings::    The keymaps say what command each key runs.
xemacs.texi(,554)                      By changing them, you can "redefine keys".
xemacs.texi(,555) * Syntax::          The syntax table controls how words and expressions
xemacs.texi(,556)                      are parsed.
xemacs.texi(,557) * Init File::       How to write common customizations in the init file.
xemacs.texi(,558) * Audible Bell::    Changing how XEmacs sounds the bell. 
xemacs.texi(,559) * Faces::           Changing the fonts and colors of a region of text. 
xemacs.texi(,560) * X Resources::	    X resources controlling various aspects of the
xemacs.texi(,561)                      behavior of XEmacs.
xemacs.texi(,562) 
xemacs.texi(,563) Variables
xemacs.texi(,564) 
xemacs.texi(,565) * Examining::           Examining or setting one variable's value.
xemacs.texi(,566) * Easy Customization::  Convenient and easy customization of variables.
xemacs.texi(,567) * Edit Options::        Examining or editing list of all variables' values.
xemacs.texi(,568) * Locals::              Per-buffer values of variables.
xemacs.texi(,569) * File Variables::      How files can specify variable values.
xemacs.texi(,570) 
xemacs.texi(,571) Keyboard Macros
xemacs.texi(,572) 
xemacs.texi(,573) * Basic Kbd Macro::     Defining and running keyboard macros.
xemacs.texi(,574) * Save Kbd Macro::      Giving keyboard macros names; saving them in files.
xemacs.texi(,575) * Kbd Macro Query::     Keyboard macros that do different things each use.
xemacs.texi(,576) 
xemacs.texi(,577) Customizing Key Bindings
xemacs.texi(,578) 
xemacs.texi(,579) * Keymaps::    Definition of the keymap data structure.
xemacs.texi(,580)                Names of XEmacs's standard keymaps.
xemacs.texi(,581) * Rebinding::  How to redefine one key's meaning conveniently.
xemacs.texi(,582) * Disabling::  Disabling a command means confirmation is required
xemacs.texi(,583)                 before it can be executed.  This is done to protect
xemacs.texi(,584)                 beginners from surprises.
xemacs.texi(,585) 
xemacs.texi(,586) The Syntax Table
xemacs.texi(,587) 
xemacs.texi(,588) * Entry: Syntax Entry.    What the syntax table records for each character.
xemacs.texi(,589) * Change: Syntax Change.  How to change the information.
xemacs.texi(,590) 
xemacs.texi(,591) The Init File
xemacs.texi(,592) 
xemacs.texi(,593) * Init Syntax::     Syntax of constants in Emacs Lisp.
xemacs.texi(,594) * Init Examples::   How to do some things with an init file.
xemacs.texi(,595) * Terminal Init::   Each terminal type can have an init file.
xemacs.texi(,596) 
xemacs.texi(,597) Dealing with XEmacs Trouble
xemacs.texi(,598) 
xemacs.texi(,599) * Stuck Recursive::    `[...]' in mode line around the parentheses.
xemacs.texi(,600) * Screen Garbled::     Garbage on the screen.
xemacs.texi(,601) * Text Garbled::       Garbage in the text.
xemacs.texi(,602) * Unasked-for Search:: Spontaneous entry to incremental search.
xemacs.texi(,603) * Emergency Escape::   Emergency escape---
xemacs.texi(,604)                         What to do if XEmacs stops responding.
xemacs.texi(,605) * Total Frustration::  When you are at your wits' end.
xemacs.texi(,606) 
xemacs.texi(,607) @end menu
xemacs.texi(,608) 
xemacs.texi(,669) 
xemacs.texi(,670) @comment  node-name,  next,  previous,  up
xemacs.texi(,671) @node License, Distrib, Top, Top
xemacs.texi(,672) @unnumbered GNU GENERAL PUBLIC LICENSE
xemacs.texi(,673) @center Version 1, February 1989
xemacs.texi(,674) @cindex license to copy XEmacs
xemacs.texi(,675) @cindex General Public License
xemacs.texi(,676) 
xemacs.texi(,677) @display
xemacs.texi(,678) Copyright @copyright{} 1989 Free Software Foundation, Inc.
xemacs.texi(,679) 675 Mass Ave, Cambridge, MA 02139, USA
xemacs.texi(,680) 
xemacs.texi(,681) Everyone is permitted to copy and distribute verbatim copies
xemacs.texi(,682) of this license document, but changing it is not allowed.
xemacs.texi(,683) @end display
xemacs.texi(,684) 
xemacs.texi(,685) @unnumberedsec Preamble
xemacs.texi(,686) 
xemacs.texi(,687)   The license agreements of most software companies try to keep users
xemacs.texi(,688) at the mercy of those companies.  By contrast, our General Public
xemacs.texi(,689) License is intended to guarantee your freedom to share and change free
xemacs.texi(,690) software---to make sure the software is free for all its users.  The
xemacs.texi(,691) General Public License applies to the Free Software Foundation's
xemacs.texi(,692) software and to any other program whose authors commit to using it.
xemacs.texi(,693) You can use it for your programs, too.
xemacs.texi(,694) 
xemacs.texi(,695)   When we speak of free software, we are referring to freedom, not
xemacs.texi(,696) price.  Specifically, the General Public License is designed to make
xemacs.texi(,697) sure that you have the freedom to give away or sell copies of free
xemacs.texi(,698) software, that you receive source code or can get it if you want it,
xemacs.texi(,699) that you can change the software or use pieces of it in new free
xemacs.texi(,700) programs; and that you know you can do these things.
xemacs.texi(,701) 
xemacs.texi(,702)   To protect your rights, we need to make restrictions that forbid
xemacs.texi(,703) anyone to deny you these rights or to ask you to surrender the rights.
xemacs.texi(,704) These restrictions translate to certain responsibilities for you if you
xemacs.texi(,705) distribute copies of the software, or if you modify it.
xemacs.texi(,706) 
xemacs.texi(,707)   For example, if you distribute copies of a such a program, whether
xemacs.texi(,708) gratis or for a fee, you must give the recipients all the rights that
xemacs.texi(,709) you have.  You must make sure that they, too, receive or can get the
xemacs.texi(,710) source code.  And you must tell them their rights.
xemacs.texi(,711) 
xemacs.texi(,712)   We protect your rights with two steps: (1) copyright the software, and
xemacs.texi(,713) (2) offer you this license which gives you legal permission to copy,
xemacs.texi(,714) distribute and/or modify the software.
xemacs.texi(,715) 
xemacs.texi(,716)   Also, for each author's protection and ours, we want to make certain
xemacs.texi(,717) that everyone understands that there is no warranty for this free
xemacs.texi(,718) software.  If the software is modified by someone else and passed on, we
xemacs.texi(,719) want its recipients to know that what they have is not the original, so
xemacs.texi(,720) that any problems introduced by others will not reflect on the original
xemacs.texi(,721) authors' reputations.
xemacs.texi(,722) 
xemacs.texi(,723)   The precise terms and conditions for copying, distribution and
xemacs.texi(,724) modification follow.
xemacs.texi(,725) 
xemacs.texi(,730) @center TERMS AND CONDITIONS
xemacs.texi(,732) 
xemacs.texi(,733) @enumerate
xemacs.texi(,734) @item
xemacs.texi(,735) This License Agreement applies to any program or other work which
xemacs.texi(,736) contains a notice placed by the copyright holder saying it may be
xemacs.texi(,737) distributed under the terms of this General Public License.  The
xemacs.texi(,738) ``Program'', below, refers to any such program or work, and a ``work based
xemacs.texi(,739) on the Program'' means either the Program or any work containing the
xemacs.texi(,740) Program or a portion of it, either verbatim or with modifications.  Each
xemacs.texi(,741) licensee is addressed as ``you''.
xemacs.texi(,742) 
xemacs.texi(,743) @item
xemacs.texi(,744) @cindex Distribution
xemacs.texi(,745) You may copy and distribute verbatim copies of the Program's source
xemacs.texi(,746) code as you receive it, in any medium, provided that you conspicuously and
xemacs.texi(,747) appropriately publish on each copy an appropriate copyright notice and
xemacs.texi(,748) disclaimer of warranty; keep intact all the notices that refer to this
xemacs.texi(,749) General Public License and to the absence of any warranty; and give any
xemacs.texi(,750) other recipients of the Program a copy of this General Public License
xemacs.texi(,751) along with the Program.  You may charge a fee for the physical act of
xemacs.texi(,752) transferring a copy.
xemacs.texi(,753) 
xemacs.texi(,754) @item
xemacs.texi(,755) You may modify your copy or copies of the Program or any portion of
xemacs.texi(,756) it, and copy and distribute such modifications under the terms of Paragraph
xemacs.texi(,757) 1 above, provided that you also do the following:
xemacs.texi(,758) 
xemacs.texi(,759) @itemize @bullet
xemacs.texi(,760) @item
xemacs.texi(,761) cause the modified files to carry prominent notices stating that
xemacs.texi(,762) you changed the files and the date of any change; and
xemacs.texi(,763) 
xemacs.texi(,764) @item
xemacs.texi(,765) cause the whole of any work that you distribute or publish, that
xemacs.texi(,766) in whole or in part contains the Program or any part thereof, either
xemacs.texi(,767) with or without modifications, to be licensed at no charge to all
xemacs.texi(,768) third parties under the terms of this General Public License (except
xemacs.texi(,769) that you may choose to grant warranty protection to some or all
xemacs.texi(,770) third parties, at your option).
xemacs.texi(,771) 
xemacs.texi(,772) @item
xemacs.texi(,773) If the modified program normally reads commands interactively when
xemacs.texi(,774) run, you must cause it, when started running for such interactive use
xemacs.texi(,775) in the simplest and most usual way, to print or display an
xemacs.texi(,776) announcement including an appropriate copyright notice and a notice
xemacs.texi(,777) that there is no warranty (or else, saying that you provide a
xemacs.texi(,778) warranty) and that users may redistribute the program under these
xemacs.texi(,779) conditions, and telling the user how to view a copy of this General
xemacs.texi(,780) Public License.
xemacs.texi(,781) 
xemacs.texi(,782) @item
xemacs.texi(,783) You may charge a fee for the physical act of transferring a
xemacs.texi(,784) copy, and you may at your option offer warranty protection in
xemacs.texi(,785) exchange for a fee.
xemacs.texi(,786) @end itemize
xemacs.texi(,787) 
xemacs.texi(,788) Mere aggregation of another independent work with the Program (or its
xemacs.texi(,789) derivative) on a volume of a storage or distribution medium does not bring
xemacs.texi(,790) the other work under the scope of these terms.
xemacs.texi(,791) 
xemacs.texi(,792) @item
xemacs.texi(,793) You may copy and distribute the Program (or a portion or derivative of
xemacs.texi(,794) it, under Paragraph 2) in object code or executable form under the terms of
xemacs.texi(,795) Paragraphs 1 and 2 above provided that you also do one of the following:
xemacs.texi(,796) 
xemacs.texi(,797) @itemize @bullet
xemacs.texi(,798) @item
xemacs.texi(,799) accompany it with the complete corresponding machine-readable
xemacs.texi(,800) source code, which must be distributed under the terms of
xemacs.texi(,801) Paragraphs 1 and 2 above; or,
xemacs.texi(,802) 
xemacs.texi(,803) @item
xemacs.texi(,804) accompany it with a written offer, valid for at least three
xemacs.texi(,805) years, to give any third party free (except for a nominal charge
xemacs.texi(,806) for the cost of distribution) a complete machine-readable copy of the
xemacs.texi(,807) corresponding source code, to be distributed under the terms of
xemacs.texi(,808) Paragraphs 1 and 2 above; or,
xemacs.texi(,809) 
xemacs.texi(,810) @item
xemacs.texi(,811) accompany it with the information you received as to where the
xemacs.texi(,812) corresponding source code may be obtained.  (This alternative is
xemacs.texi(,813) allowed only for noncommercial distribution and only if you
xemacs.texi(,814) received the program in object code or executable form alone.)
xemacs.texi(,815) @end itemize
xemacs.texi(,816) 
xemacs.texi(,817) Source code for a work means the preferred form of the work for making
xemacs.texi(,818) modifications to it.  For an executable file, complete source code means
xemacs.texi(,819) all the source code for all modules it contains; but, as a special
xemacs.texi(,820) exception, it need not include source code for modules which are standard
xemacs.texi(,821) libraries that accompany the operating system on which the executable
xemacs.texi(,822) file runs, or for standard header files or definitions files that
xemacs.texi(,823) accompany that operating system.
xemacs.texi(,824) 
xemacs.texi(,825) @item
xemacs.texi(,826) You may not copy, modify, sublicense, distribute or transfer the
xemacs.texi(,827) Program except as expressly provided under this General Public License.
xemacs.texi(,828) Any attempt otherwise to copy, modify, sublicense, distribute or transfer
xemacs.texi(,829) the Program is void, and will automatically terminate your rights to use
xemacs.texi(,830) the Program under this License.  However, parties who have received
xemacs.texi(,831) copies, or rights to use copies, from you under this General Public
xemacs.texi(,832) License will not have their licenses terminated so long as such parties
xemacs.texi(,833) remain in full compliance.
xemacs.texi(,834) 
xemacs.texi(,835) @item
xemacs.texi(,836) By copying, distributing or modifying the Program (or any work based
xemacs.texi(,837) on the Program) you indicate your acceptance of this license to do so,
xemacs.texi(,838) and all its terms and conditions.
xemacs.texi(,839) 
xemacs.texi(,840) @item
xemacs.texi(,841) Each time you redistribute the Program (or any work based on the
xemacs.texi(,842) Program), the recipient automatically receives a license from the original
xemacs.texi(,843) licensor to copy, distribute or modify the Program subject to these
xemacs.texi(,844) terms and conditions.  You may not impose any further restrictions on the
xemacs.texi(,845) recipients' exercise of the rights granted herein.
xemacs.texi(,846) 
xemacs.texi(,847) @page
xemacs.texi(,848) @item
xemacs.texi(,849) The Free Software Foundation may publish revised and/or new versions
xemacs.texi(,850) of the General Public License from time to time.  Such new versions will
xemacs.texi(,851) be similar in spirit to the present version, but may differ in detail to
xemacs.texi(,852) address new problems or concerns.
xemacs.texi(,853) 
xemacs.texi(,854) Each version is given a distinguishing version number.  If the Program
xemacs.texi(,855) specifies a version number of the license which applies to it and ``any
xemacs.texi(,856) later version'', you have the option of following the terms and conditions
xemacs.texi(,857) either of that version or of any later version published by the Free
xemacs.texi(,858) Software Foundation.  If the Program does not specify a version number of
xemacs.texi(,859) the license, you may choose any version ever published by the Free Software
xemacs.texi(,860) Foundation.
xemacs.texi(,861) 
xemacs.texi(,862) @item
xemacs.texi(,863) If you wish to incorporate parts of the Program into other free
xemacs.texi(,864) programs whose distribution conditions are different, write to the author
xemacs.texi(,865) to ask for permission.  For software which is copyrighted by the Free
xemacs.texi(,866) Software Foundation, write to the Free Software Foundation; we sometimes
xemacs.texi(,867) make exceptions for this.  Our decision will be guided by the two goals
xemacs.texi(,868) of preserving the free status of all derivatives of our free software and
xemacs.texi(,869) of promoting the sharing and reuse of software generally.
xemacs.texi(,870) 
xemacs.texi(,875) @center NO WARRANTY
xemacs.texi(,877) 
xemacs.texi(,878) @item
xemacs.texi(,879) BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
xemacs.texi(,880) FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
xemacs.texi(,881) OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
xemacs.texi(,882) PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
xemacs.texi(,883) OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
xemacs.texi(,884) MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
xemacs.texi(,885) TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
xemacs.texi(,886) PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
xemacs.texi(,887) REPAIR OR CORRECTION.
xemacs.texi(,888) 
xemacs.texi(,889) @item
xemacs.texi(,890) IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
xemacs.texi(,891) ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
xemacs.texi(,892) REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
xemacs.texi(,893) INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
xemacs.texi(,894) ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT
xemacs.texi(,895) LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES
xemacs.texi(,896) SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
xemacs.texi(,897) WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
xemacs.texi(,898) ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
xemacs.texi(,899) @end enumerate
xemacs.texi(,900) 
xemacs.texi(,905) @center END OF TERMS AND CONDITIONS
xemacs.texi(,907) 
xemacs.texi(,908) @page
xemacs.texi(,909) @unnumberedsec Appendix: How to Apply These Terms to Your New Programs
xemacs.texi(,910) 
xemacs.texi(,911)   If you develop a new program, and you want it to be of the greatest
xemacs.texi(,912) possible use to humanity, the best way to achieve this is to make it
xemacs.texi(,913) free software which everyone can redistribute and change under these
xemacs.texi(,914) terms.
xemacs.texi(,915) 
xemacs.texi(,916)   To do so, attach the following notices to the program.  It is safest to
xemacs.texi(,917) attach them to the start of each source file to most effectively convey
xemacs.texi(,918) the exclusion of warranty; and each file should have at least the
xemacs.texi(,919) ``copyright'' line and a pointer to where the full notice is found.
xemacs.texi(,920) 
xemacs.texi(,921) @smallexample
xemacs.texi(,922) @var{one line to give the program's name and a brief idea of what it does.}
xemacs.texi(,923) Copyright (C) 19@var{yy}  @var{name of author}
xemacs.texi(,924) 
xemacs.texi(,925) This program is free software; you can redistribute it and/or modify
xemacs.texi(,926) it under the terms of the GNU General Public License as published by
xemacs.texi(,927) the Free Software Foundation; either version 1, or (at your option)
xemacs.texi(,928) any later version.
xemacs.texi(,929) 
xemacs.texi(,930) This program is distributed in the hope that it will be useful,
xemacs.texi(,931) but WITHOUT ANY WARRANTY; without even the implied warranty of
xemacs.texi(,932) MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
xemacs.texi(,933) GNU General Public License for more details.
xemacs.texi(,934) 
xemacs.texi(,935) You should have received a copy of the GNU General Public License
xemacs.texi(,936) along with this program; if not, write to the Free Software
xemacs.texi(,937) Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
xemacs.texi(,938) @end smallexample
xemacs.texi(,939) 
xemacs.texi(,940) Also add information on how to contact you by electronic and paper mail.
xemacs.texi(,941) 
xemacs.texi(,942) If the program is interactive, make it output a short notice like this
xemacs.texi(,943) when it starts in an interactive mode:
xemacs.texi(,944) 
xemacs.texi(,945) @smallexample
xemacs.texi(,946) Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}
xemacs.texi(,947) Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
xemacs.texi(,948) This is free software, and you are welcome to redistribute it
xemacs.texi(,949) under certain conditions; type `show c' for details.
xemacs.texi(,950) @end smallexample
xemacs.texi(,951) 
xemacs.texi(,952) The hypothetical commands `show w' and `show c' should show the
xemacs.texi(,953) appropriate parts of the General Public License.  Of course, the
xemacs.texi(,954) commands you use may be called something other than `show w' and `show
xemacs.texi(,955) c'; they could even be mouse-clicks or menu items---whatever suits your
xemacs.texi(,956) program.
xemacs.texi(,957) 
xemacs.texi(,958) @page
xemacs.texi(,959) You should also get your employer (if you work as a programmer) or your
xemacs.texi(,960) school, if any, to sign a ``copyright disclaimer'' for the program, if
xemacs.texi(,961) necessary.  Here a sample; alter the names:
xemacs.texi(,962) 
xemacs.texi(,963) @example
xemacs.texi(,964) Yoyodyne, Inc., hereby disclaims all copyright interest in the
xemacs.texi(,965) program `Gnomovision' (a program to direct compilers to make passes
xemacs.texi(,966) at assemblers) written by James Hacker.
xemacs.texi(,967) 
xemacs.texi(,968) @var{signature of Ty Coon}, 1 April 1989
xemacs.texi(,969) Ty Coon, President of Vice
xemacs.texi(,970) @end example
xemacs.texi(,971) 
xemacs.texi(,972) That's all there is to it!
xemacs.texi(,973) 
xemacs.texi(,974) @comment  node-name,  next,  previous,  up
xemacs.texi(,975) @node Distrib, Intro, License, Top
xemacs.texi(,976) @unnumbered Distribution
xemacs.texi(,977) 
xemacs.texi(,978) XEmacs is @dfn{free}; this means that everyone is free to use it and
xemacs.texi(,979) free to redistribute it on a free basis.  XEmacs is not in the public
xemacs.texi(,980) domain; it is copyrighted and there are restrictions on its
xemacs.texi(,981) distribution, but these restrictions are designed to permit everything
xemacs.texi(,982) that a good cooperating citizen would want to do.  What is not allowed
xemacs.texi(,983) is to try to prevent others from further sharing any version of XEmacs
xemacs.texi(,984) that they might get from you.  The precise conditions are found in
xemacs.texi(,985) the GNU General Public License that comes with XEmacs and also appears
xemacs.texi(,986) following this section.
xemacs.texi(,987) 
xemacs.texi(,988) The easiest way to get a copy of XEmacs is from someone else who has it.
xemacs.texi(,989) You need not ask for permission to do so, or tell any one else; just copy
xemacs.texi(,990) it.
xemacs.texi(,991) 
xemacs.texi(,992) If you have access to the Internet, you can get the latest version of
xemacs.texi(,993) XEmacs from the anonymous FTP server @file{ftp.xemacs.org} in the directory
xemacs.texi(,994) @file{/pub/xemacs}.  It can also be found at numerous other archive
xemacs.texi(,995) sites around the world; check the file @file{etc/DISTRIB} in an XEmacs
xemacs.texi(,996) distribution for the latest known list.
xemacs.texi(,997) 
xemacs.texi(,998) 
xemacs.texi(,999) @unnumberedsec Getting Other Versions of Emacs
xemacs.texi(,1000) 
xemacs.texi(,1001) The Free Software Foundation's version of Emacs (called @dfn{FSF Emacs}
xemacs.texi(,1002) in this manual and often referred to as @dfn{GNU Emacs}) is available
xemacs.texi(,1003) by anonymous FTP from @file{prep.ai.mit.edu}.
xemacs.texi(,1004) 
xemacs.texi(,1005) Win-Emacs, an older version of XEmacs that runs on Microsoft Windows
xemacs.texi(,1006) and Windows NT, is available by anonymous FTP from @file{ftp.netcom.com}
xemacs.texi(,1007) in the directory @file{/pub/pe/pearl}, or from @file{ftp.cica.indiana.edu}
xemacs.texi(,1008) as the files @file{wemdemo*.zip} in the directory @file{/pub/pc/win3/demo}.
xemacs.texi(,1009) 
xemacs.texi(,1010) @node Intro, Glossary, Distrib, Top
xemacs.texi(,1011) @unnumbered Introduction
xemacs.texi(,1012) 
xemacs.texi(,1013)   You are reading about XEmacs, an incarnation of the advanced,
xemacs.texi(,1014) self-documenting, customizable, extensible real-time display editor
xemacs.texi(,1015) Emacs.  XEmacs provides many powerful display and user-interface
xemacs.texi(,1016) capabilities not found in other Emacsen and is mostly upwardly
xemacs.texi(,1017) compatible with GNU Emacs from the Free Software Foundation
xemacs.texi(,1018) (referred to as @dfn{FSF Emacs} in this manual).  XEmacs also
xemacs.texi(,1019) comes standard with a great number of useful packages.
xemacs.texi(,1020) 
xemacs.texi(,1021)   We say that XEmacs is a @dfn{display} editor because normally the text
xemacs.texi(,1022) being edited is visible on the screen and is updated automatically as you
xemacs.texi(,1023) type.  @xref{Frame,Display}.
xemacs.texi(,1024) 
xemacs.texi(,1025)   We call XEmacs a @dfn{real-time} editor because the display is updated very
xemacs.texi(,1026) frequently, usually after each character or pair of characters you
xemacs.texi(,1027) type.  This minimizes the amount of information you must keep in your
xemacs.texi(,1028) head as you edit.  @xref{Basic,Real-time,Basic Editing}.
xemacs.texi(,1029) 
xemacs.texi(,1030)   We call XEmacs advanced because it provides facilities that go beyond
xemacs.texi(,1031) simple insertion and deletion: filling of text; automatic indentation of
xemacs.texi(,1032) programs; viewing two or more files at once; and dealing in terms of
xemacs.texi(,1033) characters, words, lines, sentences, paragraphs, and pages, as well as
xemacs.texi(,1034) expressions and comments in several different programming languages.  It is
xemacs.texi(,1035) much easier to type one command meaning ``go to the end of the paragraph''
xemacs.texi(,1036) than to find that spot with simple cursor keys.
xemacs.texi(,1037) 
xemacs.texi(,1038)   @dfn{Self-documenting} means that at any time you can type a special
xemacs.texi(,1039) character, @kbd{Control-h}, to find out what your options are.  You can
xemacs.texi(,1040) also use @kbd{C-h} to find out what a command does, or to find all the
xemacs.texi(,1041) commands relevant to a topic.  @xref{Help}.
xemacs.texi(,1042) 
xemacs.texi(,1043)   @dfn{Customizable} means you can change the definitions of XEmacs
xemacs.texi(,1044) commands.  For example, if you use a programming language in
xemacs.texi(,1045) which comments start with @samp{<**} and end with @samp{**>}, you can tell
xemacs.texi(,1046) the XEmacs comment manipulation commands to use those strings
xemacs.texi(,1047) (@pxref{Comments}).  Another sort of customization is rearrangement of the
xemacs.texi(,1048) command set.  For example, you can set up the four basic cursor motion
xemacs.texi(,1049) commands (up, down, left and right) on keys in a diamond pattern on the
xemacs.texi(,1050) keyboard if you prefer.  @xref{Customization}.
xemacs.texi(,1051) 
xemacs.texi(,1052)   @dfn{Extensible} means you can go beyond simple customization and
xemacs.texi(,1053) write entirely new commands, programs in the Lisp language to be run by
xemacs.texi(,1054) XEmacs's own Lisp interpreter.  XEmacs is an ``on-line extensible''
xemacs.texi(,1055) system: it is divided into many functions that call each other.  You can
xemacs.texi(,1056) redefine any function in the middle of an editing session and replace
xemacs.texi(,1057) any part of XEmacs without making a separate copy of all of XEmacs.  Most
xemacs.texi(,1058) of the editing commands of XEmacs are written in Lisp; the few
xemacs.texi(,1059) exceptions could have been written in Lisp but are written in C for
xemacs.texi(,1060) efficiency.  Only a programmer can write an extension to XEmacs, but anybody
xemacs.texi(,1061) can use it afterward.
xemacs.texi(,1062) 
frame.texi(,1) @node Frame, Keystrokes, Concept Index, Top
frame.texi(,2) @comment  node-name,  next,  previous,  up
frame.texi(,3) @chapter The XEmacs Frame
frame.texi(,4) @cindex frame
frame.texi(,5) @cindex window
frame.texi(,6) @cindex buffer
frame.texi(,7) 
frame.texi(,8) @table @asis
frame.texi(,9) @item Frame
frame.texi(,10) In many environments, such as a tty terminal, an XEmacs frame
frame.texi(,11) literally takes up the whole screen.  If you are
frame.texi(,12) running XEmacs in a multi-window system like the X Window System, the
frame.texi(,13) XEmacs frame takes up one X window.  @xref{XEmacs under X}, for more
frame.texi(,14) information.@refill
frame.texi(,15) 
frame.texi(,16) @item Window
frame.texi(,17) No matter what environment you are running in, XEmacs allows you to look
frame.texi(,18) at several buffers at the same time by having several windows be part of
frame.texi(,19) the frame.  Often, the whole frame is taken up by just one window, but
frame.texi(,20) you can split the frame into two or more subwindows.  If you are
frame.texi(,21) running XEmacs under the X window system, that means you can have several
frame.texi(,22) @dfn{XEmacs windows} inside the X window that contains the XEmacs frame.
frame.texi(,23) You can even have multiple frames in different X windows, each with
frame.texi(,24) their own set of subwindows.
frame.texi(,25) @refill
frame.texi(,26) @end table
frame.texi(,27) 
frame.texi(,28) Each XEmacs frame displays a variety of information:
frame.texi(,29) @itemize @bullet
frame.texi(,30) @item
frame.texi(,31) The biggest area usually displays the text you are editing.  It may
frame.texi(,32) consist of one window or of two or more windows if you need to look at two
frame.texi(,33) buffers a the same time.
frame.texi(,34) @item
frame.texi(,35) Below each text window's last line is a @dfn{mode line} (@pxref{Mode
frame.texi(,36) Line}), which describes what is going on in that window.  The mode line
frame.texi(,37) is in inverse video if the terminal supports that.  If there are several
frame.texi(,38) XEmacs windows in one frame, each window has its own mode line.
frame.texi(,39) @item
frame.texi(,40) At the bottom of each XEmacs frame is the @dfn{echo area} or @dfn{minibuffer
frame.texi(,41) window}(@pxref{Echo Area}).  It is used by XEmacs to exchange information
frame.texi(,42) with the user.  There is only one echo area per XEmacs frame.
frame.texi(,43) @item
frame.texi(,44) If you are running XEmacs under a graphical windowing system, a
frame.texi(,45) menu bar at the top of the frame makes shortcuts to several of the
frame.texi(,46) commands available (@pxref{Pull-down Menus}).
frame.texi(,47) @item
frame.texi(,48) Under a graphical windowing system, a
frame.texi(,49) toolbar at the top of the frame, just under the menu bar if it exists,
frame.texi(,50) provides ``one-touch'' shortcuts to several commands.  (Not yet
frame.texi(,51) documented.)
frame.texi(,52) @item
frame.texi(,53) Under a graphical windowing system, a
frame.texi(,54) gutter at the top (under the toolbar) and/or bottom of the frame
frame.texi(,55) provides advanced GUI facilities like tab controls for rapid switching
frame.texi(,56) among related windows and progress bars for time-consuming operations
frame.texi(,57) like downloads across the Internet.  Gutters are an experimental feature
frame.texi(,58) introduced in XEmacs version 21.2.  (Not yet documented.)
frame.texi(,59) @end itemize
frame.texi(,60) 
frame.texi(,61)   You can subdivide the XEmacs frame into multiple text windows, and use
frame.texi(,62) each window for a different file (@pxref{Windows}).  Multiple XEmacs
frame.texi(,63) windows are tiled vertically on the XEmacs frame.  The upper XEmacs window
frame.texi(,64) is separated from the lower window by its mode line.
frame.texi(,65) 
frame.texi(,66)   When there are multiple, tiled XEmacs windows on a single XEmacs frame,
frame.texi(,67) the XEmacs window receiving input from the keyboard has the @dfn{keyboard
frame.texi(,68) focus} and is called the @dfn{selected window}.  The selected window
frame.texi(,69) contains the cursor, which indicates the insertion point.  If you are
frame.texi(,70) working in an environment that permits multiple XEmacs frames, and you
frame.texi(,71) move the focus from one XEmacs frame into another, the
frame.texi(,72) selected window is the one that was last selected in that frame.
frame.texi(,73) 
frame.texi(,74)   The same text can be displayed simultaneously in several XEmacs
frame.texi(,75) windows, which can be in different XEmacs frames.  If you alter the text
frame.texi(,76) in an XEmacs buffer by editing it in one XEmacs window, the changes are
frame.texi(,77) visible in all XEmacs windows containing that buffer.
frame.texi(,78) 
frame.texi(,79) 
frame.texi(,80) @menu
frame.texi(,81) * Point::	        The place in the text where editing commands operate.
frame.texi(,82) * Echo Area::           Short messages appear at the bottom of the frame.
frame.texi(,83) * Mode Line::	        Interpreting the mode line.
frame.texi(,84) * GUI Components::      Menubar, toolbars, gutters.
frame.texi(,85) * XEmacs under X::      Some information on using XEmacs under the X
frame.texi(,86)                         Window System.
frame.texi(,87) * XEmacs under MS Windows:: Some information on using XEmacs under
frame.texi(,88)                         Microsoft Windows.
frame.texi(,89) @end menu
frame.texi(,90) 
frame.texi(,91) @node Point, Echo Area, Frame, Frame
frame.texi(,92) @comment  node-name,  next,  previous,  up
frame.texi(,93) @section Point
frame.texi(,94) @cindex point
frame.texi(,95) @cindex cursor
frame.texi(,96) 
frame.texi(,97)   When XEmacs is running, the cursor shows the location at which editing
frame.texi(,98) commands will take effect.  This location is called @dfn{point}.  You
frame.texi(,99) can use keystrokes or the mouse cursor to move point through the text
frame.texi(,100) and edit the text at different places.
frame.texi(,101) 
frame.texi(,102)   While the cursor appears to point @var{at} a character, you should
frame.texi(,103) think of point as @var{between} two characters: it points @var{before}
frame.texi(,104) the character on which the cursor appears.  The exception is at the
frame.texi(,105) end of the line, where the cursor appears after the last character of
frame.texi(,106) the line.  Where the display is capable, the cursor at the end of the
frame.texi(,107) line will appear differently from a cursor over whitespace at the end
frame.texi(,108) of the line.  (In an X Windows frame, the end-of-line cursor is half
frame.texi(,109) the width of a within-line cursor.)  Sometimes people speak of ``the
frame.texi(,110) cursor'' when they mean ``point,'' or speak of commands that move
frame.texi(,111) point as ``cursor motion'' commands.
frame.texi(,112) 
frame.texi(,113)  Each XEmacs frame has only one cursor.  When output is in progress, the cursor
frame.texi(,114) must appear where the typing is being done.  This does not mean that
frame.texi(,115) point is moving.  It is only that XEmacs has no way to show you the
frame.texi(,116) location of point except when the terminal is idle.
frame.texi(,117) 
frame.texi(,118)   If you are editing several files in XEmacs, each file has its own point
frame.texi(,119) location.  A file that is not being displayed remembers where point is.
frame.texi(,120) Point becomes visible at the correct location when you look at the file again.
frame.texi(,121) 
frame.texi(,122)   When there are multiple text windows, each window has its own point
frame.texi(,123) location.  The cursor shows the location of point in the selected
frame.texi(,124) window.  The visible cursor also shows you which window is selected.  If
frame.texi(,125) the same buffer appears in more than one window, point can be moved in
frame.texi(,126) each window independently.
frame.texi(,127) 
frame.texi(,128)   The term `point' comes from the character @samp{.}, which was the
frame.texi(,129) command in TECO (the language in which the original Emacs was written)
frame.texi(,130) for accessing the value now called `point'.
frame.texi(,131) 
frame.texi(,132) @node Echo Area, Mode Line, Point, Frame
frame.texi(,133) @section The Echo Area
frame.texi(,134) @cindex echo area
frame.texi(,135) 
frame.texi(,136)   The line at the bottom of the frame (below the mode line) is the
frame.texi(,137) @dfn{echo area}.  XEmacs uses this area to communicate with the user:
frame.texi(,138) 
frame.texi(,139) @itemize @bullet
frame.texi(,140) @item
frame.texi(,141)   @dfn{Echoing} means printing out the characters that the user types.  XEmacs
frame.texi(,142) never echoes single-character commands.  Multi-character commands are
frame.texi(,143) echoed only if you pause while typing them: As soon as you pause for more
frame.texi(,144) than one second in the middle of a command, all the characters of the command
frame.texi(,145) so far are echoed.  This is intended to @dfn{prompt} you for the rest of
frame.texi(,146) the command.  Once echoing has started, the rest of the command is echoed
frame.texi(,147) immediately as you type it.  This behavior is designed to give confident
frame.texi(,148) users fast response, while giving hesitant users maximum feedback.  You
frame.texi(,149) can change this behavior by setting a variable (@pxref{Display Vars}).
frame.texi(,150) @item
frame.texi(,151)   If you issue a command that cannot be executed, XEmacs may print an
frame.texi(,152) @dfn{error message} in the echo area.  Error messages are accompanied by
frame.texi(,153) a beep or by flashing the frame.  Any input you have typed ahead is
frame.texi(,154) thrown away when an error happens.
frame.texi(,155) @item
frame.texi(,156)   Some commands print informative messages in the echo area.  These
frame.texi(,157) messages look similar to error messages, but are not announced with a
frame.texi(,158) beep and do not throw away input.  Sometimes a message tells you what the
frame.texi(,159) command has done, when this is not obvious from looking at the text being
frame.texi(,160) edited.  Sometimes the sole purpose of a command is to print a message
frame.texi(,161) giving you specific information.  For example, the command @kbd{C-x =} is
frame.texi(,162) used to print a message describing the character position of point in the
frame.texi(,163) text and its current column in the window.  Commands that take a long time
frame.texi(,164) often display messages ending in @samp{...} while they are working, and
frame.texi(,165) add @samp{done} at the end when they are finished.
frame.texi(,166) @item
frame.texi(,167)   The echo area is also used to display the @dfn{minibuffer}, a window
frame.texi(,168) that is used for reading arguments to commands, such as the name of a
frame.texi(,169) file to be edited.  When the minibuffer is in use, the echo area displays
frame.texi(,170) with a prompt string that usually ends with a colon.  The cursor
frame.texi(,171) appears after the prompt.  You can always get out of the minibuffer by
frame.texi(,172) typing @kbd{C-g}.  @xref{Minibuffer}.
frame.texi(,173) @end itemize
frame.texi(,174) 
frame.texi(,175) @node Mode Line, GUI Components, Echo Area, Frame
frame.texi(,176) @comment  node-name,  next,  previous,  up
frame.texi(,177) @section The Mode Line
frame.texi(,178) @cindex mode line
frame.texi(,179) @cindex top level
frame.texi(,180) 
frame.texi(,181)   Each text window's last line is a @dfn{mode line} which describes what is
frame.texi(,182) going on in that window.  When there is only one text window, the mode line
frame.texi(,183) appears right above the echo area.  The mode line is in inverse video if
frame.texi(,184) the terminal supports that, starts and ends with dashes, and contains text
frame.texi(,185) like @samp{XEmacs:@: @var{something}}.
frame.texi(,186) 
frame.texi(,187)   If a mode line has something else in place of @samp{XEmacs:@:
frame.texi(,188) @var{something}}, the window above it is in a special subsystem
frame.texi(,189) such as Dired.  The mode line then indicates the status of the
frame.texi(,190) subsystem.
frame.texi(,191) 
frame.texi(,192)   Normally, the mode line has the following appearance:
frame.texi(,193) 
frame.texi(,194) @example
frame.texi(,195) --@var{ch}-XEmacs: @var{buf}      (@var{major} @var{minor})----@var{pos}------
frame.texi(,196) @end example
frame.texi(,197) 
frame.texi(,198) @noindent
frame.texi(,199) This gives information about the buffer being displayed in the window: the
frame.texi(,200) buffer's name, what major and minor modes are in use, whether the buffer's
frame.texi(,201) text has been changed, and how far down the buffer you are currently
frame.texi(,202) looking.
frame.texi(,203) 
frame.texi(,204)   @var{ch} contains two stars (@samp{**}) if the text in the buffer has been
frame.texi(,205) edited (the buffer is ``modified''), or two dashes (@samp{--}) if the
frame.texi(,206) buffer has not been edited.  Exception: for a read-only buffer, it is
frame.texi(,207) @samp{%%}.
frame.texi(,208) 
frame.texi(,209)   @var{buf} is the name of the window's chosen @dfn{buffer}.  The chosen
frame.texi(,210) buffer in the selected window (the window that the cursor is in) is also
frame.texi(,211) XEmacs's selected buffer, the buffer in which editing takes place.  When
frame.texi(,212) we speak of what some command does to ``the buffer'', we mean the
frame.texi(,213) currently selected buffer.  @xref{Buffers}.
frame.texi(,214) 
frame.texi(,215)   @var{pos} tells you whether there is additional text above the top of
frame.texi(,216) the screen or below the bottom.  If your file is small and it is
frame.texi(,217) completely visible on the screen, @var{pos} is @samp{All}.  Otherwise,
frame.texi(,218) @var{pos} is @samp{Top} if you are looking at the beginning of the file,
frame.texi(,219) @samp{Bot} if you are looking at the end of the file, or
frame.texi(,220) @samp{@var{nn}%}, where @var{nn} is the percentage of the file above the
frame.texi(,221) top of the screen.@refill
frame.texi(,222) 
frame.texi(,223)   @var{major} is the name of the @dfn{major mode} in effect in the buffer.  At
frame.texi(,224) any time, each buffer is in one and only one major mode.
frame.texi(,225) The available major modes include Fundamental mode (the least specialized),
frame.texi(,226) Text mode, Lisp mode, and C mode.  @xref{Major Modes}, for details
frame.texi(,227) on how the modes differ and how you select one.@refill
frame.texi(,228) 
frame.texi(,229)   @var{minor} is a list of some of the @dfn{minor modes} that are turned on
frame.texi(,230) in the window's chosen buffer.  For example, @samp{Fill} means that Auto
frame.texi(,231) Fill mode is on.  @code{Abbrev} means that Word Abbrev mode is on.
frame.texi(,232) @code{Ovwrt} means that Overwrite mode is on.  @xref{Minor Modes}, for more
frame.texi(,233) information.  @samp{Narrow} means that the buffer being displayed has
frame.texi(,234) editing restricted to only a portion of its text.  This is not really a
frame.texi(,235) minor mode, but is like one.  @xref{Narrowing}.  @code{Def} means that a
frame.texi(,236) keyboard macro is being defined.  @xref{Keyboard Macros}.
frame.texi(,237) 
frame.texi(,238)   Some buffers display additional information after the minor modes.  For
frame.texi(,239) example, Rmail buffers display the current message number and the total
frame.texi(,240) number of messages.  Compilation buffers and Shell mode display the status
frame.texi(,241) of the subprocess.
frame.texi(,242) 
frame.texi(,243)   If XEmacs is currently inside a recursive editing level, square
frame.texi(,244) brackets (@samp{[@dots{}]}) appear around the parentheses that surround
frame.texi(,245) the modes.  If XEmacs is in one recursive editing level within another,
frame.texi(,246) double square brackets appear, and so on.  Since information on
frame.texi(,247) recursive editing applies to XEmacs in general and not to any one buffer,
frame.texi(,248) the square brackets appear in every mode line on the screen or not in
frame.texi(,249) any of them.  @xref{Recursive Edit}.@refill
frame.texi(,250) 
frame.texi(,251) @findex display-time
frame.texi(,252)   XEmacs can optionally display the time and system load in all mode lines.
frame.texi(,253) To enable this feature, type @kbd{M-x display-time}.  The information added
frame.texi(,254) to the mode line usually appears after the file name, before the mode names
frame.texi(,255) and their parentheses.  It looks like this:
frame.texi(,256) 
frame.texi(,257) @example
frame.texi(,258) @var{hh}:@var{mm}pm @var{l.ll} [@var{d}]
frame.texi(,259) @end example
frame.texi(,260) 
frame.texi(,261) @noindent
frame.texi(,262) (Some fields may be missing if your operating system cannot support them.)
frame.texi(,263) @var{hh} and @var{mm} are the hour and minute, followed always by @samp{am}
frame.texi(,264) or @samp{pm}.  @var{l.ll} is the average number of running processes in the
frame.texi(,265) whole system recently.  @var{d} is an approximate index of the ratio of
frame.texi(,266) disk activity to CPU activity for all users.
frame.texi(,267) 
frame.texi(,268) The word @samp{Mail} appears after the load level if there is mail for
frame.texi(,269) you that you have not read yet.
frame.texi(,270) 
frame.texi(,271) @vindex mode-line-inverse-video
frame.texi(,272)   Customization note: the variable @code{mode-line-inverse-video}
frame.texi(,273) controls whether the mode line is displayed in inverse video (assuming
frame.texi(,274) the terminal supports it); @code{nil} means no inverse video.  The
frame.texi(,275) default is @code{t}.  For X frames, simply set the foreground and
frame.texi(,276) background colors appropriately.
frame.texi(,277) 
frame.texi(,278) @node GUI Components, XEmacs under X, Mode Line, Frame
frame.texi(,279) @comment  node-name,  next,  previous,  up
frame.texi(,280) @section GUI Components
frame.texi(,281) 
frame.texi(,282) When executed in a graphical windowing environment such as the X Window
frame.texi(,283) System or Microsoft Windows, XEmacs displays several graphical user
frame.texi(,284) interface components such as scrollbars, menubars, toolbars, and
frame.texi(,285) gutters.  By default there is a vertical scrollbar at the right of each
frame.texi(,286) frame, and at the top of the frame there is a menubar, a toolbar, and a
frame.texi(,287) gutter, in that order.  Gutters can contain any of several widgets, but
frame.texi(,288) the default configuration puts a set of "notebook tabs" which you can
frame.texi(,289) use as a shortcut for selecting any of several related buffers in a
frame.texi(,290) given frame.  Operating the GUI components is "obvious":  click on the
frame.texi(,291) menubar to pull down a menu, on a button in the toolbar to invoke a
frame.texi(,292) function, and on a tab in the gutter to switch buffers.
frame.texi(,293) 
frame.texi(,294) @menu
frame.texi(,295) * Menubar Basics::      How XEmacs uses the menubar.
frame.texi(,296) * Scrollbar Basics::    How XEmacs uses scrollbars.
frame.texi(,297) * Mode Line Basics::    How XEmacs uses modelines.
frame.texi(,298) * Toolbar Basics::      How XEmacs uses toolbars.
frame.texi(,299) * Gutter Basics::       How XEmacs uses gutters.
frame.texi(,300) * Inhibiting::          What if you don't like GUI?
frame.texi(,301) * Customizing::         Position, orientation, and appearance of GUI objects.
frame.texi(,302) @end menu
frame.texi(,303) 
frame.texi(,304) @node Menubar Basics, Scrollbar Basics, , GUI Components
frame.texi(,305) @comment  node-name,  next,  previous,  up
frame.texi(,306) @section The XEmacs Menubar
frame.texi(,307) 
frame.texi(,308) The XEmacs menubar is intended to be conformant to the usual conventions
frame.texi(,309) for menubars, although conformance is not yet perfect.  The menu at the
frame.texi(,310) extreme right is the @samp{Help} menu, which should always be
frame.texi(,311) available.  It provides access to all the XEmacs help facilities
frame.texi(,312) available through @kbd{C-h}, as well as samples of various configuration
frame.texi(,313) files like @samp{~/.Xdefaults} and @samp{~/.emacs}.  At the extreme left
frame.texi(,314) is the @samp{Files} menu, which provides the usual file reading,
frame.texi(,315) writing, and printing operations, as well as operations like revert
frame.texi(,316) buffer from most recent save.  The next menu from the left is the
frame.texi(,317) @samp{Edit} menu, which provides the @samp{Undo} operation as well as
frame.texi(,318) cutting and pasting, searching, and keyboard macro definition and
frame.texi(,319) execution.
frame.texi(,320) 
frame.texi(,321) @c #### w3.el and VM should get cross-references here.
frame.texi(,322) XEmacs provides a very dynamic environment, and the Lisp language makes
frame.texi(,323) for highly flexible applications.  The menubar reflects this: many menus
frame.texi(,324) (eg, the @samp{Buffers} menu, @pxref{Buffers Menu}) contain items
frame.texi(,325) determined by the current state of XEmacs, and most major modes and many
frame.texi(,326) minor modes add items to menus and even whole menus to the menubar.  In
frame.texi(,327) fact, some applications like w3.el and VM provide so many menus that
frame.texi(,328) they define a whole new menubar and add a button that allows convenient
frame.texi(,329) switching between the ``XEmacs menubar'' and the ``application
frame.texi(,330) menubar''.  Such applications normally bind themselves to a particular
frame.texi(,331) frame, and this switching only takes place on frames where such an
frame.texi(,332) application is active (ie, the current window of the frame is displaying
frame.texi(,333) a buffer in the appropriate major mode).
frame.texi(,334) 
frame.texi(,335) Other menus which are typically available are the @samp{Options},
frame.texi(,336) @samp{Tools}, @samp{Buffers}, @samp{Apps}, and @samp{Mule} menus.  For
frame.texi(,337) detailed descriptions of these menus, @ref{Pull-down Menus}.  (In 21.2
frame.texi(,338) XEmacsen, the @samp{Mule} menu will be moved under @samp{Options}.)
frame.texi(,339) 
frame.texi(,340) @node Scrollbar Basics, Mode Line Basics, Menubar Basics, GUI Components
frame.texi(,341) @comment  node-name,  next,  previous,  up
frame.texi(,342) @section XEmacs Scrollbars
frame.texi(,343) 
frame.texi(,344) XEmacs scrollbars provide the usual interface.  Arrow buttons at either
frame.texi(,345) end allow for line by line scrolling, including autorepeat.  Clicking in
frame.texi(,346) the scrollbar itself provides scrolling by windowsfull, depending on
frame.texi(,347) which side of the slider is clicked.  The slider itself may be dragged
frame.texi(,348) for smooth scrolling.
frame.texi(,349) 
frame.texi(,350) The position of the slider corresponds to the position of the window in
frame.texi(,351) the buffer.  In particular, the length of the slider is proportional to
frame.texi(,352) the fraction of the buffer which appears in the window.
frame.texi(,353) 
frame.texi(,354) The presence of the scrollbars is under control of the application or
frame.texi(,355) may be customized by the user.  By default a vertical scrollbar is
frame.texi(,356) present in all windows (except the minibuffer), and there is no
frame.texi(,357) horizontal scrollbar.
frame.texi(,358) 
frame.texi(,359) @node Mode Line Basics, Toolbar Basics, Scrollbar Basics, GUI Components
frame.texi(,360) @comment  node-name,  next,  previous,  up
frame.texi(,361) @section XEmacs Mode Lines
frame.texi(,362) 
frame.texi(,363) When used in a windowing system, the XEmacs modelines can be dragged
frame.texi(,364) vertically. The effect is to resize the windows above and below the
frame.texi(,365) modeline (this includes the minibuffer window).
frame.texi(,366) 
frame.texi(,367) Additionally, a modeline can be dragged horizontally, in which case it
frame.texi(,368) scrolls its own text. This behavior is not enabled by default because it
frame.texi(,369) could be considered as disturbing when dragging vertically. When this
frame.texi(,370) behavior is enabled, the modeline's text can be dragged either in the
frame.texi(,371) same direction as the mouse, or in the opposite sense, making the
frame.texi(,372) modeline act as a scrollbar for its own text.
frame.texi(,373) 
frame.texi(,374) You can select the behavior you want from the @samp{Display} submenu of
frame.texi(,375) the @samp{Options} menu.
frame.texi(,376) 
frame.texi(,377) @node Toolbar Basics, Gutter Basics, Mode Line Basics, GUI Components
frame.texi(,378) @comment  node-name,  next,  previous,  up
frame.texi(,379) @section XEmacs Toolbars
frame.texi(,380) 
frame.texi(,381) XEmacs has a default toolbar which provides shortcuts for some of the
frame.texi(,382) commonly used operations (such as opening files) and applications (such
frame.texi(,383) as the Info manual reader).  Operations which require arguments will pop
frame.texi(,384) up dialogs to get them.
frame.texi(,385) 
frame.texi(,386) The position of the default toolbar can be customized.  Also, several
frame.texi(,387) toolbars may be present simultaneously (in different positions).  VM,
frame.texi(,388) for example, provides an application toolbar which shortcuts for
frame.texi(,389) mail-specific operations like sending, saving, and deleting messages.
frame.texi(,390) 
frame.texi(,391) @node Gutter Basics, Inhibiting, Toolbar Basics, GUI Components
frame.texi(,392) @comment  node-name,  next,  previous,  up
frame.texi(,393) @section XEmacs Gutters
frame.texi(,394) 
frame.texi(,395) Gutters are the most flexible of the GUI components described in this
frame.texi(,396) section.  In theory, the other GUI components could be implemented by
frame.texi(,397) customizing a gutter, but in practice the other components were
frame.texi(,398) introduced earlier and have their own special implementations.  Gutters
frame.texi(,399) tend to be more transient than the other components.  Buffer tabs, for
frame.texi(,400) example, change every time the selected buffer in the frame changes.
frame.texi(,401) And for progress gauges a gutter to contain the gauge is typically
frame.texi(,402) created on the fly when needed, then destroyed when the operation whose
frame.texi(,403) staus is being displayed is completed.
frame.texi(,404) 
frame.texi(,405) Buffer tabs, having somewhat complex behavior, deserve a closer look.
frame.texi(,406) By default, a row of buffer tabs is displayed at the top of every frame.
frame.texi(,407) (The tabs could be placed in the bottom gutter, but would be oriented
frame.texi(,408) the same way and look rather odd.  The horizontal orientation makes
frame.texi(,409) putting them in a side gutter utterly impractical.)  The buffer
frame.texi(,410) displayed in the current window of a frame can be changed to a specific
frame.texi(,411) buffer by clicking [mouse-1] on the corresponding tab in the gutter.
frame.texi(,412) 
frame.texi(,413) Each tab contains the name of its buffer.  The tab for the current
frame.texi(,414) buffer in each frame is displayed in raised relief.  The list of buffers
frame.texi(,415) chosen for display in the buffer tab row is derived by filtering the
frame.texi(,416) buffer list (like the @code{Buffers} menu).  The list starts out with
frame.texi(,417) all existing buffers, with more recently selected buffers coming earlier
frame.texi(,418) in the list.
frame.texi(,419) 
frame.texi(,420) Then "uninteresting" buffers, like internal XEmacs buffers, the
frame.texi(,421) @code{*Message Log*} buffer, and so on are deleted from the list.  Next,
frame.texi(,422) the frame's selected buffer is determined.  Buffers with a different
frame.texi(,423) major mode from the selected buffer are removed from the list.  Finally,
frame.texi(,424) if the list is too long, the least recently used buffers are deleted
frame.texi(,425) from the list.  By default up to 6 most recently used buffers with the
frame.texi(,426) same mode are displayed on tabs in the gutter.
frame.texi(,427) 
frame.texi(,428) @node Inhibiting, Customizing, Gutter Basics, GUI Components
frame.texi(,429) @comment  node-name,  next,  previous,  up
frame.texi(,430) @section Inhibiting Display of GUI Components
frame.texi(,431) 
frame.texi(,432) Use of GUI facilities is a personal thing.  Almost everyone agrees that
frame.texi(,433) drawing via keyboard-based "turtle graphics" is acceptable to hardly
frame.texi(,434) anyone if a mouse is available, but conversely emulating a keyboard with
frame.texi(,435) a screenful of buttons is a painful experience.  But between those
frame.texi(,436) extremes the complete novice will require a fair amount of time before
frame.texi(,437) toolbars and menus become dispensable, but many an "Ancien Haquer" sees
frame.texi(,438) them as a complete waste of precious frame space that could be filled
frame.texi(,439) with text.
frame.texi(,440) 
frame.texi(,441) Display of all of the GUI components created by XEmacs can be inhibited
frame.texi(,442) through the use of Customize.  Customize can be accessed through
frame.texi(,443) @samp{Options | Customize} in the menu bar, or via @kbd{M-x customize}.
frame.texi(,444) Then navigate through the Customize tree to @samp{Emacs | Environment}.
frame.texi(,445) Scrollbar and toolbar visibility is controlled via the @samp{Display}
frame.texi(,446) group, options @samp{Scrollbars visible} and  @samp{Toolbar visible}
frame.texi(,447) respectively.  Gutter visibility is controlled by group @samp{Gutter},
frame.texi(,448) option @samp{Visible}.
frame.texi(,449) 
frame.texi(,450) Or they can be controlled directly by @kbd{M-x customize-variable}, by
frame.texi(,451) changing the values of the variables @code{menubar-visible-p},
frame.texi(,452) @code{scrollbars-visible-p}, @code{toolbar-visible-p}, or
frame.texi(,453) @code{gutter-buffers-tab-visible-p} respectively.  (The strange form of
frame.texi(,454) the last variable is due to the fact that gutters are often used to
frame.texi(,455) display transient widgets like progress gauges, which you probably don't
frame.texi(,456) want to inhibit.  It is more likely that you want to inhibit the default
frame.texi(,457) display of the buffers tab widget, which is what that variable controls.
frame.texi(,458) This interface is subject to change depending on developer experience
frame.texi(,459) and user feedback.)
frame.texi(,460) 
frame.texi(,461) Control of frame configuration can controlled automatically according to
frame.texi(,462) various parameters such as buffer or frame because these are
frame.texi(,463) @dfn{specifiers} @ref{Specifiers, , , lispref}.  Using these features
frame.texi(,464) requires programming in Lisp; Customize is not yet that sophisticated.
frame.texi(,465) Also, components that appear in various positions and orientations can
frame.texi(,466) have display suppressed according to position.  @kbd{C-h a visible-p}
frame.texi(,467) gives a list of variables which can be customized.  E.g., to control the
frame.texi(,468) visibility of specifically the left-side toolbar only, customize
frame.texi(,469) @code{left-toolbar-visible-p}.
frame.texi(,470) 
frame.texi(,471) @node Customizing, , Inhibiting, GUI Components
frame.texi(,472) @comment  node-name,  next,  previous,  up
frame.texi(,473) @section Changing the Position, Orientation, and Appearance of GUI Components
frame.texi(,474) 
frame.texi(,475)   #### Not documented yet.
frame.texi(,476) 
frame.texi(,477) @node XEmacs under X, XEmacs under MS Windows, GUI Components, Frame
frame.texi(,478) @section Using XEmacs Under the X Window System
frame.texi(,479) @comment  node-name,  next,  previous,  up
frame.texi(,480) 
frame.texi(,481) XEmacs can be used with the X Window System and a window manager like
frame.texi(,482) MWM or TWM.  In that case, the X window manager opens, closes, and
frame.texi(,483) resizes XEmacs frames.  You use the window manager's mouse gestures to
frame.texi(,484) perform the operations.  Consult your window manager guide or reference
frame.texi(,485) manual for information on manipulating X windows.
frame.texi(,486) 
frame.texi(,487) When you are working under X, each X window (that is, each XEmacs frame)
frame.texi(,488) has a menu bar for mouse-controlled operations (@pxref{Pull-down Menus}).
frame.texi(,489) 
frame.texi(,490) @cindex multi-frame XEmacs
frame.texi(,491) @findex make-frame
frame.texi(,492) XEmacs under X is also a multi-frame XEmacs.  You can use the @b{New
frame.texi(,493) Frame} menu item from the @b{File} menu to create a new XEmacs frame in a
frame.texi(,494) new X window from the same process.  The different frames will share the
frame.texi(,495) same buffer list, but you can look at different buffers in the different
frame.texi(,496) frames.
frame.texi(,497) 
frame.texi(,498) @findex find-file-other-frame
frame.texi(,499) The function @code{find-file-other-frame} is just like @code{find-file},
frame.texi(,500) but creates a new frame to display the buffer in first.  This is
frame.texi(,501) normally bound to @kbd{C-x 5 C-f}, and is what the @b{Open File, New
frame.texi(,502) Frame} menu item does.
frame.texi(,503) 
frame.texi(,504) @findex switch-to-buffer-other-frame
frame.texi(,505) The function @code{switch-to-buffer-other-frame} is just like
frame.texi(,506) @code{switch-to-buffer}, but creates a new frame to display the buffer
frame.texi(,507) in first.  This is normally bound to @kbd{C-x 5 b}.
frame.texi(,508) 
frame.texi(,509) @vindex default-frame-alist
frame.texi(,510) @vindex default-frame-plist
frame.texi(,511) You can specify a different default frame size other than the one provided.
frame.texi(,512) Use the variable @code{default-frame-plist}, which is a plist of default
frame.texi(,513) values for frame creation other than the first one.  These may be set in
frame.texi(,514) your init file, like this:
frame.texi(,515) 
frame.texi(,516) @example
frame.texi(,517)   (setq default-frame-plist '(width 80 height 55))
frame.texi(,518) @end example
frame.texi(,519) 
frame.texi(,520) This variable has replaced @code{default-frame-alist}, which is
frame.texi(,521) considered obsolete.
frame.texi(,522) 
frame.texi(,523) @vindex x-frame-defaults
frame.texi(,524) For values specific to the first XEmacs frame, you must use X resources.
frame.texi(,525) The variable @code{x-frame-defaults} takes an alist of default frame
frame.texi(,526) creation parameters for X window frames.  These override what is
frame.texi(,527) specified in @file{~/.Xdefaults} but are overridden by the arguments to
frame.texi(,528) the particular call to @code{x-create-frame}.
frame.texi(,529) 
frame.texi(,530) @vindex create-frame-hook
frame.texi(,531) When you create a new frame, the variable @code{create-frame-hook}
frame.texi(,532) is called with one argument, the frame just created.
frame.texi(,533) 
frame.texi(,534) If you want to close one or more of the X windows you created using
frame.texi(,535) @b{New Frame}, use the @b{Delete Frame} menu item from the @b{File} menu.
frame.texi(,536) 
frame.texi(,537) @vindex frame-title-format
frame.texi(,538) @vindex frame-icon-title-format
frame.texi(,539) If you are working with multiple frames, some special information
frame.texi(,540) applies:
frame.texi(,541) @itemize @bullet
frame.texi(,542) @item
frame.texi(,543) Two variables, @code{frame-title-format} and
frame.texi(,544) @code{frame-icon-title-format} determine the title of the frame and
frame.texi(,545) the title of the icon that results if you shrink the frame.
frame.texi(,546) 
frame.texi(,547) @vindex auto-lower-frame
frame.texi(,548) @vindex auto-raise-frame
frame.texi(,549) @item
frame.texi(,550) The variables @code{auto-lower-frame} and @code{auto-raise-frame}
frame.texi(,551) position a frame. If true, @code{auto-lower-frame} lowers a frame to
frame.texi(,552) the bottom when it is no longer selected. If true,
frame.texi(,553) @code{auto-raise-frame} raises a frame to the top when it is
frame.texi(,554) selected. Under X, most ICCCM-compliant window managers will have
frame.texi(,555) options to do this for you, but these variables are provided in case you
frame.texi(,556) are using a broken window manager.
frame.texi(,557) 
frame.texi(,558) @item
frame.texi(,559) There is a new frame/modeline format directive, %S, which expands to
frame.texi(,560) the name of the current frame (a frame's name is distinct from its
frame.texi(,561) title; the name is used for resource lookup, among other things, and the
frame.texi(,562) title is simply what appears above the window.)
frame.texi(,563) @end itemize
frame.texi(,564) 
frame.texi(,565) @node XEmacs under MS Windows, , XEmacs under X, Frame
frame.texi(,566) @section Using XEmacs Under Microsoft Windows
frame.texi(,567) @comment  node-name,  next,  previous,  up
frame.texi(,568) 
frame.texi(,569) Use of XEmacs under MS Windows is not separately documented here, but
frame.texi(,570) most operations available under the X Window System are also available
frame.texi(,571) with MS Windows.
frame.texi(,572) 
frame.texi(,573) Where possible, native MS Windows GUI components and capabilities are
frame.texi(,574) used in XEmacs.
keystrokes.texi(,1) 
keystrokes.texi(,2) @node Keystrokes, Pull-down Menus, Frame, Top
keystrokes.texi(,3) @chapter Keystrokes, Key Sequences, and Key Bindings
keystrokes.texi(,4) 
keystrokes.texi(,27) 
keystrokes.texi(,28) @menu
keystrokes.texi(,29) * Intro to Keystrokes::      Keystrokes as building blocks of key sequences.
keystrokes.texi(,30) * Representing Keystrokes::  Using lists of modifiers and keysyms to
keystrokes.texi(,31)                              represent keystrokes.
keystrokes.texi(,32) * Key Sequences::            Combine key strokes into key sequences you can
keystrokes.texi(,33)                              bind to commands.
keystrokes.texi(,34) * String Key Sequences::     Available for upward compatibility.
keystrokes.texi(,35) * Meta Key::                 Using @key{ESC} to represent @key{Meta}
keystrokes.texi(,36) * Super and Hyper Keys::     Adding modifier keys on certain keyboards.
keystrokes.texi(,37) * Character Representation:: How characters appear in Emacs buffers.
keystrokes.texi(,38) * Commands::                 How commands are bound to key sequences.
keystrokes.texi(,39) @end menu
keystrokes.texi(,40)  
keystrokes.texi(,41) @node Intro to Keystrokes, Representing Keystrokes, Keystrokes, Keystrokes
keystrokes.texi(,42) @section Keystrokes as Building Blocks of Key Sequences
keystrokes.texi(,43) @cindex character set
keystrokes.texi(,44) @cindex ASCII
keystrokes.texi(,45) @cindex keystroke
keystrokes.texi(,46) 
keystrokes.texi(,47)       Earlier versions of Emacs used only the ASCII character set,
keystrokes.texi(,48) which defines 128 different character codes.  Some of these codes are
keystrokes.texi(,49) assigned graphic symbols like @samp{a} and @samp{=}; the rest are
keystrokes.texi(,50) control characters, such as @kbd{Control-a} (also called @kbd{C-a}).
keystrokes.texi(,51) @kbd{C-a} means you hold down the @key{CTRL} key and then press
keystrokes.texi(,52) @kbd{a}.@refill
keystrokes.texi(,53) 
keystrokes.texi(,54)    Keybindings in XEmacs are not restricted to the set of
keystrokes.texi(,55) keystrokes that can be represented in ASCII.  XEmacs can tell the
keystrokes.texi(,56) difference between, for example, @kbd{Control-h}, @kbd{Control-Shift-h},
keystrokes.texi(,57) and @kbd{Backspace}.
keystrokes.texi(,58)   
keystrokes.texi(,59) @cindex modifier key
keystrokes.texi(,60) @cindex keysym
keystrokes.texi(,61) @kindex meta key
keystrokes.texi(,62) @kindex control key
keystrokes.texi(,63) @kindex hyper key
keystrokes.texi(,64) @kindex super key
keystrokes.texi(,65) @kindex shift key
keystrokes.texi(,66) @kindex button1 
keystrokes.texi(,67) @kindex button2
keystrokes.texi(,68) @kindex button3
keystrokes.texi(,69) @kindex button1up
keystrokes.texi(,70) @kindex button2up
keystrokes.texi(,71) @kindex button3up
keystrokes.texi(,72) 
keystrokes.texi(,73)   A keystroke is like a piano chord: you get it by simultaneously
keystrokes.texi(,74) striking several keys.  To be more precise, a keystroke consists
keystrokes.texi(,75) of a possibly empty set of modifiers followed by a single
keystrokes.texi(,76) @dfn{keysym}.  The set of modifiers is small; it consists of
keystrokes.texi(,77) @kbd{Control}, @kbd{Meta}, @kbd{Super}, @kbd{Hyper}, and @kbd{Shift}.
keystrokes.texi(,78) 
keystrokes.texi(,79)   The rest of the keys on your keyboard, along with the mouse buttons,
keystrokes.texi(,80) make up the set of keysyms.  A keysym is usually what is printed on the
keystrokes.texi(,81) keys on your keyboard.  Here is a table of some of the symbolic names
keystrokes.texi(,82) for keysyms:
keystrokes.texi(,83) @table @kbd
keystrokes.texi(,84) @item a,b,c...
keystrokes.texi(,85) alphabetic keys
keystrokes.texi(,86) @item f1,f2...
keystrokes.texi(,87) function keys
keystrokes.texi(,88) @item button1
keystrokes.texi(,89) left mouse button
keystrokes.texi(,90) @item button2
keystrokes.texi(,91) middle mouse button
keystrokes.texi(,92) @item button3
keystrokes.texi(,93) right mouse button
keystrokes.texi(,94) @item button1up 
keystrokes.texi(,95) upstroke on the left mouse button
keystrokes.texi(,96) @item button2up
keystrokes.texi(,97) upstroke on the middle mouse button
keystrokes.texi(,98) @item button3up
keystrokes.texi(,99) upstroke on the right mouse button
keystrokes.texi(,100) @item return
keystrokes.texi(,101) Return key
keystrokes.texi(,102) @end table
keystrokes.texi(,103) 
keystrokes.texi(,104) @vindex keyboard-translate-table
keystrokes.texi(,105) Use the variable @code{keyboard-translate-table} only if you are on a
keystrokes.texi(,106) dumb tty, as it cannot handle input that cannot be represented as ASCII.
keystrokes.texi(,107) The value of this variable is a string used as a translate table for
keystrokes.texi(,108) keyboard input or @code{nil}.  Each character is looked up in this
keystrokes.texi(,109) string and the contents used instead.  If the string is of length
keystrokes.texi(,110) @code{n}, character codes @code{N} and up are untranslated.  If you are
keystrokes.texi(,111) running Emacs under X, you should do the translations with the
keystrokes.texi(,112) @code{xmodmap} program instead.
keystrokes.texi(,113) 
keystrokes.texi(,114) 
keystrokes.texi(,115) @node Representing Keystrokes, Key Sequences, Intro to Keystrokes, Keystrokes
keystrokes.texi(,116) @comment  node-name,  next,  previous,  up
keystrokes.texi(,117) @subsection Representing Keystrokes
keystrokes.texi(,118) @kindex hyper key
keystrokes.texi(,119) @kindex super key
keystrokes.texi(,120) @findex read-key-sequence
keystrokes.texi(,121) 
keystrokes.texi(,122)   XEmacs represents keystrokes as lists. Each list consists of
keystrokes.texi(,123) an arbitrary combination of modifiers followed by a single keysym at the
keystrokes.texi(,124) end of the list.  If the keysym corresponds to an ASCII character, you
keystrokes.texi(,125) can use its character code.  (A keystroke may also be represented by an
keystrokes.texi(,126) event object, as returned by the @code{read-key-sequence} function;
keystrokes.texi(,127) non-programmers need not worry about this.)
keystrokes.texi(,128) 
keystrokes.texi(,129) The following table gives some examples of how to list representations
keystrokes.texi(,130) for keystrokes.  Each list consists of sets of modifiers followed by
keystrokes.texi(,131) keysyms:
keystrokes.texi(,132) 
keystrokes.texi(,133) @table @kbd
keystrokes.texi(,134) @item (control a)
keystrokes.texi(,135) Pressing @key{CTRL} and @kbd{a} simultaneously.
keystrokes.texi(,136) @item (control ?a)
keystrokes.texi(,137) Another way of writing the keystroke @kbd{C-a}.
keystrokes.texi(,138) @item (control 65)
keystrokes.texi(,139) Yet another way of writing the keystroke @kbd{C-a}.
keystrokes.texi(,140) @item (break)
keystrokes.texi(,141) Pressing the @key{BREAK} key.
keystrokes.texi(,142) @item (control meta button2up)
keystrokes.texi(,143) Release the middle mouse button, while pressing @key{CTRL} and
keystrokes.texi(,144) @key{META}. 
keystrokes.texi(,145) @end table
keystrokes.texi(,146) @cindex shift modifier
keystrokes.texi(,147)   Note: As you define keystrokes, you can use the @kbd{shift} key only
keystrokes.texi(,148) as a modifier with characters that do not have a second keysym on the
keystrokes.texi(,149) same key, such as @kbd{backspace} and @kbd{tab}.  It is an error to
keystrokes.texi(,150) define a keystroke using the @key{shift} modifier with keysyms such as
keystrokes.texi(,151) @kbd{a} and @kbd{=}.  The correct forms are @kbd{A} and @kbd{+}.
keystrokes.texi(,152) 
keystrokes.texi(,153) @node Key Sequences, String Key Sequences, Representing Keystrokes, Keystrokes
keystrokes.texi(,154) @subsection Representing Key Sequences
keystrokes.texi(,155) 
keystrokes.texi(,156)   A @dfn{complete key sequence} is a sequence of keystrokes that Emacs
keystrokes.texi(,157) understands as a unit.  Key sequences are significant because you can
keystrokes.texi(,158) bind them to commands.  Note that not all sequences of keystrokes are
keystrokes.texi(,159) possible key sequences.  In particular, the initial keystrokes in a key
keystrokes.texi(,160) sequence must make up a @dfn{prefix key sequence}.
keystrokes.texi(,161) 
keystrokes.texi(,162)   Emacs represents a key sequence as a vector of keystrokes.  Thus, the
keystrokes.texi(,163) schematic representation of a complete key sequence is as follows:
keystrokes.texi(,164) 
keystrokes.texi(,165) @example
keystrokes.texi(,166)   [(modifier .. modifier keysym) ... (modifier .. modifier keysym)]
keystrokes.texi(,167) @end example
keystrokes.texi(,168) 
keystrokes.texi(,169)   Here are some examples of complete key sequences:
keystrokes.texi(,170) 
keystrokes.texi(,171) @table @kbd
keystrokes.texi(,172) @item [(control c) (control a)]
keystrokes.texi(,173) Typing @kbd{C-c} followed by @kbd{C-a}
keystrokes.texi(,174) @item [(control c) (control 65)]
keystrokes.texi(,175) Typing @kbd{C-c} followed by @kbd{C-a}. (Using the ASCII code
keystrokes.texi(,176) for the character `a')@refill
keystrokes.texi(,177) @item [(control c) (break)]
keystrokes.texi(,178) Typing @kbd{C-c} followed by the @kbd{break} character.@refill
keystrokes.texi(,179) @end table
keystrokes.texi(,180) 
keystrokes.texi(,181) @kindex C-c
keystrokes.texi(,182) @kindex C-x
keystrokes.texi(,183) @kindex C-h
keystrokes.texi(,184) @kindex ESC
keystrokes.texi(,185) @cindex prefix key sequence
keystrokes.texi(,186) 
keystrokes.texi(,187)   A @dfn{prefix key sequence} is the beginning of a series of longer
keystrokes.texi(,188) sequences that are valid key sequences; adding any single keystroke to
keystrokes.texi(,189) the end of a prefix results in a valid key sequence.  For example,
keystrokes.texi(,190) @kbd{control-x} is standardly defined as a prefix.  Thus there is a
keystrokes.texi(,191) two-character key sequence starting with @kbd{C-x} for each valid
keystrokes.texi(,192) keystroke, giving numerous possibilities.  Here are some samples:
keystrokes.texi(,193) 
keystrokes.texi(,194) @itemize @bullet
keystrokes.texi(,195) @item
keystrokes.texi(,196) @kbd{[(control x) (c)]}
keystrokes.texi(,197) @item
keystrokes.texi(,198) @kbd{[(control x) (control c)]}
keystrokes.texi(,199) @end itemize
keystrokes.texi(,200) 
keystrokes.texi(,201)   Adding one character to a prefix key does not have to form a complete
keystrokes.texi(,202) key.  It could make another, longer prefix.  For example, @kbd{[(control
keystrokes.texi(,203) x) (\4)]} is itself a prefix that leads to any number of different
keystrokes.texi(,204) three-character keys, including @kbd{[(control x) (\4) (f)]},
keystrokes.texi(,205) @kbd{[(control x) (\4) (b)]} and so on.  It would be possible to define
keystrokes.texi(,206) one of those three-character sequences as a prefix, creating a series of
keystrokes.texi(,207) four-character keys, but we did not define any of them this way.@refill
keystrokes.texi(,208) 
keystrokes.texi(,209)   By contrast, the two-character sequence @kbd{[(control f) (control
keystrokes.texi(,210) k)]} is not a key, because the @kbd{(control f)} is a complete key
keystrokes.texi(,211) sequence in itself.  You cannot give @kbd{[(control f (control k)]} an
keystrokes.texi(,212) independent meaning as a command while @kbd{(control f)} is a complete
keystrokes.texi(,213) sequence, because Emacs would understand @key{C-f C-k} as two
keystrokes.texi(,214) commands.@refill
keystrokes.texi(,215) 
keystrokes.texi(,216)  The predefined prefix key sequences in Emacs are @kbd{(control c)},
keystrokes.texi(,217) @kbd{(control x)}, @kbd{(control h)}, @kbd{[(control x) (\4)]}, and
keystrokes.texi(,218) @kbd{escape}.  You can customize Emacs and could make new prefix keys or
keystrokes.texi(,219) eliminate the default key sequences.  @xref{Key Bindings}.  For example,
keystrokes.texi(,220) if you redefine @kbd{(control f)} as a prefix, @kbd{[(control f)
keystrokes.texi(,221) (control k)]} automatically becomes a valid key sequence (complete,
keystrokes.texi(,222) unless you define it as a prefix as well).  Conversely, if you remove
keystrokes.texi(,223) the prefix definition of @kbd{[(control x) (\4)]}, @kbd{[(control x)
keystrokes.texi(,224) (\4) (f)]} (or @kbd{[(control x) (\4) @var{anything}]}) is no longer a
keystrokes.texi(,225) valid key sequence.
keystrokes.texi(,226) 
keystrokes.texi(,227) Note that the above paragraphs uses \4 instead of simply 4, because \4
keystrokes.texi(,228) is the symbol whose name is "4", and plain 4 is the integer 4, which
keystrokes.texi(,229) would have been interpreted as the ASCII value.  Another way of
keystrokes.texi(,230) representing the symbol whose name is "4" is to write ?4, which would be
keystrokes.texi(,231) interpreted as the number 52, which is the ASCII code for the character
keystrokes.texi(,232) "4".  We could therefore actually have written 52 directly, but that is
keystrokes.texi(,233) far less clear.
keystrokes.texi(,234) 
keystrokes.texi(,235) @node String Key Sequences, Meta Key, Key Sequences, Keystrokes
keystrokes.texi(,236) @comment  node-name,  next,  previous,  up
keystrokes.texi(,237) @subsection  String Key Sequences
keystrokes.texi(,238) For backward compatibility, you may also represent a key sequence using
keystrokes.texi(,239) strings.  For example, we have the following equivalent representations:
keystrokes.texi(,240) 
keystrokes.texi(,241) @table @kbd
keystrokes.texi(,242) @item "\C-c\C-c"
keystrokes.texi(,243) @code{[(control c) (control c)]}
keystrokes.texi(,244) @item "\e\C-c"
keystrokes.texi(,245) @code{[(meta control c)]}
keystrokes.texi(,246) @end table
keystrokes.texi(,247) 
keystrokes.texi(,248) @kindex LFD
keystrokes.texi(,249) @kindex TAB
keystrokes.texi(,250) 
keystrokes.texi(,251) @node Meta Key, Super and Hyper Keys, String Key Sequences, Keystrokes
keystrokes.texi(,252) @comment  node-name,  next,  previous,  up
keystrokes.texi(,253) @subsection Assignment of the @key{META} Key
keystrokes.texi(,254)  
keystrokes.texi(,255) @kindex META
keystrokes.texi(,256) @kindex ESC
keystrokes.texi(,257)   Not all terminals have the complete set of modifiers.  
keystrokes.texi(,258) Terminals that have a @key{Meta} key allow you to type Meta characters
keystrokes.texi(,259) by just holding that key down.  To type @kbd{Meta-a}, hold down
keystrokes.texi(,260) @key{META} and press @kbd{a}.  On those terminals, the @key{META} key
keystrokes.texi(,261) works like the @key{SHIFT} key.  Such a key is not always labeled
keystrokes.texi(,262) @key{META}, however, as this function is often a special option for a
keystrokes.texi(,263) key with some other primary purpose.@refill
keystrokes.texi(,264) 
keystrokes.texi(,265)   If there is no @key{META} key, you can still type Meta characters
keystrokes.texi(,266) using two-character sequences starting with @key{ESC}.  To enter
keystrokes.texi(,267) @kbd{M-a}, you could type @kbd{@key{ESC} a}.  To enter @kbd{C-M-a}, you
keystrokes.texi(,268) would type @kbd{ESC C-a}.  @key{ESC} is allowed on terminals with
keystrokes.texi(,269) Meta keys, too, in case you have formed a habit of using it.@refill
keystrokes.texi(,270) 
keystrokes.texi(,271) If you are running under X and do not have a @key{META} key, it 
keystrokes.texi(,272) is possible to reconfigure some other key to be a @key{META} 
keystrokes.texi(,273) key.  @xref{Super and Hyper Keys}. @refill
keystrokes.texi(,274) 
keystrokes.texi(,275) @vindex meta-flag
keystrokes.texi(,276)   Emacs believes the terminal has a @key{META} key if the variable
keystrokes.texi(,277) @code{meta-flag} is non-@code{nil}.  Normally this is set automatically
keystrokes.texi(,278) according to the termcap entry for your terminal type.  However, sometimes
keystrokes.texi(,279) the termcap entry is wrong, and then it is useful to set this variable
keystrokes.texi(,280) yourself.  @xref{Variables}, for how to do this.
keystrokes.texi(,281) 
keystrokes.texi(,282) Note: If you are running under the X window system, the setting of
keystrokes.texi(,283) the @code{meta-flag} variable is irrelevant. 
keystrokes.texi(,284) 
keystrokes.texi(,285) @node Super and Hyper Keys, Character Representation, Meta Key, Keystrokes
keystrokes.texi(,286) @comment  node-name,  next,  previous,  up
keystrokes.texi(,287) @subsection Assignment of the @key{SUPER} and @key{HYPER} Keys
keystrokes.texi(,288) @kindex hyper key
keystrokes.texi(,289) @kindex super key
keystrokes.texi(,290) 
keystrokes.texi(,291)   Most keyboards do not, by default, have @key{SUPER} or @key{HYPER}
keystrokes.texi(,292) modifier keys.  Under X, you can simulate the @key{SUPER} or
keystrokes.texi(,293) @key{HYPER} key if you want to bind keys to sequences using @kbd{super}
keystrokes.texi(,294) and @kbd{hyper}.  You can use the @code{xmodmap} program to do this.
keystrokes.texi(,295) 
keystrokes.texi(,296)   For example, to turn your @key{CAPS-LOCK} key into a @key{SUPER} key,
keystrokes.texi(,297) do the following:
keystrokes.texi(,298) 
keystrokes.texi(,299)   Create a file called @code{~/.xmodmap}.  In this file, place the lines
keystrokes.texi(,300) 
keystrokes.texi(,301) @example
keystrokes.texi(,302)         remove Lock = Caps_Lock
keystrokes.texi(,303)         keysym Caps_Lock = Super_L
keystrokes.texi(,304)         add Mod2 = Super_L
keystrokes.texi(,305) @end example
keystrokes.texi(,306) 
keystrokes.texi(,307) The first line says that the key that is currently called @code{Caps_Lock}
keystrokes.texi(,308) should no longer behave as a ``lock'' key.  The second line says that
keystrokes.texi(,309) this should now be called @code{Super_L} instead.  The third line says that 
keystrokes.texi(,310) the key called @code{Super_L} should be a modifier key, which produces the
keystrokes.texi(,311) @code{Mod2} modifier.
keystrokes.texi(,312) 
keystrokes.texi(,313) To create a @key{META} or @key{HYPER} key instead of a @key{SUPER} key,
keystrokes.texi(,314) replace the word @code{Super} above with @code{Meta} or @code{Hyper}.
keystrokes.texi(,315) 
keystrokes.texi(,316) Just after you start up X, execute the command @code{xmodmap /.xmodmap}.
keystrokes.texi(,317) You can add this command to the appropriate initialization file to have
keystrokes.texi(,318) the command executed automatically.@refill
keystrokes.texi(,319) 
keystrokes.texi(,320) If you have problems, see the documentation for the @code{xmodmap}
keystrokes.texi(,321) program.  The X keyboard model is quite complicated, and explaining
keystrokes.texi(,322) it is beyond the scope of this manual.  However, we reprint the 
keystrokes.texi(,323) following description from the X Protocol document for your convenience:
keystrokes.texi(,324) 
keystrokes.texi(,325) @cindex keysyms
keystrokes.texi(,326) @cindex keycode
keystrokes.texi(,327) 
keystrokes.texi(,328)  A list of keysyms is associated with each keycode. If that list
keystrokes.texi(,329) (ignoring trailing @code{NoSymbol} entries) is a single keysym @samp{K},
keystrokes.texi(,330) then the list is treated as if it were the list 
keystrokes.texi(,331) @code{``K NoSymbol K NoSymbol''}. If the list (ignoring trailing 
keystrokes.texi(,332) @code{NoSymbol} entries) is a pair of keysyms @samp{K1 K2}, then the 
keystrokes.texi(,333) list is treated as if it were the list @code{``K1 K2 K1 K2''}. If the 
keystrokes.texi(,334) list (ignoring trailing @code{NoSymbol} entries) is a triple of keysyms 
keystrokes.texi(,335) @samp{K1 K2 K3}, then the list is treated as if it were the list 
keystrokes.texi(,336) @code{``K1 K2 K3 NoSymbol''}.
keystrokes.texi(,337) 
keystrokes.texi(,338)  The first four elements of the list are split into two groups of 
keystrokes.texi(,339) keysyms. Group 1 contains the first and second keysyms; Group 2 contains
keystrokes.texi(,340) third and fourth keysyms. Within each group, if the second element of
keystrokes.texi(,341) the group is NoSymbol, then the group should be treated as if the second
keystrokes.texi(,342) element were the same as the first element, except when the first
keystrokes.texi(,343) element is an alphabetic keysym @samp{K} for which both lowercase and 
keystrokes.texi(,344) uppercase forms are defined. In that case, the group should be treated 
keystrokes.texi(,345) as if the first element were the lowercase form of @samp{K} and the second 
keystrokes.texi(,346) element were the uppercase form of @samp{K}.
keystrokes.texi(,347) 
keystrokes.texi(,348)  The standard rules for obtaining a keysym from a KeyPress event make use of 
keystrokes.texi(,349) only the Group 1 and Group 2 keysyms; no interpretation of other keysyms in 
keystrokes.texi(,350) the list is given here. (That is, the last four keysyms are unused.)
keystrokes.texi(,351) 
keystrokes.texi(,352)  Which group to use is determined by modifier state. Switching between
keystrokes.texi(,353) groups is controlled by the keysym named @code{Mode_switch}. Attach that
keystrokes.texi(,354) keysym to some keycode and attach that keycode to any one of the
keystrokes.texi(,355) modifiers Mod1 through Mod5. This modifier is called the @dfn{group
keystrokes.texi(,356) modifier}. For any keycode, Group 1 is used when the group modifier is
keystrokes.texi(,357) off, and Group 2 is used when the group modifier is on.
keystrokes.texi(,358) 
keystrokes.texi(,359)  Within a group, which keysym to use is also determined by modifier
keystrokes.texi(,360) state. The first keysym is used when the @code{Shift} and @code{Lock} 
keystrokes.texi(,361) modifiers are off. The second keysym is used when the @code{Shift} 
keystrokes.texi(,362) modifier is on, or when the @code{Lock} modifier is on and the second 
keystrokes.texi(,363) keysym is uppercase alphabetic, or when the @code{Lock} modifier is on 
keystrokes.texi(,364) and is interpreted as @code{ShiftLock}. Otherwise, when the @code{Lock} 
keystrokes.texi(,365) modifier is on and is interpreted as @code{CapsLock}, the state of the 
keystrokes.texi(,366) @code{Shift} modifier is applied first to select a keysym, 
keystrokes.texi(,367) but if that keysym is lower-case alphabetic, then the corresponding 
keystrokes.texi(,368) upper-case keysym is used instead.
keystrokes.texi(,369) 
keystrokes.texi(,370)  In addition to the above information on keysyms, we also provide the 
keystrokes.texi(,371) following description of modifier mapping from the InterClient 
keystrokes.texi(,372) Communications Conventions Manual:
keystrokes.texi(,373) 
keystrokes.texi(,374) @cindex modifier mapping
keystrokes.texi(,375) 
keystrokes.texi(,376)  X11 supports 8 modifier bits, of which 3 are pre-assigned to 
keystrokes.texi(,377) @code{Shift}, @code{Lock}, and @code{Control}. Each modifier bit is 
keystrokes.texi(,378) controlled by the state of a set of keys, and these sets are specified 
keystrokes.texi(,379) in a table accessed by @code{GetModifierMapping()} and 
keystrokes.texi(,380) @code{SetModifierMapping()}.
keystrokes.texi(,381) 
keystrokes.texi(,382)  A client needing to use one of the pre-assigned modifiers should assume
keystrokes.texi(,383) that the modifier table has been set up correctly to control these
keystrokes.texi(,384) modifiers. The @code{Lock} modifier should be interpreted as @code{Caps
keystrokes.texi(,385) Lock} or @code{Shift Lock} according to whether the keycodes in its
keystrokes.texi(,386) controlling set include @code{XK_Caps_Lock} or @code{XK_Shift_Lock}.
keystrokes.texi(,387) 
keystrokes.texi(,388)  Clients should determine the meaning of a modifier bit from the keysyms 
keystrokes.texi(,389) being used to control it.
keystrokes.texi(,390) 
keystrokes.texi(,391) A client needing to use an extra modifier, for example @code{Meta}, should:
keystrokes.texi(,392) 
keystrokes.texi(,393) @enumerate
keystrokes.texi(,394) @item
keystrokes.texi(,395) Scan the existing modifier mappings.
keystrokes.texi(,396) 
keystrokes.texi(,397) @enumerate
keystrokes.texi(,398) @item
keystrokes.texi(,399) If it finds a modifier that contains a keycode whose set of keysyms 
keystrokes.texi(,400) includes @code{XK_Meta_L} or @code{XK_Meta_R}, it should use that 
keystrokes.texi(,401) modifier bit.
keystrokes.texi(,402) 
keystrokes.texi(,403) @item
keystrokes.texi(,404) If there is no existing modifier controlled by @code{XK_Meta_L} or 
keystrokes.texi(,405) @code{XK_Meta_R}, it should select an unused modifier bit (one with 
keystrokes.texi(,406) an empty controlling set) and:
keystrokes.texi(,407) @end enumerate
keystrokes.texi(,408) 
keystrokes.texi(,409) @item
keystrokes.texi(,410) If there is a keycode with @code{XL_Meta_L} in its set of keysyms, 
keystrokes.texi(,411) add that keycode to the set for the chosen modifier, and then:
keystrokes.texi(,412) 
keystrokes.texi(,413) @enumerate
keystrokes.texi(,414) @item
keystrokes.texi(,415) If there is a keycode with @code{XL_Meta_R} in its set of keysyms, 
keystrokes.texi(,416) add that keycode to the set for the chosen modifier, and then:
keystrokes.texi(,417) 
keystrokes.texi(,418) @item
keystrokes.texi(,419) If the controlling set is still empty, interact with the user to 
keystrokes.texi(,420) select one or more keys to be @code{Meta}.
keystrokes.texi(,421) @end enumerate
keystrokes.texi(,422) 
keystrokes.texi(,423) 
keystrokes.texi(,424) @item
keystrokes.texi(,425) If there are no unused modifier bits, ask the user to take corrective action.
keystrokes.texi(,426) @end enumerate
keystrokes.texi(,427) 
keystrokes.texi(,428)  This means that the @code{Mod1} modifier does not necessarily mean 
keystrokes.texi(,429) @code{Meta}, although some applications (such as twm and emacs 18) 
keystrokes.texi(,430) assume that. Any of the five unassigned modifier bits could mean 
keystrokes.texi(,431) @code{Meta}; what matters is that a modifier bit is generated by a 
keystrokes.texi(,432) keycode which is bound to the keysym @code{Meta_L} or @code{Meta_R}.
keystrokes.texi(,433) 
keystrokes.texi(,434)  Therefore, if you want to make a @key{META} key, the right way 
keystrokes.texi(,435) is to make the keycode in question generate both a @code{Meta} keysym 
keystrokes.texi(,436) and some previously-unassigned modifier bit.
keystrokes.texi(,437) 
keystrokes.texi(,438) @node Character Representation, Commands, Super and Hyper Keys, Keystrokes
keystrokes.texi(,439) @comment  node-name,  next,  previous,  up
keystrokes.texi(,440) @section Representation of Characters
keystrokes.texi(,441) 
keystrokes.texi(,442) This section briefly discusses how characters are represented in Emacs
keystrokes.texi(,443) buffers.  @xref{Key Sequences}, for information on representing key
keystrokes.texi(,444) sequences to create key bindings. 
keystrokes.texi(,445) 
keystrokes.texi(,446)   ASCII graphic characters in Emacs buffers are displayed with their
keystrokes.texi(,447) graphics.  @key{LFD} is the same as a newline character; it is displayed
keystrokes.texi(,448) by starting a new line.  @key{TAB} is displayed by moving to the next
keystrokes.texi(,449) tab stop column (usually every 8 spaces).  Other control characters are
keystrokes.texi(,450) displayed as a caret (@samp{^}) followed by the non-control version of
keystrokes.texi(,451) the character; thus, @kbd{C-a} is displayed as @samp{^A}.  Non-ASCII
keystrokes.texi(,452) characters 128 and up are displayed with octal escape sequences; thus,
keystrokes.texi(,453) character code 243 (octal), also called @kbd{M-#} when used as an input
keystrokes.texi(,454) character, is displayed as @samp{\243}.
keystrokes.texi(,455) 
keystrokes.texi(,456) The variable @code{ctl-arrow} may be used to alter this behavior.
keystrokes.texi(,457) @xref{Display Vars}.
keystrokes.texi(,458) 
keystrokes.texi(,459) @node Commands, , Character Representation, Keystrokes
keystrokes.texi(,460) @section Keys and Commands
keystrokes.texi(,461) 
keystrokes.texi(,462) @cindex binding
keystrokes.texi(,463) @cindex customization
keystrokes.texi(,464) @cindex keymap
keystrokes.texi(,465) @cindex function
keystrokes.texi(,466) @cindex command
keystrokes.texi(,467)   This manual is full of passages that tell you what particular keys do.
keystrokes.texi(,468) But Emacs does not assign meanings to keys directly.  Instead, Emacs
keystrokes.texi(,469) assigns meanings to @dfn{functions}, and then gives keys their meanings
keystrokes.texi(,470) by @dfn{binding} them to functions.
keystrokes.texi(,471) 
keystrokes.texi(,472)  A function is a Lisp object that can be executed as a program.  Usually
keystrokes.texi(,473) it is a Lisp symbol that has been given a function definition; every
keystrokes.texi(,474) symbol has a name, usually made of a few English words separated by
keystrokes.texi(,475) dashes, such as @code{next-line} or @code{forward-word}.  It also has a
keystrokes.texi(,476) @dfn{definition}, which is a Lisp program.  Only some functions can be the
keystrokes.texi(,477) bindings of keys; these are functions whose definitions use
keystrokes.texi(,478) @code{interactive} to specify how to call them interactively.  Such
keystrokes.texi(,479) functions are called @dfn{commands}, and their names are @dfn{command
keystrokes.texi(,480) names}.  More information on this subject will appear in the @i{XEmacs
keystrokes.texi(,481) Lisp Reference Manual}.
keystrokes.texi(,482) 
keystrokes.texi(,483)   The bindings between keys and functions are recorded in various tables
keystrokes.texi(,484) called @dfn{keymaps}.  @xref{Key Bindings}, for more information on key
keystrokes.texi(,485) sequences you can bind commands to.  @xref{Keymaps}, for information on
keystrokes.texi(,486) creating keymaps.
keystrokes.texi(,487) 
keystrokes.texi(,488)   When we say  ``@kbd{C-n} moves down vertically one line'' we are
keystrokes.texi(,489) glossing over a distinction that is irrelevant in ordinary use but is
keystrokes.texi(,490) vital in understanding how to customize Emacs.  The function
keystrokes.texi(,491) @code{next-line} is programmed to move down vertically.  @kbd{C-n}
keystrokes.texi(,492) has this effect @i{because} it is bound to that function.  If you rebind
keystrokes.texi(,493) @kbd{C-n} to the function @code{forward-word} then @kbd{C-n} will move
keystrokes.texi(,494) forward by words instead.  Rebinding keys is a common method of
keystrokes.texi(,495) customization.@refill
keystrokes.texi(,496) 
keystrokes.texi(,497)    The rest of this manual usually ignores this subtlety to keep
keystrokes.texi(,498) things simple.  To give the customizer the information needed, we often
keystrokes.texi(,499) state the name of the command that really does the work in parentheses
keystrokes.texi(,500) after mentioning the key that runs it.  For example, we will say that
keystrokes.texi(,501) ``The command @kbd{C-n} (@code{next-line}) moves point vertically
keystrokes.texi(,502) down,'' meaning that @code{next-line} is a command that moves vertically
keystrokes.texi(,503) down and @kbd{C-n} is a key that is standardly bound to it.
keystrokes.texi(,504) 
keystrokes.texi(,505) @cindex variables
keystrokes.texi(,506)   While we are on the subject of information for customization only,
keystrokes.texi(,507) it's a good time to tell you about @dfn{variables}.  Often the
keystrokes.texi(,508) description of a command will say, ``To change this, set the variable
keystrokes.texi(,509) @code{mumble-foo}.''  A variable is a name used to remember a value.
keystrokes.texi(,510) Most of the variables documented in this manual exist just to facilitate
keystrokes.texi(,511) customization: some command or other part of Emacs uses the variable
keystrokes.texi(,512) and behaves differently depending on its setting.  Until you are interested in
keystrokes.texi(,513) customizing, you can ignore the information about variables.  When you
keystrokes.texi(,514) are ready to be interested, read the basic information on variables, and 
keystrokes.texi(,515) then the information on individual variables will make sense.
keystrokes.texi(,516) @xref{Variables}.
menus.texi(,1) 
menus.texi(,2) @node Pull-down Menus, Entering Emacs, Keystrokes, Top
menus.texi(,3) @comment  node-name,  next,  previous,  up
menus.texi(,4) @section XEmacs Pull-down Menus 
menus.texi(,5) 
menus.texi(,6) If you are running XEmacs under X, a menu bar on top of the
menus.texi(,7) Emacs frame provides access to pull-down menus of file, edit, and
menus.texi(,8) help-related commands. The menus provide convenient shortcuts and an
menus.texi(,9) easy interface for novice users.  They do not provide additions to the
menus.texi(,10) functionality available via key commands; you can still invoke commands
menus.texi(,11) from the keyboard as in previous versions of Emacs.
menus.texi(,12)         
menus.texi(,13) @table @b
menus.texi(,14) @item File
menus.texi(,15) Perform file and buffer-related operations, such as opening and closing
menus.texi(,16) files, saving and printing buffers, as well as exiting Emacs.
menus.texi(,17) @cindex File menu
menus.texi(,18) 
menus.texi(,19) @item Edit
menus.texi(,20) Perform standard editing operations, such as 
menus.texi(,21) cutting, copying, pasting, and killing selected text.
menus.texi(,22) @cindex Edit menu
menus.texi(,23) 
menus.texi(,24) @c #### The Mule menu needs to be documented, but this is not the place
menus.texi(,25) @c for it since Ben just moved it.
menus.texi(,26) 
menus.texi(,27) @item Apps
menus.texi(,28) Access to sub-applications implemented within XEmacs, such as the mail
menus.texi(,29) reader, the World Wide Web browser, the spell-checker, and the calendar
menus.texi(,30) program.
menus.texi(,31) @cindex Apps menu
menus.texi(,32) 
menus.texi(,33) @item Options
menus.texi(,34) Control various options regarding the way XEmacs works, such as controlling
menus.texi(,35) which elements of the frame are visible, selecting the fonts to be used for
menus.texi(,36) text, specifying whether searches are case-sensitive, etc.
menus.texi(,37) @cindex Options menu
menus.texi(,38) 
menus.texi(,39) @item Buffers
menus.texi(,40) Present a menu of buffers for selection as well as the option to display
menus.texi(,41) a buffer list.
menus.texi(,42) @cindex Buffers menu
menus.texi(,43) 
menus.texi(,44) @item Tools
menus.texi(,45) Perform various actions designed to automate software development and
menus.texi(,46) similar technical work, such as searching through many files, compiling
menus.texi(,47) a program, and comparing or merging two or three files.
menus.texi(,48) @cindex Tools menu
menus.texi(,49) 
menus.texi(,50) @item Help
menus.texi(,51) Access to Emacs Info.
menus.texi(,52) @cindex Help menu
menus.texi(,53) @end table
menus.texi(,54) @cindex Pull-down Menus
menus.texi(,55) @cindex menus
menus.texi(,56) 
menus.texi(,57) There are two ways of selecting an item from a pull-down menu:
menus.texi(,58) 
menus.texi(,59) @itemize @bullet
menus.texi(,60) @item
menus.texi(,61) Select an item in the menu bar by moving the cursor over it and click the
menus.texi(,62) left mouse-button.  Then move the cursor over the menu item you want to choose
menus.texi(,63) and click left again.
menus.texi(,64) @item
menus.texi(,65) Select an item in the menu bar by moving the cursor over it and click and
menus.texi(,66) hold the left mouse-button.  With the mouse-button depressed, move the
menus.texi(,67) cursor over the menu item you want, then release it to make your selection. 
menus.texi(,68) @end itemize
menus.texi(,69) 
menus.texi(,70) If a command in the pull-down menu is not applicable in a given
menus.texi(,71) situation, the command is disabled and its name appears faded.  You
menus.texi(,72) cannot invoke items that are faded.  For example, many commands on the
menus.texi(,73) @b{Edit} menu appear faded until you select text on which they are to
menus.texi(,74) operate; after you select a block of text, edit commands are enabled.
menus.texi(,75) @xref{Mouse Selection}, for information on using the mouse to select
menus.texi(,76) text.  @xref{Using X Selections}, for related information.
menus.texi(,77) 
menus.texi(,78) There are also @kbd{M-x} equivalents for each menu item.  To find the
menus.texi(,79) equivalent for any left-button menu item, do the following:
menus.texi(,80) 
menus.texi(,81) @enumerate
menus.texi(,82) @item
menus.texi(,83) Type @kbd{C-h k} to get the @code{Describe Key} prompt. 
menus.texi(,84) @item
menus.texi(,85) Select the menu item and click. 
menus.texi(,86) @end enumerate
menus.texi(,87) 
menus.texi(,88) Emacs displays the function associated with the menu item in a separate
menus.texi(,89) window, usually together with some documentation. 
menus.texi(,90) 
menus.texi(,91) @menu
menus.texi(,92) * File Menu::           Items on the File menu.
menus.texi(,93) * Edit Menu::           Items on the Edit menu.
menus.texi(,94) * Apps Menu::		Items on the Apps menu.
menus.texi(,95) * Options Menu::        Items on the Options menu. 
menus.texi(,96) * Buffers Menu::        Information about the Buffers menu.
menus.texi(,97) * Tools Menu::		Items on the Tools menu.
menus.texi(,98) * Help Menu::           Items on the Help menu. 
menus.texi(,99) * Menu Customization::  Adding and removing menu items and related
menus.texi(,100)                         operations.
menus.texi(,101) @end menu
menus.texi(,102) 
menus.texi(,103) @node File Menu
menus.texi(,104) @subsection The File Menu
menus.texi(,105) 
menus.texi(,106) @cindex File menu
menus.texi(,107) 
menus.texi(,108) The @b{File} menu bar item contains the items @b{New Frame}, @b{Open
menus.texi(,109) File...}, @b{Save Buffer}, @b{Save Buffer As...}, @b{Revert Buffer},
menus.texi(,110) @b{Print Buffer}, @b{Delete Frame}, @b{Kill Buffer} and @b{Exit Emacs}
menus.texi(,111) on the pull-down menu.  If you select a menu item, Emacs executes the
menus.texi(,112) equivalent command.
menus.texi(,113) 
menus.texi(,114) @cindex Open File, New Frame... menu item
menus.texi(,115) @cindex Open File... menu item
menus.texi(,116) @cindex Insert File... menu item
menus.texi(,117) @cindex Save Buffer menu item
menus.texi(,118) @cindex Save Buffer As ... menu item
menus.texi(,119) @cindex Revert Buffer menu item
menus.texi(,120) @cindex Kill Buffer menu item
menus.texi(,121) @cindex Print Buffer menu item
menus.texi(,122) @cindex New Frame menu item
menus.texi(,123) @cindex Delete Frame menu item
menus.texi(,124) @cindex Split Frame
menus.texi(,125) @cindex Un-split (Keep This)
menus.texi(,126) @cindex Un-split (Keep Others)
menus.texi(,127) @cindex Exit Emacs menu item
menus.texi(,128) 
menus.texi(,129) @table @b
menus.texi(,130) @item Open File, New Frame...
menus.texi(,131) Prompts you for a filename and loads that file into a new buffer in a
menus.texi(,132) new Emacs frame, that is, a new X window running under the same Emacs
menus.texi(,133) process.  You can remove the frame using the @b{Delete Frame} menu
menus.texi(,134) item.  When you remove the last frame, you exit Emacs and are prompted
menus.texi(,135) for confirmation. @refill
menus.texi(,136) 
menus.texi(,137) @item Open File...
menus.texi(,138) Prompts you for a filename and loads that file into a new buffer. 
menus.texi(,139) @b{Open File...} is equivalent to the Emacs command @code{find-file} (@kbd{C-x
menus.texi(,140) C-f}).@refill 
menus.texi(,141) 
menus.texi(,142) @item Insert File...
menus.texi(,143) Prompts you for a filename and inserts the contents of that file into
menus.texi(,144) the current buffer.  The file associated with the current buffer is
menus.texi(,145) not changed by this command.  This is equivalent to the Emacs command
menus.texi(,146) @code{insert-file} (@kbd{C-x i}).@refill 
menus.texi(,147) 
menus.texi(,148) @item Save Buffer 
menus.texi(,149) Writes and saves the current Emacs buffer as the latest
menus.texi(,150) version of the current visited file.  @b{Save Buffer} is equivalent to the
menus.texi(,151) Emacs command @code{save-buffer} (@kbd{C-x C-s}).@refill
menus.texi(,152) 
menus.texi(,153) @item Save Buffer As... 
menus.texi(,154) Writes and saves the current Emacs buffer to the filename you specify.
menus.texi(,155) @b{Save Buffer As...} is equivalent to the Emacs command
menus.texi(,156) @code{write-file} (@kbd{C-x C-w}).@refill
menus.texi(,157) 
menus.texi(,158) @item Revert Buffer
menus.texi(,159) Restores the last saved version of the file to the current buffer.  When
menus.texi(,160) you edit a buffer containing a text file, you must save the buffer
menus.texi(,161) before your changes become effective.  Use @b{Revert Buffer} if you do
menus.texi(,162) not want to keep the changes you have made in the buffer.  @b{Revert
menus.texi(,163) Buffer} is equivalent to the Emacs command @code{revert-file} (@kbd{M-x
menus.texi(,164) revert-buffer}).@refill
menus.texi(,165) 
menus.texi(,166) @item Kill Buffer
menus.texi(,167) Kills the current buffer, prompting you first if there are unsaved
menus.texi(,168) changes.  This is roughly equivalent to the Emacs command 
menus.texi(,169) @code{kill-buffer} (@kbd{C-x k}), except that @code{kill-buffer} 
menus.texi(,170) prompts for the name of a buffer to kill. @refill
menus.texi(,171) 
menus.texi(,172) @item Print Buffer
menus.texi(,173) Prints a hardcopy of the current buffer.  Equivalent
menus.texi(,174) to the Emacs command @code{print-buffer} (@kbd{M-x print-buffer}).@refill
menus.texi(,175) 
menus.texi(,176) @item New Frame
menus.texi(,177) Creates a new Emacs frame displaying the @code{*scratch*} buffer.  This
menus.texi(,178) is like the @b{Open File, New Frame...} menu item, except that it does
menus.texi(,179) not prompt for or load a file.@refill
menus.texi(,180) 
menus.texi(,181) @item Delete Frame 
menus.texi(,182) Allows you to close all but one of the frames created by @b{New Frame}.
menus.texi(,183) If you created several Emacs frames belonging to the same Emacs
menus.texi(,184) process, you can close all but one of them.  When you attempt to close the
menus.texi(,185) last frame, Emacs informs you that you are attempting to delete the
menus.texi(,186) last frame.  You have to choose @b{Exit Emacs} for that.@refill
menus.texi(,187) 
menus.texi(,188) @item Split Frame
menus.texi(,189) Divides the current window on the current frame into two equal-sized
menus.texi(,190) windows, both displaying the same buffer.  Equivalent to the Emacs
menus.texi(,191) command @code{split-window-vertically} (@kbd{C-x 2}).@refill
menus.texi(,192) 
menus.texi(,193) @item Un-split (Keep This)
menus.texi(,194) If the frame is divided into multiple windows, this removes all windows
menus.texi(,195) other than the selected one.  Equivalent to the Emacs command
menus.texi(,196) @code{delete-other-windows} (@kbd{C-x 1}).@refill
menus.texi(,197) 
menus.texi(,198) @item Un-split (Keep Others)
menus.texi(,199) If the frame is divided into multiple windows, this removes the
menus.texi(,200) selected window from the frame, giving the space back to one of the
menus.texi(,201) other windows.  Equivalent to the Emacs command @code{delete-window}
menus.texi(,202) (@kbd{C-x 0}).@refill
menus.texi(,203) 
menus.texi(,204) @item Exit Emacs
menus.texi(,205) Shuts down (kills) the Emacs process.  Equivalent to the Emacs command
menus.texi(,206) @code{save-buffers-kill-emacs} (@kbd{C-x C-c}).  Before killing the
menus.texi(,207) Emacs process, the system asks which unsaved buffers to save by going through
menus.texi(,208) the list of all buffers in that Emacs process.@refill
menus.texi(,209) @end table
menus.texi(,210) 
menus.texi(,211) @node Edit Menu
menus.texi(,212) @subsection The Edit Menu
menus.texi(,213) @cindex Edit menu
menus.texi(,214) 
menus.texi(,215) The @b{Edit} pull-down menu contains the @b{Undo}, @b{Cut}, @b{Copy},
menus.texi(,216) @b{Paste}, and @b{Clear} menu items.  When you select a menu item, Emacs
menus.texi(,217) executes the equivalent command.  Most commands on the @b{Edit} menu
menus.texi(,218) work on a block of text, the X selection.  They appear faded until you
menus.texi(,219) select a block of text (activate a region) with the mouse.  @xref{Using
menus.texi(,220) X Selections}, @pxref{Killing}, and @pxref{Yanking} for more
menus.texi(,221) information.@refill
menus.texi(,222) 
menus.texi(,223) @c  **** zmacs-regions is on by default these days - jwz
menus.texi(,224) @c
menus.texi(,225) @c Note: By default, you can use the @b{Edit} menu items on the region between
menus.texi(,226) @c point and the mark as well as regions selected with the mouse. To change
menus.texi(,227) @c this behavior, set the variable @code{zmacs-regions} to
menus.texi(,228) @c @code{t}. @xref{Active Regions} for more information.
menus.texi(,229) 
menus.texi(,230) @cindex Undo menu item
menus.texi(,231) @cindex Cut menu item
menus.texi(,232) @cindex Copy menu item
menus.texi(,233) @cindex Paste menu item
menus.texi(,234) @cindex Clear menu item
menus.texi(,235) @cindex Start Macro Recording menu item
menus.texi(,236) @cindex End Macro Recording menu item
menus.texi(,237) @cindex Execute Last Macro menu item
menus.texi(,238) @table @b
menus.texi(,239) @item Undo 
menus.texi(,240) Undoes the previous command.  @b{Undo} is equivalent to
menus.texi(,241) the Emacs command @code{undo} (@kbd{C-x u}).@refill
menus.texi(,242) 
menus.texi(,243) @item Cut
menus.texi(,244) Removes the selected text block from the current buffer, makes it the X
menus.texi(,245) clipboard selection, and places it in the kill ring.  Before executing
menus.texi(,246) this command, you have to select a region using Emacs region selection
menus.texi(,247) commands or with the mouse.@refill 
menus.texi(,248) 
menus.texi(,249) @item Copy 
menus.texi(,250) Makes a selected text block the X clipboard selection, and places it in
menus.texi(,251) the kill ring.  You can select text using one of the Emacs region
menus.texi(,252) selection commands or by selecting a text region with the mouse.@refill
menus.texi(,253) 
menus.texi(,254) @item Paste 
menus.texi(,255) Inserts the current value of the X clipboard selection in the current
menus.texi(,256) buffer.  Note that this is not necessarily the same as the Emacs
menus.texi(,257) @code{yank} command, because the Emacs kill ring and the X clipboard
menus.texi(,258) selection are not the same thing.  You can paste in text you
menus.texi(,259) have placed in the clipboard using @b{Copy} or @b{Cut}.  You can also
menus.texi(,260) use @b{Paste} to insert text that was pasted into the clipboard from other
menus.texi(,261) applications.
menus.texi(,262) 
menus.texi(,263) @item Clear
menus.texi(,264) Removes the selected text block from the current buffer but does not
menus.texi(,265) place it in the kill ring or the X clipboard selection. 
menus.texi(,266) 
menus.texi(,267) @item Start Macro Recording
menus.texi(,268) After selecting this, Emacs will remember every keystroke you type until
menus.texi(,269) @b{End Macro Recording} is selected.  This is the same as the Emacs 
menus.texi(,270) command @code{start-kbd-macro} (@kbd{C-x (}).
menus.texi(,271) 
menus.texi(,272) @item End Macro Recording
menus.texi(,273) Selecting this tells emacs to stop remembering your keystrokes.  This is
menus.texi(,274) the same as the Emacs command @code{end-kbd-macro} (@kbd{C-x )}).
menus.texi(,275) 
menus.texi(,276) @item Execute Last Macro
menus.texi(,277) Selecting this item will cause emacs to re-interpret all of the
menus.texi(,278) keystrokes which were saved between selections of the @b{Start Macro
menus.texi(,279) Recording} and @b{End Macro Recording} menu items.  This is the same
menus.texi(,280) as the Emacs command @code{call-last-kbd-macro} (@kbd{C-x e}).
menus.texi(,281) @end table
menus.texi(,282) 
menus.texi(,283) @node Apps Menu
menus.texi(,284) @subsection The Apps Menu
menus.texi(,285) @cindex Apps menu
menus.texi(,286) 
menus.texi(,287) The @b{Apps} pull-down menu contains the @b{Read Mail (VM)...}, @b{Read
menus.texi(,288) Mail (MH)...}, @b{Send Mail...}, @b{Usenet News}, @b{Browse the Web},
menus.texi(,289) @b{Gopher}, @b{Spell-Check Buffer} and @b{Emulate VI} menu items,
menus.texi(,290) and the @b{Calendar} and @b{Games} sub-menus.  When you select a menu
menus.texi(,291) item, Emacs executes the equivalent command.  For some of the menu
menus.texi(,292) items, there are sub-menus which you will need to select.
menus.texi(,293) 
menus.texi(,294) @node Options Menu
menus.texi(,295) @subsection The Options Menu
menus.texi(,296) @cindex Options menu
menus.texi(,297) 
menus.texi(,298) The @b{Options} pull-down menu contains the @b{Read Only}, @b{Case 
menus.texi(,299) Sensitive Search}, @b{Overstrike}, @b{Auto Delete Selection}, 
menus.texi(,300) @b{Teach Extended Commands}, @b{Syntax Highlighting}, @b{Paren 
menus.texi(,301) Highlighting}, @b{Font}, @b{Size}, @b{Weight}, @b{Buffers Menu 
menus.texi(,302) Length...}, @b{Buffers Sub-Menus} and @b{Save Options} menu items. 
menus.texi(,303) When you select a menu item, Emacs executes the equivalent command. 
menus.texi(,304) For some of the menu items, there are sub-menus which you will need 
menus.texi(,305) to select.
menus.texi(,306) 
menus.texi(,307) @cindex Read Only menu item
menus.texi(,308) @cindex Case Sensitive Search menu item
menus.texi(,309) @cindex Overstrike menu item
menus.texi(,310) @cindex Auto Delete Selection menu item
menus.texi(,311) @cindex Teach Extended Commands menu item
menus.texi(,312) @cindex Syntax Highlighting menu item
menus.texi(,313) @cindex Paren Highlighting menu item
menus.texi(,314) @cindex Font menu item
menus.texi(,315) @cindex Size menu item
menus.texi(,316) @cindex Weight menu item
menus.texi(,317) @cindex Buffers Menu Length... menu item
menus.texi(,318) @cindex Buffers Sub-Menus menu item
menus.texi(,319) @cindex Save Options
menus.texi(,320) @table @b
menus.texi(,321) @item Read Only
menus.texi(,322) Selecting this item will cause the buffer to visit the file in a 
menus.texi(,323) read-only mode. Changes to the file will not be allowed. This is 
menus.texi(,324) equivalent to the Emacs command @code{toggle-read-only} 
menus.texi(,325) (@kbd{C-x C-q}).
menus.texi(,326) 
menus.texi(,327) @item Case Sensitive Search
menus.texi(,328) Selecting this item will cause searches to be case-sensitive. If 
menus.texi(,329) its not selected then searches will ignore case. This option is 
menus.texi(,330) local to the buffer.
menus.texi(,331) 
menus.texi(,332) @item Overstrike
menus.texi(,333) After selecting this item, when you type letters they will replace 
menus.texi(,334) existing text on a one-to-one basis, rather than pushing it to the 
menus.texi(,335) right. At the end of a line, such characters extend the line. Before 
menus.texi(,336) a tab, such characters insert until the tab is filled in. This is the 
menus.texi(,337) same as Emacs command @code{quoted-insert} (@kbd{C-q}).
menus.texi(,338) 
menus.texi(,339) @item Auto Delete Selection
menus.texi(,340) Selecting this item will cause automatic deletion of the selected 
menus.texi(,341) region. The typed text will replace the selection if the selection 
menus.texi(,342) is active (i.e. if its highlighted). If the option is not selected 
menus.texi(,343) then the typed text is just inserted at the point.
menus.texi(,344) 
menus.texi(,345) @item Teach Extended Commands
menus.texi(,346) After you  select this item, any time you execute a command with 
menus.texi(,347) @kbd{M-x}which has a shorter keybinding, you will be shown the 
menus.texi(,348) alternate binding before the command executes.
menus.texi(,349) 
menus.texi(,350) @item Syntax Highlighting
menus.texi(,351) You can customize your init file to include the font-lock mode so that
menus.texi(,352) when you select this item, the comments will be displayed in one face,
menus.texi(,353) strings in another, reserved words in another, and so on. @xref{Init
menus.texi(,354) File}.  When @b{Fonts} is selected, different parts of the program will
menus.texi(,355) appear in different Fonts. When @b{Colors} is selected, then the program
menus.texi(,356) will be displayed in different colors. Selecting @b{None} causes the
menus.texi(,357) program to appear in just one Font and Color. Selecting @b{Less} resets
menus.texi(,358) the Fonts and Colors to a fast, minimal set of decorations. Selecting
menus.texi(,359) @b{More} resets the Fonts and Colors to a larger set of decorations. For
menus.texi(,360) example, if @b{Less} is selected (which is the default setting) then you
menus.texi(,361) might have all comments in green color.  Whereas, if @b{More} is
menus.texi(,362) selected then a function name in the comments themselves might appear in
menus.texi(,363) a different Color or Font.@refill
menus.texi(,364) 
menus.texi(,365) @item Paren Highlighting
menus.texi(,366) After selecting @b{Blink} from this item, if you place the cursor 
menus.texi(,367) on a parenthesis, the matching parenthesis will blink. If you select 
menus.texi(,368) @b{Highlight} and place the cursor on a parenthesis, the whole 
menus.texi(,369) expression of the parenthesis under the cursor will be highlighted. 
menus.texi(,370) Selecting @b{None} will turn off the options (regarding @b{Paren 
menus.texi(,371) Highlighting}) which you had selected earlier.@refill
menus.texi(,372) 
menus.texi(,373) @item Font
menus.texi(,374) You can select any Font for your program by choosing from one of the 
menus.texi(,375) available Fonts.
menus.texi(,376) 
menus.texi(,377) @item Size
menus.texi(,378) You can select any size ranging from @b{2} to @b{24} by selecting the 
menus.texi(,379) appropriate option.@refill
menus.texi(,380) 
menus.texi(,381) @item Weight
menus.texi(,382) You can choose either @b{Bold} or @b{Medium} for the weight.@refill
menus.texi(,383) 
menus.texi(,384) @item Buffers Menu Length...
menus.texi(,385) Prompts you for the number of buffers to display. Then it will display 
menus.texi(,386) that number of most recently selected buffers.
menus.texi(,387) 
menus.texi(,388) @item Buffers Sub-Menus
menus.texi(,389) After selection of this item the Buffers menu will contain several 
menus.texi(,390) commands, as submenus of each buffer line. If this item is unselected, 
menus.texi(,391) then there are no submenus for each buffer line, the only command 
menus.texi(,392) available will be selecting that buffer.
menus.texi(,393) 
menus.texi(,394) @item Save Options
menus.texi(,395) Selecting this item will save the current settings of your Options 
menus.texi(,396) menu to your init file.  @xref{Init File}.
menus.texi(,397) @end table
menus.texi(,398) 
menus.texi(,399) @node Buffers Menu
menus.texi(,400) @subsection The Buffers Menu
menus.texi(,401) @cindex Buffers menu
menus.texi(,402) The @b{Buffers} menu provides a selection of up to ten buffers and the
menus.texi(,403) item @b{List All Buffers}, which provides a Buffer List. @xref{List
menus.texi(,404) Buffers}, for more information.  
menus.texi(,405) 
menus.texi(,406) @node Tools Menu
menus.texi(,407) @subsection The Tools Menu
menus.texi(,408) @cindex Tools menu
menus.texi(,409) 
menus.texi(,410) The @b{Tools} pull-down menu contains the @b{Grep...}, @b{Compile...},
menus.texi(,411) @b{Shell Command...}, @b{Shell Command on Region...}, @b{Debug(GDB)...}
menus.texi(,412) and @b{Debug(DBX)...} menu items, and the @b{Compare}, @b{Merge},
menus.texi(,413) @b{Apply Patch} and @b{Tags} sub-menus.  When you select a menu item,
menus.texi(,414) Emacs executes the equivalent command.  For some of the menu items,
menus.texi(,415) there are sub-menus which you will need to select.
menus.texi(,416) 
menus.texi(,417) @node Help Menu
menus.texi(,418) @subsection The Help Menu
menus.texi(,419) @cindex Help menu
menus.texi(,420) 
menus.texi(,421) The Help Menu gives you access to Emacs Info and provides a menu
menus.texi(,422) equivalent for each of the choices you have when using @kbd{C-h}. 
menus.texi(,423) @xref{Help}, for more information. 
menus.texi(,424) 
menus.texi(,425) The Help menu also gives access to UNIX online manual pages via the
menus.texi(,426) @b{UNIX Manual Page} option.  
menus.texi(,427) 
menus.texi(,428) @node Menu Customization
menus.texi(,429) @subsection Customizing XEmacs Menus
menus.texi(,430) 
menus.texi(,431) You can customize any of the pull-down menus by adding or removing menu
menus.texi(,432) items and disabling or enabling existing menu items.
menus.texi(,433)  
menus.texi(,434) The following functions are available: 
menus.texi(,435) @table @kbd
menus.texi(,436) @item add-menu: (@var{menu-path} @var{menu-name} @var{menu-items} &optional @var{before})
menus.texi(,437) Add a menu to the menu bar or one of its submenus.
menus.texi(,438) @item add-menu-item: (@var{menu-path} @var{item-name} @var{function}
menus.texi(,439) @var{enabled-p} &optional @var{before})
menus.texi(,440) Add a menu item to a menu, creating the menu first if necessary.
menus.texi(,441) @item delete-menu-item: (@var{path})
menus.texi(,442) Remove the menu item defined by @var{path} from the menu hierarchy.
menus.texi(,443) @item disable-menu-item: (@var{path})
menus.texi(,444) Disable the specified menu item.
menus.texi(,445) @item enable-menu-item: (@var{path})
menus.texi(,446) Enable the specified previously disabled menu item.
menus.texi(,447) @item relabel-menu-item: (@var{path} @var{new-name})
menus.texi(,448) Change the string of the menu item specified by @var{path} to
menus.texi(,449) @var{new-name}.
menus.texi(,450) 
menus.texi(,451) @end table
menus.texi(,452) 
menus.texi(,453) @findex add-menu
menus.texi(,454) @cindex adding menus
menus.texi(,455) Use the function @code{add-menu} to add a new menu or submenu.
menus.texi(,456) If a menu or submenu of the given name exists already, it is changed.
menus.texi(,457) 
menus.texi(,458) @var{menu-path} identifies the menu under which the new menu should be
menus.texi(,459) inserted.  It is a list of strings; for example, @code{("File")} names
menus.texi(,460) the top-level @b{File} menu.  @code{("File" "Foo")} names a hypothetical
menus.texi(,461) submenu of @b{File}.  If @var{menu-path} is @code{nil}, the menu is
menus.texi(,462) added to the menu bar itself.
menus.texi(,463) 
menus.texi(,464) @var{menu-name} is the string naming the menu to be added.  
menus.texi(,465) 
menus.texi(,466) @var{menu-items} is a list of menu item descriptions.  Each menu item
menus.texi(,467) should be a vector of three elements:
menus.texi(,468) 
menus.texi(,469) @itemize @bullet
menus.texi(,470) @item 
menus.texi(,471) A string, which is the name of the menu item
menus.texi(,472) @item 
menus.texi(,473) A symbol naming a command, or a form to evaluate
menus.texi(,474) @item 
menus.texi(,475) @code{t} or @code{nil} to indicate whether the item is selectable
menus.texi(,476) @end itemize
menus.texi(,477) 
menus.texi(,478) The optional argument @var{before} is the name of the menu before which
menus.texi(,479) the new menu or submenu should be added.  If the menu is already
menus.texi(,480) present, it is not moved.
menus.texi(,481) 
menus.texi(,482) @findex add-menu-item
menus.texi(,483) @cindex adding menu items
menus.texi(,484) The function @code{add-menu-item} adds a menu item to the specified
menus.texi(,485) menu, creating the menu first if necessary.  If the named item already
menus.texi(,486) exists, the menu remains unchanged.
menus.texi(,487) 
menus.texi(,488) @var{menu-path} identifies the menu into which the new menu item should
menus.texi(,489) be inserted.  It is a list of strings; for example, @code{("File")}
menus.texi(,490) names the top-level @b{File} menu.  @code{("File" "Foo")} names a
menus.texi(,491) hypothetical submenu of @b{File}.
menus.texi(,492) 
menus.texi(,493) @var{item-name} is the string naming the menu item to add.
menus.texi(,494) 
menus.texi(,495) @var{function} is the command to invoke when this menu item is selected.
menus.texi(,496) If it is a symbol, it is invoked with @code{call-interactively}, in the
menus.texi(,497) same way that functions bound to keys are invoked.  If it is a list, the
menus.texi(,498) list is simply evaluated.
menus.texi(,499) 
menus.texi(,500) @var{enabled-p} controls whether the item is selectable or not.
menus.texi(,501) It should be @code{t}, @code{nil}, or a form to evaluate to decide.  
menus.texi(,502) This form will be evaluated just before the menu is displayed, and 
menus.texi(,503) the menu item will be selectable if that form returns non-@code{nil}.
menus.texi(,504) 
menus.texi(,505) For example, to make the @code{rename-file} command available from the
menus.texi(,506) @b{File} menu, use the following code:
menus.texi(,507) 
menus.texi(,508) @example
menus.texi(,509) (add-menu-item '("File") "Rename File" 'rename-file t)
menus.texi(,510) @end example
menus.texi(,511) 
menus.texi(,512) To add a submenu of file management commands using a @b{File Management}
menus.texi(,513) item, use the following code: 
menus.texi(,514) 
menus.texi(,515) @example
menus.texi(,516) (add-menu-item '("File" "File Management") "Copy File" 'copy-file t)
menus.texi(,517) (add-menu-item '("File" "File Management") "Delete File" 'delete-file t)
menus.texi(,518) (add-menu-item '("File" "File Management") "Rename File" 'rename-file t)
menus.texi(,519) @end example
menus.texi(,520) 
menus.texi(,521) The optional @var{before} argument is the name of a menu item before
menus.texi(,522) which the new item should be added.  If the item is already present, it
menus.texi(,523) is not moved.
menus.texi(,524) 
menus.texi(,525) @findex delete-menu-item
menus.texi(,526) @cindex deleting menu items
menus.texi(,527) To remove a specified menu item from the menu hierarchy, use
menus.texi(,528) @code{delete-menu-item}.
menus.texi(,529) 
menus.texi(,530) @var{path} is a list of strings that identify the position of the menu
menus.texi(,531) item in the menu hierarchy.  @code{("File" "Save")} means the menu item
menus.texi(,532) called @b{Save} under the top level @b{File} menu.  @code{("Menu" "Foo"
menus.texi(,533) "Item")} means the menu item called @b{Item} under the @b{Foo} submenu
menus.texi(,534) of @b{Menu}.
menus.texi(,535) 
menus.texi(,536) @findex disable-menu-item
menus.texi(,537) @findex enable-menu-item
menus.texi(,538) @cindex enabling menu items
menus.texi(,539) @cindex disabling menu items
menus.texi(,540) 
menus.texi(,541) To disable a menu item, use @code{disable-menu-item}.  The disabled
menus.texi(,542) menu item is grayed and can no longer be selected.  To make the
menus.texi(,543) item selectable again, use @code{enable-menu-item}.
menus.texi(,544) @code{disable-menu-item} and @code{enable-menu-item} both have the
menus.texi(,545) argument @var{path}.
menus.texi(,546) 
menus.texi(,547) @findex relabel-menu-item
menus.texi(,548) @cindex changing menu items
menus.texi(,549) To change the string of the specified menu item, use
menus.texi(,550) @code{relabel-menu-item}. This function also takes the argument @var{path}.
menus.texi(,551) 
menus.texi(,552) @var{new-name} is the string to which the menu item will be changed.
entering.texi(,1) @c This is part of the XEmacs manual.
entering.texi(,2) @c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995 Free Software Foundation, Inc.
entering.texi(,3) @c See file xemacs.texi for copying conditions.
entering.texi(,4) @node Entering Emacs, Exiting, Pull-down Menus, Top
entering.texi(,5) @chapter Entering and Exiting Emacs
entering.texi(,6) @cindex entering XEmacs
entering.texi(,7) @cindex starting XEmacs
entering.texi(,8) 
entering.texi(,9)   The usual way to invoke XEmacs is to type @kbd{xemacs @key{RET}} at
entering.texi(,10) the shell.  XEmacs clears the screen and then displays an initial
entering.texi(,11) advisory message and copyright notice.  You can begin typing XEmacs
entering.texi(,12) commands immediately afterward.
entering.texi(,13) 
entering.texi(,14)   Some operating systems insist on discarding all type-ahead when XEmacs
entering.texi(,15) starts up; they give XEmacs no way to prevent this.  Therefore, it is
entering.texi(,16) advisable to wait until XEmacs clears the screen before typing your first
entering.texi(,17) editing command.
entering.texi(,18) 
entering.texi(,19)   If you run XEmacs from a shell window under the X Window System, run it
entering.texi(,20) in the background with @samp{xemacs&}.  This way, XEmacs does not tie up
entering.texi(,21) the shell window, so you can use that to run other shell commands while
entering.texi(,22) XEmacs operates its own X windows.  You can begin typing XEmacs commands
entering.texi(,23) as soon as you direct your keyboard input to the XEmacs frame.
entering.texi(,24) 
entering.texi(,25) @vindex initial-major-mode
entering.texi(,26)   Before Emacs reads the first command, you have not had a chance to
entering.texi(,27) give a command to specify a file to edit.  Since Emacs must always have
entering.texi(,28) a current buffer for editing, it presents a buffer, by default, a buffer
entering.texi(,29) named @samp{*scratch*}.  The buffer is in Lisp Interaction mode; you can
entering.texi(,30) use it to type Lisp expressions and evaluate them, or you can ignore
entering.texi(,31) that capability and simply doodle.  (You can specify a different major
entering.texi(,32) mode for this buffer by setting the variable @code{initial-major-mode}
entering.texi(,33) in your init file.  @xref{Init File}.)
entering.texi(,34) 
entering.texi(,35)   It is possible to specify files to be visited, Lisp files to be
entering.texi(,36) loaded, and functions to be called, by giving Emacs arguments in the
entering.texi(,37) shell command line.  @xref{Command Switches}.  But we don't recommend
entering.texi(,38) doing this.  The feature exists mainly for compatibility with other
entering.texi(,39) editors.
entering.texi(,40) 
entering.texi(,41)   Many other editors are designed to be started afresh each time you
entering.texi(,42) want to edit.  You edit one file and then exit the editor.  The next
entering.texi(,43) time you want to edit either another file or the same one, you must run
entering.texi(,44) the editor again.  With these editors, it makes sense to use a
entering.texi(,45) command-line argument to say which file to edit.
entering.texi(,46) 
entering.texi(,47)   But starting a new Emacs each time you want to edit a different file
entering.texi(,48) does not make sense.  For one thing, this would be annoyingly slow.  For
entering.texi(,49) another, this would fail to take advantage of Emacs's ability to visit
entering.texi(,50) more than one file in a single editing session.  And it would lose the
entering.texi(,51) other accumulated context, such as registers, undo history, and the mark
entering.texi(,52) ring.
entering.texi(,53) 
entering.texi(,54)   The recommended way to use XEmacs is to start it only once, just
entering.texi(,55) after you log in, and do all your editing in the same Emacs session.
entering.texi(,56) Each time you want to edit a different file, you visit it with the
entering.texi(,57) existing Emacs, which eventually comes to have many files in it ready
entering.texi(,58) for editing.  Usually you do not kill the Emacs until you are about to
entering.texi(,59) log out.  @xref{Files}, for more information on visiting more than one
entering.texi(,60) file.
entering.texi(,61) 
entering.texi(,62) @node Exiting, Command Switches, Entering Emacs, Top
entering.texi(,63) @section Exiting Emacs
entering.texi(,64) @cindex exiting
entering.texi(,65) @cindex killing Emacs
entering.texi(,66) @cindex suspending
entering.texi(,67) @cindex leaving Emacs
entering.texi(,68) @cindex quitting Emacs
entering.texi(,69) @cindex shrinking XEmacs frame
entering.texi(,70) 
entering.texi(,71)   There are two commands for exiting Emacs because there are two kinds
entering.texi(,72) of exiting: @dfn{suspending} Emacs and @dfn{killing} Emacs.
entering.texi(,73) 
entering.texi(,74)   @dfn{Suspending} means stopping Emacs temporarily and returning
entering.texi(,75) control to its parent process (usually a shell), allowing you to resume
entering.texi(,76) editing later in the same Emacs job, with the same buffers, same kill
entering.texi(,77) ring, same undo history, and so on.  This is the usual way to exit.
entering.texi(,78) 
entering.texi(,79)   @dfn{Killing} Emacs means destroying the Emacs job.  You can run Emacs
entering.texi(,80) again later, but you will get a fresh Emacs; there is no way to resume
entering.texi(,81) the same editing session after it has been killed.
entering.texi(,82) 
entering.texi(,83) @table @kbd
entering.texi(,84) @item C-z
entering.texi(,85) Suspend Emacs or iconify a frame
entering.texi(,86) (@code{suspend-emacs-or-iconify-frame}).  If used under the X window
entering.texi(,87) system, shrink the X window containing the Emacs frame to an icon (see
entering.texi(,88) below).
entering.texi(,89) @item C-x C-c
entering.texi(,90) Kill Emacs (@code{save-buffers-kill-emacs}).
entering.texi(,91) @end table
entering.texi(,92) 
entering.texi(,93) If you use XEmacs under the X window system, @kbd{C-z} shrinks
entering.texi(,94) the X window containing the Emacs frame to an icon.  The Emacs process
entering.texi(,95) is stopped temporarily, and control is returned to the window manager.
entering.texi(,96) If more than one frame is associated with the Emacs process, only the
entering.texi(,97) frame from which you used @kbd{C-z} is iconified.
entering.texi(,98) 
entering.texi(,99) To activate the "suspended" Emacs, use the appropriate window manager
entering.texi(,100) mouse gestures.  Usually left-clicking on the icon reactivates and
entering.texi(,101) reopens the X window containing the Emacs frame, but the window manager
entering.texi(,102) you use determines what exactly happens.  To actually kill the Emacs
entering.texi(,103) process, use @kbd{C-x C-c} or the @b{Exit XEmacs} item on the @b{File}
entering.texi(,104) menu.
entering.texi(,105) 
entering.texi(,106) @kindex C-z
entering.texi(,107) @findex suspend-emacs
entering.texi(,108)   To suspend Emacs, type @kbd{C-z} (@code{suspend-emacs}).  This takes
entering.texi(,109) you back to the shell from which you invoked Emacs.  You can resume
entering.texi(,110) Emacs with the shell command @samp{%xemacs} in most common shells.
entering.texi(,111) 
entering.texi(,112)   On systems that do not support suspending programs, @kbd{C-z} starts
entering.texi(,113) an inferior shell that communicates directly with the terminal.
entering.texi(,114) Emacs waits until you exit the subshell.  (The way to do that is
entering.texi(,115) probably with @kbd{C-d} or @samp{exit}, but it depends on which shell
entering.texi(,116) you use.)  The only way on these systems to get back to the shell from
entering.texi(,117) which Emacs was run (to log out, for example) is to kill Emacs.
entering.texi(,118) 
entering.texi(,119)   Suspending also fails if you run Emacs under a shell that doesn't
entering.texi(,120) support suspending programs, even if the system itself does support it.
entering.texi(,121) In such a case, you can set the variable @code{cannot-suspend} to a
entering.texi(,122) non-@code{nil} value to force @kbd{C-z} to start an inferior shell.
entering.texi(,123) (One might also describe Emacs's parent shell as ``inferior'' for
entering.texi(,124) failing to support job control properly, but that is a matter of taste.)
entering.texi(,125) 
entering.texi(,126)   When Emacs communicates directly with an X server and creates its own
entering.texi(,127) dedicated X windows, @kbd{C-z} has a different meaning.  Suspending an
entering.texi(,128) applications that uses its own X windows is not meaningful or useful.
entering.texi(,129) Instead, @kbd{C-z} runs the command @code{iconify-or-deiconify-frame},
entering.texi(,130) which temporarily closes up the selected Emacs frame.
entering.texi(,131) The way to get back to a shell window is with the window manager.
entering.texi(,132) 
entering.texi(,133) @kindex C-x C-c
entering.texi(,134) @findex save-buffers-kill-emacs
entering.texi(,135)   To kill Emacs, type @kbd{C-x C-c} (@code{save-buffers-kill-emacs}).  A
entering.texi(,136) two-character key is used for this to make it harder to type.  Selecting
entering.texi(,137) the @b{Exit XEmacs} option of the @b{File} menu is an alternate way of
entering.texi(,138) issuing the command.
entering.texi(,139) 
entering.texi(,140) Unless a numeric argument is used, this command first offers to save any
entering.texi(,141) modified file-visiting buffers.  If you do not save all buffers, you are
entering.texi(,142) asked for reconfirmation with @kbd{yes} before killing Emacs, since any
entering.texi(,143) changes not saved will be lost forever.  If any subprocesses are still
entering.texi(,144) running, @kbd{C-x C-c} asks you to confirm killing them, since killing
entering.texi(,145) Emacs will kill the subprocesses immediately.
entering.texi(,146) 
entering.texi(,147)   There is no way to restart an Emacs session once you have killed it.
entering.texi(,148) You can, however, arrange for Emacs to record certain session
entering.texi(,149) information, such as which files are visited, when you kill it, so that
entering.texi(,150) the next time you restart Emacs it will try to visit the same files and
entering.texi(,151) so on.
entering.texi(,152) @c @xref{Saving Emacs Sessions}.
entering.texi(,153) 
entering.texi(,154)   The operating system usually listens for certain special characters
entering.texi(,155) whose meaning is to kill or suspend the program you are running.
entering.texi(,156) @b{This operating system feature is turned off while you are in Emacs.}
entering.texi(,157) The meanings of @kbd{C-z} and @kbd{C-x C-c} as keys in Emacs were
entering.texi(,158) inspired by the use of @kbd{C-z} and @kbd{C-c} on several operating
entering.texi(,159) systems as the characters for stopping or killing a program, but that is
entering.texi(,160) their only relationship with the operating system.  You can customize
entering.texi(,161) these keys to run any commands of your choice (@pxref{Keymaps}).
cmdargs.texi(,1) 
cmdargs.texi(,2) @node Command Switches, Startup Paths, Exiting, Top
cmdargs.texi(,3) @section Command Line Switches and Arguments
cmdargs.texi(,4) @cindex command line arguments
cmdargs.texi(,5) @cindex arguments (from shell)
cmdargs.texi(,6) 
cmdargs.texi(,7)   XEmacs supports command line arguments you can use to request
cmdargs.texi(,8) various actions when invoking Emacs.  The commands are for compatibility
cmdargs.texi(,9) with other editors and for sophisticated activities.  If you are using
cmdargs.texi(,10) XEmacs under the X window system, you can also use a number of
cmdargs.texi(,11) standard Xt command line arguments. Command line arguments are not usually
cmdargs.texi(,12) needed for editing with Emacs; new users can skip this section.
cmdargs.texi(,13) 
cmdargs.texi(,14)   Many editors are designed to be started afresh each time you want to
cmdargs.texi(,15) edit.  You start the editor to edit one file; then exit the editor.  The
cmdargs.texi(,16) next time you want to edit either another file or the same one, you
cmdargs.texi(,17) start the editor again.  Under these circumstances, it makes sense to use a
cmdargs.texi(,18) command line argument to say which file to edit.
cmdargs.texi(,19) 
cmdargs.texi(,20)   The recommended way to use XEmacs is to start it only once, just
cmdargs.texi(,21) after you log in, and do all your editing in the same Emacs process.
cmdargs.texi(,22) Each time you want to edit a file, you visit it using the existing
cmdargs.texi(,23) Emacs.  Emacs creates a new buffer for each file, and (unless you kill
cmdargs.texi(,24) some of the buffers) Emacs eventually has many files in it ready for
cmdargs.texi(,25) editing.  Usually you do not kill the Emacs process until you are about
cmdargs.texi(,26) to log out.  Since you usually read files by typing commands to Emacs,
cmdargs.texi(,27) command line arguments for specifying a file when Emacs is started are seldom
cmdargs.texi(,28) needed.
cmdargs.texi(,29) 
cmdargs.texi(,30)   Emacs accepts command-line arguments that specify files to visit,
cmdargs.texi(,31) functions to call, and other activities and operating modes.  If you
cmdargs.texi(,32) are running XEmacs under the X window system, a number of standard Xt
cmdargs.texi(,33) command line arguments are available, as well as a few X parameters
cmdargs.texi(,34) that are XEmacs-specific.
cmdargs.texi(,35) 
cmdargs.texi(,36)   Options with long names with a single initial hyphen are also
cmdargs.texi(,37) recognized with the GNU double initial hyphen syntax.  (The reverse
cmdargs.texi(,38) is not true.)
cmdargs.texi(,39) 
cmdargs.texi(,40) The following subsections list:
cmdargs.texi(,41) @itemize @bullet
cmdargs.texi(,42) @item 
cmdargs.texi(,43) Command line arguments that you can always use
cmdargs.texi(,44) @item 
cmdargs.texi(,45) Command line arguments that have to appear at the beginning of the
cmdargs.texi(,46) argument list
cmdargs.texi(,47) @item
cmdargs.texi(,48) Command line arguments that are only relevant if you are running XEmacs
cmdargs.texi(,49) under X
cmdargs.texi(,50) @end itemize
cmdargs.texi(,51) 
cmdargs.texi(,52) @subsection Command Line Arguments for Any Position
cmdargs.texi(,53)  Command line arguments are processed in the order they appear on the
cmdargs.texi(,54) command line; however, certain arguments (the ones in the
cmdargs.texi(,55) second table) must be at the front of the list if they are used.
cmdargs.texi(,56) 
cmdargs.texi(,57)   Here are the arguments allowed:
cmdargs.texi(,58) 
cmdargs.texi(,59) @table @samp
cmdargs.texi(,60) @item @var{file}
cmdargs.texi(,61) Visit @var{file} using @code{find-file}.  @xref{Visiting}.
cmdargs.texi(,62) 
cmdargs.texi(,63) @item +@var{linenum} @var{file}
cmdargs.texi(,64) Visit @var{file} using @code{find-file}, then go to line number
cmdargs.texi(,65) @var{linenum} in it.
cmdargs.texi(,66) 
cmdargs.texi(,67) @item -load @var{file}
cmdargs.texi(,68) @itemx -l @var{file}
cmdargs.texi(,69) Load a file @var{file} of Lisp code with the function @code{load}.
cmdargs.texi(,70) @xref{Lisp Libraries}.
cmdargs.texi(,71) 
cmdargs.texi(,72) @item -funcall @var{function}
cmdargs.texi(,73) @itemx -f @var{function}
cmdargs.texi(,74) Call Lisp function @var{function} with no arguments.
cmdargs.texi(,75) 
cmdargs.texi(,76) @item -eval @var{function}
cmdargs.texi(,77) Interpret the next argument as a Lisp expression, and evaluate it.
cmdargs.texi(,78) You must be very careful of the shell quoting here.
cmdargs.texi(,79) 
cmdargs.texi(,80) @item -insert @var{file}
cmdargs.texi(,81) @itemx -i @var{file}
cmdargs.texi(,82) Insert the contents of @var{file} into the current buffer.  This is like
cmdargs.texi(,83) what @kbd{M-x insert-buffer} does; @xref{Misc File Ops}.
cmdargs.texi(,84) 
cmdargs.texi(,85) @item -kill
cmdargs.texi(,86) Exit from Emacs without asking for confirmation.  Always the last
cmdargs.texi(,87) argument processed, no matter where it appears in the command line.
cmdargs.texi(,88) 
cmdargs.texi(,89) @item -version
cmdargs.texi(,90) @itemx -V
cmdargs.texi(,91) Prints version information.  This implies @samp{-batch}.
cmdargs.texi(,92) 
cmdargs.texi(,93) @example
cmdargs.texi(,94) % xemacs -version
cmdargs.texi(,95) XEmacs 19.13 of Mon Aug 21 1995 on willow (usg-unix-v) [formerly Lucid Emacs]
cmdargs.texi(,96) @end example
cmdargs.texi(,97) 
cmdargs.texi(,98) @item -help
cmdargs.texi(,99) Prints a summary of command-line options and then exits.
cmdargs.texi(,100) @end table
cmdargs.texi(,101) 
cmdargs.texi(,102) @subsection Command Line Arguments (Beginning of Line Only)
cmdargs.texi(,103)   The following arguments are recognized only at the beginning of the
cmdargs.texi(,104) command line.  If more than one of them appears, they must appear in the
cmdargs.texi(,105) order in which they appear in this table.
cmdargs.texi(,106) 
cmdargs.texi(,107) @table @samp
cmdargs.texi(,108) @item --show-dump-id
cmdargs.texi(,109) @itemx -sd
cmdargs.texi(,110) Print the ID for the new portable dumper's dump file on the terminal and
cmdargs.texi(,111) exit.  (Prints an error message and exits if XEmacs was not configured
cmdargs.texi(,112) @samp{--pdump}.)
cmdargs.texi(,113) 
cmdargs.texi(,114) @item --no-dump-file
cmdargs.texi(,115) @itemx -nd
cmdargs.texi(,116) Don't load the dump file.  Roughly equivalent to old temacs.  (Ignored if
cmdargs.texi(,117) XEmacs was not configured @samp{--pdump}.)
cmdargs.texi(,118) 
cmdargs.texi(,119) @item --terminal @var{file}
cmdargs.texi(,120) @itemx -t @var{file}
cmdargs.texi(,121) Use @var{file} instead of the terminal for input and output.  This
cmdargs.texi(,122) implies the @samp{-nw} option, documented below.
cmdargs.texi(,123) 
cmdargs.texi(,124) @cindex batch mode
cmdargs.texi(,125) @item -batch
cmdargs.texi(,126) Run Emacs in @dfn{batch mode}, which means that the text being edited is
cmdargs.texi(,127) not displayed and the standard Unix interrupt characters such as
cmdargs.texi(,128) @kbd{C-z} and @kbd{C-c} continue to have their normal effect.  Emacs in
cmdargs.texi(,129) batch mode outputs to @code{stderr} only what would normally be printed
cmdargs.texi(,130) in the echo area under program control.
cmdargs.texi(,131) 
cmdargs.texi(,132) Batch mode is used for running programs written in Emacs Lisp from shell
cmdargs.texi(,133) scripts, makefiles, and so on.  Normally the @samp{-l} switch or
cmdargs.texi(,134) @samp{-f} switch will be used as well, to invoke a Lisp program to do
cmdargs.texi(,135) the batch processing.
cmdargs.texi(,136) 
cmdargs.texi(,137) @samp{-batch} implies @samp{-q} (do not load an init file).  It also
cmdargs.texi(,138) causes Emacs to kill itself after all command switches have been
cmdargs.texi(,139) processed.  In addition, auto-saving is not done except in buffers for
cmdargs.texi(,140) which it has been explicitly requested.
cmdargs.texi(,141) 
cmdargs.texi(,142) @item --no-windows
cmdargs.texi(,143) @itemx -nw
cmdargs.texi(,144) Start up XEmacs in TTY mode (using the TTY XEmacs was started from),
cmdargs.texi(,145) rather than trying to connect to an X display.  Note that this happens
cmdargs.texi(,146) automatically if the @samp{DISPLAY} environment variable is not set.
cmdargs.texi(,147) 
cmdargs.texi(,148) @item -debug-init
cmdargs.texi(,149) Enter the debugger if an error in the init file occurs.
cmdargs.texi(,150) 
cmdargs.texi(,151) @item -debug-paths
cmdargs.texi(,152) Displays information on how XEmacs constructs the various paths into its
cmdargs.texi(,153) hierarchy on startup.  (See also @pxref{Startup Paths}.)
cmdargs.texi(,154) 
cmdargs.texi(,155) @item -unmapped
cmdargs.texi(,156) Do not map the initial frame.  This is useful if you want to start up
cmdargs.texi(,157) XEmacs as a server (e.g. for gnuserv screens or external client widgets).
cmdargs.texi(,158) 
cmdargs.texi(,159) @item -no-init-file
cmdargs.texi(,160) @itemx -q
cmdargs.texi(,161) Do not load your Emacs init file.  @xref{Init File}.
cmdargs.texi(,162) 
cmdargs.texi(,163) @item -no-site-file
cmdargs.texi(,164) Do not load the site-specific init file @file{lisp/site-start.el}.
cmdargs.texi(,165) 
cmdargs.texi(,166) @item -no-autoloads
cmdargs.texi(,167) Do not load global symbol files (@file{auto-autoloads}) at startup.
cmdargs.texi(,168) This implies @samp{-vanilla}. 
cmdargs.texi(,169) 
cmdargs.texi(,170) @item -no-early-packages
cmdargs.texi(,171) Do not process early packages.  (For more information on startup issues
cmdargs.texi(,172) concerning the package system, @xref{Startup Paths}.)
cmdargs.texi(,173) 
cmdargs.texi(,174) @item -vanilla
cmdargs.texi(,175) This is equivalent to @samp{-q -no-site-file -no-early-packages}.
cmdargs.texi(,176) 
cmdargs.texi(,177) @item -user-init-file @var{file}
cmdargs.texi(,178) Load @var{file} as your Emacs init file instead of
cmdargs.texi(,179) @file{~/.xemacs/init.el}/@file{~/.emacs}.
cmdargs.texi(,180) 
cmdargs.texi(,181) @item -user-init-directory @var{directory}
cmdargs.texi(,182) Use @var{directory} as the location of your early package hierarchies
cmdargs.texi(,183) and the various user-specific initialization files.
cmdargs.texi(,184) 
cmdargs.texi(,185) @item -user @var{user}
cmdargs.texi(,186) @itemx -u @var{user}
cmdargs.texi(,187) Equivalent to @samp{-user-init-file ~@var{user}/.xemacs/init.el
cmdargs.texi(,188) -user-init-directory ~@var{user}/.xemacs}, or @samp{-user-init-file
cmdargs.texi(,189) ~@var{user}/.emacs -user-init-directory ~@var{user}/.xemacs}, whichever
cmdargs.texi(,190) init file comes first.  @xref{Init File}.
cmdargs.texi(,191) 
cmdargs.texi(,192) @end table
cmdargs.texi(,193) 
cmdargs.texi(,194) @vindex command-line-args
cmdargs.texi(,195)   Note that the init file can get access to the command line argument
cmdargs.texi(,196) values as the elements of a list in the variable
cmdargs.texi(,197) @code{command-line-args}.  (The arguments in the second table above will
cmdargs.texi(,198) already have been processed and will not be in the list.)  The init file
cmdargs.texi(,199) can override the normal processing of the other arguments by setting
cmdargs.texi(,200) this variable.
cmdargs.texi(,201) 
cmdargs.texi(,202)   One way to use command switches is to visit many files automatically:
cmdargs.texi(,203) 
cmdargs.texi(,204) @example
cmdargs.texi(,205) xemacs *.c
cmdargs.texi(,206) @end example
cmdargs.texi(,207) 
cmdargs.texi(,208) @noindent
cmdargs.texi(,209) passes each @code{.c} file as a separate argument to Emacs, so that
cmdargs.texi(,210) Emacs visits each file (@pxref{Visiting}).
cmdargs.texi(,211) 
cmdargs.texi(,212)   Here is an advanced example that assumes you have a Lisp program file
cmdargs.texi(,213) called @file{hack-c-program.el} which, when loaded, performs some useful
cmdargs.texi(,214) operation on the current buffer, expected to be a C program.
cmdargs.texi(,215) 
cmdargs.texi(,216) @example
cmdargs.texi(,217) xemacs -batch foo.c -l hack-c-program -f save-buffer -kill > log
cmdargs.texi(,218) @end example
cmdargs.texi(,219) 
cmdargs.texi(,220) @noindent
cmdargs.texi(,221) Here Emacs is told to visit @file{foo.c}, load @file{hack-c-program.el}
cmdargs.texi(,222) (which makes changes in the visited file), save @file{foo.c} (note that
cmdargs.texi(,223) @code{save-buffer} is the function that @kbd{C-x C-s} is bound to), and
cmdargs.texi(,224) then exit to the shell from which the command was executed.  @samp{-batch}
cmdargs.texi(,225) guarantees there will be no problem redirecting output to @file{log},
cmdargs.texi(,226) because Emacs will not assume that it has a display terminal to work
cmdargs.texi(,227) with.
cmdargs.texi(,228) 
cmdargs.texi(,229) @subsection Command Line Arguments (for XEmacs Under X)
cmdargs.texi(,230) @vindex frame-title-format
cmdargs.texi(,231) @vindex frame-icon-title-format
cmdargs.texi(,232) If you are running XEmacs under X, a number of options are
cmdargs.texi(,233) available to control color, border, and window title and icon name:
cmdargs.texi(,234) 
cmdargs.texi(,235) @table @samp
cmdargs.texi(,236) @item -title @var{title}
cmdargs.texi(,237) @itemx -wn @var{title}
cmdargs.texi(,238) @itemx -T @var{title}
cmdargs.texi(,239) Use @var{title} as the window title. This sets the
cmdargs.texi(,240) @code{frame-title-format} variable, which controls the title of the X
cmdargs.texi(,241) window corresponding to the selected frame.  This is the same format as
cmdargs.texi(,242) @code{mode-line-format}.
cmdargs.texi(,243) 
cmdargs.texi(,244) @item -iconname @var{title}
cmdargs.texi(,245) @itemx -in @var{title}
cmdargs.texi(,246) Use @var{title} as the icon name. This sets the
cmdargs.texi(,247) @code{frame-icon-title-format} variable, which controls the title of
cmdargs.texi(,248) the icon corresponding to the selected frame.
cmdargs.texi(,249) 
cmdargs.texi(,250) @item -mc @var{color}
cmdargs.texi(,251) Use @var{color} as the mouse color.
cmdargs.texi(,252) 
cmdargs.texi(,253) @item -cr @var{color}
cmdargs.texi(,254) Use @var{color} as the text-cursor foreground color.
cmdargs.texi(,255) 
cmdargs.texi(,256) @item -private
cmdargs.texi(,257) Install a private colormap for XEmacs.
cmdargs.texi(,258) @end table
cmdargs.texi(,259) 
cmdargs.texi(,260) In addition, XEmacs allows you to use a number of standard Xt
cmdargs.texi(,261) command line arguments. 
cmdargs.texi(,262) 
cmdargs.texi(,263) @table @samp
cmdargs.texi(,264) 
cmdargs.texi(,265) @item -background @var{color}
cmdargs.texi(,266) @itemx -bg @var{color}
cmdargs.texi(,267) Use @var{color} as the background color.
cmdargs.texi(,268) 
cmdargs.texi(,269) @item -bordercolor @var{color}
cmdargs.texi(,270) @itemx -bd @var{color}
cmdargs.texi(,271) Use @var{color} as the border color.
cmdargs.texi(,272) 
cmdargs.texi(,273) @item -borderwidth @var{width}
cmdargs.texi(,274) @itemx -bw @var{width}
cmdargs.texi(,275) Use @var{width} as the border width.
cmdargs.texi(,276) 
cmdargs.texi(,277) @item -display @var{display}
cmdargs.texi(,278) @itemx -d @var{display}
cmdargs.texi(,279) When running under the X window system, create the window containing the
cmdargs.texi(,280) Emacs frame on the display named @var{display}.
cmdargs.texi(,281) 
cmdargs.texi(,282) @item -foreground @var{color}
cmdargs.texi(,283) @itemx -fg @var{color}
cmdargs.texi(,284) Use @var{color} as the foreground color.
cmdargs.texi(,285) 
cmdargs.texi(,286) @item -font @var{name}
cmdargs.texi(,287) @itemx -fn @var{name}
cmdargs.texi(,288) Use @var{name} as the default font.
cmdargs.texi(,289) 
cmdargs.texi(,290) @item -geometry @var{spec}
cmdargs.texi(,291) @itemx -geom @var{spec}
cmdargs.texi(,292) @itemx -g @var{spec}
cmdargs.texi(,293) Use the geometry (window size and/or position) specified by @var{spec}.
cmdargs.texi(,294) 
cmdargs.texi(,295) @item -iconic
cmdargs.texi(,296) Start up iconified.
cmdargs.texi(,297) 
cmdargs.texi(,298) @item -rv
cmdargs.texi(,299) Bring up Emacs in reverse video.
cmdargs.texi(,300) 
cmdargs.texi(,301) @item -name @var{name}
cmdargs.texi(,302) Use the resource manager resources specified by @var{name}.
cmdargs.texi(,303) The default is to use the name of the program (@code{argv[0]}) as
cmdargs.texi(,304) the resource manager name.
cmdargs.texi(,305) 
cmdargs.texi(,306) @item -xrm
cmdargs.texi(,307) Read something into the resource database for this invocation of Emacs only.
cmdargs.texi(,308) 
cmdargs.texi(,309) @end table
startup.texi(,1) @node Startup Paths, Packages, Command Switches, Top
startup.texi(,2) @comment  node-name,  next,  previous,  up
startup.texi(,3) @section How XEmacs finds Directories and Files
startup.texi(,4) 
startup.texi(,5) @cindex startup paths
startup.texi(,6) @cindex directories
startup.texi(,7) 
startup.texi(,8) XEmacs deals with a multitude of files during operation.  These files
startup.texi(,9) are spread over many directories, and XEmacs determines the location of
startup.texi(,10) most of these directories at startup and organizes them into various
startup.texi(,11) paths.  (A @dfn{path},
startup.texi(,12) @cindex path
startup.texi(,13) for the purposes of this section, is simply a list of directories which
startup.texi(,14) XEmacs searches successively in order to locate a file.)
startup.texi(,15) 
startup.texi(,16) @subsection XEmacs Directory Hierarchies
startup.texi(,17) @cindex hierarchies
startup.texi(,18) @cindex directory hierarchies
startup.texi(,19) 
startup.texi(,20) Many of the files XEmacs looks for are located within the XEmacs
startup.texi(,21) installation itself.  However, there are several views of what actually
startup.texi(,22) constitutes the "XEmacs installation": XEmacs may be run from the
startup.texi(,23) compilation directory, it may be installed into arbitrary directories,
startup.texi(,24) spread over several directories unrelated to each other.  Moreover, it
startup.texi(,25) may subsequently be moved to a different place.  (This last case is not
startup.texi(,26) as uncommon as it sounds.  Binary kits work this way.)  Consequently,
startup.texi(,27) XEmacs has quite complex procedures in place to find directories, no
startup.texi(,28) matter where they may be hidden.
startup.texi(,29) 
startup.texi(,30) XEmacs will always respect directory options passed to @code{configure}.
startup.texi(,31) However, if it cannot locate a directory at the configured place, it
startup.texi(,32) will initiate a search for the directory in any of a number of
startup.texi(,33) @dfn{hierarchies} rooted under a directory which XEmacs assumes contain
startup.texi(,34) parts of the XEmacs installation; it may locate several such hierarchies
startup.texi(,35) and search across them.  (Typically, there are just one or two
startup.texi(,36) hierarchies: the hierarchy where XEmacs was or will be installed, and
startup.texi(,37) the one where it is being built.)  Such a directory containing a
startup.texi(,38) hierarchy is called a @dfn{root}.
startup.texi(,39) @cindex root of a hierarchy
startup.texi(,40) Whenever this section refers to a directory using the shorthand
startup.texi(,41) @code{<root>}, it means that XEmacs searches for it under all
startup.texi(,42) hierarchies XEmacs was able to scrounge up.  In a
startup.texi(,43) running XEmacs, the hierarchy roots are stored in the variable
startup.texi(,44) @code{emacs-roots}.
startup.texi(,45) @vindex emacs-roots
startup.texi(,46) 
startup.texi(,47) @subsection Package Hierarchies
startup.texi(,48) @cindex package hierarchies
startup.texi(,49) 
startup.texi(,50) Many relevant directories and files XEmacs uses are actually not part of
startup.texi(,51) the core installation.  They are part of any of the many packages
startup.texi(,52) usually installed on top of an XEmacs installation.  (@xref{Packages}.)
startup.texi(,53) Hence, they play a prominent role in the various paths XEmacs sets up.
startup.texi(,54) 
startup.texi(,55) XEmacs locates packages in any of a number of package hierarchies.
startup.texi(,56) Package hierarchies fall into three groups: @dfn{early}, @dfn{late},
startup.texi(,57) and @dfn{last},
startup.texi(,58) @cindex early package hierarchies
startup.texi(,59) @cindex late package hierarchies
startup.texi(,60) @cindex last package hierarchies
startup.texi(,61) according to the relative location at which they show
startup.texi(,62) up in the various XEmacs paths.  Early package hierarchies are at the
startup.texi(,63) very front, late ones somewhere in the middle, and last hierarchies are
startup.texi(,64) (you guessed it) last.
startup.texi(,65) 
startup.texi(,66) By default, XEmacs expects an early package hierarchy in the
startup.texi(,67) subdirectory @file{.xemacs/xemacs-packages} of the user's home
startup.texi(,68) directory.
startup.texi(,69) 
startup.texi(,70) Moreover, XEmacs expects late hierarchies in the subdirectories
startup.texi(,71) @file{site-packages}, @file{mule-packages}, and @file{xemacs-packages}
startup.texi(,72) (in that order) of the @file{<root>/lib/xemacs} subdirectory of one of
startup.texi(,73) the installation hierarchies.  (If you run in-place, these are direct
startup.texi(,74) subdirectories of the build directory.)  Furthermore, XEmacs will also
startup.texi(,75) search these subdirectories in the @file{<root>/lib/xemacs-<VERSION>}
startup.texi(,76) subdirectory and prefer directories found there.
startup.texi(,77) 
startup.texi(,78) By default, XEmacs does not have a pre-configured last package
startup.texi(,79) hierarchy.  Last hierarchies are primarily for using package hierarchies
startup.texi(,80) of outdated versions of XEmacs as a fallback option.  For example, it is
startup.texi(,81) possible to run XEmacs 21 with the 20.4 package hierarchy as a last
startup.texi(,82) hierarchy.
startup.texi(,83) 
startup.texi(,84) It is possible to specify at configure-time the location of the various
startup.texi(,85) package hierarchies with the @code{--package-path} option to configure.
startup.texi(,86) @cindex package path
startup.texi(,87) The early, late, and last components of the package path are separated
startup.texi(,88) by double instead of single colons.  If all three components are
startup.texi(,89) present, they locate the early, late, and last package hierarchies
startup.texi(,90) respectively.  If two components are present, they locate the early and
startup.texi(,91) late hierarchies.  If only one component is present, it locates the
startup.texi(,92) late hierarchy.  At run time, the package path may also be specified via
startup.texi(,93) the @code{EMACSPACKAGEPATH} environment variable.
startup.texi(,94) 
startup.texi(,95) An XEmacs package is laid out just like a normal installed XEmacs lisp
startup.texi(,96) directory.  It may have @file{lisp}, @file{etc}, @file{info}, and
startup.texi(,97) @file{lib-src} subdirectories.  XEmacs adds these at appropriate places
startup.texi(,98) within the various system-wide paths.
startup.texi(,99) 
startup.texi(,100) There may be any number of package hierarchy directories.
startup.texi(,101) 
startup.texi(,102) @subsection Directories and Paths
startup.texi(,103) @cindex paths
startup.texi(,104) 
startup.texi(,105) Here is a list of the various directories and paths XEmacs tries to
startup.texi(,106) locate during startup.  XEmacs distinguishes between directories and
startup.texi(,107) paths specific to @dfn{version}, @dfn{site}, and @dfn{architecture}
startup.texi(,108) when looking for them.
startup.texi(,109) 
startup.texi(,110) @table @code
startup.texi(,111) @item version-specific
startup.texi(,112) @cindex version-specific directories
startup.texi(,113) directories are specific to the version of XEmacs they belong to and
startup.texi(,114) typically reside under @file{<root>/lib/xemacs-<VERSION>}.
startup.texi(,115) @item site-specific
startup.texi(,116) @cindex site-specific directories
startup.texi(,117) directories are independent of the version of XEmacs they belong to and
startup.texi(,118) typically reside under @file{<root>/lib/xemacs}
startup.texi(,119) @item architecture-specific
startup.texi(,120) @cindex architecture-specific directories
startup.texi(,121) directories are specific both to the version of XEmacs and the
startup.texi(,122) architecture it runs on and typically reside under
startup.texi(,123) @file{<root>/lib/xemacs-<VERSION>/<ARCHITECTURE>}.
startup.texi(,124) @end table
startup.texi(,125) 
startup.texi(,126) During installation, all of these directories may also reside directly
startup.texi(,127) under @file{<root>}, because that is where they are in the XEmacs tarball.
startup.texi(,128) 
startup.texi(,129) If XEmacs runs with the @code{-debug-paths} option (@pxref{Command
startup.texi(,130) Switches}), it will print the values of these variables, hopefully
startup.texi(,131) aiding in debugging any problems which come up.
startup.texi(,132) 
startup.texi(,133) @table @code
startup.texi(,134) 
startup.texi(,135) @item lisp-directory
startup.texi(,136) @vindex lisp-directory
startup.texi(,137) Contains the version-specific location of the Lisp files that come with
startup.texi(,138) the core distribution of XEmacs.  XEmacs will search it recursively to a
startup.texi(,139) depth of 1 when setting up @code{load-path}.
startup.texi(,140) 
startup.texi(,141) @item load-path
startup.texi(,142) @vindex load-path
startup.texi(,143) Is where XEmacs searches for XEmacs Lisp files with commands like
startup.texi(,144) @code{load-library}.
startup.texi(,145) @findex load-library
startup.texi(,146) It contains the package lisp directories (see further down) and the
startup.texi(,147) version-specific core Lisp directories.  If the environment variable
startup.texi(,148) @code{EMACSLOADPATH} is set at startup, its directories are prepended to
startup.texi(,149) @code{load-path}.
startup.texi(,150) @vindex EMACSLOADPATH
startup.texi(,151) 
startup.texi(,152) @item Info-directory-list
startup.texi(,153) @vindex Info-directory-list
startup.texi(,154) Contains the location of info files.  (See @ref{(info)}.)  It contains
startup.texi(,155) the package info directories and the version-specific core
startup.texi(,156) documentation.  Moreover, XEmacs will add @file{/usr/info},
startup.texi(,157) @file{/usr/local/info} as well as the directories of the environment
startup.texi(,158) variable @code{INFOPATH}
startup.texi(,159) @vindex INFOPATH
startup.texi(,160) to @code{Info-directory-list}.
startup.texi(,161) 
startup.texi(,162) @item exec-directory
startup.texi(,163) @vindex exec-directory
startup.texi(,164) Is the directory of architecture-dependent files that come with XEmacs,
startup.texi(,165) especially executable programs intended for XEmacs to invoke.
startup.texi(,166) 
startup.texi(,167) @item exec-path
startup.texi(,168) @vindex exec-path
startup.texi(,169) Is the path for executables which XEmacs may want to start.  It contains
startup.texi(,170) the package executable paths as well as @code{exec-directory}, and the
startup.texi(,171) directories of the environment variables @code{PATH}
startup.texi(,172) @vindex PATH
startup.texi(,173) and @code{EMACSPATH}.
startup.texi(,174) @vindex EMACSPATH
startup.texi(,175) 
startup.texi(,176) @item doc-directory
startup.texi(,177) @vindex doc-directory
startup.texi(,178) Is the directory containing the architecture-specific @file{DOC} file
startup.texi(,179) that contains documentation for XEmacs' commands.
startup.texi(,180) 
startup.texi(,181) @item data-directory
startup.texi(,182) @vindex data-directory
startup.texi(,183) Is the version-specific directory that contains core data files XEmacs uses.
startup.texi(,184) It may be initialized from the @code{EMACSDATA}
startup.texi(,185) @vindex EMACSDATA
startup.texi(,186) environment variable.
startup.texi(,187) 
startup.texi(,188) @item data-directory-list
startup.texi(,189) @vindex data-directory-list
startup.texi(,190) Is the path where XEmacs looks for data files.  It contains package data
startup.texi(,191) directories as well as @code{data-directory}.
startup.texi(,192) 
startup.texi(,193) @end table
startup.texi(,194) 
startup.texi(,195) 
basic.texi(,1) @c This is part of the XEmacs manual.
basic.texi(,2) @c Copyright (C) 1985, 86, 87, 93, 94, 95, 1997 Free Software Foundation, Inc.
basic.texi(,3) @c See file xemacs.texi for copying conditions.
basic.texi(,4) @node Basic, Undo, Packages, Top
basic.texi(,5) @chapter Basic Editing Commands
basic.texi(,6) 
basic.texi(,7) @kindex C-h t
basic.texi(,8) @findex help-with-tutorial
basic.texi(,9)   We now give the basics of how to enter text, make corrections, and
basic.texi(,10) save the text in a file.  If this material is new to you, you might
basic.texi(,11) learn it more easily by running the Emacs learn-by-doing tutorial.  To
basic.texi(,12) use the tutorial, run Emacs and type @kbd{Control-h t}
basic.texi(,13) (@code{help-with-tutorial}).  You can also use @b{Tutorials} item from
basic.texi(,14) the @b{Help} menu.
basic.texi(,15) 
basic.texi(,16) XEmacs comes with many translations of tutorial.  If your XEmacs is with
basic.texi(,17) MULE and you set up language environment correctly, XEmacs chooses right
basic.texi(,18) tutorial when available (@pxref{Language Environments}).  If you want
basic.texi(,19) specific translation, give @kbd{C-h t} a prefix argument, like @kbd{C-u
basic.texi(,20) C-h t}.
basic.texi(,21) 
basic.texi(,22)   To clear the screen and redisplay, type @kbd{C-l} (@code{recenter}).
basic.texi(,23) 
basic.texi(,24) @menu
basic.texi(,25) 
basic.texi(,26) * Inserting Text::      Inserting text by simply typing it.
basic.texi(,27) * Moving Point::        How to move the cursor to the place where you want to
basic.texi(,28) 			  change something.
basic.texi(,29) * Erasing::	        Deleting and killing text.
basic.texi(,30) * Files: Basic Files.   Visiting, creating, and saving files.
basic.texi(,31) * Help: Basic Help.     Asking what a character does.
basic.texi(,32) * Blank Lines::	        Commands to make or delete blank lines.
basic.texi(,33) * Continuation Lines::  Lines too wide for the screen.
basic.texi(,34) * Position Info::       What page, line, row, or column is point on?
basic.texi(,35) * Arguments::	        Numeric arguments for repeating a command.
basic.texi(,36) @c * Repeating::           A short-cut for repeating the previous command.
basic.texi(,37) @end menu
basic.texi(,38) 
basic.texi(,39) @node Inserting Text, Moving Point, , Basic
basic.texi(,40) @section Inserting Text
basic.texi(,41) 
basic.texi(,42) @cindex insertion
basic.texi(,43) @cindex point
basic.texi(,44) @cindex cursor
basic.texi(,45) @cindex graphic characters
basic.texi(,46)   To insert printing characters into the text you are editing, just type
basic.texi(,47) them.  This inserts the characters you type into the buffer at the
basic.texi(,48) cursor (that is, at @dfn{point}; @pxref{Point}).  The cursor moves
basic.texi(,49) forward, and any text after the cursor moves forward too.  If the text
basic.texi(,50) in the buffer is @samp{FOOBAR}, with the cursor before the @samp{B},
basic.texi(,51) then if you type @kbd{XX}, you get @samp{FOOXXBAR}, with the cursor
basic.texi(,52) still before the @samp{B}.
basic.texi(,53) 
basic.texi(,54) @kindex BS
basic.texi(,55) @cindex deletion
basic.texi(,56)    To @dfn{delete} text you have just inserted, use @key{BS}.  @key{BS}
basic.texi(,57) deletes the character @emph{before} the cursor (not the one that the
basic.texi(,58) cursor is on top of or under; that is the character @var{after} the
basic.texi(,59) cursor).  The cursor and all characters after it move backwards.
basic.texi(,60) Therefore, if you type a printing character and then type @key{BS}, they
basic.texi(,61) cancel out.
basic.texi(,62) 
basic.texi(,63) @kindex RET
basic.texi(,64) @cindex newline
basic.texi(,65)    To end a line and start typing a new one, type @key{RET}.  This
basic.texi(,66) inserts a newline character in the buffer.  If point is in the middle of
basic.texi(,67) a line, @key{RET} splits the line.  Typing @key{DEL} when the cursor is
basic.texi(,68) at the beginning of a line deletes the preceding newline, thus joining
basic.texi(,69) the line with the preceding line.
basic.texi(,70) 
basic.texi(,71)   Emacs can split lines automatically when they become too long, if you
basic.texi(,72) turn on a special minor mode called @dfn{Auto Fill} mode.
basic.texi(,73) @xref{Filling}, for how to use Auto Fill mode.
basic.texi(,74) 
basic.texi(,75)   If you prefer to have text characters replace (overwrite) existing
basic.texi(,76) text rather than shove it to the right, you can enable Overwrite mode,
basic.texi(,77) a minor mode.  @xref{Minor Modes}.
basic.texi(,78) 
basic.texi(,79) @cindex quoting
basic.texi(,80) @kindex C-q
basic.texi(,81) @findex quoted-insert
basic.texi(,82)   Direct insertion works for printing characters and @key{SPC}, but other
basic.texi(,83) characters act as editing commands and do not insert themselves.  If you
basic.texi(,84) need to insert a control character or a character whose code is above 200
basic.texi(,85) octal, you must @dfn{quote} it by typing the character @kbd{Control-q}
basic.texi(,86) (@code{quoted-insert}) first.  (This character's name is normally written
basic.texi(,87) @kbd{C-q} for short.)  There are two ways to use @kbd{C-q}:
basic.texi(,88) 
basic.texi(,89) @itemize @bullet
basic.texi(,90) @item
basic.texi(,91) @kbd{C-q} followed by any non-graphic character (even @kbd{C-g})
basic.texi(,92) inserts that character.
basic.texi(,93) 
basic.texi(,94) @item
basic.texi(,95) @kbd{C-q} followed by a sequence of octal digits inserts the character
basic.texi(,96) with the specified octal character code.  You can use any number of
basic.texi(,97) octal digits; any non-digit terminates the sequence.  If the terminating
basic.texi(,98) character is @key{RET}, it serves only to terminate the sequence; any
basic.texi(,99) other non-digit is itself used as input after terminating the sequence.
basic.texi(,100) (The use of octal sequences is disabled in ordinary non-binary Overwrite
basic.texi(,101) mode, to give you a convenient way to insert a digit instead of
basic.texi(,102) overwriting with it.)
basic.texi(,103) @end itemize
basic.texi(,104) 
basic.texi(,105) @noindent
basic.texi(,106) A numeric argument to @kbd{C-q} specifies how many copies of the quoted
basic.texi(,107) character should be inserted (@pxref{Arguments}).
basic.texi(,108) 
basic.texi(,109) @findex backward-or-forward-delete-char
basic.texi(,110) @findex newline
basic.texi(,111) @findex self-insert
basic.texi(,112)   Customization information: @key{DEL}, in most modes, runs the command
basic.texi(,113) @code{backward-or-forward-delete-char}; @key{RET} runs the command
basic.texi(,114) @code{newline}, and self-inserting printing characters run the command
basic.texi(,115) @code{self-insert}, which inserts whatever character was typed to invoke
basic.texi(,116) it.  Some major modes rebind @key{DEL} to other commands.
basic.texi(,117) 
basic.texi(,118) @node Moving Point, Erasing, Inserting Text, Basic
basic.texi(,119) @section Changing the Location of Point
basic.texi(,120) 
basic.texi(,121) @cindex arrow keys
basic.texi(,122) @kindex LEFT
basic.texi(,123) @kindex RIGHT
basic.texi(,124) @kindex UP
basic.texi(,125) @kindex DOWN
basic.texi(,126) @cindex moving point
basic.texi(,127) @cindex movement
basic.texi(,128) @cindex cursor motion
basic.texi(,129) @cindex moving the cursor
basic.texi(,130)   To do more than insert characters, you have to know how to move point
basic.texi(,131) (@pxref{Point}).  The simplest way to do this is with arrow keys, or by
basic.texi(,132) clicking the left mouse button where you want to move to.
basic.texi(,133) 
basic.texi(,134)   NOTE: Many of the following commands have two versions, one that uses
basic.texi(,135) the function keys (e.g. @key{LEFT} or @key{END}) and one that doesn't.
basic.texi(,136) The former versions may only be available on X terminals (i.e. not on
basic.texi(,137) TTY's), but the latter are available on all terminals.
basic.texi(,138) 
basic.texi(,139) @kindex C-a
basic.texi(,140) @kindex C-e
basic.texi(,141) @kindex C-f
basic.texi(,142) @kindex C-b
basic.texi(,143) @kindex C-n
basic.texi(,144) @kindex C-p
basic.texi(,145) @kindex C-l
basic.texi(,146) @kindex C-t
basic.texi(,147) @kindex C-v
basic.texi(,148) @kindex M-v
basic.texi(,149) @kindex M->
basic.texi(,150) @kindex M-<
basic.texi(,151) @kindex M-r
basic.texi(,152) @kindex LEFT
basic.texi(,153) @kindex RIGHT
basic.texi(,154) @kindex UP
basic.texi(,155) @kindex DOWN
basic.texi(,156) @kindex HOME
basic.texi(,157) @kindex END
basic.texi(,158) @kindex PGUP
basic.texi(,159) @kindex PGDN
basic.texi(,160) @kindex C-LEFT
basic.texi(,161) @kindex C-RIGHT
basic.texi(,162) @kindex C-HOME
basic.texi(,163) @kindex C-END
basic.texi(,164) @findex beginning-of-line
basic.texi(,165) @findex end-of-line
basic.texi(,166) @findex forward-char
basic.texi(,167) @findex backward-char
basic.texi(,168) @findex next-line
basic.texi(,169) @findex previous-line
basic.texi(,170) @findex recenter
basic.texi(,171) @findex transpose-chars
basic.texi(,172) @findex beginning-of-buffer
basic.texi(,173) @findex end-of-buffer
basic.texi(,174) @findex goto-char
basic.texi(,175) @findex goto-line
basic.texi(,176) @findex move-to-window-line
basic.texi(,177) @table @kbd
basic.texi(,178) @item C-a
basic.texi(,179) @itemx HOME
basic.texi(,180) Move to the beginning of the line (@code{beginning-of-line}).
basic.texi(,181) @item C-e
basic.texi(,182) @itemx END
basic.texi(,183) Move to the end of the line (@code{end-of-line}).
basic.texi(,184) @item C-f
basic.texi(,185) @itemx RIGHT
basic.texi(,186) Move forward one character (@code{forward-char}).
basic.texi(,187) @item C-b
basic.texi(,188) @itemx LEFT
basic.texi(,189) Move backward one character (@code{backward-char}).
basic.texi(,190) @item M-f
basic.texi(,191) @itemx C-RIGHT
basic.texi(,192) Move forward one word (@code{forward-word}).
basic.texi(,193) @item M-b
basic.texi(,194) @itemx C-LEFT
basic.texi(,195) Move backward one word (@code{backward-word}).
basic.texi(,196) @item C-n
basic.texi(,197) @itemx DOWN
basic.texi(,198) Move down one line, vertically (@code{next-line}).  This command
basic.texi(,199) attempts to keep the horizontal position unchanged, so if you start in
basic.texi(,200) the middle of one line, you end in the middle of the next.  When on the
basic.texi(,201) last line of text, @kbd{C-n} creates a new line and moves onto it.
basic.texi(,202) @item C-p
basic.texi(,203) @itemx UP
basic.texi(,204) Move up one line, vertically (@code{previous-line}).
basic.texi(,205) @item C-v
basic.texi(,206) @itemx PGDN
basic.texi(,207) Move down one page, vertically (@code{scroll-up}).
basic.texi(,208) @item M-v
basic.texi(,209) @itemx PGUP
basic.texi(,210) Move up one page, vertically (@code{scroll-down}).
basic.texi(,211) @item C-l
basic.texi(,212) Clear the frame and reprint everything (@code{recenter}).  Text moves
basic.texi(,213) on the frame to bring point to the center of the window.
basic.texi(,214) @item M-r
basic.texi(,215) Move point to left margin, vertically centered in the window
basic.texi(,216) (@code{move-to-window-line}).  Text does not move on the screen.
basic.texi(,217) 
basic.texi(,218) A numeric argument says which screen line to place point on.  It counts
basic.texi(,219) screen lines down from the top of the window (zero for the top line).  A
basic.texi(,220) negative argument counts lines from the bottom (@minus{}1 for the bottom
basic.texi(,221) line).
basic.texi(,222) @item C-t
basic.texi(,223) Transpose two characters, the ones before and after the cursor
basic.texi(,224) (@code{transpose-chars}).
basic.texi(,225) @item M-<
basic.texi(,226) @itemx C-HOME
basic.texi(,227) Move to the top of the buffer (@code{beginning-of-buffer}).  With
basic.texi(,228) numeric argument @var{n}, move to @var{n}/10 of the way from the top.
basic.texi(,229) @xref{Arguments}, for more information on numeric arguments.@refill
basic.texi(,230) @item M->
basic.texi(,231) @itemx C-END
basic.texi(,232) Move to the end of the buffer (@code{end-of-buffer}).
basic.texi(,233) @item M-x goto-char
basic.texi(,234) Read a number @var{n} and move point to buffer position @var{n}.
basic.texi(,235) Position 1 is the beginning of the buffer.
basic.texi(,236) @item M-g
basic.texi(,237) Read a number @var{n} and move point to line number @var{n}
basic.texi(,238) (@code{goto-line}).  Line 1 is the beginning of the buffer.
basic.texi(,239) @c @item C-x C-n
basic.texi(,240) @item M-x set-goal-column
basic.texi(,241) @findex set-goal-column
basic.texi(,242) Use the current column of point as the @dfn{semi-permanent goal column} for
basic.texi(,243) @kbd{C-n} and @kbd{C-p} (@code{set-goal-column}).  Henceforth, those
basic.texi(,244) commands always move to this column in each line moved into, or as
basic.texi(,245) close as possible given the contents of the line.  This goal column remains
basic.texi(,246) in effect until canceled.
basic.texi(,247) @c @item C-u C-x C-n
basic.texi(,248) @item C-u M-x set-goal-column
basic.texi(,249) Cancel the goal column.  Henceforth, @kbd{C-n} and @kbd{C-p} once
basic.texi(,250) again try to avoid changing the horizontal position, as usual.
basic.texi(,251) @end table
basic.texi(,252) 
basic.texi(,253) @vindex track-eol
basic.texi(,254)   If you set the variable @code{track-eol} to a non-@code{nil} value,
basic.texi(,255) then @kbd{C-n} and @kbd{C-p} when at the end of the starting line move
basic.texi(,256) to the end of another line.  Normally, @code{track-eol} is @code{nil}.
basic.texi(,257) @xref{Variables}, for how to set variables such as @code{track-eol}.
basic.texi(,258) 
basic.texi(,259) @vindex next-line-add-newlines
basic.texi(,260)   Normally, @kbd{C-n} on the last line of a buffer appends a newline to
basic.texi(,261) it.  If the variable @code{next-line-add-newlines} is @code{nil}, then
basic.texi(,262) @kbd{C-n} gets an error instead (like @kbd{C-p} on the first line).
basic.texi(,263) 
basic.texi(,264) @node Erasing, Basic Files, Moving Point, Basic
basic.texi(,265) @section Erasing Text
basic.texi(,266) 
basic.texi(,267) @table @kbd
basic.texi(,268) @item @key{DEL}
basic.texi(,269) Delete the character before or after point
basic.texi(,270) (@code{backward-or-forward-delete-char}).  You can customize
basic.texi(,271) this behavior by setting the variable @code{delete-key-deletes-forward}.
basic.texi(,272) @item C-d
basic.texi(,273) Delete the character after point (@code{delete-char}).
basic.texi(,274) @item C-k
basic.texi(,275) Kill to the end of the line (@code{kill-line}).
basic.texi(,276) @item M-d
basic.texi(,277) Kill forward to the end of the next word (@code{kill-word}).
basic.texi(,278) @item M-@key{DEL}
basic.texi(,279) Kill back to the beginning of the previous word
basic.texi(,280) (@code{backward-kill-word}).
basic.texi(,281) @end table
basic.texi(,282) 
basic.texi(,283) @cindex killing characters and lines
basic.texi(,284) @cindex deleting characters and lines
basic.texi(,285) @cindex erasing characters and lines
basic.texi(,286)   You already know about the @key{DEL} key which deletes the character
basic.texi(,287) before point (that is, before the cursor).  Another key, @kbd{Control-d}
basic.texi(,288) (@kbd{C-d} for short), deletes the character after point (that is, the
basic.texi(,289) character that the cursor is on).  This shifts the rest of the text on
basic.texi(,290) the line to the left.  If you type @kbd{C-d} at the end of a line, it
basic.texi(,291) joins together that line and the next line.
basic.texi(,292) 
basic.texi(,293)   To erase a larger amount of text, use the @kbd{C-k} key, which kills a
basic.texi(,294) line at a time.  If you type @kbd{C-k} at the beginning or middle of a
basic.texi(,295) line, it kills all the text up to the end of the line.  If you type
basic.texi(,296) @kbd{C-k} at the end of a line, it joins that line and the next line.
basic.texi(,297) 
basic.texi(,298)   @xref{Killing}, for more flexible ways of killing text.
basic.texi(,299) 
basic.texi(,300) @node Basic Files, Basic Help, Erasing, Basic
basic.texi(,301) @section Files
basic.texi(,302) 
basic.texi(,303) @cindex files
basic.texi(,304)   The commands described above are sufficient for creating and altering
basic.texi(,305) text in an Emacs buffer; the more advanced Emacs commands just make
basic.texi(,306) things easier.  But to keep any text permanently you must put it in a
basic.texi(,307) @dfn{file}.  Files are named units of text which are stored by the
basic.texi(,308) operating system for you to retrieve later by name.  To look at or use
basic.texi(,309) the contents of a file in any way, including editing the file with
basic.texi(,310) Emacs, you must specify the file name.
basic.texi(,311) 
basic.texi(,312)   Consider a file named @file{/usr/rms/foo.c}.  To begin editing
basic.texi(,313) this file from Emacs, type:
basic.texi(,314) 
basic.texi(,315) @example
basic.texi(,316) C-x C-f /usr/rms/foo.c @key{RET}
basic.texi(,317) @end example
basic.texi(,318) 
basic.texi(,319) @noindent
basic.texi(,320) Here the file name is given as an @dfn{argument} to the command @kbd{C-x
basic.texi(,321) C-f} (@code{find-file}).  That command uses the @dfn{minibuffer} to
basic.texi(,322) read the argument, and you type @key{RET} to terminate the argument
basic.texi(,323) (@pxref{Minibuffer}).
basic.texi(,324) 
basic.texi(,325)   You can also use the @b{Open...} menu item from the @b{File} menu, then
basic.texi(,326) type the name of the file to the prompt.
basic.texi(,327) 
basic.texi(,328)   Emacs obeys the command by @dfn{visiting} the file: creating a buffer,
basic.texi(,329) copying the contents of the file into the buffer, and then displaying
basic.texi(,330) the buffer for you to edit.  If you alter the text, you can @dfn{save}
basic.texi(,331) the new text in the file by typing @kbd{C-x C-s} (@code{save-buffer}) or
basic.texi(,332) choosing @b{Save Buffer} from the @b{File} menu.  This makes the changes
basic.texi(,333) permanent by copying the altered buffer contents back into the file
basic.texi(,334) @file{/usr/rms/foo.c}.  Until you save, the changes exist only inside
basic.texi(,335) Emacs, and the file @file{foo.c} is unaltered.
basic.texi(,336) 
basic.texi(,337)   To create a file, visit the file with @kbd{C-x C-f} as if it already
basic.texi(,338) existed or choose @b{Open...} from the @b{File} menu and provide the
basic.texi(,339) name for the new file.  Emacs will create an empty buffer in which you
basic.texi(,340) can insert the text you want to put in the file.  When you save the
basic.texi(,341) buffer with @kbd{C-x C-s}, or by choosing @b{Save Buffer} from the
basic.texi(,342) @b{File} menu, the file is created.
basic.texi(,343) 
basic.texi(,344)   To learn more about using files, @xref{Files}.
basic.texi(,345) 
basic.texi(,346) @node Basic Help, Blank Lines, Basic Files, Basic
basic.texi(,347) @section Help
basic.texi(,348) 
basic.texi(,349) @cindex getting help with keys
basic.texi(,350)   If you forget what a key does, you can find out with the Help
basic.texi(,351) character, which is @kbd{C-h} (or @key{F1}, which is an alias for
basic.texi(,352) @kbd{C-h}).  Type @kbd{C-h k} followed by the key you want to know
basic.texi(,353) about; for example, @kbd{C-h k C-n} tells you all about what @kbd{C-n}
basic.texi(,354) does.  @kbd{C-h} is a prefix key; @kbd{C-h k} is just one of its
basic.texi(,355) subcommands (the command @code{describe-key}).  The other subcommands of
basic.texi(,356) @kbd{C-h} provide different kinds of help.  Type @kbd{C-h} twice to get
basic.texi(,357) a description of all the help facilities.  @xref{Help}.
basic.texi(,358) 
basic.texi(,359) @node Blank Lines, Continuation Lines, Basic Help, Basic
basic.texi(,360) @section Blank Lines
basic.texi(,361) 
basic.texi(,362) @cindex inserting blank lines
basic.texi(,363) @cindex deleting blank lines
basic.texi(,364)   Here are special commands and techniques for putting in and taking out
basic.texi(,365) blank lines.
basic.texi(,366) 
basic.texi(,367) @c widecommands
basic.texi(,368) @table @kbd
basic.texi(,369) @item C-o
basic.texi(,370) Insert one or more blank lines after the cursor (@code{open-line}).
basic.texi(,371) @item C-x C-o
basic.texi(,372) Delete all but one of many consecutive blank lines
basic.texi(,373) (@code{delete-blank-lines}).
basic.texi(,374) @end table
basic.texi(,375) 
basic.texi(,376) @kindex C-o
basic.texi(,377) @kindex C-x C-o
basic.texi(,378) @cindex blank lines
basic.texi(,379) @findex open-line
basic.texi(,380) @findex delete-blank-lines
basic.texi(,381)   When you want to insert a new line of text before an existing line, you
basic.texi(,382) can do it by typing the new line of text, followed by @key{RET}.
basic.texi(,383) However, it may be easier to see what you are doing if you first make a
basic.texi(,384) blank line and then insert the desired text into it.  This is easy to do
basic.texi(,385) using the key @kbd{C-o} (@code{open-line}), which inserts a newline
basic.texi(,386) after point but leaves point in front of the newline.  After @kbd{C-o},
basic.texi(,387) type the text for the new line.  @kbd{C-o F O O} has the same effect as
basic.texi(,388) @w{@kbd{F O O @key{RET}}}, except for the final location of point.
basic.texi(,389) 
basic.texi(,390)   You can make several blank lines by typing @kbd{C-o} several times, or
basic.texi(,391) by giving it a numeric argument to tell it how many blank lines to make.
basic.texi(,392) @xref{Arguments}, for how.  If you have a fill prefix, then @kbd{C-o}
basic.texi(,393) command inserts the fill prefix on the new line, when you use it at the
basic.texi(,394) beginning of a line.  @xref{Fill Prefix}.
basic.texi(,395) 
basic.texi(,396)   The easy way to get rid of extra blank lines is with the command
basic.texi(,397) @kbd{C-x C-o} (@code{delete-blank-lines}).  @kbd{C-x C-o} in a run of
basic.texi(,398) several blank lines deletes all but one of them.  @kbd{C-x C-o} on a
basic.texi(,399) solitary blank line deletes that blank line.  When point is on a
basic.texi(,400) nonblank line, @kbd{C-x C-o} deletes any blank lines following that
basic.texi(,401) nonblank line.
basic.texi(,402) 
basic.texi(,403) @node Continuation Lines, Position Info, Blank Lines, Basic
basic.texi(,404) @section Continuation Lines
basic.texi(,405) 
basic.texi(,406) @cindex continuation line
basic.texi(,407) @cindex wrapping
basic.texi(,408) @cindex line wrapping
basic.texi(,409)   If you add too many characters to one line without breaking it with
basic.texi(,410) @key{RET}, the line will grow to occupy two (or more) lines on the
basic.texi(,411) screen, with a curved arrow at the extreme right margin of all but the
basic.texi(,412) last of them.  The curved arrow says that the following screen line is
basic.texi(,413) not really a distinct line in the text, but just the @dfn{continuation}
basic.texi(,414) of a line too long to fit the screen.  Continuation is also called
basic.texi(,415) @dfn{line wrapping}.
basic.texi(,416) 
basic.texi(,417)   Sometimes it is nice to have Emacs insert newlines automatically when
basic.texi(,418) a line gets too long.  Continuation on the screen does not do that.  Use
basic.texi(,419) Auto Fill mode (@pxref{Filling}) if that's what you want.
basic.texi(,420) 
basic.texi(,421) @vindex truncate-lines
basic.texi(,422) @cindex truncation
basic.texi(,423)   Instead of continuation, long lines can be displayed by @dfn{truncation}.
basic.texi(,424) This means that all the characters that do not fit in the width of the
basic.texi(,425) frame or window do not appear at all.  They remain in the buffer,
basic.texi(,426) temporarily invisible.  Right arrow in the last column (instead of the
basic.texi(,427) curved arrow) inform you that truncation is in effect.
basic.texi(,428) 
basic.texi(,429)   Truncation instead of continuation happens whenever horizontal
basic.texi(,430) scrolling is in use, and optionally in all side-by-side windows
basic.texi(,431) (@pxref{Windows}).  You can enable truncation for a particular buffer by
basic.texi(,432) setting the variable @code{truncate-lines} to non-@code{nil} in that
basic.texi(,433) buffer.  (@xref{Variables}.)  Altering the value of
basic.texi(,434) @code{truncate-lines} makes it local to the current buffer; until that
basic.texi(,435) time, the default value is in effect.  The default is initially
basic.texi(,436) @code{nil}.  @xref{Locals}.
basic.texi(,437) 
basic.texi(,438)   @xref{Display Vars}, for additional variables that affect how text is
basic.texi(,439) displayed.
basic.texi(,440) 
basic.texi(,441) @node Position Info, Arguments, Continuation Lines, Basic
basic.texi(,442) @section Cursor Position Information
basic.texi(,443) 
basic.texi(,444)   If you are accustomed to other display editors, you may be surprised
basic.texi(,445) that Emacs does not always display the page number or line number of
basic.texi(,446) point in the mode line.  In Emacs, this information is only rarely
basic.texi(,447) needed, and a number of commands are available to compute and print it.
basic.texi(,448) Since text is stored in a way that makes it difficult to compute the
basic.texi(,449) information, it is not displayed all the time.
basic.texi(,450) 
basic.texi(,451) @table @kbd
basic.texi(,452) @item M-x what-page
basic.texi(,453) Print page number of point, and line number within page.
basic.texi(,454) @item M-x what-line
basic.texi(,455) Print line number of point in the buffer.
basic.texi(,456) @item M-x line-number-mode
basic.texi(,457) Toggle automatic display of current line number.
basic.texi(,458) @item M-=
basic.texi(,459) Print number of lines and characters in the current region
basic.texi(,460) (@code{count-lines-region}).  @xref{Mark}, for information about the
basic.texi(,461) region.
basic.texi(,462) @item C-x =
basic.texi(,463) Print character code of character after point, character position of
basic.texi(,464) point, and column of point (@code{what-cursor-position}).
basic.texi(,465) @end table
basic.texi(,466) 
basic.texi(,467) @findex what-page
basic.texi(,468) @findex what-line
basic.texi(,469) @cindex line number
basic.texi(,470) @cindex page number
basic.texi(,471) @kindex M-=
basic.texi(,472) @findex count-lines-region
basic.texi(,473) 
basic.texi(,474)   There are several commands for printing line numbers:
basic.texi(,475) 
basic.texi(,476) @itemize @bullet
basic.texi(,477) @item
basic.texi(,478) @kbd{M-x what-line} counts lines from the beginning of the file and
basic.texi(,479) prints the line number point is on.  The first line of the file is line
basic.texi(,480) number 1.  You can use these numbers as arguments to @kbd{M-x
basic.texi(,481) goto-line}.
basic.texi(,482) @item
basic.texi(,483) @kbd{M-x what-page} counts pages from the beginning of the file, and
basic.texi(,484) counts lines within the page, printing both of them.  @xref{Pages}, for
basic.texi(,485) the command @kbd{C-x l}, which counts the lines in the current page.
basic.texi(,486) @item
basic.texi(,487) @kbd{M-=} (@code{count-lines-region}) prints the number of lines in the
basic.texi(,488) region (@pxref{Mark}).  @xref{Pages}, for the command @kbd{C-x l} which
basic.texi(,489) counts the lines in the
basic.texi(,490) @end itemize
basic.texi(,491) 
basic.texi(,492) @kindex C-x =
basic.texi(,493) @findex what-cursor-position
basic.texi(,494)   The command @kbd{C-x =} (@code{what-cursor-position}) can be used to find out
basic.texi(,495) the column that the cursor is in, and other miscellaneous information about
basic.texi(,496) point.  It prints a line in the echo area that looks like this:
basic.texi(,497) 
basic.texi(,498) @example
basic.texi(,499) Char: c (0143, 99, 0x63)  point=18862 of 24800(76%)  column 53 
basic.texi(,500) @end example
basic.texi(,501) 
basic.texi(,502) @noindent
basic.texi(,503) (In fact, this is the output produced when point is before @samp{column
basic.texi(,504) 53} in the example.)
basic.texi(,505) 
basic.texi(,506)   The four values after @samp{Char:} describe the character that follows
basic.texi(,507) point, first by showing it and then by giving its character code in
basic.texi(,508) octal, decimal and hex. 
basic.texi(,509) 
basic.texi(,510)   @samp{point=} is followed by the position of point expressed as a character
basic.texi(,511) count.  The front of the buffer counts as position 1, one character later
basic.texi(,512) as 2, and so on.  The next, larger number is the total number of characters
basic.texi(,513) in the buffer.  Afterward in parentheses comes the position expressed as a
basic.texi(,514) percentage of the total size.
basic.texi(,515) 
basic.texi(,516)   @samp{column} is followed by the horizontal position of point, in
basic.texi(,517) columns from the left edge of the window.
basic.texi(,518) 
basic.texi(,519)   If the buffer has been narrowed, making some of the text at the
basic.texi(,520) beginning and the end temporarily invisible, @kbd{C-x =} prints
basic.texi(,521) additional text describing the current visible range.  For example, it
basic.texi(,522) might say:
basic.texi(,523) 
basic.texi(,524) @smallexample
basic.texi(,525) Char: c (0143, 99, 0x63)  point=19674 of 24575(80%) <19591 - 19703>  column 69 
basic.texi(,526) @end smallexample
basic.texi(,527) 
basic.texi(,528) @noindent
basic.texi(,529) where the two extra numbers give the smallest and largest character position
basic.texi(,530) that point is allowed to assume.  The characters between those two positions
basic.texi(,531) are the visible ones.  @xref{Narrowing}.
basic.texi(,532) 
basic.texi(,533)   If point is at the end of the buffer (or the end of the visible part),
basic.texi(,534) @kbd{C-x =} omits any description of the character after point.
basic.texi(,535) The output looks like
basic.texi(,536) 
basic.texi(,537) @smallexample
basic.texi(,538) point=563026 of 563025(100%)  column 0
basic.texi(,539) @end smallexample
basic.texi(,540) 
basic.texi(,541) @node Arguments,, Position Info, Basic
basic.texi(,542) @section Numeric Arguments
basic.texi(,543) @cindex numeric arguments
basic.texi(,544) 
basic.texi(,545)   In mathematics and computer usage, the word @dfn{argument} means
basic.texi(,546) ``data provided to a function or operation.''  Any Emacs command can be
basic.texi(,547) given a @dfn{numeric argument} (also called a @dfn{prefix argument}).
basic.texi(,548) Some commands interpret the argument as a repetition count.  For
basic.texi(,549) example, giving an argument of ten to the key @kbd{C-f} (the command
basic.texi(,550) @code{forward-char}, move forward one character) moves forward ten
basic.texi(,551) characters.  With these commands, no argument is equivalent to an
basic.texi(,552) argument of one.  Negative arguments are allowed.  Often they tell a
basic.texi(,553) command to move or act  in the opposite direction.
basic.texi(,554) 
basic.texi(,555) @kindex M-1
basic.texi(,556) @kindex M-@t{-}
basic.texi(,557) @findex digit-argument
basic.texi(,558) @findex negative-argument
basic.texi(,559)   If your keyboard has a @key{META} key (labelled with a diamond on
basic.texi(,560) Sun-type keyboards and labelled @samp{Alt} on some other keyboards), the
basic.texi(,561) easiest way to specify a numeric argument is to type digits and/or a
basic.texi(,562) minus sign while holding down the @key{META} key.  For example,
basic.texi(,563) @example
basic.texi(,564) M-5 C-n
basic.texi(,565) @end example
basic.texi(,566) @noindent
basic.texi(,567) would move down five lines.  The characters @kbd{Meta-1}, @kbd{Meta-2},
basic.texi(,568) and so on, as well as @kbd{Meta--}, do this because they are keys bound
basic.texi(,569) to commands (@code{digit-argument} and @code{negative-argument}) that
basic.texi(,570) are defined to contribute to an argument for the next command.  Digits
basic.texi(,571) and @kbd{-} modified with Control, or Control and Meta, also specify
basic.texi(,572) numeric arguments.
basic.texi(,573) 
basic.texi(,574) @kindex C-u
basic.texi(,575) @findex universal-argument
basic.texi(,576)   Another way of specifying an argument is to use the @kbd{C-u}
basic.texi(,577) (@code{universal-argument}) command followed by the digits of the
basic.texi(,578) argument.  With @kbd{C-u}, you can type the argument digits without
basic.texi(,579) holding down modifier keys; @kbd{C-u} works on all terminals.  To type a
basic.texi(,580) negative argument, type a minus sign after @kbd{C-u}.  Just a minus sign
basic.texi(,581) without digits normally means @minus{}1.
basic.texi(,582) 
basic.texi(,583)   @kbd{C-u} followed by a character which is neither a digit nor a minus
basic.texi(,584) sign has the special meaning of ``multiply by four''.  It multiplies the
basic.texi(,585) argument for the next command by four.  @kbd{C-u} twice multiplies it by
basic.texi(,586) sixteen.  Thus, @kbd{C-u C-u C-f} moves forward sixteen characters.  This
basic.texi(,587) is a good way to move forward ``fast'', since it moves about 1/5 of a line
basic.texi(,588) in the usual size frame.  Other useful combinations are @kbd{C-u C-n},
basic.texi(,589) @kbd{C-u C-u C-n} (move down a good fraction of a frame), @kbd{C-u C-u
basic.texi(,590) C-o} (make ``a lot'' of blank lines), and @kbd{C-u C-k} (kill four
basic.texi(,591) lines).
basic.texi(,592) 
basic.texi(,593)   Some commands care only about whether there is an argument and not about
basic.texi(,594) its value.  For example, the command @kbd{M-q} (@code{fill-paragraph}) with
basic.texi(,595) no argument fills text; with an argument, it justifies the text as well.
basic.texi(,596) (@xref{Filling}, for more information on @kbd{M-q}.)  Just @kbd{C-u} is a
basic.texi(,597) handy way of providing an argument for such commands.
basic.texi(,598) 
basic.texi(,599)   Some commands use the value of the argument as a repeat count, but do
basic.texi(,600) something peculiar when there is no argument.  For example, the command
basic.texi(,601) @kbd{C-k} (@code{kill-line}) with argument @var{n} kills @var{n} lines,
basic.texi(,602) including their terminating newlines.  But @kbd{C-k} with no argument is
basic.texi(,603) special: it kills the text up to the next newline, or, if point is right at
basic.texi(,604) the end of the line, it kills the newline itself.  Thus, two @kbd{C-k}
basic.texi(,605) commands with no arguments can kill a non-blank line, just like @kbd{C-k}
basic.texi(,606) with an argument of one.  (@xref{Killing}, for more information on
basic.texi(,607) @kbd{C-k}.)
basic.texi(,608) 
basic.texi(,609)   A few commands treat a plain @kbd{C-u} differently from an ordinary
basic.texi(,610) argument.  A few others may treat an argument of just a minus sign
basic.texi(,611) differently from an argument of @minus{}1.  These unusual cases are
basic.texi(,612) described when they come up; they are always for reasons of convenience
basic.texi(,613) of use of the individual command.
basic.texi(,614) 
basic.texi(,615)   You can use a numeric argument to insert multiple copies of a
basic.texi(,616) character.  This is straightforward unless the character is a digit; for
basic.texi(,617) example, @kbd{C-u 6 4 a} inserts 64 copies of the character @samp{a}.
basic.texi(,618) But this does not work for inserting digits; @kbd{C-u 6 4 1} specifies
basic.texi(,619) an argument of 641, rather than inserting anything.  To separate the
basic.texi(,620) digit to insert from the argument, type another @kbd{C-u}; for example,
basic.texi(,621) @kbd{C-u 6 4 C-u 1} does insert 64 copies of the character @samp{1}.
basic.texi(,622) 
basic.texi(,623)   We use the term ``prefix argument'' as well as ``numeric argument'' to
basic.texi(,624) emphasize that you type the argument before the command, and to
basic.texi(,625) distinguish these arguments from minibuffer arguments that come after
basic.texi(,626) the command.
basic.texi(,627) 
undo.texi(,1) 
undo.texi(,2) @node Undo, Minibuffer, Basic, Top
undo.texi(,3) @chapter Undoing Changes
undo.texi(,4) @cindex undo
undo.texi(,5) @cindex mistakes, correcting
undo.texi(,6) 
undo.texi(,7)   Emacs allows you to undo all changes you make to the text of a buffer,
undo.texi(,8) up to a certain amount of change (8000 characters).  Each buffer records
undo.texi(,9) changes individually, and the undo command always applies to the
undo.texi(,10) current buffer.  Usually each editing command makes a separate entry
undo.texi(,11) in the undo records, but some commands such as @code{query-replace}
undo.texi(,12) make many entries, and very simple commands such as self-inserting
undo.texi(,13) characters are often grouped to make undoing less tedious.
undo.texi(,14) 
undo.texi(,15) @table @kbd
undo.texi(,16) @item C-x u
undo.texi(,17) Undo one batch of changes (usually, one command's worth) (@code{undo}).
undo.texi(,18) @item C-_
undo.texi(,19) The same.
undo.texi(,20) @end table
undo.texi(,21) 
undo.texi(,22) @kindex C-x u
undo.texi(,23) @kindex C-_
undo.texi(,24) @findex undo
undo.texi(,25)   The command @kbd{C-x u} or @kbd{C-_} allows you to undo changes.  The
undo.texi(,26) first time you give this command, it undoes the last change.  Point
undo.texi(,27) moves to the text affected by the undo, so you can see what was undone.
undo.texi(,28) 
undo.texi(,29)   Consecutive repetitions of the @kbd{C-_} or @kbd{C-x u} commands undo
undo.texi(,30) earlier and earlier changes, back to the limit of what has been
undo.texi(,31) recorded.  If all recorded changes have already been undone, the undo
undo.texi(,32) command prints an error message and does nothing.
undo.texi(,33) 
undo.texi(,34)   Any command other than an undo command breaks the sequence of undo
undo.texi(,35) commands.  Starting at this moment, the previous undo commands are
undo.texi(,36) considered ordinary changes that can themselves be undone.  Thus, you can
undo.texi(,37) redo changes you have undone by typing @kbd{C-f} or any other command
undo.texi(,38) that have no important effect, and then using more undo commands.
undo.texi(,39) 
undo.texi(,40)   If you notice that a buffer has been modified accidentally, the
undo.texi(,41) easiest way to recover is to type @kbd{C-_} repeatedly until the stars
undo.texi(,42) disappear from the front of the mode line.  When that happens, all the
undo.texi(,43) modifications you made have been canceled.  If you do not remember
undo.texi(,44) whether you changed the buffer deliberately, type @kbd{C-_} once. When
undo.texi(,45) you see Emacs undo the last change you made, you probably remember why you
undo.texi(,46) made it.  If the change was an accident, leave it undone.  If it was
undo.texi(,47) deliberate, redo the change as described in the preceding paragraph.
undo.texi(,48) 
undo.texi(,49)   Whenever an undo command makes the stars disappear from the mode line,
undo.texi(,50) the buffer contents is the same as it was when the file was last read in
undo.texi(,51) or saved.
undo.texi(,52) 
undo.texi(,53)   Not all buffers record undo information.  Buffers whose names start with
undo.texi(,54) spaces don't; these buffers are used internally by Emacs and its extensions
undo.texi(,55) to hold text that users don't normally look at or edit.  Minibuffers,
undo.texi(,56) help buffers, and documentation buffers also don't record undo information.
undo.texi(,57) 
undo.texi(,58)   Emacs can remember at most 8000 or so characters of deleted or
undo.texi(,59) modified text in any one buffer for reinsertion by the undo command.
undo.texi(,60) There is also a limit on the number of individual insert, delete, or
undo.texi(,61) change actions that Emacs can remember.
undo.texi(,62) 
undo.texi(,63)   There are two keys to run the @code{undo} command, @kbd{C-x u} and
undo.texi(,64) @kbd{C-_}, because on some keyboards, it is not obvious how to type
undo.texi(,65) @kbd{C-_}. @kbd{C-x u} is an alternative you can type in the same
undo.texi(,66) fashion on any terminal.
mini.texi(,1) 
mini.texi(,2) @node Minibuffer, M-x, Undo, Top
mini.texi(,3) @chapter The Minibuffer
mini.texi(,4) @cindex minibuffer
mini.texi(,5) 
mini.texi(,6)   The @dfn{minibuffer} is the facility used by XEmacs commands to read
mini.texi(,7) arguments more complicated than a single number.  Minibuffer arguments
mini.texi(,8) can be file names, buffer names, Lisp function names, XEmacs command
mini.texi(,9) names, Lisp expressions, and many other things, depending on the command
mini.texi(,10) reading the argument.  You can use the usual XEmacs editing commands in
mini.texi(,11) the minibuffer to edit the argument text.
mini.texi(,12) 
mini.texi(,13) @cindex prompt
mini.texi(,14)   When the minibuffer is in use, it appears in the echo area, and the
mini.texi(,15) cursor moves there.  The beginning of the minibuffer line displays a
mini.texi(,16) @dfn{prompt} which says what kind of input you should supply and how it
mini.texi(,17) will be used.  Often this prompt is derived from the name of the command
mini.texi(,18) that the argument is for.  The prompt normally ends with a colon.
mini.texi(,19) 
mini.texi(,20) @cindex default argument
mini.texi(,21)   Sometimes a @dfn{default argument} appears in parentheses after the
mini.texi(,22) colon; it, too, is part of the prompt.  The default is used as the
mini.texi(,23) argument value if you enter an empty argument (e.g., by just typing @key{RET}).
mini.texi(,24) For example, commands that read buffer names always show a default, which
mini.texi(,25) is the name of the buffer that will be used if you type just @key{RET}.
mini.texi(,26) 
mini.texi(,27) @kindex C-g
mini.texi(,28)   The simplest way to enter a minibuffer argument is to type the text
mini.texi(,29) you want, terminated by @key{RET} which exits the minibuffer.  You can
mini.texi(,30) cancel the command that wants the argument, and get out of the
mini.texi(,31) minibuffer, by typing @kbd{C-g}.
mini.texi(,32) 
mini.texi(,33)   Since the minibuffer uses the screen space of the echo area, it can
mini.texi(,34) conflict with other ways XEmacs customarily uses the echo area.  Here is
mini.texi(,35) how XEmacs handles such conflicts:
mini.texi(,36) 
mini.texi(,37) @itemize @bullet
mini.texi(,38) @item
mini.texi(,39) If a command gets an error while you are in the minibuffer, this does
mini.texi(,40) not cancel the minibuffer.  However, the echo area is needed for the
mini.texi(,41) error message and therefore the minibuffer itself is hidden for a
mini.texi(,42) while.  It comes back after a few seconds, or as soon as you type
mini.texi(,43) anything.
mini.texi(,44) 
mini.texi(,45) @item
mini.texi(,46) If in the minibuffer you use a command whose purpose is to print a
mini.texi(,47) message in the echo area, such as @kbd{C-x =}, the message is printed
mini.texi(,48) normally, and the minibuffer is hidden for a while.  It comes back
mini.texi(,49) after a few seconds, or as soon as you type anything.
mini.texi(,50) 
mini.texi(,51) @item
mini.texi(,52) Echoing of keystrokes does not take place while the minibuffer is in
mini.texi(,53) use.
mini.texi(,54) @end itemize
mini.texi(,55) 
mini.texi(,56) @menu
mini.texi(,57) * File: Minibuffer File.  Entering file names with the minibuffer.
mini.texi(,58) * Edit: Minibuffer Edit.  How to edit in the minibuffer.
mini.texi(,59) * Completion::		  An abbreviation facility for minibuffer input.
mini.texi(,60) * Minibuffer History::    Reusing recent minibuffer arguments.
mini.texi(,61) * Repetition::		  Re-executing commands that used the minibuffer.
mini.texi(,62) @end menu
mini.texi(,63) 
mini.texi(,64) @node Minibuffer File, Minibuffer Edit, Minibuffer, Minibuffer
mini.texi(,65) @section Minibuffers for File Names
mini.texi(,66) 
mini.texi(,67)   Sometimes the minibuffer starts out with text in it.  For example, when
mini.texi(,68) you are supposed to give a file name, the minibuffer starts out containing
mini.texi(,69) the @dfn{default directory}, which ends with a slash.  This is to inform
mini.texi(,70) you which directory the file will be found in if you do not specify a
mini.texi(,71) directory.
mini.texi(,72) 
mini.texi(,73)   For example, the minibuffer might start out with these contents:
mini.texi(,74) 
mini.texi(,75) @example
mini.texi(,76) Find File: /u2/emacs/src/
mini.texi(,77) @end example
mini.texi(,78) 
mini.texi(,79) @noindent
mini.texi(,80) where @samp{Find File:@: } is the prompt.  Typing @kbd{buffer.c}
mini.texi(,81) specifies the file @file{/u2/emacs/src/buffer.c}.  To find files in
mini.texi(,82) nearby directories, use @kbd{..}; thus, if you type
mini.texi(,83) @kbd{../lisp/simple.el}, you will get the file named
mini.texi(,84) @file{/u2/emacs/lisp/simple.el}.  Alternatively, you can kill with
mini.texi(,85) @kbd{M-@key{DEL}} the directory names you don't want (@pxref{Words}).
mini.texi(,86) 
mini.texi(,87)   If you don't want any of the default, you can kill it with @kbd{C-a
mini.texi(,88) C-k}.  But you don't need to kill the default; you can simply ignore it.
mini.texi(,89) Insert an absolute file name, one starting with a slash or a tilde,
mini.texi(,90) after the default directory.  For example, to specify the file
mini.texi(,91) @file{/etc/termcap}, just insert that name, giving these minibuffer
mini.texi(,92) contents:
mini.texi(,93) 
mini.texi(,94) @example
mini.texi(,95) Find File: /u2/emacs/src//etc/termcap
mini.texi(,96) @end example
mini.texi(,97) 
mini.texi(,98) @noindent
mini.texi(,99) @cindex // in file name
mini.texi(,100) @cindex double slash in file name
mini.texi(,101) @cindex slashes repeated in file name
mini.texi(,102) XEmacs gives a special meaning to a double slash (which is not normally
mini.texi(,103) a useful thing to write): it means, ``ignore everything before the
mini.texi(,104) second slash in the pair.''  Thus, @samp{/u2/emacs/src/} is ignored in
mini.texi(,105) the example above, and you get the file @file{/etc/termcap}.
mini.texi(,106) 
mini.texi(,107) @vindex insert-default-directory
mini.texi(,108) If you set @code{insert-default-directory} to @code{nil}, the default
mini.texi(,109) directory is not inserted in the minibuffer.  This way, the minibuffer
mini.texi(,110) starts out empty.  But the name you type, if relative, is still
mini.texi(,111) interpreted with respect to the same default directory.
mini.texi(,112) 
mini.texi(,113) @node Minibuffer Edit, Completion, Minibuffer File, Minibuffer
mini.texi(,114) @section Editing in the Minibuffer
mini.texi(,115) 
mini.texi(,116)   The minibuffer is an XEmacs buffer (albeit a peculiar one), and the
mini.texi(,117) usual XEmacs commands are available for editing the text of an argument
mini.texi(,118) you are entering.
mini.texi(,119) 
mini.texi(,120)   Since @key{RET} in the minibuffer is defined to exit the minibuffer,
mini.texi(,121) you can't use it to insert a newline in the minibuffer.  To do that,
mini.texi(,122) type @kbd{C-o} or @kbd{C-q C-j}.  (Recall that a newline is really the
mini.texi(,123) character control-J.)
mini.texi(,124) 
mini.texi(,125)   The minibuffer has its own window which always has space on the screen
mini.texi(,126) but acts as if it were not there when the minibuffer is not in use.
mini.texi(,127) When the minibuffer is in use, its window is just like the others; you
mini.texi(,128) can switch to another window with @kbd{C-x o}, edit text in other
mini.texi(,129) windows and perhaps even visit more files, before returning to the
mini.texi(,130) minibuffer to submit the argument.  You can kill text in another window,
mini.texi(,131) return to the minibuffer window, and then yank the text to use it in the
mini.texi(,132) argument.  @xref{Windows}.
mini.texi(,133) 
mini.texi(,134)   There are some restrictions on the use of the minibuffer window,
mini.texi(,135) however.  You cannot switch buffers in it---the minibuffer and its
mini.texi(,136) window are permanently attached.  Also, you cannot split or kill the
mini.texi(,137) minibuffer window. But you can make it taller in the normal fashion with
mini.texi(,138) @kbd{C-x ^}.  If you enable Resize-Minibuffer mode, then the
mini.texi(,139) minibuffer window expands vertically as necessary to hold the text that
mini.texi(,140) you put in the minibuffer.  Use @kbd{M-x resize-minibuffer-mode} to
mini.texi(,141) enable or disable this minor mode (@pxref{Minor Modes}).
mini.texi(,142) 
mini.texi(,143) @kindex C-M-v
mini.texi(,144)   If while in the minibuffer you issue a command that displays help text
mini.texi(,145) of any sort in another window, you can use the @kbd{C-M-v} command while
mini.texi(,146) in the minibuffer to scroll the help text.  This lasts until you exit
mini.texi(,147) the minibuffer.  This feature is especially useful if a completing
mini.texi(,148) minibuffer gives you a list of possible completions.  @xref{Other Window}.
mini.texi(,149) 
mini.texi(,150) @vindex minibuffer-confirm-incomplete
mini.texi(,151) If the variable @code{minibuffer-confirm-incomplete} is @code{t}, you
mini.texi(,152) are asked for confirmation if there is no known completion for the text
mini.texi(,153) you typed. For example, if you attempted to visit a non-existent file,
mini.texi(,154) the minibuffer might read:
mini.texi(,155) @example
mini.texi(,156)         Find File: chocolate_bar.c [no completions, confirm]
mini.texi(,157) @end example
mini.texi(,158) If you press @kbd{Return} again, that confirms the filename. Otherwise,
mini.texi(,159) you can continue editing it. 
mini.texi(,160) 
mini.texi(,161)  XEmacs supports recursive use of the minibuffer.  However, it is easy
mini.texi(,162) to do this by accident (because of autorepeating keyboards, for example)
mini.texi(,163) and get confused.  Therefore, most XEmacs commands that use the
mini.texi(,164) minibuffer refuse to operate if the minibuffer window is selected.  If
mini.texi(,165) the minibuffer is active but you have switched to a different window,
mini.texi(,166) recursive use of the minibuffer is allowed---if you know enough to try
mini.texi(,167) to do this, you probably will not get confused.
mini.texi(,168) 
mini.texi(,169) @vindex enable-recursive-minibuffers
mini.texi(,170)   If you set the variable @code{enable-recursive-minibuffers} to a
mini.texi(,171) non-@code{nil}, recursive use of the minibuffer is always allowed.
mini.texi(,172) 
mini.texi(,173) @node Completion, Minibuffer History, Minibuffer Edit, Minibuffer
mini.texi(,174) @section Completion
mini.texi(,175) @cindex completion
mini.texi(,176) 
mini.texi(,177)   For certain kinds of arguments, you can use @dfn{completion} to enter
mini.texi(,178) the argument value.  Completion means that you type part of the
mini.texi(,179) argument, then XEmacs visibly fills in the rest, or as much as
mini.texi(,180) can be determined from the part you have typed.
mini.texi(,181) 
mini.texi(,182)   When completion is available, certain keys---@key{TAB}, @key{RET}, and
mini.texi(,183) @key{SPC}---are rebound to complete the text present in the
mini.texi(,184) minibuffer into a longer string that it stands for, by matching it
mini.texi(,185) against a set of @dfn{completion alternatives} provided by the command
mini.texi(,186) reading the argument.  @kbd{?} is defined to display a list of possible
mini.texi(,187) completions of what you have inserted.
mini.texi(,188) 
mini.texi(,189)   For example, when @kbd{M-x} uses the minibuffer to read the name of a
mini.texi(,190) command, it provides a list of all available XEmacs command names to
mini.texi(,191) complete against.  The completion keys match the text in the minibuffer
mini.texi(,192) against all the command names, find any additional name characters
mini.texi(,193) implied by the ones already present in the minibuffer, and add those
mini.texi(,194) characters to the ones you have given.  This is what makes it possible
mini.texi(,195) to type @kbd{M-x inse @key{SPC} b @key{RET}} instead of @kbd{M-x
mini.texi(,196) insert-buffer @key{RET}} (for example).
mini.texi(,197) 
mini.texi(,198)   Case is normally significant in completion because it is significant
mini.texi(,199) in most of the names that you can complete (buffer names, file names and
mini.texi(,200) command names).  Thus, @samp{fo} does not complete to @samp{Foo}.  When
mini.texi(,201) you are completing a name in which case does not matter, case may be
mini.texi(,202) ignored for completion's sake if specified by program.
mini.texi(,203) 
mini.texi(,204) When a completion list is displayed, the completions will highlight as
mini.texi(,205) you move the mouse over them.  Clicking the middle mouse button on any 
mini.texi(,206) highlighted completion will ``select'' it just as if you had typed it in
mini.texi(,207) and hit @key{RET}.
mini.texi(,208) 
mini.texi(,209) @menu
mini.texi(,210) * Example: Completion Example.
mini.texi(,211) * Commands: Completion Commands.
mini.texi(,212) * Strict Completion::
mini.texi(,213) * Options: Completion Options.
mini.texi(,214) @end menu
mini.texi(,215) 
mini.texi(,216) @node Completion Example, Completion Commands, Completion, Completion
mini.texi(,217) @subsection Completion Example
mini.texi(,218) 
mini.texi(,219) @kindex TAB
mini.texi(,220) @findex minibuffer-complete
mini.texi(,221)   A concrete example may help here.  If you type @kbd{M-x au @key{TAB}},
mini.texi(,222) the @key{TAB} looks for alternatives (in this case, command names) that
mini.texi(,223) start with @samp{au}.  There are several, including
mini.texi(,224) @code{auto-fill-mode} and @code{auto-save-mode}---but they are all the
mini.texi(,225) same as far as @code{auto}, so the @samp{au} in the minibuffer changes
mini.texi(,226) to @samp{auto}.
mini.texi(,227) 
mini.texi(,228)   If you type @key{TAB} again immediately, there are multiple
mini.texi(,229) possibilities for the very next character---it could be any of
mini.texi(,230) @samp{c-}---so no more characters are added; instead, @key{TAB}
mini.texi(,231) displays a list of all possible completions in another window.
mini.texi(,232) 
mini.texi(,233)   If you go on to type @kbd{-f @key{TAB}}, this @key{TAB} sees
mini.texi(,234) @samp{auto-f}.  The only command name starting this way is
mini.texi(,235) @code{auto-fill-mode}, so completion fills in the rest of that.  You now
mini.texi(,236) have @samp{auto-fill-mode} in the minibuffer after typing just @kbd{au
mini.texi(,237) @key{TAB} f @key{TAB}}.  Note that @key{TAB} has this effect because in
mini.texi(,238) the minibuffer it is bound to the command @code{minibuffer-complete}
mini.texi(,239) when completion is available.
mini.texi(,240) 
mini.texi(,241) @node Completion Commands, Strict Completion, Completion Example, Completion
mini.texi(,242) @subsection Completion Commands
mini.texi(,243) 
mini.texi(,244)   Here is a list of the completion commands defined in the minibuffer
mini.texi(,245) when completion is available.
mini.texi(,246) 
mini.texi(,247) @table @kbd
mini.texi(,248) @item @key{TAB}
mini.texi(,249) Complete the text in the minibuffer as much as possible
mini.texi(,250) (@code{minibuffer-complete}).
mini.texi(,251) @item @key{SPC}
mini.texi(,252) Complete the minibuffer text, but don't go beyond one word
mini.texi(,253) (@code{minibuffer-complete-word}).
mini.texi(,254) @item @key{RET}
mini.texi(,255) Submit the text in the minibuffer as the argument, possibly completing
mini.texi(,256) first as described below (@code{minibuffer-complete-and-exit}).
mini.texi(,257) @item ?
mini.texi(,258) Print a list of all possible completions of the text in the minibuffer
mini.texi(,259) (@code{minibuffer-list-completions}).
mini.texi(,260) @item @key{button2}
mini.texi(,261) Select the highlighted text under the mouse as a minibuffer response.
mini.texi(,262) When the minibuffer is being used to prompt the user for a completion,
mini.texi(,263) any valid completions which are visible on the screen will be highlighted
mini.texi(,264) when the mouse moves over them.  Clicking @key{button2} will select the
mini.texi(,265) highlighted completion and exit the minibuffer.  
mini.texi(,266) (@code{minibuf-select-highlighted-completion}).
mini.texi(,267) @end table
mini.texi(,268) 
mini.texi(,269) @kindex SPC
mini.texi(,270) @findex minibuffer-complete-word
mini.texi(,271)   @key{SPC} completes much like @key{TAB}, but never goes beyond the
mini.texi(,272) next hyphen or space.  If you have @samp{auto-f} in the minibuffer and
mini.texi(,273) type @key{SPC}, it finds that the completion is @samp{auto-fill-mode},
mini.texi(,274) but it stops completing after @samp{fill-}.  This gives
mini.texi(,275) @samp{auto-fill-}.  Another @key{SPC} at this point completes all the
mini.texi(,276) way to @samp{auto-fill-mode}.  @key{SPC} in the minibuffer when
mini.texi(,277) completion is available runs the command
mini.texi(,278) @code{minibuffer-complete-word}.
mini.texi(,279) 
mini.texi(,280)   Here are some commands you can use to choose a completion from a
mini.texi(,281) window that displays a list of completions:
mini.texi(,282) 
mini.texi(,283) @table @kbd
mini.texi(,284) @findex mouse-choose-completion
mini.texi(,285) @item button2up
mini.texi(,286) Clicking mouse button 2 on a completion in the list of possible
mini.texi(,287) completions chooses that completion (@code{mouse-choose-completion}).
mini.texi(,288) You normally use this command while point is in the minibuffer; but you
mini.texi(,289) must click in the list of completions, not in the minibuffer itself.
mini.texi(,290) 
mini.texi(,291) @findex switch-to-completions
mini.texi(,292) @item @key{PRIOR}
mini.texi(,293) @itemx M-v
mini.texi(,294) Typing @key{PRIOR} or @kbd{M-v}, while in the minibuffer, selects the
mini.texi(,295) window showing the completion list buffer
mini.texi(,296) (@code{switch-to-completions}).  This paves the way for using the
mini.texi(,297) commands below.  (Selecting that window in the usual ways has the same
mini.texi(,298) effect, but this way is more convenient.)
mini.texi(,299) 
mini.texi(,300) @findex choose-completion
mini.texi(,301) @item @key{RET}
mini.texi(,302) Typing @key{RET} @emph{in the completion list buffer} chooses the
mini.texi(,303) completion that point is in or next to (@code{choose-completion}).  To
mini.texi(,304) use this command, you must first switch windows to the window that shows
mini.texi(,305) the list of completions.
mini.texi(,306) 
mini.texi(,307) @findex next-list-mode-item
mini.texi(,308) @item @key{RIGHT}
mini.texi(,309) @itemx @key{TAB}
mini.texi(,310) @itemx C-f
mini.texi(,311) Typing the right-arrow key @key{RIGHT}, @key{TAB} or @kbd{C-f} @emph{in
mini.texi(,312) the completion list buffer} moves point to the following completion
mini.texi(,313) (@code{next-list-mode-item}).
mini.texi(,314) 
mini.texi(,315) @findex previous-list-mode-item
mini.texi(,316) @item @key{LEFT}
mini.texi(,317) @itemx C-b
mini.texi(,318) Typing the left-arrow key @key{LEFT} or @kbd{C-b} @emph{in the
mini.texi(,319) completion list buffer} moves point toward the beginning of the buffer,
mini.texi(,320) to the previous completion (@code{previous-list-mode-item}).
mini.texi(,321) @end table
mini.texi(,322) 
mini.texi(,323) @node Strict Completion, Completion Options, Completion Commands, Completion
mini.texi(,324) @subsection Strict Completion
mini.texi(,325) 
mini.texi(,326)   There are three different ways that @key{RET} can work in completing
mini.texi(,327) minibuffers, depending on how the argument will be used.
mini.texi(,328) 
mini.texi(,329) @itemize @bullet
mini.texi(,330) @item
mini.texi(,331) @dfn{Strict} completion is used when it is meaningless to give any
mini.texi(,332) argument except one of the known alternatives.  For example, when
mini.texi(,333) @kbd{C-x k} reads the name of a buffer to kill, it is meaningless to
mini.texi(,334) give anything but the name of an existing buffer.  In strict
mini.texi(,335) completion, @key{RET} refuses to exit if the text in the minibuffer
mini.texi(,336) does not complete to an exact match.
mini.texi(,337) 
mini.texi(,338) @item
mini.texi(,339) @dfn{Cautious} completion is similar to strict completion, except that
mini.texi(,340) @key{RET} exits only if the text was an exact match already, not
mini.texi(,341) needing completion.  If the text is not an exact match, @key{RET} does
mini.texi(,342) not exit, but it does complete the text.  If it completes to an exact
mini.texi(,343) match, a second @key{RET} will exit.
mini.texi(,344) 
mini.texi(,345) Cautious completion is used for reading file names for files that must
mini.texi(,346) already exist.
mini.texi(,347) 
mini.texi(,348) @item
mini.texi(,349) @dfn{Permissive} completion is used when any string whatever is
mini.texi(,350) meaningful, and the list of completion alternatives is just a guide.
mini.texi(,351) For example, when @kbd{C-x C-f} reads the name of a file to visit, any
mini.texi(,352) file name is allowed, in case you want to create a file.  In
mini.texi(,353) permissive completion, @key{RET} takes the text in the minibuffer
mini.texi(,354) exactly as given, without completing it.
mini.texi(,355) @end itemize
mini.texi(,356) 
mini.texi(,357)   The completion commands display a list of all possible completions in
mini.texi(,358) a window whenever there is more than one possibility for the very next
mini.texi(,359) character.  Also, typing @kbd{?} explicitly requests such a list.  If
mini.texi(,360) the list of completions is long, you can scroll it with @kbd{C-M-v}
mini.texi(,361) (@pxref{Other Window}).
mini.texi(,362) 
mini.texi(,363) @node Completion Options,  , Strict Completion, Completion
mini.texi(,364) @subsection Completion Options
mini.texi(,365) 
mini.texi(,366) @vindex completion-ignored-extensions
mini.texi(,367)   When completion is done on file names, certain file names are usually
mini.texi(,368) ignored.  The variable @code{completion-ignored-extensions} contains a
mini.texi(,369) list of strings; a file whose name ends in any of those strings is
mini.texi(,370) ignored as a possible completion.  The standard value of this variable
mini.texi(,371) has several elements including @code{".o"}, @code{".elc"}, @code{".dvi"}
mini.texi(,372) and @code{"~"}.  The effect is that, for example, @samp{foo} can
mini.texi(,373) complete to @samp{foo.c} even though @samp{foo.o} exists as well.
mini.texi(,374) However, if @emph{all} the possible completions end in ``ignored''
mini.texi(,375) strings, then they are not ignored.  Ignored extensions do not apply to
mini.texi(,376) lists of completions---those always mention all possible completions.
mini.texi(,377) 
mini.texi(,378) @vindex completion-auto-help
mini.texi(,379)   If a completion command finds the next character is undetermined, it
mini.texi(,380) automatically displays a list of all possible completions.  If the variable
mini.texi(,381) @code{completion-auto-help} is set to @code{nil}, this does not happen,
mini.texi(,382) and you must type @kbd{?} to display the possible completions.
mini.texi(,383) 
mini.texi(,384) @vindex minibuffer-confirm-incomplete
mini.texi(,385) If the variable @code{minibuffer-confirm-incomplete} is set to @code{t},
mini.texi(,386) then in contexts where @code{completing-read} allows answers that are
mini.texi(,387) not valid completions, an extra @key{RET} must be typed to confirm the
mini.texi(,388) response.  This is helpful for catching typos.
mini.texi(,389) 
mini.texi(,390) @cindex Icomplete mode
mini.texi(,391)   Icomplete mode presents a constantly-updated display that tells you
mini.texi(,392) what completions are available for the text you've entered so far.  The
mini.texi(,393) command to enable or disable this minor mode is @kbd{M-x
mini.texi(,394) icomplete-mode}.
mini.texi(,395) 
mini.texi(,396) @node Minibuffer History, Repetition, Completion, Minibuffer
mini.texi(,397) @section Minibuffer History
mini.texi(,398) @cindex minibuffer history
mini.texi(,399) @cindex history of minibuffer input
mini.texi(,400) 
mini.texi(,401)   Every argument that you enter with the minibuffer is saved on a
mini.texi(,402) @dfn{minibuffer history list} so that you can use it again later in
mini.texi(,403) another argument.  Special commands load the text of an earlier argument
mini.texi(,404) in the minibuffer.  They discard the old minibuffer contents, so you can
mini.texi(,405) think of them as moving through the history of previous arguments.
mini.texi(,406) 
mini.texi(,407) @table @kbd
mini.texi(,408) @item @key{UP}
mini.texi(,409) @itemx M-p
mini.texi(,410) Move to the next earlier argument string saved in the minibuffer history
mini.texi(,411) (@code{previous-history-element}).
mini.texi(,412) @item @key{DOWN}
mini.texi(,413) @itemx M-n
mini.texi(,414) Move to the next later argument string saved in the minibuffer history
mini.texi(,415) (@code{next-history-element}).
mini.texi(,416) @item M-r @var{regexp} @key{RET}
mini.texi(,417) Move to an earlier saved argument in the minibuffer history that has a
mini.texi(,418) match for @var{regexp} (@code{previous-matching-history-element}).
mini.texi(,419) @item M-s @var{regexp} @key{RET}
mini.texi(,420) Move to a later saved argument in the minibuffer history that has a
mini.texi(,421) match for @var{regexp} (@code{next-matching-history-element}).
mini.texi(,422) @end table
mini.texi(,423) 
mini.texi(,424) @kindex M-p @r{(minibuffer history)}
mini.texi(,425) @kindex M-n @r{(minibuffer history)}
mini.texi(,426) @findex next-history-element
mini.texi(,427) @findex previous-history-element
mini.texi(,428)   The simplest way to reuse the saved arguments in the history list is
mini.texi(,429) to move through the history list one element at a time.  While in the
mini.texi(,430) minibuffer, use @kbd{M-p} or up-arrow (@code{previous-history-element})
mini.texi(,431) to ``move to'' the next earlier minibuffer input, and use @kbd{M-n} or
mini.texi(,432) down-arrow (@code{next-history-element}) to ``move to'' the next later
mini.texi(,433) input.
mini.texi(,434) 
mini.texi(,435)   The previous input that you fetch from the history entirely replaces
mini.texi(,436) the contents of the minibuffer.  To use it as the argument, exit the
mini.texi(,437) minibuffer as usual with @key{RET}.  You can also edit the text before
mini.texi(,438) you reuse it; this does not change the history element that you
mini.texi(,439) ``moved'' to, but your new argument does go at the end of the history
mini.texi(,440) list in its own right.
mini.texi(,441) 
mini.texi(,442)   For many minibuffer arguments there is a ``default'' value.  In some
mini.texi(,443) cases, the minibuffer history commands know the default value.  Then you
mini.texi(,444) can insert the default value into the minibuffer as text by using
mini.texi(,445) @kbd{M-n} to move ``into the future'' in the history.
mini.texi(,446) 
mini.texi(,447) @findex previous-matching-history-element
mini.texi(,448) @findex next-matching-history-element
mini.texi(,449) @kindex M-r @r{(minibuffer history)}
mini.texi(,450) @kindex M-s @r{(minibuffer history)}
mini.texi(,451)   There are also commands to search forward or backward through the
mini.texi(,452) history; they search for history elements that match a regular
mini.texi(,453) expression that you specify with the minibuffer.  @kbd{M-r}
mini.texi(,454) (@code{previous-matching-history-element}) searches older elements in
mini.texi(,455) the history, while @kbd{M-s} (@code{next-matching-history-element})
mini.texi(,456) searches newer elements.  By special dispensation, these commands can
mini.texi(,457) use the minibuffer to read their arguments even though you are already
mini.texi(,458) in the minibuffer when you issue them.  As with incremental searching,
mini.texi(,459) an uppercase letter in the regular expression makes the search
mini.texi(,460) case-sensitive (@pxref{Search Case}).
mini.texi(,461) 
mini.texi(,462)   All uses of the minibuffer record your input on a history list, but
mini.texi(,463) there are separate history lists for different kinds of arguments.  For
mini.texi(,464) example, there is a list for file names, used by all the commands that
mini.texi(,465) read file names.
mini.texi(,466) 
mini.texi(,467)   There are several other very specific history lists, including one for
mini.texi(,468) command names read by @kbd{M-x}, one for buffer names, one for arguments
mini.texi(,469) of commands like @code{query-replace}, and one for compilation commands
mini.texi(,470) read by @code{compile}.  Finally, there is one ``miscellaneous'' history
mini.texi(,471) list that most minibuffer arguments use.
mini.texi(,472) 
mini.texi(,473) @c Do wee need this?
mini.texi(,482) 
mini.texi(,483) @node Repetition,  , Minibuffer History, Minibuffer
mini.texi(,484) @section Repeating Minibuffer Commands
mini.texi(,485) @cindex command history
mini.texi(,486) @cindex history of commands
mini.texi(,487) 
mini.texi(,488)   Every command that uses the minibuffer at least once is recorded on a
mini.texi(,489) special history list, together with the values of its arguments, so that
mini.texi(,490) you can repeat the entire command.  In particular, every use of
mini.texi(,491) @kbd{M-x} is recorded there, since @kbd{M-x} uses the minibuffer to read
mini.texi(,492) the command name.
mini.texi(,493) 
mini.texi(,494) @findex list-command-history
mini.texi(,495) @c widecommands
mini.texi(,496) @table @kbd
mini.texi(,497) @item C-x @key{ESC} @key{ESC}
mini.texi(,498) Re-execute a recent minibuffer command (@code{repeat-complex-command}).
mini.texi(,499) @item M-p
mini.texi(,500) Within @kbd{C-x @key{ESC} @key{ESC}}, move to previous recorded command
mini.texi(,501) (@code{previous-history-element}).
mini.texi(,502) @item M-n
mini.texi(,503) Within @kbd{C-x @key{ESC} @key{ESC}}, move to the next (more recent)
mini.texi(,504) recorded command (@code{next-history-element}).
mini.texi(,505) @item M-x list-command-history
mini.texi(,506) Display the entire command history, showing all the commands
mini.texi(,507) @kbd{C-x @key{ESC} @key{ESC}} can repeat, most recent first.
mini.texi(,508) @end table
mini.texi(,509) 
mini.texi(,510) @kindex C-x ESC ESC
mini.texi(,511) @findex repeat-complex-command
mini.texi(,512)   @kbd{C-x @key{ESC} @key{ESC}} is used to re-execute a recent
mini.texi(,513) minibuffer-using command.  With no argument, it repeats the last such
mini.texi(,514) command.  A numeric argument specifies which command to repeat; one
mini.texi(,515) means the last one, and larger numbers specify earlier ones.
mini.texi(,516) 
mini.texi(,517)   @kbd{C-x @key{ESC} @key{ESC}} works by turning the previous command
mini.texi(,518) into a Lisp expression and then entering a minibuffer initialized with
mini.texi(,519) the text for that expression.  If you type just @key{RET}, the command
mini.texi(,520) is repeated as before.  You can also change the command by editing the
mini.texi(,521) Lisp expression.  Whatever expression you finally submit is what will be
mini.texi(,522) executed.  The repeated command is added to the front of the command
mini.texi(,523) history unless it is identical to the most recently executed command
mini.texi(,524) already there.
mini.texi(,525) 
mini.texi(,526)   Even if you don't understand Lisp syntax, it will probably be obvious
mini.texi(,527) which command is displayed for repetition.  If you do not change the text,
mini.texi(,528) you can be sure the command will repeat exactly as before.
mini.texi(,529) 
mini.texi(,530) @kindex M-n
mini.texi(,531) @kindex M-p
mini.texi(,532) @findex next-complex-command
mini.texi(,533) @findex previous-complex-command
mini.texi(,534)   If you are in the minibuffer for @kbd{C-x @key{ESC} @key{ESC}} and the
mini.texi(,535) command shown to you is not the one you want to repeat, you can move
mini.texi(,536) around the list of previous commands using @kbd{M-n} and @kbd{M-p}.
mini.texi(,537) @kbd{M-p} replaces the contents of the minibuffer with the next earlier
mini.texi(,538) recorded command, and @kbd{M-n} replaces it with the next later command.
mini.texi(,539) After finding the desired previous command, you can edit its expression
mini.texi(,540) and then resubmit it by typing @key{RET}.  Any editing you have done on
mini.texi(,541) the command to be repeated is lost if you use @kbd{M-n} or @kbd{M-p}.
mini.texi(,542) 
mini.texi(,543) @kbd{M-n} and @kbd{M-p} are specially defined within @kbd{C-x @key{ESC}
mini.texi(,544) @key{ESC}} to run the commands @code{previous-history-element} and
mini.texi(,545) @code{next-history-element}.
mini.texi(,546) 
mini.texi(,547) @vindex command-history
mini.texi(,548)   The list of previous commands using the minibuffer is stored as a Lisp
mini.texi(,549) list in the variable @code{command-history}.  Each element of the list
mini.texi(,550) is a Lisp expression which describes one command and its arguments.
mini.texi(,551) Lisp programs can reexecute a command by feeding the corresponding
mini.texi(,552) @code{command-history} element to @code{eval}.
m-x.texi(,1) 
m-x.texi(,2) @node M-x, Help, Minibuffer, Top
m-x.texi(,3) @chapter Running Commands by Name
m-x.texi(,4) 
m-x.texi(,5)   The Emacs commands that are used often or that must be quick to type are
m-x.texi(,6) bound to keys---short sequences of characters---for convenient use.  Other
m-x.texi(,7) Emacs commands that are used more rarely are not bound to keys; to run
m-x.texi(,8) them, you must refer to them by name.
m-x.texi(,9) 
m-x.texi(,10)   A command name consists, by convention, of one or more words,
m-x.texi(,11) separated by hyphens: for example, @code{auto-fill-mode} or
m-x.texi(,12) @code{manual-entry}.  The use of English words makes the command name
m-x.texi(,13) easier to remember than a key made up of obscure characters, even though
m-x.texi(,14) it results in more characters to type.  You can run any command by name,
m-x.texi(,15) even if it can be run by keys as well. 
m-x.texi(,16) 
m-x.texi(,17) @kindex M-x
m-x.texi(,18) @cindex minibuffer
m-x.texi(,19)  To run a command by name, start with @kbd{M-x}, then type the
m-x.texi(,20) command name, and finish with @key{RET}.  @kbd{M-x} uses the minibuffer
m-x.texi(,21) to read the command name.  @key{RET} exits the minibuffer and runs the
m-x.texi(,22) command.
m-x.texi(,23) 
m-x.texi(,24)   Emacs uses the minibuffer for reading input for many different purposes;
m-x.texi(,25) on this occasion, the string @samp{M-x} is displayed at the beginning of
m-x.texi(,26) the minibuffer as a @dfn{prompt} to remind you that your input should be
m-x.texi(,27) the name of a command to be run.  @xref{Minibuffer}, for full information
m-x.texi(,28) on the features of the minibuffer.
m-x.texi(,29) 
m-x.texi(,30)   You can use completion to enter a command name.  For example, to
m-x.texi(,31) invoke the command @code{forward-char}, type:
m-x.texi(,32) 
m-x.texi(,33) @example
m-x.texi(,34) M-x forward-char @key{RET}
m-x.texi(,35) @end example
m-x.texi(,36) or
m-x.texi(,37) @example
m-x.texi(,38) M-x fo @key{TAB} c @key{RET}
m-x.texi(,39) @end example
m-x.texi(,40) 
m-x.texi(,41) @noindent
m-x.texi(,42) After you type in @code{M-x fo TAB} emacs will give you a possible list of 
m-x.texi(,43) completions from which you can choose. Note that @code{forward-char} is the 
m-x.texi(,44) same command that you invoke with the key @kbd{C-f}.  You can call any 
m-x.texi(,45) command (interactively callable function) defined in Emacs by its name 
m-x.texi(,46) using @kbd{M-x} regardless of whether or not any keys are bound to it.
m-x.texi(,47) 
m-x.texi(,48)   If you type @kbd{C-g} while Emacs reads the command name, you cancel
m-x.texi(,49) the @kbd{M-x} command and get out of the minibuffer, ending up at top level.
m-x.texi(,50) 
m-x.texi(,51)   To pass a numeric argument to a command you are invoking with
m-x.texi(,52) @kbd{M-x}, specify the numeric argument before the @kbd{M-x}.  @kbd{M-x}
m-x.texi(,53) passes the argument along to the function that it calls.  The argument
m-x.texi(,54) value appears in the prompt while the command name is being read.
m-x.texi(,55) 
m-x.texi(,56) @findex interactive
m-x.texi(,57) You can use the command @code{M-x interactive} to specify a way of
m-x.texi(,58) parsing arguments for interactive use of a function.  For example, write:
m-x.texi(,59) 
m-x.texi(,60) @example
m-x.texi(,61)   (defun foo (arg) "Doc string" (interactive "p") ...use arg...)
m-x.texi(,62) @end example
m-x.texi(,63) 
m-x.texi(,64) to make @code{arg} be the prefix argument when @code{foo} is called as a
m-x.texi(,65) command.  The call to @code{interactive} is actually a declaration
m-x.texi(,66) rather than a function; it tells @code{call-interactively} how to read
m-x.texi(,67) arguments to pass to the function.  When actually called, @code{interactive}
m-x.texi(,68) returns @code{nil}.
m-x.texi(,69) 
m-x.texi(,70) The argument of @var{interactive} is usually a string containing a code
m-x.texi(,71) letter followed by a prompt.  Some code letters do not use I/O to get
m-x.texi(,72) the argument and do not need prompts.  To prompt for multiple arguments,
m-x.texi(,73) you must provide a code letter, its prompt, a newline, and another code
m-x.texi(,74) letter, and so forth.  If the argument is not a string, it is evaluated 
m-x.texi(,75) to get a list of arguments to pass to the function.  If you do not provide an
m-x.texi(,76) argument to @code{interactive}, no arguments are passed when calling
m-x.texi(,77) interactively.
m-x.texi(,78) 
m-x.texi(,79) Available code letters are:
m-x.texi(,80) 
m-x.texi(,81) @table @code
m-x.texi(,82) @item a
m-x.texi(,83) Function name: symbol with a function definition
m-x.texi(,84) @item b
m-x.texi(,85) Name of existing buffer
m-x.texi(,86) @item B
m-x.texi(,87) Name of buffer, possibly nonexistent
m-x.texi(,88) @item c
m-x.texi(,89) Character
m-x.texi(,90) @item C
m-x.texi(,91) Command name: symbol with interactive function definition
m-x.texi(,92) @item d
m-x.texi(,93) Value of point as number (does not do I/O)
m-x.texi(,94) @item D
m-x.texi(,95) Directory name
m-x.texi(,96) @item e
m-x.texi(,97) Last mouse event
m-x.texi(,98) @item f
m-x.texi(,99) Existing file name
m-x.texi(,100) @item F
m-x.texi(,101) Possibly nonexistent file name
m-x.texi(,102) @item k
m-x.texi(,103) Key sequence (string)
m-x.texi(,104) @item m
m-x.texi(,105) Value of mark as number (does not do I/O)
m-x.texi(,106) @item n
m-x.texi(,107) Number read using minibuffer
m-x.texi(,108) @item N
m-x.texi(,109) Prefix arg converted to number, or if none, do like code @code{n}
m-x.texi(,110) @item p
m-x.texi(,111) Prefix arg converted to number (does not do I/O)
m-x.texi(,112) @item P
m-x.texi(,113) Prefix arg in raw form (does not do I/O)
m-x.texi(,114) @item r
m-x.texi(,115) Region: point and mark as two numeric arguments, smallest first (does
m-x.texi(,116) not do I/O)
m-x.texi(,117) @item s
m-x.texi(,118) Any string
m-x.texi(,119) @item S
m-x.texi(,120) Any symbol
m-x.texi(,121) @item v
m-x.texi(,122) Variable name: symbol that is @code{user-variable-p}
m-x.texi(,123) @item x
m-x.texi(,124) Lisp expression read but not evaluated
m-x.texi(,125) @item X
m-x.texi(,126) Lisp expression read and evaluated
m-x.texi(,127) @end table
m-x.texi(,128) 
m-x.texi(,129) In addition, if the string begins with @samp{*}, an error is
m-x.texi(,130) signaled if the buffer is read-only.  This happens before reading any
m-x.texi(,131) arguments.  If the string begins with @samp{@@}, the window the mouse is
m-x.texi(,132) over is selected before anything else is done.  You may use both
m-x.texi(,133) @samp{@@} and @samp{*}; they are processed in the order that they appear.
m-x.texi(,134) 
m-x.texi(,135) Normally, when describing a command that is run by name, we omit the
m-x.texi(,136) @key{RET} that is needed to terminate the name.  Thus we may refer to
m-x.texi(,137) @kbd{M-x auto-fill-mode} rather than @kbd{M-x auto-fill-mode} @key{RET}.
m-x.texi(,138) We mention the @key{RET} only when it is necessary to emphasize its
m-x.texi(,139) presence, for example, when describing a sequence of input that contains
m-x.texi(,140) a command name and arguments that follow it.
m-x.texi(,141) 
m-x.texi(,142) @findex execute-extended-command
m-x.texi(,143)   @kbd{M-x} is defined to run the command @code{execute-extended-command},
m-x.texi(,144) which is responsible for reading the name of another command and invoking
m-x.texi(,145) it.
help.texi(,1) 
help.texi(,2) @node Help, Mark, M-x, Top
help.texi(,3) @chapter Help
help.texi(,4) @kindex Help
help.texi(,5) @cindex help
help.texi(,6) @cindex self-documentation
help.texi(,7) @findex help-command
help.texi(,8) @kindex C-h
help.texi(,9) @kindex F1
help.texi(,10) 
help.texi(,11)   XEmacs provides extensive help features accessible through a single
help.texi(,12) character, @kbd{C-h}.  @kbd{C-h} is a prefix key that is used only for
help.texi(,13) documentation-printing commands.  The characters that you can type after
help.texi(,14) @kbd{C-h} are called @dfn{help options}.  One help option is @kbd{C-h};
help.texi(,15) that is how you ask for help about using @kbd{C-h}.  To cancel, type
help.texi(,16) @kbd{C-g}.  The function key @key{F1} is equivalent to @kbd{C-h}.
help.texi(,17) 
help.texi(,18) @kindex C-h C-h
help.texi(,19) @findex help-for-help
help.texi(,20)   @kbd{C-h C-h} (@code{help-for-help}) displays a list of the possible
help.texi(,21) help options, and then asks you to type the desired option.  It prompts
help.texi(,22) with the string:
help.texi(,23) 
help.texi(,24) @smallexample
help.texi(,25) A B C F I K L M N P S T V W C-c C-d C-f C-i C-k C-n C-w;  ? for more help:
help.texi(,26) @end smallexample
help.texi(,27) 
help.texi(,28) @noindent
help.texi(,29) You should type one of those characters.
help.texi(,30) 
help.texi(,31)   Typing a third @kbd{C-h} displays a description of what the options mean;
help.texi(,32) Emacs still waits for you to type an option.  To cancel, type @kbd{C-g}.
help.texi(,33) 
help.texi(,34)   Most help buffers use a special major mode, Help mode, which lets you
help.texi(,35) scroll conveniently with @key{SPC} and @key{DEL} or @key{BS}.
help.texi(,36) 
help.texi(,37) @menu
help.texi(,38) * Help Summary::	Brief list of all Help commands.
help.texi(,39) * Key Help::		Asking what a key does in XEmacs.
help.texi(,40) * Name Help::		Asking about a command, variable or function name.
help.texi(,41) * Apropos::		Asking what pertains to a given topic.
help.texi(,42) * Library Keywords::	Finding Lisp libraries by keywords (topics).
help.texi(,43) * Help Mode::           Special features of Help mode and Help buffers.
help.texi(,44) * Misc Help::		Other help commands.
help.texi(,45) @end menu
help.texi(,46) 
help.texi(,51) @node Help Summary, Key Help, Help, Help
help.texi(,52) @section Help Summary
help.texi(,54) 
help.texi(,55)   Here is a summary of the defined help commands.
help.texi(,56) 
help.texi(,57) @table @kbd
help.texi(,58) @item C-h a @var{regexp} @key{RET}
help.texi(,59) Display a list of functions and variables whose names match @var{regexp}
help.texi(,60) (@code{hyper-apropos}).
help.texi(,61) @item C-h A @var{regexp}
help.texi(,62) Show all commands whose names contain matches for @var{regexp}
help.texi(,63) (@code{command-apropos}).
help.texi(,64) @item C-h b
help.texi(,65) Display a table of all key bindings currently in effect, with local
help.texi(,66) bindings of the current major mode first, followed by all global
help.texi(,67) bindings (@code{describe-bindings}).
help.texi(,68) @item C-h c @var{key}
help.texi(,69) Print the name of the command that @var{key} runs
help.texi(,70) (@code{describe-key-briefly}).  Here @kbd{c} stands for `character'.  For more
help.texi(,71) extensive information on @var{key}, use @kbd{C-h k}.
help.texi(,72) @item C-h d @var{function} @key{RET}
help.texi(,73) @itemx C-h f @var{function} @key{RET}
help.texi(,74) Display documentation on the Lisp function named @var{function}
help.texi(,75) (@code{describe-function}).  Since commands are Lisp functions,
help.texi(,76) a command name may be used.
help.texi(,77) @item C-h i
help.texi(,78) Run Info, the program for browsing documentation files (@code{info}).
help.texi(,79) The complete XEmacs manual is available online in Info.
help.texi(,80) @item C-h k @var{key}
help.texi(,81) Display the name and documentation of the command that @var{key} runs
help.texi(,82) (@code{describe-key}).
help.texi(,83) @item C-h l
help.texi(,84) Display a description of the last 100 characters you typed
help.texi(,85) (@code{view-lossage}).
help.texi(,86) @item C-h m
help.texi(,87) Display documentation of the current major mode (@code{describe-mode}).
help.texi(,88) @item C-h n
help.texi(,89) @itemx C-h C-n
help.texi(,90) Display documentation of XEmacs changes, most recent first
help.texi(,91) (@code{view-emacs-news}).
help.texi(,92) @item C-h p
help.texi(,93) Find packages by topic keyword (@code{finder-by-keyword}).
help.texi(,94) @item C-h C-p
help.texi(,95) Display a table of all mouse bindings currently in effect now, with
help.texi(,96) local bindings of the current major mode first, followed by all global
help.texi(,97) bindings (@code{describe-pointer}).
help.texi(,98) @item C-h s
help.texi(,99) Display current contents of the syntax table, plus an explanation of
help.texi(,100) what they mean (@code{describe-syntax}).  @xref{Syntax}.
help.texi(,101) @item C-h t
help.texi(,102) Enter the XEmacs interactive tutorial (@code{help-with-tutorial}).
help.texi(,103) @item C-h v @var{var} @key{RET}
help.texi(,104) Display the documentation of the Lisp variable @var{var}
help.texi(,105) (@code{describe-variable}).
help.texi(,106) @item C-h w @var{command} @key{RET}
help.texi(,107) Print which keys run the command named @var{command} (@code{where-is}).
help.texi(,108) @item C-h B @key{RET}
help.texi(,109) Display info on how to deal with Beta versions of XEmacs
help.texi(,110) (@code{describe-beta}).
help.texi(,111) @item C-h C @var{group} @key{RET}
help.texi(,112) Select customization buffer for @var{group} (@code{customize}).
help.texi(,113) @item C-h F @key{RET}
help.texi(,114) View the local copy of the XEmacs FAQ (@code{xemacs-local-faq}).
help.texi(,115) @item C-h C-i @var{file} @key{RET}
help.texi(,116) Read Info file @var{file} with Info browser (@code{Info-query}).
help.texi(,117) @item C-h C-c @var{command} @key{RET}
help.texi(,118) Look up an Emacs command @var{command} in the Emacs manual in the Info
help.texi(,119) system (@code{Info-goto-emacs-command-node}).
help.texi(,120) @item C-h C-f @var{function} @key{RET}
help.texi(,121) Look up an Emacs Lisp function @var{function} in the Elisp manual in the
help.texi(,122) Info system (@code{Info-elisp-ref}).
help.texi(,123) @end table
help.texi(,124) 
help.texi(,125) @node Key Help, Name Help, Help Summary, Help
help.texi(,126) @section Documentation for a Key
help.texi(,127) 
help.texi(,128) @kindex C-h c
help.texi(,129) @findex describe-key-briefly
help.texi(,130)   The most basic @kbd{C-h} options are @kbd{C-h c}
help.texi(,131) (@code{describe-key-briefly}) and @w{@kbd{C-h k}} (@code{describe-key}).
help.texi(,132) @kbd{C-h c @var{key}} prints in the echo area the name of the command
help.texi(,133) that @var{key} is bound to.  For example, @kbd{C-h c C-f} prints
help.texi(,134) @samp{forward-char}.  Since command names are chosen to describe what
help.texi(,135) the commands do, this is a good way to get a very brief description of
help.texi(,136) what @var{key} does.
help.texi(,137) 
help.texi(,138) @kindex C-h k
help.texi(,139) @findex describe-key
help.texi(,140)   @kbd{C-h k @var{key}} is similar to @kbd{C-h c} but gives more
help.texi(,141) information.  It displays the documentation string of the function
help.texi(,142) @var{key} is bound to as well as its name.  @var{key} is a string or
help.texi(,143) vector of events.  When called interactively, @var{key} may also be a menu
help.texi(,144) selection.  This information does not usually fit into the echo area, so a
help.texi(,145) window is used for the display.
help.texi(,146) 
help.texi(,147)   @kbd{C-h c} and @kbd{C-h k} work for any sort of key sequences,
help.texi(,148) including function keys and mouse events.
help.texi(,149) 
help.texi(,150) @node Name Help, Apropos, Key Help, Help
help.texi(,151) @section Help by Command or Variable Name
help.texi(,152) 
help.texi(,153) @kindex C-h f
help.texi(,154) @findex describe-function
help.texi(,155) @vindex describe-function-show-arglist
help.texi(,156)   @kbd{C-h f} (@code{describe-function}) reads the name of a Lisp
help.texi(,157) function using the minibuffer, then displays that function's
help.texi(,158) documentation string in a window.  Since commands are Lisp functions,
help.texi(,159) you can use the argument @var{function} to get the documentation of a
help.texi(,160) command that you know by name.  For example,
help.texi(,161) 
help.texi(,162) @example
help.texi(,163) C-h f auto-fill-mode @key{RET}
help.texi(,164) @end example
help.texi(,165) 
help.texi(,166) @noindent
help.texi(,167) displays the documentation for @code{auto-fill-mode}. Using @kbd{C-h f}
help.texi(,168) is the only way to see the documentation of a command that is not bound
help.texi(,169) to any key, that is, a command you would normally call using @kbd{M-x}.
help.texi(,170) If the variable @code{describe-function-show-arglist} is @code{t},
help.texi(,171) @code{describe-function} shows its arglist if the @var{function} is not
help.texi(,172) an autoload function.
help.texi(,173) 
help.texi(,174)   @kbd{C-h f} is also useful for Lisp functions that you are planning to
help.texi(,175) use in a Lisp program.  For example, if you have just written the
help.texi(,176) expression @code{(make-vector len)} and want to make sure you are using
help.texi(,177) @code{make-vector} properly, type @kbd{C-h f make-vector @key{RET}}.
help.texi(,178) Because @kbd{C-h f} allows all function names, not just command names,
help.texi(,179) you may find that some of your favorite abbreviations that work in
help.texi(,180) @kbd{M-x} don't work in @kbd{C-h f}.  An abbreviation may be unique
help.texi(,181) among command names, yet fail to be unique when other function names are
help.texi(,182) allowed.
help.texi(,183) 
help.texi(,184)   The function name for @kbd{C-h f} to describe has a default which is
help.texi(,185) used if you type @key{RET} leaving the minibuffer empty.  The default is
help.texi(,186) the function called by the innermost Lisp expression in the buffer
help.texi(,187) around point, @emph{provided} that is a valid, defined Lisp function
help.texi(,188) name.  For example, if point is located following the text
help.texi(,189) @samp{(make-vector (car x)}, the innermost list containing point is the
help.texi(,190) one that starts with @samp{(make-vector}, so the default is to describe the
help.texi(,191) function @code{make-vector}.
help.texi(,192) 
help.texi(,193)   @kbd{C-h f} is often useful just to verify that you have the right
help.texi(,194) spelling for the function name.  If @kbd{C-h f} mentions a name from the
help.texi(,195) buffer as the default, that name must be defined as a Lisp function.  If
help.texi(,196) that is all you want to know, just type @kbd{C-g} to cancel the @kbd{C-h
help.texi(,197) f} command, then go on editing.
help.texi(,198) 
help.texi(,199) @kindex C-h w
help.texi(,200) @findex where-is
help.texi(,201)   @kbd{C-h w @var{command} @key{RET}} (@code{where-is}) tells you what
help.texi(,202) keys are bound to @var{command}.  It prints a list of the keys in the
help.texi(,203) echo area. Alternatively, it informs you that a command is not bound to
help.texi(,204) any keys, which implies that you must use @kbd{M-x} to call the
help.texi(,205) command.
help.texi(,206) 
help.texi(,207) @kindex C-h v
help.texi(,208) @findex describe-variable
help.texi(,209)   @kbd{C-h v} (@code{describe-variable}) is like @kbd{C-h f} but
help.texi(,210) describes Lisp variables instead of Lisp functions.  Its default is the
help.texi(,211) Lisp symbol around or before point, if that is the name of a known Lisp
help.texi(,212) variable.  @xref{Variables}.
help.texi(,213) 
help.texi(,214) @node Apropos, Library Keywords, Name Help, Help
help.texi(,215) @section Apropos
help.texi(,216) 
help.texi(,217) @kindex C-h A
help.texi(,218) @findex command-apropos
help.texi(,219) @cindex apropos
help.texi(,220) 
help.texi(,221) @table @kbd
help.texi(,222) @item C-h A
help.texi(,223) Show only symbols that are names of commands
help.texi(,224) (@code{command-apropos}).
help.texi(,225) 
help.texi(,226) @item M-x apropos @var{regexp}
help.texi(,227) Show all symbols whose names contain matches for @var{regexp}.
help.texi(,228) @end table
help.texi(,229) 
help.texi(,230)   A more sophisticated sort of question to ask is, ``What are the
help.texi(,231) commands for working with files?''  To ask this question, type @kbd{C-h
help.texi(,232) a file @key{RET}}, which displays a list of all command names that
help.texi(,233) contain @samp{file}, including @code{copy-file}, @code{find-file}, and
help.texi(,234) so on.  With each command name appears a brief description of how to use
help.texi(,235) the command, and what keys you can currently invoke it with.  For
help.texi(,236) example, it would say that you can invoke @code{find-file} by typing
help.texi(,237) @kbd{C-x C-f}.  The @kbd{A} in @kbd{C-h A} stands for `Apropos';
help.texi(,238) @kbd{C-h A} runs the command @code{command-apropos}.  This command
help.texi(,239) normally checks only commands (interactive functions); if you specify a
help.texi(,240) prefix argument, it checks noninteractive functions as well.
help.texi(,241) 
help.texi(,242)   Because @kbd{C-h A} looks only for functions whose names contain the
help.texi(,243) string you specify, you must use ingenuity in choosing the string.  If
help.texi(,244) you are looking for commands for killing backwards and @kbd{C-h a
help.texi(,245) kill-backwards @key{RET}} doesn't reveal any, don't give up.  Try just
help.texi(,246) @kbd{kill}, or just @kbd{backwards}, or just @kbd{back}.  Be persistent.
help.texi(,247) Pretend you are playing Adventure.  Also note that you can use a regular
help.texi(,248) expression as the argument, for more flexibility (@pxref{Regexps}).
help.texi(,249) 
help.texi(,250)   Here is a set of arguments to give to @kbd{C-h a} that covers many
help.texi(,251) classes of XEmacs commands, since there are strong conventions for
help.texi(,252) naming the standard XEmacs commands.  By giving you a feel for the
help.texi(,253) naming conventions, this set should also serve to aid you in developing
help.texi(,254) a technique for picking @code{apropos} strings.
help.texi(,255) 
help.texi(,256) @quotation
help.texi(,257) char, line, word, sentence, paragraph, region, page, sexp, list, defun,
help.texi(,258) rect, buffer, frame, window, face, file, dir, register, mode, beginning,
help.texi(,259) end, forward, backward, next, previous, up, down, search, goto, kill,
help.texi(,260) delete, mark, insert, yank, fill, indent, case, change, set, what, list,
help.texi(,261) find, view, describe, default.
help.texi(,262) @end quotation
help.texi(,263) 
help.texi(,264) @findex apropos
help.texi(,265)   To list all Lisp symbols that contain a match for a regexp, not just
help.texi(,266) the ones that are defined as commands, use the command @kbd{M-x apropos}
help.texi(,267) instead of @kbd{C-h A}.  This command does not check key bindings by
help.texi(,268) default; specify a numeric argument if you want it to check them.
help.texi(,269) 
help.texi(,270) @findex apropos-documentation
help.texi(,271)   The @code{apropos-documentation} command is like @code{apropos} except
help.texi(,272) that it searches documentation strings for matches for the specified
help.texi(,273) regular expression.
help.texi(,274) 
help.texi(,275) @findex apropos-value
help.texi(,276)   The @code{apropos-value} command is like @code{apropos} except that it
help.texi(,277) searches symbols' values for matches for the specified regular
help.texi(,278) expression.  This command does not check function definitions or
help.texi(,279) property lists by default; specify a numeric argument if you want it to
help.texi(,280) check them.
help.texi(,281) 
help.texi(,282) @vindex apropos-do-all
help.texi(,283)   If the variable @code{apropos-do-all} is non-@code{nil}, the commands
help.texi(,284) above all behave as if they had been given a prefix argument.
help.texi(,285) 
help.texi(,286)   If you want more information about a function definition, variable or
help.texi(,287) symbol property listed in the Apropos buffer, you can click on it with
help.texi(,288) @kbd{Mouse-2} or move there and type @key{RET}.
help.texi(,289) 
help.texi(,290) @node Library Keywords, Help Mode, Apropos, Help
help.texi(,291) @section Keyword Search for Lisp Libraries
help.texi(,292) 
help.texi(,293) @kindex C-h p
help.texi(,294) @findex finder-by-keyword
help.texi(,295) The @kbd{C-h p} command lets you search the standard Emacs Lisp
help.texi(,296) libraries by topic keywords.  Here is a partial list of keywords you can
help.texi(,297) use:
help.texi(,298) 
help.texi(,299) @display
help.texi(,300) abbrev        abbreviation handling, typing shortcuts, macros
help.texi(,301) bib           code related to the `bib' bibliography processor
help.texi(,302) c             C, C++, and Objective-C language support
help.texi(,303) calendar      calendar and time management support
help.texi(,304) comm          communications, networking, remote access to files
help.texi(,305) data          support for editing files of data
help.texi(,306) docs          support for Emacs documentation
help.texi(,307) dumped        files preloaded into Emacs
help.texi(,308) emulations    emulations of other editors
help.texi(,309) extensions    Emacs Lisp language extensions
help.texi(,310) faces         support for multiple fonts
help.texi(,311) frames        support for Emacs frames and window systems
help.texi(,312) games         games, jokes and amusements
help.texi(,313) hardware      support for interfacing with exotic hardware
help.texi(,314) help          support for on-line help systems
help.texi(,315) hypermedia    support for links between text or other media types
help.texi(,316) i18n          internationalization and alternate character-set support
help.texi(,317) internal      code for Emacs internals, build process, defaults
help.texi(,318) languages     specialized modes for editing programming languages
help.texi(,319) lisp          Lisp support, including Emacs Lisp
help.texi(,320) local         code local to your site
help.texi(,321) maint         maintenance aids for the Emacs development group
help.texi(,322) mail          modes for electronic-mail handling
help.texi(,323) matching      various sorts of searching and matching
help.texi(,324) mouse         mouse support
help.texi(,325) mule          multi-language extensions
help.texi(,326) news          support for netnews reading and posting
help.texi(,327) oop           support for object-oriented programming
help.texi(,328) outlines      support for hierarchical outlining
help.texi(,329) processes     process, subshell, compilation, and job control support
help.texi(,330) terminals     support for terminal types
help.texi(,331) tex           code related to the TeX formatter
help.texi(,332) tools         programming tools
help.texi(,333) unix          front-ends/assistants for, or emulators of, UNIX features
help.texi(,334) vms           support code for vms
help.texi(,335) wp            word processing
help.texi(,336) @end display
help.texi(,337) 
help.texi(,338) @node Help Mode, Misc Help, Library Keywords, Help
help.texi(,339) @section Help Mode Commands
help.texi(,340) 
help.texi(,341)   Help buffers provide the commands of View mode (@pxref{Misc File
help.texi(,342) Ops}), plus a few special commands of their own.
help.texi(,343) 
help.texi(,344) @table @kbd
help.texi(,345) @item @key{SPC}
help.texi(,346) Scroll forward.
help.texi(,347) @item @key{DEL}
help.texi(,348) @itemx @key{BS}
help.texi(,349) Scroll backward.
help.texi(,350) @c @item @key{RET}
help.texi(,351) @c Follow a cross reference at point.
help.texi(,352) @c @item @key{TAB}
help.texi(,353) @c Move point forward to the next cross reference.
help.texi(,354) @c @item S-@key{TAB}
help.texi(,355) @c Move point back to the previous cross reference.
help.texi(,356) @c @item Mouse-2
help.texi(,357) @c Follow a cross reference that you click on.
help.texi(,358) @end table
help.texi(,359) 
help.texi(,360)   When a command name (@pxref{M-x,, Running Commands by Name}) or
help.texi(,361) variable name (@pxref{Variables}) appears in the documentation, it
help.texi(,362) normally appears inside paired single-quotes.
help.texi(,363) 
help.texi(,364) @node Misc Help,  , Help Mode, Help
help.texi(,365) @section Other Help Commands
help.texi(,366) 
help.texi(,367) @kindex C-h i
help.texi(,368) @findex info
help.texi(,369) @cindex Info
help.texi(,370) @cindex manuals, on-line
help.texi(,371) @cindex on-line manuals
help.texi(,372)   @kbd{C-h i} (@code{info}) runs the Info program, which is used for
help.texi(,373) browsing through structured documentation files.  The entire XEmacs manual
help.texi(,374) is available within Info.  Eventually all the documentation of the GNU
help.texi(,375) system will be available.  Type @kbd{h} after entering Info to run
help.texi(,376) a tutorial on using Info.
help.texi(,377) 
help.texi(,378)   If you specify a numeric argument, @kbd{C-h i} prompts for the name of
help.texi(,379) a documentation file.  This way, you can browse a file which doesn't
help.texi(,380) have an entry in the top-level Info menu.  It is also handy when you
help.texi(,381) need to get to the documentation quickly, and you know the exact name of
help.texi(,382) the file.
help.texi(,383) 
help.texi(,384) @kindex C-h C-f
help.texi(,385) @kindex C-h C-k
help.texi(,386) @findex Info-elisp-ref
help.texi(,387) @findex Info-goto-emacs-command-node
help.texi(,388)   There are two special help commands for accessing XEmacs documentation
help.texi(,389) through Info.  @kbd{C-h C-f @var{function} @key{RET}} enters Info and
help.texi(,390) goes straight to the documentation of the XEmacs function
help.texi(,391) @var{function}.  @kbd{C-h C-k @var{key}} enters Info and goes straight
help.texi(,392) to the documentation of the key @var{key}.  These two keys run the
help.texi(,393) commands @code{Info-elisp-ref} and
help.texi(,394) @code{Info-goto-emacs-key-command-node}.
help.texi(,395) 
help.texi(,396) @kindex C-h l
help.texi(,397) @findex view-lossage
help.texi(,398)   If something surprising happens, and you are not sure what commands you
help.texi(,399) typed, use @kbd{C-h l} (@code{view-lossage}).  @kbd{C-h l} prints the last
help.texi(,400) 100 command characters you typed in.  If you see commands that you don't
help.texi(,401) know, you can use @kbd{C-h c} to find out what they do.
help.texi(,402) 
help.texi(,403) @kindex C-h m
help.texi(,404) @findex describe-mode
help.texi(,405)   XEmacs has several major modes.  Each mode redefines a few keys and
help.texi(,406) makes a few other changes in how editing works.  @kbd{C-h m}
help.texi(,407) (@code{describe-mode}) prints documentation on the current major mode,
help.texi(,408) which normally describes all the commands that are changed in this mode.
help.texi(,409) 
help.texi(,410) @kindex C-h b
help.texi(,411) @findex describe-bindings
help.texi(,412)   @kbd{C-h b} (@code{describe-bindings}) and @kbd{C-h s}
help.texi(,413) (@code{describe-syntax}) present information about the current XEmacs
help.texi(,414) mode that is not covered by @kbd{C-h m}.  @kbd{C-h b} displays a list of
help.texi(,415) all the key bindings currently in effect, with the local bindings of the
help.texi(,416) current major mode first, followed by the global bindings (@pxref{Key
help.texi(,417) Bindings}).  @kbd{C-h s} displays the contents of the syntax table with
help.texi(,418) explanations of each character's syntax (@pxref{Syntax}).
help.texi(,419) 
help.texi(,420)   You can get a similar list for a particular prefix key by typing
help.texi(,421) @kbd{C-h} after the prefix key.  (There are a few prefix keys for which
help.texi(,422) this does not work---those that provide their own bindings for
help.texi(,423) @kbd{C-h}.  One of these is @key{ESC}, because @kbd{@key{ESC} C-h} is
help.texi(,424) actually @kbd{C-M-h}, which marks a defun.)
help.texi(,425) 
help.texi(,426) @kindex C-h F
help.texi(,427) @findex xemacs-local-faq
help.texi(,428) @kindex C-h n
help.texi(,429) @findex view-emacs-news
help.texi(,430) @kindex C-h t
help.texi(,431) @findex help-with-tutorial
help.texi(,432) @kindex C-h C-c
help.texi(,433) @findex describe-copying
help.texi(,434) @kindex C-h C-d
help.texi(,435) @findex describe-distribution
help.texi(,436) @kindex C-h C-w
help.texi(,437) @findex describe-no-warranty
help.texi(,438)   The other @kbd{C-h} options display various files of useful
help.texi(,439) information.  @kbd{C-h C-w} (@code{describe-no-warranty}) displays the
help.texi(,440) full details on the complete absence of warranty for XEmacs.  @kbd{C-h
help.texi(,441) n} (@code{view-emacs-news}) displays the file @file{xemacs/etc/NEWS},
help.texi(,442) which contains documentation on XEmacs changes arranged chronologically.
help.texi(,443) @kbd{C-h F} (@code{xemacs-local-faq}) displays local version of the
help.texi(,444) XEmacs frequently-answered-questions-list.  @kbd{C-h t}
help.texi(,445) (@code{help-with-tutorial}) displays the learn-by-doing XEmacs
help.texi(,446) tutorial. @kbd{C-h C-c} (@code{describe-copying}) displays the file
help.texi(,447) @file{xemacs/etc/COPYING}, which tells you the conditions you must obey
help.texi(,448) in distributing copies of XEmacs.  @kbd{C-h C-d}
help.texi(,449) (@code{describe-distribution}) displays another file named
help.texi(,450) @file{xemacs/etc/DISTRIB}, which tells you how you can order a copy of
help.texi(,451) the latest version of XEmacs.
mark.texi(,1) 
mark.texi(,2) @node Mark, Mouse Selection, Help, Top
mark.texi(,3) @chapter Selecting Text
mark.texi(,4) @cindex mark
mark.texi(,5) @cindex region
mark.texi(,6) 
mark.texi(,7)   Many Emacs commands operate on an arbitrary contiguous
mark.texi(,8) part of the current buffer. You can select text in two ways:
mark.texi(,9) 
mark.texi(,10) @itemize @bullet
mark.texi(,11) @item
mark.texi(,12) You use special keys to select text by defining a region between point
mark.texi(,13) and the mark. 
mark.texi(,14) @item
mark.texi(,15) If you are running XEmacs under X, you can also select text
mark.texi(,16) with the mouse. 
mark.texi(,17) @end itemize
mark.texi(,18) 
mark.texi(,19) @section The Mark and the Region
mark.texi(,20)  To specify the text for a command to operate on, set @dfn{the
mark.texi(,21) mark} at one end of it, and move point to the other end.  The text
mark.texi(,22) between point and the mark is called @dfn{the region}.  You can move
mark.texi(,23) point or the mark to adjust the boundaries of the region.  It doesn't
mark.texi(,24) matter which one is set first chronologically, or which one comes
mark.texi(,25) earlier in the text.
mark.texi(,26)   
mark.texi(,27)   Once the mark has been set, it remains until it is set again at
mark.texi(,28) another place.  The mark remains fixed with respect to the preceding
mark.texi(,29) character if text is inserted or deleted in a buffer.  Each Emacs
mark.texi(,30) buffer has its own mark; when you return to a buffer that had been
mark.texi(,31) selected previously, it has the same mark it had before.
mark.texi(,32) 
mark.texi(,33)   Many commands that insert text, such as @kbd{C-y} (@code{yank}) and
mark.texi(,34) @kbd{M-x insert-buffer}, position the mark at one end of the inserted
mark.texi(,35) text---the opposite end from where point is positioned, so that the region
mark.texi(,36) contains the text just inserted.
mark.texi(,37) 
mark.texi(,38)   Aside from delimiting the region, the mark is useful for marking
mark.texi(,39) a spot that you may want to go back to.  To make this feature more useful,
mark.texi(,40) Emacs remembers 16 previous locations of the mark in the @code{mark ring}.
mark.texi(,41) 
mark.texi(,42) @menu
mark.texi(,43) * Setting Mark::	Commands to set the mark.
mark.texi(,44) * Using Region::	Summary of ways to operate on contents of the region.
mark.texi(,45) * Marking Objects::	Commands to put region around textual units.
mark.texi(,46) * Mark Ring::   	Previous mark positions saved so you can go back there.
mark.texi(,47) @end menu
mark.texi(,48) 
mark.texi(,49) @node Setting Mark, Using Region, Mark, Mark
mark.texi(,50) @subsection Setting the Mark
mark.texi(,51) 
mark.texi(,52)   Here are some commands for setting the mark:
mark.texi(,53) 
mark.texi(,54) @c WideCommands
mark.texi(,55) @table @kbd
mark.texi(,56) @item C-@key{SPC}
mark.texi(,57) Set the mark where point is (@code{set-mark-command}).
mark.texi(,58) @item C-@@
mark.texi(,59) The same.
mark.texi(,60) @item C-x C-x
mark.texi(,61) Interchange mark and point (@code{exchange-point-and-mark}).
mark.texi(,62) @item C-<
mark.texi(,63) Pushes a mark at the beginning of the buffer.
mark.texi(,64) @item C->
mark.texi(,65) Pushes a mark at the end of the buffer.
mark.texi(,66) @end table
mark.texi(,67) 
mark.texi(,68)   For example, to convert part of the buffer to all
mark.texi(,69) upper-case, you can use the @kbd{C-x C-u} (@code{upcase-region})
mark.texi(,70) command, which operates on the text in the region.  First go to the
mark.texi(,71) beginning of the text you want to capitalize and type @kbd{C-@key{SPC}} to
mark.texi(,72) put the mark there, then move to the end, and then type @kbd{C-x C-u} to
mark.texi(,73) capitalize the selected region.  You can also set the mark at the end of the
mark.texi(,74) text, move to the beginning, and then type @kbd{C-x C-u}.  Most commands
mark.texi(,75) that operate on the text in the region have the word @code{region} in
mark.texi(,76) their names.
mark.texi(,77) 
mark.texi(,78) @kindex C-SPC
mark.texi(,79) @findex set-mark-command
mark.texi(,80)   The most common way to set the mark is with the @kbd{C-@key{SPC}}
mark.texi(,81) command (@code{set-mark-command}).  This command sets the mark where
mark.texi(,82) point is. You can then move point away, leaving the mark behind.  It is
mark.texi(,83) actually incorrect to speak of the character @kbd{C-@key{SPC}}; there is
mark.texi(,84) no such character.  When you type @key{SPC} while holding down
mark.texi(,85) @key{CTRL}, you get the character @kbd{C-@@} on most terminals. This
mark.texi(,86) character is actually bound to @code{set-mark-command}.  But unless you are
mark.texi(,87) unlucky enough to have a terminal where typing @kbd{C-@key{SPC}} does
mark.texi(,88) not produce @kbd{C-@@}, you should think of this character as
mark.texi(,89) @kbd{C-@key{SPC}}.
mark.texi(,90) 
mark.texi(,91) @kindex C-x C-x
mark.texi(,92) @findex exchange-point-and-mark
mark.texi(,93)   Since terminals have only one cursor, Emacs cannot show you where the
mark.texi(,94) mark is located. Most people use the mark soon after they set it, before
mark.texi(,95) they forget where it is. But you can see where the mark is with the
mark.texi(,96) command @kbd{C-x C-x} (@code{exchange-point-and-mark}) which puts the
mark.texi(,97) mark where point was and point where the mark was.  The extent of the
mark.texi(,98) region is unchanged, but the cursor and point are now at the previous
mark.texi(,99) location of the mark. 
mark.texi(,100) 
mark.texi(,101) @kindex C-<
mark.texi(,102) @kindex C->
mark.texi(,103) @findex mark-beginning-of-buffer
mark.texi(,104) @findex mark-end-of-buffer
mark.texi(,105)  Another way to set the mark is to push the mark to the beginning of a
mark.texi(,106) buffer while leaving point at its original location. If you supply an
mark.texi(,107) argument to @kbd{C-<} (@code{mark-beginning-of-buffer}), the mark is pushed
mark.texi(,108) @var{n}/10 of the way from the true beginning of the buffer. You can
mark.texi(,109) also set the mark at the end of a buffer with @kbd{C->}
mark.texi(,110) (@code{mark-end-of-buffer}). It pushes the mark to the end of the buffer, 
mark.texi(,111) leaving point alone. Supplying an argument to the command pushes the mark
mark.texi(,112) @var{n}/10 of the way from the true end of the buffer.
mark.texi(,113) 
mark.texi(,114) If you are using XEmacs under the X window system, you can set
mark.texi(,115) the variable @code{zmacs-regions} to @code{t}. This makes the current
mark.texi(,116) region (defined by point and mark) highlight and makes it available as
mark.texi(,117) the X clipboard selection, which means you can use the menu bar items on
mark.texi(,118) it.  @xref{Active Regions}, for more information.
mark.texi(,119)  
mark.texi(,120)   @kbd{C-x C-x} is also useful when you are satisfied with the location of
mark.texi(,121) point but want to move the mark; do @kbd{C-x C-x} to put point there and
mark.texi(,122) then you can move it.  A second use of @kbd{C-x C-x}, if necessary, puts
mark.texi(,123) the mark at the new location with point back at its original location.
mark.texi(,124) 
mark.texi(,125) @node Using Region, Marking Objects, Setting Mark, Mark
mark.texi(,126) @subsection Operating on the Region
mark.texi(,127) 
mark.texi(,128)   Once you have created an active region, you can do many things to
mark.texi(,129) the text in it:
mark.texi(,130) @itemize @bullet
mark.texi(,131) @item
mark.texi(,132) Kill it with @kbd{C-w} (@pxref{Killing}).
mark.texi(,133) @item
mark.texi(,134) Save it in a register with @kbd{C-x r s} (@pxref{Registers}).
mark.texi(,135) @item
mark.texi(,136) Save it in a buffer or a file (@pxref{Accumulating Text}).
mark.texi(,137) @item
mark.texi(,138) Convert case with @kbd{C-x C-l} or @kbd{C-x C-u} @*(@pxref{Case}).
mark.texi(,139) @item
mark.texi(,140) Evaluate it as Lisp code with @kbd{M-x eval-region} (@pxref{Lisp Eval}).
mark.texi(,141) @item
mark.texi(,142) Fill it as text with @kbd{M-q} (@pxref{Filling}).
mark.texi(,143) @item
mark.texi(,144) Print hardcopy with @kbd{M-x print-region} (@pxref{Hardcopy}).
mark.texi(,145) @item
mark.texi(,146) Indent it with @kbd{C-x @key{TAB}} or @kbd{C-M-\} (@pxref{Indentation}).
mark.texi(,147) @end itemize
mark.texi(,148) 
mark.texi(,149) @node Marking Objects, Mark Ring, Using Region, Mark
mark.texi(,150) @subsection Commands to Mark Textual Objects
mark.texi(,151) 
mark.texi(,152)   There are commands for placing point and the mark around a textual
mark.texi(,153) object such as a word, list, paragraph or page.
mark.texi(,154)  
mark.texi(,155) @table @kbd
mark.texi(,156) @item M-@@
mark.texi(,157) Set mark after end of next word (@code{mark-word}).  This command and
mark.texi(,158) the following one do not move point.
mark.texi(,159) @item C-M-@@
mark.texi(,160) Set mark after end of next Lisp expression (@code{mark-sexp}).
mark.texi(,161) @item M-h
mark.texi(,162) Put region around current paragraph (@code{mark-paragraph}).
mark.texi(,163) @item C-M-h
mark.texi(,164) Put region around current Lisp defun (@code{mark-defun}).
mark.texi(,165) @item C-x h
mark.texi(,166) Put region around entire buffer (@code{mark-whole-buffer}).
mark.texi(,167) @item C-x C-p
mark.texi(,168) Put region around current page (@code{mark-page}).
mark.texi(,169) @end table
mark.texi(,170) 
mark.texi(,171) @kindex M-@@
mark.texi(,172) @kindex C-M-@@
mark.texi(,173) @findex mark-word
mark.texi(,174) @findex mark-sexp
mark.texi(,175) @kbd{M-@@} (@code{mark-word}) puts the mark at the end of the next word,
mark.texi(,176) while @kbd{C-M-@@} (@code{mark-sexp}) puts it at the end of the next Lisp
mark.texi(,177) expression. These characters sometimes save you some typing.
mark.texi(,178) 
mark.texi(,179) @kindex M-h
mark.texi(,180) @kindex C-M-h
mark.texi(,181) @kindex C-x C-p
mark.texi(,182) @kindex C-x h
mark.texi(,183) @findex mark-paragraph
mark.texi(,184) @findex mark-defun
mark.texi(,185) @findex mark-page
mark.texi(,186) @findex mark-whole-buffer
mark.texi(,187)    A number of commands are available that set both point and mark and
mark.texi(,188) thus delimit an object in the buffer.  @kbd{M-h} (@code{mark-paragraph})
mark.texi(,189) moves point to the beginning of the paragraph that surrounds or follows
mark.texi(,190) point, and puts the mark at the end of that paragraph
mark.texi(,191) (@pxref{Paragraphs}).  You can then indent, case-convert, or kill the
mark.texi(,192) whole paragraph.  In the same fashion, @kbd{C-M-h} (@code{mark-defun})
mark.texi(,193) puts point before and the mark after the current or following defun
mark.texi(,194) (@pxref{Defuns}).  @kbd{C-x C-p} (@code{mark-page}) puts point before
mark.texi(,195) the current page (or the next or previous, depending on the argument),
mark.texi(,196) and mark at the end (@pxref{Pages}).  The mark goes after the
mark.texi(,197) terminating page delimiter (to include it), while point goes after the
mark.texi(,198) preceding page delimiter (to exclude it).  Finally, @kbd{C-x h}
mark.texi(,199) (@code{mark-whole-buffer}) sets up the entire buffer as the region by
mark.texi(,200) putting point at the beginning and the mark at the end.
mark.texi(,201) 
mark.texi(,202) @node Mark Ring,, Marking Objects, Mark
mark.texi(,203) @subsection The Mark Ring
mark.texi(,204) 
mark.texi(,205) @kindex C-u C-SPC
mark.texi(,206) @cindex mark ring
mark.texi(,207) @kindex C-u C-@@
mark.texi(,208)   Aside from delimiting the region, the mark is also useful for marking
mark.texi(,209) a spot that you may want to go back to.  To make this feature more
mark.texi(,210) useful, Emacs remembers 16 previous locations of the mark in the
mark.texi(,211) @dfn{mark ring}.  Most commands that set the mark push the old mark onto
mark.texi(,212) this ring.  To return to a marked location, use @kbd{C-u C-@key{SPC}}
mark.texi(,213) (or @kbd{C-u C-@@}); this is the command @code{set-mark-command} given a
mark.texi(,214) numeric argument.  The command moves point to where the mark was, and
mark.texi(,215) restores the mark from the ring of former marks. Repeated use of this
mark.texi(,216) command moves point to all the old marks on the ring, one by one.
mark.texi(,217) The marks you have seen go to the end of the ring, so no marks are lost.
mark.texi(,218) 
mark.texi(,219)   Each buffer has its own mark ring.  All editing commands use the current
mark.texi(,220) buffer's mark ring.  In particular, @kbd{C-u C-@key{SPC}} always stays in
mark.texi(,221) the same buffer.
mark.texi(,222) 
mark.texi(,223)   Many commands that can move long distances, such as @kbd{M-<}
mark.texi(,224) (@code{beginning-of-buffer}), start by setting the mark and saving the
mark.texi(,225) old mark on the mark ring.  This makes it easier for you to move back
mark.texi(,226) later.  Searches set the mark, unless they do not actually move point.
mark.texi(,227) When a command sets the mark, @samp{Mark Set} is printed in the
mark.texi(,228) echo area.
mark.texi(,229) 
mark.texi(,230) @vindex mark-ring-max
mark.texi(,231)   The variable @code{mark-ring-max} is the maximum number of entries to
mark.texi(,232) keep in the mark ring.  If that many entries exist and another entry is
mark.texi(,233) added, the last entry in the list is discarded.  Repeating @kbd{C-u
mark.texi(,234) C-@key{SPC}} circulates through the entries that are currently in the
mark.texi(,235) ring.
mark.texi(,236) 
mark.texi(,237) @vindex mark-ring
mark.texi(,238)   The variable @code{mark-ring} holds the mark ring itself, as a list of
mark.texi(,239) marker objects in the order most recent first.  This variable is local
mark.texi(,240) in every buffer.
mouse.texi(,1) 
mouse.texi(,2) @node Mouse Selection, Additional Mouse Operations, Mark, Top
mouse.texi(,3) @comment  node-name,  next,  previous,  up
mouse.texi(,4) @section Selecting Text with the Mouse
mouse.texi(,5) @cindex mouse selection
mouse.texi(,6) 
mouse.texi(,7) @cindex pointer shapes
mouse.texi(,8)   If you are using XEmacs under X, you can use the mouse pointer
mouse.texi(,9) to select text. (The normal mouse pointer is an I-beam, the same
mouse.texi(,10) pointer that @code{xterm} uses.)
mouse.texi(,11) 
mouse.texi(,12) @vindex modeline-pointer-glyph
mouse.texi(,13) @vindex nontext-pointer-glyph
mouse.texi(,14) @vindex text-pointer-glyph
mouse.texi(,15) The glyph variable @code{text-pointer-glyph} controls the shape of
mouse.texi(,16) the mouse pointer when over text.  You can also control the shape
mouse.texi(,17) of the mouse pointer when over nontext using @code{nontext-pointer-glyph},
mouse.texi(,18) and the shape of the mouse pointer when over the modeline using
mouse.texi(,19) @code{modeline-pointer-glyph}. (Remember, you should use
mouse.texi(,20) @code{set-glyph-image}, not @code{setq}, to set one of these
mouse.texi(,21) variables.)
mouse.texi(,22) 
mouse.texi(,23) @cindex pointer face
mouse.texi(,24) If you want to get fancy, you can set the foreground and background
mouse.texi(,25) colors of the mouse pointer by setting the @code{pointer} face.
mouse.texi(,26) 
mouse.texi(,27) There are two ways to select a region of text with the mouse:
mouse.texi(,28) 
mouse.texi(,29)   To select a word in text, double-click with the left mouse button
mouse.texi(,30) while the mouse cursor is over the word.  The word is highlighted when
mouse.texi(,31) selected. On monochrome monitors, a stippled background indicates that a
mouse.texi(,32) region of text has been highlighted. On color monitors, a color
mouse.texi(,33) background indicates highlighted text. You can triple-click to select
mouse.texi(,34) whole lines. 
mouse.texi(,35) 
mouse.texi(,36) To select an arbitrary region of text:
mouse.texi(,37) 
mouse.texi(,38) @enumerate
mouse.texi(,39) @item
mouse.texi(,40) Move the mouse cursor over the character at the beginning of the region of
mouse.texi(,41) text you want to select.
mouse.texi(,42) @item
mouse.texi(,43) Press and hold the left mouse button. 
mouse.texi(,44) @item
mouse.texi(,45) While holding the left mouse button down, drag the cursor to the
mouse.texi(,46) character at the end of the region of text you want to select.
mouse.texi(,47) @item
mouse.texi(,48) Release the left mouse button.
mouse.texi(,49) @end enumerate
mouse.texi(,50) The selected region of text is highlighted.
mouse.texi(,51) 
mouse.texi(,52)   Once a region of text is selected, it becomes the primary X selection
mouse.texi(,53) (@pxref{Using X Selections}) as well as the Emacs selected region. You
mouse.texi(,54) can paste it into other X applications and use the options from the
mouse.texi(,55) @b{Edit} pull-down menu on it.  Since it is also the Emacs region, you
mouse.texi(,56) can use Emacs region commands on it.
mouse.texi(,57) 
mouse.texi(,58) @node Additional Mouse Operations, Killing, Mouse Selection, Top
mouse.texi(,59) @section Additional Mouse Operations
mouse.texi(,60) @cindex mouse operations
mouse.texi(,61) 
mouse.texi(,62) XEmacs also provides the following mouse functions.  Most of these are
mouse.texi(,63) not bound to mouse gestures by default, but they are provided for your
mouse.texi(,64) customization pleasure.  For example, if you wanted @kbd{shift-left}
mouse.texi(,65) (that is, holding down the @key{Shift} key and clicking the left mouse
mouse.texi(,66) button) to delete the character at which you are pointing, then you
mouse.texi(,67) could do this:
mouse.texi(,68) 
mouse.texi(,69) @example
mouse.texi(,70) (global-set-key '(shift button1) 'mouse-del-char)
mouse.texi(,71) @end example
mouse.texi(,72) 
mouse.texi(,73) @findex mouse-del-char
mouse.texi(,74) @findex mouse-delete-window
mouse.texi(,75) @findex mouse-keep-one-window
mouse.texi(,76) @findex mouse-kill-line
mouse.texi(,77) @findex mouse-line-length
mouse.texi(,78) @findex mouse-scroll
mouse.texi(,79) @findex mouse-select
mouse.texi(,80) @findex mouse-select-and-split
mouse.texi(,81) @findex mouse-set-mark
mouse.texi(,82) @findex mouse-set-point
mouse.texi(,83) @findex mouse-track
mouse.texi(,84) @findex mouse-track-adjust
mouse.texi(,85) @findex mouse-track-and-copy-to-cutbuffer
mouse.texi(,86) @findex mouse-track-delete-and-insert
mouse.texi(,87) 
mouse.texi(,88) @table @kbd
mouse.texi(,89) @item mouse-del-char
mouse.texi(,90) Delete the character pointed to by the mouse.
mouse.texi(,91) @item mouse-delete-window
mouse.texi(,92) Delete the Emacs window that the mouse is on.
mouse.texi(,93) @item mouse-keep-one-window
mouse.texi(,94) Select the Emacs window that the mouse is on, then delete all other
mouse.texi(,95) windows on this frame.
mouse.texi(,96) @item mouse-kill-line
mouse.texi(,97) Kill the line pointed to by the mouse.
mouse.texi(,98) @item mouse-line-length
mouse.texi(,99) Print the length of the line indicated by the pointer.
mouse.texi(,100) @item mouse-scroll
mouse.texi(,101) Scroll point to the mouse position.
mouse.texi(,102) @item mouse-select
mouse.texi(,103) Select the Emacs window the mouse is on.
mouse.texi(,104) @item mouse-select-and-split
mouse.texi(,105) Select the Emacs window mouse is on, then split it vertically in half.
mouse.texi(,106) @item mouse-set-mark
mouse.texi(,107) Select the Emacs window the mouse is on and set the mark at the mouse 
mouse.texi(,108) position.  Display the cursor at that position for a second.
mouse.texi(,109) @item mouse-set-point
mouse.texi(,110) Select the Emacs window that the mouse is on and move point to the
mouse.texi(,111) mouse position.
mouse.texi(,112) @item mouse-track
mouse.texi(,113) Make a selection with the mouse.   This is the default binding of 
mouse.texi(,114) the left mouse button (@key{button1}).
mouse.texi(,115) @item mouse-track-adjust
mouse.texi(,116) Extend the existing selection.  This is the default binding of
mouse.texi(,117) @key{Shift-button1}.
mouse.texi(,118) @item mouse-track-and-copy-to-cutbuffer
mouse.texi(,119) Make a selection like @code{mouse-track}, but also copy it to the cut buffer.
mouse.texi(,120) @item mouse-track-delete-and-insert
mouse.texi(,121) Make a selection with the mouse and insert it at point.  This is the
mouse.texi(,122) default binding of @key{control-shift-button1}.
mouse.texi(,123) @item mouse-track-insert
mouse.texi(,124) Make a selection with the mouse and insert it at point.
mouse.texi(,125) This is the default binding of @key{control-button1}.
mouse.texi(,126) @item mouse-window-to-region
mouse.texi(,127) Narrow a window to the region between the cursor and the mouse pointer.
mouse.texi(,128) @end table
mouse.texi(,129) 
mouse.texi(,130) The @kbd{M-x mouse-track} command should be bound to a mouse button.  If
mouse.texi(,131) you click-and-drag, the selection is set to the region between the
mouse.texi(,132) point of the initial click and the point at which you release the
mouse.texi(,133) button.  These positions do not need to be ordered. 
mouse.texi(,134) 
mouse.texi(,135) If you click-and-release without moving the mouse, the point is moved,
mouse.texi(,136) and the selection is disowned (there will be no selection owner.)  The
mouse.texi(,137) mark will be set to the previous position of point.
mouse.texi(,138) 
mouse.texi(,139) If you double-click, the selection will extend by symbols instead of by
mouse.texi(,140) characters.  If you triple-click, the selection will extend by lines.
mouse.texi(,141) 
mouse.texi(,142) If you drag the mouse off the top or bottom of the window, you can
mouse.texi(,143) select pieces of text that are larger than the visible part of the
mouse.texi(,144) buffer; the buffer will scroll as necessary.
mouse.texi(,145) 
mouse.texi(,146) The selected text becomes the current X selection, and is also copied to
mouse.texi(,147) the top of the kill ring.  Point will be left at the position at
mouse.texi(,148) which you released the button and the mark will be left at the initial
mouse.texi(,149) click position.  Bind a mouse click to
mouse.texi(,150) @kbd{mouse-track-and-copy-to-cutbuffer} to copy selections to the cut buffer.
mouse.texi(,151) (See also the @code{mouse-track-adjust} command, on @kbd{Shift-button1}.)
mouse.texi(,152) 
mouse.texi(,153) The @kbd{M-x mouse-track-adjust} command should be bound to a mouse
mouse.texi(,154) button.  The selection will be enlarged or shrunk so that the point of
mouse.texi(,155) the mouse click is one of its endpoints.  This is only meaningful
mouse.texi(,156) after the @code{mouse-track} command (@key{button1}) has been executed.
mouse.texi(,157) 
mouse.texi(,158) The @kbd{M-x mouse-track-delete-and-insert} command is exactly the same
mouse.texi(,159) as the @code{mouse-track} command on @key{button1}, except that point is
mouse.texi(,160) not moved; the selected text is immediately inserted after being
mouse.texi(,161) selected; and the text of the selection is deleted.
mouse.texi(,162) 
mouse.texi(,163) The @kbd{M-x mouse-track-insert} command is exactly the same as the
mouse.texi(,164) @code{mouse-track} command on @key{button1}, except that point is not moved;
mouse.texi(,165) the selected text is immediately inserted after being selected; and the
mouse.texi(,166) selection is immediately disowned afterwards.
killing.texi(,1) 
killing.texi(,23) 
killing.texi(,24) @node Killing, Yanking, Additional Mouse Operations, Top
killing.texi(,25) @section Deletion and Killing
killing.texi(,26) @findex delete-char
killing.texi(,27) @findex delete-backward-char
killing.texi(,28) 
killing.texi(,29) @cindex killing
killing.texi(,30) @cindex cutting
killing.texi(,31) @cindex deletion
killing.texi(,32) @kindex C-d
killing.texi(,33) @kindex DEL
killing.texi(,34)   Most commands that erase text from the buffer save it. You can get
killing.texi(,35) the text back if you change your mind, or you can move or copy it to
killing.texi(,36) other parts of the buffer.  Commands which erase text and save it in the
killing.texi(,37) kill ring are known as @dfn{kill} commands.  Some other commands erase
killing.texi(,38) text but do not save it; they are known as @dfn{delete} commands.  (This
killing.texi(,39) distinction is made only for erasing text in the buffer.)
killing.texi(,40) 
killing.texi(,41) The commands' names and individual descriptions use the words
killing.texi(,42) @samp{kill} and @samp{delete} to indicate what they do.  If you perform
killing.texi(,43) a kill or delete command by mistake, use the @kbd{C-x u} (@code{undo})
killing.texi(,44) command to undo it (@pxref{Undo}). The delete commands include @kbd{C-d}
killing.texi(,45) (@code{delete-char}) and @key{DEL} (@code{delete-backward-char}), which
killing.texi(,46) delete only one character at a time, and those commands that delete only
killing.texi(,47) spaces or newlines.  Commands that can destroy significant amounts of
killing.texi(,48) nontrivial data usually kill.@refill
killing.texi(,49) 
killing.texi(,50) @subsection Deletion
killing.texi(,51) 
killing.texi(,52) @table @kbd
killing.texi(,53) @item C-d
killing.texi(,54) Delete next character (@code{delete-char}).
killing.texi(,55) @item @key{DEL}
killing.texi(,56) Delete previous character (@code{delete-backward-char}).
killing.texi(,57) @item M-\
killing.texi(,58) Delete spaces and tabs around point (@code{delete-horizontal-space}).
killing.texi(,59) @item M-@key{SPC}
killing.texi(,60) Delete spaces and tabs around point, leaving one space
killing.texi(,61) (@code{just-one-space}).
killing.texi(,62) @item C-x C-o
killing.texi(,63) Delete blank lines around the current line (@code{delete-blank-lines}).
killing.texi(,64) @item M-^
killing.texi(,65) Join two lines by deleting the intervening newline, and any indentation
killing.texi(,66) following it (@code{delete-indentation}).
killing.texi(,67) @end table
killing.texi(,68) 
killing.texi(,69)   The most basic delete commands are @kbd{C-d} (@code{delete-char}) and
killing.texi(,70) @key{DEL} (@code{delete-backward-char}).  @kbd{C-d} deletes the
killing.texi(,71) character after point, the one the cursor is ``on top of''.  Point
killing.texi(,72) doesn't move.  @key{DEL} deletes the character before the cursor, and
killing.texi(,73) moves point back.  You can delete newlines like any other characters in
killing.texi(,74) the buffer; deleting a newline joins two lines.  Actually, @kbd{C-d} and
killing.texi(,75) @key{DEL} aren't always delete commands; if you give them an argument,
killing.texi(,76) they kill instead, since they can erase more than one character this
killing.texi(,77) way.
killing.texi(,78) 
killing.texi(,79) @kindex M-\
killing.texi(,80) @findex delete-horizontal-space
killing.texi(,81) @kindex M-SPC
killing.texi(,82) @findex just-one-space
killing.texi(,83) @kindex C-x C-o
killing.texi(,84) @findex delete-blank-lines
killing.texi(,85) @kindex M-^
killing.texi(,86) @findex delete-indentation
killing.texi(,87)   The other delete commands delete only formatting characters: spaces,
killing.texi(,88) tabs and newlines.  @kbd{M-\} (@code{delete-horizontal-space}) deletes
killing.texi(,89) all spaces and tab characters before and after point.
killing.texi(,90) @kbd{M-@key{SPC}} (@code{just-one-space}) does the same but leaves a
killing.texi(,91) single space after point, regardless of the number of spaces that
killing.texi(,92) existed previously (even zero).
killing.texi(,93) 
killing.texi(,94)   @kbd{C-x C-o} (@code{delete-blank-lines}) deletes all blank lines after
killing.texi(,95) the current line. If the current line is blank, it deletes all blank lines
killing.texi(,96) preceding the current line as well as leaving one blank line, the current
killing.texi(,97) line.  @kbd{M-^} (@code{delete-indentation}) joins the current line and
killing.texi(,98) the previous line, or, if given an argument, joins the current line and 
killing.texi(,99) the next line by deleting a newline and all surrounding spaces, possibly
killing.texi(,100) leaving a single space.  @xref{Indentation,M-^}.
killing.texi(,101) 
killing.texi(,102) @subsection Killing by Lines
killing.texi(,103) 
killing.texi(,104) @table @kbd
killing.texi(,105) @item C-k
killing.texi(,106) Kill rest of line or one or more lines (@code{kill-line}).
killing.texi(,107) @end table
killing.texi(,108) 
killing.texi(,109) @kindex C-k
killing.texi(,110) @findex kill-line
killing.texi(,111)   The simplest kill command is @kbd{C-k}.  If given at the beginning of
killing.texi(,112) a line, it kills all the text on the line, leaving the line blank.  If
killing.texi(,113) given on a blank line, the blank line disappears.  As a consequence, a
killing.texi(,114) line disappears completely if you go to the front of a non-blank line
killing.texi(,115) and type @kbd{C-k} twice.
killing.texi(,116) 
killing.texi(,117)   More generally, @kbd{C-k} kills from point up to the end of the line,
killing.texi(,118) unless it is at the end of a line.  In that case, it kills the newline
killing.texi(,119) following the line, thus merging the next line into the current one.
killing.texi(,120) Emacs ignores invisible spaces and tabs at the end of the line when deciding
killing.texi(,121) which case applies: if point appears to be at the end of the line, you
killing.texi(,122) can be sure the newline will be killed.
killing.texi(,123) 
killing.texi(,124)   If you give @kbd{C-k} a positive argument, it kills that many lines
killing.texi(,125) and the newlines that follow them (however, text on the current line
killing.texi(,126) before point is not killed).  With a negative argument, @kbd{C-k} kills
killing.texi(,127) back to a number of line beginnings.  An argument of @minus{}2 means
killing.texi(,128) kill back to the second line beginning.  If point is at the beginning of
killing.texi(,129) a line, that line beginning doesn't count, so @kbd{C-u - 2 C-k} with
killing.texi(,130) point at the front of a line kills the two previous lines.
killing.texi(,131) 
killing.texi(,132)   @kbd{C-k} with an argument of zero kills all the text before point on the
killing.texi(,133) current line.
killing.texi(,134) 
killing.texi(,135) @subsection Other Kill Commands
killing.texi(,136) @findex kill-region
killing.texi(,137) @findex kill-word
killing.texi(,138) @findex backward-kill-word
killing.texi(,139) @findex kill-sexp
killing.texi(,140) @findex kill-sentence
killing.texi(,141) @findex backward-kill-sentence
killing.texi(,142) @kindex M-d
killing.texi(,143) @kindex M-DEL
killing.texi(,144) @kindex C-M-k
killing.texi(,145) @kindex C-x DEL
killing.texi(,146) @kindex M-k
killing.texi(,147) @kindex C-w
killing.texi(,148) 
killing.texi(,149) @c DoubleWideCommands
killing.texi(,150) @table @kbd
killing.texi(,151) @item C-w
killing.texi(,152) Kill region (from point to the mark) (@code{kill-region}).
killing.texi(,153) @xref{Words}.
killing.texi(,154) @item M-d
killing.texi(,155) Kill word (@code{kill-word}).
killing.texi(,156) @item M-@key{DEL}
killing.texi(,157) Kill word backwards (@code{backward-kill-word}).
killing.texi(,158) @item C-x @key{DEL}
killing.texi(,159) Kill back to beginning of sentence (@code{backward-kill-sentence}).
killing.texi(,160) @xref{Sentences}.
killing.texi(,161) @item M-k
killing.texi(,162) Kill to end of sentence (@code{kill-sentence}).
killing.texi(,163) @item C-M-k
killing.texi(,164) Kill sexp (@code{kill-sexp}).  @xref{Lists}.
killing.texi(,165) @item M-z @var{char}
killing.texi(,166) Kill up to next occurrence of @var{char} (@code{zap-to-char}).
killing.texi(,167) @end table
killing.texi(,168) 
killing.texi(,169)    @kbd{C-w} (@code{kill-region}) is a very general kill command; it
killing.texi(,170) kills everything between point and the mark. You can use this command to
killing.texi(,171) kill any contiguous sequence of characters by first setting the mark at
killing.texi(,172) one end of a sequence of characters, then going to the other end and
killing.texi(,173) typing @kbd{C-w}.
killing.texi(,174) 
killing.texi(,175) @kindex M-z
killing.texi(,176) @findex zap-to-char
killing.texi(,177)   A convenient way of killing is combined with searching: @kbd{M-z}
killing.texi(,178) (@code{zap-to-char}) reads a character and kills from point up to (but not
killing.texi(,179) including) the next occurrence of that character in the buffer.  If there
killing.texi(,180) is no next occurrence, killing goes to the end of the buffer.  A numeric
killing.texi(,181) argument acts as a repeat count.  A negative argument means to search
killing.texi(,182) backward and kill text before point.
killing.texi(,183) 
killing.texi(,184)   Other syntactic units can be killed: words, with @kbd{M-@key{DEL}} and
killing.texi(,185) @kbd{M-d} (@pxref{Words}); sexps, with @kbd{C-M-k} (@pxref{Lists}); and
killing.texi(,186) sentences, with @kbd{C-x @key{DEL}} and @kbd{M-k}
killing.texi(,187) (@pxref{Sentences}).@refill
killing.texi(,188) 
killing.texi(,189) @node Yanking, Using X Selections, Killing, Top
killing.texi(,190) @section Yanking
killing.texi(,191) @cindex moving text
killing.texi(,192) @cindex copying text
killing.texi(,193) @cindex kill ring
killing.texi(,194) @cindex yanking
killing.texi(,195) @cindex pasting
killing.texi(,196) 
killing.texi(,197)   @dfn{Yanking} means getting back text which was killed. Some systems
killing.texi(,198) call this ``pasting''.  The usual way to move or copy text is to kill it
killing.texi(,199) and then yank it one or more times.
killing.texi(,200) 
killing.texi(,201) @table @kbd
killing.texi(,202) @item C-y
killing.texi(,203) Yank last killed text (@code{yank}).
killing.texi(,204) @item M-y
killing.texi(,205) Replace re-inserted killed text with the previously killed text
killing.texi(,206) (@code{yank-pop}).
killing.texi(,207) @item M-w
killing.texi(,208) Save region as last killed text without actually killing it
killing.texi(,209) (@code{copy-region-as-kill}).
killing.texi(,210) @item C-M-w
killing.texi(,211) Append next kill to last batch of killed text (@code{append-next-kill}).
killing.texi(,212) @end table
killing.texi(,213) 
killing.texi(,214) @menu
killing.texi(,215) * Kill Ring::       Where killed text is stored.  Basic yanking.
killing.texi(,216) * Appending Kills:: Several kills in a row all yank together.
killing.texi(,217) * Earlier Kills::   Yanking something killed some time ago.
killing.texi(,218) @end menu
killing.texi(,219) 
killing.texi(,220) @node Kill Ring, Appending Kills, Yanking, Yanking
killing.texi(,221) @subsection The Kill Ring
killing.texi(,222) 
killing.texi(,223) @kindex C-y
killing.texi(,224) @findex Yank
killing.texi(,225)   All killed text is recorded in the @dfn{kill ring}, a list of blocks of
killing.texi(,226) text that have been killed.  There is only one kill ring, used in all
killing.texi(,227) buffers, so you can kill text in one buffer and yank it in another buffer.
killing.texi(,228) This is the usual way to move text from one file to another.
killing.texi(,229) (@xref{Accumulating Text}, for some other ways.)
killing.texi(,230) 
killing.texi(,231)   If you have two separate Emacs processes, you cannot use the kill ring
killing.texi(,232) to move text. If you are using XEmacs under X, however, you can
killing.texi(,233) use the X selection mechanism to move text from one to another.
killing.texi(,234) 
killing.texi(,235) If you are using XEmacs under X and have one Emacs process with
killing.texi(,236) multiple frames, they do share the same kill ring.  You can kill or
killing.texi(,237) copy text in one Emacs frame, then yank it in the other frame
killing.texi(,238) belonging to the same process.
killing.texi(,239) 
killing.texi(,240)   The command @kbd{C-y} (@code{yank}) reinserts the text of the most recent
killing.texi(,241) kill.  It leaves the cursor at the end of the text and sets the mark at
killing.texi(,242) the beginning of the text.  @xref{Mark}.
killing.texi(,243) 
killing.texi(,244)   @kbd{C-u C-y} yanks the text, leaves the cursor in front of the text,
killing.texi(,245) and sets the mark after it, if the argument is with just a @kbd{C-u}.
killing.texi(,246) Any other argument, including @kbd{C-u} and digits, has different
killing.texi(,247) results, described below, under ``Yanking Earlier Kills''.
killing.texi(,248) 
killing.texi(,249) @kindex M-w
killing.texi(,250) @findex copy-region-as-kill
killing.texi(,251)  To copy a block of text, you can also use @kbd{M-w}
killing.texi(,252) (@code{copy-region-as-kill}), which copies the region into the kill ring
killing.texi(,253) without removing it from the buffer. @kbd{M-w} is similar to @kbd{C-w}
killing.texi(,254) followed by @kbd{C-y} but does not mark the buffer as ``modified'' and
killing.texi(,255) does not actually cut anything.
killing.texi(,256) 
killing.texi(,257) @node Appending Kills, Earlier Kills, Kill Ring, Yanking
killing.texi(,258) @subsection Appending Kills
killing.texi(,259) 
killing.texi(,260) @cindex television
killing.texi(,261)   Normally, each kill command pushes a new block onto the kill ring.
killing.texi(,262) However, two or more kill commands in a row combine their text into a
killing.texi(,263) single entry, so that a single @kbd{C-y} yanks it all back. This means
killing.texi(,264) you don't have to kill all the text you want to yank in one command; you
killing.texi(,265) can kill line after line, or word after word, until you have killed what
killing.texi(,266) you want, then get it all back at once using @kbd{C-y}. (Thus we join
killing.texi(,267) television in leading people to kill thoughtlessly.)
killing.texi(,268) 
killing.texi(,269)   Commands that kill forward from point add onto the end of the previous
killing.texi(,270) killed text.  Commands that kill backward from point add onto the
killing.texi(,271) beginning.  This way, any sequence of mixed forward and backward kill
killing.texi(,272) commands puts all the killed text into one entry without rearrangement.
killing.texi(,273) Numeric arguments do not break the sequence of appending kills.  For
killing.texi(,274) example, suppose the buffer contains:
killing.texi(,275) 
killing.texi(,276) @example
killing.texi(,277) This is the first
killing.texi(,278) line of sample text
killing.texi(,279) and here is the third.
killing.texi(,280) @end example
killing.texi(,281) 
killing.texi(,282) @noindent
killing.texi(,283) with point at the beginning of the second line.  If you type @kbd{C-k C-u 2
killing.texi(,284) M-@key{DEL} C-k}, the first @kbd{C-k} kills the text @samp{line of sample
killing.texi(,285) text}, @kbd{C-u 2 M-@key{DEL}} kills @samp{the first} with the newline that
killing.texi(,286) followed it, and the second @kbd{C-k} kills the newline after the second
killing.texi(,287) line.  The result is that the buffer contains @samp{This is and here is the
killing.texi(,288) third.} and a single kill entry contains @samp{the first@key{RET}line of
killing.texi(,289) sample text@key{RET}}---all the killed text, in its original order.
killing.texi(,290) 
killing.texi(,291) @kindex C-M-w
killing.texi(,292) @findex append-next-kill
killing.texi(,293)   If a kill command is separated from the last kill command by other
killing.texi(,294) commands (not just numeric arguments), it starts a new entry on the kill
killing.texi(,295) ring.  To force a kill command to append, first type the command @kbd{C-M-w}
killing.texi(,296) (@code{append-next-kill}). @kbd{C-M-w} tells the following command,
killing.texi(,297) if it is a kill command, to append the text it kills to the last killed
killing.texi(,298) text, instead of starting a new entry.  With @kbd{C-M-w}, you can kill
killing.texi(,299) several separated pieces of text and accumulate them to be yanked back
killing.texi(,300) in one place.@refill
killing.texi(,301) 
killing.texi(,302) @node Earlier Kills,, Appending Kills, Yanking
killing.texi(,303) @subsection Yanking Earlier Kills
killing.texi(,304) 
killing.texi(,305) @kindex M-y
killing.texi(,306) @findex yank-pop
killing.texi(,307)   To recover killed text that is no longer the most recent kill, you need
killing.texi(,308) the @kbd{Meta-y} (@code{yank-pop}) command.  You can use @kbd{M-y} only
killing.texi(,309) after a @kbd{C-y} or another @kbd{M-y}.  It takes the text previously
killing.texi(,310) yanked and replaces it with the text from an earlier kill.  To recover
killing.texi(,311) the text of the next-to-the-last kill, first use @kbd{C-y} to recover
killing.texi(,312) the last kill, then @kbd{M-y} to replace it with the previous
killing.texi(,313) kill.@refill
killing.texi(,314) 
killing.texi(,315)   You can think in terms of a ``last yank'' pointer which points at an item
killing.texi(,316) in the kill ring.  Each time you kill, the ``last yank'' pointer moves to
killing.texi(,317) the new item at the front of the ring.  @kbd{C-y} yanks the item
killing.texi(,318) which the ``last yank'' pointer points to.  @kbd{M-y} moves the ``last
killing.texi(,319) yank'' pointer to a different item, and the text in the buffer changes to
killing.texi(,320) match.  Enough @kbd{M-y} commands can move the pointer to any item in the
killing.texi(,321) ring, so you can get any item into the buffer.  Eventually the pointer
killing.texi(,322) reaches the end of the ring; the next @kbd{M-y} moves it to the first item
killing.texi(,323) again.
killing.texi(,324) 
killing.texi(,325)   Yanking moves the ``last yank'' pointer around the ring, but does not
killing.texi(,326) change the order of the entries in the ring, which always runs from the
killing.texi(,327) most recent kill at the front to the oldest one still remembered.
killing.texi(,328) 
killing.texi(,329)   Use @kbd{M-y} with a numeric argument to advance the ``last
killing.texi(,330) yank'' pointer by the specified number of items.  A negative argument
killing.texi(,331) moves the pointer toward the front of the ring; from the front of the
killing.texi(,332) ring, it moves to the last entry and starts moving forward from there.
killing.texi(,333) 
killing.texi(,334)   Once the text you are looking for is brought into the buffer, you can
killing.texi(,335) stop doing @kbd{M-y} commands and the text will stay there. Since the
killing.texi(,336) text is just a copy of the kill ring item, editing it in the buffer does
killing.texi(,337) not change what's in the ring.  As long you don't kill additional text,
killing.texi(,338) the ``last yank'' pointer remains at the same place in the kill ring:
killing.texi(,339) repeating @kbd{C-y} will yank another copy of the same old kill.
killing.texi(,340) 
killing.texi(,341)   If you know how many @kbd{M-y} commands it would take to find the
killing.texi(,342) text you want, you can yank that text in one step using @kbd{C-y} with
killing.texi(,343) a numeric argument.  @kbd{C-y} with an argument greater than one
killing.texi(,344) restores the text the specified number of entries back in the kill
killing.texi(,345) ring.  Thus, @kbd{C-u 2 C-y} gets the next to the last block of killed
killing.texi(,346) text.  It is equivalent to @kbd{C-y M-y}.  @kbd{C-y} with a numeric
killing.texi(,347) argument starts counting from the ``last yank'' pointer, and sets the
killing.texi(,348) ``last yank'' pointer to the entry that it yanks.
killing.texi(,349) 
killing.texi(,350) @vindex kill-ring-max
killing.texi(,351)   The variable @code{kill-ring-max} controls the length of the kill
killing.texi(,352) ring; no more than that many blocks of killed text are saved.
killing.texi(,353) 
killing.texi(,354) @node Using X Selections, Accumulating Text, Yanking, Top
killing.texi(,355) @section Using X Selections
killing.texi(,356) @comment  node-name,  next,  previous,  up
killing.texi(,357) 
killing.texi(,358) In the X window system, mouse selections provide a simple mechanism for
killing.texi(,359) text transfer between different applications.  In a typical X
killing.texi(,360) application, you can select text by pressing the left mouse button and
killing.texi(,361) dragging the cursor over the text you want to copy.  The text becomes the
killing.texi(,362) primary X selection and is highlighted.  The highlighted region is also
killing.texi(,363) the Emacs selected region.
killing.texi(,364) 
killing.texi(,365) @itemize @bullet
killing.texi(,366) @item
killing.texi(,367) Since the region is the primary X selection, you can go to a different X
killing.texi(,368) application and click the middle mouse button: the text that you selected in
killing.texi(,369) the previous application is pasted into the current application.
killing.texi(,370) @item
killing.texi(,371) Since the region is the Emacs selected region, you can use all region
killing.texi(,372) commands (@kbd{C-w, M-w} etc.) as well as the options of the @b{Edit}
killing.texi(,373) menu to manipulate the selected text.
killing.texi(,374) @end itemize
killing.texi(,375) 
killing.texi(,376) @menu
killing.texi(,377) * X Clipboard Selection::     	Pasting to the X clipboard.
killing.texi(,378) * X Selection Commands::	Other operations on the selection.
killing.texi(,379) * X Cut Buffers::       	X cut buffers are available for compatibility.
killing.texi(,380) * Active Regions::      	Using zmacs-style highlighting of the
killing.texi(,381)                         	 selected region.
killing.texi(,382) @end menu
killing.texi(,383) 
killing.texi(,384) @node X Clipboard Selection, X Selection Commands, Using X Selections, Using X Selections
killing.texi(,385) @comment  node-name,  next,  previous,  up
killing.texi(,386) @subsection The Clipboard Selection
killing.texi(,387) @cindex clipboard selections
killing.texi(,388) 
killing.texi(,389) There are other kinds of X selections besides the @b{Primary} selection; one
killing.texi(,390) common one is the @b{Clipboard} selection.  Some applications prefer to
killing.texi(,391) transfer data using this selection in preference to the @b{Primary}.
killing.texi(,392) One can transfer text from the @b{Primary} selection to the  @b{Clipboard}
killing.texi(,393) selection with the @b{Copy} command under the @b{Edit} menu in the menubar.
killing.texi(,394) 
killing.texi(,395) Usually, the clipboard selection is not visible.  However, if you run the
killing.texi(,396) @file{xclipboard} application, the text most recently copied to the clipboard
killing.texi(,397) (with the @b{Copy} command) is displayed in a window.  Any time new text is
killing.texi(,398) thus copied, the @file{xclipboard} application makes a copy of it and displays
killing.texi(,399) it in its window.  The value of the clipboard can survive the lifetime of the
killing.texi(,400) running Emacs process.  The @code{xclipboard} man page provides more details.
killing.texi(,401) 
killing.texi(,402) Warning: If you use the @file{xclipboard} application, remember that it
killing.texi(,403) maintains a list of all things that have been pasted to the clipboard (that
killing.texi(,404) is, copied with the @b{Copy} command).  If you don't manually delete elements
killing.texi(,405) from this list by clicking on the @b{Delete} button in the @code{xclipboard}
killing.texi(,406) window, the clipboard will eventually consume a lot of memory.
killing.texi(,407) 
killing.texi(,408) In summary, some X applications (such as @file{xterm}) allow one to paste
killing.texi(,409) text in them from XEmacs in the following way:
killing.texi(,410) 
killing.texi(,411) @itemize @bullet
killing.texi(,412) @item
killing.texi(,413) Drag out a region of text in Emacs with the left mouse button,
killing.texi(,414) making that text be the @b{Primary} selection.
killing.texi(,415) 
killing.texi(,416) @item
killing.texi(,417) Click the middle button in the other application, pasting the @b{Primary}
killing.texi(,418) selection. 
killing.texi(,419) @end itemize
killing.texi(,420) 
killing.texi(,421) With some other applications (notably, the OpenWindows and Motif tools) you
killing.texi(,422) must use this method instead:
killing.texi(,423) 
killing.texi(,424) @itemize @bullet
killing.texi(,425) @item
killing.texi(,426) Drag out a region of text in Emacs with the left mouse button,
killing.texi(,427) making that text be the @b{Primary} selection.
killing.texi(,428) 
killing.texi(,429) @item
killing.texi(,430) Copy the selected text to the @b{Clipboard} selection by selecting the
killing.texi(,431) @b{Copy} menu item from the @b{Edit} menu, or by hitting the @b{Copy}
killing.texi(,432) key on your keyboard.
killing.texi(,433) 
killing.texi(,434) @item
killing.texi(,435) Paste the text in the other application by selecting @b{Paste} from its
killing.texi(,436) menu, or by hitting the @b{Paste} key on your keyboard.
killing.texi(,437) @end itemize
killing.texi(,438) 
killing.texi(,439) 
killing.texi(,440) @node X Selection Commands, X Cut Buffers, X Clipboard Selection, Using X Selections
killing.texi(,441) @subsection Miscellaneous X Selection Commands
killing.texi(,442) @comment  node-name,  next,  previous,  up
killing.texi(,443) @cindex cut buffers
killing.texi(,444) @cindex primary selections
killing.texi(,445) 
killing.texi(,446) @findex x-copy-primary-selection
killing.texi(,447) @findex x-delete-primary-selection
killing.texi(,448) @findex x-insert-selection
killing.texi(,449) @findex x-kill-primary-selection
killing.texi(,450) @findex x-mouse-kill
killing.texi(,451) @findex x-own-secondary-selection
killing.texi(,452) @findex x-own-selection
killing.texi(,453) @findex x-set-point-and-insert-selection
killing.texi(,454) @table @kbd
killing.texi(,455) @item M-x x-copy-primary-selection
killing.texi(,456) Copy the primary selection to both the kill ring and the Clipboard.
killing.texi(,457) @item M-x x-insert-selection
killing.texi(,458) Insert the current selection into the buffer at point.
killing.texi(,459) @item M-x x-delete-primary-selection
killing.texi(,460) Deletes the text in the primary selection without copying it to the kill
killing.texi(,461) ring or the Clipboard.
killing.texi(,462) @item M-x x-kill-primary-selection
killing.texi(,463) Deletes the text in the primary selection and copies it to 
killing.texi(,464) both the kill ring and the Clipboard.
killing.texi(,465) @item M-x x-mouse-kill
killing.texi(,466) Kill the text between point and the mouse and copy it to 
killing.texi(,467) the clipboard and to the cut buffer.
killing.texi(,468) @item M-x x-own-secondary-selection
killing.texi(,469) Make a secondary X selection of the given argument. 
killing.texi(,470) @item M-x x-own-selection
killing.texi(,471) Make a primary X selection of the given argument.  
killing.texi(,472) @item M-x x-set-point-and-insert-selection
killing.texi(,473) Set point where clicked and insert the primary selection or the
killing.texi(,474) cut buffer.
killing.texi(,475) @end table
killing.texi(,476) 
killing.texi(,477) @node X Cut Buffers, Active Regions, X Selection Commands, Using X Selections
killing.texi(,478) @subsection X Cut Buffers
killing.texi(,479) @comment  node-name,  next,  previous,  up
killing.texi(,480) 
killing.texi(,481) X cut buffers are a different, older way of transferring text between
killing.texi(,482) applications.  XEmacs supports cut buffers for compatibility
killing.texi(,483) with older programs, even though selections are now the preferred way of
killing.texi(,484) transferring text.
killing.texi(,485) 
killing.texi(,486) X has a concept of applications "owning" selections.  When you select
killing.texi(,487) text by clicking and dragging inside an application, the application
killing.texi(,488) tells the X server that it owns the selection.  When another
killing.texi(,489) application asks the X server for the value of the selection, the X
killing.texi(,490) server requests the information from the owner. When you use
killing.texi(,491) selections, the selection data is not actually transferred unless
killing.texi(,492) someone wants it; the act of making a selection doesn't transfer data.
killing.texi(,493) Cut buffers are different: when you "own" a cut buffer, the data is
killing.texi(,494) actually transferred to the X server immediately, and survives the
killing.texi(,495) lifetime of the application.
killing.texi(,496) 
killing.texi(,497) Any time a region of text becomes the primary selection in Emacs,
killing.texi(,498) Emacs also copies that text to the cut buffer.  This makes it possible
killing.texi(,499) to copy text from an XEmacs buffer and paste it into an older,
killing.texi(,500) non-selection-based application (such as Emacs 18).
killing.texi(,501) 
killing.texi(,502) Note: Older versions of Emacs could not access the X selections, only
killing.texi(,503) the X cut buffers.
killing.texi(,504) 
killing.texi(,505) @node Active Regions, , X Cut Buffers, Using X Selections
killing.texi(,506) @subsection Active Regions
killing.texi(,507) @comment  node-name,  next,  previous,  up
killing.texi(,508) @cindex active regions
killing.texi(,509) 
killing.texi(,510)   By default, both the text you select in an Emacs buffer using the
killing.texi(,511) click-and-drag mechanism and text you select by setting point and the
killing.texi(,512) mark is highlighted. You can use Emacs region commands as well as the
killing.texi(,513) @b{Cut} and @b{Copy} commands on the highlighted region you selected
killing.texi(,514) with the mouse.
killing.texi(,515) 
killing.texi(,516) If you prefer, you can make a distinction between text selected with the
killing.texi(,517) mouse and text selected with point and the mark by setting the variable
killing.texi(,518) @code{zmacs-regions} to @code{nil}.  In that case:
killing.texi(,519) 
killing.texi(,520) @itemize @bullet
killing.texi(,521) @item
killing.texi(,522) The text selected with the mouse becomes both the X selection and the
killing.texi(,523) Emacs selected region. You can use menu-bar commands as well as Emacs
killing.texi(,524) region commands on it. 
killing.texi(,525) @item
killing.texi(,526) The text selected with point and the mark is not highlighted. You can
killing.texi(,527) only use Emacs region commands on it, not the menu-bar items. 
killing.texi(,528) @end itemize
killing.texi(,529) 
killing.texi(,530)   Active regions originally come from Zmacs, the Lisp Machine editor.
killing.texi(,531) The idea behind them is that commands can only operate on a region when
killing.texi(,532) the region is in an "active" state.  Put simply, you can only operate on
killing.texi(,533) a region that is highlighted.
killing.texi(,534) 
killing.texi(,535) @vindex zmacs-regions
killing.texi(,536) The variable @code{zmacs-regions} checks whether LISPM-style active
killing.texi(,537) regions should be used.  This means that commands that operate on the
killing.texi(,538) region (the area between point and the mark) only work while
killing.texi(,539) the region is in the active state, which is indicated by highlighting.
killing.texi(,540) Most commands causes the region to not be in the active state;
killing.texi(,541) for example, @kbd{C-w} only works immediately after activating the
killing.texi(,542) region.
killing.texi(,543) 
killing.texi(,544) More specifically:
killing.texi(,545) @itemize @bullet
killing.texi(,546) @item
killing.texi(,547) Commands that operate on the region only work if the region is active.
killing.texi(,548) @item
killing.texi(,549) Only a very small set of commands causes the region to become active---
killing.texi(,550) those commands whose semantics are to mark an area, such as @code{mark-defun}.
killing.texi(,551) @item
killing.texi(,552) The region is deactivated after each command that is executed, except that
killing.texi(,553) motion commands do not change whether the region is active or not.
killing.texi(,554) @end itemize 
killing.texi(,555) 
killing.texi(,556) @code{set-mark-command} (@kbd{C-SPC}) pushes a mark and activates the
killing.texi(,557) region.  Moving the cursor with normal motion commands (@kbd{C-n},
killing.texi(,558) @kbd{C-p}, etc.) will cause the region between point and the
killing.texi(,559) recently-pushed mark to be highlighted.  It will remain highlighted
killing.texi(,560) until some non-motion command is executed.
killing.texi(,561) 
killing.texi(,562) @code{exchange-point-and-mark} (@kbd{C-x C-x}) activates the region.
killing.texi(,563) So if you mark a region and execute a command that operates on it, you
killing.texi(,564) can reactivate the same region with @kbd{C-x C-x} (or perhaps @kbd{C-x
killing.texi(,565) C-x C-x C-x}) to operate on it again.
killing.texi(,566) 
killing.texi(,567) Generally, commands that push marks as a means of navigation, such as
killing.texi(,568) @code{beginning-of-buffer} (@kbd{M-<}) and @code{end-of-buffer}
killing.texi(,569) (@kbd{M->}), do not activate the region.  However, commands that push
killing.texi(,570) marks as a means of marking an area of text, such as @code{mark-defun}
killing.texi(,571) (@kbd{M-C-h}), @code{mark-word} (@kbd{M-@@}), and @code{mark-whole-buffer}
killing.texi(,572) (@kbd{C-x h}), do activate the region.
killing.texi(,573) 
killing.texi(,574) When @code{zmacs-regions} is @code{t}, there is no distinction between
killing.texi(,575) the primary X selection and the active region selected by point and the
killing.texi(,576) mark.  To see this, set the mark (@key{C-SPC}) and move the cursor
killing.texi(,577) with any cursor-motion command: the region between point and mark is
killing.texi(,578) highlighted, and you can watch it grow and shrink as you move the
killing.texi(,579) cursor.
killing.texi(,580) 
killing.texi(,581) Any other commands besides cursor-motion commands (such as inserting or
killing.texi(,582) deleting text) will cause the region to no longer be active; it will no
killing.texi(,583) longer be highlighted, and will no longer be the primary selection.
killing.texi(,584) Region can be explicitly deactivated with @kbd{C-g}.
killing.texi(,585) 
killing.texi(,586) Commands that require a region (such as @kbd{C-w}) signal an error if
killing.texi(,587) the region is not active.  Certain commands cause the region to be in
killing.texi(,588) its active state.  The most common ones are @code{push-mark}
killing.texi(,589) (@key{C-SPC}) and @code{exchange-point-and-mark} (@kbd{C-x C-x}).
killing.texi(,590) 
killing.texi(,591) @vindex zmacs-region-stays
killing.texi(,592) When @code{zmacs-regions} is @code{t}, programs can be non-intrusive
killing.texi(,593) on the state of the region by setting the variable @code{zmacs-region-stays}
killing.texi(,594) to a non-@code{nil} value.  If you are writing a new Emacs command that
killing.texi(,595) is conceptually a ``motion'' command and should not interfere with the
killing.texi(,596) current highlightedness of the region, then you may set this variable.
killing.texi(,597) It is reset to @code{nil} after each user command is executed.
killing.texi(,598) 
killing.texi(,599) @findex zmacs-activate-region
killing.texi(,600) When @code{zmacs-regions} is @code{t}, programs can make the region between
killing.texi(,601) point and mark go into the active (highlighted) state by using the
killing.texi(,602) function @code{zmacs-activate-region}. Only a small number of commands
killing.texi(,603) should ever do this. 
killing.texi(,604) 
killing.texi(,605) @findex zmacs-deactivate-region
killing.texi(,606) When @code{zmacs-regions} is @code{t}, programs can deactivate the region
killing.texi(,607) between point and the mark by using @code{zmacs-deactivate-region}.
killing.texi(,608) Note: you should not have to call this function; the command loop calls
killing.texi(,609) it when appropriate. 
killing.texi(,610) 
killing.texi(,611) @node Accumulating Text, Rectangles, Using X Selections, Top
killing.texi(,612) @section Accumulating Text
killing.texi(,613) @findex append-to-buffer
killing.texi(,614) @findex prepend-to-buffer
killing.texi(,615) @findex copy-to-buffer
killing.texi(,616) @findex append-to-file
killing.texi(,617) @cindex copying text
killing.texi(,618) @cindex accumulating text
killing.texi(,619) 
killing.texi(,620)   Usually you copy or move text by killing it and yanking it, but there are
killing.texi(,621) other ways that are useful for copying one block of text in many places, or
killing.texi(,622) for copying many scattered blocks of text into one place.
killing.texi(,623) 
killing.texi(,624)   If you like, you can accumulate blocks of text from scattered
killing.texi(,625) locations either into a buffer or into a file.  The relevant commands
killing.texi(,626) are described here.  You can also use Emacs registers for storing and
killing.texi(,627) accumulating text.  @xref{Registers}.
killing.texi(,628) 
killing.texi(,629) @table @kbd
killing.texi(,630) @item M-x append-to-buffer
killing.texi(,631) Append region to contents of specified buffer (@code{append-to-buffer}).
killing.texi(,632) @item M-x prepend-to-buffer
killing.texi(,633) Prepend region to contents of specified buffer.
killing.texi(,634) @item M-x copy-to-buffer
killing.texi(,635) Copy region into specified buffer, deleting that buffer's old contents.
killing.texi(,636) @item M-x insert-buffer
killing.texi(,637) Insert contents of specified buffer into current buffer at point.
killing.texi(,638) @item M-x append-to-file
killing.texi(,639) Append region to the end of the contents of specified file.
killing.texi(,640) @end table
killing.texi(,641) 
killing.texi(,642)   To accumulate text into a buffer, use the command @kbd{M-x
killing.texi(,643) append-to-buffer}, which inserts a copy of the region into the buffer
killing.texi(,644) @var{buffername}, at the location of point in that buffer.  If there is
killing.texi(,645) no buffer with the given name, one is created.
killing.texi(,646) 
killing.texi(,647)   If you append text to a buffer that has been used for editing, the
killing.texi(,648) copied text goes to the place where point is.  Point in that buffer is
killing.texi(,649) left at the end of the copied text, so successive uses of
killing.texi(,650) @code{append-to-buffer} accumulate the text in the specified buffer in
killing.texi(,651) the same order as they were copied.  Strictly speaking, this command does
killing.texi(,652) not always append to the text already in the buffer; but if this command
killing.texi(,653) is the only command used to alter a buffer, it does always append to the
killing.texi(,654) existing text because point is always at the end.
killing.texi(,655) 
killing.texi(,656)   @kbd{M-x prepend-to-buffer} is similar to @code{append-to-buffer}, but
killing.texi(,657) point in the other buffer is left before the copied text, so successive
killing.texi(,658) prependings add text in reverse order.  @kbd{M-x copy-to-buffer} is
killing.texi(,659) similar, except that any existing text in the other buffer is deleted,
killing.texi(,660) so the buffer is left containing just the text newly copied into it.
killing.texi(,661) 
killing.texi(,662)   You can retrieve the accumulated text from that buffer with @kbd{M-x
killing.texi(,663) insert-buffer}, which takes @var{buffername} as an argument.  It inserts
killing.texi(,664) a copy of the text in buffer @var{buffername} into the selected buffer.
killing.texi(,665) You could alternatively select the other buffer for editing, perhaps moving
killing.texi(,666) text from it by killing or with @code{append-to-buffer}.  @xref{Buffers}, for
killing.texi(,667) background information on buffers.
killing.texi(,668) 
killing.texi(,669)   Instead of accumulating text within Emacs in a buffer, you can append
killing.texi(,670) text directly into a file with @kbd{M-x append-to-file}, which takes
killing.texi(,671) @var{file-name} as an argument.  It adds the text of the region to the
killing.texi(,672) end of the specified file.  The file is changed immediately on disk.
killing.texi(,673) This command is normally used with files that are @i{not} being visited
killing.texi(,674) in Emacs.  Using it on a file that Emacs is visiting can produce
killing.texi(,675) confusing results, because the file's text inside Emacs does not change
killing.texi(,676) while the file itself changes.
killing.texi(,677) 
killing.texi(,678) @node Rectangles, Registers, Accumulating Text, Top
killing.texi(,679) @section Rectangles
killing.texi(,680) @cindex rectangles
killing.texi(,681) 
killing.texi(,682)   The rectangle commands affect rectangular areas of text: all
killing.texi(,683) characters between a certain pair of columns, in a certain range of lines.
killing.texi(,684) Commands are provided to kill rectangles, yank killed rectangles, clear
killing.texi(,685) them out, or delete them.  Rectangle commands are useful with text in
killing.texi(,686) multicolumnar formats, like code with comments at the right,
killing.texi(,687) or for changing text into or out of such formats.
killing.texi(,688) 
killing.texi(,689)   To specify the rectangle a command should work on, put the mark at one
killing.texi(,690) corner and point at the opposite corner.  The specified rectangle is
killing.texi(,691) called the @dfn{region-rectangle} because it is controlled about the
killing.texi(,692) same way the region is controlled.  Remember that a given
killing.texi(,693) combination of point and mark values can be interpreted either as
killing.texi(,694) specifying a region or as specifying a rectangle; it is up to the
killing.texi(,695) command that uses them to choose the interpretation.
killing.texi(,696) 
killing.texi(,697) @table @kbd
killing.texi(,698) @item M-x delete-rectangle
killing.texi(,699) Delete the text of the region-rectangle, moving any following text on
killing.texi(,700) each line leftward to the left edge of the region-rectangle.
killing.texi(,701) @item M-x kill-rectangle
killing.texi(,702) Similar, but also save the contents of the region-rectangle as the
killing.texi(,703) ``last killed rectangle''.
killing.texi(,704) @item M-x yank-rectangle
killing.texi(,705) Yank the last killed rectangle with its upper left corner at point.
killing.texi(,706) @item M-x open-rectangle
killing.texi(,707) Insert blank space to fill the space of the region-rectangle.
killing.texi(,708) The previous contents of the region-rectangle are pushed rightward.
killing.texi(,709) @item M-x clear-rectangle
killing.texi(,710) Clear the region-rectangle by replacing its contents with spaces.
killing.texi(,711) @end table
killing.texi(,712) 
killing.texi(,713)   The rectangle operations fall into two classes: commands deleting and
killing.texi(,714) moving rectangles, and commands for blank rectangles.
killing.texi(,715) 
killing.texi(,716) @findex delete-rectangle
killing.texi(,717) @findex kill-rectangle
killing.texi(,718)   There are two ways to get rid of the text in a rectangle: you can discard
killing.texi(,719) the text (delete it) or save it as the ``last killed'' rectangle.  The
killing.texi(,720) commands for these two ways are @kbd{M-x delete-rectangle} and @kbd{M-x
killing.texi(,721) kill-rectangle}.  In either case, the portion of each line that falls inside
killing.texi(,722) the rectangle's boundaries is deleted, causing following text (if any) on
killing.texi(,723) the line to move left.
killing.texi(,724) 
killing.texi(,725)   Note that ``killing'' a rectangle is not killing in the usual sense; the
killing.texi(,726) rectangle is not stored in the kill ring, but in a special place that
killing.texi(,727) only records the most recently killed rectangle (that is, does not
killing.texi(,728) append to a killed rectangle).  Different yank commands
killing.texi(,729) have to be used and only one rectangle is stored, because yanking
killing.texi(,730) a rectangle is quite different from yanking linear text and yank-popping
killing.texi(,731) commands are difficult to make sense of.
killing.texi(,732) 
killing.texi(,733)   Inserting a rectangle is the opposite of deleting one.  You specify
killing.texi(,734) where to put the upper left corner by putting point there.  The
killing.texi(,735) rectangle's first line is inserted at point, the rectangle's second line
killing.texi(,736) is inserted at a point one line vertically down, and so on.  The number
killing.texi(,737) of lines affected is determined by the height of the saved rectangle.
killing.texi(,738) 
killing.texi(,739) @findex yank-rectangle
killing.texi(,740)   To insert the last killed rectangle, type @kbd{M-x yank-rectangle}.
killing.texi(,741) This can be used to convert single-column lists into double-column
killing.texi(,742) lists; kill the second half of the list as a rectangle and then
killing.texi(,743) yank it beside the first line of the list.
killing.texi(,744) 
killing.texi(,745) @findex open-rectangle
killing.texi(,746) @findex clear-rectangle
killing.texi(,747)   There are two commands for working with blank rectangles: @kbd{M-x
killing.texi(,748) clear-rectangle} erases existing text, and @kbd{M-x open-rectangle}
killing.texi(,749) inserts a blank rectangle.  Clearing a rectangle is equivalent to
killing.texi(,750) deleting it and then inserting a blank rectangle of the same size.
killing.texi(,751) 
killing.texi(,752)   Rectangles can also be copied into and out of registers.
killing.texi(,753) @xref{RegRect,,Rectangle Registers}.
regs.texi(,1) 
regs.texi(,2) @node Registers, Display, Rectangles, Top
regs.texi(,3) @chapter Registers
regs.texi(,4) @cindex registers
regs.texi(,5) 
regs.texi(,6)   XEmacs @dfn{registers} are places in which you can save text or
regs.texi(,7) positions for later use.  Once you save text or a rectangle in a
regs.texi(,8) register, you can copy it into the buffer once or many times; a position
regs.texi(,9) saved in a register is used by moving point to that position.
regs.texi(,10) Rectangles can also be copied into and out of registers
regs.texi(,11) (@pxref{Rectangles}).
regs.texi(,12) 
regs.texi(,13) @findex view-register
regs.texi(,14)   Each register has a name which is a single character.  A register can
regs.texi(,15) store a piece of text, a rectangle, a position, a window configuration,
regs.texi(,16) or a file name, but only one thing at any given time.  Whatever you
regs.texi(,17) store in a register remains there until you store something else in that
regs.texi(,18) register.  To see what a register @var{r} contains, use @kbd{M-x
regs.texi(,19) view-register}.
regs.texi(,20) 
regs.texi(,21) @table @kbd
regs.texi(,22) @item M-x view-register @key{RET} @var{r}
regs.texi(,23) Display a description of what register @var{r} contains.
regs.texi(,24) @end table
regs.texi(,25) 
regs.texi(,26) @findex view-register
regs.texi(,27)   @kbd{M-x view-register} reads a register name as an argument and then
regs.texi(,28) displays the contents of the specified register.
regs.texi(,29) 
regs.texi(,30) @menu
regs.texi(,31) * Position: RegPos.           Saving positions in registers.
regs.texi(,32) * Text: RegText.              Saving text in registers.
regs.texi(,33) * Rectangle: RegRect.         Saving rectangles in registers.
regs.texi(,34) * Configurations: RegConfig.  Saving window configurations in registers.
regs.texi(,35) * Files: RegFiles.            File names in registers.
regs.texi(,36) * Numbers: RegNumbers.        Numbers in registers.
regs.texi(,37) * Bookmarks::                 Bookmarks are like registers, but persistent.
regs.texi(,38) @end menu
regs.texi(,39) 
regs.texi(,40) @node RegPos, RegText, Registers, Registers
regs.texi(,41) @section Saving Positions in Registers
regs.texi(,42) 
regs.texi(,43)   Saving a position records a place in a buffer so that you can move
regs.texi(,44) back there later.  Moving to a saved position switches to that buffer
regs.texi(,45) and moves point to that place in it.
regs.texi(,46) 
regs.texi(,47) @table @kbd
regs.texi(,48) @item C-x r @key{SPC} @var{r}
regs.texi(,49) Save position of point in register @var{r} (@code{point-to-register}).
regs.texi(,50) @item C-x r j @var{r}
regs.texi(,51) Jump to the position saved in register @var{r} (@code{jump-to-register}).
regs.texi(,52) @end table
regs.texi(,53) 
regs.texi(,54) @kindex C-x r SPC
regs.texi(,55) @findex point-to-register
regs.texi(,56)   To save the current position of point in a register, choose a name
regs.texi(,57) @var{r} and type @kbd{C-x r @key{SPC} @var{r}}.  The register @var{r}
regs.texi(,58) retains the position thus saved until you store something else in that
regs.texi(,59) register.
regs.texi(,60) 
regs.texi(,61) @kindex C-x r j
regs.texi(,62) @findex jump-to-register
regs.texi(,63)   The command @kbd{C-x r j @var{r}} moves point to the position recorded
regs.texi(,64) in register @var{r}.  The register is not affected; it continues to
regs.texi(,65) record the same location.  You can jump to the same position using the
regs.texi(,66) same register as often as you want.
regs.texi(,67) 
regs.texi(,68)   If you use @kbd{C-x r j} to go to a saved position, but the buffer it
regs.texi(,69) was saved from has been killed, @kbd{C-x r j} tries to create the buffer
regs.texi(,70) again by visiting the same file.  Of course, this works only for buffers
regs.texi(,71) that were visiting files.
regs.texi(,72) 
regs.texi(,73) @node RegText, RegRect, RegPos, Registers
regs.texi(,74) @section Saving Text in Registers
regs.texi(,75) 
regs.texi(,76)   When you want to insert a copy of the same piece of text many times, it
regs.texi(,77) can be impractical to use the kill ring, since each subsequent kill moves
regs.texi(,78) the piece of text further down on the ring.  It becomes hard to keep
regs.texi(,79) track of the argument needed to retrieve the same text with @kbd{C-y}.  An
regs.texi(,80) alternative is to store the text in a register with @kbd{C-x r s}
regs.texi(,81) (@code{copy-to-register}) and then retrieve it with @kbd{C-x r i}
regs.texi(,82) (@code{insert-register}).
regs.texi(,83) 
regs.texi(,84) @table @kbd
regs.texi(,85) @item C-x r s @var{r}
regs.texi(,86) Copy region into register @var{r} (@code{copy-to-register}).
regs.texi(,87) @item C-x r g @var{r}
regs.texi(,88) @itemx C-x r i @var{r}
regs.texi(,89) Insert text contents of register @var{r} (@code{insert-register}).
regs.texi(,90) @end table
regs.texi(,91) 
regs.texi(,92) @kindex C-x r s
regs.texi(,93) @kindex C-x r g
regs.texi(,94) @kindex C-x r i
regs.texi(,95) @findex copy-to-register
regs.texi(,96) @findex insert-register
regs.texi(,97)   @kbd{C-x r s @var{r}} stores a copy of the text of the region into the
regs.texi(,98) register named @var{r}.  Given a numeric argument, @kbd{C-x r s @var{r}}
regs.texi(,99) deletes the text from the buffer as well.
regs.texi(,100) 
regs.texi(,101)   @kbd{C-x r i @var{r}} inserts the text from register @var{r} in the buffer.
regs.texi(,102) By default it leaves point before the text and places the mark after
regs.texi(,103) it. With a numeric argument (@kbd{C-u}), it puts point after the text
regs.texi(,104) and the mark before it.
regs.texi(,105) 
regs.texi(,106) @node RegRect, RegConfig, RegText, Registers
regs.texi(,107) @section Saving Rectangles in Registers
regs.texi(,108) @cindex rectangle
regs.texi(,109) 
regs.texi(,110)   A register can contain a rectangle instead of lines of text.  The rectangle
regs.texi(,111) is represented as a list of strings.  @xref{Rectangles}, for basic
regs.texi(,112) information on rectangles and how to specify rectangles in a buffer.
regs.texi(,113) 
regs.texi(,114) @table @kbd
regs.texi(,115) @findex copy-rectangle-to-register
regs.texi(,116) @kindex C-x r r
regs.texi(,117) @item C-x r r @var{r}
regs.texi(,118) Copy the region-rectangle into register @var{r}
regs.texi(,119) (@code{copy-rectangle-to-register}).  With a numeric argument, delete it
regs.texi(,120) as well.
regs.texi(,121) @item C-x r g @var{r}
regs.texi(,122) @itemx C-x r i @var{r}
regs.texi(,123) Insert the rectangle stored in register @var{r} (if it contains a
regs.texi(,124) rectangle) (@code{insert-register}).
regs.texi(,125) @end table
regs.texi(,126) 
regs.texi(,127)   The @kbd{C-x r i @var{r}} command inserts linear text if the register
regs.texi(,128)   contains
regs.texi(,129) that, or inserts a rectangle if the register contains one.
regs.texi(,130) 
regs.texi(,131)   See also the command @code{sort-columns}, which you can think of
regs.texi(,132) as sorting a rectangle.  @xref{Sorting}.
regs.texi(,133) 
regs.texi(,134) @node RegConfig, RegNumbers, RegRect, Registers
regs.texi(,135) @section Saving Window Configurations in Registers
regs.texi(,136) 
regs.texi(,137) @findex window-configuration-to-register
regs.texi(,138) @findex frame-configuration-to-register
regs.texi(,139) @kindex C-x r w
regs.texi(,140) @c @kindex C-x r f
regs.texi(,141)   You can save the window configuration of the selected frame in a
regs.texi(,142) register, or even the configuration of all windows in all frames, and
regs.texi(,143) restore the configuration later.
regs.texi(,144) 
regs.texi(,145) @table @kbd
regs.texi(,146) @item C-x r w @var{r}
regs.texi(,147) Save the state of the selected frame's windows in register @var{r}
regs.texi(,148) (@code{window-configuration-to-register}).
regs.texi(,149) @c @item C-x r f @var{r}
regs.texi(,150) @item M-x frame-configuration-to-register @key{RET} @var{r}
regs.texi(,151) Save the state of all frames, including all their windows, in register
regs.texi(,152) @var{r} (@code{frame-configuration-to-register}).
regs.texi(,153) @end table
regs.texi(,154) 
regs.texi(,155)   Use @kbd{C-x r j @var{r}} to restore a window or frame configuration.
regs.texi(,156) This is the same command used to restore a cursor position.  When you
regs.texi(,157) restore a frame configuration, any existing frames not included in the
regs.texi(,158) configuration become invisible.  If you wish to delete these frames
regs.texi(,159) instead, use @kbd{C-u C-x r j @var{r}}.
regs.texi(,160) 
regs.texi(,161) @node RegNumbers, RegFiles, RegConfig, Registers
regs.texi(,162) @section Keeping Numbers in Registers
regs.texi(,163) 
regs.texi(,164)   There are commands to store a number in a register, to insert
regs.texi(,165) the number in the buffer in decimal, and to increment it.  These commands
regs.texi(,166) can be useful in keyboard macros (@pxref{Keyboard Macros}).
regs.texi(,167) 
regs.texi(,168) @table @kbd
regs.texi(,169) @item C-u @var{number} C-x r n @var{reg}
regs.texi(,170) @kindex C-x r n
regs.texi(,171) @findex number-to-register
regs.texi(,172) Store @var{number} into register @var{reg} (@code{number-to-register}).
regs.texi(,173) @item C-u @var{number} C-x r + @var{reg}
regs.texi(,174) @kindex C-x r +
regs.texi(,175) @findex increment-register
regs.texi(,176) Increment the number in register @var{reg} by @var{number}
regs.texi(,177) (@code{increment-register}).
regs.texi(,178) @item C-x r g @var{reg}
regs.texi(,179) Insert the number from register @var{reg} into the buffer.
regs.texi(,180) @end table
regs.texi(,181) 
regs.texi(,182)   @kbd{C-x r g} is the same command used to insert any other
regs.texi(,183) sort of register contents into the buffer.
regs.texi(,184) 
regs.texi(,185) @node RegFiles, Bookmarks, RegNumbers, Registers
regs.texi(,186) @section Keeping File Names in Registers
regs.texi(,187) 
regs.texi(,188)   If you visit certain file names frequently, you can visit them more
regs.texi(,189) conveniently if you put their names in registers.  Here's the Lisp code
regs.texi(,190) used to put a file name in a register:
regs.texi(,191) 
regs.texi(,192) @smallexample
regs.texi(,193) (set-register ?@var{r} '(file . @var{name}))
regs.texi(,194) @end smallexample
regs.texi(,195) 
regs.texi(,196) @need 3000
regs.texi(,197) @noindent
regs.texi(,198) For example,
regs.texi(,199) 
regs.texi(,200) @smallexample
regs.texi(,201) (set-register ?z '(file . "/usr/src/xemacs/src/ChangeLog"))
regs.texi(,202) @end smallexample
regs.texi(,203) 
regs.texi(,204) @noindent
regs.texi(,205) puts the file name shown in register @samp{z}.
regs.texi(,206) 
regs.texi(,207)   To visit the file whose name is in register @var{r}, type @kbd{C-x r j
regs.texi(,208) @var{r}}.  (This is the same command used to jump to a position or
regs.texi(,209) restore a frame configuration.)
regs.texi(,210) 
regs.texi(,211) @node Bookmarks,  , RegFiles, Registers
regs.texi(,212) @section Bookmarks
regs.texi(,213) @cindex bookmarks
regs.texi(,214) 
regs.texi(,215)   @dfn{Bookmarks} are somewhat like registers in that they record
regs.texi(,216) positions you can jump to.  Unlike registers, they have long names, and
regs.texi(,217) they persist automatically from one Emacs session to the next.  The
regs.texi(,218) prototypical use of bookmarks is to record ``where you were reading'' in
regs.texi(,219) various files.
regs.texi(,220) 
regs.texi(,221)   Note: bookmark.el is distributed in edit-utils package.  You need to
regs.texi(,222) install that to use bookmark facility (@pxref{Packages}).
regs.texi(,223) 
regs.texi(,224) @table @kbd
regs.texi(,225) @item C-x r m @key{RET}
regs.texi(,226) Set the bookmark for the visited file, at point.
regs.texi(,227) 
regs.texi(,228) @item C-x r m @var{bookmark} @key{RET}
regs.texi(,229) @findex bookmark-set
regs.texi(,230) Set the bookmark named @var{bookmark} at point (@code{bookmark-set}).
regs.texi(,231) 
regs.texi(,232) @item C-x r b @var{bookmark} @key{RET}
regs.texi(,233) @findex bookmark-jump
regs.texi(,234) Jump to the bookmark named @var{bookmark} (@code{bookmark-jump}).
regs.texi(,235) 
regs.texi(,236) @item C-x r l
regs.texi(,237) @findex list-bookmarks
regs.texi(,238) List all bookmarks (@code{list-bookmarks}).
regs.texi(,239) 
regs.texi(,240) @item M-x bookmark-save
regs.texi(,241) @findex bookmark-save
regs.texi(,242) Save all the current bookmark values in the default bookmark file.
regs.texi(,243) @end table
regs.texi(,244) 
regs.texi(,245) @kindex C-x r m
regs.texi(,246) @findex bookmark-set
regs.texi(,247) @kindex C-x r b
regs.texi(,248) @findex bookmark-jump
regs.texi(,249)   The prototypical use for bookmarks is to record one current position
regs.texi(,250) in each of several files.  So the command @kbd{C-x r m}, which sets a
regs.texi(,251) bookmark, uses the visited file name as the default for the bookmark
regs.texi(,252) name.  If you name each bookmark after the file it points to, then you
regs.texi(,253) can conveniently revisit any of those files with @kbd{C-x r b}, and move
regs.texi(,254) to the position of the bookmark at the same time.
regs.texi(,255) 
regs.texi(,256) @kindex C-x r l
regs.texi(,257)   To display a list of all your bookmarks in a separate buffer, type
regs.texi(,258) @kbd{C-x r l} (@code{list-bookmarks}).  If you switch to that buffer,
regs.texi(,259) you can use it to edit your bookmark definitions or annotate the
regs.texi(,260) bookmarks.  Type @kbd{C-h m} in that buffer for more information about
regs.texi(,261) its special editing commands.
regs.texi(,262) 
regs.texi(,263)   When you kill XEmacs, XEmacs offers to save your bookmark values in
regs.texi(,264) your default bookmark file, @file{~/.emacs.bmk}, if you have changed any
regs.texi(,265) bookmark values.  You can also save the bookmarks at any time with the
regs.texi(,266) @kbd{M-x bookmark-save} command.  The bookmark commands load your
regs.texi(,267) default bookmark file automatically.  This saving and loading is how
regs.texi(,268) bookmarks persist from one XEmacs session to the next.
regs.texi(,269) 
regs.texi(,270) @vindex bookmark-save-flag
regs.texi(,271)   If you set the variable @code{bookmark-save-flag} to 1, then each
regs.texi(,272) command that sets a bookmark will also save your bookmarks; this way,
regs.texi(,273) you don't lose any bookmark values even if XEmacs crashes.  (The value,
regs.texi(,274) if a number, says how many bookmark modifications should go by between
regs.texi(,275) saving.)
regs.texi(,276) 
regs.texi(,277) @vindex bookmark-search-size
regs.texi(,278)   Bookmark position values are saved with surrounding context, so that
regs.texi(,279) @code{bookmark-jump} can find the proper position even if the file is
regs.texi(,280) modified slightly.  The variable @code{bookmark-search-size} says how
regs.texi(,281) many characters of context to record, on each side of the bookmark's
regs.texi(,282) position.
regs.texi(,283) 
regs.texi(,284)   Here are some additional commands for working with bookmarks:
regs.texi(,285) 
regs.texi(,286) @table @kbd
regs.texi(,287) @item M-x bookmark-load @key{RET} @var{filename} @key{RET}
regs.texi(,288) @findex bookmark-load
regs.texi(,289) Load a file named @var{filename} that contains a list of bookmark
regs.texi(,290) values.  You can use this command, as well as @code{bookmark-write}, to
regs.texi(,291) work with other files of bookmark values in addition to your default
regs.texi(,292) bookmark file.
regs.texi(,293) 
regs.texi(,294) @item M-x bookmark-write @key{RET} @var{filename} @key{RET}
regs.texi(,295) @findex bookmark-write
regs.texi(,296) Save all the current bookmark values in the file @var{filename}.
regs.texi(,297) 
regs.texi(,298) @item M-x bookmark-delete @key{RET} @var{bookmark} @key{RET}
regs.texi(,299) @findex bookmark-delete
regs.texi(,300) Delete the bookmark named @var{bookmark}.
regs.texi(,301) 
regs.texi(,302) @item M-x bookmark-insert-location @key{RET} @var{bookmark} @key{RET}
regs.texi(,303) @findex bookmark-insert-location
regs.texi(,304) Insert in the buffer the name of the file that bookmark @var{bookmark}
regs.texi(,305) points to.
regs.texi(,306) 
regs.texi(,307) @item M-x bookmark-insert @key{RET} @var{bookmark} @key{RET}
regs.texi(,308) @findex bookmark-insert
regs.texi(,309) Insert in the buffer the @emph{contents} of the file that bookmark
regs.texi(,310) @var{bookmark} points to.
regs.texi(,311) @end table
display.texi(,1) 
display.texi(,2) @node Display, Search, Registers, Top
display.texi(,3) @chapter Controlling the Display
display.texi(,4) 
display.texi(,5)   Since only part of a large buffer fits in the window, XEmacs tries to show
display.texi(,6) the part that is likely to be interesting.  The display control commands
display.texi(,7) allow you to specify which part of the text you want to see.
display.texi(,8) 
display.texi(,9) @table @kbd
display.texi(,10) @item C-l
display.texi(,11) Clear frame and redisplay, scrolling the selected window to center
display.texi(,12) point vertically within it (@code{recenter}).
display.texi(,13) @item C-v
display.texi(,14) @itemx pgdn
display.texi(,15) @itemx next
display.texi(,16) Scroll forward (a windowful or a specified number of lines) (@code{scroll-up}).
display.texi(,17) On most X keyboards, you can get this functionality using the key
display.texi(,18) labelled @samp{Page Down}, which generates either @kbd{next} or @kbd{pgdn}.
display.texi(,19) @item M-v
display.texi(,20) @itemx pgup
display.texi(,21) @itemx prior
display.texi(,22) Scroll backward (@code{scroll-down}).  On most X keyboards, you can get
display.texi(,23) this functionality using the key labelled @samp{Page Up}, which
display.texi(,24) generates either @kbd{prior} or @kbd{pgup}.
display.texi(,25) @item @var{arg} C-l
display.texi(,26) Scroll so point is on line @var{arg} (@code{recenter}).
display.texi(,27) @item C-x <
display.texi(,28) @itemx C-pgdn
display.texi(,29) @itemx C-next
display.texi(,30) Scroll text in current window to the left (@code{scroll-left}).
display.texi(,31) @item C-x >
display.texi(,32) @itemx C-pgup
display.texi(,33) @itemx C-prior
display.texi(,34) Scroll to the right (@code{scroll-right}).
display.texi(,35) @item C-x $
display.texi(,36) Make deeply indented lines invisible (@code{set-selective-display}).
display.texi(,37) @end table
display.texi(,38) 
display.texi(,39) @menu
display.texi(,40) * Scrolling::	           Moving text up and down in a window.
display.texi(,41) * Horizontal Scrolling::   Moving text left and right in a window.
display.texi(,42) * Selective Display::      Hiding lines with lots of indentation.
display.texi(,43) * Display Vars::           Information on variables for customizing display.
display.texi(,44) @end menu
display.texi(,45) 
display.texi(,46) @node Scrolling, Horizontal Scrolling, Display, Display
display.texi(,47) @section Scrolling
display.texi(,48) 
display.texi(,49)   If a buffer contains text that is too large to fit entirely within the
display.texi(,50) window that is displaying the buffer, XEmacs shows a contiguous section of
display.texi(,51) the text.  The section shown always contains point.
display.texi(,52) 
display.texi(,53) @cindex scrolling
display.texi(,54)   @dfn{Scrolling} means moving text up or down in the window so that
display.texi(,55) different parts of the text are visible.  Scrolling forward means that text
display.texi(,56) moves up, and new text appears at the bottom.  Scrolling backward moves
display.texi(,57) text down and new text appears at the top.
display.texi(,58) 
display.texi(,59)   Scrolling happens automatically if you move point past the bottom or top
display.texi(,60) of the window.  You can also explicitly request scrolling with the commands
display.texi(,61) in this section.
display.texi(,62) 
display.texi(,64) @table @kbd
display.texi(,65) @item C-l
display.texi(,66) Clear frame and redisplay, scrolling the selected window to center
display.texi(,67) point vertically within it (@code{recenter}).
display.texi(,68) @item C-v
display.texi(,69) @itemx pgdn
display.texi(,70) @itemx next
display.texi(,71) Scroll forward (a windowful or a specified number of lines) (@code{scroll-up}).
display.texi(,72) @item M-v
display.texi(,73) @itemx pgup
display.texi(,74) @itemx prior
display.texi(,75) Scroll backward (@code{scroll-down}).
display.texi(,76) @item @var{arg} C-l
display.texi(,77) Scroll so point is on line @var{arg} (@code{recenter}).
display.texi(,78) @end table
display.texi(,80) 
display.texi(,81) @kindex C-l
display.texi(,82) @findex recenter
display.texi(,83)   The most basic scrolling command is @kbd{C-l} (@code{recenter}) with no
display.texi(,84) argument.  It clears the entire frame and redisplays all windows.  In
display.texi(,85) addition, it scrolls the selected window so that point is halfway down
display.texi(,86) from the top of the window.
display.texi(,87) 
display.texi(,88) @kindex C-v
display.texi(,89) @kindex M-v
display.texi(,90) @kindex pgup
display.texi(,91) @kindex pgdn
display.texi(,92) @kindex next
display.texi(,93) @kindex prior
display.texi(,94) @findex scroll-up
display.texi(,95) @findex scroll-down
display.texi(,96)   The scrolling commands @kbd{C-v} and @kbd{M-v} let you move all the text
display.texi(,97) in the window up or down a few lines.  @kbd{C-v} (@code{scroll-up}) with an
display.texi(,98) argument shows you that many more lines at the bottom of the window, moving
display.texi(,99) the text and point up together as @kbd{C-l} might.  @kbd{C-v} with a
display.texi(,100) negative argument shows you more lines at the top of the window.
display.texi(,101) @kbd{Meta-v} (@code{scroll-down}) is like @kbd{C-v}, but moves in the
display.texi(,102) opposite direction.@refill
display.texi(,103) 
display.texi(,104) @vindex next-screen-context-lines
display.texi(,105)   To read the buffer a windowful at a time, use @kbd{C-v} with no
display.texi(,106) argument.  @kbd{C-v} takes the last two lines at the bottom of the
display.texi(,107) window and puts them at the top, followed by nearly a whole windowful of
display.texi(,108) lines not previously visible.  Point moves to the new top of the window
display.texi(,109) if it was in the text scrolled off the top.  @kbd{M-v} with no argument
display.texi(,110) moves backward with similar overlap.  The number of lines of overlap
display.texi(,111) across a @kbd{C-v} or @kbd{M-v} is controlled by the variable
display.texi(,112) @code{next-screen-context-lines}; by default, it is two.
display.texi(,113) 
display.texi(,114)   Another way to scroll is using @kbd{C-l} with a numeric argument.
display.texi(,115) @kbd{C-l} does not clear the frame when given an argument; it only
display.texi(,116) scrolls the selected window.  With a positive argument @var{n}, @kbd{C-l}
display.texi(,117) repositions text to put point @var{n} lines down from the top.  An
display.texi(,118) argument of zero puts point on the very top line.  Point does not move
display.texi(,119) with respect to the text; rather, the text and point move rigidly on the
display.texi(,120) frame.  @kbd{C-l} with a negative argument puts point that many lines
display.texi(,121) from the bottom of the window.  For example, @kbd{C-u - 1 C-l} puts
display.texi(,122) point on the bottom line, and @kbd{C-u - 5 C-l} puts it five lines from
display.texi(,123) the bottom.  Just @kbd{C-u} as argument, as in @kbd{C-u C-l}, scrolls
display.texi(,124) point to the center of the frame.
display.texi(,125) 
display.texi(,126) @vindex scroll-step
display.texi(,127)   Scrolling happens automatically if point has moved out of the visible
display.texi(,128) portion of the text when it is time to display.  Usually scrolling is
display.texi(,129) done  to put point vertically centered within the window.  However, if
display.texi(,130) the variable @code{scroll-step} has a non-zero value, an attempt is made to
display.texi(,131) scroll the buffer by that many lines; if that is enough to bring point back
display.texi(,132) into visibility, that is what happens.
display.texi(,133) 
display.texi(,134)   Scrolling happens automatically if point has moved out of the visible
display.texi(,135) portion of the text when it is time to display.  Usually scrolling is
display.texi(,136) done  to put point vertically centered within the window.  However, if
display.texi(,137) the variable @code{scroll-step} has a non-zero value, an attempt is made to
display.texi(,138) scroll the buffer by that many lines; if that is enough to bring point back
display.texi(,139) into visibility, that is what happens.
display.texi(,140) 
display.texi(,141) @vindex scroll-conservatively
display.texi(,142)   If you set @code{scroll-step} to a small value because you want to use 
display.texi(,143) arrow keys to scroll the screen without recentering, the redisplay
display.texi(,144) preemption will likely make XEmacs keep recentering the screen when
display.texi(,145) scrolling fast, regardless of @code{scroll-step}.  To prevent this, set
display.texi(,146) @code{scroll-conservatively} to a small value, which will have the
display.texi(,147) result of overriding the redisplay preemption.
display.texi(,148) 
display.texi(,149) @node Horizontal Scrolling,, Scrolling, Display
display.texi(,150) @section Horizontal Scrolling
display.texi(,151) 
display.texi(,153) @table @kbd
display.texi(,154) @item C-x <
display.texi(,155) Scroll text in current window to the left (@code{scroll-left}).
display.texi(,156) @item C-x >
display.texi(,157) Scroll to the right (@code{scroll-right}).
display.texi(,158) @end table
display.texi(,160) 
display.texi(,161) @kindex C-x <
display.texi(,162) @kindex C-x >
display.texi(,163) @findex scroll-left
display.texi(,164) @findex scroll-right
display.texi(,165) @cindex horizontal scrolling
display.texi(,166)   The text in a window can also be scrolled horizontally.  This means that
display.texi(,167) each line of text is shifted sideways in the window, and one or more
display.texi(,168) characters at the beginning of each line are not displayed at all.  When a
display.texi(,169) window has been scrolled horizontally in this way, text lines are truncated
display.texi(,170) rather than continued (@pxref{Continuation Lines}), with a @samp{$} appearing
display.texi(,171) in the first column when there is text truncated to the left, and in the
display.texi(,172) last column when there is text truncated to the right.
display.texi(,173) 
display.texi(,174)   The command @kbd{C-x <} (@code{scroll-left}) scrolls the selected
display.texi(,175) window to the left by @var{n} columns with argument @var{n}.  With no
display.texi(,176) argument, it scrolls by almost the full width of the window (two columns
display.texi(,177) less, to be precise).  @kbd{C-x >} (@code{scroll-right}) scrolls
display.texi(,178) similarly to the right.  The window cannot be scrolled any farther to
display.texi(,179) the right once it is displaying normally (with each line starting at the
display.texi(,180) window's left margin); attempting to do so has no effect.
display.texi(,181) 
display.texi(,182) @node Selective Display, Display Vars, Display, Display
display.texi(,183) @section Selective Display
display.texi(,184) @findex set-selective-display
display.texi(,185) @kindex C-x $
display.texi(,186) 
display.texi(,187)   XEmacs can hide lines indented more than a certain number
display.texi(,188) of columns (you specify how many columns).  This allows you  to get an
display.texi(,189) overview of a part of a program.
display.texi(,190) 
display.texi(,191)   To hide lines, type @kbd{C-x $} (@code{set-selective-display}) with a
display.texi(,192) numeric argument @var{n}.  (@xref{Arguments}, for information on giving
display.texi(,193) the argument.)  Lines with at least @var{n} columns of indentation
display.texi(,194) disappear from the screen.  The only indication of their presence are
display.texi(,195) three dots (@samp{@dots{}}), which appear at the end of each visible
display.texi(,196) line that is followed by one or more invisible ones.@refill
display.texi(,197) 
display.texi(,198)   The invisible lines are still present in the buffer, and most editing
display.texi(,199) commands see them as usual, so it is very easy to put point in the middle
display.texi(,200) of invisible text.  When this happens, the cursor appears at the end of the
display.texi(,201) previous line, after the three dots.  If point is at the end of the visible
display.texi(,202) line, before the newline that ends it, the cursor appears before the three
display.texi(,203) dots.
display.texi(,204) 
display.texi(,205)   The commands @kbd{C-n} and @kbd{C-p} move across the invisible lines
display.texi(,206) as if they were not there.
display.texi(,207) 
display.texi(,208)   To make everything visible again, type @kbd{C-x $} with no argument.
display.texi(,209) 
display.texi(,210) @node Display Vars,, Selective Display, Display
display.texi(,211) @section Variables Controlling Display
display.texi(,212) 
display.texi(,213)   This section contains information for customization only.  Beginning
display.texi(,214) users should skip it.
display.texi(,215) 
display.texi(,216) @vindex no-redraw-on-reenter
display.texi(,217)   When you reenter XEmacs after suspending, XEmacs normally clears the
display.texi(,218) screen and redraws the entire display.  On some terminals with more than
display.texi(,219) one page of memory, it is possible to arrange the termcap entry so that
display.texi(,220) the @samp{ti} and @samp{te} strings (output to the terminal when XEmacs
display.texi(,221) is entered and exited, respectively) switch between pages of memory so
display.texi(,222) as to use one page for XEmacs and another page for other output.  In that
display.texi(,223) case, you might want to set the variable @code{no-redraw-on-reenter} to
display.texi(,224) non-@code{nil} so that XEmacs will assume, when resumed, that the screen
display.texi(,225) page it is using still contains what XEmacs last wrote there.
display.texi(,226) 
display.texi(,227) @vindex echo-keystrokes
display.texi(,228)   The variable @code{echo-keystrokes} controls the echoing of multi-character
display.texi(,229) keys; its value is the number of seconds of pause required to cause echoing
display.texi(,230) to start, or zero, meaning don't echo at all.  @xref{Echo Area}.
display.texi(,231) 
display.texi(,232) @vindex ctl-arrow
display.texi(,233)   If the variable @code{ctl-arrow} is @code{nil}, control characters in the
display.texi(,234) buffer are displayed with octal escape sequences, all except newline and
display.texi(,235) tab.  If its value is @code{t}, then control characters will be printed 
display.texi(,236) with an up-arrow, for example @kbd{^A}.  
display.texi(,237) 
display.texi(,238) If its value is not @code{t} and not @code{nil}, then characters whose
display.texi(,239) code is greater than 160 (that is, the space character (32) with its
display.texi(,240) high bit set) will be assumed to be printable, and will be displayed
display.texi(,241) without alteration.  This is the default when running under X Windows,
display.texi(,242) since XEmacs assumes an ISO/8859-1 character set (also known as
display.texi(,243) ``Latin1'').  The @code{ctl-arrow} variable may also be set to an
display.texi(,244) integer, in which case all characters whose codes are greater than or
display.texi(,245) equal to that value will be assumed to be printable.
display.texi(,246) 
display.texi(,247) Altering the value of @code{ctl-arrow} makes it local to the current
display.texi(,248) buffer; until that time, the default value is in effect.  @xref{Locals}.
display.texi(,249) 
display.texi(,250) @vindex tab-width
display.texi(,251)   Normally, a tab character in the buffer is displayed as whitespace which
display.texi(,252) extends to the next display tab stop position, and display tab stops come
display.texi(,253) at intervals equal to eight spaces.  The number of spaces per tab is
display.texi(,254) controlled by the variable @code{tab-width}, which is made local by
display.texi(,255) changing it, just like @code{ctl-arrow}.  Note that how the tab character
display.texi(,256) in the buffer is displayed has nothing to do with the definition of
display.texi(,257) @key{TAB} as a command.
display.texi(,258) 
display.texi(,259) @vindex selective-display-ellipses
display.texi(,260)   If you set the variable @code{selective-display-ellipses} to @code{nil},
display.texi(,261) the three dots at the end of a line that precedes invisible
display.texi(,262) lines do not appear.  There is no visible indication of the invisible lines.
display.texi(,263) This variable becomes local automatically when set.
search.texi(,1) 
search.texi(,2) @node Search, Fixit, Display, Top
search.texi(,3) @chapter Searching and Replacement
search.texi(,4) @cindex searching
search.texi(,5) 
search.texi(,6)   Like other editors, Emacs has commands for searching for occurrences of
search.texi(,7) a string.  The principal search command is unusual in that it is
search.texi(,8) @dfn{incremental}: it begins to search before you have finished typing the
search.texi(,9) search string.  There are also non-incremental search commands more like
search.texi(,10) those of other editors.
search.texi(,11) 
search.texi(,12)   Besides the usual @code{replace-string} command that finds all
search.texi(,13) occurrences of one string and replaces them with another, Emacs has a fancy
search.texi(,14) replacement command called @code{query-replace} which asks interactively
search.texi(,15) which occurrences to replace.
search.texi(,16) 
search.texi(,17) @menu
search.texi(,18) * Incremental Search::     Search happens as you type the string.
search.texi(,19) * Non-Incremental Search:: Specify entire string and then search.
search.texi(,20) * Word Search::            Search for sequence of words.
search.texi(,21) * Regexp Search::          Search for match for a regexp.
search.texi(,22) * Regexps::                Syntax of regular expressions.
search.texi(,23) * Search Case::            To ignore case while searching, or not.
search.texi(,24) * Replace::                Search, and replace some or all matches.
search.texi(,25) * Other Repeating Search:: Operating on all matches for some regexp.
search.texi(,26) @end menu
search.texi(,27) 
search.texi(,28) @node Incremental Search, Non-Incremental Search, Search, Search
search.texi(,29) @section Incremental Search
search.texi(,30) 
search.texi(,31)   An incremental search begins searching as soon as you type the first
search.texi(,32) character of the search string.  As you type in the search string, Emacs
search.texi(,33) shows you where the string (as you have typed it so far) is found.
search.texi(,34) When you have typed enough characters to identify the place you want, you
search.texi(,35) can stop.  Depending on what you do next, you may or may not need to
search.texi(,36) terminate the search explicitly with a @key{RET}.
search.texi(,37) 
search.texi(,38) @c WideCommands
search.texi(,39) @table @kbd
search.texi(,40) @item C-s
search.texi(,41) Incremental search forward (@code{isearch-forward}).
search.texi(,42) @item C-r
search.texi(,43) Incremental search backward (@code{isearch-backward}).
search.texi(,44) @end table
search.texi(,45) 
search.texi(,46) @kindex C-s
search.texi(,47) @kindex C-r
search.texi(,48) @findex isearch-forward
search.texi(,49) @findex isearch-backward
search.texi(,50)   @kbd{C-s} starts an incremental search.  @kbd{C-s} reads characters from
search.texi(,51) the keyboard and positions the cursor at the first occurrence of the
search.texi(,52) characters that you have typed.  If you type @kbd{C-s} and then @kbd{F},
search.texi(,53) the cursor moves right after the first @samp{F}.  Type an @kbd{O}, and see
search.texi(,54) the cursor move to after the first @samp{FO}.  After another @kbd{O}, the
search.texi(,55) cursor is after the first @samp{FOO} after the place where you started the
search.texi(,56) search.  Meanwhile, the search string @samp{FOO} has been echoed in the
search.texi(,57) echo area.@refill
search.texi(,58) 
search.texi(,59)   The echo area display ends with three dots when actual searching is going
search.texi(,60) on.  When search is waiting for more input, the three dots are removed.
search.texi(,61) (On slow terminals, the three dots are not displayed.)
search.texi(,62) 
search.texi(,63)   If you make a mistake in typing the search string, you can erase
search.texi(,64) characters with @key{DEL}.  Each @key{DEL} cancels the last character of the
search.texi(,65) search string.  This does not happen until Emacs is ready to read another
search.texi(,66) input character; first it must either find, or fail to find, the character
search.texi(,67) you want to erase.  If you do not want to wait for this to happen, use
search.texi(,68) @kbd{C-g} as described below.@refill
search.texi(,69) 
search.texi(,70)   When you are satisfied with the place you have reached, you can type
search.texi(,71) @key{RET} (or @key{C-m}), which stops searching, leaving the cursor where 
search.texi(,72) the search brought it.  Any command not specially meaningful in searches also
search.texi(,73) stops the search and is then executed.  Thus, typing @kbd{C-a} exits the
search.texi(,74) search and then moves to the beginning of the line.  @key{RET} is necessary
search.texi(,75) only if the next command you want to type is a printing character,
search.texi(,76) @key{DEL}, @key{ESC}, or another control character that is special
search.texi(,77) within searches (@kbd{C-q}, @kbd{C-w}, @kbd{C-r}, @kbd{C-s}, or @kbd{C-y}).
search.texi(,78) 
search.texi(,79)   Sometimes you search for @samp{FOO} and find it, but were actually
search.texi(,80) looking for a different occurrence of it.  To move to the next occurrence
search.texi(,81) of the search string, type another @kbd{C-s}.  Do this as often as
search.texi(,82) necessary.  If you overshoot, you can cancel some @kbd{C-s}
search.texi(,83) characters with @key{DEL}.
search.texi(,84) 
search.texi(,85)   After you exit a search, you can search for the same string again by
search.texi(,86) typing just @kbd{C-s C-s}: the first @kbd{C-s} is the key that invokes
search.texi(,87) incremental search, and the second @kbd{C-s} means ``search again''.
search.texi(,88) 
search.texi(,89)   If the specified string is not found at all, the echo area displays
search.texi(,90) the text @samp{Failing I-Search}.  The cursor is after the place where
search.texi(,91) Emacs found as much of your string as it could.  Thus, if you search for
search.texi(,92) @samp{FOOT}, and there is no @samp{FOOT}, the cursor may be after the
search.texi(,93) @samp{FOO} in @samp{FOOL}.  At this point there are several things you
search.texi(,94) can do.  If you mistyped the search string, correct it.  If you like the
search.texi(,95) place you have found, you can type @key{RET} or some other Emacs command
search.texi(,96) to ``accept what the search offered''.  Or you can type @kbd{C-g}, which
search.texi(,97) removes from the search string the characters that could not be found
search.texi(,98) (the @samp{T} in @samp{FOOT}), leaving those that were found (the
search.texi(,99) @samp{FOO} in @samp{FOOT}).  A second @kbd{C-g} at that point cancels
search.texi(,100) the search entirely, returning point to where it was when the search
search.texi(,101) started.
search.texi(,102) 
search.texi(,103)   If a search is failing and you ask to repeat it by typing another
search.texi(,104) @kbd{C-s}, it starts again from the beginning of the buffer.  Repeating
search.texi(,105) a failing backward search with @kbd{C-r} starts again from the end.  This
search.texi(,106) is called @dfn{wrapping around}.  @samp{Wrapped} appears in the search
search.texi(,107) prompt once this has happened.
search.texi(,108) 
search.texi(,109) @cindex quitting (in search)
search.texi(,110)   The @kbd{C-g} ``quit'' character does special things during searches;
search.texi(,111) just what it does depends on the status of the search.  If the search has
search.texi(,112) found what you specified and is waiting for input, @kbd{C-g} cancels the
search.texi(,113) entire search.  The cursor moves back to where you started the search.  If
search.texi(,114) @kbd{C-g} is typed when there are characters in the search string that have
search.texi(,115) not been found---because Emacs is still searching for them, or because it
search.texi(,116) has failed to find them---then the search string characters which have not
search.texi(,117) been found are discarded from the search string.  The
search.texi(,118) search is now successful and waiting for more input, so a second @kbd{C-g}
search.texi(,119) cancels the entire search.
search.texi(,120) 
search.texi(,121)   To search for a control character such as @kbd{C-s} or @key{DEL} or
search.texi(,122) @key{ESC}, you must quote it by typing @kbd{C-q} first.  This function
search.texi(,123) of @kbd{C-q} is analogous to its meaning as an Emacs command: it causes
search.texi(,124) the following character to be treated the way a graphic character would
search.texi(,125) normally be treated in the same context.
search.texi(,126) 
search.texi(,127)  To search backwards, you can use @kbd{C-r} instead of @kbd{C-s} to
search.texi(,128) start the search; @kbd{C-r} is the key that runs the command
search.texi(,129) (@code{isearch-backward}) to search backward.  You can also use
search.texi(,130) @kbd{C-r} to change from searching forward to searching backwards.  Do
search.texi(,131) this if a search fails because the place you started was too far down in the
search.texi(,132) file.  Repeated @kbd{C-r} keeps looking for more occurrences backwards.
search.texi(,133) @kbd{C-s} starts going forward again.  You can cancel @kbd{C-r} in a
search.texi(,134) search with @key{DEL}.
search.texi(,135) 
search.texi(,136)   The characters @kbd{C-y} and @kbd{C-w} can be used in incremental search
search.texi(,137) to grab text from the buffer into the search string.  This makes it
search.texi(,138) convenient to search for another occurrence of text at point.  @kbd{C-w}
search.texi(,139) copies the word after point as part of the search string, advancing
search.texi(,140) point over that word.  Another @kbd{C-s} to repeat the search will then
search.texi(,141) search for a string including that word.  @kbd{C-y} is similar to @kbd{C-w}
search.texi(,142) but copies the rest of the current line into the search string.
search.texi(,143) 
search.texi(,144)   The characters @kbd{M-p} and @kbd{M-n} can be used in an incremental
search.texi(,145) search to recall things which you have searched for in the past.  A
search.texi(,146) list of the last 16 things you have searched for is retained, and 
search.texi(,147) @kbd{M-p} and @kbd{M-n} let you cycle through that ring.
search.texi(,148) 
search.texi(,149) The character @kbd{M-@key{TAB}} does completion on the elements in 
search.texi(,150) the search history ring.  For example, if you know that you have
search.texi(,151) recently searched for the string @code{POTATOE}, you could type
search.texi(,152) @kbd{C-s P O M-@key{TAB}}.  If you had searched for other strings
search.texi(,153) beginning with @code{PO} then you would be shown a list of them, and
search.texi(,154) would need to type more to select one. 
search.texi(,155) 
search.texi(,156)   You can change any of the special characters in incremental search via
search.texi(,157) the normal keybinding mechanism: simply add a binding to the 
search.texi(,158) @code{isearch-mode-map}.  For example, to make the character
search.texi(,159) @kbd{C-b} mean ``search backwards'' while in isearch-mode, do this:
search.texi(,160) 
search.texi(,161) @example
search.texi(,162) (define-key isearch-mode-map "\C-b" 'isearch-repeat-backward)
search.texi(,163) @end example
search.texi(,164) 
search.texi(,165) These are the default bindings of isearch-mode:
search.texi(,166) 
search.texi(,167) @findex isearch-delete-char
search.texi(,168) @findex isearch-exit
search.texi(,169) @findex isearch-quote-char
search.texi(,170) @findex isearch-repeat-forward
search.texi(,171) @findex isearch-repeat-backward
search.texi(,172) @findex isearch-yank-line
search.texi(,173) @findex isearch-yank-word
search.texi(,174) @findex isearch-abort
search.texi(,175) @findex isearch-ring-retreat
search.texi(,176) @findex isearch-ring-advance
search.texi(,177) @findex isearch-complete
search.texi(,178) 
search.texi(,179) @kindex DEL (isearch-mode)
search.texi(,180) @kindex RET (isearch-mode)
search.texi(,181) @kindex C-q (isearch-mode)
search.texi(,182) @kindex C-s (isearch-mode)
search.texi(,183) @kindex C-r (isearch-mode)
search.texi(,184) @kindex C-y (isearch-mode)
search.texi(,185) @kindex C-w (isearch-mode)
search.texi(,186) @kindex C-g (isearch-mode)
search.texi(,187) @kindex M-p (isearch-mode)
search.texi(,188) @kindex M-n (isearch-mode)
search.texi(,189) @kindex M-TAB (isearch-mode)
search.texi(,190) 
search.texi(,191) @table @kbd
search.texi(,192) @item DEL
search.texi(,193) Delete a character from the incremental search string (@code{isearch-delete-char}).
search.texi(,194) @item RET
search.texi(,195) Exit incremental search (@code{isearch-exit}).
search.texi(,196) @item C-q
search.texi(,197) Quote special characters for incremental search (@code{isearch-quote-char}).
search.texi(,198) @item C-s
search.texi(,199) Repeat incremental search forward (@code{isearch-repeat-forward}).
search.texi(,200) @item C-r
search.texi(,201) Repeat incremental search backward (@code{isearch-repeat-backward}).
search.texi(,202) @item C-y
search.texi(,203) Pull rest of line from buffer into search string (@code{isearch-yank-line}).
search.texi(,204) @item C-w
search.texi(,205) Pull next word from buffer into search string (@code{isearch-yank-word}).
search.texi(,206) @item C-g
search.texi(,207) Cancels input back to what has been found successfully, or aborts the 
search.texi(,208) isearch (@code{isearch-abort}).
search.texi(,209) @item M-p
search.texi(,210) Recall the previous element in the isearch history ring 
search.texi(,211) (@code{isearch-ring-retreat}).
search.texi(,212) @item M-n
search.texi(,213) Recall the next element in the isearch history ring 
search.texi(,214) (@code{isearch-ring-advance}).
search.texi(,215) @item M-@key{TAB}
search.texi(,216) Do completion on the elements in the isearch history ring 
search.texi(,217) (@code{isearch-complete}).
search.texi(,218) 
search.texi(,219) @end table
search.texi(,220) 
search.texi(,221) Any other character which is normally inserted into a buffer when typed
search.texi(,222) is automatically added to the search string in isearch-mode.
search.texi(,223) 
search.texi(,224) @subsection Slow Terminal Incremental Search
search.texi(,225) 
search.texi(,226)   Incremental search on a slow terminal uses a modified style of display
search.texi(,227) that is designed to take less time.  Instead of redisplaying the buffer at
search.texi(,228) each place the search gets to, it creates a new single-line window and uses
search.texi(,229) that to display the line the search has found.  The single-line window
search.texi(,230) appears as soon as point gets outside of the text that is already
search.texi(,231) on the screen.
search.texi(,232) 
search.texi(,233)   When the search is terminated, the single-line window is removed.  Only
search.texi(,234) at this time the window in which the search was done is redisplayed to show
search.texi(,235) its new value of point.
search.texi(,236) 
search.texi(,237)   The three dots at the end of the search string, normally used to indicate
search.texi(,238) that searching is going on, are not displayed in slow style display.
search.texi(,239) 
search.texi(,240) @vindex search-slow-speed
search.texi(,241)   The slow terminal style of display is used when the terminal baud rate is
search.texi(,242) less than or equal to the value of the variable @code{search-slow-speed},
search.texi(,243) initially 1200.
search.texi(,244) 
search.texi(,245) @vindex search-slow-window-lines
search.texi(,246)   The number of lines to use in slow terminal search display is controlled
search.texi(,247) by the variable @code{search-slow-window-lines}.  Its normal value is 1.
search.texi(,248) 
search.texi(,249) @node Non-Incremental Search, Word Search, Incremental Search, Search
search.texi(,250) @section Non-Incremental Search
search.texi(,251) @cindex non-incremental search
search.texi(,252) 
search.texi(,253)   Emacs also has conventional non-incremental search commands, which require
search.texi(,254) you type the entire search string before searching begins.
search.texi(,255) 
search.texi(,256) @table @kbd
search.texi(,257) @item C-s @key{RET} @var{string} @key{RET}
search.texi(,258) Search for @var{string}.
search.texi(,259) @item C-r @key{RET} @var{string} @key{RET}
search.texi(,260) Search backward for @var{string}.
search.texi(,261) @end table
search.texi(,262) 
search.texi(,263)   To do a non-incremental search, first type @kbd{C-s @key{RET}}
search.texi(,264) (or @kbd{C-s C-m}).  This enters the minibuffer to read the search string.
search.texi(,265) Terminate the string with @key{RET} to start the search.  If the string
search.texi(,266) is not found, the search command gets an error.
search.texi(,267) 
search.texi(,268)  By default, @kbd{C-s} invokes incremental search, but if you give it an
search.texi(,269) empty argument, which would otherwise be useless, it invokes non-incremental
search.texi(,270) search.  Therefore, @kbd{C-s @key{RET}} invokes non-incremental search. 
search.texi(,271) @kbd{C-r @key{RET}} also works this way.
search.texi(,272) 
search.texi(,273) @findex search-forward
search.texi(,274) @findex search-backward
search.texi(,275)   Forward and backward non-incremental searches are implemented by the
search.texi(,276) commands @code{search-forward} and @code{search-backward}.  You can bind
search.texi(,277) these commands to keys.  The reason that incremental
search.texi(,278) search is programmed to invoke them as well is that @kbd{C-s @key{RET}}
search.texi(,279) is the traditional sequence of characters used in Emacs to invoke
search.texi(,280) non-incremental search.
search.texi(,281) 
search.texi(,282)  Non-incremental searches performed using @kbd{C-s @key{RET}} do
search.texi(,283) not call @code{search-forward} right away.  They first check
search.texi(,284) if the next character is @kbd{C-w}, which requests a word search.
search.texi(,286) @xref{Word Search}.
search.texi(,288) 
search.texi(,289) @node Word Search, Regexp Search, Non-Incremental Search, Search
search.texi(,290) @section Word Search
search.texi(,291) @cindex word search
search.texi(,292) 
search.texi(,293)   Word search looks for a sequence of words without regard to how the
search.texi(,294) words are separated.  More precisely, you type a string of many words,
search.texi(,295) using single spaces to separate them, and the string is found even if
search.texi(,296) there are multiple spaces, newlines or other punctuation between the words.
search.texi(,297) 
search.texi(,298)   Word search is useful in editing documents formatted by text formatters.
search.texi(,299) If you edit while looking at the printed, formatted version, you can't tell
search.texi(,300) where the line breaks are in the source file.  Word search, allows you
search.texi(,301) to search  without having to know the line breaks.
search.texi(,302) 
search.texi(,303) @table @kbd
search.texi(,304) @item C-s @key{RET} C-w @var{words} @key{RET}
search.texi(,305) Search for @var{words}, ignoring differences in punctuation.
search.texi(,306) @item C-r @key{RET} C-w @var{words} @key{RET}
search.texi(,307) Search backward for @var{words}, ignoring differences in punctuation.
search.texi(,308) @end table
search.texi(,309) 
search.texi(,310)   Word search is a special case of non-incremental search.  It is invoked
search.texi(,311) with @kbd{C-s @key{RET} C-w} followed by the search string, which
search.texi(,312) must always be terminated with another @key{RET}.  Being non-incremental, this
search.texi(,313) search does not start until the argument is terminated.  It works by
search.texi(,314) constructing a regular expression and searching for that.  @xref{Regexp
search.texi(,315) Search}.
search.texi(,316) 
search.texi(,317)  You can do a backward word search with @kbd{C-r @key{RET} C-w}.
search.texi(,318) 
search.texi(,319) @findex word-search-forward
search.texi(,320) @findex word-search-backward
search.texi(,321)   Forward and backward word searches are implemented by the commands
search.texi(,322) @code{word-search-forward} and @code{word-search-backward}.  You can
search.texi(,323) bind these commands to keys.  The reason that incremental
search.texi(,324) search is programmed to invoke them as well is that @kbd{C-s @key{RET} C-w}
search.texi(,325) is the traditional Emacs sequence of keys for word search.
search.texi(,326) 
search.texi(,327) @node Regexp Search, Regexps, Word Search, Search
search.texi(,328) @section Regular Expression Search
search.texi(,329) @cindex regular expression
search.texi(,330) @cindex regexp
search.texi(,331) 
search.texi(,332)   A @dfn{regular expression} (@dfn{regexp}, for short) is a pattern that
search.texi(,333) denotes a (possibly infinite) set of strings.  Searching for matches
search.texi(,334) for a regexp is a powerful operation that editors on Unix systems have
search.texi(,335) traditionally offered.
search.texi(,336) 
search.texi(,337)  To gain a thorough understanding of regular expressions and how to use
search.texi(,338) them to best advantage, we recommend that you study @cite{Mastering
search.texi(,339) Regular Expressions, by Jeffrey E.F. Friedl, O'Reilly and Associates,
search.texi(,340) 1997}. (It's known as the "Hip Owls" book, because of the picture on its
search.texi(,341) cover.)  You might also read the manuals to @ref{(gawk)Top},
search.texi(,342) @ref{(ed)Top}, @cite{sed}, @cite{grep}, @ref{(perl)Top},
search.texi(,343) @ref{(regex)Top}, @ref{(rx)Top}, @cite{pcre}, and @ref{(flex)Top}, which
search.texi(,344) also make good use of regular expressions.
search.texi(,345) 
search.texi(,346)  The XEmacs regular expression syntax most closely resembles that of
search.texi(,347) @cite{ed}, or @cite{grep}, the GNU versions of which all utilize the GNU
search.texi(,348) @cite{regex} library.  XEmacs' version of @cite{regex} has recently been
search.texi(,349) extended with some Perl--like capabilities, described in the next
search.texi(,350) section.
search.texi(,351) 
search.texi(,352)  In XEmacs, you can search for the next match for a regexp either
search.texi(,353) incrementally or not.
search.texi(,354) 
search.texi(,355) @kindex M-C-s
search.texi(,356) @kindex M-C-r
search.texi(,357) @findex isearch-forward-regexp
search.texi(,358) @findex isearch-backward-regexp
search.texi(,359)   Incremental search for a regexp is done by typing @kbd{M-C-s}
search.texi(,360) (@code{isearch-forward-regexp}).  This command reads a search string
search.texi(,361) incrementally just like @kbd{C-s}, but it treats the search string as a
search.texi(,362) regexp rather than looking for an exact match against the text in the
search.texi(,363) buffer.  Each time you add text to the search string, you make the regexp
search.texi(,364) longer, and the new regexp is searched for.  A reverse regexp search command
search.texi(,365) @code{isearch-backward-regexp} also exists, bound to @kbd{M-C-r}.
search.texi(,366) 
search.texi(,367)   All of the control characters that do special things within an ordinary
search.texi(,368) incremental search have the same functionality in incremental regexp search.
search.texi(,369) Typing @kbd{C-s} or @kbd{C-r} immediately after starting a search
search.texi(,370) retrieves the last incremental search regexp used:
search.texi(,371) incremental regexp and non-regexp searches have independent defaults.
search.texi(,372) 
search.texi(,373) @findex re-search-forward
search.texi(,374) @findex re-search-backward
search.texi(,375)   Non-incremental search for a regexp is done by the functions
search.texi(,376) @code{re-search-forward} and @code{re-search-backward}.  You can invoke
search.texi(,377) them with @kbd{M-x} or bind them to keys.  You can also call
search.texi(,378) @code{re-search-forward} by way of incremental regexp search with
search.texi(,379) @kbd{M-C-s @key{RET}}; similarly for @code{re-search-backward} with
search.texi(,380) @kbd{M-C-r @key{RET}}.
search.texi(,381) 
search.texi(,382) @node Regexps, Search Case, Regexp Search, Search
search.texi(,383) @section Syntax of Regular Expressions
search.texi(,384) 
search.texi(,385)   Regular expressions have a syntax in which a few characters are
search.texi(,386) special constructs and the rest are @dfn{ordinary}.  An ordinary
search.texi(,387) character is a simple regular expression that matches that character and
search.texi(,388) nothing else.  The special characters are @samp{.}, @samp{*}, @samp{+},
search.texi(,389) @samp{?}, @samp{[}, @samp{]}, @samp{^}, @samp{$}, and @samp{\}; no new
search.texi(,390) special characters will be defined in the future.  Any other character
search.texi(,391) appearing in a regular expression is ordinary, unless a @samp{\}
search.texi(,392) precedes it.
search.texi(,393) 
search.texi(,394) For example, @samp{f} is not a special character, so it is ordinary, and
search.texi(,395) therefore @samp{f} is a regular expression that matches the string
search.texi(,396) @samp{f} and no other string.  (It does @emph{not} match the string
search.texi(,397) @samp{ff}.)  Likewise, @samp{o} is a regular expression that matches
search.texi(,398) only @samp{o}.@refill
search.texi(,399) 
search.texi(,400) Any two regular expressions @var{a} and @var{b} can be concatenated.  The
search.texi(,401) result is a regular expression that matches a string if @var{a} matches
search.texi(,402) some amount of the beginning of that string and @var{b} matches the rest of
search.texi(,403) the string.@refill
search.texi(,404) 
search.texi(,405) As a simple example, we can concatenate the regular expressions @samp{f}
search.texi(,406) and @samp{o} to get the regular expression @samp{fo}, which matches only
search.texi(,407) the string @samp{fo}.  Still trivial.  To do something more powerful, you
search.texi(,408) need to use one of the special characters.  Here is a list of them:
search.texi(,409) 
search.texi(,410) @need 1200
search.texi(,411) @table @kbd
search.texi(,412) @item .@: @r{(Period)}
search.texi(,413) @cindex @samp{.} in regexp
search.texi(,414) is a special character that matches any single character except a newline.
search.texi(,415) Using concatenation, we can make regular expressions like @samp{a.b}, which
search.texi(,416) matches any three-character string that begins with @samp{a} and ends with
search.texi(,417) @samp{b}.@refill
search.texi(,418) 
search.texi(,419) @item *
search.texi(,420) @cindex @samp{*} in regexp
search.texi(,421) is not a construct by itself; it is a quantifying suffix operator that
search.texi(,422) means to repeat the preceding regular expression as many times as
search.texi(,423) possible.  In @samp{fo*}, the @samp{*} applies to the @samp{o}, so
search.texi(,424) @samp{fo*} matches one @samp{f} followed by any number of @samp{o}s.
search.texi(,425) The case of zero @samp{o}s is allowed: @samp{fo*} does match
search.texi(,426) @samp{f}.@refill
search.texi(,427) 
search.texi(,428) @samp{*} always applies to the @emph{smallest} possible preceding
search.texi(,429) expression.  Thus, @samp{fo*} has a repeating @samp{o}, not a
search.texi(,430) repeating @samp{fo}.@refill
search.texi(,431) 
search.texi(,432) The matcher processes a @samp{*} construct by matching, immediately, as
search.texi(,433) many repetitions as can be found; it is "greedy".  Then it continues
search.texi(,434) with the rest of the pattern.  If that fails, backtracking occurs,
search.texi(,435) discarding some of the matches of the @samp{*}-modified construct in
search.texi(,436) case that makes it possible to match the rest of the pattern.  For
search.texi(,437) example, in matching @samp{ca*ar} against the string @samp{caaar}, the
search.texi(,438) @samp{a*} first tries to match all three @samp{a}s; but the rest of the
search.texi(,439) pattern is @samp{ar} and there is only @samp{r} left to match, so this
search.texi(,440) try fails.  The next alternative is for @samp{a*} to match only two
search.texi(,441) @samp{a}s.  With this choice, the rest of the regexp matches
search.texi(,442) successfully.@refill
search.texi(,443) 
search.texi(,444) Nested repetition operators can be extremely slow if they specify
search.texi(,445) backtracking loops.  For example, it could take hours for the regular
search.texi(,446) expression @samp{\(x+y*\)*a} to match the sequence
search.texi(,447) @samp{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxz}.  The slowness is because
search.texi(,448) Emacs must try each imaginable way of grouping the 35 @samp{x}'s before
search.texi(,449) concluding that none of them can work.  To make sure your regular
search.texi(,450) expressions run fast, check nested repetitions carefully.
search.texi(,451) 
search.texi(,452) @item +
search.texi(,453) @cindex @samp{+} in regexp
search.texi(,454) is a quantifying suffix operator similar to @samp{*} except that the
search.texi(,455) preceding expression must match at least once.  It is also "greedy".
search.texi(,456) So, for example, @samp{ca+r} matches the strings @samp{car} and
search.texi(,457) @samp{caaaar} but not the string @samp{cr}, whereas @samp{ca*r} matches
search.texi(,458) all three strings.
search.texi(,459) 
search.texi(,460) @item ?
search.texi(,461) @cindex @samp{?} in regexp
search.texi(,462) is a quantifying suffix operator similar to @samp{*}, except that the
search.texi(,463) preceding expression can match either once or not at all.  For example,
search.texi(,464) @samp{ca?r} matches @samp{car} or @samp{cr}, but does not match anything
search.texi(,465) else.
search.texi(,466) 
search.texi(,467) @item *?
search.texi(,468) @cindex @samp{*?} in regexp
search.texi(,469) works just like @samp{*}, except that rather than matching the longest
search.texi(,470) match, it matches the shortest match.  @samp{*?} is known as a
search.texi(,471) @dfn{non-greedy} quantifier, a regexp construct borrowed from Perl.
search.texi(,472) @c Did perl get this from somewhere?  What's the real history of *? ?
search.texi(,473) 
search.texi(,474) This construct is very useful for when you want to match the text inside
search.texi(,475) a pair of delimiters.  For instance, @samp{/\*.*?\*/} will match C
search.texi(,476) comments in a string.  This could not easily be achieved without the use
search.texi(,477) of a non-greedy quantifier.
search.texi(,478) 
search.texi(,479) This construct has not been available prior to XEmacs 20.4.  It is not
search.texi(,480) available in FSF Emacs.
search.texi(,481) 
search.texi(,482) @item +?
search.texi(,483) @cindex @samp{+?} in regexp
search.texi(,484) is the non-greedy version of @samp{+}.
search.texi(,485) 
search.texi(,486) @item ??
search.texi(,487) @cindex @samp{??} in regexp
search.texi(,488) is the non-greedy version of @samp{?}.
search.texi(,489) 
search.texi(,490) @item \@{n,m\@}
search.texi(,491) @c Note the spacing after the close brace is deliberate.
search.texi(,492) @cindex @samp{\@{n,m\@} }in regexp
search.texi(,493) serves as an interval quantifier, analogous to @samp{*} or @samp{+}, but
search.texi(,494) specifies that the expression must match at least @var{n} times, but no
search.texi(,495) more than @var{m} times.  This syntax is supported by most Unix regexp
search.texi(,496) utilities, and has been introduced to XEmacs for the version 20.3.
search.texi(,497) 
search.texi(,498) Unfortunately, the non-greedy version of this quantifier does not exist
search.texi(,499) currently, although it does in Perl.
search.texi(,500) 
search.texi(,501) @item [ @dots{} ]
search.texi(,502) @cindex character set (in regexp)
search.texi(,503) @cindex @samp{[} in regexp
search.texi(,504) @cindex @samp{]} in regexp
search.texi(,505) @samp{[} begins a @dfn{character set}, which is terminated by a
search.texi(,506) @samp{]}.  In the simplest case, the characters between the two brackets
search.texi(,507) form the set.  Thus, @samp{[ad]} matches either one @samp{a} or one
search.texi(,508) @samp{d}, and @samp{[ad]*} matches any string composed of just @samp{a}s
search.texi(,509) and @samp{d}s (including the empty string), from which it follows that
search.texi(,510) @samp{c[ad]*r} matches @samp{cr}, @samp{car}, @samp{cdr},
search.texi(,511) @samp{caddaar}, etc.@refill
search.texi(,512) 
search.texi(,513) The usual regular expression special characters are not special inside a
search.texi(,514) character set.  A completely different set of special characters exists
search.texi(,515) inside character sets: @samp{]}, @samp{-} and @samp{^}.@refill
search.texi(,516) 
search.texi(,517) @samp{-} is used for ranges of characters.  To write a range, write two
search.texi(,518) characters with a @samp{-} between them.  Thus, @samp{[a-z]} matches any
search.texi(,519) lower case letter.  Ranges may be intermixed freely with individual
search.texi(,520) characters, as in @samp{[a-z$%.]}, which matches any lower case letter
search.texi(,521) or @samp{$}, @samp{%}, or a period.@refill
search.texi(,522) 
search.texi(,523) To include a @samp{]} in a character set, make it the first character.
search.texi(,524) For example, @samp{[]a]} matches @samp{]} or @samp{a}.  To include a
search.texi(,525) @samp{-}, write @samp{-} as the first character in the set, or put it
search.texi(,526) immediately after a range.  (You can replace one individual character
search.texi(,527) @var{c} with the range @samp{@var{c}-@var{c}} to make a place to put the
search.texi(,528) @samp{-}.)  There is no way to write a set containing just @samp{-} and
search.texi(,529) @samp{]}.
search.texi(,530) 
search.texi(,531) To include @samp{^} in a set, put it anywhere but at the beginning of
search.texi(,532) the set.
search.texi(,533) 
search.texi(,534) @item [^ @dots{} ]
search.texi(,535) @cindex @samp{^} in regexp
search.texi(,536) @samp{[^} begins a @dfn{complement character set}, which matches any
search.texi(,537) character except the ones specified.  Thus, @samp{[^a-z0-9A-Z]}
search.texi(,538) matches all characters @emph{except} letters and digits.@refill
search.texi(,539) 
search.texi(,540) @samp{^} is not special in a character set unless it is the first
search.texi(,541) character.  The character following the @samp{^} is treated as if it
search.texi(,542) were first (thus, @samp{-} and @samp{]} are not special there).
search.texi(,543) 
search.texi(,544) Note that a complement character set can match a newline, unless
search.texi(,545) newline is mentioned as one of the characters not to match.
search.texi(,546) 
search.texi(,547) @item ^
search.texi(,548) @cindex @samp{^} in regexp
search.texi(,549) @cindex beginning of line in regexp
search.texi(,550) is a special character that matches the empty string, but only at the
search.texi(,551) beginning of a line in the text being matched.  Otherwise it fails to
search.texi(,552) match anything.  Thus, @samp{^foo} matches a @samp{foo} that occurs at
search.texi(,553) the beginning of a line.
search.texi(,554) 
search.texi(,555) When matching a string instead of a buffer, @samp{^} matches at the
search.texi(,556) beginning of the string or after a newline character @samp{\n}.
search.texi(,557) 
search.texi(,558) @item $
search.texi(,559) @cindex @samp{$} in regexp
search.texi(,560) is similar to @samp{^} but matches only at the end of a line.  Thus,
search.texi(,561) @samp{x+$} matches a string of one @samp{x} or more at the end of a line.
search.texi(,562) 
search.texi(,563) When matching a string instead of a buffer, @samp{$} matches at the end
search.texi(,564) of the string or before a newline character @samp{\n}.
search.texi(,565) 
search.texi(,566) @item \
search.texi(,567) @cindex @samp{\} in regexp
search.texi(,568) has two functions: it quotes the special characters (including
search.texi(,569) @samp{\}), and it introduces additional special constructs.
search.texi(,570) 
search.texi(,571) Because @samp{\} quotes special characters, @samp{\$} is a regular
search.texi(,572) expression that matches only @samp{$}, and @samp{\[} is a regular
search.texi(,573) expression that matches only @samp{[}, and so on.
search.texi(,574) 
search.texi(,575) @c Removed a paragraph here in lispref about doubling backslashes inside
search.texi(,576) @c of Lisp strings.
search.texi(,577) 
search.texi(,578) @end table
search.texi(,579) 
search.texi(,580) @strong{Please note:} For historical compatibility, special characters
search.texi(,581) are treated as ordinary ones if they are in contexts where their special
search.texi(,582) meanings make no sense.  For example, @samp{*foo} treats @samp{*} as
search.texi(,583) ordinary since there is no preceding expression on which the @samp{*}
search.texi(,584) can act.  It is poor practice to depend on this behavior; quote the
search.texi(,585) special character anyway, regardless of where it appears.@refill
search.texi(,586) 
search.texi(,587) For the most part, @samp{\} followed by any character matches only
search.texi(,588) that character.  However, there are several exceptions: characters
search.texi(,589) that, when preceded by @samp{\}, are special constructs.  Such
search.texi(,590) characters are always ordinary when encountered on their own.  Here
search.texi(,591) is a table of @samp{\} constructs:
search.texi(,592) 
search.texi(,593) @table @kbd
search.texi(,594) @item \|
search.texi(,595) @cindex @samp{|} in regexp
search.texi(,596) @cindex regexp alternative
search.texi(,597) specifies an alternative.
search.texi(,598) Two regular expressions @var{a} and @var{b} with @samp{\|} in
search.texi(,599) between form an expression that matches anything that either @var{a} or
search.texi(,600) @var{b} matches.@refill
search.texi(,601) 
search.texi(,602) Thus, @samp{foo\|bar} matches either @samp{foo} or @samp{bar}
search.texi(,603) but no other string.@refill
search.texi(,604) 
search.texi(,605) @samp{\|} applies to the largest possible surrounding expressions.  Only a
search.texi(,606) surrounding @samp{\( @dots{} \)} grouping can limit the grouping power of
search.texi(,607) @samp{\|}.@refill
search.texi(,608) 
search.texi(,609) Full backtracking capability exists to handle multiple uses of @samp{\|}.
search.texi(,610) 
search.texi(,611) @item \( @dots{} \)
search.texi(,612) @cindex @samp{(} in regexp
search.texi(,613) @cindex @samp{)} in regexp
search.texi(,614) @cindex regexp grouping
search.texi(,615) is a grouping construct that serves three purposes:
search.texi(,616) 
search.texi(,617) @enumerate
search.texi(,618) @item
search.texi(,619) To enclose a set of @samp{\|} alternatives for other operations.
search.texi(,620) Thus, @samp{\(foo\|bar\)x} matches either @samp{foox} or @samp{barx}.
search.texi(,621) 
search.texi(,622) @item
search.texi(,623) To enclose an expression for a suffix operator such as @samp{*} to act
search.texi(,624) on.  Thus, @samp{ba\(na\)*} matches @samp{bananana}, etc., with any
search.texi(,625) (zero or more) number of @samp{na} strings.@refill
search.texi(,626) 
search.texi(,627) @item
search.texi(,628) To record a matched substring for future reference.
search.texi(,629) @end enumerate
search.texi(,630) 
search.texi(,631) This last application is not a consequence of the idea of a
search.texi(,632) parenthetical grouping; it is a separate feature that happens to be
search.texi(,633) assigned as a second meaning to the same @samp{\( @dots{} \)} construct
search.texi(,634) because there is no conflict in practice between the two meanings.
search.texi(,635) Here is an explanation of this feature:
search.texi(,636) 
search.texi(,637) @item \@var{digit}
search.texi(,638) matches the same text that matched the @var{digit}th occurrence of a
search.texi(,639) @samp{\( @dots{} \)} construct.
search.texi(,640) 
search.texi(,641) In other words, after the end of a @samp{\( @dots{} \)} construct.  the
search.texi(,642) matcher remembers the beginning and end of the text matched by that
search.texi(,643) construct.  Then, later on in the regular expression, you can use
search.texi(,644) @samp{\} followed by @var{digit} to match that same text, whatever it
search.texi(,645) may have been.
search.texi(,646) 
search.texi(,647) The strings matching the first nine @samp{\( @dots{} \)} constructs
search.texi(,648) appearing in a regular expression are assigned numbers 1 through 9 in
search.texi(,649) the order that the open parentheses appear in the regular expression.
search.texi(,650) So you can use @samp{\1} through @samp{\9} to refer to the text matched
search.texi(,651) by the corresponding @samp{\( @dots{} \)} constructs.
search.texi(,652) 
search.texi(,653) For example, @samp{\(.*\)\1} matches any newline-free string that is
search.texi(,654) composed of two identical halves.  The @samp{\(.*\)} matches the first
search.texi(,655) half, which may be anything, but the @samp{\1} that follows must match
search.texi(,656) the same exact text.
search.texi(,657) 
search.texi(,658) @item \(?: @dots{} \)
search.texi(,659) @cindex @samp{\(?:} in regexp
search.texi(,660) @cindex regexp grouping
search.texi(,661) is called a @dfn{shy} grouping operator, and it is used just like
search.texi(,662) @samp{\( @dots{} \)}, except that it does not cause the matched
search.texi(,663) substring to be recorded for future reference.
search.texi(,664) 
search.texi(,665) This is useful when you need a lot of grouping @samp{\( @dots{} \)}
search.texi(,666) constructs, but only want to remember one or two -- or if you have
search.texi(,667) more than nine groupings and need to use backreferences to refer to
search.texi(,668) the groupings at the end.
search.texi(,669) 
search.texi(,670) Using @samp{\(?: @dots{} \)} rather than @samp{\( @dots{} \)} when you
search.texi(,671) don't need the captured substrings ought to speed up your programs some,
search.texi(,672) since it shortens the code path followed by the regular expression
search.texi(,673) engine, as well as the amount of memory allocation and string copying it
search.texi(,674) must do.  The actual performance gain to be observed has not been
search.texi(,675) measured or quantified as of this writing.
search.texi(,676) @c This is used to good advantage by the font-locking code, and by
search.texi(,677) @c `regexp-opt.el'.
search.texi(,678) 
search.texi(,679) The shy grouping operator has been borrowed from Perl, and has not been
search.texi(,680) available prior to XEmacs 20.3, nor is it available in FSF Emacs.
search.texi(,681) 
search.texi(,682) @item \w
search.texi(,683) @cindex @samp{\w} in regexp
search.texi(,684) matches any word-constituent character.  The editor syntax table
search.texi(,685) determines which characters these are.  @xref{Syntax}.
search.texi(,686) 
search.texi(,687) @item \W
search.texi(,688) @cindex @samp{\W} in regexp
search.texi(,689) matches any character that is not a word constituent.
search.texi(,690) 
search.texi(,691) @item \s@var{code}
search.texi(,692) @cindex @samp{\s} in regexp
search.texi(,693) matches any character whose syntax is @var{code}.  Here @var{code} is a
search.texi(,694) character that represents a syntax code: thus, @samp{w} for word
search.texi(,695) constituent, @samp{-} for whitespace, @samp{(} for open parenthesis,
search.texi(,696) etc.  @xref{Syntax}, for a list of syntax codes and the characters that
search.texi(,697) stand for them.
search.texi(,698) 
search.texi(,699) @item \S@var{code}
search.texi(,700) @cindex @samp{\S} in regexp
search.texi(,701) matches any character whose syntax is not @var{code}.
search.texi(,702) @end table
search.texi(,703) 
search.texi(,704)   The following regular expression constructs match the empty string---that is,
search.texi(,705) they don't use up any characters---but whether they match depends on the
search.texi(,706) context.
search.texi(,707) 
search.texi(,708) @table @kbd
search.texi(,709) @item \`
search.texi(,710) @cindex @samp{\`} in regexp
search.texi(,711) matches the empty string, but only at the beginning
search.texi(,712) of the buffer or string being matched against.
search.texi(,713) 
search.texi(,714) @item \'
search.texi(,715) @cindex @samp{\'} in regexp
search.texi(,716) matches the empty string, but only at the end of
search.texi(,717) the buffer or string being matched against.
search.texi(,718) 
search.texi(,719) @item \=
search.texi(,720) @cindex @samp{\=} in regexp
search.texi(,721) matches the empty string, but only at point.
search.texi(,722) (This construct is not defined when matching against a string.)
search.texi(,723) 
search.texi(,724) @item \b
search.texi(,725) @cindex @samp{\b} in regexp
search.texi(,726) matches the empty string, but only at the beginning or
search.texi(,727) end of a word.  Thus, @samp{\bfoo\b} matches any occurrence of
search.texi(,728) @samp{foo} as a separate word.  @samp{\bballs?\b} matches
search.texi(,729) @samp{ball} or @samp{balls} as a separate word.@refill
search.texi(,730) 
search.texi(,731) @item \B
search.texi(,732) @cindex @samp{\B} in regexp
search.texi(,733) matches the empty string, but @emph{not} at the beginning or
search.texi(,734) end of a word.
search.texi(,735) 
search.texi(,736) @item \<
search.texi(,737) @cindex @samp{\<} in regexp
search.texi(,738) matches the empty string, but only at the beginning of a word.
search.texi(,739) 
search.texi(,740) @item \>
search.texi(,741) @cindex @samp{\>} in regexp
search.texi(,742) matches the empty string, but only at the end of a word.
search.texi(,743) @end table
search.texi(,744) 
search.texi(,745)   Here is a complicated regexp used by Emacs to recognize the end of a
search.texi(,746) sentence together with any whitespace that follows.  It is given in Lisp
search.texi(,747) syntax to enable you to distinguish the spaces from the tab characters.  In
search.texi(,748) Lisp syntax, the string constant begins and ends with a double-quote.
search.texi(,749) @samp{\"} stands for a double-quote as part of the regexp, @samp{\\} for a
search.texi(,750) backslash as part of the regexp, @samp{\t} for a tab and @samp{\n} for a
search.texi(,751) newline.
search.texi(,752) 
search.texi(,753) @example
search.texi(,754) "[.?!][]\"')]*\\($\\|\t\\|  \\)[ \t\n]*"
search.texi(,755) @end example
search.texi(,756) 
search.texi(,757) @noindent
search.texi(,758) This regexp contains four parts: a character set matching
search.texi(,759) period, @samp{?} or @samp{!}; a character set matching close-brackets,
search.texi(,760) quotes or parentheses, repeated any number of times; an alternative in
search.texi(,761) backslash-parentheses that matches end-of-line, a tab or two spaces; and
search.texi(,762) a character set matching whitespace characters, repeated any number of
search.texi(,763) times.
search.texi(,764) 
search.texi(,765) @node Search Case, Replace, Regexps, Search
search.texi(,766) @section Searching and Case
search.texi(,767) 
search.texi(,768) @vindex case-fold-search
search.texi(,769)   All searches in Emacs normally ignore the case of the text they
search.texi(,770) are searching through; if you specify searching for @samp{FOO},
search.texi(,771) @samp{Foo} and @samp{foo} are also considered a match.  Regexps, and in
search.texi(,772) particular character sets, are included: @samp{[aB]} matches @samp{a}
search.texi(,773) or @samp{A} or @samp{b} or @samp{B}.@refill
search.texi(,774) 
search.texi(,775)   If you want a case-sensitive search, set the variable
search.texi(,776) @code{case-fold-search} to @code{nil}.  Then all letters must match
search.texi(,777) exactly, including case. @code{case-fold-search} is a per-buffer
search.texi(,778) variable; altering it affects only the current buffer, but
search.texi(,779) there is a default value which you can change as well.  @xref{Locals}. 
search.texi(,780) You can also use @b{Case Sensitive Search} from the @b{Options} menu 
search.texi(,781) on your screen.
search.texi(,782) 
search.texi(,783) @node Replace, Other Repeating Search, Search Case, Search
search.texi(,784) @section Replacement Commands
search.texi(,785) @cindex replacement
search.texi(,786) @cindex string substitution
search.texi(,787) @cindex global substitution
search.texi(,788) 
search.texi(,789)   Global search-and-replace operations are not needed as often in Emacs as
search.texi(,790) they are in other editors, but they are available.  In addition to the
search.texi(,791) simple @code{replace-string} command which is like that found in most
search.texi(,792) editors, there is a @code{query-replace} command which asks you, for each
search.texi(,793) occurrence of a pattern, whether to replace it.
search.texi(,794) 
search.texi(,795)   The replace commands all replace one string (or regexp) with one
search.texi(,796) replacement string.  It is possible to perform several replacements in
search.texi(,797) parallel using the command @code{expand-region-abbrevs}.  @xref{Expanding
search.texi(,798) Abbrevs}.
search.texi(,799) 
search.texi(,800) @menu
search.texi(,801) * Unconditional Replace::  Replacing all matches for a string.
search.texi(,802) * Regexp Replace::         Replacing all matches for a regexp.
search.texi(,803) * Replacement and Case::   How replacements preserve case of letters.
search.texi(,804) * Query Replace::          How to use querying.
search.texi(,805) @end menu
search.texi(,806) 
search.texi(,807) @node Unconditional Replace, Regexp Replace, Replace, Replace
search.texi(,808) @subsection Unconditional Replacement
search.texi(,809) @findex replace-string
search.texi(,810) @findex replace-regexp
search.texi(,811) 
search.texi(,812) @table @kbd
search.texi(,813) @item M-x replace-string @key{RET} @var{string} @key{RET} @var{newstring} @key{RET}
search.texi(,814) Replace every occurrence of @var{string} with @var{newstring}.
search.texi(,815) @item M-x replace-regexp @key{RET} @var{regexp} @key{RET} @var{newstring} @key{RET}
search.texi(,816) Replace every match for @var{regexp} with @var{newstring}.
search.texi(,817) @end table
search.texi(,818) 
search.texi(,819)   To replace every instance of @samp{foo} after point with @samp{bar},
search.texi(,820) use the command @kbd{M-x replace-string} with the two arguments
search.texi(,821) @samp{foo} and @samp{bar}.  Replacement occurs only after point: if you
search.texi(,822) want to cover the whole buffer you must go to the beginning first.  By
search.texi(,823) default, all occurrences up to the end of the buffer are replaced.  To
search.texi(,824) limit replacement to part of the buffer, narrow to that part of the
search.texi(,825) buffer before doing the replacement (@pxref{Narrowing}).
search.texi(,826) 
search.texi(,827)   When @code{replace-string} exits, point is left at the last occurrence
search.texi(,828) replaced.  The value of point when the @code{replace-string} command was
search.texi(,829) issued is remembered on the mark ring; @kbd{C-u C-@key{SPC}} moves back
search.texi(,830) there.
search.texi(,831) 
search.texi(,832)   A numeric argument restricts replacement to matches that are surrounded
search.texi(,833) by word boundaries.
search.texi(,834) 
search.texi(,835) @node Regexp Replace, Replacement and Case, Unconditional Replace, Replace
search.texi(,836) @subsection Regexp Replacement
search.texi(,837) 
search.texi(,838)   @code{replace-string} replaces exact matches for a single string.  The
search.texi(,839) similar command @code{replace-regexp} replaces any match for a specified
search.texi(,840) pattern.
search.texi(,841) 
search.texi(,842)   In @code{replace-regexp}, the @var{newstring} need not be constant.  It
search.texi(,843) can refer to all or part of what is matched by the @var{regexp}.  @samp{\&}
search.texi(,844) in @var{newstring} stands for the entire text being replaced.
search.texi(,845) @samp{\@var{d}} in @var{newstring}, where @var{d} is a digit, stands for
search.texi(,846) whatever matched the @var{d}'th parenthesized grouping in @var{regexp}.
search.texi(,847) For example,@refill
search.texi(,848) 
search.texi(,849) @example
search.texi(,850) M-x replace-regexp @key{RET} c[ad]+r @key{RET} \&-safe @key{RET}
search.texi(,851) @end example
search.texi(,852) 
search.texi(,853) @noindent
search.texi(,854) would replace (for example) @samp{cadr} with @samp{cadr-safe} and @samp{cddr}
search.texi(,855) with @samp{cddr-safe}.
search.texi(,856) 
search.texi(,857) @example
search.texi(,858) M-x replace-regexp @key{RET} \(c[ad]+r\)-safe @key{RET} \1 @key{RET}
search.texi(,859) @end example
search.texi(,860) 
search.texi(,861) @noindent
search.texi(,862) would perform exactly the opposite replacements.  To include a @samp{\}
search.texi(,863) in the text to replace with, you must give @samp{\\}.
search.texi(,864) 
search.texi(,865) @node Replacement and Case, Query Replace, Regexp Replace, Replace
search.texi(,866) @subsection Replace Commands and Case
search.texi(,867) 
search.texi(,868) @vindex case-replace
search.texi(,869) @vindex case-fold-search
search.texi(,870)   If the arguments to a replace command are in lower case, the command
search.texi(,871) preserves case when it makes a replacement.  Thus, the following command:
search.texi(,872) 
search.texi(,873) @example
search.texi(,874) M-x replace-string @key{RET} foo @key{RET} bar @key{RET}
search.texi(,875) @end example
search.texi(,876) 
search.texi(,877) @noindent
search.texi(,878) replaces a lower-case @samp{foo} with a lower case @samp{bar}, @samp{FOO}
search.texi(,879) with @samp{BAR}, and @samp{Foo} with @samp{Bar}.  If upper-case letters are
search.texi(,880) used in the second argument, they remain upper-case every time that
search.texi(,881) argument is inserted.  If upper-case letters are used in the first
search.texi(,882) argument, the second argument is always substituted exactly as given, with
search.texi(,883) no case conversion.  Likewise, if the variable @code{case-replace} is set
search.texi(,884) to @code{nil}, replacement is done without case conversion.  If
search.texi(,885) @code{case-fold-search} is set to @code{nil}, case is significant in
search.texi(,886) matching occurrences of @samp{foo} to replace; also, case conversion of the
search.texi(,887) replacement string is not done.
search.texi(,888) 
search.texi(,889) @node Query Replace,, Replacement and Case, Replace
search.texi(,890) @subsection Query Replace
search.texi(,891) @cindex query replace
search.texi(,892) 
search.texi(,893) @table @kbd
search.texi(,894) @item M-% @var{string} @key{RET} @var{newstring} @key{RET}
search.texi(,895) @itemx M-x query-replace @key{RET} @var{string} @key{RET} @var{newstring} @key{RET}
search.texi(,896) Replace some occurrences of @var{string} with @var{newstring}.
search.texi(,897) @item M-x query-replace-regexp @key{RET} @var{regexp} @key{RET} @var{newstring} @key{RET}
search.texi(,898) Replace some matches for @var{regexp} with @var{newstring}.
search.texi(,899) @end table
search.texi(,900) 
search.texi(,901) @kindex M-%
search.texi(,902) @findex query-replace
search.texi(,903)   If you want to change only some of the occurrences of @samp{foo} to
search.texi(,904) @samp{bar}, not all of them, you can use @code{query-replace} instead of
search.texi(,905) @kbd{M-%}.  This command finds occurrences of @samp{foo} one by one,
search.texi(,906) displays each occurrence, and asks you whether to replace it.  A numeric
search.texi(,907) argument to @code{query-replace} tells it to consider only occurrences
search.texi(,908) that are bounded by word-delimiter characters.@refill
search.texi(,909) 
search.texi(,910) @findex query-replace-regexp
search.texi(,911)   Aside from querying, @code{query-replace} works just like
search.texi(,912) @code{replace-string}, and @code{query-replace-regexp} works
search.texi(,913) just like @code{replace-regexp}.@refill
search.texi(,914) 
search.texi(,915)   The things you can type when you are shown an occurrence of @var{string}
search.texi(,916) or a match for @var{regexp} are:
search.texi(,917) 
search.texi(,918) @kindex SPC (query-replace)
search.texi(,919) @kindex DEL (query-replace)
search.texi(,920) @kindex , (query-replace)
search.texi(,921) @kindex ESC (query-replace)
search.texi(,922) @kindex . (query-replace)
search.texi(,923) @kindex ! (query-replace)
search.texi(,924) @kindex ^ (query-replace)
search.texi(,925) @kindex C-r (query-replace)
search.texi(,926) @kindex C-w (query-replace)
search.texi(,927) @kindex C-l (query-replace)
search.texi(,928) 
search.texi(,929) @c WideCommands
search.texi(,930) @table @kbd
search.texi(,931) @item @key{SPC}
search.texi(,932) to replace the occurrence with @var{newstring}.  This preserves case, just
search.texi(,933) like @code{replace-string}, provided @code{case-replace} is non-@code{nil},
search.texi(,934) as it normally is.@refill
search.texi(,935) 
search.texi(,936) @item @key{DEL}
search.texi(,937) to skip to the next occurrence without replacing this one.
search.texi(,938) 
search.texi(,939) @item , @r{(Comma)}
search.texi(,940) to replace this occurrence and display the result.  You are then
search.texi(,941) prompted for another input character.  However, since the replacement has
search.texi(,942) already been made, @key{DEL} and @key{SPC} are equivalent.  At this
search.texi(,943) point, you can type @kbd{C-r} (see below) to alter the replaced text.  To
search.texi(,944) undo the replacement, you can type @kbd{C-x u}. 
search.texi(,945) This exits the @code{query-replace}.  If you want to do further
search.texi(,946) replacement you must use @kbd{C-x @key{ESC} @key{ESC}} to restart (@pxref{Repetition}).
search.texi(,947) 
search.texi(,948) @item @key{ESC}
search.texi(,949) to exit without doing any more replacements.
search.texi(,950) 
search.texi(,951) @item .@: @r{(Period)}
search.texi(,952) to replace this occurrence and then exit.
search.texi(,953) 
search.texi(,954) @item !
search.texi(,955) to replace all remaining occurrences without asking again.
search.texi(,956) 
search.texi(,957) @item ^
search.texi(,958) to go back to the location of the previous occurrence (or what used to
search.texi(,959) be an occurrence), in case you changed it by mistake.  This works by
search.texi(,960) popping the mark ring.  Only one @kbd{^} in a row is allowed, because
search.texi(,961) only one previous replacement location is kept during @code{query-replace}.
search.texi(,962) 
search.texi(,963) @item C-r
search.texi(,964) to enter a recursive editing level, in case the occurrence needs to be
search.texi(,965) edited rather than just replaced with @var{newstring}.  When you are
search.texi(,966) done, exit the recursive editing level with @kbd{C-M-c} and the next
search.texi(,967) occurrence will be displayed.  @xref{Recursive Edit}.
search.texi(,968) 
search.texi(,969) @item C-w
search.texi(,970) to delete the occurrence, and then enter a recursive editing level as
search.texi(,971) in @kbd{C-r}.  Use the recursive edit to insert text to replace the
search.texi(,972) deleted occurrence of @var{string}.  When done, exit the recursive
search.texi(,973) editing level with @kbd{C-M-c} and the next occurrence will be
search.texi(,974) displayed.
search.texi(,975) 
search.texi(,976) @item C-l
search.texi(,977) to redisplay the screen and then give another answer.
search.texi(,978) 
search.texi(,979) @item C-h
search.texi(,980) to display a message summarizing these options, then give another
search.texi(,981) answer.
search.texi(,982) @end table
search.texi(,983) 
search.texi(,984)   If you type any other character, Emacs exits the @code{query-replace}, and
search.texi(,985) executes the character as a command.  To restart the @code{query-replace},
search.texi(,986) use @kbd{C-x @key{ESC} @key{ESC}}, which repeats the @code{query-replace} because it
search.texi(,987) used the minibuffer to read its arguments.  @xref{Repetition, C-x ESC ESC}.
search.texi(,988) 
search.texi(,989) @node Other Repeating Search,, Replace, Search
search.texi(,990) @section Other Search-and-Loop Commands
search.texi(,991) 
search.texi(,992)   Here are some other commands that find matches for a regular expression.
search.texi(,993) They all operate from point to the end of the buffer.
search.texi(,994) 
search.texi(,995) @findex list-matching-lines
search.texi(,996) @findex occur
search.texi(,997) @findex count-matches
search.texi(,998) @findex delete-non-matching-lines
search.texi(,999) @findex delete-matching-lines
search.texi(,1000) @c grosscommands
search.texi(,1001) @table @kbd
search.texi(,1002) @item M-x occur
search.texi(,1003) Print each line that follows point and contains a match for the
search.texi(,1004) specified regexp.  A numeric argument specifies the number of context
search.texi(,1005) lines to print before and after each matching line; the default is
search.texi(,1006) none.
search.texi(,1007) 
search.texi(,1008) @kindex C-c C-c (Occur mode)
search.texi(,1009) The buffer @samp{*Occur*} containing the output serves as a menu for
search.texi(,1010) finding occurrences in their original context.  Find an occurrence
search.texi(,1011) as listed in @samp{*Occur*}, position point there, and type @kbd{C-c
search.texi(,1012) C-c}; this switches to the buffer that was searched and moves point to
search.texi(,1013) the original of the same occurrence.
search.texi(,1014) 
search.texi(,1015) @item M-x list-matching-lines
search.texi(,1016) Synonym for @kbd{M-x occur}.
search.texi(,1017) 
search.texi(,1018) @item M-x count-matches
search.texi(,1019) Print the number of matches following point for the specified regexp.
search.texi(,1020) 
search.texi(,1021) @item M-x delete-non-matching-lines
search.texi(,1022) Delete each line that follows point and does not contain a match for
search.texi(,1023) the specified regexp.
search.texi(,1024) 
search.texi(,1025) @item M-x delete-matching-lines
search.texi(,1026) Delete each line that follows point and contains a match for the
search.texi(,1027) specified regexp.
search.texi(,1028) @end table
fixit.texi(,1) 
fixit.texi(,2) @node Fixit, Files, Search, Top
fixit.texi(,3) @chapter Commands for Fixing Typos
fixit.texi(,4) @cindex typos
fixit.texi(,5) @cindex mistakes, correcting
fixit.texi(,6) 
fixit.texi(,7)   This chapter describes commands that are especially useful when you
fixit.texi(,8) catch a mistake in your text just after you have made it, or when you 
fixit.texi(,9) change your mind while composing text on line.
fixit.texi(,10) 
fixit.texi(,11) @menu
fixit.texi(,12) * Kill Errors:: Commands to kill a batch of recently entered text.
fixit.texi(,13) * Transpose::   Exchanging two characters, words, lines, lists...
fixit.texi(,14) * Fixing Case:: Correcting case of last word entered.
fixit.texi(,15) * Spelling::    Apply spelling checker to a word, or a whole file.
fixit.texi(,16) @end menu
fixit.texi(,17) 
fixit.texi(,18) @node Kill Errors, Transpose, Fixit, Fixit
fixit.texi(,19) @section Killing Your Mistakes
fixit.texi(,20) 
fixit.texi(,21) @table @kbd
fixit.texi(,22) @item @key{DEL}
fixit.texi(,23) Delete last character (@code{delete-backward-char}).
fixit.texi(,24) @item M-@key{DEL}
fixit.texi(,25) Kill last word (@code{backward-kill-word}).
fixit.texi(,26) @item C-x @key{DEL}
fixit.texi(,27) Kill to beginning of sentence (@code{backward-kill-sentence}).
fixit.texi(,28) @end table
fixit.texi(,29) 
fixit.texi(,30) @kindex DEL
fixit.texi(,31) @findex delete-backward-char
fixit.texi(,32)   The @key{DEL} character (@code{delete-backward-char}) is the most
fixit.texi(,33) important correction command.  When used among graphic (self-inserting)
fixit.texi(,34) characters, it can be thought of as canceling the last character typed.
fixit.texi(,35) 
fixit.texi(,36) @kindex M-DEL
fixit.texi(,37) @kindex C-x DEL
fixit.texi(,38) @findex backward-kill-word
fixit.texi(,39) @findex backward-kill-sentence
fixit.texi(,40)   When your mistake is longer than a couple of characters, it might be more
fixit.texi(,41) convenient to use @kbd{M-@key{DEL}} or @kbd{C-x @key{DEL}}.
fixit.texi(,42) @kbd{M-@key{DEL}} kills back to the start of the last word, and @kbd{C-x
fixit.texi(,43) @key{DEL}} kills back to the start of the last sentence.  @kbd{C-x
fixit.texi(,44) @key{DEL}} is particularly useful when you are thinking of what to write as
fixit.texi(,45) you type it, in case you change your mind about phrasing.
fixit.texi(,46) @kbd{M-@key{DEL}} and @kbd{C-x @key{DEL}} save the killed text for
fixit.texi(,47) @kbd{C-y} and @kbd{M-y} to retrieve.  @xref{Yanking}.@refill
fixit.texi(,48) 
fixit.texi(,49)   @kbd{M-@key{DEL}} is often useful even when you have typed only a few
fixit.texi(,50) characters wrong, if you know you are confused in your typing and aren't
fixit.texi(,51) sure exactly what you typed.  At such a time, you cannot correct with
fixit.texi(,52) @key{DEL} except by looking at the screen to see what you did.  It requires
fixit.texi(,53) less thought to kill the whole word and start over.
fixit.texi(,54) 
fixit.texi(,55) @node Transpose, Fixing Case, Kill Errors, Fixit
fixit.texi(,56) @section Transposing Text
fixit.texi(,57) 
fixit.texi(,58) @table @kbd
fixit.texi(,59) @item C-t
fixit.texi(,60) Transpose two characters (@code{transpose-chars}).
fixit.texi(,61) @item M-t
fixit.texi(,62) Transpose two words (@code{transpose-words}).
fixit.texi(,63) @item C-M-t
fixit.texi(,64) Transpose two balanced expressions (@code{transpose-sexps}).
fixit.texi(,65) @item C-x C-t
fixit.texi(,66) Transpose two lines (@code{transpose-lines}).
fixit.texi(,67) @end table
fixit.texi(,68) 
fixit.texi(,69) @cindex transposition
fixit.texi(,70) @kindex C-t
fixit.texi(,71) @findex transpose-chars
fixit.texi(,72)   The common error of transposing two adjacent characters can be fixed
fixit.texi(,73) with the @kbd{C-t} command (@code{transpose-chars}).  Normally,
fixit.texi(,74) @kbd{C-t} transposes the two characters on either side of point.  When
fixit.texi(,75) given at the end of a line, @kbd{C-t} transposes the last two characters
fixit.texi(,76) on the line, rather than transposing the last character of the line with
fixit.texi(,77) the newline, which would be useless.  If you catch a
fixit.texi(,78) transposition error right away, you can fix it with just @kbd{C-t}.
fixit.texi(,79) If you catch the error later,  move the cursor back to between
fixit.texi(,80) the two transposed characters.  If you transposed a space with the last
fixit.texi(,81) character of the word before it, the word motion commands are a good way
fixit.texi(,82) of getting there.  Otherwise, a reverse search (@kbd{C-r}) is often the
fixit.texi(,83) best way.  @xref{Search}.
fixit.texi(,84) 
fixit.texi(,85) @kindex C-x C-t
fixit.texi(,86) @findex transpose-lines
fixit.texi(,87) @kindex M-t
fixit.texi(,88) @findex transpose-words
fixit.texi(,89) @kindex C-M-t
fixit.texi(,90) @findex transpose-sexps
fixit.texi(,91)   @kbd{Meta-t} (@code{transpose-words}) transposes the word before point
fixit.texi(,92) with the word after point.  It moves point forward over a word, dragging
fixit.texi(,93) the word preceding or containing point forward as well.  The punctuation
fixit.texi(,94) characters between the words do not move.  For example, @w{@samp{FOO, BAR}}
fixit.texi(,95) transposes into @w{@samp{BAR, FOO}} rather than @samp{@w{BAR FOO,}}.
fixit.texi(,96) 
fixit.texi(,97)   @kbd{C-M-t} (@code{transpose-sexps}) is a similar command for transposing
fixit.texi(,98) two expressions (@pxref{Lists}), and @kbd{C-x C-t} (@code{transpose-lines})
fixit.texi(,99) exchanges lines.  It works like @kbd{M-t} but in determines the
fixit.texi(,100) division of the text into syntactic units differently.
fixit.texi(,101) 
fixit.texi(,102)   A numeric argument to a transpose command serves as a repeat count: it
fixit.texi(,103) tells the transpose command to move the character (word, sexp, line) before
fixit.texi(,104) or containing point across several other characters (words, sexps, lines).
fixit.texi(,105) For example, @kbd{C-u 3 C-t} moves the character before point forward
fixit.texi(,106) across three other characters.  This is equivalent to repeating @kbd{C-t}
fixit.texi(,107) three times.  @kbd{C-u - 4 M-t} moves the word before point backward across
fixit.texi(,108) four words.  @kbd{C-u - C-M-t} would cancel the effect of plain
fixit.texi(,109) @kbd{C-M-t}.@refill
fixit.texi(,110) 
fixit.texi(,111)   A numeric argument of zero transposes the character (word, sexp, line)
fixit.texi(,112) ending after point with the one ending after the mark (otherwise a
fixit.texi(,113) command with a repeat count of zero would do nothing).
fixit.texi(,114) 
fixit.texi(,115) @node Fixing Case, Spelling, Transpose, Fixit
fixit.texi(,116) @section Case Conversion
fixit.texi(,117) 
fixit.texi(,118) @table @kbd
fixit.texi(,119) @item M-- M-l
fixit.texi(,120) Convert last word to lower case.  Note that @kbd{Meta--} is ``Meta-minus.''
fixit.texi(,121) @item M-- M-u
fixit.texi(,122) Convert last word to all upper case.
fixit.texi(,123) @item M-- M-c
fixit.texi(,124) Convert last word to lower case with capital initial.
fixit.texi(,125) @end table
fixit.texi(,126) 
fixit.texi(,127) @findex downcase-word
fixit.texi(,128) @findex upcase-word
fixit.texi(,129) @findex capitalize-word
fixit.texi(,130) @kindex M-@t{-} M-l
fixit.texi(,131) @kindex M-@t{-} M-u
fixit.texi(,132) @kindex M-@t{-} M-c
fixit.texi(,133) @cindex case conversion
fixit.texi(,134) @cindex words
fixit.texi(,135)   A  common error is to type words in the wrong case.  Because of this,
fixit.texi(,136) the word case-conversion commands @kbd{M-l}, @kbd{M-u}, and @kbd{M-c} do
fixit.texi(,137) not move the cursor when used with a negative argument.
fixit.texi(,138) As soon as you see you have mistyped the last word, you can simply
fixit.texi(,139) case-convert it and continue typing.  @xref{Case}.@refill
fixit.texi(,140) 
fixit.texi(,141) @node Spelling,, Fixing Case, Fixit
fixit.texi(,142) @section Checking and Correcting Spelling
fixit.texi(,143) @cindex spelling
fixit.texi(,144) 
fixit.texi(,145) @c doublewidecommands
fixit.texi(,146) @table @kbd
fixit.texi(,147) @item M-$
fixit.texi(,148) Check and correct spelling of word (@code{spell-word}).
fixit.texi(,149) @item M-x spell-buffer
fixit.texi(,150) Check and correct spelling of each word in the buffer.
fixit.texi(,151) @item M-x spell-region
fixit.texi(,152) Check and correct spelling of each word in the region.
fixit.texi(,153) @item M-x spell-string
fixit.texi(,154) Check spelling of specified word.
fixit.texi(,155) @end table
fixit.texi(,156) 
fixit.texi(,157) @kindex M-$
fixit.texi(,158) @findex spell-word
fixit.texi(,159)   To check the spelling of the word before point, and optionally correct
fixit.texi(,160) it, use the command @kbd{M-$} (@code{spell-word}).  This command runs an
fixit.texi(,161) inferior process containing the @code{spell} program to see whether the
fixit.texi(,162) word is correct English.  If it is not, it asks you to edit the word (in
fixit.texi(,163) the minibuffer) into a corrected spelling, and then performs a
fixit.texi(,164) @code{query-replace} to substitute the corrected spelling for the old
fixit.texi(,165) one throughout the buffer.
fixit.texi(,166) 
fixit.texi(,167)   If you exit the minibuffer without altering the original spelling, it
fixit.texi(,168) means you do not want to do anything to that word.  In that case, the
fixit.texi(,169) @code{query-replace} is not done.
fixit.texi(,170) 
fixit.texi(,171) @findex spell-buffer
fixit.texi(,172)   @kbd{M-x spell-buffer} checks each word in the buffer the same way that
fixit.texi(,173) @code{spell-word} does, doing a @code{query-replace} for
fixit.texi(,174) every incorrect word if appropriate.@refill
fixit.texi(,175) 
fixit.texi(,176) @findex spell-region
fixit.texi(,177)   @kbd{M-x spell-region} is similar to @code{spell-buffer} but operates
fixit.texi(,178) only on the region, not the entire buffer.
fixit.texi(,179) 
fixit.texi(,180) @findex spell-string
fixit.texi(,181)   @kbd{M-x spell-string} reads a string as an argument and checks
fixit.texi(,182) whether that is a correctly spelled English word.  It prints a message
fixit.texi(,183) giving the answer in the echo area.
files.texi(,1) 
files.texi(,2) @node Files, Buffers, Fixit, Top
files.texi(,3) @chapter File Handling
files.texi(,4) @cindex files
files.texi(,5) 
files.texi(,6)   The basic unit of stored data in Unix is the @dfn{file}.  To edit a file,
files.texi(,7) you must tell Emacs to examine the file and prepare a buffer containing a
files.texi(,8) copy of the file's text.  This is called @dfn{visiting} the file.  Editing
files.texi(,9) commands apply directly to text in the buffer; that is, to the copy inside
files.texi(,10) Emacs.  Your changes appear in the file itself only when you @dfn{save} the
files.texi(,11) buffer back into the file.
files.texi(,12) 
files.texi(,13) @cindex files, remote
files.texi(,14) @cindex remote files
files.texi(,15)   Emacs is also able to handle ``remote files'' which are stored on
files.texi(,16) other hosts.  Not only is Emacs somewhat aware of the special issues
files.texi(,17) involved with network file systems, but it can also use FTP and ssh (or
files.texi(,18) rsh) to make local copies of the files, and refresh them on the remote
files.texi(,19) host automatically when you save the buffer.  The FTP interface is
files.texi(,20) provided by the standard @samp{efs} package @ref{Top, EFS, , efs}.  The
files.texi(,21) ssh/rsh interface is provided by the optional @samp{tramp} package
files.texi(,22) @ref{Top, TRAMP, , tramp}.  These packages attempt to implement all of
files.texi(,23) the operations described below, making remote file use transparent
files.texi(,24) (except for unavoidable network delays).
files.texi(,25) 
files.texi(,26)   In addition to visiting and saving files, Emacs can delete, copy, rename,
files.texi(,27) and append to files, and operate on file directories.
files.texi(,28) 
files.texi(,29) @menu
files.texi(,30) * File Names::       How to type and edit file name arguments.
files.texi(,31) * Visiting::         Visiting a file prepares Emacs to edit the file.
files.texi(,32) * Saving::           Saving makes your changes permanent.
files.texi(,33) * Reverting::        Reverting cancels all the changes not saved.
files.texi(,34) * Auto Save::        Auto Save periodically protects against loss of data.
files.texi(,35) * Version Control::  Version control systems (RCS and SCCS).
files.texi(,36) * ListDir::          Listing the contents of a file directory.
files.texi(,37) * Comparing Files::  Finding where two files differ.
files.texi(,38) * Dired::            ``Editing'' a directory to delete, rename, etc.
files.texi(,39)                      the files in it.
files.texi(,40) * Misc File Ops::    Other things you can do on files.
files.texi(,41) @end menu
files.texi(,42) 
files.texi(,43) @node File Names, Visiting, Files, Files
files.texi(,44) @section File Names
files.texi(,45) @cindex file names
files.texi(,46) 
files.texi(,47)   Most Emacs commands that operate on a file require you to specify the
files.texi(,48) file name.  (Saving and reverting are exceptions; the buffer knows which
files.texi(,49) file name to use for them.)  File names are specified in the minibuffer
files.texi(,50) (@pxref{Minibuffer}).  @dfn{Completion} is available, to make it easier to
files.texi(,51) specify long file names.  @xref{Completion}.
files.texi(,52) 
files.texi(,53)   There is always a @dfn{default file name} which is used if you
files.texi(,54) enter an empty argument by typing just @key{RET}.  Normally the default
files.texi(,55) file name is the name of the file visited in the current buffer; this
files.texi(,56) makes it easy to operate on that file with any of the Emacs file
files.texi(,57) commands.
files.texi(,58) 
files.texi(,59) The syntax for accessing remote files unfortunately varies depending on
files.texi(,60) the method used.  The syntax for using FTP is
files.texi(,61) @samp{/@var{user}@@@var{remote-host}:@var{path-on-remote-host}}.  The
files.texi(,62) syntax for using ssh is
files.texi(,63) @samp{/[@var{user}@@@var{remote-host}]@var{path-on-remote-host}}.
files.texi(,64) 
files.texi(,65)   In both cases the @samp{@var{user}@@} portion is optional (it defaults
files.texi(,66) to your local user name).  @var{path-on-remote-host} may use the
files.texi(,67) @samp{~} notation to indicate @var{user}'s home directory on the remote
files.texi(,68) host.  The default file name will reflect the remote host information.
files.texi(,69) 
files.texi(,70) @vindex default-directory
files.texi(,71)   Each buffer has a default directory, normally the same as the
files.texi(,72) directory of the file visited in that buffer.  When Emacs reads a file
files.texi(,73) name, the default directory is used if you do not specify a directory.
files.texi(,74) If you specify a directory in a relative fashion, with a name that does
files.texi(,75) not start with a slash, it is interpreted with respect to the default
files.texi(,76) directory.  The default directory of the current buffer is kept in the
files.texi(,77) variable @code{default-directory}, which has a separate value in every
files.texi(,78) buffer.  The value of the variable should end with a slash.
files.texi(,79) 
files.texi(,80)   For example, if the default file name is @file{/u/rms/gnu/gnu.tasks} then
files.texi(,81) the default directory is @file{/u/rms/gnu/}.  If you type just @samp{foo},
files.texi(,82) which does not specify a directory, it is short for @file{/u/rms/gnu/foo}.
files.texi(,83) @samp{../.login} would stand for @file{/u/rms/.login}.  @samp{new/foo}
files.texi(,84) would stand for the filename @file{/u/rms/gnu/new/foo}.
files.texi(,85) 
files.texi(,86)   When visiting a remote file via EFS or TRAMP, the remote directory
files.texi(,87) becomes the default directory (@pxref{Visiting}) for that buffer, just
files.texi(,88) as a local directory would.
files.texi(,89) 
files.texi(,90) @vindex default-directory-alist
files.texi(,91) The variable @code{default-directory-alist} takes an alist of major
files.texi(,92) modes and their opinions on @code{default-directory} as a Lisp
files.texi(,93) expression to evaluate.  A resulting value of @code{nil} is ignored in
files.texi(,94) favor of @code{default-directory}.
files.texi(,95) 
files.texi(,96) @findex make-directory
files.texi(,97) @findex remove-directory
files.texi(,98) @cindex creating directories
files.texi(,99) @cindex removing directories
files.texi(,100) You can create a new directory with the function @code{make-directory},
files.texi(,101) which takes as an argument a file name string. The current directory is
files.texi(,102) displayed in the minibuffer when the function is called; you can delete
files.texi(,103) the old directory name and supply a new directory name. For example, if
files.texi(,104) the current directory is @file{/u/rms/gnu}, you can delete @file{gnu}
files.texi(,105) and type @file{oryx} and @key{RET} to create @file{/u/rms/oryx}.
files.texi(,106) Removing a directory is similar to creating one.  To remove a directory,
files.texi(,107) use @code{remove-directory}; it takes one argument, a file name string.
files.texi(,108) 
files.texi(,109)   The command @kbd{M-x pwd} prints the current buffer's default directory,
files.texi(,110) and the command @kbd{M-x cd} sets it (to a value read using the
files.texi(,111) minibuffer).  A buffer's default directory changes only when the @code{cd}
files.texi(,112) command is used.  A file-visiting buffer's default directory is initialized
files.texi(,113) to the directory of the file that is visited there.  If a buffer is created
files.texi(,114) with @kbd{C-x b}, its default directory is copied from that of the
files.texi(,115) buffer that was current at the time.
files.texi(,116) 
files.texi(,117) @vindex insert-default-directory
files.texi(,118)   The default directory name actually appears in the minibuffer when the
files.texi(,119) minibuffer becomes active to read a file name.  This serves two
files.texi(,120) purposes: it shows you what the default is, so that you can type a
files.texi(,121) relative file name and know with certainty what it will mean, and it
files.texi(,122) allows you to edit the default to specify a different directory.  To
files.texi(,123) inhibit the insertion of the default directory, set the variable
files.texi(,124) @code{insert-default-directory} to @code{nil}.
files.texi(,125) 
files.texi(,126)   Note that it is legitimate to type an absolute file name after you
files.texi(,127) enter the minibuffer, ignoring the presence of the default directory
files.texi(,128) name.  The final minibuffer contents may look invalid, but that is not
files.texi(,129) so.  @xref{Minibuffer File}.
files.texi(,130) 
files.texi(,131)   @samp{$} in a file name is used to substitute environment variables.  For
files.texi(,132) example, if you have used the shell command @samp{setenv FOO rms/hacks} to
files.texi(,133) set up an environment variable named @samp{FOO}, then you can use
files.texi(,134) @file{/u/$FOO/test.c} or @file{/u/$@{FOO@}/test.c} as an abbreviation for
files.texi(,135) @file{/u/rms/hacks/test.c}.  The environment variable name consists of all
files.texi(,136) the alphanumeric characters after the @samp{$}; alternatively, it may be
files.texi(,137) enclosed in braces after the @samp{$}.  Note that the @samp{setenv} command
files.texi(,138) affects Emacs only if done before Emacs is started.
files.texi(,139) 
files.texi(,140)   To access a file with @samp{$} in its name, type @samp{$$}.  This pair
files.texi(,141) is converted to a single @samp{$} at the same time variable substitution
files.texi(,142) is performed for single @samp{$}.  The Lisp function that performs the
files.texi(,143) substitution is called @code{substitute-in-file-name}.  The substitution
files.texi(,144) is performed only on filenames read as such using the minibuffer.
files.texi(,145) 
files.texi(,146) @node Visiting, Saving, File Names, Files
files.texi(,147) @section Visiting Files
files.texi(,148) @cindex visiting files
files.texi(,149) 
files.texi(,150) @c WideCommands
files.texi(,151) @table @kbd
files.texi(,152) @item C-x C-f
files.texi(,153) Visit a file (@code{find-file}).
files.texi(,154) @item C-x C-v
files.texi(,155) Visit a different file instead of the one visited last
files.texi(,156) (@code{find-alternate-file}).
files.texi(,157) @item C-x 4 C-f
files.texi(,158) Visit a file, in another window (@code{find-file-other-window}).  Don't
files.texi(,159) change this window.
files.texi(,160) @item C-x 5 C-f
files.texi(,161) Visit a file, in another frame (@code{find-file-other-frame}).  Don't
files.texi(,162) change this window or frame.
files.texi(,163) @end table
files.texi(,164) 
files.texi(,165) @cindex files
files.texi(,166) @cindex visiting
files.texi(,167) @cindex saving
files.texi(,168)   @dfn{Visiting} a file means copying its contents into an Emacs buffer
files.texi(,169) so you can edit it.  Emacs creates a new buffer for each file you
files.texi(,170) visit.  We say that the buffer is visiting the file that it was created
files.texi(,171) to hold.  Emacs constructs the buffer name from the file name by
files.texi(,172) throwing away the directory and keeping just the file name.  For example,
files.texi(,173) a file named @file{/usr/rms/emacs.tex} is displayed in a buffer named
files.texi(,174) @samp{emacs.tex}.  If a buffer with that name exists, a unique
files.texi(,175) name is constructed by appending @samp{<2>}, @samp{<3>},and so on, using
files.texi(,176) the lowest number that makes a name that is not already in use.
files.texi(,177) 
files.texi(,178)   Each window's mode line shows the name of the buffer that is being displayed
files.texi(,179) in that window, so you can always tell what buffer you are editing.
files.texi(,180) 
files.texi(,181)   The changes you make with Emacs are made in the Emacs buffer.  They do
files.texi(,182) not take effect in the file that you visit, or any other permanent
files.texi(,183) place, until you @dfn{save} the buffer.  Saving the buffer means that
files.texi(,184) Emacs writes the current contents of the buffer into its visited file.
files.texi(,185) @xref{Saving}.
files.texi(,186) 
files.texi(,187) @cindex modified (buffer)
files.texi(,188)   If a buffer contains changes that have not been saved, the buffer is said
files.texi(,189) to be @dfn{modified}.  This is important because it implies that some
files.texi(,190) changes will be lost if the buffer is not saved.  The mode line displays
files.texi(,191) two stars near the left margin if the buffer is modified.
files.texi(,192) 
files.texi(,193) @kindex C-x 5 C-f
files.texi(,194) @findex find-file
files.texi(,195) @findex find-file-other-frame
files.texi(,196)   To visit a file, use the command @kbd{C-x C-f} (@code{find-file}).  Follow
files.texi(,197) the command with the name of the file you wish to visit, terminated by a
files.texi(,198) @key{RET}.  If you are using XEmacs under X, you can also use the
files.texi(,199) @b{Open...} command from the @b{File} menu bar item. 
files.texi(,200) 
files.texi(,201)   The file name is read using the minibuffer (@pxref{Minibuffer}), with
files.texi(,202) defaulting and completion in the standard manner (@pxref{File Names}).
files.texi(,203) While in the minibuffer, you can abort @kbd{C-x C-f} by typing @kbd{C-g}.
files.texi(,204) 
files.texi(,205)   @kbd{C-x C-f} has completed successfully when text appears on the
files.texi(,206) screen and a new buffer name appears in the mode line.  If the specified
files.texi(,207) file does not exist and could not be created or cannot be read, an error
files.texi(,208) results.  The error message is printed in the echo area, and includes
files.texi(,209) the name of the file that Emacs was trying to visit.
files.texi(,210) 
files.texi(,211)   If you visit a file that is already in Emacs, @kbd{C-x C-f} does not make
files.texi(,212) another copy.  It selects the existing buffer containing that file.
files.texi(,213) However, before doing so, it checks that the file itself has not changed
files.texi(,214) since you visited or saved it last.  If the file has changed, Emacs
files.texi(,215) prints a warning message.  @xref{Interlocking,,Simultaneous Editing}.
files.texi(,216) 
files.texi(,217) @findex find-this-file
files.texi(,218) You can switch to a specific file called out in the current buffer by
files.texi(,219) calling the function @code{find-this-file}. By providing a prefix
files.texi(,220) argument, this function calls @code{filename-at-point} and switches to a
files.texi(,221) buffer visiting the file @var{filename}. It creates one if none already
files.texi(,222) exists. You can use this function to edit the file mentioned in the
files.texi(,223) buffer you are working in or to test if the file exists. You can do that
files.texi(,224) by using the minibuffer completion after snatching the all or part of
files.texi(,225) the filename.
files.texi(,226) 
files.texi(,227) @vindex find-file-use-truenames
files.texi(,228) @vindex buffer-file-name
files.texi(,229) If the variable @code{find-file-use-truenames}'s value is
files.texi(,230) non-@code{nil}, a buffer's visited filename will always be traced back
files.texi(,231) to the real file. The filename will never be a symbolic link, and there
files.texi(,232) will never be a symbolic link anywhere in its directory path. In other
files.texi(,233) words, the @code{buffer-file-name} and @code{buffer-file-truename} will
files.texi(,234) be equal.
files.texi(,235) 
files.texi(,236) @vindex find-file-compare-truenames
files.texi(,237) @vindex buffer-file-truename
files.texi(,238) If the variable @code{find-file-compare-truenames} value is
files.texi(,239) non-@code{nil}, the @code{find-file} command will check the
files.texi(,240) @code{buffer-file-truename} of all visited files when deciding whether a
files.texi(,241) given file is already in a buffer, instead of just
files.texi(,242) @code{buffer-file-name}.  If you attempt to visit another file which is
files.texi(,243) a symbolic link to a file that is already in a buffer, the existing
files.texi(,244) buffer will be found instead of a newly created one.  This works if any
files.texi(,245) component of the pathname (including a non-terminal component) is a
files.texi(,246) symbolic link as well, but doesn't work with hard links (nothing does).
files.texi(,247) 
files.texi(,248) @cindex creating files
files.texi(,249)    If you want to create a file, just visit it.  Emacs prints
files.texi(,250) @samp{(New File)} in the echo area, but in other respects behaves as if you
files.texi(,251) had visited an existing empty file.  If you make any changes and save them,
files.texi(,252) the file is created.
files.texi(,253) 
files.texi(,254) @kindex C-x C-v
files.texi(,255) @findex find-alternate-file
files.texi(,256)   If you visit a nonexistent file unintentionally (because you typed the
files.texi(,257) wrong file name), use the @kbd{C-x C-v} (@code{find-alternate-file})
files.texi(,258) command to visit the file you wanted.  @kbd{C-x C-v} is similar to @kbd{C-x
files.texi(,259) C-f}, but it kills the current buffer (after first offering to save it if
files.texi(,260) it is modified).  @kbd{C-x C-v} is allowed even if the current buffer
files.texi(,261) is not visiting a file.
files.texi(,262) 
files.texi(,263) @vindex find-file-run-dired
files.texi(,264)   If the file you specify is actually a directory, Dired is called on
files.texi(,265) that directory (@pxref{Dired}).  To inhibit this, set the variable
files.texi(,266) @code{find-file-run-dired} to @code{nil}; then it is an error to try to
files.texi(,267) visit a directory.
files.texi(,268) 
files.texi(,269) @kindex C-x 4 f
files.texi(,270) @findex find-file-other-window
files.texi(,271)   @kbd{C-x 4 f} (@code{find-file-other-window}) is like @kbd{C-x C-f}
files.texi(,272) except that the buffer containing the specified file is selected in another
files.texi(,273) window.  The window that was selected before @kbd{C-x 4 f} continues to
files.texi(,274) show the same buffer it was already showing.  If you use this command when
files.texi(,275) only one window is being displayed, that window is split in two, with one
files.texi(,276) window showing the same buffer as before, and the other one showing the
files.texi(,277) newly requested file.  @xref{Windows}.
files.texi(,278) 
files.texi(,279) @kindex C-x 5 C-f
files.texi(,280) @findex find-file-other-frame
files.texi(,281) @kbd{C-x 5 C-f} (@code{find-file-other-frame}) is like @kbd{C-x C-f}
files.texi(,282) except that it creates a new frame in which the file is displayed.
files.texi(,283) 
files.texi(,284) @findex find-this-file-other-window
files.texi(,285)  Use the function @code{find-this-file-other-window} to edit a file
files.texi(,286) mentioned in the buffer you are editing or to test if that file exists.
files.texi(,287) To do this, use the minibuffer completion after snatching the part or
files.texi(,288) all of the filename. By providing a prefix argument, the function calls
files.texi(,289) @code{filename-at-point} and switches you to a buffer visiting the file
files.texi(,290) @var{filename} in another window. The function creates a buffer if none
files.texi(,291) already exists. This function is similar to @code{find-file-other-window}.
files.texi(,292) 
files.texi(,293) @vindex find-file-hooks
files.texi(,294) @vindex find-file-not-found-hooks
files.texi(,295)   There are two hook variables that allow extensions to modify the
files.texi(,296) operation of visiting files.  Visiting a file that does not exist runs the
files.texi(,297) functions in the list @code{find-file-not-found-hooks}; the value of this
files.texi(,298) variable is expected to be a list of functions which are
files.texi(,299) called one by one until one of them returns non-@code{nil}.  Any visiting
files.texi(,300) of a file, whether extant or not, expects @code{find-file-hooks} to
files.texi(,301) contain list of functions and calls them all, one by one.  In both cases
files.texi(,302) the functions receive no arguments.  Visiting a nonexistent file
files.texi(,303) runs the @code{find-file-not-found-hooks} first.
files.texi(,304) 
files.texi(,305) @node Saving, Reverting, Visiting, Files
files.texi(,306) @section Saving Files
files.texi(,307) 
files.texi(,308)   @dfn{Saving} a buffer in Emacs means writing its contents back into the file
files.texi(,309) that was visited in the buffer.
files.texi(,310) 
files.texi(,311) @table @kbd
files.texi(,312) @item C-x C-s
files.texi(,313) Save the current buffer in its visited file (@code{save-buffer}).
files.texi(,314) @item C-x s
files.texi(,315) Save any or all buffers in their visited files (@code{save-some-buffers}).
files.texi(,316) @item M-~
files.texi(,317) Forget that the current buffer has been changed (@code{not-modified}).
files.texi(,318) @item C-x C-w
files.texi(,319) Save the current buffer in a specified file, and record that file as
files.texi(,320) the one visited in the buffer (@code{write-file}).
files.texi(,321) @item M-x set-visited-file-name
files.texi(,322) Change file the name under which the current buffer will be saved.
files.texi(,323) @end table
files.texi(,324) 
files.texi(,325) @kindex C-x C-s
files.texi(,326) @findex save-buffer
files.texi(,327)   To save a file and make your changes permanent, type
files.texi(,328) @kbd{C-x C-s} (@code{save-buffer}).  After saving is finished, @kbd{C-x C-s}
files.texi(,329) prints a message such as:
files.texi(,330) 
files.texi(,331) @example
files.texi(,332) Wrote /u/rms/gnu/gnu.tasks
files.texi(,333) @end example
files.texi(,334) 
files.texi(,335) @noindent
files.texi(,336) If the selected buffer is not modified (no changes have been made in it
files.texi(,337) since the buffer was created or last saved), Emacs does not save it
files.texi(,338) because it would have no effect.  Instead, @kbd{C-x C-s} prints a message
files.texi(,339) in the echo area saying:
files.texi(,340) 
files.texi(,341) @example
files.texi(,342) (No changes need to be saved)
files.texi(,343) @end example
files.texi(,344) 
files.texi(,345) @kindex C-x s
files.texi(,346) @findex save-some-buffers
files.texi(,347)   The command @kbd{C-x s} (@code{save-some-buffers}) can save any or all
files.texi(,348) modified buffers.  First it asks, for each modified buffer, whether to
files.texi(,349) save it.  The questions should be answered with @kbd{y} or @kbd{n}.
files.texi(,350) @kbd{C-x C-c}, the key that kills Emacs, invokes
files.texi(,351) @code{save-some-buffers} and therefore asks the same questions.
files.texi(,352) 
files.texi(,353) @kindex M-~
files.texi(,354) @findex not-modified
files.texi(,355)   If you have changed a buffer and do not want the changes to be saved,
files.texi(,356) you should take some action to prevent it.  Otherwise, you are liable to
files.texi(,357) save it by mistake each time you use @code{save-some-buffers} or a
files.texi(,358) related command.  One thing you can do is type @kbd{M-~}
files.texi(,359) (@code{not-modified}), which removes the indication that the buffer
files.texi(,360) is modified.  If you do this, none of the save commands will believe
files.texi(,361) that the buffer needs to be saved.  (@samp{~} is often used as a
files.texi(,362) mathematical symbol for `not'; thus @kbd{Meta-~} is `not', metafied.)
files.texi(,363) You could also use @code{set-visited-file-name} (see below) to mark the
files.texi(,364) buffer as visiting a different file name, not in use for
files.texi(,365) anything important. 
files.texi(,366) 
files.texi(,367) You can also undo all the changes made since the file was visited or
files.texi(,368) saved, by reading the text from the file again.  This is called
files.texi(,369) @dfn{reverting}.  @xref{Reverting}.  Alternatively, you can undo all the
files.texi(,370) changes by repeating the undo command @kbd{C-x u}; but this only works
files.texi(,371) if you have not made more changes than the undo mechanism can remember.
files.texi(,372) 
files.texi(,373) @findex set-visited-file-name
files.texi(,374)   @kbd{M-x set-visited-file-name} alters the name of the file that the
files.texi(,375) current buffer is visiting.  It prompts you for the new file name in the
files.texi(,376) minibuffer.  You can also use @code{set-visited-file-name} on a buffer
files.texi(,377) that is not visiting a file.  The buffer's name is changed to correspond
files.texi(,378) to the file it is now visiting unless the new name is already used by a
files.texi(,379) different buffer; in that case, the buffer name is not changed.
files.texi(,380) @code{set-visited-file-name} does not save the buffer in the newly
files.texi(,381) visited file; it just alters the records inside Emacs so that it will
files.texi(,382) save the buffer in that file.  It also marks the buffer as ``modified''
files.texi(,383) so that @kbd{C-x C-s} @i{will} save.
files.texi(,384) 
files.texi(,385) @kindex C-x C-w
files.texi(,386) @findex write-file
files.texi(,387)   If you wish to mark a buffer as visiting a different file and save it
files.texi(,388) right away, use @kbd{C-x C-w} (@code{write-file}).  It is precisely
files.texi(,389) equivalent to @code{set-visited-file-name} followed by @kbd{C-x C-s}.
files.texi(,390) @kbd{C-x C-s} used on a buffer that is not visiting  a file has the
files.texi(,391) same effect as @kbd{C-x C-w}; that is, it reads a file name, marks the
files.texi(,392) buffer as visiting that file, and saves it there.  The default file name in
files.texi(,393) a buffer that is not visiting a file is made by combining the buffer name
files.texi(,394) with the buffer's default directory.
files.texi(,395) 
files.texi(,396)   If Emacs is about to save a file and sees that the date of the latest
files.texi(,397) version on disk does not match what Emacs last read or wrote, Emacs
files.texi(,398) notifies you of this fact, because it probably indicates a problem caused
files.texi(,399) by simultaneous editing and requires your immediate attention.
files.texi(,400) @xref{Interlocking,, Simultaneous Editing}.
files.texi(,401) 
files.texi(,402) @vindex require-final-newline
files.texi(,403)   If the variable @code{require-final-newline} is non-@code{nil}, Emacs
files.texi(,404) puts a newline at the end of any file that doesn't already end in one,
files.texi(,405) every time a file is saved or written.
files.texi(,406) 
files.texi(,407) @vindex write-file-hooks
files.texi(,408) @vindex after-save-hook
files.texi(,409)   Use the hook variable @code{write-file-hooks} to implement other ways
files.texi(,410) to write files, and specify things to be done before files are written.  The
files.texi(,411) value of this variable should be a list of Lisp functions.  When a file
files.texi(,412) is to be written, the functions in the list are called, one by one, with
files.texi(,413) no arguments.  If one of them returns a non-@code{nil} value, Emacs
files.texi(,414) takes this to mean that the file has been written in some suitable
files.texi(,415) fashion; the rest of the functions are not called, and normal writing is
files.texi(,416) not done. Use the hook variable @code{after-save-hook} to list
files.texi(,417) all the functions to be called after writing out a buffer to a file.
files.texi(,418) 
files.texi(,419) @menu
files.texi(,420) * Backup::       How Emacs saves the old version of your file.
files.texi(,421) * Interlocking:: How Emacs protects against simultaneous editing
files.texi(,422)                   of one file by two users.
files.texi(,423) @end menu
files.texi(,424) 
files.texi(,425) @node Backup, Interlocking, Saving, Saving
files.texi(,426) @subsection Backup Files
files.texi(,427) @cindex backup file
files.texi(,428) @vindex make-backup-files
files.texi(,429) 
files.texi(,430)   Because Unix does not provide version numbers in file names, rewriting a
files.texi(,431) file in Unix automatically destroys all record of what the file used to
files.texi(,432) contain.  Thus, saving a file from Emacs throws away the old contents of
files.texi(,433) the file---or it would, except that Emacs carefully copies the old contents
files.texi(,434) to another file, called the @dfn{backup} file, before actually saving.
files.texi(,435) (Make sure that the variable @code{make-backup-files} is non-@code{nil}.
files.texi(,436) Backup files are not written if this variable is @code{nil}).
files.texi(,437) 
files.texi(,438)   At your option, Emacs can keep either a single backup file or a series of
files.texi(,439) numbered backup files for each file you edit.
files.texi(,440) 
files.texi(,441)   Emacs makes a backup for a file only the first time a file is saved
files.texi(,442) from one buffer.  No matter how many times you save a file, its backup file
files.texi(,443) continues to contain the contents from before the file was visited.
files.texi(,444) Normally this means that the backup file contains the contents from before
files.texi(,445) the current editing session; however, if you kill the buffer and then visit
files.texi(,446) the file again, a new backup file is made by the next save.
files.texi(,447) 
files.texi(,448) @menu
files.texi(,449) * Names: Backup Names.		How backup files are named;
files.texi(,450) 				Choosing single or numbered backup files.
files.texi(,451) * Deletion: Backup Deletion.	Emacs deletes excess numbered backups.
files.texi(,452) * Copying: Backup Copying.	Backups can be made by copying or renaming.
files.texi(,453) @end menu
files.texi(,454) 
files.texi(,455) @node Backup Names, Backup Deletion, Backup, Backup
files.texi(,456) @subsubsection Single or Numbered Backups
files.texi(,457) 
files.texi(,458)   If you choose to have a single backup file (the default),
files.texi(,459) the backup file's name is constructed by appending @samp{~} to the
files.texi(,460) file name being edited; thus, the backup file for @file{eval.c} is
files.texi(,461) @file{eval.c~}.
files.texi(,462) 
files.texi(,463)   If you choose to have a series of numbered backup files, backup file
files.texi(,464) names are made by appending @samp{.~}, the number, and another @samp{~} to
files.texi(,465) the original file name.  Thus, the backup files of @file{eval.c} would be
files.texi(,466) called @file{eval.c.~1~}, @file{eval.c.~2~}, and so on, through names
files.texi(,467) like @file{eval.c.~259~} and beyond.
files.texi(,468) 
files.texi(,469)   If protection stops you from writing backup files under the usual names,
files.texi(,470) the backup file is written as @file{%backup%~} in your home directory.
files.texi(,471) Only one such file can exist, so only the most recently made backup is
files.texi(,472) available.
files.texi(,473) 
files.texi(,474) @vindex version-control
files.texi(,475)   The choice of single backup or numbered backups is controlled by the
files.texi(,476) variable @code{version-control}.  Its possible values are:
files.texi(,477) 
files.texi(,478) @table @code
files.texi(,479) @item t
files.texi(,480) Make numbered backups.
files.texi(,481) @item nil
files.texi(,482) Make numbered backups for files that have numbered backups already.
files.texi(,483) Otherwise, make single backups.
files.texi(,484) @item never
files.texi(,485) Never make numbered backups; always make single backups.
files.texi(,486) @end table
files.texi(,487) 
files.texi(,488) @noindent
files.texi(,489) @code{version-control} may be set locally in an individual buffer to
files.texi(,490) control the making of backups for that buffer's file.  For example,
files.texi(,491) Rmail mode locally sets @code{version-control} to @code{never} to make sure
files.texi(,492) that there is only one backup for an Rmail file.  @xref{Locals}.
files.texi(,493) 
files.texi(,494) @node Backup Deletion, Backup Copying, Backup Names, Backup
files.texi(,495) @subsubsection Automatic Deletion of Backups
files.texi(,496) 
files.texi(,497) @vindex kept-old-versions
files.texi(,498) @vindex kept-new-versions
files.texi(,499)   To prevent unlimited consumption of disk space, Emacs can delete numbered
files.texi(,500) backup versions automatically.  Generally Emacs keeps the first few backups
files.texi(,501) and the latest few backups, deleting any in between.  This happens every
files.texi(,502) time a new backup is made.  The two variables that control the deletion are
files.texi(,503) @code{kept-old-versions} and @code{kept-new-versions}.  Their values are, respectively
files.texi(,504) the number of oldest (lowest-numbered) backups to keep and the number of
files.texi(,505) newest (highest-numbered) ones to keep, each time a new backup is made.
files.texi(,506) The values are used just after a new backup version is made;
files.texi(,507) that newly made backup is included in the count in @code{kept-new-versions}.
files.texi(,508) By default, both variables are 2.
files.texi(,509) 
files.texi(,510) @vindex delete-old-versions
files.texi(,511)   If @code{delete-old-versions} is non-@code{nil},  excess
files.texi(,512) middle versions are deleted without notification.  If it is @code{nil}, the
files.texi(,513) default, you are asked whether the excess middle versions should
files.texi(,514) really be deleted.
files.texi(,515) 
files.texi(,516)   You can also use Dired's @kbd{.} (Period) command to delete old versions.
files.texi(,517) @xref{Dired}.
files.texi(,518) 
files.texi(,519) @node Backup Copying,  , Backup Deletion, Backup
files.texi(,520) @subsubsection Copying vs.@: Renaming
files.texi(,521) 
files.texi(,522)   You can make backup files by copying the old file or by renaming it.
files.texi(,523) This makes a difference when the old file has multiple names.  If you
files.texi(,524) rename the old file into the backup file, the alternate names
files.texi(,525) become names for the backup file.  If you copy the old file instead,
files.texi(,526) the alternate names remain names for the file that you are editing,
files.texi(,527) and the contents accessed by those names will be the new contents.
files.texi(,528) 
files.texi(,529)   How you make a backup file may also affect the file's owner
files.texi(,530) and group.  If you use copying, they do not change.  If renaming is used,
files.texi(,531) you become the file's owner, and the file's group becomes the default
files.texi(,532) (different operating systems have different defaults for the group).
files.texi(,533) 
files.texi(,534)   Having the owner change is usually a good idea, because then the owner
files.texi(,535) is always the person who last edited the file.  Occasionally there is a 
files.texi(,536) file whose owner should not change.  Since most files should change
files.texi(,537) owners, it is a good idea to use local variable lists to set 
files.texi(,538) @code{backup-by-copying-when-mismatch} for the special cases where the 
files.texi(,539) owner should not change (@pxref{File Variables}).
files.texi(,540) 
files.texi(,541) @vindex backup-by-copying
files.texi(,542) @vindex backup-by-copying-when-linked
files.texi(,543) @vindex backup-by-copying-when-mismatch
files.texi(,544)   Three variables control the choice of renaming or copying.
files.texi(,545) Normally, renaming is done.  If the variable @code{backup-by-copying} is
files.texi(,546) non-@code{nil}, copying is used.  Otherwise, if the variable
files.texi(,547) @code{backup-by-copying-when-linked} is non-@code{nil}, copying is
files.texi(,548) done for files that have multiple names, but renaming may still be done when
files.texi(,549) the file being edited has only one name.  If the variable
files.texi(,550) @code{backup-by-copying-when-mismatch} is non-@code{nil}, copying is
files.texi(,551) done if renaming would cause the file's owner or group to change.  @refill
files.texi(,552) 
files.texi(,553) @node Interlocking,  , Backup, Saving
files.texi(,554) @subsection Protection Against Simultaneous Editing
files.texi(,555) 
files.texi(,556) @cindex file dates
files.texi(,557) @cindex simultaneous editing
files.texi(,558)   Simultaneous editing occurs when two users visit the same file, both
files.texi(,559) make changes, and both save their changes.  If no one was informed that
files.texi(,560) this was happening, and you saved first, you would later find that your
files.texi(,561) changes were lost.  On some systems, Emacs notices immediately when the
files.texi(,562) second user starts to change a file already being edited, and issues a
files.texi(,563) warning.  When this is not possible, or if the second user has started
files.texi(,564) to change the file despite the warning, Emacs checks when the file is
files.texi(,565) saved, and issues a second warning when a user is about to overwrite a
files.texi(,566) file containing another user's changes.  If you are the user editing the
files.texi(,567) file, you can take corrective action at this point and prevent actual
files.texi(,568) loss of work.
files.texi(,569) 
files.texi(,570) @findex ask-user-about-lock
files.texi(,571)   When you make the first modification in an Emacs buffer that is visiting
files.texi(,572) a file, Emacs records that you have locked the file.  (It does this by
files.texi(,573) writing another file in a directory reserved for this purpose.)  The lock
files.texi(,574) is removed when you save the changes.  The idea is that the file is locked
files.texi(,575) whenever the buffer is modified.  If you begin to modify the buffer while
files.texi(,576) the visited file is locked by someone else, this constitutes a collision,
files.texi(,577) and Emacs asks you what to do.  It does this by calling the Lisp function
files.texi(,578) @code{ask-user-about-lock}, which you can redefine to customize what it
files.texi(,579) does.  The standard definition of this function asks you a
files.texi(,580) question and accepts three possible answers:
files.texi(,581) 
files.texi(,582) @table @kbd
files.texi(,583) @item s
files.texi(,584) Steal the lock.  Whoever was already changing the file loses the lock,
files.texi(,585) and you get the lock.
files.texi(,586) @item p
files.texi(,587) Proceed.  Go ahead and edit the file despite its being locked by someone else.
files.texi(,588) @item q
files.texi(,589) Quit.  This causes an error (@code{file-locked}) and the modification you
files.texi(,590) were trying to make in the buffer does not actually take place.
files.texi(,591) @end table
files.texi(,592) 
files.texi(,593)   Note that locking works on the basis of a file name; if a file has
files.texi(,594) multiple names, Emacs does not realize that the two names are the same file
files.texi(,595) and cannot prevent two users from editing it simultaneously under different
files.texi(,596) names.  However, basing locking on names means that Emacs can interlock the
files.texi(,597) editing of new files that do not really exist until they are saved.
files.texi(,598) 
files.texi(,599)   Some systems are not configured to allow Emacs to make locks.  On
files.texi(,600) these systems, Emacs cannot detect trouble in advance, but it can still
files.texi(,601) detect it in time to prevent you from overwriting someone else's changes.
files.texi(,602) 
files.texi(,603)   Every time Emacs saves a buffer, it first checks the last-modification
files.texi(,604) date of the existing file on disk to see that it has not changed since the
files.texi(,605) file was last visited or saved.  If the date does not match, it implies
files.texi(,606) that changes were made in the file in some other way, and these changes are
files.texi(,607) about to be lost if Emacs actually does save.  To prevent this, Emacs
files.texi(,608) prints a warning message and asks for confirmation before saving.
files.texi(,609) Occasionally you will know why the file was changed and know that it does
files.texi(,610) not matter; then you can answer @kbd{yes} and proceed.  Otherwise, you should
files.texi(,611) cancel the save with @kbd{C-g} and investigate the situation.
files.texi(,612) 
files.texi(,613)   The first thing you should do when notified that simultaneous editing
files.texi(,614) has already taken place is to list the directory with @kbd{C-u C-x C-d}
files.texi(,615) (@pxref{ListDir,,Directory Listing}).  This will show the file's current
files.texi(,616) author.  You should attempt to contact that person and ask him not to
files.texi(,617) continue editing.  Often the next step is to save the contents of your
files.texi(,618) Emacs buffer under a different name, and use @code{diff} to compare the
files.texi(,619) two files.@refill
files.texi(,620) 
files.texi(,621)   Simultaneous editing checks are also made when you visit a file that
files.texi(,622) is already visited with @kbd{C-x C-f} and when you start to modify a
files.texi(,623) file.  This is not strictly necessary, but it is useful to find out
files.texi(,624) about such a problem as early as possible, when corrective action takes
files.texi(,625) less work.
files.texi(,626) 
files.texi(,627) @findex set-default-file-modes
files.texi(,628) @cindex file protection
files.texi(,629) Another way to protect your file is to set the read, write, and
files.texi(,630) executable permissions for the file. Use the function
files.texi(,631) @code{set-default-file-modes} to set the UNIX @code{umask} value to the
files.texi(,632) @var{nmask} argument. The @code{umask} value is the default protection
files.texi(,633) mode for new files.
files.texi(,634) 
files.texi(,635) @node Reverting, Auto Save, Saving, Files
files.texi(,636) @section Reverting a Buffer
files.texi(,637) @findex revert-buffer
files.texi(,638) @cindex drastic changes
files.texi(,639) 
files.texi(,640)   If you have made extensive changes to a file and then change your mind
files.texi(,641) about them, you can get rid of all changes by reading in the previous
files.texi(,642) version of the file.  To do this, use @kbd{M-x revert-buffer}, which
files.texi(,643) operates on the current buffer.  Since reverting a buffer can result in
files.texi(,644) very extensive changes, you must confirm it with @kbd{yes}.
files.texi(,645) 
files.texi(,646)   You may request that @code{revert-buffer} check for an auto-save file
files.texi(,647) that is more recent than the visited file by providing a prefix
files.texi(,648) argument.  If a recent auto-save file exists, @code{revert-buffer}
files.texi(,649) offers to read the auto-save file instead of the visited file
files.texi(,650) (@pxref{Auto Save}).  Emacs asks you about the auto-save file before the
files.texi(,651) request for confirmation of the @kbd{revert-buffer} operation, and
files.texi(,652) demands @kbd{y} or @kbd{n} as an answer.  If you have started to type
files.texi(,653) @kbd{yes} to confirm the revert operation, the @kbd{y} will answer the
files.texi(,654) question about using the auto-save file, but the @kbd{es} will not be
files.texi(,655) valid confirmation for the reversion.  This gives you a chance to cancel
files.texi(,656) the operation with @kbd{C-g} and try again with the answers you really
files.texi(,657) intend.
files.texi(,658) 
files.texi(,659)   @code{revert-buffer} preserves the value of point (in characters from
files.texi(,660) the beginning of the file).  If the file was edited only slightly, you
files.texi(,661) will be at approximately the same piece of text after reverting as
files.texi(,662) before.  If you have made more extensive changes, after reversion point
files.texi(,663) may be in a totally different context than your last edits before
files.texi(,664) reversion.
files.texi(,665) 
files.texi(,666) A buffer reverted from its visited file is marked ``not modified'' until
files.texi(,667) you make a change.  The buffer's modes will also be recalculated, by
files.texi(,668) @code{normal-mode}.
files.texi(,669) 
files.texi(,670)   Some kinds of buffers whose contents reflect data bases other than files,
files.texi(,671) such as Dired buffers, can also be reverted.  For them, reverting means
files.texi(,672) refreshing their contents from the appropriate data.  Buffers created
files.texi(,673) randomly with @kbd{C-x b} cannot be reverted; @code{revert-buffer}
files.texi(,674) reports an error when asked to do so.
files.texi(,675) 
files.texi(,676) @node Auto Save, Version Control, Reverting, Files
files.texi(,677) @section Auto-Saving: Protection Against Disasters
files.texi(,678) @cindex Auto-Save mode
files.texi(,679) @cindex crashes
files.texi(,680) 
files.texi(,681)   Emacs saves all the visited files from time to time (based on counting
files.texi(,682) your keystrokes) without being asked.  This is called @dfn{auto-saving}.
files.texi(,683) It prevents you from losing more than a limited amount of work if the
files.texi(,684) system crashes.
files.texi(,685) 
files.texi(,686)   When Emacs determines it is time for auto-saving, each buffer is
files.texi(,687) considered and is auto-saved if auto-saving is turned on for it and it has
files.texi(,688) changed since the last time it was auto-saved.  If any auto-saving is
files.texi(,689) done, the message @samp{Auto-saving...} is displayed in the echo area until
files.texi(,690) auto-saving is finished.  Errors occurring during auto-saving are caught
files.texi(,691) so that they do not interfere with the execution of commands you have been
files.texi(,692) typing.
files.texi(,693) 
files.texi(,694) @menu
files.texi(,695) * Files: Auto Save Files.
files.texi(,696) * Control: Auto Save Control.
files.texi(,697) * Recover::		Recovering text from auto-save files.
files.texi(,698) @end menu
files.texi(,699) 
files.texi(,700) @node Auto Save Files, Auto Save Control, Auto Save, Auto Save
files.texi(,701) @subsection Auto-Save Files
files.texi(,702) 
files.texi(,703)   Auto-saving does not normally write to the files you visited, because
files.texi(,704) it can be undesirable to save a program that is in an inconsistent
files.texi(,705) state when you have made only half of a planned change.  Instead, auto-saving
files.texi(,706) is done in a different file called the @dfn{auto-save file}, and the
files.texi(,707) visited file is changed only when you save explicitly, for example, 
files.texi(,708) with @kbd{C-x C-s}.
files.texi(,709) 
files.texi(,710)   Normally, the name of the auto-save file is generated by appending
files.texi(,711) @samp{#} to the front and back of the visited file name.  Thus, a buffer
files.texi(,712) visiting file @file{foo.c} would be auto-saved in a file @file{#foo.c#}.
files.texi(,713) Most buffers that are not visiting files are auto-saved only if you
files.texi(,714) request it explicitly; when they are auto-saved, the auto-save file name
files.texi(,715) is generated by appending @samp{#%} to the front and @samp{#} to the
files.texi(,716) back of buffer name.  For example, the @samp{*mail*} buffer in which you
files.texi(,717) compose messages to be sent is auto-saved in a file named
files.texi(,718) @file{#%*mail*#}.  Names of auto-save files are generated this way
files.texi(,719) unless you customize the functions @code{make-auto-save-file-name} and
files.texi(,720) @code{auto-save-file-name-p} to do something different.  The file name
files.texi(,721) to be used for auto-saving a buffer is calculated at the time auto-saving is
files.texi(,722) turned on in that buffer.
files.texi(,723) 
files.texi(,724) @vindex auto-save-visited-file-name
files.texi(,725)   If you want auto-saving to be done in the visited file, set the variable
files.texi(,726) @code{auto-save-visited-file-name} to be non-@code{nil}.  In this mode,
files.texi(,727) there is really no difference between auto-saving and explicit saving.
files.texi(,728) 
files.texi(,729) @vindex delete-auto-save-files
files.texi(,730)   Emacs deletes a buffer's auto-save file when you explicitly save the
files.texi(,731) buffer.  To inhibit the deletion, set the variable
files.texi(,732) @code{delete-auto-save-files} to @code{nil}.  Changing the visited file
files.texi(,733) name with @kbd{C-x C-w} or @code{set-visited-file-name} renames any
files.texi(,734) auto-save file to correspond to the new visited name.
files.texi(,735) 
files.texi(,736) @node Auto Save Control, Recover, Auto Save Files, Auto Save
files.texi(,737) @subsection Controlling Auto-Saving
files.texi(,738) 
files.texi(,739) @vindex auto-save-default
files.texi(,740) @findex auto-save-mode
files.texi(,741)   Each time you visit a file, auto-saving is turned on for that file's
files.texi(,742) buffer if the variable @code{auto-save-default} is non-@code{nil} (but
files.texi(,743) not in batch mode; @pxref{Entering Emacs}).  The default for this
files.texi(,744) variable is @code{t}, so Emacs auto-saves buffers that visit files by
files.texi(,745) default.  You can use the command @kbd{M-x auto-save-mode} to turn
files.texi(,746) auto-saving for a buffer on or off.  Like other minor mode commands,
files.texi(,747) @kbd{M-x auto-save-mode} turns auto-saving on with a positive argument,
files.texi(,748) off with a zero or negative argument; with no argument, it toggles.
files.texi(,749) 
files.texi(,750) @vindex auto-save-interval
files.texi(,751) @findex do-auto-save
files.texi(,752)   Emacs performs auto-saving periodically based on counting how many
files.texi(,753) characters you have typed since the last time auto-saving happened.  The
files.texi(,754) variable @code{auto-save-interval} specifies the number of characters
files.texi(,755) between auto-saves.  By default, it is 300.  Emacs also auto-saves
files.texi(,756) whenever you call the function @code{do-auto-save}.
files.texi(,757) 
files.texi(,758)   Emacs also does auto-saving whenever it gets a fatal error.  This
files.texi(,759) includes killing the Emacs job with a shell command such as @code{kill
files.texi(,760) -emacs}, or disconnecting a phone line or network connection.
files.texi(,761) 
files.texi(,762) @vindex auto-save-timeout
files.texi(,763) You can set the number of seconds of idle time before an auto-save is
files.texi(,764) done. Setting the value of the variable @code{auto-save-timeout} to zero or 
files.texi(,765) @code{nil} will  disable auto-saving due to idleness.
files.texi(,766) 
files.texi(,767) The actual amount of idle time between auto-saves is logarithmically
files.texi(,768) related to the size of the current buffer.  This variable is the number
files.texi(,769) of seconds after which an auto-save will happen when the current buffer
files.texi(,770) is 50k or less; the timeout will be 2 1/4 times this in a 200k buffer, 3
files.texi(,771) 3/4 times this in a 1000k buffer, and 4 1/2 times this in a 2000k
files.texi(,772) buffer.
files.texi(,773) 
files.texi(,774) For this variable to have any effect, you must do @code{(require 'timer)}.
files.texi(,775) 
files.texi(,776) @node Recover,  , Auto Save Control, Auto Save
files.texi(,777) @subsection Recovering Data from Auto-Saves
files.texi(,778) 
files.texi(,779) @findex recover-file
files.texi(,780)   If you want to use the contents of an auto-save file to recover from a
files.texi(,781) loss of data, use the command @kbd{M-x recover-file @key{RET} @var{file}
files.texi(,782) @key{RET}}.  Emacs visits @var{file} and then (after your confirmation)
files.texi(,783) restores the contents from the auto-save file @file{#@var{file}#}.  You
files.texi(,784) can then save the file with @kbd{C-x C-s} to put the recovered text into
files.texi(,785) @var{file} itself.  For example, to recover file @file{foo.c} from its
files.texi(,786) auto-save file @file{#foo.c#}, do:@refill
files.texi(,787) 
files.texi(,788) @example
files.texi(,789) M-x recover-file @key{RET} foo.c @key{RET}
files.texi(,790) C-x C-s
files.texi(,791) @end example
files.texi(,792) 
files.texi(,793)   Before asking for confirmation, @kbd{M-x recover-file} displays a
files.texi(,794) directory listing describing the specified file and the auto-save file,
files.texi(,795) so you can compare their sizes and dates.  If the auto-save file
files.texi(,796) is older, @kbd{M-x recover-file} does not offer to read it.
files.texi(,797) 
files.texi(,798)   Auto-saving is disabled by @kbd{M-x recover-file} because using
files.texi(,799) this command implies that the auto-save file contains valuable data
files.texi(,800) from a past session.  If you save the data in the visited file and
files.texi(,801) then go on to make new changes, turn auto-saving back on
files.texi(,802) with @kbd{M-x auto-save-mode}.
files.texi(,803) 
files.texi(,804) @node Version Control, ListDir, Auto Save, Files
files.texi(,805) @section Version Control
files.texi(,806) @cindex version control
files.texi(,807) 
files.texi(,808)   @dfn{Version control systems} are packages that can record multiple
files.texi(,809) versions of a source file, usually storing the unchanged parts of the
files.texi(,810) file just once.  Version control systems also record history information
files.texi(,811) such as the creation time of each version, who created it, and a 
files.texi(,812) description of what was changed in that version.
files.texi(,813) 
files.texi(,814)   The GNU project recommends the version control system known as RCS,
files.texi(,815) which is free software and available from the Free Software Foundation.
files.texi(,816) Emacs supports use of either RCS or SCCS (a proprietary, but widely
files.texi(,817) used, version control system that is not quite as powerful as RCS)
files.texi(,818) through a facility called VC.  The same Emacs commands work with either
files.texi(,819) RCS or SCCS, so you hardly have to know which one of them you are
files.texi(,820) using.
files.texi(,821) 
files.texi(,822) @menu
files.texi(,823) * Concepts of VC::              Basic version control information;
files.texi(,824)                                   checking files in and out.
files.texi(,825) * Editing with VC::             Commands for editing a file maintained
files.texi(,826)                                   with version control.
files.texi(,827) * Variables for Check-in/out::  Variables that affect the commands used
files.texi(,828)                                   to check files in or out.
files.texi(,829) * Log Entries::                 Logging your changes.
files.texi(,830) * Change Logs and VC::          Generating a change log file from log
files.texi(,831)                                   entries. 
files.texi(,832) * Old Versions::                Examining and comparing old versions.
files.texi(,833) * VC Status::                   Commands to view the VC status of files and
files.texi(,834)                                   look at log entries.
files.texi(,835) * Renaming and VC::             A command to rename both the source and
files.texi(,836)                                   master file correctly.
files.texi(,837) * Snapshots::                   How to make and use snapshots, a set of
files.texi(,838)                                   file versions that can be treated as a unit.
files.texi(,839) * Version Headers::             Inserting version control headers into
files.texi(,840)                                   working files.
files.texi(,841) @end menu
files.texi(,842) 
files.texi(,843) @node Concepts of VC, Editing with VC, Version Control, Version Control
files.texi(,844) @subsection Concepts of Version Control
files.texi(,845) 
files.texi(,846) @cindex RCS
files.texi(,847) @cindex SCCS
files.texi(,848) @cindex master file
files.texi(,849) @cindex registered file
files.texi(,850) @cindex work file
files.texi(,851)    When a file is under version control, we also say that it is
files.texi(,852) @dfn{registered} in the version control system.  Each registered file
files.texi(,853) has a corresponding @dfn{master file} which represents the file's
files.texi(,854) present state plus its change history, so that you can reconstruct from
files.texi(,855) it either the current version or any specified earlier version.  Usually
files.texi(,856) the master file also records a @dfn{log entry} for each version describing
files.texi(,857) what was changed in that version.
files.texi(,858) 
files.texi(,859)   The file that is maintained under version control is sometimes called
files.texi(,860) the @dfn{work file} corresponding to its master file.
files.texi(,861) 
files.texi(,862) @cindex checking out files
files.texi(,863) @cindex checking in files
files.texi(,864) @cindex locking and version control
files.texi(,865)    To examine a file, you @dfn{check it out}.  This extracts a version
files.texi(,866) of the source file (typically, the most recent) from the master file.
files.texi(,867) If you want to edit the file, you must check it out @dfn{locked}.  Only
files.texi(,868) one user can do this at a time for any given source file.  (This kind 
files.texi(,869) of locking is completely unrelated to the locking that Emacs uses to
files.texi(,870) detect simultaneous editing of a file.)
files.texi(,871) 
files.texi(,872)   When you are done with your editing, you must @dfn{check in} the new
files.texi(,873) version.  This records the new version in the master file, and unlocks
files.texi(,874) the source file so that other people can lock it and thus modify it.
files.texi(,875) 
files.texi(,876)   Checkin and checkout are the basic operations of version control.  You
files.texi(,877) can do both of them with a single Emacs command: @w{@kbd{C-x C-q}}
files.texi(,878) (@code{vc-toggle-read-only}).
files.texi(,879) 
files.texi(,880)   A @dfn{snapshot} is a coherent collection of versions of the various
files.texi(,881) files that make up a program.  @xref{Snapshots}.
files.texi(,882) 
files.texi(,883) @node Editing with VC, Variables for Check-in/out, Concepts of VC, Version Control
files.texi(,884) @subsection Editing with Version Control
files.texi(,885) 
files.texi(,886)   When you visit a file that is maintained using version control, the
files.texi(,887) mode line displays @samp{RCS} or @samp{SCCS} to inform you that version
files.texi(,888) control is in use, and also (in case you care) which low-level system
files.texi(,889) the file is actually stored in.  Normally, such a source file is
files.texi(,890) read-only, and the mode line indicates this with @samp{%%}.  With RCS,
files.texi(,891) the mode line also indicates the number of the head version, which is
files.texi(,892) normally also the version you are looking at.
files.texi(,893) 
files.texi(,894)   These are the commands for editing a file maintained with
files.texi(,895) version control:
files.texi(,896) 
files.texi(,897) @table @kbd
files.texi(,898) @item C-x C-q
files.texi(,899) Check the visited file in or out.
files.texi(,900) 
files.texi(,901) @item C-x v u
files.texi(,902) Revert the buffer and the file to the last checked in version.
files.texi(,903) 
files.texi(,904) @item C-x v c
files.texi(,905) Remove the last-entered change from the master for the visited file.
files.texi(,906) This undoes your last check-in.
files.texi(,907) 
files.texi(,908) @item C-x v i
files.texi(,909) Register the visited file in version control.
files.texi(,910) @end table
files.texi(,911) 
files.texi(,912) @noindent
files.texi(,913) (@kbd{C-x v} is the prefix key for version control commands; all of these
files.texi(,914) commands except for @kbd{C-x C-q} start with @kbd{C-x v}.)
files.texi(,915) 
files.texi(,916) @kindex C-x C-q @r{(version control)}
files.texi(,917)   When you want to modify a file maintained with version control, type
files.texi(,918) @kbd{C-x C-q} (@code{vc-toggle-read-only}).  This @dfn{checks out} the
files.texi(,919) file, and tells RCS or SCCS to lock the file.  This means making the
files.texi(,920) file writable for you (but not for anyone else).
files.texi(,921) 
files.texi(,922) @cindex log entry
files.texi(,923)   When you are finished editing the file, type @kbd{C-x C-q} again.
files.texi(,924) When used on a file that is checked out, this command checks the file
files.texi(,925) in.  But check-in does not start immediately; first, you must enter the
files.texi(,926) @dfn{log entry}---a description of the changes in the new version.
files.texi(,927) @kbd{C-x C-q} pops up a buffer for you to enter this in.  When you are
files.texi(,928) finished typing in the log entry, type @kbd{C-c C-c} to terminate it; this is
files.texi(,929) when actual check-in takes place.
files.texi(,930) 
files.texi(,931)   Once you have checked in your changes, the file is unlocked, so that
files.texi(,932) other users can lock it and modify it.
files.texi(,933) 
files.texi(,934) @vindex vc-make-backup-files
files.texi(,935)   Emacs does not save backup files for source files that are maintained
files.texi(,936) with version control.  If you want to make backup files despite version
files.texi(,937) control, set the variable @code{vc-make-backup-files} to a
files.texi(,938) non-@code{nil} value.
files.texi(,939) 
files.texi(,940) @vindex vc-keep-workfiles
files.texi(,941)   Normally the work file exists all the time, whether it is locked or
files.texi(,942) not.  If you set @code{vc-keep-workfiles} to @code{nil}, then checking
files.texi(,943) in a new version with @kbd{C-x C-q} deletes the work file; but any
files.texi(,944) attempt to visit the file with Emacs creates it again.
files.texi(,945) 
files.texi(,946)   It is not impossible to lock a file that someone else has locked.  If
files.texi(,947) you try to check out a file that is locked, @kbd{C-x C-q} asks you
files.texi(,948) whether you want to ``steal the lock.''  If you say yes, the file
files.texi(,949) becomes locked by you, but a message is sent to the person who had
files.texi(,950) formerly locked the file, to inform him of what has happened.  The mode
files.texi(,951) line indicates that a file is locked by someone else by displaying the
files.texi(,952) login name of that person, before the version number.
files.texi(,953) 
files.texi(,954) @kindex C-x v u
files.texi(,955) @findex vc-revert-buffer
files.texi(,956)   If you want to discard your current set of changes and revert to the
files.texi(,957) last version checked in, use @kbd{C-x v u} (@code{vc-revert-buffer}).
files.texi(,958) This cancels your last check-out, leaving the file unlocked.  If you want
files.texi(,959) to make a different set of changes, you must first check the file out
files.texi(,960) again.  @kbd{C-x v u} requires confirmation, unless it sees that 
files.texi(,961) you haven't made any changes since the last checked-in version.
files.texi(,962) 
files.texi(,963)   @kbd{C-x v u} is also the command to use if you lock a file and then
files.texi(,964) don't actually change it.
files.texi(,965) 
files.texi(,966) @kindex C-x v c
files.texi(,967) @findex vc-cancel-version
files.texi(,968)   You can cancel a change after checking it in, with @kbd{C-x v c}
files.texi(,969) (@code{vc-cancel-version}).  This command discards all record of the
files.texi(,970) most recent checked in version, so be careful about using it.  It
files.texi(,971) requires confirmation with @kbd{yes}.  By default, @kbd{C-x v c} reverts
files.texi(,972) your workfile and buffer to the previous version (the one that precedes
files.texi(,973) the version that is deleted), but you can prevent the reversion by
files.texi(,974) giving the command a prefix argument.  Then the buffer does not change.
files.texi(,975) 
files.texi(,976)   This command with a prefix argument is useful when you have checked in
files.texi(,977) a change and then discover a trivial error in it; you can cancel the
files.texi(,978) erroneous check-in, fix the error, and repeat the check-in.
files.texi(,979) 
files.texi(,980)   Be careful when invoking @kbd{C-x v c}, as it is easy to throw away a
files.texi(,981) lot of work with it.  To help you be careful, this command always
files.texi(,982) requires confirmation with @samp{yes}.
files.texi(,983) 
files.texi(,984) @kindex C-x v i
files.texi(,985) @findex vc-register
files.texi(,986) @vindex vc-default-back-end
files.texi(,987)   You can register the visited file for version control using
files.texi(,988) @w{@kbd{C-x v i}} (@code{vc-register}).  If the variable
files.texi(,989) @code{vc-default-back-end} is non-@code{nil}, it specifies which
files.texi(,990) version control system to use; otherwise, this uses RCS if it is
files.texi(,991) installed on your system and SCCS if not.  After @kbd{C-x v i},
files.texi(,992) the file is unlocked and read-only.  Type @kbd{C-x C-q} if you wish to
files.texi(,993) edit it.
files.texi(,994) 
files.texi(,995)   By default, the initial version number is 1.1.  If you want to use a
files.texi(,996) different number, give @kbd{C-x v i} a prefix argument; then it reads
files.texi(,997) the initial version number using the minibuffer.
files.texi(,998) 
files.texi(,999) @vindex vc-initial-comment
files.texi(,1000)   If @code{vc-initial-comment} is non-@code{nil}, @kbd{C-x v i} reads
files.texi(,1001) an initial comment (much like a log entry) to describe the purpose of
files.texi(,1002) this source file.
files.texi(,1003) 
files.texi(,1004) @kindex C-u C-x v v
files.texi(,1005) @findex vc-next-action
files.texi(,1006)   To specify the version number for a subsequent checkin, use the
files.texi(,1007) command @kbd{C-u C-x v v}.  @kbd{C-x v v} (@code{vc-next-action}) is the
files.texi(,1008) command that @kbd{C-x C-q} uses to do the ``real work'' when the visited
files.texi(,1009) file uses version control.  When used for checkin, and given a prefix
files.texi(,1010) argument, it reads the version number with the minibuffer.
files.texi(,1011) 
files.texi(,1012) @node Variables for Check-in/out, Log Entries, Editing with VC, Version Control
files.texi(,1013) @subsection Variables Affecting Check-in and Check-out
files.texi(,1014) @c There is no need to tell users about vc-master-templates.
files.texi(,1015) 
files.texi(,1016) @vindex vc-suppress-confirm
files.texi(,1017)   If @code{vc-suppress-confirm} is non-@code{nil}, then @kbd{C-x C-q}
files.texi(,1018) and @kbd{C-x v i} can save the current buffer without asking, and
files.texi(,1019) @kbd{C-x v u} also operates without asking for confirmation.
files.texi(,1020) (This variable does not affect @kbd{C-x v c}; that is so drastic
files.texi(,1021) that it should always ask for confirmation.)
files.texi(,1022) 
files.texi(,1023) @vindex vc-command-messages
files.texi(,1024)   VC mode does much of its work by running the shell commands for RCS
files.texi(,1025) and SCCS.  If @code{vc-command-messages} is non-@code{nil}, VC displays
files.texi(,1026) messages to indicate which shell commands it runs, and additional
files.texi(,1027) messages when the commands finish.
files.texi(,1028) 
files.texi(,1029)   Normally, VC assumes that it can deduce the locked/unlocked state of
files.texi(,1030) files by looking at the file permissions of the work file; this is
files.texi(,1031) fast.  However, if the @file{RCS} or @file{SCCS} subdirectory is
files.texi(,1032) actually a symbolic link, then VC does not trust the file permissions to
files.texi(,1033) reflect this status.
files.texi(,1034) 
files.texi(,1035) @vindex vc-mistrust-permissions
files.texi(,1036) You can specify the criterion for whether to trust the file permissions
files.texi(,1037) by setting the variable @code{vc-mistrust-permissions}.  Its value may
files.texi(,1038) be @code{t} (always mistrust the file permissions and check the master
files.texi(,1039) file), @code{nil} (always trust the file permissions), or a function of
files.texi(,1040) one argument which makes the decision.  The argument is the directory
files.texi(,1041) name of the @file{RCS} or @file{SCCS} subdirectory.  A non-@code{nil}
files.texi(,1042) value from the function says to mistrust the file permissions.
files.texi(,1043) 
files.texi(,1044)   If you find that the file permissions of work files are changed
files.texi(,1045) erroneously, set @code{vc-mistrust-permissions} to @code{t}.  Then VC
files.texi(,1046) always checks the master file to determine the file's status.
files.texi(,1047) 
files.texi(,1048) @vindex vc-path
files.texi(,1049)   You can specify additional directories to search for version control
files.texi(,1050) programs by setting the variable @code{vc-path}.  These directories
files.texi(,1051) are searched before the usual search path.  The proper result usually
files.texi(,1052) happens automatically.
files.texi(,1053) 
files.texi(,1054) @node Log Entries, Change Logs and VC, Variables for Check-in/out, Version Control
files.texi(,1055) @subsection Log Entries
files.texi(,1056) 
files.texi(,1057)   When you're editing an initial comment or log entry for inclusion in a
files.texi(,1058) master file, finish your entry by typing @kbd{C-c C-c}.
files.texi(,1059) 
files.texi(,1060) @table @kbd
files.texi(,1061) @item C-c C-c
files.texi(,1062) Finish the comment edit normally (@code{vc-finish-logentry}).
files.texi(,1063) This finishes check-in.
files.texi(,1064) @end table
files.texi(,1065) 
files.texi(,1066)   To abort check-in, just don't type @kbd{C-c C-c} in that buffer.  You
files.texi(,1067) can switch buffers and do other editing.  As long as you don't try to
files.texi(,1068) check in another file, the entry you were editing remains in its
files.texi(,1069) buffer, and you can go back to that buffer at any time to complete the
files.texi(,1070) check-in.
files.texi(,1071) 
files.texi(,1072)   If you change several source files for the same reason, it is often
files.texi(,1073) convenient to specify the same log entry for many of the files.  To do
files.texi(,1074) this, use the history of previous log entries.  The commands @kbd{M-n},
files.texi(,1075) @kbd{M-p}, @kbd{M-s} and @kbd{M-r} for doing this work just like the
files.texi(,1076) minibuffer history commands (except that these versions are used outside
files.texi(,1077) the minibuffer).
files.texi(,1078) 
files.texi(,1079) @vindex vc-log-mode-hook
files.texi(,1080)   Each time you check in a file, the log entry buffer is put into VC Log
files.texi(,1081) mode, which involves running two hooks: @code{text-mode-hook} and
files.texi(,1082) @code{vc-log-mode-hook}.
files.texi(,1083) 
files.texi(,1084) @node Change Logs and VC, Old Versions, Log Entries, Version Control
files.texi(,1085) @subsection Change Logs and VC
files.texi(,1086) 
files.texi(,1087)   If you use RCS for a program and also maintain a change log file for
files.texi(,1088) it (@pxref{Change Log}), you can generate change log entries
files.texi(,1089) automatically from the version control log entries:
files.texi(,1090) 
files.texi(,1091) @table @kbd
files.texi(,1092) @item C-x v a
files.texi(,1093) @kindex C-x v a
files.texi(,1094) @findex vc-update-change-log
files.texi(,1095) Visit the current directory's change log file and create new entries for
files.texi(,1096) versions checked in since the most recent entry in the change log file
files.texi(,1097) (@code{vc-update-change-log}).
files.texi(,1098) 
files.texi(,1099) This command works with RCS only; it does not work with SCCS.
files.texi(,1100) @end table
files.texi(,1101) 
files.texi(,1102)   For example, suppose the first line of @file{ChangeLog} is dated 10
files.texi(,1103) April 1992, and that the only check-in since then was by Nathaniel
files.texi(,1104) Bowditch to @file{rcs2log} on 8 May 1992 with log text @samp{Ignore log
files.texi(,1105) messages that start with `#'.}.  Then @kbd{C-x v a} visits
files.texi(,1106) @file{ChangeLog} and inserts text like this:
files.texi(,1107) 
files.texi(,1108) @smallexample
files.texi(,1109) @group
files.texi(,1110) Fri May  8 21:45:00 1992  Nathaniel Bowditch  (nat@@apn.org)
files.texi(,1111) 
files.texi(,1112)         * rcs2log: Ignore log messages that start with `#'.
files.texi(,1113) @end group
files.texi(,1114) @end smallexample
files.texi(,1115) 
files.texi(,1116) @noindent
files.texi(,1117) You can then edit the new change log entry further as you wish.
files.texi(,1118) 
files.texi(,1119)   Normally, the log entry for file @file{foo} is displayed as @samp{*
files.texi(,1120) foo: @var{text of log entry}}.  The @samp{:} after @file{foo} is omitted
files.texi(,1121) if the text of the log entry starts with @w{@samp{(@var{functionname}):
files.texi(,1122) }}.  For example, if the log entry for @file{vc.el} is
files.texi(,1123) @samp{(vc-do-command): Check call-process status.}, then the text in
files.texi(,1124) @file{ChangeLog} looks like this:
files.texi(,1125) 
files.texi(,1126) @smallexample
files.texi(,1127) @group
files.texi(,1128) Wed May  6 10:53:00 1992  Nathaniel Bowditch  (nat@@apn.org)
files.texi(,1129) 
files.texi(,1130)         * vc.el (vc-do-command): Check call-process status.
files.texi(,1131) @end group
files.texi(,1132) @end smallexample
files.texi(,1133) 
files.texi(,1134)   When @kbd{C-x v a} adds several change log entries at once, it groups
files.texi(,1135) related log entries together if they all are checked in by the same
files.texi(,1136) author at nearly the same time.  If the log entries for several such
files.texi(,1137) files all have the same text, it coalesces them into a single entry.
files.texi(,1138) For example, suppose the most recent checkins have the following log
files.texi(,1139) entries:
files.texi(,1140) 
files.texi(,1141) @example
files.texi(,1142) @exdent For @file{vc.texinfo}:
files.texi(,1143) Fix expansion typos.
files.texi(,1144) @exdent For @file{vc.el}:
files.texi(,1145) Don't call expand-file-name.
files.texi(,1146) @exdent For @file{vc-hooks.el}:
files.texi(,1147) Don't call expand-file-name.
files.texi(,1148) @end example
files.texi(,1149) 
files.texi(,1150)   They appear like this in @file{ChangeLog}:
files.texi(,1151) 
files.texi(,1152) @smallexample
files.texi(,1153) @group
files.texi(,1154) Wed Apr  1 08:57:59 1992  Nathaniel Bowditch  (nat@@apn.org)
files.texi(,1155) 
files.texi(,1156)         * vc.texinfo: Fix expansion typos.
files.texi(,1157) 
files.texi(,1158)         * vc.el, vc-hooks.el: Don't call expand-file-name.
files.texi(,1159) @end group
files.texi(,1160) @end smallexample
files.texi(,1161) 
files.texi(,1162)   Normally, @kbd{C-x v a} separates log entries by a blank line, but you
files.texi(,1163) can mark several related log entries to be clumped together (without an
files.texi(,1164) intervening blank line) by starting the text of each related log entry
files.texi(,1165) with a label of the form @w{@samp{@{@var{clumpname}@} }}.  The label
files.texi(,1166) itself is not copied to @file{ChangeLog}.  For example, suppose the log
files.texi(,1167) entries are:
files.texi(,1168) 
files.texi(,1169) @example
files.texi(,1170) @exdent For @file{vc.texinfo}:
files.texi(,1171) @{expand@} Fix expansion typos.
files.texi(,1172) @exdent For @file{vc.el}:
files.texi(,1173) @{expand@} Don't call expand-file-name.
files.texi(,1174) @exdent For @file{vc-hooks.el}:
files.texi(,1175) @{expand@} Don't call expand-file-name.
files.texi(,1176) @end example
files.texi(,1177) 
files.texi(,1178) @noindent
files.texi(,1179) Then the text in @file{ChangeLog} looks like this:
files.texi(,1180) 
files.texi(,1181) @smallexample
files.texi(,1182) @group
files.texi(,1183) Wed Apr  1 08:57:59 1992  Nathaniel Bowditch  (nat@@apn.org)
files.texi(,1184) 
files.texi(,1185)         * vc.texinfo: Fix expansion typos.
files.texi(,1186)         * vc.el, vc-hooks.el: Don't call expand-file-name.
files.texi(,1187) @end group
files.texi(,1188) @end smallexample
files.texi(,1189) 
files.texi(,1190)   A log entry whose text begins with @samp{#} is not copied to
files.texi(,1191) @file{ChangeLog}.  For example, if you merely fix some misspellings in
files.texi(,1192) comments, you can log the change with an entry beginning with @samp{#}
files.texi(,1193) to avoid putting such trivia into @file{ChangeLog}.
files.texi(,1194) 
files.texi(,1195) @node Old Versions, VC Status, Change Logs and VC, Version Control
files.texi(,1196) @subsection Examining And Comparing Old Versions
files.texi(,1197) 
files.texi(,1198) @table @kbd
files.texi(,1199) @item C-x v ~ @var{version} @key{RET}
files.texi(,1200) Examine version @var{version} of the visited file, in a buffer of its
files.texi(,1201) own (@code{vc-version-other-window}).
files.texi(,1202) 
files.texi(,1203) @item C-x v =
files.texi(,1204) Compare the current buffer contents with the latest checked-in version
files.texi(,1205) of the file.
files.texi(,1206) 
files.texi(,1207) @item C-u C-x v = @var{file} @key{RET} @var{oldvers} @key{RET} @var{newvers} @key{RET}
files.texi(,1208) Compare the specified two versions of @var{file}.
files.texi(,1209) @end table
files.texi(,1210) 
files.texi(,1211) @findex vc-version-other-window
files.texi(,1212) @kindex C-x v ~
files.texi(,1213)   You can examine any version of a file by first visiting it, and then
files.texi(,1214) using @kbd{C-x v ~ @var{version} @key{RET}}
files.texi(,1215) (@code{vc-version-other-window}).  This puts the text of version
files.texi(,1216) @var{version} in a file named @file{@var{filename}.~@var{version}~},
files.texi(,1217) then visits it in a separate window.
files.texi(,1218) 
files.texi(,1219) @findex vc-diff
files.texi(,1220) @kindex C-x v =
files.texi(,1221)   To compare two versions of a file, use the command @kbd{C-x v =}
files.texi(,1222) (@code{vc-diff}).
files.texi(,1223) 
files.texi(,1224)   Plain @kbd{C-x v =} compares the current buffer contents (saving them
files.texi(,1225) in the file if necessary) with the last checked-in version of the file.
files.texi(,1226) With a prefix argument, @kbd{C-x v =} reads a file name and two version
files.texi(,1227) numbers, then compares those versions of the specified file.
files.texi(,1228) 
files.texi(,1229)   If you supply a directory name instead of the name of a work file,
files.texi(,1230) this command compares the two specified versions of all registered files
files.texi(,1231) in that directory and its subdirectories.  You can also specify a
files.texi(,1232) snapshot name (@pxref{Snapshots}) instead of one or both version
files.texi(,1233) numbers.
files.texi(,1234) 
files.texi(,1235)   You can specify a checked-in version by its number; you can specify
files.texi(,1236) the most recent checked-in version with an empty version number.
files.texi(,1237) 
files.texi(,1238)   This command works by running the @code{vcdiff} utility, getting the
files.texi(,1239) options from the variable @code{diff-switches}.  It displays the output
files.texi(,1240) in a special buffer in another window.  Unlike the @kbd{M-x diff}
files.texi(,1241) command, @kbd{C-x v =} does not try to find the changes in the old and
files.texi(,1242) new versions.  This is because one or both versions normally do not
files.texi(,1243) exist as files.  They exist only in the records of the master file.
files.texi(,1244) @xref{Comparing Files}, for more information about @kbd{M-x diff}.
files.texi(,1245) 
files.texi(,1246) @node VC Status, Renaming and VC, Old Versions, Version Control
files.texi(,1247) @subsection VC Status Commands
files.texi(,1248) 
files.texi(,1249) @kindex C-x v l
files.texi(,1250) @findex vc-print-log
files.texi(,1251)   To view the detailed version control status and history of a file,
files.texi(,1252) type @kbd{C-x v l} (@code{vc-print-log}).  It displays the history of
files.texi(,1253) changes to the current file, including the text of the log entries.  The
files.texi(,1254) output appears in a separate window.
files.texi(,1255) 
files.texi(,1256) @kindex C-x v d
files.texi(,1257) @findex vc-directory
files.texi(,1258)   When you are working on a large program, it's often useful to find all
files.texi(,1259) the files that are currently locked, or all the files maintained in
files.texi(,1260) version control at all.  You can use @kbd{C-x v d} (@code{vc-directory})
files.texi(,1261) to show all the locked files in or beneath the current directory.  This
files.texi(,1262) includes all files that are locked by any user.  @kbd{C-u C-x v d} lists
files.texi(,1263) all files in or beneath the current directory that are maintained with
files.texi(,1264) version control.
files.texi(,1265) 
files.texi(,1266)   The list of files is displayed as a buffer that uses an augmented
files.texi(,1267) Dired mode.  The names of the users locking various files are shown (in
files.texi(,1268) parentheses) in place of the owner and group.  All the normal Dired
files.texi(,1269) commands work in this buffer.  Most interactive VC commands work also,
files.texi(,1270) and apply to the file name on the current line.
files.texi(,1271) 
files.texi(,1272)   The @kbd{C-x v v} command (@code{vc-next-action}), when used in the
files.texi(,1273) augmented Dired buffer, operates on all the marked files (or the file on
files.texi(,1274) the current line).  If it operates on more than one file, it handles
files.texi(,1275) each file according to its current state; thus, it may check out one
files.texi(,1276) file and check in another (because it is already checked out).  If it
files.texi(,1277) has to check in any files, it reads a single log entry, then uses that
files.texi(,1278) text for all the files being checked in.  This can be convenient for
files.texi(,1279) registering or checking in several files at once, as part of the same
files.texi(,1280) change.
files.texi(,1281) 
files.texi(,1282) @node Renaming and VC, Snapshots, VC Status, Version Control
files.texi(,1283) @subsection Renaming VC Work Files and Master Files
files.texi(,1284) 
files.texi(,1285) @findex vc-rename-file
files.texi(,1286)   When you rename a registered file, you must also rename its master
files.texi(,1287) file correspondingly to get proper results.  Use @code{vc-rename-file}
files.texi(,1288) to rename the source file as you specify, and rename its master file
files.texi(,1289) accordingly.  It also updates any snapshots (@pxref{Snapshots}) that
files.texi(,1290) mention the file, so that they use the new name; despite this, the
files.texi(,1291) snapshot thus modified may not completely work (@pxref{Snapshot
files.texi(,1292) Caveats}).
files.texi(,1293) 
files.texi(,1294)   You cannot use @code{vc-rename-file} on a file that is locked by
files.texi(,1295) someone else.
files.texi(,1296) 
files.texi(,1297) @node Snapshots, Version Headers, Renaming and VC, Version Control
files.texi(,1298) @subsection Snapshots
files.texi(,1299) @cindex snapshots and version control
files.texi(,1300) 
files.texi(,1301)   A @dfn{snapshot} is a named set of file versions (one for each
files.texi(,1302) registered file) that you can treat as a unit.  One important kind of
files.texi(,1303) snapshot is a @dfn{release}, a (theoretically) stable version of the
files.texi(,1304) system that is ready for distribution to users.
files.texi(,1305) 
files.texi(,1306) @menu
files.texi(,1307) * Making Snapshots::		The snapshot facilities.
files.texi(,1308) * Snapshot Caveats::		Things to be careful of when using snapshots.
files.texi(,1309) @end menu
files.texi(,1310) 
files.texi(,1311) @node Making Snapshots, Snapshot Caveats, Snapshots, Snapshots
files.texi(,1312) @subsubsection Making and Using Snapshots
files.texi(,1313) 
files.texi(,1314)   There are two basic commands for snapshots; one makes a
files.texi(,1315) snapshot with a given name, the other retrieves a named snapshot.
files.texi(,1316) 
files.texi(,1317) @table @code
files.texi(,1318) @kindex C-x v s
files.texi(,1319) @findex vc-create-snapshot
files.texi(,1320) @item C-x v s @var{name} @key{RET}
files.texi(,1321) Define the last saved versions of every registered file in or under the
files.texi(,1322) current directory as a snapshot named @var{name}
files.texi(,1323) (@code{vc-create-snapshot}).
files.texi(,1324) 
files.texi(,1325) @kindex C-x v r
files.texi(,1326) @findex vc-retrieve-snapshot
files.texi(,1327) @item C-x v r @var{name} @key{RET}
files.texi(,1328) Check out all registered files at or below the current directory level
files.texi(,1329) using whatever versions correspond to the snapshot @var{name}
files.texi(,1330) (@code{vc-retrieve-snapshot}).
files.texi(,1331) 
files.texi(,1332) This command reports an error if any files are locked at or below the
files.texi(,1333) current directory, without changing anything; this is to avoid
files.texi(,1334) overwriting work in progress.
files.texi(,1335) @end table
files.texi(,1336) 
files.texi(,1337)   A snapshot uses a very small amount of resources---just enough to record
files.texi(,1338) the list of file names and which version belongs to the snapshot.  Thus,
files.texi(,1339) you need not hesitate to create snapshots whenever they are useful.
files.texi(,1340) 
files.texi(,1341)   You can give a snapshot name as an argument to @kbd{C-x v =} or
files.texi(,1342) @kbd{C-x v ~} (@pxref{Old Versions}).  Thus, you can use it to compare a
files.texi(,1343) snapshot against the current files, or two snapshots against each other,
files.texi(,1344) or a snapshot against a named version.
files.texi(,1345) 
files.texi(,1346) @node Snapshot Caveats,  , Making Snapshots, Snapshots
files.texi(,1347) @subsubsection Snapshot Caveats
files.texi(,1348) 
files.texi(,1349) @cindex named configurations (RCS)
files.texi(,1350)   VC's snapshot facilities are modeled on RCS's named-configuration
files.texi(,1351) support.  They use RCS's native facilities for this, so under VC
files.texi(,1352) snapshots made using RCS are visible even when you bypass VC.
files.texi(,1353) 
files.texi(,1354) @c worded verbosely to avoid overfull hbox.
files.texi(,1355)   For SCCS, VC implements snapshots itself.  The files it uses contain
files.texi(,1356) name/file/version-number triples.  These snapshots are visible only
files.texi(,1357) through VC.
files.texi(,1358) 
files.texi(,1359)   A snapshot is a set of checked-in versions.  So make sure that all the
files.texi(,1360) files are checked in and not locked when you make a snapshot.
files.texi(,1361) 
files.texi(,1362)   File renaming and deletion can create some difficulties with snapshots.
files.texi(,1363) This is not a VC-specific problem, but a general design issue in version
files.texi(,1364) control systems that no one has solved very well yet.
files.texi(,1365) 
files.texi(,1366)   If you rename a registered file, you need to rename its master along
files.texi(,1367) with it (the command @code{vc-rename-file} does this automatically).  If
files.texi(,1368) you are using SCCS, you must also update the records of the snapshot, to
files.texi(,1369) mention the file by its new name (@code{vc-rename-file} does this,
files.texi(,1370) too).  An old snapshot that refers to a master file that no longer
files.texi(,1371) exists under the recorded name is invalid; VC can no longer retrieve
files.texi(,1372) it.  It would be beyond the scope of this manual to explain enough about
files.texi(,1373) RCS and SCCS to explain how to update the snapshots by hand.
files.texi(,1374) 
files.texi(,1375)   Using @code{vc-rename-file} makes the snapshot remain valid for
files.texi(,1376) retrieval, but it does not solve all problems.  For example, some of the
files.texi(,1377) files in the program probably refer to others by name.  At the very
files.texi(,1378) least, the makefile probably mentions the file that you renamed.  If you
files.texi(,1379) retrieve an old snapshot, the renamed file is retrieved under its new
files.texi(,1380) name, which is not the name that the makefile expects.  So the program
files.texi(,1381) won't really work as retrieved.
files.texi(,1382) 
files.texi(,1383) @node Version Headers,  , Snapshots, Version Control
files.texi(,1384) @subsection Inserting Version Control Headers
files.texi(,1385) 
files.texi(,1386)    Sometimes it is convenient to put version identification strings
files.texi(,1387) directly into working files.  Certain special strings called
files.texi(,1388) @dfn{version headers} are replaced in each successive version by the
files.texi(,1389) number of that version.
files.texi(,1390) 
files.texi(,1391) @kindex C-x v h
files.texi(,1392) @findex vc-insert-headers
files.texi(,1393)   You can use the @kbd{C-x v h} command (@code{vc-insert-headers}) to
files.texi(,1394) insert a suitable header string.
files.texi(,1395) 
files.texi(,1396) @table @kbd
files.texi(,1397) @item C-x v h
files.texi(,1398) Insert headers in a file for use with your version-control system.
files.texi(,1399) @end table
files.texi(,1400) 
files.texi(,1401) @vindex vc-header-alist
files.texi(,1402)   The default header string is @samp{\$Id\$} for RCS and @samp{\%W\%}
files.texi(,1403) for SCCS. (The actual strings inserted do not have the backslashes
files.texi(,1404) in them.  They were placed in the Info source file so that the
files.texi(,1405) strings don't get interpreted as version-control headers when the
files.texi(,1406) Info source files are maintained under version control.) You can
files.texi(,1407) specify other headers to insert by setting the variable
files.texi(,1408) @code{vc-header-alist}.  Its value is a list of elements of the form
files.texi(,1409) @code{(@var{program} . @var{string})} where @var{program} is @code{RCS}
files.texi(,1410) or @code{SCCS} and @var{string} is the string to use.
files.texi(,1411) 
files.texi(,1412)   Instead of a single string, you can specify a list of strings; then
files.texi(,1413) each string in the list is inserted as a separate header on a line of
files.texi(,1414) its own.
files.texi(,1415) 
files.texi(,1416)   It is often necessary to use ``superfluous'' backslashes when writing
files.texi(,1417) the strings that you put in this variable.  This is to prevent the
files.texi(,1418) string in the constant from being interpreted as a header itself if the
files.texi(,1419) Emacs Lisp file containing it is maintained with version control.
files.texi(,1420) 
files.texi(,1421) @vindex vc-comment-alist
files.texi(,1422)   Each header is inserted surrounded by tabs, inside comment delimiters,
files.texi(,1423) on a new line at the start of the buffer.  Normally the ordinary comment
files.texi(,1424) start and comment end strings of the current mode are used, but for
files.texi(,1425) certain modes, there are special comment delimiters for this purpose;
files.texi(,1426) the variable @code{vc-comment-alist} specifies them.  Each element of
files.texi(,1427) this list has the form @code{(@var{mode} @var{starter} @var{ender})}.
files.texi(,1428) 
files.texi(,1429) @vindex vc-static-header-alist
files.texi(,1430)   The variable @code{vc-static-header-alist} specifies further strings
files.texi(,1431) to add based on the name of the buffer.  Its value should be a list of
files.texi(,1432) elements of the form @code{(@var{regexp} . @var{format})}.  Whenever
files.texi(,1433) @var{regexp} matches the buffer name, @var{format} is inserted as part
files.texi(,1434) of the header.  A header line is inserted for each element that matches
files.texi(,1435) the buffer name, and for each string specified by
files.texi(,1436) @code{vc-header-alist}.  The header line is made by processing the
files.texi(,1437) string from @code{vc-header-alist} with the format taken from the
files.texi(,1438) element.  The default value for @code{vc-static-header-alist} is:
files.texi(,1439) 
files.texi(,1440) @example
files.texi(,1441) @group
files.texi(,1442) (("\\.c$" .
files.texi(,1443)   "\n#ifndef lint\nstatic char vcid[] = \"\%s\";\n\
files.texi(,1444) #endif /* lint */\n"))
files.texi(,1445) @end group
files.texi(,1446) @end example
files.texi(,1447) 
files.texi(,1448) @noindent
files.texi(,1449) which specifies insertion of a string of this form:
files.texi(,1450) 
files.texi(,1451) @example
files.texi(,1452) @group
files.texi(,1453) 
files.texi(,1454) #ifndef lint
files.texi(,1455) static char vcid[] = "@var{string}";
files.texi(,1456) #endif /* lint */
files.texi(,1457) @end group
files.texi(,1458) @end example
files.texi(,1459) 
files.texi(,1460) @node ListDir, Comparing Files, Version Control, Files
files.texi(,1461) @section Listing a File Directory
files.texi(,1462) 
files.texi(,1463) @cindex file directory
files.texi(,1464) @cindex directory listing
files.texi(,1465)   Files are organized by Unix into @dfn{directories}.  A @dfn{directory
files.texi(,1466) listing} is a list of all the files in a directory.  Emacs provides
files.texi(,1467) directory listings in brief format (file names only) and verbose format
files.texi(,1468) (sizes, dates, and authors included).
files.texi(,1469) 
files.texi(,1470) @table @kbd
files.texi(,1471) @item C-x C-d @var{dir-or-pattern}
files.texi(,1472) Print a brief directory listing (@code{list-directory}).
files.texi(,1473) @item C-u C-x C-d @var{dir-or-pattern}
files.texi(,1474) Print a verbose directory listing.
files.texi(,1475) @end table
files.texi(,1476) 
files.texi(,1477) @findex list-directory
files.texi(,1478) @kindex C-x C-d
files.texi(,1479)   To print a directory listing, use @kbd{C-x C-d}
files.texi(,1480) (@code{list-directory}).  This command prompts in the minibuffer for a
files.texi(,1481) file name which is either a  directory to be listed or pattern
files.texi(,1482) containing wildcards for the files to be listed.  For example,
files.texi(,1483) 
files.texi(,1484) @example
files.texi(,1485) C-x C-d /u2/emacs/etc @key{RET}
files.texi(,1486) @end example
files.texi(,1487) 
files.texi(,1488) @noindent
files.texi(,1489) lists all the files in directory @file{/u2/emacs/etc}.  An example of
files.texi(,1490) specifying a file name pattern is:
files.texi(,1491) 
files.texi(,1492) @example
files.texi(,1493) C-x C-d /u2/emacs/src/*.c @key{RET}
files.texi(,1494) @end example
files.texi(,1495) 
files.texi(,1496)   Normally, @kbd{C-x C-d} prints a brief directory listing containing just
files.texi(,1497) file names.  A numeric argument (regardless of value) tells it to print a
files.texi(,1498) verbose listing (like @code{ls -l}).
files.texi(,1499) 
files.texi(,1500) @vindex list-directory-brief-switches
files.texi(,1501) @vindex list-directory-verbose-switches
files.texi(,1502)   Emacs obtains the text of a directory listing by running @code{ls} in
files.texi(,1503) an inferior process.  Two Emacs variables control the switches passed to
files.texi(,1504) @code{ls}: @code{list-directory-brief-switches} is a string giving the
files.texi(,1505) switches to use in brief listings (@code{"-CF"} by default).
files.texi(,1506) @code{list-directory-verbose-switches} is a string giving the switches
files.texi(,1507) to use in a verbose listing (@code{"-l"} by default).
files.texi(,1508) 
files.texi(,1509) The variable @code{directory-abbrev-alist} is an alist of abbreviations
files.texi(,1510) for file directories.  The list consists of elements of the form
files.texi(,1511) @code{(FROM .  TO)}, each meaning to replace @code{FROM} with @code{TO}
files.texi(,1512) when it appears in a directory name.  This replacement is done when
files.texi(,1513) setting up the default directory of a newly visited file.  Every @code{FROM}
files.texi(,1514) string should start with `@samp{^}'.
files.texi(,1515) 
files.texi(,1516) Use this feature when you have directories which you normally refer to
files.texi(,1517) via absolute symbolic links.  Make @code{TO} the name of the link, and
files.texi(,1518) @code{FROM} the name it is linked to.
files.texi(,1519) 
files.texi(,1520) @node Comparing Files, Dired, ListDir, Files
files.texi(,1521) @section Comparing Files
files.texi(,1522) @cindex comparing files
files.texi(,1523) 
files.texi(,1524) @findex diff
files.texi(,1525) @vindex diff-switches
files.texi(,1526)   The command @kbd{M-x diff} compares two files, displaying the
files.texi(,1527) differences in an Emacs buffer named @samp{*Diff*}.  It works by running
files.texi(,1528) the @code{diff} program, using options taken from the variable
files.texi(,1529) @code{diff-switches}, whose value should be a string.
files.texi(,1530) 
files.texi(,1531)   The buffer @samp{*Diff*} has Compilation mode as its major mode, so
files.texi(,1532) you can use @kbd{C-x `} to visit successive changed locations in the two
files.texi(,1533) source files.  You can also move to a particular hunk of changes and
files.texi(,1534) type @kbd{C-c C-c} to find the corresponding source location.  You can
files.texi(,1535) also use the other special commands of Compilation mode: @key{SPC} and
files.texi(,1536) @key{DEL} for scrolling, and @kbd{M-p} and @kbd{M-n} for cursor motion.
files.texi(,1537) @xref{Compilation}.
files.texi(,1538) 
files.texi(,1539) @findex diff-backup
files.texi(,1540)   The command @kbd{M-x diff-backup} compares a specified file with its most
files.texi(,1541) recent backup.  If you specify the name of a backup file,
files.texi(,1542) @code{diff-backup} compares it with the source file that it is a backup
files.texi(,1543) of.
files.texi(,1544) 
files.texi(,1545) @findex compare-windows
files.texi(,1546) @cindex comparing files
files.texi(,1547)   The command @kbd{M-x compare-windows} compares the text in the current
files.texi(,1548) window with that in the next window.  Comparison starts at point in each
files.texi(,1549) window.  Point moves forward in each window, a character at a time in each
files.texi(,1550) window, until the next characters in the two windows are different.  Then
files.texi(,1551) the command is finished.  For more information about windows in Emacs,
files.texi(,1552) @ref{Windows}.
files.texi(,1553) 
files.texi(,1554) @vindex compare-ignore-case
files.texi(,1555)   With a numeric argument, @code{compare-windows} ignores changes in
files.texi(,1556) whitespace.  If the variable @code{compare-ignore-case} is
files.texi(,1557) non-@code{nil}, it ignores differences in case as well.
files.texi(,1558) 
files.texi(,1559) @node Dired, Misc File Ops, Comparing Files, Files
files.texi(,1560) @section Dired, the Directory Editor
files.texi(,1561) @cindex Dired
files.texi(,1562) @cindex deletion (of files)
files.texi(,1563) 
files.texi(,1564)   Dired makes it easy to delete or visit many of the files in a single
files.texi(,1565) directory at once.  It creates an Emacs buffer containing a listing of the
files.texi(,1566) directory.  You can use the normal Emacs commands to move around in this
files.texi(,1567) buffer and special Dired commands to operate on the files.
files.texi(,1568) 
files.texi(,1569) @menu
files.texi(,1570) * Enter: Dired Enter.         How to invoke Dired.
files.texi(,1571) * Edit: Dired Edit.           Editing the Dired buffer.
files.texi(,1572) * Deletion: Dired Deletion.   Deleting files with Dired.
files.texi(,1573) * Immed: Dired Immed.         Other file operations through Dired.
files.texi(,1574) @end menu
files.texi(,1575) 
files.texi(,1576) @node Dired Enter, Dired Edit, Dired, Dired
files.texi(,1577) @subsection Entering Dired
files.texi(,1578) 
files.texi(,1579) @findex dired
files.texi(,1580) @kindex C-x d
files.texi(,1581) @vindex dired-listing-switches
files.texi(,1582)   To invoke dired, type @kbd{C-x d} or @kbd{M-x dired}.  The command reads a
files.texi(,1583) directory name or wildcard file name pattern as a minibuffer argument just
files.texi(,1584) like the @code{list-directory} command, @kbd{C-x C-d}.  Where @code{dired}
files.texi(,1585) differs from @code{list-directory} is in naming the buffer after the
files.texi(,1586) directory name or the wildcard pattern used for the listing, and putting
files.texi(,1587) the buffer into Dired mode so that the special commands of Dired are
files.texi(,1588) available in it.  The variable @code{dired-listing-switches} is a string
files.texi(,1589) used as an argument to @code{ls} in making the directory; this string
files.texi(,1590) @i{must} contain @samp{-l}.
files.texi(,1591) 
files.texi(,1592) @findex dired-other-window
files.texi(,1593) @kindex C-x 4 d
files.texi(,1594)   To display the Dired buffer in another window rather than in the selected
files.texi(,1595) window, use @kbd{C-x 4 d} (@code{dired-other-window)} instead of @kbd{C-x d}.
files.texi(,1596) 
files.texi(,1597) @node Dired Edit, Dired Deletion, Dired Enter, Dired
files.texi(,1598) @subsection Editing in Dired
files.texi(,1599) 
files.texi(,1600)   Once the Dired buffer exists, you can switch freely between it and other
files.texi(,1601) Emacs buffers.  Whenever the Dired buffer is selected, certain special
files.texi(,1602) commands are provided that operate on files that are listed.  The Dired
files.texi(,1603) buffer is ``read-only'', and inserting text in it is not useful, so
files.texi(,1604) ordinary printing characters such as @kbd{d} and @kbd{x} are used for Dired
files.texi(,1605) commands.  Most Dired commands operate on the file described by the line
files.texi(,1606) that point is on.  Some commands perform operations immediately; others
files.texi(,1607) ``flag'' a file to be operated on later.
files.texi(,1608) 
files.texi(,1609)   Most Dired commands that operate on the current line's file also treat a
files.texi(,1610) numeric argument as a repeat count, meaning to act on the files of the
files.texi(,1611) next few lines.  A negative argument means to operate on the files of the
files.texi(,1612) preceding lines, and leave point on the first of those lines.
files.texi(,1613) 
files.texi(,1614)   All the usual Emacs cursor motion commands are available in Dired
files.texi(,1615) buffers.  Some special purpose commands are also provided.  The keys
files.texi(,1616) @kbd{C-n} and @kbd{C-p} are redefined so that they try to position
files.texi(,1617) the cursor at the beginning of the filename on the line, rather than
files.texi(,1618) at the beginning of the line.
files.texi(,1619) 
files.texi(,1620)   For extra convenience, @key{SPC} and @kbd{n} in Dired are equivalent to
files.texi(,1621) @kbd{C-n}.  @kbd{p} is equivalent to @kbd{C-p}.  Moving by lines is done so
files.texi(,1622) often in Dired that it deserves to be easy to type.  @key{DEL} (move up and
files.texi(,1623) unflag) is often useful simply for moving up.@refill
files.texi(,1624) 
files.texi(,1625)   The @kbd{g} command in Dired runs @code{revert-buffer} to reinitialize
files.texi(,1626) the buffer from the actual disk directory and show any changes made in the
files.texi(,1627) directory by programs other than Dired.  All deletion flags in the Dired
files.texi(,1628) buffer are lost when this is done.
files.texi(,1629) 
files.texi(,1630) @node Dired Deletion, Dired Immed, Dired Edit, Dired
files.texi(,1631) @subsection Deleting Files With Dired
files.texi(,1632) 
files.texi(,1633)   The primary use of Dired is to flag files for deletion and then delete
files.texi(,1634) them.
files.texi(,1635) 
files.texi(,1636) @table @kbd
files.texi(,1637) @item d
files.texi(,1638) Flag this file for deletion.
files.texi(,1639) @item u
files.texi(,1640) Remove deletion-flag on this line.
files.texi(,1641) @item @key{DEL}
files.texi(,1642) Remove deletion-flag on previous line, moving point to that line.
files.texi(,1643) @item x
files.texi(,1644) Delete the files that are flagged for deletion.
files.texi(,1645) @item #
files.texi(,1646) Flag all auto-save files (files whose names start and end with @samp{#})
files.texi(,1647) for deletion (@pxref{Auto Save}).
files.texi(,1648) @item ~
files.texi(,1649) Flag all backup files (files whose names end with @samp{~}) for deletion
files.texi(,1650) (@pxref{Backup}).
files.texi(,1651) @item .@: @r{(Period)}
files.texi(,1652) Flag excess numeric backup files for deletion.  The oldest and newest
files.texi(,1653) few backup files of any one file are exempt; the middle ones are flagged.
files.texi(,1654) @end table
files.texi(,1655) 
files.texi(,1656)   You can flag a file for deletion by moving to the line describing the
files.texi(,1657) file and typing @kbd{d} or @kbd{C-d}.  The deletion flag is visible as a
files.texi(,1658) @samp{D} at the beginning of the line.  Point is moved to the beginning of
files.texi(,1659) the next line, so that repeated @kbd{d} commands flag successive files.
files.texi(,1660) 
files.texi(,1661)   The files are flagged for deletion rather than deleted immediately to
files.texi(,1662) avoid the danger of deleting a file accidentally.  Until you direct Dired
files.texi(,1663) to delete the flagged files, you can remove deletion flags using the
files.texi(,1664) commands @kbd{u} and @key{DEL}.  @kbd{u} works just like @kbd{d}, but
files.texi(,1665) removes flags rather than making flags.  @key{DEL} moves upward, removing
files.texi(,1666) flags; it is like @kbd{u} with numeric argument automatically negated.
files.texi(,1667) 
files.texi(,1668)   To delete the flagged files, type @kbd{x}.  This command first displays a
files.texi(,1669) list of all the file names flagged for deletion, and requests confirmation
files.texi(,1670) with @kbd{yes}.  Once you confirm, all the flagged files are deleted, and their
files.texi(,1671) lines are deleted from the text of the Dired buffer.  The shortened Dired
files.texi(,1672) buffer remains selected.  If you answer @kbd{no} or quit with @kbd{C-g}, you
files.texi(,1673) return immediately to Dired, with the deletion flags still present and no
files.texi(,1674) files actually deleted.
files.texi(,1675) 
files.texi(,1676)   The @kbd{#}, @kbd{~}, and @kbd{.} commands flag many files for
files.texi(,1677) deletion, based on their names.  These commands are useful precisely
files.texi(,1678) because they do not actually delete any files; you can remove the
files.texi(,1679) deletion flags from any flagged files that you really wish to keep.@refill
files.texi(,1680) 
files.texi(,1681)   @kbd{#} flags for deletion all files that appear to have been made by
files.texi(,1682) auto-saving (that is, files whose names begin and end with @samp{#}).
files.texi(,1683) @kbd{~} flags for deletion all files that appear to have been made as
files.texi(,1684) backups for files that were edited (that is, files whose names end with
files.texi(,1685) @samp{~}).
files.texi(,1686) 
files.texi(,1687) @vindex dired-kept-versions
files.texi(,1688)   @kbd{.} (Period) flags just some of the backup files for deletion: only
files.texi(,1689) numeric backups that are not among the oldest few nor the newest few
files.texi(,1690) backups of any one file.  Normally @code{dired-kept-versions} (not
files.texi(,1691) @code{kept-new-versions}; that applies only when saving) specifies the
files.texi(,1692) number of newest versions of each file to keep, and
files.texi(,1693) @code{kept-old-versions} specifies the number of oldest versions to keep.
files.texi(,1694) Period with a positive numeric argument, as in @kbd{C-u 3 .}, specifies the
files.texi(,1695) number of newest versions to keep, overriding @code{dired-kept-versions}.
files.texi(,1696) A negative numeric argument overrides @code{kept-old-versions}, using minus
files.texi(,1697) the value of the argument to specify the number of oldest versions of each
files.texi(,1698) file to keep.@refill
files.texi(,1699) 
files.texi(,1700) @node Dired Immed,  , Dired Deletion, Dired
files.texi(,1701) @subsection Immediate File Operations in Dired
files.texi(,1702) 
files.texi(,1703)   Some file operations in Dired take place immediately when they are
files.texi(,1704) requested.
files.texi(,1705) 
files.texi(,1706) @table @kbd
files.texi(,1707) @item C
files.texi(,1708) Copies the file described on the current line.  You must supply a file name
files.texi(,1709) to copy to, using the minibuffer.
files.texi(,1710) @item f
files.texi(,1711) Visits the file described on the current line.  It is just like typing
files.texi(,1712) @kbd{C-x C-f} and supplying that file name.  If the file on this line is a
files.texi(,1713) subdirectory, @kbd{f} actually causes Dired to be invoked on that
files.texi(,1714) subdirectory.  @xref{Visiting}.
files.texi(,1715) @item o
files.texi(,1716) Like @kbd{f}, but uses another window to display the file's buffer.  The
files.texi(,1717) Dired buffer remains visible in the first window.  This is like using
files.texi(,1718) @kbd{C-x 4 C-f} to visit the file.  @xref{Windows}.
files.texi(,1719) @item R
files.texi(,1720) Renames the file described on the current line.  You must supply a file
files.texi(,1721) name to rename to, using the minibuffer.
files.texi(,1722) @item v
files.texi(,1723) Views the file described on this line using @kbd{M-x view-file}.  Viewing a
files.texi(,1724) file is like visiting it, but is slanted toward moving around in the file
files.texi(,1725) conveniently and does not allow changing the file.  @xref{Misc File
files.texi(,1726) Ops,View File}.  Viewing a file that is a directory runs Dired on that
files.texi(,1727) directory.@refill
files.texi(,1728) @end table
files.texi(,1729) 
files.texi(,1730) @node Misc File Ops,  , Dired, Files
files.texi(,1731) @section Miscellaneous File Operations
files.texi(,1732) 
files.texi(,1733)   Emacs has commands for performing many other operations on files.
files.texi(,1734) All operate on one file; they do not accept wildcard file names.
files.texi(,1735) 
files.texi(,1736) @findex add-name-to-file
files.texi(,1737)   You can use the command @kbd{M-x add-name-to-file} to add a name to an
files.texi(,1738) existing file without removing the old name.  The new name must belong
files.texi(,1739) on the file system that the file is on.
files.texi(,1740) 
files.texi(,1741) @findex append-to-file
files.texi(,1742)   @kbd{M-x append-to-file} adds the text of the region to the end of the
files.texi(,1743) specified file.
files.texi(,1744) 
files.texi(,1745) @findex copy-file
files.texi(,1746) @cindex copying files
files.texi(,1747)   @kbd{M-x copy-file} reads the file @var{old} and writes a new file
files.texi(,1748) named @var{new} with the same contents.  Confirmation is required if a
files.texi(,1749) file named @var{new} already exists, because copying overwrites the old
files.texi(,1750) contents of the file @var{new}.
files.texi(,1751) 
files.texi(,1752) @findex delete-file
files.texi(,1753) @cindex deletion (of files)
files.texi(,1754)   @kbd{M-x delete-file} deletes a specified file, like the @code{rm}
files.texi(,1755) command in the shell.  If you are deleting many files in one directory, it
files.texi(,1756) may be more convenient to use Dired (@pxref{Dired}).
files.texi(,1757) 
files.texi(,1758) @findex insert-file
files.texi(,1759)   @kbd{M-x insert-file} inserts a copy of the contents of a specified
files.texi(,1760) file into the current buffer at point, leaving point unchanged before the
files.texi(,1761) contents and the mark after them.  @xref{Mark}.
files.texi(,1762) 
files.texi(,1763) @findex make-symbolic-link
files.texi(,1764)   @kbd{M-x make-symbolic-link} reads two file names @var{old} and
files.texi(,1765) @var{linkname}, and then creates a symbolic link named @var{linkname}
files.texi(,1766) and pointing at @var{old}.  Future attempts to open file
files.texi(,1767) @var{linkname} will then refer to the file named @var{old} at the time
files.texi(,1768) the opening is done, or will result in an error if the name @var{old} is
files.texi(,1769) not in use at that time.  Confirmation is required if you create the
files.texi(,1770) link while @var{linkname} is in use.  Note that not all systems support
files.texi(,1771) symbolic links.
files.texi(,1772) 
files.texi(,1773) @findex rename-file
files.texi(,1774)   @kbd{M-x rename-file} reads two file names @var{old} and @var{new} using
files.texi(,1775) the minibuffer, then renames file @var{old} as @var{new}.  If a file named
files.texi(,1776) @var{new} already exists, you must confirm with @kbd{yes} or renaming is not
files.texi(,1777) done; this is because renaming causes the previous meaning of the 
files.texi(,1778) name @var{new} to be lost.  If @var{old} and @var{new} are on different 
files.texi(,1779) file systems, the file @var{old} is copied and deleted.
files.texi(,1780) 
files.texi(,1781) @findex view-file
files.texi(,1782) @cindex viewing
files.texi(,1783)   @kbd{M-x view-file} allows you to scan or read a file by sequential
files.texi(,1784) screenfuls.  It reads a file name argument using the minibuffer.  After
files.texi(,1785) reading the file into an Emacs buffer, @code{view-file} reads and displays
files.texi(,1786) one windowful.  You can then type @key{SPC} to scroll forward one window,
files.texi(,1787) or @key{DEL} to scroll backward.  Various other commands are provided for
files.texi(,1788) moving around in the file, but none for changing it; type @kbd{C-h} while
files.texi(,1789) viewing a file for a list of them.  Most commands are the default Emacs
files.texi(,1790) cursor motion commands.  To exit from viewing, type @kbd{C-c}.
buffers.texi(,1) 
buffers.texi(,2) @node Buffers, Windows, Files, Top
buffers.texi(,3) @chapter Using Multiple Buffers
buffers.texi(,4) 
buffers.texi(,5) @cindex buffers
buffers.texi(,6)   Text you are editing in Emacs resides in an object called a
buffers.texi(,7) @dfn{buffer}.  Each time you visit a file, Emacs creates a buffer to
buffers.texi(,8) hold the file's text.  Each time you invoke Dired, Emacs creates a buffer
buffers.texi(,9) to hold the directory listing.  If you send a message with @kbd{C-x m},
buffers.texi(,10) a buffer named @samp{*mail*} is used to hold the text of the message.
buffers.texi(,11) When you ask for a command's documentation, it appears in a buffer
buffers.texi(,12) called @samp{*Help*}.
buffers.texi(,13) 
buffers.texi(,14) @cindex selected buffer
buffers.texi(,15) @cindex current buffer
buffers.texi(,16)   At any time, one and only one buffer is @dfn{selected}.  It is also
buffers.texi(,17) called the @dfn{current buffer}.  Saying a command operates on ``the
buffers.texi(,18) buffer'' really means that the command operates on the selected
buffers.texi(,19) buffer, as most commands do.
buffers.texi(,20) 
buffers.texi(,21)   When Emacs creates multiple windows, each window has a chosen buffer which
buffers.texi(,22) is displayed there, but at any time only one of the windows is selected and
buffers.texi(,23) its chosen buffer is the selected buffer.  Each window's mode line displays
buffers.texi(,24) the name of the buffer the window is displaying (@pxref{Windows}).
buffers.texi(,25) 
buffers.texi(,26)   Each buffer has a name which can be of any length but is
buffers.texi(,27) case-sensitive.  You can select a buffer using its name.  Most
buffers.texi(,28) buffers are created when you visit files; their names are derived from
buffers.texi(,29) the files' names.  You can also create an empty buffer with any name you
buffers.texi(,30) want.  A newly started Emacs has a buffer named @samp{*scratch*} which
buffers.texi(,31) you can use for evaluating Lisp expressions in Emacs.
buffers.texi(,32) 
buffers.texi(,33)   Each buffer records what file it is visiting, whether it is
buffers.texi(,34) modified, and what major mode and minor modes are in effect in it
buffers.texi(,35) (@pxref{Major Modes}).  Any Emacs variable can be made @dfn{local to} a
buffers.texi(,36) particular buffer, meaning its value in that buffer can be different from
buffers.texi(,37) the value in other buffers.  @xref{Locals}.
buffers.texi(,38) 
buffers.texi(,39) @menu
buffers.texi(,40) * Select Buffer::   Creating a new buffer or reselecting an old one.
buffers.texi(,41) * List Buffers::    Getting a list of buffers that exist.
buffers.texi(,42) * Misc Buffer::     Renaming; changing read-onliness; copying text.
buffers.texi(,43) * Kill Buffer::     Killing buffers you no longer need.
buffers.texi(,44) * Several Buffers:: How to go through the list of all buffers
buffers.texi(,45)                      and operate variously on several of them.
buffers.texi(,46) @end menu
buffers.texi(,47) 
buffers.texi(,48) @node Select Buffer, List Buffers, Buffers, Buffers
buffers.texi(,49) @section Creating and Selecting Buffers
buffers.texi(,50) @cindex changing buffers
buffers.texi(,51) @cindex switching buffers
buffers.texi(,52) 
buffers.texi(,53) @table @kbd
buffers.texi(,54) @item C-x b @var{buffer} @key{RET}
buffers.texi(,55) Select or create a buffer named @var{buffer} (@code{switch-to-buffer}).
buffers.texi(,56) @item C-x 4 b @var{buffer} @key{RET}
buffers.texi(,57) Similar, but select a buffer named @var{buffer} in another window
buffers.texi(,58) (@code{switch-to-buffer-other-window}).
buffers.texi(,59) @item M-x switch-to-other-buffer @var{n}
buffers.texi(,60) Switch to the previous buffer.
buffers.texi(,61) @end table
buffers.texi(,62) 
buffers.texi(,63) @kindex C-x 4 b
buffers.texi(,64) @kindex C-x 5 b
buffers.texi(,65) @findex switch-to-buffer-other-window
buffers.texi(,66) @kindex C-x b
buffers.texi(,67) @findex switch-to-buffer
buffers.texi(,68) @findex switch-to-buffer-other-frame
buffers.texi(,69)   To select a buffer named @var{bufname}, type @kbd{C-x b @var{bufname}
buffers.texi(,70) @key{RET}}.  This is the command @code{switch-to-buffer} with argument
buffers.texi(,71) @var{bufname}.  You can use completion on an abbreviation for the buffer
buffers.texi(,72) name you want (@pxref{Completion}).  An empty argument to @kbd{C-x b}
buffers.texi(,73) specifies the most recently selected buffer that is not displayed in any
buffers.texi(,74) window.@refill
buffers.texi(,75) 
buffers.texi(,76)   Most buffers are created when you visit files, or use Emacs commands
buffers.texi(,77) that display text.  You can also create a buffer explicitly by typing
buffers.texi(,78) @kbd{C-x b @var{bufname} @key{RET}}, which creates a new, empty buffer
buffers.texi(,79) that is not visiting any file, and selects it for editing.  The new
buffers.texi(,80) buffer's major mode is determined by the value of
buffers.texi(,81) @code{default-major-mode} (@pxref{Major Modes}).  Buffers not visiting
buffers.texi(,82) files are usually used for making notes to yourself.  If you try to save
buffers.texi(,83) one, you are asked for the file name to use.
buffers.texi(,84) 
buffers.texi(,85)  The function @code{switch-to-buffer-other-frame} is similar to
buffers.texi(,86) @code{switch-to-buffer} except that it creates a new frame in which to
buffers.texi(,87) display the selected buffer.
buffers.texi(,88) 
buffers.texi(,89) @findex switch-to-other-buffer
buffers.texi(,90) Use @kbd{M-x switch-to-other-buffer} to visit the previous buffer. If
buffers.texi(,91) you supply a positive integer @var{n}, the @var{n}th most recent buffer
buffers.texi(,92) is displayed. If you supply an argument of 0, the current buffer is
buffers.texi(,93) moved to the bottom of the buffer stack.
buffers.texi(,94) 
buffers.texi(,95)   Note that you can also use @kbd{C-x C-f} and any other command for
buffers.texi(,96) visiting a file to switch buffers.  @xref{Visiting}.
buffers.texi(,97) 
buffers.texi(,98) @node List Buffers, Misc Buffer, Select Buffer, Buffers
buffers.texi(,99) @section Listing Existing Buffers
buffers.texi(,100) 
buffers.texi(,101) @table @kbd
buffers.texi(,102) @item C-x C-b
buffers.texi(,103) List the existing buffers (@code{list-buffers}).
buffers.texi(,104) @end table
buffers.texi(,105) 
buffers.texi(,106) @kindex C-x C-b
buffers.texi(,107) @findex list-buffers
buffers.texi(,108)   To print a list of all existing buffers, type @kbd{C-x C-b}.  Each
buffers.texi(,109) line in the list shows one buffer's name, major mode, and visited file.
buffers.texi(,110) A @samp{*} at the beginning of a line indicates the buffer has been
buffers.texi(,111) ``modified''.  If several buffers are modified, it may be time to save
buffers.texi(,112) some with @kbd{C-x s} (@pxref{Saving}).  A @samp{%} indicates a read-only
buffers.texi(,113) buffer.  A @samp{.} marks the selected buffer.  Here is an example of a
buffers.texi(,114) buffer list:@refill
buffers.texi(,115) 
buffers.texi(,116) @smallexample
buffers.texi(,117)  MR Buffer         Size  Mode           File
buffers.texi(,118)  -- ------         ----  ----           ----
buffers.texi(,119) .*  emacs.tex      383402 Texinfo       /u2/emacs/man/emacs.tex
buffers.texi(,120)     *Help*         1287  Fundamental    
buffers.texi(,121)     files.el       23076 Emacs-Lisp     /u2/emacs/lisp/files.el
buffers.texi(,122)   % RMAIL          64042 RMAIL          /u/rms/RMAIL
buffers.texi(,123)  *% man            747   Dired          /u2/emacs/man/
buffers.texi(,124)     net.emacs      343885 Fundamental   /u/rms/net.emacs
buffers.texi(,125)     fileio.c       27691 C              /u2/emacs/src/fileio.c
buffers.texi(,126)     NEWS           67340 Text           /u2/emacs/etc/NEWS
buffers.texi(,127)     *scratch*      0     Lisp Interaction
buffers.texi(,128) @end smallexample
buffers.texi(,129) 
buffers.texi(,130) @noindent
buffers.texi(,131) Note that the buffer @samp{*Help*} was made by a help request; it is not
buffers.texi(,132) visiting any file.  The buffer @code{man} was made by Dired on the
buffers.texi(,133) directory @file{/u2/emacs/man/}.
buffers.texi(,134) 
buffers.texi(,135) As you move the mouse over the @samp{*Buffer List*} buffer, the lines
buffers.texi(,136) are highlighted.  This visual cue indicates that clicking the right
buffers.texi(,137) mouse button (@code{button3}) will pop up a menu of commands on the
buffers.texi(,138) buffer represented by this line.  This menu duplicates most of those
buffers.texi(,139) commands which are bound to keys in the @samp{*Buffer List*} buffer.
buffers.texi(,140) 
buffers.texi(,141) @node Misc Buffer, Kill Buffer, List Buffers, Buffers
buffers.texi(,142) @section Miscellaneous Buffer Operations
buffers.texi(,143) 
buffers.texi(,144) @table @kbd
buffers.texi(,145) @item C-x C-q
buffers.texi(,146) Toggle read-only status of buffer (@code{toggle-read-only}).
buffers.texi(,147) @item M-x rename-buffer
buffers.texi(,148) Change the name of the current buffer.
buffers.texi(,149) @item M-x view-buffer
buffers.texi(,150) Scroll through a buffer.
buffers.texi(,151) @end table
buffers.texi(,152) 
buffers.texi(,153) @cindex read-only buffer
buffers.texi(,154) @kindex C-x C-q
buffers.texi(,155) @findex toggle-read-only
buffers.texi(,156) @vindex buffer-read-only
buffers.texi(,157)   A buffer can be @dfn{read-only}, which means that commands to change
buffers.texi(,158) its text are not allowed.  Normally, read-only buffers are created by
buffers.texi(,159) subsystems such as Dired and Rmail that have special commands to operate
buffers.texi(,160) on the text.  Emacs also creates a read-only buffer if you
buffers.texi(,161) visit a file that is protected.  To make changes in a read-only buffer,
buffers.texi(,162) use the command @kbd{C-x C-q} (@code{toggle-read-only}).  It makes a
buffers.texi(,163) read-only buffer writable, and makes a writable buffer read-only.  This
buffers.texi(,164) works by setting the variable @code{buffer-read-only}, which has a local
buffers.texi(,165) value in each buffer and makes a buffer read-only if its value is
buffers.texi(,166) non-@code{nil}.
buffers.texi(,167) 
buffers.texi(,168) @findex rename-buffer
buffers.texi(,169)   @kbd{M-x rename-buffer} changes the name of the current buffer,
buffers.texi(,170) prompting for the new name in the minibuffer.  There is no default.  If you
buffers.texi(,171) specify a name that is used by a different buffer, an error is signalled and
buffers.texi(,172) renaming is not done.
buffers.texi(,173) 
buffers.texi(,174) @findex view-buffer
buffers.texi(,175)   @kbd{M-x view-buffer} is similar to @kbd{M-x view-file} (@pxref{Misc
buffers.texi(,176) File Ops}), but it examines an already existing Emacs buffer.  View mode
buffers.texi(,177) provides convenient commands for scrolling through the buffer but not
buffers.texi(,178) for changing it.  When you exit View mode, the resulting value of point
buffers.texi(,179) remains in effect.
buffers.texi(,180) 
buffers.texi(,181) To copy text from one buffer to another, use the commands @kbd{M-x
buffers.texi(,182) append-to-buffer} and @kbd{M-x insert-buffer}.  @xref{Accumulating
buffers.texi(,183) Text}.@refill
buffers.texi(,184) 
buffers.texi(,185) @node Kill Buffer, Several Buffers, Misc Buffer, Buffers
buffers.texi(,186) @section Killing Buffers
buffers.texi(,187) 
buffers.texi(,188)   After using Emacs for a while, you may accumulate a large number of
buffers.texi(,189) buffers and may want to eliminate the ones you no
buffers.texi(,190) longer need.  There are several commands for doing this.
buffers.texi(,191) 
buffers.texi(,192) @c WideCommands
buffers.texi(,193) @table @kbd
buffers.texi(,194) @item C-x k
buffers.texi(,195) Kill a buffer, specified by name (@code{kill-buffer}).
buffers.texi(,196) @item M-x kill-some-buffers
buffers.texi(,197) Offer to kill each buffer, one by one.
buffers.texi(,198) @end table
buffers.texi(,199) 
buffers.texi(,200) @findex kill-buffer
buffers.texi(,201) @findex kill-some-buffers
buffers.texi(,202) @kindex C-x k
buffers.texi(,203)  
buffers.texi(,204)   @kbd{C-x k} (@code{kill-buffer}) kills one buffer, whose name you
buffers.texi(,205) specify in the minibuffer.  If you type just @key{RET} in the
buffers.texi(,206) minibuffer, the default, killing the current buffer, is used.  If the
buffers.texi(,207) current buffer is killed, the buffer that has been selected recently but
buffers.texi(,208) does not appear in any window now is selected.  If the buffer being
buffers.texi(,209) killed contains unsaved changes, you are asked to confirm with @kbd{yes}
buffers.texi(,210) before the buffer is killed.
buffers.texi(,211) 
buffers.texi(,212)   The command @kbd{M-x kill-some-buffers} asks about each buffer, one by
buffers.texi(,213) one.  An answer of @kbd{y} means to kill the buffer.  Killing the current
buffers.texi(,214) buffer or a buffer containing unsaved changes selects a new buffer or asks
buffers.texi(,215) for confirmation just like @code{kill-buffer}.
buffers.texi(,216) 
buffers.texi(,217) @node Several Buffers,, Kill Buffer, Buffers
buffers.texi(,218) @section Operating on Several Buffers
buffers.texi(,219) @cindex buffer menu
buffers.texi(,220) 
buffers.texi(,221)   The @dfn{buffer-menu} facility is like a ``Dired for buffers''; it allows
buffers.texi(,222) you to request operations on various Emacs buffers by editing a
buffers.texi(,223) buffer containing a list of them.  You can save buffers, kill them
buffers.texi(,224) (here called @dfn{deleting} them, for consistency with Dired), or display
buffers.texi(,225) them.
buffers.texi(,226) 
buffers.texi(,227) @table @kbd
buffers.texi(,228) @item M-x buffer-menu
buffers.texi(,229) Begin editing a buffer listing all Emacs buffers.
buffers.texi(,230) @end table
buffers.texi(,231) 
buffers.texi(,232) @findex buffer-menu
buffers.texi(,233)   The command @code{buffer-menu} writes a list of all Emacs buffers into
buffers.texi(,234) the buffer @samp{*Buffer List*}, and selects that buffer in Buffer Menu
buffers.texi(,235) mode.  The buffer is read-only.  You can only change it using the special
buffers.texi(,236) commands described in this section.  Most of the commands are graphic
buffers.texi(,237) characters.  You can use  Emacs cursor motion commands in the
buffers.texi(,238) @samp{*Buffer List*} buffer.  If the cursor is on a line describing a
buffers.texi(,239) buffer, the following  special commands apply to that buffer:
buffers.texi(,240) 
buffers.texi(,241) @table @kbd
buffers.texi(,242) @item d
buffers.texi(,243) Request to delete (kill) the buffer, then move down.  A @samp{D} before
buffers.texi(,244) the buffer name on a line indicates a deletion request.  Requested
buffers.texi(,245) deletions actually take place when you use the @kbd{x} command.
buffers.texi(,246) @item k
buffers.texi(,247) Synonym for @kbd{d}.
buffers.texi(,248) @item C-d
buffers.texi(,249) Like @kbd{d} but move up afterwards instead of down.
buffers.texi(,250) @item s
buffers.texi(,251) Request to save the buffer.  An @samp{S} before the buffer name on a line
buffers.texi(,252) indicates the request.  Requested saves actually take place when you use
buffers.texi(,253) the @kbd{x} command.  You can request both saving and deletion for the
buffers.texi(,254) same buffer.
buffers.texi(,255) @item ~
buffers.texi(,256) Mark buffer ``unmodified''.  The command @kbd{~} does this
buffers.texi(,257) immediately when typed.
buffers.texi(,258) @item x
buffers.texi(,259) Perform previously requested deletions and saves.
buffers.texi(,260) @item u
buffers.texi(,261) Remove any request made for the current line, and move down.
buffers.texi(,262) @item @key{DEL}
buffers.texi(,263) Move to previous line and remove any request made for that line.
buffers.texi(,264) @end table
buffers.texi(,265) 
buffers.texi(,266)   All commands that add or remove flags to request later operations
buffers.texi(,267) also move down a line.  They accept a numeric argument as a repeat count,
buffers.texi(,268) unless otherwise specified.
buffers.texi(,269) 
buffers.texi(,270)   There are also special commands to use the buffer list to select another
buffers.texi(,271) buffer, and to specify one or more other buffers for display in additional
buffers.texi(,272) windows.
buffers.texi(,273) 
buffers.texi(,274) @table @kbd
buffers.texi(,275) @item 1
buffers.texi(,276) Select the buffer in a full-frame window.  This command takes effect
buffers.texi(,277) immediately.
buffers.texi(,278) @item 2
buffers.texi(,279) Immediately set up two windows, with this buffer in one and the
buffers.texi(,280) buffer selected before @samp{*Buffer List*} in the other.
buffers.texi(,281) @item f
buffers.texi(,282) Immediately select the buffer in place of the @samp{*Buffer List*} buffer.
buffers.texi(,283) @item o
buffers.texi(,284) Immediately select the buffer in another window as if by @kbd{C-x 4 b},
buffers.texi(,285) leaving @samp{*Buffer List*} visible.
buffers.texi(,286) @item q
buffers.texi(,287) Immediately select this buffer, and display any buffers previously
buffers.texi(,288) flagged with the @kbd{m} command in other windows.  If there are no 
buffers.texi(,289) buffers flagged with @kbd{m}, this command is equivalent to @kbd{1}.
buffers.texi(,290) @item m
buffers.texi(,291) Flag this buffer to be displayed in another window if the @kbd{q}
buffers.texi(,292) command is used.  The request shows as a @samp{>} at the beginning of
buffers.texi(,293) the line.  The same buffer may not have both a delete request and a
buffers.texi(,294) display request.
buffers.texi(,295) @end table
buffers.texi(,296) 
buffers.texi(,297)  Going back between a @code{buffer-menu} buffer and other Emacs buffers is
buffers.texi(,298) easy.  You can, for example, switch from the @samp{*Buffer List*}
buffers.texi(,299) buffer to another Emacs buffer, and edit there.  You can then reselect the
buffers.texi(,300) @code{buffer-menu} buffer and perform operations already
buffers.texi(,301) requested, or you can kill that buffer or pay no further attention to it.
buffers.texi(,302)  All that @code{buffer-menu} does directly is create and select a
buffers.texi(,303) suitable buffer, and turn on Buffer Menu mode.  All the other
buffers.texi(,304) capabilities of the buffer menu are implemented by special commands
buffers.texi(,305) provided in Buffer Menu mode.  
buffers.texi(,306) 
buffers.texi(,307)   The only difference between @code{buffer-menu} and @code{list-buffers} is
buffers.texi(,308) that @code{buffer-menu} selects the @samp{*Buffer List*} buffer and
buffers.texi(,309) @code{list-buffers} does not.  If you run @code{list-buffers} (that is,
buffers.texi(,310) type @kbd{C-x C-b}) and select the buffer list manually, you can use all
buffers.texi(,311) the commands described here.
windows.texi(,1) 
windows.texi(,2) @node Windows, Mule, Buffers, Top
windows.texi(,3) @chapter Multiple Windows
windows.texi(,4) @cindex windows
windows.texi(,5) 
windows.texi(,6)   Emacs can split the frame into two or many windows, which can display
windows.texi(,7) parts of different buffers or different parts of one buffer.  If you are
windows.texi(,8) running XEmacs under X, that means you can have the X window that contains
windows.texi(,9) the Emacs frame have multiple subwindows.
windows.texi(,10) 
windows.texi(,11) @menu
windows.texi(,12) * Basic Window::     Introduction to Emacs windows.
windows.texi(,13) * Split Window::     New windows are made by splitting existing windows.
windows.texi(,14) * Other Window::     Moving to another window or doing something to it.
windows.texi(,15) * Pop Up Window::    Finding a file or buffer in another window.
windows.texi(,16) * Change Window::    Deleting windows and changing their sizes.
windows.texi(,17) @end menu
windows.texi(,18) 
windows.texi(,19) @node Basic Window, Split Window, Windows, Windows
windows.texi(,20) @section Concepts of Emacs Windows
windows.texi(,21) 
windows.texi(,22)   When Emacs displays multiple windows, each window has one Emacs
windows.texi(,23) buffer designated for display.  The same buffer may appear in more
windows.texi(,24) than one window; if it does, any changes in its text are displayed in all
windows.texi(,25) the windows that display it.  Windows showing the same buffer can
windows.texi(,26) show different parts of it, because each window has its own value of point.
windows.texi(,27) 
windows.texi(,28) @cindex selected window
windows.texi(,29)   At any time, one  window is the @dfn{selected window}; the buffer
windows.texi(,30)  displayed by that window is the current buffer.  The cursor
windows.texi(,31) shows the location of point in that window.  Each other window has a
windows.texi(,32) location of point as well, but since the terminal has only one cursor, it
windows.texi(,33) cannot show the location of point in the other windows.
windows.texi(,34) 
windows.texi(,35)   Commands to move point affect the value of point for the selected Emacs
windows.texi(,36) window only.  They do not change the value of point in any other Emacs
windows.texi(,37) window, including those showing the same buffer.  The same is true for commands
windows.texi(,38) such as @kbd{C-x b} to change the selected buffer in the selected window;
windows.texi(,39) they do not affect other windows at all.  However, there are other commands
windows.texi(,40) such as @kbd{C-x 4 b} that select a different window and switch buffers in
windows.texi(,41) it.  Also, all commands that display information in a window, including
windows.texi(,42) (for example) @kbd{C-h f} (@code{describe-function}) and @kbd{C-x C-b}
windows.texi(,43) (@code{list-buffers}), work by switching buffers in a non-selected window
windows.texi(,44) without affecting the selected window.
windows.texi(,45) 
windows.texi(,46)   Each window has its own mode line, which displays the buffer name,
windows.texi(,47) modification status, and major and minor modes of the buffer that is
windows.texi(,48) displayed in the window.  @xref{Mode Line}, for details on the mode
windows.texi(,49) line.
windows.texi(,50) 
windows.texi(,51) @node Split Window, Other Window, Basic Window, Windows
windows.texi(,52) @section Splitting Windows
windows.texi(,53) 
windows.texi(,54) @table @kbd
windows.texi(,55) @item C-x 2
windows.texi(,56) Split the selected window into two windows, one above the other
windows.texi(,57) (@code{split-window-vertically}).
windows.texi(,58) @item C-x 3
windows.texi(,59) Split the selected window into two windows positioned side by side
windows.texi(,60) (@code{split-window-horizontally}).
windows.texi(,61) @item C-x 6
windows.texi(,62) Save the current window configuration in register @var{reg} (a letter).
windows.texi(,63) @item C-x 7
windows.texi(,64) Restore (make current) the window configuration in register
windows.texi(,65) @var{reg} (a letter).  Use with a register previously set with @kbd{C-x 6}.
windows.texi(,66) @end table
windows.texi(,67) 
windows.texi(,68) @kindex C-x 2
windows.texi(,69) @findex split-window-vertically
windows.texi(,70)   The command @kbd{C-x 2} (@code{split-window-vertically}) breaks the
windows.texi(,71) selected window into two windows, one above the other.  Both windows
windows.texi(,72) start out displaying the same buffer, with the same value of point.  By
windows.texi(,73) default each of the two windows gets half the height of the window that
windows.texi(,74) was split.  A numeric argument specifies how many lines to give to the
windows.texi(,75) top window.
windows.texi(,76) 
windows.texi(,77) @kindex C-x 3
windows.texi(,78) @findex split-window-horizontally
windows.texi(,79)   @kbd{C-x 3} (@code{split-window-horizontally}) breaks the selected
windows.texi(,80) window into two side-by-side windows.  A numeric argument specifies how
windows.texi(,81) many columns to give the one on the left.  A line of vertical bars
windows.texi(,82) separates the two windows.  Windows that are not the full width of the
windows.texi(,83) frame have truncated mode lines which do not always appear in inverse
windows.texi(,84) video, because Emacs display routines cannot display a region of inverse
windows.texi(,85) video that is only part of a line on the screen.
windows.texi(,86) 
windows.texi(,87) @vindex truncate-partial-width-windows
windows.texi(,88)   When a window is less than the full width, many text lines are too
windows.texi(,89) long to fit.  Continuing all those lines might be confusing.  Set the
windows.texi(,90) variable @code{truncate-partial-width-windows} to non-@code{nil} to
windows.texi(,91) force truncation in all windows less than the full width of the frame,
windows.texi(,92) independent of the buffer and its value for @code{truncate-lines}.
windows.texi(,93) @xref{Continuation Lines}.@refill
windows.texi(,94) 
windows.texi(,95)   Horizontal scrolling is often used in side-by-side windows.
windows.texi(,96) @xref{Display}.
windows.texi(,97) 
windows.texi(,98) @findex jump-to-register
windows.texi(,99) @findex window-configuration-to-register
windows.texi(,100) You can resize a window and store that configuration in a register by
windows.texi(,101) supplying a @var{register} argument to @code{window-configuration-to-register}
windows.texi(,102) (@kbd{C-x 6}). To return to the window configuration established with
windows.texi(,103) @code{window-configuration-to-register}, use @code{jump-to-register}
windows.texi(,104) (@kbd{C-x j}).
windows.texi(,105) 
windows.texi(,106) @node Other Window, Pop Up Window, Split Window, Windows
windows.texi(,107) @section Using Other Windows
windows.texi(,108) 
windows.texi(,109) @table @kbd
windows.texi(,110) @item C-x o
windows.texi(,111) Select another window (@code{other-window}).  That is the letter `o', not zero.
windows.texi(,112) @item M-C-v
windows.texi(,113) Scroll the next window (@code{scroll-other-window}).
windows.texi(,114) @item M-x compare-windows
windows.texi(,115) Find the next place where the text in the selected window does not match
windows.texi(,116) the text in the next window.
windows.texi(,117) @item M-x other-window-any-frame @var{n}
windows.texi(,118) Select the @var{n}th different window on any frame.
windows.texi(,119) @end table
windows.texi(,120) 
windows.texi(,121) @kindex C-x o
windows.texi(,122) @findex other-window
windows.texi(,123)   To select a different window, use @kbd{C-x o} (@code{other-window}).
windows.texi(,124) That is an `o', for `other', not a zero.  When there are more than
windows.texi(,125) two windows, the command moves through all the windows in a cyclic
windows.texi(,126) order, generally top to bottom and left to right.  From the rightmost
windows.texi(,127) and bottommost window, it goes back to the one at the upper left corner.
windows.texi(,128) A numeric argument, @var{n}, moves several steps in the cyclic order of
windows.texi(,129) windows. A negative numeric argument moves around the cycle in the
windows.texi(,130) opposite order.  If the optional second argument @var{which-frames} is
windows.texi(,131) non-@code{nil}, the function cycles through all frames.  When the
windows.texi(,132) minibuffer is active, the minibuffer is the last window in the cycle;
windows.texi(,133) you can switch from the minibuffer window to one of the other windows,
windows.texi(,134) and later switch back and finish supplying the minibuffer argument that
windows.texi(,135) is requested.  @xref{Minibuffer Edit}.
windows.texi(,136) 
windows.texi(,137) @findex other-window-any-frame
windows.texi(,138)  The command @kbd{M-x other-window-any-frame} also selects the window
windows.texi(,139) @var{n} steps away in the cyclic order.  However, unlike @code{other-window},
windows.texi(,140) this command selects a window on the next or previous frame instead of
windows.texi(,141) wrapping around to the top or bottom of the current frame, when there
windows.texi(,142) are no more windows.
windows.texi(,143) 
windows.texi(,144) @kindex C-M-v
windows.texi(,145) @findex scroll-other-window
windows.texi(,146)   The usual scrolling commands (@pxref{Display}) apply to the selected
windows.texi(,147) window only.  @kbd{M-C-v} (@code{scroll-other-window}) scrolls the
windows.texi(,148) window that @kbd{C-x o} would select.  Like @kbd{C-v}, it takes positive
windows.texi(,149) and negative arguments.
windows.texi(,150) 
windows.texi(,151) @findex compare-windows
windows.texi(,152)   The command @kbd{M-x compare-windows} compares the text in the current
windows.texi(,153) window with the text in the next window.  Comparison starts at point in each
windows.texi(,154) window.  Point moves forward in each window, a character at a time,
windows.texi(,155) until the next set of characters in the two windows are different.  Then the
windows.texi(,156) command is finished.
windows.texi(,157) 
windows.texi(,158) A prefix argument @var{ignore-whitespace} means ignore changes in
windows.texi(,159) whitespace.  The variable @code{compare-windows-whitespace} controls how
windows.texi(,160) whitespace is skipped.
windows.texi(,161) 
windows.texi(,162) If @code{compare-ignore-case} is non-@code{nil}, changes in case are
windows.texi(,163) also ignored.
windows.texi(,164) 
windows.texi(,165) @node Pop Up Window, Change Window, Other Window, Windows
windows.texi(,166) @section Displaying in Another Window
windows.texi(,167) 
windows.texi(,168) @kindex C-x 4
windows.texi(,169)   @kbd{C-x 4} is a prefix key for commands that select another window
windows.texi(,170) (splitting the window if there is only one) and select a buffer in that
windows.texi(,171) window.  Different @kbd{C-x 4} commands have different ways of finding the
windows.texi(,172) buffer to select.
windows.texi(,173) 
windows.texi(,174) @findex switch-to-buffer-other-window
windows.texi(,175) @findex find-file-other-window
windows.texi(,176) @findex find-tag-other-window
windows.texi(,177) @findex dired-other-window
windows.texi(,178) @findex mail-other-window
windows.texi(,179) @table @kbd
windows.texi(,180) @item C-x 4 b @var{bufname} @key{RET}
windows.texi(,181) Select buffer @var{bufname} in another window.  This runs
windows.texi(,182) @code{switch-to-buffer-other-window}.
windows.texi(,183) @item C-x 4 f @var{filename} @key{RET}
windows.texi(,184) Visit file @var{filename} and select its buffer in another window.  This
windows.texi(,185) runs @code{find-file-other-window}.  @xref{Visiting}.
windows.texi(,186) @item C-x 4 d @var{directory} @key{RET}
windows.texi(,187) Select a Dired buffer for directory @var{directory} in another window.
windows.texi(,188) This runs @code{dired-other-window}.  @xref{Dired}.
windows.texi(,189) @item C-x 4 m
windows.texi(,190) Start composing a mail message in another window.  This runs
windows.texi(,191) @code{mail-other-window}, and its same-window version is @kbd{C-x m}
windows.texi(,192) (@pxref{Sending Mail}).
windows.texi(,193) @item C-x 4 .
windows.texi(,194) Find a tag in the current tag table in another window.  This runs
windows.texi(,195) @code{find-tag-other-window}, the multiple-window variant of @kbd{M-.}
windows.texi(,196) (@pxref{Tags}).
windows.texi(,197) @end table
windows.texi(,198) 
windows.texi(,199) @vindex display-buffer-function
windows.texi(,200) If the variable @code{display-buffer-function} is non-@code{nil}, its value is
windows.texi(,201) the function to call to handle @code{display-buffer}. It receives two
windows.texi(,202) arguments, the buffer and a flag that if non-@code{nil} means that the
windows.texi(,203) currently selected window is not acceptable. Commands such as
windows.texi(,204) @code{switch-to-buffer-other-window} and @code{find-file-other-window}
windows.texi(,205) work using this function.
windows.texi(,206) 
windows.texi(,207) @node Change Window,, Pop Up Window, Windows
windows.texi(,208) @section Deleting and Rearranging Windows
windows.texi(,209) 
windows.texi(,210) @table @kbd
windows.texi(,211) @item C-x 0
windows.texi(,212) Get rid of the selected window (@code{delete-window}).  That is a zero.
windows.texi(,213) If there is more than one Emacs frame, deleting the sole remaining
windows.texi(,214) window on that frame deletes the frame as well. If the current frame
windows.texi(,215) is the only frame, it is not deleted.
windows.texi(,216) @item C-x 1
windows.texi(,217) Get rid of all windows except the selected one
windows.texi(,218) (@code{delete-other-windows}).
windows.texi(,219) @item C-x ^
windows.texi(,220) Make the selected window taller, at the expense of the other(s)
windows.texi(,221) @*(@code{enlarge-window}).
windows.texi(,222) @item C-x @}
windows.texi(,223) Make the selected window wider (@code{enlarge-window-horizontally}).
windows.texi(,224) @end table
windows.texi(,225) 
windows.texi(,226) @kindex C-x 0
windows.texi(,227) @findex delete-window
windows.texi(,228)   To delete a window, type @kbd{C-x 0} (@code{delete-window}).  (That is a
windows.texi(,229) zero.)  The space occupied by the deleted window is distributed among the
windows.texi(,230) other active windows (but not the minibuffer window, even if that is active
windows.texi(,231) at the time).  Once a window is deleted, its attributes are forgotten;
windows.texi(,232) there is no automatic way to make another window of the same shape or
windows.texi(,233) showing the same buffer.  The buffer continues to exist, and you can
windows.texi(,234) select it in any window with @kbd{C-x b}.
windows.texi(,235) 
windows.texi(,236) @kindex C-x 1
windows.texi(,237) @findex delete-other-windows
windows.texi(,238)   @kbd{C-x 1} (@code{delete-other-windows}) is more powerful than @kbd{C-x 0};
windows.texi(,239) it deletes all the windows except the selected one (and the minibuffer).
windows.texi(,240) The selected window expands to use the whole frame except for the echo
windows.texi(,241) area.
windows.texi(,242) 
windows.texi(,243) @kindex C-x ^
windows.texi(,244) @findex enlarge-window
windows.texi(,245) @kindex C-x @}
windows.texi(,246) @findex enlarge-window-horizontally
windows.texi(,247) @vindex window-min-height
windows.texi(,248) @vindex window-min-width
windows.texi(,249)   To readjust the division of space among existing windows, use @kbd{C-x
windows.texi(,250) ^} (@code{enlarge-window}).  It makes the currently selected window
windows.texi(,251) longer by one line or as many lines as a numeric argument specifies.
windows.texi(,252) With a negative argument, it makes the selected window smaller.
windows.texi(,253) @kbd{C-x @}} (@code{enlarge-window-horizontally}) makes the selected
windows.texi(,254) window wider by the specified number of columns.  The extra screen space
windows.texi(,255) given to a window comes from one of its neighbors, if that is possible;
windows.texi(,256) otherwise, all the competing windows are shrunk in the same proportion.
windows.texi(,257) If this makes some windows too small, those windows are deleted and their
windows.texi(,258) space is divided up.   Minimum window size is specified by the variables
windows.texi(,259) @code{window-min-height} and @code{window-min-width}.
windows.texi(,260) 
windows.texi(,261) You can also resize windows within a frame by clicking the left mouse
windows.texi(,262) button on a modeline, and dragging.
windows.texi(,263) 
windows.texi(,264) Clicking the right button on a mode line pops up a menu of common window
windows.texi(,265) manager operations.  This menu contains the following options:
windows.texi(,266) 
windows.texi(,267) @cindex Windows menu
windows.texi(,268) @cindex Pull-down Menus
windows.texi(,269) @cindex menus
windows.texi(,270) @table @b
windows.texi(,271) @item Delete Window
windows.texi(,272) Remove the window above this modeline from the frame.
windows.texi(,273) 
windows.texi(,274) @item Delete Other Windows
windows.texi(,275) Delete all windows on the frame except for the one above this modeline.
windows.texi(,276) 
windows.texi(,277) @item Split Window
windows.texi(,278) Split the window above the mode line in half, creating another window.
windows.texi(,279) 
windows.texi(,280) @item Split Window Horizontally
windows.texi(,281) Split the window above the mode line in half horizontally, so that there
windows.texi(,282) will be two windows side-by-side.
windows.texi(,283) 
windows.texi(,284) @item Balance Windows
windows.texi(,285) Readjust the sizes of all windows on the frame until all windows have
windows.texi(,286) roughly the same number of lines.
windows.texi(,287) @end table
mule.texi(,1) @c This is part of the Emacs manual.
mule.texi(,2) @c Copyright (C) 1997 Free Software Foundation, Inc.
mule.texi(,3) @c See file emacs.texi for copying conditions.
mule.texi(,4) @node Mule, Major Modes, Windows, Top
mule.texi(,5) @chapter World Scripts Support
mule.texi(,6) @cindex MULE
mule.texi(,7) @cindex international scripts
mule.texi(,8) @cindex multibyte characters
mule.texi(,9) @cindex encoding of characters
mule.texi(,10) 
mule.texi(,11) @cindex Chinese
mule.texi(,12) @cindex Greek
mule.texi(,13) @cindex IPA
mule.texi(,14) @cindex Japanese
mule.texi(,15) @cindex Korean
mule.texi(,16) @cindex Cyrillic
mule.texi(,17) @cindex Russian
mule.texi(,18)   If you compile XEmacs with Mule option, it supports a wide variety of
mule.texi(,19) world scripts, including Latin script, as well as Arabic script,
mule.texi(,20) Simplified Chinese script (for mainland of China), Traditional Chinese
mule.texi(,21) script (for Taiwan and Hong-Kong), Greek script, Hebrew script, IPA
mule.texi(,22) symbols, Japanese scripts (Hiragana, Katakana and Kanji), Korean scripts
mule.texi(,23) (Hangul and Hanja) and Cyrillic script (for Byelorussian, Bulgarian,
mule.texi(,24) Russian, Serbian and Ukrainian).  These features have been merged from
mule.texi(,25) the modified version of Emacs known as MULE (for ``MULti-lingual
mule.texi(,26) Enhancement to GNU Emacs'').
mule.texi(,27) 
mule.texi(,28) @menu
mule.texi(,29) * Mule Intro::              Basic concepts of Mule.
mule.texi(,30) * Language Environments::   Setting things up for the language you use.
mule.texi(,31) * Input Methods::           Entering text characters not on your keyboard.
mule.texi(,32) * Select Input Method::     Specifying your choice of input methods.
mule.texi(,33) * Mule and Fonts::          Additional font-related issues
mule.texi(,34) * Coding Systems::          Character set conversion when you read and
mule.texi(,35)                               write files, and so on.
mule.texi(,36) * Recognize Coding::        How XEmacs figures out which conversion to use.
mule.texi(,37) * Specify Coding::          Various ways to choose which conversion to use.
mule.texi(,38) @end menu
mule.texi(,39) 
mule.texi(,40) @node Mule Intro, Language Environments, Mule, Mule
mule.texi(,41) @section What is Mule?
mule.texi(,42) 
mule.texi(,43) Mule is the MUltiLingual Extension to XEmacs.  It provides facilities
mule.texi(,44) not only for handling text written in many different languages, but in
mule.texi(,45) fact multilingual texts containing several languages in the same buffer.
mule.texi(,46) This goes beyond the simple facilities offered by Unicode for
mule.texi(,47) representation of multilingual text.  Mule also supports input methods,
mule.texi(,48) composing display using fonts in various different encodings, changing
mule.texi(,49) character syntax and other editing facilities to correspond to local
mule.texi(,50) language usage, and more.
mule.texi(,51) 
mule.texi(,52) The most obvious problem is that of the different character coding
mule.texi(,53) systems used by different languages.  ASCII supplies all the characters
mule.texi(,54) needed for most computer programming languages and US English (it lacks
mule.texi(,55) the currency symbol for British English), but other Western European
mule.texi(,56) languages (French, Spanish, German) require more than 96 code positions
mule.texi(,57) for accented characters.  In fact, even with 8 bits to represent 96 more
mule.texi(,58) character (including accented characters and symbols such as currency
mule.texi(,59) symbols), some languages' alphabets remain incomplete (Croatian,
mule.texi(,60) Polish).  (The 64 "missing characters" are reserved for control
mule.texi(,61) characters.)  Furthermore, many European languages have their own
mule.texi(,62) alphabets, which must conflict with the accented characters since the
mule.texi(,63) ASCII characters are needed for computer interaction (error and log
mule.texi(,64) messages are typically in ASCII).
mule.texi(,65) 
mule.texi(,66) For economy of space, historical practice has been for each language to
mule.texi(,67) establish its own encoding for the characters it needs.  This allows
mule.texi(,68) most European languages to represented with one octet (byte) per
mule.texi(,69) character.  However, many Asian languages have thousands of characters
mule.texi(,70) and require two or more octets per character.  For multilingual
mule.texi(,71) purposes, the ISO 2022 standard establishes escape codes that allow
mule.texi(,72) switching encodings in midstream.  (It's also ISO 2022 that establishes
mule.texi(,73) the standard that code points 0-31 and 128-159 are control codes.)
mule.texi(,74) 
mule.texi(,75) However, this is error-prone and complex for internal processing.  For
mule.texi(,76) this reason XEmacs uses an internal coding system which can encode all
mule.texi(,77) of the world's scripts.  Unfortunately, for historical reasons, this
mule.texi(,78) code is not Unicode, although we are moving in that direction.
mule.texi(,79) 
mule.texi(,80) XEmacs translates between the internal character encoding and various
mule.texi(,81) other coding systems when reading and writing files, when exchanging
mule.texi(,82) data with subprocesses, and (in some cases) in the @kbd{C-q} command
mule.texi(,83) (see below).  The internal encoding is never visible to the user in a
mule.texi(,84) production XEmacs, but unfortunately the process cannot be completely
mule.texi(,85) transparent to the user.  This is because the same ranges of octets may
mule.texi(,86) represent 1-octet ISO-8859-1 (which is satisfactory for most Western
mule.texi(,87) European use prior to the introduction of the Euro currency), 1-octet
mule.texi(,88) ISO-8859-15 (which substitutes the Euro for the rarely used "generic
mule.texi(,89) currency" symbol), 1-octet ISO-8859-5 (Cyrillic), or multioctet EUC-JP
mule.texi(,90) (Japanese).  There's no way to tell without being able to read!
mule.texi(,91) 
mule.texi(,92) A number of heuristics are incorporated in Mule for automatic
mule.texi(,93) recognition, there are facilities for the user to set defaults, and
mule.texi(,94) where necessary (rarely, we hope) to set coding systems directly.
mule.texi(,95) 
mule.texi(,96) @kindex C-h h
mule.texi(,97) @findex view-hello-file
mule.texi(,98)   The command @kbd{C-h h} (@code{view-hello-file}) displays the file
mule.texi(,99) @file{etc/HELLO}, which shows how to say ``hello'' in many languages.
mule.texi(,100) This illustrates various scripts.
mule.texi(,101) 
mule.texi(,102)   Keyboards, even in the countries where these character sets are used,
mule.texi(,103) generally don't have keys for all the characters in them.  So XEmacs
mule.texi(,104) supports various @dfn{input methods}, typically one for each script or
mule.texi(,105) language, to make it convenient to type them.
mule.texi(,106) 
mule.texi(,107) @kindex C-x RET
mule.texi(,108)   The prefix key @kbd{C-x @key{RET}} is used for commands that pertain
mule.texi(,109) to world scripts, coding systems, and input methods.
mule.texi(,110) 
mule.texi(,111) 
mule.texi(,112) @node Language Environments, Input Methods, Mule Intro, Mule
mule.texi(,113) @section Language Environments
mule.texi(,114) @cindex language environments
mule.texi(,115) 
mule.texi(,116)   All supported character sets are supported in XEmacs buffers if it is
mule.texi(,117) compiled with Mule; there is no need to select a particular language in
mule.texi(,118) order to display its characters in an XEmacs buffer.  However, it is
mule.texi(,119) important to select a @dfn{language environment} in order to set various
mule.texi(,120) defaults.  The language environment really represents a choice of
mule.texi(,121) preferred script (more or less) rather that a choice of language.
mule.texi(,122) 
mule.texi(,123)   The language environment controls which coding systems to recognize
mule.texi(,124) when reading text (@pxref{Recognize Coding}).  This applies to files,
mule.texi(,125) incoming mail, netnews, and any other text you read into XEmacs.  It may
mule.texi(,126) also specify the default coding system to use when you create a file.
mule.texi(,127) Each language environment also specifies a default input method.
mule.texi(,128) 
mule.texi(,129) @findex set-language-environment
mule.texi(,130)   The command to select a language environment is @kbd{M-x
mule.texi(,131) set-language-environment}.  It makes no difference which buffer is
mule.texi(,132) current when you use this command, because the effects apply globally to
mule.texi(,133) the XEmacs session.  The supported language environments include:
mule.texi(,134) 
mule.texi(,135) @quotation
mule.texi(,136) ASCII, Chinese-BIG5, Chinese-GB, Croatian, Cyrillic-ALT, Cyrillic-ISO, 
mule.texi(,137) Cyrillic-KOI8, Cyrillic-Win, Czech, English, Ethiopic, French, German,
mule.texi(,138) Greek, Hebrew, IPA, Japanese, Korean, Latin-1, Latin-2, Latin-3, Latin-4,
mule.texi(,139) Latin-5, Norwegian, Polish, Romanian, Slovenian, Thai-XTIS, Vietnamese.
mule.texi(,140) @end quotation
mule.texi(,141) 
mule.texi(,142)   Some operating systems let you specify the language you are using by
mule.texi(,143) setting locale environment variables.  XEmacs handles one common special
mule.texi(,144) case of this: if your locale name for character types contains the
mule.texi(,145) string @samp{8859-@var{n}}, XEmacs automatically selects the
mule.texi(,146) corresponding language environment.
mule.texi(,147) 
mule.texi(,148) @kindex C-h L
mule.texi(,149) @findex describe-language-environment
mule.texi(,150)   To display information about the effects of a certain language
mule.texi(,151) environment @var{lang-env}, use the command @kbd{C-h L @var{lang-env}
mule.texi(,152) @key{RET}} (@code{describe-language-environment}).  This tells you which
mule.texi(,153) languages this language environment is useful for, and lists the
mule.texi(,154) character sets, coding systems, and input methods that go with it.  It
mule.texi(,155) also shows some sample text to illustrate scripts used in this language
mule.texi(,156) environment.  By default, this command describes the chosen language
mule.texi(,157) environment.
mule.texi(,158) 
mule.texi(,159) @node Input Methods, Select Input Method, Language Environments, Mule
mule.texi(,160) @section Input Methods
mule.texi(,161) 
mule.texi(,162) @cindex input methods
mule.texi(,163)   An @dfn{input method} is a kind of character conversion designed
mule.texi(,164) specifically for interactive input.  In XEmacs, typically each language
mule.texi(,165) has its own input method; sometimes several languages which use the same
mule.texi(,166) characters can share one input method.  A few languages support several
mule.texi(,167) input methods.
mule.texi(,168) 
mule.texi(,169)   The simplest kind of input method works by mapping ASCII letters into
mule.texi(,170) another alphabet.  This is how the Greek and Russian input methods work.
mule.texi(,171) 
mule.texi(,172)   A more powerful technique is composition: converting sequences of
mule.texi(,173) characters into one letter.  Many European input methods use composition
mule.texi(,174) to produce a single non-ASCII letter from a sequence that consists of a
mule.texi(,175) letter followed by accent characters.  For example, some methods convert
mule.texi(,176) the sequence @kbd{'a} into a single accented letter.
mule.texi(,177) 
mule.texi(,178)   The input methods for syllabic scripts typically use mapping followed
mule.texi(,179) by composition.  The input methods for Thai and Korean work this way.
mule.texi(,180) First, letters are mapped into symbols for particular sounds or tone
mule.texi(,181) marks; then, sequences of these which make up a whole syllable are
mule.texi(,182) mapped into one syllable sign.
mule.texi(,183) 
mule.texi(,184)   Chinese and Japanese require more complex methods.  In Chinese input
mule.texi(,185) methods, first you enter the phonetic spelling of a Chinese word (in
mule.texi(,186) input method @code{chinese-py}, among others), or a sequence of portions
mule.texi(,187) of the character (input methods @code{chinese-4corner} and
mule.texi(,188) @code{chinese-sw}, and others).  Since one phonetic spelling typically
mule.texi(,189) corresponds to many different Chinese characters, you must select one of
mule.texi(,190) the alternatives using special XEmacs commands.  Keys such as @kbd{C-f},
mule.texi(,191) @kbd{C-b}, @kbd{C-n}, @kbd{C-p}, and digits have special definitions in
mule.texi(,192) this situation, used for selecting among the alternatives.  @key{TAB}
mule.texi(,193) displays a buffer showing all the possibilities.
mule.texi(,194) 
mule.texi(,195)    In Japanese input methods, first you input a whole word using
mule.texi(,196) phonetic spelling; then, after the word is in the buffer, XEmacs
mule.texi(,197) converts it into one or more characters using a large dictionary.  One
mule.texi(,198) phonetic spelling corresponds to many differently written Japanese
mule.texi(,199) words, so you must select one of them; use @kbd{C-n} and @kbd{C-p} to
mule.texi(,200) cycle through the alternatives.
mule.texi(,201) 
mule.texi(,202)   Sometimes it is useful to cut off input method processing so that the
mule.texi(,203) characters you have just entered will not combine with subsequent
mule.texi(,204) characters.  For example, in input method @code{latin-1-postfix}, the
mule.texi(,205) sequence @kbd{e '} combines to form an @samp{e} with an accent.  What if
mule.texi(,206) you want to enter them as separate characters?
mule.texi(,207) 
mule.texi(,208)   One way is to type the accent twice; that is a special feature for
mule.texi(,209) entering the separate letter and accent.  For example, @kbd{e ' '} gives
mule.texi(,210) you the two characters @samp{e'}.  Another way is to type another letter
mule.texi(,211) after the @kbd{e}---something that won't combine with that---and
mule.texi(,212) immediately delete it.  For example, you could type @kbd{e e @key{DEL}
mule.texi(,213) '} to get separate @samp{e} and @samp{'}.
mule.texi(,214) 
mule.texi(,215)   Another method, more general but not quite as easy to type, is to use
mule.texi(,216) @kbd{C-\ C-\} between two characters to stop them from combining.  This
mule.texi(,217) is the command @kbd{C-\} (@code{toggle-input-method}) used twice.
mule.texi(,219) @xref{Select Input Method}.
mule.texi(,221) 
mule.texi(,222)   @kbd{C-\ C-\} is especially useful inside an incremental search,
mule.texi(,223) because stops waiting for more characters to combine, and starts
mule.texi(,224) searching for what you have already entered.
mule.texi(,225) 
mule.texi(,226) @vindex input-method-verbose-flag
mule.texi(,227) @vindex input-method-highlight-flag
mule.texi(,228)   The variables @code{input-method-highlight-flag} and
mule.texi(,229) @code{input-method-verbose-flag} control how input methods explain what
mule.texi(,230) is happening.  If @code{input-method-highlight-flag} is non-@code{nil},
mule.texi(,231) the partial sequence is highlighted in the buffer.  If
mule.texi(,232) @code{input-method-verbose-flag} is non-@code{nil}, the list of possible
mule.texi(,233) characters to type next is displayed in the echo area (but not when you
mule.texi(,234) are in the minibuffer).
mule.texi(,235) 
mule.texi(,236) @node Select Input Method, Mule and Fonts, Input Methods, Mule
mule.texi(,237) @section Selecting an Input Method
mule.texi(,238) 
mule.texi(,239) @table @kbd
mule.texi(,240) @item C-\
mule.texi(,241) Enable or disable use of the selected input method.
mule.texi(,242) 
mule.texi(,243) @item C-x @key{RET} C-\ @var{method} @key{RET}
mule.texi(,244) Select a new input method for the current buffer.
mule.texi(,245) 
mule.texi(,246) @item C-h I @var{method} @key{RET}
mule.texi(,247) @itemx C-h C-\ @var{method} @key{RET}
mule.texi(,248) @findex describe-input-method
mule.texi(,249) @kindex C-h I
mule.texi(,250) @kindex C-h C-\
mule.texi(,251) Describe the input method @var{method} (@code{describe-input-method}).
mule.texi(,252) By default, it describes the current input method (if any).
mule.texi(,253) 
mule.texi(,254) @item M-x list-input-methods
mule.texi(,255) Display a list of all the supported input methods.
mule.texi(,256) @end table
mule.texi(,257) 
mule.texi(,258) @findex select-input-method
mule.texi(,259) @vindex current-input-method
mule.texi(,260) @kindex C-x RET C-\
mule.texi(,261)   To choose an input method for the current buffer, use @kbd{C-x
mule.texi(,262) @key{RET} C-\} (@code{select-input-method}).  This command reads the
mule.texi(,263) input method name with the minibuffer; the name normally starts with the
mule.texi(,264) language environment that it is meant to be used with.  The variable
mule.texi(,265) @code{current-input-method} records which input method is selected.
mule.texi(,266)   
mule.texi(,267) @findex toggle-input-method
mule.texi(,268) @kindex C-\
mule.texi(,269)   Input methods use various sequences of ASCII characters to stand for
mule.texi(,270) non-ASCII characters.  Sometimes it is useful to turn off the input
mule.texi(,271) method temporarily.  To do this, type @kbd{C-\}
mule.texi(,272) (@code{toggle-input-method}).  To reenable the input method, type
mule.texi(,273) @kbd{C-\} again.
mule.texi(,274) 
mule.texi(,275)   If you type @kbd{C-\} and you have not yet selected an input method,
mule.texi(,276) it prompts for you to specify one.  This has the same effect as using
mule.texi(,277) @kbd{C-x @key{RET} C-\} to specify an input method.
mule.texi(,278) 
mule.texi(,279) @vindex default-input-method
mule.texi(,280)   Selecting a language environment specifies a default input method for
mule.texi(,281) use in various buffers.  When you have a default input method, you can
mule.texi(,282) select it in the current buffer by typing @kbd{C-\}.  The variable
mule.texi(,283) @code{default-input-method} specifies the default input method
mule.texi(,284) (@code{nil} means there is none).
mule.texi(,285) 
mule.texi(,286) @findex quail-set-keyboard-layout
mule.texi(,287)   Some input methods for alphabetic scripts work by (in effect)
mule.texi(,288) remapping the keyboard to emulate various keyboard layouts commonly used
mule.texi(,289) for those scripts.  How to do this remapping properly depends on your
mule.texi(,290) actual keyboard layout.  To specify which layout your keyboard has, use
mule.texi(,291) the command @kbd{M-x quail-set-keyboard-layout}.
mule.texi(,292) 
mule.texi(,293) @findex list-input-methods
mule.texi(,294)   To display a list of all the supported input methods, type @kbd{M-x
mule.texi(,295) list-input-methods}.  The list gives information about each input
mule.texi(,296) method, including the string that stands for it in the mode line.
mule.texi(,297) 
mule.texi(,298) @node Mule and Fonts, Coding Systems, Select Input Method, Mule
mule.texi(,299) @section Mule and Fonts
mule.texi(,300) @cindex fonts
mule.texi(,301) @cindex font registry
mule.texi(,302) @cindex font encoding
mule.texi(,303) @cindex CCL programs
mule.texi(,304) 
mule.texi(,305) (This section is X11-specific.)
mule.texi(,306) 
mule.texi(,307) Text in XEmacs buffers is displayed using various faces.  In addition to
mule.texi(,308) specifying properties of a face, such as font and color, there are some
mule.texi(,309) additional properties of Mule charsets that are used in text.
mule.texi(,310) 
mule.texi(,311) There is currently two properties of a charset that could be adjusted by
mule.texi(,312) user: font registry and so called @dfn{ccl-program}.
mule.texi(,313) 
mule.texi(,314) Font registry is a regular expression matching the font registry field
mule.texi(,315) for this character set.  For example, both the @code{ascii} and
mule.texi(,316) @w{@code{latin-iso8859-1}} charsets use the registry @code{"ISO8859-1"}.
mule.texi(,317) This field is used to choose an appropriate font when the user gives a
mule.texi(,318) general font specification such as @w{@samp{-*-courier-medium-r-*-140-*}},
mule.texi(,319) i.e. a 14-point upright medium-weight Courier font.
mule.texi(,320) 
mule.texi(,321) You can set font registry for a charset using
mule.texi(,322) @samp{set-charset-registry} function in one of your startup files.  This
mule.texi(,323) function takes two arguments: character set (as a symbol) and font
mule.texi(,324) registry (as a string).
mule.texi(,325) 
mule.texi(,326) E.@w{ }g., for Cyrillic texts Mule uses @w{@code{cyrillic-iso8859-5}}
mule.texi(,327) charset with @samp{"ISO8859-5"} as a default registry, and we want to
mule.texi(,328) use @samp{"koi8-r"} instead, because fonts in that encoding are
mule.texi(,329) installed on our system.  Use:
mule.texi(,330) 
mule.texi(,331) @example
mule.texi(,332) (set-charset-registry 'cyrillic-iso8859-5 "koi8-r")
mule.texi(,333) @end example
mule.texi(,334) 
mule.texi(,335) (Please note that you probably also want to set font registry for
mule.texi(,336) @samp{ascii} charset so that mixed English/Cyrillic texts be displayed
mule.texi(,337) using the same font.)
mule.texi(,338) 
mule.texi(,339) "CCL-programs" are a little special-purpose scripts defined within
mule.texi(,340) XEmacs or in some package.  Those scripts allow XEmacs to use fonts that
mule.texi(,341) are in different encoding from the encoding that is used by Mule for
mule.texi(,342) text in buffer.  Returning to the above example, we need to somehow tell
mule.texi(,343) XEmacs that we have different encodings of fonts and text and so it
mule.texi(,344) needs to convert characters between those encodings when displaying.
mule.texi(,345) That's what @samp{set-charset-ccl-program} function is used for.  There
mule.texi(,346) are quite a few various CCL programs defined within XEmacs, and there is
mule.texi(,347) no comprehensive list of them, so you currently have to consult sources.
mule.texi(,348) @c FIXME: there must be a list of CCL programs
mule.texi(,349) 
mule.texi(,350) We know that there is a CCL program called @samp{ccl-encode-koi8-r-font}
mule.texi(,351) that is used exactly for needed purpose: to convert characters between
mule.texi(,352) @samp{ISO8859-5} encoding and @samp{koi8-r}.  Use:
mule.texi(,353) 
mule.texi(,354) @example
mule.texi(,355) (set-charset-ccl-program 'cyrillic-iso8859-5 'ccl-encode-koi8-r-font)
mule.texi(,356) @end example
mule.texi(,357) 
mule.texi(,358) There are several more uses for CCL programs, not related to fonts, but
mule.texi(,359) those uses are not described here.
mule.texi(,360) 
mule.texi(,361) 
mule.texi(,362) @node Coding Systems, Recognize Coding, Mule and Fonts, Mule
mule.texi(,363) @section Coding Systems
mule.texi(,364) @cindex coding systems
mule.texi(,365) 
mule.texi(,366)   Users of various languages have established many more-or-less standard
mule.texi(,367) coding systems for representing them.  XEmacs does not use these coding
mule.texi(,368) systems internally; instead, it converts from various coding systems to
mule.texi(,369) its own system when reading data, and converts the internal coding
mule.texi(,370) system to other coding systems when writing data.  Conversion is
mule.texi(,371) possible in reading or writing files, in sending or receiving from the
mule.texi(,372) terminal, and in exchanging data with subprocesses.
mule.texi(,373) 
mule.texi(,374)   XEmacs assigns a name to each coding system.  Most coding systems are
mule.texi(,375) used for one language, and the name of the coding system starts with the
mule.texi(,376) language name.  Some coding systems are used for several languages;
mule.texi(,377) their names usually start with @samp{iso}.  There are also special
mule.texi(,378) coding systems @code{binary} and @code{no-conversion} which do not
mule.texi(,379) convert printing characters at all.
mule.texi(,380) 
mule.texi(,381)   In addition to converting various representations of non-ASCII
mule.texi(,382) characters, a coding system can perform end-of-line conversion.  XEmacs
mule.texi(,383) handles three different conventions for how to separate lines in a file:
mule.texi(,384) newline, carriage-return linefeed, and just carriage-return.
mule.texi(,385) 
mule.texi(,386) @table @kbd
mule.texi(,387) @item C-h C @var{coding} @key{RET}
mule.texi(,388) Describe coding system @var{coding}.
mule.texi(,389) 
mule.texi(,390) @item C-h C @key{RET}
mule.texi(,391) Describe the coding systems currently in use.
mule.texi(,392) 
mule.texi(,393) @item M-x list-coding-systems
mule.texi(,394) Display a list of all the supported coding systems.
mule.texi(,395) 
mule.texi(,396) @item C-u M-x list-coding-systems
mule.texi(,397) Display comprehensive list of specific details of all supported coding
mule.texi(,398) systems.
mule.texi(,399) @end table
mule.texi(,400) 
mule.texi(,401) @kindex C-x @key{RET} C
mule.texi(,402) @findex describe-coding-system
mule.texi(,403)   The command @kbd{C-x RET C} (@code{describe-coding-system}) displays
mule.texi(,404) information about particular coding systems.  You can specify a coding
mule.texi(,405) system name as argument; alternatively, with an empty argument, it
mule.texi(,406) describes the coding systems currently selected for various purposes,
mule.texi(,407) both in the current buffer and as the defaults, and the priority list
mule.texi(,408) for recognizing coding systems (@pxref{Recognize Coding}).
mule.texi(,409) 
mule.texi(,410) @findex list-coding-systems
mule.texi(,411)   To display a list of all the supported coding systems, type @kbd{M-x
mule.texi(,412) list-coding-systems}.  The list gives information about each coding
mule.texi(,413) system, including the letter that stands for it in the mode line
mule.texi(,414) (@pxref{Mode Line}).
mule.texi(,415) 
mule.texi(,416)   Each of the coding systems that appear in this list---except for
mule.texi(,417) @code{binary}, which means no conversion of any kind---specifies how and
mule.texi(,418) whether to convert printing characters, but leaves the choice of
mule.texi(,419) end-of-line conversion to be decided based on the contents of each file.
mule.texi(,420) For example, if the file appears to use carriage-return linefeed between
mule.texi(,421) lines, that end-of-line conversion will be used.
mule.texi(,422) 
mule.texi(,423)   Each of the listed coding systems has three variants which specify
mule.texi(,424) exactly what to do for end-of-line conversion:
mule.texi(,425) 
mule.texi(,426) @table @code
mule.texi(,427) @item @dots{}-unix
mule.texi(,428) Don't do any end-of-line conversion; assume the file uses
mule.texi(,429) newline to separate lines.  (This is the convention normally used
mule.texi(,430) on Unix and GNU systems.)
mule.texi(,431) 
mule.texi(,432) @item @dots{}-dos
mule.texi(,433) Assume the file uses carriage-return linefeed to separate lines,
mule.texi(,434) and do the appropriate conversion.  (This is the convention normally used
mule.texi(,435) on Microsoft systems.)
mule.texi(,436) 
mule.texi(,437) @item @dots{}-mac
mule.texi(,438) Assume the file uses carriage-return to separate lines, and do the
mule.texi(,439) appropriate conversion.  (This is the convention normally used on the
mule.texi(,440) Macintosh system.)
mule.texi(,441) @end table
mule.texi(,442) 
mule.texi(,443)   These variant coding systems are omitted from the
mule.texi(,444) @code{list-coding-systems} display for brevity, since they are entirely
mule.texi(,445) predictable.  For example, the coding system @code{iso-8859-1} has
mule.texi(,446) variants @code{iso-8859-1-unix}, @code{iso-8859-1-dos} and
mule.texi(,447) @code{iso-8859-1-mac}.
mule.texi(,448) 
mule.texi(,449)   In contrast, the coding system @code{binary} specifies no character
mule.texi(,450) code conversion at all---none for non-Latin-1 byte values and none for
mule.texi(,451) end of line.  This is useful for reading or writing binary files, tar
mule.texi(,452) files, and other files that must be examined verbatim.
mule.texi(,453) 
mule.texi(,454)   The easiest way to edit a file with no conversion of any kind is with
mule.texi(,455) the @kbd{M-x find-file-literally} command.  This uses @code{binary}, and
mule.texi(,456) also suppresses other XEmacs features that might convert the file
mule.texi(,457) contents before you see them.  @xref{Visiting}.
mule.texi(,458) 
mule.texi(,459)   The coding system @code{no-conversion} means that the file contains
mule.texi(,460) non-Latin-1 characters stored with the internal XEmacs encoding.  It
mule.texi(,461) handles end-of-line conversion based on the data encountered, and has
mule.texi(,462) the usual three variants to specify the kind of end-of-line conversion.
mule.texi(,463) 
mule.texi(,464) 
mule.texi(,465) @node Recognize Coding, Specify Coding, Coding Systems, Mule
mule.texi(,466) @section Recognizing Coding Systems
mule.texi(,467) 
mule.texi(,468) @c #### This section is out of date.  The following set-*-coding-system
mule.texi(,469) @c functions are known:
mule.texi(,470) 
mule.texi(,471) @c set-buffer-file-coding-system 
mule.texi(,472) @c set-buffer-file-coding-system-for-read
mule.texi(,473) @c set-buffer-process-coding-system
mule.texi(,474) @c set-console-tty-coding-system 
mule.texi(,475) @c set-console-tty-input-coding-system
mule.texi(,476) @c set-console-tty-output-coding-system
mule.texi(,477) @c set-default-buffer-file-coding-system
mule.texi(,478) @c set-default-coding-systems    
mule.texi(,479) @c set-default-file-coding-system
mule.texi(,480) @c set-file-coding-system        
mule.texi(,481) @c set-file-coding-system-for-read
mule.texi(,482) @c set-keyboard-coding-system    
mule.texi(,483) @c set-pathname-coding-system    
mule.texi(,484) @c set-process-coding-system     
mule.texi(,485) @c set-process-input-coding-system
mule.texi(,486) @c set-process-output-coding-system
mule.texi(,487) @c set-terminal-coding-system    
mule.texi(,488) 
mule.texi(,489) @c Some are marked as broken.  Agenda: (1) Update this section using
mule.texi(,490) @c docstrings.  Note that they may be inaccurate.  (2) Correct the
mule.texi(,491) @c documentation here, updating docstrings at the same time.
mule.texi(,492) 
mule.texi(,493) @c Document this.
mule.texi(,494) 
mule.texi(,495) @c set-language-environment-coding-systems
mule.texi(,496) 
mule.texi(,497) @c What are these?
mule.texi(,498) 
mule.texi(,499) @c dontusethis-set-value-file-name-coding-system-handler
mule.texi(,500) @c dontusethis-set-value-keyboard-coding-system-handler
mule.texi(,501) @c dontusethis-set-value-terminal-coding-system-handler
mule.texi(,502) 
mule.texi(,503)   Most of the time, XEmacs can recognize which coding system to use for
mule.texi(,504) any given file--once you have specified your preferences.
mule.texi(,505) 
mule.texi(,506)   Some coding systems can be recognized or distinguished by which byte
mule.texi(,507) sequences appear in the data.  However, there are coding systems that
mule.texi(,508) cannot be distinguished, not even potentially.  For example, there is no
mule.texi(,509) way to distinguish between Latin-1 and Latin-2; they use the same byte
mule.texi(,510) values with different meanings.
mule.texi(,511) 
mule.texi(,512)   XEmacs handles this situation by means of a priority list of coding
mule.texi(,513) systems.  Whenever XEmacs reads a file, if you do not specify the coding
mule.texi(,514) system to use, XEmacs checks the data against each coding system,
mule.texi(,515) starting with the first in priority and working down the list, until it
mule.texi(,516) finds a coding system that fits the data.  Then it converts the file
mule.texi(,517) contents assuming that they are represented in this coding system.
mule.texi(,518) 
mule.texi(,519)   The priority list of coding systems depends on the selected language
mule.texi(,520) environment (@pxref{Language Environments}).  For example, if you use
mule.texi(,521) French, you probably want XEmacs to prefer Latin-1 to Latin-2; if you
mule.texi(,522) use Czech, you probably want Latin-2 to be preferred.  This is one of
mule.texi(,523) the reasons to specify a language environment.
mule.texi(,524) 
mule.texi(,525) @findex prefer-coding-system
mule.texi(,526)   However, you can alter the priority list in detail with the command
mule.texi(,527) @kbd{M-x prefer-coding-system}.  This command reads the name of a coding
mule.texi(,528) system from the minibuffer, and adds it to the front of the priority
mule.texi(,529) list, so that it is preferred to all others.  If you use this command
mule.texi(,530) several times, each use adds one element to the front of the priority
mule.texi(,531) list.
mule.texi(,532) 
mule.texi(,533) @vindex file-coding-system-alist
mule.texi(,534)   Sometimes a file name indicates which coding system to use for the
mule.texi(,535) file.  The variable @code{file-coding-system-alist} specifies this
mule.texi(,536) correspondence.  There is a special function
mule.texi(,537) @code{modify-coding-system-alist} for adding elements to this list.  For
mule.texi(,538) example, to read and write all @samp{.txt} using the coding system
mule.texi(,539) @code{china-iso-8bit}, you can execute this Lisp expression:
mule.texi(,540) 
mule.texi(,541) @smallexample
mule.texi(,542) (modify-coding-system-alist 'file "\\.txt\\'" 'china-iso-8bit)
mule.texi(,543) @end smallexample
mule.texi(,544) 
mule.texi(,545) @noindent
mule.texi(,546) The first argument should be @code{file}, the second argument should be
mule.texi(,547) a regular expression that determines which files this applies to, and
mule.texi(,548) the third argument says which coding system to use for these files.
mule.texi(,549) 
mule.texi(,550) @vindex coding
mule.texi(,551)   You can specify the coding system for a particular file using the
mule.texi(,552) @samp{-*-@dots{}-*-} construct at the beginning of a file, or a local
mule.texi(,553) variables list at the end (@pxref{File Variables}).  You do this by
mule.texi(,554) defining a value for the ``variable'' named @code{coding}.  XEmacs does
mule.texi(,555) not really have a variable @code{coding}; instead of setting a variable,
mule.texi(,556) it uses the specified coding system for the file.  For example,
mule.texi(,557) @samp{-*-mode: C; coding: iso-8859-1;-*-} specifies use of the
mule.texi(,558) iso-8859-1 coding system, as well as C mode.
mule.texi(,559) 
mule.texi(,560) @vindex buffer-file-coding-system
mule.texi(,561)   Once XEmacs has chosen a coding system for a buffer, it stores that
mule.texi(,562) coding system in @code{buffer-file-coding-system} and uses that coding
mule.texi(,563) system, by default, for operations that write from this buffer into a
mule.texi(,564) file.  This includes the commands @code{save-buffer} and
mule.texi(,565) @code{write-region}.  If you want to write files from this buffer using
mule.texi(,566) a different coding system, you can specify a different coding system for
mule.texi(,567) the buffer using @code{set-buffer-file-coding-system} (@pxref{Specify
mule.texi(,568) Coding}).
mule.texi(,569) 
mule.texi(,570) 
mule.texi(,571) @node Specify Coding,  , Recognize Coding, Mule
mule.texi(,572) @section Specifying a Coding System
mule.texi(,573) 
mule.texi(,574)   In cases where XEmacs does not automatically choose the right coding
mule.texi(,575) system, you can use these commands to specify one:
mule.texi(,576) 
mule.texi(,577) @table @kbd
mule.texi(,578) @item C-x @key{RET} f @var{coding} @key{RET}
mule.texi(,579) Use coding system @var{coding} for the visited file
mule.texi(,580) in the current buffer.
mule.texi(,581) 
mule.texi(,582) @item C-x @key{RET} c @var{coding} @key{RET}
mule.texi(,583) Specify coding system @var{coding} for the immediately following
mule.texi(,584) command.
mule.texi(,585) 
mule.texi(,586) @item C-x @key{RET} k @var{coding} @key{RET}
mule.texi(,587) Use coding system @var{coding} for keyboard input.  (This feature is
mule.texi(,588) non-functional and is temporarily disabled.)
mule.texi(,589) 
mule.texi(,590) @item C-x @key{RET} t @var{coding} @key{RET}
mule.texi(,591) Use coding system @var{coding} for terminal output.
mule.texi(,592) 
mule.texi(,593) @item C-x @key{RET} p @var{coding} @key{RET}
mule.texi(,594) Use coding system @var{coding} for subprocess input and output
mule.texi(,595) in the current buffer.
mule.texi(,596) @end table
mule.texi(,597) 
mule.texi(,598) @kindex C-x RET f
mule.texi(,599) @findex set-buffer-file-coding-system
mule.texi(,600)   The command @kbd{C-x RET f} (@code{set-buffer-file-coding-system})
mule.texi(,601) specifies the file coding system for the current buffer---in other
mule.texi(,602) words, which coding system to use when saving or rereading the visited
mule.texi(,603) file.  You specify which coding system using the minibuffer.  Since this
mule.texi(,604) command applies to a file you have already visited, it affects only the
mule.texi(,605) way the file is saved.
mule.texi(,606) 
mule.texi(,607) @kindex C-x RET c
mule.texi(,608) @findex universal-coding-system-argument
mule.texi(,609)   Another way to specify the coding system for a file is when you visit
mule.texi(,610) the file.  First use the command @kbd{C-x @key{RET} c}
mule.texi(,611) (@code{universal-coding-system-argument}); this command uses the
mule.texi(,612) minibuffer to read a coding system name.  After you exit the minibuffer,
mule.texi(,613) the specified coding system is used for @emph{the immediately following
mule.texi(,614) command}.
mule.texi(,615) 
mule.texi(,616)   So if the immediately following command is @kbd{C-x C-f}, for example,
mule.texi(,617) it reads the file using that coding system (and records the coding
mule.texi(,618) system for when the file is saved).  Or if the immediately following
mule.texi(,619) command is @kbd{C-x C-w}, it writes the file using that coding system.
mule.texi(,620) Other file commands affected by a specified coding system include
mule.texi(,621) @kbd{C-x C-i} and @kbd{C-x C-v}, as well as the other-window variants of
mule.texi(,622) @kbd{C-x C-f}.
mule.texi(,623) 
mule.texi(,624)   In addition, if you run some file input commands with the precedent
mule.texi(,625) @kbd{C-u}, you can specify coding system to read from minibuffer.  So if
mule.texi(,626) the immediately following command is @kbd{C-x C-f}, for example, it
mule.texi(,627) reads the file using that coding system (and records the coding system
mule.texi(,628) for when the file is saved).  Other file commands affected by a
mule.texi(,629) specified coding system include @kbd{C-x C-i} and @kbd{C-x C-v}, as well
mule.texi(,630) as the other-window variants of @kbd{C-x C-f}.
mule.texi(,631) 
mule.texi(,632) @vindex default-buffer-file-coding-system
mule.texi(,633)   The variable @code{default-buffer-file-coding-system} specifies the
mule.texi(,634) choice of coding system to use when you create a new file.  It applies
mule.texi(,635) when you find a new file, and when you create a buffer and then save it
mule.texi(,636) in a file.  Selecting a language environment typically sets this
mule.texi(,637) variable to a good choice of default coding system for that language
mule.texi(,638) environment.
mule.texi(,639) 
mule.texi(,640) @kindex C-x RET t
mule.texi(,641) @findex set-terminal-coding-system
mule.texi(,642)   The command @kbd{C-x @key{RET} t} (@code{set-terminal-coding-system})
mule.texi(,643) specifies the coding system for terminal output.  If you specify a
mule.texi(,644) character code for terminal output, all characters output to the
mule.texi(,645) terminal are translated into that coding system.
mule.texi(,646) 
mule.texi(,647)   This feature is useful for certain character-only terminals built to
mule.texi(,648) support specific languages or character sets---for example, European
mule.texi(,649) terminals that support one of the ISO Latin character sets.
mule.texi(,650) 
mule.texi(,651)   By default, output to the terminal is not translated at all.
mule.texi(,652) 
mule.texi(,653) @kindex C-x RET k
mule.texi(,654) @findex set-keyboard-coding-system
mule.texi(,655)   The command @kbd{C-x @key{RET} k} (@code{set-keyboard-coding-system})
mule.texi(,656) specifies the coding system for keyboard input.  Character-code
mule.texi(,657) translation of keyboard input is useful for terminals with keys that
mule.texi(,658) send non-ASCII graphic characters---for example, some terminals designed
mule.texi(,659) for ISO Latin-1 or subsets of it.
mule.texi(,660) 
mule.texi(,661)   By default, keyboard input is not translated at all.
mule.texi(,662) 
mule.texi(,663)   There is a similarity between using a coding system translation for
mule.texi(,664) keyboard input, and using an input method: both define sequences of
mule.texi(,665) keyboard input that translate into single characters.  However, input
mule.texi(,666) methods are designed to be convenient for interactive use by humans, and
mule.texi(,667) the sequences that are translated are typically sequences of ASCII
mule.texi(,668) printing characters.  Coding systems typically translate sequences of
mule.texi(,669) non-graphic characters.
mule.texi(,670) 
mule.texi(,671) (This feature is non-functional and is temporarily disabled.)
mule.texi(,672) 
mule.texi(,673) @kindex C-x RET p
mule.texi(,674) @findex set-buffer-process-coding-system
mule.texi(,675)   The command @kbd{C-x @key{RET} p} (@code{set-buffer-process-coding-system})
mule.texi(,676) specifies the coding system for input and output to a subprocess.  This
mule.texi(,677) command applies to the current buffer; normally, each subprocess has its
mule.texi(,678) own buffer, and thus you can use this command to specify translation to
mule.texi(,679) and from a particular subprocess by giving the command in the
mule.texi(,680) corresponding buffer.
mule.texi(,681) 
mule.texi(,682)   By default, process input and output are not translated at all.
mule.texi(,683) 
mule.texi(,684) @vindex file-name-coding-system
mule.texi(,685)   The variable @code{file-name-coding-system} specifies a coding system
mule.texi(,686) to use for encoding file names.  If you set the variable to a coding
mule.texi(,687) system name (as a Lisp symbol or a string), XEmacs encodes file names
mule.texi(,688) using that coding system for all file operations.  This makes it
mule.texi(,689) possible to use non-Latin-1 characters in file names---or, at least,
mule.texi(,690) those non-Latin-1 characters which the specified coding system can
mule.texi(,691) encode.  By default, this variable is @code{nil}, which implies that you
mule.texi(,692) cannot use non-Latin-1 characters in file names.
major.texi(,1) 
major.texi(,2) @node Major Modes, Indentation, Mule, Top
major.texi(,3) @chapter Major Modes
major.texi(,4) @cindex major modes
major.texi(,5) @kindex TAB
major.texi(,6) @kindex DEL
major.texi(,7) @kindex LFD
major.texi(,8) 
major.texi(,9)   Emacs has many different @dfn{major modes}, each of which customizes
major.texi(,10) Emacs for editing text of a particular sort.  The major modes are mutually
major.texi(,11) exclusive;  at any time, each buffer has one major mode.  The mode line
major.texi(,12) normally contains the name of the current major mode in parentheses.
major.texi(,13) @xref{Mode Line}.
major.texi(,14) 
major.texi(,15)   The least specialized major mode is called @dfn{Fundamental mode}.  This
major.texi(,16) mode has no mode-specific redefinitions or variable settings.  Each
major.texi(,17) Emacs command behaves in its most general manner, and each option is in its
major.texi(,18) default state.  For editing any specific type of text, such as Lisp code or
major.texi(,19) English text, you should switch to the appropriate major mode, such as Lisp
major.texi(,20) mode or Text mode.
major.texi(,21) 
major.texi(,22)   Selecting a major mode changes the meanings of a few keys to become
major.texi(,23) more specifically adapted to the language being edited.  @key{TAB},
major.texi(,24) @key{DEL}, and @key{LFD} are changed frequently.  In addition, commands
major.texi(,25) which handle comments use the mode to determine how to delimit comments.
major.texi(,26) Many major modes redefine the syntactical properties of characters
major.texi(,27) appearing in the buffer.  @xref{Syntax}.
major.texi(,28) 
major.texi(,29)   The major modes fall into three major groups.  Lisp mode (which has
major.texi(,30) several variants), C mode, and Muddle mode are for specific programming
major.texi(,31) languages.  Text mode, Nroff mode, @TeX{} mode, and Outline mode are for
major.texi(,32) editing English text.  The remaining major modes are not intended for use
major.texi(,33) on users' files; they are used in buffers created by Emacs for specific
major.texi(,34) purposes and include Dired mode for buffers made by Dired (@pxref{Dired}),
major.texi(,35) Mail mode for buffers made by @kbd{C-x m} (@pxref{Sending Mail}), and Shell
major.texi(,36) mode for buffers used for communicating with an inferior shell process
major.texi(,37) (@pxref{Interactive Shell}).
major.texi(,38) 
major.texi(,39)   Most programming language major modes specify that only blank lines
major.texi(,40) separate paragraphs.  This is so that the paragraph commands remain useful.
major.texi(,41) @xref{Paragraphs}.  They also cause Auto Fill mode to use the definition of
major.texi(,42) @key{TAB} to indent the new lines it creates.  This is because most lines
major.texi(,43) in a program are usually indented.  @xref{Indentation}.
major.texi(,44) 
major.texi(,45) @menu
major.texi(,46) * Choosing Modes::     How major modes are specified or chosen.
major.texi(,47) @end menu
major.texi(,48) 
major.texi(,49) @node Choosing Modes,,Major Modes,Major Modes
major.texi(,50) @section Choosing Major Modes
major.texi(,51) 
major.texi(,52)   You can select a major mode explicitly for the current buffer, but
major.texi(,53) most of the time Emacs determines which mode to use based on the file
major.texi(,54) name or some text in the file.
major.texi(,55) 
major.texi(,56)   Use a @kbd{M-x} command to explicitly select a new major mode.  Add
major.texi(,57) @code{-mode} to the name of a major mode to get the name of a command to
major.texi(,58) select that mode.  For example, to enter Lisp mode, execute @kbd{M-x
major.texi(,59) lisp-mode}.
major.texi(,60) 
major.texi(,61) @vindex auto-mode-alist
major.texi(,62)   When you visit a file, Emacs usually chooses the right major mode
major.texi(,63) based on the file's name.  For example, files whose names end in
major.texi(,64) @code{.c} are edited in C mode.  The variable @code{auto-mode-alist}
major.texi(,65) controls the correspondence between file names and major mode.  Its value
major.texi(,66) is a list in which each element has the form:
major.texi(,67) 
major.texi(,68) @example
major.texi(,69) (@var{regexp} . @var{mode-function})
major.texi(,70) @end example
major.texi(,71) 
major.texi(,72) @noindent
major.texi(,73) For example, one element normally found in the list has the form
major.texi(,74) @code{(@t{"\\.c$"} . c-mode)}. It is responsible for selecting C mode
major.texi(,75) for files whose names end in @file{.c}.  (Note that @samp{\\} is needed in
major.texi(,76) Lisp syntax to include a @samp{\} in the string, which is needed to
major.texi(,77) suppress the special meaning of @samp{.} in regexps.)  The only practical
major.texi(,78) way to change this variable is with Lisp code.
major.texi(,79) 
major.texi(,80)   You can specify which major mode should be used for editing a certain
major.texi(,81) file by a special sort of text in the first non-blank line of the file.
major.texi(,82) The mode name should appear in this line both preceded and followed by
major.texi(,83) @samp{-*-}.  Other text may appear on the line as well.  For example,
major.texi(,84) 
major.texi(,85) @example
major.texi(,86) ;-*-Lisp-*-
major.texi(,87) @end example
major.texi(,88) 
major.texi(,89) @noindent
major.texi(,90) tells Emacs to use Lisp mode.  Note how the semicolon is used to make Lisp
major.texi(,91) treat this line as a comment.  Such an explicit specification overrides any
major.texi(,92) default mode based on the file name.
major.texi(,93) 
major.texi(,94)   Another format of mode specification is:
major.texi(,95) 
major.texi(,96) @example
major.texi(,97) -*-Mode: @var{modename};-*-
major.texi(,98) @end example
major.texi(,99) 
major.texi(,100) @noindent
major.texi(,101) which allows other things besides the major mode name to be specified.
major.texi(,102) However, Emacs does not look for anything except the mode name.
major.texi(,103) 
major.texi(,104) The major mode can also be specified in a local variables list.
major.texi(,105) @xref{File Variables}.
major.texi(,106) 
major.texi(,107) @vindex default-major-mode
major.texi(,108)   When you visit a file that does not specify a major mode to use, or
major.texi(,109) when you create a new buffer with @kbd{C-x b}, Emacs uses the major mode
major.texi(,110) specified by the variable @code{default-major-mode}.  Normally this
major.texi(,111) value is the symbol @code{fundamental-mode}, which specifies Fundamental
major.texi(,112) mode.  If @code{default-major-mode} is @code{nil}, the major mode is
major.texi(,113) taken from the previously selected buffer.
indent.texi(,1) 
indent.texi(,2) @node Indentation, Text, Major Modes, Top
indent.texi(,3) @chapter Indentation
indent.texi(,4) @cindex indentation
indent.texi(,5) 
indent.texi(,6) @c WideCommands
indent.texi(,7) @table @kbd
indent.texi(,8) @item @key{TAB}
indent.texi(,9) Indent current line ``appropriately'' in a mode-dependent fashion.
indent.texi(,10) @item @key{LFD}
indent.texi(,11) Perform @key{RET} followed by @key{TAB} (@code{newline-and-indent}).
indent.texi(,12) @item M-^
indent.texi(,13) Merge two lines (@code{delete-indentation}).  This would cancel out
indent.texi(,14) the effect of @key{LFD}.
indent.texi(,15) @item C-M-o
indent.texi(,16) Split line at point; text on the line after point becomes a new line
indent.texi(,17) indented to the same column that it now starts in (@code{split-line}).
indent.texi(,18) @item M-m
indent.texi(,19) Move (forward or back) to the first non-blank character on the current
indent.texi(,20) line (@code{back-to-indentation}).
indent.texi(,21) @item C-M-\
indent.texi(,22) Indent several lines to same column (@code{indent-region}).
indent.texi(,23) @item C-x @key{TAB}
indent.texi(,24) Shift block of lines rigidly right or left (@code{indent-rigidly}).
indent.texi(,25) @item M-i
indent.texi(,26) Indent from point to the next prespecified tab stop column
indent.texi(,27) (@code{tab-to-tab-stop}).
indent.texi(,28) @item M-x indent-relative
indent.texi(,29) Indent from point to under an indentation point in the previous line.
indent.texi(,30) @end table
indent.texi(,31) 
indent.texi(,32) @kindex TAB
indent.texi(,33) @cindex indentation
indent.texi(,34)   Most programming languages have some indentation convention.  For Lisp
indent.texi(,35) code, lines are indented according to their nesting in parentheses.  The
indent.texi(,36) same general idea is used for C code, though details differ.
indent.texi(,37) 
indent.texi(,38)    Use the @key{TAB} command to indent a line whatever the language.
indent.texi(,39) Each major mode defines this command to perform indentation appropriate
indent.texi(,40) for the particular language.  In Lisp mode, @key{TAB} aligns a line
indent.texi(,41) according to its depth in parentheses.  No matter where in the line you
indent.texi(,42) are when you type @key{TAB}, it aligns the line as a whole.  In C mode,
indent.texi(,43) @key{TAB} implements a subtle and sophisticated indentation style that
indent.texi(,44) knows about many aspects of C syntax.
indent.texi(,45) 
indent.texi(,46) @kindex TAB
indent.texi(,47)   In Text mode, @key{TAB} runs the command @code{tab-to-tab-stop}, which
indent.texi(,48) indents to the next tab stop column.  You can set the tab stops with
indent.texi(,49) @kbd{M-x edit-tab-stops}.
indent.texi(,50) 
indent.texi(,51) @menu
indent.texi(,52) * Indentation Commands:: Various commands and techniques for indentation.
indent.texi(,53) * Tab Stops::            You can set arbitrary "tab stops" and then
indent.texi(,54)                          indent to the next tab stop when you want to.
indent.texi(,55) * Just Spaces::          You can request indentation using just spaces.
indent.texi(,56) @end menu
indent.texi(,57) 
indent.texi(,58) @node Indentation Commands, Tab Stops, Indentation, Indentation
indent.texi(,59) @section Indentation Commands and Techniques
indent.texi(,60) @c ??? Explain what Emacs has instead of space-indent-flag.
indent.texi(,61) 
indent.texi(,62)   If you just want to insert a tab character in the buffer, you can type
indent.texi(,63) @kbd{C-q @key{TAB}}.
indent.texi(,64) 
indent.texi(,65) @kindex M-m
indent.texi(,66) @findex back-to-indentation
indent.texi(,67)   To move over the indentation on a line, type @kbd{Meta-m}
indent.texi(,68) (@code{back-to-indentation}).  This command, given anywhere on a line,
indent.texi(,69) positions point at the first non-blank character on the line.
indent.texi(,70) 
indent.texi(,71)   To insert an indented line before the current line, type @kbd{C-a C-o
indent.texi(,72) @key{TAB}}.  To make an indented line after the current line, use
indent.texi(,73) @kbd{C-e @key{LFD}}.
indent.texi(,74) 
indent.texi(,75) @kindex C-M-o
indent.texi(,76) @findex split-line
indent.texi(,77)   @kbd{C-M-o} (@code{split-line}) moves the text from point to the end of
indent.texi(,78) the line vertically down, so that the current line becomes two lines.
indent.texi(,79) @kbd{C-M-o} first moves point forward over any spaces and tabs.  Then it
indent.texi(,80) inserts after point a newline and enough indentation to reach the same
indent.texi(,81) column point is on.  Point remains before the inserted newline; in this
indent.texi(,82) regard, @kbd{C-M-o} resembles @kbd{C-o}.
indent.texi(,83) 
indent.texi(,84) @kindex M-\
indent.texi(,85) @kindex M-^
indent.texi(,86) @findex delete-horizontal-space
indent.texi(,87) @findex delete-indentation
indent.texi(,88)   To join two lines cleanly, use the @kbd{Meta-^}
indent.texi(,89) (@code{delete-indentation}) command to delete the indentation at the
indent.texi(,90) front of the current line, and the line boundary as well.  Empty spaces
indent.texi(,91) are replaced by a single space, or by no space if at the beginning of a
indent.texi(,92) line, before a close parenthesis, or after an open parenthesis.  
indent.texi(,93) To delete just the indentation of a line, go to the beginning of the 
indent.texi(,94) line and use @kbd{Meta-\} (@code{delete-horizontal-space}), which 
indent.texi(,95) deletes all spaces and tabs around the cursor.
indent.texi(,96) 
indent.texi(,97) @kindex C-M-\
indent.texi(,98) @kindex C-x TAB
indent.texi(,99) @findex indent-region
indent.texi(,100) @findex indent-rigidly
indent.texi(,101)   There are also commands for changing the indentation of several lines at
indent.texi(,102) once.  @kbd{Control-Meta-\} (@code{indent-region}) gives each line which
indent.texi(,103) begins in the region the ``usual'' indentation by invoking @key{TAB} at the
indent.texi(,104) beginning of the line.  A numeric argument specifies the column to indent
indent.texi(,105) to.  Each line is shifted left or right so that its first non-blank
indent.texi(,106) character appears in that column.  @kbd{C-x @key{TAB}}
indent.texi(,107) (@code{indent-rigidly}) moves all the lines in the region right by its
indent.texi(,108) argument (left, for negative arguments).  The whole group of lines moves
indent.texi(,109) rigidly sideways, which is how the command gets its name.@refill
indent.texi(,110) 
indent.texi(,111) @findex indent-relative
indent.texi(,112)   @kbd{M-x indent-relative} indents at point based on the previous line
indent.texi(,113) (actually, the last non-empty line.)  It inserts whitespace at point, moving
indent.texi(,114) point, until it is underneath an indentation point in the previous line.
indent.texi(,115) An indentation point is the end of a sequence of whitespace or the end of
indent.texi(,116) the line.  If point is farther right than any indentation point in the
indent.texi(,117) previous line, the whitespace before point is deleted and the first
indent.texi(,118) indentation point then applicable is used.  If no indentation point is
indent.texi(,119) applicable even then, @code{tab-to-tab-stop} is run (see next section).
indent.texi(,120) 
indent.texi(,121)   @code{indent-relative} is the definition of @key{TAB} in Indented Text
indent.texi(,122) mode.  @xref{Text}.
indent.texi(,123) 
indent.texi(,124) @node Tab Stops, Just Spaces, Indentation Commands, Indentation
indent.texi(,125) @section Tab Stops
indent.texi(,126) 
indent.texi(,127) @kindex M-i
indent.texi(,128) @findex tab-to-tab-stop
indent.texi(,129)   For typing in tables, you can use Text mode's definition of @key{TAB},
indent.texi(,130) @code{tab-to-tab-stop}.  This command inserts indentation before point,
indent.texi(,131) enough to reach the next tab stop column.  Even if you are not in Text mode,
indent.texi(,132) this function is associated with @kbd{M-i} anyway.
indent.texi(,133) 
indent.texi(,134) @findex edit-tab-stops
indent.texi(,135) @findex edit-tab-stops-note-changes
indent.texi(,136) @kindex C-c C-c (Edit Tab Stops)
indent.texi(,137) @vindex tab-stop-list
indent.texi(,138)   You can arbitrarily set the tab stops used by @kbd{M-i}.  They are
indent.texi(,139) stored as a list of column-numbers in increasing order in the variable
indent.texi(,140) @code{tab-stop-list}.
indent.texi(,141) 
indent.texi(,142)   The convenient way to set the tab stops is using @kbd{M-x edit-tab-stops},
indent.texi(,143) which creates and selects a buffer containing a description of the tab stop
indent.texi(,144) settings.  You can edit this buffer to specify different tab stops, and
indent.texi(,145) then type @kbd{C-c C-c} to make those new tab stops take effect.  In the
indent.texi(,146) tab stop buffer, @kbd{C-c C-c} runs the function
indent.texi(,147) @code{edit-tab-stops-note-changes} rather than the default
indent.texi(,148) @code{save-buffer}.  @code{edit-tab-stops} records which buffer was current
indent.texi(,149) when you invoked it, and stores the tab stops in that buffer.  Normally
indent.texi(,150) all buffers share the same tab stops and changing them in one buffer
indent.texi(,151) affects all.  If you make @code{tab-stop-list} local in one
indent.texi(,152) buffer @code{edit-tab-stops} in that buffer edits only the local
indent.texi(,153) settings.
indent.texi(,154) 
indent.texi(,155)   Below is the text representing ordinary tab stops every eight columns:
indent.texi(,156) 
indent.texi(,157) @example
indent.texi(,158)         :       :       :       :       :       :
indent.texi(,159) 0         1         2         3         4
indent.texi(,160) 0123456789012345678901234567890123456789012345678
indent.texi(,161) To install changes, type C-c C-c
indent.texi(,162) @end example
indent.texi(,163) 
indent.texi(,164)   The first line contains a colon at each tab stop.  The remaining lines
indent.texi(,165) help you see where the colons are and tell you what to do.
indent.texi(,166) 
indent.texi(,167)   Note that the tab stops that control @code{tab-to-tab-stop} have nothing
indent.texi(,168) to do with displaying tab characters in the buffer.  @xref{Display Vars},
indent.texi(,169) for more information on that.
indent.texi(,170) 
indent.texi(,171) @node Just Spaces,, Tab Stops, Indentation
indent.texi(,172) @section Tabs vs. Spaces
indent.texi(,173) 
indent.texi(,174) @vindex indent-tabs-mode
indent.texi(,175)   Emacs normally uses both tabs and spaces to indent lines.  If you prefer,
indent.texi(,176) all indentation can be made from spaces only.  To request this, set
indent.texi(,177) @code{indent-tabs-mode} to @code{nil}.  This is a per-buffer variable;
indent.texi(,178) altering the variable affects only the current buffer, but there is a
indent.texi(,179) default value which you can change as well.  @xref{Locals}.
indent.texi(,180) 
indent.texi(,181) @findex tabify
indent.texi(,182) @findex untabify
indent.texi(,183)   There are also commands to convert tabs to spaces or vice versa, always
indent.texi(,184) preserving the columns of all non-blank text.  @kbd{M-x tabify} scans the
indent.texi(,185) region for sequences of spaces, and converts sequences of at least three
indent.texi(,186) spaces to tabs if that is possible without changing indentation.  @kbd{M-x
indent.texi(,187) untabify} changes all tabs in the region to corresponding numbers of spaces.
text.texi(,1) 
text.texi(,2) @node Text, Programs, Indentation, Top
text.texi(,3) @chapter Commands for Human Languages
text.texi(,4) @cindex text
text.texi(,5) 
text.texi(,6)   The term @dfn{text} has two widespread meanings in our area of the
text.texi(,7) computer field.  One is data that is a sequence of characters.  In this
text.texi(,8) sense of the word any file that you edit with Emacs is text.  The other
text.texi(,9) meaning is more restrictive: a sequence of characters in a human
text.texi(,10) language for humans to read (possibly after processing by a text
text.texi(,11) formatter), as opposed to a program or commands for a program.
text.texi(,12) 
text.texi(,13)   Human languages have syntactic and stylistic conventions that editor
text.texi(,14) commands should support or use to advantage: conventions involving
text.texi(,15) words, sentences, paragraphs, and capital letters.  This chapter describes
text.texi(,16) Emacs commands for all these things.  There are also commands for
text.texi(,17) @dfn{filling}, or rearranging paragraphs into lines of approximately equal
text.texi(,18) length.  The commands for moving over and killing words, sentences,
text.texi(,19) and paragraphs, while intended primarily for editing text, are also often
text.texi(,20) useful for editing programs.
text.texi(,21) 
text.texi(,22)   Emacs has several major modes for editing human language text.
text.texi(,23) If a file contains plain text, use Text mode, which customizes
text.texi(,24) Emacs in small ways for the syntactic conventions of text.  For text which
text.texi(,25) contains embedded commands for text formatters, Emacs has other major modes,
text.texi(,26) each for a particular text formatter.  Thus, for input to @TeX{}, you can
text.texi(,27) use @TeX{} mode; for input to nroff, Nroff mode.
text.texi(,28) 
text.texi(,29) @menu
text.texi(,30) * Text Mode::   The major modes for editing text files.
text.texi(,31) * Nroff Mode::  The major mode for editing input to the formatter nroff.
text.texi(,32) * TeX Mode::    The major modes for editing input to the formatter TeX.
text.texi(,33) * Outline Mode:: The major mode for editing outlines.
text.texi(,34) * Words::       Moving over and killing words.
text.texi(,35) * Sentences::   Moving over and killing sentences.
text.texi(,36) * Paragraphs::	Moving over paragraphs.
text.texi(,37) * Pages::	Moving over pages.
text.texi(,38) * Filling::     Filling or justifying text
text.texi(,39) * Case::        Changing the case of text
text.texi(,40) @end menu
text.texi(,41) 
text.texi(,42) @node Text Mode, Words, Text, Text
text.texi(,43) @section Text Mode
text.texi(,44) 
text.texi(,45) @findex tab-to-tab-stop
text.texi(,46) @findex edit-tab-stops
text.texi(,47) @cindex Text mode
text.texi(,48) @kindex TAB
text.texi(,49) @findex text-mode
text.texi(,50)   You should use Text mode---rather than Fundamental or Lisp mode---to
text.texi(,51) edit files of text in a human language.  Invoke @kbd{M-x text-mode} to
text.texi(,52) enter Text mode.  In Text mode, @key{TAB} runs the function
text.texi(,53) @code{tab-to-tab-stop}, which allows you to use arbitrary tab stops set
text.texi(,54) with @kbd{M-x edit-tab-stops} (@pxref{Tab Stops}).  Features concerned
text.texi(,55) with comments in programs are turned off unless they are explicitly invoked.
text.texi(,56) The syntax table is changed so that periods are not considered part of a
text.texi(,57) word, while apostrophes, backspaces and underlines are.
text.texi(,58) 
text.texi(,59) @findex indented-text-mode
text.texi(,60)   A similar variant mode is Indented Text mode, intended for editing
text.texi(,61) text in which most lines are indented.  This mode defines @key{TAB} to
text.texi(,62) run @code{indent-relative} (@pxref{Indentation}), and makes Auto Fill
text.texi(,63) indent the lines it creates.  As a result, a line made by Auto Filling,
text.texi(,64) or by @key{LFD}, is normally indented just like the previous line.  Use
text.texi(,65) @kbd{M-x indented-text-mode} to select this mode.
text.texi(,66) 
text.texi(,67) @vindex text-mode-hook
text.texi(,68)   Entering Text mode or Indented Text mode calls the value of the
text.texi(,69) variable @code{text-mode-hook} with no arguments, if that value exists
text.texi(,70) and is not @code{nil}.  This value is also called when modes related to
text.texi(,71) Text mode are entered; this includes Nroff mode, @TeX{} mode, Outline
text.texi(,72) mode, and Mail mode.  Your hook can look at the value of
text.texi(,73) @code{major-mode} to see which of these modes is actually being entered.
text.texi(,74) 
text.texi(,75)   Two modes similar to Text mode are of use for editing text that is to
text.texi(,76) be passed through a text formatter before achieving its final readable form.
text.texi(,77) 
text.texi(,78) @menu
text.texi(,79) * Nroff Mode::  The major mode for editing input to the formatter nroff.
text.texi(,80) * TeX Mode::    The major modes for editing input to the formatter TeX.
text.texi(,81) 
text.texi(,82) 
text.texi(,83)   Another similar mode is used for editing outlines.  It allows you
text.texi(,84) to view the text at various levels of detail.  You can view either
text.texi(,85) the outline headings alone or both headings and text; you can also
text.texi(,86) hide some of the headings at lower levels from view to make the high
text.texi(,87) level structure more visible.
text.texi(,88) 
text.texi(,89) 
text.texi(,90) * Outline Mode:: The major mode for editing outlines.
text.texi(,91) @end menu
text.texi(,92) 
text.texi(,93) @node Nroff Mode, TeX Mode, Text Mode, Text Mode
text.texi(,94) @subsection Nroff Mode
text.texi(,95) 
text.texi(,96) @cindex nroff
text.texi(,97) @findex nroff-mode
text.texi(,98)   Nroff mode is a mode like Text mode but modified to handle nroff
text.texi(,99) commands present in the text.  Invoke @kbd{M-x nroff-mode} to enter this
text.texi(,100) mode.  Nroff mode differs from Text mode in only a few ways.  All nroff
text.texi(,101) command lines are considered paragraph separators, so that filling never
text.texi(,102) garbles the nroff commands.  Pages are separated by @samp{.bp} commands.
text.texi(,103) Comments start with backslash-doublequote.  There are also three special
text.texi(,104) commands that are not available in Text mode:
text.texi(,105) 
text.texi(,106) @findex forward-text-line
text.texi(,107) @findex backward-text-line
text.texi(,108) @findex count-text-lines
text.texi(,109) @kindex M-n
text.texi(,110) @kindex M-p
text.texi(,111) @kindex M-?
text.texi(,112) @table @kbd
text.texi(,113) @item M-n
text.texi(,114) Move to the beginning of the next line that isn't an nroff command
text.texi(,115) (@code{forward-text-line}).  An argument is a repeat count.
text.texi(,116) @item M-p
text.texi(,117) Like @kbd{M-n} but move up (@code{backward-text-line}).
text.texi(,118) @item M-?
text.texi(,119) Prints in the echo area the number of text lines (lines that are not
text.texi(,120) nroff commands) in the region (@code{count-text-lines}).
text.texi(,121) @end table
text.texi(,122) 
text.texi(,123) @findex electric-nroff-mode
text.texi(,124)   The other feature of Nroff mode is Electric Nroff newline mode.  
text.texi(,125) This is a minor mode that you can turn on or off with
text.texi(,126) @kbd{M-x electric-nroff-mode} (@pxref{Minor Modes}).  When the mode is
text.texi(,127) on and you use @key{RET} to end a line containing an nroff command
text.texi(,128) that opens a kind of grouping, Emacs automatically inserts the matching
text.texi(,129) nroff command to close that grouping on the following line.  For
text.texi(,130) example, if you are at the beginning of a line and type @kbd{.@:(b
text.texi(,131) @key{RET}}, the matching command @samp{.)b} will be inserted on a new
text.texi(,132) line following point.
text.texi(,133) 
text.texi(,134) @vindex nroff-mode-hook
text.texi(,135)   Entering Nroff mode calls the value of the variable
text.texi(,136) @code{text-mode-hook} with no arguments, if that value exists and is not
text.texi(,137) @code{nil}; then it does the same with the variable
text.texi(,138) @code{nroff-mode-hook}.
text.texi(,139) 
text.texi(,140) @node TeX Mode, Outline Mode, Nroff Mode, Text Mode
text.texi(,141) @subsection @TeX{} Mode
text.texi(,142) @cindex TeX
text.texi(,143) @cindex LaTeX
text.texi(,144) @findex TeX-mode
text.texi(,145) @findex tex-mode
text.texi(,146) @findex plain-tex-mode
text.texi(,147) @findex LaTeX-mode
text.texi(,148) @findex plain-TeX-mode
text.texi(,149) @findex latex-mode
text.texi(,150) 
text.texi(,151)   @TeX{} is a powerful text formatter written by Donald Knuth; like GNU
text.texi(,152) Emacs, it is free.  La@TeX{} is a simplified input format for @TeX{},
text.texi(,153) implemented by @TeX{} macros.  It is part of @TeX{}.@refill
text.texi(,154) 
text.texi(,155)   Emacs has a special @TeX{} mode for editing @TeX{} input files.
text.texi(,156) It provides facilities for checking the balance of delimiters and for
text.texi(,157) invoking @TeX{} on all or part of the file.
text.texi(,158) 
text.texi(,159)   @TeX{} mode has two variants, Plain @TeX{} mode and La@TeX{} mode,
text.texi(,160) which are two distinct major modes that differ only slightly.  These
text.texi(,161) modes are designed for editing the two different input formats.  The
text.texi(,162) command @kbd{M-x tex-mode} looks at the contents of a buffer to
text.texi(,163) determine whether it appears to be La@TeX{} input or not; it then
text.texi(,164) selects the appropriate mode.  If it can't tell which is right (e.g.,
text.texi(,165) the buffer is empty), the variable @code{tex-default-mode} controls
text.texi(,166) which mode is used.
text.texi(,167) 
text.texi(,168)   The commands @kbd{M-x plain-tex-mode} and @kbd{M-x latex-mode}
text.texi(,169) explicitly select one of the variants of @TeX{} mode.  Use these
text.texi(,170) commands when @kbd{M-x tex-mode} does not guess right.@refill
text.texi(,171) 
text.texi(,172) @menu
text.texi(,173) * Editing: TeX Editing.   Special commands for editing in TeX mode.
text.texi(,174) * Printing: TeX Print.    Commands for printing part of a file with TeX.
text.texi(,175) @end menu
text.texi(,176) 
text.texi(,177)   @TeX{} for Unix systems can be obtained from the University of Washington
text.texi(,178) for a distribution fee.
text.texi(,179) 
text.texi(,180)   To order a full distribution, send $140.00 for a 1/2 inch
text.texi(,181) 9-track tape, $165.00 for two 4-track 1/4 inch cartridge tapes
text.texi(,182) (foreign sites $150.00, for 1/2 inch, $175.00 for 1/4 inch, to cover
text.texi(,183) the extra postage) payable to the University of Washington to:
text.texi(,184) 
text.texi(,185) @display
text.texi(,186) The Director
text.texi(,187) Northwest Computer Support Group,  DW-10
text.texi(,188) University of Washington
text.texi(,189) Seattle, Washington 98195
text.texi(,190) @end display
text.texi(,191) 
text.texi(,192) @noindent
text.texi(,193) Purchase orders are acceptable, but there is an extra charge of
text.texi(,194) $10.00 to pay for processing charges. (The total cost comes to $150 
text.texi(,195) for domestic sites, $175 for foreign sites).
text.texi(,196) 
text.texi(,197)   The normal distribution is a tar tape, blocked 20, 1600 bpi, on an
text.texi(,198) industry standard 2400 foot half-inch reel.  The physical format for
text.texi(,199) the 1/4 inch streamer cartridges uses QIC-11, 8000 bpi, 4-track
text.texi(,200) serpentine recording for the SUN.  Also, SystemV tapes can be written
text.texi(,201) in cpio format, blocked 5120 bytes, ASCII headers.
text.texi(,202) 
text.texi(,203) @node TeX Editing,TeX Print,TeX Mode,TeX Mode
text.texi(,204) @subsubsection @TeX{} Editing Commands
text.texi(,205) 
text.texi(,206)   Here are the special commands provided in @TeX{} mode for editing the
text.texi(,207) text of the file.
text.texi(,208) 
text.texi(,209) @table @kbd
text.texi(,210) @item "
text.texi(,211) Insert, according to context, either @samp{``} or @samp{"} or
text.texi(,212) @samp{''} (@code{TeX-insert-quote}).
text.texi(,213) @item @key{LFD}
text.texi(,214) Insert a paragraph break (two newlines) and check the previous
text.texi(,215) paragraph for unbalanced braces or dollar signs
text.texi(,216) (@code{tex-terminate-@*paragraph}).
text.texi(,217) @item M-x validate-tex-buffer
text.texi(,218) Check each paragraph in the buffer for unbalanced braces or dollar signs.
text.texi(,219) @item C-c @{
text.texi(,220) Insert @samp{@{@}} and position point between them (@code{tex-insert-braces}).
text.texi(,221) @item C-c @}
text.texi(,222) Move forward past the next unmatched close brace (@code{up-list}).
text.texi(,223) @item C-c C-e
text.texi(,224) Close a block for La@TeX{} (@code{tex-close-latex-block}).
text.texi(,225) @end table
text.texi(,226) 
text.texi(,227) @findex tex-insert-quote
text.texi(,228) @kindex " (TeX mode)
text.texi(,229)   In @TeX{}, the character @samp{"} is not normally used; you use @samp{``}
text.texi(,230) to start a quotation and @samp{''} to end one.  @TeX{} mode defines the key
text.texi(,231) @kbd{"} to insert @samp{``} after whitespace or an open brace, @samp{"}
text.texi(,232) after a backslash, or @samp{''} otherwise.  This is done by the command
text.texi(,233) @code{tex-insert-quote}.  If you need the character @samp{"} itself in
text.texi(,234) unusual contexts, use @kbd{C-q} to insert it.  Also, @kbd{"} with a
text.texi(,235) numeric argument always inserts that number of @samp{"} characters.
text.texi(,236) 
text.texi(,237)   In @TeX{} mode, @samp{$} has a special syntax code which attempts to
text.texi(,238) understand the way @TeX{} math mode delimiters match.  When you insert a
text.texi(,239) @samp{$} that is meant to exit math mode, the position of the matching
text.texi(,240) @samp{$} that entered math mode is displayed for a second.  This is the
text.texi(,241) same feature that displays the open brace that matches a close brace that
text.texi(,242) is inserted.  However, there is no way to tell whether a @samp{$} enters
text.texi(,243) math mode or leaves it; so when you insert a @samp{$} that enters math
text.texi(,244) mode, the previous @samp{$} position is shown as if it were a match, even
text.texi(,245) though they are actually unrelated.
text.texi(,246) 
text.texi(,247) @findex tex-insert-braces
text.texi(,248) @kindex C-c @{ (TeX mode)
text.texi(,249) @findex up-list
text.texi(,250) @kindex C-c @} (TeX mode)
text.texi(,251)   If you prefer to keep braces balanced at all times, you can use @kbd{C-c @{}
text.texi(,252) (@code{tex-insert-braces}) to insert a pair of braces.  It leaves point
text.texi(,253) between the two braces so you can insert the text that belongs inside.
text.texi(,254) Afterward, use the command @kbd{C-c @}} (@code{up-list}) to move forward
text.texi(,255) past the close brace.
text.texi(,256) 
text.texi(,257) @findex validate-tex-buffer
text.texi(,258) @findex tex-terminate-paragraph
text.texi(,259) @kindex LFD (TeX mode)
text.texi(,260)   There are two commands for checking the matching of braces.  @key{LFD}
text.texi(,261) (@code{tex-terminate-paragraph}) checks the paragraph before point, and
text.texi(,262) inserts two newlines to start a new paragraph.  It prints a message in the
text.texi(,263) echo area if any mismatch is found.  @kbd{M-x validate-tex-buffer} checks
text.texi(,264) the entire buffer, paragraph by paragraph.  When it finds a paragraph that
text.texi(,265) contains a mismatch, it displays point at the beginning of the paragraph
text.texi(,266) for a few seconds and pushes a mark at that spot.  Scanning continues
text.texi(,267) until the whole buffer has been checked or until you type another key.
text.texi(,268) The positions of the last several paragraphs with mismatches can be
text.texi(,269) found in the mark ring (@pxref{Mark Ring}).
text.texi(,270) 
text.texi(,271)   Note that square brackets and parentheses, not just braces, are
text.texi(,272) matched in @TeX{} mode.  This is wrong if you want to  check @TeX{} syntax.
text.texi(,273) However, parentheses and square brackets are likely to be used in text as
text.texi(,274) matching delimiters and it is useful for the various motion commands and
text.texi(,275) automatic match display to work with them.
text.texi(,276) 
text.texi(,277) @findex tex-close-latex-block
text.texi(,278) @kindex C-c C-f (LaTeX mode)
text.texi(,279)   In La@TeX{} input, @samp{\begin} and @samp{\end} commands must balance.
text.texi(,280) After you insert a @samp{\begin}, use @kbd{C-c C-f}
text.texi(,281) (@code{tex-close-latex-block}) to insert automatically a matching
text.texi(,282) @samp{\end} (on a new line following the @samp{\begin}).  A blank line is
text.texi(,283) inserted between the two, and point is left there.@refill
text.texi(,284) 
text.texi(,285) @node TeX Print,,TeX Editing,TeX Mode
text.texi(,286) @subsubsection @TeX{} Printing Commands
text.texi(,287) 
text.texi(,288)   You can invoke @TeX{} as an inferior of Emacs on either the entire
text.texi(,289) contents of the buffer or just a region at a time.  Running @TeX{} in
text.texi(,290) this way on just one chapter is a good way to see what your changes
text.texi(,291) look like without taking the time to format the entire file.
text.texi(,292) 
text.texi(,293) @table @kbd
text.texi(,294) @item C-c C-r
text.texi(,295) Invoke @TeX{} on the current region, plus the buffer's header
text.texi(,296) (@code{tex-region}).
text.texi(,297) @item C-c C-b
text.texi(,298) Invoke @TeX{} on the entire current buffer (@code{tex-buffer}).
text.texi(,299) @item C-c C-l
text.texi(,300) Recenter the window showing output from the inferior @TeX{} so that
text.texi(,301) the last line can be seen (@code{tex-recenter-output-buffer}).
text.texi(,302) @item C-c C-k
text.texi(,303) Kill the inferior @TeX{} (@code{tex-kill-job}).
text.texi(,304) @item C-c C-p
text.texi(,305) Print the output from the last @kbd{C-c C-r} or @kbd{C-c C-b} command
text.texi(,306) (@code{tex-print}).
text.texi(,307) @item C-c C-q
text.texi(,308) Show the printer queue (@code{tex-show-print-queue}).
text.texi(,309) @end table
text.texi(,310) 
text.texi(,311) @findex tex-buffer
text.texi(,312) @kindex C-c C-b (TeX mode)
text.texi(,313) @findex tex-print
text.texi(,314) @kindex C-c C-p (TeX mode)
text.texi(,315) @findex tex-show-print-queue
text.texi(,316) @kindex C-c C-q (TeX mode)
text.texi(,317)   You can pass the current buffer through an inferior @TeX{} using
text.texi(,318) @kbd{C-c C-b} (@code{tex-buffer}).  The formatted output appears in a file
text.texi(,319) in @file{/tmp}; to print it, type @kbd{C-c C-p} (@code{tex-print}).
text.texi(,320) Afterward use @kbd{C-c C-q} (@code{tex-show-print-queue}) to view the
text.texi(,321) progress of your output towards being printed.
text.texi(,322) 
text.texi(,323) @findex tex-kill-job
text.texi(,324) @kindex C-c C-k (TeX mode)
text.texi(,325) @findex tex-recenter-output-buffer
text.texi(,326) @kindex C-c C-l (TeX mode)
text.texi(,327)   The console output from @TeX{}, including any error messages, appears in a
text.texi(,328) buffer called @samp{*TeX-shell*}.  If @TeX{} gets an error, you can switch
text.texi(,329) to this buffer and feed it input (this works as in Shell mode;
text.texi(,330) @pxref{Interactive Shell}).  Without switching to this buffer, you can scroll
text.texi(,331) it so that its last line is visible by typing @kbd{C-c C-l}.
text.texi(,332) 
text.texi(,333)   Type @kbd{C-c C-k} (@code{tex-kill-job}) to kill the @TeX{} process if
text.texi(,334) you see that its output is no longer useful.  Using @kbd{C-c C-b} or
text.texi(,335) @kbd{C-c C-r} also kills any @TeX{} process still running.@refill
text.texi(,336) 
text.texi(,337) @findex tex-region
text.texi(,338) @kindex C-c C-r (TeX mode)
text.texi(,339)   You can pass an arbitrary region through an inferior @TeX{} by typing
text.texi(,340) @kbd{C-c C-r} (@code{tex-region}).  This is tricky, however, because
text.texi(,341) most files of @TeX{} input contain commands at the beginning to set
text.texi(,342) parameters and define macros.  Without them, no later part of the file
text.texi(,343) will format correctly.  To solve this problem, @kbd{C-c C-r} allows you
text.texi(,344) to designate a part of the file as containing essential commands; it is
text.texi(,345) included before the specified region as part of the input to @TeX{}.
text.texi(,346) The designated part of the file is called the @dfn{header}.
text.texi(,347) 
text.texi(,348) @cindex header (TeX mode)
text.texi(,349)   To indicate the bounds of the header in Plain @TeX{} mode, insert two
text.texi(,350) special strings in the file: @samp{%**start of header} before the
text.texi(,351) header, and @samp{%**end of header} after it.  Each string must appear
text.texi(,352) entirely on one line, but there may be other text on the line before or
text.texi(,353) after.  The lines containing the two strings are included in the header.
text.texi(,354) If @samp{%**start of header} does not appear within the first 100 lines of
text.texi(,355) the buffer, @kbd{C-c C-r} assumes there is no header.
text.texi(,356) 
text.texi(,357)   In La@TeX{} mode, the header begins with @samp{\documentstyle} and ends
text.texi(,358) with @*@samp{\begin@{document@}}.  These are commands that La@TeX{} requires
text.texi(,359) you to use, so you don't need to do anything special to identify the
text.texi(,360) header.
text.texi(,361) 
text.texi(,362) @vindex TeX-mode-hook
text.texi(,363) @vindex LaTeX-mode-hook
text.texi(,364) @vindex plain-TeX-mode-hook
text.texi(,365)   When you enter either kind of @TeX{} mode, Emacs calls with no
text.texi(,366) arguments the value of the variable @code{text-mode-hook}, if that value
text.texi(,367) exists and is not @code{nil}.  Emacs then calls the variable
text.texi(,368) @code{TeX-mode-hook} and either @code{plain-TeX-mode-hook} or
text.texi(,369) @code{LaTeX-mode-hook} under the same conditions.
text.texi(,370) 
text.texi(,371) @node Outline Mode,, TeX Mode, Text Mode
text.texi(,372) @subsection Outline Mode
text.texi(,373) @cindex outlines
text.texi(,374) @cindex selective display
text.texi(,375) @cindex invisible lines
text.texi(,376) 
text.texi(,377)   Outline mode is a major mode similar to Text mode but intended for editing
text.texi(,378) outlines.  It allows you to make parts of the text temporarily invisible
text.texi(,379) so that you can see just the overall structure of the outline.  Type
text.texi(,380) @kbd{M-x outline-mode} to turn on Outline mode in the current buffer.
text.texi(,381) 
text.texi(,382) @vindex outline-mode-hook
text.texi(,383)   When you enter Outline mode, Emacs calls with no arguments the value
text.texi(,384) of the variable @code{text-mode-hook}, if that value exists and is not
text.texi(,385) @code{nil}; then it does the same with the variable
text.texi(,386) @code{outline-mode-hook}.
text.texi(,387) 
text.texi(,388)   When a line is invisible in outline mode, it does not appear on the
text.texi(,389) screen.  The screen appears exactly as if the invisible line
text.texi(,390) were deleted, except that an ellipsis (three periods in a row) appears
text.texi(,391) at the end of the previous visible line (only one ellipsis no matter
text.texi(,392) how many invisible lines follow).
text.texi(,393) 
text.texi(,394)   All editing commands treat the text of the invisible line as part of the
text.texi(,395) previous visible line.  For example, @kbd{C-n} moves onto the next visible
text.texi(,396) line.  Killing an entire visible line, including its terminating newline,
text.texi(,397) really kills all the following invisible lines as well; yanking
text.texi(,398) everything back yanks the invisible lines and they remain invisible.
text.texi(,399) 
text.texi(,400) @menu
text.texi(,401) * Format: Outline Format.	  What the text of an outline looks like.
text.texi(,402) * Motion: Outline Motion.	  Special commands for moving through outlines.
text.texi(,403) * Visibility: Outline Visibility. Commands to control what is visible.
text.texi(,404) @end menu
text.texi(,405) 
text.texi(,406) @node Outline Format,Outline Motion,Outline Mode, Outline Mode
text.texi(,407) @subsubsection Format of Outlines
text.texi(,408) 
text.texi(,409) @cindex heading lines (Outline mode)
text.texi(,410) @cindex body lines (Outline mode)
text.texi(,411)   Outline mode assumes that the lines in the buffer are of two types:
text.texi(,412) @dfn{heading lines} and @dfn{body lines}.  A heading line represents a
text.texi(,413) topic in the outline.  Heading lines start with one or more stars; the
text.texi(,414) number of stars determines the depth of the heading in the outline
text.texi(,415) structure.  Thus, a heading line with one star is a major topic; all the
text.texi(,416) heading lines with two stars between it and the next one-star heading
text.texi(,417) are its subtopics; and so on.  Any line that is not a heading line is a
text.texi(,418) body line.  Body lines belong to the preceding heading line.  Here is an
text.texi(,419) example:
text.texi(,420) 
text.texi(,421) @example
text.texi(,422) * Food
text.texi(,423) 
text.texi(,424) This is the body,
text.texi(,425) which says something about the topic of food.
text.texi(,426) 
text.texi(,427) ** Delicious Food
text.texi(,428) 
text.texi(,429) This is the body of the second-level header.
text.texi(,430) 
text.texi(,431) ** Distasteful Food
text.texi(,432) 
text.texi(,433) This could have
text.texi(,434) a body too, with
text.texi(,435) several lines.
text.texi(,436) 
text.texi(,437) *** Dormitory Food
text.texi(,438) 
text.texi(,439) * Shelter
text.texi(,440) 
text.texi(,441) A second first-level topic with its header line.
text.texi(,442) @end example
text.texi(,443) 
text.texi(,444)   A heading line together with all following body lines is called
text.texi(,445) collectively an @dfn{entry}.  A heading line together with all following
text.texi(,446) deeper heading lines and their body lines is called a @dfn{subtree}.
text.texi(,447) 
text.texi(,448) @vindex outline-regexp
text.texi(,449)  You can customize the criterion for distinguishing heading lines by
text.texi(,450) setting the variable @code{outline-regexp}.  Any line whose beginning
text.texi(,451) has a match for this regexp is considered a heading line.  Matches that
text.texi(,452) start within a line (not at the beginning) do not count.  The length of
text.texi(,453) the matching text determines the level of the heading; longer matches
text.texi(,454) make a more deeply nested level.  Thus, for example, if a text formatter
text.texi(,455) has commands @samp{@@chapter}, @samp{@@section} and @samp{@@subsection}
text.texi(,456) to divide the document into chapters and sections, you can make those
text.texi(,457) lines count as heading lines by setting @code{outline-regexp} to
text.texi(,458) @samp{"@@chap\\|@@\\(sub\\)*section"}.  Note the trick: the two words
text.texi(,459) @samp{chapter} and @samp{section} are the same length, but by defining
text.texi(,460) the regexp to match only @samp{chap} we ensure that the length of the
text.texi(,461) text matched on a chapter heading is shorter, so that Outline mode will
text.texi(,462) know that sections are contained in chapters.  This works as long as no
text.texi(,463) other command starts with @samp{@@chap}.
text.texi(,464) 
text.texi(,465)   Outline mode makes a line invisible by changing the newline before it
text.texi(,466) into an ASCII Control-M (code 015).  Most editing commands that work on
text.texi(,467) lines treat an invisible line as part of the previous line because,
text.texi(,468) strictly speaking, it @i{is} part of that line, since there is no longer a
text.texi(,469) newline in between.  When you save the file in Outline mode, Control-M
text.texi(,470) characters are saved as newlines, so the invisible lines become ordinary
text.texi(,471) lines in the file.  Saving does not change the visibility status of a
text.texi(,472) line inside Emacs.
text.texi(,473) 
text.texi(,474) @node Outline Motion,Outline Visibility,Outline Format,Outline Mode
text.texi(,475) @subsubsection Outline Motion Commands
text.texi(,476) 
text.texi(,477)    Some special commands in Outline mode move backward and forward to
text.texi(,478) heading lines.
text.texi(,479) 
text.texi(,480) @table @kbd
text.texi(,481) @item C-c C-n
text.texi(,482) Move point to the next visible heading line
text.texi(,483) (@code{outline-next-visible-heading}).
text.texi(,484) @item C-c C-p
text.texi(,485) Move point to the previous visible heading line @*
text.texi(,486) (@code{outline-previous-visible-heading}).
text.texi(,487) @item C-c C-f
text.texi(,488) Move point to the next visible heading line at the same level
text.texi(,489) as the one point is on (@code{outline-forward-same-level}).
text.texi(,490) @item C-c C-b
text.texi(,491) Move point to the previous visible heading line at the same level
text.texi(,492) (@code{outline-backward-same-level}).
text.texi(,493) @item C-c C-u
text.texi(,494) Move point up to a lower-level (more inclusive) visible heading line
text.texi(,495) (@code{outline-up-heading}).
text.texi(,496) @end table
text.texi(,497) 
text.texi(,498) @findex outline-next-visible-heading
text.texi(,499) @findex outline-previous-visible-heading
text.texi(,500) @kindex C-c C-n (Outline mode)
text.texi(,501) @kindex C-c C-p (Outline mode)
text.texi(,502)   @kbd{C-c C-n} (@code{next-visible-heading}) moves down to the next
text.texi(,503) heading line.  @kbd{C-c C-p} (@code{previous-visible-heading}) moves
text.texi(,504) similarly backward.  Both accept numeric arguments as repeat counts.  The
text.texi(,505) names emphasize that invisible headings are skipped, but this is not really
text.texi(,506) a special feature.  All editing commands that look for lines ignore the
text.texi(,507) invisible lines automatically.@refill
text.texi(,508) 
text.texi(,509) @findex outline-up-heading
text.texi(,510) @findex outline-forward-same-level
text.texi(,511) @findex outline-backward-same-level
text.texi(,512) @kindex C-c C-f (Outline mode)
text.texi(,513) @kindex C-c C-b (Outline mode)
text.texi(,514) @kindex C-c C-u (Outline mode)
text.texi(,515)   More advanced motion commands understand the levels of headings.
text.texi(,516) The commands @kbd{C-c C-f} (@code{outline-forward-same-level}) and
text.texi(,517) @kbd{C-c C-b} (@code{outline-backward-same-level}) move from one
text.texi(,518) heading line to another visible heading at the same depth in
text.texi(,519) the outline.  @kbd{C-c C-u} (@code{outline-up-heading}) moves
text.texi(,520) backward to another heading that is less deeply nested.
text.texi(,521) 
text.texi(,522) @node Outline Visibility,,Outline Motion,Outline Mode
text.texi(,523) @subsubsection Outline Visibility Commands
text.texi(,524) 
text.texi(,525)   The other special commands of outline mode are used to make lines visible
text.texi(,526) or invisible.  Their names all start with @code{hide} or @code{show}.
text.texi(,527) Most of them exist as pairs of opposites.  They are not undoable; instead,
text.texi(,528) you can undo right past them.  Making lines visible or invisible is simply
text.texi(,529) not recorded by the undo mechanism.
text.texi(,530) 
text.texi(,531) @table @kbd
text.texi(,532) @item M-x hide-body
text.texi(,533) Make all body lines in the buffer invisible.
text.texi(,534) @item M-x show-all
text.texi(,535) Make all lines in the buffer visible.
text.texi(,536) @item C-c C-d
text.texi(,537) Make everything under this heading invisible, not including this
text.texi(,538) heading itself (@code{hide-subtree}).
text.texi(,539) @item C-c C-s
text.texi(,540) Make everything under this heading visible, including body,
text.texi(,541) subheadings, and their bodies (@code{show-subtree}).
text.texi(,542) @item M-x hide-leaves
text.texi(,543) Make the body of this heading line, and of all its subheadings,
text.texi(,544) invisible.
text.texi(,545) @item M-x show-branches
text.texi(,546) Make all subheadings of this heading line, at all levels, visible.
text.texi(,547) @item C-c C-i
text.texi(,548) Make immediate subheadings (one level down) of this heading line
text.texi(,549) visible (@code{show-children}).
text.texi(,550) @item M-x hide-entry
text.texi(,551) Make this heading line's body invisible.
text.texi(,552) @item M-x show-entry
text.texi(,553) Make this heading line's body visible.
text.texi(,554) @end table
text.texi(,555) 
text.texi(,556) @findex hide-entry
text.texi(,557) @findex show-entry
text.texi(,558)   Two commands that are exact opposites are @kbd{M-x hide-entry} and
text.texi(,559) @kbd{M-x show-entry}.  They are used with point on a heading line, and
text.texi(,560) apply only to the body lines of that heading.  The subtopics and their
text.texi(,561) bodies are not affected.
text.texi(,562) 
text.texi(,563) @findex hide-subtree
text.texi(,564) @findex show-subtree
text.texi(,565) @kindex C-c C-d (Outline mode)
text.texi(,566) @kindex C-c C-h (Outline mode)
text.texi(,567) @cindex subtree (Outline mode)
text.texi(,568)   Two more powerful opposites are @kbd{C-c C-d} (@code{hide-subtree}) and
text.texi(,569) @kbd{C-c C-s} (@code{show-subtree}).  Both should be used when point is
text.texi(,570) on a heading line, and both apply to all the lines of that heading's
text.texi(,571) @dfn{subtree}: its body, all its subheadings, both direct and indirect, and
text.texi(,572) all of their bodies.  In other words, the subtree contains everything
text.texi(,573) following this heading line, up to and not including the next heading of
text.texi(,574) the same or higher rank.@refill
text.texi(,575) 
text.texi(,576) @findex hide-leaves
text.texi(,577) @findex show-branches
text.texi(,578)   Intermediate between a visible subtree and an invisible one is having
text.texi(,579) all the subheadings visible but none of the body.  There are two commands
text.texi(,580) for doing this, one that hides the bodies and one that
text.texi(,581) makes the subheadings visible.  They are @kbd{M-x hide-leaves} and
text.texi(,582) @kbd{M-x show-branches}.
text.texi(,583) 
text.texi(,584) @kindex C-c C-i (Outline mode)
text.texi(,585) @findex show-children
text.texi(,586)   A little weaker than @code{show-branches} is @kbd{C-c C-i}
text.texi(,587) (@code{show-children}).  It makes just the direct subheadings
text.texi(,588) visible---those one level down.  Deeper subheadings remain
text.texi(,589) invisible.@refill
text.texi(,590) 
text.texi(,591) @findex hide-body
text.texi(,592) @findex show-all
text.texi(,593)   Two commands have a blanket effect on the whole file.  @kbd{M-x
text.texi(,594) hide-body} makes all body lines invisible, so that you see just the
text.texi(,595) outline structure.  @kbd{M-x show-all} makes all lines visible.  You can
text.texi(,596) think of these commands as a pair of opposites even though @kbd{M-x
text.texi(,597) show-all} applies to more than just body lines.
text.texi(,598) 
text.texi(,599) @vindex selective-display-ellipses
text.texi(,600) You can turn off the use of ellipses at the ends of visible lines by
text.texi(,601) setting @code{selective-display-ellipses} to @code{nil}.  The result is
text.texi(,602) no visible indication of the presence of invisible lines.
text.texi(,603) 
text.texi(,604) @node Words, Sentences, Text Mode, Text
text.texi(,605) @section Words
text.texi(,606) @cindex words
text.texi(,607) @cindex Meta
text.texi(,608) 
text.texi(,609)   Emacs has commands for moving over or operating on words.  By convention,
text.texi(,610) the keys for them are all @kbd{Meta-} characters.
text.texi(,611) 
text.texi(,612) @c widecommands
text.texi(,613) @table @kbd
text.texi(,614) @item M-f
text.texi(,615) Move forward over a word (@code{forward-word}).
text.texi(,616) @item M-b
text.texi(,617) Move backward over a word (@code{backward-word}).
text.texi(,618) @item M-d
text.texi(,619) Kill up to the end of a word (@code{kill-word}).
text.texi(,620) @item M-@key{DEL}
text.texi(,621) Kill back to the beginning of a word (@code{backward-kill-word}).
text.texi(,622) @item M-@@
text.texi(,623) Mark the end of the next word (@code{mark-word}).
text.texi(,624) @item M-t
text.texi(,625) Transpose two words;  drag a word forward
text.texi(,626) or backward across other words (@code{transpose-words}).
text.texi(,627) @end table
text.texi(,628) 
text.texi(,629)   Notice how these keys form a series that parallels the
text.texi(,630) character-based @kbd{C-f}, @kbd{C-b}, @kbd{C-d}, @kbd{C-t} and
text.texi(,631) @key{DEL}.  @kbd{M-@@} is related to @kbd{C-@@}, which is an alias for
text.texi(,632) @kbd{C-@key{SPC}}.@refill
text.texi(,633) 
text.texi(,634) @kindex M-f
text.texi(,635) @kindex M-b
text.texi(,636) @findex forward-word
text.texi(,637) @findex backward-word
text.texi(,638)   The commands @kbd{Meta-f} (@code{forward-word}) and @kbd{Meta-b}
text.texi(,639) (@code{backward-word}) move forward and backward over words.  They are
text.texi(,640) analogous to @kbd{Control-f} and @kbd{Control-b}, which move over single
text.texi(,641) characters.  Like their @kbd{Control-} analogues, @kbd{Meta-f} and
text.texi(,642) @kbd{Meta-b} move several words if given an argument.  @kbd{Meta-f} with a
text.texi(,643) negative argument moves backward, and @kbd{Meta-b} with a negative argument
text.texi(,644) moves forward.  Forward motion stops after the last letter of the
text.texi(,645) word, while backward motion stops before the first letter.@refill
text.texi(,646) 
text.texi(,647) @kindex M-d
text.texi(,648) @findex kill-word
text.texi(,649)   @kbd{Meta-d} (@code{kill-word}) kills the word after point.  To be
text.texi(,650) precise, it kills everything from point to the place @kbd{Meta-f} would
text.texi(,651) move to.  Thus, if point is in the middle of a word, @kbd{Meta-d} kills
text.texi(,652) just the part after point.  If some punctuation comes between point and the
text.texi(,653) next word, it is killed along with the word.  (To kill only the
text.texi(,654) next word but not the punctuation before it, simply type @kbd{Meta-f} to get
text.texi(,655) to the end and kill the word backwards with @kbd{Meta-@key{DEL}}.)
text.texi(,656) @kbd{Meta-d} takes arguments just like @kbd{Meta-f}.
text.texi(,657) 
text.texi(,658) @findex backward-kill-word
text.texi(,659) @kindex M-DEL
text.texi(,660)   @kbd{Meta-@key{DEL}} (@code{backward-kill-word}) kills the word before
text.texi(,661) point.  It kills everything from point back to where @kbd{Meta-b} would
text.texi(,662) move to.  If point is after the space in @w{@samp{FOO, BAR}}, then
text.texi(,663) @w{@samp{FOO, }} is killed.   To kill just @samp{FOO}, type
text.texi(,664) @kbd{Meta-b Meta-d} instead of @kbd{Meta-@key{DEL}}.
text.texi(,665) 
text.texi(,666) @cindex transposition
text.texi(,667) @kindex M-t
text.texi(,668) @findex transpose-words
text.texi(,669)   @kbd{Meta-t} (@code{transpose-words}) exchanges the word before or
text.texi(,670) containing point with the following word.  The delimiter characters
text.texi(,671) between the words do not move.  For example, transposing @w{@samp{FOO,
text.texi(,672) BAR}} results in @w{@samp{BAR, FOO}} rather than @samp{@w{BAR FOO,}}.
text.texi(,673) @xref{Transpose}, for more on transposition and on arguments to
text.texi(,674) transposition commands.
text.texi(,675) 
text.texi(,676) @kindex M-@@
text.texi(,677) @findex mark-word
text.texi(,678)   To operate on the next @var{n} words with an operation which applies
text.texi(,679) between point and mark, you can either set the mark at point and then move
text.texi(,680) over the words, or you can use the command @kbd{Meta-@@} (@code{mark-word})
text.texi(,681) which does not move point but sets the mark where @kbd{Meta-f} would move
text.texi(,682) to.  It can be given arguments just like @kbd{Meta-f}.
text.texi(,683) 
text.texi(,684) @cindex syntax table
text.texi(,685)   The word commands' understanding of syntax is completely controlled by
text.texi(,686) the syntax table.  For example, any character can be declared to be a word
text.texi(,687) delimiter.  @xref{Syntax}.
text.texi(,688) 
text.texi(,689) @node Sentences, Paragraphs, Words, Text
text.texi(,690) @section Sentences
text.texi(,691) @cindex sentences
text.texi(,692) 
text.texi(,693)   The Emacs commands for manipulating sentences and paragraphs are mostly
text.texi(,694) on @kbd{Meta-} keys, and therefore are like the word-handling commands.
text.texi(,695) 
text.texi(,696) @table @kbd
text.texi(,697) @item M-a
text.texi(,698) Move back to the beginning of the sentence (@code{backward-sentence}).
text.texi(,699) @item M-e
text.texi(,700) Move forward to the end of the sentence (@code{forward-sentence}).
text.texi(,701) @item M-k
text.texi(,702) Kill forward to the end of the sentence (@code{kill-sentence}).
text.texi(,703) @item C-x @key{DEL}
text.texi(,704) Kill back to the beginning of the sentence @*(@code{backward-kill-sentence}).
text.texi(,705) @end table
text.texi(,706) 
text.texi(,707) @kindex M-a
text.texi(,708) @kindex M-e
text.texi(,709) @findex backward-sentence
text.texi(,710) @findex forward-sentence
text.texi(,711)   The commands @kbd{Meta-a} and @kbd{Meta-e} (@code{backward-sentence}
text.texi(,712) and @code{forward-sentence}) move to the beginning and end of the
text.texi(,713) current sentence, respectively.  They resemble @kbd{Control-a} and
text.texi(,714) @kbd{Control-e}, which move to the beginning and end of a line.  Unlike
text.texi(,715) their counterparts, @kbd{Meta-a} and @kbd{Meta-e} move over successive
text.texi(,716) sentences if repeated or given numeric arguments.  Emacs assumes
text.texi(,717) the typist's convention is followed, and thus considers a sentence to
text.texi(,718) end wherever there is a @samp{.}, @samp{?}, or @samp{!} followed by the
text.texi(,719) end of a line or two spaces, with any number of @samp{)}, @samp{]},
text.texi(,720) @samp{'}, or @samp{"} characters allowed in between.  A sentence also
text.texi(,721) begins or ends wherever a paragraph begins or ends.@refill
text.texi(,722) 
text.texi(,723)   Neither @kbd{M-a} nor @kbd{M-e} moves past the newline or spaces beyond
text.texi(,724) the sentence edge at which it is stopping.
text.texi(,725) 
text.texi(,726) @kindex M-k
text.texi(,727) @kindex C-x DEL
text.texi(,728) @findex kill-sentence
text.texi(,729) @findex backward-kill-sentence
text.texi(,730)  @kbd{M-a} and @kbd{M-e} have a corresponding kill command, just like
text.texi(,731) @kbd{C-a} and @kbd{C-e} have @kbd{C-k}.  The command is  @kbd{M-k}
text.texi(,732) (@code{kill-sentence}) which kills from point to the end of the
text.texi(,733) sentence.  With minus one as an argument it kills back to the beginning
text.texi(,734) of the sentence.  Larger arguments serve as repeat counts.@refill
text.texi(,735) 
text.texi(,736)   There is a special command, @kbd{C-x @key{DEL}}
text.texi(,737) (@code{backward-kill-sentence}), for killing back to the beginning of a
text.texi(,738) sentence, which is useful when you change your mind in the middle of
text.texi(,739) composing text.@refill
text.texi(,740) 
text.texi(,741) @vindex sentence-end
text.texi(,742)   The variable @code{sentence-end} controls recognition of the end of a
text.texi(,743) sentence.  It is a regexp that matches the last few characters of a
text.texi(,744) sentence, together with the whitespace following the sentence.  Its
text.texi(,745) normal value is:
text.texi(,746) 
text.texi(,747) @example
text.texi(,748) "[.?!][]\"')]*\\($\\|\t\\|  \\)[ \t\n]*"
text.texi(,749) @end example
text.texi(,750) 
text.texi(,751) @noindent
text.texi(,752) This example is explained in the section on regexps.  @xref{Regexps}.
text.texi(,753) 
text.texi(,754) @node Paragraphs, Pages, Sentences, Text
text.texi(,755) @section Paragraphs
text.texi(,756) @cindex paragraphs
text.texi(,757) @kindex M-@{
text.texi(,758) @kindex M-@}
text.texi(,759) @findex backward-paragraph
text.texi(,760) @findex forward-paragraph
text.texi(,761) 
text.texi(,762)   The Emacs commands for manipulating paragraphs are also @kbd{Meta-}
text.texi(,763) keys.
text.texi(,764) 
text.texi(,765) @table @kbd
text.texi(,766) @item M-@{
text.texi(,767) Move back to previous paragraph beginning @*(@code{backward-paragraph}).
text.texi(,768) @item M-@}
text.texi(,769) Move forward to next paragraph end (@code{forward-paragraph}).
text.texi(,770) @item M-h
text.texi(,771) Put point and mark around this or next paragraph (@code{mark-paragraph}).
text.texi(,772) @end table
text.texi(,773) 
text.texi(,774)   @kbd{Meta-@{} moves to the beginning of the current or previous paragraph,
text.texi(,775) while @kbd{Meta-@}} moves to the end of the current or next paragraph.
text.texi(,776) Blank lines and text formatter command lines separate paragraphs and are
text.texi(,777) not part of any paragraph.  An indented line starts a new paragraph.
text.texi(,778) 
text.texi(,779)   In major modes for programs (as opposed to Text mode), paragraphs begin
text.texi(,780) and end only at blank lines.  As a result, the paragraph commands continue to
text.texi(,781) be useful even though there are no paragraphs per se.
text.texi(,782) 
text.texi(,783)   When there is a fill prefix, paragraphs are delimited by all lines
text.texi(,784) which don't start with the fill prefix.  @xref{Filling}.
text.texi(,785) 
text.texi(,786) @kindex M-h
text.texi(,787) @findex mark-paragraph
text.texi(,788)    To operate on a paragraph, you can use the command
text.texi(,789) @kbd{Meta-h} (@code{mark-paragraph}) to set the region around it.  This
text.texi(,790) command puts point at the beginning and mark at the end of the paragraph
text.texi(,791) point was in.  If point is between paragraphs (in a run of blank lines or
text.texi(,792) at a boundary), the paragraph following point is surrounded by point and
text.texi(,793) mark.  If there are blank lines preceding the first line of the paragraph,
text.texi(,794) one of the blank lines is included in the region.  Thus, for example,
text.texi(,795) @kbd{M-h C-w} kills the paragraph around or after point.
text.texi(,796) 
text.texi(,797) @vindex paragraph-start
text.texi(,798) @vindex paragraph-separate
text.texi(,799)   The precise definition of a paragraph boundary is controlled by the
text.texi(,800) variables @code{paragraph-separate} and @code{paragraph-start}.  The value
text.texi(,801) of @code{paragraph-start} is a regexp that matches any line that
text.texi(,802) either starts or separates paragraphs.  The value of
text.texi(,803) @code{paragraph-separate} is another regexp that  matches only lines
text.texi(,804) that separate paragraphs without being part of any paragraph.  Lines that
text.texi(,805) start a new paragraph and are contained in it must match both regexps.  For
text.texi(,806) example, normally @code{paragraph-start} is @code{"^[ @t{\}t@t{\}n@t{\}f]"}
text.texi(,807) and @code{paragraph-separate} is @code{"^[ @t{\}t@t{\}f]*$"}.@refill
text.texi(,808) 
text.texi(,809)   Normally it is desirable for page boundaries to separate paragraphs.
text.texi(,810) The default values of these variables recognize the usual separator for
text.texi(,811) pages.
text.texi(,812) 
text.texi(,813) @node Pages, Filling, Paragraphs, Text
text.texi(,814) @section Pages
text.texi(,815) 
text.texi(,816) @cindex pages
text.texi(,817) @cindex formfeed
text.texi(,818)   Files are often thought of as divided into @dfn{pages} by the
text.texi(,819) @dfn{formfeed} character (ASCII Control-L, octal code 014).  For
text.texi(,820) example, if a file is printed on a line printer, each ``page'' of the
text.texi(,821) file starts on a new page of paper.  Emacs treats a page-separator
text.texi(,822) character just like any other character.  It can be inserted with
text.texi(,823) @kbd{C-q C-l} or deleted with @key{DEL}.  You are free to
text.texi(,824) paginate your file or not.  However, since pages are often meaningful
text.texi(,825) divisions of the file, commands are provided to move over them and
text.texi(,826) operate on them.
text.texi(,827) 
text.texi(,828) @c WideCommands
text.texi(,829) @table @kbd
text.texi(,830) @item C-x [
text.texi(,831) Move point to previous page boundary (@code{backward-page}).
text.texi(,832) @item C-x ]
text.texi(,833) Move point to next page boundary (@code{forward-page}).
text.texi(,834) @item C-x C-p
text.texi(,835) Put point and mark around this page (or another page) (@code{mark-page}).
text.texi(,836) @item C-x l
text.texi(,837) Count the lines in this page (@code{count-lines-page}).
text.texi(,838) @end table
text.texi(,839) 
text.texi(,840) @kindex C-x [
text.texi(,841) @kindex C-x ]
text.texi(,842) @findex forward-page
text.texi(,843) @findex backward-page
text.texi(,844)   The @kbd{C-x [} (@code{backward-page}) command moves point to
text.texi(,845) immediately after the previous page delimiter.  If point is already
text.texi(,846) right after a page delimiter, the command skips that one and stops at
text.texi(,847) the previous one.  A numeric argument serves as a repeat count.  The
text.texi(,848) @kbd{C-x ]} (@code{forward-page}) command moves forward past the next
text.texi(,849) page delimiter.
text.texi(,850) 
text.texi(,851) @kindex C-x C-p
text.texi(,852) @findex mark-page
text.texi(,853)   The @kbd{C-x C-p} command (@code{mark-page}) puts point at the beginning
text.texi(,854) of the current page and the mark at the end.  The page delimiter at the end
text.texi(,855) is included (the mark follows it).  The page delimiter at the front is
text.texi(,856) excluded (point follows it).  You can follow this command  by @kbd{C-w} to
text.texi(,857) kill a page you want to move elsewhere.  If you insert the page after a page
text.texi(,858) delimiter, at a place where @kbd{C-x ]} or @kbd{C-x [} would take you,
text.texi(,859) the page will be properly delimited before and after once again.
text.texi(,860) 
text.texi(,861)   A numeric argument to @kbd{C-x C-p} is used to specify which page to go
text.texi(,862) to, relative to the current one.  Zero means the current page.  One means
text.texi(,863) the next page, and @minus{}1 means the previous one.
text.texi(,864) 
text.texi(,865) @kindex C-x l
text.texi(,866) @findex count-lines-page
text.texi(,867)   The @kbd{C-x l} command (@code{count-lines-page}) can help you decide
text.texi(,868) where to break a page in two.  It prints the total number of lines in
text.texi(,869) the current page in the echo area, then divides the lines into those
text.texi(,870) preceding the current line and those following it, for example
text.texi(,871) 
text.texi(,872) @example
text.texi(,873) Page has 96 (72+25) lines
text.texi(,874) @end example
text.texi(,875) 
text.texi(,876) @noindent
text.texi(,877)   Notice that the sum is off by one; this is correct if point is not at the
text.texi(,878) beginning of a line.
text.texi(,879) 
text.texi(,880) @vindex page-delimiter
text.texi(,881)   The variable @code{page-delimiter} should have as its value a regexp that
text.texi(,882) matches the beginning of a line that separates pages.  This defines
text.texi(,883) where pages begin.  The normal value of this variable is @code{"^@t{\}f"},
text.texi(,884) which matches a formfeed character at the beginning of a line.
text.texi(,885) 
text.texi(,886) @node Filling, Case, Pages, Text
text.texi(,887) @section Filling Text
text.texi(,888) @cindex filling
text.texi(,889) 
text.texi(,890)   If you use Auto Fill mode, Emacs @dfn{fills} text (breaks it up into
text.texi(,891) lines that fit in a specified width) as you insert it.  When you alter
text.texi(,892) existing text it is often no longer be properly filled afterwards and
text.texi(,893) you can use explicit commands for filling.
text.texi(,894) 
text.texi(,895) @menu
text.texi(,896) * Auto Fill::	  Auto Fill mode breaks long lines automatically.
text.texi(,897) * Fill Commands:: Commands to refill paragraphs and center lines.
text.texi(,898) * Fill Prefix::   Filling when every line is indented or in a comment, etc.
text.texi(,899) @end menu
text.texi(,900) 
text.texi(,901) @node Auto Fill, Fill Commands, Filling, Filling
text.texi(,902) @subsection Auto Fill Mode
text.texi(,903) 
text.texi(,904) @cindex Auto Fill mode
text.texi(,905) 
text.texi(,906)   @dfn{Auto Fill} mode is a minor mode in which lines are broken
text.texi(,907) automatically when they become too wide.  Breaking happens only when
text.texi(,908) you type a @key{SPC} or @key{RET}.
text.texi(,909) 
text.texi(,910) @table @kbd
text.texi(,911) @item M-x auto-fill-mode
text.texi(,912) Enable or disable Auto Fill mode.
text.texi(,913) @item @key{SPC}
text.texi(,914) @itemx @key{RET}
text.texi(,915) In Auto Fill mode, break lines when appropriate.
text.texi(,916) @end table
text.texi(,917) 
text.texi(,918) @findex auto-fill-mode
text.texi(,919)   @kbd{M-x auto-fill-mode} turns Auto Fill mode on if it was off, or off
text.texi(,920) if it was on.  With a positive numeric argument the command always turns
text.texi(,921) Auto Fill mode on, and with a negative argument it always turns it off.
text.texi(,922) The presence of the word @samp{Fill} in the mode line, inside the
text.texi(,923) parentheses, indicates that Auto Fill mode is in effect.  Auto Fill mode
text.texi(,924) is a minor mode; you can turn it on or off for each buffer individually.
text.texi(,925) @xref{Minor Modes}.
text.texi(,926) 
text.texi(,927)   In Auto Fill mode, lines are broken automatically at spaces when they get
text.texi(,928) longer than desired.  Line breaking and rearrangement takes place
text.texi(,929) only when you type @key{SPC} or @key{RET}.  To insert a space
text.texi(,930) or newline without permitting line-breaking, type @kbd{C-q @key{SPC}} or
text.texi(,931) @kbd{C-q @key{LFD}} (recall that a newline is really a linefeed).
text.texi(,932) @kbd{C-o} inserts a newline without line breaking.
text.texi(,933) 
text.texi(,934)   Auto Fill mode works well with Lisp mode: when it makes a new line in
text.texi(,935) Lisp mode, it indents that line with @key{TAB}.  If a line ending in a
text.texi(,936) Lisp comment gets too long, the text of the comment is split into two
text.texi(,937) comment lines.  Optionally, new comment delimiters are inserted at the
text.texi(,938) end of the first line and the beginning of the second, so that each line
text.texi(,939) is a separate comment.  The variable @code{comment-multi-line} controls
text.texi(,940) the choice (@pxref{Comments}).
text.texi(,941) 
text.texi(,942)   Auto Fill mode does not refill entire paragraphs.  It can break lines but
text.texi(,943) cannot merge lines.  Editing in the middle of a paragraph can result in
text.texi(,944) a paragraph that is not correctly filled.  The easiest way to make the
text.texi(,945) paragraph properly filled again is using an explicit fill commands.
text.texi(,946) 
text.texi(,947)   Many users like Auto Fill mode and want to use it in all text files.
text.texi(,948) The section on init files explains how you can arrange this
text.texi(,949) permanently for yourself.  @xref{Init File}.
text.texi(,950) 
text.texi(,951) @node Fill Commands, Fill Prefix, Auto Fill, Filling
text.texi(,952) @subsection Explicit Fill Commands
text.texi(,953) 
text.texi(,954) @table @kbd
text.texi(,955) @item M-q
text.texi(,956) Fill current paragraph (@code{fill-paragraph}).
text.texi(,957) @item M-g
text.texi(,958) Fill each paragraph in the region (@code{fill-region}).
text.texi(,959) @item C-x f
text.texi(,960) Set the fill column (@code{set-fill-column}).
text.texi(,961) @item M-x fill-region-as-paragraph
text.texi(,962) Fill the region, considering it as one paragraph.
text.texi(,963) @item M-s
text.texi(,964) Center a line.
text.texi(,965) @end table
text.texi(,966) 
text.texi(,967) @kindex M-q
text.texi(,968) @findex fill-paragraph
text.texi(,969)   To refill a paragraph, use the command @kbd{Meta-q}
text.texi(,970) (@code{fill-paragraph}).  It causes the paragraph containing point, or
text.texi(,971) the one after point if point is between paragraphs, to be refilled.  All
text.texi(,972) line breaks are removed, and new ones are inserted where necessary.
text.texi(,973) @kbd{M-q} can be undone with @kbd{C-_}.  @xref{Undo}.@refill
text.texi(,974) 
text.texi(,975) @kindex M-g
text.texi(,976) @findex fill-region
text.texi(,977)   To refill many paragraphs, use @kbd{M-g} (@code{fill-region}), which
text.texi(,978) divides the region into paragraphs and fills each of them.
text.texi(,979) 
text.texi(,980) @findex fill-region-as-paragraph
text.texi(,981)   @kbd{Meta-q} and @kbd{Meta-g} use the same criteria as @kbd{Meta-h} for
text.texi(,982) finding paragraph boundaries (@pxref{Paragraphs}).  For more control, you
text.texi(,983) can use @kbd{M-x fill-region-as-paragraph}, which refills everything
text.texi(,984) between point and mark.  This command recognizes only blank lines as
text.texi(,985) paragraph separators.@refill
text.texi(,986) 
text.texi(,987) @cindex justification
text.texi(,988)   A numeric argument to @kbd{M-g} or @kbd{M-q} causes it to
text.texi(,989) @dfn{justify} the text as well as filling it.  Extra spaces are inserted
text.texi(,990) to make the right margin line up exactly at the fill column.  To remove
text.texi(,991) the extra spaces, use @kbd{M-q} or @kbd{M-g} with no argument.@refill
text.texi(,992) 
text.texi(,993) @vindex auto-fill-inhibit-regexp
text.texi(,994) The variable @code{auto-fill-inhibit-regexp} takes as a value a regexp to
text.texi(,995) match lines that should not be auto-filled.
text.texi(,996) 
text.texi(,997) @kindex M-s
text.texi(,998) @cindex centering
text.texi(,999) @findex center-line
text.texi(,1000)   The command @kbd{Meta-s} (@code{center-line}) centers the current line
text.texi(,1001) within the current fill column.  With an argument, it centers several lines
text.texi(,1002) individually and moves past them.
text.texi(,1003) 
text.texi(,1004) @vindex fill-column
text.texi(,1005)   The maximum line width for filling is in the variable
text.texi(,1006) @code{fill-column}.  Altering the value of @code{fill-column} makes it
text.texi(,1007) local to the current buffer; until then, the default value---initially
text.texi(,1008) 70---is in effect. @xref{Locals}.
text.texi(,1009) 
text.texi(,1010) @kindex C-x f
text.texi(,1011) @findex set-fill-column
text.texi(,1012)   The easiest way to set @code{fill-column} is to use the command @kbd{C-x
text.texi(,1013) f} (@code{set-fill-column}).  With no argument, it sets @code{fill-column}
text.texi(,1014) to the current horizontal position of point.  With a numeric argument, it
text.texi(,1015) uses that number as the new fill column.
text.texi(,1016) 
text.texi(,1017) @node Fill Prefix,, Fill Commands, Filling
text.texi(,1018) @subsection The Fill Prefix
text.texi(,1019) 
text.texi(,1020) @cindex fill prefix
text.texi(,1021)   To fill a paragraph in which each line starts with a special marker
text.texi(,1022) (which might be a few spaces, giving an indented paragraph), use the
text.texi(,1023) @dfn{fill prefix} feature.  The fill prefix is a string which is not
text.texi(,1024) included in filling.  Emacs expects every line to start with a fill
text.texi(,1025) prefix.
text.texi(,1026) 
text.texi(,1027) @table @kbd
text.texi(,1028) @item C-x .
text.texi(,1029) Set the fill prefix (@code{set-fill-prefix}).
text.texi(,1030) @item M-q
text.texi(,1031) Fill a paragraph using current fill prefix (@code{fill-paragraph}).
text.texi(,1032) @item M-x fill-individual-paragraphs
text.texi(,1033) Fill the region, considering each change of indentation as starting a
text.texi(,1034) new paragraph.
text.texi(,1035) @end table
text.texi(,1036) 
text.texi(,1037) @kindex C-x .
text.texi(,1038) @findex set-fill-prefix
text.texi(,1039)   To specify a fill prefix, move to a line that starts with the desired
text.texi(,1040) prefix, put point at the end of the prefix, and give the command
text.texi(,1041) @w{@kbd{C-x .}}@: (@code{set-fill-prefix}).  That's a period after the
text.texi(,1042) @kbd{C-x}.  To turn off the fill prefix, specify an empty prefix: type
text.texi(,1043) @w{@kbd{C-x .}}@: with point at the beginning of a line.@refill
text.texi(,1044) 
text.texi(,1045)   When a fill prefix is in effect, the fill commands remove the fill
text.texi(,1046) prefix from each line before filling and insert it on each line after
text.texi(,1047) filling.  Auto Fill mode also inserts the fill prefix inserted on new
text.texi(,1048) lines it creates.  Lines that do not start with the fill prefix are
text.texi(,1049) considered to start paragraphs, both in @kbd{M-q} and the paragraph
text.texi(,1050) commands; this is just right if you are using paragraphs with hanging
text.texi(,1051) indentation (every line indented except the first one).  Lines which are
text.texi(,1052) blank or indented once the prefix is removed also separate or start
text.texi(,1053) paragraphs; this is what you want if you are writing multi-paragraph
text.texi(,1054) comments with a comment delimiter on each line.
text.texi(,1055) 
text.texi(,1056) @vindex fill-prefix
text.texi(,1057)   The fill prefix is stored in the variable @code{fill-prefix}.  Its value
text.texi(,1058) is a string, or @code{nil} when there is no fill prefix.  This is a
text.texi(,1059) per-buffer variable; altering the variable affects only the current buffer,
text.texi(,1060) but there is a default value which you can change as well.  @xref{Locals}.
text.texi(,1061) 
text.texi(,1062) @findex fill-individual-paragraphs
text.texi(,1063)   Another way to use fill prefixes is through @kbd{M-x
text.texi(,1064) fill-individual-paragraphs}.  This function divides the region into groups
text.texi(,1065) of consecutive lines with the same amount and kind of indentation and fills
text.texi(,1066) each group as a paragraph, using its indentation as a fill prefix.
text.texi(,1067) 
text.texi(,1068) @node Case,, Filling, Text
text.texi(,1069) @section Case Conversion Commands
text.texi(,1070) @cindex case conversion
text.texi(,1071) 
text.texi(,1072)   Emacs has commands for converting either a single word or any arbitrary
text.texi(,1073) range of text to upper case or to lower case.
text.texi(,1074) 
text.texi(,1075) @c WideCommands
text.texi(,1076) @table @kbd
text.texi(,1077) @item M-l
text.texi(,1078) Convert following word to lower case (@code{downcase-word}).
text.texi(,1079) @item M-u
text.texi(,1080) Convert following word to upper case (@code{upcase-word}).
text.texi(,1081) @item M-c
text.texi(,1082) Capitalize the following word (@code{capitalize-word}).
text.texi(,1083) @item C-x C-l
text.texi(,1084) Convert region to lower case (@code{downcase-region}).
text.texi(,1085) @item C-x C-u
text.texi(,1086) Convert region to upper case (@code{upcase-region}).
text.texi(,1087) @end table
text.texi(,1088) 
text.texi(,1089) @kindex M-l
text.texi(,1090) @kindex M-u
text.texi(,1091) @kindex M-c
text.texi(,1092) @cindex words
text.texi(,1093) @findex downcase-word
text.texi(,1094) @findex upcase-word
text.texi(,1095) @findex capitalize-word
text.texi(,1096)   The word conversion commands are used most frequently.  @kbd{Meta-l}
text.texi(,1097) (@code{downcase-word}) converts the word after point to lower case,
text.texi(,1098) moving past it.  Thus, repeating @kbd{Meta-l} converts successive words.
text.texi(,1099) @kbd{Meta-u} (@code{upcase-word}) converts to all capitals instead,
text.texi(,1100) while @kbd{Meta-c} (@code{capitalize-word}) puts the first letter of the
text.texi(,1101) word into upper case and the rest into lower case.  The word conversion
text.texi(,1102) commands convert several words at once if given an argument.  They are
text.texi(,1103) especially convenient for converting a large amount of text from all
text.texi(,1104) upper case to mixed case: you can move through the text using
text.texi(,1105) @kbd{M-l}, @kbd{M-u}, or @kbd{M-c} on each word as appropriate,
text.texi(,1106) occasionally using @kbd{M-f} instead to skip a word.
text.texi(,1107) 
text.texi(,1108)   When given a negative argument, the word case conversion commands apply
text.texi(,1109) to the appropriate number of words before point, but do not move point.
text.texi(,1110) This is convenient when you have just typed a word in the wrong case: you
text.texi(,1111) can give the case conversion command and continue typing.
text.texi(,1112) 
text.texi(,1113)   If a word case conversion command is given in the middle of a word, it
text.texi(,1114) applies only to the part of the word which follows point.  This is just
text.texi(,1115) like what @kbd{Meta-d} (@code{kill-word}) does.  With a negative argument,
text.texi(,1116) case conversion applies only to the part of the word before point.
text.texi(,1117) 
text.texi(,1118) @kindex C-x C-l
text.texi(,1119) @kindex C-x C-u
text.texi(,1120) @cindex region
text.texi(,1121) @findex downcase-region
text.texi(,1122) @findex upcase-region
text.texi(,1123)   The other case conversion commands are @kbd{C-x C-u}
text.texi(,1124) (@code{upcase-region}) and @kbd{C-x C-l} (@code{downcase-region}), which
text.texi(,1125) convert everything between point and mark to the specified case.  Point and
text.texi(,1126) mark do not move.@refill
programs.texi(,1) 
programs.texi(,2) @node Programs, Running, Text, Top
programs.texi(,3) @chapter Editing Programs
programs.texi(,4) @cindex Lisp
programs.texi(,5) @cindex C
programs.texi(,6) 
programs.texi(,7)   Emacs has many commands designed to understand the syntax of programming
programs.texi(,8) languages such as Lisp and C.  These commands can:
programs.texi(,9) 
programs.texi(,10) @itemize @bullet
programs.texi(,11) @item
programs.texi(,12) Move over or kill balanced expressions or @dfn{sexps} (@pxref{Lists}).
programs.texi(,13) @item
programs.texi(,14) Move over or mark top-level balanced expressions (@dfn{defuns}, in Lisp;
programs.texi(,15) functions, in C).
programs.texi(,16) @item
programs.texi(,17) Show how parentheses balance (@pxref{Matching}).
programs.texi(,18) @item
programs.texi(,19) Insert, kill, or align comments (@pxref{Comments}).
programs.texi(,20) @item
programs.texi(,21) Follow the usual indentation conventions of the language
programs.texi(,22) (@pxref{Grinding}).
programs.texi(,23) @end itemize
programs.texi(,24) 
programs.texi(,25)   The commands available for words, sentences, and paragraphs are useful in
programs.texi(,26) editing code even though their canonical application is for editing human
programs.texi(,27) language text.  Most symbols contain words (@pxref{Words}); sentences can
programs.texi(,28) be found in strings and comments (@pxref{Sentences}).  Paragraphs per se
programs.texi(,29) are not present in code, but the paragraph commands are useful anyway,
programs.texi(,30) because Lisp mode and C mode define paragraphs to begin and end at blank
programs.texi(,31) lines (@pxref{Paragraphs}).  Judicious use of blank lines to make the
programs.texi(,32) program clearer also provides interesting chunks of text for the
programs.texi(,33) paragraph commands to work on.
programs.texi(,34) 
programs.texi(,35)   The selective display feature is useful for looking at the overall
programs.texi(,36) structure of a function (@pxref{Selective Display}).  This feature causes
programs.texi(,37) only the lines that are indented less than a specified amount to appear
programs.texi(,38) on the screen.
programs.texi(,39) 
programs.texi(,40) @menu
programs.texi(,41) * Program Modes::       Major modes for editing programs.
programs.texi(,42) * Lists::               Expressions with balanced parentheses.
programs.texi(,43)                          There are editing commands to operate on them.
programs.texi(,44) * Defuns::              Each program is made up of separate functions.
programs.texi(,45)                          There are editing commands to operate on them.
programs.texi(,46) * Grinding::            Adjusting indentation to show the nesting.
programs.texi(,47) * Matching::            Insertion of a close-delimiter flashes matching open.
programs.texi(,48) * Comments::            Inserting, filling and aligning comments.
programs.texi(,49) * Balanced Editing::    Inserting two matching parentheses at once, etc.
programs.texi(,50) * Lisp Completion::     Completion on symbol names in Lisp code.
programs.texi(,51) * Documentation::       Getting documentation of functions you plan to call.
programs.texi(,52) * Change Log::          Maintaining a change history for your program.
programs.texi(,53) * Tags::                Go direct to any function in your program in one
programs.texi(,54)                          command.  Tags remembers which file it is in.
programs.texi(,55) * Fortran::		Fortran mode and its special features.
programs.texi(,56) * Asm Mode::            Asm mode and its special features.
programs.texi(,57) @end menu
programs.texi(,58) 
programs.texi(,59) @node Program Modes, Lists, Programs, Programs
programs.texi(,60) @section Major Modes for Programming Languages
programs.texi(,61) 
programs.texi(,62) @cindex Lisp mode
programs.texi(,63) @cindex C mode
programs.texi(,64) @cindex Scheme mode
programs.texi(,65)   Emacs has several major modes for the programming languages Lisp, Scheme (a
programs.texi(,66) variant of Lisp), C, Fortran, and Muddle.  Ideally, a major mode should be
programs.texi(,67) implemented for each programming language you might want to edit with
programs.texi(,68) Emacs; but often the mode for one language can serve for other
programs.texi(,69) syntactically similar languages.  The language modes that exist are those
programs.texi(,70) that someone decided to take the trouble to write.
programs.texi(,71) 
programs.texi(,72)   There are several variants of Lisp mode, which differ in the way they
programs.texi(,73) interface to Lisp execution.  @xref{Lisp Modes}.
programs.texi(,74) 
programs.texi(,75)   Each of the programming language modes defines the @key{TAB} key to run
programs.texi(,76) an indentation function that knows the indentation conventions of that
programs.texi(,77) language and updates the current line's indentation accordingly.  For
programs.texi(,78) example, in C mode @key{TAB} is bound to @code{c-indent-line}.  @key{LFD}
programs.texi(,79) is normally defined to do @key{RET} followed by @key{TAB}; thus it, too,
programs.texi(,80) indents in a mode-specific fashion.
programs.texi(,81) 
programs.texi(,82) @kindex DEL
programs.texi(,83) @findex backward-delete-char-untabify
programs.texi(,84)   In most programming languages, indentation is likely to vary from line to
programs.texi(,85) line.  So the major modes for those languages rebind @key{DEL} to treat a
programs.texi(,86) tab as if it were the equivalent number of spaces (using the command
programs.texi(,87) @code{backward-delete-char-untabify}).  This makes it possible to rub out
programs.texi(,88) indentation one column at a time without worrying whether it is made up of
programs.texi(,89) spaces or tabs.  In these modes, use @kbd{C-b C-d} to delete a tab
programs.texi(,90) character before point. 
programs.texi(,91) 
programs.texi(,92)   Programming language modes define paragraphs to be separated only by
programs.texi(,93) blank lines, so that the paragraph commands remain useful.  Auto Fill mode,
programs.texi(,94) if enabled in a programming language major mode, indents the new lines
programs.texi(,95) which it creates.
programs.texi(,96) 
programs.texi(,97) @cindex mode hook
programs.texi(,98) @vindex c-mode-hook
programs.texi(,99) @vindex lisp-mode-hook
programs.texi(,100) @vindex emacs-lisp-mode-hook
programs.texi(,101) @vindex lisp-interaction-mode-hook
programs.texi(,102) @vindex scheme-mode-hook
programs.texi(,103) @vindex muddle-mode-hook
programs.texi(,104)   Turning on a major mode calls a user-supplied function called the
programs.texi(,105) @dfn{mode hook}, which is the value of a Lisp variable.  For example,
programs.texi(,106) turning on C mode calls the value of the variable @code{c-mode-hook} if
programs.texi(,107) that value exists and is non-@code{nil}.  Mode hook variables for other
programs.texi(,108) programming language modes include @code{lisp-mode-hook},
programs.texi(,109) @code{emacs-lisp-mode-hook}, @code{lisp-interaction-mode-hook},
programs.texi(,110) @code{scheme-mode-hook}, and @code{muddle-mode-hook}.  The mode hook
programs.texi(,111) function receives no arguments.@refill
programs.texi(,112) 
programs.texi(,113) @node Lists, Defuns, Program Modes, Programs
programs.texi(,114) @section Lists and Sexps
programs.texi(,115) 
programs.texi(,116) @cindex Control-Meta
programs.texi(,117)   By convention, Emacs keys for dealing with balanced expressions are
programs.texi(,118) usually @kbd{Control-Meta-} characters.  They tend to be analogous in
programs.texi(,119) function to their @kbd{Control-} and @kbd{Meta-} equivalents.  These commands
programs.texi(,120) are usually thought of as pertaining to expressions in programming
programs.texi(,121) languages, but can be useful with any language in which some sort of
programs.texi(,122) parentheses exist (including English).
programs.texi(,123) 
programs.texi(,124) @cindex list
programs.texi(,125) @cindex sexp
programs.texi(,126) @cindex expression
programs.texi(,127)   The commands fall into two classes.  Some commands deal only with
programs.texi(,128) @dfn{lists} (parenthetical groupings).  They see nothing except
programs.texi(,129) parentheses, brackets, braces (depending on what must balance in the
programs.texi(,130) language you are working with), and escape characters that might be used
programs.texi(,131) to quote those.
programs.texi(,132) 
programs.texi(,133)   The other commands deal with expressions or @dfn{sexps}.  The word `sexp'
programs.texi(,134) is derived from @dfn{s-expression}, the term for a symbolic expression in
programs.texi(,135) Lisp.  In Emacs, the notion of `sexp' is not limited to Lisp.  It
programs.texi(,136) refers to an expression in the language  your program is written in.
programs.texi(,137) Each programming language has its own major mode, which customizes the
programs.texi(,138) syntax tables so that expressions in that language count as sexps.
programs.texi(,139) 
programs.texi(,140)   Sexps typically include symbols, numbers, and string constants, as well
programs.texi(,141) as anything contained in parentheses, brackets, or braces.
programs.texi(,142) 
programs.texi(,143)   In languages that use prefix and infix operators, such as C, it is not
programs.texi(,144) possible for all expressions to be sexps.  For example, C mode does not
programs.texi(,145) recognize @samp{foo + bar} as an sexp, even though it @i{is} a C expression;
programs.texi(,146) it recognizes @samp{foo} as one sexp and @samp{bar} as another, with the
programs.texi(,147) @samp{+} as punctuation between them.  This is a fundamental ambiguity:
programs.texi(,148) both @samp{foo + bar} and @samp{foo} are legitimate choices for the sexp to
programs.texi(,149) move over if point is at the @samp{f}.  Note that @samp{(foo + bar)} is a
programs.texi(,150) sexp in C mode.
programs.texi(,151) 
programs.texi(,152)   Some languages have obscure forms of syntax for expressions that nobody
programs.texi(,153) has bothered to make Emacs understand properly.
programs.texi(,154) 
programs.texi(,155) @c doublewidecommands
programs.texi(,156) @table @kbd
programs.texi(,157) @item C-M-f
programs.texi(,158) Move forward over an sexp (@code{forward-sexp}).
programs.texi(,159) @item C-M-b
programs.texi(,160) Move backward over an sexp (@code{backward-sexp}).
programs.texi(,161) @item C-M-k
programs.texi(,162) Kill sexp forward (@code{kill-sexp}).
programs.texi(,163) @item C-M-u
programs.texi(,164) Move up and backward in list structure (@code{backward-up-list}).
programs.texi(,165) @item C-M-d
programs.texi(,166) Move down and forward in list structure (@code{down-list}).
programs.texi(,167) @item C-M-n
programs.texi(,168) Move forward over a list (@code{forward-list}).
programs.texi(,169) @item C-M-p
programs.texi(,170) Move backward over a list (@code{backward-list}).
programs.texi(,171) @item C-M-t
programs.texi(,172) Transpose expressions (@code{transpose-sexps}).
programs.texi(,173) @item C-M-@@
programs.texi(,174) Put mark after following expression (@code{mark-sexp}).
programs.texi(,175) @end table
programs.texi(,176) 
programs.texi(,177) @kindex C-M-f
programs.texi(,178) @kindex C-M-b
programs.texi(,179) @findex forward-sexp
programs.texi(,180) @findex backward-sexp
programs.texi(,181)   To move forward over an sexp, use @kbd{C-M-f} (@code{forward-sexp}).  If
programs.texi(,182) the first significant character after point is an opening delimiter
programs.texi(,183) (@samp{(} in Lisp; @samp{(}, @samp{[}, or @samp{@{} in C), @kbd{C-M-f}
programs.texi(,184) moves past the matching closing delimiter.  If the character begins a
programs.texi(,185) symbol, string, or number, @kbd{C-M-f} moves over that.  If the character
programs.texi(,186) after point is a closing delimiter, @kbd{C-M-f} just moves past it.  (This
programs.texi(,187) last is not really moving across an sexp; it is an exception which is
programs.texi(,188) included in the definition of @kbd{C-M-f} because it is as useful a
programs.texi(,189) behavior as anyone can think of for that situation.)@refill
programs.texi(,190) 
programs.texi(,191)   The command @kbd{C-M-b} (@code{backward-sexp}) moves backward over a
programs.texi(,192) sexp.  The detailed rules are like those above for @kbd{C-M-f}, but with
programs.texi(,193) directions reversed.  If there are any prefix characters (single quote,
programs.texi(,194) back quote, and comma, in Lisp) preceding the sexp, @kbd{C-M-b} moves back
programs.texi(,195) over them as well.
programs.texi(,196) 
programs.texi(,197)   @kbd{C-M-f} or @kbd{C-M-b} with an argument repeats that operation the
programs.texi(,198) specified number of times; with a negative argument, it moves in the
programs.texi(,199) opposite direction.
programs.texi(,200) 
programs.texi(,201) In languages such as C where the comment-terminator can be recognized,
programs.texi(,202) the sexp commands move across comments as if they were whitespace.  In
programs.texi(,203) Lisp and other languages where comments run until the end of a line, it
programs.texi(,204) is very difficult to ignore comments when parsing backwards; therefore,
programs.texi(,205) in such languages the sexp commands treat the text of comments as if it
programs.texi(,206) were code.
programs.texi(,207) 
programs.texi(,208) @kindex C-M-k
programs.texi(,209) @findex kill-sexp
programs.texi(,210)   Killing an sexp at a time can be done with @kbd{C-M-k} (@code{kill-sexp}).
programs.texi(,211) @kbd{C-M-k} kills the characters that @kbd{C-M-f} would move over.
programs.texi(,212) 
programs.texi(,213) @kindex C-M-n
programs.texi(,214) @kindex C-M-p
programs.texi(,215) @findex forward-list
programs.texi(,216) @findex backward-list
programs.texi(,217)   The @dfn{list commands}, @kbd{C-M-n} (@code{forward-list}) and
programs.texi(,218) @kbd{C-M-p} (@code{backward-list}), move over lists like the sexp
programs.texi(,219) commands but skip over any number of other kinds of sexps (symbols,
programs.texi(,220) strings, etc).  In some situations, these commands are useful because
programs.texi(,221) they usually ignore comments, since the comments usually do not contain
programs.texi(,222) any lists.@refill
programs.texi(,223) 
programs.texi(,224) @kindex C-M-u
programs.texi(,225) @kindex C-M-d
programs.texi(,226) @findex backward-up-list
programs.texi(,227) @findex down-list
programs.texi(,228)   @kbd{C-M-n} and @kbd{C-M-p} stay at the same level in parentheses, when
programs.texi(,229) that is possible.  To move @i{up} one (or @var{n}) levels, use @kbd{C-M-u}
programs.texi(,230) (@code{backward-up-list}).
programs.texi(,231) @kbd{C-M-u} moves backward up past one unmatched opening delimiter.  A
programs.texi(,232) positive argument serves as a repeat count; a negative argument reverses
programs.texi(,233) direction of motion and also requests repetition, so it moves forward and
programs.texi(,234) up one or more levels.@refill
programs.texi(,235) 
programs.texi(,236)   To move @i{down} in list structure, use @kbd{C-M-d}
programs.texi(,237) (@code{down-list}).  In Lisp mode, where @samp{(} is the only opening
programs.texi(,238) delimiter, this is nearly the same as searching for a @samp{(}.  An
programs.texi(,239) argument specifies the number of levels of parentheses to go down.
programs.texi(,240) 
programs.texi(,241) @cindex transposition
programs.texi(,242) @kindex C-M-t
programs.texi(,243) @findex transpose-sexps
programs.texi(,244) @kbd{C-M-t} (@code{transpose-sexps}) drags the previous sexp across
programs.texi(,245) the next one.  An argument serves as a repeat count, and a negative
programs.texi(,246) argument drags backwards (thus canceling out the effect of @kbd{C-M-t} with
programs.texi(,247) a positive argument).  An argument of zero, rather than doing nothing,
programs.texi(,248) transposes the sexps ending after point and the mark.
programs.texi(,249) 
programs.texi(,250) @kindex C-M-@@
programs.texi(,251) @findex mark-sexp
programs.texi(,252)   To make the region be the next sexp in the buffer, use @kbd{C-M-@@}
programs.texi(,253) (@code{mark-sexp}) which sets the mark at the same place that
programs.texi(,254) @kbd{C-M-f} would move to.  @kbd{C-M-@@} takes arguments like
programs.texi(,255) @kbd{C-M-f}.  In particular, a negative argument is useful for putting
programs.texi(,256) the mark at the beginning of the previous sexp.
programs.texi(,257) 
programs.texi(,258)   The list and sexp commands' understanding of syntax is completely
programs.texi(,259) controlled by the syntax table.  Any character can, for example, be
programs.texi(,260) declared to be an opening delimiter and act like an open parenthesis.
programs.texi(,261) @xref{Syntax}.
programs.texi(,262) 
programs.texi(,263) @node Defuns, Grinding, Lists, Programs
programs.texi(,264) @section Defuns
programs.texi(,265) @cindex defuns
programs.texi(,266) 
programs.texi(,267)   In Emacs, a parenthetical grouping at the top level in the buffer is
programs.texi(,268) called a @dfn{defun}.  The name derives from the fact that most
programs.texi(,269) top-level lists in Lisp are instances of the special form
programs.texi(,270) @code{defun}, but Emacs calls any top-level parenthetical
programs.texi(,271) grouping counts a defun regardless of its contents or
programs.texi(,272) the programming language.  For example, in C, the body of a
programs.texi(,273) function definition is a defun.
programs.texi(,274) 
programs.texi(,275) @c doublewidecommands
programs.texi(,276) @table @kbd
programs.texi(,277) @item C-M-a
programs.texi(,278) Move to beginning of current or preceding defun
programs.texi(,279) (@code{beginning-of-defun}).
programs.texi(,280) @item C-M-e
programs.texi(,281) Move to end of current or following defun (@code{end-of-defun}).
programs.texi(,282) @item C-M-h
programs.texi(,283) Put region around whole current or following defun (@code{mark-defun}).
programs.texi(,284) @end table
programs.texi(,285) 
programs.texi(,286) @kindex C-M-a
programs.texi(,287) @kindex C-M-e
programs.texi(,288) @kindex C-M-h
programs.texi(,289) @findex beginning-of-defun
programs.texi(,290) @findex end-of-defun
programs.texi(,291) @findex mark-defun
programs.texi(,292)   The commands to move to the beginning and end of the current defun are
programs.texi(,293) @kbd{C-M-a} (@code{beginning-of-defun}) and @kbd{C-M-e} (@code{end-of-defun}).
programs.texi(,294) 
programs.texi(,295)    To operate on the current defun, use @kbd{C-M-h} (@code{mark-defun})
programs.texi(,296) which puts point at the beginning and the mark at the end of the current
programs.texi(,297) or next defun.  This is the easiest way to prepare for moving the defun
programs.texi(,298) to a different place.  In C mode, @kbd{C-M-h} runs the function
programs.texi(,299) @code{mark-c-function}, which is almost the same as @code{mark-defun},
programs.texi(,300) but which backs up over the argument declarations, function name, and
programs.texi(,301) returned data type so that the entire C function is inside the region.
programs.texi(,302) 
programs.texi(,303) @findex compile-defun
programs.texi(,304) To compile and evaluate the current defun, use @kbd{M-x compile-defun}. 
programs.texi(,305) This function prints the results in the minibuffer. If you include an 
programs.texi(,306) argument, it inserts the value in the current buffer after the defun.
programs.texi(,307) 
programs.texi(,308)   Emacs assumes that any open-parenthesis found in the leftmost column is
programs.texi(,309) the start of a defun.  Therefore, @i{never put an open-parenthesis at the
programs.texi(,310) left margin in a Lisp file unless it is the start of a top level list.
programs.texi(,311) Never put an open-brace or other opening delimiter at the beginning of a
programs.texi(,312) line of C code unless it starts the body of a function.}  The most likely
programs.texi(,313) problem case is when you want an opening delimiter at the start of a line
programs.texi(,314) inside a string.  To avoid trouble, put an escape character (@samp{\} in C
programs.texi(,315) and Emacs Lisp, @samp{/} in some other Lisp dialects) before the opening
programs.texi(,316) delimiter.  It will not affect the contents of the string.
programs.texi(,317) 
programs.texi(,318)   The original Emacs found defuns by moving upward a
programs.texi(,319) level of parentheses until there were no more levels to go up.  This
programs.texi(,320) required scanning back to the beginning of the buffer for every
programs.texi(,321) function.  To speed this up, Emacs was changed to assume
programs.texi(,322) that any @samp{(} (or other character assigned the syntactic class of
programs.texi(,323) opening-delimiter) at the left margin is the start of a defun.  This
programs.texi(,324) heuristic is nearly always right; however, it mandates the convention 
programs.texi(,325) described above.
programs.texi(,326) 
programs.texi(,327) @node Grinding, Matching, Defuns, Programs
programs.texi(,328) @section Indentation for Programs
programs.texi(,329) @cindex indentation
programs.texi(,330) @cindex grinding
programs.texi(,331) 
programs.texi(,332)   The best way to keep a program properly indented (``ground'') is to
programs.texi(,333) use Emacs to re-indent it as you change the program.  Emacs has commands
programs.texi(,334) to indent properly either a single line, a specified number of lines, or
programs.texi(,335) all of the lines inside a single parenthetical grouping.
programs.texi(,336) 
programs.texi(,337) @menu
programs.texi(,338) * Basic Indent::
programs.texi(,339) * Multi-line Indent::   Commands to reindent many lines at once.
programs.texi(,340) * Lisp Indent::		Specifying how each Lisp function should be indented.
programs.texi(,341) * C Indent::		Choosing an indentation style for C code.
programs.texi(,342) @end menu
programs.texi(,343) 
programs.texi(,344) @node Basic Indent, Multi-line Indent, Grinding, Grinding
programs.texi(,345) @subsection Basic Program Indentation Commands
programs.texi(,346) 
programs.texi(,347) @c WideCommands
programs.texi(,348) @table @kbd
programs.texi(,349) @item @key{TAB}
programs.texi(,350) Adjust indentation of current line.
programs.texi(,351) @item @key{LFD}
programs.texi(,352) Equivalent to @key{RET} followed by @key{TAB} (@code{newline-and-indent}).
programs.texi(,353) @end table
programs.texi(,354) 
programs.texi(,355) @kindex TAB
programs.texi(,356) @findex c-indent-line
programs.texi(,357) @findex lisp-indent-line
programs.texi(,358)   The basic indentation command is @key{TAB}, which gives the current
programs.texi(,359) line the correct indentation as determined from the previous lines.  The
programs.texi(,360) function that @key{TAB} runs depends on the major mode; it is
programs.texi(,361) @code{lisp-indent-line} in Lisp mode, @code{c-indent-line} in C mode,
programs.texi(,362) etc.  These functions understand different syntaxes for different
programs.texi(,363) languages, but they all do about the same thing.  @key{TAB} in any
programs.texi(,364) programming language major mode inserts or deletes whitespace at the
programs.texi(,365) beginning of the current line, independent of where point is in the
programs.texi(,366) line.  If point is inside the whitespace at the beginning of the line,
programs.texi(,367) @key{TAB} leaves it at the end of that whitespace; otherwise, @key{TAB}
programs.texi(,368) leaves point fixed with respect to the characters around it.
programs.texi(,369) 
programs.texi(,370)   Use @kbd{C-q @key{TAB}} to insert a tab at point.
programs.texi(,371) 
programs.texi(,372) @kindex LFD
programs.texi(,373) @findex newline-and-indent
programs.texi(,374)   When entering a large amount of new code, use @key{LFD}
programs.texi(,375) (@code{newline-and-indent}), which is equivalent to a @key{RET} followed
programs.texi(,376) by a @key{TAB}.  @key{LFD} creates a blank line, then gives it the
programs.texi(,377) appropriate indentation.
programs.texi(,378) 
programs.texi(,379)   @key{TAB} indents the second and following lines of the body of a
programs.texi(,380) parenthetical grouping each under the preceding one; therefore, if you
programs.texi(,381) alter one line's indentation to be nonstandard, the lines below tend
programs.texi(,382) to follow it.  This is the right behavior in cases where the standard
programs.texi(,383) result of @key{TAB} does not look good.
programs.texi(,384) 
programs.texi(,385)   Remember that Emacs assumes that an open-parenthesis, open-brace, or
programs.texi(,386) other opening delimiter at the left margin (including the indentation
programs.texi(,387) routines) is the start of a function.  You should therefore never have
programs.texi(,388) an opening delimiter in column zero that is not the beginning of a
programs.texi(,389) function, not even inside a string.  This restriction is vital for
programs.texi(,390) making the indentation commands fast. @xref{Defuns}, for more
programs.texi(,391) information on this behavior.
programs.texi(,392) 
programs.texi(,393) @node Multi-line Indent, Lisp Indent, Basic Indent, Grinding
programs.texi(,394) @subsection Indenting Several Lines
programs.texi(,395) 
programs.texi(,396)   Several commands are available to re-indent several lines of code
programs.texi(,397) which have been altered or moved to a different level in a list
programs.texi(,398) structure.
programs.texi(,399) 
programs.texi(,400) 
programs.texi(,401) @table @kbd
programs.texi(,402) @item C-M-q
programs.texi(,403) Re-indent all the lines within one list (@code{indent-sexp}).
programs.texi(,404) @item C-u @key{TAB}
programs.texi(,405) Shift an entire list rigidly sideways so that its first line
programs.texi(,406) is properly indented.
programs.texi(,407) @item C-M-\
programs.texi(,408) Re-indent all lines in the region (@code{indent-region}).
programs.texi(,409) @end table
programs.texi(,410) 
programs.texi(,411) @kindex C-M-q
programs.texi(,412) @findex indent-sexp
programs.texi(,413) @findex indent-c-exp
programs.texi(,414)  To re-indent the contents of a single list, position point before the
programs.texi(,415) beginning of it and type @kbd{C-M-q}. This key is bound to
programs.texi(,416) @code{indent-sexp} in Lisp mode, @code{indent-c-exp} in C mode, and
programs.texi(,417) bound to other suitable functions in other modes.  The indentation of
programs.texi(,418) the line the sexp starts on is not changed; therefore, only the relative
programs.texi(,419) indentation within the list, and not its position, is changed.  To
programs.texi(,420) correct the position as well, type a @key{TAB} before @kbd{C-M-q}.
programs.texi(,421) 
programs.texi(,422) @kindex C-u TAB
programs.texi(,423)   If the relative indentation within a list is correct but the
programs.texi(,424) indentation of its beginning is not, go to the line on which the list
programs.texi(,425) begins and type @kbd{C-u @key{TAB}}.  When you give @key{TAB} a numeric
programs.texi(,426) argument, it moves all the lines in the group, starting on the current
programs.texi(,427) line, sideways the same amount that the current line moves.  The command
programs.texi(,428) does not move lines that start inside strings, or C
programs.texi(,429) preprocessor lines when in C mode.
programs.texi(,430) 
programs.texi(,431) @kindex C-M-\
programs.texi(,432) @findex indent-region
programs.texi(,433)   Another way to specify a range to be re-indented is with point and
programs.texi(,434) mark.  The command @kbd{C-M-\} (@code{indent-region}) applies @key{TAB}
programs.texi(,435) to every line whose first character is between point and mark.
programs.texi(,436) 
programs.texi(,437) @node Lisp Indent, C Indent, Multi-line Indent, Grinding
programs.texi(,438) @subsection Customizing Lisp Indentation
programs.texi(,439) @cindex customization
programs.texi(,440) 
programs.texi(,441)   The indentation pattern for a Lisp expression can depend on the function
programs.texi(,442) called by the expression.  For each Lisp function, you can choose among
programs.texi(,443) several predefined patterns of indentation, or define an arbitrary one with
programs.texi(,444) a Lisp program.
programs.texi(,445) 
programs.texi(,446)   The standard pattern of indentation is as follows: the second line of the
programs.texi(,447) expression is indented under the first argument, if that is on the same
programs.texi(,448) line as the beginning of the expression; otherwise, the second line is
programs.texi(,449) indented underneath the function name.  Each following line is indented
programs.texi(,450) under the previous line whose nesting depth is the same.
programs.texi(,451) 
programs.texi(,452) @vindex lisp-indent-offset
programs.texi(,453)   If the variable @code{lisp-indent-offset} is non-@code{nil}, it overrides
programs.texi(,454) the usual indentation pattern for the second line of an expression, so that
programs.texi(,455) such lines are always indented @code{lisp-indent-offset} more columns than
programs.texi(,456) the containing list.
programs.texi(,457) 
programs.texi(,458) @vindex lisp-body-indention
programs.texi(,459)   Certain functions override the standard pattern.  Functions
programs.texi(,460) whose names start with @code{def} always indent the second line by
programs.texi(,461) @code{lisp-body-indention} extra columns beyond the open-parenthesis
programs.texi(,462) starting the expression.
programs.texi(,463) 
programs.texi(,464)   Individual functions can override the standard pattern in various
programs.texi(,465) ways, according to the @code{lisp-indent-function} property of the
programs.texi(,466) function name.  (Note: @code{lisp-indent-function} was formerly called
programs.texi(,467) @code{lisp-indent-hook}).  There are four possibilities for this
programs.texi(,468) property:
programs.texi(,469) 
programs.texi(,470) @table @asis
programs.texi(,471) @item @code{nil}
programs.texi(,472) This is the same as no property; the standard indentation pattern is used.
programs.texi(,473) @item @code{defun}
programs.texi(,474) The pattern used for function names that start with @code{def} is used for
programs.texi(,475) this function also.
programs.texi(,476) @item a number, @var{number}
programs.texi(,477) The first @var{number} arguments of the function are
programs.texi(,478) @dfn{distinguished} arguments; the rest are considered the @dfn{body}
programs.texi(,479) of the expression.  A line in the expression is indented according to
programs.texi(,480) whether the first argument on it is distinguished or not.  If the
programs.texi(,481) argument is part of the body, the line is indented @code{lisp-body-indent}
programs.texi(,482) more columns than the open-parenthesis starting the containing
programs.texi(,483) expression.  If the argument is distinguished and is either the first
programs.texi(,484) or second argument, it is indented @i{twice} that many extra columns.
programs.texi(,485) If the argument is distinguished and not the first or second argument,
programs.texi(,486) the standard pattern is followed for that line.
programs.texi(,487) @item a symbol, @var{symbol}
programs.texi(,488) @var{symbol} should be a function name; that function is called to
programs.texi(,489) calculate the indentation of a line within this expression.  The
programs.texi(,490) function receives two arguments:
programs.texi(,491) @table @asis
programs.texi(,492) @item @var{state}
programs.texi(,493) The value returned by @code{parse-partial-sexp} (a Lisp primitive for
programs.texi(,494) indentation and nesting computation) when it parses up to the
programs.texi(,495) beginning of this line.
programs.texi(,496) @item @var{pos}
programs.texi(,497) The position at which the line being indented begins.
programs.texi(,498) @end table
programs.texi(,499) @noindent
programs.texi(,500) It should return either a number, which is the number of columns of
programs.texi(,501) indentation for that line, or a list whose first element is such a
programs.texi(,502) number.  The difference between returning a number and returning a list
programs.texi(,503) is that a number says that all following lines at the same nesting level
programs.texi(,504) should be indented just like this one; a list says that following lines
programs.texi(,505) might call for different indentations.  This makes a difference when the
programs.texi(,506) indentation is computed by @kbd{C-M-q}; if the value is a number,
programs.texi(,507) @kbd{C-M-q} need not recalculate indentation for the following lines
programs.texi(,508) until the end of the list.
programs.texi(,509) @end table
programs.texi(,510) 
programs.texi(,511) @node C Indent,  , Lisp Indent, Grinding
programs.texi(,512) @subsection Customizing C Indentation
programs.texi(,513) 
programs.texi(,514)   Two variables control which commands perform C indentation and when.
programs.texi(,515) 
programs.texi(,516) @vindex c-auto-newline
programs.texi(,517)   If @code{c-auto-newline} is non-@code{nil}, newlines are inserted both
programs.texi(,518) before and after braces that you insert and after colons and semicolons.
programs.texi(,519) Correct C indentation is done on all the lines that are made this way.
programs.texi(,520) 
programs.texi(,521) @vindex c-tab-always-indent
programs.texi(,522)   If @code{c-tab-always-indent} is non-@code{nil}, the @key{TAB} command
programs.texi(,523) in C mode does indentation only if point is at the left margin or within
programs.texi(,524) the line's indentation.  If there is non-whitespace to the left of point,
programs.texi(,525) @key{TAB} just inserts a tab character in the buffer.  Normally,
programs.texi(,526) this variable is @code{nil}, and @key{TAB} always reindents the current line.
programs.texi(,527) 
programs.texi(,528)   C does not have anything analogous to particular function names for which
programs.texi(,529) special forms of indentation are desirable.  However, it has a different
programs.texi(,530) need for customization facilities: many different styles of C indentation
programs.texi(,531) are in common use.
programs.texi(,532) 
programs.texi(,533)   There are six variables you can set to control the style that Emacs C
programs.texi(,534) mode will use.
programs.texi(,535) 
programs.texi(,536) @table @code
programs.texi(,537) @item c-indent-level
programs.texi(,538) Indentation of C statements within surrounding block.  The surrounding
programs.texi(,539) block's indentation is the indentation of the line on which the
programs.texi(,540) open-brace appears.
programs.texi(,541) @item c-continued-statement-offset
programs.texi(,542) Extra indentation given to a substatement, such as the then-clause of
programs.texi(,543) an @code{if} or body of a @code{while}.
programs.texi(,544) @item c-brace-offset
programs.texi(,545) Extra indentation for lines that start with an open brace.
programs.texi(,546) @item c-brace-imaginary-offset
programs.texi(,547) An open brace following other text is treated as if it were this far
programs.texi(,548) to the right of the start of its line.
programs.texi(,549) @item c-argdecl-indent
programs.texi(,550) Indentation level of declarations of C function arguments.
programs.texi(,551) @item c-label-offset
programs.texi(,552) Extra indentation for a line that is a label, case, or default.
programs.texi(,553) @end table
programs.texi(,554) 
programs.texi(,555) @vindex c-indent-level
programs.texi(,556)   The variable @code{c-indent-level} controls the indentation for C
programs.texi(,557) statements with respect to the surrounding block.  In the example:
programs.texi(,558) 
programs.texi(,559) @example
programs.texi(,560)     @{
programs.texi(,561)       foo ();
programs.texi(,562) @end example
programs.texi(,563) 
programs.texi(,564) @noindent
programs.texi(,565) the difference in indentation between the lines is @code{c-indent-level}.
programs.texi(,566) Its standard value is 2.
programs.texi(,567) 
programs.texi(,568) If the open-brace beginning the compound statement is not at the beginning
programs.texi(,569) of its line, the @code{c-indent-level} is added to the indentation of the
programs.texi(,570) line, not the column of the open-brace.  For example,
programs.texi(,571) 
programs.texi(,572) @example
programs.texi(,573) if (losing) @{
programs.texi(,574)   do_this ();
programs.texi(,575) @end example
programs.texi(,576) 
programs.texi(,577) @noindent
programs.texi(,578) One popular indentation style is that which results from setting
programs.texi(,579) @code{c-indent-level} to 8 and putting open-braces at the end of a line
programs.texi(,580) in this way.  Another popular style prefers to put the open-brace on a
programs.texi(,581) separate line.
programs.texi(,582) 
programs.texi(,583) @vindex c-brace-imaginary-offset
programs.texi(,584)   In fact, the value of the variable @code{c-brace-imaginary-offset} is
programs.texi(,585) also added to the indentation of such a statement.  Normally this variable
programs.texi(,586) is zero.  Think of this variable as the imaginary position of the open
programs.texi(,587) brace, relative to the first non-blank character on the line.  By setting
programs.texi(,588) the variable to 4 and @code{c-indent-level} to 0, you can get this style:
programs.texi(,589) 
programs.texi(,590) @example
programs.texi(,591) if (x == y) @{
programs.texi(,592)     do_it ();
programs.texi(,593)     @}
programs.texi(,594) @end example
programs.texi(,595) 
programs.texi(,596)   When @code{c-indent-level} is zero, the statements inside most braces
programs.texi(,597) line up exactly under the open brace.  An exception are braces in column
programs.texi(,598) zero, like those surrounding a function's body.  The statements inside
programs.texi(,599) those braces are not placed at column zero.  Instead,
programs.texi(,600) @code{c-brace-offset} and @code{c-continued-statement-offset} (see
programs.texi(,601) below) are added to produce a typical offset between brace levels, and
programs.texi(,602) the statements are indented that far.
programs.texi(,603) 
programs.texi(,604) @vindex c-continued-statement-offset
programs.texi(,605)   @code{c-continued-statement-offset} controls the extra indentation for
programs.texi(,606) a line that starts within a statement (but not within parentheses or
programs.texi(,607) brackets).  These lines are usually statements inside other statements,
programs.texi(,608) like the then-clauses of @code{if} statements and the bodies of
programs.texi(,609) @code{while} statements.  The @code{c-continued-statement-offset}
programs.texi(,610) parameter determines the difference in indentation between the two lines in:
programs.texi(,611) 
programs.texi(,612) @example
programs.texi(,613) if (x == y)
programs.texi(,614)   do_it ();
programs.texi(,615) @end example
programs.texi(,616) 
programs.texi(,617) @noindent
programs.texi(,618) The default value for @code{c-continued-statement-offset} is 2.  Some
programs.texi(,619) popular indentation styles correspond to a value of zero for
programs.texi(,620) @code{c-continued-statement-offset}.
programs.texi(,621) 
programs.texi(,622) @vindex c-brace-offset
programs.texi(,623)   @code{c-brace-offset} is the extra indentation given to a line that
programs.texi(,624) starts with an open-brace.  Its standard value is zero;
programs.texi(,625) compare:
programs.texi(,626) 
programs.texi(,627) @example
programs.texi(,628) if (x == y)
programs.texi(,629)   @{
programs.texi(,630) @end example
programs.texi(,631) 
programs.texi(,632) @noindent
programs.texi(,633) with:
programs.texi(,634) 
programs.texi(,635) @example
programs.texi(,636) if (x == y)
programs.texi(,637)   do_it ();
programs.texi(,638) @end example
programs.texi(,639) 
programs.texi(,640) @noindent
programs.texi(,641) If you set @code{c-brace-offset} to 4, the first example becomes:
programs.texi(,642) 
programs.texi(,643) @example
programs.texi(,644) if (x == y)
programs.texi(,645)       @{
programs.texi(,646) @end example
programs.texi(,647) 
programs.texi(,648) @vindex c-argdecl-indent
programs.texi(,649)   @code{c-argdecl-indent} controls the indentation of declarations of the
programs.texi(,650) arguments of a C function.  It is absolute: argument declarations receive
programs.texi(,651) exactly @code{c-argdecl-indent} spaces.  The standard value is 5 and
programs.texi(,652) results in code like this:
programs.texi(,653) 
programs.texi(,654) @example
programs.texi(,655) char *
programs.texi(,656) index (string, char)
programs.texi(,657)      char *string;
programs.texi(,658)      int char;
programs.texi(,659) @end example
programs.texi(,660) 
programs.texi(,661) @vindex c-label-offset
programs.texi(,662)   @code{c-label-offset} is the extra indentation given to a line that
programs.texi(,663) contains a label, a case statement, or a @code{default:} statement.  Its
programs.texi(,664) standard value is @minus{}2 and results in code like this:
programs.texi(,665) 
programs.texi(,666) @example
programs.texi(,667) switch (c)
programs.texi(,668)   @{
programs.texi(,669)   case 'x':
programs.texi(,670) @end example
programs.texi(,671) 
programs.texi(,672) @noindent
programs.texi(,673) If @code{c-label-offset} were zero, the same code would be indented as:
programs.texi(,674) 
programs.texi(,675) @example
programs.texi(,676) switch (c)
programs.texi(,677)   @{
programs.texi(,678)     case 'x':
programs.texi(,679) @end example
programs.texi(,680) 
programs.texi(,681) @noindent
programs.texi(,682) This example assumes that the other variables above also have their
programs.texi(,683) default values. 
programs.texi(,684) 
programs.texi(,685) Using the indentation style produced by the default settings of the
programs.texi(,686) variables just discussed and putting open braces on separate lines
programs.texi(,687) produces clear and readable files.  For an example, look at any of the C
programs.texi(,688) source files of XEmacs.
programs.texi(,689) 
programs.texi(,690) @node Matching, Comments, Grinding, Programs
programs.texi(,691) @section Automatic Display of Matching Parentheses
programs.texi(,692) @cindex matching parentheses
programs.texi(,693) @cindex parentheses
programs.texi(,694) 
programs.texi(,695)   The Emacs parenthesis-matching feature shows you automatically how
programs.texi(,696) parentheses match in the text.  Whenever a self-inserting character that
programs.texi(,697) is a closing delimiter is typed, the cursor moves momentarily to the
programs.texi(,698) location of the matching opening delimiter, provided that is visible on
programs.texi(,699) the screen.  If it is not on the screen, some text starting with that
programs.texi(,700) opening delimiter is displayed in the echo area.  Either way, you see
programs.texi(,701) the grouping you are closing off. 
programs.texi(,702) 
programs.texi(,703)   In Lisp, automatic matching applies only to parentheses.  In C, it
programs.texi(,704) also applies to braces and brackets.  Emacs knows which characters to regard
programs.texi(,705) as matching delimiters based on the syntax table set by the major
programs.texi(,706) mode.  @xref{Syntax}.
programs.texi(,707) 
programs.texi(,708)   If the opening delimiter and closing delimiter are mismatched---as
programs.texi(,709) in @samp{[x)}---the echo area displays a warning message.  The
programs.texi(,710) correct matches are specified in the syntax table.
programs.texi(,711) 
programs.texi(,712) @vindex blink-matching-paren
programs.texi(,713) @vindex blink-matching-paren-distance
programs.texi(,714)   Two variables control parenthesis matching displays.
programs.texi(,715) @code{blink-matching-paren} turns the feature on or off. The default is 
programs.texi(,716) @code{t} (match display is on); @code{nil} turns it off.
programs.texi(,717) @code{blink-matching-paren-distance} specifies how many characters back
programs.texi(,718) Emacs searches to find a matching opening delimiter.  If the match is
programs.texi(,719) not found in the specified region, scanning stops, and nothing is
programs.texi(,720) displayed.  This prevents wasting lots of time scanning when there is no
programs.texi(,721) match.  The default is 4000.
programs.texi(,722) 
programs.texi(,723) @node Comments, Balanced Editing, Matching, Programs
programs.texi(,724) @section Manipulating Comments
programs.texi(,725) @cindex comments
programs.texi(,726) @kindex M-;
programs.texi(,727) @cindex indentation
programs.texi(,728) @findex indent-for-comment
programs.texi(,729) 
programs.texi(,730)   The comment commands insert, kill and align comments.
programs.texi(,731) 
programs.texi(,732) @c WideCommands
programs.texi(,733) @table @kbd
programs.texi(,734) @item M-;
programs.texi(,735) Insert or align comment (@code{indent-for-comment}).
programs.texi(,736) @item C-x ;
programs.texi(,737) Set comment column (@code{set-comment-column}).
programs.texi(,738) @item C-u - C-x ;
programs.texi(,739) Kill comment on current line (@code{kill-comment}).
programs.texi(,740) @item M-@key{LFD}
programs.texi(,741) Like @key{RET} followed by inserting and aligning a comment
programs.texi(,742) (@code{indent-new-comment-line}).
programs.texi(,743) @end table
programs.texi(,744) 
programs.texi(,745)   The command that creates a comment is @kbd{Meta-;}
programs.texi(,746) (@code{indent-for-comment}).  If there is no comment already on the
programs.texi(,747) line, a new comment is created and aligned at a specific column called
programs.texi(,748) the @dfn{comment column}.  Emacs creates the comment by inserting the
programs.texi(,749) string at the value of @code{comment-start}; see below.  Point is left
programs.texi(,750) after that string.  If the text of the line extends past the comment
programs.texi(,751) column, indentation is done to a suitable boundary (usually, at least
programs.texi(,752) one space is inserted).  If the major mode has specified a string to
programs.texi(,753) terminate comments, that string is inserted after point, to keep the
programs.texi(,754) syntax valid.
programs.texi(,755) 
programs.texi(,756)   You can also use @kbd{Meta-;} to align an existing comment.  If a line
programs.texi(,757) already contains the string that starts comments, @kbd{M-;} just moves
programs.texi(,758) point after it and re-indents it to the conventional place.  Exception:
programs.texi(,759) comments starting in column 0 are not moved.
programs.texi(,760) 
programs.texi(,761)   Some major modes have special rules for indenting certain kinds of
programs.texi(,762) comments in certain contexts.  For example, in Lisp code, comments which
programs.texi(,763) start with two semicolons are indented as if they were lines of code,
programs.texi(,764) instead of at the comment column.  Comments which start with three
programs.texi(,765) semicolons are supposed to start at the left margin.  Emacs understands
programs.texi(,766) these conventions by indenting a double-semicolon comment using @key{TAB}
programs.texi(,767) and by not changing the indentation of a triple-semicolon comment at all.
programs.texi(,768) 
programs.texi(,769) @example
programs.texi(,770) ;; This function is just an example.
programs.texi(,771) ;;; Here either two or three semicolons are appropriate.
programs.texi(,772) (defun foo (x)
programs.texi(,773) ;;; And now, the first part of the function:
programs.texi(,774)   ;; The following line adds one.
programs.texi(,775)   (1+ x))           ; This line adds one.
programs.texi(,776) @end example
programs.texi(,777) 
programs.texi(,778)   In C code, a comment preceded on its line by nothing but whitespace
programs.texi(,779) is indented like a line of code.
programs.texi(,780) 
programs.texi(,781)   Even when an existing comment is properly aligned, @kbd{M-;} is still
programs.texi(,782) useful for moving directly to the start of the comment.
programs.texi(,783) 
programs.texi(,784) @kindex C-u - C-x ;
programs.texi(,785) @findex kill-comment
programs.texi(,786)   @kbd{C-u - C-x ;} (@code{kill-comment}) kills the comment on the
programs.texi(,787) current line, if there is one.  The indentation before the start of the
programs.texi(,788) comment is killed as well.  If there does not appear to be a comment in
programs.texi(,789) the line, nothing happens.  To reinsert the comment on another line,
programs.texi(,790) move to the end of that line, type first @kbd{C-y}, and then @kbd{M-;}
programs.texi(,791) to realign the comment.  Note that @kbd{C-u - C-x ;} is not a distinct
programs.texi(,792) key; it is @kbd{C-x ;} (@code{set-comment-column}) with a negative
programs.texi(,793) argument.  That command is programmed to call @code{kill-comment} when
programs.texi(,794) called with a negative argument.  However, @code{kill-comment} is a
programs.texi(,795) valid command which you could bind directly to a key if you wanted to.
programs.texi(,796) 
programs.texi(,797) @subsection Multiple Lines of Comments
programs.texi(,798) 
programs.texi(,799) @kindex M-LFD
programs.texi(,800) @cindex blank lines
programs.texi(,801) @cindex Auto Fill mode
programs.texi(,802) @findex indent-new-comment-line
programs.texi(,803)   If you are typing a comment and want to continue it on another line,
programs.texi(,804) use the command @kbd{Meta-@key{LFD}} (@code{indent-new-comment-line}),
programs.texi(,805) which terminates the comment you are typing, creates a new blank line
programs.texi(,806) afterward, and begins a new comment indented under the old one.  If
programs.texi(,807) Auto Fill mode is on and you go past the fill column while typing, the 
programs.texi(,808) comment is continued in just this fashion.  If point is
programs.texi(,809) not at the end of the line when you type @kbd{M-@key{LFD}}, the text on
programs.texi(,810) the rest of the line becomes part of the new comment line.
programs.texi(,811) 
programs.texi(,812) @subsection Options Controlling Comments
programs.texi(,813) 
programs.texi(,814) @vindex comment-column
programs.texi(,815) @kindex C-x ;
programs.texi(,816) @findex set-comment-column
programs.texi(,817)   The comment column is stored in the variable @code{comment-column}.  You
programs.texi(,818) can explicitly set it to a number.  Alternatively, the command @kbd{C-x ;}
programs.texi(,819) (@code{set-comment-column}) sets the comment column to the column point is
programs.texi(,820) at.  @kbd{C-u C-x ;} sets the comment column to match the last comment
programs.texi(,821) before point in the buffer, and then calls @kbd{Meta-;} to align the
programs.texi(,822) current line's comment under the previous one.  Note that @kbd{C-u - C-x ;}
programs.texi(,823) runs the function @code{kill-comment} as described above.
programs.texi(,824) 
programs.texi(,825)   @code{comment-column} is a per-buffer variable; altering the variable
programs.texi(,826) affects only the current buffer.  You can also change the default value.
programs.texi(,827) @xref{Locals}.  Many major modes initialize this variable
programs.texi(,828) for the current buffer.
programs.texi(,829) 
programs.texi(,830) @vindex comment-start-skip
programs.texi(,831)   The comment commands recognize comments based on the regular expression
programs.texi(,832) that is the value of the variable @code{comment-start-skip}.  This regexp
programs.texi(,833) should not match the null string.  It may match more than the comment
programs.texi(,834) starting delimiter in the strictest sense of the word; for example, in C
programs.texi(,835) mode the value of the variable is @code{@t{"/\\*+ *"}}, which matches extra
programs.texi(,836) stars and spaces after the @samp{/*} itself.  (Note that @samp{\\} is
programs.texi(,837) needed in Lisp syntax to include a @samp{\} in the string, which is needed
programs.texi(,838) to deny the first star its special meaning in regexp syntax.  @xref{Regexps}.)
programs.texi(,839) 
programs.texi(,840) @vindex comment-start
programs.texi(,841) @vindex comment-end
programs.texi(,842)   When a comment command makes a new comment, it inserts the value of
programs.texi(,843) @code{comment-start} to begin it.  The value of @code{comment-end} is
programs.texi(,844) inserted after point and will follow the text you will insert
programs.texi(,845) into the comment.  In C mode, @code{comment-start} has the value
programs.texi(,846) @w{@code{"/* "}} and @code{comment-end} has the value @w{@code{" */"}}.
programs.texi(,847) 
programs.texi(,848) @vindex comment-multi-line
programs.texi(,849)   @code{comment-multi-line} controls how @kbd{M-@key{LFD}}
programs.texi(,850) (@code{indent-new-comment-line}) behaves when used inside a comment.  If
programs.texi(,851) @code{comment-multi-line} is @code{nil}, as it normally is, then
programs.texi(,852) @kbd{M-@key{LFD}} terminates the comment on the starting line and starts
programs.texi(,853) a new comment on the new following line.  If @code{comment-multi-line}
programs.texi(,854) is not @code{nil}, then @kbd{M-@key{LFD}} sets up the new following line
programs.texi(,855) as part of the same comment that was found on the starting line.  This
programs.texi(,856) is done by not inserting a terminator on the old line and not inserting
programs.texi(,857) a starter on the new line.  In languages where multi-line comments are legal,
programs.texi(,858) the value you choose for this variable is a matter of taste.
programs.texi(,859) 
programs.texi(,860) @vindex comment-indent-hook
programs.texi(,861)   The variable @code{comment-indent-hook} should contain a function that
programs.texi(,862) is called to compute the indentation for a newly inserted comment or for
programs.texi(,863) aligning an existing comment.  Major modes set this variable differently.
programs.texi(,864) The function is called with no arguments, but with point at the
programs.texi(,865) beginning of the comment, or at the end of a line if a new comment is to
programs.texi(,866) be inserted.  The function should return the column in which the comment
programs.texi(,867) ought to start.  For example, in Lisp mode, the indent hook function
programs.texi(,868) bases its decision on the number of semicolons that begin an existing
programs.texi(,869) comment and on the code in the preceding lines.
programs.texi(,870) 
programs.texi(,871) @node Balanced Editing, Lisp Completion, Comments, Programs
programs.texi(,872) @section Editing Without Unbalanced Parentheses
programs.texi(,873) 
programs.texi(,874) @table @kbd
programs.texi(,875) @item M-(
programs.texi(,876) Put parentheses around next sexp(s) (@code{insert-parentheses}).
programs.texi(,877) @item M-)
programs.texi(,878) Move past next close parenthesis and re-indent
programs.texi(,879) (@code{move-over-close-and-reindent}).
programs.texi(,880) @end table
programs.texi(,881) 
programs.texi(,882) @kindex M-(
programs.texi(,883) @kindex M-)
programs.texi(,884) @findex insert-parentheses
programs.texi(,885) @findex move-over-close-and-reindent
programs.texi(,886)   The commands @kbd{M-(} (@code{insert-parentheses}) and @kbd{M-)}
programs.texi(,887) (@code{move-over-close-and-reindent}) are designed to facilitate a style of
programs.texi(,888) editing which keeps parentheses balanced at all times.  @kbd{M-(} inserts a
programs.texi(,889) pair of parentheses, either together as in @samp{()}, or, if given an
programs.texi(,890) argument, around the next several sexps, and leaves point after the open
programs.texi(,891) parenthesis.  Instead of typing @kbd{( F O O )}, you can type @kbd{M-( F O
programs.texi(,892) O}, which has the same effect except for leaving the cursor before the
programs.texi(,893) close parenthesis.  You can then type @kbd{M-)}, which moves past the
programs.texi(,894) close parenthesis, deletes any indentation preceding it (in this example
programs.texi(,895) there is none), and indents with @key{LFD} after it.
programs.texi(,896) 
programs.texi(,897) @node Lisp Completion, Documentation, Balanced Editing, Programs
programs.texi(,898) @section Completion for Lisp Symbols
programs.texi(,899) @cindex completion (symbol names)
programs.texi(,900) 
programs.texi(,901)    Completion usually happens in the minibuffer.  An exception is
programs.texi(,902) completion for Lisp symbol names, which is available in all buffers.
programs.texi(,903) 
programs.texi(,904) @kindex M-TAB
programs.texi(,905) @findex lisp-complete-symbol
programs.texi(,906)   The command @kbd{M-@key{TAB}} (@code{lisp-complete-symbol}) takes the
programs.texi(,907) partial Lisp symbol before point to be an abbreviation, and compares it
programs.texi(,908) against all non-trivial Lisp symbols currently known to Emacs.  Any
programs.texi(,909) additional characters that they all have in common are inserted at point.
programs.texi(,910) Non-trivial symbols are those that have function definitions, values, or
programs.texi(,911) properties.
programs.texi(,912) 
programs.texi(,913)   If there is an open-parenthesis immediately before the beginning of
programs.texi(,914) the partial symbol, only symbols with function definitions are considered
programs.texi(,915) as completions.
programs.texi(,916) 
programs.texi(,917)   If the partial name in the buffer has more than one possible completion
programs.texi(,918) and they have no additional characters in common, a list of all possible
programs.texi(,919) completions is displayed in another window.
programs.texi(,920) 
programs.texi(,921) @node Documentation, Change Log, Lisp Completion, Programs
programs.texi(,922) @section Documentation Commands
programs.texi(,923) 
programs.texi(,924) @kindex C-h f
programs.texi(,925) @findex describe-function
programs.texi(,926) @kindex C-h v
programs.texi(,927) @findex describe-variable
programs.texi(,928)   As you edit Lisp code to be run in Emacs, you can use the commands
programs.texi(,929) @kbd{C-h f} (@code{describe-function}) and @kbd{C-h v}
programs.texi(,930) (@code{describe-variable}) to print documentation of functions and
programs.texi(,931) variables you want to call.  These commands use the minibuffer to
programs.texi(,932) read the name of a function or variable to document, and display the
programs.texi(,933) documentation in a window.
programs.texi(,934) 
programs.texi(,935)   For extra convenience, these commands provide default arguments based on
programs.texi(,936) the code in the neighborhood of point.  @kbd{C-h f} sets the default to the
programs.texi(,937) function called in the innermost list containing point.  @kbd{C-h v} uses
programs.texi(,938) the symbol name around or adjacent to point as its default.
programs.texi(,939) 
programs.texi(,940) @findex manual-entry
programs.texi(,941)   The @kbd{M-x manual-entry} command gives you access to documentation
programs.texi(,942) on Unix commands, system calls, and libraries.  The command reads a
programs.texi(,943) topic as an argument, and displays the Unix manual page for that topic. 
programs.texi(,944) @code{manual-entry} always searches all 8 sections of the
programs.texi(,945) manual and concatenates all the entries it finds.  For example,
programs.texi(,946) the topic @samp{termcap} finds the description of the termcap library
programs.texi(,947) from section 3, followed by the description of the termcap data base
programs.texi(,948) from section 5.
programs.texi(,949) 
programs.texi(,950) @node Change Log, Tags, Documentation, Programs
programs.texi(,951) @section Change Logs
programs.texi(,952) 
programs.texi(,953) @cindex change log
programs.texi(,954) @findex add-change-log-entry
programs.texi(,955)   The Emacs command @kbd{M-x add-change-log-entry} helps you keep a record
programs.texi(,956) of when and why you have changed a program.  It assumes that you have a
programs.texi(,957) file in which you write a chronological sequence of entries describing
programs.texi(,958) individual changes.  The default is to store the change entries in a file
programs.texi(,959) called @file{ChangeLog} in the same directory as the file you are editing.
programs.texi(,960) The same @file{ChangeLog} file therefore records changes for all the files
programs.texi(,961) in a directory.
programs.texi(,962) 
programs.texi(,963)   A change log entry starts with a header line that contains your name
programs.texi(,964) and the current date.  Except for these header lines, every line in the
programs.texi(,965) change log starts with a tab.  One entry can describe several changes;
programs.texi(,966) each change starts with a line starting with a tab and a star.  @kbd{M-x
programs.texi(,967) add-change-log-entry} visits the change log file and creates a new entry
programs.texi(,968) unless the most recent entry is for today's date and your name.  In
programs.texi(,969) either case, it adds a new line to start the description of another
programs.texi(,970) change just after the header line of the entry.  When @kbd{M-x
programs.texi(,971) add-change-log-entry} is finished, all is prepared for you to edit in
programs.texi(,972) the description of what you changed and how.  You must then save the
programs.texi(,973) change log file yourself.
programs.texi(,974) 
programs.texi(,975)   The change log file is always visited in Indented Text mode, which means
programs.texi(,976) that @key{LFD} and auto-filling indent each new line like the previous
programs.texi(,977) line.  This is convenient for entering the contents of an entry, which must
programs.texi(,978) be indented.  @xref{Text Mode}.
programs.texi(,979) 
programs.texi(,980)   Here is an example of the formatting conventions used in the change log
programs.texi(,981) for Emacs:
programs.texi(,982) 
programs.texi(,983) @smallexample
programs.texi(,984) Wed Jun 26 19:29:32 1985  Richard M. Stallman  (rms at mit-prep)
programs.texi(,985) 
programs.texi(,986)         * xdisp.c (try_window_id):
programs.texi(,987)         If C-k is done at end of next-to-last line,
programs.texi(,988)         this fn updates window_end_vpos and cannot leave
programs.texi(,989)         window_end_pos nonnegative (it is zero, in fact).
programs.texi(,990)         If display is preempted before lines are output,
programs.texi(,991)         this is inconsistent.  Fix by setting
programs.texi(,992)         blank_end_of_window to nonzero.
programs.texi(,993) 
programs.texi(,994) Tue Jun 25 05:25:33 1985  Richard M. Stallman  (rms at mit-prep)
programs.texi(,995) 
programs.texi(,996)         * cmds.c (Fnewline):
programs.texi(,997)         Call the auto fill hook if appropriate.
programs.texi(,998) 
programs.texi(,999)         * xdisp.c (try_window_id):
programs.texi(,1000)         If point is found by compute_motion after xp, record that
programs.texi(,1001)         permanently.  If display_text_line sets point position wrong
programs.texi(,1002)         (case where line is killed, point is at eob and that line is
programs.texi(,1003)         not displayed), set it again in final compute_motion.
programs.texi(,1004) @end smallexample
programs.texi(,1005) 
programs.texi(,1006) @node Tags, Fortran, Change Log, Programs
programs.texi(,1007) @section Tags Tables
programs.texi(,1008) @cindex tags table
programs.texi(,1009) 
programs.texi(,1010)   A @dfn{tags table} is a description of how a multi-file program is
programs.texi(,1011) broken up into files.  It lists the names of the component files and the
programs.texi(,1012) names and positions of the functions (or other named subunits) in each
programs.texi(,1013) file.  Grouping the related files makes it possible to search or replace
programs.texi(,1014) through all the files with one command.  Recording the function names
programs.texi(,1015) and positions makes possible the @kbd{M-.} command which finds the
programs.texi(,1016) definition of a function by looking up which of the files it is in.
programs.texi(,1017) 
programs.texi(,1018)   Tags tables are stored in files called @dfn{tags table files}.  The
programs.texi(,1019) conventional name for a tags table file is @file{TAGS}.
programs.texi(,1020) 
programs.texi(,1021)   Each entry in the tags table records the name of one tag, the name of the
programs.texi(,1022) file that the tag is defined in (implicitly), and the position in that file
programs.texi(,1023) of the tag's definition.
programs.texi(,1024) 
programs.texi(,1025)   Just what names from the described files are recorded in the tags table
programs.texi(,1026) depends on the programming language of the described file.  They
programs.texi(,1027) normally include all functions and subroutines, and may also include
programs.texi(,1028) global variables, data types, and anything else convenient.  Each name
programs.texi(,1029) recorded is called a @dfn{tag}.
programs.texi(,1030) 
programs.texi(,1031) @cindex C++ class browser, tags
programs.texi(,1032) @cindex tags, C++
programs.texi(,1033) @cindex class browser, C++
programs.texi(,1034) @cindex Ebrowse
programs.texi(,1035) The Ebrowse is a separate facility tailored for C++, with tags and a
programs.texi(,1036) class browser.  @xref{Top,,, ebrowse, Ebrowse User's Manual}.
programs.texi(,1037) 
programs.texi(,1038) @menu
programs.texi(,1039) * Tag Syntax::		Tag syntax for various types of code and text files.
programs.texi(,1040) * Create Tags Table::	Creating a tags table with @code{etags}.
programs.texi(,1041) * Etags Regexps::       Create arbitrary tags using regular expressions.
programs.texi(,1042) * Select Tags Table::	How to visit a tags table.
programs.texi(,1043) * Find Tag::		Commands to find the definition of a specific tag.
programs.texi(,1044) * Tags Search::		Using a tags table for searching and replacing.
programs.texi(,1045) * List Tags::		Listing and finding tags defined in a file.
programs.texi(,1046) @end menu
programs.texi(,1047) 
programs.texi(,1048) @node Tag Syntax
programs.texi(,1049) @subsection Source File Tag Syntax
programs.texi(,1050) 
programs.texi(,1051)   Here is how tag syntax is defined for the most popular languages:
programs.texi(,1052) 
programs.texi(,1053) @itemize @bullet
programs.texi(,1054) @item
programs.texi(,1055) In C code, any C function or typedef is a tag, and so are definitions of
programs.texi(,1056) @code{struct}, @code{union} and @code{enum}.  You can tag function
programs.texi(,1057) declarations and external variables in addition to function definitions
programs.texi(,1058) by giving the @samp{--declarations} option to @code{etags}.
programs.texi(,1059) @code{#define} macro definitions and @code{enum} constants are also
programs.texi(,1060) tags, unless you specify @samp{--no-defines} when making the tags table.
programs.texi(,1061) Similarly, global variables are tags, unless you specify
programs.texi(,1062) @samp{--no-globals}.  Use of @samp{--no-globals} and @samp{--no-defines}
programs.texi(,1063) can make the tags table file much smaller.
programs.texi(,1064) 
programs.texi(,1065) @item
programs.texi(,1066) In C++ code, in addition to all the tag constructs of C code, member
programs.texi(,1067) functions are also recognized, and optionally member variables if you
programs.texi(,1068) use the @samp{--members} option.  Tags for variables and functions in
programs.texi(,1069) classes are named @samp{@var{class}::@var{variable}} and
programs.texi(,1070) @samp{@var{class}::@var{function}}.  @code{operator} functions tags are
programs.texi(,1071) named, for example @samp{operator+}.
programs.texi(,1072) 
programs.texi(,1073) @item
programs.texi(,1074) In Java code, tags include all the constructs recognized in C++, plus
programs.texi(,1075) the @code{interface}, @code{extends} and @code{implements} constructs.
programs.texi(,1076) Tags for variables and functions in classes are named
programs.texi(,1077) @samp{@var{class}.@var{variable}} and @samp{@var{class}.@var{function}}.
programs.texi(,1078) 
programs.texi(,1079) @item
programs.texi(,1080) In La@TeX{} text, the argument of any of the commands @code{\chapter},
programs.texi(,1081) @code{\section}, @code{\subsection}, @code{\subsubsection},
programs.texi(,1082) @code{\eqno}, @code{\label}, @code{\ref}, @code{\cite}, @code{\bibitem},
programs.texi(,1083) @code{\part}, @code{\appendix}, @code{\entry}, or @code{\index}, is a
programs.texi(,1084) tag.@refill
programs.texi(,1085) 
programs.texi(,1086) Other commands can make tags as well, if you specify them in the
programs.texi(,1087) environment variable @code{TEXTAGS} before invoking @code{etags}.  The
programs.texi(,1088) value of this environment variable should be a colon-separated list of
programs.texi(,1089) command names.  For example,
programs.texi(,1090) 
programs.texi(,1091) @example
programs.texi(,1092) TEXTAGS="def:newcommand:newenvironment"
programs.texi(,1093) export TEXTAGS
programs.texi(,1094) @end example
programs.texi(,1095) 
programs.texi(,1096) @noindent
programs.texi(,1097) specifies (using Bourne shell syntax) that the commands @samp{\def},
programs.texi(,1098) @samp{\newcommand} and @samp{\newenvironment} also define tags.
programs.texi(,1099) 
programs.texi(,1100) @item
programs.texi(,1101) In Lisp code, any function defined with @code{defun}, any variable
programs.texi(,1102) defined with @code{defvar} or @code{defconst}, and in general the first
programs.texi(,1103) argument of any expression that starts with @samp{(def} in column zero, is
programs.texi(,1104) a tag.
programs.texi(,1105) 
programs.texi(,1106) @item
programs.texi(,1107) In Scheme code, tags include anything defined with @code{def} or with a
programs.texi(,1108) construct whose name starts with @samp{def}.  They also include variables
programs.texi(,1109) set with @code{set!} at top level in the file.
programs.texi(,1110) @end itemize
programs.texi(,1111) 
programs.texi(,1112)   Several other languages are also supported:
programs.texi(,1113) 
programs.texi(,1114) @itemize @bullet
programs.texi(,1115) 
programs.texi(,1116) @item
programs.texi(,1117) In Ada code, functions, procedures, packages, tasks, and types are
programs.texi(,1118) tags.  Use the @samp{--packages-only} option to create tags for
programs.texi(,1119) packages only.
programs.texi(,1120) 
programs.texi(,1121) With Ada, it is possible to have the same name used for different
programs.texi(,1122) entity kinds (e.g.@: the same name for a procedure and a function).  Also,
programs.texi(,1123) for things like packages, procedures and functions, there is the spec
programs.texi(,1124) (i.e.@: the interface) and the body (i.e.@: the implementation).  To
programs.texi(,1125) facilitate the choice to the user, a tag value is appended with a
programs.texi(,1126) qualifier:
programs.texi(,1127) 
programs.texi(,1128) @table @asis
programs.texi(,1129) @item function
programs.texi(,1130)  @kbd{/f}
programs.texi(,1131) @item procedure
programs.texi(,1132)  @kbd{/p}
programs.texi(,1133) @item package spec
programs.texi(,1134)  @kbd{/s}
programs.texi(,1135) @item package body
programs.texi(,1136)  @kbd{/b}
programs.texi(,1137) @item type
programs.texi(,1138)  @kbd{/t}
programs.texi(,1139) @item task
programs.texi(,1140)  @kbd{/k}
programs.texi(,1141) @end table
programs.texi(,1142) 
programs.texi(,1143) So, as an example, @kbd{M-x find-tag bidule/b} will go directly to the
programs.texi(,1144) body of the package @var{bidule} while @kbd{M-x find-tag bidule} will
programs.texi(,1145) just search for any tag @var{bidule}.
programs.texi(,1146) 
programs.texi(,1147) @item
programs.texi(,1148) In assembler code, labels appearing at the beginning of a line,
programs.texi(,1149) followed by a colon, are tags.
programs.texi(,1150) 
programs.texi(,1151) @item
programs.texi(,1152) In Bison or Yacc input files, each rule defines as a tag the nonterminal
programs.texi(,1153) it constructs.  The portions of the file that contain C code are parsed
programs.texi(,1154) as C code.
programs.texi(,1155) 
programs.texi(,1156) @item
programs.texi(,1157) In Cobol code, tags are paragraph names; that is, any word starting in
programs.texi(,1158) column 8 and followed by a period.
programs.texi(,1159) 
programs.texi(,1160) @item
programs.texi(,1161) In Erlang code, the tags are the functions, records, and macros defined
programs.texi(,1162) in the file.
programs.texi(,1163) 
programs.texi(,1164) @item
programs.texi(,1165) In Fortran code, functions, subroutines and blockdata are tags.
programs.texi(,1166) 
programs.texi(,1167) @item
programs.texi(,1168) In makefiles, targets are tags.
programs.texi(,1169) 
programs.texi(,1170) @item
programs.texi(,1171) In Objective C code, tags include Objective C definitions for classes,
programs.texi(,1172) class categories, methods, and protocols.
programs.texi(,1173) 
programs.texi(,1174) @item
programs.texi(,1175) In Pascal code, the tags are the functions and procedures defined in
programs.texi(,1176) the file.
programs.texi(,1177) 
programs.texi(,1178) @item
programs.texi(,1179) In Perl code, the tags are the procedures defined by the @code{sub},
programs.texi(,1180) @code{my} and @code{local} keywords.  Use @samp{--globals} if you want
programs.texi(,1181) to tag global variables.
programs.texi(,1182) 
programs.texi(,1183) @item
programs.texi(,1184) In PostScript code, the tags are the functions.
programs.texi(,1185) 
programs.texi(,1186) @item
programs.texi(,1187) In Prolog code, a tag name appears at the left margin.
programs.texi(,1188) 
programs.texi(,1189) @item
programs.texi(,1190) In Python code, @code{def} or @code{class} at the beginning of a line
programs.texi(,1191) generate a tag.
programs.texi(,1192) @end itemize
programs.texi(,1193) 
programs.texi(,1194)   You can also generate tags based on regexp matching (@pxref{Etags
programs.texi(,1195) Regexps}) to handle other formats and languages.
programs.texi(,1196) 
programs.texi(,1197) @node Create Tags Table
programs.texi(,1198) @subsection Creating Tags Tables
programs.texi(,1199) @cindex @code{etags} program
programs.texi(,1200) 
programs.texi(,1201)   The @code{etags} program is used to create a tags table file.  It knows
programs.texi(,1202) the syntax of several languages, as described in
programs.texi(,1207) @ref{Tag Syntax}.
programs.texi(,1209) Here is how to run @code{etags}:
programs.texi(,1210) 
programs.texi(,1211) @example
programs.texi(,1212) etags @var{inputfiles}@dots{}
programs.texi(,1213) @end example
programs.texi(,1214) 
programs.texi(,1215) @noindent
programs.texi(,1216) The @code{etags} program reads the specified files, and writes a tags
programs.texi(,1217) table named @file{TAGS} in the current working directory.  You can
programs.texi(,1218) intermix compressed and plain text source file names.  @code{etags}
programs.texi(,1219) knows about the most common compression formats, and does the right
programs.texi(,1220) thing.  So you can compress all your source files and have @code{etags}
programs.texi(,1221) look for compressed versions of its file name arguments, if it does not
programs.texi(,1222) find uncompressed versions.  Under MS-DOS, @code{etags} also looks for
programs.texi(,1223) file names like @samp{mycode.cgz} if it is given @samp{mycode.c} on the
programs.texi(,1224) command line and @samp{mycode.c} does not exist.
programs.texi(,1225) 
programs.texi(,1226)   @code{etags} recognizes the language used in an input file based on
programs.texi(,1227) its file name and contents.  You can specify the language with the
programs.texi(,1228) @samp{--language=@var{name}} option, described below.
programs.texi(,1229) 
programs.texi(,1230)   If the tags table data become outdated due to changes in the files
programs.texi(,1231) described in the table, the way to update the tags table is the same way it
programs.texi(,1232) was made in the first place.  It is not necessary to do this often.
programs.texi(,1233) 
programs.texi(,1234)   If the tags table fails to record a tag, or records it for the wrong
programs.texi(,1235) file, then Emacs cannot possibly find its definition.  However, if the
programs.texi(,1236) position recorded in the tags table becomes a little bit wrong (due to
programs.texi(,1237) some editing in the file that the tag definition is in), the only
programs.texi(,1238) consequence is a slight delay in finding the tag.  Even if the stored
programs.texi(,1239) position is very wrong, Emacs will still find the tag, but it must
programs.texi(,1240) search the entire file for it.
programs.texi(,1241) 
programs.texi(,1242)   So you should update a tags table when you define new tags that you want
programs.texi(,1243) to have listed, or when you move tag definitions from one file to another,
programs.texi(,1244) or when changes become substantial.  Normally there is no need to update
programs.texi(,1245) the tags table after each edit, or even every day.
programs.texi(,1246) 
programs.texi(,1247)   One tags table can effectively include another.  Specify the included
programs.texi(,1248) tags file name with the @samp{--include=@var{file}} option when creating
programs.texi(,1249) the file that is to include it.  The latter file then acts as if it
programs.texi(,1250) contained all the files specified in the included file, as well as the
programs.texi(,1251) files it directly contains.
programs.texi(,1252) 
programs.texi(,1253)   If you specify the source files with relative file names when you run
programs.texi(,1254) @code{etags}, the tags file will contain file names relative to the
programs.texi(,1255) directory where the tags file was initially written.  This way, you can
programs.texi(,1256) move an entire directory tree containing both the tags file and the
programs.texi(,1257) source files, and the tags file will still refer correctly to the source
programs.texi(,1258) files.
programs.texi(,1259) 
programs.texi(,1260)   If you specify absolute file names as arguments to @code{etags}, then
programs.texi(,1261) the tags file will contain absolute file names.  This way, the tags file
programs.texi(,1262) will still refer to the same files even if you move it, as long as the
programs.texi(,1263) source files remain in the same place.  Absolute file names start with
programs.texi(,1264) @samp{/}, or with @samp{@var{device}:/} on MS-DOS and MS-Windows.
programs.texi(,1265) 
programs.texi(,1266)   When you want to make a tags table from a great number of files, you
programs.texi(,1267) may have problems listing them on the command line, because some systems
programs.texi(,1268) have a limit on its length.  The simplest way to circumvent this limit
programs.texi(,1269) is to tell @code{etags} to read the file names from its standard input,
programs.texi(,1270) by typing a dash in place of the file names, like this:
programs.texi(,1271) 
programs.texi(,1272) @smallexample
programs.texi(,1273) find . -name "*.[chCH]" -print | etags -
programs.texi(,1274) @end smallexample
programs.texi(,1275) 
programs.texi(,1276)   Use the option @samp{--language=@var{name}} to specify the language
programs.texi(,1277) explicitly.  You can intermix these options with file names; each one
programs.texi(,1278) applies to the file names that follow it.  Specify
programs.texi(,1279) @samp{--language=auto} to tell @code{etags} to resume guessing the
programs.texi(,1280) language from the file names and file contents.  Specify
programs.texi(,1281) @samp{--language=none} to turn off language-specific processing
programs.texi(,1282) entirely; then @code{etags} recognizes tags by regexp matching alone
programs.texi(,1283) (@pxref{Etags Regexps}).
programs.texi(,1284) 
programs.texi(,1285)   @samp{etags --help} prints the list of the languages @code{etags}
programs.texi(,1286) knows, and the file name rules for guessing the language. It also prints
programs.texi(,1287) a list of all the available @code{etags} options, together with a short
programs.texi(,1288) explanation.
programs.texi(,1289) 
programs.texi(,1290) @node Etags Regexps
programs.texi(,1291) @subsection Etags Regexps
programs.texi(,1292) 
programs.texi(,1293)   The @samp{--regex} option provides a general way of recognizing tags
programs.texi(,1294) based on regexp matching.  You can freely intermix it with file names.
programs.texi(,1295) Each @samp{--regex} option adds to the preceding ones, and applies only
programs.texi(,1296) to the following files.  The syntax is:
programs.texi(,1297) 
programs.texi(,1298) @smallexample
programs.texi(,1299) --regex=/@var{tagregexp}[/@var{nameregexp}]/
programs.texi(,1300) @end smallexample
programs.texi(,1301) 
programs.texi(,1302) @noindent
programs.texi(,1303) where @var{tagregexp} is used to match the lines to tag.  It is always
programs.texi(,1304) anchored, that is, it behaves as if preceded by @samp{^}.  If you want
programs.texi(,1305) to account for indentation, just match any initial number of blanks by
programs.texi(,1306) beginning your regular expression with @samp{[ \t]*}.  In the regular
programs.texi(,1307) expressions, @samp{\} quotes the next character, and @samp{\t} stands
programs.texi(,1308) for the tab character.  Note that @code{etags} does not handle the other
programs.texi(,1309) C escape sequences for special characters.
programs.texi(,1310) 
programs.texi(,1311) @cindex interval operator (in regexps)
programs.texi(,1312)   The syntax of regular expressions in @code{etags} is the same as in
programs.texi(,1313) Emacs, augmented with the @dfn{interval operator}, which works as in
programs.texi(,1314) @code{grep} and @code{ed}.  The syntax of an interval operator is
programs.texi(,1315) @samp{\@{@var{m},@var{n}\@}}, and its meaning is to match the preceding
programs.texi(,1316) expression at least @var{m} times and up to @var{n} times.
programs.texi(,1317) 
programs.texi(,1318)   You should not match more characters with @var{tagregexp} than that
programs.texi(,1319) needed to recognize what you want to tag.  If the match is such that
programs.texi(,1320) more characters than needed are unavoidably matched by @var{tagregexp}
programs.texi(,1321) (as will usually be the case), you should add a @var{nameregexp}, to
programs.texi(,1322) pick out just the tag.  This will enable Emacs to find tags more
programs.texi(,1323) accurately and to do completion on tag names more reliably.  You can
programs.texi(,1324) find some examples below.
programs.texi(,1325) 
programs.texi(,1326)   The option @samp{--ignore-case-regex} (or @samp{-c}) is like
programs.texi(,1327) @samp{--regex}, except that the regular expression provided will be
programs.texi(,1328) matched without regard to case, which is appropriate for various
programs.texi(,1329) programming languages.
programs.texi(,1330) 
programs.texi(,1331)   The @samp{-R} option deletes all the regexps defined with
programs.texi(,1332) @samp{--regex} options.  It applies to the file names following it, as
programs.texi(,1333) you can see from the following example:
programs.texi(,1334) 
programs.texi(,1335) @smallexample
programs.texi(,1336) etags --regex=/@var{reg1}/ voo.doo --regex=/@var{reg2}/ \
programs.texi(,1337)     bar.ber -R --lang=lisp los.er
programs.texi(,1338) @end smallexample
programs.texi(,1339) 
programs.texi(,1340) @noindent
programs.texi(,1341) Here @code{etags} chooses the parsing language for @file{voo.doo} and
programs.texi(,1342) @file{bar.ber} according to their contents.  @code{etags} also uses
programs.texi(,1343) @var{reg1} to recognize additional tags in @file{voo.doo}, and both
programs.texi(,1344) @var{reg1} and @var{reg2} to recognize additional tags in
programs.texi(,1345) @file{bar.ber}.  @code{etags} uses the Lisp tags rules, and no regexp
programs.texi(,1346) matching, to recognize tags in @file{los.er}.
programs.texi(,1347) 
programs.texi(,1348)   A regular expression can be bound to a given language, by prepending
programs.texi(,1349) it with @samp{@{lang@}}.  When you do this, @code{etags} will use the
programs.texi(,1350) regular expression only for files of that language.  @samp{etags --help}
programs.texi(,1351) prints the list of languages recognised by @code{etags}.  The following
programs.texi(,1352) example tags the @code{DEFVAR} macros in the Emacs source files.
programs.texi(,1353) @code{etags} applies this regular expression to C files only:
programs.texi(,1354) 
programs.texi(,1355) @smallexample
programs.texi(,1356) --regex='@{c@}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/'
programs.texi(,1357) @end smallexample
programs.texi(,1358) 
programs.texi(,1359) @noindent
programs.texi(,1360) This feature is particularly useful when storing a list of regular
programs.texi(,1361) expressions in a file.  The following option syntax instructs
programs.texi(,1362) @code{etags} to read two files of regular expressions.  The regular
programs.texi(,1363) expressions contained in the second file are matched without regard to
programs.texi(,1364) case.
programs.texi(,1365) 
programs.texi(,1366) @smallexample
programs.texi(,1367) --regex=@@first-file --ignore-case-regex=@@second-file
programs.texi(,1368) @end smallexample
programs.texi(,1369) 
programs.texi(,1370) @noindent
programs.texi(,1371) A regex file contains one regular expressions per line.  Empty lines,
programs.texi(,1372) and lines beginning with space or tab are ignored.  When the first
programs.texi(,1373) character in a line is @samp{@@}, @code{etags} assumes that the rest of
programs.texi(,1374) the line is the name of a file of regular expressions.  This means that
programs.texi(,1375) such files can be nested.  All the other lines are taken to be regular
programs.texi(,1376) expressions.  For example, one can create a file called
programs.texi(,1377) @samp{emacs.tags} with the following contents (the first line in the
programs.texi(,1378) file is a comment):
programs.texi(,1379) 
programs.texi(,1380) @smallexample
programs.texi(,1381)         -- This is for GNU Emacs source files
programs.texi(,1382) @{c@}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/
programs.texi(,1383) @end smallexample
programs.texi(,1384) 
programs.texi(,1385) @noindent
programs.texi(,1386) and then use it like this:
programs.texi(,1387) 
programs.texi(,1388) @smallexample
programs.texi(,1389) etags --regex=@@emacs.tags *.[ch] */*.[ch]
programs.texi(,1390) @end smallexample
programs.texi(,1391) 
programs.texi(,1392)   Here are some more examples.  The regexps are quoted to protect them
programs.texi(,1393) from shell interpretation.
programs.texi(,1394) 
programs.texi(,1395) @itemize @bullet
programs.texi(,1396) 
programs.texi(,1397) @item
programs.texi(,1398) Tag Octave files:
programs.texi(,1399) 
programs.texi(,1400) @smallexample
programs.texi(,1401) etags --language=none \
programs.texi(,1402)       --regex='/[ \t]*function.*=[ \t]*\([^ \t]*\)[ \t]*(/\1/' \
programs.texi(,1403)       --regex='/###key \(.*\)/\1/' \
programs.texi(,1404)       --regex='/[ \t]*global[ \t].*/' \
programs.texi(,1405)       *.m
programs.texi(,1406) @end smallexample
programs.texi(,1407) 
programs.texi(,1408) @noindent
programs.texi(,1409) Note that tags are not generated for scripts so that you have to add a
programs.texi(,1410) line by yourself of the form `###key <script-name>' if you want to jump
programs.texi(,1411) to it.
programs.texi(,1412) 
programs.texi(,1413) @item
programs.texi(,1414) Tag Tcl files:
programs.texi(,1415) 
programs.texi(,1416) @smallexample
programs.texi(,1417) etags --language=none --regex='/proc[ \t]+\([^ \t]+\)/\1/' *.tcl
programs.texi(,1418) @end smallexample
programs.texi(,1419) 
programs.texi(,1420) @item
programs.texi(,1421) Tag VHDL files:
programs.texi(,1422) 
programs.texi(,1423) @smallexample
programs.texi(,1424) --language=none \
programs.texi(,1425) --regex='/[ \t]*\(ARCHITECTURE\|CONFIGURATION\) +[^ ]* +OF/' \
programs.texi(,1426) --regex='/[ \t]*\(ATTRIBUTE\|ENTITY\|FUNCTION\|PACKAGE\
programs.texi(,1427) \( BODY\)?\|PROCEDURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'
programs.texi(,1428) @end smallexample
programs.texi(,1429) @end itemize
programs.texi(,1430) 
programs.texi(,1431) @node Select Tags Table, Find Tag, Etags Regexps, Tags
programs.texi(,1432) @subsection Selecting a Tags Table
programs.texi(,1433) 
programs.texi(,1434) @vindex tag-table-alist
programs.texi(,1435)    At any time Emacs has one @dfn{selected} tags table, and all the commands
programs.texi(,1436) for working with tags tables use the selected one.  To select a tags table,
programs.texi(,1437) use the variable @code{tag-table-alist}.
programs.texi(,1438) 
programs.texi(,1439) The value of @code{tag-table-alist} is a list that determines which
programs.texi(,1440) @code{TAGS} files should be active for a given buffer.  This is not
programs.texi(,1441) really an association list, in that all elements are checked.  The car
programs.texi(,1442) of each element of this list is a pattern against which the buffers file
programs.texi(,1443) name is compared; if it matches, then the cdr of the list should be the
programs.texi(,1444) name of the tags table to use.  If more than one element of this list
programs.texi(,1445) matches the buffers file name, all of the associated tags tables are
programs.texi(,1446) used.  Earlier ones are searched first.
programs.texi(,1447) 
programs.texi(,1448) If the car of elements of this list are strings, they are treated
programs.texi(,1449) as regular-expressions against which the file is compared (like the
programs.texi(,1450) @code{auto-mode-alist}).  If they are not strings, they are evaluated.
programs.texi(,1451) If they evaluate to non-@code{nil}, the current buffer is considered to
programs.texi(,1452) match.
programs.texi(,1453) 
programs.texi(,1454) If the cdr of the elements of this list are strings, they are
programs.texi(,1455) assumed to name a tags file.  If they name a directory, the string
programs.texi(,1456) @file{tags} is appended to them to get the file name.  If they are not 
programs.texi(,1457) strings, they are evaluated and must return an appropriate string.
programs.texi(,1458) 
programs.texi(,1459) For example:
programs.texi(,1460) 
programs.texi(,1461) @example
programs.texi(,1462)   (setq tag-table-alist
programs.texi(,1463)         '(("/usr/src/public/perl/" . "/usr/src/public/perl/perl-3.0/")
programs.texi(,1464)           ("\\.el$" . "/usr/local/emacs/src/")
programs.texi(,1465)           ("/jbw/gnu/" . "/usr15/degree/stud/jbw/gnu/")
programs.texi(,1466)           ("" . "/usr/local/emacs/src/")
programs.texi(,1467)           ))
programs.texi(,1468) @end example
programs.texi(,1469) 
programs.texi(,1470) The example defines the tags table alist in the following way:
programs.texi(,1471)  
programs.texi(,1472) @itemize @bullet
programs.texi(,1473) @item
programs.texi(,1474) Anything in the directory @file{/usr/src/public/perl/} 
programs.texi(,1475) should use the @file{TAGS} file @file{/usr/src/public/perl/perl-3.0/TAGS}. 
programs.texi(,1476) @item
programs.texi(,1477) Files ending in @file{.el} should use the @file{TAGS} file
programs.texi(,1478) @file{/usr/local/emacs/src/TAGS}. 
programs.texi(,1479) @item
programs.texi(,1480) Anything in or below the directory @file{/jbw/gnu/} should use the 
programs.texi(,1481) @file{TAGS} file @file{/usr15/degree/stud/jbw/gnu/TAGS}.  
programs.texi(,1482) @end itemize
programs.texi(,1483) 
programs.texi(,1484) If you had a file called @file{/usr/jbw/foo.el}, it would use both
programs.texi(,1485) @file{TAGS} files, @* @file{/usr/local/emacs/src/TAGS} and
programs.texi(,1486) @file{/usr15/degree/stud/jbw/gnu/TAGS} (in that order), because it
programs.texi(,1487) matches both patterns.
programs.texi(,1488) 
programs.texi(,1489) If the buffer-local variable @code{buffer-tag-table} is set, it names a
programs.texi(,1490) tags table that is searched before all others when @code{find-tag} is
programs.texi(,1491) executed from this buffer.
programs.texi(,1492) 
programs.texi(,1493) If there is a file called @file{TAGS} in the same directory as the file
programs.texi(,1494) in question, then that tags file will always be used as well (after the
programs.texi(,1495) @code{buffer-tag-table} but before the tables specified by this list).
programs.texi(,1496) 
programs.texi(,1497) If the variable @code{tags-file-name} is set, the @file{TAGS} file it names
programs.texi(,1498) will apply to all buffers (for backwards compatibility.)  It is searched
programs.texi(,1499) first.
programs.texi(,1500) 
programs.texi(,1501) @vindex tags-always-build-completion-table
programs.texi(,1502) If the value of the variable @code{tags-always-build-completion-table}
programs.texi(,1503) is @code{t}, the tags file will always be added to the completion table
programs.texi(,1504) without asking first, regardless of the size of the tags file.
programs.texi(,1505) 
programs.texi(,1506) @vindex tags-file-name
programs.texi(,1507) @findex visit-tags-table
programs.texi(,1508) The function @kbd{M-x visit-tags-table}, is largely made obsolete by
programs.texi(,1509) the variable @code{tag-table-alist}, tells tags commands to use the tags
programs.texi(,1510) table file @var{file} first.  The @var{file} should be the name of a
programs.texi(,1511) file created with the @code{etags} program.  A directory name is also
programs.texi(,1512) acceptable; it means the file @file{TAGS} in that directory.  The
programs.texi(,1513) function only stores the file name you provide in the variable
programs.texi(,1514) @code{tags-file-name}.  Emacs does not actually read in the tags table
programs.texi(,1515) contents until you try to use them.  You can set the variable explicitly
programs.texi(,1516) instead of using @code{visit-tags-table}.  The value of the variable
programs.texi(,1517) @code{tags-file-name} is the name of the tags table used by all buffers.
programs.texi(,1518) This is for backward compatibility, and is largely supplanted by the
programs.texi(,1519) variable @code{tag-table-alist}.
programs.texi(,1520)  
programs.texi(,1521) @node Find Tag, Tags Search, Select Tags Table, Tags
programs.texi(,1522) @subsection Finding a Tag
programs.texi(,1523) 
programs.texi(,1524)   The most important thing that a tags table enables you to do is to find
programs.texi(,1525) the definition of a specific tag.
programs.texi(,1526) 
programs.texi(,1527) @table @kbd
programs.texi(,1528) @item M-.@: @var{tag &optional other-window}
programs.texi(,1529) Find first definition of @var{tag} (@code{find-tag}).
programs.texi(,1530) @item C-u M-.
programs.texi(,1531) Find next alternate definition of last tag specified.
programs.texi(,1532) @item C-x 4 . @var{tag}
programs.texi(,1533) Find first definition of @var{tag}, but display it in another window
programs.texi(,1534) (@code{find-tag-other-window}).
programs.texi(,1535) @end table
programs.texi(,1536) 
programs.texi(,1537) @kindex M-.
programs.texi(,1538) @findex find-tag
programs.texi(,1539)   @kbd{M-.}@: (@code{find-tag}) is the command to find the definition of
programs.texi(,1540) a specified tag.  It searches through the tags table for that tag, as a
programs.texi(,1541) string, then uses the tags table information to determine the file in
programs.texi(,1542) which the definition is used and the approximate character position of
programs.texi(,1543) the definition in the file.  Then @code{find-tag} visits the file,
programs.texi(,1544) moves point to the approximate character position, and starts searching
programs.texi(,1545) ever-increasing distances away for the text that should appear at
programs.texi(,1546) the beginning of the definition.
programs.texi(,1547) 
programs.texi(,1548)   If an empty argument is given (by typing @key{RET}), the sexp in the
programs.texi(,1549) buffer before or around point is used as the name of the tag to find.
programs.texi(,1550) @xref{Lists}, for information on sexps.
programs.texi(,1551) 
programs.texi(,1552)   The argument to @code{find-tag} need not be the whole tag name; it can
programs.texi(,1553) be a substring of a tag name.  However, there can be many tag names
programs.texi(,1554) containing the substring you specify.  Since @code{find-tag} works by
programs.texi(,1555) searching the text of the tags table, it finds the first tag in the table
programs.texi(,1556) that the specified substring appears in.  To find other tags that match
programs.texi(,1557) the substring, give @code{find-tag} a numeric argument, as in @kbd{C-u
programs.texi(,1558) M-.}.  This does not read a tag name, but continues searching the tag
programs.texi(,1559) table's text for another tag containing the same substring last used.
programs.texi(,1560) If your keyboard has a real @key{META} key, @kbd{M-0 M-.}@: is an easier
programs.texi(,1561) alternative to @kbd{C-u M-.}.
programs.texi(,1562) 
programs.texi(,1563) If the optional second argument @var{other-window} is non-@code{nil}, it uses
programs.texi(,1564) another window to display the tag.
programs.texi(,1565) Multiple active tags tables and completion are supported.
programs.texi(,1566) 
programs.texi(,1567) Variables of note include the following:
programs.texi(,1568) 
programs.texi(,1569) @vindex tag-table-alist
programs.texi(,1570) @vindex tags-file-name
programs.texi(,1571) @vindex tags-build-completion-table
programs.texi(,1572) @vindex buffer-tag-table
programs.texi(,1573) @vindex make-tags-files-invisible
programs.texi(,1574) @vindex tag-mark-stack-max
programs.texi(,1575) 
programs.texi(,1576) @table @kbd
programs.texi(,1577) @item tag-table-alist
programs.texi(,1578) Controls which tables apply to which buffers.
programs.texi(,1579) @item tags-file-name
programs.texi(,1580) Stores a default tags table.
programs.texi(,1581) @item tags-build-completion-table
programs.texi(,1582) Controls completion behavior.
programs.texi(,1583) @item buffer-tag-table
programs.texi(,1584) Specifies a buffer-local table.
programs.texi(,1585) @item make-tags-files-invisible
programs.texi(,1586) Sets whether tags tables should be very hidden.
programs.texi(,1587) @item tag-mark-stack-max
programs.texi(,1588) Specifies how many tags-based hops to remember.
programs.texi(,1589) @end table
programs.texi(,1590) 
programs.texi(,1591) @kindex C-x 4 .
programs.texi(,1592) @findex find-tag-other-window
programs.texi(,1593)   Like most commands that can switch buffers, @code{find-tag} has another
programs.texi(,1594) similar command that displays the new buffer in another window.  @kbd{C-x 4
programs.texi(,1595) .}@: invokes the function @code{find-tag-other-window}.  (This key sequence
programs.texi(,1596) ends with a period.)
programs.texi(,1597) 
programs.texi(,1598)   Emacs comes with a tags table file @file{TAGS} (in the directory
programs.texi(,1599) containing Lisp libraries) that includes all the Lisp libraries and all
programs.texi(,1600) the C sources of Emacs.  By specifying this file with @code{visit-tags-table}
programs.texi(,1601) and then using @kbd{M-.}@: you can quickly look at the source of any Emacs
programs.texi(,1602) function.
programs.texi(,1603) 
programs.texi(,1604) @node Tags Search, List Tags, Find Tag, Tags
programs.texi(,1605) @subsection Searching and Replacing with Tags Tables
programs.texi(,1606) 
programs.texi(,1607)   The commands in this section visit and search all the files listed in the
programs.texi(,1608) selected tags table, one by one.  For these commands, the tags table serves
programs.texi(,1609) only to specify a sequence of files to search.  A related command is
programs.texi(,1610) @kbd{M-x grep} (@pxref{Compilation}).
programs.texi(,1611) 
programs.texi(,1612) @table @kbd
programs.texi(,1613) @item M-x tags-search @key{RET} @var{regexp} @key{RET}
programs.texi(,1614) Search for @var{regexp} through the files in the selected tags
programs.texi(,1615) table.
programs.texi(,1616) @item M-x tags-query-replace @key{RET} @var{regexp} @key{RET} @var{replacement} @key{RET}
programs.texi(,1617) Perform a @code{query-replace-regexp} on each file in the selected tags table.
programs.texi(,1618) @item M-,
programs.texi(,1619) Restart one of the commands above, from the current location of point
programs.texi(,1620) (@code{tags-loop-continue}).
programs.texi(,1621) @end table
programs.texi(,1622) 
programs.texi(,1623) @findex tags-search
programs.texi(,1624)   @kbd{M-x tags-search} reads a regexp using the minibuffer, then
programs.texi(,1625) searches for matches in all the files in the selected tags table, one
programs.texi(,1626) file at a time.  It displays the name of the file being searched so you
programs.texi(,1627) can follow its progress.  As soon as it finds an occurrence,
programs.texi(,1628) @code{tags-search} returns.
programs.texi(,1629) 
programs.texi(,1630) @kindex M-,
programs.texi(,1631) @findex tags-loop-continue
programs.texi(,1632)   Having found one match, you probably want to find all the rest.  To find
programs.texi(,1633) one more match, type @kbd{M-,} (@code{tags-loop-continue}) to resume the
programs.texi(,1634) @code{tags-search}.  This searches the rest of the current buffer, followed
programs.texi(,1635) by the remaining files of the tags table.@refill
programs.texi(,1636) 
programs.texi(,1637) @findex tags-query-replace
programs.texi(,1638)   @kbd{M-x tags-query-replace} performs a single
programs.texi(,1639) @code{query-replace-regexp} through all the files in the tags table.  It
programs.texi(,1640) reads a regexp to search for and a string to replace with, just like
programs.texi(,1641) ordinary @kbd{M-x query-replace-regexp}.  It searches much like @kbd{M-x
programs.texi(,1642) tags-search}, but repeatedly, processing matches according to your
programs.texi(,1643) input.  @xref{Replace}, for more information on query replace.
programs.texi(,1644) 
programs.texi(,1645)   It is possible to get through all the files in the tags table with a
programs.texi(,1646) single invocation of @kbd{M-x tags-query-replace}.  But often it is
programs.texi(,1647) useful to exit temporarily, which you can do with any input event that
programs.texi(,1648) has no special query replace meaning.  You can resume the query replace
programs.texi(,1649) subsequently by typing @kbd{M-,}; this command resumes the last tags
programs.texi(,1650) search or replace command that you did.
programs.texi(,1651) 
programs.texi(,1652)   The commands in this section carry out much broader searches than the
programs.texi(,1653) @code{find-tag} family.  The @code{find-tag} commands search only for
programs.texi(,1654) definitions of tags that match your substring or regexp.  The commands
programs.texi(,1655) @code{tags-search} and @code{tags-query-replace} find every occurrence
programs.texi(,1656) of the regexp, as ordinary search commands and replace commands do in
programs.texi(,1657) the current buffer.
programs.texi(,1658) 
programs.texi(,1659)   These commands create buffers only temporarily for the files that they
programs.texi(,1660) have to search (those which are not already visited in Emacs buffers).
programs.texi(,1661) Buffers in which no match is found are quickly killed; the others
programs.texi(,1662) continue to exist.
programs.texi(,1663) 
programs.texi(,1664)   It may have struck you that @code{tags-search} is a lot like
programs.texi(,1665) @code{grep}.  You can also run @code{grep} itself as an inferior of
programs.texi(,1666) Emacs and have Emacs show you the matching lines one by one.  This works
programs.texi(,1667) much like running a compilation; finding the source locations of the
programs.texi(,1668) @code{grep} matches works like finding the compilation errors.
programs.texi(,1669) @xref{Compilation}.
programs.texi(,1670) 
programs.texi(,1671)   If you wish to process all the files in a selected tags table, but
programs.texi(,1672) @kbd{M-x tags-search} and @kbd{M-x tags-query-replace} are not giving
programs.texi(,1673) you the desired result, you can use @kbd{M-x next-file}.
programs.texi(,1674) 
programs.texi(,1675) @table @kbd
programs.texi(,1676) @item C-u M-x next-file
programs.texi(,1677) With a numeric argument, regardless of its value, visit the first
programs.texi(,1678) file in the tags table and prepare to advance sequentially by files.
programs.texi(,1679) @item M-x next-file
programs.texi(,1680) Visit the next file in the selected tags table.
programs.texi(,1681) @end table
programs.texi(,1682) 
programs.texi(,1683) @node List Tags,  , Tags Search, Tags
programs.texi(,1684) @subsection Tags Table Inquiries
programs.texi(,1685) 
programs.texi(,1686) @table @kbd
programs.texi(,1687) @item M-x list-tags
programs.texi(,1688) Display a list of the tags defined in a specific program file.
programs.texi(,1689) @item M-x tags-apropos
programs.texi(,1690) Display a list of all tags matching a specified regexp.
programs.texi(,1691) @end table
programs.texi(,1692) 
programs.texi(,1693) @findex list-tags
programs.texi(,1694)   @kbd{M-x list-tags} reads the name of one of the files described by the
programs.texi(,1695) selected tags table, and displays a list of all the tags defined in that
programs.texi(,1696) file.  The ``file name'' argument is really just a string to compare
programs.texi(,1697) against the names recorded in the tags table; it is read as a string rather
programs.texi(,1698) than a file name.  Therefore, completion and defaulting are not
programs.texi(,1699) available, and you must enter the string the same way it appears in the tag
programs.texi(,1700) table.  Do not include a directory as part of the file name unless the file
programs.texi(,1701) name recorded in the tags table contains that directory.
programs.texi(,1702) 
programs.texi(,1703) @findex tags-apropos
programs.texi(,1704)   @kbd{M-x tags-apropos} is like @code{apropos} for tags.  It reads a regexp,
programs.texi(,1705) then finds all the tags in the selected tags table whose entries match that
programs.texi(,1706) regexp, and displays the tag names found.
programs.texi(,1707) 
programs.texi(,1708) @node Fortran, Asm Mode, Tags, Programs
programs.texi(,1709) @section Fortran Mode
programs.texi(,1710) @cindex Fortran mode
programs.texi(,1711) 
programs.texi(,1712)   Fortran mode provides special motion commands for Fortran statements and
programs.texi(,1713) subprograms, and indentation commands that understand Fortran conventions
programs.texi(,1714) of nesting, line numbers, and continuation statements.
programs.texi(,1715) 
programs.texi(,1716)   Special commands for comments are provided because Fortran comments are
programs.texi(,1717) unlike those of other languages.
programs.texi(,1718) 
programs.texi(,1719)   Built-in abbrevs optionally save typing when you insert Fortran keywords.
programs.texi(,1720) 
programs.texi(,1721) @findex fortran-mode
programs.texi(,1722)   Use @kbd{M-x fortran-mode} to switch to this major mode.  Doing so calls
programs.texi(,1723) the value of @code{fortran-mode-hook} as a function of no arguments if
programs.texi(,1724) that variable has a non-@code{nil} value.
programs.texi(,1725) 
programs.texi(,1726) @menu
programs.texi(,1727) * Motion: Fortran Motion.     Moving point by statements or subprograms.
programs.texi(,1728) * Indent: Fortran Indent.     Indentation commands for Fortran.
programs.texi(,1729) * Comments: Fortran Comments. Inserting and aligning comments.
programs.texi(,1730) * Columns: Fortran Columns.   Measuring columns for valid Fortran.
programs.texi(,1731) * Abbrev: Fortran Abbrev.     Built-in abbrevs for Fortran keywords.
programs.texi(,1732) @end menu
programs.texi(,1733) 
programs.texi(,1734)   Fortran mode was contributed by Michael Prange.
programs.texi(,1735) 
programs.texi(,1736) @node Fortran Motion, Fortran Indent, Fortran, Fortran
programs.texi(,1737) @subsection Motion Commands
programs.texi(,1738) 
programs.texi(,1739)   Fortran mode provides special commands to move by subprograms (functions
programs.texi(,1740) and subroutines) and by statements.  There is also a command to put the
programs.texi(,1741) region around one subprogram, which is convenient for killing it or moving it.
programs.texi(,1742) 
programs.texi(,1743) @kindex C-M-a (Fortran mode)
programs.texi(,1744) @kindex C-M-e (Fortran mode)
programs.texi(,1745) @kindex C-M-h (Fortran mode)
programs.texi(,1746) @kindex C-c C-p (Fortran mode)
programs.texi(,1747) @kindex C-c C-n (Fortran mode)
programs.texi(,1748) @findex beginning-of-fortran-subprogram
programs.texi(,1749) @findex end-of-fortran-subprogram
programs.texi(,1750) @findex mark-fortran-subprogram
programs.texi(,1751) @findex fortran-previous-statement
programs.texi(,1752) @findex fortran-next-statement
programs.texi(,1753) 
programs.texi(,1754) @table @kbd
programs.texi(,1755) @item C-M-a
programs.texi(,1756) Move to beginning of subprogram@*
programs.texi(,1757) (@code{beginning-of-fortran-subprogram}).
programs.texi(,1758) @item C-M-e
programs.texi(,1759) Move to end of subprogram (@code{end-of-fortran-subprogram}).
programs.texi(,1760) @item C-M-h
programs.texi(,1761) Put point at beginning of subprogram and mark at end
programs.texi(,1762) (@code{mark-fortran-subprogram}).
programs.texi(,1763) @item C-c C-n
programs.texi(,1764) Move to beginning of current or next statement
programs.texi(,1765) (@code{fortran-next-@*statement}).
programs.texi(,1766) @item C-c C-p
programs.texi(,1767) Move to beginning of current or previous statement
programs.texi(,1768) (@code{fortran-@*previous-statement}).
programs.texi(,1769) @end table
programs.texi(,1770) 
programs.texi(,1771) @node Fortran Indent, Fortran Comments, Fortran Motion, Fortran
programs.texi(,1772) @subsection Fortran Indentation
programs.texi(,1773) 
programs.texi(,1774)   Special commands and features are available for indenting Fortran
programs.texi(,1775) code.  They make sure various syntactic entities (line numbers, comment line
programs.texi(,1776) indicators, and continuation line flags) appear in the columns that are
programs.texi(,1777) required for standard Fortran.
programs.texi(,1778) 
programs.texi(,1779) @menu
programs.texi(,1780) * Commands: ForIndent Commands. Commands for indenting Fortran.
programs.texi(,1781) * Numbers:  ForIndent Num.      How line numbers auto-indent.
programs.texi(,1782) * Conv:     ForIndent Conv.     Conventions you must obey to avoid trouble.
programs.texi(,1783) * Vars:     ForIndent Vars.     Variables controlling Fortran indent style.
programs.texi(,1784) @end menu
programs.texi(,1785) 
programs.texi(,1786) @node ForIndent Commands, ForIndent Num, Fortran Indent, Fortran Indent
programs.texi(,1787) @subsubsection Fortran Indentation Commands
programs.texi(,1788) 
programs.texi(,1789) @table @kbd
programs.texi(,1790) @item @key{TAB}
programs.texi(,1791) Indent the current line (@code{fortran-indent-line}).
programs.texi(,1792) @item M-@key{LFD}
programs.texi(,1793) Break the current line and set up a continuation line.
programs.texi(,1794) @item C-M-q
programs.texi(,1795) Indent all the lines of the subprogram point is in
programs.texi(,1796) (@code{fortran-indent-subprogram}).
programs.texi(,1797) @end table
programs.texi(,1798) 
programs.texi(,1799) @findex fortran-indent-line
programs.texi(,1800)   @key{TAB} is redefined by Fortran mode to reindent the current line for
programs.texi(,1801) Fortran (@code{fortran-indent-line}).  Line numbers and continuation
programs.texi(,1802) markers are indented to their required columns, and the body of the
programs.texi(,1803) statement is independently indented, based on its nesting in the program.
programs.texi(,1804) 
programs.texi(,1805) @kindex C-M-q (Fortran mode)
programs.texi(,1806) @findex fortran-indent-subprogram
programs.texi(,1807)   The key @kbd{C-M-q} is redefined as @code{fortran-indent-subprogram}, a
programs.texi(,1808) command that reindents all the lines of the Fortran subprogram (function or
programs.texi(,1809) subroutine) containing point.
programs.texi(,1810) 
programs.texi(,1811) @kindex M-LFD (Fortran mode)
programs.texi(,1812) @findex fortran-split-line
programs.texi(,1813)   The key @kbd{M-@key{LFD}} is redefined as @code{fortran-split-line}, a
programs.texi(,1814) command to split a line in the appropriate fashion for Fortran.  In a
programs.texi(,1815) non-comment line, the second half becomes a continuation line and is
programs.texi(,1816) indented accordingly.  In a comment line, both halves become separate
programs.texi(,1817) comment lines.
programs.texi(,1818) 
programs.texi(,1819) @node ForIndent Num, ForIndent Conv, ForIndent Commands, Fortran Indent
programs.texi(,1820) @subsubsection Line Numbers and Continuation
programs.texi(,1821) 
programs.texi(,1822)   If a number is the first non-whitespace in the line, it is assumed to be
programs.texi(,1823) a line number and is moved to columns 0 through 4.  (Columns are always
programs.texi(,1824) counted from 0 in XEmacs.)  If the text on the line starts with the
programs.texi(,1825) conventional Fortran continuation marker @samp{$}, it is moved to column 5.
programs.texi(,1826) If the text begins with any non whitespace character in column 5, it is
programs.texi(,1827) assumed to be an unconventional continuation marker and remains in column
programs.texi(,1828) 5.
programs.texi(,1829) 
programs.texi(,1830) @vindex fortran-line-number-indent
programs.texi(,1831)   Line numbers of four digits or less are normally indented one space.
programs.texi(,1832) This amount is controlled by the variable @code{fortran-line-number-indent},
programs.texi(,1833) which is the maximum indentation a line number can have.  Line numbers
programs.texi(,1834) are indented to right-justify them to end in column 4 unless that would
programs.texi(,1835) require more than the maximum indentation.  The default value of the
programs.texi(,1836) variable is 1.
programs.texi(,1837) 
programs.texi(,1838) @vindex fortran-electric-line-number
programs.texi(,1839)   Simply inserting a line number is enough to indent it according to these
programs.texi(,1840) rules.  As each digit is inserted, the indentation is recomputed.  To turn
programs.texi(,1841) off this feature, set the variable @code{fortran-electric-line-number} to
programs.texi(,1842) @code{nil}.  Then inserting line numbers is like inserting anything else.
programs.texi(,1843) 
programs.texi(,1844) @node ForIndent Conv, ForIndent Vars, ForIndent Num, Fortran Indent
programs.texi(,1845) @subsubsection Syntactic Conventions
programs.texi(,1846) 
programs.texi(,1847)   Fortran mode assumes that you follow certain conventions that simplify
programs.texi(,1848) the task of understanding a Fortran program well enough to indent it
programs.texi(,1849) properly:
programs.texi(,1850) 
programs.texi(,1851) @vindex fortran-continuation-char
programs.texi(,1852) @itemize @bullet
programs.texi(,1853) @item
programs.texi(,1854) Two nested @samp{do} loops never share a @samp{continue} statement.
programs.texi(,1855) 
programs.texi(,1856) @item
programs.texi(,1857) The same character appears in column 5 of all continuation lines.  It
programs.texi(,1858) is the value of the variable @code{fortran-continuation-char}.
programs.texi(,1859) By default, this character is @samp{$}.
programs.texi(,1860) @end itemize
programs.texi(,1861) 
programs.texi(,1862) @noindent
programs.texi(,1863) If you fail to follow these conventions, the indentation commands may
programs.texi(,1864) indent some lines unaesthetically.  However, a correct Fortran program will
programs.texi(,1865) retain its meaning when reindented even if the conventions are not
programs.texi(,1866) followed.
programs.texi(,1867) 
programs.texi(,1868) @node ForIndent Vars,  , ForIndent Conv, Fortran Indent
programs.texi(,1869) @subsubsection Variables for Fortran Indentation
programs.texi(,1870) 
programs.texi(,1871) @vindex fortran-do-indent
programs.texi(,1872) @vindex fortran-if-indent
programs.texi(,1873) @vindex fortran-continuation-indent
programs.texi(,1874) @vindex fortran-check-all-num-for-matching-do
programs.texi(,1875) @vindex fortran-minimum-statement-indent
programs.texi(,1876)   Several additional variables control how Fortran indentation works.
programs.texi(,1877) 
programs.texi(,1878) @table @code
programs.texi(,1879) @item fortran-do-indent
programs.texi(,1880) Extra indentation within each level of @samp{do} statement (the default is 3).
programs.texi(,1881) 
programs.texi(,1882) @item fortran-if-indent
programs.texi(,1883) Extra indentation within each level of @samp{if} statement (the default is 3).
programs.texi(,1884) 
programs.texi(,1885) @item fortran-continuation-indent
programs.texi(,1886) Extra indentation for bodies of continuation lines (the default is 5).
programs.texi(,1887) 
programs.texi(,1888) @item fortran-check-all-num-for-matching-do
programs.texi(,1889) If this is @code{nil}, indentation assumes that each @samp{do}
programs.texi(,1890) statement ends on a @samp{continue} statement.  Therefore, when
programs.texi(,1891) computing indentation for a statement other than @samp{continue}, it
programs.texi(,1892) can save time by not checking for a @samp{do} statement ending there.
programs.texi(,1893) If this is non-@code{nil}, indenting any numbered statement must check
programs.texi(,1894) for a @samp{do} that ends there.  The default is @code{nil}.
programs.texi(,1895) 
programs.texi(,1896) @item fortran-minimum-statement-indent
programs.texi(,1897) Minimum indentation for Fortran statements.  For standard Fortran,
programs.texi(,1898) this is 6.  Statement bodies are always indented at least this much.
programs.texi(,1899) @end table
programs.texi(,1900) 
programs.texi(,1901) @node Fortran Comments, Fortran Columns, Fortran Indent, Fortran
programs.texi(,1902) @subsection Comments
programs.texi(,1903) 
programs.texi(,1904)   The usual Emacs comment commands assume that a comment can follow a line
programs.texi(,1905) of code.  In Fortran, the standard comment syntax requires an entire line
programs.texi(,1906) to be just a comment.  Therefore, Fortran mode replaces the standard Emacs
programs.texi(,1907) comment commands and defines some new variables.
programs.texi(,1908) 
programs.texi(,1909)   Fortran mode can also handle a non-standard comment syntax where comments
programs.texi(,1910) start with @samp{!} and can follow other text.  Because only some Fortran
programs.texi(,1911) compilers accept this syntax, Fortran mode will not insert such comments
programs.texi(,1912) unless you have specified to do so in advance by setting the variable
programs.texi(,1913) @code{comment-start} to @samp{"!"} (@pxref{Variables}).
programs.texi(,1914) 
programs.texi(,1915) @table @kbd
programs.texi(,1916) @item M-;
programs.texi(,1917) Align comment or insert new comment (@code{fortran-comment-indent}).
programs.texi(,1918) 
programs.texi(,1919) @item C-x ;
programs.texi(,1920) Applies to nonstandard @samp{!} comments only.
programs.texi(,1921) 
programs.texi(,1922) @item C-c ;
programs.texi(,1923) Turn all lines of the region into comments, or (with arg)
programs.texi(,1924) turn them back into real code (@code{fortran-comment-region}).
programs.texi(,1925) @end table
programs.texi(,1926) 
programs.texi(,1927)   @kbd{M-;} in Fortran mode is redefined as the command
programs.texi(,1928) @code{fortran-comment-indent}.  Like the usual @kbd{M-;} command,
programs.texi(,1929) it recognizes an existing comment and aligns its text appropriately.
programs.texi(,1930) If there is no existing comment, a comment is inserted and aligned.
programs.texi(,1931) 
programs.texi(,1932) Inserting and aligning comments is not the same in Fortran mode as in
programs.texi(,1933) other modes.  When a new comment must be inserted, a full-line comment is
programs.texi(,1934) inserted if the current line is blank.  On a non-blank line, a
programs.texi(,1935) non-standard @samp{!} comment is inserted if you previously specified
programs.texi(,1936) you wanted to use them.  Otherwise a full-line comment is inserted on a
programs.texi(,1937) new line before the current line.
programs.texi(,1938) 
programs.texi(,1939)   Non-standard @samp{!} comments are aligned like comments in other
programs.texi(,1940) languages, but full-line comments are aligned differently.  In a
programs.texi(,1941) standard full-line comment, the comment delimiter itself must always
programs.texi(,1942) appear in column zero.  What can be aligned is the text within the
programs.texi(,1943) comment.  You can choose from three styles of alignment by setting the
programs.texi(,1944) variable @code{fortran-comment-indent-style} to one of these values:
programs.texi(,1945) 
programs.texi(,1946) @vindex fortran-comment-indent-style
programs.texi(,1947) @vindex fortran-comment-line-column
programs.texi(,1948) @table @code
programs.texi(,1949) @item fixed
programs.texi(,1950) The text is aligned at a fixed column, which is the value of
programs.texi(,1951) @code{fortran-comment-line-column}.  This is the default.
programs.texi(,1952) @item relative
programs.texi(,1953) The text is aligned as if it were a line of code, but with an
programs.texi(,1954) additional @code{fortran-comment-line-column} columns of indentation.
programs.texi(,1955) @item nil
programs.texi(,1956) Text in full-line columns is not moved automatically.
programs.texi(,1957) @end table
programs.texi(,1958) 
programs.texi(,1959) @vindex fortran-comment-indent-char
programs.texi(,1960)   You can also specify the character to be used to indent within
programs.texi(,1961) full-line comments by setting the variable @code{fortran-comment-indent-char}
programs.texi(,1962) to the character you want to use.
programs.texi(,1963) 
programs.texi(,1964) @vindex comment-line-start
programs.texi(,1965) @vindex comment-line-start-skip
programs.texi(,1966)   Fortran mode introduces two variables @code{comment-line-start} and
programs.texi(,1967) @code{comment-line-start-skip}, which do for full-line comments what
programs.texi(,1968) @code{comment-start} and @code{comment-start-skip} do for
programs.texi(,1969) ordinary text-following comments.  Normally these are set properly by
programs.texi(,1970) Fortran mode, so you do not need to change them.
programs.texi(,1971) 
programs.texi(,1972)   The normal Emacs comment command @kbd{C-x ;} has not been redefined.
programs.texi(,1973) It can therefore be used if you use @samp{!} comments, but is useless in
programs.texi(,1974) Fortran mode otherwise. 
programs.texi(,1975) 
programs.texi(,1976) @kindex C-c ; (Fortran mode)
programs.texi(,1977) @findex fortran-comment-region
programs.texi(,1978) @vindex fortran-comment-region
programs.texi(,1979)   The command @kbd{C-c ;} (@code{fortran-comment-region}) turns all the
programs.texi(,1980) lines of the region into comments by inserting the string @samp{C$$$} at
programs.texi(,1981) the front of each one.  With a numeric arg, the region is turned back into
programs.texi(,1982) live code by deleting @samp{C$$$} from the front of each line.  You can
programs.texi(,1983) control the string used for the comments by setting the variable
programs.texi(,1984) @code{fortran-comment-region}.  Note that here we have an example of a
programs.texi(,1985) command and a variable with the same name; the two uses of the name never
programs.texi(,1986) conflict because in Lisp and in Emacs it is always clear from the context
programs.texi(,1987) which one is referred to.
programs.texi(,1988) 
programs.texi(,1989) @node Fortran Columns, Fortran Abbrev, Fortran Comments, Fortran
programs.texi(,1990) @subsection Columns
programs.texi(,1991) 
programs.texi(,1992) @table @kbd
programs.texi(,1993) @item C-c C-r
programs.texi(,1994) Displays a ``column ruler'' momentarily above the current line
programs.texi(,1995) (@code{fortran-column-ruler}).
programs.texi(,1996) @item C-c C-w
programs.texi(,1997) Splits the current window horizontally so that it is 72 columns wide.
programs.texi(,1998) This may help you avoid going over that limit (@code{fortran-window-create}).
programs.texi(,1999) @end table
programs.texi(,2000) 
programs.texi(,2001) @kindex C-c C-r (Fortran mode)
programs.texi(,2002) @findex fortran-column-ruler
programs.texi(,2003)   The command @kbd{C-c C-r} (@code{fortran-column-ruler}) shows a column
programs.texi(,2004) ruler above the current line.  The comment ruler consists of two lines
programs.texi(,2005) of text that show you the locations of columns with special significance
programs.texi(,2006) in Fortran programs.  Square brackets show the limits of the columns for
programs.texi(,2007) line numbers, and curly brackets show the limits of the columns for the
programs.texi(,2008) statement body.  Column numbers appear above them.
programs.texi(,2009) 
programs.texi(,2010)   Note that the column numbers count from zero, as always in XEmacs.  As
programs.texi(,2011) a result, the numbers may not be those you are familiar with; but the
programs.texi(,2012) actual positions in the line are standard Fortran.
programs.texi(,2013) 
programs.texi(,2014)   The text used to display the column ruler is the value of the variable
programs.texi(,2015) @code{fortran-comment-ruler}.  By changing this variable, you can change
programs.texi(,2016) the display.
programs.texi(,2017) 
programs.texi(,2018) @kindex C-c C-w (Fortran mode)
programs.texi(,2019) @findex fortran-window-create
programs.texi(,2020)   For even more help, use @kbd{C-c C-w} (@code{fortran-window-create}), a
programs.texi(,2021) command which splits the current window horizontally, resulting in a window 72
programs.texi(,2022) columns wide.  When you edit in this window, you can immediately see
programs.texi(,2023) when a line gets too wide to be correct Fortran.
programs.texi(,2024) 
programs.texi(,2025) @node Fortran Abbrev,  , Fortran Columns, Fortran
programs.texi(,2026) @subsection Fortran Keyword Abbrevs
programs.texi(,2027) 
programs.texi(,2028)   Fortran mode provides many built-in abbrevs for common keywords and
programs.texi(,2029) declarations.  These are the same sort of abbrevs that you can define
programs.texi(,2030) yourself.  To use them, you must turn on Abbrev mode.  @pxref{Abbrevs}.
programs.texi(,2031) 
programs.texi(,2032)   The built-in abbrevs are unusual in one way: they all start with a
programs.texi(,2033) semicolon.  You cannot normally use semicolon in an abbrev, but Fortran
programs.texi(,2034) mode makes this possible by changing the syntax of semicolon to ``word
programs.texi(,2035) constituent''.
programs.texi(,2036) 
programs.texi(,2037)   For example, one built-in Fortran abbrev is @samp{;c} for
programs.texi(,2038) @samp{continue}.  If you insert @samp{;c} and then insert a punctuation
programs.texi(,2039) character such as a space or a newline, the @samp{;c} changes
programs.texi(,2040) automatically to @samp{continue}, provided Abbrev mode is enabled.@refill
programs.texi(,2041) 
programs.texi(,2042)   Type @samp{;?} or @samp{;C-h} to display a list of all built-in
programs.texi(,2043) Fortran abbrevs and what they stand for.
programs.texi(,2044) 
programs.texi(,2045) @node Asm Mode,  , Fortran, Programs
programs.texi(,2046) @section Asm Mode
programs.texi(,2047) 
programs.texi(,2048) @cindex Asm mode
programs.texi(,2049) Asm mode is a major mode for editing files of assembler code.  It
programs.texi(,2050) defines these commands:
programs.texi(,2051) 
programs.texi(,2052) @table @kbd
programs.texi(,2053) @item @key{TAB}
programs.texi(,2054) @code{tab-to-tab-stop}.
programs.texi(,2055) @item @key{LFD}
programs.texi(,2056) Insert a newline and then indent using @code{tab-to-tab-stop}.
programs.texi(,2057) @item :
programs.texi(,2058) Insert a colon and then remove the indentation from before the label
programs.texi(,2059) preceding colon.  Then do @code{tab-to-tab-stop}.
programs.texi(,2060) @item ;
programs.texi(,2061) Insert or align a comment.
programs.texi(,2062) @end table
programs.texi(,2063) 
programs.texi(,2064)   The variable @code{asm-comment-char} specifies which character
programs.texi(,2065) starts comments in assembler syntax.
building.texi(,1) 
building.texi(,2) @node Running, Abbrevs, Programs, Top
building.texi(,3) @chapter Compiling and Testing Programs
building.texi(,4) 
building.texi(,5)   The previous chapter discusses the Emacs commands that are useful for
building.texi(,6) making changes in programs.  This chapter deals with commands that assist
building.texi(,7) in the larger process of developing and maintaining programs.
building.texi(,8) 
building.texi(,9) @menu
building.texi(,10) * Compilation::        Compiling programs in languages other than Lisp
building.texi(,11)                         (C, Pascal, etc.)
building.texi(,12) * Modes: Lisp Modes.   Various modes for editing Lisp programs, with
building.texi(,13)                        different facilities for running the Lisp programs.
building.texi(,14) * Libraries: Lisp Libraries.      Creating Lisp programs to run in Emacs.
building.texi(,15) * Eval: Lisp Eval.     Executing a single Lisp expression in Emacs.
building.texi(,16) * Debug: Lisp Debug.   Debugging Lisp programs running in Emacs.
building.texi(,17) * Interaction: Lisp Interaction.  Executing Lisp in an Emacs buffer.
building.texi(,18) * External Lisp::      Communicating through Emacs with a separate Lisp.
building.texi(,19) @end menu
building.texi(,20) 
building.texi(,21) @node Compilation, Lisp Modes, Running, Running
building.texi(,22) @section Running ``make'', or Compilers Generally
building.texi(,23) @cindex inferior process
building.texi(,24) @cindex make
building.texi(,25) @cindex compilation errors
building.texi(,26) @cindex error log
building.texi(,27) 
building.texi(,28)   Emacs can run compilers for non-interactive languages like C and
building.texi(,29) Fortran as inferior processes, feeding the error log into an Emacs buffer.
building.texi(,30) It can also parse the error messages and visit the files in which errors
building.texi(,31) are found, moving point to the line where the error occurred.
building.texi(,32) 
building.texi(,33) @table @kbd
building.texi(,34) @item M-x compile
building.texi(,35) Run a compiler asynchronously under Emacs, with error messages to
building.texi(,36) @samp{*compilation*} buffer.
building.texi(,37) @item M-x grep
building.texi(,38) Run @code{grep} asynchronously under Emacs, with matching lines
building.texi(,39) listed in the buffer named @samp{*compilation*}.
building.texi(,40) @item M-x kill-compilation
building.texi(,41) Kill the process made by the @code{M-x compile} command.
building.texi(,42) @item M-x kill-grep
building.texi(,43) Kill the running compilation or @code{grep} subprocess.
building.texi(,44) @item C-x `
building.texi(,45) Visit the next compiler error message or @code{grep} match.
building.texi(,46) @end table
building.texi(,47) 
building.texi(,48) @findex compile
building.texi(,49)   To run @code{make} or another compiler, type @kbd{M-x compile}.  This
building.texi(,50) command reads a shell command line using the minibuffer, then executes
building.texi(,51) the specified command line in an inferior shell with output going to the
building.texi(,52) buffer named @samp{*compilation*}.  By default, the current buffer's
building.texi(,53) default directory is used as the working directory for the execution of
building.texi(,54) the command; therefore, the makefile comes from this directory.
building.texi(,55) 
building.texi(,56) @vindex compile-command
building.texi(,57)   When the shell command line is read, the minibuffer appears containing a
building.texi(,58) default command line (the command you used the last time you typed
building.texi(,59) @kbd{M-x compile}).  If you type just @key{RET}, the same command line is used
building.texi(,60) again.  The first @kbd{M-x compile} provides @code{make -k} as the default.
building.texi(,61) The default is taken from the variable @code{compile-command}; if the
building.texi(,62) appropriate compilation command for a file is something other than
building.texi(,63) @code{make -k}, it can be useful to have the file specify a local value for
building.texi(,64) @code{compile-command} (@pxref{File Variables}).
building.texi(,65) 
building.texi(,66) @cindex compiling files
building.texi(,67)   When you start a compilation, the buffer @samp{*compilation*} is
building.texi(,68) displayed in another window but not selected.  Its mode line displays
building.texi(,69) the word @samp{run} or @samp{exit} in the parentheses to tell you whether
building.texi(,70) compilation is finished.  You do not have to keep this buffer visible;
building.texi(,71) compilation continues in any case.
building.texi(,72) 
building.texi(,73) @findex kill-compilation
building.texi(,74)   To kill the compilation process, type @kbd{M-x kill-compilation}.  The mode
building.texi(,75) line of the @samp{*compilation*} buffer changes to say @samp{signal}
building.texi(,76) instead of @samp{run}.  Starting a new compilation also kills any
building.texi(,77) running compilation, as only one can occur at any time.  Starting a new
building.texi(,78) compilation prompts for confirmation before actually killing a
building.texi(,79) compilation that is running.@refill
building.texi(,80) 
building.texi(,81) @kindex C-x `
building.texi(,82) @findex next-error
building.texi(,83)   To parse the compiler error messages, type @kbd{C-x `}
building.texi(,84) (@code{next-error}).  The character following @kbd{C-x} is the grave
building.texi(,85) accent, not the single quote.  The command displays the buffer
building.texi(,86) @samp{*compilation*} in one window and the buffer in which the next
building.texi(,87) error occurred in another window.  Point in that buffer is moved to the
building.texi(,88) line where the error was found.  The corresponding error message is
building.texi(,89) scrolled to the top of the window in which @samp{*compilation*} is
building.texi(,90) displayed.
building.texi(,91) 
building.texi(,92)   The first time you use @kbd{C-x `} after the start of a compilation, it
building.texi(,93) parses all the error messages, visits all the files that have error
building.texi(,94) messages, and creates markers pointing at the lines the error messages
building.texi(,95) refer to.  It then moves to the first error message location.  Subsequent
building.texi(,96) uses of @kbd{C-x `} advance down the data set up by the first use.  When
building.texi(,97) the preparsed error messages are exhausted, the next @kbd{C-x `} checks for
building.texi(,98) any more error messages that have come in; this is useful if you start
building.texi(,99) editing compiler errors while compilation is still going on.  If no
building.texi(,100) additional error messages have come in, @kbd{C-x `} reports an error.
building.texi(,101) 
building.texi(,102)   @kbd{C-u C-x `} discards the preparsed error message data and parses the
building.texi(,103) @samp{*compilation*} buffer again, then displays the first error.
building.texi(,104) This way, you can process the same set of errors again.
building.texi(,105) 
building.texi(,106)   Instead of running a compiler, you can run @code{grep} and see the
building.texi(,107) lines on which matches were found.  To do this, type @kbd{M-x grep} with
building.texi(,108) an argument line that contains the same arguments you would give to
building.texi(,109) @code{grep}: a @code{grep}-style regexp (usually in single quotes to
building.texi(,110) quote the shell's special characters) followed by filenames, which may
building.texi(,111) use wildcard characters.  The output from @code{grep} goes in the
building.texi(,112) @samp{*compilation*} buffer.  You can use @kbd{C-x `} to find the lines that
building.texi(,113) match as if they were compilation errors.
building.texi(,114) 
building.texi(,115)   Note: a shell is used to run the compile command, but the shell is not
building.texi(,116) run in interactive mode.  In particular, this means that the shell starts
building.texi(,117) up with no prompt.  If you find your usual shell prompt making an
building.texi(,118) unsightly appearance in the @samp{*compilation*} buffer, it means you
building.texi(,119) have made a mistake in your shell's initialization file (@file{.cshrc}
building.texi(,120) or @file{.shrc} or @dots{}) by setting the prompt unconditionally.  The
building.texi(,121) shell initialization file should set the prompt only if there already is
building.texi(,122) a prompt.  Here's how to do it in @code{csh}:
building.texi(,123) 
building.texi(,124) @example
building.texi(,125) if ($?prompt) set prompt = ...
building.texi(,126) @end example
building.texi(,127) 
building.texi(,128) @node Lisp Modes, Lisp Libraries, Compilation, Running
building.texi(,129) @section Major Modes for Lisp
building.texi(,130) 
building.texi(,131)   Emacs has four different major modes for Lisp.  They are the same in
building.texi(,132) terms of editing commands, but differ in the commands for executing Lisp
building.texi(,133) expressions.
building.texi(,134) 
building.texi(,135) @table @asis
building.texi(,136) @item Emacs-Lisp mode
building.texi(,137) The mode for editing source files of programs to run in Emacs Lisp.
building.texi(,138) This mode defines @kbd{C-M-x} to evaluate the current defun.
building.texi(,139) @xref{Lisp Libraries}.
building.texi(,140) @item Lisp Interaction mode
building.texi(,141) The mode for an interactive session with Emacs Lisp.  It defines
building.texi(,142) @key{LFD} to evaluate the sexp before point and insert its value in the
building.texi(,143) buffer.  @xref{Lisp Interaction}.
building.texi(,144) @item Lisp mode
building.texi(,145) The mode for editing source files of programs that run in other dialects
building.texi(,146) of Lisp than Emacs Lisp.  This mode defines @kbd{C-M-x} to send the
building.texi(,147) current defun to an inferior Lisp process.  @xref{External Lisp}.
building.texi(,148) @item Inferior Lisp mode
building.texi(,149) The mode for an interactive session with an inferior Lisp process.
building.texi(,150) This mode combines the special features of Lisp mode and Shell mode
building.texi(,151) (@pxref{Shell Mode}).
building.texi(,152) @item Scheme mode
building.texi(,153) Like Lisp mode but for Scheme programs.
building.texi(,154) @item Inferior Scheme mode
building.texi(,155) The mode for an interactive session with an inferior Scheme process.
building.texi(,156) @end table
building.texi(,157) 
building.texi(,158) @node Lisp Libraries, Lisp Eval, Lisp Modes, Running
building.texi(,159) @section Libraries of Lisp Code for Emacs
building.texi(,160) @cindex libraries
building.texi(,161) @cindex loading Lisp code
building.texi(,162) 
building.texi(,163)   Lisp code for Emacs editing commands is stored in files whose names
building.texi(,164) conventionally end in @file{.el}.  This ending tells Emacs to edit them in
building.texi(,165) Emacs-Lisp mode (@pxref{Lisp Modes}).
building.texi(,166) 
building.texi(,167) @menu
building.texi(,168) * Loading::		Loading libraries of Lisp code into Emacs for use.
building.texi(,169) * Compiling Libraries:: Compiling a library makes it load and run faster.
building.texi(,170) * Mocklisp::		Converting Mocklisp to Lisp so XEmacs can run it.
building.texi(,171) @end menu
building.texi(,172) 
building.texi(,173) @node Loading, Compiling Libraries, Lisp Libraries, Lisp Libraries
building.texi(,174) @subsection Loading Libraries
building.texi(,175) 
building.texi(,176) @table @kbd
building.texi(,177) @item M-x load-file @var{file}
building.texi(,178) Load the file @var{file} of Lisp code.
building.texi(,179) @item M-x load-library @var{library}
building.texi(,180) Load the library named @var{library}.
building.texi(,181) @item M-x locate-library @var{library} &optional @var{nosuffix}
building.texi(,182) Show the full path name of Emacs library @var{library}.
building.texi(,183) @end table
building.texi(,184) 
building.texi(,185) @findex load-file
building.texi(,186)   To execute a file of Emacs Lisp, use @kbd{M-x load-file}.  This
building.texi(,187) command reads the file name you provide in the minibuffer, then executes
building.texi(,188) the contents of that file as Lisp code.  It is not necessary to visit
building.texi(,189) the file first; in fact, this command reads the file as found on
building.texi(,190) disk, not the text in an Emacs buffer.
building.texi(,191) 
building.texi(,192) @findex load
building.texi(,193) @findex load-library
building.texi(,194)   Once a file of Lisp code is installed in the Emacs Lisp library
building.texi(,195) directories, users can load it using @kbd{M-x load-library}.  Programs can
building.texi(,196) load it by calling @code{load-library}, or with @code{load}, a more primitive
building.texi(,197) function that is similar but accepts some additional arguments.
building.texi(,198) 
building.texi(,199)   @kbd{M-x load-library} differs from @kbd{M-x load-file} in that it
building.texi(,200) searches a sequence of directories and tries three file names in each
building.texi(,201) directory.  The three names are: first, the specified name with @file{.elc}
building.texi(,202) appended; second, the name with @file{.el} appended; third, the specified
building.texi(,203) name alone.  A @file{.elc} file would be the result of compiling the Lisp
building.texi(,204) file into byte code;  if possible, it is loaded in preference to the Lisp
building.texi(,205) file itself because the compiled file loads and runs faster.
building.texi(,206) 
building.texi(,207) @cindex loading libraries
building.texi(,208)   Because the argument to @code{load-library} is usually not in itself
building.texi(,209) a valid file name, file name completion is not available.  In fact, when
building.texi(,210) using this command, you usually do not know exactly what file name
building.texi(,211) will be used.
building.texi(,212) 
building.texi(,213) @vindex load-path
building.texi(,214)   The sequence of directories searched by @kbd{M-x load-library} is
building.texi(,215) specified by the variable @code{load-path}, a list of strings that are
building.texi(,216) directory names.  The elements of this list may not begin with "@samp{~}",
building.texi(,217) so you must call @code{expand-file-name} on them before adding them to
building.texi(,218) the list.  The default value of the list contains the directory where
building.texi(,219) the Lisp code for Emacs itself is stored.  If you have libraries of your
building.texi(,220) own, put them in a single directory and add that directory to
building.texi(,221) @code{load-path}.  @code{nil} in this list stands for the current
building.texi(,222) default directory, but it is probably not a good idea to put @code{nil}
building.texi(,223) in the list.  If you start wishing that @code{nil} were in the list, you
building.texi(,224) should probably use @kbd{M-x load-file} for this case.
building.texi(,225) 
building.texi(,226) The variable is initialized by the @b{EMACSLOADPATH} environment
building.texi(,227) variable. If no value is specified, the variable takes the default value
building.texi(,228) specified in the file @file{paths.h} when Emacs was built. If a path
building.texi(,229) isn't specified in @file{paths.h}, a default value is obtained from the
building.texi(,230) file system, near the directory in which the Emacs executable resides.
building.texi(,231) 
building.texi(,232) @findex locate-library
building.texi(,233)  Like @kbd{M-x load-library}, @kbd{M-x locate-library} searches the 
building.texi(,234) directories in @code{load-path} to find the file that @kbd{M-x load-library}
building.texi(,235) would load.  If the optional second argument @var{nosuffix} is
building.texi(,236) non-@code{nil}, the suffixes @file{.elc} or @file{.el} are not added to
building.texi(,237) the specified name @var{library} (like calling @code{load} instead of
building.texi(,238) @code{load-library}).
building.texi(,239) 
building.texi(,240) @cindex autoload
building.texi(,241)    You often do not have to give any command to load a library, because the
building.texi(,242) commands defined in the library are set up to @dfn{autoload} that library.
building.texi(,243) Running any of those commands causes @code{load} to be called to load the
building.texi(,244) library; this replaces the autoload definitions with the real ones from the
building.texi(,245) library.
building.texi(,246) 
building.texi(,247)   If autoloading a file does not finish, either because of an error or
building.texi(,248) because of a @kbd{C-g} quit, all function definitions made by the file
building.texi(,249) are undone automatically.  So are any calls to @code{provide}.  As a
building.texi(,250) consequence, the entire file is loaded a second time if you use one of
building.texi(,251) the autoloadable commands again.  This prevents problems when the
building.texi(,252) command is no longer autoloading but is working incorrectly because the file
building.texi(,253) was only partially loaded.  Function definitions are undone only for
building.texi(,254) autoloading; explicit calls to @code{load} do not undo anything if
building.texi(,255) loading is not completed.
building.texi(,256) 
building.texi(,257) @vindex after-load-alist
building.texi(,258) The variable @code{after-load-alist} takes an alist of expressions to be
building.texi(,259) evaluated when particular files are loaded.  Each element has the form
building.texi(,260) @code{(@var{filename} forms...)}.  When @code{load} is run and the filename
building.texi(,261) argument is @var{filename}, the forms in the corresponding element are
building.texi(,262) executed at the end of loading.
building.texi(,263) 
building.texi(,264) @var{filename} must match exactly.  Normally @var{filename} is the
building.texi(,265) name of a library, with no directory specified, since that is how load
building.texi(,266) is normally called.  An error in @code{forms} does not undo the load, but
building.texi(,267) it does prevent execution of the rest of the @code{forms}.
building.texi(,268) 
building.texi(,269) @node Compiling Libraries, Mocklisp, Loading, Lisp Libraries
building.texi(,270) @subsection Compiling Libraries
building.texi(,271) 
building.texi(,272) @cindex byte code
building.texi(,273)   Emacs Lisp code can be compiled into byte-code which loads faster,
building.texi(,274) takes up less space when loaded, and executes faster.
building.texi(,275) 
building.texi(,276) @table @kbd
building.texi(,277) @item M-x batch-byte-compile
building.texi(,278) Run byte-compile-file on the files remaining on the command line.
building.texi(,279) @item M-x byte-compile-buffer &optional @var{buffer}
building.texi(,280) Byte-compile and evaluate contents of @var{buffer} (default is current 
building.texi(,281) buffer).
building.texi(,282) @item M-x byte-compile-file
building.texi(,283) Compile a file of Lisp code named @var{filename} into a file of byte code.
building.texi(,284) @item M-x byte-compile-and-load-file @var{filename}
building.texi(,285) Compile a file of Lisp code named @var{filename} into a file of byte
building.texi(,286) code and load it.
building.texi(,287) @item M-x byte-recompile-directory @var{directory}
building.texi(,288) Recompile every @file{.el} file in @var{directory} that needs recompilation.
building.texi(,289) @item M-x disassemble
building.texi(,290) Print disassembled code for @var{object} on (optional) @var{stream}.
building.texi(,291) @findex make-obsolete
building.texi(,292) @item M-x make-obsolete @var{function new} 
building.texi(,293) Make the byte-compiler warn that @var{function} is obsolete and @var{new} 
building.texi(,294) should be used instead.
building.texi(,295) @end table
building.texi(,296) 
building.texi(,297) @findex byte-compile-file
building.texi(,298) @findex byte-compile-and-load-file
building.texi(,299) @findex byte-compile-buffer
building.texi(,300)  @kbd{byte-compile-file} creates a byte-code compiled file from an
building.texi(,301) Emacs-Lisp source file.  The default argument for this function is the
building.texi(,302) file visited in the current buffer.  The function reads the specified
building.texi(,303) file, compiles it into byte code, and writes an output file whose name
building.texi(,304) is made by appending @file{c} to the input file name.  Thus, the file
building.texi(,305) @file{rmail.el} would be compiled into @file{rmail.elc}. To compile a
building.texi(,306) file of Lisp code named @var{filename} into a file of byte code and
building.texi(,307) then load it, use @code{byte-compile-and-load-file}. To compile and
building.texi(,308) evaluate Lisp code in a given buffer, use @code{byte-compile-buffer}.
building.texi(,309) 
building.texi(,310) @findex byte-recompile-directory
building.texi(,311)   To recompile all changed Lisp files in a directory, use @kbd{M-x
building.texi(,312) byte-recompile-directory}.  Specify just the directory name as an argument.
building.texi(,313) Each @file{.el} file that has been byte-compiled before is byte-compiled
building.texi(,314) again if it has changed since the previous compilation.  A numeric argument
building.texi(,315) to this command tells it to offer to compile each @file{.el} file that has
building.texi(,316) not been compiled yet.  You must answer @kbd{y} or @kbd{n} to each
building.texi(,317) offer.
building.texi(,318) 
building.texi(,319) @findex batch-byte-compile
building.texi(,320)   You can use the function @code{batch-byte-compile} to invoke Emacs
building.texi(,321) non-interactively from the shell to do byte compilation.  When you use
building.texi(,322) this function, the files to be compiled are specified with command-line
building.texi(,323) arguments.  Use a shell command of the form:
building.texi(,324) 
building.texi(,325) @example
building.texi(,326) emacs -batch -f batch-byte-compile @var{files}...
building.texi(,327) @end example
building.texi(,328) 
building.texi(,329)   Directory names may also be given as arguments; in that case,
building.texi(,330) @code{byte-recompile-directory} is invoked on each such directory.
building.texi(,331) @code{batch-byte-compile} uses all remaining command-line arguments as
building.texi(,332) file or directory names, then kills the Emacs process.
building.texi(,333) 
building.texi(,334) @findex disassemble
building.texi(,335)   @kbd{M-x disassemble} explains the result of byte compilation.  Its
building.texi(,336) argument is a function name.  It displays the byte-compiled code in a help
building.texi(,337) window in symbolic form, one instruction per line.  If the instruction
building.texi(,338) refers to a variable or constant, that is shown, too.
building.texi(,339) 
building.texi(,340) @node Mocklisp,,Compiling Libraries,Lisp Libraries
building.texi(,341) @subsection Converting Mocklisp to Lisp
building.texi(,342) 
building.texi(,343) @cindex mocklisp
building.texi(,344) @findex convert-mocklisp-buffer
building.texi(,345)   XEmacs can run Mocklisp files by converting them to Emacs Lisp first.
building.texi(,346) To convert a Mocklisp file, visit it and then type @kbd{M-x
building.texi(,347) convert-mocklisp-buffer}.  Then save the resulting buffer of Lisp file in a
building.texi(,348) file whose name ends in @file{.el} and use the new file as a Lisp library.
building.texi(,349) 
building.texi(,350)   You cannot currently byte-compile converted Mocklisp code.
building.texi(,351) The reason is that converted Mocklisp code uses some special Lisp features
building.texi(,352) to deal with Mocklisp's incompatible ideas of how arguments are evaluated
building.texi(,353) and which values signify ``true'' or ``false''.
building.texi(,354) 
building.texi(,355) @node Lisp Eval, Lisp Debug, Lisp Libraries, Running
building.texi(,356) @section Evaluating Emacs-Lisp Expressions
building.texi(,357) @cindex Emacs-Lisp mode
building.texi(,358) 
building.texi(,359) @findex emacs-lisp-mode
building.texi(,360)   Lisp programs intended to be run in Emacs should be edited in
building.texi(,361) Emacs-Lisp mode; this will happen automatically for file names ending in
building.texi(,362) @file{.el}.  By contrast, Lisp mode itself should be used for editing
building.texi(,363) Lisp programs intended for other Lisp systems.  Emacs-Lisp mode can be
building.texi(,364) selected with the command @kbd{M-x emacs-lisp-mode}.
building.texi(,365) 
building.texi(,366)   For testing of Lisp programs to run in Emacs, it is useful to be able
building.texi(,367) to evaluate part of the program as it is found in the Emacs buffer.  For
building.texi(,368) example, if you change the text of a Lisp function definition and then
building.texi(,369) evaluate the definition, Emacs installs the change for future calls to the
building.texi(,370) function.  Evaluation of Lisp expressions is also useful in any kind of
building.texi(,371) editing task for invoking non-interactive functions (functions that are
building.texi(,372) not commands).
building.texi(,373) 
building.texi(,374) @table @kbd
building.texi(,375) @item M-:
building.texi(,376) Read a Lisp expression in the minibuffer, evaluate it, and print the
building.texi(,377) value in the minibuffer (@code{eval-expression}).
building.texi(,378) @item C-x C-e
building.texi(,379) Evaluate the Lisp expression before point, and print the value in the
building.texi(,380) minibuffer (@code{eval-last-sexp}).
building.texi(,381) @item C-M-x
building.texi(,382) Evaluate the defun containing point or after point, and print the value in
building.texi(,383) the minibuffer (@code{eval-defun}).
building.texi(,384) @item M-x eval-region
building.texi(,385) Evaluate all the Lisp expressions in the region.
building.texi(,386) @item M-x eval-current-buffer
building.texi(,387) Evaluate all the Lisp expressions in the buffer.
building.texi(,388) @end table
building.texi(,389) 
building.texi(,390) @kindex M-:
building.texi(,391) @findex eval-expression
building.texi(,392)   @kbd{M-:} (@code{eval-expression}) is the most basic command
building.texi(,393) for evaluating a Lisp expression interactively.  It reads the expression
building.texi(,394) using the minibuffer, so you can execute any expression on a buffer
building.texi(,395) regardless of what the buffer contains.  When evaluation is complete,
building.texi(,396) the current buffer is once again the buffer that was current when
building.texi(,397) @kbd{M-:} was typed.
building.texi(,398) 
building.texi(,399) @kindex C-M-x
building.texi(,400) @findex eval-defun
building.texi(,401)   In Emacs-Lisp mode, the key @kbd{C-M-x} is bound to the function
building.texi(,402) @code{eval-defun}, which parses the defun containing point or following point
building.texi(,403) as a Lisp expression and evaluates it.  The value is printed in the echo
building.texi(,404) area.  This command is convenient for installing in the Lisp environment
building.texi(,405) changes that you have just made in the text of a function definition.
building.texi(,406) 
building.texi(,407) @kindex C-x C-e
building.texi(,408) @findex eval-last-sexp
building.texi(,409)   The command @kbd{C-x C-e} (@code{eval-last-sexp}) performs a similar job
building.texi(,410) but is available in all major modes, not just Emacs-Lisp mode.  It finds
building.texi(,411) the sexp before point, reads it as a Lisp expression, evaluates it, and
building.texi(,412) prints the value in the echo area.  It is sometimes useful to type in an
building.texi(,413) expression and then, with point still after it, type @kbd{C-x C-e}.
building.texi(,414) 
building.texi(,415)   If @kbd{C-M-x} or @kbd{C-x C-e} are given a numeric argument, they
building.texi(,416) print the value by inserting it into the current buffer at point, rather
building.texi(,417) than in the echo area.  The argument value does not matter.
building.texi(,418) 
building.texi(,419) @findex eval-region
building.texi(,420) @findex eval-current-buffer
building.texi(,421)   The most general command for evaluating Lisp expressions from a buffer
building.texi(,422) is @code{eval-region}.  @kbd{M-x eval-region} parses the text of the
building.texi(,423) region as one or more Lisp expressions, evaluating them one by one.
building.texi(,424) @kbd{M-x eval-current-buffer} is similar, but it evaluates the entire
building.texi(,425) buffer.  This is a reasonable way to install the contents of a file of
building.texi(,426) Lisp code that you are just ready to test.  After finding and fixing a
building.texi(,427) bug, use @kbd{C-M-x} on each function that you change, to keep the Lisp
building.texi(,428) world in step with the source file.
building.texi(,429) 
building.texi(,430) @node Lisp Debug, Lisp Interaction, Lisp Eval, Running
building.texi(,431) @section The Emacs-Lisp Debugger
building.texi(,432) @cindex debugger
building.texi(,433) 
building.texi(,434) @vindex debug-on-error
building.texi(,435) @vindex debug-on-quit
building.texi(,436)   XEmacs contains a debugger for Lisp programs executing inside it.
building.texi(,437) This debugger is normally not used; many commands frequently get Lisp
building.texi(,438) errors when invoked in inappropriate contexts (such as @kbd{C-f} at the
building.texi(,439) end of the buffer) and it would be unpleasant to enter a special
building.texi(,440) debugging mode in this case.  When you want to make Lisp errors invoke
building.texi(,441) the debugger, you must set the variable @code{debug-on-error} to
building.texi(,442) non-@code{nil}.  Quitting with @kbd{C-g} is not considered an error, and
building.texi(,443) @code{debug-on-error} has no effect on the handling of @kbd{C-g}.
building.texi(,444) However, if you set @code{debug-on-quit} to be non-@code{nil}, @kbd{C-g} will
building.texi(,445) invoke the debugger.  This can be useful for debugging an infinite loop;
building.texi(,446) type @kbd{C-g} once the loop has had time to reach its steady state.
building.texi(,447) @code{debug-on-quit} has no effect on errors.@refill
building.texi(,448) 
building.texi(,449) @findex debug-on-entry
building.texi(,450) @findex cancel-debug-on-entry
building.texi(,451) @findex debug
building.texi(,452)   You can make Emacs enter the debugger when a specified function
building.texi(,453) is called or at a particular place in Lisp code.  Use @kbd{M-x
building.texi(,454) debug-on-entry} with argument @var{fun-name} to have Emacs enter the
building.texi(,455) debugger as soon as @var{fun-name} is called. Use
building.texi(,456) @kbd{M-x cancel-debug-on-entry} to make the function stop entering the
building.texi(,457) debugger when called.  (Redefining the function also does this.)  To enter
building.texi(,458) the debugger from some other place in Lisp code, you must insert the
building.texi(,459) expression @code{(debug)} there and install the changed code with
building.texi(,460) @kbd{C-M-x}.  @xref{Lisp Eval}.@refill
building.texi(,461) 
building.texi(,462)   When the debugger is entered, it displays the previously selected buffer
building.texi(,463) in one window and a buffer named @samp{*Backtrace*} in another window.  The
building.texi(,464) backtrace buffer contains one line for each level of Lisp function
building.texi(,465) execution currently going on.  At the beginning of the buffer is a message
building.texi(,466) describing the reason that the debugger was invoked, for example, an
building.texi(,467) error message if it was invoked due to an error.
building.texi(,468) 
building.texi(,469)   The backtrace buffer is read-only and is in Backtrace mode, a special
building.texi(,470) major mode in which letters are defined as debugger commands.  The
building.texi(,471) usual Emacs editing commands are available; you can switch windows to
building.texi(,472) examine the buffer that was being edited at the time of the error, and
building.texi(,473) you can switch buffers, visit files, and perform any other editing
building.texi(,474) operations.  However, the debugger is a recursive editing level
building.texi(,475) (@pxref{Recursive Edit}); it is a good idea to return to the backtrace
building.texi(,476) buffer and explicitly exit the debugger when you don't want to use it any
building.texi(,477) more.  Exiting the debugger kills the backtrace buffer.
building.texi(,478) 
building.texi(,479) @cindex current stack frame
building.texi(,480)   The contents of the backtrace buffer show you the functions that are
building.texi(,481) executing and the arguments that were given to them.  It also allows you
building.texi(,482) to specify a stack frame by moving point to the line describing that
building.texi(,483) frame.  The frame whose line point is on is considered the @dfn{current
building.texi(,484) frame}.  Some of the debugger commands operate on the current frame.
building.texi(,485) Debugger commands are mainly used for stepping through code one
building.texi(,486) expression at a time.  Here is a list of them:
building.texi(,487) 
building.texi(,488) @table @kbd
building.texi(,489) @item c
building.texi(,490) Exit the debugger and continue execution.  In most cases, execution of
building.texi(,491) the program continues as if the debugger had never been entered (aside
building.texi(,492) from the effect of any variables or data structures you may have changed
building.texi(,493) while inside the debugger).  This includes entry to the debugger due to
building.texi(,494) function entry or exit, explicit invocation, and quitting or certain
building.texi(,495) errors.  Most errors cannot be continued; trying to continue an error usually
building.texi(,496) causes the same error to occur again.
building.texi(,497) @item d
building.texi(,498) Continue execution, but enter the debugger the next time a Lisp
building.texi(,499) function is called.  This allows you to step through the
building.texi(,500) subexpressions of an expression, and see what the subexpressions do and
building.texi(,501) what values they compute.
building.texi(,502) 
building.texi(,503) When you enter the debugger this way, Emacs flags the stack frame for the
building.texi(,504) function call from which you entered.  The same function is then called
building.texi(,505) when you exit the frame.  To cancel this flag, use @kbd{u}.
building.texi(,506) @item b
building.texi(,507) Set up to enter the debugger when the current frame is exited.  Frames
building.texi(,508) that invoke the debugger on exit are flagged with stars.
building.texi(,509) @item u
building.texi(,510) Don't enter the debugger when the current frame is exited.  This
building.texi(,511) cancels a @kbd{b} command on a frame.
building.texi(,512) @item e
building.texi(,513) Read a Lisp expression in the minibuffer, evaluate it, and print the
building.texi(,514) value in the echo area.  This is equivalent to the command @kbd{M-:}.
building.texi(,515) @item q
building.texi(,516) Terminate the program being debugged; return to top-level Emacs
building.texi(,517) command execution.
building.texi(,518) 
building.texi(,519) If the debugger was entered due to a @kbd{C-g} but you really want
building.texi(,520) to quit, not to debug, use the @kbd{q} command.
building.texi(,521) @item r
building.texi(,522) Return a value from the debugger.  The value is computed by reading an
building.texi(,523) expression with the minibuffer and evaluating it.
building.texi(,524) 
building.texi(,525) The value returned by the debugger makes a difference when the debugger
building.texi(,526) was invoked due to exit from a Lisp call frame (as requested with @kbd{b});
building.texi(,527) then the value specified in the @kbd{r} command is used as the value of
building.texi(,528) that frame.
building.texi(,529) 
building.texi(,530) The debugger's return value also matters with many errors.  For example,
building.texi(,531) @code{wrong-type-argument} errors will use the debugger's return value
building.texi(,532) instead of the invalid argument; @code{no-catch} errors will use the
building.texi(,533) debugger value as a throw tag instead of the tag that was not found.
building.texi(,534) If an error was signaled by calling the Lisp function @code{signal},
building.texi(,535) the debugger's return value is returned as the value of @code{signal}.
building.texi(,536) @end table
building.texi(,537) 
building.texi(,538) @node Lisp Interaction, External Lisp, Lisp Debug, Running
building.texi(,539) @section Lisp Interaction Buffers
building.texi(,540) 
building.texi(,541)   The buffer @samp{*scratch*}, which is selected when Emacs starts up, is
building.texi(,542) provided for evaluating Lisp expressions interactively inside Emacs.  Both
building.texi(,543) the expressions you evaluate and their output goes in the buffer.
building.texi(,544) 
building.texi(,545)   The @samp{*scratch*} buffer's major mode is Lisp Interaction mode, which
building.texi(,546) is the same as Emacs-Lisp mode except for one command, @key{LFD}.  In
building.texi(,547) Emacs-Lisp mode, @key{LFD} is an indentation command.  In Lisp
building.texi(,548) Interaction mode, @key{LFD} is bound to @code{eval-print-last-sexp}.  This
building.texi(,549) function reads the Lisp expression before point, evaluates it, and inserts
building.texi(,550) the value in printed representation before point.
building.texi(,551) 
building.texi(,552)  The way to use the @samp{*scratch*} buffer is to insert Lisp
building.texi(,553) expressions at the end, ending each one with @key{LFD} so that it will
building.texi(,554) be evaluated.  The result is a complete typescript of the expressions
building.texi(,555) you have evaluated and their values.
building.texi(,556) 
building.texi(,557) @findex lisp-interaction-mode
building.texi(,558)   The rationale for this feature is that Emacs must have a buffer when it
building.texi(,559) starts up, but that buffer is not useful for editing files since a new
building.texi(,560) buffer is made for every file that you visit.  The Lisp interpreter
building.texi(,561) typescript is the most useful thing I can think of for the initial buffer
building.texi(,562) to do.  @kbd{M-x lisp-interaction-mode} will put any buffer in Lisp
building.texi(,563) Interaction mode.
building.texi(,564) 
building.texi(,565) @node External Lisp,, Lisp Interaction, Running
building.texi(,566) @section Running an External Lisp
building.texi(,567) 
building.texi(,568)   Emacs has facilities for running programs in other Lisp systems.  You can
building.texi(,569) run a Lisp process as an inferior of Emacs, and pass expressions to it to
building.texi(,570) be evaluated.  You can also pass changed function definitions directly from
building.texi(,571) the Emacs buffers in which you edit the Lisp programs to the inferior Lisp
building.texi(,572) process.
building.texi(,573) 
building.texi(,574) @findex run-lisp
building.texi(,575)   To run an inferior Lisp process, type @kbd{M-x run-lisp}.  This runs the
building.texi(,576) program named @code{lisp}, the same program you would run by typing
building.texi(,577) @code{lisp} as a shell command, with both input and output going through an
building.texi(,578) Emacs buffer named @samp{*lisp*}.  In other words, any ``terminal output''
building.texi(,579) from Lisp will go into the buffer, advancing point, and any ``terminal
building.texi(,580) input'' for Lisp comes from text in the buffer.  To give input to Lisp, go
building.texi(,581) to the end of the buffer and type the input, terminated by @key{RET}.  The
building.texi(,582) @samp{*lisp*} buffer is in Inferior Lisp mode, which has all the
building.texi(,583) special characteristics of Lisp mode and Shell mode (@pxref{Shell Mode}).
building.texi(,584) 
building.texi(,585) @findex lisp-mode
building.texi(,586)   Use Lisp mode to run the source files of programs in external Lisps.
building.texi(,587) You can select this mode with @kbd{M-x lisp-mode}.  It is used automatically
building.texi(,588) for files whose names end in @file{.l} or @file{.lisp}, as most Lisp
building.texi(,589) systems usually expect.
building.texi(,590) 
building.texi(,591) @kindex C-M-x
building.texi(,592) @findex lisp-send-defun
building.texi(,593)   When you edit a function in a Lisp program you are running, the easiest
building.texi(,594) way to send the changed definition to the inferior Lisp process is the key
building.texi(,595) @kbd{C-M-x}.  In Lisp mode, this key runs the function @code{lisp-send-defun},
building.texi(,596) which finds the defun around or following point and sends it as input to
building.texi(,597) the Lisp process.  (Emacs can send input to any inferior process regardless
building.texi(,598) of what buffer is current.)
building.texi(,599) 
building.texi(,600)   Contrast the meanings of @kbd{C-M-x} in Lisp mode (for editing programs
building.texi(,601) to be run in another Lisp system) and Emacs-Lisp mode (for editing Lisp
building.texi(,602) programs to be run in Emacs): in both modes it has the effect of installing
building.texi(,603) the function definition that point is in, but the way of doing so is
building.texi(,604) different according to where the relevant Lisp environment is found.
building.texi(,605) @xref{Lisp Modes}.
packages.texi(,1) @c This is part of the XEmacs manual.
packages.texi(,2) @c Copyright (C) 1985, 86, 87, 93, 94, 95, 1997 Free Software Foundation, Inc.
packages.texi(,3) @c See file xemacs.texi for copying conditions.
packages.texi(,4) @node Packages, Basic, Startup Paths, Top
packages.texi(,5) @comment  node-name,  next,  previous,  up
packages.texi(,6) 
packages.texi(,7) @section Packages
packages.texi(,8) @cindex packages
packages.texi(,9) 
packages.texi(,10) The XEmacs 21 distribution comes only with a very basic set of
packages.texi(,11) built-in modes and packages.  Most of the packages that were part of
packages.texi(,12) the distribution of earlier versions of XEmacs are now available
packages.texi(,13) separately.  The installer as well as the user can choose which
packages.texi(,14) packages to install; the actual installation process is easy.
packages.texi(,15) This gives an installer the ability to tailor an XEmacs installation for
packages.texi(,16) local needs with safe removal of unnecessary code.
packages.texi(,17) 
packages.texi(,18) @menu
packages.texi(,19) * Package Terminology:: Understanding different kinds of packages.
packages.texi(,20) * Installing Packages:: How to install packages.
packages.texi(,21) * Building Packages::   Building packages from CVS sources.
packages.texi(,22) * Local.rules File::    This is an important file that you must create.
packages.texi(,23) * Creating Packages::   The basics.
packages.texi(,24) * Available Packages::  A brief directory of packaged LISP.
packages.texi(,25) @end menu
packages.texi(,26) 
packages.texi(,27) @node Package Terminology, Installing Packages, , Packages
packages.texi(,28) @comment  node-name,  next,  previous,  up
packages.texi(,29) @heading Package Terminology:
packages.texi(,30) @subsection Package Flavors
packages.texi(,31) 
packages.texi(,32) There are two main flavors of packages.
packages.texi(,33) 
packages.texi(,34) @itemize @bullet
packages.texi(,35) @item
packages.texi(,36) Regular Packages
packages.texi(,37) @cindex regular packages
packages.texi(,38) A regular package is one in which multiple files are involved and one
packages.texi(,39) may not in general safely remove any of them.
packages.texi(,40) 
packages.texi(,41) @item
packages.texi(,42) Single-File Packages
packages.texi(,43) @cindex single-file packages
packages.texi(,44) A single-file package is an aggregate collection of thematically
packages.texi(,45) related but otherwise independent lisp files.  These files are bundled 
packages.texi(,46) together for download convenience and individual files may be deleted at
packages.texi(,47) will without any loss of functionality.  However, we would recommend
packages.texi(,48) that you follow this rule of thumb: "When in doubt, don't delete".
packages.texi(,49) @end itemize
packages.texi(,50) 
packages.texi(,51) @subsection Package Distributions
packages.texi(,52) @cindex package distributions
packages.texi(,53) XEmacs Lisp packages are distributed in two ways, depending on the
packages.texi(,54) intended use.  Binary Packages are for installers and end-users that can
packages.texi(,55) be installed directly into an XEmacs package directory.  Source Packages
packages.texi(,56) are for developers and include all files necessary for rebuilding
packages.texi(,57) bytecompiled lisp and creating tarballs for distribution.
packages.texi(,58) 
packages.texi(,59) @subsection Binary Packages
packages.texi(,60) @cindex binary packages
packages.texi(,61) Binary packages may be installed directly into an XEmacs package
packages.texi(,62) hierarchy.
packages.texi(,63) 
packages.texi(,64) @subsection Source Packages
packages.texi(,65) @cindex source packages
packages.texi(,66) Source packages contain all of the Package author's (where appropriate
packages.texi(,67) in regular packages) source code plus all of the files necessary to
packages.texi(,68) build distribution tarballs (Unix Tar format files, gzipped for space
packages.texi(,69) savings).
packages.texi(,70) 
packages.texi(,71) Currently, source packages are only available via CVS.  See
packages.texi(,72) @url{http://cvs.xemacs.org/} for details.
packages.texi(,73) @node Installing Packages, Building Packages, Package Terminology, Packages
packages.texi(,74) @comment  node-name,  next,  previous,  up
packages.texi(,75) @cindex installing packages
packages.texi(,76) @cindex install
packages.texi(,77) @heading Installing Packages:
packages.texi(,78) @subsection Getting Started
packages.texi(,79) 
packages.texi(,80) When you first download XEmacs 21, you will usually first grab the
packages.texi(,81) @dfn{core distribution},
packages.texi(,82) @cindex core distribution
packages.texi(,83) a file called
packages.texi(,84) @file{xemacs-21.x.x.tar.gz}. (Replace the @t{21.x.x} by the current version
packages.texi(,85) number.)  The core distribution contains the sources of XEmacs and a
packages.texi(,86) minimal set of Emacs Lisp files, which are in the subdirectory named
packages.texi(,87) @file{lisp}.  This subdirectory used to contain all Emacs Lisp files
packages.texi(,88) distributed with XEmacs.  Now, to conserve disk space, most
packages.texi(,89) non-essential packages were made optional.
packages.texi(,90) 
packages.texi(,91) @subsection Choosing the Packages You Need
packages.texi(,92) @cindex choosing packages
packages.texi(,93) The @ref{Available Packages} can currently be found in the same ftp directory
packages.texi(,94) where you grabbed the core distribution from, and are located in the
packages.texi(,95) subdirectory @file{packages}.  Package file names follow
packages.texi(,96) the naming convention @file{<package-name>-<version>-pkg.tar.gz}.
packages.texi(,97) 
packages.texi(,98) If you have @ref{(EFS)}, packages can be installed over the network.
packages.texi(,99) Alternatively, if you have copies of the packages locally, you can
packages.texi(,100) install packages from a local disk or CDROM.
packages.texi(,101) 
packages.texi(,102) The file @file{etc/PACKAGES} in the core distribution contains a list of
packages.texi(,103) the @ref{Available Packages} at the time of the XEmacs release.
packages.texi(,104) 
packages.texi(,105) You can also get a list of available packages, and whether or not they
packages.texi(,106) are installed, using the visual package browser and installer.  You can
packages.texi(,107) access it via the menus:
packages.texi(,108) 
packages.texi(,109) @example
packages.texi(,110)         Tools -> Packages -> List and Install
packages.texi(,111) @end example
packages.texi(,112) 
packages.texi(,113) Or, you can get to it via the keyboard:
packages.texi(,114) 
packages.texi(,115) @example
packages.texi(,116) M-x pui-list-packages
packages.texi(,117) @end example
packages.texi(,118) 
packages.texi(,119) Hint to system administrators of multi-user systems: it might be a good
packages.texi(,120) idea to install all packages and not interfere with the wishes of your
packages.texi(,121) users.
packages.texi(,122) 
packages.texi(,123) If you can't find which package provides the feature you require, try
packages.texi(,124) using the @code{package-get-package-provider} function. Eg., if you know 
packages.texi(,125) that you need @code{thingatpt}, type:
packages.texi(,126) 
packages.texi(,127) @example
packages.texi(,128) M-x package-get-package-provider RET thingatpt
packages.texi(,129) @end example
packages.texi(,130) 
packages.texi(,131) which will return something like (fsf-compat "1.08"). You can the use
packages.texi(,132) one of the methods above for installing the package you want.
packages.texi(,133) 
packages.texi(,134) @subsection XEmacs and Installing Packages
packages.texi(,135) 
packages.texi(,136) There are three main ways to install packages:
packages.texi(,137) 
packages.texi(,138) @menu
packages.texi(,139) * Sumo::              All at once, using the 'Sumo Tarball'.
packages.texi(,140) * Manually::          Using individual package tarballs.
packages.texi(,141) * Automatically::     Using the package tools from XEmacs.
packages.texi(,142) * Which Packages::    Which packages to install.
packages.texi(,143) * Removing Packages:: Removing packages.
packages.texi(,144) @end menu
packages.texi(,145) 
packages.texi(,146) But regardless of the method you use to install packages, they can only
packages.texi(,147) be used by XEmacs after a restart.
packages.texi(,148) 
packages.texi(,149) @node Sumo, Manually, ,Installing Packages
packages.texi(,150) @comment  node-name,  next,  previous,  up
packages.texi(,151) @cindex sumo package install
packages.texi(,152) @heading Installing the Sumo Packages:
packages.texi(,153) Those with little time, cheap connections and plenty of disk space can
packages.texi(,154) install all the packages at once using the sumo tarballs.
packages.texi(,155) Download the file: @file{xemacs-sumo.tar.gz}
packages.texi(,156) 
packages.texi(,157) For an XEmacs compiled with Mule you also need: @file{xemacs-mule-sumo.tar.gz}
packages.texi(,158) 
packages.texi(,159) N.B. They are called 'Sumo Tarballs' for good reason. They are
packages.texi(,160) currently about 19MB and 4.5MB (gzipped) respectively.
packages.texi(,161) 
packages.texi(,162) Install them by:
packages.texi(,163) 
packages.texi(,164) @code{cd $prefix/lib/xemacs ; gunzip -c <tarballname> | tar xvf - RET}
packages.texi(,165) 
packages.texi(,166) Or, if you have GNU tar:
packages.texi(,167) 
packages.texi(,168) @code{cd $prefix/lib/xemacs ; tar zxvf /path/to/<tarballname> RET}
packages.texi(,169) 
packages.texi(,170) As the Sumo tarballs are not regenerated as often as the individual
packages.texi(,171) packages, it is recommended that you use the automatic package tools
packages.texi(,172) afterwards to pick up any recent updates.
packages.texi(,173) 
packages.texi(,174) @node Manually, Automatically, Sumo, Installing Packages
packages.texi(,175) @comment  node-name,  next,  previous,  up
packages.texi(,176) @cindex manual package install
packages.texi(,177) @heading Manual Package Installation:
packages.texi(,178) Fetch the packages from the FTP site, CD-ROM whatever. The filenames
packages.texi(,179) have the form @file{name-<version>-pkg.tar.gz} and are gzipped tar files. For
packages.texi(,180) a fresh install it is sufficient to untar the file at the top of the
packages.texi(,181) package hierarchy. 
packages.texi(,182) 
packages.texi(,183) Note: If you are upgrading packages already installed, it's best to
packages.texi(,184) remove the old package first @ref{Removing Packages}.
packages.texi(,185) 
packages.texi(,186) For example if we are installing the @file{xemacs-base}
packages.texi(,187) package (version 1.48):
packages.texi(,188) 
packages.texi(,189) @example
packages.texi(,190)    mkdir $prefix/lib/xemacs/xemacs-packages RET # if it does not exist yet
packages.texi(,191)    cd $prefix/lib/xemacs/xemacs-packages RET
packages.texi(,192)    gunzip -c /path/to/xemacs-base-1.48-pkg.tar.gz | tar xvf - RET
packages.texi(,193) 
packages.texi(,194) Or if you have GNU tar, the last step can be:
packages.texi(,195) 
packages.texi(,196)    tar zxvf /path/to/xemacs-base-1.48-pkg.tar.gz RET
packages.texi(,197) @end example
packages.texi(,198) 
packages.texi(,199) For MULE related packages, it is best to untar into the mule-packages
packages.texi(,200) hierarchy, i.e. for the @file{mule-base} package, version 1.37:
packages.texi(,201) 
packages.texi(,202) @example
packages.texi(,203)    mkdir $prefix/lib/xemacs/mule-packages RET # if it does not exist yet
packages.texi(,204)    cd $prefix/lib/xemacs/mule-packages RET
packages.texi(,205)    gunzip -c /path/to/mule-base-1.37-pkg.tar.gz | tar xvf - RET
packages.texi(,206) 
packages.texi(,207) Or if you have GNU tar, the last step can be:
packages.texi(,208) 
packages.texi(,209)    tar zxvf /path/to/mule-base-1.37-pkg.tar.gz RET
packages.texi(,210) @end example
packages.texi(,211) 
packages.texi(,212) @node Automatically, Which Packages ,Manually, Installing Packages
packages.texi(,213) @comment  node-name,  next,  previous,  up
packages.texi(,214) @cindex automatic package install
packages.texi(,215) @cindex package tools
packages.texi(,216) @heading Automatic Package Installation:
packages.texi(,217) XEmacs comes with some tools to make the periodic updating and
packages.texi(,218) installing easier. It will notice if new packages or versions are
packages.texi(,219) available and will fetch them from the FTP site.
packages.texi(,220) 
packages.texi(,221) Unfortunately this requires that a few packages are already in place.
packages.texi(,222) You will have to install them by hand as above or use a SUMO tarball.
packages.texi(,223) This requirement will hopefully go away in the future. The packages
packages.texi(,224) you need are:
packages.texi(,225) 
packages.texi(,226) @example
packages.texi(,227)    efs          - To fetch the files from the FTP site or mirrors.
packages.texi(,228)    xemacs-base  - Needed by efs.
packages.texi(,229) 
packages.texi(,230) and optionally:
packages.texi(,231) 
packages.texi(,232)    mule-base    - Needed if you want to use XEmacs with MULE.
packages.texi(,233) @end example
packages.texi(,234) 
packages.texi(,235) After installing these by hand, fire up XEmacs and follow these
packages.texi(,236) steps.
packages.texi(,237) 
packages.texi(,238) @enumerate 1
packages.texi(,239) @item
packages.texi(,240) Choose a download site.
packages.texi(,241) via menu: Tools -> Packages -> Add Download Site 
packages.texi(,242) via keyb: @code{M-x customize-variable RET package-get-remote RET}
packages.texi(,243) (put in the details of remote host and directory)
packages.texi(,244) 
packages.texi(,245) If the package tarballs _AND_ the package-index file are in a
packages.texi(,246) local directory, you can: @code{M-x pui-add-install-directory RET}
packages.texi(,247) 
packages.texi(,248) @item
packages.texi(,249) Obtain a list of packages and display the list in a buffer named
packages.texi(,250) @file{*Packages*}.
packages.texi(,251) menu: Tools -> Packages -> List & Install
packages.texi(,252) keyb: @code{M-x pui-list-packages RET}
packages.texi(,253) 
packages.texi(,254) XEmacs will now connect to the remote site and download the
packages.texi(,255) latest package-index file.  If you see an error about the
packages.texi(,256) package-index entries not being PGP signed, you can safely
packages.texi(,257) ignore this because PGP has not been integrated into the XEmacs
packages.texi(,258) package tools yet.
packages.texi(,259) 
packages.texi(,260) The visual package browser will then display a list of all packages.
packages.texi(,261) Help information will be displayed at the very bottom of the buffer; you
packages.texi(,262) may have to scroll down to see it.  You can also press @kbd{?} to get
packages.texi(,263) the same help.  From this buffer, you can tell the package status by the
packages.texi(,264) character in the first column:
packages.texi(,265) 
packages.texi(,266) @table @kbd
packages.texi(,267) @item -
packages.texi(,268) The package has not been installed.
packages.texi(,269) @item *
packages.texi(,270) The package has been installed, but a newer version is available.  The
packages.texi(,271) current version is out-of-date.
packages.texi(,272) @item +
packages.texi(,273) The package has been marked for installation/update.
packages.texi(,274) @end table
packages.texi(,275) 
packages.texi(,276) If there is no character in the first column, the package has been
packages.texi(,277) installed and is up to date.
packages.texi(,278) 
packages.texi(,279) From here, you can select or unselect packages for installation using
packages.texi(,280) the @key{RET} key, the @kbd{Mouse-2} button or selecting "Select" from
packages.texi(,281) the (Popup) Menu.
packages.texi(,282) Once you've finished selecting the packages, you can
packages.texi(,283) press the @kbd{x} key (or use the menu) to actually install the
packages.texi(,284) packages. Note that you will have to restart XEmacs for XEmacs to
packages.texi(,285) recognize any new packages.
packages.texi(,286) 
packages.texi(,287) Key summary:
packages.texi(,288) 
packages.texi(,289) @table @kbd
packages.texi(,290) @item ?
packages.texi(,291) Display simple help.
packages.texi(,292) @item @key{RET}
packages.texi(,293) @itemx @key{Mouse-2}
packages.texi(,294) Toggle between selecting and unselecting a package for installation.
packages.texi(,295) @item x
packages.texi(,296) Install selected packages.
packages.texi(,297) @item @key{SPC}
packages.texi(,298) View, in the minibuffer, additional information about the package, such
packages.texi(,299) as the package date (not the build date) and the package author.  Moving 
packages.texi(,300) the mouse over a package name will also do the same thing.
packages.texi(,301) @item v
packages.texi(,302) Toggle between verbose and non-verbose package display.
packages.texi(,303) @item g
packages.texi(,304) Refresh the package display.
packages.texi(,305) @item q
packages.texi(,306) Kill the package buffer.
packages.texi(,307) @end table
packages.texi(,308) 
packages.texi(,309) Moving the mouse over a package will also cause additional information
packages.texi(,310) about the package to be displayed in the minibuffer.
packages.texi(,311) 
packages.texi(,312) 
packages.texi(,313) @item
packages.texi(,314) Choose the packages you wish to install.
packages.texi(,315) mouse: Click button 2 on the package name.
packages.texi(,316)  keyb: @kbd{RET} on the package name
packages.texi(,317) 
packages.texi(,318) @item
packages.texi(,319) Make sure you have everything you need.
packages.texi(,320) menu: Packages -> Add Required
packages.texi(,321) keyb: @kbd{r}
packages.texi(,322) 
packages.texi(,323) XEmacs will now search for packages that are required by the
packages.texi(,324) ones that you have chosen to install and offer to select
packages.texi(,325) those packages also.
packages.texi(,326) 
packages.texi(,327) For novices and gurus alike, this step can save your bacon.
packages.texi(,328) It's easy to forget to install a critical package.
packages.texi(,329) 
packages.texi(,330) @item
packages.texi(,331) Download and install the packages.
packages.texi(,332) menu: Packages -> Install/Remove Selected
packages.texi(,333) keyb: @kbd{x}
packages.texi(,334) @end enumerate
packages.texi(,335) 
packages.texi(,336) You can also install packages using a semi-manual interface:
packages.texi(,337) 
packages.texi(,338) @example
packages.texi(,339) M-x package-get-all <return>
packages.texi(,340) @end example
packages.texi(,341) 
packages.texi(,342) Enter the name of the package (e.g., @code{prog-modes}), and XEmacs
packages.texi(,343) will search for the latest version and install it and any packages that
packages.texi(,344) it depends upon.
packages.texi(,345) 
packages.texi(,346) @node Which Packages, Removing Packages, Automatically, Installing Packages
packages.texi(,347) @comment  node-name,  next,  previous,  up
packages.texi(,348) @cindex which packages
packages.texi(,349) @cindex choosing packages
packages.texi(,350) @heading Which Packages to Install:
packages.texi(,351) This is difficult to say. When in doubt install a package. If you
packages.texi(,352) administrate a big site it might be a good idea to just install
packages.texi(,353) everything. A good minimal set of packages for XEmacs-latin1 would be
packages.texi(,354) 
packages.texi(,355) xemacs-base, xemacs-devel, c-support, cc-mode, debug, dired, efs,
packages.texi(,356) edit-utils, fsf-compat, mail-lib, net-utils, os-utils, prog-modes,
packages.texi(,357) text-modes, time
packages.texi(,358) 
packages.texi(,359) If you are using the XEmacs package tools, don't forget to do:
packages.texi(,360) 
packages.texi(,361) 	Packages -> Add Required
packages.texi(,362) 
packages.texi(,363) To make sure you have everything that the packages you have chosen to
packages.texi(,364) install need.
packages.texi(,365) 
packages.texi(,366) See also @ref{Available Packages} for further descriptions of the individual
packages.texi(,367) packages.
packages.texi(,368) 
packages.texi(,369) @node Removing Packages, ,Which Packages, Installing Packages
packages.texi(,370) @comment  node-name,  next,  previous,  up
packages.texi(,371) @cindex removing packages
packages.texi(,372) @cindex deleting packages
packages.texi(,373) @heading Removing Packages:
packages.texi(,374) Because the exact files and their locations contained in a package may
packages.texi(,375) change it is recommended to remove a package first before installing a
packages.texi(,376) new version. In order to facilitate removal each package contains an
packages.texi(,377) @file{pgkinfo/MANIFEST.pkgname} file which list all the files belonging
packages.texi(,378) to the package. 
packages.texi(,379) 
packages.texi(,380) No need to panic, you don't have to go through the
packages.texi(,381) @file{pkinfo/MANIFEST.pkgname} and manually delete the files.  Instead, use
packages.texi(,382) @code{M-x package-get-delete-package RET}.
packages.texi(,383) 
packages.texi(,384) Note that the interactive package tools included with XEmacs already do
packages.texi(,385) this for you.
packages.texi(,386) 
packages.texi(,387) @node Building Packages, Local.rules File, Installing Packages, Packages
packages.texi(,388) @comment  node-name,  next,  previous,  up
packages.texi(,389) @cindex building packages
packages.texi(,390) @cindex package building
packages.texi(,391) @heading Building Packages:
packages.texi(,392) Currently, source packages are only available via anonymous CVS.  See
packages.texi(,393) @url{http://cvs.xemacs.org/} for details of checking out the
packages.texi(,394) @file{xemacs-packages} module.
packages.texi(,395) 
packages.texi(,396) @subsection Prerequisites for Building Source Packages
packages.texi(,397) 
packages.texi(,398) @table @code
packages.texi(,399) @item GNU cp
packages.texi(,400) @item GNU install 
packages.texi(,401) (or a BSD compatible install program).
packages.texi(,402) @item GNU make 
packages.texi(,403) (3.75 or later preferred).
packages.texi(,404) @item makeinfo 
packages.texi(,405) (1.68 from texinfo-3.11 or later required).
packages.texi(,406) @item GNU tar
packages.texi(,407) (or equivalent).
packages.texi(,408) @item GNU gzip
packages.texi(,409) (or equivalent).
packages.texi(,410) @item A properly configured @file{Local.rules} file.
packages.texi(,411) @ref{Local.rules File}.
packages.texi(,412) @end table
packages.texi(,413) And of course, XEmacs 21.0 or higher.
packages.texi(,414) 
packages.texi(,415) @subsection What You Can Do With Source Packages
packages.texi(,416) 
packages.texi(,417) The packages CVS sources are most useful for creating XEmacs package
packages.texi(,418) tarballs for installation into your own XEmacs installations or for
packages.texi(,419) distributing to others.
packages.texi(,420) 
packages.texi(,421) Supported operations from @file{make} are:
packages.texi(,422) 
packages.texi(,423) @table @code
packages.texi(,424) @item all
packages.texi(,425) Bytecompile all files, build and bytecompile byproduct files like
packages.texi(,426) @file{auto-autoloads.el} and @file{custom-load.el}.  Create info version
packages.texi(,427) of TeXinfo documentation if present.
packages.texi(,428) 
packages.texi(,429) @item bindist
packages.texi(,430) Does a @code{make all} as well as create a binary package tarball in the
packages.texi(,431) staging directory.
packages.texi(,432) 
packages.texi(,433) @item install
packages.texi(,434) Bytecompile all files, build and bytecompile byproduct files like
packages.texi(,435) @file{auto-autoloads.el} and @file{custom-load.el}.  Create info version
packages.texi(,436) of TeXinfo documentation if present.  And install everything into the
packages.texi(,437) staging directory.
packages.texi(,438) 
packages.texi(,439) @item srckit
packages.texi(,440) Usually aliased to @code{srckit-std}.  This does a @code{make
packages.texi(,441) distclean} and creates a package source tarball in the staging
packages.texi(,442) directory.  This is generally only of use for package maintainers.
packages.texi(,443) 
packages.texi(,444) @item binkit
packages.texi(,445) May be aliased to @code{binkit-sourceonly}, @code{binkit-sourceinfo},
packages.texi(,446) @code{binkit-sourcedata}, or
packages.texi(,447) @code{binkit-sourcedatainfo}. @code{sourceonly} indicates there is
packages.texi(,448) nothing to install in a data directory or info directory.
packages.texi(,449) @code{sourceinfo} indicates that source and info files are to be
packages.texi(,450) installed.  @code{sourcedata} indicates that source and etc (data) files
packages.texi(,451) are to be installed.  @code{sourcedatainfo} indicates source, etc
packages.texi(,452) (data), and info files are to be installed.  A few packages have needs
packages.texi(,453) beyond the basic templates so this is not yet complete.
packages.texi(,454) 
packages.texi(,455) @item dist
packages.texi(,456) Runs the rules @code{srckit} followed by @code{binkit}.  This is
packages.texi(,457) primarily of use by XEmacs maintainers producing files for distribution.
packages.texi(,458) 
packages.texi(,459) @item clean
packages.texi(,460) Remove all built files except @file{auto-autoloads.el} and @file{custom-load.el}.
packages.texi(,461) 
packages.texi(,462) @item distclean
packages.texi(,463) Remove all created files.
packages.texi(,464) @end table
packages.texi(,465) 
packages.texi(,466) @node Local.rules File, Creating Packages, Building Packages, Packages
packages.texi(,467) @comment  node-name,  next,  previous,  up
packages.texi(,468) @cindex local.rules
packages.texi(,469) @heading The Local.rules File:
packages.texi(,470) This file is used when building and installing packages from source.  In
packages.texi(,471) the top level of the CVS module, @file{xemacs-packages}, contains the
packages.texi(,472) file, @file{Local.rules.template}.  Simply copy that to
packages.texi(,473) @file{Local.rules} and edit it to suit your needs.
packages.texi(,474) 
packages.texi(,475) These are the variables in 'Local.rules' that you will need to
packages.texi(,476) address. 
packages.texi(,477) 
packages.texi(,478) @table @var
packages.texi(,479) @item symlink = 
packages.texi(,480) Set this to 't' if you want to do a "run in place".
packages.texi(,481) Setting this doesn't work well with 'make bindist'
packages.texi(,482) 
packages.texi(,483) @item XEMACS_PACKAGES =
packages.texi(,484) This is where you set the normal packages that you
packages.texi(,485) want to install. eg:
packages.texi(,486) @example
packages.texi(,487)       XEMACS_PACKAGES = xemacs-packages/xemacs-base xemacs-packages/bbdb
packages.texi(,488) @end example
packages.texi(,489) 
packages.texi(,490) @item XEMACS_STAGING = $@{XEMACS_PACKAGES_BASE@}/../Packages
packages.texi(,491) Set this to where you want normal packages to be
packages.texi(,492) installed to.
packages.texi(,493) 
packages.texi(,494) @item PACKAGE_INDEX = package-index
packages.texi(,495) If you want the package-index file to have a different
packages.texi(,496) name, change this.
packages.texi(,497) 
packages.texi(,498) @item BUILD_WITHOUT_MULE =
packages.texi(,499) Building from CVS defaults to building the Mule
packages.texi(,500) packages.  Set this to 't' if you don't want/have Mule
packages.texi(,501) 
packages.texi(,502) @item MULE_PACKAGES =
packages.texi(,503) Same as for 'XEMACS_PACKAGES' except you list the Mule
packages.texi(,504) packages you want to install here. eg:
packages.texi(,505) @example
packages.texi(,506)       MULE_PACKAGES = mule-packages/mule-base mule-packages/skk
packages.texi(,507) @end example
packages.texi(,508) 
packages.texi(,509) @item MULE_STAGING = $@{XEMACS_PACKAGES_BASE@}/../Mule-Packages
packages.texi(,510) Set this to where you want Mule packages installed
packages.texi(,511) to.  Note:  'make bindist' does not use this variable.
packages.texi(,512) 
packages.texi(,513) @item XEMACS = xemacs
packages.texi(,514) If your XEmacs isn't in your path, change this.
packages.texi(,515) 
packages.texi(,516) @item XEMACS_NATIVE_NT =
packages.texi(,517) Set this to 't' if you are building on WinNT.
packages.texi(,518) 
packages.texi(,519) @item INSTALL = install -c
packages.texi(,520) The path to your BSD compatible install program.
packages.texi(,521) 
packages.texi(,522) @item TAR = tar
packages.texi(,523) The path to your tar program
packages.texi(,524) 
packages.texi(,525) @item BZIP2 =
packages.texi(,526) If you want bzip2 tarballs, set this.
packages.texi(,527) 
packages.texi(,528) @item MAKEINFO = makeinfo
packages.texi(,529) The path to your makeinfo program
packages.texi(,530) @end table
packages.texi(,531) 
packages.texi(,532) 
packages.texi(,533) @node Creating Packages, Available Packages, Local.rules File, Packages
packages.texi(,534) @comment  node-name,  next,  previous,  up
packages.texi(,535) @cindex creating packages
packages.texi(,536) @heading Creating Packages:
packages.texi(,537) Creating a package from an existing Lisp library is not very difficult.
packages.texi(,538) 
packages.texi(,539) In addition to the Lisp libraries themselves, you need a
packages.texi(,540) @file{package-info.in} file and a simple @file{Makefile}.  The rest is
packages.texi(,541) done by @file{XEmacs.rules}, part of the packaging system
packages.texi(,542) infrastructure.
packages.texi(,543) 
packages.texi(,544) @file{package-info.in} contains a single Lisp form like this:
packages.texi(,545) 
packages.texi(,546) @example
packages.texi(,547) (name                               ; your package's name
packages.texi(,548)   (standards-version 1.1
packages.texi(,549)    version VERSION
packages.texi(,550)    author-version AUTHOR_VERSION
packages.texi(,551)    date DATE
packages.texi(,552)    build-date BUILD_DATE
packages.texi(,553)    maintainer MAINTAINER
packages.texi(,554)    distribution xemacs              ; change to "mule" if MULE is needed
packages.texi(,555)    priority high
packages.texi(,556)    category CATEGORY
packages.texi(,557)    dump nil
packages.texi(,558)    description "description"        ; a one-line description string
packages.texi(,559)    filename FILENAME
packages.texi(,560)    md5sum MD5SUM
packages.texi(,561)    size SIZE
packages.texi(,562)    provides (feature1 feature2)     ; one for every `provides' form
packages.texi(,563)    requires (REQUIRES)
packages.texi(,564)    type regular
packages.texi(,565) ))
packages.texi(,566) @end example
packages.texi(,567) 
packages.texi(,568) You must fill in the four commented lines.  The value of @code{name} is
packages.texi(,569) the name of your package as an unquoted symbol.  Normally it is the name
packages.texi(,570) of the main Lisp file or principal feature provided.  The allowed values
packages.texi(,571) for distribution are @code{xemacs} and @code{mule}.  Write them as
packages.texi(,572) unquoted symbols.  The @code{description} is a quoted Lisp string; use
packages.texi(,573) the usual conventions.  The value for @code{provides} is a list of
packages.texi(,574) feature symbols (written unquoted).  All of the features provided by
packages.texi(,575) libraries in your package should be elements of this list.  Implementing
packages.texi(,576) an automatic method for generating the @file{provides} line is
packages.texi(,577) desirable, but as yet undone.
packages.texi(,578) 
packages.texi(,579) The variables in upper-case are references to variables set in the
packages.texi(,580) @file{Makefile} or automatically generated.  Do not change them; they
packages.texi(,581) are automatically filled in by the build process.
packages.texi(,582) 
packages.texi(,583) The remaining lines refer to implementation constants
packages.texi(,584) (@code{standards-version}), or features that are unimplemented or have
packages.texi(,585) been removed (@code{priority} and @code{dump}).  The @code{type} line is
packages.texi(,586) not normally relevant to external maintainers; the alternate value is
packages.texi(,587) @code{single-file}, which refers to packages consed up out of a number
packages.texi(,588) of single-file libraries that are more or less thematically related.  An
packages.texi(,589) example is @code{prog-modes}.  Single-file packages are basically for
packages.texi(,590) administrative convenience, and new packages should generally be created
packages.texi(,591) as regular packages.
packages.texi(,592) 
packages.texi(,593) The @file{Makefile} is quite stylized.  The idea is similar to an
packages.texi(,594) @file{Imakefile} or an @code{automake} file: the complexity is hidden in
packages.texi(,595) generic rules files, in this case the @file{XEmacs.rules} include file
packages.texi(,596) in the top directory of the packages hierarchy.  Although a number of
packages.texi(,597) facilities are available for complex libraries, most simple packages'
packages.texi(,598) @file{Makefile}s contain a copyright notice, a few variable definitions,
packages.texi(,599) an include for @file{XEmacs.rules}, and a couple of standard targets.
packages.texi(,600) 
packages.texi(,601) The first few @code{make} variables defined are @code{VERSION},
packages.texi(,602) @code{AUTHOR_VERSION}, @code{MAINTAINER}, @code{PACKAGE},
packages.texi(,603) @code{PKG_TYPE}, @code{REQUIRES}, and @code{CATEGORY}.  All but one were
packages.texi(,604) described in the description of @file{package-info.in}.  The last is an
packages.texi(,605) administrative grouping.  Current categories include @code{standard},
packages.texi(,606) and @code{mule}.
packages.texi(,607) 
packages.texi(,608) Next, define the variable @code{ELCS}.  This contains the list of the
packages.texi(,609) byte-compiled Lisp files used by the package.  These files and their
packages.texi(,610) @file{.el} versions will be included in the binary package.  If there
packages.texi(,611) are other files (such as extra Lisp sources or an upstream
packages.texi(,612) @file{Makefile}) that are normally placed in the installed Lisp
packages.texi(,613) directory, but not byte-compiled, they can be listed as the value of
packages.texi(,614) @code{EXTRA_SOURCES}.
packages.texi(,615) 
packages.texi(,616) The include is simply
packages.texi(,617) @example
packages.texi(,618) include ../../XEmacs.rules
packages.texi(,619) @end example
packages.texi(,620) 
packages.texi(,621) The standard targets follow.  These are
packages.texi(,622) 
packages.texi(,623) @example
packages.texi(,624) all:: $(ELCS) auto-autoloads.elc
packages.texi(,625) 
packages.texi(,626) srckit: srckit-alias
packages.texi(,627) 
packages.texi(,628) binkit: binkit-alias
packages.texi(,629) @end example
packages.texi(,630) 
packages.texi(,631) Other targets (such as Texinfo sources) may need to be added as
packages.texi(,632) dependencies for the @code{all} target.  Dependencies for @code{srckit}
packages.texi(,633) and @code{binkit} (that is, values for @var{srckit-alias} and
packages.texi(,634) @var{binkit-alias}) are defined in @file{XEmacs.rules}.  The most useful
packages.texi(,635) of these values are given in the following table.
packages.texi(,636) 
packages.texi(,637) @table @var
packages.texi(,638) @item srckit-alias
packages.texi(,639) Usually set to @code{srckit-std}.
packages.texi(,640) 
packages.texi(,641) @item binkit-alias
packages.texi(,642) May be set to @code{binkit-sourceonly}, @code{binkit-sourceinfo},
packages.texi(,643) @code{binkit-sourcedata}, or
packages.texi(,644) @code{binkit-sourcedatainfo}.  @code{sourceonly} indicates there is
packages.texi(,645) nothing to install in a data directory or info directory.
packages.texi(,646) @code{sourceinfo} indicates that source and info files are to be
packages.texi(,647) installed.  @code{sourcedata} indicates that source and etc (data) files
packages.texi(,648) are to be installed.  @code{sourcedatainfo} indicates source, etc
packages.texi(,649) (data), and info files are to be installed.
packages.texi(,650) @end table
packages.texi(,651) 
packages.texi(,652) Data files include things like pixmaps for a package-specific toolbar,
packages.texi(,653) and are normally installed in @file{etc/@var{PACKAGE_NAME}}.  A few
packages.texi(,654) packages have needs beyond the basic templates.  See @file{XEmacs.rules}
packages.texi(,655) or a future revision of this manual for details.
packages.texi(,656) 
packages.texi(,657) @node Available Packages,  , Creating Packages, Packages
packages.texi(,658) @comment  node-name,  next,  previous,  up
packages.texi(,659) @cindex available packages
packages.texi(,660) @cindex packages
packages.texi(,661) @heading Available Packages:
packages.texi(,662) This section lists the Lisp packages that are currently available from
packages.texi(,663) xemacs.org and it's mirrors.  If a particular package that you are
packages.texi(,664) looking for isn't here, please send a message to the
packages.texi(,665) @email{xemacs-beta@@xemacs.org, XEmacs Beta list}.
packages.texi(,666) 
packages.texi(,667) This data is up to date as of September 22, 2002.
packages.texi(,668) 
packages.texi(,669) @subsection Normal Packages
packages.texi(,670) A very broad selection of elisp packages.
packages.texi(,671) 
packages.texi(,672) @table @file
packages.texi(,673) @item Sun
packages.texi(,674) Support for Sparcworks.
packages.texi(,675) 
packages.texi(,676) @item ada
packages.texi(,677) Ada language support.
packages.texi(,678) 
packages.texi(,679) @item apel
packages.texi(,680) A Portable Emacs Library.  Used by XEmacs MIME support.
packages.texi(,681) 
packages.texi(,682) @item auctex
packages.texi(,683) Basic TeX/LaTeX support.
packages.texi(,684) 
packages.texi(,685) @item bbdb
packages.texi(,686) The Big Brother Data Base: a rolodex-like database program.
packages.texi(,687) 
packages.texi(,688) @item build
packages.texi(,689) Build XEmacs using custom widgets.
packages.texi(,690) 
packages.texi(,691) @item c-support
packages.texi(,692) Basic single-file add-ons for editing C code.
packages.texi(,693) 
packages.texi(,694) @item calc
packages.texi(,695) Emacs calculator.
packages.texi(,696) 
packages.texi(,697) @item calendar
packages.texi(,698) Calendar and diary support.
packages.texi(,699) 
packages.texi(,700) @item cc-mode
packages.texi(,701) C, C++ and Java language support.
packages.texi(,702) 
packages.texi(,703) @item clearcase
packages.texi(,704) Support for the Clearcase version control system.
packages.texi(,705) 
packages.texi(,706) @item cookie
packages.texi(,707) "Fortune cookie"-style messages. Includes Spook (suspicious phrases) 
packages.texi(,708) and Yow (Zippy quotes).
packages.texi(,709) 
packages.texi(,710) @item crisp
packages.texi(,711) Crisp/Brief emulation.
packages.texi(,712) 
packages.texi(,713) @item debug
packages.texi(,714) GUD, gdb, dbx debugging support.
packages.texi(,715) 
packages.texi(,716) @item dictionary
packages.texi(,717) Interface to RFC2229 dictionary servers.
packages.texi(,718) 
packages.texi(,719) @item dired
packages.texi(,720) The DIRectory EDitor is for manipulating, and running commands on
packages.texi(,721) files in a directory.
packages.texi(,722) 
packages.texi(,723) @item docbookide
packages.texi(,724) DocBook editing support.
packages.texi(,725) 
packages.texi(,726) @item ecrypto
packages.texi(,727) Crypto functionality in Emacs Lisp.
packages.texi(,728) 
packages.texi(,729) @item edebug
packages.texi(,730) A Lisp debugger.
packages.texi(,731) 
packages.texi(,732) @item ediff
packages.texi(,733) Interface over patch.
packages.texi(,734) 
packages.texi(,735) @item edit-utils
packages.texi(,736) Single file lisp packages for various XEmacs goodies.  Load this and
packages.texi(,737) weed out the junk you don't want.
packages.texi(,738) 
packages.texi(,739) @item edt
packages.texi(,740) DEC EDIT/EDT emulation.
packages.texi(,741) 
packages.texi(,742) @item efs
packages.texi(,743) Treat files on remote systems the same as local files.
packages.texi(,744) 
packages.texi(,745) @item eieio
packages.texi(,746) Enhanced Implementation of Emacs Interpreted Objects.
packages.texi(,747) 
packages.texi(,748) @item elib
packages.texi(,749) Portable Emacs Lisp utilities library.
packages.texi(,750) 
packages.texi(,751) @item emerge
packages.texi(,752) Another interface over patch.
packages.texi(,753) 
packages.texi(,754) @item eshell
packages.texi(,755) Command shell implemented entirely in Emacs Lisp.
packages.texi(,756) 
packages.texi(,757) @item ess
packages.texi(,758) ESS: Emacs Speaks Statistics.
packages.texi(,759) 
packages.texi(,760) @item eterm
packages.texi(,761) Terminal emulator.
packages.texi(,762) 
packages.texi(,763) @item eudc
packages.texi(,764) Emacs Unified Directory Client (LDAP, PH).
packages.texi(,765) 
packages.texi(,766) @item footnote
packages.texi(,767) Footnoting in mail message editing modes.
packages.texi(,768) 
packages.texi(,769) @item forms
packages.texi(,770) Forms editing support (obsolete, use the built-in Widget instead).
packages.texi(,771) 
packages.texi(,772) @item fortran-modes
packages.texi(,773) Fortran language support.
packages.texi(,774) 
packages.texi(,775) @item frame-icon
packages.texi(,776) Provide a WM icon based on major mode.
packages.texi(,777) 
packages.texi(,778) @item fsf-compat
packages.texi(,779) GNU Emacs compatibility files.
packages.texi(,780) 
packages.texi(,781) @item games
packages.texi(,782) Tetris, Sokoban, and Snake.
packages.texi(,783) 
packages.texi(,784) @item gnats
packages.texi(,785) XEmacs bug reports.
packages.texi(,786) 
packages.texi(,787) @item gnus
packages.texi(,788) The Gnus Newsreader and Mailreader.
packages.texi(,789) 
packages.texi(,790) @item haskell-mode
packages.texi(,791) Haskell language support.
packages.texi(,792) 
packages.texi(,793) @item hm--html-menus
packages.texi(,794) HTML editing.
packages.texi(,795) 
packages.texi(,796) @item ibuffer
packages.texi(,797) Advanced replacement for buffer-menu.
packages.texi(,798) 
packages.texi(,799) @item idlwave
packages.texi(,800) Editing and Shell mode for the Interactive Data Language.
packages.texi(,801) 
packages.texi(,802) @item igrep
packages.texi(,803) Enhanced front-end for Grep.
packages.texi(,804) 
packages.texi(,805) @item ilisp
packages.texi(,806) Front-end for interacting with Inferior Lisp (external lisps).
packages.texi(,807) 
packages.texi(,808) @item ispell
packages.texi(,809) Spell-checking with ispell.
packages.texi(,810) 
packages.texi(,811) @item jde
packages.texi(,812) Java language and development support.
packages.texi(,813) 
packages.texi(,814) @item liece
packages.texi(,815) IRC (Internet Relay Chat) client for Emacs.
packages.texi(,816) 
packages.texi(,817) @item mail-lib
packages.texi(,818) Fundamental lisp files for providing email support.
packages.texi(,819) 
packages.texi(,820) @item mailcrypt
packages.texi(,821) Support for messaging encryption with PGP.
packages.texi(,822) 
packages.texi(,823) @item mew
packages.texi(,824) Messaging in an Emacs World; a MIME-based email program.
packages.texi(,825) 
packages.texi(,826) @item mh-e
packages.texi(,827) Front end support for MH.
packages.texi(,828) 
packages.texi(,829) @item mine
packages.texi(,830) Elisp implementation of the game 'Minehunt'.
packages.texi(,831) 
packages.texi(,832) @item misc-games
packages.texi(,833) Other amusements and diversions.
packages.texi(,834) 
packages.texi(,835) @item mmm-mode
packages.texi(,836) Support for Multiple Major Modes within a single buffer.
packages.texi(,837) 
packages.texi(,838) @item net-utils
packages.texi(,839) Miscellaneous Networking Utilities.  This is a single-file package and 
packages.texi(,840) files may be deleted at will.
packages.texi(,841) 
packages.texi(,842) @item os-utils
packages.texi(,843) Miscellaneous single-file O/S utilities, for printing, archiving,
packages.texi(,844) compression, remote shells, etc.
packages.texi(,845) 
packages.texi(,846) @item ocaml
packages.texi(,847) Objective Caml language support.
packages.texi(,848) 
packages.texi(,849) @item pc
packages.texi(,850) PC style interface emulation.
packages.texi(,851) 
packages.texi(,852) @item pcl-cvs
packages.texi(,853) CVS frontend.
packages.texi(,854) 
packages.texi(,855) @item pcomplete
packages.texi(,856) Provides programmatic completion.
packages.texi(,857) 
packages.texi(,858) @item perl-modes
packages.texi(,859) Perl language support.
packages.texi(,860) 
packages.texi(,861) @item prog-modes
packages.texi(,862) Miscellaneous single-file lisp files for various programming languages.
packages.texi(,863) 
packages.texi(,864) @item ps-print
packages.texi(,865) Print buffers to PostScript printers.
packages.texi(,866) 
packages.texi(,867) @item psgml
packages.texi(,868) Validated HTML/SGML editing.
packages.texi(,869) 
packages.texi(,870) @item psgml-dtds
packages.texi(,871) A collection of DTDs for psgml.  Note that this package is deprecated
packages.texi(,872) and will be removed in the future, most likely Q2/2003.  Instead of using
packages.texi(,873) this, you should install needed DTDs yourself.
packages.texi(,874) 
packages.texi(,875) @item python-modes
packages.texi(,876) Python language support.
packages.texi(,877) 
packages.texi(,878) @item reftex
packages.texi(,879) Emacs support for LaTeX cross-references, citations.
packages.texi(,880) 
packages.texi(,881) @item rmail
packages.texi(,882) An obsolete Emacs mailer.  If you do not already use it don't start.
packages.texi(,883) 
packages.texi(,884) @item ruby-modes
packages.texi(,885) Ruby language support.
packages.texi(,886) 
packages.texi(,887) @item sasl
packages.texi(,888) Simple Authentication and Security Layer (SASL) library.
packages.texi(,889) 
packages.texi(,890) @item scheme
packages.texi(,891) Front-end support for Inferior Scheme.
packages.texi(,892) 
packages.texi(,893) @item semantic
packages.texi(,894) Semantic bovinator.
packages.texi(,895) 
packages.texi(,896) @item sgml
packages.texi(,897) SGML/Linuxdoc-SGML editing.
packages.texi(,898) 
packages.texi(,899) @item sh-script
packages.texi(,900) Support for editing shell scripts.
packages.texi(,901) 
packages.texi(,902) @item sieve
packages.texi(,903) Manage Sieve email filtering scripts.
packages.texi(,904) 
packages.texi(,905) @item slider
packages.texi(,906) User interface tool.
packages.texi(,907) 
packages.texi(,908) @item sml-mode
packages.texi(,909) Standard ML editing support.
packages.texi(,910) 
packages.texi(,911) @item sounds-au
packages.texi(,912) XEmacs Sun sound files.
packages.texi(,913) 
packages.texi(,914) @item sounds-wav
packages.texi(,915) XEmacs Microsoft sound files.
packages.texi(,916) 
packages.texi(,917) @item speedbar
packages.texi(,918) Provides a separate frame with convenient references.
packages.texi(,919) 
packages.texi(,920) @item strokes
packages.texi(,921) Mouse enhancement utility.
packages.texi(,922) 
packages.texi(,923) @item supercite
packages.texi(,924) An Emacs citation tool.  Useful with all Emacs Mailers and Newsreaders.
packages.texi(,925) 
packages.texi(,926) @item texinfo
packages.texi(,927) XEmacs TeXinfo support.
packages.texi(,928) 
packages.texi(,929) @item text-modes
packages.texi(,930) Various single file lisp packages for editing text files.
packages.texi(,931) 
packages.texi(,932) @item textools
packages.texi(,933) Single-file TeX support.
packages.texi(,934) 
packages.texi(,935) @item time
packages.texi(,936) Display time & date on the modeline.
packages.texi(,937) 
packages.texi(,938) @item tm
packages.texi(,939) Emacs MIME support. Not needed for Gnus >= 5.8.0
packages.texi(,940) 
packages.texi(,941) @item tooltalk
packages.texi(,942) Support for building with Tooltalk.
packages.texi(,943) 
packages.texi(,944) @item tpu
packages.texi(,945) DEC EDIT/TPU support.
packages.texi(,946) 
packages.texi(,947) @item tramp
packages.texi(,948) Remote shell-based file editing.  This is similar to EFS or Ange-FTP,
packages.texi(,949) but works with rsh/ssh and rcp/scp.
packages.texi(,950) 
packages.texi(,951) @item vc
packages.texi(,952) Version Control for Free systems.
packages.texi(,953) 
packages.texi(,954) @item vc-cc
packages.texi(,955) Version Control for ClearCase.  This package will shortly be
packages.texi(,956) replaced with clearcase.el
packages.texi(,957) 
packages.texi(,958) @item vhdl
packages.texi(,959) Support for VHDL.
packages.texi(,960) 
packages.texi(,961) @item view-process
packages.texi(,962) A Unix process browsing tool.
packages.texi(,963) 
packages.texi(,964) @item viper
packages.texi(,965) VI emulation support.
packages.texi(,966) 
packages.texi(,967) @item vm
packages.texi(,968) An Emacs mailer.
packages.texi(,969) 
packages.texi(,970) @item w3
packages.texi(,971) A Web browser.
packages.texi(,972) 
packages.texi(,973) @item xemacs-base
packages.texi(,974) Fundamental XEmacs support.  Install this unless you wish a totally
packages.texi(,975) naked XEmacs.
packages.texi(,976) 
packages.texi(,977) @item xemacs-devel
packages.texi(,978) XEmacs Lisp developer support.  This package contains utilities for
packages.texi(,979) supporting Lisp development.  It is a single-file package so it may be 
packages.texi(,980) tailored.
packages.texi(,981) 
packages.texi(,982) @item xslide
packages.texi(,983) XSL editing support.
packages.texi(,984) 
packages.texi(,985) @item xslt-process
packages.texi(,986) A minor mode for (X)Emacs which allows running an XSLT processor on a
packages.texi(,987) buffer.
packages.texi(,988) 
packages.texi(,989) @item zenirc
packages.texi(,990) ZENIRC IRC Client.
packages.texi(,991) @end table
packages.texi(,992) 
packages.texi(,993) @subsection Mule Support (mule)
packages.texi(,994) 
packages.texi(,995) MULti-lingual Enhancement.  Support for world scripts such as
packages.texi(,996) Latin, Arabic, Cyrillic, Chinese, Japanese, Greek, Hebrew etc.
packages.texi(,997) To use these packages your XEmacs must be compiled with Mule
packages.texi(,998) support.
packages.texi(,999) 
packages.texi(,1000) @table @file
packages.texi(,1001) @item edict
packages.texi(,1002) Lisp Interface to EDICT, Kanji Dictionary.
packages.texi(,1003) 
packages.texi(,1004) @item egg-its
packages.texi(,1005) Wnn (4.2 and 6) support.  SJ3 support.  Must be installed prior to
packages.texi(,1006) XEmacs build.
packages.texi(,1007) 
packages.texi(,1008) @item latin-unity
packages.texi(,1009) Unify character sets in a buffer. When characters belong to disjoint
packages.texi(,1010) character sets, this attempts to translate the characters so
packages.texi(,1011) that they belong to one character set. If the buffer coding system is
packages.texi(,1012) not sufficient, this suggests different coding systems.
packages.texi(,1013) 
packages.texi(,1014) @item leim
packages.texi(,1015) Quail.  Used for everything other than English and Japanese.
packages.texi(,1016) 
packages.texi(,1017) @item locale
packages.texi(,1018) Used for localized menubars (French and Japanese) and localized splash
packages.texi(,1019) screens (Japanese).
packages.texi(,1020) 
packages.texi(,1021) @item lookup
packages.texi(,1022) Dictionary support. (This isn't an English dictionary program)
packages.texi(,1023) 
packages.texi(,1024) @item mule-base
packages.texi(,1025) Basic Mule support.  Must be installed prior to building with Mule.
packages.texi(,1026) 
packages.texi(,1027) @item mule-ucs
packages.texi(,1028) Extended coding systems (including Unicode) for XEmacs.
packages.texi(,1029) 
packages.texi(,1030) @item skk
packages.texi(,1031) Another Japanese Language Input Method.  Can be used without a
packages.texi(,1032) separate process running as a dictionary server.
packages.texi(,1033) @end table
packages.texi(,1034) 
abbrevs.texi(,1) 
abbrevs.texi(,2) @node Abbrevs, Picture, Running, Top
abbrevs.texi(,3) @chapter Abbrevs
abbrevs.texi(,4) @cindex abbrevs
abbrevs.texi(,5) @cindex expansion (of abbrevs)
abbrevs.texi(,6) 
abbrevs.texi(,7)   An @dfn{abbrev} is a word which @dfn{expands} into some
abbrevs.texi(,8) different text.  Abbrevs are defined by the user to expand in specific
abbrevs.texi(,9) ways.  For example, you might define @samp{foo} as an abbrev expanding to
abbrevs.texi(,10) @samp{find outer otter}.  With this abbrev defined, you would be able to
abbrevs.texi(,11) get @samp{find outer otter } into the buffer by typing @kbd{f o o @key{SPC}}.
abbrevs.texi(,12) 
abbrevs.texi(,13) @findex abbrev-mode
abbrevs.texi(,14) @vindex abbrev-mode
abbrevs.texi(,15)   Abbrevs expand only when Abbrev mode (a minor mode) is enabled.
abbrevs.texi(,16) Disabling Abbrev mode does not cause abbrev definitions to be discarded,
abbrevs.texi(,17) but they do not expand until Abbrev mode is enabled again.  The command
abbrevs.texi(,18) @kbd{M-x abbrev-mode} toggles Abbrev mode; with a numeric argument, it
abbrevs.texi(,19) turns Abbrev mode on if the argument is positive, off otherwise.
abbrevs.texi(,20) @xref{Minor Modes}.  @code{abbrev-mode} is also a variable; Abbrev mode is
abbrevs.texi(,21) on when the variable is non-@code{nil}.  The variable @code{abbrev-mode}
abbrevs.texi(,22) automatically becomes local to the current buffer when it is set.
abbrevs.texi(,23) 
abbrevs.texi(,24)   Abbrev definitions can be @dfn{mode-specific}---active only in one major
abbrevs.texi(,25) mode.  Abbrevs can also have @dfn{global} definitions that are active in
abbrevs.texi(,26) all major modes.  The same abbrev can have a global definition and various
abbrevs.texi(,27) mode-specific definitions for different major modes.  A mode-specific
abbrevs.texi(,28) definition for the current major mode overrides a global definition.
abbrevs.texi(,29) 
abbrevs.texi(,30)  You can define Abbrevs interactively during an editing session.  You
abbrevs.texi(,31) can also save lists of abbrev definitions in files and reload them in later
abbrevs.texi(,32) sessions.  Some users keep extensive lists of abbrevs that they load in
abbrevs.texi(,33) every session.
abbrevs.texi(,34) 
abbrevs.texi(,35)   A second kind of abbreviation facility is called the @dfn{dynamic
abbrevs.texi(,36) expansion}.  Dynamic abbrev expansion happens only when you give an
abbrevs.texi(,37) explicit command and the result of the expansion depends only on the
abbrevs.texi(,38) current contents of the buffer.  @xref{Dynamic Abbrevs}.
abbrevs.texi(,39) 
abbrevs.texi(,40) @menu
abbrevs.texi(,41) * Defining Abbrevs::  Defining an abbrev, so it will expand when typed.
abbrevs.texi(,42) * Expanding Abbrevs:: Controlling expansion: prefixes, canceling expansion.
abbrevs.texi(,43) * Editing Abbrevs::   Viewing or editing the entire list of defined abbrevs.
abbrevs.texi(,44) * Saving Abbrevs::    Saving the entire list of abbrevs for another session.
abbrevs.texi(,45) * Dynamic Abbrevs::   Abbreviations for words already in the buffer.
abbrevs.texi(,46) @end menu
abbrevs.texi(,47) 
abbrevs.texi(,48) @node Defining Abbrevs, Expanding Abbrevs, Abbrevs, Abbrevs
abbrevs.texi(,49) @section Defining Abbrevs
abbrevs.texi(,50) 
abbrevs.texi(,51) @table @kbd
abbrevs.texi(,52) @item C-x a g
abbrevs.texi(,53) Define an abbrev to expand into some text before point
abbrevs.texi(,54) (@code{add-global-abbrev}).
abbrevs.texi(,55) @item C-x a l
abbrevs.texi(,56) Similar, but define an abbrev available only in the current major mode
abbrevs.texi(,57) (@code{add-mode-abbrev}).
abbrevs.texi(,58) @item C-x a i g
abbrevs.texi(,59) Define a word in the buffer as an abbrev (@code{inverse-add-global-abbrev}).
abbrevs.texi(,60) @item C-x a i l
abbrevs.texi(,61) Define a word in the buffer as a mode-specific abbrev
abbrevs.texi(,62) (@code{inverse-add-mode-abbrev}).
abbrevs.texi(,63) @item M-x kill-all-abbrevs
abbrevs.texi(,64) After this command, no abbrev definitions remain in effect.
abbrevs.texi(,65) @end table
abbrevs.texi(,66) 
abbrevs.texi(,67) @kindex C-x a g
abbrevs.texi(,68) @findex add-global-abbrev
abbrevs.texi(,69)   The usual way to define an abbrev is to enter the text you want the
abbrevs.texi(,70) abbrev to expand to, position point after it, and type @kbd{C-x a g}
abbrevs.texi(,71) (@code{add-global-abbrev}).  This reads the abbrev itself using the
abbrevs.texi(,72) minibuffer, and then defines it as an abbrev for one or more words
abbrevs.texi(,73) before point.  Use a numeric argument to say how many words before point
abbrevs.texi(,74) should be taken as the expansion.  For example, to define the abbrev
abbrevs.texi(,75) @samp{foo} as in the example above, insert the text @samp{find outer
abbrevs.texi(,76) otter}, then type @*@kbd{C-u 3 C-x a g f o o @key{RET}}.
abbrevs.texi(,77) 
abbrevs.texi(,78)   An argument of zero to @kbd{C-x a g} means to use the contents of the
abbrevs.texi(,79) region as the expansion of the abbrev being defined.
abbrevs.texi(,80) 
abbrevs.texi(,81) @kindex C-x a l
abbrevs.texi(,82) @findex add-mode-abbrev
abbrevs.texi(,83)   The command @kbd{C-x a l} (@code{add-mode-abbrev}) is similar, but
abbrevs.texi(,84) defines a mode-specific abbrev.  Mode-specific abbrevs are active only in a
abbrevs.texi(,85) particular major mode.  @kbd{C-x a l} defines an abbrev for the major mode
abbrevs.texi(,86) in effect at the time @kbd{C-x a l} is typed.  The arguments work the
abbrevs.texi(,87) same way they do for @kbd{C-x a g}.
abbrevs.texi(,88) 
abbrevs.texi(,89) @kindex C-x a i g
abbrevs.texi(,90) @findex inverse-add-global-abbrev
abbrevs.texi(,91) @kindex C-x a i l
abbrevs.texi(,92) @findex inverse-add-mode-abbrev
abbrevs.texi(,93)   If the text of an abbrev you want is already in the buffer instead of
abbrevs.texi(,94) the expansion, use command @kbd{C-x a i g} (@code{inverse-add-global-abbrev})
abbrevs.texi(,95) instead of @kbd{C-x a g}, or use @kbd{C-x a i l}
abbrevs.texi(,96) (@code{inverse-add-mode-abbrev}) instead of @kbd{C-x a l}.  These commands
abbrevs.texi(,97) are called ``inverse'' because they invert the meaning of the argument
abbrevs.texi(,98) found in the buffer and the argument read using the minibuffer.@refill
abbrevs.texi(,99) 
abbrevs.texi(,100)   To change the definition of an abbrev, just add the new definition.  You
abbrevs.texi(,101) will be asked to confirm if the abbrev has a prior definition.  To remove
abbrevs.texi(,102) an abbrev definition, give a negative argument to @kbd{C-x a g} or @kbd{C-x
abbrevs.texi(,103) a l}.  You must choose the command to specify whether to kill a global
abbrevs.texi(,104) definition or a mode-specific definition for the current mode, since those
abbrevs.texi(,105) two definitions are independent for one abbrev.
abbrevs.texi(,106) 
abbrevs.texi(,107) @findex kill-all-abbrevs
abbrevs.texi(,108)   @kbd{M-x kill-all-abbrevs} removes all existing abbrev definitions.
abbrevs.texi(,109) 
abbrevs.texi(,110) @node Expanding Abbrevs, Editing Abbrevs, Defining Abbrevs, Abbrevs
abbrevs.texi(,111) @section Controlling Abbrev Expansion
abbrevs.texi(,112) 
abbrevs.texi(,113)   An abbrev expands whenever it is in a buffer just before point and you
abbrevs.texi(,114) type a self-inserting punctuation character (@key{SPC}, comma,
abbrevs.texi(,115) etc.@:).  Most often an abbrev is used by inserting the abbrev followed
abbrevs.texi(,116) by punctuation.
abbrevs.texi(,117) 
abbrevs.texi(,118) @vindex abbrev-all-caps
abbrevs.texi(,119)   Abbrev expansion preserves case; thus, @samp{foo} expands into @samp{find
abbrevs.texi(,120) outer otter}, @samp{Foo} into @samp{Find outer otter}, and @samp{FOO} into
abbrevs.texi(,121) @samp{FIND OUTER OTTER} or @samp{Find Outer Otter} according to the
abbrevs.texi(,122) variable @code{abbrev-all-caps} (a non-@code{nil} value chooses the first
abbrevs.texi(,123) of the two expansions).@refill
abbrevs.texi(,124) 
abbrevs.texi(,125)    Two commands are available to control abbrev expansion:
abbrevs.texi(,126) 
abbrevs.texi(,127) @table @kbd
abbrevs.texi(,128) @item M-'
abbrevs.texi(,129) Separate a prefix from a following abbrev to be expanded
abbrevs.texi(,130) (@code{abbrev-prefix-mark}).
abbrevs.texi(,131) @item C-x a e
abbrevs.texi(,132) @findex expand-abbrev
abbrevs.texi(,133) Expand the abbrev before point (@code{expand-abbrev}).
abbrevs.texi(,134) This is effective even when Abbrev mode is not enabled.
abbrevs.texi(,135) @item M-x unexpand-abbrev
abbrevs.texi(,136) Undo last abbrev expansion.
abbrevs.texi(,137) @item M-x expand-region-abbrevs
abbrevs.texi(,138) Expand some or all abbrevs found in the region.
abbrevs.texi(,139) @end table
abbrevs.texi(,140) 
abbrevs.texi(,141) @kindex M-'
abbrevs.texi(,142) @findex abbrev-prefix-mark
abbrevs.texi(,143)   You may wish to expand an abbrev with a prefix attached.  For example,
abbrevs.texi(,144) if @samp{cnst} expands into @samp{construction}, you may want to use it
abbrevs.texi(,145) to enter @samp{reconstruction}.  It does not work to type @kbd{recnst},
abbrevs.texi(,146) because that is not necessarily a defined abbrev.  Instead, you can use
abbrevs.texi(,147) the command @kbd{M-'} (@code{abbrev-prefix-mark}) between the prefix
abbrevs.texi(,148) @samp{re} and the abbrev @samp{cnst}.  First, insert @samp{re}.  Then
abbrevs.texi(,149) type @kbd{M-'}; this inserts a minus sign in the buffer to indicate that
abbrevs.texi(,150) it has done its work.  Then insert the abbrev @samp{cnst}.  The buffer
abbrevs.texi(,151) now contains @samp{re-cnst}.  Now insert a punctuation character to
abbrevs.texi(,152) expand the abbrev @samp{cnst} into @samp{construction}.  The minus sign
abbrevs.texi(,153) is deleted at this point by @kbd{M-'}.  The resulting text is the
abbrevs.texi(,154) desired @samp{reconstruction}.@refill
abbrevs.texi(,155) 
abbrevs.texi(,156)   If you actually want the text of the abbrev in the buffer, rather than
abbrevs.texi(,157) its expansion, insert the following punctuation with @kbd{C-q}.  Thus,
abbrevs.texi(,158) @kbd{foo C-q -} leaves @samp{foo-} in the buffer.
abbrevs.texi(,159) 
abbrevs.texi(,160) @findex unexpand-abbrev
abbrevs.texi(,161)   If you expand an abbrev by mistake, you can undo the expansion (replace
abbrevs.texi(,162) the expansion by the original abbrev text) with @kbd{M-x unexpand-abbrev}.
abbrevs.texi(,163) You can also use @kbd{C-_} (@code{undo}) to undo the expansion; but that
abbrevs.texi(,164) will first undo the insertion of the punctuation character.
abbrevs.texi(,165) 
abbrevs.texi(,166) @findex expand-region-abbrevs
abbrevs.texi(,167)   @kbd{M-x expand-region-abbrevs} searches through the region for defined
abbrevs.texi(,168) abbrevs, and  offers to replace each one it finds with its expansion.
abbrevs.texi(,169) This command is useful if you have typed text using abbrevs but forgot
abbrevs.texi(,170) to turn on Abbrev mode first.  It may also be useful together with a
abbrevs.texi(,171) special set of abbrev definitions for making several global replacements at
abbrevs.texi(,172) once.  The command is effective even if Abbrev mode is not enabled.
abbrevs.texi(,173) 
abbrevs.texi(,174) @node Editing Abbrevs, Saving Abbrevs, Expanding Abbrevs, Abbrevs
abbrevs.texi(,175) @section Examining and Editing Abbrevs
abbrevs.texi(,176) 
abbrevs.texi(,177) @table @kbd
abbrevs.texi(,178) @item M-x list-abbrevs
abbrevs.texi(,179) Print a list of all abbrev definitions.
abbrevs.texi(,180) @item M-x edit-abbrevs
abbrevs.texi(,181) Edit a list of abbrevs; you can add, alter, or remove definitions.
abbrevs.texi(,182) @end table
abbrevs.texi(,183) 
abbrevs.texi(,184) @findex list-abbrevs
abbrevs.texi(,185)   The output from @kbd{M-x list-abbrevs} looks like this:
abbrevs.texi(,186) 
abbrevs.texi(,187) @example
abbrevs.texi(,188) (lisp-mode-abbrev-table)
abbrevs.texi(,189) "dk"           0    "define-key"
abbrevs.texi(,190) (global-abbrev-table)
abbrevs.texi(,191) "dfn"          0    "definition"
abbrevs.texi(,192) @end example
abbrevs.texi(,193) 
abbrevs.texi(,194) @noindent
abbrevs.texi(,195) (Some blank lines of no semantic significance, and some other abbrev
abbrevs.texi(,196) tables, have been omitted.)
abbrevs.texi(,197) 
abbrevs.texi(,198)   A line containing a name in parentheses is the header for abbrevs in a
abbrevs.texi(,199) particular abbrev table; @code{global-abbrev-table} contains all the global
abbrevs.texi(,200) abbrevs, and the other abbrev tables that are named after major modes
abbrevs.texi(,201) contain the mode-specific abbrevs.
abbrevs.texi(,202) 
abbrevs.texi(,203)   Within each abbrev table, each non-blank line defines one abbrev.  The
abbrevs.texi(,204) word at the beginning is the abbrev.  The number that appears is the number
abbrevs.texi(,205) of times the abbrev has been expanded.  Emacs keeps track of this to help
abbrevs.texi(,206) you see which abbrevs you actually use, in case you want to eliminate
abbrevs.texi(,207) those that you don't use often.  The string at the end of the line is the
abbrevs.texi(,208) expansion.
abbrevs.texi(,209) 
abbrevs.texi(,210) @findex edit-abbrevs
abbrevs.texi(,211) @kindex C-c C-c (Edit Abbrevs)
abbrevs.texi(,212) @findex edit-abbrevs-redefine
abbrevs.texi(,213)   @kbd{M-x edit-abbrevs} allows you to add, change or kill abbrev
abbrevs.texi(,214) definitions by editing a list of them in an Emacs buffer.  The list has
abbrevs.texi(,215) the format described above.  The buffer of abbrevs is called
abbrevs.texi(,216) @samp{*Abbrevs*}, and is in Edit-Abbrevs mode.  This mode redefines the
abbrevs.texi(,217) key @kbd{C-c C-c} to install the abbrev definitions as specified in the
abbrevs.texi(,218) buffer.  The  @code{edit-abbrevs-redefine} command does this.
abbrevs.texi(,219) Any abbrevs not described in the buffer are eliminated when this is
abbrevs.texi(,220) done.
abbrevs.texi(,221) 
abbrevs.texi(,222)   @code{edit-abbrevs} is actually the same as @code{list-abbrevs}, except
abbrevs.texi(,223) that it selects the buffer @samp{*Abbrevs*} whereas @code{list-abbrevs}
abbrevs.texi(,224) merely displays it in another window.
abbrevs.texi(,225) 
abbrevs.texi(,226) @node Saving Abbrevs, Dynamic Abbrevs, Editing Abbrevs, Abbrevs
abbrevs.texi(,227) @section Saving Abbrevs
abbrevs.texi(,228) 
abbrevs.texi(,229)   These commands allow you to keep abbrev definitions between editing
abbrevs.texi(,230) sessions.
abbrevs.texi(,231) 
abbrevs.texi(,232) @table @kbd
abbrevs.texi(,233) @item M-x write-abbrev-file
abbrevs.texi(,234) Write a file describing all defined abbrevs.
abbrevs.texi(,235) @item M-x read-abbrev-file
abbrevs.texi(,236) Read such an abbrev file and define abbrevs as specified there.
abbrevs.texi(,237) @item M-x quietly-read-abbrev-file
abbrevs.texi(,238) Similar, but do not display a message about what is going on.
abbrevs.texi(,239) @item M-x define-abbrevs
abbrevs.texi(,240) Define abbrevs from buffer.
abbrevs.texi(,241) @item M-x insert-abbrevs
abbrevs.texi(,242) Insert all abbrevs and their expansions into the buffer.
abbrevs.texi(,243) @end table
abbrevs.texi(,244) 
abbrevs.texi(,245) @findex write-abbrev-file
abbrevs.texi(,246)   Use @kbd{M-x write-abbrev-file} to save abbrev definitions for use in
abbrevs.texi(,247) a later session.  The command reads a file name using the minibuffer and
abbrevs.texi(,248) writes a description of all current abbrev definitions into the
abbrevs.texi(,249) specified file.  The text stored in the file looks like the output of
abbrevs.texi(,250) @kbd{M-x list-abbrevs}.
abbrevs.texi(,251) 
abbrevs.texi(,252) 
abbrevs.texi(,253) @findex read-abbrev-file
abbrevs.texi(,254) @findex quietly-read-abbrev-file
abbrevs.texi(,255) @vindex abbrev-file-name
abbrevs.texi(,256)   @kbd{M-x read-abbrev-file} prompts for a file name using the
abbrevs.texi(,257) minibuffer and reads the specified file, defining abbrevs according to
abbrevs.texi(,258) its contents.  @kbd{M-x quietly-read-abbrev-file} is the same but does
abbrevs.texi(,259) not display a message in the echo area; it is actually useful primarily
abbrevs.texi(,260) in the init file.  @xref{Init File}. If you give an empty argument to
abbrevs.texi(,261) either of these functions, the file name Emacs uses is the value of the
abbrevs.texi(,262) variable @code{abbrev-file-name}, which is by default
abbrevs.texi(,263) @code{"~/.abbrev_defs"}.
abbrevs.texi(,264) 
abbrevs.texi(,265) @vindex save-abbrevs
abbrevs.texi(,266)   Emacs offers to save abbrevs automatically if you have changed any of
abbrevs.texi(,267) them, whenever it offers to save all files (for @kbd{C-x s} or @kbd{C-x
abbrevs.texi(,268) C-c}).  Set the variable @code{save-abbrevs} to @code{nil} to inhibit
abbrevs.texi(,269) this feature.
abbrevs.texi(,270) 
abbrevs.texi(,271) @findex insert-abbrevs
abbrevs.texi(,272) @findex define-abbrevs
abbrevs.texi(,273)   The commands @kbd{M-x insert-abbrevs} and @kbd{M-x define-abbrevs} are
abbrevs.texi(,274) similar to the previous commands but work on text in an Emacs buffer.
abbrevs.texi(,275) @kbd{M-x insert-abbrevs} inserts text into the current buffer before point,
abbrevs.texi(,276) describing all current abbrev definitions; @kbd{M-x define-abbrevs} parses
abbrevs.texi(,277) the entire current buffer and defines abbrevs accordingly.@refill
abbrevs.texi(,278) 
abbrevs.texi(,279) @node Dynamic Abbrevs,, Saving Abbrevs, Abbrevs
abbrevs.texi(,280) @section Dynamic Abbrev Expansion
abbrevs.texi(,281) 
abbrevs.texi(,282)   The abbrev facility described above operates automatically as you insert
abbrevs.texi(,283) text, but all abbrevs must be defined explicitly.  By contrast,
abbrevs.texi(,284) @dfn{dynamic abbrevs} allow the meanings of abbrevs to be determined
abbrevs.texi(,285) automatically from the contents of the buffer, but dynamic abbrev expansion
abbrevs.texi(,286) happens only when you request it explicitly.
abbrevs.texi(,287) 
abbrevs.texi(,288) @kindex M-/
abbrevs.texi(,289) @findex dabbrev-expand
abbrevs.texi(,290) @table @kbd
abbrevs.texi(,291) @item M-/
abbrevs.texi(,292) Expand the word in the buffer before point as a @dfn{dynamic abbrev},
abbrevs.texi(,293) by searching in the buffer for words starting with that abbreviation
abbrevs.texi(,294) (@code{dabbrev-expand}).
abbrevs.texi(,295) @end table
abbrevs.texi(,296) 
abbrevs.texi(,297)   For example, if the buffer contains @samp{does this follow } and you type
abbrevs.texi(,298) @kbd{f o M-/}, the effect is to insert @samp{follow} because that is the
abbrevs.texi(,299) last word in the buffer that starts with @samp{fo}.  A numeric argument to
abbrevs.texi(,300) @kbd{M-/} says to take the second, third, etc.@: distinct expansion found
abbrevs.texi(,301) looking backward from point.  Repeating @kbd{M-/} searches for an
abbrevs.texi(,302) alternative expansion by looking farther back.  After the entire buffer
abbrevs.texi(,303) before point has been considered, the buffer after point is searched.
abbrevs.texi(,304) 
abbrevs.texi(,305)   Dynamic abbrev expansion is completely independent of Abbrev mode; the
abbrevs.texi(,306) expansion of a word with @kbd{M-/} is completely independent of whether it
abbrevs.texi(,307) has a definition as an ordinary abbrev.
picture.texi(,1) 
picture.texi(,2) @node Picture, Sending Mail, Abbrevs, Top
picture.texi(,3) @chapter Editing Pictures
picture.texi(,4) @cindex pictures
picture.texi(,5) @findex edit-picture
picture.texi(,6) 
picture.texi(,7)   If you want to create a picture made out of text characters (for example,
picture.texi(,8) a picture of the division of a register into fields, as a comment in a
picture.texi(,9) program), use the command @code{edit-picture} to enter Picture mode.
picture.texi(,10) 
picture.texi(,11)   In Picture mode, editing is based on the @dfn{quarter-plane} model of
picture.texi(,12) text.  In this model, the text characters lie studded on an area that
picture.texi(,13) stretches infinitely far to the right and downward.  The concept of the end
picture.texi(,14) of a line does not exist in this model; the most you can say is where the
picture.texi(,15) last non-blank character on the line is found.
picture.texi(,16) 
picture.texi(,17)   Of course, Emacs really always considers text as a sequence of
picture.texi(,18) characters, and lines really do have ends.  But in Picture mode most
picture.texi(,19) frequently-used keys are rebound to commands that simulate the
picture.texi(,20) quarter-plane model of text.  They do this by inserting spaces or by
picture.texi(,21) converting tabs to spaces.
picture.texi(,22) 
picture.texi(,23)   Most of the basic editing commands of Emacs are redefined by Picture mode
picture.texi(,24) to do essentially the same thing but in a quarter-plane way.  In addition,
picture.texi(,25) Picture mode defines various keys starting with the @kbd{C-c} prefix to
picture.texi(,26) run special picture editing commands.
picture.texi(,27) 
picture.texi(,28)   One of these keys, @kbd{C-c C-c}, is pretty important.  Often a picture
picture.texi(,29) is part of a larger file that is usually edited in some other major mode.
picture.texi(,30) @kbd{M-x edit-picture} records the name of the previous major mode. 
picture.texi(,31) You can then use the @kbd{C-c C-c} command (@code{picture-mode-exit}) to
picture.texi(,32) restore that mode.  @kbd{C-c C-c} also deletes spaces from the ends of
picture.texi(,33) lines, unless you give it a numeric argument.
picture.texi(,34) 
picture.texi(,35)   The commands used in Picture mode all work in other modes (provided the
picture.texi(,36) @file{picture} library is loaded), but are only  bound to keys in
picture.texi(,37) Picture mode.  Note that the descriptions below talk of moving ``one
picture.texi(,38) column'' and so on, but all the picture mode commands handle numeric
picture.texi(,39) arguments as their normal equivalents do.
picture.texi(,40) 
picture.texi(,41) @vindex picture-mode-hook
picture.texi(,42)   Turning on Picture mode calls the value of the variable
picture.texi(,43) @code{picture-mode-hook} as a function, with no arguments, if that value
picture.texi(,44) exists and is non-@code{nil}.
picture.texi(,45) 
picture.texi(,46) @menu
picture.texi(,47) * Basic Picture::         Basic concepts and simple commands of Picture Mode.
picture.texi(,48) * Insert in Picture::     Controlling direction of cursor motion
picture.texi(,49)                            after "self-inserting" characters.
picture.texi(,50) * Tabs in Picture::       Various features for tab stops and indentation.
picture.texi(,51) * Rectangles in Picture:: Clearing and superimposing rectangles.
picture.texi(,52) @end menu
picture.texi(,53) 
picture.texi(,54) @node Basic Picture, Insert in Picture, Picture, Picture
picture.texi(,55) @section Basic Editing in Picture Mode
picture.texi(,56) 
picture.texi(,57) @findex picture-forward-column
picture.texi(,58) @findex picture-backward-column
picture.texi(,59) @findex picture-move-down
picture.texi(,60) @findex picture-move-up
picture.texi(,61)   Most keys do the same thing in Picture mode that they usually do, but do
picture.texi(,62) it in a quarter-plane style.  For example, @kbd{C-f} is rebound to run
picture.texi(,63) @code{picture-forward-column}, which moves point one column to
picture.texi(,64) the right, by inserting a space if necessary, so that the actual end of the
picture.texi(,65) line makes no difference.  @kbd{C-b} is rebound to run
picture.texi(,66) @code{picture-backward-column}, which always moves point left one column,
picture.texi(,67) converting a tab to multiple spaces if necessary.  @kbd{C-n} and @kbd{C-p}
picture.texi(,68) are rebound to run @code{picture-move-down} and @code{picture-move-up},
picture.texi(,69) which can either insert spaces or convert tabs as necessary to make sure
picture.texi(,70) that point stays in exactly the same column.  @kbd{C-e} runs
picture.texi(,71) @code{picture-end-of-line}, which moves to after the last non-blank
picture.texi(,72) character on the line.  There was no need to change @kbd{C-a}, as the choice
picture.texi(,73) of screen model does not affect beginnings of lines.@refill
picture.texi(,74) 
picture.texi(,75) @findex picture-newline
picture.texi(,76)   Insertion of text is adapted to the quarter-plane screen model through
picture.texi(,77) the use of Overwrite mode (@pxref{Minor Modes}).  Self-inserting characters
picture.texi(,78) replace existing text, column by column, rather than pushing existing text
picture.texi(,79) to the right.  @key{RET} runs @code{picture-newline}, which just moves to
picture.texi(,80) the beginning of the following line so that new text will replace that
picture.texi(,81) line.
picture.texi(,82) 
picture.texi(,83) @findex picture-backward-clear-column
picture.texi(,84) @findex picture-clear-column
picture.texi(,85) @findex picture-clear-line
picture.texi(,86)   Text is erased instead of deleted and killed.  @key{DEL}
picture.texi(,87) (@code{picture-backward-clear-column}) replaces the preceding character
picture.texi(,88) with a space rather than removing it.  @kbd{C-d}
picture.texi(,89) (@code{picture-clear-column}) does the same in a forward direction.
picture.texi(,90) @kbd{C-k} (@code{picture-clear-line}) really kills the contents of lines,
picture.texi(,91) but never removes the newlines from a buffer.@refill
picture.texi(,92) 
picture.texi(,93) @findex picture-open-line
picture.texi(,94)   To do actual insertion, you must use special commands.  @kbd{C-o}
picture.texi(,95) (@code{picture-open-line}) creates a blank line, but does so after
picture.texi(,96) the current line; it never splits a line.  @kbd{C-M-o}, @code{split-line},
picture.texi(,97) makes sense in Picture mode, so it remains unchanged.  @key{LFD}
picture.texi(,98) (@code{picture-duplicate-line}) inserts another line
picture.texi(,99) with the same contents below the current line.@refill
picture.texi(,100) 
picture.texi(,101) @kindex C-c C-d (Picture mode)
picture.texi(,102) @findex delete-char
picture.texi(,103)  
picture.texi(,104)   To actually delete parts of the picture, use @kbd{C-w}, or with
picture.texi(,105) @kbd{C-c C-d} (which is defined as @code{delete-char}, as @kbd{C-d} is
picture.texi(,106) in other modes), or with one of the picture rectangle commands
picture.texi(,107) (@pxref{Rectangles in Picture}).
picture.texi(,108) 
picture.texi(,109) @node Insert in Picture, Tabs in Picture, Basic Picture, Picture
picture.texi(,110) @section Controlling Motion After Insert
picture.texi(,111) 
picture.texi(,112) @findex picture-movement-up
picture.texi(,113) @findex picture-movement-down
picture.texi(,114) @findex picture-movement-left
picture.texi(,115) @findex picture-movement-right
picture.texi(,116) @findex picture-movement-nw
picture.texi(,117) @findex picture-movement-ne
picture.texi(,118) @findex picture-movement-sw
picture.texi(,119) @findex picture-movement-se
picture.texi(,120) @kindex C-c < (Picture mode)
picture.texi(,121) @kindex C-c > (Picture mode)
picture.texi(,122) @kindex C-c ^ (Picture mode)
picture.texi(,123) @kindex C-c . (Picture mode)
picture.texi(,124) @kindex C-c ` (Picture mode)
picture.texi(,125) @kindex C-c ' (Picture mode)
picture.texi(,126) @kindex C-c / (Picture mode)
picture.texi(,127) @kindex C-c \ (Picture mode)
picture.texi(,128)   Since ``self-inserting'' characters just overwrite and move point in
picture.texi(,129) Picture mode, there is no essential restriction on how point should be
picture.texi(,130) moved.  Normally point moves right, but you can specify any of the eight
picture.texi(,131) orthogonal or diagonal directions for motion after a ``self-inserting''
picture.texi(,132) character.  This is useful for drawing lines in the buffer.
picture.texi(,133) 
picture.texi(,134) @table @kbd
picture.texi(,135) @item C-c <
picture.texi(,136) Move left after insertion (@code{picture-movement-left}).
picture.texi(,137) @item C-c >
picture.texi(,138) Move right after insertion (@code{picture-movement-right}).
picture.texi(,139) @item C-c ^
picture.texi(,140) Move up after insertion (@code{picture-movement-up}).
picture.texi(,141) @item C-c .
picture.texi(,142) Move down after insertion (@code{picture-movement-down}).
picture.texi(,143) @item C-c `
picture.texi(,144) Move up and left (``northwest'') after insertion @*(@code{picture-movement-nw}).
picture.texi(,145) @item C-c '
picture.texi(,146) Move up and right (``northeast'') after insertion @*
picture.texi(,147) (@code{picture-movement-ne}).
picture.texi(,148) @item C-c /
picture.texi(,149) Move down and left (``southwest'') after insertion
picture.texi(,150) @*(@code{picture-movement-sw}).
picture.texi(,151) @item C-c \
picture.texi(,152) Move down and right (``southeast'') after insertion
picture.texi(,153) @*(@code{picture-movement-se}).
picture.texi(,154) @end table
picture.texi(,155) 
picture.texi(,156) @kindex C-c C-f (Picture mode)
picture.texi(,157) @kindex C-c C-b (Picture mode)
picture.texi(,158) @findex picture-motion
picture.texi(,159) @findex picture-motion-reverse
picture.texi(,160)   Two motion commands move based on the current Picture insertion
picture.texi(,161) direction.  The command @kbd{C-c C-f} (@code{picture-motion}) moves in the
picture.texi(,162) same direction as motion after ``insertion'' currently does, while @kbd{C-c
picture.texi(,163) C-b} (@code{picture-motion-reverse}) moves in the opposite direction.
picture.texi(,164) 
picture.texi(,165) @node Tabs in Picture, Rectangles in Picture, Insert in Picture, Picture
picture.texi(,166) @section Picture Mode Tabs
picture.texi(,167)  
picture.texi(,168) @kindex M-TAB
picture.texi(,169) @findex picture-tab-search
picture.texi(,170) @vindex picture-tab-chars
picture.texi(,171)   Two kinds of tab-like action are provided in Picture mode.
picture.texi(,172) Context-based tabbing is done with @kbd{M-@key{TAB}}
picture.texi(,173) (@code{picture-tab-search}).  With no argument, it moves to a point
picture.texi(,174) underneath the next ``interesting'' character that follows whitespace in
picture.texi(,175) the previous non-blank line.  ``Next'' here means ``appearing at a
picture.texi(,176) horizontal position greater than the one point starts out at''.  With an
picture.texi(,177) argument, as in @kbd{C-u M-@key{TAB}}, the command moves to the next such
picture.texi(,178) interesting character in the current line.  @kbd{M-@key{TAB}} does not
picture.texi(,179) change the text; it only moves point.  ``Interesting'' characters are
picture.texi(,180) defined by the variable @code{picture-tab-chars}, which contains a string
picture.texi(,181) of characters considered interesting.  Its default value is
picture.texi(,182) @code{"!-~"}.@refill
picture.texi(,183) 
picture.texi(,184) @findex picture-tab
picture.texi(,185)   @key{TAB} itself runs @code{picture-tab}, which operates based on the
picture.texi(,186) current tab stop settings; it is the Picture mode equivalent of
picture.texi(,187) @code{tab-to-tab-stop}.  Without arguments it just moves point, but with
picture.texi(,188) a numeric argument it clears the text that it moves over.
picture.texi(,189) 
picture.texi(,190) @kindex C-c TAB (Picture mode)
picture.texi(,191) @findex picture-set-tab-stops
picture.texi(,192)   The context-based and tab-stop-based forms of tabbing are brought
picture.texi(,193) together by the command @kbd{C-c @key{TAB}} (@code{picture-set-tab-stops}.)
picture.texi(,194) This command sets the tab stops to the positions which @kbd{M-@key{TAB}}
picture.texi(,195) would consider significant in the current line.  If you use this command
picture.texi(,196) with @key{TAB}, you can get the effect of context-based tabbing.  But
picture.texi(,197) @kbd{M-@key{TAB}} is more convenient in the cases where it is sufficient.
picture.texi(,198) 
picture.texi(,199) @node Rectangles in Picture,, Tabs in Picture, Picture
picture.texi(,200) @section Picture Mode Rectangle Commands
picture.texi(,201) @cindex rectangle
picture.texi(,202) 
picture.texi(,203)   Picture mode defines commands for working on rectangular pieces of the
picture.texi(,204) text in ways that fit with the quarter-plane model.  The standard rectangle
picture.texi(,205) commands may also be useful (@pxref{Rectangles}).
picture.texi(,206) 
picture.texi(,207) @table @kbd
picture.texi(,208) @item C-c C-k
picture.texi(,209) Clear out the region-rectangle (@code{picture-clear-rectangle}).  With
picture.texi(,210) argument, kill it.
picture.texi(,211) @item C-c C-w @var{r}
picture.texi(,212) Similar but save rectangle contents in register @var{r} first
picture.texi(,213) (@code{picture-clear-rectangle-to-register}).
picture.texi(,214) @item C-c C-y
picture.texi(,215) Copy last killed rectangle into the buffer by overwriting, with upper
picture.texi(,216) left corner at point (@code{picture-yank-rectangle}).  With argument,
picture.texi(,217) insert instead.
picture.texi(,218) @item C-c C-x @var{r}
picture.texi(,219) Similar, but use the rectangle in register @var{r}@*
picture.texi(,220) (@code{picture-yank-rectangle-from-register}).
picture.texi(,221) @end table
picture.texi(,222) 
picture.texi(,223) @kindex C-c C-k (Picture mode)
picture.texi(,224) @kindex C-c C-w (Picture mode)
picture.texi(,225) @findex picture-clear-rectangle
picture.texi(,226) @findex picture-clear-rectangle-to-register
picture.texi(,227)   The picture rectangle commands @kbd{C-c C-k}
picture.texi(,228) (@code{picture-clear-rectangle}) and @kbd{C-c C-w}
picture.texi(,229) (@code{picture-clear-rectangle-to-register}) differ from the standard
picture.texi(,230) rectangle commands in that they normally clear the rectangle instead of
picture.texi(,231) deleting it; this is analogous with the way @kbd{C-d} is changed in Picture
picture.texi(,232) mode.@refill
picture.texi(,233) 
picture.texi(,234)   However, deletion of rectangles can be useful in Picture mode, so these
picture.texi(,235) commands delete the rectangle if given a numeric argument.
picture.texi(,236) 
picture.texi(,237) @kindex C-c C-y (Picture mode)
picture.texi(,238) @kindex C-c C-x (Picture mode)
picture.texi(,239) @findex picture-yank-rectangle
picture.texi(,240) @findex picture-yank-rectangle-from-register
picture.texi(,241)   The Picture mode commands for yanking rectangles differ from the standard
picture.texi(,242) ones in overwriting instead of inserting.  This is the same way that
picture.texi(,243) Picture mode insertion of other text is different from other modes.
picture.texi(,244) @kbd{C-c C-y} (@code{picture-yank-rectangle}) inserts (by overwriting) the
picture.texi(,245) rectangle that was most recently killed, while @kbd{C-c C-x}
picture.texi(,246) (@code{picture-yank-rectangle-from-register}) does for the
picture.texi(,247) rectangle found in a specified register.
picture.texi(,248) 
picture.texi(,249) Since most region commands in Picture mode operate on rectangles, when you
picture.texi(,250) select a region of text with the mouse in Picture mode, it is highlighted
picture.texi(,251) as a rectangle.
sending.texi(,1) 
sending.texi(,2) @node Sending Mail, Reading Mail, Picture, Top
sending.texi(,3) @chapter Sending Mail
sending.texi(,4) @cindex mail
sending.texi(,5) @cindex message
sending.texi(,6) 
sending.texi(,7)   To send a message in Emacs, start by typing the command (@kbd{C-x m})
sending.texi(,8) to select and initialize the @samp{*mail*} buffer.  You can then edit the text
sending.texi(,9) and headers of the message in the mail buffer, and type the command
sending.texi(,10) (@kbd{C-c C-c}) to send the message.
sending.texi(,11) 
sending.texi(,12) @table @kbd
sending.texi(,13) @item C-x m
sending.texi(,14) Begin composing a message to send (@code{mail}).
sending.texi(,15) @item C-x 4 m
sending.texi(,16) Likewise, but display the message in another window
sending.texi(,17) (@code{mail-other-window}).
sending.texi(,18) @item C-c C-c
sending.texi(,19) In Mail mode, send the message and switch to another buffer
sending.texi(,20) (@code{mail-send-and-exit}).
sending.texi(,21) @end table
sending.texi(,22) 
sending.texi(,23) @kindex C-x m
sending.texi(,24) @findex mail
sending.texi(,25) @kindex C-x 4 m
sending.texi(,26) @findex mail-other-window
sending.texi(,27)   The command @kbd{C-x m} (@code{mail}) selects a buffer named
sending.texi(,28) @samp{*mail*} and initializes it with the skeleton of an outgoing message.
sending.texi(,29) @kbd{C-x 4 m} (@code{mail-other-window}) selects the @samp{*mail*} buffer
sending.texi(,30) in a different window, leaving the previous current buffer visible.@refill
sending.texi(,31) 
sending.texi(,32)   Because the buffer for mail composition is an ordinary Emacs buffer, you can
sending.texi(,33) switch to other buffers while in the middle of composing mail, and switch
sending.texi(,34) back later (or never).  If you use the @kbd{C-x m} command again when you
sending.texi(,35) have been composing another message but have not sent it, a new mail
sending.texi(,36) buffer will be created; in this way, you can compose multiple messages
sending.texi(,37) at once.  You can switch back to and complete an unsent message by using
sending.texi(,38) the normal buffer selection mechanisms.  
sending.texi(,39) 
sending.texi(,40) @kbd{C-u C-x m} is another way to switch back to a message in progress:
sending.texi(,41) it will search for an existing, unsent mail message buffer and select it.
sending.texi(,42) 
sending.texi(,43) @menu
sending.texi(,44) * Format: Mail Format.    Format of the mail being composed.
sending.texi(,45) * Headers: Mail Headers.  Details of allowed mail header fields.
sending.texi(,46) * Mode: Mail Mode.        Special commands for editing mail being composed.
sending.texi(,47) @end menu
sending.texi(,48) 
sending.texi(,49) @node Mail Format, Mail Headers, Sending Mail, Sending Mail
sending.texi(,50) @section The Format of the Mail Buffer
sending.texi(,51) 
sending.texi(,52)   In addition to the @dfn{text} or contents, a message has @dfn{header
sending.texi(,53) fields}, which say who sent it, when, to whom, why, and so on.  Some header
sending.texi(,54) fields, such as the date and sender, are created automatically after the
sending.texi(,55) message is sent.  Others, such as the recipient names, must be specified by
sending.texi(,56) you in order to send the message properly.
sending.texi(,57) 
sending.texi(,58)   Mail mode provides a few commands to help you edit some header fields,
sending.texi(,59) and some are preinitialized in the buffer automatically at times.  You can
sending.texi(,60) insert or edit any header fields using ordinary editing commands.
sending.texi(,61) 
sending.texi(,62)   The line in the buffer that says:
sending.texi(,63) 
sending.texi(,64) @example
sending.texi(,65) --text follows this line--
sending.texi(,66) @end example
sending.texi(,67) 
sending.texi(,68) @vindex mail-header-separator
sending.texi(,69) @noindent
sending.texi(,70) is a special delimiter that separates the headers you have specified from
sending.texi(,71) the text.  Whatever follows this line is the text of the message; the
sending.texi(,72) headers precede it.  The delimiter line itself does not appear in the
sending.texi(,73) message actually sent.  The text used for the delimiter line is controlled
sending.texi(,74) by the variable @code{mail-header-separator}.
sending.texi(,75) 
sending.texi(,76) Here is an example of what the headers and text in the @samp{*mail*} buffer
sending.texi(,77) might look like.
sending.texi(,78) 
sending.texi(,79) @example
sending.texi(,80) To: rms@@mc
sending.texi(,81) CC: mly@@mc, rg@@oz
sending.texi(,82) Subject: The XEmacs User's Manual
sending.texi(,83) --Text follows this line--
sending.texi(,84) Please ignore this message.
sending.texi(,85) @end example
sending.texi(,86) 
sending.texi(,87) @node Mail Headers, Mail Mode, Mail Format, Sending Mail
sending.texi(,88) @section Mail Header Fields
sending.texi(,89) @cindex headers (of mail message)
sending.texi(,90) 
sending.texi(,91)   There are several header fields you can use in the @samp{*mail*} buffer.
sending.texi(,92) Each header field starts with a field name at the beginning of a line,
sending.texi(,93) terminated by a colon.  It does not matter whether you use upper or lower
sending.texi(,94) case in the field name.  After the colon and optional whitespace comes the
sending.texi(,95) contents of the field.
sending.texi(,96) 
sending.texi(,97) @table @samp
sending.texi(,98) @item To
sending.texi(,99) This field contains the mailing addresses of the message.
sending.texi(,100) 
sending.texi(,101) @item Subject
sending.texi(,102) The contents of the @samp{Subject} field should be a piece of text that
sending.texi(,103) says what the message is about.  Subject fields are useful because most
sending.texi(,104) mail-reading programs can provide a summary of messages, listing the
sending.texi(,105) subject of each message but not its text.
sending.texi(,106) 
sending.texi(,107) @item CC
sending.texi(,108) This field contains additional mailing addresses to send the message
sending.texi(,109) to, but whose readers should not regard the message as addressed to
sending.texi(,110) them.
sending.texi(,111) 
sending.texi(,112) @item BCC
sending.texi(,113) This field contains additional mailing addresses to send the message
sending.texi(,114) to, but which should not appear in the header of the message actually
sending.texi(,115) sent.
sending.texi(,116) 
sending.texi(,117) @item FCC
sending.texi(,118) This field contains the name of one file (in Unix mail file format) to
sending.texi(,119) which a copy of the message should be appended when the message is
sending.texi(,120) sent.
sending.texi(,121) 
sending.texi(,122) @item From
sending.texi(,123) Use the @samp{From} field to say who you are, when the account you are
sending.texi(,124) using to send the mail is not your own.  The contents of the
sending.texi(,125) @samp{From} field should be a valid mailing address, since replies
sending.texi(,126) will normally go there.
sending.texi(,127) 
sending.texi(,128) @item Reply-To
sending.texi(,129) Use the @samp{Reply-To} field to direct replies to a different
sending.texi(,130) address, not your own. @samp{From} and
sending.texi(,131) @samp{Reply-To} have the same effect on where replies go, but they convey a
sending.texi(,132) different meaning to the person who reads the message.
sending.texi(,133) 
sending.texi(,134) @item In-Reply-To
sending.texi(,135) This field contains a piece of text describing a message you are
sending.texi(,136) replying to.  Some mail systems can use the information to correlate
sending.texi(,137) related pieces of mail.  This field is normally filled in by your mail
sending.texi(,138) handling package when you are replying to a message and you never need
sending.texi(,139) to think about it.
sending.texi(,140) @end table
sending.texi(,141) 
sending.texi(,142) @noindent
sending.texi(,143) The @samp{To}, @samp{CC}, @samp{BCC} and @samp{FCC} fields can appear
sending.texi(,144) any number of times, to specify many places to send the message.
sending.texi(,145) 
sending.texi(,146) @noindent
sending.texi(,147) The @samp{To}, @samp{CC}, and @samp{BCC}, fields can have continuation
sending.texi(,148) lines.  All the lines starting with whitespace, following the line on
sending.texi(,149) which the field starts, are considered part of the field.  For
sending.texi(,150) example,@refill
sending.texi(,151) 
sending.texi(,152) @example
sending.texi(,153) To: foo@@here, this@@there,
sending.texi(,154)   me@@gnu.cambridge.mass.usa.earth.spiral3281
sending.texi(,155) @end example
sending.texi(,156) 
sending.texi(,157) @noindent
sending.texi(,158) @vindex mail-abbrev-mailrc-file
sending.texi(,159) If you have a @file{~/.mailrc} file, Emacs scans it for mail aliases the
sending.texi(,160) first time you try to send mail in an Emacs session.  Emacs expands
sending.texi(,161) aliases found in the @samp{To}, @samp{CC}, and @samp{BCC} fields where
sending.texi(,162) appropriate. You can set the variable @code{mail-abbrev-mailrc-file} to
sending.texi(,163) the name of the file with mail aliases.  If @code{nil}, @file{~/.mailrc}
sending.texi(,164) is used.
sending.texi(,165) 
sending.texi(,166) @cindex .mailrc file
sending.texi(,167) Your @file{.mailrc} file ensures that word-abbrevs are defined for each
sending.texi(,168) of your mail aliases when point is in a @samp{To}, @samp{CC},
sending.texi(,169) @samp{BCC}, or @samp{From} field.  The aliases are defined in your
sending.texi(,170) @file{.mailrc} file or in a file specified by the @b{MAILRC}
sending.texi(,171) environment variable if it exists.  Your mail aliases expand any time
sending.texi(,172) you type a word-delimiter at the end of an abbreviation.
sending.texi(,173) 
sending.texi(,174) In this version of Emacs, what you see is what you get: in contrast to
sending.texi(,175) some other versions, no abbreviations are expanded after you have sent the
sending.texi(,176) mail.  This means you don't suffer the annoyance of having the system do
sending.texi(,177) things behind your back---if the system rewrites an address you typed,
sending.texi(,178) you know it immediately, instead of after the mail has been sent and
sending.texi(,179) it's too late to do anything about it.  For example, you will never
sending.texi(,180) again be in trouble because you forgot to delete an old alias from your
sending.texi(,181) @file{.mailrc} and a new local user is given a userid which conflicts
sending.texi(,182) with one of your aliases.
sending.texi(,183) 
sending.texi(,184) @vindex mail-abbrev-mode-regexp 
sending.texi(,185) Your mail alias abbrevs are in effect only when point is in an
sending.texi(,186) appropriate header field. The mail aliases will not expand in the body
sending.texi(,187) of the message, or in other header fields.  The default mode-specific
sending.texi(,188) abbrev table @code{mail-mode-abbrev-table} is used instead if defined.
sending.texi(,189) That means if you have been using mail-mode specific abbrevs, this code
sending.texi(,190) will not adversely affect you.  You can control which header fields the
sending.texi(,191) abbrevs are used in by changing the variable @code{mail-abbrev-mode-regexp}.
sending.texi(,192) 
sending.texi(,193) If auto-fill mode is on, abbrevs wrap at commas instead of at word
sending.texi(,194) boundaries, and header continuation lines will be properly indented.
sending.texi(,195) 
sending.texi(,196) @findex mail-interactive-insert-alias
sending.texi(,197) You can also insert a mail alias with @code{mail-interactive-insert-alias}.
sending.texi(,198) This function, which is bound to @kbd{C-c C-a}, prompts you for an alias
sending.texi(,199) (with completion) and inserts its expansion at point.
sending.texi(,200) 
sending.texi(,201) In this version of Emacs, it is possible to have lines like the
sending.texi(,202) following in your @file{.mailrc} file:
sending.texi(,203) 
sending.texi(,204) @example
sending.texi(,205)      alias someone "John Doe <doe@@quux.com>"
sending.texi(,206) @end example
sending.texi(,207) 
sending.texi(,208) That is, if you want an address to have embedded spaces, simply surround
sending.texi(,209) it with double-quotes.  The quotes are necessary because the format of
sending.texi(,210) the @file{.mailrc} file uses spaces as address delimiters.  
sending.texi(,211) 
sending.texi(,212) Aliases in the @file{.mailrc} file may be nested. For example, assume
sending.texi(,213) you define aliases like:
sending.texi(,214) @example
sending.texi(,215)      alias group1 fred ethel
sending.texi(,216)      alias group2 larry curly moe
sending.texi(,217)      alias everybody group1 group2
sending.texi(,218) @end example
sending.texi(,219) 
sending.texi(,220) When you now type @samp{everybody} on the @samp{To} line, it will expand to:
sending.texi(,221) @example
sending.texi(,222)      fred, ethyl, larry, curly, moe
sending.texi(,223) @end example
sending.texi(,224) 
sending.texi(,225) Aliases may contain forward references; the alias of @samp{everybody} in the
sending.texi(,226) example above can precede the aliases of @samp{group1} and @samp{group2}.
sending.texi(,227) 
sending.texi(,228) In this version of Emacs, you can use the @code{source} @file{.mailrc} command
sending.texi(,229) for reading aliases from some other file as well.
sending.texi(,230) 
sending.texi(,231) Aliases may contain hyphens, as in @code{"alias foo-bar foo@@bar"}, even
sending.texi(,232) though word-abbrevs normally cannot contain hyphens.
sending.texi(,233) 
sending.texi(,234) To read in the contents of another @file{.mailrc}-type file from Emacs, use the
sending.texi(,235) command @code{M-x merge-mail-aliases}.  The @code{rebuild-mail-aliases}
sending.texi(,236) command is similar, but deletes existing aliases first.
sending.texi(,237) 
sending.texi(,238) @vindex mail-alias-separator-string
sending.texi(,239) If you want multiple addresses separated by a string other than @samp{,}
sending.texi(,240) (a comma), then set the variable @code{mail-alias-separator-string} to
sending.texi(,241) it.  This has to be a comma bracketed by whitespace if you want any kind
sending.texi(,242)  of reasonable behavior.
sending.texi(,243) 
sending.texi(,244) @vindex mail-archive-file-name
sending.texi(,245)   If the variable @code{mail-archive-file-name} is non-@code{nil}, it
sending.texi(,246) should be a string naming a file.  Each time you start to edit a message
sending.texi(,247) to send, an @samp{FCC} field is entered for that file.  Unless you
sending.texi(,248) remove the @samp{FCC} field, every message is written into that
sending.texi(,249) file when it is sent.
sending.texi(,250) 
sending.texi(,251) @node Mail Mode,, Mail Headers, Sending Mail
sending.texi(,252) @section Mail Mode
sending.texi(,253) 
sending.texi(,254)   The major mode used in the @samp{*mail*} buffer is Mail mode.  Mail
sending.texi(,255) mode is similar to Text mode, but several commands are provided on
sending.texi(,256) the @kbd{C-c} prefix.  These commands all deal specifically with
sending.texi(,257) editing or sending the message.
sending.texi(,258) 
sending.texi(,259) @table @kbd
sending.texi(,260) @item C-c C-s
sending.texi(,261) Send the message, and leave the @samp{*mail*} buffer selected
sending.texi(,262) (@code{mail-send}).
sending.texi(,263) @item C-c C-c
sending.texi(,264) Send the message, and select some other buffer (@code{mail-send-and-exit}).
sending.texi(,265) @item C-c C-f C-t
sending.texi(,266) Move to the @samp{To} header field, creating one if there is none
sending.texi(,267) (@code{mail-to}).
sending.texi(,268) @item C-c C-f C-s
sending.texi(,269) Move to the @samp{Subject} header field, creating one if there is
sending.texi(,270) none (@code{mail-subject}).
sending.texi(,271) @item C-c C-f C-c
sending.texi(,272) Move to the @samp{CC} header field, creating one if there is none
sending.texi(,273) (@code{mail-cc}).
sending.texi(,274) @item C-c C-w
sending.texi(,275) Insert the file @file{~/.signature} at the end of the message text
sending.texi(,276) (@code{mail-signature}).
sending.texi(,277) @item C-c C-y
sending.texi(,278) Yank the selected message (@code{mail-yank-original}).
sending.texi(,279) @item C-c C-q
sending.texi(,280) Fill all paragraphs of yanked old messages, each individually
sending.texi(,281) (@code{mail-fill-yanked-message}).
sending.texi(,282) @item @key{button3}
sending.texi(,283) Pops up a menu of useful mail-mode commands.
sending.texi(,284) @end table
sending.texi(,285) 
sending.texi(,286) @kindex C-c C-s (Mail mode)
sending.texi(,287) @kindex C-c C-c (Mail mode)
sending.texi(,288) @findex mail-send
sending.texi(,289) @findex mail-send-and-exit
sending.texi(,290)   There are two ways to send a message.  @kbd{C-c C-c}
sending.texi(,291) (@code{mail-send-and-exit}) is the usual way to send the message.  It
sending.texi(,292) sends the message and then deletes the window (if there is another
sending.texi(,293) window) or switches to another buffer.  It puts the @samp{*mail*} buffer
sending.texi(,294) at the lowest priority for automatic reselection, since you are finished
sending.texi(,295) with using it.  @kbd{C-c C-s} (@code{mail-send}) sends the
sending.texi(,296) message and marks the @samp{*mail*} buffer unmodified, but leaves that
sending.texi(,297) buffer selected so that you can modify the message (perhaps with new
sending.texi(,298) recipients) and send it again.
sending.texi(,299) 
sending.texi(,300) @kindex C-c C-f C-t (Mail mode)
sending.texi(,301) @findex mail-to
sending.texi(,302) @kindex C-c C-f C-s (Mail mode)
sending.texi(,303) @findex mail-subject
sending.texi(,304) @kindex C-c C-f C-c (Mail mode)
sending.texi(,305) @findex mail-cc
sending.texi(,306)   Mail mode provides some other special commands that are useful for
sending.texi(,307) editing the headers and text of the message before you send it.  There are
sending.texi(,308) three commands defined to move point to particular header fields, all based
sending.texi(,309) on the prefix @kbd{C-c C-f} (@samp{C-f} is for ``field'').  They are
sending.texi(,310) @kbd{C-c C-f C-t} (@code{mail-to}) to move to the @samp{To} field, @kbd{C-c
sending.texi(,311) C-f C-s} (@code{mail-subject}) for the @samp{Subject} field, and @kbd{C-c
sending.texi(,312) C-f C-c} (@code{mail-cc}) for the @samp{CC} field.  These fields have
sending.texi(,313) special motion commands because they are edited most frequently. 
sending.texi(,314) 
sending.texi(,315) 
sending.texi(,316) @kindex C-c C-w (Mail mode)
sending.texi(,317) @findex mail-signature
sending.texi(,318)   @kbd{C-c C-w} (@code{mail-signature}) adds a standard piece of text at
sending.texi(,319) the end of the message to say more about who you are.  The text comes
sending.texi(,320) from the file @file{.signature} in your home directory.
sending.texi(,321) 
sending.texi(,322) @kindex C-c C-y (Mail mode)
sending.texi(,323) @findex mail-yank-original
sending.texi(,324)   When you use an Rmail command to send mail from the Rmail mail reader,
sending.texi(,325) you can use @kbd{C-c C-y} @code{mail-yank-original} inside the
sending.texi(,326) @samp{*mail*} buffer to insert the
sending.texi(,327) text of the message you are replying to.  Normally Rmail indents each line
sending.texi(,328) of that message four spaces and eliminates most header fields.  A
sending.texi(,329) numeric argument specifies the number of spaces to indent.  An argument
sending.texi(,330) of just @kbd{C-u} says not to indent at all and not to eliminate
sending.texi(,331) anything.  @kbd{C-c C-y} always uses the current message from the
sending.texi(,332) @samp{RMAIL} buffer, so you can insert several old messages by selecting
sending.texi(,333) one in @samp{RMAIL}, switching to @samp{*mail*} and yanking it, then
sending.texi(,334) switching back to @samp{RMAIL} to select another.@refill
sending.texi(,335) 
sending.texi(,336) @kindex C-c C-q (Mail mode)
sending.texi(,337) @findex mail-fill-yanked-message
sending.texi(,338)   After using @kbd{C-c C-y}, you can use the command @kbd{C-c C-q}
sending.texi(,339) (@code{mail-fill-yanked-message}) to fill the paragraphs of the yanked
sending.texi(,340) old message or messages.  One use of @kbd{C-c C-q} fills all such
sending.texi(,341) paragraphs, each one separately.
sending.texi(,342) 
sending.texi(,343)   Clicking the right mouse button in a mail buffer pops up a menu of
sending.texi(,344) the above commands, for easy access.
sending.texi(,345) 
sending.texi(,346) @vindex mail-mode-hook
sending.texi(,347)   Turning on Mail mode (which @kbd{C-x m} does automatically) calls the
sending.texi(,348) value of @code{text-mode-hook}, if it is not void or @code{nil}, and
sending.texi(,349) then calls the value of @code{mail-mode-hook} if that is not void or
sending.texi(,350) @code{nil}.
reading.texi(,1) 
reading.texi(,2) @node Reading Mail, Calendar/Diary, Sending Mail, Top
reading.texi(,3) @chapter Reading Mail
reading.texi(,4) @cindex mail
reading.texi(,5) @cindex message
reading.texi(,6) 
reading.texi(,7) XEmacs provides three separate mail-reading packages.  Each one comes with
reading.texi(,8) its own manual, which is included standard with the XEmacs distribution.
reading.texi(,9) 
reading.texi(,10) The recommended mail-reading package for new users is VM.  VM works
reading.texi(,11) with standard Unix-mail-format folders and was designed as a replacement
reading.texi(,12) for the older Rmail.
reading.texi(,13) 
reading.texi(,14) XEmacs also provides a sophisticated and comfortable front-end to the
reading.texi(,15) MH mail-processing system, called @samp{mh-e}.  Unlike in other
reading.texi(,16) mail programs, folders in MH are stored as file-system directories,
reading.texi(,17) with each message occupying one (numbered) file.  This facilitates
reading.texi(,18) working with mail using shell commands, and many other features of
reading.texi(,19) MH are also designed to integrate well with the shell and with
reading.texi(,20) shell scripts.  Keep in mind, however, that in order to use mh-e
reading.texi(,21) you must have the MH mail-processing system installed on your
reading.texi(,22) computer.
reading.texi(,23) 
reading.texi(,24) Finally, XEmacs provides the Rmail package.  Rmail is (currently) the
reading.texi(,25) only mail reading package distributed with FSF GNU Emacs, and is
reading.texi(,26) powerful in its own right.  However, it stores mail folders in a special
reading.texi(,27) format called @samp{Babyl}, that is incompatible with all other
reading.texi(,28) frequently-used mail programs.  A utility program is provided for
reading.texi(,29) converting Babyl folders to standard Unix-mail format; however, unless
reading.texi(,30) you already have mail in Babyl-format folders, you should consider
reading.texi(,31) using VM or mh-e instead. (If at times you have to use FSF Emacs, it
reading.texi(,32) is not hard to obtain and install VM for that editor.)
calendar.texi(,1) @node Calendar/Diary, Sorting, Reading Mail, Top
calendar.texi(,2) @section Calendar Mode and the Diary
calendar.texi(,3) @cindex calendar
calendar.texi(,4) @findex calendar
calendar.texi(,5) 
calendar.texi(,6)   Emacs provides the functions of a desk calendar, with a diary of
calendar.texi(,7) planned or past events.  To enter the calendar, type @kbd{M-x calendar};
calendar.texi(,8) this displays a three-month calendar centered on the current month, with
calendar.texi(,9) point on the current date.  With a numeric argument, as in @kbd{C-u M-x
calendar.texi(,10) calendar}, it prompts you for the month and year to be the center of the
calendar.texi(,11) three-month calendar.  The calendar uses its own buffer, whose major
calendar.texi(,12) mode is Calendar mode.
calendar.texi(,13) 
calendar.texi(,14)   @kbd{Button2} in the calendar brings up a menu of operations on a
calendar.texi(,15) particular date; @kbd{Buttons3} brings up a menu of commonly used
calendar.texi(,16) calendar features that are independent of any particular date.  To exit
calendar.texi(,17) the calendar, type @kbd{q}.  @xref{Calendar, Customizing the Calendar
calendar.texi(,18) and Diary,, lispref, The XEmacs Lisp Reference Manual}, for customization
calendar.texi(,19) information about the calendar and diary.
calendar.texi(,20)  
calendar.texi(,21) @menu
calendar.texi(,22) * Calendar Motion::        Moving through the calendar; selecting a date.
calendar.texi(,23) * Scroll Calendar::        Bringing earlier or later months onto the screen.
calendar.texi(,24) * Mark and Region::        Remembering dates, the mark ring.
calendar.texi(,25) * General Calendar::       Exiting or recomputing the calendar.
calendar.texi(,26) * LaTeX Calendar::         Print a calendar using LaTeX.
calendar.texi(,27) * Holidays::               Displaying dates of holidays.
calendar.texi(,28) * Sunrise/Sunset::         Displaying local times of sunrise and sunset.
calendar.texi(,29) * Lunar Phases::           Displaying phases of the moon.
calendar.texi(,30) * Other Calendars::        Converting dates to other calendar systems.
calendar.texi(,31) * Diary::                  Displaying events from your diary.
calendar.texi(,32) * Calendar Customization:: Altering the behavior of the features above.
calendar.texi(,33) @end menu
calendar.texi(,34) 
calendar.texi(,35) @node Calendar Motion, Scroll Calendar, Calendar/Diary, Calendar/Diary
calendar.texi(,36) @subsection Movement in the Calendar
calendar.texi(,37) 
calendar.texi(,38) @cindex moving inside the calendar
calendar.texi(,39)   Calendar mode lets you move through the calendar in logical units of
calendar.texi(,40) time such as days, weeks, months, and years.  If you move outside the
calendar.texi(,41) three months originally displayed, the calendar display ``scrolls''
calendar.texi(,42) automatically through time to make the selected date visible.  Moving to
calendar.texi(,43) a date lets you view its holidays or diary entries, or convert it to other
calendar.texi(,44) calendars; moving longer time periods is also useful simply to scroll the
calendar.texi(,45) calendar.
calendar.texi(,46) 
calendar.texi(,47) @menu
calendar.texi(,48) * Calendar Unit Motion::       Moving by days, weeks, months, and years.
calendar.texi(,49) * Move to Beginning or End::   Moving to start/end of weeks, months, and years.
calendar.texi(,50) * Specified Dates::            Moving to the current date or another 
calendar.texi(,51)                                specific date.
calendar.texi(,52) @end menu
calendar.texi(,53) 
calendar.texi(,54) @node Calendar Unit Motion, Move to Beginning or End, Calendar Motion, Calendar Motion
calendar.texi(,55) @subsubsection Motion by Integral Days, Weeks, Months, Years
calendar.texi(,56) 
calendar.texi(,57)   The commands for movement in the calendar buffer parallel the
calendar.texi(,58) commands for movement in text.  You can move forward and backward by
calendar.texi(,59) days, weeks, months, and years.
calendar.texi(,60) 
calendar.texi(,61) @table @kbd
calendar.texi(,62) @item C-f
calendar.texi(,63) Move point one day forward (@code{calendar-forward-day}).
calendar.texi(,64) @item C-b
calendar.texi(,65) Move point one day backward (@code{calendar-backward-day}).
calendar.texi(,66) @item C-n
calendar.texi(,67) Move point one week forward (@code{calendar-forward-week}).
calendar.texi(,68) @item C-p
calendar.texi(,69) Move point one week backward (@code{calendar-backward-week}).
calendar.texi(,70) @item M-@}
calendar.texi(,71) Move point one month forward (@code{calendar-forward-month}).
calendar.texi(,72) @item M-@{
calendar.texi(,73) Move point one month backward (@code{calendar-backward-month}).
calendar.texi(,74) @item C-x ]
calendar.texi(,75) Move point one year forward (@code{calendar-forward-year}).
calendar.texi(,76) @item C-x [
calendar.texi(,77) Move point one year backward (@code{calendar-backward-year}).
calendar.texi(,78) @end table
calendar.texi(,79) 
calendar.texi(,80) @kindex C-f @r{(Calendar mode)}
calendar.texi(,81) @findex calendar-forward-day
calendar.texi(,82) @kindex C-b @r{(Calendar mode)}
calendar.texi(,83) @findex calendar-backward-day
calendar.texi(,84) @kindex C-n @r{(Calendar mode)}
calendar.texi(,85) @findex calendar-forward-week
calendar.texi(,86) @kindex C-p @r{(Calendar mode)}
calendar.texi(,87) @findex calendar-backward-week
calendar.texi(,88)   The day and week commands are natural analogues of the usual Emacs
calendar.texi(,89) commands for moving by characters and by lines.  Just as @kbd{C-n}
calendar.texi(,90) usually moves to the same column in the following line, in Calendar
calendar.texi(,91) mode it moves to the same day in the following week.  And @kbd{C-p}
calendar.texi(,92) moves to the same day in the previous week.
calendar.texi(,93) 
calendar.texi(,94)   The arrow keys are equivalent to @kbd{C-f}, @kbd{C-b}, @kbd{C-n} and
calendar.texi(,95) @kbd{C-p}, just as they normally are in other modes.
calendar.texi(,96) 
calendar.texi(,97) @kindex M-@} @r{(Calendar mode)}
calendar.texi(,98) @findex calendar-forward-month
calendar.texi(,99) @kindex M-@{ @r{(Calendar mode)}
calendar.texi(,100) @findex calendar-backward-month
calendar.texi(,101) @kindex C-x ] @r{(Calendar mode)}
calendar.texi(,102) @findex calendar-forward-year
calendar.texi(,103) @kindex C-x [ @r{(Calendar mode)}
calendar.texi(,104) @findex calendar-forward-year
calendar.texi(,105)   The commands for motion by months and years work like those for
calendar.texi(,106) weeks, but move a larger distance.  The month commands @kbd{M-@}} and
calendar.texi(,107) @kbd{M-@{} move forward or backward by an entire month's time.  The
calendar.texi(,108) year commands @kbd{C-x ]} and @w{@kbd{C-x [}} move forward or backward a
calendar.texi(,109) whole year.
calendar.texi(,110) 
calendar.texi(,111)   The easiest way to remember these commands is to consider months and
calendar.texi(,112) years analogous to paragraphs and pages of text, respectively.  But the
calendar.texi(,113) commands themselves are not quite analogous.  The ordinary Emacs paragraph
calendar.texi(,114) commands move to the beginning or end of a paragraph, whereas these month
calendar.texi(,115) and year commands move by an entire month or an entire year, which usually
calendar.texi(,116) involves skipping across the end of a month or year.
calendar.texi(,117) 
calendar.texi(,118)   All these commands accept a numeric argument as a repeat count.
calendar.texi(,119) For convenience, the digit keys and the minus sign specify numeric
calendar.texi(,120) arguments in Calendar mode even without the Meta modifier.  For example,
calendar.texi(,121) @kbd{100 C-f} moves point 100 days forward from its present location.
calendar.texi(,122) 
calendar.texi(,123) @node Move to Beginning or End, Specified Dates, Calendar Unit Motion, Calendar Motion
calendar.texi(,124) @subsubsection Beginning or End of Week, Month or Year
calendar.texi(,125) 
calendar.texi(,126)   A week (or month, or year) is not just a quantity of days; we think of
calendar.texi(,127) weeks (months, years) as starting on particular dates.  So Calendar mode
calendar.texi(,128) provides commands to move to the beginning or end of a week, month or
calendar.texi(,129) year:
calendar.texi(,130)  
calendar.texi(,131) @table @kbd
calendar.texi(,132) @kindex C-a @r{(Calendar mode)}
calendar.texi(,133) @findex calendar-beginning-of-week
calendar.texi(,134) @item C-a
calendar.texi(,135) Move point to start of week (@code{calendar-beginning-of-week}).
calendar.texi(,136) @kindex C-e @r{(Calendar mode)}
calendar.texi(,137) @findex calendar-end-of-week
calendar.texi(,138) @item C-e
calendar.texi(,139) Move point to end of week (@code{calendar-end-of-week}).
calendar.texi(,140) @kindex M-a @r{(Calendar mode)}
calendar.texi(,141) @findex calendar-beginning-of-month
calendar.texi(,142) @item M-a
calendar.texi(,143) Move point to start of month (@code{calendar-beginning-of-month}).
calendar.texi(,144) @kindex M-e @r{(Calendar mode)}
calendar.texi(,145) @findex calendar-end-of-month
calendar.texi(,146) @item M-e
calendar.texi(,147) Move point to end of month (@code{calendar-end-of-month}).
calendar.texi(,148) @kindex M-< @r{(Calendar mode)}
calendar.texi(,149) @findex calendar-beginning-of-year
calendar.texi(,150) @item M-<
calendar.texi(,151) Move point to start of year (@code{calendar-beginning-of-year}).
calendar.texi(,152) @kindex M-> @r{(Calendar mode)}
calendar.texi(,153) @findex calendar-end-of-year
calendar.texi(,154) @item M->
calendar.texi(,155) Move point to end of year (@code{calendar-end-of-year}).
calendar.texi(,156) @end table
calendar.texi(,157) 
calendar.texi(,158)   These commands also take numeric arguments as repeat counts, with the
calendar.texi(,159) repeat count indicating how many weeks, months, or years to move
calendar.texi(,160) backward or forward.
calendar.texi(,161) 
calendar.texi(,162) @vindex calendar-week-start-day
calendar.texi(,163) @cindex weeks, which day they start on
calendar.texi(,164) @cindex calendar, first day of week
calendar.texi(,165)   By default, weeks begin on Sunday.  To make them begin on Monday
calendar.texi(,166) instead, set the variable @code{calendar-week-start-day} to 1.
calendar.texi(,167) 
calendar.texi(,168) @node Specified Dates,,Move to Beginning or End, Calendar Motion
calendar.texi(,169) @subsubsection Particular Dates
calendar.texi(,170) 
calendar.texi(,171)   Calendar mode provides commands for moving to a particular date
calendar.texi(,172) specified in various ways.
calendar.texi(,173) 
calendar.texi(,174) @table @kbd
calendar.texi(,175) @item g d
calendar.texi(,176) Move point to specified date (@code{calendar-goto-date}).
calendar.texi(,177) @item o
calendar.texi(,178) Center calendar around specified month (@code{calendar-other-month}).
calendar.texi(,179) @item .
calendar.texi(,180) Move point to today's date (@code{calendar-goto-today}).
calendar.texi(,181) @end table
calendar.texi(,182) 
calendar.texi(,183) @kindex g d @r{(Calendar mode)}
calendar.texi(,184) @findex calendar-goto-date
calendar.texi(,185)   @kbd{g d} (@code{calendar-goto-date}) prompts for a year, a month, and a day
calendar.texi(,186) of the month, and then moves to that date.  Because the calendar includes all
calendar.texi(,187) dates from the beginning of the current era, you must type the year in its
calendar.texi(,188) entirety; that is, type @samp{1990}, not @samp{90}.
calendar.texi(,189) 
calendar.texi(,190) @kindex o @r{(Calendar mode)}
calendar.texi(,191) @findex calendar-other-month
calendar.texi(,192)   @kbd{o} (@code{calendar-other-month}) prompts for a month and year,
calendar.texi(,193) then centers the three-month calendar around that month.
calendar.texi(,194) 
calendar.texi(,195) @kindex . @r{(Calendar mode)}
calendar.texi(,196) @findex calendar-goto-today
calendar.texi(,197)   You can return to today's date with @kbd{.}@:
calendar.texi(,198) (@code{calendar-goto-today}).
calendar.texi(,199) 
calendar.texi(,200) @node Scroll Calendar, Mark and Region, Calendar Motion, Calendar/Diary
calendar.texi(,201) @subsection Scrolling the Calendar through Time
calendar.texi(,202) 
calendar.texi(,203) @cindex scrolling in the calendar
calendar.texi(,204)   The calendar display scrolls automatically through time when you move out
calendar.texi(,205) of the visible portion.  You can also scroll it manually.  Imagine that the
calendar.texi(,206) calendar window contains a long strip of paper with the months on it.
calendar.texi(,207) Scrolling it means moving the strip so that new months become visible in
calendar.texi(,208) the window.
calendar.texi(,209) 
calendar.texi(,210) @table @kbd
calendar.texi(,211) @item C-x <
calendar.texi(,212) Scroll calendar one month forward (@code{scroll-calendar-left}).
calendar.texi(,213) @item C-x >
calendar.texi(,214) Scroll calendar one month backward (@code{scroll-calendar-right}).
calendar.texi(,215) @item C-v
calendar.texi(,216) @itemx @key{NEXT}
calendar.texi(,217) Scroll calendar three months forward
calendar.texi(,218) (@code{scroll-calendar-left-three-months}).
calendar.texi(,219) @item M-v
calendar.texi(,220) @itemx @key{PRIOR}
calendar.texi(,221) Scroll calendar three months backward
calendar.texi(,222) (@code{scroll-calendar-right-three-months}).
calendar.texi(,223) @end table
calendar.texi(,224) 
calendar.texi(,225) @kindex C-x < @r{(Calendar mode)}
calendar.texi(,226) @findex scroll-calendar-left
calendar.texi(,227) @kindex C-x > @r{(Calendar mode)}
calendar.texi(,228) @findex scroll-calendar-right
calendar.texi(,229)   The most basic calendar scroll commands scroll by one month at a
calendar.texi(,230) time.  This means that there are two months of overlap between the
calendar.texi(,231) display before the command and the display after.  @kbd{C-x <} scrolls
calendar.texi(,232) the calendar contents one month to the left; that is, it moves the
calendar.texi(,233) display forward in time.  @kbd{C-x >} scrolls the contents to the
calendar.texi(,234) right, which moves backwards in time.
calendar.texi(,235) 
calendar.texi(,236) @kindex C-v @r{(Calendar mode)}
calendar.texi(,237) @findex scroll-calendar-left-three-months
calendar.texi(,238) @kindex M-v @r{(Calendar mode)}
calendar.texi(,239) @findex scroll-calendar-right-three-months
calendar.texi(,240)   The commands @kbd{C-v} and @kbd{M-v} scroll the calendar by an entire
calendar.texi(,241) ``screenful''---three months---in analogy with the usual meaning of
calendar.texi(,242) these commands.  @kbd{C-v} makes later dates visible and @kbd{M-v} makes
calendar.texi(,243) earlier dates visible.  These commands take a numeric argument as a
calendar.texi(,244) repeat count; in particular, since @kbd{C-u} multiplies the next command
calendar.texi(,245) by four, typing @kbd{C-u C-v} scrolls the calendar forward by a year and
calendar.texi(,246) typing @kbd{C-u M-v} scrolls the calendar backward by a year.
calendar.texi(,247) 
calendar.texi(,248)   The function keys @key{NEXT} and @key{PRIOR} are equivalent to
calendar.texi(,249) @kbd{C-v} and @kbd{M-v}, just as they are in other modes.
calendar.texi(,250) 
calendar.texi(,251) 
calendar.texi(,252) @node Mark and Region, General Calendar, Scroll Calendar, Calendar/Diary
calendar.texi(,253) @subsection The Mark and the Region
calendar.texi(,254) 
calendar.texi(,255)   The concept of the mark applies to the calendar just as to any other
calendar.texi(,256) buffer, but it marks a @emph{date}, not a @emph{position} in the buffer.
calendar.texi(,257) The region consists of the days between the mark and point (including
calendar.texi(,258) the starting and stopping dates).
calendar.texi(,259) 
calendar.texi(,260) @table @kbd
calendar.texi(,261) @item C-SPC
calendar.texi(,262) Set the mark to today's date (@code{calendar-set-mark}).
calendar.texi(,263) @item C-@@
calendar.texi(,264) The same.
calendar.texi(,265) @item C-x C-x
calendar.texi(,266) Interchange mark and point (@code{calendar-exchange-point-and-mark}).
calendar.texi(,267) @item M-=
calendar.texi(,268) Display the number of days in the current region
calendar.texi(,269) (@code{calendar-count-days-region}).
calendar.texi(,270) @end table
calendar.texi(,271) 
calendar.texi(,272) @kindex C-@@ @r{(Calendar mode)}
calendar.texi(,273) @kindex C-SPC @r{(Calendar mode)}
calendar.texi(,274) @findex calendar-set-mark
calendar.texi(,275) @kindex C-x C-x @r{(Calendar mode)}
calendar.texi(,276) @findex calendar-exchange-point-and-mark
calendar.texi(,277)   You set the mark in the calendar, as in any other buffer, by using @kbd{C-@@}
calendar.texi(,278) or @kbd{C-SPC} (@code{calendar-set-mark}).  You return to the marked date
calendar.texi(,279) with the command @kbd{C-x C-x} (@code{calendar-exchange-point-and-mark})
calendar.texi(,280) which puts the mark where point was and point where mark was.  The calendar
calendar.texi(,281) is scrolled as necessary, if the marked date was not visible on the
calendar.texi(,282) screen.  This does not change the extent of the region.
calendar.texi(,283) 
calendar.texi(,284) @kindex M-= @r{(Calendar mode)}
calendar.texi(,285) @findex calendar-count-days-region
calendar.texi(,286)   To determine the number of days in the region, type @kbd{M-=}
calendar.texi(,287) (@code{calendar-count-days-region}).  The numbers of days printed is
calendar.texi(,288) @emph{inclusive}; that is, it includes the days specified by mark and
calendar.texi(,289) point.
calendar.texi(,290) 
calendar.texi(,291) @cindex mark ring
calendar.texi(,292)   The main use of the mark in the calendar is to remember dates that you may
calendar.texi(,293) want to go back to.  To make this feature more useful, the mark ring
calendar.texi(,294) (@pxref{Mark Ring}) operates exactly as in other buffers:  Emacs remembers
calendar.texi(,295) 16 previous locations of the mark.  To return to a marked date, type @kbd{C-u
calendar.texi(,296) C-SPC} (or @kbd{C-u C-@@}); this is the command @code{calendar-set-mark} given
calendar.texi(,297) a numeric argument.  It moves point to where the mark was, restores the mark
calendar.texi(,298) from the ring of former marks, and stores the previous point at the end of
calendar.texi(,299) the mark ring.  So, repeated use of this command moves point through all
calendar.texi(,300) the old marks on the ring, one by one.
calendar.texi(,301) 
calendar.texi(,302) @node General Calendar, LaTeX Calendar, Mark and Region, Calendar/Diary
calendar.texi(,303) @subsection Miscellaneous Calendar Commands
calendar.texi(,304) 
calendar.texi(,305) @table @kbd
calendar.texi(,306) @item p d
calendar.texi(,307) Display day-in-year (@code{calendar-print-day-of-year}).
calendar.texi(,308) @item ?
calendar.texi(,309) Briefly describe calendar commands (@code{describe-calendar-mode}).
calendar.texi(,310) @item C-c C-l
calendar.texi(,311) Regenerate the calendar window (@code{redraw-calendar}).
calendar.texi(,312) @item SPC
calendar.texi(,313) Scroll the next window (@code{scroll-other-window}).
calendar.texi(,314) @item q
calendar.texi(,315) Exit from calendar (@code{exit-calendar}).
calendar.texi(,316) @end table
calendar.texi(,317) 
calendar.texi(,318) @kindex p d @r{(Calendar mode)}
calendar.texi(,319) @cindex day of year
calendar.texi(,320) @findex calendar-print-day-of-year
calendar.texi(,321)   If you want to know how many days have elapsed since the start of
calendar.texi(,322) the year, or the number of days remaining in the year, type the @kbd{p d}
calendar.texi(,323) command (@code{calendar-print-day-of-year}).  This displays both
calendar.texi(,324) of those numbers in the echo area.
calendar.texi(,325) 
calendar.texi(,326) @kindex ? @r{(Calendar mode)}
calendar.texi(,327) @findex describe-calendar-mode
calendar.texi(,328)   To display a brief description of the calendar commands, type @kbd{?}
calendar.texi(,329) (@code{describe-calendar-mode}).  For a fuller description, type @kbd{C-h m}.
calendar.texi(,330) 
calendar.texi(,331) @kindex SPC @r{(Calendar mode)}
calendar.texi(,332) @findex scroll-other-window
calendar.texi(,333)   You can use @kbd{SPC} (@code{scroll-other-window}) to scroll the other
calendar.texi(,334) window.  This is handy when you display a list of holidays or diary entries
calendar.texi(,335) in another window.
calendar.texi(,336) 
calendar.texi(,337) @kindex C-c C-l @r{(Calendar mode)}
calendar.texi(,338) @findex redraw-calendar
calendar.texi(,339)   If the calendar window text gets corrupted, type @kbd{C-c C-l}
calendar.texi(,340) (@code{redraw-calendar}) to redraw it.  (This can only happen if you use
calendar.texi(,341) non-Calendar-mode editing commands.)
calendar.texi(,342) 
calendar.texi(,343) @kindex SPC @r{(Calendar mode)}
calendar.texi(,344)   In Calendar mode, you can use @kbd{SPC} (@code{scroll-other-window})
calendar.texi(,345) to scroll the other window.  This is handy when you display a list of
calendar.texi(,346) holidays or diary entries in another window.
calendar.texi(,347) 
calendar.texi(,348) @kindex q @r{(Calendar mode)}
calendar.texi(,349) @findex exit-calendar
calendar.texi(,350)   To exit from the calendar, type @kbd{q} (@code{exit-calendar}).  This
calendar.texi(,351) buries all buffers related to the calendar, selecting other buffers.
calendar.texi(,352) (If a frame contains a dedicated calendar window, exiting from the
calendar.texi(,353) calendar iconifies that frame.)
calendar.texi(,354) 
calendar.texi(,355) @node LaTeX Calendar, Holidays, General Calendar, Calendar/Diary
calendar.texi(,356) @section LaTeX Calendar
calendar.texi(,357) @cindex calendar and La@TeX{}
calendar.texi(,358) 
calendar.texi(,359)    The Calendar La@TeX{} commands produce a buffer of La@TeX{} code that
calendar.texi(,360) prints as a calendar.  Depending on the command you use, the printed
calendar.texi(,361) calendar covers the day, week, month or year that point is in.
calendar.texi(,362) 
calendar.texi(,363) @kindex t @r{(Calendar mode)}
calendar.texi(,364) @table @kbd
calendar.texi(,365) @item t m
calendar.texi(,366) Generate a one-month calendar (@code{cal-tex-cursor-month}).
calendar.texi(,367) @item t M
calendar.texi(,368) Generate a sideways-printing one-month calendar
calendar.texi(,369) (@code{cal-tex-cursor-month-landscape}).
calendar.texi(,370) @item t d
calendar.texi(,371) Generate a one-day calendar
calendar.texi(,372) (@code{cal-tex-cursor-day}).
calendar.texi(,373) @item t w 1
calendar.texi(,374) Generate a one-page calendar for one week
calendar.texi(,375) (@code{cal-tex-cursor-week}).
calendar.texi(,376) @item t w 2
calendar.texi(,377) Generate a two-page calendar for one week
calendar.texi(,378) (@code{cal-tex-cursor-week2}).
calendar.texi(,379) @item t w 3
calendar.texi(,380) Generate an ISO-style calendar for one week
calendar.texi(,381) (@code{cal-tex-cursor-week-iso}).
calendar.texi(,382) @item t w 4
calendar.texi(,383) Generate a calendar for one Monday-starting week
calendar.texi(,384) (@code{cal-tex-cursor-week-monday}).
calendar.texi(,385) @item t f w
calendar.texi(,386) Generate a Filofax-style two-weeks-at-a-glance calendar
calendar.texi(,387) (@code{cal-tex-cursor-filofax-2week}).
calendar.texi(,388) @item t f W
calendar.texi(,389) Generate a Filofax-style one-week-at-a-glance calendar
calendar.texi(,390) (@code{cal-tex-cursor-filofax-week}).
calendar.texi(,391) @item t y
calendar.texi(,392) Generate a calendar for one year
calendar.texi(,393) (@code{cal-tex-cursor-year}).
calendar.texi(,394) @item t Y
calendar.texi(,395) Generate a sideways-printing calendar for one year
calendar.texi(,396) (@code{cal-tex-cursor-year-landscape}).
calendar.texi(,397) @item t f y
calendar.texi(,398) Generate a Filofax-style calendar for one year
calendar.texi(,399) (@code{cal-tex-cursor-filofax-year}).
calendar.texi(,400) @end table
calendar.texi(,401) 
calendar.texi(,402)   Some of these commands print the calendar sideways (in ``landscape
calendar.texi(,403) mode''), so it can be wider than it is long.  Some of them use Filofax
calendar.texi(,404) paper size (3.75in x 6.75in).  All of these commands accept a prefix
calendar.texi(,405) argument which specifies how many days, weeks, months or years to print
calendar.texi(,406) (starting always with the selected one).
calendar.texi(,407) 
calendar.texi(,408)   If the variable @code{cal-tex-holidays} is non-@code{nil} (the
calendar.texi(,409) default), then the printed calendars show the holidays in
calendar.texi(,410) @code{calendar-holidays}.  If the variable @code{cal-tex-diary} is
calendar.texi(,411) non-@code{nil} (the default is @code{nil}), diary entries are included
calendar.texi(,412) also (in weekly and monthly calendars only).
calendar.texi(,413) 
calendar.texi(,414) @node Holidays, Sunrise/Sunset, LaTeX Calendar, Calendar/Diary
calendar.texi(,415) @subsection Holidays
calendar.texi(,416) @cindex holidays
calendar.texi(,417) 
calendar.texi(,418)   The Emacs calendar knows about all major and many minor holidays,
calendar.texi(,419) and can display them.
calendar.texi(,420) 
calendar.texi(,421) @table @kbd
calendar.texi(,422) @item h
calendar.texi(,423) Display holidays for the selected date
calendar.texi(,424) (@code{calendar-cursor-holidays}).
calendar.texi(,425) @item Button2 Holidays
calendar.texi(,426) Display any holidays for the date you click on.
calendar.texi(,427) @item x
calendar.texi(,428) Mark holidays in the calendar window (@code{mark-calendar-holidays}).
calendar.texi(,429) @item u
calendar.texi(,430) Unmark calendar window (@code{calendar-unmark}).
calendar.texi(,431) @item a
calendar.texi(,432) List all holidays for the displayed three months in another window
calendar.texi(,433) (@code{list-calendar-holidays}).
calendar.texi(,434) @item M-x holidays
calendar.texi(,435) List all holidays for three months around today's date in another
calendar.texi(,436) window.
calendar.texi(,437) @item M-x list-holidays
calendar.texi(,438) List holidays in another window for a specified range of years.
calendar.texi(,439) @end table
calendar.texi(,440) 
calendar.texi(,441) @kindex h @r{(Calendar mode)}
calendar.texi(,442) @findex calendar-cursor-holidays
calendar.texi(,443)   To see if any holidays fall on a given date, position point on that
calendar.texi(,444) date in the calendar window and use the @kbd{h} command.  Alternatively,
calendar.texi(,445) click on that date with @kbd{Button2} and then choose @kbd{Holidays}
calendar.texi(,446) from the menu that appears.  Either way, this displays the holidays for
calendar.texi(,447) that date, in the echo area if they fit there, otherwise in a separate
calendar.texi(,448) window.
calendar.texi(,449) 
calendar.texi(,450) @kindex x @r{(Calendar mode)}
calendar.texi(,451) @findex mark-calendar-holidays
calendar.texi(,452) @kindex u @r{(Calendar mode)}
calendar.texi(,453) @findex calendar-unmark
calendar.texi(,454)   To view the distribution of holidays for all the dates shown in the
calendar.texi(,455) calendar, use the @kbd{x} command.  This displays the dates that are
calendar.texi(,456) holidays in a different face (or places a @samp{*} after these dates, if 
calendar.texi(,457) display with multiple faces is not available). The command applies both
calendar.texi(,458) to the currently visible months and to other months that subsequently
calendar.texi(,459) become visible by scrolling.  To turn marking off and erase the current
calendar.texi(,460) marks, type @kbd{u}, which also erases any diary marks (@pxref{Diary}).
calendar.texi(,461) 
calendar.texi(,462) @kindex a @r{(Calendar mode)}
calendar.texi(,463) @findex list-calendar-holidays
calendar.texi(,464)   To get even more detailed information, use the @kbd{a} command, which
calendar.texi(,465) displays a separate buffer containing a list of all holidays in the
calendar.texi(,466) current three-month range.  You can use @key{SPC} in the calendar window
calendar.texi(,467) to scroll that list.
calendar.texi(,468) 
calendar.texi(,469) @findex holidays
calendar.texi(,470)   The command @kbd{M-x holidays} displays the list of holidays for the
calendar.texi(,471) current month and the preceding and succeeding months; this works even
calendar.texi(,472) if you don't have a calendar window.  If you want the list of holidays
calendar.texi(,473) centered around a different month, use @kbd{C-u M-x holidays}, which
calendar.texi(,474) prompts for the month and year.
calendar.texi(,475) 
calendar.texi(,476)   The holidays known to Emacs include United States holidays and the
calendar.texi(,477) major Christian, Jewish, and Islamic holidays; also the solstices and
calendar.texi(,478) equinoxes.
calendar.texi(,479) 
calendar.texi(,480) @findex list-holidays
calendar.texi(,481)    The command @kbd{M-x list-holidays} displays the list of holidays for
calendar.texi(,482) a range of years.  This function asks you for the starting and stopping
calendar.texi(,483) years, and allows you to choose all the holidays or one of several
calendar.texi(,484) categories of holidays.  You can use this command even if you don't have
calendar.texi(,485) a calendar window.
calendar.texi(,486) 
calendar.texi(,487)   The dates used by Emacs for holidays are based on @emph{current
calendar.texi(,488) practice}, not historical fact.  Historically, for instance, the start
calendar.texi(,489) of daylight savings time and even its existence have varied from year to
calendar.texi(,490) year, but present United States law mandates that daylight savings time
calendar.texi(,491) begins on the first Sunday in April.  When the daylight savings rules
calendar.texi(,492) are set up for the United States, Emacs always uses the present
calendar.texi(,493) definition, even though it is wrong for some prior years.
calendar.texi(,494) 
calendar.texi(,495) @node Sunrise/Sunset, Lunar Phases, Holidays, Calendar/Diary
calendar.texi(,496) @subsection Times of Sunrise and Sunset
calendar.texi(,497) @cindex sunrise and sunset
calendar.texi(,498) 
calendar.texi(,499)   Special calendar commands can tell you, to within a minute or two, the
calendar.texi(,500) times of sunrise and sunset for any date.
calendar.texi(,501) 
calendar.texi(,502) @table @kbd
calendar.texi(,503) @item S
calendar.texi(,504) Display times of sunrise and sunset for the selected date
calendar.texi(,505) (@code{calendar-sunrise-sunset}).
calendar.texi(,506) @item Button2 Sunrise/Sunset
calendar.texi(,507) Display times of sunrise and sunset for the date you click on.
calendar.texi(,508) @item M-x sunrise-sunset
calendar.texi(,509) Display times of sunrise and sunset for today's date.
calendar.texi(,510) @item C-u M-x sunrise-sunset
calendar.texi(,511) Display times of sunrise and sunset for a specified date.
calendar.texi(,512) @end table
calendar.texi(,513) 
calendar.texi(,514) @kindex S @r{(Calendar mode)}
calendar.texi(,515) @findex calendar-sunrise-sunset
calendar.texi(,516) @findex sunrise-sunset
calendar.texi(,517)   Within the calendar, to display the @emph{local times} of sunrise and
calendar.texi(,518) sunset in the echo area, move point to the date you want, and type
calendar.texi(,519) @kbd{S}.  Alternatively, click @kbd{Button2} on the date, then choose
calendar.texi(,520) @kbd{Sunrise/Sunset} from the menu that appears.  The command @kbd{M-x
calendar.texi(,521) sunrise-sunset} is available outside the calendar to display this
calendar.texi(,522) information for today's date or a specified date.  To specify a date
calendar.texi(,523) other than today, use @kbd{C-u M-x sunrise-sunset}, which prompts for
calendar.texi(,524) the year, month, and day.
calendar.texi(,525) 
calendar.texi(,526)   You can display the times of sunrise and sunset for any location and
calendar.texi(,527) any date with @kbd{C-u C-u M-x sunrise-sunset}.  This asks you for a
calendar.texi(,528) longitude, latitude, number of minutes difference from Coordinated
calendar.texi(,529) Universal Time, and date, and then tells you the times of sunrise and
calendar.texi(,530) sunset for that location on that date.
calendar.texi(,531) 
calendar.texi(,532)   Because the times of sunrise and sunset depend on the location on
calendar.texi(,533) earth, you need to tell Emacs your latitude, longitude, and location
calendar.texi(,534) name before using these commands.  Here is an example of what to set:
calendar.texi(,535) 
calendar.texi(,536) @vindex calendar-location-name
calendar.texi(,537) @vindex calendar-longitude
calendar.texi(,538) @vindex calendar-latitude
calendar.texi(,539) @example
calendar.texi(,540) (setq calendar-latitude 40.1)
calendar.texi(,541) (setq calendar-longitude -88.2)
calendar.texi(,542) (setq calendar-location-name "Urbana, IL")
calendar.texi(,543) @end example
calendar.texi(,544) 
calendar.texi(,545) @noindent
calendar.texi(,546) Use one decimal place in the values of @code{calendar-latitude} and
calendar.texi(,547) @code{calendar-longitude}.
calendar.texi(,548) 
calendar.texi(,549)   Your time zone also affects the local time of sunrise and sunset.
calendar.texi(,550) Emacs usually gets time zone information from the operating system, but
calendar.texi(,551) if these values are not what you want (or if the operating system does
calendar.texi(,552) not supply them), you must set them yourself.  Here is an example:
calendar.texi(,553) 
calendar.texi(,554) @vindex calendar-time-zone
calendar.texi(,555) @vindex calendar-standard-time-zone-name
calendar.texi(,556) @vindex calendar-daylight-time-zone-name
calendar.texi(,557) @example
calendar.texi(,558) (setq calendar-time-zone -360)
calendar.texi(,559) (setq calendar-standard-time-zone-name "CST")
calendar.texi(,560) (setq calendar-daylight-time-zone-name "CDT")
calendar.texi(,561) @end example
calendar.texi(,562) 
calendar.texi(,563) @noindent
calendar.texi(,564) The value of @code{calendar-time-zone} is the number of minutes
calendar.texi(,565) difference between your local standard time and Coordinated Universal
calendar.texi(,566) Time (Greenwich time).  The values of
calendar.texi(,567) @code{calendar-standard-time-zone-name} and
calendar.texi(,568) @code{calendar-daylight-time-zone-name} are the abbreviations used in
calendar.texi(,569) your time zone.  Emacs displays the times of sunrise and sunset
calendar.texi(,570) @emph{corrected for daylight savings time}.  @xref{Daylight Savings},
calendar.texi(,571) for how daylight savings time is determined.
calendar.texi(,572) 
calendar.texi(,573)   As a user, you might find it convenient to set the calendar location
calendar.texi(,574) variables for your usual physical location in your init file.  And when
calendar.texi(,575) you install Emacs on a machine, you can create a @file{default.el} file
calendar.texi(,576) which sets them properly for the typical location of most users of that
calendar.texi(,577) machine.  @xref{Init File}.
calendar.texi(,578) 
calendar.texi(,579) @node Lunar Phases, Other Calendars, Sunrise/Sunset, Calendar/Diary
calendar.texi(,580) @subsection Phases of the Moon
calendar.texi(,581) @cindex phases of the moon
calendar.texi(,582) @cindex moon, phases of
calendar.texi(,583) 
calendar.texi(,584)   These calendar commands display the dates and times of the phases of
calendar.texi(,585) the moon (new moon, first quarter, full moon, last quarter).  This
calendar.texi(,586) feature is useful for debugging problems that ``depend on the phase of
calendar.texi(,587) the moon.''
calendar.texi(,588) 
calendar.texi(,589) @table @kbd
calendar.texi(,590) @item M
calendar.texi(,591) Display the dates and times for all the quarters of the moon for the
calendar.texi(,592) three-month period shown (@code{calendar-phases-of-moon}).
calendar.texi(,593) @item M-x phases-of-moon
calendar.texi(,594) Display dates and times of the quarters of the moon for three months around
calendar.texi(,595) today's date.
calendar.texi(,596) @end table
calendar.texi(,597) 
calendar.texi(,598) @kindex M @r{(Calendar mode)}
calendar.texi(,599) @findex calendar-phases-of-moon
calendar.texi(,600)   Within the calendar, use the @kbd{M} command to display a separate
calendar.texi(,601) buffer of the phases of the moon for the current three-month range.  The
calendar.texi(,602) dates and times listed are accurate to within a few minutes.
calendar.texi(,603) 
calendar.texi(,604) @findex phases-of-moon
calendar.texi(,605)   Outside the calendar, use the command @kbd{M-x phases-of-moon} to
calendar.texi(,606) display the list of the phases of the moon for the current month and the
calendar.texi(,607) preceding and succeeding months.  For information about a different
calendar.texi(,608) month, use @kbd{C-u M-x phases-of-moon}, which prompts for the month and
calendar.texi(,609) year.
calendar.texi(,610)  
calendar.texi(,611)   The dates and times given for the phases of the moon are given in
calendar.texi(,612) local time (corrected for daylight savings, when appropriate); but if
calendar.texi(,613) the variable @code{calendar-time-zone} is void, Coordinated Universal
calendar.texi(,614) Time (the Greenwich time zone) is used.  @xref{Daylight Savings}.
calendar.texi(,615) 
calendar.texi(,616) @node Other Calendars, Calendar Systems, Lunar Phases, Calendar/Diary
calendar.texi(,617) @subsection  Conversion To and From Other Calendars
calendar.texi(,618) 
calendar.texi(,619) @cindex Gregorian calendar
calendar.texi(,620)   The Emacs calendar displayed is @emph{always} the Gregorian calendar,
calendar.texi(,621) sometimes called the ``new style'' calendar, which is used in most of
calendar.texi(,622) the world today.  However, this calendar did not exist before the
calendar.texi(,623) sixteenth century and was not widely used before the eighteenth century;
calendar.texi(,624) it did not fully displace the Julian calendar and gain universal
calendar.texi(,625) acceptance until the early twentieth century.  The Emacs calendar can
calendar.texi(,626) display any month since January, year 1 of the current era, but the
calendar.texi(,627) calendar displayed is the Gregorian, even for a date at which the
calendar.texi(,628) Gregorian calendar did not exist.
calendar.texi(,629) 
calendar.texi(,630)   While Emacs cannot display other calendars, it can convert dates to
calendar.texi(,631) and from several other calendars.
calendar.texi(,632) 
calendar.texi(,633) @menu
calendar.texi(,634) * Calendar Systems::      The calendars Emacs understands
calendar.texi(,635)                             (aside from Gregorian).
calendar.texi(,636) * To Other Calendar::     Converting the selected date to various calendars.
calendar.texi(,637) * From Other Calendar::   Moving to a date specified in another calendar.
calendar.texi(,638) * Mayan Calendar::        Moving to a date specified in a Mayan calendar.
calendar.texi(,639) @end menu
calendar.texi(,640) 
calendar.texi(,641)   If you are interested in these calendars, you can convert dates one at a
calendar.texi(,642) time.  Put point on the desired date of the Gregorian calendar and press the
calendar.texi(,643) appropriate keys.  The @kbd{p} is a mnemonic for ``print'' since Emacs
calendar.texi(,644) ``prints' the equivalent date in the echo area.
calendar.texi(,645) @node Calendar Systems, To Other Calendar, Other Calendars, Other Calendars
calendar.texi(,646) @section Supported Calendar Systems
calendar.texi(,647) 
calendar.texi(,648) @cindex ISO commercial calendar
calendar.texi(,649)   The ISO commercial calendar is used largely in Europe.
calendar.texi(,650) 
calendar.texi(,651) @cindex Julian calendar
calendar.texi(,652)   The Julian calendar, named after Julius Caesar, was the one used in Europe
calendar.texi(,653) throughout medieval times, and in many countries up until the nineteenth
calendar.texi(,654) century.
calendar.texi(,655) 
calendar.texi(,656) @cindex Julian day numbers
calendar.texi(,657) @cindex astronomical day numbers
calendar.texi(,658)   Astronomers use a simple counting of days elapsed since noon, Monday,
calendar.texi(,659) January 1, 4713 B.C. on the Julian calendar.  The number of days elapsed
calendar.texi(,660) is called the @emph{Julian day number} or the @emph{Astronomical day number}.
calendar.texi(,661) 
calendar.texi(,662) @cindex Hebrew calendar
calendar.texi(,663)   The Hebrew calendar is used by tradition in the Jewish religion.  The
calendar.texi(,664) Emacs calendar program uses the Hebrew calendar to determine the dates
calendar.texi(,665) of Jewish holidays.  Hebrew calendar dates begin and end at sunset.
calendar.texi(,666) 
calendar.texi(,667) @cindex Islamic calendar
calendar.texi(,668)   The Islamic calendar is used in many predominantly Islamic countries.
calendar.texi(,669) Emacs uses it to determine the dates of Islamic holidays.  There is no
calendar.texi(,670) universal agreement in the Islamic world about the calendar; Emacs uses
calendar.texi(,671) a widely accepted version, but the precise dates of Islamic holidays
calendar.texi(,672) often depend on proclamation by religious authorities, not on
calendar.texi(,673) calculations.  As a consequence, the actual dates of observance can vary
calendar.texi(,674) slightly from the dates computed by Emacs.  Islamic calendar dates begin
calendar.texi(,675) and end at sunset.
calendar.texi(,676) 
calendar.texi(,677) @cindex French Revolutionary calendar
calendar.texi(,678)   The French Revolutionary calendar was created by the Jacobins after the 1789
calendar.texi(,679) revolution, to represent a more secular and nature-based view of the annual
calendar.texi(,680) cycle, and to install a 10-day week in a rationalization measure similar to
calendar.texi(,681) the metric system.  The French government officially abandoned this
calendar.texi(,682) calendar at the end of 1805.
calendar.texi(,683) 
calendar.texi(,684) @cindex Mayan calendar
calendar.texi(,685)   The Maya of Central America used three separate, overlapping calendar
calendar.texi(,686) systems, the @emph{long count}, the @emph{tzolkin}, and the @emph{haab}.
calendar.texi(,687) Emacs knows about all three of these calendars.  Experts dispute the
calendar.texi(,688) exact correlation between the Mayan calendar and our calendar; Emacs uses the
calendar.texi(,689) Goodman-Martinez-Thompson correlation in its calculations.
calendar.texi(,690) 
calendar.texi(,691) @cindex Coptic calendar
calendar.texi(,692) @cindex Ethiopic calendar
calendar.texi(,693)   The Copts use a calendar based on the ancient Egyptian solar calendar.
calendar.texi(,694) Their calendar consists of twelve 30-day months followed by an extra
calendar.texi(,695) five-day period.  Once every fourth year they add a leap day to this
calendar.texi(,696) extra period to make it six days.  The Ethiopic calendar is identical in
calendar.texi(,697) structure, but has different year numbers and month names.
calendar.texi(,698) 
calendar.texi(,699) @cindex Persian calendar
calendar.texi(,700)   The Persians use a solar calendar based on a design of Omar Khayyam.
calendar.texi(,701) Their calendar consists of twelve months of which the first six have 31
calendar.texi(,702) days, the next five have 30 days, and the last has 29 in ordinary years
calendar.texi(,703) and 30 in leap years.  Leap years occur in a complicated pattern every
calendar.texi(,704) four or five years.
calendar.texi(,705) 
calendar.texi(,706) @cindex Chinese calendar
calendar.texi(,707)   The Chinese calendar is a complicated system of lunar months arranged
calendar.texi(,708) into solar years.  The years go in cycles of sixty, each year containing
calendar.texi(,709) either twelve months in an ordinary year or thirteen months in a leap
calendar.texi(,710) year; each month has either 29 or 30 days.  Years, ordinary months, and
calendar.texi(,711) days are named by combining one of ten ``celestial stems'' with one of
calendar.texi(,712) twelve ``terrestrial branches'' for a total of sixty names that are
calendar.texi(,713) repeated in a cycle of sixty.
calendar.texi(,714) 
calendar.texi(,715) @node To Other Calendar, From Other Calendar, Calendar Systems, Other Calendars
calendar.texi(,716) @section Converting To Other Calendars
calendar.texi(,717) 
calendar.texi(,718)   The following commands describe the selected date (the date at point)
calendar.texi(,719) in various other calendar systems:
calendar.texi(,720) 
calendar.texi(,721) @table @kbd
calendar.texi(,722) @item Button2  Other Calendars
calendar.texi(,723) Display the date that you click on, expressed in various other calendars.
calendar.texi(,724) @kindex p @r{(Calendar mode)}
calendar.texi(,725) @findex calendar-print-iso-date
calendar.texi(,726) @item p c
calendar.texi(,727) Display ISO commercial calendar equivalent for selected day
calendar.texi(,728) (@code{calendar-print-iso-date}).
calendar.texi(,729) @findex calendar-print-julian-date
calendar.texi(,730) @item p j
calendar.texi(,731) Display Julian date for selected day (@code{calendar-print-julian-date}).
calendar.texi(,732) @findex calendar-print-astro-day-number
calendar.texi(,733) @item p a
calendar.texi(,734) Display astronomical (Julian) day number for selected day
calendar.texi(,735) (@code{calendar-print-astro-day-number}).
calendar.texi(,736) @findex calendar-print-hebrew-date
calendar.texi(,737) @item p h
calendar.texi(,738) Display Hebrew date for selected day (@code{calendar-print-hebrew-date}).
calendar.texi(,739) @findex calendar-print-islamic-date
calendar.texi(,740) @item p i
calendar.texi(,741) Display Islamic date for selected day (@code{calendar-print-islamic-date}).
calendar.texi(,742) @findex calendar-print-french-date
calendar.texi(,743) @item p f
calendar.texi(,744) Display French Revolutionary date for selected day
calendar.texi(,745) (@code{calendar-print-french-date}).
calendar.texi(,746) @findex calendar-print-chinese-date
calendar.texi(,747) @item p C
calendar.texi(,748) Display Chinese date for selected day
calendar.texi(,749) (@code{calendar-print-chinese-date}).
calendar.texi(,750) @findex calendar-print-coptic-date
calendar.texi(,751) @item p k
calendar.texi(,752) Display Coptic date for selected day
calendar.texi(,753) (@code{calendar-print-coptic-date}).
calendar.texi(,754) @findex calendar-print-ethiopic-date
calendar.texi(,755) @item p e
calendar.texi(,756) Display Ethiopic date for selected day
calendar.texi(,757) (@code{calendar-print-ethiopic-date}).
calendar.texi(,758) @findex calendar-print-persian-date
calendar.texi(,759) @item p p
calendar.texi(,760) Display Persian date for selected day
calendar.texi(,761) (@code{calendar-print-persian-date}).
calendar.texi(,762) @findex calendar-print-mayan-date
calendar.texi(,763) @item p m
calendar.texi(,764) Display Mayan date for selected day (@code{calendar-print-mayan-date}).
calendar.texi(,765) @end table
calendar.texi(,766) 
calendar.texi(,767)   If you are using X, the easiest way to translate a date into other
calendar.texi(,768) calendars is to click on it with @kbd{Button2}, then choose @kbd{Other
calendar.texi(,769) Calendars} from the menu that appears.  This displays the equivalent
calendar.texi(,770) forms of the date in all the calendars Emacs understands, in the form of
calendar.texi(,771) a menu.  (Choosing an alternative from this menu doesn't actually do
calendar.texi(,772) anything---the menu is used only for display.)
calendar.texi(,773) 
calendar.texi(,774)   Put point on the desired date of the Gregorian calendar, then type the
calendar.texi(,775) appropriate keys.  The @kbd{p} is a mnemonic for ``print'' since Emacs
calendar.texi(,776) ``prints'' the equivalent date in the echo area.
calendar.texi(,777) 
calendar.texi(,778) @node From Other Calendar, Mayan Calendar, To Other Calendar, Other Calendars
calendar.texi(,779) @section Converting From Other Calendars
calendar.texi(,780) 
calendar.texi(,781)   You can use the other supported calendars to specify a date to move
calendar.texi(,782) to.  This section describes the commands for doing this using calendars
calendar.texi(,783) other than Mayan; for the Mayan calendar, see the following section.
calendar.texi(,784) 
calendar.texi(,785) @kindex g @var{char} @r{(Calendar mode)}
calendar.texi(,786) @findex calendar-goto-iso-date
calendar.texi(,787) @findex calendar-goto-julian-date
calendar.texi(,788) @findex calendar-goto-astro-day-number
calendar.texi(,789) @findex calendar-goto-hebrew-date
calendar.texi(,790) @findex calendar-goto-islamic-date
calendar.texi(,791) @findex calendar-goto-french-date
calendar.texi(,792) @findex calendar-goto-chinese-date
calendar.texi(,793) @findex calendar-goto-persian-date
calendar.texi(,794) @findex calendar-goto-coptic-date
calendar.texi(,795) @findex calendar-goto-ethiopic-date
calendar.texi(,796) @table @kbd
calendar.texi(,797) @item g c
calendar.texi(,798) Move to a date specified in the ISO commercial calendar
calendar.texi(,799) (@code{calendar-goto-iso-date}).
calendar.texi(,800) @item g j
calendar.texi(,801) Move to a date specified in the Julian calendar
calendar.texi(,802) (@code{calendar-goto-julian-date}).
calendar.texi(,803) @item g a
calendar.texi(,804) Move to a date specified in astronomical (Julian) day number
calendar.texi(,805) (@code{calendar-goto-astro-day-number}).
calendar.texi(,806) @item g h
calendar.texi(,807) Move to a date specified in the Hebrew calendar
calendar.texi(,808) (@code{calendar-goto-hebrew-date}).
calendar.texi(,809) @item g i
calendar.texi(,810) Move to a date specified in the Islamic calendar
calendar.texi(,811) (@code{calendar-goto-islamic-date}).
calendar.texi(,812) @item g f
calendar.texi(,813) Move to a date specified in the French Revolutionary calendar
calendar.texi(,814) (@code{calendar-goto-french-date}).
calendar.texi(,815) @item g C
calendar.texi(,816) Move to a date specified in the Chinese calendar
calendar.texi(,817) (@code{calendar-goto-chinese-date}).
calendar.texi(,818) @item g p
calendar.texi(,819) Move to a date specified in the Persian calendar
calendar.texi(,820) (@code{calendar-goto-persian-date}).
calendar.texi(,821) @item g k
calendar.texi(,822) Move to a date specified in the Coptic calendar
calendar.texi(,823) (@code{calendar-goto-coptic-date}).
calendar.texi(,824) @item g e
calendar.texi(,825) Move to a date specified in the Ethiopic calendar
calendar.texi(,826) (@code{calendar-goto-ethiopic-date}).
calendar.texi(,827) @end table
calendar.texi(,828) 
calendar.texi(,829)   These commands ask you for a date on the other calendar, move point to
calendar.texi(,830) the Gregorian calendar date equivalent to that date, and display the
calendar.texi(,831) other calendar's date in the echo area.  Emacs uses strict completion
calendar.texi(,832) (@pxref{Completion}) whenever it asks you to type a month name, so you
calendar.texi(,833) don't have to worry about the spelling of Hebrew, Islamic, or French names.
calendar.texi(,834) 
calendar.texi(,835) @findex list-yahrzeit-dates
calendar.texi(,836) @cindex yahrzeits
calendar.texi(,837)   One common question concerning the Hebrew calendar is the computation
calendar.texi(,838) of the anniversary of a date of death, called a ``yahrzeit.''  The Emacs
calendar.texi(,839) calendar includes a facility for such calculations.  If you are in the
calendar.texi(,840) calendar, the command @kbd{M-x list-yahrzeit-dates} asks you for a
calendar.texi(,841) range of years and then displays a list of the yahrzeit dates for those
calendar.texi(,842) years for the date given by point.  If you are not in the calendar,
calendar.texi(,843) this command first asks you for the date of death and the range of
calendar.texi(,844) years, and then displays the list of yahrzeit dates.
calendar.texi(,845) 
calendar.texi(,846) @node Mayan Calendar, Diary ,From Other Calendar ,Other Calendars
calendar.texi(,847) @subsection Converting from the Mayan Calendar
calendar.texi(,848) 
calendar.texi(,849)   Here are the commands to select dates based on the Mayan calendar:
calendar.texi(,850) 
calendar.texi(,851) @table @kbd
calendar.texi(,852) @item g m l
calendar.texi(,853) Move to a date specified by the long count calendar
calendar.texi(,854) (@code{calendar-goto-mayan-long-count-date}).
calendar.texi(,855) @item g m n t
calendar.texi(,856) Move to the next occurrence of a place in the
calendar.texi(,857) tzolkin calendar (@code{calendar-next-tzolkin-date}).
calendar.texi(,858) @item g m p t
calendar.texi(,859) Move to the previous occurrence of a place in the
calendar.texi(,860) tzolkin calendar (@code{calendar-previous-tzolkin-date}).
calendar.texi(,861) @item g m n h
calendar.texi(,862) Move to the next occurrence of a place in the
calendar.texi(,863) haab calendar (@code{calendar-next-haab-date}).
calendar.texi(,864) @item g m p h
calendar.texi(,865) Move to the previous occurrence of a place in the
calendar.texi(,866) haab calendar (@code{calendar-previous-haab-date}).
calendar.texi(,867) @item g m n c
calendar.texi(,868) Move to the next occurrence of a place in the
calendar.texi(,869) calendar round (@code{calendar-next-calendar-round-date}).
calendar.texi(,870) @item g m p c
calendar.texi(,871) Move to the previous occurrence of a place in the
calendar.texi(,872) calendar round (@code{calendar-previous-calendar-round-date}).
calendar.texi(,873) @end table
calendar.texi(,874) 
calendar.texi(,875) @cindex Mayan long count
calendar.texi(,876)   To understand these commands, you need to understand the Mayan calendars.
calendar.texi(,877) The @dfn{long count} is a counting of days with these units:
calendar.texi(,878)  
calendar.texi(,879) @display
calendar.texi(,880) 1 kin = 1 day@ @ @ 1 uinal = 20 kin@ @ @ 1 tun = 18 uinal
calendar.texi(,881) 1 katun = 20 tun@ @ @ 1 baktun = 20 katun
calendar.texi(,882) @end display
calendar.texi(,883) 
calendar.texi(,884) @kindex g m l @r{(Calendar mode)}
calendar.texi(,885) @findex calendar-goto-mayan-long-count-date
calendar.texi(,886) @noindent
calendar.texi(,887) Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
calendar.texi(,888) tun, 16 uinal, and 6 kin.  The Emacs calendar can handle Mayan long
calendar.texi(,889) count dates as early as 7.17.18.13.1, but no earlier.  When you use the
calendar.texi(,890) @kbd{g m l} command, type the Mayan long count date with the baktun,
calendar.texi(,891) katun, tun, uinal, and kin separated by periods.
calendar.texi(,892) 
calendar.texi(,893) @findex calendar-previous-tzolkin-date
calendar.texi(,894) @findex calendar-next-tzolkin-date
calendar.texi(,895) @cindex Mayan tzolkin calendar
calendar.texi(,896)   The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
calendar.texi(,897) independent cycles of 13 and 20 days.  Since this cycle repeats
calendar.texi(,898) endlessly, Emacs provides commands to move backward and forward to the
calendar.texi(,899) previous or next point in the cycle.  Type @kbd{g m p t} to go to the
calendar.texi(,900) previous tzolkin date; Emacs asks you for a tzolkin date and moves point
calendar.texi(,901) to the previous occurrence of that date.  Similarly, type @kbd{g m n t}
calendar.texi(,902) to go to the next occurrence of a tzolkin date.
calendar.texi(,903) 
calendar.texi(,904) @findex calendar-previous-haab-date
calendar.texi(,905) @findex calendar-next-haab-date
calendar.texi(,906) @cindex Mayan haab calendar
calendar.texi(,907)   The Mayan haab calendar is a cycle of 365 days arranged as 18 months
calendar.texi(,908) of 20 days each, followed a 5-day monthless period.  Like the tzolkin
calendar.texi(,909) cycle, this cycle repeats endlessly, and there are commands to move
calendar.texi(,910) backward and forward to the previous or next point in the cycle.  Type
calendar.texi(,911) @kbd{g m p h} to go to the previous haab date; Emacs asks you for a haab
calendar.texi(,912) date and moves point to the previous occurrence of that date.
calendar.texi(,913) Similarly, type @kbd{g m n h} to go to the next occurrence of a haab
calendar.texi(,914) date.
calendar.texi(,915) 
calendar.texi(,916) @c This is omitted because it is too long for smallbook format.
calendar.texi(,917) @c @findex calendar-previous-calendar-round-date
calendar.texi(,918) @findex calendar-next-calendar-round-date
calendar.texi(,919) @cindex Mayan calendar round
calendar.texi(,920)   The Maya also used the combination of the tzolkin date and the haab
calendar.texi(,921) date.  This combination is a cycle of about 52 years called a
calendar.texi(,922) @emph{calendar round}.  If you type @kbd{g m p c}, Emacs asks you for
calendar.texi(,923) both a haab and a tzolkin date and then moves point to the previous
calendar.texi(,924) occurrence of that combination.  Use @kbd{g m n c} to move point to the
calendar.texi(,925) next occurrence of a combination.  These commands signal an error if the
calendar.texi(,926) haab/tzolkin date combination you have typed is impossible.
calendar.texi(,927) 
calendar.texi(,928)   Emacs uses strict completion (@pxref{Completion}) whenever it
calendar.texi(,929) asks you to type a Mayan name, so you don't have to worry about
calendar.texi(,930) spelling.
calendar.texi(,931) 
calendar.texi(,932) @node Diary, Calendar Customization, Mayan Calendar, Calendar/Diary
calendar.texi(,933) @subsection The Diary
calendar.texi(,934) @cindex diary
calendar.texi(,935) 
calendar.texi(,936)   The Emacs diary keeps track of appointments or other events on a daily
calendar.texi(,937) basis, in conjunction with the calendar.  To use the diary feature, you
calendar.texi(,938) must first create a @dfn{diary file} containing a list of events and
calendar.texi(,939) their dates.  Then Emacs can automatically pick out and display the
calendar.texi(,940) events for today, for the immediate future, or for any specified
calendar.texi(,941) date.
calendar.texi(,942) 
calendar.texi(,943)   By default, Emacs uses @file{~/diary} as the diary file.  This is the
calendar.texi(,944) same file that the @code{calendar} utility uses.  A sample
calendar.texi(,945) @file{~/diary} file is:
calendar.texi(,946) 
calendar.texi(,947) @example
calendar.texi(,948) 12/22/1988 Twentieth wedding anniversary!!
calendar.texi(,949) &1/1. Happy New Year!
calendar.texi(,950) 10/22 Ruth's birthday.
calendar.texi(,951) * 21, *: Payday
calendar.texi(,952) Tuesday--weekly meeting with grad students at 10am
calendar.texi(,953)          Supowit, Shen, Bitner, and Kapoor to attend.
calendar.texi(,954) 1/13/89 Friday the thirteenth!!
calendar.texi(,955) &thu 4pm squash game with Lloyd.
calendar.texi(,956) mar 16 Dad's birthday
calendar.texi(,957) April 15, 1989 Income tax due.
calendar.texi(,958) &* 15 time cards due.
calendar.texi(,959) @end example
calendar.texi(,960) 
calendar.texi(,961) @noindent
calendar.texi(,962) This example uses extra spaces to align the event descriptions of most
calendar.texi(,963) of the entries.  Such formatting is purely a matter of taste.
calendar.texi(,964) 
calendar.texi(,965)   Although you probably will start by creating a diary manually, Emacs
calendar.texi(,966) provides a number of commands to let you view, add, and change diary
calendar.texi(,967) entries.  You can also share diary entries with other users
calendar.texi(,968) (@pxref{Included Diary Files}).
calendar.texi(,969) 
calendar.texi(,970) @menu
calendar.texi(,971) * Diary Commands::         Viewing diary entries and associated calendar dates.
calendar.texi(,972) * Format of Diary File::   Entering events in your diary.
calendar.texi(,973) * Date Formats::           Various ways you can specify dates.
calendar.texi(,974) * Adding to Diary::        Commands to create diary entries.
calendar.texi(,975) * Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.
calendar.texi(,976) @end menu
calendar.texi(,977) 
calendar.texi(,978) @node Diary Commands, Format of Diary File, Diary, Diary
calendar.texi(,979) @subsection Commands Displaying Diary Entries
calendar.texi(,980) 
calendar.texi(,981)   Once you have created a @file{~/diary} file, you can use the calendar
calendar.texi(,982) to view it.  You can also view today's events outside of Calendar mode.
calendar.texi(,983) 
calendar.texi(,984) @table @kbd
calendar.texi(,985) @item d
calendar.texi(,986) Display all diary entries for the selected date
calendar.texi(,987) (@code{view-diary-entries}).
calendar.texi(,988) @item Button2 Diary
calendar.texi(,989) Display all diary entries for the date you click on.
calendar.texi(,990) @item s
calendar.texi(,991) Display the entire diary file (@code{show-all-diary-entries}).
calendar.texi(,992) @item m
calendar.texi(,993) Mark all visible dates that have diary entries
calendar.texi(,994) (@code{mark-diary-entries}).
calendar.texi(,995) @item u
calendar.texi(,996) Unmark the calendar window (@code{calendar-unmark}).
calendar.texi(,997) @item M-x print-diary-entries
calendar.texi(,998) Print hard copy of the diary display as it appears.
calendar.texi(,999) @item M-x diary
calendar.texi(,1000) Display all diary entries for today's date.
calendar.texi(,1001) @item M-x diary-mail-entries
calendar.texi(,1002) Mail yourself email reminders about upcoming diary entries.
calendar.texi(,1003) @end table
calendar.texi(,1004) 
calendar.texi(,1005) @kindex d @r{(Calendar mode)}
calendar.texi(,1006) @findex view-diary-entries
calendar.texi(,1007)   Displaying the diary entries with @kbd{d} shows in a separate window
calendar.texi(,1008) the diary entries for the selected date in the calendar.  The mode line
calendar.texi(,1009) of the new window shows the date of the diary entries and any holidays
calendar.texi(,1010) that fall on that date.  If you specify a numeric argument with @kbd{d},
calendar.texi(,1011) it shows all the diary entries for that many successive days.  Thus,
calendar.texi(,1012) @kbd{2 d} displays all the entries for the selected date and for the
calendar.texi(,1013) following day.
calendar.texi(,1014) 
calendar.texi(,1015)   Another way to display the diary entries for a date is to click
calendar.texi(,1016) @kbd{Button2} on the date, and then choose @kbd{Diary} from the menu
calendar.texi(,1017) that appears.
calendar.texi(,1018) 
calendar.texi(,1019) @kindex m @r{(Calendar mode)}
calendar.texi(,1020) @findex mark-diary-entries
calendar.texi(,1021) @kindex u @r{(Calendar mode)}
calendar.texi(,1022) @findex calendar-unmark
calendar.texi(,1023)   To get a broader view of which days are mentioned in the diary, use
calendar.texi(,1024) the @kbd{m} command.  This displays the dates that have diary entries
calendar.texi(,1025) in a different face (or places a @samp{+} after these dates, if
calendar.texi(,1026) display with multiple faces is not available).  The command applies both
calendar.texi(,1027) to the currently visible months and to other months that subsequently
calendar.texi(,1028) become visible by scrolling.  To turn marking off and erase the current
calendar.texi(,1029) marks, type @kbd{u}, which also turns off holiday marks
calendar.texi(,1030) (@pxref{Holidays}).
calendar.texi(,1031) 
calendar.texi(,1032) @kindex s @r{(Calendar mode)}
calendar.texi(,1033) @findex show-all-diary-entries
calendar.texi(,1034)   To see the full diary file, rather than just some of the entries, use
calendar.texi(,1035) the @kbd{s} command.
calendar.texi(,1036) 
calendar.texi(,1037)   Display of selected diary entries uses the selective display feature
calendar.texi(,1038) to hide entries that don't apply.
calendar.texi(,1039) 
calendar.texi(,1040) @findex print-diary-entries
calendar.texi(,1041)   The diary buffer as you see it is an illusion, so simply printing the
calendar.texi(,1042) buffer does not print what you see on your screen.  There is a special
calendar.texi(,1043) command to print hard copy of the diary buffer @emph{as it appears};
calendar.texi(,1044) this command is @kbd{M-x print-diary-entries}.  It sends the data
calendar.texi(,1045) directly to the printer.  You can customize it like @code{lpr-region}
calendar.texi(,1046) (@pxref{Hardcopy}).
calendar.texi(,1047) 
calendar.texi(,1048) @findex diary
calendar.texi(,1049)   The command @kbd{M-x diary} displays the diary entries for the current
calendar.texi(,1050) date, independently of the calendar display, and optionally for the next
calendar.texi(,1051) few days as well; the variable @code{number-of-diary-entries} specifies
calendar.texi(,1052) how many days to include (@pxref{Customization}).
calendar.texi(,1053) 
calendar.texi(,1054)   If you put @code{(diary)} in your init file, this
calendar.texi(,1055) automatically displays a window with the day's diary entries, when you
calendar.texi(,1056) enter Emacs.  @xref{Init File}.  The mode line of the displayed window
calendar.texi(,1057) shows the date and any holidays that fall on that date.
calendar.texi(,1058) 
calendar.texi(,1059) @findex diary-mail-entries
calendar.texi(,1060) @vindex diary-mail-days
calendar.texi(,1061)   Many users like to receive notice of events in their diary as email.
calendar.texi(,1062) To send such mail to yourself, use the command @kbd{M-x
calendar.texi(,1063) diary-mail-entries}.  A prefix argument specifies how many days
calendar.texi(,1064) (starting with today) to check; otherwise, the variable
calendar.texi(,1065) @code{diary-mail-days} says how many days.
calendar.texi(,1066) 
calendar.texi(,1067) @node Format of Diary File, Date Formats, Diary Commands, Diary
calendar.texi(,1068) @subsection The Diary File
calendar.texi(,1069) @cindex diary file
calendar.texi(,1070) 
calendar.texi(,1071) @vindex diary-file
calendar.texi(,1072)   Your @dfn{diary file} is a file that records events associated with
calendar.texi(,1073) particular dates.  The name of the diary file is specified by the
calendar.texi(,1074) variable @code{diary-file}; @file{~/diary} is the default.  The
calendar.texi(,1075) @code{calendar} utility program supports a subset of the format allowed
calendar.texi(,1076) by the Emacs diary facilities, so you can use that utility to view the
calendar.texi(,1077) diary file, with reasonable results aside from the entries it cannot
calendar.texi(,1078) understand.
calendar.texi(,1079) 
calendar.texi(,1080)   Each entry in the diary file describes one event and consists of one
calendar.texi(,1081) or more lines.  An entry always begins with a date specification at the
calendar.texi(,1082) left margin.  The rest of the entry is simply text to describe the
calendar.texi(,1083) event.  If the entry has more than one line, then the lines after the
calendar.texi(,1084) first must begin with whitespace to indicate they continue a previous
calendar.texi(,1085) entry.  Lines that do not begin with valid dates and do not continue a
calendar.texi(,1086) preceding entry are ignored.
calendar.texi(,1087) 
calendar.texi(,1088)   You can inhibit the marking of certain diary entries in the calendar
calendar.texi(,1089) window; to do this, insert an ampersand (@samp{&}) at the beginning of
calendar.texi(,1090) the entry, before the date.  This has no effect on display of the entry
calendar.texi(,1091) in the diary window; it affects only marks on dates in the calendar
calendar.texi(,1092) window.  Nonmarking entries are especially useful for generic entries
calendar.texi(,1093) that would otherwise mark many different dates.
calendar.texi(,1094) 
calendar.texi(,1095)   If the first line of a diary entry consists only of the date or day
calendar.texi(,1096) name with no following blanks or punctuation, then the diary window
calendar.texi(,1097) display doesn't include that line; only the continuation lines appear.
calendar.texi(,1098) For example, this entry:
calendar.texi(,1099) 
calendar.texi(,1100) @example
calendar.texi(,1101) 02/11/1989
calendar.texi(,1102)       Bill B. visits Princeton today
calendar.texi(,1103)       2pm Cognitive Studies Committee meeting
calendar.texi(,1104)       2:30-5:30 Liz at Lawrenceville
calendar.texi(,1105)       4:00pm Dentist appt
calendar.texi(,1106)       7:30pm Dinner at George's
calendar.texi(,1107)       8:00-10:00pm concert
calendar.texi(,1108) @end example
calendar.texi(,1109) 
calendar.texi(,1110) @noindent
calendar.texi(,1111) appears in the diary window without the date line at the beginning.
calendar.texi(,1112) This style of entry looks neater when you display just a single day's
calendar.texi(,1113) entries, but can cause confusion if you ask for more than one day's
calendar.texi(,1114) entries.
calendar.texi(,1115) 
calendar.texi(,1116)   You can edit the diary entries as they appear in the window, but it is
calendar.texi(,1117) important to remember that the buffer displayed contains the @emph{entire}
calendar.texi(,1118) diary file, with portions of it concealed from view.  This means, for
calendar.texi(,1119) instance, that the @kbd{C-f} (@code{forward-char}) command can put point
calendar.texi(,1120) at what appears to be the end of the line, but what is in reality the
calendar.texi(,1121) middle of some concealed line.  
calendar.texi(,1122) 
calendar.texi(,1123)   @emph{Be careful when editing the diary entries!}  Inserting
calendar.texi(,1124) additional lines or adding/deleting characters in the middle of a
calendar.texi(,1125) visible line cannot cause problems, but editing at the end of a line may
calendar.texi(,1126) not do what you expect.  Deleting a line may delete other invisible
calendar.texi(,1127) entries that follow it.  Before editing the diary, it is best to display
calendar.texi(,1128) the entire file with @kbd{s} (@code{show-all-diary-entries}).
calendar.texi(,1129) 
calendar.texi(,1130) @node Date Formats,Adding to Diary ,Format of Diary File, Diary
calendar.texi(,1131) @subsection Date Formats
calendar.texi(,1132) 
calendar.texi(,1133)   Here are some sample diary entries, illustrating different ways of
calendar.texi(,1134) formatting a date.  The examples all show dates in American order
calendar.texi(,1135) (month, day, year), but Calendar mode supports European order (day,
calendar.texi(,1136) month, year) as an option.
calendar.texi(,1137) 
calendar.texi(,1138) @example
calendar.texi(,1139) 4/20/93  Switch-over to new tabulation system
calendar.texi(,1140) apr. 25  Start tabulating annual results
calendar.texi(,1141) 4/30  Results for April are due
calendar.texi(,1142) */25  Monthly cycle finishes
calendar.texi(,1143) Friday  Don't leave without backing up files
calendar.texi(,1144) @end example
calendar.texi(,1145) 
calendar.texi(,1146)   The first entry appears only once, on April 20, 1993.  The second and
calendar.texi(,1147) third appear every year on the specified dates, and the fourth uses a
calendar.texi(,1148) wildcard (asterisk) for the month, so it appears on the 25th of every
calendar.texi(,1149) month.  The final entry appears every week on Friday.
calendar.texi(,1150) 
calendar.texi(,1151)   You can use just numbers to express a date, as in
calendar.texi(,1152) @samp{@var{month}/@var{day}} or @samp{@var{month}/@var{day}/@var{year}}.
calendar.texi(,1153) This must be followed by a nondigit.  In the date itself, @var{month}
calendar.texi(,1154) and @var{day} are numbers of one or two digits.  The optional @var{year}
calendar.texi(,1155) is also a number, and may be abbreviated to the last two digits; that
calendar.texi(,1156) is, you can use @samp{11/12/1989} or @samp{11/12/89}.
calendar.texi(,1157) 
calendar.texi(,1158)   Dates can also have the form @samp{@var{monthname} @var{day}} or
calendar.texi(,1159) @samp{@var{monthname} @var{day}, @var{year}}, where the month's name can
calendar.texi(,1160) be spelled in full or abbreviated to three characters (with or without a
calendar.texi(,1161) period).  Case is not significant.
calendar.texi(,1162) 
calendar.texi(,1163)   A date may be @dfn{generic}; that is, partially unspecified.  Then the
calendar.texi(,1164) entry applies to all dates that match the specification.  If the date
calendar.texi(,1165) does not contain a year, it is generic and applies to any year.
calendar.texi(,1166) Alternatively, @var{month}, @var{day}, or @var{year} can be a @samp{*};
calendar.texi(,1167) this matches any month, day, or year, respectively.  Thus, a diary entry
calendar.texi(,1168) @samp{3/*/*} matches any day in March of any year; so does @samp{march
calendar.texi(,1169) *}.
calendar.texi(,1170) 
calendar.texi(,1171) @vindex european-calendar-style
calendar.texi(,1172) @findex european-calendar
calendar.texi(,1173) @findex american-calendar
calendar.texi(,1174)   If you prefer the European style of writing dates---in which the day
calendar.texi(,1175) comes before the month---type @kbd{M-x european-calendar} while in the
calendar.texi(,1176) calendar, or set the variable @code{european-calendar-style} to @code{t}
calendar.texi(,1177) @emph{before} using any calendar or diary command.  This mode interprets
calendar.texi(,1178) all dates in the diary in the European manner, and also uses European
calendar.texi(,1179) style for displaying diary dates.  (Note that there is no comma after
calendar.texi(,1180) the @var{monthname} in the European style.)  To go back to the (default)
calendar.texi(,1181) American style of writing dates, type @kbd{M-x american-calendar}.
calendar.texi(,1182)  
calendar.texi(,1183)   You can use the name of a day of the week as a generic date which
calendar.texi(,1184) applies to any date falling on that day of the week.  You can abbreviate
calendar.texi(,1185) the day of the week to three letters (with or without a period) or spell
calendar.texi(,1186) it in full; case is not significant.
calendar.texi(,1187) 
calendar.texi(,1188) @node Adding to Diary, Special Diary Entries, Date Formats, Diary
calendar.texi(,1189) @subsection Commands to Add to the Diary
calendar.texi(,1190) 
calendar.texi(,1191)   While in the calendar, there are several commands to create diary
calendar.texi(,1192) entries:
calendar.texi(,1193) 
calendar.texi(,1194) @table @kbd
calendar.texi(,1195) @item i d
calendar.texi(,1196) Add a diary entry for the selected date (@code{insert-diary-entry}).
calendar.texi(,1197) @item i w
calendar.texi(,1198) Add a diary entry for the selected day of the week (@code{insert-weekly-diary-entry}).
calendar.texi(,1199) @item i m
calendar.texi(,1200) Add a diary entry for the selected day of the month (@code{insert-monthly-diary-entry}).
calendar.texi(,1201) @item i y
calendar.texi(,1202) Add a diary entry for the selected day of the year (@code{insert-yearly-diary-entry}).
calendar.texi(,1203) @end table
calendar.texi(,1204) 
calendar.texi(,1205) @kindex i d @r{(Calendar mode)}
calendar.texi(,1206) @findex insert-diary-entry
calendar.texi(,1207)   You can make a diary entry for a specific date by selecting that date
calendar.texi(,1208) in the calendar window and typing the @kbd{i d} command.  This command
calendar.texi(,1209) displays the end of your diary file in another window and inserts the
calendar.texi(,1210) date; you can then type the rest of the diary entry.
calendar.texi(,1211) 
calendar.texi(,1212) @kindex i w @r{(Calendar mode)}
calendar.texi(,1213) @findex insert-weekly-diary-entry
calendar.texi(,1214) @kindex i m @r{(Calendar mode)}
calendar.texi(,1215) @findex insert-monthly-diary-entry
calendar.texi(,1216) @kindex i y @r{(Calendar mode)}
calendar.texi(,1217) @findex insert-yearly-diary-entry
calendar.texi(,1218)   If you want to make a diary entry that applies to a specific day of
calendar.texi(,1219) the week, select that day of the week (any occurrence will do) and type
calendar.texi(,1220) @kbd{i w}.  This inserts the day-of-week as a generic date; you can then
calendar.texi(,1221) type the rest of the diary entry.  You can make a monthly diary entry in
calendar.texi(,1222) the same fashion.  Select the day of the month, use the @kbd{i m}
calendar.texi(,1223) command, and type rest of the entry.  Similarly, you can insert a yearly
calendar.texi(,1224) diary entry with the @kbd{i y} command.
calendar.texi(,1225) 
calendar.texi(,1226)   All of the above commands make marking diary entries by default.  To
calendar.texi(,1227) make a nonmarking diary entry, give a numeric argument to the command.
calendar.texi(,1228) For example, @kbd{C-u i w} makes a nonmarking weekly diary entry.
calendar.texi(,1229) 
calendar.texi(,1230)   When you modify the diary file, be sure to save the file before
calendar.texi(,1231) exiting Emacs.
calendar.texi(,1232)  
calendar.texi(,1233) @node Special Diary Entries,, Adding to Diary, Diary
calendar.texi(,1234) @subsection Special Diary Entries
calendar.texi(,1235) 
calendar.texi(,1236)   In addition to entries based on calendar dates, the diary file can
calendar.texi(,1237) contain @dfn{sexp entries} for regular events such as anniversaries.
calendar.texi(,1238) These entries are based on Lisp expressions (sexps) that Emacs evaluates
calendar.texi(,1239) as it scans the diary file.  Instead of a date, a sexp entry contains
calendar.texi(,1240) @samp{%%} followed by a Lisp expression which must begin and end with
calendar.texi(,1241) parentheses.  The Lisp expression determines which dates the entry
calendar.texi(,1242) applies to.
calendar.texi(,1243) 
calendar.texi(,1244)   Calendar mode provides commands to insert certain commonly used
calendar.texi(,1245) sexp entries:
calendar.texi(,1246) 
calendar.texi(,1247) @table @kbd
calendar.texi(,1248) @item i a
calendar.texi(,1249) Add an anniversary diary entry for the selected date 
calendar.texi(,1250) (@code{insert-anniversary-diary-entry}).
calendar.texi(,1251) @item i b
calendar.texi(,1252) Add a block diary entry for the current region 
calendar.texi(,1253) (@code{insert-block-diary-entry}).
calendar.texi(,1254) @item i c
calendar.texi(,1255) Add a cyclic diary entry starting at the date 
calendar.texi(,1256) (@code{insert-cyclic-diary-entry}).
calendar.texi(,1257) @end table
calendar.texi(,1258) 
calendar.texi(,1259) @kindex i a @r{(Calendar mode)}
calendar.texi(,1260) @findex insert-anniversary-diary-entry
calendar.texi(,1261)   If you want to make a diary entry that applies to the anniversary of a
calendar.texi(,1262) specific date, move point to that date and use the @kbd{i a} command.
calendar.texi(,1263) This displays the end of your diary file in another window and inserts
calendar.texi(,1264) the anniversary description; you can then type the rest of the diary
calendar.texi(,1265) entry. The entry looks like this:
calendar.texi(,1266) 
calendar.texi(,1267) @findex diary-anniversary
calendar.texi(,1268)   The effect of @kbd{i a} is to add a @code{diary-anniversary} sexp to your
calendar.texi(,1269) diary file.  You can also add one manually, for instance:
calendar.texi(,1270) 
calendar.texi(,1271) @example
calendar.texi(,1272) %%(diary-anniversary 10 31 1948) Arthur's birthday
calendar.texi(,1273) @end example
calendar.texi(,1274) 
calendar.texi(,1275) @noindent
calendar.texi(,1276) This entry applies to October 31 in any year after 1948; @samp{10 31
calendar.texi(,1277) 1948} specifies the date.  (If you are using the European calendar
calendar.texi(,1278) style, the month and day are interchanged.)  The reason this expression
calendar.texi(,1279) requires a beginning year is that advanced diary functions can use it to
calendar.texi(,1280) calculate the number of elapsed years.
calendar.texi(,1281) 
calendar.texi(,1282)   A @dfn{block} diary entry applies to a specified range of consecutive
calendar.texi(,1283) dates.  Here is a block diary entry that applies to all dates from June
calendar.texi(,1284) 24, 1990 through July 10, 1990:
calendar.texi(,1285) 
calendar.texi(,1286) @findex diary-block
calendar.texi(,1287) @example
calendar.texi(,1288) %%(diary-block 6 24 1990 7 10 1990) Vacation
calendar.texi(,1289) @end example
calendar.texi(,1290) 
calendar.texi(,1291) @noindent
calendar.texi(,1292) The @samp{6 24 1990} indicates the starting date and the @samp{7 10 1990}
calendar.texi(,1293) indicates the stopping date.  (Again, if you are using the European calendar
calendar.texi(,1294) style, the month and day are interchanged.)
calendar.texi(,1295) 
calendar.texi(,1296) @kindex i b @r{(Calendar mode)}
calendar.texi(,1297) @findex insert-block-diary-entry
calendar.texi(,1298)   To insert a block entry, place point and the mark on the two
calendar.texi(,1299) dates that begin and end the range, and type @kbd{i b}.  This command
calendar.texi(,1300) displays the end of your diary file in another window and inserts the
calendar.texi(,1301) block description; you can then type the diary entry.
calendar.texi(,1302) 
calendar.texi(,1303) @kindex i c @r{(Calendar mode)}
calendar.texi(,1304) @findex insert-cyclic-diary-entry
calendar.texi(,1305)    @dfn{Cyclic} diary entries repeat after a fixed interval of days.  To
calendar.texi(,1306) create one, select the starting date and use the @kbd{i c} command.  The
calendar.texi(,1307) command prompts for the length of interval, then inserts the entry,
calendar.texi(,1308) which looks like this:
calendar.texi(,1309) 
calendar.texi(,1310) @findex diary-cyclic
calendar.texi(,1311) @example
calendar.texi(,1312) %%(diary-cyclic 50 3 1 1990) Renew medication
calendar.texi(,1313) @end example
calendar.texi(,1314) 
calendar.texi(,1315) @noindent
calendar.texi(,1316) This entry applies to March 1, 1990 and every 50th day following;
calendar.texi(,1317) @samp{3 1 1990} specifies the starting date.  (If you are using the
calendar.texi(,1318) European calendar style, the month and day are interchanged.)
calendar.texi(,1319) 
calendar.texi(,1320)   All three of these commands make marking diary entries.  To insert a
calendar.texi(,1321) nonmarking entry, give a numeric argument to the command.  For example,
calendar.texi(,1322) @kbd{C-u i a} makes a nonmarking anniversary diary entry.
calendar.texi(,1323) 
calendar.texi(,1324)   Marking sexp diary entries in the calendar is @emph{extremely}
calendar.texi(,1325) time-consuming, since every date visible in the calendar window must be
calendar.texi(,1326) individually checked.  So it's a good idea to make sexp diary entries
calendar.texi(,1327) nonmarking (with @samp{&}) when possible.
calendar.texi(,1328) 
calendar.texi(,1329)   Another sophisticated kind of sexp entry, a @dfn{floating} diary entry,
calendar.texi(,1330) specifies a regularly occurring event by offsets specified in days,
calendar.texi(,1331) weeks, and months.  It is comparable to a crontab entry interpreted by
calendar.texi(,1332) the @code{cron} utility.  Here is a nonmarking, floating diary entry
calendar.texi(,1333) that applies to the last Thursday in November:
calendar.texi(,1334)  
calendar.texi(,1335) @findex diary-float
calendar.texi(,1336) @example
calendar.texi(,1337) &%%(diary-float 11 4 -1) American Thanksgiving
calendar.texi(,1338) @end example
calendar.texi(,1339) 
calendar.texi(,1340) @noindent
calendar.texi(,1341) The 11 specifies November (the eleventh month), the 4 specifies Thursday
calendar.texi(,1342) (the fourth day of the week, where Sunday is numbered zero), and the
calendar.texi(,1343) @minus{}1 specifies ``last'' (1 would mean ``first'', 2 would mean
calendar.texi(,1344) ``second'', @minus{}2 would mean ``second-to-last'', and so on).  The
calendar.texi(,1345) month can be a single month or a list of months.  Thus you could change
calendar.texi(,1346) the 11 above to @samp{'(1 2 3)} and have the entry apply to the last
calendar.texi(,1347) Thursday of January, February, and March.  If the month is @code{t}, the
calendar.texi(,1348) entry applies to all months of the year.@refill
calendar.texi(,1349) 
calendar.texi(,1350)   The sexp feature of the diary allows you to specify diary entries
calendar.texi(,1351) based on any Emacs Lisp expression.  You can use the library of built-in
calendar.texi(,1352) functions or you can write your own functions.  The built-in functions
calendar.texi(,1353) include the ones shown in this section, plus a few others (@pxref{Sexp
calendar.texi(,1354) Diary Entries}).
calendar.texi(,1355) 
calendar.texi(,1356)   The generality of sexps lets you specify any diary entry that you can
calendar.texi(,1357) describe algorithmically.  Suppose you get paid on the 21st of the month
calendar.texi(,1358) if it is a weekday, and to the Friday before if the 21st is on a
calendar.texi(,1359) weekend.  The diary entry
calendar.texi(,1360) 
calendar.texi(,1361) @example
calendar.texi(,1362) &%%(let ((dayname (calendar-day-of-week date))
calendar.texi(,1363)          (day (car (cdr date))))
calendar.texi(,1364)       (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
calendar.texi(,1365)           (and (memq day '(19 20)) (= dayname 5)))
calendar.texi(,1366)          ) Pay check deposited
calendar.texi(,1367) @end example
calendar.texi(,1368) 
calendar.texi(,1369) @noindent
calendar.texi(,1370) to just those dates.  This example illustrates how the sexp can depend
calendar.texi(,1371) on the variable @code{date}; this variable is a list (@var{month}
calendar.texi(,1372) @var{day} @var{year}) that gives the Gregorian date for which the diary
calendar.texi(,1373) entries are being found.  If the value of the sexp is @code{t}, the
calendar.texi(,1374) entry applies to that date.  If the sexp evaluates to @code{nil}, the
calendar.texi(,1375) entry does @emph{not} apply to that date.
calendar.texi(,1376) 
calendar.texi(,1377) 
calendar.texi(,1378) @node Calendar Customization,,Diary, Calendar/Diary
calendar.texi(,1379) @subsection Customizing the Calendar and Diary
calendar.texi(,1380) 
calendar.texi(,1381)   There are many customizations that you can use to make the calendar and
calendar.texi(,1382) diary suit your personal tastes.
calendar.texi(,1383) 
calendar.texi(,1384) @menu
calendar.texi(,1385) * Calendar Customizing::   Defaults you can set.
calendar.texi(,1386) * Holiday Customizing::    Defining your own holidays.
calendar.texi(,1387) * Date Display Format::    Changing the format.
calendar.texi(,1388) * Time Display Format::    Changing the format.
calendar.texi(,1389) * Daylight Savings::       Changing the default.
calendar.texi(,1390) * Diary Customizing::      Defaults you can set.
calendar.texi(,1391) * Hebrew/Islamic Entries:: How to obtain them.
calendar.texi(,1392) * Fancy Diary Display::    Enhancing the diary display, sorting entries.
calendar.texi(,1393) * Included Diary Files::   Sharing a common diary file.
calendar.texi(,1394) * Sexp Diary Entries::     Fancy things you can do.
calendar.texi(,1395) * Appt Customizing::	   Customizing appointment reminders.
calendar.texi(,1396) @end menu
calendar.texi(,1397) 
calendar.texi(,1398) @node Calendar Customizing
calendar.texi(,1399) @subsubsection Customizing the Calendar
calendar.texi(,1400) @vindex view-diary-entries-initially
calendar.texi(,1401) 
calendar.texi(,1402)   If you set the variable @code{view-diary-entries-initially} to
calendar.texi(,1403) @code{t}, calling up the calendar automatically displays the diary
calendar.texi(,1404) entries for the current date as well.  The diary dates appear only if
calendar.texi(,1405) the current date is visible.  If you add both of the following lines to
calendar.texi(,1406) your init file:@refill
calendar.texi(,1407) 
calendar.texi(,1408) @example
calendar.texi(,1409) (setq view-diary-entries-initially t)
calendar.texi(,1410) (calendar)
calendar.texi(,1411) @end example
calendar.texi(,1412) 
calendar.texi(,1413) @noindent
calendar.texi(,1414) this displays both the calendar and diary windows whenever you start
calendar.texi(,1415) Emacs.  @xref{Init File}.
calendar.texi(,1416) 
calendar.texi(,1417) @vindex view-calendar-holidays-initially
calendar.texi(,1418)   Similarly, if you set the variable
calendar.texi(,1419) @code{view-calendar-holidays-initially} to @code{t}, entering the
calendar.texi(,1420) calendar automatically displays a list of holidays for the current
calendar.texi(,1421) three-month period.  The holiday list appears in a separate
calendar.texi(,1422) window.
calendar.texi(,1423)  
calendar.texi(,1424) @vindex mark-diary-entries-in-calendar
calendar.texi(,1425)   You can set the variable @code{mark-diary-entries-in-calendar} to
calendar.texi(,1426) @code{t} in order to mark any dates with diary entries.  This takes
calendar.texi(,1427) effect whenever the calendar window contents are recomputed.  There are
calendar.texi(,1428) two ways of marking these dates: by changing the face (@pxref{Faces}),
calendar.texi(,1429) if the display supports that, or by placing a plus sign (@samp{+})
calendar.texi(,1430) beside the date otherwise.
calendar.texi(,1431) 
calendar.texi(,1432) @vindex mark-holidays-in-calendar
calendar.texi(,1433)   Similarly, setting the variable @code{mark-holidays-in-calendar} to
calendar.texi(,1434) @code{t} marks holiday dates, either with a change of face or with an
calendar.texi(,1435) asterisk (@samp{*}).
calendar.texi(,1436) 
calendar.texi(,1437) @vindex calendar-holiday-marker
calendar.texi(,1438) @vindex diary-entry-marker
calendar.texi(,1439)   The variable @code{calendar-holiday-marker} specifies how to mark a
calendar.texi(,1440) date as being a holiday.  Its value may be a character to insert next to
calendar.texi(,1441) the date, or a face name to use for displaying the date.  Likewise, the
calendar.texi(,1442) variable @code{diary-entry-marker} specifies how to mark a date that has
calendar.texi(,1443) diary entries.  The calendar creates faces named @code{holiday-face} and
calendar.texi(,1444) @code{diary-face} for these purposes; those symbols are the default
calendar.texi(,1445) values of these variables, when Emacs supports multiple faces on your
calendar.texi(,1446) terminal.
calendar.texi(,1447) 
calendar.texi(,1448) @vindex calendar-load-hook
calendar.texi(,1449)   The variable @code{calendar-load-hook} is a normal hook run when the
calendar.texi(,1450) calendar package is first loaded (before actually starting to display
calendar.texi(,1451) the calendar).
calendar.texi(,1452) 
calendar.texi(,1453) @vindex initial-calendar-window-hook
calendar.texi(,1454)   Starting the calendar runs the normal hook
calendar.texi(,1455) @code{initial-calendar-window-hook}.  Recomputation of the calendar
calendar.texi(,1456) display does not run this hook.  But if you leave the calendar with the
calendar.texi(,1457) @kbd{q} command and reenter it, the hook runs again.@refill
calendar.texi(,1458) 
calendar.texi(,1459) @vindex today-visible-calendar-hook
calendar.texi(,1460)   The variable @code{today-visible-calendar-hook} is a normal hook run
calendar.texi(,1461) after the calendar buffer has been prepared with the calendar when the
calendar.texi(,1462) current date is visible in the window.  One use of this hook is to
calendar.texi(,1463) replace today's date with asterisks; to do that, use the hook function
calendar.texi(,1464) @code{calendar-star-date}.
calendar.texi(,1465) 
calendar.texi(,1466) @findex calendar-star-date
calendar.texi(,1467) @example
calendar.texi(,1468) (add-hook 'today-visible-calendar-hook 'calendar-star-date)
calendar.texi(,1469) @end example
calendar.texi(,1470) 
calendar.texi(,1471) @noindent
calendar.texi(,1472) Another standard hook function marks the current date, either by
calendar.texi(,1473) changing its face or by adding an asterisk.  Here's how to use it:
calendar.texi(,1474) 
calendar.texi(,1475) @findex calendar-mark-today
calendar.texi(,1476) @example
calendar.texi(,1477) (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
calendar.texi(,1478) @end example
calendar.texi(,1479) 
calendar.texi(,1480) @noindent
calendar.texi(,1481) @vindex calendar-today-marker
calendar.texi(,1482) The variable @code{calendar-today-marker} specifies how to mark today's
calendar.texi(,1483) date.  Its value should be a character to insert next to the date or a
calendar.texi(,1484) face name to use for displaying the date.  A face named
calendar.texi(,1485) @code{calendar-today-face} is provided for this purpose; that symbol is
calendar.texi(,1486) the default for this variable when Emacs supports multiple faces on your
calendar.texi(,1487) terminal.
calendar.texi(,1488) 
calendar.texi(,1489) @vindex today-invisible-calendar-hook
calendar.texi(,1490) @noindent
calendar.texi(,1491)   A similar normal hook, @code{today-invisible-calendar-hook} is run if
calendar.texi(,1492) the current date is @emph{not} visible in the window.
calendar.texi(,1493) 
calendar.texi(,1494) @node Holiday Customizing
calendar.texi(,1495) @subsubsection Customizing the Holidays
calendar.texi(,1496) 
calendar.texi(,1497) @vindex calendar-holidays
calendar.texi(,1498) @vindex christian-holidays
calendar.texi(,1499) @vindex hebrew-holidays
calendar.texi(,1500) @vindex islamic-holidays
calendar.texi(,1501)   Emacs knows about holidays defined by entries on one of several lists.
calendar.texi(,1502) You can customize these lists of holidays to your own needs, adding or
calendar.texi(,1503) deleting holidays.  The lists of holidays that Emacs uses are for
calendar.texi(,1504) general holidays (@code{general-holidays}), local holidays
calendar.texi(,1505) (@code{local-holidays}), Christian holidays (@code{christian-holidays}),
calendar.texi(,1506) Hebrew (Jewish) holidays (@code{hebrew-holidays}), Islamic (Moslem)
calendar.texi(,1507) holidays (@code{islamic-holidays}), and other holidays
calendar.texi(,1508) (@code{other-holidays}).
calendar.texi(,1509) 
calendar.texi(,1510) @vindex general-holidays
calendar.texi(,1511)   The general holidays are, by default, holidays common throughout the
calendar.texi(,1512) United States.  To eliminate these holidays, set @code{general-holidays}
calendar.texi(,1513) to @code{nil}.
calendar.texi(,1514) 
calendar.texi(,1515) @vindex local-holidays
calendar.texi(,1516)   There are no default local holidays (but sites may supply some).  You
calendar.texi(,1517) can set the variable @code{local-holidays} to any list of holidays, as
calendar.texi(,1518) described below.
calendar.texi(,1519) 
calendar.texi(,1520) @vindex all-christian-calendar-holidays
calendar.texi(,1521) @vindex all-hebrew-calendar-holidays
calendar.texi(,1522) @vindex all-islamic-calendar-holidays
calendar.texi(,1523)   By default, Emacs does not include all the holidays of the religions
calendar.texi(,1524) that it knows, only those commonly found in secular calendars.  For a
calendar.texi(,1525) more extensive collection of religious holidays, you can set any (or
calendar.texi(,1526) all) of the variables @code{all-christian-calendar-holidays},
calendar.texi(,1527) @code{all-hebrew-calendar-holidays}, or
calendar.texi(,1528) @code{all-islamic-calendar-holidays} to @code{t}.  If you want to
calendar.texi(,1529) eliminate the religious holidays, set any or all of the corresponding
calendar.texi(,1530) variables @code{christian-holidays}, @code{hebrew-holidays}, and
calendar.texi(,1531) @code{islamic-holidays} to @code{nil}.@refill
calendar.texi(,1532) 
calendar.texi(,1533) @vindex other-holidays
calendar.texi(,1534)   You can set the variable @code{other-holidays} to any list of
calendar.texi(,1535) holidays.  This list, normally empty, is intended for individual use.
calendar.texi(,1536) 
calendar.texi(,1537) @cindex holiday forms
calendar.texi(,1538)   Each of the lists (@code{general-holidays}, @code{local-holidays},
calendar.texi(,1539) @code{christian-holidays}, @code{hebrew-holidays},
calendar.texi(,1540) @code{islamic-holidays}, and @code{other-holidays}) is a list of
calendar.texi(,1541) @dfn{holiday forms}, each holiday form describing a holiday (or
calendar.texi(,1542) sometimes a list of holidays).
calendar.texi(,1543) 
calendar.texi(,1544)   Here is a table of the possible kinds of holiday form.  Day numbers
calendar.texi(,1545) and month numbers count starting from 1, but ``dayname'' numbers
calendar.texi(,1546) count Sunday as 0.  The element @var{string} is always the
calendar.texi(,1547) name of the holiday, as a string.
calendar.texi(,1548) 
calendar.texi(,1549) @table @code
calendar.texi(,1550) @item (holiday-fixed @var{month} @var{day} @var{string})
calendar.texi(,1551) A fixed date on the Gregorian calendar.  @var{month} and @var{day} are
calendar.texi(,1552) numbers, @var{string} is the name of the holiday.
calendar.texi(,1553) 
calendar.texi(,1554) @item (holiday-float @var{month} @var{dayname} @var{k} @var{string})
calendar.texi(,1555) The @var{k}th @var{dayname} in @var{month} on the Gregorian calendar
calendar.texi(,1556) (@var{dayname}=0 for Sunday, and so on); negative @var{k} means count back
calendar.texi(,1557) from the end of the month.  @var{string} is the name of the holiday.
calendar.texi(,1558) 
calendar.texi(,1559) @item (holiday-hebrew @var{month} @var{day} @var{string})
calendar.texi(,1560) A fixed date on the Hebrew calendar.  @var{month} and @var{day} are
calendar.texi(,1561) numbers, @var{string} is the name of the holiday.
calendar.texi(,1562) 
calendar.texi(,1563) @item (holiday-islamic @var{month} @var{day} @var{string})
calendar.texi(,1564) A fixed date on the Islamic calendar.  @var{month} and @var{day} are
calendar.texi(,1565) numbers, @var{string} is the name of the holiday.
calendar.texi(,1566) 
calendar.texi(,1567) @item (holiday-julian @var{month} @var{day} @var{string})
calendar.texi(,1568) A fixed date on the Julian calendar.  @var{month} and @var{day} are
calendar.texi(,1569) numbers, @var{string} is the name of the holiday.
calendar.texi(,1570) 
calendar.texi(,1571) @item (holiday-sexp @var{sexp} @var{string})
calendar.texi(,1572) A date calculated by the Lisp expression @var{sexp}.  The expression
calendar.texi(,1573) should use the variable @code{year} to compute and return the date of a
calendar.texi(,1574) holiday, or @code{nil} if the holiday doesn't happen this year.  The
calendar.texi(,1575) value of @var{sexp} must represent the date as a list of the form
calendar.texi(,1576) @code{(@var{month} @var{day} @var{year})}.  @var{string} is the name of
calendar.texi(,1577) the holiday.
calendar.texi(,1578) 
calendar.texi(,1579) @item (if @var{condition} @var{holiday-form} &optional @var{holiday-form})
calendar.texi(,1580) A holiday that happens only if @var{condition} is true.
calendar.texi(,1581) 
calendar.texi(,1582) @item (@var{function} @r{[}@var{args}@r{]})
calendar.texi(,1583) A list of dates calculated by the function @var{function}, called with
calendar.texi(,1584) arguments @var{args}.
calendar.texi(,1585) @end table
calendar.texi(,1586) 
calendar.texi(,1587)   For example, suppose you want to add Bastille Day, celebrated in
calendar.texi(,1588) France on July 14.  You can do this by adding the following line
calendar.texi(,1589) to your init file:
calendar.texi(,1590) 
calendar.texi(,1591) @smallexample
calendar.texi(,1592) (setq other-holidays '((holiday-fixed 7 14 "Bastille Day")))
calendar.texi(,1593) @end smallexample
calendar.texi(,1594) 
calendar.texi(,1595) @xref{Init File}.
calendar.texi(,1596) 
calendar.texi(,1597) @noindent
calendar.texi(,1598) The holiday form @code{(holiday-fixed 7 14 "Bastille Day")} specifies the
calendar.texi(,1599) fourteenth day of the seventh month (July).
calendar.texi(,1600) 
calendar.texi(,1601)   Many holidays occur on a specific day of the week, at a specific time
calendar.texi(,1602) of month.  Here is a holiday form describing Hurricane Supplication Day,
calendar.texi(,1603) celebrated in the Virgin Islands on the fourth Monday in August:
calendar.texi(,1604) 
calendar.texi(,1605) @smallexample
calendar.texi(,1606) (holiday-float 8 1 4 "Hurricane Supplication Day")
calendar.texi(,1607) @end smallexample
calendar.texi(,1608) 
calendar.texi(,1609) @noindent
calendar.texi(,1610) Here the 8 specifies August, the 1 specifies Monday (Sunday is 0,
calendar.texi(,1611) Tuesday is 2, and so on), and the 4 specifies the fourth occurrence in
calendar.texi(,1612) the month (1 specifies the first occurrence, 2 the second occurrence,
calendar.texi(,1613) @minus{}1 the last occurrence, @minus{}2 the second-to-last occurrence, and
calendar.texi(,1614) so on).
calendar.texi(,1615) 
calendar.texi(,1616)   You can specify holidays that occur on fixed days of the Hebrew,
calendar.texi(,1617) Islamic, and Julian calendars too.  For example,
calendar.texi(,1618) 
calendar.texi(,1619) @smallexample
calendar.texi(,1620) (setq other-holidays
calendar.texi(,1621)       '((holiday-hebrew 10 2 "Last day of Hanukkah")
calendar.texi(,1622)         (holiday-islamic 3 12 "Mohammed's Birthday")
calendar.texi(,1623)         (holiday-julian 4 2 "Jefferson's Birthday")))
calendar.texi(,1624) @end smallexample
calendar.texi(,1625) 
calendar.texi(,1626) @noindent
calendar.texi(,1627) adds the last day of Hanukkah (since the Hebrew months are numbered with
calendar.texi(,1628) 1 starting from Nisan), the Islamic feast celebrating Mohammed's
calendar.texi(,1629) birthday (since the Islamic months are numbered from 1 starting with
calendar.texi(,1630) Muharram), and Thomas Jefferson's birthday, which is 2 April 1743 on the
calendar.texi(,1631) Julian calendar.
calendar.texi(,1632) 
calendar.texi(,1633)   To include a holiday conditionally, use either Emacs Lisp's @code{if} or the
calendar.texi(,1634) @code{holiday-sexp} form.  For example, American presidential elections
calendar.texi(,1635) occur on the first Tuesday after the first Monday in November of years
calendar.texi(,1636) divisible by 4:
calendar.texi(,1637) 
calendar.texi(,1638) @smallexample
calendar.texi(,1639) (holiday-sexp (if (= 0 (% year 4))
calendar.texi(,1640)                    (calendar-gregorian-from-absolute
calendar.texi(,1641)                  (1+ (calendar-dayname-on-or-before
calendar.texi(,1642)                        1 (+ 6 (calendar-absolute-from-gregorian
calendar.texi(,1643)                                 (list 11 1 year))))))
calendar.texi(,1644)               "US Presidential Election"))
calendar.texi(,1645) @end smallexample
calendar.texi(,1646) 
calendar.texi(,1647) @noindent
calendar.texi(,1648) or
calendar.texi(,1649) 
calendar.texi(,1650) @smallexample
calendar.texi(,1651) (if (= 0 (% displayed-year 4))
calendar.texi(,1652)     (fixed 11
calendar.texi(,1653)            (extract-calendar-day
calendar.texi(,1654)              (calendar-gregorian-from-absolute
calendar.texi(,1655)                (1+ (calendar-dayname-on-or-before
calendar.texi(,1656)                      1 (+ 6 (calendar-absolute-from-gregorian
calendar.texi(,1657)                               (list 11 1 displayed-year)))))))
calendar.texi(,1658)            "US Presidential Election"))
calendar.texi(,1659) @end smallexample
calendar.texi(,1660) 
calendar.texi(,1661)   Some holidays just don't fit into any of these forms because special
calendar.texi(,1662) calculations are involved in their determination.  In such cases you
calendar.texi(,1663) must write a Lisp function to do the calculation.  To include eclipses,
calendar.texi(,1664) for example, add @code{(eclipses)} to @code{other-holidays}
calendar.texi(,1665) and write an Emacs Lisp function @code{eclipses} that returns a
calendar.texi(,1666) (possibly empty) list of the relevant Gregorian dates among the range
calendar.texi(,1667) visible in the calendar window, with descriptive strings, like this:
calendar.texi(,1668) 
calendar.texi(,1669) @smallexample
calendar.texi(,1670) (((6 27 1991) "Lunar Eclipse") ((7 11 1991) "Solar Eclipse") ... )
calendar.texi(,1671) @end smallexample
calendar.texi(,1672) 
calendar.texi(,1673) @node Date Display Format
calendar.texi(,1674) @subsubsection Date Display Format
calendar.texi(,1675) @vindex calendar-date-display-form
calendar.texi(,1676) 
calendar.texi(,1677)   You can customize the manner of displaying dates in the diary, in mode
calendar.texi(,1678) lines, and in messages by setting @code{calendar-date-display-form}.
calendar.texi(,1679) This variable holds a list of expressions that can involve the variables
calendar.texi(,1680) @code{month}, @code{day}, and @code{year}, which are all numbers in
calendar.texi(,1681) string form, and @code{monthname} and @code{dayname}, which are both
calendar.texi(,1682) alphabetic strings.  In the American style, the default value of this
calendar.texi(,1683) list is as follows:
calendar.texi(,1684) 
calendar.texi(,1685) @smallexample
calendar.texi(,1686) ((if dayname (concat dayname ", ")) monthname " " day ", " year)
calendar.texi(,1687) @end smallexample
calendar.texi(,1688) 
calendar.texi(,1689) @noindent
calendar.texi(,1690) while in the European style this value is the default:
calendar.texi(,1691) 
calendar.texi(,1692) @smallexample
calendar.texi(,1693) ((if dayname (concat dayname ", ")) day " " monthname " " year)
calendar.texi(,1694) @end smallexample
calendar.texi(,1695) 
calendar.texi(,1696) +@noindent
calendar.texi(,1697) The ISO standard date representation is this:
calendar.texi(,1698) 
calendar.texi(,1699) @smallexample
calendar.texi(,1700) (year "-" month "-" day)
calendar.texi(,1701) @end smallexample
calendar.texi(,1702) 
calendar.texi(,1703) @noindent
calendar.texi(,1704) This specifies a typical American format:
calendar.texi(,1705) 
calendar.texi(,1706) @smallexample
calendar.texi(,1707) (month "/" day "/" (substring year -2))
calendar.texi(,1708) @end smallexample
calendar.texi(,1709) 
calendar.texi(,1710) @node Time Display Format
calendar.texi(,1711) @subsubsection Time Display Format
calendar.texi(,1712) @vindex calendar-time-display-form
calendar.texi(,1713) 
calendar.texi(,1714)   The calendar and diary by default display times of day in the
calendar.texi(,1715) conventional American style with the hours from 1 through 12, minutes,
calendar.texi(,1716) and either @samp{am} or @samp{pm}.  If you prefer the European style,
calendar.texi(,1717) also known in the US as military, in which the hours go from 00 to 23,
calendar.texi(,1718) you can alter the variable @code{calendar-time-display-form}.  This
calendar.texi(,1719) variable is a list of expressions that can involve the variables
calendar.texi(,1720) @code{12-hours}, @code{24-hours}, and @code{minutes}, which are all
calendar.texi(,1721) numbers in string form, and @code{am-pm} and @code{time-zone}, which are
calendar.texi(,1722) both alphabetic strings.  The default value of
calendar.texi(,1723) @code{calendar-time-display-form} is as follows:
calendar.texi(,1724) 
calendar.texi(,1725) @smallexample
calendar.texi(,1726) (12-hours ":" minutes am-pm
calendar.texi(,1727)           (if time-zone " (") time-zone (if time-zone ")"))
calendar.texi(,1728) @end smallexample
calendar.texi(,1729) 
calendar.texi(,1730) @noindent
calendar.texi(,1731) Here is a value that provides European style times:
calendar.texi(,1732) 
calendar.texi(,1733) @smallexample
calendar.texi(,1734) (24-hours ":" minutes
calendar.texi(,1735)           (if time-zone " (") time-zone (if time-zone ")"))
calendar.texi(,1736) @end smallexample
calendar.texi(,1737) 
calendar.texi(,1738) @noindent
calendar.texi(,1739) gives military-style times like @samp{21:07 (UT)} if time zone names are
calendar.texi(,1740) defined, and times like @samp{21:07} if they are not.
calendar.texi(,1741) 
calendar.texi(,1742) @node Daylight Savings
calendar.texi(,1743) @subsubsection Daylight Savings Time
calendar.texi(,1744) @cindex daylight savings time
calendar.texi(,1745) 
calendar.texi(,1746)   Emacs understands the difference between standard time and daylight
calendar.texi(,1747) savings time---the times given for sunrise, sunset, solstices,
calendar.texi(,1748) equinoxes, and the phases of the moon take that into account.  The rules
calendar.texi(,1749) for daylight savings time vary from place to place and have also varied
calendar.texi(,1750) historically from year to year.  To do the job properly, Emacs needs to
calendar.texi(,1751) know which rules to use.
calendar.texi(,1752) 
calendar.texi(,1753)   Some operating systems keep track of the rules that apply to the place
calendar.texi(,1754) where you are; on these systems, Emacs gets the information it needs
calendar.texi(,1755) from the system automatically.  If some or all of this information is
calendar.texi(,1756) missing, Emacs fills in the gaps with the rules currently used in
calendar.texi(,1757) Cambridge, Massachusetts.  If the resulting rules are not what you want,
calendar.texi(,1758) you can tell Emacs the rules to use by setting certain variables.
calendar.texi(,1759) 
calendar.texi(,1760) @vindex calendar-daylight-savings-starts
calendar.texi(,1761) @vindex calendar-daylight-savings-ends
calendar.texi(,1762)   If the default choice of rules is not appropriate for your location,
calendar.texi(,1763) you can tell Emacs the rules to use by setting the variables
calendar.texi(,1764) @code{calendar-daylight-savings-starts} and
calendar.texi(,1765) @code{calendar-daylight-savings-ends}.  Their values should be Lisp
calendar.texi(,1766) expressions that refer to the variable @code{year}, and evaluate to the
calendar.texi(,1767) Gregorian date on which daylight savings time starts or (respectively)
calendar.texi(,1768) ends, in the form of a list @code{(@var{month} @var{day} @var{year})}.
calendar.texi(,1769) The values should be @code{nil} if your area does not use daylight
calendar.texi(,1770) savings time.
calendar.texi(,1771) 
calendar.texi(,1772)   Emacs uses these expressions to determine the starting date of
calendar.texi(,1773) daylight savings time for the holiday list  and for correcting times of
calendar.texi(,1774) day in the solar and lunar calculations.
calendar.texi(,1775)  
calendar.texi(,1776)   The values for Cambridge, Massachusetts are as follows:
calendar.texi(,1777) 
calendar.texi(,1778) @example
calendar.texi(,1779) @group
calendar.texi(,1780) (calendar-nth-named-day 1 0 4 year)
calendar.texi(,1781) (calendar-nth-named-day -1 0 10 year)
calendar.texi(,1782) @end group
calendar.texi(,1783) @end example
calendar.texi(,1784) 
calendar.texi(,1785) @noindent
calendar.texi(,1786) That is, the first 0th day (Sunday) of the fourth month (April) in
calendar.texi(,1787) the year specified by @code{year}, and the last Sunday of the tenth month
calendar.texi(,1788) (October) of that year.  If daylight savings time were
calendar.texi(,1789) changed to start on October 1, you would set
calendar.texi(,1790) @code{calendar-daylight-savings-starts} to this:
calendar.texi(,1791) 
calendar.texi(,1792) @example
calendar.texi(,1793) (list 10 1 year)
calendar.texi(,1794) @end example
calendar.texi(,1795) 
calendar.texi(,1796)   For a more complex example, suppose daylight savings time begins on
calendar.texi(,1797) the first of Nisan on the Hebrew calendar.  You should set
calendar.texi(,1798) @code{calendar-daylight-savings-starts} to this value:
calendar.texi(,1799) 
calendar.texi(,1800) @example
calendar.texi(,1801) (calendar-gregorian-from-absolute
calendar.texi(,1802)   (calendar-absolute-from-hebrew
calendar.texi(,1803)     (list 1 1 (+ year 3760))))
calendar.texi(,1804) @end example
calendar.texi(,1805) 
calendar.texi(,1806) @noindent
calendar.texi(,1807) because Nisan is the first month in the Hebrew calendar and the Hebrew
calendar.texi(,1808) year differs from the Gregorian year by 3760 at Nisan.
calendar.texi(,1809) 
calendar.texi(,1810)   If there is no daylight savings time at your location, or if you want
calendar.texi(,1811) all times in standard time, set @code{calendar-daylight-savings-starts}
calendar.texi(,1812) and @code{calendar-daylight-savings-ends} to @code{nil}.
calendar.texi(,1813) 
calendar.texi(,1814) @vindex calendar-daylight-time-offset
calendar.texi(,1815)   The variable @code{calendar-daylight-time-offset} specifies the
calendar.texi(,1816) difference between daylight savings time and standard time, measured in
calendar.texi(,1817) minutes.  The value for Cambridge, Massachusetts is 60.
calendar.texi(,1818) 
calendar.texi(,1819) @c @vindex calendar-daylight-savings-starts-time  too long!
calendar.texi(,1820) @vindex calendar-daylight-savings-ends-time
calendar.texi(,1821)   The two variables @code{calendar-daylight-savings-starts-time} and
calendar.texi(,1822) @code{calendar-daylight-savings-ends-time} specify the number of minutes
calendar.texi(,1823) after midnight local time when the transition to and from daylight
calendar.texi(,1824) savings time should occur.  For Cambridge, Massachusetts both variables'
calendar.texi(,1825) values are 120.
calendar.texi(,1826)  
calendar.texi(,1827) @node Diary Customizing
calendar.texi(,1828) @subsubsection Customizing the Diary
calendar.texi(,1829) 
calendar.texi(,1830) @vindex holidays-in-diary-buffer
calendar.texi(,1831)   Ordinarily, the mode line of the diary buffer window indicates any
calendar.texi(,1832) holidays that fall on the date of the diary entries.  The process of
calendar.texi(,1833) checking for holidays can take several seconds, so including holiday
calendar.texi(,1834) information delays the display of the diary buffer noticeably.  If you'd
calendar.texi(,1835) prefer to have a faster display of the diary buffer but without the
calendar.texi(,1836) holiday information, set the variable @code{holidays-in-diary-buffer} to
calendar.texi(,1837) @code{nil}.@refill
calendar.texi(,1838) 
calendar.texi(,1839) @vindex number-of-diary-entries
calendar.texi(,1840)   The variable @code{number-of-diary-entries} controls the number of
calendar.texi(,1841) days of diary entries to be displayed at one time.  It affects the
calendar.texi(,1842) initial display when @code{view-diary-entries-initially} is @code{t}, as
calendar.texi(,1843) well as the command @kbd{M-x diary}.  For example, the default value is
calendar.texi(,1844) 1, which says to display only the current day's diary entries.  If the
calendar.texi(,1845) value is 2, both the current day's and the next day's entries are
calendar.texi(,1846) displayed.  The value can also be a vector of seven elements: for
calendar.texi(,1847) example, if the value is @code{[0 2 2 2 2 4 1]} then no diary entries
calendar.texi(,1848) appear on Sunday, the current date's and the next day's diary entries
calendar.texi(,1849) appear Monday through Thursday, Friday through Monday's entries appear
calendar.texi(,1850) on Friday, while on Saturday only that day's entries appear.
calendar.texi(,1851) 
calendar.texi(,1852) @vindex print-diary-entries-hook
calendar.texi(,1853) @findex print-diary-entries
calendar.texi(,1854)   The variable @code{print-diary-entries-hook} is a normal hook run
calendar.texi(,1855) after preparation of a temporary buffer containing just the diary
calendar.texi(,1856) entries currently visible in the diary buffer.  (The other, irrelevant
calendar.texi(,1857) diary entries are really absent from the temporary buffer; in the diary
calendar.texi(,1858) buffer, they are merely hidden.)  The default value of this hook does
calendar.texi(,1859) the printing with the command @code{lpr-buffer}.  If you want to use a
calendar.texi(,1860) different command to do the printing, just change the value of this
calendar.texi(,1861) hook.  Other uses might include, for example, rearranging the lines into
calendar.texi(,1862) order by day and time.
calendar.texi(,1863) 
calendar.texi(,1864) @vindex diary-date-forms
calendar.texi(,1865)   You can customize the form of dates in your diary file, if neither the
calendar.texi(,1866) standard American nor European styles suits your needs, by setting the
calendar.texi(,1867) variable @code{diary-date-forms}.  This variable is a list of patterns
calendar.texi(,1868) for recognizing a date.  Each date pattern is a list whose elements may
calendar.texi(,1869) be regular expressions (@pxref{Regexps}) or the symbols
calendar.texi(,1870) @code{month}, @code{day}, @code{year}, @code{monthname}, and
calendar.texi(,1871) @code{dayname}.  All these elements serve as patterns that match certain
calendar.texi(,1872) kinds of text in the diary file.  In order for the date pattern, as a
calendar.texi(,1873) whole, to match, all of its elements must match consecutively.
calendar.texi(,1874) 
calendar.texi(,1875)   A regular expression in a date pattern matches in its usual fashion,
calendar.texi(,1876) using the standard syntax table altered so that @samp{*} is a word
calendar.texi(,1877) constituent.
calendar.texi(,1878) 
calendar.texi(,1879)   The symbols @code{month}, @code{day}, @code{year}, @code{monthname},
calendar.texi(,1880) and @code{dayname} match the month number, day number, year number,
calendar.texi(,1881) month name, and day name of the date being considered.  The symbols that
calendar.texi(,1882) match numbers allow leading zeros; those that match names allow
calendar.texi(,1883) three-letter abbreviations and capitalization.  All the symbols can
calendar.texi(,1884) match @samp{*}; since @samp{*} in a diary entry means ``any day'', ``any
calendar.texi(,1885) month'', and so on, it should match regardless of the date being
calendar.texi(,1886) considered.
calendar.texi(,1887) 
calendar.texi(,1888)   The default value of @code{diary-date-forms} in the American style is
calendar.texi(,1889) this:
calendar.texi(,1890) 
calendar.texi(,1891) @example
calendar.texi(,1892) ((month "/" day "[^/0-9]")
calendar.texi(,1893)  (month "/" day "/" year "[^0-9]")
calendar.texi(,1894)  (monthname " *" day "[^,0-9]")
calendar.texi(,1895)  (monthname " *" day ", *" year "[^0-9]")
calendar.texi(,1896)  (dayname "\\W"))
calendar.texi(,1897) @end example
calendar.texi(,1898) 
calendar.texi(,1899) @noindent
calendar.texi(,1900) Emacs matches of the diary entries with the date forms is done with the
calendar.texi(,1901) standard syntax table from Fundamental mode
calendar.texi(,1902) (@pxref{Syntax Tables,,,lispref,XEmacs Lisp Reference Manual}),
calendar.texi(,1903) but with the @samp{*} changed so that it is a word constituent.@refill
calendar.texi(,1904) 
calendar.texi(,1905)   The date patterns in the list must be @emph{mutually exclusive} and
calendar.texi(,1906) must not match any portion of the diary entry itself, just the date and
calendar.texi(,1907) one character of whitespace.  If, to be mutually exclusive, the pattern
calendar.texi(,1908) must match a portion of the diary entry text---beyond the whitespace
calendar.texi(,1909) that ends the date---then the first element of the date pattern
calendar.texi(,1910) @emph{must} be @code{backup}.  This causes the date recognizer to back
calendar.texi(,1911) up to the beginning of the current word of the diary entry, after
calendar.texi(,1912) finishing the match.  Even if you use @code{backup}, the date pattern
calendar.texi(,1913) must absolutely not match more than a portion of the first word of the
calendar.texi(,1914) diary entry.  The default value of @code{diary-date-forms} in the
calendar.texi(,1915) European style is this list:
calendar.texi(,1916) 
calendar.texi(,1917) @example
calendar.texi(,1918) ((day "/" month "[^/0-9]")
calendar.texi(,1919)  (day "/" month "/" year "[^0-9]")
calendar.texi(,1920)  (backup day " *" monthname "\\W+\\<[^*0-9]")
calendar.texi(,1921)  (day " *" monthname " *" year "[^0-9]")
calendar.texi(,1922)  (dayname "\\W"))
calendar.texi(,1923) @end example
calendar.texi(,1924) 
calendar.texi(,1925) @noindent
calendar.texi(,1926) Notice the use of @code{backup} in the third pattern, because it needs
calendar.texi(,1927) to match part of a word beyond the date itself to distinguish it from
calendar.texi(,1928) the fourth pattern.
calendar.texi(,1929)  
calendar.texi(,1930) @node Hebrew/Islamic Entries
calendar.texi(,1931) @subsubsection Hebrew- and Islamic-Date Diary Entries
calendar.texi(,1932) 
calendar.texi(,1933)   Your diary file can have entries based on Hebrew or Islamic dates, as
calendar.texi(,1934) well as entries based on the world-standard Gregorian calendar.
calendar.texi(,1935) However, because recognition of such entries is time-consuming and most
calendar.texi(,1936) people don't use them, you must explicitly enable their use.  If you
calendar.texi(,1937) want the diary to recognize Hebrew-date diary entries, for example, 
calendar.texi(,1938) you must do this:
calendar.texi(,1939)  
calendar.texi(,1940) @vindex nongregorian-diary-listing-hook
calendar.texi(,1941) @vindex nongregorian-diary-marking-hook
calendar.texi(,1942) @findex list-hebrew-diary-entries
calendar.texi(,1943) @findex mark-hebrew-diary-entries
calendar.texi(,1944) @smallexample
calendar.texi(,1945) (add-hook 'nongregorian-diary-listing-hook 'list-hebrew-diary-entries)
calendar.texi(,1946) (add-hook 'nongregorian-diary-marking-hook 'mark-hebrew-diary-entries)
calendar.texi(,1947) @end smallexample
calendar.texi(,1948) 
calendar.texi(,1949) @noindent
calendar.texi(,1950) If you want Islamic-date entries, do this:
calendar.texi(,1951) 
calendar.texi(,1952) @findex list-islamic-diary-entries
calendar.texi(,1953) @findex mark-islamic-diary-entries
calendar.texi(,1954) @smallexample
calendar.texi(,1955) (add-hook 'nongregorian-diary-listing-hook 'list-islamic-diary-entries)
calendar.texi(,1956) (add-hook 'nongregorian-diary-marking-hook 'mark-islamic-diary-entries)
calendar.texi(,1957) @end smallexample
calendar.texi(,1958) 
calendar.texi(,1959)   Hebrew- and Islamic-date diary entries have the same formats as
calendar.texi(,1960) Gregorian-date diary entries, except that @samp{H} precedes a Hebrew
calendar.texi(,1961) date and @samp{I} precedes an Islamic date.  Moreover, because the
calendar.texi(,1962) Hebrew and Islamic month names are not uniquely specified by the first
calendar.texi(,1963) three letters, you may not abbreviate them.  For example, a diary entry
calendar.texi(,1964) for the Hebrew date Heshvan 25 could look like this:
calendar.texi(,1965) 
calendar.texi(,1966) @smallexample
calendar.texi(,1967) HHeshvan 25 Happy Hebrew birthday!
calendar.texi(,1968) @end smallexample
calendar.texi(,1969) 
calendar.texi(,1970) @noindent
calendar.texi(,1971) and would appear in the diary for any date that corresponds to Heshvan 25
calendar.texi(,1972) on the Hebrew calendar.  And here is  Islamic-date diary entry  that matches
calendar.texi(,1973) Dhu al-Qada 25:
calendar.texi(,1974) 
calendar.texi(,1975) @smallexample
calendar.texi(,1976) IDhu al-Qada 25 Happy Islamic birthday!
calendar.texi(,1977) @end smallexample
calendar.texi(,1978) 
calendar.texi(,1979) @noindent
calendar.texi(,1980) and would appear in the diary for any date that corresponds to Dhu al-Qada 25
calendar.texi(,1981) on the Islamic calendar.
calendar.texi(,1982) 
calendar.texi(,1983)   As with Gregorian-date diary entries, Hebrew- and Islamic-date entries
calendar.texi(,1984) are nonmarking if they are preceded with an ampersand (@samp{&}).
calendar.texi(,1985) 
calendar.texi(,1986)   Here is a table of commands used in the calendar to create diary entries
calendar.texi(,1987) that match the selected date and other dates that are similar in the Hebrew
calendar.texi(,1988) or Islamic calendar:
calendar.texi(,1989)  
calendar.texi(,1990) @table @kbd
calendar.texi(,1991) @item i h d
calendar.texi(,1992) Add a diary entry for the Hebrew date corresponding to the selected date
calendar.texi(,1993) (@code{insert-hebrew-diary-entry}).
calendar.texi(,1994) @item i h m
calendar.texi(,1995) Add a diary entry for the day of the Hebrew month corresponding to the
calendar.texi(,1996) selected date (@code{insert-monthly-hebrew-diary-entry}).  This diary
calendar.texi(,1997) entry matches any date that has the same Hebrew day-within-month as the
calendar.texi(,1998) selected date.
calendar.texi(,1999) @item i h y
calendar.texi(,2000) Add a diary entry for the day of the Hebrew year corresponding to the
calendar.texi(,2001) selected date (@code{insert-yearly-hebrew-diary-entry}).  This diary 
calendar.texi(,2002) entry matches any date which has the same Hebrew month and day-within-month
calendar.texi(,2003) as the selected date.
calendar.texi(,2004) @item i i d
calendar.texi(,2005) Add a diary entry for the Islamic date corresponding to the selected date
calendar.texi(,2006) (@code{insert-islamic-diary-entry}).
calendar.texi(,2007) @item i i m
calendar.texi(,2008) Add a diary entry for the day of the Islamic month corresponding to the
calendar.texi(,2009) selected date (@code{insert-monthly-islamic-diary-entry}).
calendar.texi(,2010) @item i i y
calendar.texi(,2011) Add a diary entry for the day of the Islamic year corresponding to the
calendar.texi(,2012) selected date (@code{insert-yearly-islamic-diary-entry}).
calendar.texi(,2013) @end table
calendar.texi(,2014) 
calendar.texi(,2015) @findex insert-hebrew-diary-entry
calendar.texi(,2016) @findex insert-monthly-hebrew-diary-entry
calendar.texi(,2017) @findex insert-yearly-hebrew-diary-entry
calendar.texi(,2018) @findex insert-islamic-diary-entry
calendar.texi(,2019) @findex insert-monthly-islamic-diary-entry
calendar.texi(,2020) @findex insert-yearly-islamic-diary-entry
calendar.texi(,2021)   These commands work much like the corresponding commands for ordinary
calendar.texi(,2022) diary entries: they apply to the date that point is on in the calendar
calendar.texi(,2023) window, and what they do is insert just the date portion of a diary entry
calendar.texi(,2024) at the end of your diary file.  You must then insert the rest of the 
calendar.texi(,2025) diary entry.
calendar.texi(,2026)  
calendar.texi(,2027) @node Fancy Diary Display
calendar.texi(,2028) @subsubsection Fancy Diary Display
calendar.texi(,2029) @vindex diary-display-hook
calendar.texi(,2030) @findex simple-diary-display
calendar.texi(,2031) 
calendar.texi(,2032)   Diary display works by preparing the diary buffer and then running the
calendar.texi(,2033) hook @code{diary-display-hook}.  The default value of this hook
calendar.texi(,2034) (@code{simple-diary-display}) hides the irrelevant diary entries and
calendar.texi(,2035) then displays the buffer.  However, if you specify the hook as follows,
calendar.texi(,2036)  
calendar.texi(,2037) @cindex diary buffer
calendar.texi(,2038) @findex fancy-diary-display
calendar.texi(,2039) @example
calendar.texi(,2040) (add-hook 'diary-display-hook 'fancy-diary-display)
calendar.texi(,2041) @end example
calendar.texi(,2042) 
calendar.texi(,2043) @noindent
calendar.texi(,2044) this enables fancy diary display.  It displays diary entries and
calendar.texi(,2045) holidays by copying them into a special buffer that exists only for the
calendar.texi(,2046) sake of display.  Copying to a separate buffer provides an opportunity
calendar.texi(,2047) to change the displayed text to make it prettier---for example, to sort
calendar.texi(,2048) the entries by the dates they apply to.
calendar.texi(,2049) 
calendar.texi(,2050)   As with simple diary display, you can print a hard copy of the buffer
calendar.texi(,2051) with @code{print-diary-entries}.  To print a hard copy of a day-by-day
calendar.texi(,2052) diary for a week by positioning point on Sunday of that week, type
calendar.texi(,2053) @kbd{7 d} and then do @kbd{M-x print-diary-entries}.  As usual, the
calendar.texi(,2054) inclusion of the holidays slows down the display slightly; you can speed
calendar.texi(,2055) things up by setting the variable @code{holidays-in-diary-buffer} to
calendar.texi(,2056) @code{nil}.
calendar.texi(,2057) 
calendar.texi(,2058) @vindex diary-list-include-blanks
calendar.texi(,2059)   Ordinarily, the fancy diary buffer does not show days for which there are
calendar.texi(,2060) no diary entries, even if that day is a holiday.  If you want such days to be
calendar.texi(,2061) shown in the fancy diary buffer, set the variable
calendar.texi(,2062) @code{diary-list-include-blanks} to @code{t}.@refill
calendar.texi(,2063) 
calendar.texi(,2064) @cindex sorting diary entries
calendar.texi(,2065)   If you use the fancy diary display, you can use the normal hook
calendar.texi(,2066) @code{list-diary-entries-hook} to sort each day's diary entries by their
calendar.texi(,2067) time of day.  Add this line to your init file:
calendar.texi(,2068) 
calendar.texi(,2069) @findex sort-diary-entries
calendar.texi(,2070) @example
calendar.texi(,2071) (add-hook 'list-diary-entries-hook 'sort-diary-entries t)
calendar.texi(,2072) @end example
calendar.texi(,2073) 
calendar.texi(,2074) @xref{Init File}.
calendar.texi(,2075) 
calendar.texi(,2076) @noindent
calendar.texi(,2077) For each day, this sorts diary entries that begin with a recognizable
calendar.texi(,2078) time of day according to their times.  Diary entries without times come
calendar.texi(,2079) first within each day.
calendar.texi(,2080) 
calendar.texi(,2081) @node Included Diary Files
calendar.texi(,2082) @subsubsection Included Diary Files
calendar.texi(,2083) 
calendar.texi(,2084)   Fancy diary display also has the ability to process included diary
calendar.texi(,2085) files.  This permits a group of people to share a diary file for events
calendar.texi(,2086) that apply to all of them.  Lines in the diary file of this form:
calendar.texi(,2087)  
calendar.texi(,2088) @smallexample
calendar.texi(,2089) #include "@var{filename}"
calendar.texi(,2090) @end smallexample
calendar.texi(,2091) 
calendar.texi(,2092) @noindent
calendar.texi(,2093) includes the diary entries from the file @var{filename} in the fancy
calendar.texi(,2094) diary buffer.  The include mechanism is recursive, so that included files
calendar.texi(,2095) can include other files, and so on; you must be careful not to have a
calendar.texi(,2096) cycle of inclusions, of course.  Here is how to enable the include
calendar.texi(,2097) facility:
calendar.texi(,2098) 
calendar.texi(,2099) @vindex list-diary-entries-hook
calendar.texi(,2100) @vindex mark-diary-entries-hook
calendar.texi(,2101) @findex include-other-diary-files
calendar.texi(,2102) @findex mark-included-diary-files
calendar.texi(,2103) @smallexample
calendar.texi(,2104) (add-hook 'list-diary-entries-hook 'include-other-diary-files)
calendar.texi(,2105) (add-hook 'mark-diary-entries-hook 'mark-included-diary-files)
calendar.texi(,2106) @end smallexample
calendar.texi(,2107) 
calendar.texi(,2108) The include mechanism works only with the fancy diary display, because
calendar.texi(,2109) ordinary diary display shows the entries directly from your diary file.
calendar.texi(,2110) 
calendar.texi(,2111) @node Sexp Diary Entries
calendar.texi(,2112) @subsubsection Sexp Entries and the Fancy Diary Display
calendar.texi(,2113) @cindex sexp diary entries
calendar.texi(,2114) 
calendar.texi(,2115)   Sexp diary entries allow you to do more than just have complicated
calendar.texi(,2116) conditions under which a diary entry applies.  If you use the fancy
calendar.texi(,2117) diary display, sexp entries can generate the text of the entry depending
calendar.texi(,2118) on the date itself.  For example, an anniversary diary entry can insert
calendar.texi(,2119) the number of years since the anniversary date into the text of the
calendar.texi(,2120) diary entry.  Thus the @samp{%d} in this dairy entry:
calendar.texi(,2121) 
calendar.texi(,2122) @findex diary-anniversary
calendar.texi(,2123) @smallexample
calendar.texi(,2124) %%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)
calendar.texi(,2125) @end smallexample
calendar.texi(,2126) 
calendar.texi(,2127) @noindent
calendar.texi(,2128) gets replaced by the age, so on October 31, 1990 the entry appears in
calendar.texi(,2129) the fancy diary buffer like this:
calendar.texi(,2130) 
calendar.texi(,2131) @smallexample
calendar.texi(,2132) Arthur's birthday (42 years old)
calendar.texi(,2133) @end smallexample
calendar.texi(,2134) 
calendar.texi(,2135) @noindent
calendar.texi(,2136) If the diary file instead contains this entry:
calendar.texi(,2137) 
calendar.texi(,2138) @smallexample
calendar.texi(,2139) %%(diary-anniversary 10 31 1948) Arthur's %d%s birthday
calendar.texi(,2140) @end smallexample
calendar.texi(,2141) 
calendar.texi(,2142) @noindent
calendar.texi(,2143) the entry in the fancy diary buffer for October 31, 1990 appears like this:
calendar.texi(,2144) 
calendar.texi(,2145) @smallexample
calendar.texi(,2146) Arthur's 42nd birthday
calendar.texi(,2147) @end smallexample
calendar.texi(,2148) 
calendar.texi(,2149)   Similarly, cyclic diary entries can interpolate the number of repetitions
calendar.texi(,2150) that have occurred:
calendar.texi(,2151) 
calendar.texi(,2152) @findex diary-cyclic
calendar.texi(,2153) @smallexample
calendar.texi(,2154) %%(diary-cyclic 50 1 1 1990) Renew medication (%d%s time)
calendar.texi(,2155) @end smallexample
calendar.texi(,2156) 
calendar.texi(,2157) @noindent
calendar.texi(,2158) looks like this:
calendar.texi(,2159) 
calendar.texi(,2160) @smallexample
calendar.texi(,2161) Renew medication (5th time)
calendar.texi(,2162) @end smallexample
calendar.texi(,2163) 
calendar.texi(,2164) @noindent
calendar.texi(,2165) in the fancy diary display on September 8, 1990.
calendar.texi(,2166) 
calendar.texi(,2167)   The generality of sexp diary entries lets you specify any diary entry
calendar.texi(,2168) that you can describe algorithmically.  A sexp diary entry contains an
calendar.texi(,2169) expression that computes whether the entry applies to any given date.
calendar.texi(,2170) If its value is non-@code{nil}, the entry applies to that date;
calendar.texi(,2171) otherwise, it does not.  The expression can use the variable  @code{date}
calendar.texi(,2172) to find the date being considered; its value is a list (@var{month}
calendar.texi(,2173) @var{day} @var{year}) that refers to the Gregorian calendar.
calendar.texi(,2174) 
calendar.texi(,2175)   Suppose you get paid on the 21st of the month if it is a weekday, and
calendar.texi(,2176) on the Friday before if the 21st is on a weekend.  Here is how to write
calendar.texi(,2177) a sexp diary entry that matches those dates:
calendar.texi(,2178) 
calendar.texi(,2179) @smallexample
calendar.texi(,2180) &%%(let ((dayname (calendar-day-of-week date))
calendar.texi(,2181)          (day (car (cdr date))))
calendar.texi(,2182)       (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
calendar.texi(,2183)           (and (memq day '(19 20)) (= dayname 5)))
calendar.texi(,2184)          ) Pay check deposited
calendar.texi(,2185) @end smallexample
calendar.texi(,2186) 
calendar.texi(,2187) @noindent
calendar.texi(,2188) applies to just those dates.  This example illustrates how the sexp can
calendar.texi(,2189) depend on the variable @code{date}; this variable is a list (@var{month}
calendar.texi(,2190) @var{day} @var{year}) that gives the Gregorian date for which the diary
calendar.texi(,2191) entries are being found.  If the value of the expression is @code{t},
calendar.texi(,2192) the entry applies to that date.  If the expression evaluates to
calendar.texi(,2193) @code{nil}, the entry does @emph{not} apply to that date.
calendar.texi(,2194) 
calendar.texi(,2195)   The following sexp diary entries take advantage of the ability (in the fancy
calendar.texi(,2196) diary display) to concoct diary entries whose text varies based on the date:
calendar.texi(,2197) 
calendar.texi(,2198) @findex diary-sunrise-sunset
calendar.texi(,2199) @findex diary-phases-of-moon
calendar.texi(,2200) @findex diary-day-of-year
calendar.texi(,2201) @findex diary-iso-date
calendar.texi(,2202) @findex diary-julian-date
calendar.texi(,2203) @findex diary-astro-day-number
calendar.texi(,2204) @findex diary-hebrew-date
calendar.texi(,2205) @findex diary-islamic-date
calendar.texi(,2206) @findex diary-french-date
calendar.texi(,2207) @findex diary-mayan-date
calendar.texi(,2208) @table @code
calendar.texi(,2209) @item %%(diary-sunrise-sunset)
calendar.texi(,2210) Make a diary entry for the local times of today's sunrise and sunset.
calendar.texi(,2211) @item %%(diary-phases-of-moon)
calendar.texi(,2212) Make a diary entry for the phases (quarters) of the moon.
calendar.texi(,2213) @item %%(diary-day-of-year)
calendar.texi(,2214) Make a diary entry with today's day number in the current year and the number
calendar.texi(,2215) of days remaining in the current year.
calendar.texi(,2216) @item %%(diary-iso-date)
calendar.texi(,2217) Make a diary entry with today's equivalent ISO commercial date.
calendar.texi(,2218) @item %%(diary-julian-date)
calendar.texi(,2219) Make a diary entry with today's equivalent date on the Julian calendar.
calendar.texi(,2220) @item %%(diary-astro-day-number)
calendar.texi(,2221) Make a diary entry with today's equivalent astronomical (Julian) day number.
calendar.texi(,2222) @item %%(diary-hebrew-date)
calendar.texi(,2223) Make a diary entry with today's equivalent date on the Hebrew calendar.
calendar.texi(,2224) @item %%(diary-islamic-date)
calendar.texi(,2225) Make a diary entry with today's equivalent date on the Islamic calendar.
calendar.texi(,2226) @item %%(diary-french-date)
calendar.texi(,2227) Make a diary entry with today's equivalent date on the French Revolutionary
calendar.texi(,2228) calendar.
calendar.texi(,2229) @item %%(diary-mayan-date)
calendar.texi(,2230) Make a diary entry with today's equivalent date on the Mayan calendar.
calendar.texi(,2231) @end table
calendar.texi(,2232) 
calendar.texi(,2233) @noindent
calendar.texi(,2234) Thus including the diary entry
calendar.texi(,2235) 
calendar.texi(,2236) @smallexample
calendar.texi(,2237) &%%(diary-hebrew-date)
calendar.texi(,2238) @end smallexample
calendar.texi(,2239) 
calendar.texi(,2240) @noindent
calendar.texi(,2241) causes every day's diary display to contain the equivalent date on the
calendar.texi(,2242) Hebrew calendar, if you are using the fancy diary display.  (With simple
calendar.texi(,2243) diary display, the line @samp{&%%(diary-hebrew-date)} appears in the
calendar.texi(,2244) diary for any date, but does nothing particularly useful.)
calendar.texi(,2245) 
calendar.texi(,2246)   These functions can be used to construct sexp diary entries based on
calendar.texi(,2247) the Hebrew calendar in certain standard ways:
calendar.texi(,2248)  
calendar.texi(,2249) @cindex rosh hodesh
calendar.texi(,2250) @findex diary-rosh-hodesh
calendar.texi(,2251) @cindex parasha, weekly
calendar.texi(,2252) @findex diary-parasha
calendar.texi(,2253) @cindex candle lighting times
calendar.texi(,2254) @findex diary-sabbath-candles
calendar.texi(,2255) @cindex omer count
calendar.texi(,2256) @findex diary-omer
calendar.texi(,2257) @cindex yahrzeits
calendar.texi(,2258) @findex diary-yahrzeit
calendar.texi(,2259) @table @code
calendar.texi(,2260) @item %%(diary-rosh-hodesh)
calendar.texi(,2261) Make a diary entry that tells the occurrence and ritual announcement of each
calendar.texi(,2262) new Hebrew month.
calendar.texi(,2263) @item %%(diary-parasha)
calendar.texi(,2264) Make a Saturday diary entry that tells the weekly synagogue scripture reading.
calendar.texi(,2265) @item %%(diary-sabbath-candles)
calendar.texi(,2266) Make a Friday diary entry that tells the @emph{local time} of Sabbath
calendar.texi(,2267) candle lighting.
calendar.texi(,2268) @item %%(diary-omer)
calendar.texi(,2269) Make a diary entry that gives the omer count, when appropriate.
calendar.texi(,2270) @item %%(diary-yahrzeit @var{month} @var{day} @var{year}) @var{name}
calendar.texi(,2271) Make a diary entry marking the anniversary of a date of death.  The date
calendar.texi(,2272) is the @emph{Gregorian} (civil) date of death.  The diary entry appears
calendar.texi(,2273) on the proper Hebrew calendar anniversary and on the day before.  (In
calendar.texi(,2274) the European style, the order of the parameters is changed to @var{day},
calendar.texi(,2275) @var{month}, @var{year}.)
calendar.texi(,2276) @end table
calendar.texi(,2277) 
calendar.texi(,2278) @node Appt Customizing
calendar.texi(,2279) @subsubsection Customizing Appointment Reminders
calendar.texi(,2280) 
calendar.texi(,2281)   You can specify exactly how Emacs reminds you of an appointment, and
calendar.texi(,2282) how far in advance it begins doing so, by setting these variables:
calendar.texi(,2283) 
calendar.texi(,2284) @vindex appt-message-warning-time
calendar.texi(,2285) @vindex appt-audible
calendar.texi(,2286) @vindex appt-visible
calendar.texi(,2287) @vindex appt-display-mode-line
calendar.texi(,2288) @vindex appt-msg-window
calendar.texi(,2289) @vindex appt-display-duration
calendar.texi(,2290) @table @code
calendar.texi(,2291) @item appt-message-warning-time
calendar.texi(,2292) The time in minutes before an appointment that the reminder begins.  The
calendar.texi(,2293) default is 10 minutes.
calendar.texi(,2294) @item appt-audible
calendar.texi(,2295) If this is @code{t} (the default), Emacs rings the terminal bell for
calendar.texi(,2296) appointment reminders.
calendar.texi(,2297) @item appt-visible
calendar.texi(,2298) If this is @code{t} (the default), Emacs displays the appointment
calendar.texi(,2299) message in echo area.
calendar.texi(,2300) @item appt-display-mode-line
calendar.texi(,2301) If this is @code{t} (the default), Emacs displays the number of minutes
calendar.texi(,2302) to the appointment on the mode line.
calendar.texi(,2303) @item appt-msg-window
calendar.texi(,2304) If this is @code{t} (the default), Emacs displays the appointment
calendar.texi(,2305) message in another window.
calendar.texi(,2306) @item appt-display-duration
calendar.texi(,2307) The number of seconds an appointment message is displayed.  The default
calendar.texi(,2308) is 5 seconds.
calendar.texi(,2309) @end table
misc.texi(,1) 
misc.texi(,8) 
misc.texi(,9) @node Sorting, Shell, Calendar/Diary, Top
misc.texi(,10) @section Sorting Text
misc.texi(,11) @cindex sorting
misc.texi(,12) 
misc.texi(,13)   XEmacs provides several commands for sorting text in a buffer.  All
misc.texi(,14) operate on the contents of the region (the text between point and the
misc.texi(,15) mark).  They divide the text of the region into many @dfn{sort records},
misc.texi(,16) identify a @dfn{sort key} for each record, and then reorder the records
misc.texi(,17) using the order determined by the sort keys.  The records are ordered so
misc.texi(,18) that their keys are in alphabetical order, or, for numerical sorting, in
misc.texi(,19) numerical order.  In alphabetical sorting, all upper-case letters `A'
misc.texi(,20) through `Z' come before lower-case `a', in accordance with the ASCII
misc.texi(,21) character sequence.
misc.texi(,22) 
misc.texi(,23)   The sort commands differ in how they divide the text into sort
misc.texi(,24) records and in which part of each record they use as the sort key.  Most of
misc.texi(,25) the commands make each line a separate sort record, but some commands use
misc.texi(,26) paragraphs or pages as sort records.  Most of the sort commands use each
misc.texi(,27) entire sort record as its own sort key, but some use only a portion of the
misc.texi(,28) record as the sort key.
misc.texi(,29) 
misc.texi(,30) @findex sort-lines
misc.texi(,31) @findex sort-paragraphs
misc.texi(,32) @findex sort-pages
misc.texi(,33) @findex sort-fields
misc.texi(,34) @findex sort-numeric-fields
misc.texi(,35) @table @kbd
misc.texi(,36) @item M-x sort-lines
misc.texi(,37) Divide the region into lines and sort by comparing the entire
misc.texi(,38) text of a line.  A prefix argument means sort in descending order.
misc.texi(,39) 
misc.texi(,40) @item M-x sort-paragraphs
misc.texi(,41) Divide the region into paragraphs and sort by comparing the entire
misc.texi(,42) text of a paragraph (except for leading blank lines).  A prefix
misc.texi(,43) argument means sort in descending order.
misc.texi(,44) 
misc.texi(,45) @item M-x sort-pages
misc.texi(,46) Divide the region into pages and sort by comparing the entire
misc.texi(,47) text of a page (except for leading blank lines).  A prefix
misc.texi(,48) argument means sort in descending order.
misc.texi(,49) 
misc.texi(,50) @item M-x sort-fields
misc.texi(,51) Divide the region into lines and sort by comparing the contents of
misc.texi(,52) one field in each line.  Fields are defined as separated by
misc.texi(,53) whitespace, so the first run of consecutive non-whitespace characters
misc.texi(,54) in a line constitutes field 1, the second such run constitutes field
misc.texi(,55) 2, etc.
misc.texi(,56) 
misc.texi(,57) You specify which field to sort by with a numeric argument: 1 to sort
misc.texi(,58) by field 1, etc.  A negative argument means sort in descending
misc.texi(,59) order.  Thus, minus 2 means sort by field 2 in reverse-alphabetical
misc.texi(,60) order.
misc.texi(,61) 
misc.texi(,62) @item M-x sort-numeric-fields
misc.texi(,63) Like @kbd{M-x sort-fields}, except the specified field is converted
misc.texi(,64) to a number for each line and the numbers are compared.  @samp{10}
misc.texi(,65) comes before @samp{2} when considered as text, but after it when
misc.texi(,66) considered as a number.
misc.texi(,67) 
misc.texi(,68) @item M-x sort-columns
misc.texi(,69) Like @kbd{M-x sort-fields}, except that the text within each line
misc.texi(,70) used for comparison comes from a fixed range of columns.  An explanation
misc.texi(,71) is given below.
misc.texi(,72) @end table
misc.texi(,73) 
misc.texi(,74) For example, if the buffer contains:
misc.texi(,75) 
misc.texi(,76) @smallexample
misc.texi(,77) On systems where clash detection (locking of files being edited) is
misc.texi(,78) implemented, XEmacs also checks the first time you modify a buffer
misc.texi(,79) whether the file has changed on disk since it was last visited or
misc.texi(,80) saved.  If it has, you are asked to confirm that you want to change
misc.texi(,81) the buffer.
misc.texi(,82) @end smallexample
misc.texi(,83) 
misc.texi(,84) @noindent
misc.texi(,85) then if you apply @kbd{M-x sort-lines} to the entire buffer you get:
misc.texi(,86) 
misc.texi(,87) @smallexample
misc.texi(,88) On systems where clash detection (locking of files being edited) is
misc.texi(,89) implemented, XEmacs also checks the first time you modify a buffer
misc.texi(,90) saved.  If it has, you are asked to confirm that you want to change
misc.texi(,91) the buffer.
misc.texi(,92) whether the file has changed on disk since it was last visited or
misc.texi(,93) @end smallexample
misc.texi(,94) 
misc.texi(,95) @noindent
misc.texi(,96) where the upper case `O' comes before all lower case letters.  If you apply
misc.texi(,97) instead @kbd{C-u 2 M-x sort-fields} you get:
misc.texi(,98) 
misc.texi(,99) @smallexample
misc.texi(,100) saved.  If it has, you are asked to confirm that you want to change
misc.texi(,101) implemented, XEmacs also checks the first time you modify a buffer
misc.texi(,102) the buffer.
misc.texi(,103) On systems where clash detection (locking of files being edited) is
misc.texi(,104) whether the file has changed on disk since it was last visited or
misc.texi(,105) @end smallexample
misc.texi(,106) 
misc.texi(,107) @noindent
misc.texi(,108) where the sort keys were @samp{If}, @samp{XEmacs}, @samp{buffer},
misc.texi(,109) @samp{systems}, and @samp{the}.@refill
misc.texi(,110) 
misc.texi(,111) @findex sort-columns
misc.texi(,112)   @kbd{M-x sort-columns} requires more explanation.  You specify the
misc.texi(,113) columns by putting point at one of the columns and the mark at the other
misc.texi(,114) column.  Because this means you cannot put point or the mark at the
misc.texi(,115) beginning of the first line to sort, this command uses an unusual
misc.texi(,116) definition of `region': all of the line point is in is considered part of
misc.texi(,117) the region, and so is all of the line the mark is in.
misc.texi(,118) 
misc.texi(,119)   For example, to sort a table by information found in columns 10 to 15,
misc.texi(,120) you could put the mark on column 10 in the first line of the table, and
misc.texi(,121) point on column 15 in the last line of the table, and then use this command.
misc.texi(,122) Or you could put the mark on column 15 in the first line and point on
misc.texi(,123) column 10 in the last line.
misc.texi(,124) 
misc.texi(,125)   This can be thought of as sorting the rectangle specified by point and
misc.texi(,126) the mark, except that the text on each line to the left or right of the
misc.texi(,127) rectangle moves along with the text inside the rectangle.
misc.texi(,128) @xref{Rectangles}.
misc.texi(,129) 
misc.texi(,130) @node Shell, Narrowing, Sorting, Top
misc.texi(,131) @section Running Shell Commands from XEmacs
misc.texi(,132) @cindex subshell
misc.texi(,133) @cindex shell commands
misc.texi(,134) 
misc.texi(,135)   XEmacs has commands for passing single command lines to inferior shell
misc.texi(,136) processes; it can also run a shell interactively with input and output to
misc.texi(,137) an XEmacs buffer @samp{*shell*}.
misc.texi(,138) 
misc.texi(,139) @table @kbd
misc.texi(,140) @item M-!
misc.texi(,141) Run a specified shell command line and display the output
misc.texi(,142) (@code{shell-command}).
misc.texi(,143) @item M-|
misc.texi(,144) Run a specified shell command line with region contents as input;
misc.texi(,145) optionally replace the region with the output
misc.texi(,146) (@code{shell-command-on-region}).
misc.texi(,147) @item M-x shell
misc.texi(,148) Run a subshell with input and output through an XEmacs buffer.
misc.texi(,149) You can then give commands interactively.
misc.texi(,150) @item M-x term
misc.texi(,151) Run a subshell with input and output through an XEmacs buffer.
misc.texi(,152) You can then give commands interactively.
misc.texi(,153) Full terminal emulation is available.
misc.texi(,154) @end table
misc.texi(,155) 
misc.texi(,156) @menu
misc.texi(,157) * Single Shell::         How to run one shell command and return.
misc.texi(,158) * Interactive Shell::    Permanent shell taking input via XEmacs.
misc.texi(,159) * Shell Mode::           Special XEmacs commands used with permanent shell.
misc.texi(,160) * Terminal emulator::    An XEmacs window as a terminal emulator.
misc.texi(,161) * Term Mode::            Special XEmacs commands used in Term mode.
misc.texi(,162) * Paging in Term::       Paging in the terminal emulator.
misc.texi(,163) @end menu
misc.texi(,164) 
misc.texi(,165) @node Single Shell, Interactive Shell, Shell, Shell
misc.texi(,166) @subsection Single Shell Commands
misc.texi(,167) 
misc.texi(,168) @kindex M-!
misc.texi(,169) @findex shell-command
misc.texi(,170)   @kbd{M-!} (@code{shell-command}) reads a line of text using the
misc.texi(,171) minibuffer and creates an inferior shell to execute the line as a command.
misc.texi(,172) Standard input from the command comes from the null device.  If the shell
misc.texi(,173) command produces any output, the output goes to an XEmacs buffer named
misc.texi(,174) @samp{*Shell Command Output*}, which is displayed in another window but not
misc.texi(,175) selected.  A numeric argument, as in @kbd{M-1 M-!}, directs this command to
misc.texi(,176) insert any output into the current buffer.  In that case, point is left
misc.texi(,177) before the output and the mark is set after the output.
misc.texi(,178) 
misc.texi(,179) @kindex M-|
misc.texi(,180) @findex shell-command-on-region
misc.texi(,181)   @kbd{M-|} (@code{shell-command-on-region}) is like @kbd{M-!} but passes
misc.texi(,182) the contents of the region as input to the shell command, instead of no
misc.texi(,183) input.  If a numeric argument is used to direct  output to the current
misc.texi(,184) buffer, then the old region is deleted first and the output replaces it as
misc.texi(,185) the contents of the region.@refill
misc.texi(,186) 
misc.texi(,187) @vindex shell-file-name
misc.texi(,188) @cindex environment
misc.texi(,189)   Both @kbd{M-!} and @kbd{M-|} use @code{shell-file-name} to specify the
misc.texi(,190) shell to use.  This variable is initialized based on your @code{SHELL}
misc.texi(,191) environment variable when you start XEmacs.  If the file name does not
misc.texi(,192) specify a directory, the directories in the list @code{exec-path} are
misc.texi(,193) searched; this list is initialized based on the @code{PATH} environment
misc.texi(,194) variable when you start XEmacs.  You can override either or both of these
misc.texi(,195) default initializations in your init file. @xref{Init File}.@refill
misc.texi(,196) 
misc.texi(,197)   When you use @kbd{M-!} and @kbd{M-|}, XEmacs has to wait until the
misc.texi(,198) shell command completes.  You can quit with @kbd{C-g}; that terminates
misc.texi(,199) the shell command.
misc.texi(,200) 
misc.texi(,201) @node Interactive Shell, Shell Mode, Single Shell, Shell
misc.texi(,202) @subsection Interactive Inferior Shell
misc.texi(,203) 
misc.texi(,204) @findex shell
misc.texi(,205)   To run a subshell interactively with its typescript in an XEmacs
misc.texi(,206) buffer, use @kbd{M-x shell}.  This creates (or reuses) a buffer named
misc.texi(,207) @samp{*shell*} and runs a subshell with input coming from and output going
misc.texi(,208) to that buffer.  That is to say, any ``terminal output'' from the subshell
misc.texi(,209) will go into the buffer, advancing point, and any ``terminal input'' for
misc.texi(,210) the subshell comes from text in the buffer.  To give input to the subshell,
misc.texi(,211) go to the end of the buffer and type the input, terminated by @key{RET}.
misc.texi(,212) 
misc.texi(,213)   XEmacs does not wait for the subshell to do anything.  You can switch
misc.texi(,214) windows or buffers and edit them while the shell is waiting, or while it is
misc.texi(,215) running a command.  Output from the subshell waits until XEmacs has time to
misc.texi(,216) process it; this happens whenever XEmacs is waiting for keyboard input or
misc.texi(,217) for time to elapse.
misc.texi(,218) 
misc.texi(,219)  To get multiple subshells, change the name of buffer
misc.texi(,220) @samp{*shell*} to something different by using @kbd{M-x rename-buffer}.  The
misc.texi(,221) next use of @kbd{M-x shell} creates a new buffer @samp{*shell*} with
misc.texi(,222) its own subshell.  By renaming this buffer as well you can create a third
misc.texi(,223) one, and so on.  All the subshells run independently and in parallel.
misc.texi(,224) 
misc.texi(,225) @vindex explicit-shell-file-name
misc.texi(,226)   The file name used to load the subshell is the value of the variable
misc.texi(,227) @code{explicit-shell-file-name}, if that is non-@code{nil}.  Otherwise, the
misc.texi(,228) environment variable @code{ESHELL} is used, or the environment variable
misc.texi(,229) @code{SHELL} if there is no @code{ESHELL}.  If the file name specified
misc.texi(,230) is relative, the directories in the list @code{exec-path} are searched
misc.texi(,231) (@pxref{Single Shell,Single Shell Commands}).@refill
misc.texi(,232) 
misc.texi(,233)   As soon as the subshell is started, it is sent as input the contents of
misc.texi(,234) the file @file{~/.emacs_@var{shellname}}, if that file exists, where
misc.texi(,235) @var{shellname} is the name of the file that the shell was loaded from.
misc.texi(,236) For example, if you use @code{csh}, the file sent to it is
misc.texi(,237) @file{~/.emacs_csh}.@refill
misc.texi(,238) 
misc.texi(,239) @vindex shell-pushd-regexp
misc.texi(,240) @vindex shell-popd-regexp
misc.texi(,241) @vindex shell-cd-regexp
misc.texi(,242)   @code{cd}, @code{pushd}, and @code{popd} commands given to the inferior
misc.texi(,243) shell are watched by XEmacs so it can keep the @samp{*shell*} buffer's
misc.texi(,244) default directory the same as the shell's working directory.  These
misc.texi(,245) commands are recognized syntactically by examining lines of input that are
misc.texi(,246) sent.  If you use aliases for these commands, you can tell XEmacs to
misc.texi(,247) recognize them also.  For example, if the value of the variable
misc.texi(,248) @code{shell-pushd-regexp} matches the beginning of a shell command line,
misc.texi(,249) that line is regarded as a @code{pushd} command.  Change this variable when
misc.texi(,250) you add aliases for @samp{pushd}.  Likewise, @code{shell-popd-regexp} and
misc.texi(,251) @code{shell-cd-regexp} are used to recognize commands with the meaning of
misc.texi(,252) @samp{popd} and @samp{cd}.@refill
misc.texi(,253) 
misc.texi(,254) @kbd{M-x shell-resync-dirs} queries the shell and resynchronizes XEmacs'
misc.texi(,255) idea of what the current directory stack is.  @kbd{M-x
misc.texi(,256) shell-dirtrack-toggle} turns directory tracking on and off.
misc.texi(,257) 
misc.texi(,258) @vindex input-ring-size
misc.texi(,259) XEmacs keeps a history of the most recent commands you have typed in the
misc.texi(,260) @samp{*shell*} buffer.  If you are at the beginning of a shell command
misc.texi(,261) line and type @key{M-p}, the previous shell input is inserted into the
misc.texi(,262) buffer before point.  Immediately typing @key{M-p} again deletes that
misc.texi(,263) input and inserts the one before it.  By repeating @key{M-p} you can
misc.texi(,264) move backward through your commands until you find one you want to
misc.texi(,265) repeat.  You may then edit the command before typing @key{RET} if you
misc.texi(,266) wish. @key{M-n} moves forward through the command history, in case you
misc.texi(,267) moved backward past the one you wanted while using @key{M-p}.  If you
misc.texi(,268) type the first few characters of a previous command and then type
misc.texi(,269) @key{M-p}, the most recent shell input starting with those characters is
misc.texi(,270) inserted.  This can be very convenient when you are repeating a sequence
misc.texi(,271) of shell commands.  The variable @code{input-ring-size} controls how
misc.texi(,272) many commands are saved in your input history.  The default is 30.
misc.texi(,273) 
misc.texi(,274) 
misc.texi(,275) @node Shell Mode, Terminal emulator, Interactive Shell, Shell
misc.texi(,276) @subsection Shell Mode
misc.texi(,277) 
misc.texi(,278) @cindex Shell mode
misc.texi(,279)   The shell buffer uses Shell mode, which defines several special keys
misc.texi(,280) attached to the @kbd{C-c} prefix.  They are chosen to resemble the usual
misc.texi(,281) editing and job control characters present in shells that are not under
misc.texi(,282) XEmacs, except that you must type @kbd{C-c} first.  Here is a list
misc.texi(,283) of the special key bindings of Shell mode:
misc.texi(,284) 
misc.texi(,285) @kindex RET (Shell mode)
misc.texi(,286) @kindex C-c C-d (Shell mode)
misc.texi(,287) @kindex C-d (Shell mode)
misc.texi(,288) @kindex C-c C-u (Shell mode)
misc.texi(,289) @kindex C-c C-w (Shell mode)
misc.texi(,290) @kindex C-c C-c (Shell mode)
misc.texi(,291) @kindex C-c C-z (Shell mode)
misc.texi(,292) @kindex C-c C-\ (Shell mode)
misc.texi(,293) @kindex C-c C-o (Shell mode)
misc.texi(,294) @kindex C-c C-r (Shell mode)
misc.texi(,295) @kindex C-c C-y (Shell mode)
misc.texi(,296) @kindex M-p (Shell mode)
misc.texi(,297) @kindex M-n (Shell mode)
misc.texi(,298) @kindex TAB (Shell mode)
misc.texi(,299) @findex send-shell-input
misc.texi(,300) @findex shell-send-eof
misc.texi(,301) @findex comint-delchar-or-maybe-eof
misc.texi(,302) @findex interrupt-shell-subjob
misc.texi(,303) @findex stop-shell-subjob
misc.texi(,304) @findex quit-shell-subjob
misc.texi(,305) @findex kill-output-from-shell
misc.texi(,306) @findex show-output-from-shell
misc.texi(,307) @findex copy-last-shell-input
misc.texi(,308) @findex comint-previous-input
misc.texi(,309) @findex comint-next-input
misc.texi(,310) @findex comint-dynamic-complete
misc.texi(,311) @vindex shell-prompt-pattern
misc.texi(,312) @table @kbd
misc.texi(,313) @item @key{RET}
misc.texi(,314) At end of buffer send line as input; otherwise, copy current line to end of
misc.texi(,315) buffer and send it (@code{send-shell-input}).  When a line is copied, any
misc.texi(,316) text at the beginning of the line that matches the variable
misc.texi(,317) @code{shell-prompt-pattern} is left out; this variable's value should be a
misc.texi(,318) regexp string that matches the prompts that you use in your subshell.
misc.texi(,319) @item C-c C-d
misc.texi(,320) Send end-of-file as input, probably causing the shell or its current
misc.texi(,321) subjob to finish (@code{shell-send-eof}).
misc.texi(,322) @item C-d
misc.texi(,323) If point is not at the end of the buffer, delete the next character just
misc.texi(,324) like most other modes.  If point is at the end of the buffer, send
misc.texi(,325) end-of-file as input, instead of generating an error as in other modes
misc.texi(,326) (@code{comint-delchar-or-maybe-eof}).
misc.texi(,327) @item C-c C-u
misc.texi(,328) Kill all text that has yet to be sent as input (@code{kill-shell-input}).
misc.texi(,329) @item C-c C-w
misc.texi(,330) Kill a word before point (@code{backward-kill-word}).
misc.texi(,331) @item C-c C-c
misc.texi(,332) Interrupt the shell or its current subjob if any
misc.texi(,333) (@code{interrupt-shell-subjob}).
misc.texi(,334) @item C-c C-z
misc.texi(,335) Stop the shell or its current subjob if any (@code{stop-shell-subjob}).
misc.texi(,336) @item C-c C-\
misc.texi(,337) Send quit signal to the shell or its current subjob if any
misc.texi(,338) (@code{quit-shell-subjob}).
misc.texi(,339) @item C-c C-o
misc.texi(,340) Delete last batch of output from shell (@code{kill-output-from-shell}).
misc.texi(,341) @item C-c C-r
misc.texi(,342) Scroll top of last batch of output to top of window
misc.texi(,343) (@code{show-output-from-shell}).
misc.texi(,344) @item C-c C-y
misc.texi(,345) Copy the previous bunch of shell input and insert it into the
misc.texi(,346) buffer before point (@code{copy-last-shell-input}).  No final newline
misc.texi(,347) is inserted, and the input copied is not resubmitted until you type
misc.texi(,348) @key{RET}.
misc.texi(,349) @item M-p
misc.texi(,350) Move backward through the input history.  Search for a matching command
misc.texi(,351) if you have typed the beginning of a command (@code{comint-previous-input}).
misc.texi(,352) @item M-n
misc.texi(,353) Move forward through the input history.  Useful when you are
misc.texi(,354) using @key{M-p} quickly and go past the desired command 
misc.texi(,355) (@code{comint-next-input}).
misc.texi(,356) @item @key{TAB}
misc.texi(,357) Complete the file name preceding point (@code{comint-dynamic-complete}).
misc.texi(,358) @end table
misc.texi(,359) 
misc.texi(,360) @node Terminal emulator, Term Mode, Shell Mode, Shell
misc.texi(,361) @subsection Interactive Inferior Shell with Terminal Emulator
misc.texi(,362) @findex term
misc.texi(,363) 
misc.texi(,364)   To run a subshell in a terminal emulator, putting its typescript in an XEmacs
misc.texi(,365) buffer, use @kbd{M-x term}.  This creates (or reuses) a buffer named
misc.texi(,366) @samp{*term*} and runs a subshell with input coming from your keyboard and
misc.texi(,367) output going to that buffer.
misc.texi(,368) 
misc.texi(,369) All the normal keys that you type are sent without any interpretation
misc.texi(,370) by XEmacs directly to the subshell, as ``terminal input.''
misc.texi(,371) Any ``echo'' of your input is the responsibility of the subshell.
misc.texi(,372) (The exception is the terminal escape character,
misc.texi(,373) which by default is @kbd{C-c}. @pxref{Term Mode}.)
misc.texi(,374) Any ``terminal output'' from the subshell goes into the buffer,
misc.texi(,375) advancing point.
misc.texi(,376) 
misc.texi(,377)   Some programs (such as XEmacs itself) need to control the
misc.texi(,378) appearance on the terminal screen in detail.  They do this by
misc.texi(,379) sending special control codes.  The exact control
misc.texi(,380) codes needed vary from terminal to terminal, but nowadays
misc.texi(,381) most terminals and terminal emulators (including xterm)
misc.texi(,382) understand the so-called "ANSI escape sequences" (first
misc.texi(,383) popularized by the Digital's VT100 family of terminal).
misc.texi(,384) The term mode also understands these escape sequences,
misc.texi(,385) and for each control code does the appropriate thing
misc.texi(,386) to change the buffer so that the appearance of the window
misc.texi(,387) will match what it would be on a real terminal.
misc.texi(,388) Thus you can actually run XEmacs inside an XEmacs Term window!
misc.texi(,389) 
misc.texi(,390)    XEmacs does not wait for the subshell to do anything.  You can switch
misc.texi(,391) windows or buffers and edit them while the shell is waiting, or while
misc.texi(,392) it is running a command.  Output from the subshell waits until XEmacs
misc.texi(,393) has time to process it; this happens whenever XEmacs is waiting for
misc.texi(,394) keyboard input or for time to elapse.
misc.texi(,395) 
misc.texi(,396)    To make multiple terminal emulators, rename the buffer @samp{*term*}
misc.texi(,397) to something different using @kbd{M-x rename-uniquely},
misc.texi(,398) just as with Shell mode.
misc.texi(,399) 
misc.texi(,400)    The file name used to load the subshell is determined
misc.texi(,401) the same way as for Shell mode.
misc.texi(,402) 
misc.texi(,403) Unlike Shell mode, Term mode does not track the current directory
misc.texi(,404) by examining your input.  Instead, if you use a programmable
misc.texi(,405) shell, you can have it tell Term what the current directory is.
misc.texi(,406) This is done automatically by bash for version 1.15 and later.
misc.texi(,407) 
misc.texi(,408) @node Term Mode, Paging in Term, Terminal emulator, Shell
misc.texi(,409) @subsection Term Mode
misc.texi(,410) @cindex Term mode
misc.texi(,411) @cindex mode, Term
misc.texi(,412) 
misc.texi(,413)   Term uses Term mode, which has two input modes:
misc.texi(,414) In line mode, Term basically acts like Shell mode.  @xref{Shell Mode}.
misc.texi(,415) In Char mode, each character is sent directly to the inferior subshell,
misc.texi(,416) except for the Term escape character, normally @kbd{C-c}.
misc.texi(,417) 
misc.texi(,418) To switch between line and char mode, use these commands:
misc.texi(,419) @table @kbd
misc.texi(,420) @kindex C-c C-j @r{(Term mode)}
misc.texi(,421) findex term-char-mode
misc.texi(,422) @item C-c C-j
misc.texi(,423) Switch to line mode.  Do nothing if already in line mode.
misc.texi(,424) 
misc.texi(,425) @kindex C-c C-k @r{(Term mode)}
misc.texi(,426) @findex term-line-mode
misc.texi(,427) @item C-c C-k
misc.texi(,428) Switch to char mode.  Do nothing if already in char mode.
misc.texi(,429) @end table
misc.texi(,430) 
misc.texi(,431) The following commands are only available in Char mode:
misc.texi(,432) @table @kbd
misc.texi(,433) @item C-c C-c
misc.texi(,434) Send a literal @key{C-c} to the sub-shell.
misc.texi(,435) 
misc.texi(,436) @item C-c C-x
misc.texi(,437) A prefix command to conveniently access the global @key{C-x} commands.
misc.texi(,438) For example, @kbd{C-c C-x o} invokes the global binding of
misc.texi(,439) @kbd{C-x o}, which is normally @samp{other-window}.
misc.texi(,440) @end table
misc.texi(,441) 
misc.texi(,442) @node Paging in Term,, Term Mode, Shell
misc.texi(,443) @subsection Paging in the terminal emulator
misc.texi(,444) 
misc.texi(,445) Term mode has a pager feature.  When the pager is enabled,
misc.texi(,446) term mode will pause at the end of each screenful.
misc.texi(,447) 
misc.texi(,448) @table @kbd
misc.texi(,449) @kindex C-c C-q @r{(Term mode)}
misc.texi(,450) @findex term-pager-toggle
misc.texi(,451) @item C-c C-q
misc.texi(,452) Toggles the pager feature:  Disables the pager if it is enabled,
misc.texi(,453) and vice versa.  This works in both line and char modes.
misc.texi(,454) If the pager enabled, the mode-line contains the word @samp{page}.
misc.texi(,455) @end table
misc.texi(,456) 
misc.texi(,457) If the pager is enabled, and Term receives more than a screenful
misc.texi(,458) of output since your last input, Term will enter More break mode.
misc.texi(,459) This is indicated by @samp{**MORE**} in the mode-line.
misc.texi(,460) Type a @kbd{Space} to display the next screenful of output.
misc.texi(,461) Type @kbd{?} to see your other options.  The interface is similar
misc.texi(,462) to the Unix @samp{more} program.
misc.texi(,463) 
misc.texi(,464) @node Narrowing, Hardcopy, Shell, Top
misc.texi(,465) @section Narrowing
misc.texi(,466) @cindex widening
misc.texi(,467) @cindex restriction
misc.texi(,468) @cindex narrowing
misc.texi(,469) 
misc.texi(,470)   @dfn{Narrowing} means focusing in on some portion of the buffer, making
misc.texi(,471) the rest temporarily invisible and inaccessible.  Cancelling the narrowing
misc.texi(,472) and making the entire buffer once again visible is called @dfn{widening}.
misc.texi(,473) The amount of narrowing in effect in a buffer at any time is called the
misc.texi(,474) buffer's @dfn{restriction}.
misc.texi(,475) 
misc.texi(,476) @c WideCommands
misc.texi(,477) @table @kbd
misc.texi(,478) @item C-x n n
misc.texi(,479) Narrow down to between point and mark (@code{narrow-to-region}).
misc.texi(,480) @item C-x n w
misc.texi(,481) Widen to make the entire buffer visible again (@code{widen}).
misc.texi(,482) @end table
misc.texi(,483) 
misc.texi(,484)   Narrowing sometimes makes it easier to concentrate on a single
misc.texi(,485) subroutine or paragraph by eliminating clutter.  It can also be used to
misc.texi(,486) restrict the range of operation of a replace command or repeating
misc.texi(,487) keyboard macro.  The word @samp{Narrow} appears in the mode line
misc.texi(,488) whenever narrowing is in effect.  When you have narrowed to a part of the
misc.texi(,489) buffer, that part appears to be all there is.  You can't see the rest,
misc.texi(,490) can't move into it (motion commands won't go outside the visible part),
misc.texi(,491) and can't change it in any way.  However, the invisible text is not
misc.texi(,492) gone; if you save the file, it will be saved.
misc.texi(,493) 
misc.texi(,494) @kindex C-x n n
misc.texi(,495) @findex narrow-to-region
misc.texi(,496)   The primary narrowing command is @kbd{C-x n n} (@code{narrow-to-region}).
misc.texi(,497) It sets the current buffer's restrictions so that the text in the current
misc.texi(,498) region remains visible but all text before the region or after the region
misc.texi(,499) is invisible.  Point and mark do not change.
misc.texi(,500) 
misc.texi(,501)   Because narrowing can easily confuse users who do not understand it,
misc.texi(,502) @code{narrow-to-region} is normally a disabled command.  Attempting to use
misc.texi(,503) this command asks for confirmation and gives you the option of enabling it;
misc.texi(,504) once you enable the command, confirmation will no longer be required.  @xref{Disabling}.
misc.texi(,505) 
misc.texi(,506) @kindex C-x n w
misc.texi(,507) @findex widen
misc.texi(,508)    To undo narrowing, use @kbd{C-x n w} (@code{widen}).  This makes all
misc.texi(,509) text in the buffer accessible again.
misc.texi(,510) 
misc.texi(,511)    Use the @kbd{C-x =} command to get information on what part of the
misc.texi(,512) buffer you narrowed down.  @xref{Position Info}.
misc.texi(,513) 
misc.texi(,514) @node Hardcopy, Recursive Edit, Narrowing, Top
misc.texi(,515) @section Hardcopy Output
misc.texi(,516) @cindex hardcopy
misc.texi(,517) 
misc.texi(,518)   The XEmacs commands for making hardcopy derive their names from the
misc.texi(,519) Unix commands @samp{print} and @samp{lpr}.
misc.texi(,520) 
misc.texi(,521) @table @kbd
misc.texi(,522) @item M-x print-buffer
misc.texi(,523) Print hardcopy of current buffer using Unix command @samp{print}
misc.texi(,524) @*(@samp{lpr -p}).  This command adds page headings containing the file name
misc.texi(,525) and page number.
misc.texi(,526) @item M-x lpr-buffer
misc.texi(,527) Print hardcopy of current buffer using Unix command @samp{lpr}.
misc.texi(,528) This command does not add page headings.
misc.texi(,529) @item M-x print-region
misc.texi(,530) Like @code{print-buffer}, but prints only the current region.
misc.texi(,531) @item M-x lpr-region
misc.texi(,532) Like @code{lpr-buffer}, but prints only the current region.
misc.texi(,533) @end table
misc.texi(,534) 
misc.texi(,535) @findex print-buffer
misc.texi(,536) @findex print-region
misc.texi(,537) @findex lpr-buffer
misc.texi(,538) @findex lpr-region
misc.texi(,539) @vindex lpr-switches
misc.texi(,540)   All the hardcopy commands pass extra switches to the @code{lpr} program
misc.texi(,541) based on the value of the variable @code{lpr-switches}.  Its value should
misc.texi(,542) be a list of strings, each string a switch starting with @samp{-}.  For
misc.texi(,543) example, the value could be @code{("-Pfoo")} to print on printer
misc.texi(,544) @samp{foo}.
misc.texi(,545) 
misc.texi(,546) @node Recursive Edit, Dissociated Press, Hardcopy, Top
misc.texi(,547) @section Recursive Editing Levels
misc.texi(,548) @cindex recursive editing level
misc.texi(,549) @cindex editing level, recursive
misc.texi(,550) 
misc.texi(,551)   A @dfn{recursive edit} is a situation in which you are using XEmacs
misc.texi(,552) commands to perform arbitrary editing while in the middle of another
misc.texi(,553) XEmacs command.  For example, when you type @kbd{C-r} inside a
misc.texi(,554) @code{query-replace}, you enter a recursive edit in which you can change
misc.texi(,555) the current buffer.  When you exit from the recursive edit, you go back to
misc.texi(,556) the @code{query-replace}.
misc.texi(,557) 
misc.texi(,558) @kindex C-M-c
misc.texi(,559) @findex exit-recursive-edit
misc.texi(,560) @cindex exiting
misc.texi(,561)   @dfn{Exiting} a recursive edit means returning to the unfinished
misc.texi(,562) command, which continues execution.  For example, exiting the recursive
misc.texi(,563) edit requested by @kbd{C-r} in @code{query-replace} causes query replacing
misc.texi(,564) to resume.  Exiting is done with @kbd{C-M-c} (@code{exit-recursive-edit}).
misc.texi(,565) 
misc.texi(,566) @kindex C-]
misc.texi(,567) @findex abort-recursive-edit
misc.texi(,568)   You can also @dfn{abort} a recursive edit.  This is like exiting, but
misc.texi(,569) also quits the unfinished command immediately.  Use the command @kbd{C-]}
misc.texi(,570) (@code{abort-recursive-edit}) for this.  @xref{Quitting}.
misc.texi(,571) 
misc.texi(,572)   The mode line shows you when you are in a recursive edit by displaying
misc.texi(,573) square brackets around the parentheses that always surround the major
misc.texi(,574) and minor mode names.  Every window's mode line shows the square
misc.texi(,575) brackets, since XEmacs as a whole, rather than any particular buffer, is
misc.texi(,576) in a recursive edit.
misc.texi(,577) 
misc.texi(,578) @findex top-level
misc.texi(,579)   It is possible to be in recursive edits within recursive edits.  For
misc.texi(,580) example, after typing @kbd{C-r} in a @code{query-replace}, you might
misc.texi(,581) type a command that entered the debugger.  In such a case, two or
misc.texi(,582) more sets of square brackets appear in the mode line(s).  Exiting the
misc.texi(,583) inner recursive edit (here with the debugger @kbd{c} command)
misc.texi(,584) resumes the query-replace command where it called the debugger.  After
misc.texi(,585) the end of the query-replace command, you would be able to exit the
misc.texi(,586) first recursive edit.  Aborting exits only one level of recursive edit;
misc.texi(,587) it returns to the command level of the previous recursive edit.  You can
misc.texi(,588) then abort that one as well.
misc.texi(,589) 
misc.texi(,590)   The command @kbd{M-x top-level} aborts all levels of
misc.texi(,591) recursive edits, returning immediately to the top level command reader.
misc.texi(,592) 
misc.texi(,593)   The text you edit inside the recursive edit need not be the same text
misc.texi(,594) that you were editing at top level.  If the command that invokes the
misc.texi(,595) recursive edit selects a different buffer first, that is the buffer you
misc.texi(,596) will edit recursively.  You can switch buffers within the recursive edit
misc.texi(,597) in the normal manner (as long as the buffer-switching keys have not been
misc.texi(,598) rebound).  While you could theoretically do the rest of your editing
misc.texi(,599) inside the recursive edit, including visiting files, this could have
misc.texi(,600) surprising effects (such as stack overflow) from time to time.  It is
misc.texi(,601) best if you always exit or abort a recursive edit when you no longer
misc.texi(,602) need it.
misc.texi(,603) 
misc.texi(,604)   In general, XEmacs tries to avoid using recursive edits.  It is
misc.texi(,605) usually preferable to allow users to switch among the possible editing
misc.texi(,606) modes in any order they like.  With recursive edits, the only way to get
misc.texi(,607) to another state is to go ``back'' to the state that the recursive edit
misc.texi(,608) was invoked from.
misc.texi(,609) 
misc.texi(,610) @node Dissociated Press, CONX, Recursive Edit, Top
misc.texi(,611) @section Dissociated Press
misc.texi(,612) 
misc.texi(,613) @findex dissociated-press
misc.texi(,614)   @kbd{M-x dissociated-press} is a command for scrambling a file of text
misc.texi(,615) either word by word or character by character.  Starting from a buffer of
misc.texi(,616) straight English, it produces extremely amusing output.  The input comes
misc.texi(,617) from the current XEmacs buffer.  Dissociated Press writes its output in a
misc.texi(,618) buffer named @samp{*Dissociation*}, and redisplays that buffer after every
misc.texi(,619) couple of lines (approximately) to facilitate reading it.
misc.texi(,620) 
misc.texi(,621)   @code{dissociated-press} asks every so often whether to continue
misc.texi(,622) operating.  Answer @kbd{n} to stop it.  You can also stop at any time by
misc.texi(,623) typing @kbd{C-g}.  The dissociation output remains in the @samp{*Dissociation*}
misc.texi(,624) buffer for you to copy elsewhere if you wish.
misc.texi(,625) 
misc.texi(,626) @cindex presidentagon
misc.texi(,627)   Dissociated Press operates by jumping at random from one point in the
misc.texi(,628) buffer to another.  In order to produce plausible output rather than
misc.texi(,629) gibberish, it insists on a certain amount of overlap between the end of one
misc.texi(,630) run of consecutive words or characters and the start of the next.  That is,
misc.texi(,631) if it has just printed out `president' and then decides to jump to a
misc.texi(,632) different point in the file, it might spot the `ent' in `pentagon' and
misc.texi(,633) continue from there, producing `presidentagon'.  Long sample texts produce
misc.texi(,634) the best results.
misc.texi(,635) 
misc.texi(,636) @cindex againformation
misc.texi(,637)   A positive argument to @kbd{M-x dissociated-press} tells it to operate
misc.texi(,638) character by character, and specifies the number of overlap characters.  A
misc.texi(,639) negative argument tells it to operate word by word and specifies the number
misc.texi(,640) of overlap words.  In this mode, whole words are treated as the elements to
misc.texi(,641) be permuted, rather than characters.  No argument is equivalent to an
misc.texi(,642) argument of two.  For your againformation, the output goes only into the
misc.texi(,643) buffer @samp{*Dissociation*}.  The buffer you start with is not changed.
misc.texi(,644) 
misc.texi(,645) @cindex Markov chain
misc.texi(,646) @cindex ignoriginal
misc.texi(,647) @cindex techniquitous
misc.texi(,648)   Dissociated Press produces nearly the same results as a Markov chain
misc.texi(,649) based on a frequency table constructed from the sample text.  It is,
misc.texi(,650) however, an independent, ignoriginal invention.  Dissociated Press
misc.texi(,651) techniquitously copies several consecutive characters from the sample
misc.texi(,652) between random choices, whereas a Markov chain would choose randomly for
misc.texi(,653) each word or character.  This makes for more plausible sounding results
misc.texi(,654) and runs faster.
misc.texi(,655) 
misc.texi(,656) @cindex outragedy
misc.texi(,657) @cindex buggestion
misc.texi(,658) @cindex properbose
misc.texi(,659)   It is a mustatement that too much use of Dissociated Press can be a
misc.texi(,660) developediment to your real work.  Sometimes to the point of outragedy.
misc.texi(,661) And keep dissociwords out of your documentation, if you want it to be well
misc.texi(,662) userenced and properbose.  Have fun.  Your buggestions are welcome.
misc.texi(,663) 
misc.texi(,664) @node CONX, Amusements, Dissociated Press, Top
misc.texi(,665) @section CONX
misc.texi(,666) @cindex random sentences
misc.texi(,667) 
misc.texi(,668) Besides producing a file of scrambled text with Dissociated Press, you 
misc.texi(,669) can generate random sentences by using CONX.
misc.texi(,670) 
misc.texi(,671) @table @kbd
misc.texi(,672) @item M-x conx
misc.texi(,673) Generate random sentences in the @code{*conx*} buffer.
misc.texi(,674) @item M-x conx-buffer
misc.texi(,675) Absorb the text in the current buffer into the @code{conx} database.
misc.texi(,676) @item M-x conx-init
misc.texi(,677) Forget the current word-frequency tree.
misc.texi(,678) @item M-x conx-load
misc.texi(,679) Load a @code{conx} database that has been previously saved with 
misc.texi(,680) @code{M-x conx-save}.
misc.texi(,681) @item M-x conx-region
misc.texi(,682) Absorb the text in the current buffer into the @code{conx} database.
misc.texi(,683) @item M-x conx-save
misc.texi(,684) Save the current @code{conx} database to a file for future retrieval.
misc.texi(,685) @end table
misc.texi(,686) 
misc.texi(,687) @findex conx
misc.texi(,688) @findex conx-buffer
misc.texi(,689) @findex conx-load
misc.texi(,690) @findex conx-region
misc.texi(,691) @findex conx-init
misc.texi(,692) @findex conx-save
misc.texi(,693) 
misc.texi(,694) Copy text from a buffer using @kbd{M-x conx-buffer} or @kbd{M-x conx-region}
misc.texi(,695) and then type @kbd{M-x conx}.  Output is continuously generated until you
misc.texi(,696) type @key{^G}. You can save the @code{conx} database to a file with
misc.texi(,697) @kbd{M-x conx-save}, which you can retrieve with @code{M-x conx-load}. 
misc.texi(,698) To clear the database, use @code{M-x conx-init}.
misc.texi(,699) 
misc.texi(,700) @node Amusements, Emulation, CONX, Top
misc.texi(,701) @section Other Amusements
misc.texi(,702) @cindex boredom
misc.texi(,703) @findex hanoi
misc.texi(,704) @findex yow
misc.texi(,705) 
misc.texi(,706)   If you are a little bit bored, you can try @kbd{M-x hanoi}.  If you are
misc.texi(,707) considerably bored, give it a numeric argument.  If you are very, very
misc.texi(,708) bored, try an argument of 9.  Sit back and watch.
misc.texi(,709) 
misc.texi(,710)   When you are frustrated, try the famous Eliza program.  Just do
misc.texi(,711) @kbd{M-x doctor}.  End each input by typing @kbd{RET} twice.
misc.texi(,712) 
misc.texi(,713)   When you are feeling strange, type @kbd{M-x yow}.
misc.texi(,714) 
misc.texi(,715) @node Emulation, Customization, Amusements, Top
misc.texi(,716) @comment  node-name,  next,  previous,  up
misc.texi(,717) @section Emulation
misc.texi(,718) @cindex other editors
misc.texi(,719) @cindex vi
misc.texi(,720) @cindex EDT
misc.texi(,721) 
misc.texi(,722)   XEmacs can be programmed to emulate (more or less) most other
misc.texi(,723) editors.  Standard facilities can emulate these:
misc.texi(,724) 
misc.texi(,725) @table @asis
misc.texi(,726) @item Viper (a vi emulator)
misc.texi(,727) @cindex Viper
misc.texi(,728) In XEmacs, Viper is the preferred emulation of vi within XEmacs.
misc.texi(,729) Viper is designed to allow you to take advantage of the best
misc.texi(,730) features of XEmacs while still doing your basic editing in a
misc.texi(,731) familiar, vi-like fashion.  Viper provides various different
misc.texi(,732) levels of vi emulation, from a quite complete emulation that
misc.texi(,733) allows almost no access to native XEmacs commands, to an
misc.texi(,734) ``expert'' mode that combines the most useful vi commands with
misc.texi(,735) the most useful XEmacs commands.
misc.texi(,736) 
misc.texi(,737) To start Viper, put the command
misc.texi(,738) 
misc.texi(,739) @example
misc.texi(,740) (viper-mode)
misc.texi(,741) @end example
misc.texi(,742) 
misc.texi(,743) in your init file.  @xref{Init File}.
misc.texi(,744) 
misc.texi(,745) Viper comes with a separate manual that is provided standard
misc.texi(,746) with the XEmacs distribution.
misc.texi(,747) 
misc.texi(,760) 
misc.texi(,761) @item EDT (DEC VMS editor)
misc.texi(,762) @findex edt-emulation-on
misc.texi(,763) @findex edt-emulation-off
misc.texi(,764) Turn on EDT emulation with @kbd{M-x edt-emulation-on}.  @kbd{M-x
misc.texi(,765) @*edt-emulation-off} restores normal Emacs command bindings.
misc.texi(,766) 
misc.texi(,767) Most of the EDT emulation commands are keypad keys, and most standard
misc.texi(,768) Emacs key bindings are still available.  The EDT emulation rebindings
misc.texi(,769) are done in the global keymap, so there is no problem switching
misc.texi(,770) buffers or major modes while in EDT emulation.
misc.texi(,771) 
misc.texi(,772) @item Gosling Emacs
misc.texi(,773) @findex set-gosmacs-bindings
misc.texi(,774) @findex set-gnu-bindings
misc.texi(,775) Turn on emulation of Gosling Emacs (aka Unipress Emacs) with @kbd{M-x
misc.texi(,776) set-gosmacs-bindings}.  This redefines many keys, mostly on the
misc.texi(,777) @kbd{C-x} and @kbd{ESC} prefixes, to work as they do in Gosmacs.
misc.texi(,778) @kbd{M-x set-gnu-bindings} returns to normal XEmacs by rebinding
misc.texi(,779) the same keys to the definitions they had at the time @kbd{M-x
misc.texi(,780) set-gosmacs-bindings} was done.
misc.texi(,781) 
misc.texi(,782) It is also possible to run Mocklisp code written for Gosling Emacs.
misc.texi(,783) @xref{Mocklisp}.
misc.texi(,784) @end table
custom.texi(,1) 
custom.texi(,2) @node Customization, Quitting, Emulation, Top
custom.texi(,3) @chapter Customization
custom.texi(,4) @cindex customization
custom.texi(,5) 
custom.texi(,6)   This chapter talks about various topics relevant to adapting the
custom.texi(,7) behavior of Emacs in minor ways.
custom.texi(,8) 
custom.texi(,9)   All kinds of customization affect only the particular Emacs job that you
custom.texi(,10) do them in.  They are completely lost when you kill the Emacs job, and
custom.texi(,11) have no effect on other Emacs jobs you may run at the same time or
custom.texi(,12) later.  The only way an Emacs job can affect anything outside of it is
custom.texi(,13) by writing a file; in particular, the only way to make a customization
custom.texi(,14) `permanent' is to put something in your init file or other appropriate
custom.texi(,15) file to do the customization in each session.  @xref{Init File}.
custom.texi(,16) 
custom.texi(,17) @menu
custom.texi(,18) * Minor Modes::     Each minor mode is one feature you can turn on
custom.texi(,19)                      independently of any others.
custom.texi(,20) * Variables::       Many Emacs commands examine Emacs variables
custom.texi(,21)                      to decide what to do; by setting variables,
custom.texi(,22)                      you can control their functioning.
custom.texi(,23) * Keyboard Macros:: A keyboard macro records a sequence of keystrokes
custom.texi(,24)                      to be replayed with a single command.
custom.texi(,25) * Key Bindings::    The keymaps say what command each key runs.
custom.texi(,26)                      By changing them, you can "redefine keys".
custom.texi(,27) * Syntax::          The syntax table controls how words and expressions
custom.texi(,28)                      are parsed.
custom.texi(,29) * Init File::       How to write common customizations in the init file.
custom.texi(,30) * Audible Bell::    Changing how Emacs sounds the bell.
custom.texi(,31) * Faces::           Changing the fonts and colors of a region of text.
custom.texi(,32) * Frame Components::  Controlling the presence and positions of the
custom.texi(,33)                      menubar, toolbars, and gutters.
custom.texi(,34) * X Resources::     X resources controlling various aspects of the
custom.texi(,35)                      behavior of XEmacs.
custom.texi(,36) @end menu
custom.texi(,37) 
custom.texi(,38) @node Minor Modes
custom.texi(,39) @section Minor Modes
custom.texi(,40) @cindex minor modes
custom.texi(,41) 
custom.texi(,42) @cindex mode line
custom.texi(,43)   Minor modes are options which you can use or not.  For example, Auto
custom.texi(,44) Fill mode is a minor mode in which @key{SPC} breaks lines between words
custom.texi(,45) as you type.  All the minor modes are independent of each other and of
custom.texi(,46) the selected major mode.  Most minor modes inform you in the mode line
custom.texi(,47) when they are on; for example, @samp{Fill} in the mode line means that
custom.texi(,48) Auto Fill mode is on.
custom.texi(,49) 
custom.texi(,50)   Append @code{-mode} to the name of a minor mode to get the name of a
custom.texi(,51) command function that turns the mode on or off.  Thus, the command to
custom.texi(,52) enable or disable Auto Fill mode is called @kbd{M-x auto-fill-mode}.  These
custom.texi(,53) commands are usually invoked with @kbd{M-x}, but you can bind keys to them
custom.texi(,54) if you wish.  With no argument, the function turns the mode on if it was
custom.texi(,55) off and off if it was on.  This is known as @dfn{toggling}.  A positive
custom.texi(,56) argument always turns the mode on, and an explicit zero argument or a
custom.texi(,57) negative argument always turns it off.
custom.texi(,58) 
custom.texi(,59) @cindex Auto Fill mode
custom.texi(,60) @findex auto-fill-mode
custom.texi(,61)   Auto Fill mode allows you to enter filled text without breaking lines
custom.texi(,62) explicitly.  Emacs inserts newlines as necessary to prevent lines from
custom.texi(,63) becoming too long.  @xref{Filling}.
custom.texi(,64) 
custom.texi(,65) @cindex Overwrite mode
custom.texi(,66) @findex overwrite-mode
custom.texi(,67)   Overwrite mode causes ordinary printing characters to replace existing
custom.texi(,68) text instead of moving it to the right.  For example, if point is in
custom.texi(,69) front of the @samp{B} in @samp{FOOBAR}, and you type a @kbd{G} in Overwrite
custom.texi(,70) mode, it changes to @samp{FOOGAR}, instead of @samp{FOOGBAR}.@refill
custom.texi(,71) 
custom.texi(,72) @cindex Abbrev mode
custom.texi(,73) @findex abbrev-mode
custom.texi(,74)   Abbrev mode allows you to define abbreviations that automatically expand
custom.texi(,75) as you type them.  For example, @samp{amd} might expand to @samp{abbrev
custom.texi(,76) mode}.  @xref{Abbrevs}, for full information.
custom.texi(,77) 
custom.texi(,78) @node Variables
custom.texi(,79) @section Variables
custom.texi(,80) @cindex variable
custom.texi(,81) @cindex option
custom.texi(,82) 
custom.texi(,83)   A @dfn{variable} is a Lisp symbol which has a value.  Variable names
custom.texi(,84) can contain any characters, but by convention they are words separated
custom.texi(,85) by hyphens.  A variable can also have a documentation string, which
custom.texi(,86) describes what kind of value it should have and how the value will be
custom.texi(,87) used.
custom.texi(,88) 
custom.texi(,89)   Lisp allows any variable to have any kind of value, but most variables
custom.texi(,90) that Emacs uses require a value of a certain type.  Often the value has
custom.texi(,91) to be a string or a number.  Sometimes we say that a certain feature is
custom.texi(,92) turned on if a variable is ``non-@code{nil},'' meaning that if the
custom.texi(,93) variable's value is @code{nil}, the feature is off, but the feature is
custom.texi(,94) on for @i{any} other value.  The conventional value to turn on the
custom.texi(,95) feature---since you have to pick one particular value when you set the
custom.texi(,96) variable---is @code{t}.
custom.texi(,97) 
custom.texi(,98)   Emacs uses many Lisp variables for internal recordkeeping, as any Lisp
custom.texi(,99) program must, but the most interesting variables for you are the ones that
custom.texi(,100) exist for the sake of customization.  Emacs does not (usually) change the
custom.texi(,101) values of these variables; instead, you set the values, and thereby alter
custom.texi(,102) and control the behavior of certain Emacs commands.  These variables are
custom.texi(,103) called @dfn{options}.  Most options are documented in this manual and
custom.texi(,104) appear in the Variable Index (@pxref{Variable Index}).
custom.texi(,105) 
custom.texi(,106)   One example of a variable which is an option is @code{fill-column}, which
custom.texi(,107) specifies the position of the right margin (as a number of characters from
custom.texi(,108) the left margin) to be used by the fill commands (@pxref{Filling}).
custom.texi(,109) 
custom.texi(,110) @menu
custom.texi(,111) * Examining::           Examining or setting one variable's value.
custom.texi(,112) * Easy Customization::  Convenient and easy customization of variables.
custom.texi(,113) * Edit Options::        Examining or editing list of all variables' values.
custom.texi(,114) * Locals::              Per-buffer values of variables.
custom.texi(,115) * File Variables::      How files can specify variable values.
custom.texi(,116) @end menu
custom.texi(,117) 
custom.texi(,118) @node Examining
custom.texi(,119) @subsection Examining and Setting Variables
custom.texi(,120) @cindex setting variables
custom.texi(,121) 
custom.texi(,122) @table @kbd
custom.texi(,123) @item C-h v
custom.texi(,124) @itemx M-x describe-variable
custom.texi(,125) Print the value and documentation of a variable.
custom.texi(,126) @findex set-variable
custom.texi(,127) @item M-x set-variable
custom.texi(,128) Change the value of a variable.
custom.texi(,129) @end table
custom.texi(,130) 
custom.texi(,131) @kindex C-h v
custom.texi(,132) @findex describe-variable
custom.texi(,133)   To examine the value of a single variable, use @kbd{C-h v}
custom.texi(,134) (@code{describe-variable}), which reads a variable name using the
custom.texi(,135) minibuffer, with completion.  It prints both the value and the
custom.texi(,136) documentation of the variable.
custom.texi(,137) 
custom.texi(,138) @example
custom.texi(,139) C-h v fill-column @key{RET}
custom.texi(,140) @end example
custom.texi(,141) 
custom.texi(,142) @noindent
custom.texi(,143) prints something like:
custom.texi(,144) 
custom.texi(,145) @smallexample
custom.texi(,146) fill-column's value is 75
custom.texi(,147) 
custom.texi(,148) Documentation:
custom.texi(,149) *Column beyond which automatic line-wrapping should happen.
custom.texi(,150) Automatically becomes local when set in any fashion.
custom.texi(,151) @end smallexample
custom.texi(,152) 
custom.texi(,153) @cindex option
custom.texi(,154) @noindent
custom.texi(,155) The star at the beginning of the documentation indicates that this variable
custom.texi(,156) is an option.  @kbd{C-h v} is not restricted to options; it allows any
custom.texi(,157) variable name.
custom.texi(,158) 
custom.texi(,159) @findex set-variable
custom.texi(,160)   If you know which option you want to set, you can use @kbd{M-x
custom.texi(,161) set-variable} to set it.  This prompts for the variable name in the
custom.texi(,162) minibuffer (with completion), and then prompts for a Lisp expression for the
custom.texi(,163) new value using the minibuffer a second time.  For example,
custom.texi(,164) 
custom.texi(,165) @example
custom.texi(,166) M-x set-variable @key{RET} fill-column @key{RET} 75 @key{RET}
custom.texi(,167) @end example
custom.texi(,168) 
custom.texi(,169) @noindent
custom.texi(,170) sets @code{fill-column} to 75, as if you had executed the Lisp expression
custom.texi(,171) @code{(setq fill-column 75)}.
custom.texi(,172) 
custom.texi(,173)   Setting variables in this way, like all means of customizing Emacs
custom.texi(,174) except where explicitly stated, affects only the current Emacs session.
custom.texi(,175) 
custom.texi(,176) @node Easy Customization
custom.texi(,177) @subsection Easy Customization Interface
custom.texi(,178) 
custom.texi(,179) @findex customize
custom.texi(,180) @cindex customization buffer
custom.texi(,181)   A convenient way to find the user option variables that you want to
custom.texi(,182) change, and then change them, is with @kbd{M-x customize} (or use a
custom.texi(,183) keyboard shortcut, @kbd{C-h C}.  This command
custom.texi(,184) creates a @dfn{customization buffer} with which you can browse through
custom.texi(,185) the Emacs user options in a logically organized structure, then edit and
custom.texi(,186) set their values.  You can also use the customization buffer to save
custom.texi(,187) settings permanently.  (Not all Emacs user options are included in this
custom.texi(,188) structure as of yet, but we are adding the rest.)
custom.texi(,189) 
custom.texi(,190) @menu
custom.texi(,191) * Groups: Customization Groups.
custom.texi(,192)                              How options are classified in a structure.
custom.texi(,193) * Changing an Option::       How to edit a value and set an option.
custom.texi(,194) * Face Customization::       How to edit the attributes of a face.
custom.texi(,195) * Specific Customization::   Making a customization buffer for specific
custom.texi(,196)                                 options, faces, or groups.
custom.texi(,197) @end menu
custom.texi(,198) 
custom.texi(,199) @node Customization Groups
custom.texi(,200) @subsubsection Customization Groups
custom.texi(,201) @cindex customization groups
custom.texi(,202) 
custom.texi(,203)   For customization purposes, user options are organized into
custom.texi(,204) @dfn{groups} to help you find them.  Groups are collected into bigger
custom.texi(,205) groups, all the way up to a master group called @code{Emacs}.
custom.texi(,206) 
custom.texi(,207)   @kbd{M-x customize} (or @kbd{C-h C}) creates a customization buffer that
custom.texi(,208) shows the top-level @code{Emacs} group and the second-level groups immediately
custom.texi(,209) under it.  It looks like this, in part:
custom.texi(,210) 
custom.texi(,211) @smallexample
custom.texi(,212) /- Emacs group: ---------------------------------------------------\
custom.texi(,213)       [State]: visible group members are all at standard settings.
custom.texi(,214)    Customization of the One True Editor.
custom.texi(,215)    See also [Manual].
custom.texi(,216) 
custom.texi(,217)  [Open] Editing group
custom.texi(,218) Basic text editing facilities.
custom.texi(,219) 
custom.texi(,220)  [Open] External group
custom.texi(,221) Interfacing to external utilities.
custom.texi(,222) 
custom.texi(,223) @var{more second-level groups}
custom.texi(,224) 
custom.texi(,225) \- Emacs group end ------------------------------------------------/
custom.texi(,226) 
custom.texi(,227) @end smallexample
custom.texi(,228) 
custom.texi(,229) @noindent
custom.texi(,230) This says that the buffer displays the contents of the @code{Emacs}
custom.texi(,231) group.  The other groups are listed because they are its contents.  But
custom.texi(,232) they are listed differently, without indentation and dashes, because
custom.texi(,233) @emph{their} contents are not included.  Each group has a single-line
custom.texi(,234) documentation string; the @code{Emacs} group also has a @samp{[State]}
custom.texi(,235) line.
custom.texi(,236) 
custom.texi(,237) @cindex editable fields (customization buffer)
custom.texi(,238) @cindex active fields (customization buffer)
custom.texi(,239)   Most of the text in the customization buffer is read-only, but it
custom.texi(,240) typically includes some @dfn{editable fields} that you can edit.  There
custom.texi(,241) are also @dfn{active fields}; this means a field that does something
custom.texi(,242) when you @dfn{invoke} it.  To invoke an active field, either click on it
custom.texi(,243) with @kbd{Mouse-1}, or move point to it and type @key{RET}.
custom.texi(,244) 
custom.texi(,245)   For example, the phrase @samp{[Open]} that appears in a second-level
custom.texi(,246) group is an active field.  Invoking the @samp{[Open]} field for a group
custom.texi(,247) opens up a new customization buffer, which shows that group and its
custom.texi(,248) contents.  This field is a kind of hypertext link to another group.
custom.texi(,249) 
custom.texi(,250)   The @code{Emacs} group does not include any user options itself, but
custom.texi(,251) other groups do.  By examining various groups, you will eventually find
custom.texi(,252) the options and faces that belong to the feature you are interested in
custom.texi(,253) customizing.  Then you can use the customization buffer to set them.
custom.texi(,254) 
custom.texi(,255) @findex customize-browse
custom.texi(,256)   You can view the structure of customization groups on a larger scale
custom.texi(,257) with @kbd{M-x customize-browse}.  This command creates a special kind of
custom.texi(,258) customization buffer which shows only the names of the groups (and
custom.texi(,259) options and faces), and their structure.
custom.texi(,260) 
custom.texi(,261)   In this buffer, you can show the contents of a group by invoking
custom.texi(,262) @samp{[+]}.  When the group contents are visible, this button changes to
custom.texi(,263) @samp{[-]}; invoking that hides the group contents.
custom.texi(,264) 
custom.texi(,265)   Each group, option or face name in this buffer has an active field
custom.texi(,266) which says @samp{[Group]}, @samp{[Option]} or @samp{[Face]}.  Invoking
custom.texi(,267) that active field creates an ordinary customization buffer showing just
custom.texi(,268) that group and its contents, just that option, or just that face.
custom.texi(,269) This is the way to set values in it.
custom.texi(,270) 
custom.texi(,271) @node Changing an Option
custom.texi(,272) @subsubsection Changing an Option
custom.texi(,273) 
custom.texi(,274)   Here is an example of what a user option looks like in the
custom.texi(,275) customization buffer:
custom.texi(,276) 
custom.texi(,277) @smallexample
custom.texi(,278) Kill Ring Max: [Hide] 30
custom.texi(,279)    [State]: this option is unchanged from its standard setting.
custom.texi(,280) Maximum length of kill ring before oldest elements are thrown away.
custom.texi(,281) @end smallexample
custom.texi(,282) 
custom.texi(,283)   The text following @samp{[Hide]}, @samp{30} in this case, indicates
custom.texi(,284) the current value of the option.  If you see @samp{[Show]} instead of
custom.texi(,285) @samp{[Hide]}, it means that the value is hidden; the customization
custom.texi(,286) buffer initially hides values that take up several lines.  Invoke
custom.texi(,287) @samp{[Show]} to show the value.
custom.texi(,288) 
custom.texi(,289)   The line after the option name indicates the @dfn{customization state}
custom.texi(,290) of the option: in the example above, it says you have not changed the
custom.texi(,291) option yet.  The word @samp{[State]} at the beginning of this line is
custom.texi(,292) active; you can get a menu of various operations by invoking it with
custom.texi(,293) @kbd{Mouse-1} or @key{RET}.  These operations are essential for
custom.texi(,294) customizing the variable.
custom.texi(,295) 
custom.texi(,296)   The line after the @samp{[State]} line displays the beginning of the
custom.texi(,297) option's documentation string.  If there are more lines of
custom.texi(,298) documentation, this line ends with @samp{[More]}; invoke this to show
custom.texi(,299) the full documentation string.
custom.texi(,300) 
custom.texi(,301)   To enter a new value for @samp{Kill Ring Max}, move point to the value
custom.texi(,302) and edit it textually.  For example, you can type @kbd{M-d}, then insert
custom.texi(,303) another number.
custom.texi(,304) 
custom.texi(,305)   When you begin to alter the text, you will see the @samp{[State]} line
custom.texi(,306) change to say that you have edited the value:
custom.texi(,307) 
custom.texi(,308) @smallexample
custom.texi(,309) [State]: you have edited the value as text, but not set the option.
custom.texi(,310) @end smallexample
custom.texi(,311) 
custom.texi(,312) @cindex setting option value
custom.texi(,313)   Editing the value does not actually set the option variable.  To do
custom.texi(,314) that, you must @dfn{set} the option.  To do this, invoke the word
custom.texi(,315) @samp{[State]} and choose @samp{Set for Current Session}.
custom.texi(,316) 
custom.texi(,317)   The state of the option changes visibly when you set it:
custom.texi(,318) 
custom.texi(,319) @smallexample
custom.texi(,320) [State]: you have set this option, but not saved it for future sessions.
custom.texi(,321) @end smallexample
custom.texi(,322) 
custom.texi(,323)    You don't have to worry about specifying a value that is not valid;
custom.texi(,324) setting the option checks for validity and will not really install an
custom.texi(,325) unacceptable value.
custom.texi(,326) 
custom.texi(,327) @kindex M-TAB @r{(customization buffer)}
custom.texi(,328) @findex widget-complete
custom.texi(,329)   While editing a value or field that is a file name, directory name,
custom.texi(,330) command name, or anything else for which completion is defined, you can
custom.texi(,331) type @kbd{M-@key{TAB}} (@code{widget-complete}) to do completion.
custom.texi(,332) 
custom.texi(,333)   Some options have a small fixed set of possible legitimate values.
custom.texi(,334) These options don't let you edit the value textually.  Instead, an
custom.texi(,335) active field @samp{[Value Menu]} appears before the value; invoke this
custom.texi(,336) field to edit the value.  For a boolean ``on or off'' value, the active
custom.texi(,337) field says @samp{[Toggle]}, and it changes to the other value.
custom.texi(,338) @samp{[Value Menu]} and @samp{[Toggle]} edit the buffer; the changes
custom.texi(,339) take effect when you use the @samp{Set for Current Session} operation.
custom.texi(,340) 
custom.texi(,341)   Some options have values with complex structure.  For example, the
custom.texi(,342) value of @code{load-path} is a list of directories.  Here is how it
custom.texi(,343) appears in the customization buffer:
custom.texi(,344) 
custom.texi(,345) @smallexample
custom.texi(,346) Load Path:
custom.texi(,347) [INS] [DEL] [Current dir?]: /usr/local/share/emacs/19.34.94/site-lisp
custom.texi(,348) [INS] [DEL] [Current dir?]: /usr/local/share/emacs/site-lisp
custom.texi(,349) [INS] [DEL] [Current dir?]: /usr/local/share/emacs/19.34.94/leim
custom.texi(,350) [INS] [DEL] [Current dir?]: /usr/local/share/emacs/19.34.94/lisp
custom.texi(,351) [INS] [DEL] [Current dir?]: /build/emacs/e19/lisp
custom.texi(,352) [INS] [DEL] [Current dir?]: /build/emacs/e19/lisp/gnus
custom.texi(,353) [INS]
custom.texi(,354)    [State]: this item has been changed outside the customization buffer.
custom.texi(,355) List of directories to search for files to load....
custom.texi(,356) @end smallexample
custom.texi(,357) 
custom.texi(,358) @noindent
custom.texi(,359) Each directory in the list appears on a separate line, and each line has
custom.texi(,360) several editable or active fields.
custom.texi(,361) 
custom.texi(,362)   You can edit any of the directory names.  To delete a directory from
custom.texi(,363) the list, invoke @samp{[DEL]} on that line.  To insert a new directory in
custom.texi(,364) the list, invoke @samp{[INS]} at the point where you want to insert it.
custom.texi(,365) 
custom.texi(,366)   You can also invoke @samp{[Current dir?]} to switch between including
custom.texi(,367) a specific named directory in the path, and including @code{nil} in the
custom.texi(,368) path.  (@code{nil} in a search path means ``try the current
custom.texi(,369) directory.'')
custom.texi(,370) 
custom.texi(,371) @kindex TAB @r{(customization buffer)}
custom.texi(,372) @kindex S-TAB @r{(customization buffer)}
custom.texi(,373) @findex widget-forward
custom.texi(,374) @findex widget-backward
custom.texi(,375)   Two special commands, @key{TAB} and @kbd{S-@key{TAB}}, are useful for
custom.texi(,376) moving through the customization buffer.  @key{TAB}
custom.texi(,377) (@code{widget-forward}) moves forward to the next active or editable
custom.texi(,378) field; @kbd{S-@key{TAB}} (@code{widget-backward}) moves backward to the
custom.texi(,379) previous active or editable field.
custom.texi(,380) 
custom.texi(,381)   Typing @key{RET} on an editable field also moves forward, just like
custom.texi(,382) @key{TAB}.  The reason for this is that people have a tendency to type
custom.texi(,383) @key{RET} when they are finished editing a field.  If you have occasion
custom.texi(,384) to insert a newline in an editable field, use @kbd{C-o} or @kbd{C-q
custom.texi(,385) C-j},
custom.texi(,386) 
custom.texi(,387) @cindex saving option value
custom.texi(,388)   Setting the option changes its value in the current Emacs session;
custom.texi(,389) @dfn{saving} the value changes it for future sessions as well.  This
custom.texi(,390) works by writing code into your init file so as to set the option
custom.texi(,391) variable again each time you start Emacs.  @xref{Init File}.  To save
custom.texi(,392) the option, invoke @samp{[State]} and select the @samp{Save for Future
custom.texi(,393) Sessions} operation.
custom.texi(,394) 
custom.texi(,395)   You can also restore the option to its standard value by invoking
custom.texi(,396) @samp{[State]} and selecting the @samp{Reset} operation.  There are
custom.texi(,397) actually three reset operations:
custom.texi(,398) 
custom.texi(,399) @table @samp
custom.texi(,400) @item Reset to Current
custom.texi(,401) If you have made some modifications and not yet set the option,
custom.texi(,402) this restores the text in the customization buffer to match
custom.texi(,403) the actual value.
custom.texi(,404) 
custom.texi(,405) @item Reset to Saved
custom.texi(,406) This restores the value of the option to the last saved value,
custom.texi(,407) and updates the text accordingly.
custom.texi(,408) 
custom.texi(,409) @item Reset to Standard Settings
custom.texi(,410) This sets the option to its standard value, and updates the text
custom.texi(,411) accordingly.  This also eliminates any saved value for the option,
custom.texi(,412) so that you will get the standard value in future Emacs sessions.
custom.texi(,413) @end table
custom.texi(,414) 
custom.texi(,415)   The state of a group indicates whether anything in that group has been
custom.texi(,416) edited, set or saved.  You can select @samp{Set for Current Session},
custom.texi(,417) @samp{Save for Future Sessions} and the various kinds of @samp{Reset}
custom.texi(,418) operation for the group; these operations on the group apply to all
custom.texi(,419) options in the group and its subgroups.
custom.texi(,420) 
custom.texi(,421)   Near the top of the customization buffer there are two lines
custom.texi(,422) containing several active fields:
custom.texi(,423) 
custom.texi(,424) @smallexample
custom.texi(,425)  [Set] [Save] [Reset]  [Done]
custom.texi(,426) @end smallexample
custom.texi(,427) 
custom.texi(,428) @noindent
custom.texi(,429) Invoking @samp{[Done]} buries this customization buffer.  Each of the
custom.texi(,430) other fields performs an operation---set, save or reset---on each of the
custom.texi(,431) items in the buffer that could meaningfully be set, saved or reset.
custom.texi(,432) 
custom.texi(,433) @node Face Customization
custom.texi(,434) @subsubsection Customizing Faces
custom.texi(,435) @cindex customizing faces
custom.texi(,436) @cindex bold font
custom.texi(,437) @cindex italic font
custom.texi(,438) @cindex fonts and faces
custom.texi(,439) 
custom.texi(,440)   In addition to user options, some customization groups also include
custom.texi(,441) faces.  When you show the contents of a group, both the user options and
custom.texi(,442) the faces in the group appear in the customization buffer.  Here is an
custom.texi(,443) example of how a face looks:
custom.texi(,444) 
custom.texi(,445) @smallexample
custom.texi(,446) Custom Changed Face: (sample)
custom.texi(,447)    [State]: this face is unchanged from its standard setting.
custom.texi(,448) Face used when the customize item has been changed.
custom.texi(,449) Parent groups: [Custom Magic Faces]
custom.texi(,450) Attributes: [ ] Bold: [Toggle]  off (nil)
custom.texi(,451)             [ ] Italic: [Toggle]  off (nil)
custom.texi(,452)             [ ] Underline: [Toggle]  off (nil)
custom.texi(,453)             [ ] Foreground: white       (sample)
custom.texi(,454)             [ ] Background: blue        (sample)
custom.texi(,455)             [ ] Inverse: [Toggle]  off (nil)
custom.texi(,456)             [ ] Stipple: 
custom.texi(,457)             [ ] Font Family: 
custom.texi(,458)             [ ] Size: 
custom.texi(,459)             [ ] Strikethru: off
custom.texi(,460) @end smallexample
custom.texi(,461) 
custom.texi(,462)   Each face attribute has its own line.  The @samp{[@var{x}]} field
custom.texi(,463) before the attribute name indicates whether the attribute is
custom.texi(,464) @dfn{enabled}; @samp{X} means that it is.  You can enable or disable the
custom.texi(,465) attribute by invoking that field.  When the attribute is enabled, you
custom.texi(,466) can change the attribute value in the usual ways.
custom.texi(,467) 
custom.texi(,468) @xref{Faces}, for description of how @code{face-frob-from-locale-first}
custom.texi(,469) variable affects changing @samp{Bold} and @samp{Italic} attributes.
custom.texi(,470) 
custom.texi(,471) @c Is this true for XEmacs?
custom.texi(,472) @c  On a black-and-white display, the colors you can use for the
custom.texi(,473) @c background are @samp{black}, @samp{white}, @samp{gray}, @samp{gray1},
custom.texi(,474) @c and @samp{gray3}.  Emacs supports these shades of gray by using
custom.texi(,475) @c background stipple patterns instead of a color.
custom.texi(,476) @c 
custom.texi(,477)   Setting, saving and resetting a face work like the same operations for
custom.texi(,478) options (@pxref{Changing an Option}).
custom.texi(,479) 
custom.texi(,480)   A face can specify different appearances for different types of
custom.texi(,481) display.  For example, a face can make text red on a color display, but
custom.texi(,482) use a bold font on a monochrome display.  To specify multiple
custom.texi(,483) appearances for a face, select @samp{Show Display Types} in the menu you
custom.texi(,484) get from invoking @samp{[State]}.
custom.texi(,485) 
custom.texi(,486) @c It would be cool to implement this
custom.texi(,487) @c @findex modify-face
custom.texi(,488) @c   Another more basic way to set the attributes of a specific face is
custom.texi(,489) @c with @kbd{M-x modify-face}.  This command reads the name of a face, then
custom.texi(,490) @c reads the attributes one by one.  For the color and stipple attributes,
custom.texi(,491) @c the attribute's current value is the default---type just @key{RET} if
custom.texi(,492) @c you don't want to change that attribute.  Type @samp{none} if you want
custom.texi(,493) @c to clear out the attribute.
custom.texi(,494) 
custom.texi(,495) @node Specific Customization
custom.texi(,496) @subsubsection Customizing Specific Items
custom.texi(,497) 
custom.texi(,498)   Instead of finding the options you want to change by moving down
custom.texi(,499) through the structure of groups, you can specify the particular option,
custom.texi(,500) face or group that you want to customize.
custom.texi(,501) 
custom.texi(,502) @table @kbd
custom.texi(,503) @item M-x customize-option @key{RET} @var{option} @key{RET}
custom.texi(,504) Set up a customization buffer with just one option, @var{option}.
custom.texi(,505) @item M-x customize-face @key{RET} @var{face} @key{RET}
custom.texi(,506) Set up a customization buffer with just one face, @var{face}.
custom.texi(,507) @item M-x customize-group @key{RET} @var{group} @key{RET}
custom.texi(,508) Set up a customization buffer with just one group, @var{group}.
custom.texi(,509) @item M-x customize-apropos @key{RET} @var{regexp} @key{RET}
custom.texi(,510) Set up a customization buffer with all the options, faces and groups
custom.texi(,511) that match @var{regexp}.
custom.texi(,512) @item M-x customize-saved 
custom.texi(,513) Set up a customization buffer containing all options and faces that you
custom.texi(,514) have saved with customization buffers.
custom.texi(,515) @item M-x customize-customized
custom.texi(,516) Set up a customization buffer containing all options and faces that you
custom.texi(,517) have customized but not saved.
custom.texi(,518) @end table
custom.texi(,519) 
custom.texi(,520) @findex customize-option
custom.texi(,521)   If you want to alter a particular user option variable with the
custom.texi(,522) customization buffer, and you know its name, you can use the command
custom.texi(,523) @kbd{M-x customize-option} and specify the option name.  This sets up
custom.texi(,524) the customization buffer with just one option---the one that you asked
custom.texi(,525) for.  Editing, setting and saving the value work as described above, but
custom.texi(,526) only for the specified option.
custom.texi(,527) 
custom.texi(,528) @findex customize-face
custom.texi(,529)   Likewise, you can modify a specific face, chosen by name, using
custom.texi(,530) @kbd{M-x customize-face}.
custom.texi(,531) 
custom.texi(,532) @findex customize-group
custom.texi(,533)   You can also set up the customization buffer with a specific group,
custom.texi(,534) using @kbd{M-x customize-group}.  The immediate contents of the chosen
custom.texi(,535) group, including option variables, faces, and other groups, all appear
custom.texi(,536) as well.  However, these subgroups' own contents start out hidden.  You
custom.texi(,537) can show their contents in the usual way, by invoking @samp{[Show]}.
custom.texi(,538) 
custom.texi(,539) @findex customize-apropos
custom.texi(,540)   To control more precisely what to customize, you can use @kbd{M-x
custom.texi(,541) customize-apropos}.  You specify a regular expression as argument; then
custom.texi(,542) all options, faces and groups whose names match this regular expression
custom.texi(,543) are set up in the customization buffer.  If you specify an empty regular
custom.texi(,544) expression, this includes @emph{all} groups, options and faces in the
custom.texi(,545) customization buffer (but that takes a long time).
custom.texi(,546) 
custom.texi(,547) @findex customize-saved
custom.texi(,548) @findex customize-customized
custom.texi(,549)   If you change option values and then decide the change was a mistake,
custom.texi(,550) you can use two special commands to revisit your previous changes.  Use
custom.texi(,551) @kbd{customize-saved} to look at the options and faces that you have
custom.texi(,552) saved.  Use @kbd{M-x customize-customized} to look at the options and
custom.texi(,553) faces that you have set but not saved.
custom.texi(,554) 
custom.texi(,555) @node Edit Options
custom.texi(,556) @subsection Editing Variable Values
custom.texi(,557) 
custom.texi(,558) @table @kbd
custom.texi(,559) @item M-x list-options
custom.texi(,560) Display a buffer listing names, values, and documentation of all options.
custom.texi(,561) @item M-x edit-options
custom.texi(,562) Change option values by editing a list of options.
custom.texi(,563) @end table
custom.texi(,564) 
custom.texi(,565) @findex list-options
custom.texi(,566)   @kbd{M-x list-options} displays a list of all Emacs option variables in
custom.texi(,567) an Emacs buffer named @samp{*List Options*}.  Each option is shown with its
custom.texi(,568) documentation and its current value.  Here is what a portion of it might
custom.texi(,569) look like:
custom.texi(,570) 
custom.texi(,571) @smallexample
custom.texi(,572) ;; exec-path:
custom.texi(,573) ("." "/usr/local/bin" "/usr/ucb" "/bin" "/usr/bin" "/u2/emacs/etc")
custom.texi(,574) *List of directories to search programs to run in subprocesses.
custom.texi(,575) Each element is a string (directory name)
custom.texi(,576) or nil (try the default directory).
custom.texi(,577) ;;
custom.texi(,578) ;; fill-column:
custom.texi(,579) 75
custom.texi(,580) *Column beyond which automatic line-wrapping should happen.
custom.texi(,581) Automatically becomes local when set in any fashion.
custom.texi(,582) ;;
custom.texi(,583) @end smallexample
custom.texi(,584) 
custom.texi(,585) @findex edit-options
custom.texi(,586)   @kbd{M-x edit-options} goes one step further and immediately selects the
custom.texi(,587) @samp{*List Options*} buffer; this buffer uses the major mode Options mode,
custom.texi(,588) which provides commands that allow you to point at an option and change its
custom.texi(,589) value:
custom.texi(,590) 
custom.texi(,591) @table @kbd
custom.texi(,592) @item s
custom.texi(,593) Set the variable point is in or near to a new value read using the
custom.texi(,594) minibuffer.
custom.texi(,595) @item x
custom.texi(,596) Toggle the variable point is in or near: if the value was @code{nil},
custom.texi(,597) it becomes @code{t}; otherwise it becomes @code{nil}.
custom.texi(,598) @item 1
custom.texi(,599) Set the variable point is in or near to @code{t}.
custom.texi(,600) @item 0
custom.texi(,601) Set the variable point is in or near to @code{nil}.
custom.texi(,602) @item n
custom.texi(,603) @itemx p
custom.texi(,604) Move to the next or previous variable.
custom.texi(,605) @end table
custom.texi(,606) 
custom.texi(,607) @node Locals
custom.texi(,608) @subsection Local Variables
custom.texi(,609) 
custom.texi(,610) @table @kbd
custom.texi(,611) @item M-x make-local-variable
custom.texi(,612) Make a variable have a local value in the current buffer.
custom.texi(,613) @item M-x kill-local-variable
custom.texi(,614) Make a variable use its global value in the current buffer.
custom.texi(,615) @item M-x make-variable-buffer-local
custom.texi(,616) Mark a variable so that setting it will make it local to the
custom.texi(,617) buffer that is current at that time.
custom.texi(,618) @end table
custom.texi(,619) 
custom.texi(,620) @cindex local variables
custom.texi(,621)    You can make any variable @dfn{local} to a specific Emacs buffer.
custom.texi(,622) This means that the variable's value in that buffer is independent of
custom.texi(,623) its value in other buffers.  A few variables are always local in every
custom.texi(,624) buffer.  All other Emacs variables have a @dfn{global} value which is in
custom.texi(,625) effect in all buffers that have not made the variable local.
custom.texi(,626) 
custom.texi(,627)   Major modes always make the variables they set local to the buffer.
custom.texi(,628) This is why changing major modes in one buffer has no effect on other
custom.texi(,629) buffers.
custom.texi(,630) 
custom.texi(,631) @findex make-local-variable
custom.texi(,632)   @kbd{M-x make-local-variable} reads the name of a variable and makes it
custom.texi(,633) local to the current buffer.  Further changes in this buffer will not
custom.texi(,634) affect others, and changes in the global value will not affect this
custom.texi(,635) buffer.
custom.texi(,636) 
custom.texi(,637) @findex make-variable-buffer-local
custom.texi(,638) @cindex per-buffer variables
custom.texi(,639)   @kbd{M-x make-variable-buffer-local} reads the name of a variable and
custom.texi(,640) changes the future behavior of the variable so that it automatically
custom.texi(,641) becomes local when it is set.  More precisely, once you have marked a
custom.texi(,642) variable in this way, the usual ways of setting the
custom.texi(,643) variable will automatically invoke @code{make-local-variable} first.  We
custom.texi(,644) call such variables @dfn{per-buffer} variables.
custom.texi(,645) 
custom.texi(,646)   Some important variables have been marked per-buffer already.  They
custom.texi(,647) include @code{abbrev-mode}, @code{auto-fill-function},
custom.texi(,648) @code{case-fold-search}, @code{comment-column}, @code{ctl-arrow},
custom.texi(,649) @code{fill-column}, @code{fill-prefix}, @code{indent-tabs-mode},
custom.texi(,650) @code{left-margin}, @*@code{mode-line-format}, @code{overwrite-mode},
custom.texi(,651) @code{selective-display-ellipses}, @*@code{selective-display},
custom.texi(,652) @code{tab-width}, and @code{truncate-lines}.  Some other variables are
custom.texi(,653) always local in every buffer, but they are used for internal
custom.texi(,654) purposes.@refill
custom.texi(,655) 
custom.texi(,656) Note: the variable @code{auto-fill-function} was formerly named
custom.texi(,657) @code{auto-fill-hook}.
custom.texi(,658) 
custom.texi(,659) @findex kill-local-variable
custom.texi(,660)   If you want a variable to cease to be local to the current buffer,
custom.texi(,661) call @kbd{M-x kill-local-variable} and provide the name of a variable to
custom.texi(,662) the prompt.  The global value of the variable
custom.texi(,663) is again in effect in this buffer.  Setting the major mode kills all
custom.texi(,664) the local variables of the buffer.
custom.texi(,665) 
custom.texi(,666) @findex setq-default
custom.texi(,667)   To set the global value of a variable, regardless of whether the
custom.texi(,668) variable has a local value in the current buffer, you can use the
custom.texi(,669) Lisp function @code{setq-default}.  It works like @code{setq}.
custom.texi(,670) If there is a local value in the current buffer, the local value is
custom.texi(,671) not affected by @code{setq-default}; thus, the new global value may
custom.texi(,672) not be visible until you switch to another buffer, as in the case of:
custom.texi(,673) 
custom.texi(,674) @example
custom.texi(,675) (setq-default fill-column 75)
custom.texi(,676) @end example
custom.texi(,677) 
custom.texi(,678) @noindent
custom.texi(,679) @code{setq-default} is the only way to set the global value of a variable
custom.texi(,680) that has been marked with @code{make-variable-buffer-local}.
custom.texi(,681) 
custom.texi(,682) @findex default-value
custom.texi(,683)   Programs can look at a variable's default value with @code{default-value}.
custom.texi(,684) This function takes a symbol as an argument and returns its default value.
custom.texi(,685) The argument is evaluated; usually you must quote it explicitly, as in
custom.texi(,686) the case of:
custom.texi(,687) 
custom.texi(,688) @example
custom.texi(,689) (default-value 'fill-column)
custom.texi(,690) @end example
custom.texi(,691) 
custom.texi(,692) @node File Variables
custom.texi(,693) @subsection Local Variables in Files
custom.texi(,694) @cindex local variables in files
custom.texi(,695) 
custom.texi(,696)   A file can contain a @dfn{local variables list}, which specifies the
custom.texi(,697) values to use for certain Emacs variables when that file is edited.
custom.texi(,698) Visiting the file checks for a local variables list and makes each variable
custom.texi(,699) in the list local to the buffer in which the file is visited, with the
custom.texi(,700) value specified in the file.
custom.texi(,701) 
custom.texi(,702)   A local variables list goes near the end of the file, in the last page.
custom.texi(,703) (It is often best to put it on a page by itself.)  The local variables list
custom.texi(,704) starts with a line containing the string @samp{Local Variables:}, and ends
custom.texi(,705) with a line containing the string @samp{End:}.  In between come the
custom.texi(,706) variable names and values, one set per line, as @samp{@var{variable}:@:
custom.texi(,707) @var{value}}.  The @var{value}s are not evaluated; they are used literally.
custom.texi(,708) 
custom.texi(,709)   The line which starts the local variables list does not have to say
custom.texi(,710) just @samp{Local Variables:}.  If there is other text before @samp{Local
custom.texi(,711) Variables:}, that text is called the @dfn{prefix}, and if there is other
custom.texi(,712) text after, that is called the @dfn{suffix}.  If a prefix or suffix are
custom.texi(,713) present, each entry in the local variables list should have the prefix
custom.texi(,714) before it and the suffix after it.  This includes the @samp{End:} line.
custom.texi(,715) The prefix and suffix are included to disguise the local variables list
custom.texi(,716) as a comment so the compiler or text formatter  will ignore it.
custom.texi(,717) If you do not need to disguise the local variables list as a comment in
custom.texi(,718) this way, there is no need to include a prefix or a suffix.@refill
custom.texi(,719) 
custom.texi(,720)   Two ``variable'' names are special in a local variables list: a value
custom.texi(,721) for the variable @code{mode} sets the major mode, and a value for the
custom.texi(,722) variable @code{eval} is simply evaluated as an expression and the value
custom.texi(,723) is ignored.  These are not real variables; setting them in any other
custom.texi(,724) context does not have the same effect.  If @code{mode} is used in a
custom.texi(,725) local variables list, it should be the first entry in the list.
custom.texi(,726) 
custom.texi(,727) Here is an example of a local variables list:
custom.texi(,728) @example
custom.texi(,729) ;;; Local Variables: ***
custom.texi(,730) ;;; mode:lisp ***
custom.texi(,731) ;;; comment-column:0 ***
custom.texi(,732) ;;; comment-start: ";;; "  ***
custom.texi(,733) ;;; comment-end:"***" ***
custom.texi(,734) ;;; End: ***
custom.texi(,735) @end example
custom.texi(,736) 
custom.texi(,737)   Note that the prefix is @samp{;;; } and the suffix is @samp{ ***}.
custom.texi(,738) Note also that comments in the file begin with and end with the same
custom.texi(,739) strings.  Presumably the file contains code in a language which is
custom.texi(,740) enough like Lisp for Lisp mode to be useful but in which comments
custom.texi(,741) start and end differently.  The prefix and suffix are used in the local
custom.texi(,742) variables list to make the list look like several lines of comments when
custom.texi(,743) the compiler or interpreter for that language reads the file. 
custom.texi(,744) 
custom.texi(,745)   The start of the local variables list must be no more than 3000
custom.texi(,746) characters from the end of the file, and must be in the last page if the
custom.texi(,747) file is divided into pages.  Otherwise, Emacs will not notice it is
custom.texi(,748) there.  The purpose is twofold: a stray @samp{Local Variables:}@: not in
custom.texi(,749) the last page does not confuse Emacs, and Emacs never needs to search a
custom.texi(,750) long file that contains no page markers and has no local variables list.
custom.texi(,751) 
custom.texi(,752)   You may be tempted to turn on Auto Fill mode with a local variable
custom.texi(,753) list.  That is inappropriate.  Whether you use Auto Fill mode or not is
custom.texi(,754) a matter of personal taste, not a matter of the contents of particular
custom.texi(,755) files.  If you want to use Auto Fill, set up major mode hooks with your
custom.texi(,756) init file to turn it on (when appropriate) for you alone
custom.texi(,757) (@pxref{Init File}).  Don't try to use a local variable list that would
custom.texi(,758) impose your taste on everyone working with the file.
custom.texi(,759) 
custom.texi(,760) XEmacs allows you to specify local variables in the first line
custom.texi(,761) of a file, in addition to specifying them in the @code{Local Variables}
custom.texi(,762) section at the end of a file.
custom.texi(,763) 
custom.texi(,764) If the first line of a file contains two occurrences of @code{`-*-'},
custom.texi(,765) XEmacs uses the information between them to determine what the major
custom.texi(,766) mode and variable settings should be.  For example, these are all legal:
custom.texi(,767) 
custom.texi(,768) @example
custom.texi(,769)         ;;; -*- mode: emacs-lisp -*-
custom.texi(,770)         ;;; -*- mode: postscript; version-control: never -*-
custom.texi(,771)         ;;; -*- tags-file-name: "/foo/bar/TAGS" -*-
custom.texi(,772) @end example
custom.texi(,773) 
custom.texi(,774) For historical reasons, the syntax @code{`-*- modename -*-'} is allowed
custom.texi(,775) as well; for example, you can use:
custom.texi(,776) 
custom.texi(,777) @example
custom.texi(,778)         ;;; -*- emacs-lisp -*-
custom.texi(,779) @end example
custom.texi(,780) 
custom.texi(,781) @vindex enable-local-variables
custom.texi(,782) The variable @code{enable-local-variables} controls the use of local
custom.texi(,783) variables lists in files you visit.  The value can be @code{t},
custom.texi(,784) @code{nil}, or something else.  A value of @code{t} means local variables
custom.texi(,785) lists are obeyed; @code{nil} means they are ignored; anything else means
custom.texi(,786) query.
custom.texi(,787) 
custom.texi(,788) The command @code{M-x normal-mode} always obeys local variables lists
custom.texi(,789) and ignores this variable.
custom.texi(,790) 
custom.texi(,791) @node Keyboard Macros
custom.texi(,792) @section Keyboard Macros
custom.texi(,793) 
custom.texi(,794) @cindex keyboard macros
custom.texi(,795)   A @dfn{keyboard macro} is a command defined by the user to abbreviate a
custom.texi(,796) sequence of keys.  For example, if you discover that you are about to type
custom.texi(,797) @kbd{C-n C-d} forty times, you can speed your work by defining a keyboard
custom.texi(,798) macro to invoke @kbd{C-n C-d} and calling it with a repeat count of forty.
custom.texi(,799) 
custom.texi(,800) @c widecommands
custom.texi(,801) @table @kbd
custom.texi(,802) @item C-x (
custom.texi(,803) Start defining a keyboard macro (@code{start-kbd-macro}).
custom.texi(,804) @item C-x )
custom.texi(,805) End the definition of a keyboard macro (@code{end-kbd-macro}).
custom.texi(,806) @item C-x e
custom.texi(,807) Execute the most recent keyboard macro (@code{call-last-kbd-macro}).
custom.texi(,808) @item C-u C-x (
custom.texi(,809) Re-execute last keyboard macro, then add more keys to its definition.
custom.texi(,810) @item C-x q
custom.texi(,811) When this point is reached during macro execution, ask for confirmation
custom.texi(,812) (@code{kbd-macro-query}).
custom.texi(,813) @item M-x name-last-kbd-macro
custom.texi(,814) Give a command name (for the duration of the session) to the most
custom.texi(,815) recently defined keyboard macro.
custom.texi(,816) @item M-x insert-kbd-macro
custom.texi(,817) Insert in the buffer a keyboard macro's definition, as Lisp code.
custom.texi(,818) @end table
custom.texi(,819) 
custom.texi(,820)   Keyboard macros differ from other Emacs commands in that they are
custom.texi(,821) written in the Emacs command language rather than in Lisp.  This makes it
custom.texi(,822) easier for the novice to write them and makes them more convenient as
custom.texi(,823) temporary hacks.  However, the Emacs command language is not powerful
custom.texi(,824) enough as a programming language to be useful for writing anything
custom.texi(,825) general or complex.  For such things, Lisp must be used.
custom.texi(,826) 
custom.texi(,827)   You define a keyboard macro by executing the commands which are its
custom.texi(,828) definition.  Put differently, as you are defining a keyboard macro, the
custom.texi(,829) definition is being executed for the first time.  This way, you see
custom.texi(,830) what the effects of your commands are, and don't have to figure
custom.texi(,831) them out in your head.  When you are finished, the keyboard macro is
custom.texi(,832) defined and also has been executed once.  You can then execute the same
custom.texi(,833) set of commands again by invoking the macro.
custom.texi(,834) 
custom.texi(,835) @menu
custom.texi(,836) * Basic Kbd Macro::     Defining and running keyboard macros.
custom.texi(,837) * Save Kbd Macro::      Giving keyboard macros names; saving them in files.
custom.texi(,838) * Kbd Macro Query::     Keyboard macros that do different things each use.
custom.texi(,839) @end menu
custom.texi(,840) 
custom.texi(,841) @node Basic Kbd Macro
custom.texi(,842) @subsection Basic Use
custom.texi(,843) 
custom.texi(,844) @kindex C-x (
custom.texi(,845) @kindex C-x )
custom.texi(,846) @kindex C-x e
custom.texi(,847) @findex start-kbd-macro
custom.texi(,848) @findex end-kbd-macro
custom.texi(,849) @findex call-last-kbd-macro
custom.texi(,850)   To start defining a keyboard macro, type @kbd{C-x (}
custom.texi(,851) (@code{start-kbd-macro}).  From then on, anything you type continues to be
custom.texi(,852) executed, but also becomes part of the definition of the macro.  @samp{Def}
custom.texi(,853) appears in the mode line to remind you of what is going on.  When you are
custom.texi(,854) finished, the @kbd{C-x )} command (@code{end-kbd-macro}) terminates the
custom.texi(,855) definition, without becoming part of it. 
custom.texi(,856) 
custom.texi(,857)   For example,
custom.texi(,858) 
custom.texi(,859) @example
custom.texi(,860) C-x ( M-f foo C-x )
custom.texi(,861) @end example
custom.texi(,862) 
custom.texi(,863) @noindent
custom.texi(,864) defines a macro to move forward a word and then insert @samp{foo}.
custom.texi(,865) 
custom.texi(,866) You can give @kbd{C-x )} a repeat count as an argument, in which case it
custom.texi(,867) repeats the macro that many times right after defining it, but defining
custom.texi(,868) the macro counts as the first repetition (since it is executed as you
custom.texi(,869) define it).  If you give @kbd{C-x )} an argument of 4, it executes the
custom.texi(,870) macro immediately 3 additional times.  An argument of zero to @kbd{C-x
custom.texi(,871) e} or @kbd{C-x )} means repeat the macro indefinitely (until it gets an
custom.texi(,872) error or you type @kbd{C-g}).
custom.texi(,873) 
custom.texi(,874)   Once you have defined a macro, you can invoke it again with the
custom.texi(,875) @kbd{C-x e} command (@code{call-last-kbd-macro}).  You can give the
custom.texi(,876) command a repeat count numeric argument to execute the macro many times.
custom.texi(,877) 
custom.texi(,878)   To repeat an operation at regularly spaced places in the
custom.texi(,879) text, define a macro and include as part of the macro the commands to move
custom.texi(,880) to the next place you want to use it.  For example, if you want to change
custom.texi(,881) each line, you should position point at the start of a line, and define a
custom.texi(,882) macro to change that line and leave point at the start of the next line.
custom.texi(,883) Repeating the macro will then operate on successive lines.
custom.texi(,884) 
custom.texi(,885)   After you have terminated the definition of a keyboard macro, you can add
custom.texi(,886) to the end of its definition by typing @kbd{C-u C-x (}.  This is equivalent
custom.texi(,887) to plain @kbd{C-x (} followed by retyping the whole definition so far.  As
custom.texi(,888) a consequence it re-executes the macro as previously defined.
custom.texi(,889) 
custom.texi(,890) @node Save Kbd Macro
custom.texi(,891) @subsection Naming and Saving Keyboard Macros
custom.texi(,892) 
custom.texi(,893) @findex name-last-kbd-macro
custom.texi(,894)   To save a keyboard macro for longer than until you define the
custom.texi(,895) next one, you must give it a name using @kbd{M-x name-last-kbd-macro}.
custom.texi(,896) This reads a name as an argument using the minibuffer and defines that name
custom.texi(,897) to execute the macro.  The macro name is a Lisp symbol, and defining it in
custom.texi(,898) this way makes it a valid command name for calling with @kbd{M-x} or for
custom.texi(,899) binding a key to with @code{global-set-key} (@pxref{Keymaps}).  If you
custom.texi(,900) specify a name that has a prior definition other than another keyboard
custom.texi(,901) macro, Emacs prints an error message and nothing is changed.
custom.texi(,902) 
custom.texi(,903) @findex insert-kbd-macro
custom.texi(,904)   Once a macro has a command name, you can save its definition in a file.
custom.texi(,905) You can then use it in another editing session.  First visit the file
custom.texi(,906) you want to save the definition in.  Then use the command:
custom.texi(,907) 
custom.texi(,908) @example
custom.texi(,909) M-x insert-kbd-macro @key{RET} @var{macroname} @key{RET}
custom.texi(,910) @end example
custom.texi(,911) 
custom.texi(,912) @noindent
custom.texi(,913) This inserts some Lisp code that, when executed later, will define the same
custom.texi(,914) macro with the same definition it has now.  You need not understand Lisp
custom.texi(,915) code to do this, because @code{insert-kbd-macro} writes the Lisp code for you.
custom.texi(,916) Then save the file.  You can load the file with @code{load-file}
custom.texi(,917) (@pxref{Lisp Libraries}).  If the file you save in is your initialization file
custom.texi(,918) (@pxref{Init File}), then the macro will be defined each
custom.texi(,919) time you run Emacs.
custom.texi(,920) 
custom.texi(,921)   If you give @code{insert-kbd-macro} a prefix argument, it creates
custom.texi(,922) additional Lisp code to record the keys (if any) that you have bound to the
custom.texi(,923) keyboard macro, so that the macro is reassigned the same keys when you
custom.texi(,924) load the file.
custom.texi(,925) 
custom.texi(,926) @node Kbd Macro Query
custom.texi(,927) @subsection Executing Macros With Variations
custom.texi(,928) 
custom.texi(,929) @kindex C-x q
custom.texi(,930) @findex kbd-macro-query
custom.texi(,931)   You can use @kbd{C-x q} (@code{kbd-macro-query}), to get an effect similar
custom.texi(,932) to that of @code{query-replace}.  The macro asks you  each time
custom.texi(,933) whether to make a change.  When you are defining the macro, type @kbd{C-x
custom.texi(,934) q} at the point where you want the query to occur.  During macro
custom.texi(,935) definition, the @kbd{C-x q} does nothing, but when you invoke the macro,
custom.texi(,936) @kbd{C-x q} reads a character from the terminal to decide whether to
custom.texi(,937) continue.
custom.texi(,938) 
custom.texi(,939)   The special answers to a @kbd{C-x q} query are @key{SPC}, @key{DEL},
custom.texi(,940) @kbd{C-d}, @kbd{C-l}, and @kbd{C-r}.  Any other character terminates
custom.texi(,941) execution of the keyboard macro and is then read as a command.
custom.texi(,942) @key{SPC} means to continue.  @key{DEL} means to skip the remainder of
custom.texi(,943) this repetition of the macro, starting again from the beginning in the
custom.texi(,944) next repetition.  @kbd{C-d} means to skip the remainder of this
custom.texi(,945) repetition and cancel further repetition.  @kbd{C-l} redraws the frame
custom.texi(,946) and asks you again for a character to specify what to do.  @kbd{C-r} enters
custom.texi(,947) a recursive editing level, in which you can perform editing that is not
custom.texi(,948) part of the macro.  When you exit the recursive edit using @kbd{C-M-c},
custom.texi(,949) you are asked again how to continue with the keyboard macro.  If you
custom.texi(,950) type a @key{SPC} at this time, the rest of the macro definition is
custom.texi(,951) executed.  It is up to you to leave point and the text in a state such
custom.texi(,952) that the rest of the macro will do what you want.@refill
custom.texi(,953) 
custom.texi(,954)   @kbd{C-u C-x q}, which is @kbd{C-x q} with a numeric argument, performs a
custom.texi(,955) different function.  It enters a recursive edit reading input from the
custom.texi(,956) keyboard, both when you type it during the definition of the macro and
custom.texi(,957) when it is executed from the macro.  During definition, the editing you do
custom.texi(,958) inside the recursive edit does not become part of the macro.  During macro
custom.texi(,959) execution, the recursive edit gives you a chance to do some particularized
custom.texi(,960) editing.  @xref{Recursive Edit}.
custom.texi(,961) 
custom.texi(,962) @node Key Bindings
custom.texi(,963) @section Customizing Key Bindings
custom.texi(,964) 
custom.texi(,965)   This section deals with the @dfn{keymaps} that define the bindings
custom.texi(,966) between keys and functions, and shows how you can customize these bindings.
custom.texi(,967) @cindex command
custom.texi(,968) @cindex function
custom.texi(,969) @cindex command name
custom.texi(,970) 
custom.texi(,971)   A command is a Lisp function whose definition provides for interactive
custom.texi(,972) use.  Like every Lisp function, a command has a function name, which is
custom.texi(,973) a Lisp symbol whose name usually consists of lower case letters and
custom.texi(,974) hyphens.
custom.texi(,975) 
custom.texi(,976) @menu
custom.texi(,977) * Keymaps::    Definition of the keymap data structure.
custom.texi(,978)                Names of Emacs's standard keymaps.
custom.texi(,979) * Rebinding::  How to redefine one key's meaning conveniently.
custom.texi(,980) * Disabling::  Disabling a command means confirmation is required
custom.texi(,981)                 before it can be executed.  This is done to protect
custom.texi(,982)                 beginners from surprises.
custom.texi(,983) @end menu
custom.texi(,984) 
custom.texi(,985) @node Keymaps
custom.texi(,986) @subsection Keymaps
custom.texi(,987) @cindex keymap
custom.texi(,988) 
custom.texi(,989) @cindex global keymap
custom.texi(,990) @vindex global-map
custom.texi(,991)   The bindings between characters and command functions are recorded in
custom.texi(,992) data structures called @dfn{keymaps}.  Emacs has many of these.  One, the
custom.texi(,993) @dfn{global} keymap, defines the meanings of the single-character keys that
custom.texi(,994) are defined regardless of major mode.  It is the value of the variable
custom.texi(,995) @code{global-map}.
custom.texi(,996) 
custom.texi(,997) @cindex local keymap
custom.texi(,998) @vindex c-mode-map
custom.texi(,999) @vindex lisp-mode-map
custom.texi(,1000)   Each major mode has another keymap, its @dfn{local keymap}, which
custom.texi(,1001) contains overriding definitions for the single-character keys that are
custom.texi(,1002) redefined in that mode.  Each buffer records which local keymap is
custom.texi(,1003) installed for it at any time, and the current buffer's local keymap is
custom.texi(,1004) the only one that directly affects command execution.  The local keymaps
custom.texi(,1005) for Lisp mode, C mode, and many other major modes always exist even when
custom.texi(,1006) not in use.  They are the values of the variables @code{lisp-mode-map},
custom.texi(,1007) @code{c-mode-map}, and so on.  For less frequently used major modes, the
custom.texi(,1008) local keymap is sometimes constructed only when the mode is used for the
custom.texi(,1009) first time in a session, to save space.
custom.texi(,1010) 
custom.texi(,1011) @cindex minibuffer
custom.texi(,1012) @vindex minibuffer-local-map
custom.texi(,1013) @vindex minibuffer-local-ns-map
custom.texi(,1014) @vindex minibuffer-local-completion-map
custom.texi(,1015) @vindex minibuffer-local-must-match-map
custom.texi(,1016) @vindex repeat-complex-command-map
custom.texi(,1017) @vindex isearch-mode-map
custom.texi(,1018)   There are local keymaps for the minibuffer, too; they contain various
custom.texi(,1019) completion and exit commands.
custom.texi(,1020) 
custom.texi(,1021) @itemize @bullet
custom.texi(,1022) @item
custom.texi(,1023) @code{minibuffer-local-map} is used for ordinary input (no completion).
custom.texi(,1024) @item
custom.texi(,1025) @code{minibuffer-local-ns-map} is similar, except that @key{SPC} exits
custom.texi(,1026) just like @key{RET}.  This is used mainly for Mocklisp compatibility.
custom.texi(,1027) @item
custom.texi(,1028) @code{minibuffer-local-completion-map} is for permissive completion.
custom.texi(,1029) @item
custom.texi(,1030) @code{minibuffer-local-must-match-map} is for strict completion and
custom.texi(,1031) for cautious completion.
custom.texi(,1032) @item
custom.texi(,1033) @code{repeat-complex-command-map} is for use in @kbd{C-x @key{ESC} @key{ESC}}.
custom.texi(,1034) @item
custom.texi(,1035) @code{isearch-mode-map} contains the bindings of the special keys which
custom.texi(,1036) are bound in the pseudo-mode entered with @kbd{C-s} and @kbd{C-r}.
custom.texi(,1037) @end itemize
custom.texi(,1038) 
custom.texi(,1039) @vindex ctl-x-map
custom.texi(,1040) @vindex help-map
custom.texi(,1041) @vindex esc-map
custom.texi(,1042)   Finally, each prefix key has a keymap which defines the key sequences
custom.texi(,1043) that start with it.  For example, @code{ctl-x-map} is the keymap used for
custom.texi(,1044) characters following a @kbd{C-x}.
custom.texi(,1045) 
custom.texi(,1046) @itemize @bullet
custom.texi(,1047) @item
custom.texi(,1048) @code{ctl-x-map} is the variable name for the map used for characters that
custom.texi(,1049) follow @kbd{C-x}.
custom.texi(,1050) @item
custom.texi(,1051) @code{help-map} is used for characters that follow @kbd{C-h}.
custom.texi(,1052) @item
custom.texi(,1053) @code{esc-map} is for characters that follow @key{ESC}. All Meta
custom.texi(,1054) characters are actually defined by this map.
custom.texi(,1055) @item
custom.texi(,1056) @code{ctl-x-4-map} is for characters that follow @kbd{C-x 4}.
custom.texi(,1057) @item
custom.texi(,1058) @code{mode-specific-map} is for characters that follow @kbd{C-c}.
custom.texi(,1059) @end itemize
custom.texi(,1060) 
custom.texi(,1061)   The definition of a prefix key is the keymap to use for looking up
custom.texi(,1062) the following character.  Sometimes the definition is actually a Lisp
custom.texi(,1063) symbol whose function definition is the following character keymap.  The
custom.texi(,1064) effect is the same, but it provides a command name for the prefix key that
custom.texi(,1065) you can use as a description of what the prefix key is for.  Thus the
custom.texi(,1066) binding of @kbd{C-x} is the symbol @code{Ctl-X-Prefix}, whose function
custom.texi(,1067) definition is the keymap for @kbd{C-x} commands, the value of
custom.texi(,1068) @code{ctl-x-map}.@refill
custom.texi(,1069) 
custom.texi(,1070)   Prefix key definitions can appear in either the global
custom.texi(,1071) map or a local map.  The definitions of @kbd{C-c}, @kbd{C-x}, @kbd{C-h},
custom.texi(,1072) and @key{ESC} as prefix keys appear in the global map, so these prefix
custom.texi(,1073) keys are always available.  Major modes can locally redefine a key as a
custom.texi(,1074) prefix by putting a prefix key definition for it in the local
custom.texi(,1075) map.@refill
custom.texi(,1076) 
custom.texi(,1077)   A mode can also put a prefix definition of a global prefix character such
custom.texi(,1078) as @kbd{C-x} into its local map.  This is how major modes override the
custom.texi(,1079) definitions of certain keys that start with @kbd{C-x}.  This case is
custom.texi(,1080) special, because the local definition does not entirely replace the global
custom.texi(,1081) one.  When both the global and local definitions of a key are other
custom.texi(,1082) keymaps, the next character is looked up in both keymaps, with the local
custom.texi(,1083) definition overriding the global one.  The character after the
custom.texi(,1084) @kbd{C-x} is looked up in both the major mode's own keymap for redefined
custom.texi(,1085) @kbd{C-x} commands and in @code{ctl-x-map}.  If the major mode's own keymap
custom.texi(,1086) for @kbd{C-x} commands contains @code{nil}, the definition from the global
custom.texi(,1087) keymap for @kbd{C-x} commands is used.@refill
custom.texi(,1088) 
custom.texi(,1089) @node Rebinding
custom.texi(,1090) @subsection Changing Key Bindings
custom.texi(,1091) @cindex key rebinding, this session
custom.texi(,1092) @cindex rebinding keys, this session
custom.texi(,1093) 
custom.texi(,1094)   You can redefine an Emacs key by changing its entry in a keymap.
custom.texi(,1095) You can change the global keymap, in which case the change is effective in
custom.texi(,1096) all major modes except those that have their own overriding local
custom.texi(,1097) definitions for the same key.  Or you can change the current buffer's
custom.texi(,1098) local map, which affects all buffers using the same major mode.
custom.texi(,1099) 
custom.texi(,1100) @menu
custom.texi(,1101) * Interactive Rebinding::      Changing Key Bindings Interactively   
custom.texi(,1102) * Programmatic Rebinding::     Changing Key Bindings Programmatically
custom.texi(,1103) * Key Bindings Using Strings:: Using Strings for Changing Key Bindings 
custom.texi(,1104) @end menu
custom.texi(,1105) 
custom.texi(,1106) @node Interactive Rebinding
custom.texi(,1107) @subsubsection Changing Key Bindings Interactively
custom.texi(,1108) @findex global-set-key
custom.texi(,1109) @findex local-set-key
custom.texi(,1110) @findex local-unset-key
custom.texi(,1111) 
custom.texi(,1112) @table @kbd
custom.texi(,1113) @item M-x global-set-key @key{RET} @var{key} @var{cmd} @key{RET}
custom.texi(,1114) Defines @var{key} globally to run @var{cmd}.
custom.texi(,1115) @item M-x local-set-key @key{RET} @var{keys} @var{cmd} @key{RET} 
custom.texi(,1116) Defines @var{key} locally (in the major mode now in effect) to run
custom.texi(,1117) @var{cmd}.
custom.texi(,1118) @item M-x local-unset-key @key{RET} @var{keys} @key{RET}
custom.texi(,1119) Removes the local binding of @var{key}.
custom.texi(,1120) @end table
custom.texi(,1121) 
custom.texi(,1122) @var{cmd} is a symbol naming an interactively-callable function.
custom.texi(,1123) 
custom.texi(,1124) When called interactively, @var{key} is the next complete key sequence
custom.texi(,1125) that you type.  When called as a function, @var{key} is a string, a
custom.texi(,1126) vector of events, or a vector of key-description lists as described in
custom.texi(,1127) the @code{define-key} function description.  The binding goes in
custom.texi(,1128) the current buffer's local map, which is shared with other buffers in
custom.texi(,1129) the same major mode.
custom.texi(,1130) 
custom.texi(,1131) The following example:
custom.texi(,1132) 
custom.texi(,1133) @example
custom.texi(,1134) M-x global-set-key @key{RET} C-f next-line @key{RET}
custom.texi(,1135) @end example
custom.texi(,1136) 
custom.texi(,1137) @noindent
custom.texi(,1138) redefines @kbd{C-f} to move down a line.  The fact that @var{cmd} is
custom.texi(,1139) read second makes it serve as a kind of confirmation for @var{key}.
custom.texi(,1140) 
custom.texi(,1141)   These functions offer no way to specify a particular prefix keymap as
custom.texi(,1142) the one to redefine in, but that is not necessary, as you can include
custom.texi(,1143) prefixes in @var{key}.  @var{key} is read by reading characters one by
custom.texi(,1144) one until they amount to a complete key (that is, not a prefix key).
custom.texi(,1145) Thus, if you type @kbd{C-f} for @var{key}, Emacs enters
custom.texi(,1146) the minibuffer immediately to read @var{cmd}.  But if you type
custom.texi(,1147) @kbd{C-x}, another character is read; if that character is @kbd{4},
custom.texi(,1148) another character is read, and so on.  For example,@refill
custom.texi(,1149) 
custom.texi(,1150) @example
custom.texi(,1151) M-x global-set-key @key{RET} C-x 4 $ spell-other-window @key{RET}
custom.texi(,1152) @end example
custom.texi(,1153) 
custom.texi(,1154) @noindent
custom.texi(,1155) redefines @kbd{C-x 4 $} to run the (fictitious) command
custom.texi(,1156) @code{spell-other-window}.
custom.texi(,1157) 
custom.texi(,1158) @findex define-key
custom.texi(,1159) @findex substitute-key-definition
custom.texi(,1160)   The most general way to modify a keymap is the function
custom.texi(,1161) @code{define-key}, used in Lisp code (such as your init file).
custom.texi(,1162) @code{define-key} takes three arguments: the keymap, the key to modify
custom.texi(,1163) in it, and the new definition.  @xref{Init File}, for an example.
custom.texi(,1164) @code{substitute-key-definition} is used similarly; it takes three
custom.texi(,1165) arguments, an old definition, a new definition, and a keymap, and
custom.texi(,1166) redefines in that keymap all keys that were previously defined with the
custom.texi(,1167) old definition to have the new definition instead.
custom.texi(,1168) 
custom.texi(,1169) @node Programmatic Rebinding
custom.texi(,1170) @subsubsection Changing Key Bindings Programmatically
custom.texi(,1171) 
custom.texi(,1172)   You can use the functions @code{global-set-key} and @code{define-key}
custom.texi(,1173) to rebind keys under program control.
custom.texi(,1174) 
custom.texi(,1175) @findex define-key
custom.texi(,1176) @findex global-set-key
custom.texi(,1177) 
custom.texi(,1178) @table @kbd
custom.texi(,1179) @item  @code{(global-set-key @var{keys} @var{cmd})}
custom.texi(,1180) Defines @var{keys} globally to run @var{cmd}.
custom.texi(,1181) @item @code{(define-key @var{keymap} @var{keys} @var{def})}
custom.texi(,1182) Defines @var{keys} to run @var{def} in the keymap @var{keymap}.
custom.texi(,1183) @end table
custom.texi(,1184)  
custom.texi(,1185) @var{keymap} is a keymap object.
custom.texi(,1186) 
custom.texi(,1187) @var{keys} is the sequence of keystrokes to bind.
custom.texi(,1188) 
custom.texi(,1189) @var{def} is anything that can be a key's definition:
custom.texi(,1190) 
custom.texi(,1191) @itemize @bullet
custom.texi(,1192) @item
custom.texi(,1193) @code{nil}, meaning key is undefined in this keymap
custom.texi(,1194) @item
custom.texi(,1195) A command, that is, a Lisp function suitable for interactive calling
custom.texi(,1196) @item
custom.texi(,1197) A string or key sequence vector, which is treated as a keyboard macro
custom.texi(,1198) @item
custom.texi(,1199) A keymap to define a prefix key
custom.texi(,1200) @item
custom.texi(,1201) A symbol so that when the key is looked up, the symbol stands for its
custom.texi(,1202) function definition, which should at that time be one of the above,
custom.texi(,1203) or another symbol whose function definition is used, and so on
custom.texi(,1204) @item
custom.texi(,1205) A cons, @code{(string . defn)}, meaning that @var{defn} is the definition
custom.texi(,1206) (@var{defn} should be a valid definition in its own right)
custom.texi(,1207) @item
custom.texi(,1208) A cons, @code{(keymap . char)}, meaning use the definition of
custom.texi(,1209) @var{char} in map @var{keymap}
custom.texi(,1210) @end itemize
custom.texi(,1211) 
custom.texi(,1212) For backward compatibility, XEmacs allows you to specify key
custom.texi(,1213) sequences as strings.  However, the preferred method is to use the
custom.texi(,1214) representations of key sequences as vectors of keystrokes.
custom.texi(,1215) @xref{Keystrokes}, for more information about the rules for constructing
custom.texi(,1216) key sequences.
custom.texi(,1217) 
custom.texi(,1218) Emacs allows you to abbreviate representations for key sequences in 
custom.texi(,1219) most places where there is no ambiguity.
custom.texi(,1220) Here are some rules for abbreviation:
custom.texi(,1221) 
custom.texi(,1222) @itemize @bullet
custom.texi(,1223) @item
custom.texi(,1224) The keysym by itself is equivalent to a list of just that keysym, i.e.,
custom.texi(,1225) @code{f1} is equivalent to @code{(f1)}.
custom.texi(,1226) @item
custom.texi(,1227) A keystroke by itself is equivalent to a vector containing just that
custom.texi(,1228) keystroke, i.e.,  @code{(control a)} is equivalent to @code{[(control a)]}.
custom.texi(,1229) @item
custom.texi(,1230) You can use ASCII codes for keysyms that have them. i.e.,
custom.texi(,1231) @code{65} is equivalent to @code{A}. (This is not so much an
custom.texi(,1232) abbreviation as an alternate representation.)
custom.texi(,1233) @end itemize
custom.texi(,1234) 
custom.texi(,1235) Here are some examples of programmatically binding keys:
custom.texi(,1236) 
custom.texi(,1237) @example
custom.texi(,1238) 
custom.texi(,1239) ;;;  Bind @code{my-command} to @key{f1}
custom.texi(,1240) (global-set-key 'f1 'my-command)                
custom.texi(,1241) 
custom.texi(,1242) ;;;  Bind @code{my-command} to @kbd{Shift-f1}
custom.texi(,1243) (global-set-key '(shift f1) 'my-command)
custom.texi(,1244) 
custom.texi(,1245) ;;; Bind @code{my-command} to @kbd{C-c Shift-f1}
custom.texi(,1246) (global-set-key '[(control c) (shift f1)] 'my-command)  
custom.texi(,1247) 
custom.texi(,1248) ;;; Bind @code{my-command} to the middle mouse button.
custom.texi(,1249) (global-set-key 'button2 'my-command)
custom.texi(,1250) 
custom.texi(,1251) ;;; Bind @code{my-command} to @kbd{@key{META} @key{CTL} @key{Right Mouse Button}}
custom.texi(,1252) ;;; in the keymap that is in force when you are running @code{dired}.
custom.texi(,1253) (define-key dired-mode-map '(meta control button3) 'my-command)
custom.texi(,1254) 
custom.texi(,1255) @end example
custom.texi(,1256) 
custom.texi(,1257) @comment ;; note that these next four lines are not synonymous:
custom.texi(,1258) @comment ;;
custom.texi(,1259) @comment (global-set-key '(meta control delete) 'my-command)
custom.texi(,1260) @comment (global-set-key '(meta control backspace) 'my-command)
custom.texi(,1261) @comment (global-set-key '(meta control h) 'my-command)
custom.texi(,1262) @comment (global-set-key '(meta control H) 'my-command)
custom.texi(,1263) @comment 
custom.texi(,1264) @comment ;; note that this binds two key sequences: ``control-j'' and ``linefeed''.
custom.texi(,1265) @comment ;;
custom.texi(,1266) @comment (global-set-key "\^J" 'my-command)
custom.texi(,1267) 
custom.texi(,1268) @node Key Bindings Using Strings
custom.texi(,1269) @subsubsection Using Strings for Changing Key Bindings 
custom.texi(,1270) 
custom.texi(,1271)   For backward compatibility, you can still use strings to represent
custom.texi(,1272) key sequences.  Thus you can use commands like the following:
custom.texi(,1273) 
custom.texi(,1274) @example
custom.texi(,1275) ;;; Bind @code{end-of-line} to @kbd{C-f}
custom.texi(,1276) (global-set-key "\C-f" 'end-of-line)
custom.texi(,1277) @end example
custom.texi(,1278) 
custom.texi(,1279) Note, however, that in some cases you may be binding more than one
custom.texi(,1280) key sequence by using a single command.  This situation can 
custom.texi(,1281) arise because in ASCII, @kbd{C-i} and @key{TAB} have
custom.texi(,1282) the same representation.  Therefore, when Emacs sees:
custom.texi(,1283) 
custom.texi(,1284) @example
custom.texi(,1285) (global-set-key "\C-i" 'end-of-line)
custom.texi(,1286) @end example
custom.texi(,1287) 
custom.texi(,1288) it is unclear whether the user intended to bind @kbd{C-i} or @key{TAB}.
custom.texi(,1289) The solution XEmacs adopts is to bind both of these key
custom.texi(,1290) sequences.
custom.texi(,1291) 
custom.texi(,1292) @cindex redefining keys
custom.texi(,1293) After binding a command to two key sequences with a form like:
custom.texi(,1294) 
custom.texi(,1295) @example
custom.texi(,1296)         (define-key global-map "\^X\^I" 'command-1)
custom.texi(,1297) @end example
custom.texi(,1298) 
custom.texi(,1299) it is possible to redefine only one of those sequences like so:
custom.texi(,1300) 
custom.texi(,1301) @example
custom.texi(,1302)         (define-key global-map [(control x) (control i)] 'command-2)
custom.texi(,1303)         (define-key global-map [(control x) tab] 'command-3)
custom.texi(,1304) @end example
custom.texi(,1305) 
custom.texi(,1306) This applies only when running under a window system.  If you are
custom.texi(,1307) talking to Emacs through an ASCII-only channel, you do not get any of
custom.texi(,1308) these features.
custom.texi(,1309) 
custom.texi(,1310) Here is a table of pairs of key sequences that behave in a
custom.texi(,1311) similar fashion:
custom.texi(,1312) 
custom.texi(,1313) @example
custom.texi(,1314)         control h      backspace           
custom.texi(,1315)         control l      clear
custom.texi(,1316)         control i      tab 
custom.texi(,1317)         control m      return              
custom.texi(,1318)         control j      linefeed 
custom.texi(,1319)         control [      escape
custom.texi(,1320)         control @@      control space
custom.texi(,1321) @end example
custom.texi(,1322) 
custom.texi(,1323) @node Disabling
custom.texi(,1324) @subsection Disabling Commands
custom.texi(,1325) @cindex disabled command
custom.texi(,1326) 
custom.texi(,1327)   Disabling a command marks it as requiring confirmation before it
custom.texi(,1328) can be executed.  The purpose of disabling a command is to prevent
custom.texi(,1329) beginning users from executing it by accident and being confused.
custom.texi(,1330) 
custom.texi(,1331)   The direct mechanism for disabling a command is to have a non-@code{nil}
custom.texi(,1332) @code{disabled} property on the Lisp symbol for the command.  These
custom.texi(,1333) properties are normally set by the user's init file with
custom.texi(,1334) Lisp expressions such as:
custom.texi(,1335) 
custom.texi(,1336) @example
custom.texi(,1337) (put 'delete-region 'disabled t)
custom.texi(,1338) @end example
custom.texi(,1339) 
custom.texi(,1340) @xref{Init File}.
custom.texi(,1341) 
custom.texi(,1342)   If the value of the @code{disabled} property is a string, that string
custom.texi(,1343) is included in the message printed when the command is used:
custom.texi(,1344) 
custom.texi(,1345) @example
custom.texi(,1346) (put 'delete-region 'disabled
custom.texi(,1347)      "Text deleted this way cannot be yanked back!\n")
custom.texi(,1348) @end example
custom.texi(,1349) 
custom.texi(,1350) @findex disable-command
custom.texi(,1351) @findex enable-command
custom.texi(,1352)   You can disable a command either by editing the init file
custom.texi(,1353) directly or with the command @kbd{M-x disable-command}, which edits the
custom.texi(,1354) init file for you.  @xref{Init File}.
custom.texi(,1355) 
custom.texi(,1356)   When you attempt to invoke a disabled command interactively in Emacs,
custom.texi(,1357) a window is displayed containing the command's name, its
custom.texi(,1358) documentation, and some instructions on what to do next; then
custom.texi(,1359) Emacs asks for input saying whether to execute the command as requested,
custom.texi(,1360) enable it and execute, or cancel it.  If you decide to enable the
custom.texi(,1361) command, you are asked whether to do this permanently or just for the
custom.texi(,1362) current session.  Enabling permanently works by automatically editing
custom.texi(,1363) your init file.  You can use @kbd{M-x enable-command} at any
custom.texi(,1364) time to enable any command permanently.
custom.texi(,1365) 
custom.texi(,1366)   Whether a command is disabled is independent of what key is used to
custom.texi(,1367) invoke it; it also applies if the command is invoked using @kbd{M-x}.
custom.texi(,1368) Disabling a command has no effect on calling it as a function from Lisp
custom.texi(,1369) programs.
custom.texi(,1370) 
custom.texi(,1371) @node Syntax
custom.texi(,1372) @section The Syntax Table
custom.texi(,1373) @cindex syntax table
custom.texi(,1374) 
custom.texi(,1375)   All the Emacs commands which parse words or balance parentheses are
custom.texi(,1376) controlled by the @dfn{syntax table}.  The syntax table specifies which
custom.texi(,1377) characters are opening delimiters, which are parts of words, which are
custom.texi(,1378) string quotes, and so on.  Actually, each major mode has its own syntax
custom.texi(,1379) table (though sometimes related major modes use the same one) which it
custom.texi(,1380) installs in each buffer that uses that major mode.  The syntax table
custom.texi(,1381) installed in the current buffer is the one that all commands use, so we
custom.texi(,1382) call it ``the'' syntax table.  A syntax table is a Lisp object, a vector of
custom.texi(,1383) length 256 whose elements are numbers.
custom.texi(,1384) 
custom.texi(,1385) @menu
custom.texi(,1386) * Entry: Syntax Entry.    What the syntax table records for each character.
custom.texi(,1387) * Change: Syntax Change.  How to change the information.
custom.texi(,1388) @end menu
custom.texi(,1389) 
custom.texi(,1390) @node Syntax Entry
custom.texi(,1391) @subsection Information About Each Character
custom.texi(,1392) 
custom.texi(,1393)   The syntax table entry for a character is a number that encodes six
custom.texi(,1394) pieces of information:
custom.texi(,1395) 
custom.texi(,1396) @itemize @bullet
custom.texi(,1397) @item
custom.texi(,1398) The syntactic class of the character, represented as a small integer
custom.texi(,1399) @item
custom.texi(,1400) The matching delimiter, for delimiter characters only
custom.texi(,1401) (the matching delimiter of @samp{(} is @samp{)}, and vice versa)
custom.texi(,1402) @item
custom.texi(,1403) A flag saying whether the character is the first character of a
custom.texi(,1404) two-character comment starting sequence
custom.texi(,1405) @item
custom.texi(,1406) A flag saying whether the character is the second character of a
custom.texi(,1407) two-character comment starting sequence
custom.texi(,1408) @item
custom.texi(,1409) A flag saying whether the character is the first character of a
custom.texi(,1410) two-character comment ending sequence
custom.texi(,1411) @item
custom.texi(,1412) A flag saying whether the character is the second character of a
custom.texi(,1413) two-character comment ending sequence
custom.texi(,1414) @end itemize
custom.texi(,1415) 
custom.texi(,1416)   The syntactic classes are stored internally as small integers, but are
custom.texi(,1417) usually described to or by the user with characters.  For example, @samp{(}
custom.texi(,1418) is used to specify the syntactic class of opening delimiters.  Here is a
custom.texi(,1419) table of syntactic classes, with the characters that specify them.
custom.texi(,1420) 
custom.texi(,1421) @table @samp
custom.texi(,1422) @item @w{-}
custom.texi(,1423) The class of whitespace characters.  Please don't use the formerly
custom.texi(,1424) advertised @w{ }, which is not supported by GNU Emacs.
custom.texi(,1425) @item w
custom.texi(,1426) The class of word-constituent characters.
custom.texi(,1427) @item _
custom.texi(,1428) The class of characters that are part of symbol names but not words.
custom.texi(,1429) This class is represented by @samp{_} because the character @samp{_}
custom.texi(,1430) has this class in both C and Lisp.
custom.texi(,1431) @item .
custom.texi(,1432) The class of punctuation characters that do not fit into any other
custom.texi(,1433) special class.
custom.texi(,1434) @item (
custom.texi(,1435) The class of opening delimiters.
custom.texi(,1436) @item )
custom.texi(,1437) The class of closing delimiters.
custom.texi(,1438) @item '
custom.texi(,1439) The class of expression-adhering characters.  These characters are
custom.texi(,1440) part of a symbol if found within or adjacent to one, and are part
custom.texi(,1441) of a following expression if immediately preceding one, but are like
custom.texi(,1442) whitespace if surrounded by whitespace.
custom.texi(,1443) @item "
custom.texi(,1444) The class of string-quote characters.  They match each other in pairs,
custom.texi(,1445) and the characters within the pair all lose their syntactic
custom.texi(,1446) significance except for the @samp{\} and @samp{/} classes of escape
custom.texi(,1447) characters, which can be used to include a string-quote inside the
custom.texi(,1448) string.
custom.texi(,1449) @item $
custom.texi(,1450) The class of self-matching delimiters.  This is intended for @TeX{}'s
custom.texi(,1451) @samp{$}, which is used both to enter and leave math mode.  Thus,
custom.texi(,1452) a pair of matching @samp{$} characters surround each piece of math mode
custom.texi(,1453) @TeX{} input.  A pair of adjacent @samp{$} characters act like a single
custom.texi(,1454) one for purposes of matching.
custom.texi(,1455) 
custom.texi(,1456) @item /
custom.texi(,1457) The class of escape characters that always just deny the following
custom.texi(,1458) character its special syntactic significance.  The character after one
custom.texi(,1459) of these escapes is always treated as alphabetic.
custom.texi(,1460) @item \
custom.texi(,1461) The class of C-style escape characters.  In practice, these are
custom.texi(,1462) treated just like @samp{/}-class characters, because the extra
custom.texi(,1463) possibilities for C escapes (such as being followed by digits) have no
custom.texi(,1464) effect on where the containing expression ends.
custom.texi(,1465) @item <
custom.texi(,1466) The class of comment-starting characters.  Only single-character
custom.texi(,1467) comment starters (such as @samp{;} in Lisp mode) are represented this
custom.texi(,1468) way.
custom.texi(,1469) @item >
custom.texi(,1470) The class of comment-ending characters.  Newline has this syntax in
custom.texi(,1471) Lisp mode.
custom.texi(,1472) @end table
custom.texi(,1473) 
custom.texi(,1474) @vindex parse-sexp-ignore-comments
custom.texi(,1475)   The characters flagged as part of two-character comment delimiters can
custom.texi(,1476) have other syntactic functions most of the time.  For example, @samp{/} and
custom.texi(,1477) @samp{*} in C code, when found separately, have nothing to do with
custom.texi(,1478) comments.  The comment-delimiter significance overrides when the pair of
custom.texi(,1479) characters occur together in the proper order.  Only the list and sexp
custom.texi(,1480) commands use the syntax table to find comments; the commands specifically
custom.texi(,1481) for comments have other variables that tell them where to find comments.
custom.texi(,1482) Moreover, the list and sexp commands notice comments only if
custom.texi(,1483) @code{parse-sexp-ignore-comments} is non-@code{nil}.  This variable is set
custom.texi(,1484) to @code{nil} in modes where comment-terminator sequences are liable to
custom.texi(,1485) appear where there is no comment, for example, in Lisp mode where the
custom.texi(,1486) comment terminator is a newline but not every newline ends a comment.
custom.texi(,1487) 
custom.texi(,1488) @node Syntax Change
custom.texi(,1489) @subsection Altering Syntax Information
custom.texi(,1490) 
custom.texi(,1491)   It is possible to alter a character's syntax table entry by storing a new
custom.texi(,1492) number in the appropriate element of the syntax table, but it would be hard
custom.texi(,1493) to determine what number to use.  Emacs therefore provides a command that
custom.texi(,1494) allows you to specify the syntactic properties of a character in a
custom.texi(,1495) convenient way.
custom.texi(,1496) 
custom.texi(,1497) @findex modify-syntax-entry
custom.texi(,1498)   @kbd{M-x modify-syntax-entry} is the command to change a character's
custom.texi(,1499) syntax.  It can be used interactively and is also used by major
custom.texi(,1500) modes to initialize their own syntax tables.  Its first argument is the
custom.texi(,1501) character to change.  The second argument is a string that specifies the
custom.texi(,1502) new syntax.  When called from Lisp code, there is a third, optional
custom.texi(,1503) argument, which specifies the syntax table in which to make the change.  If
custom.texi(,1504) not supplied, or if this command is called interactively, the third
custom.texi(,1505) argument defaults to the current buffer's syntax table.
custom.texi(,1506) 
custom.texi(,1507) @enumerate
custom.texi(,1508) @item
custom.texi(,1509) The first character in the string specifies the syntactic class.  It
custom.texi(,1510) is one of the characters in the previous table (@pxref{Syntax Entry}).
custom.texi(,1511) 
custom.texi(,1512) @item
custom.texi(,1513) The second character is the matching delimiter.  For a character that
custom.texi(,1514) is not an opening or closing delimiter, this should be a space, and may
custom.texi(,1515) be omitted if no following characters are needed.
custom.texi(,1516) 
custom.texi(,1517) @item
custom.texi(,1518) The remaining characters are flags.  The flag characters allowed are:
custom.texi(,1519) 
custom.texi(,1520) @table @samp
custom.texi(,1521) @item 1
custom.texi(,1522) Flag this character as the first of a two-character comment starting sequence.
custom.texi(,1523) @item 2
custom.texi(,1524) Flag this character as the second of a two-character comment starting sequence.
custom.texi(,1525) @item 3
custom.texi(,1526) Flag this character as the first of a two-character comment ending sequence.
custom.texi(,1527) @item 4
custom.texi(,1528) Flag this character as the second of a two-character comment ending sequence.
custom.texi(,1529) @end table
custom.texi(,1530) @end enumerate
custom.texi(,1531) 
custom.texi(,1532) @kindex C-h s
custom.texi(,1533) @findex describe-syntax
custom.texi(,1534)   Use @kbd{C-h s} (@code{describe-syntax}) to display a description of
custom.texi(,1535) the contents of the current syntax table.  The description of each
custom.texi(,1536) character includes both the string you have to pass to
custom.texi(,1537) @code{modify-syntax-entry} to set up that character's current syntax,
custom.texi(,1538) and some English to explain that string if necessary.
custom.texi(,1539) 
custom.texi(,1540) @node Init File
custom.texi(,1541) @section The Init File
custom.texi(,1542) @cindex init file
custom.texi(,1543) @cindex Emacs initialization file
custom.texi(,1544) @cindex key rebinding, permanent
custom.texi(,1545) @cindex rebinding keys, permanently
custom.texi(,1546) 
custom.texi(,1547)   When you start Emacs, it normally loads either @file{.xemacs/init.el}
custom.texi(,1548) or the file @file{.emacs} (whichever comes first) in your home directory.
custom.texi(,1549) This file, if it exists, should contain Lisp code.  It is called your
custom.texi(,1550) initialization file or @dfn{init file}.  Use the command line switch
custom.texi(,1551) @samp{-q} to tell Emacs whether to load an init file (@pxref{Entering
custom.texi(,1552) Emacs}).  Use the command line switch @samp{-user-init-file}
custom.texi(,1553) (@pxref{Command Switches}) to tell Emacs to load a different file
custom.texi(,1554) instead of @file{~/.xemacs/init.el}/@file{~/.emacs}.
custom.texi(,1555) 
custom.texi(,1556) When the init file is read, the variable @code{user-init-file} says
custom.texi(,1557) which init file was loaded.
custom.texi(,1558) 
custom.texi(,1559)   At some sites there is a @dfn{default init file}, which is the
custom.texi(,1560) library named @file{default.el}, found via the standard search path for
custom.texi(,1561) libraries.  The Emacs distribution contains no such library; your site
custom.texi(,1562) may create one for local customizations.  If this library exists, it is
custom.texi(,1563) loaded whenever you start Emacs.  But your init file, if any, is loaded
custom.texi(,1564) first; if it sets @code{inhibit-default-init} non-@code{nil}, then
custom.texi(,1565) @file{default} is not loaded.
custom.texi(,1566) 
custom.texi(,1567)   If you have a large amount of code in your init file, you should
custom.texi(,1568) byte-compile it to @file{~/.xemacs/init.elc} or @file{~/.emacs.elc}.
custom.texi(,1569) 
custom.texi(,1570) @menu
custom.texi(,1571) * Init Syntax::     Syntax of constants in Emacs Lisp.
custom.texi(,1572) * Init Examples::   How to do some things with an init file.
custom.texi(,1573) * Terminal Init::   Each terminal type can have an init file.
custom.texi(,1574) @end menu
custom.texi(,1575) 
custom.texi(,1576) @node Init Syntax
custom.texi(,1577) @subsection Init File Syntax
custom.texi(,1578) 
custom.texi(,1579)   The init file contains one or more Lisp function call
custom.texi(,1580) expressions.  Each consists of a function name followed by
custom.texi(,1581) arguments, all surrounded by parentheses.  For example, @code{(setq
custom.texi(,1582) fill-column 60)} represents a call to the function @code{setq} which is
custom.texi(,1583) used to set the variable @code{fill-column} (@pxref{Filling}) to 60.
custom.texi(,1584) 
custom.texi(,1585)   The second argument to @code{setq} is an expression for the new value
custom.texi(,1586) of the variable.  This can be a constant, a variable, or a function call
custom.texi(,1587) expression.  In the init file, constants are used most of the time.
custom.texi(,1588) They can be:
custom.texi(,1589) 
custom.texi(,1590) @table @asis
custom.texi(,1591) @item Numbers
custom.texi(,1592) Integers are written in decimal, with an optional initial minus sign.
custom.texi(,1593) 
custom.texi(,1594) If a sequence of digits is followed by a period and another sequence
custom.texi(,1595) of digits, it is interpreted as a floating point number.
custom.texi(,1596) 
custom.texi(,1597) The number prefixes @samp{#b}, @samp{#o}, and @samp{#x} are supported to
custom.texi(,1598) represent numbers in binary, octal, and hexadecimal notation (or radix).
custom.texi(,1599) 
custom.texi(,1600) @item Strings
custom.texi(,1601) Lisp string syntax is the same as C string syntax with a few extra
custom.texi(,1602) features.  Use a double-quote character to begin and end a string constant.
custom.texi(,1603) 
custom.texi(,1604) Newlines and special characters may be present literally in strings.  They
custom.texi(,1605) can also be represented as backslash sequences: @samp{\n} for newline,
custom.texi(,1606) @samp{\b} for backspace, @samp{\r} for return, @samp{\t} for tab,
custom.texi(,1607) @samp{\f} for formfeed (control-l), @samp{\e} for escape, @samp{\\} for a
custom.texi(,1608) backslash, @samp{\"} for a double-quote, or @samp{\@var{ooo}} for the
custom.texi(,1609) character whose octal code is @var{ooo}.  Backslash and double-quote are
custom.texi(,1610) the only characters for which backslash sequences are mandatory.
custom.texi(,1611) 
custom.texi(,1612) You can use @samp{\C-} as a prefix for a control character, as in
custom.texi(,1613) @samp{\C-s} for ASCII Control-S, and @samp{\M-} as a prefix for
custom.texi(,1614) a Meta character, as in @samp{\M-a} for Meta-A or @samp{\M-\C-a} for
custom.texi(,1615) Control-Meta-A.@refill
custom.texi(,1616) 
custom.texi(,1617) @item Characters
custom.texi(,1618) Lisp character constant syntax consists of a @samp{?} followed by
custom.texi(,1619) either a character or an escape sequence starting with @samp{\}.
custom.texi(,1620) Examples: @code{?x}, @code{?\n}, @code{?\"}, @code{?\)}.  Note that
custom.texi(,1621) strings and characters are not interchangeable in Lisp; some contexts
custom.texi(,1622) require one and some contexts require the other.
custom.texi(,1623) 
custom.texi(,1624) @item True
custom.texi(,1625) @code{t} stands for `true'.
custom.texi(,1626) 
custom.texi(,1627) @item False
custom.texi(,1628) @code{nil} stands for `false'.
custom.texi(,1629) 
custom.texi(,1630) @item Other Lisp objects
custom.texi(,1631) Write a single-quote (') followed by the Lisp object you want.
custom.texi(,1632) @end table
custom.texi(,1633) 
custom.texi(,1634) @node Init Examples
custom.texi(,1635) @subsection Init File Examples
custom.texi(,1636) 
custom.texi(,1637)   Here are some examples of doing certain commonly desired things with
custom.texi(,1638) Lisp expressions:
custom.texi(,1639) 
custom.texi(,1640) @itemize @bullet
custom.texi(,1641) @item
custom.texi(,1642) Make @key{TAB} in C mode just insert a tab if point is in the middle of a
custom.texi(,1643) line.
custom.texi(,1644) 
custom.texi(,1645) @example
custom.texi(,1646) (setq c-tab-always-indent nil)
custom.texi(,1647) @end example
custom.texi(,1648) 
custom.texi(,1649) Here we have a variable whose value is normally @code{t} for `true'
custom.texi(,1650) and the alternative is @code{nil} for `false'.
custom.texi(,1651) 
custom.texi(,1652) @item
custom.texi(,1653) Make searches case sensitive by default (in all buffers that do not
custom.texi(,1654) override this).
custom.texi(,1655) 
custom.texi(,1656) @example
custom.texi(,1657) (setq-default case-fold-search nil)
custom.texi(,1658) @end example
custom.texi(,1659) 
custom.texi(,1660) This sets the default value, which is effective in all buffers that do
custom.texi(,1661) not have local values for the variable.  Setting @code{case-fold-search}
custom.texi(,1662) with @code{setq} affects only the current buffer's local value, which
custom.texi(,1663) is probably not what you want to do in an init file.
custom.texi(,1664) 
custom.texi(,1665) @item
custom.texi(,1666) Make Text mode the default mode for new buffers.
custom.texi(,1667) 
custom.texi(,1668) @example
custom.texi(,1669) (setq default-major-mode 'text-mode)
custom.texi(,1670) @end example
custom.texi(,1671) 
custom.texi(,1672) Note that @code{text-mode} is used because it is the command for entering
custom.texi(,1673) the mode we want.  A single-quote is written before it to make a symbol
custom.texi(,1674) constant; otherwise, @code{text-mode} would be treated as a variable name.
custom.texi(,1675) 
custom.texi(,1676) @item
custom.texi(,1677) Turn on Auto Fill mode automatically in Text mode and related modes.
custom.texi(,1678) 
custom.texi(,1679) @example
custom.texi(,1680) (setq text-mode-hook
custom.texi(,1681)   '(lambda () (auto-fill-mode 1)))
custom.texi(,1682) @end example
custom.texi(,1683) 
custom.texi(,1684) Here we have a variable whose value should be a Lisp function.  The
custom.texi(,1685) function we supply is a list starting with @code{lambda}, and a single
custom.texi(,1686) quote is written in front of it to make it (for the purpose of this
custom.texi(,1687) @code{setq}) a list constant rather than an expression.  Lisp functions
custom.texi(,1688) are not explained here; for mode hooks it is enough to know that
custom.texi(,1689) @code{(auto-fill-mode 1)} is an expression that will be executed when
custom.texi(,1690) Text mode is entered.  You could replace it with any other expression
custom.texi(,1691) that you like, or with several expressions in a row.
custom.texi(,1692) 
custom.texi(,1693) @example
custom.texi(,1694) (setq text-mode-hook 'turn-on-auto-fill)
custom.texi(,1695) @end example
custom.texi(,1696) 
custom.texi(,1697) This is another way to accomplish the same result.
custom.texi(,1698) @code{turn-on-auto-fill} is a symbol whose function definition is
custom.texi(,1699) @code{(lambda () (auto-fill-mode 1))}.
custom.texi(,1700) 
custom.texi(,1701) @item
custom.texi(,1702) Load the installed Lisp library named @file{foo} (actually a file
custom.texi(,1703) @file{foo.elc} or @file{foo.el} in a standard Emacs directory).
custom.texi(,1704) 
custom.texi(,1705) @example
custom.texi(,1706) (load "foo")
custom.texi(,1707) @end example
custom.texi(,1708) 
custom.texi(,1709) When the argument to @code{load} is a relative pathname, not starting
custom.texi(,1710) with @samp{/} or @samp{~}, @code{load} searches the directories in
custom.texi(,1711) @code{load-path} (@pxref{Loading}).
custom.texi(,1712) 
custom.texi(,1713) @item
custom.texi(,1714) Load the compiled Lisp file @file{foo.elc} from your home directory.
custom.texi(,1715) 
custom.texi(,1716) @example
custom.texi(,1717) (load "~/foo.elc")
custom.texi(,1718) @end example
custom.texi(,1719) 
custom.texi(,1720) Here an absolute file name is used, so no searching is done.
custom.texi(,1721) 
custom.texi(,1722) @item
custom.texi(,1723) Rebind the key @kbd{C-x l} to run the function @code{make-symbolic-link}.
custom.texi(,1724) 
custom.texi(,1725) @example
custom.texi(,1726) (global-set-key "\C-xl" 'make-symbolic-link)
custom.texi(,1727) @end example
custom.texi(,1728) 
custom.texi(,1729) or
custom.texi(,1730) 
custom.texi(,1731) @example
custom.texi(,1732) (define-key global-map "\C-xl" 'make-symbolic-link)
custom.texi(,1733) @end example
custom.texi(,1734) 
custom.texi(,1735) Note once again the single-quote used to refer to the symbol
custom.texi(,1736) @code{make-symbolic-link} instead of its value as a variable.
custom.texi(,1737) 
custom.texi(,1738) @item
custom.texi(,1739) Do the same thing for C mode only.
custom.texi(,1740) 
custom.texi(,1741) @example
custom.texi(,1742) (define-key c-mode-map "\C-xl" 'make-symbolic-link)
custom.texi(,1743) @end example
custom.texi(,1744) 
custom.texi(,1745) @item
custom.texi(,1746) Bind the function key @key{F1} to a command in C mode.
custom.texi(,1747) Note that the names of function keys must be lower case.
custom.texi(,1748) 
custom.texi(,1749) @example
custom.texi(,1750) (define-key c-mode-map 'f1 'make-symbolic-link)
custom.texi(,1751) @end example
custom.texi(,1752) 
custom.texi(,1753) @item
custom.texi(,1754) Bind the shifted version of @key{F1} to a command.
custom.texi(,1755) 
custom.texi(,1756) @example
custom.texi(,1757) (define-key c-mode-map '(shift f1) 'make-symbolic-link)
custom.texi(,1758) @end example
custom.texi(,1759) 
custom.texi(,1760) @item
custom.texi(,1761) Redefine all keys which now run @code{next-line} in Fundamental mode
custom.texi(,1762) to run @code{forward-line} instead.
custom.texi(,1763) 
custom.texi(,1764) @example
custom.texi(,1765) (substitute-key-definition 'next-line 'forward-line
custom.texi(,1766)                            global-map)
custom.texi(,1767) @end example
custom.texi(,1768) 
custom.texi(,1769) @item
custom.texi(,1770) Make @kbd{C-x C-v} undefined.
custom.texi(,1771) 
custom.texi(,1772) @example
custom.texi(,1773) (global-unset-key "\C-x\C-v")
custom.texi(,1774) @end example
custom.texi(,1775) 
custom.texi(,1776) One reason to undefine a key is so that you can make it a prefix.
custom.texi(,1777) Simply defining @kbd{C-x C-v @var{anything}} would make @kbd{C-x C-v}
custom.texi(,1778) a prefix, but @kbd{C-x C-v} must be freed of any non-prefix definition
custom.texi(,1779) first.
custom.texi(,1780) 
custom.texi(,1781) @item
custom.texi(,1782) Make @samp{$} have the syntax of punctuation in Text mode.
custom.texi(,1783) Note the use of a character constant for @samp{$}.
custom.texi(,1784) 
custom.texi(,1785) @example
custom.texi(,1786) (modify-syntax-entry ?\$ "." text-mode-syntax-table)
custom.texi(,1787) @end example
custom.texi(,1788) 
custom.texi(,1789) @item
custom.texi(,1790) Enable the use of the command @code{eval-expression} without confirmation.
custom.texi(,1791) 
custom.texi(,1792) @example
custom.texi(,1793) (put 'eval-expression 'disabled nil)
custom.texi(,1794) @end example
custom.texi(,1795) @end itemize
custom.texi(,1796) 
custom.texi(,1797) @node Terminal Init
custom.texi(,1798) @subsection Terminal-Specific Initialization
custom.texi(,1799) 
custom.texi(,1800)   Each terminal type can have a Lisp library to be loaded into Emacs when
custom.texi(,1801) it is run on that type of terminal.  For a terminal type named
custom.texi(,1802) @var{termtype}, the library is called @file{term/@var{termtype}} and it is
custom.texi(,1803) found by searching the directories @code{load-path} as usual and trying the
custom.texi(,1804) suffixes @samp{.elc} and @samp{.el}.  Normally it appears in the
custom.texi(,1805) subdirectory @file{term} of the directory where most Emacs libraries are
custom.texi(,1806) kept.@refill
custom.texi(,1807) 
custom.texi(,1808)   The usual purpose of the terminal-specific library is to define the
custom.texi(,1809) escape sequences used by the terminal's function keys using the library
custom.texi(,1810) @file{keypad.el}.  See the file
custom.texi(,1811) @file{term/vt100.el} for an example of how this is done.@refill
custom.texi(,1812) 
custom.texi(,1813)   When the terminal type contains a hyphen, only the part of the name
custom.texi(,1814) before the first hyphen is significant in choosing the library name.
custom.texi(,1815) Thus, terminal types @samp{aaa-48} and @samp{aaa-30-rv} both use
custom.texi(,1816) the library @file{term/aaa}.  The code in the library can use
custom.texi(,1817) @code{(getenv "TERM")} to find the full terminal type name.@refill
custom.texi(,1818) 
custom.texi(,1819) @vindex term-file-prefix
custom.texi(,1820)   The library's name is constructed by concatenating the value of the
custom.texi(,1821) variable @code{term-file-prefix} and the terminal type.  Your init
custom.texi(,1822) file can prevent the loading of the terminal-specific library by setting
custom.texi(,1823) @code{term-file-prefix} to @code{nil}.  @xref{Init File}.
custom.texi(,1824) 
custom.texi(,1825) @vindex term-setup-hook
custom.texi(,1826)   The value of the variable @code{term-setup-hook}, if not @code{nil}, is
custom.texi(,1827) called as a function of no arguments at the end of Emacs initialization,
custom.texi(,1828) after both your init file and any terminal-specific library have been
custom.texi(,1829) read.  @xref{Init File}.  You can set the value in the init file to
custom.texi(,1830) override part of any of the terminal-specific libraries and to define
custom.texi(,1831) initializations for terminals that do not have a library.@refill
custom.texi(,1832) 
custom.texi(,1833) @node Audible Bell
custom.texi(,1834) @section Changing the Bell Sound
custom.texi(,1835) @cindex audible bell, changing
custom.texi(,1836) @cindex bell, changing
custom.texi(,1837) @vindex sound-alist
custom.texi(,1838) @findex load-default-sounds
custom.texi(,1839) @findex play-sound
custom.texi(,1840) 
custom.texi(,1841) You can now change how the audible bell sounds using the variable
custom.texi(,1842) @code{sound-alist}.
custom.texi(,1843) 
custom.texi(,1844) @code{sound-alist}'s value is an list associating symbols with, among
custom.texi(,1845) other things, strings of audio-data.  When @code{ding} is called with
custom.texi(,1846) one of the symbols, the associated sound data is played instead of the
custom.texi(,1847) standard beep.  This only works if you are logged in on the console of a
custom.texi(,1848) machine with audio hardware. To listen to a sound of the provided type,
custom.texi(,1849) call the function @code{play-sound} with the argument @var{sound}. You
custom.texi(,1850) can also set the volume of the sound with the optional argument 
custom.texi(,1851) @var{volume}.@refill
custom.texi(,1852) @cindex ding
custom.texi(,1853) 
custom.texi(,1854) Each element of @code{sound-alist} is a list describing a sound.
custom.texi(,1855) The first element of the list is the name of the sound being defined.
custom.texi(,1856) Subsequent elements of the list are alternating keyword/value pairs:
custom.texi(,1857) 
custom.texi(,1858) @table @code
custom.texi(,1859) @item sound
custom.texi(,1860) A string of raw sound data, or the name of another sound to play.   
custom.texi(,1861) The symbol @code{t} here means use the default X beep.
custom.texi(,1862) 
custom.texi(,1863) @item volume
custom.texi(,1864) An integer from 0-100, defaulting to @code{bell-volume}.
custom.texi(,1865) 
custom.texi(,1866) @item pitch
custom.texi(,1867) If using the default X beep, the pitch (Hz) to generate.
custom.texi(,1868) 
custom.texi(,1869) @item duration
custom.texi(,1870) If using the default X beep, the duration (milliseconds).
custom.texi(,1871) @end table
custom.texi(,1872) 
custom.texi(,1873) For compatibility, elements of `sound-alist' may also be of the form:
custom.texi(,1874) 
custom.texi(,1875) @example
custom.texi(,1876) ( @var{sound-name} . @var{<sound>} )
custom.texi(,1877) ( @var{sound-name} @var{<volume>} @var{<sound>} )
custom.texi(,1878) @end example
custom.texi(,1879) 
custom.texi(,1880) You should probably add things to this list by calling the function
custom.texi(,1881) @code{load-sound-file}.
custom.texi(,1882) 
custom.texi(,1883) Note that you can only play audio data if running on the console screen
custom.texi(,1884) of a machine with audio hardware which emacs understands, which at this
custom.texi(,1885) time means a Sun SparcStation, SGI, or HP9000s700.
custom.texi(,1886) 
custom.texi(,1887) Also note that the pitch, duration, and volume options are available
custom.texi(,1888) everywhere, but most X servers ignore the `pitch' option.
custom.texi(,1889) 
custom.texi(,1890) @vindex bell-volume
custom.texi(,1891) The variable @code{bell-volume} should be an integer from 0 to 100,
custom.texi(,1892) with 100 being loudest, which controls how loud the sounds emacs makes
custom.texi(,1893) should be.  Elements of the @code{sound-alist} may override this value.
custom.texi(,1894) This variable applies to the standard X bell sound as well as sound files.
custom.texi(,1895) 
custom.texi(,1896) If the symbol @code{t} is in place of a sound-string, Emacs uses the
custom.texi(,1897) default X beep.  This allows you to define beep-types of 
custom.texi(,1898) different volumes even when not running on the console.
custom.texi(,1899) 
custom.texi(,1900) @findex load-sound-file
custom.texi(,1901) You can add things to this list by calling the function
custom.texi(,1902) @code{load-sound-file}, which reads in an audio-file and adds its data to
custom.texi(,1903) the sound-alist. You can specify the sound with the @var{sound-name}
custom.texi(,1904) argument and the file into which the sounds are loaded with the
custom.texi(,1905) @var{filename} argument. The optional @var{volume} argument sets the
custom.texi(,1906) volume.
custom.texi(,1907) 
custom.texi(,1908) @code{load-sound-file (@var{filename sound-name} &optional @var{volume})}
custom.texi(,1909) 
custom.texi(,1910) To load and install some sound files as beep-types, use the function
custom.texi(,1911) @code{load-default-sounds} (note that this only works if you are on
custom.texi(,1912) display 0 of a machine with audio hardware).
custom.texi(,1913) 
custom.texi(,1914) The following beep-types are used by Emacs itself. Other Lisp
custom.texi(,1915) packages may use other beep types, but these are the ones that the C
custom.texi(,1916) kernel of Emacs uses.
custom.texi(,1917) 
custom.texi(,1918) @table @code
custom.texi(,1919) @item auto-save-error
custom.texi(,1920) An auto-save does not succeed
custom.texi(,1921) 
custom.texi(,1922) @item command-error
custom.texi(,1923) The Emacs command loop catches an error
custom.texi(,1924) 
custom.texi(,1925) @item undefined-key
custom.texi(,1926) You type a key that is undefined
custom.texi(,1927) 
custom.texi(,1928) @item undefined-click
custom.texi(,1929) You use an undefined mouse-click combination
custom.texi(,1930) 
custom.texi(,1931) @item no-completion
custom.texi(,1932) Completion was not possible
custom.texi(,1933) 
custom.texi(,1934) @item y-or-n-p
custom.texi(,1935) You type something other than the required @code{y} or @code{n}
custom.texi(,1936) 
custom.texi(,1937) @item yes-or-no-p       
custom.texi(,1938) You type something other than @code{yes} or @code{no}
custom.texi(,1939) @end table
custom.texi(,1940) 
custom.texi(,1941) @comment  node-name,  next,  previous,  up
custom.texi(,1942) @node Faces
custom.texi(,1943) @section Faces
custom.texi(,1944) 
custom.texi(,1945) XEmacs has objects called extents and faces.  An @dfn{extent}
custom.texi(,1946) is a region of text and a @dfn{face} is a collection of textual
custom.texi(,1947) attributes, such as fonts and colors.  Every extent is displayed in some
custom.texi(,1948) face; therefore, changing the properties of a face immediately updates the
custom.texi(,1949) display of all associated extents.  Faces can be frame-local: you can
custom.texi(,1950) have a region of text that displays with completely different
custom.texi(,1951) attributes when its buffer is viewed from a different X window.
custom.texi(,1952) 
custom.texi(,1953) The display attributes of faces may be specified either in Lisp or through
custom.texi(,1954) the X resource manager.
custom.texi(,1955) 
custom.texi(,1956) @subsection Customizing Faces
custom.texi(,1957) 
custom.texi(,1958) You can change the face of an extent with the functions in
custom.texi(,1959) this section.  All the functions prompt for a @var{face} as an
custom.texi(,1960) argument; use completion for a list of possible values.
custom.texi(,1961) 
custom.texi(,1962) @table @kbd
custom.texi(,1963) @item M-x invert-face
custom.texi(,1964) Swap the foreground and background colors of the given @var{face}.
custom.texi(,1965) @item M-x make-face-bold
custom.texi(,1966) Make the font of the given @var{face} bold.  When called from a
custom.texi(,1967) program, returns @code{nil} if this is not possible.
custom.texi(,1968) @item M-x make-face-bold-italic
custom.texi(,1969) Make the font of the given @var{face} bold italic.  
custom.texi(,1970) When called from a program, returns @code{nil} if not possible.
custom.texi(,1971) @item M-x make-face-italic
custom.texi(,1972) Make the font of the given @var{face} italic.  
custom.texi(,1973) When called from a program, returns @code{nil} if not possible.
custom.texi(,1974) @item M-x make-face-unbold
custom.texi(,1975) Make the font of the given @var{face} non-bold.  
custom.texi(,1976) When called from a program, returns @code{nil} if not possible.
custom.texi(,1977) @item M-x make-face-unitalic
custom.texi(,1978) Make the font of the given @var{face} non-italic.
custom.texi(,1979) When called from a program, returns @code{nil} if not possible.
custom.texi(,1980) @item M-x make-face-larger
custom.texi(,1981) Make the font of the given @var{face} a little larger.
custom.texi(,1982) When called from a program, returns @code{nil} if not possible.
custom.texi(,1983) @item M-x make-face-smaller
custom.texi(,1984) Make the font of the given @var{face} a little smaller.
custom.texi(,1985) When called from a program, returns @code{nil} if not possible.
custom.texi(,1986) @item M-x set-face-background 
custom.texi(,1987) Change the background color of the given @var{face}.
custom.texi(,1988) @item M-x set-face-background-pixmap
custom.texi(,1989) Change the background pixmap of the given @var{face}.
custom.texi(,1990) @item M-x set-face-font 
custom.texi(,1991) Change the font of the given @var{face}.
custom.texi(,1992) @item M-x set-face-foreground
custom.texi(,1993) Change the foreground color of the given @var{face}.
custom.texi(,1994) @item M-x set-face-underline-p
custom.texi(,1995) Change whether the given @var{face} is underlined.
custom.texi(,1996) @end table
custom.texi(,1997) 
custom.texi(,1998) @findex make-face-larger
custom.texi(,1999) @findex make-face-smaller
custom.texi(,2000) 
custom.texi(,2001) @findex invert-face
custom.texi(,2002) You can exchange the foreground and background color of the selected
custom.texi(,2003) @var{face} with the function @code{invert-face}. If the face does not
custom.texi(,2004) specify both foreground and background, then its foreground and
custom.texi(,2005) background are set to the background and foreground of the default face.
custom.texi(,2006) When calling this from a program, you can supply the optional argument 
custom.texi(,2007) @var{frame} to specify which frame is affected; otherwise, all frames
custom.texi(,2008) are affected.
custom.texi(,2009) 
custom.texi(,2010) @findex make-face-bold
custom.texi(,2011) @findex make-face-bold-italic
custom.texi(,2012) @findex make-face-italic
custom.texi(,2013) @findex make-face-unbold
custom.texi(,2014) @findex make-face-unitalic
custom.texi(,2015) @vindex face-frob-from-locale-first
custom.texi(,2016) The work of @code{make-face-bold}, @code{make-face-bold-italic},
custom.texi(,2017) @code{make-face-italic}, @code{make-face-unbold},
custom.texi(,2018) @code{make-face-unitalic} functions is affected by
custom.texi(,2019) @code{face-frob-from-locale-first} variable.  If it is @code{nil}, those
custom.texi(,2020) functions first try to manipulate device specific data like X font names
custom.texi(,2021) to obtain the desired font face specification.  This may be unsuitable
custom.texi(,2022) in environments using different font face specifications for different
custom.texi(,2023) frames, non-Mule environments in particular.
custom.texi(,2024) 
custom.texi(,2025) If the variable is non-@code{nil}, those functions first try to figure
custom.texi(,2026) out whether the face font is the same as one of predefined faces:
custom.texi(,2027) @code{default}, @code{bold}, @code{italic}, @code{bold-italic}.  If it
custom.texi(,2028) is the same, then the new face font specification is set to be the same
custom.texi(,2029) as that of a corresponding predefined face.  Thus if the predefined face
custom.texi(,2030) is set up properly for different frames, the same will hold for the face
custom.texi(,2031) being changed by the functions.  This is the behavior one might desire
custom.texi(,2032) in non-Mule environments mentioned above: face being changed still looks
custom.texi(,2033) right in all frames.
custom.texi(,2034) 
custom.texi(,2035) How predefined faces might be set up for different frames in such an
custom.texi(,2036) environments is described in @ref{Face Resources}.
custom.texi(,2037) 
custom.texi(,2038) @findex set-face-background
custom.texi(,2039) You can set the background color of the specified @var{face} with the
custom.texi(,2040) function @code{set-face-background}.  The argument @code{color} should
custom.texi(,2041) be a string, the name of a color.  When called from a program, if the
custom.texi(,2042) optional @var{frame} argument is provided, the face is changed only 
custom.texi(,2043) in that frame; otherwise, it is changed in all frames.
custom.texi(,2044) 
custom.texi(,2045) @findex set-face-background-pixmap
custom.texi(,2046) You can set the background pixmap of the specified @var{face} with the
custom.texi(,2047) function @code{set-face-background-pixmap}.  The pixmap argument
custom.texi(,2048) @var{name} should be a string, the name of a file of pixmap data.  The
custom.texi(,2049) directories listed in the @code{x-bitmap-file-path} variable are
custom.texi(,2050) searched.  The bitmap may also be a list of the form @code{(@var{width
custom.texi(,2051) height data})}, where @var{width} and @var{height} are the size in
custom.texi(,2052) pixels, and @var{data} is a string containing the raw bits of the
custom.texi(,2053) bitmap.  If the optional @var{frame} argument is provided, the face is
custom.texi(,2054) changed only in that frame; otherwise, it is changed in all frames.
custom.texi(,2055) 
custom.texi(,2056) The variable @code{x-bitmap-file-path} takes as a value a list of the
custom.texi(,2057) directories in which X bitmap files may be found.  If the value is
custom.texi(,2058) @code{nil}, the list is initialized from the @code{*bitmapFilePath}
custom.texi(,2059) resource.
custom.texi(,2060) 
custom.texi(,2061) If the environment variable @b{XBMLANGPATH} is set, then it is consulted
custom.texi(,2062) before the @code{x-bitmap-file-path} variable.
custom.texi(,2063) 
custom.texi(,2064) @findex set-face-font
custom.texi(,2065) You can set the font of the specified @var{face} with the function
custom.texi(,2066) @code{set-face-font}.  The @var{font} argument should be a string, the
custom.texi(,2067) name of a font.  When called from a program, if the
custom.texi(,2068) optional @var{frame} argument is provided, the face is changed only 
custom.texi(,2069) in that frame; otherwise, it is changed in all frames.
custom.texi(,2070) 
custom.texi(,2071) @findex set-face-foreground 
custom.texi(,2072) You can set the foreground color of the specified @var{face} with the
custom.texi(,2073) function @code{set-face-foreground}.  The argument @var{color} should be
custom.texi(,2074) a string, the name of a color.  If the optional @var{frame} argument is
custom.texi(,2075) provided, the face is changed only in that frame; otherwise, it is
custom.texi(,2076) changed in all frames.
custom.texi(,2077) 
custom.texi(,2078) @findex set-face-underline-p
custom.texi(,2079) You can set underline the specified @var{face} with the function
custom.texi(,2080) @code{set-face-underline-p}. The argument @var{underline-p} can be used
custom.texi(,2081) to make underlining an attribute of the face or not. If the optional
custom.texi(,2082) @var{frame} argument is provided, the face is changed only in that
custom.texi(,2083) frame; otherwise, it is changed in all frames.
custom.texi(,2084) 
custom.texi(,2085) @node Frame Components
custom.texi(,2086) @section Frame Components
custom.texi(,2087) 
custom.texi(,2088) You can control the presence and position of most frame components, such
custom.texi(,2089) as the menubar, toolbars, and gutters.
custom.texi(,2090) 
custom.texi(,2091) This section is not written yet.  Try the Lisp Reference Manual:
custom.texi(,2092) @ref{Menubar,,,lispref,}, @ref{Toolbar Intro,,,lispref,}, and
custom.texi(,2093) @ref{Gutter Intro,,,lispref,}.
custom.texi(,2094) 
custom.texi(,2095) @node X Resources
custom.texi(,2096) @section X Resources
custom.texi(,2097) @cindex X resources
custom.texi(,2098) @findex x-create-frame
custom.texi(,2099) 
custom.texi(,2100) Historically, XEmacs has used the X resource application class @samp{Emacs}
custom.texi(,2101) for its resources.  Unfortunately, GNU Emacs uses the same application
custom.texi(,2102) class, and resources are not compatible between the two Emacsen.  This
custom.texi(,2103) sharing of the application class often leads to trouble if you want to
custom.texi(,2104) run both variants.
custom.texi(,2105) 
custom.texi(,2106) Starting with XEmacs 21, XEmacs uses the class @samp{XEmacs} if it finds
custom.texi(,2107) any XEmacs resources in the resource database when the X connection is
custom.texi(,2108) initialized.  Otherwise, it will use the class @samp{Emacs} for
custom.texi(,2109) backwards compatibility.  The variable @var{x-emacs-application-class}
custom.texi(,2110) may be consulted to determine the application class being used.
custom.texi(,2111) 
custom.texi(,2112) The examples in this section assume the application class is @samp{Emacs}.
custom.texi(,2113) 
custom.texi(,2114) The Emacs resources are generally set per-frame. Each Emacs frame can have 
custom.texi(,2115) its own name or the same name as another, depending on the name passed to the 
custom.texi(,2116) @code{make-frame} function.
custom.texi(,2117) 
custom.texi(,2118) You can specify resources for all frames with the syntax:
custom.texi(,2119) 
custom.texi(,2120) @example
custom.texi(,2121) Emacs*parameter: value
custom.texi(,2122) @end example
custom.texi(,2123) @noindent
custom.texi(,2124) 
custom.texi(,2125) or
custom.texi(,2126) 
custom.texi(,2127) @example
custom.texi(,2128) Emacs*EmacsFrame.parameter:value
custom.texi(,2129) @end example
custom.texi(,2130) @noindent
custom.texi(,2131) 
custom.texi(,2132) You can specify resources for a particular frame with the syntax:
custom.texi(,2133) 
custom.texi(,2134) @example
custom.texi(,2135) Emacs*FRAME-NAME.parameter: value
custom.texi(,2136) @end example
custom.texi(,2137) @noindent
custom.texi(,2138) 
custom.texi(,2139) @menu
custom.texi(,2140) * Geometry Resources::     Controlling the size and position of frames.
custom.texi(,2141) * Iconic Resources::       Controlling whether frames come up iconic.
custom.texi(,2142) * Resource List::          List of resources settable on a frame or device.
custom.texi(,2143) * Face Resources::         Controlling faces using resources.
custom.texi(,2144) * Widgets::                The widget hierarchy for XEmacs.
custom.texi(,2145) * Menubar Resources::      Specifying resources for the menubar.
custom.texi(,2146) @end menu
custom.texi(,2147) 
custom.texi(,2148) @node Geometry Resources
custom.texi(,2149) @subsection Geometry Resources
custom.texi(,2150) 
custom.texi(,2151) To make the default size of all Emacs frames be 80 columns by 55 lines,
custom.texi(,2152) do this:
custom.texi(,2153) 
custom.texi(,2154) @example
custom.texi(,2155) Emacs*EmacsFrame.geometry: 80x55
custom.texi(,2156) @end example
custom.texi(,2157) @noindent
custom.texi(,2158) 
custom.texi(,2159) To set the geometry of a particular frame named @samp{fred}, do this:
custom.texi(,2160) 
custom.texi(,2161) @example
custom.texi(,2162) Emacs*fred.geometry: 80x55
custom.texi(,2163) @end example
custom.texi(,2164) @noindent
custom.texi(,2165) 
custom.texi(,2166) Important! Do not use the following syntax:
custom.texi(,2167) 
custom.texi(,2168) @example
custom.texi(,2169) Emacs*geometry: 80x55
custom.texi(,2170) @end example
custom.texi(,2171) @noindent
custom.texi(,2172) 
custom.texi(,2173) You should never use @code{*geometry} with any X application. It does
custom.texi(,2174) not say "make the geometry of Emacs be 80 columns by 55 lines."  It
custom.texi(,2175) really says, "make Emacs and all subwindows thereof be 80x55 in whatever
custom.texi(,2176) units they care to measure in."  In particular, that is both telling the
custom.texi(,2177) Emacs text pane to be 80x55 in characters, and telling the menubar pane
custom.texi(,2178) to be 80x55 pixels, which is surely not what you want.
custom.texi(,2179) 
custom.texi(,2180) As a special case, this geometry specification also works (and sets the
custom.texi(,2181) default size of all Emacs frames to 80 columns by 55 lines):
custom.texi(,2182) 
custom.texi(,2183) @example
custom.texi(,2184) Emacs.geometry: 80x55
custom.texi(,2185) @end example
custom.texi(,2186) @noindent
custom.texi(,2187) 
custom.texi(,2188) since that is the syntax used with most other applications (since most
custom.texi(,2189) other applications have only one top-level window, unlike Emacs).  In
custom.texi(,2190) general, however, the top-level shell (the unmapped ApplicationShell
custom.texi(,2191) widget named @samp{Emacs} that is the parent of the shell widgets that
custom.texi(,2192) actually manage the individual frames) does not have any interesting
custom.texi(,2193) resources on it, and you should set the resources on the frames instead.
custom.texi(,2194) 
custom.texi(,2195) The @code{-geometry} command-line argument sets only the geometry of the
custom.texi(,2196) initial frame created by Emacs.
custom.texi(,2197) 
custom.texi(,2198) A more complete explanation of geometry-handling is
custom.texi(,2199) 
custom.texi(,2200) @itemize @bullet
custom.texi(,2201) @item
custom.texi(,2202) The @code{-geometry} command-line option sets the @code{Emacs.geometry}
custom.texi(,2203) resource, that is, the geometry of the ApplicationShell.
custom.texi(,2204) 
custom.texi(,2205) @item
custom.texi(,2206) For the first frame created, the size of the frame is taken from the
custom.texi(,2207) ApplicationShell if it is specified, otherwise from the geometry of the
custom.texi(,2208) frame.
custom.texi(,2209) 
custom.texi(,2210) @item
custom.texi(,2211) For subsequent frames, the order is reversed: First the frame, and then
custom.texi(,2212) the ApplicationShell.
custom.texi(,2213) 
custom.texi(,2214) @item
custom.texi(,2215) For the first frame created, the position of the frame is taken from the
custom.texi(,2216) ApplicationShell (@code{Emacs.geometry}) if it is specified, otherwise
custom.texi(,2217) from the geometry of the frame.
custom.texi(,2218) 
custom.texi(,2219) @item
custom.texi(,2220) For subsequent frames, the position is taken only from the frame, and 
custom.texi(,2221) never from the ApplicationShell.
custom.texi(,2222) @end itemize
custom.texi(,2223) 
custom.texi(,2224) This is rather complicated, but it does seem to provide the most
custom.texi(,2225) intuitive behavior with respect to the default sizes and positions of
custom.texi(,2226) frames created in various ways.
custom.texi(,2227) 
custom.texi(,2228) @node Iconic Resources
custom.texi(,2229) @subsection Iconic Resources
custom.texi(,2230) 
custom.texi(,2231) Analogous to @code{-geometry}, the @code{-iconic} command-line option
custom.texi(,2232) sets the iconic flag of the ApplicationShell (@code{Emacs.iconic}) and
custom.texi(,2233) always applies to the first frame created regardless of its name.
custom.texi(,2234) However, it is possible to set the iconic flag on particular frames (by
custom.texi(,2235) name) by using the @code{Emacs*FRAME-NAME.iconic} resource.
custom.texi(,2236) 
custom.texi(,2237) @node Resource List
custom.texi(,2238) @subsection Resource List
custom.texi(,2239) 
custom.texi(,2240) Emacs frames accept the following resources:
custom.texi(,2241) 
custom.texi(,2242) @table @asis
custom.texi(,2243) @item @code{geometry} (class @code{Geometry}): string
custom.texi(,2244) Initial geometry for the frame.  @xref{Geometry Resources}, for a
custom.texi(,2245) complete discussion of how this works.
custom.texi(,2246) 
custom.texi(,2247) @item @code{iconic} (class @code{Iconic}): boolean
custom.texi(,2248) Whether this frame should appear in the iconified state.
custom.texi(,2249) 
custom.texi(,2250) @item @code{internalBorderWidth} (class @code{InternalBorderWidth}): int
custom.texi(,2251) How many blank pixels to leave between the text and the edge of the 
custom.texi(,2252) window.
custom.texi(,2253) 
custom.texi(,2254) @item @code{interline} (class @code{Interline}): int
custom.texi(,2255) How many pixels to leave between each line (may not be implemented).
custom.texi(,2256) 
custom.texi(,2257) @item @code{menubar} (class @code{Menubar}): boolean
custom.texi(,2258) Whether newly-created frames should initially have a menubar.  Set to
custom.texi(,2259) true by default.
custom.texi(,2260) 
custom.texi(,2261) @item @code{initiallyUnmapped} (class @code{InitiallyUnmapped}): boolean
custom.texi(,2262) Whether XEmacs should leave the initial frame unmapped when it starts
custom.texi(,2263) up.  This is useful if you are starting XEmacs as a server (e.g. in
custom.texi(,2264) conjunction with gnuserv or the external client widget).  You can also
custom.texi(,2265) control this with the @code{-unmapped} command-line option.
custom.texi(,2266) 
custom.texi(,2267) @item @code{barCursor} (class @code{BarColor}): boolean
custom.texi(,2268) Whether the cursor should be displayed as a bar, or the traditional box.
custom.texi(,2269) 
custom.texi(,2270) @item @code{cursorColor} (class @code{CursorColor}): color-name
custom.texi(,2271) The color of the text cursor.
custom.texi(,2272) 
custom.texi(,2273) @item @code{scrollBarWidth} (class @code{ScrollBarWidth}): integer
custom.texi(,2274) How wide the vertical scrollbars should be, in pixels; 0 means no
custom.texi(,2275) vertical scrollbars.  You can also use a resource specification of the
custom.texi(,2276) form @code{*scrollbar.width}, or the usual toolkit scrollbar resources:
custom.texi(,2277) @code{*XmScrollBar.width} (Motif), @code{*XlwScrollBar.width} (Lucid),
custom.texi(,2278) or @code{*Scrollbar.thickness} (Athena).  We don't recommend that you
custom.texi(,2279) use the toolkit resources, though, because they're dependent on how
custom.texi(,2280) exactly your particular build of XEmacs was configured.
custom.texi(,2281) 
custom.texi(,2282) @item @code{scrollBarHeight} (class @code{ScrollBarHeight}): integer
custom.texi(,2283) How high the horizontal scrollbars should be, in pixels; 0 means no
custom.texi(,2284) horizontal scrollbars.  You can also use a resource specification of the
custom.texi(,2285) form @code{*scrollbar.height}, or the usual toolkit scrollbar resources:
custom.texi(,2286) @code{*XmScrollBar.height} (Motif), @code{*XlwScrollBar.height} (Lucid),
custom.texi(,2287) or @code{*Scrollbar.thickness} (Athena).  We don't recommend that you use
custom.texi(,2288) the toolkit resources, though, because they're dependent on how exactly
custom.texi(,2289) your particular build of XEmacs was configured.
custom.texi(,2290) 
custom.texi(,2291) @item @code{scrollBarPlacement} (class @code{ScrollBarPlacement}): string
custom.texi(,2292) Where the horizontal and vertical scrollbars should be positioned.  This
custom.texi(,2293) should be one of the four strings @samp{BOTTOM_LEFT},
custom.texi(,2294) @samp{BOTTOM_RIGHT}, @samp{TOP_LEFT}, and @samp{TOP_RIGHT}.  Default is
custom.texi(,2295) @samp{BOTTOM_RIGHT} for the Motif and Lucid scrollbars and
custom.texi(,2296) @samp{BOTTOM_LEFT} for the Athena scrollbars.
custom.texi(,2297) 
custom.texi(,2298) @item @code{topToolBarHeight} (class @code{TopToolBarHeight}): integer
custom.texi(,2299) @itemx @code{bottomToolBarHeight} (class @code{BottomToolBarHeight}): integer
custom.texi(,2300) @itemx @code{leftToolBarWidth} (class @code{LeftToolBarWidth}): integer
custom.texi(,2301) @itemx @code{rightToolBarWidth} (class @code{RightToolBarWidth}): integer
custom.texi(,2302) Height and width of the four possible toolbars.
custom.texi(,2303) 
custom.texi(,2304) @item @code{topToolBarShadowColor} (class @code{TopToolBarShadowColor}): color-name
custom.texi(,2305) @itemx @code{bottomToolBarShadowColor} (class @code{BottomToolBarShadowColor}): color-name
custom.texi(,2306) Color of the top and bottom shadows for the toolbars.  NOTE: These resources
custom.texi(,2307) do @emph{not} have anything to do with the top and bottom toolbars (i.e. the
custom.texi(,2308) toolbars at the top and bottom of the frame)!  Rather, they affect the top
custom.texi(,2309) and bottom shadows around the edges of all four kinds of toolbars.
custom.texi(,2310) 
custom.texi(,2311) @item @code{topToolBarShadowPixmap} (class @code{TopToolBarShadowPixmap}): pixmap-name
custom.texi(,2312) @itemx @code{bottomToolBarShadowPixmap} (class @code{BottomToolBarShadowPixmap}): pixmap-name
custom.texi(,2313) Pixmap of the top and bottom shadows for the toolbars.  If set, these
custom.texi(,2314) resources override the corresponding color resources. NOTE: These
custom.texi(,2315) resources do @emph{not} have anything to do with the top and bottom
custom.texi(,2316) toolbars (i.e. the toolbars at the top and bottom of the frame)!
custom.texi(,2317) Rather, they affect the top and bottom shadows around the edges of all
custom.texi(,2318) four kinds of toolbars.
custom.texi(,2319) 
custom.texi(,2320) @item @code{toolBarShadowThickness} (class @code{ToolBarShadowThickness}): integer
custom.texi(,2321) Thickness of the shadows around the toolbars, in pixels.
custom.texi(,2322) 
custom.texi(,2323) @item @code{visualBell} (class @code{VisualBell}): boolean
custom.texi(,2324) Whether XEmacs should flash the screen rather than making an audible beep.
custom.texi(,2325) 
custom.texi(,2326) @item @code{bellVolume} (class @code{BellVolume}): integer
custom.texi(,2327) Volume of the audible beep.
custom.texi(,2328) 
custom.texi(,2329) @item @code{useBackingStore} (class @code{UseBackingStore}): boolean
custom.texi(,2330) Whether XEmacs should set the backing-store attribute of the X windows
custom.texi(,2331) it creates.  This increases the memory usage of the X server but decreases
custom.texi(,2332) the amount of X traffic necessary to update the screen, and is useful
custom.texi(,2333) when the connection to the X server goes over a low-bandwidth line
custom.texi(,2334) such as a modem connection.
custom.texi(,2335) @end table
custom.texi(,2336) 
custom.texi(,2337) Emacs devices accept the following resources:
custom.texi(,2338) 
custom.texi(,2339) @table @asis
custom.texi(,2340) @item @code{textPointer} (class @code{Cursor}): cursor-name
custom.texi(,2341) The cursor to use when the mouse is over text.  This resource is used to
custom.texi(,2342) initialize the variable @code{x-pointer-shape}.
custom.texi(,2343) 
custom.texi(,2344) @item @code{selectionPointer} (class @code{Cursor}): cursor-name
custom.texi(,2345) The cursor to use when the mouse is over a selectable text region (an
custom.texi(,2346) extent with the @samp{highlight} property; for example, an Info
custom.texi(,2347) cross-reference).  This resource is used to initialize the variable
custom.texi(,2348) @code{x-selection-pointer-shape}.
custom.texi(,2349) 
custom.texi(,2350) @item @code{spacePointer} (class @code{Cursor}): cursor-name
custom.texi(,2351) The cursor to use when the mouse is over a blank space in a buffer (that
custom.texi(,2352) is, after the end of a line or after the end-of-file).  This resource is
custom.texi(,2353) used to initialize the variable @code{x-nontext-pointer-shape}.
custom.texi(,2354) 
custom.texi(,2355) @item @code{modeLinePointer} (class @code{Cursor}): cursor-name
custom.texi(,2356) The cursor to use when the mouse is over a modeline.  This resource is
custom.texi(,2357) used to initialize the variable @code{x-mode-pointer-shape}.
custom.texi(,2358) 
custom.texi(,2359) @item @code{gcPointer} (class @code{Cursor}): cursor-name
custom.texi(,2360) The cursor to display when a garbage-collection is in progress.  This
custom.texi(,2361) resource is used to initialize the variable @code{x-gc-pointer-shape}.
custom.texi(,2362) 
custom.texi(,2363) @item @code{scrollbarPointer} (class @code{Cursor}): cursor-name
custom.texi(,2364) The cursor to use when the mouse is over the scrollbar.  This resource
custom.texi(,2365) is used to initialize the variable @code{x-scrollbar-pointer-shape}.
custom.texi(,2366) 
custom.texi(,2367) @item @code{pointerColor} (class @code{Foreground}): color-name
custom.texi(,2368) @itemx @code{pointerBackground} (class @code{Background}): color-name
custom.texi(,2369) The foreground and background colors of the mouse cursor.  These
custom.texi(,2370) resources are used to initialize the variables
custom.texi(,2371) @code{x-pointer-foreground-color} and @code{x-pointer-background-color}.
custom.texi(,2372) @end table
custom.texi(,2373) 
custom.texi(,2374) @node Face Resources
custom.texi(,2375) @subsection Face Resources
custom.texi(,2376) 
custom.texi(,2377) The attributes of faces are also per-frame. They can be specified as:
custom.texi(,2378) 
custom.texi(,2379) @example
custom.texi(,2380) Emacs.FACE_NAME.parameter: value
custom.texi(,2381) @end example
custom.texi(,2382) @noindent
custom.texi(,2383) 
custom.texi(,2384) or
custom.texi(,2385) 
custom.texi(,2386) @example
custom.texi(,2387) Emacs*FRAME_NAME.FACE_NAME.parameter: value
custom.texi(,2388) @end example
custom.texi(,2389) @noindent
custom.texi(,2390) 
custom.texi(,2391) Faces accept the following resources:
custom.texi(,2392) 
custom.texi(,2393) @table @asis
custom.texi(,2394) @item @code{attributeFont} (class @code{AttributeFont}): font-name
custom.texi(,2395) The font of this face.
custom.texi(,2396) 
custom.texi(,2397) @item @code{attributeForeground} (class @code{AttributeForeground}): color-name
custom.texi(,2398) @itemx @code{attributeBackground} (class @code{AttributeBackground}): color-name
custom.texi(,2399) The foreground and background colors of this face.
custom.texi(,2400) 
custom.texi(,2401) @item @code{attributeBackgroundPixmap} (class @code{AttributeBackgroundPixmap}): file-name
custom.texi(,2402) The name of an @sc{xbm} file (or @sc{xpm} file, if your version of Emacs
custom.texi(,2403) supports @sc{xpm}), to use as a background stipple.
custom.texi(,2404) 
custom.texi(,2405) @item @code{attributeUnderline} (class @code{AttributeUnderline}): boolean
custom.texi(,2406) Whether text in this face should be underlined.
custom.texi(,2407) @end table
custom.texi(,2408) 
custom.texi(,2409) All text is displayed in some face, defaulting to the face named
custom.texi(,2410) @code{default}.  To set the font of normal text, use
custom.texi(,2411) @code{Emacs*default.attributeFont}. To set it in the frame named
custom.texi(,2412) @code{fred}, use @code{Emacs*fred.default.attributeFont}.
custom.texi(,2413) 
custom.texi(,2414) These are the names of the predefined faces:
custom.texi(,2415) 
custom.texi(,2416) @table @code
custom.texi(,2417) @item default
custom.texi(,2418) Everything inherits from this.
custom.texi(,2419) 
custom.texi(,2420) @item bold
custom.texi(,2421) If this is not specified in the resource database, Emacs tries to find a
custom.texi(,2422) bold version of the font of the default face.
custom.texi(,2423) 
custom.texi(,2424) @item italic
custom.texi(,2425) If this is not specified in the resource database, Emacs tries to find
custom.texi(,2426) an italic version of the font of the default face.
custom.texi(,2427) 
custom.texi(,2428) @item bold-italic
custom.texi(,2429) If this is not specified in the resource database, Emacs tries to find a
custom.texi(,2430) bold-italic version of the font of the default face.
custom.texi(,2431) 
custom.texi(,2432) @item modeline
custom.texi(,2433) This is the face that the modeline is displayed in.  If not specified in
custom.texi(,2434) the resource database, it is determined from the default face by
custom.texi(,2435) reversing the foreground and background colors.
custom.texi(,2436) 
custom.texi(,2437) @item highlight
custom.texi(,2438) This is the face that highlighted extents (for example, Info
custom.texi(,2439) cross-references and possible completions, when the mouse passes over
custom.texi(,2440) them) are displayed in.
custom.texi(,2441) 
custom.texi(,2442) @item left-margin
custom.texi(,2443) @itemx right-margin
custom.texi(,2444) These are the faces that the left and right annotation margins are
custom.texi(,2445) displayed in.
custom.texi(,2446) 
custom.texi(,2447) @item zmacs-region
custom.texi(,2448) This is the face that mouse selections are displayed in.
custom.texi(,2449)  
custom.texi(,2450) @item isearch
custom.texi(,2451) This is the face that the matched text being searched for is displayed
custom.texi(,2452) in.
custom.texi(,2453) 
custom.texi(,2454) @item info-node
custom.texi(,2455) This is the face of info menu items.  If unspecified, it is copied from
custom.texi(,2456) @code{bold-italic}.
custom.texi(,2457) 
custom.texi(,2458) @item info-xref
custom.texi(,2459) This is the face of info cross-references.  If unspecified, it is copied
custom.texi(,2460) from @code{bold}. (Note that, when the mouse passes over a
custom.texi(,2461) cross-reference, the cross-reference's face is determined from a
custom.texi(,2462) combination of the @code{info-xref} and @code{highlight} faces.)
custom.texi(,2463) @end table
custom.texi(,2464) 
custom.texi(,2465) Other packages might define their own faces; to see a list of all faces,
custom.texi(,2466) use any of the interactive face-manipulation commands such as
custom.texi(,2467) @code{set-face-font} and type @samp{?} when you are prompted for the
custom.texi(,2468) name of a face.
custom.texi(,2469) 
custom.texi(,2470) If the @code{bold}, @code{italic}, and @code{bold-italic} faces are not
custom.texi(,2471) specified in the resource database, then XEmacs attempts to derive them
custom.texi(,2472) from the font of the default face.  It can only succeed at this if you
custom.texi(,2473) have specified the default font using the XLFD (X Logical Font
custom.texi(,2474) Description) format, which looks like
custom.texi(,2475) 
custom.texi(,2476) @example
custom.texi(,2477) *-courier-medium-r-*-*-*-120-*-*-*-*-*-*
custom.texi(,2478) @end example
custom.texi(,2479) @noindent
custom.texi(,2480) 
custom.texi(,2481) If you use any of the other, less strict font name formats, some of which
custom.texi(,2482) look like
custom.texi(,2483) 
custom.texi(,2484) @example
custom.texi(,2485) lucidasanstypewriter-12
custom.texi(,2486) fixed
custom.texi(,2487) 9x13
custom.texi(,2488) @end example
custom.texi(,2489) 
custom.texi(,2490) then XEmacs won't be able to guess the names of the bold and italic
custom.texi(,2491) versions.  All X fonts can be referred to via XLFD-style names, so you
custom.texi(,2492) should use those forms.  See the man pages for @samp{X(1)},
custom.texi(,2493) @samp{xlsfonts(1)}, and @samp{xfontsel(1)}.
custom.texi(,2494) 
custom.texi(,2495) @node Widgets
custom.texi(,2496) @subsection Widgets
custom.texi(,2497) 
custom.texi(,2498) There are several structural widgets between the terminal EmacsFrame
custom.texi(,2499) widget and the top level ApplicationShell; the exact names and types of
custom.texi(,2500) these widgets change from release to release (for example, they changed
custom.texi(,2501) between 19.8 and 19.9, 19.9 and 19.10, and 19.10 and 19.12) and are
custom.texi(,2502) subject to further change in the future, so you should avoid mentioning
custom.texi(,2503) them in your resource database.  The above-mentioned syntaxes should be
custom.texi(,2504) forward- compatible.  As of 19.13, the exact widget hierarchy is as
custom.texi(,2505) follows:
custom.texi(,2506) 
custom.texi(,2507) @example
custom.texi(,2508) INVOCATION-NAME            "shell"       "container"     FRAME-NAME
custom.texi(,2509) x-emacs-application-class  "EmacsShell"  "EmacsManager"  "EmacsFrame"
custom.texi(,2510) @end example
custom.texi(,2511) 
custom.texi(,2512) where INVOCATION-NAME is the terminal component of the name of the
custom.texi(,2513) XEmacs executable (usually @samp{xemacs}), and
custom.texi(,2514) @samp{x-emacs-application-class} is generally @samp{Emacs}.
custom.texi(,2515) 
custom.texi(,2516) @node Menubar Resources
custom.texi(,2517) @subsection Menubar Resources
custom.texi(,2518) 
custom.texi(,2519) As the menubar is implemented as a widget which is not a part of XEmacs
custom.texi(,2520) proper, it does not use the face mechanism for specifying fonts and
custom.texi(,2521) colors: It uses whatever resources are appropriate to the type of widget
custom.texi(,2522) which is used to implement it.
custom.texi(,2523) 
custom.texi(,2524) If Emacs was compiled to use only the Lucid Motif-lookalike menu widgets,
custom.texi(,2525) then one way to specify the font of the menubar would be
custom.texi(,2526) 
custom.texi(,2527) @example
custom.texi(,2528) Emacs*menubar*font: *-courier-medium-r-*-*-*-120-*-*-*-*-*-*
custom.texi(,2529) @end example
custom.texi(,2530) 
custom.texi(,2531) If both the Lucid Motif-lookalike menu widgets and X Font Sets are 
custom.texi(,2532) configured to allow multilingual menubars, then one uses
custom.texi(,2533) 
custom.texi(,2534) @example
custom.texi(,2535) *menubar*FontSet:       -*-helvetica-bold-r-*-*-*-120-*-*-*-*-iso8859-*, \
custom.texi(,2536)                         -*-*-*-*-*-*-*-120-*-jisx0208.1983-0
custom.texi(,2537) @end example
custom.texi(,2538) 
custom.texi(,2539) That would specify fonts for a Japanese menubar.  Specifying only one
custom.texi(,2540) XLFD is acceptable; specifying more than one for a given registry
custom.texi(,2541) (language) is also allowed.  When X Font Sets are configured, some .font
custom.texi(,2542) resources (eg, menubars) are ignored in favor of the corresponding
custom.texi(,2543) .fontSet resources.
custom.texi(,2544) 
custom.texi(,2545) If the Motif library is being used, then one would have to use 
custom.texi(,2546) 
custom.texi(,2547) @example
custom.texi(,2548) Emacs*menubar*fontList: *-courier-medium-r-*-*-*-120-*-*-*-*-*-*
custom.texi(,2549) @end example
custom.texi(,2550) 
custom.texi(,2551) because the Motif library uses the @code{fontList} resource name instead
custom.texi(,2552) of @code{font}, which has subtly different semantics.
custom.texi(,2553) 
custom.texi(,2554) The same is true of the scrollbars: They accept whichever resources are 
custom.texi(,2555) appropriate for the toolkit in use.
trouble.texi(,1) 
trouble.texi(,10) 
trouble.texi(,11) @node Quitting, Lossage, Customization, Top
trouble.texi(,12) @section Quitting and Aborting
trouble.texi(,13) @cindex quitting
trouble.texi(,14) 
trouble.texi(,15) @table @kbd
trouble.texi(,16) @item C-g
trouble.texi(,17) Quit.  Cancel running or partially typed command.
trouble.texi(,18) @item C-]
trouble.texi(,19) Abort innermost recursive editing level and cancel the command which
trouble.texi(,20) invoked it (@code{abort-recursive-edit}).
trouble.texi(,21) @item M-x top-level
trouble.texi(,22) Abort all recursive editing levels that are currently executing.
trouble.texi(,23) @item C-x u
trouble.texi(,24) Cancel an already-executed command, usually (@code{undo}).
trouble.texi(,25) @end table
trouble.texi(,26) 
trouble.texi(,27)   There are two ways of cancelling commands which are not finished
trouble.texi(,28) executing: @dfn{quitting} with @kbd{C-g}, and @dfn{aborting} with @kbd{C-]}
trouble.texi(,29) or @kbd{M-x top-level}.  Quitting is cancelling a partially typed command
trouble.texi(,30) or one which is already running.  Aborting is getting out of a recursive
trouble.texi(,31) editing level and cancelling the command that invoked the recursive edit.
trouble.texi(,32) 
trouble.texi(,33) @cindex quitting
trouble.texi(,34) @kindex C-g
trouble.texi(,35)   Quitting with @kbd{C-g} is used for getting rid of a partially typed
trouble.texi(,36) command or a numeric argument that you don't want.  It also stops a
trouble.texi(,37) running command in the middle in a relatively safe way, so you can use
trouble.texi(,38) it if you accidentally start executing a command that takes a long
trouble.texi(,39) time.  In particular, it is safe to quit out of killing; either your
trouble.texi(,40) text will @var{all} still be there, or it will @var{all} be in the kill
trouble.texi(,41) ring (or maybe both).  Quitting an incremental search does special
trouble.texi(,42) things documented under searching; in general, it may take two
trouble.texi(,43) successive @kbd{C-g} characters to get out of a search.  @kbd{C-g} works
trouble.texi(,44) by setting the variable @code{quit-flag} to @code{t} the instant
trouble.texi(,45) @kbd{C-g} is typed; Emacs Lisp checks this variable frequently and quits
trouble.texi(,46) if it is non-@code{nil}.  @kbd{C-g} is only actually executed as a
trouble.texi(,47) command if it is typed while Emacs is waiting for input.
trouble.texi(,48) 
trouble.texi(,49) If you quit twice in a row before the first @kbd{C-g} is recognized, you
trouble.texi(,50) activate the ``emergency escape'' feature and return to the shell.
trouble.texi(,51) @xref{Emergency Escape}.
trouble.texi(,52) 
trouble.texi(,53) @cindex recursive editing level
trouble.texi(,54) @cindex editing level, recursive
trouble.texi(,55) @cindex aborting
trouble.texi(,56) @findex abort-recursive-edit
trouble.texi(,57) @kindex C-]
trouble.texi(,58)   You can use @kbd{C-]} (@code{abort-recursive-edit}) to get out
trouble.texi(,59) of a recursive editing level and cancel the command which invoked it.
trouble.texi(,60) Quitting with @kbd{C-g} does not do this, and could not do this because it
trouble.texi(,61) is used to cancel a partially typed command @i{within} the recursive
trouble.texi(,62) editing level.  Both operations are useful.  For example, if you are in the
trouble.texi(,63) Emacs debugger (@pxref{Lisp Debug}) and have typed @kbd{C-u 8} to enter a
trouble.texi(,64) numeric argument, you can cancel that argument with @kbd{C-g} and remain in
trouble.texi(,65) the debugger.
trouble.texi(,66) 
trouble.texi(,67) @findex top-level
trouble.texi(,68)   The command @kbd{M-x top-level} is equivalent to ``enough'' @kbd{C-]}
trouble.texi(,69) commands to get you out of all the levels of recursive edits that you are
trouble.texi(,70) in.  @kbd{C-]} only gets you out one level at a time, but @kbd{M-x top-level}
trouble.texi(,71) goes out all levels at once.  Both @kbd{C-]} and @kbd{M-x top-level} are
trouble.texi(,72) like all other commands and unlike @kbd{C-g} in that they are effective
trouble.texi(,73) only when Emacs is ready for a command.  @kbd{C-]} is an ordinary key and
trouble.texi(,74) has its meaning only because of its binding in the keymap.
trouble.texi(,75) @xref{Recursive Edit}.
trouble.texi(,76) 
trouble.texi(,77)   @kbd{C-x u} (@code{undo}) is not strictly speaking a way of cancelling a
trouble.texi(,78) command, but you can think of it as cancelling a command already finished
trouble.texi(,79) executing.  @xref{Undo}.
trouble.texi(,80) 
trouble.texi(,81) @node Lossage, Bugs, Quitting, Top
trouble.texi(,82) @section Dealing With Emacs Trouble
trouble.texi(,83) 
trouble.texi(,84)   This section describes various conditions in which Emacs fails to work,
trouble.texi(,85) and how to recognize them and correct them.
trouble.texi(,86) 
trouble.texi(,87) @menu
trouble.texi(,88) * Stuck Recursive::    `[...]' in mode line around the parentheses.
trouble.texi(,89) * Screen Garbled::     Garbage on the screen.
trouble.texi(,90) * Text Garbled::       Garbage in the text.
trouble.texi(,91) * Unasked-for Search:: Spontaneous entry to incremental search.
trouble.texi(,92) * Emergency Escape::   Emergency escape---
trouble.texi(,93)                         What to do if Emacs stops responding.
trouble.texi(,94) * Total Frustration::  When you are at your wits' end.
trouble.texi(,95) @end menu
trouble.texi(,96) 
trouble.texi(,97) @node Stuck Recursive, Screen Garbled, Lossage, Lossage
trouble.texi(,98) @subsection Recursive Editing Levels
trouble.texi(,99) 
trouble.texi(,100)   Recursive editing levels are important and useful features of Emacs, but
trouble.texi(,101) they can seem like malfunctions to the user who does not understand them.
trouble.texi(,102) 
trouble.texi(,103)   If the mode line has square brackets @samp{[@dots{}]} around the parentheses
trouble.texi(,104) that contain the names of the major and minor modes, you have entered a
trouble.texi(,105) recursive editing level.  If you did not do this on purpose, or if you
trouble.texi(,106) don't understand what that means, you should just get out of the recursive
trouble.texi(,107) editing level.  To do so, type @kbd{M-x top-level}.  This is called getting
trouble.texi(,108) back to top level.  @xref{Recursive Edit}.
trouble.texi(,109) 
trouble.texi(,110) @node Screen Garbled, Text Garbled, Stuck Recursive, Lossage
trouble.texi(,111) @subsection Garbage on the Screen
trouble.texi(,112) 
trouble.texi(,113)   If the data on the screen looks wrong, the first thing to do is see
trouble.texi(,114) whether the text is actually wrong.  Type @kbd{C-l}, to redisplay the
trouble.texi(,115) entire screen.  If the text appears correct after this, the problem was
trouble.texi(,116) entirely in the previous screen update.
trouble.texi(,117) 
trouble.texi(,118)   Display updating problems often result from an incorrect termcap entry
trouble.texi(,119) for the terminal you are using.  The file @file{etc/TERMS} in the Emacs
trouble.texi(,120) distribution gives the fixes for known problems of this sort.
trouble.texi(,121) @file{INSTALL} contains general advice for these problems in one of its
trouble.texi(,122) sections.  Very likely there is simply insufficient padding for certain
trouble.texi(,123) display operations.  To investigate the possibility that you have this
trouble.texi(,124) sort of problem, try Emacs on another terminal made by a different
trouble.texi(,125) manufacturer.  If problems happen frequently on one kind of terminal but
trouble.texi(,126) not another kind, the real problem is likely to be a bad termcap entry,
trouble.texi(,127) though it could also be due to a bug in Emacs that appears for terminals
trouble.texi(,128) that have or lack specific features.
trouble.texi(,129) 
trouble.texi(,130) @node Text Garbled, Unasked-for Search, Screen Garbled, Lossage
trouble.texi(,131) @subsection Garbage in the Text
trouble.texi(,132) 
trouble.texi(,133)   If @kbd{C-l} shows that the text is wrong, try undoing the changes to it
trouble.texi(,134) using @kbd{C-x u} until it gets back to a state you consider correct.  Also
trouble.texi(,135) try @kbd{C-h l} to find out what command you typed to produce the observed
trouble.texi(,136) results.
trouble.texi(,137) 
trouble.texi(,138)   If a large portion of text appears to be missing at the beginning or
trouble.texi(,139) end of the buffer, check for the word @samp{Narrow} in the mode line.
trouble.texi(,140) If it appears, the text is still present, but marked off-limits.
trouble.texi(,141) To make it visible again, type @kbd{C-x n w}.  @xref{Narrowing}.
trouble.texi(,142) 
trouble.texi(,143) @node Unasked-for Search, Emergency Escape, Text Garbled, Lossage
trouble.texi(,144) @subsection Spontaneous Entry to Incremental Search
trouble.texi(,145) 
trouble.texi(,146)   If Emacs spontaneously displays @samp{I-search:} at the bottom of the
trouble.texi(,147) screen, it means that the terminal is sending @kbd{C-s} and @kbd{C-q}
trouble.texi(,148) according to the poorly designed xon/xoff ``flow control'' protocol.  You
trouble.texi(,149) should try to prevent this by putting the terminal in a mode where it will
trouble.texi(,150) not use flow control, or by giving it enough padding that it will never send a
trouble.texi(,151) @kbd{C-s}.  If that cannot be done, you must tell Emacs to expect flow
trouble.texi(,152) control to be used, until you can get a properly designed terminal.
trouble.texi(,153) 
trouble.texi(,154)   Information on how to do these things can be found in the file
trouble.texi(,155) @file{INSTALL} in the Emacs distribution.
trouble.texi(,156) 
trouble.texi(,157) @node Emergency Escape, Total Frustration, Unasked-for Search, Lossage
trouble.texi(,158) @subsection Emergency Escape
trouble.texi(,159) 
trouble.texi(,160)   Because at times there have been bugs causing Emacs to loop without
trouble.texi(,161) checking @code{quit-flag}, a special feature causes Emacs to be suspended
trouble.texi(,162) immediately if you type a second @kbd{C-g} while the flag is already set,
trouble.texi(,163) so you can always get out of XEmacs.  Normally Emacs recognizes and
trouble.texi(,164) clears @code{quit-flag} (and quits!) quickly enough to prevent this from
trouble.texi(,165) happening.
trouble.texi(,166) 
trouble.texi(,167)   When you resume Emacs after a suspension caused by multiple @kbd{C-g}, it
trouble.texi(,168) asks two questions before going back to what it had been doing:
trouble.texi(,169) 
trouble.texi(,170) @example
trouble.texi(,171) Auto-save? (y or n)
trouble.texi(,172) Abort (and dump core)? (y or n)
trouble.texi(,173) @end example
trouble.texi(,174) 
trouble.texi(,175) @noindent
trouble.texi(,176) Answer each one with @kbd{y} or @kbd{n} followed by @key{RET}.
trouble.texi(,177) 
trouble.texi(,178)   Saying @kbd{y} to @samp{Auto-save?} causes immediate auto-saving of all
trouble.texi(,179) modified buffers in which auto-saving is enabled.
trouble.texi(,180) 
trouble.texi(,181)   Saying @kbd{y} to @samp{Abort (and dump core)?} causes an illegal
trouble.texi(,182) instruction to be executed, dumping core.  This is to enable a wizard to
trouble.texi(,183) figure out why Emacs was failing to quit in the first place.  Execution
trouble.texi(,184) does not continue after a core dump.  If you answer @kbd{n}, execution
trouble.texi(,185) does continue.  With luck, Emacs will ultimately check
trouble.texi(,186) @code{quit-flag} and quit normally.  If not, and you type another
trouble.texi(,187) @kbd{C-g}, it is suspended again.
trouble.texi(,188) 
trouble.texi(,189)   If Emacs is not really hung, but is just being slow, you may invoke
trouble.texi(,190) the double @kbd{C-g} feature without really meaning to.  In that case,
trouble.texi(,191) simply resume and answer @kbd{n} to both questions, and you will arrive
trouble.texi(,192) at your former state.  Presumably the quit you requested will happen
trouble.texi(,193) soon.
trouble.texi(,194) 
trouble.texi(,195)   The double-@kbd{C-g} feature may be turned off when Emacs is running under
trouble.texi(,196) a window system, since the window system always enables you to kill Emacs
trouble.texi(,197) or to create another window and run another program.
trouble.texi(,198) 
trouble.texi(,199) @node Total Frustration,, Emergency Escape, Lossage
trouble.texi(,200) @subsection Help for Total Frustration
trouble.texi(,201) @cindex Eliza
trouble.texi(,202) @cindex doctor
trouble.texi(,203) 
trouble.texi(,204)   If using Emacs (or something else) becomes terribly frustrating and none
trouble.texi(,205) of the techniques described above solve the problem, Emacs can still help
trouble.texi(,206) you.
trouble.texi(,207) 
trouble.texi(,208)   First, if the Emacs you are using is not responding to commands, type
trouble.texi(,209) @kbd{C-g C-g} to get out of it and then start a new one.
trouble.texi(,210) 
trouble.texi(,211) @findex doctor
trouble.texi(,212)   Second, type @kbd{M-x doctor @key{RET}}.
trouble.texi(,213) 
trouble.texi(,214)   The doctor will make you feel better.  Each time you say something to
trouble.texi(,215) the doctor, you must end it by typing @key{RET} @key{RET}.  This lets the
trouble.texi(,216) doctor know you are finished.
trouble.texi(,217) 
trouble.texi(,218) @node Bugs,, Lossage, Top
trouble.texi(,219) @section Reporting Bugs
trouble.texi(,220) 
trouble.texi(,221) @cindex bugs
trouble.texi(,222)   Sometimes you will encounter a bug in Emacs.  Although we cannot promise
trouble.texi(,223) we can or will fix the bug, and we might not even agree that it is a bug,
trouble.texi(,224) we want to hear about bugs you encounter in case we do want to fix them.
trouble.texi(,225) 
trouble.texi(,226)   To make it possible for us to fix a bug, you must report it.  In order
trouble.texi(,227) to do so effectively, you must know when and how to do it.
trouble.texi(,228) 
trouble.texi(,229) @subsection When Is There a Bug
trouble.texi(,230) 
trouble.texi(,231)   If Emacs executes an illegal instruction, or dies with an operating
trouble.texi(,232) system error message that indicates a problem in the program (as opposed to
trouble.texi(,233) something like ``disk full''), then it is certainly a bug.
trouble.texi(,234) 
trouble.texi(,235)   If Emacs updates the display in a way that does not correspond to what is
trouble.texi(,236) in the buffer, then it is certainly a bug.  If a command seems to do the
trouble.texi(,237) wrong thing but the problem corrects itself if you type @kbd{C-l}, it is a
trouble.texi(,238) case of incorrect display updating.
trouble.texi(,239) 
trouble.texi(,240)   Taking forever to complete a command can be a bug, but you must make
trouble.texi(,241) certain that it was really Emacs's fault.  Some commands simply take a long
trouble.texi(,242) time.  Type @kbd{C-g} and then @kbd{C-h l} to see whether the input Emacs
trouble.texi(,243) received was what you intended to type; if the input was such that you
trouble.texi(,244) @var{know} it should have been processed quickly, report a bug.  If you
trouble.texi(,245) don't know whether the command should take a long time, find out by looking
trouble.texi(,246) in the manual or by asking for assistance.
trouble.texi(,247) 
trouble.texi(,248)   If a command you are familiar with causes an Emacs error message in a
trouble.texi(,249) case where its usual definition ought to be reasonable, it is probably a
trouble.texi(,250) bug.
trouble.texi(,251) 
trouble.texi(,252)   If a command does the wrong thing, that is a bug.  But be sure you know
trouble.texi(,253) for certain what it ought to have done.  If you aren't familiar with the
trouble.texi(,254) command, or don't know for certain how the command is supposed to work,
trouble.texi(,255) then it might actually be working right.  Rather than jumping to
trouble.texi(,256) conclusions, show the problem to someone who knows for certain.
trouble.texi(,257) 
trouble.texi(,258)   Finally, a command's intended definition may not be best for editing
trouble.texi(,259) with.  This is a very important sort of problem, but it is also a matter of
trouble.texi(,260) judgment.  Also, it is easy to come to such a conclusion out of ignorance
trouble.texi(,261) of some of the existing features.  It is probably best not to complain
trouble.texi(,262) about such a problem until you have checked the documentation in the usual
trouble.texi(,263) ways, feel confident that you understand it, and know for certain that what
trouble.texi(,264) you want is not available.  If you are not sure what the command is
trouble.texi(,265) supposed to do after a careful reading of the manual, check the index and
trouble.texi(,266) glossary for any terms that may be unclear.  If you still do not
trouble.texi(,267) understand, this indicates a bug in the manual.  The manual's job is to
trouble.texi(,268) make everything clear.  It is just as important to report documentation
trouble.texi(,269) bugs as program bugs.
trouble.texi(,270) 
trouble.texi(,271)   If the online documentation string of a function or variable disagrees
trouble.texi(,272) with the manual, one of them must be wrong, so report the bug.
trouble.texi(,273) 
trouble.texi(,274) @subsection How to Report a Bug
trouble.texi(,275) 
trouble.texi(,276) @findex emacs-version
trouble.texi(,277)   When you decide that there is a bug, it is important to report it and to
trouble.texi(,278) report it in a way which is useful.  What is most useful is an exact
trouble.texi(,279) description of what commands you type, starting with the shell command to
trouble.texi(,280) run Emacs, until the problem happens.  Always include the version number
trouble.texi(,281) of Emacs that you are using; type @kbd{M-x emacs-version} to print this.
trouble.texi(,282) 
trouble.texi(,283)   The most important principle in reporting a bug is to report @var{facts},
trouble.texi(,284) not hypotheses or categorizations.  It is always easier to report the facts,
trouble.texi(,285) but people seem to prefer to strain to posit explanations and report
trouble.texi(,286) them instead.  If the explanations are based on guesses about how Emacs is
trouble.texi(,287) implemented, they will be useless; we will have to try to figure out what
trouble.texi(,288) the facts must have been to lead to such speculations.  Sometimes this is
trouble.texi(,289) impossible.  But in any case, it is unnecessary work for us.
trouble.texi(,290) 
trouble.texi(,291)   For example, suppose that you type @kbd{C-x C-f /glorp/baz.ugh
trouble.texi(,292) @key{RET}}, visiting a file which (you know) happens to be rather large,
trouble.texi(,293) and Emacs prints out @samp{I feel pretty today}.  The best way to report
trouble.texi(,294) the bug is with a sentence like the preceding one, because it gives all the
trouble.texi(,295) facts and nothing but the facts.
trouble.texi(,296) 
trouble.texi(,297)   Do not assume that the problem is due to the size of the file and say,
trouble.texi(,298) ``When I visit a large file, Emacs prints out @samp{I feel pretty today}.''
trouble.texi(,299) This is what we mean by ``guessing explanations''.  The problem is just as
trouble.texi(,300) likely to be due to the fact that there is a @samp{z} in the file name.  If
trouble.texi(,301) this is so, then when we got your report, we would try out the problem with
trouble.texi(,302) some ``large file'', probably with no @samp{z} in its name, and not find
trouble.texi(,303) anything wrong.  There is no way in the world that we could guess that we
trouble.texi(,304) should try visiting a file with a @samp{z} in its name.
trouble.texi(,305) 
trouble.texi(,306)   Alternatively, the problem might be due to the fact that the file starts
trouble.texi(,307) with exactly 25 spaces.  For this reason, you should make sure that you
trouble.texi(,308) inform us of the exact contents of any file that is needed to reproduce the
trouble.texi(,309) bug.  What if the problem only occurs when you have typed the @kbd{C-x a l}
trouble.texi(,310) command previously?  This is why we ask you to give the exact sequence of
trouble.texi(,311) characters you typed since starting to use Emacs.
trouble.texi(,312) 
trouble.texi(,313)   You should not even say ``visit a file'' instead of @kbd{C-x C-f} unless
trouble.texi(,314) you @i{know} that it makes no difference which visiting command is used.
trouble.texi(,315) Similarly, rather than saying ``if I have three characters on the line,''
trouble.texi(,316) say ``after I type @kbd{@key{RET} A B C @key{RET} C-p},'' if that is
trouble.texi(,317) the way you entered the text.@refill
trouble.texi(,318) 
trouble.texi(,319)   If you are not in Fundamental mode when the problem occurs, you should
trouble.texi(,320) say what mode you are in.
trouble.texi(,321) 
trouble.texi(,322)   If the manifestation of the bug is an Emacs error message, it is
trouble.texi(,323) important to report not just the text of the error message but a backtrace
trouble.texi(,324) showing how the Lisp program in Emacs arrived at the error.  To make the
trouble.texi(,325) backtrace, you must execute the Lisp expression 
trouble.texi(,326) @code{(setq @w{debug-on-error t})} before the error happens (that is to
trouble.texi(,327) say, you must execute that expression and then make the bug happen).  This
trouble.texi(,328) causes the Lisp debugger to run (@pxref{Lisp Debug}).  The debugger's
trouble.texi(,329) backtrace can be copied as text into the bug report.  This use of the
trouble.texi(,330) debugger is possible only if you know how to make the bug happen again.  Do
trouble.texi(,331) note the error message the first time the bug happens, so if you can't make
trouble.texi(,332) it happen again, you can report at least that.
trouble.texi(,333) 
trouble.texi(,334)   Check whether any programs you have loaded into the Lisp world, including
trouble.texi(,335) your init file, set any variables that may affect the functioning of
trouble.texi(,336) Emacs.  @xref{Init File}.  Also, see whether the problem happens in a
trouble.texi(,337) freshly started Emacs without loading your init file (start Emacs with
trouble.texi(,338) the @code{-q} switch to prevent loading the init file).  If the problem
trouble.texi(,339) does @var{not} occur then, it is essential that we know the contents of
trouble.texi(,340) any programs that you must load into the Lisp world in order to cause
trouble.texi(,341) the problem to occur.
trouble.texi(,342) 
trouble.texi(,343)   If the problem does depend on an init file or other Lisp programs that
trouble.texi(,344) are not part of the standard Emacs system, then you should make sure it is
trouble.texi(,345) not a bug in those programs by complaining to their maintainers first.
trouble.texi(,346) After they verify that they are using Emacs in a way that is supposed to
trouble.texi(,347) work, they should report the bug.
trouble.texi(,348) 
trouble.texi(,349)   If you can tell us a way to cause the problem without visiting any files,
trouble.texi(,350) please do so.  This makes it much easier to debug.  If you do need files,
trouble.texi(,351) make sure you arrange for us to see their exact contents.  For example, it
trouble.texi(,352) can often matter whether there are spaces at the ends of lines, or a
trouble.texi(,353) newline after the last line in the buffer (nothing ought to care whether
trouble.texi(,354) the last line is terminated, but tell that to the bugs).
trouble.texi(,355) 
trouble.texi(,356) @findex open-dribble-file
trouble.texi(,357) @cindex dribble file
trouble.texi(,358)   The easy way to record the input to Emacs precisely is to write a
trouble.texi(,359) dribble file; execute the Lisp expression:
trouble.texi(,360) 
trouble.texi(,361) @example
trouble.texi(,362) (open-dribble-file "~/dribble")
trouble.texi(,363) @end example
trouble.texi(,364) 
trouble.texi(,365) @noindent
trouble.texi(,366) using @kbd{Meta-@key{ESC}} or from the @samp{*scratch*} buffer just after starting
trouble.texi(,367) Emacs.  From then on, all Emacs input will be written in the specified
trouble.texi(,368) dribble file until the Emacs process is killed.
trouble.texi(,369) 
trouble.texi(,370) @findex open-termscript
trouble.texi(,371) @cindex termscript file
trouble.texi(,372)   For possible display bugs, it is important to report the terminal type
trouble.texi(,373) (the value of environment variable @code{TERM}), the complete termcap entry
trouble.texi(,374) for the terminal from @file{/etc/termcap} (since that file is not identical
trouble.texi(,375) on all machines), and the output that Emacs actually sent to the terminal.
trouble.texi(,376) The way to collect this output is to execute the Lisp expression:
trouble.texi(,377) 
trouble.texi(,378) @example
trouble.texi(,379) (open-termscript "~/termscript")
trouble.texi(,380) @end example
trouble.texi(,381) 
trouble.texi(,382) @noindent using @kbd{Meta-@key{ESC}} or from the @samp{*scratch*} buffer
trouble.texi(,383) just after starting Emacs.  From then on, all output from Emacs to the
trouble.texi(,384) terminal will be written in the specified termscript file as well, until
trouble.texi(,385) the Emacs process is killed.  If the problem happens when Emacs starts
trouble.texi(,386) up, put this expression into your init file so that the termscript file
trouble.texi(,387) will be open when Emacs displays the screen for the first time.
trouble.texi(,388) @xref{Init File}. Be warned: it is often difficult, and sometimes
trouble.texi(,389) impossible, to fix a terminal-dependent bug without access to a terminal
trouble.texi(,390) of the type that stimulates the bug.@refill
trouble.texi(,391) 
trouble.texi(,392) The newsgroup @samp{comp.emacs.xemacs} may be used for bug reports,
trouble.texi(,393) other discussions and requests for assistance.  
trouble.texi(,394) 
trouble.texi(,395) If you don't have access to this newgroup, you can subscribe to the
trouble.texi(,396) mailing list version: the newsgroup is bidirectionally gatewayed into
trouble.texi(,397) the mailing list @samp{xemacs@@xemacs.org}.
trouble.texi(,398) 
trouble.texi(,399) To be added or removed from this mailing list, send mail to
trouble.texi(,400) @samp{xemacs-request@@xemacs.org}.  Do not send requests for addition
trouble.texi(,401) to the mailing list itself.
trouble.texi(,402) 
trouble.texi(,403) The mailing lists and newsgroups are archived on our anonymous FTP server,
trouble.texi(,404) @samp{ftp.xemacs.org}, and at various other archive sites around the net. You 
trouble.texi(,405) should also check the @samp{FAQ} in @samp{/pub/xemacs} on our anonymous 
trouble.texi(,406) FTP server. It provides some introductory information and help for initial 
trouble.texi(,407) configuration problems.
xemacs.texi(,1099) 
new.texi(,1) 
glossary.texi(,1) 
glossary.texi(,2) @node Glossary, Manifesto, Intro, Top
glossary.texi(,3) @unnumbered Glossary
glossary.texi(,4) 
glossary.texi(,5) @table @asis
glossary.texi(,6) @item Abbrev
glossary.texi(,7) An abbrev is a text string which expands into a different text string
glossary.texi(,8) when present in the buffer.  For example, you might define a short
glossary.texi(,9) word as an abbrev for a long phrase that you want to insert
glossary.texi(,10) frequently.  @xref{Abbrevs}.
glossary.texi(,11) 
glossary.texi(,12) @item Aborting
glossary.texi(,13) Aborting means getting out of a recursive edit (q.v.@:).  You can use
glossary.texi(,14) the commands @kbd{C-]} and @kbd{M-x top-level} for this.
glossary.texi(,15) @xref{Quitting}.
glossary.texi(,16) 
glossary.texi(,17) @item Auto Fill mode
glossary.texi(,18) Auto Fill mode is a minor mode in which text you insert is
glossary.texi(,19) automatically broken into lines of fixed width.  @xref{Filling}.
glossary.texi(,20) 
glossary.texi(,21) @item Auto Saving
glossary.texi(,22) Auto saving means that Emacs automatically stores the contents of an
glossary.texi(,23) Emacs buffer in a specially-named file so the information will not be
glossary.texi(,24) lost if the buffer is lost due to a system error or user error.
glossary.texi(,25) @xref{Auto Save}.
glossary.texi(,26) 
glossary.texi(,27) @item Backup File
glossary.texi(,28) A backup file records the contents that a file had before the current
glossary.texi(,29) editing session.  Emacs creates backup files automatically to help you
glossary.texi(,30) track down or cancel changes you later regret.  @xref{Backup}.
glossary.texi(,31) 
glossary.texi(,32) @item Balance Parentheses
glossary.texi(,33) Emacs can balance parentheses manually or automatically.  Manual
glossary.texi(,34) balancing is done by the commands to move over balanced expressions
glossary.texi(,35) (@pxref{Lists}).  Automatic balancing is done by blinking the
glossary.texi(,36) parenthesis that matches one just inserted (@pxref{Matching,,Matching
glossary.texi(,37) Parens}).
glossary.texi(,38) 
glossary.texi(,39) @item Bind
glossary.texi(,40) To bind a key is to change its binding (q.v.@:).  @xref{Rebinding}.
glossary.texi(,41) 
glossary.texi(,42) @item Binding
glossary.texi(,43) A key gets its meaning in Emacs by having a binding which is a
glossary.texi(,44) command (q.v.@:), a Lisp function that is run when the key is typed.
glossary.texi(,45) @xref{Commands,Binding}.  Customization often involves rebinding a
glossary.texi(,46) character to a different command function.  The bindings of all keys
glossary.texi(,47) are recorded in the keymaps (q.v.@:).  @xref{Keymaps}.
glossary.texi(,48) 
glossary.texi(,49) @item Blank Lines
glossary.texi(,50) Blank lines are lines that contain only whitespace.  Emacs has several
glossary.texi(,51) commands for operating on the blank lines in a buffer.
glossary.texi(,52) 
glossary.texi(,53) @item Buffer
glossary.texi(,54) The buffer is the basic editing unit; one buffer corresponds to one
glossary.texi(,55) piece of text being edited.  You can have several buffers, but at any
glossary.texi(,56) time you are editing only one, the `selected' buffer, though several
glossary.texi(,57) buffers can be visible when you are using multiple windows.  @xref{Buffers}.
glossary.texi(,58) 
glossary.texi(,59) @item Buffer Selection History
glossary.texi(,60) Emacs keeps a buffer selection history which records how recently each
glossary.texi(,61) Emacs buffer was selected.  Emacs uses this list when choosing a buffer to
glossary.texi(,62) select.  @xref{Buffers}.
glossary.texi(,63) 
glossary.texi(,64) @item C-
glossary.texi(,65) @samp{C} in the name of a character is an abbreviation for Control.
glossary.texi(,66) @xref{Keystrokes,C-}.
glossary.texi(,67) 
glossary.texi(,68) @item C-M-
glossary.texi(,69) @samp{C-M-} in the name of a character is an abbreviation for
glossary.texi(,70) Control-Meta.  @xref{Keystrokes,C-M-}.
glossary.texi(,71) 
glossary.texi(,72) @item Case Conversion
glossary.texi(,73) Case conversion means changing text from upper case to lower case or
glossary.texi(,74) vice versa.  @xref{Case}, for the commands for case conversion.
glossary.texi(,75) 
glossary.texi(,76) @item Characters
glossary.texi(,77) Characters form the contents of an Emacs buffer; also, Emacs commands
glossary.texi(,78) are invoked by keys (q.v.@:), which are sequences of one or more
glossary.texi(,79) characters.  @xref{Keystrokes}.
glossary.texi(,80) 
glossary.texi(,81) @item Command
glossary.texi(,82) A command is a Lisp function specially defined to be able to serve as a
glossary.texi(,83) key binding in Emacs.  When you type a key (q.v.@:), Emacs looks up its
glossary.texi(,84) binding (q.v.@:) in the relevant keymaps (q.v.@:) to find the command to
glossary.texi(,85) run.  @xref{Commands}.
glossary.texi(,86) 
glossary.texi(,87) @item Command Name
glossary.texi(,88) A command name is the name of a Lisp symbol which is a command
glossary.texi(,89) (@pxref{Commands}).  You can invoke any command by its name using
glossary.texi(,90) @kbd{M-x} (@pxref{M-x}).
glossary.texi(,91) 
glossary.texi(,92) @item Comments
glossary.texi(,93) A comment is text in a program which is intended only for the people
glossary.texi(,94) reading the program, and is marked specially so that it will be
glossary.texi(,95) ignored when the program is loaded or compiled.  Emacs offers special
glossary.texi(,96) commands for creating, aligning, and killing comments.
glossary.texi(,97) @xref{Comments}.
glossary.texi(,98) 
glossary.texi(,99) @item Compilation
glossary.texi(,100) Compilation is the process of creating an executable program from
glossary.texi(,101) source code.  Emacs has commands for compiling files of Emacs Lisp
glossary.texi(,102) code (@pxref{Lisp Libraries}) and programs in C and other languages
glossary.texi(,103) (@pxref{Compilation}).
glossary.texi(,104) 
glossary.texi(,105) @item Complete Key
glossary.texi(,106) A complete key is a character or sequence of characters which, when typed
glossary.texi(,107) by the user, fully specifies one action to be performed by Emacs.  For
glossary.texi(,108) example, @kbd{X} and @kbd{Control-f} and @kbd{Control-x m} are keys.  Keys
glossary.texi(,109) derive their meanings from being bound (q.v.@:) to commands (q.v.@:).
glossary.texi(,110) Thus, @kbd{X} is conventionally bound to a command to insert @samp{X} in
glossary.texi(,111) the buffer; @kbd{C-x m} is conventionally bound to a command to begin
glossary.texi(,112) composing a mail message. @xref{Keystrokes}.
glossary.texi(,113) 
glossary.texi(,114) @item Completion
glossary.texi(,115) When Emacs automatically fills an abbreviation for a name into the
glossary.texi(,116) entire name, that process is called completion.  Completion is done for
glossary.texi(,117) minibuffer (q.v.@:) arguments when the set of possible valid inputs is
glossary.texi(,118) known; for example, on command names, buffer names, and file names.
glossary.texi(,119) Completion occurs when you type @key{TAB}, @key{SPC}, or @key{RET}.
glossary.texi(,120) @xref{Completion}.@refill
glossary.texi(,121) 
glossary.texi(,122) @item Continuation Line
glossary.texi(,123) When a line of text is longer than the width of the frame, it
glossary.texi(,124) takes up more than one screen line when displayed.  We say that the
glossary.texi(,125) text line is continued, and all screen lines used for it after the
glossary.texi(,126) first are called continuation lines.  @xref{Basic,Continuation,Basic
glossary.texi(,127) Editing}.
glossary.texi(,128) 
glossary.texi(,129) @item Control-Character
glossary.texi(,130) ASCII characters with octal codes 0 through 037, and also code 0177,
glossary.texi(,131) do not have graphic images assigned to them.  These are the control
glossary.texi(,132) characters.  Any control character can be typed by holding down the
glossary.texi(,133) @key{CTRL} key and typing some other character; some have special keys
glossary.texi(,134) on the keyboard.  @key{RET}, @key{TAB}, @key{ESC}, @key{LFD}, and
glossary.texi(,135) @key{DEL} are all control characters.  @xref{Keystrokes}.@refill
glossary.texi(,136) 
glossary.texi(,137) @item Copyleft
glossary.texi(,138) A copyleft is a notice giving the public legal permission to redistribute
glossary.texi(,139) a program or other work of art.  Copylefts are used by leftists to enrich
glossary.texi(,140) the public just as copyrights are used by rightists to gain power over
glossary.texi(,141) the public.
glossary.texi(,142) 
glossary.texi(,143) @item Current Buffer
glossary.texi(,144) The current buffer in Emacs is the Emacs buffer on which most editing
glossary.texi(,145) commands operate.  You can select any Emacs buffer as the current one.
glossary.texi(,146) @xref{Buffers}.
glossary.texi(,147) 
glossary.texi(,148) @item Current Line
glossary.texi(,149) The line point is on (@pxref{Point}).
glossary.texi(,150) 
glossary.texi(,151) @item Current Paragraph
glossary.texi(,152) The paragraph that point is in.  If point is between paragraphs, the
glossary.texi(,153) current paragraph is the one that follows point.  @xref{Paragraphs}.
glossary.texi(,154) 
glossary.texi(,155) @item Current Defun
glossary.texi(,156) The defun (q.v.@:) that point is in.  If point is between defuns, the
glossary.texi(,157) current defun is the one that follows point.  @xref{Defuns}.
glossary.texi(,158) 
glossary.texi(,159) @item Cursor
glossary.texi(,160) The cursor is the rectangle on the screen which indicates the position
glossary.texi(,161) called point (q.v.@:) at which insertion and deletion takes place.
glossary.texi(,162) The cursor is on or under the character that follows point.  Often
glossary.texi(,163) people speak of `the cursor' when, strictly speaking, they mean
glossary.texi(,164) `point'.  @xref{Basic,Cursor,Basic Editing}.
glossary.texi(,165) 
glossary.texi(,166) @item Customization
glossary.texi(,167) Customization is making minor changes in the way Emacs works.  It is
glossary.texi(,168) often done by setting variables (@pxref{Variables}) or by rebinding
glossary.texi(,169) keys (@pxref{Keymaps}).
glossary.texi(,170) 
glossary.texi(,171) @item Default Argument
glossary.texi(,172) The default for an argument is the value that is used if you do not
glossary.texi(,173) specify one.  When Emacs prompts you in the minibuffer for an argument,
glossary.texi(,174) the default argument is used if you just type @key{RET}.
glossary.texi(,175) @xref{Minibuffer}.
glossary.texi(,176) 
glossary.texi(,177) @item Default Directory
glossary.texi(,178) When you specify a file name that does not start with @samp{/} or @samp{~},
glossary.texi(,179) it is interpreted relative to the current buffer's default directory.
glossary.texi(,180) @xref{Minibuffer File,Default Directory}.
glossary.texi(,181) 
glossary.texi(,182) @item Defun
glossary.texi(,183) A defun is a list at the top level of parenthesis or bracket structure
glossary.texi(,184) in a program.  It is so named because most such lists in Lisp programs
glossary.texi(,185) are calls to the Lisp function @code{defun}.  @xref{Defuns}.
glossary.texi(,186) 
glossary.texi(,187) @item @key{DEL}
glossary.texi(,188) The @key{DEL} character runs the command that deletes one character of
glossary.texi(,189) text.  @xref{Basic,DEL,Basic Editing}.
glossary.texi(,190) 
glossary.texi(,191) @item Deletion
glossary.texi(,192) Deleting text means erasing it without saving it.  Emacs deletes text
glossary.texi(,193) only when it is expected not to be worth saving (all whitespace, or
glossary.texi(,194) only one character).  The alternative is killing (q.v.@:).
glossary.texi(,195) @xref{Killing,Deletion}.
glossary.texi(,196) 
glossary.texi(,197) @item Deletion of Files
glossary.texi(,198) Deleting a file means removing it from the file system.
glossary.texi(,199) @xref{Misc File Ops}.
glossary.texi(,200) 
glossary.texi(,201) @item Deletion of Messages
glossary.texi(,202) Deleting a message means flagging it to be eliminated from your mail
glossary.texi(,203) file.  Until the mail file is expunged, you can undo this by undeleting
glossary.texi(,204) the message.
glossary.texi(,205) 
glossary.texi(,206) @item Deletion of Frames
glossary.texi(,207) When working under the multi-frame X-based version of XEmacs,
glossary.texi(,208) you can delete individual frames using the @b{Close} menu item from the
glossary.texi(,209) @b{File} menu.
glossary.texi(,210) 
glossary.texi(,211) @item Deletion of Windows
glossary.texi(,212) When you delete a subwindow of an Emacs frame, you eliminate it from
glossary.texi(,213) the frame.  Other windows expand to use up the space.  The deleted
glossary.texi(,214) window can never come back, but no actual text is lost.  @xref{Windows}.
glossary.texi(,215) 
glossary.texi(,216) @item Directory
glossary.texi(,217) Files in the Unix file system are grouped into file directories.
glossary.texi(,218) @xref{ListDir,,Directories}.
glossary.texi(,219) 
glossary.texi(,220) @item Dired
glossary.texi(,221) Dired is the Emacs facility that displays the contents of a file
glossary.texi(,222) directory and allows you to ``edit the directory'', performing
glossary.texi(,223) operations on the files in the directory.  @xref{Dired}.
glossary.texi(,224) 
glossary.texi(,225) @item Disabled Command
glossary.texi(,226) A disabled command is one that you may not run without special
glossary.texi(,227) confirmation.  Commands are usually disabled because they are
glossary.texi(,228) confusing for beginning users.  @xref{Disabling}.
glossary.texi(,229) 
glossary.texi(,230) @item Dribble File
glossary.texi(,231) A file into which Emacs writes all the characters that the user types
glossary.texi(,232) on the keyboard.  Dribble files are used to make a record for
glossary.texi(,233) debugging Emacs bugs.  Emacs does not make a dribble file unless you
glossary.texi(,234) tell it to.  @xref{Bugs}.
glossary.texi(,235) 
glossary.texi(,236) @item Echo Area
glossary.texi(,237) The area at the bottom of the Emacs frame which is used for echoing the
glossary.texi(,238) arguments to commands, for asking questions, and for printing brief
glossary.texi(,239) messages (including error messages).  @xref{Echo Area}.
glossary.texi(,240) 
glossary.texi(,241) @item Echoing
glossary.texi(,242) Echoing refers to acknowledging the receipt of commands by displaying them
glossary.texi(,243) (in the echo area).  Emacs never echoes single-character keys; longer
glossary.texi(,244) keys echo only if you pause while typing them.
glossary.texi(,245) 
glossary.texi(,246) @item Error
glossary.texi(,247) An error occurs when an Emacs command cannot execute in the current
glossary.texi(,248) circumstances.  When an error occurs, execution of the command stops
glossary.texi(,249) (unless the command has been programmed to do otherwise) and Emacs
glossary.texi(,250) reports the error by printing an error message (q.v.).  Type-ahead
glossary.texi(,251) is discarded.  Then Emacs is ready to read another editing command.
glossary.texi(,252) 
glossary.texi(,253) @item Error Messages
glossary.texi(,254) Error messages are single lines of output printed by Emacs when the
glossary.texi(,255) user asks for something impossible to do (such as killing text
glossary.texi(,256) forward when point is at the end of the buffer).  They appear in the
glossary.texi(,257) echo area, accompanied by a beep.
glossary.texi(,258) 
glossary.texi(,259) @item @key{ESC}
glossary.texi(,260) @key{ESC} is a character used as a prefix for typing Meta characters on
glossary.texi(,261) keyboards lacking a @key{META} key.  Unlike the @key{META} key (which,
glossary.texi(,262) like the @key{SHIFT} key, is held down while another character is
glossary.texi(,263) typed), the @key{ESC} key is pressed and released, and applies to the
glossary.texi(,264) next character typed.
glossary.texi(,265) 
glossary.texi(,266) @item Fill Prefix
glossary.texi(,267) The fill prefix is a string that Emacs enters at the beginning
glossary.texi(,268) of each line when it performs filling.  It is not regarded as part of the
glossary.texi(,269) text to be filled.  @xref{Filling}.
glossary.texi(,270) 
glossary.texi(,271) @item Filling
glossary.texi(,272) Filling text means moving text from line to line so that all the lines
glossary.texi(,273) are approximately the same length.  @xref{Filling}.
glossary.texi(,274) 
glossary.texi(,275) @item Frame
glossary.texi(,276) When running Emacs on a TTY terminal, ``frame'' means the terminal's
glossary.texi(,277) screen.  When running Emacs under X, you can have multiple frames,
glossary.texi(,278) each corresponding to a top-level X window and each looking like
glossary.texi(,279) the screen on a TTY.  Each frame contains one or more non-overlapping
glossary.texi(,280) Emacs windows (possibly with associated scrollbars, under X), an
glossary.texi(,281) echo area, and (under X) possibly a menubar, toolbar, and/or gutter.
glossary.texi(,282) 
glossary.texi(,283) @item Global
glossary.texi(,284) Global means `independent of the current environment; in effect
glossary.texi(,285) @*throughout Emacs'.  It is the opposite of local (q.v.@:).
glossary.texi(,286) Examples of the use of `global' appear below.
glossary.texi(,287) 
glossary.texi(,288) @item Global Abbrev
glossary.texi(,289) A global definition of an abbrev (q.v.@:) is effective in all major
glossary.texi(,290) modes that do not have local (q.v.@:) definitions for the same abbrev.
glossary.texi(,291) @xref{Abbrevs}.
glossary.texi(,292) 
glossary.texi(,293) @item Global Keymap
glossary.texi(,294) The global keymap (q.v.@:) contains key bindings that are in effect
glossary.texi(,295) unless local key bindings in a major mode's local
glossary.texi(,296) keymap (q.v.@:) override them.@xref{Keymaps}.
glossary.texi(,297) 
glossary.texi(,298) @item Global Substitution
glossary.texi(,299) Global substitution means replacing each occurrence of one string by
glossary.texi(,300) another string through a large amount of text.  @xref{Replace}.
glossary.texi(,301) 
glossary.texi(,302) @item Global Variable
glossary.texi(,303) The global value of a variable (q.v.@:) takes effect in all buffers
glossary.texi(,304) that do not have their own local (q.v.@:) values for the variable.
glossary.texi(,305) @xref{Variables}.
glossary.texi(,306) 
glossary.texi(,307) @item Graphic Character
glossary.texi(,308) Graphic characters are those assigned pictorial images rather than
glossary.texi(,309) just names.  All the non-Meta (q.v.@:) characters except for the
glossary.texi(,310) Control (q.v.@:) character are graphic characters.  These include
glossary.texi(,311) letters, digits, punctuation, and spaces; they do not include
glossary.texi(,312) @key{RET} or @key{ESC}.  In Emacs, typing a graphic character inserts
glossary.texi(,313) that character (in ordinary editing modes).  @xref{Basic,,Basic Editing}.
glossary.texi(,314) 
glossary.texi(,315) @item Grinding
glossary.texi(,316) Grinding means adjusting the indentation in a program to fit the
glossary.texi(,317) nesting structure.  @xref{Indentation,Grinding}.
glossary.texi(,318) 
glossary.texi(,319) @item Hardcopy
glossary.texi(,320) Hardcopy means printed output.  Emacs has commands for making printed
glossary.texi(,321) listings of text in Emacs buffers.  @xref{Hardcopy}.
glossary.texi(,322) 
glossary.texi(,323) @item @key{HELP}
glossary.texi(,324) You can type @key{HELP} at any time to ask what options you have, or
glossary.texi(,325) to ask what any command does.  @key{HELP} is really @kbd{Control-h}.
glossary.texi(,326) @xref{Help}.
glossary.texi(,327) 
glossary.texi(,328) @item Inbox
glossary.texi(,329) An inbox is a file in which mail is delivered by the operating system.
glossary.texi(,330) Some mail handlers transfers mail from inboxes to mail files (q.v.) in
glossary.texi(,331) which the mail is then stored permanently or until explicitly deleted.
glossary.texi(,332) 
glossary.texi(,333) @item Indentation
glossary.texi(,334) Indentation means blank space at the beginning of a line.  Most
glossary.texi(,335) programming languages have conventions for using indentation to
glossary.texi(,336) illuminate the structure of the program, and Emacs has special
glossary.texi(,337) features to help you set up the correct indentation.
glossary.texi(,338) @xref{Indentation}.
glossary.texi(,339) 
glossary.texi(,340) @item Insertion
glossary.texi(,341) Insertion means copying text into the buffer, either from the keyboard
glossary.texi(,342) or from some other place in Emacs.
glossary.texi(,343) 
glossary.texi(,344) @item Justification
glossary.texi(,345) Justification means adding extra spaces to lines of text to make them
glossary.texi(,346) come exactly to a specified width.  @xref{Filling,Justification}.
glossary.texi(,347) 
glossary.texi(,348) @item Keyboard Macros
glossary.texi(,349) Keyboard macros are a way of defining new Emacs commands from
glossary.texi(,350) sequences of existing ones, with no need to write a Lisp program.
glossary.texi(,351) @xref{Keyboard Macros}.
glossary.texi(,352) 
glossary.texi(,353) @item Key
glossary.texi(,354) A key is a sequence of characters that, when input to Emacs, specify
glossary.texi(,355) or begin to specify a single action for Emacs to perform.  That is,
glossary.texi(,356) the sequence is considered a single unit.  If the key is enough to
glossary.texi(,357) specify one action, it is a complete key (q.v.); if it is less than
glossary.texi(,358) enough, it is a prefix key (q.v.).  @xref{Keystrokes}.
glossary.texi(,359) 
glossary.texi(,360) @item Keymap
glossary.texi(,361) The keymap is the data structure that records the bindings (q.v.@:) of
glossary.texi(,362) keys to the commands that they run.  For example, the keymap binds the
glossary.texi(,363) character @kbd{C-n} to the command function @code{next-line}.
glossary.texi(,364) @xref{Keymaps}.
glossary.texi(,365) 
glossary.texi(,366) @item Kill Ring
glossary.texi(,367) The kill ring is the place where all text you have killed recently is saved.
glossary.texi(,368) You can re-insert any of the killed text still in the ring; this is
glossary.texi(,369) called yanking (q.v.@:).  @xref{Yanking}.
glossary.texi(,370) 
glossary.texi(,371) @item Killing
glossary.texi(,372) Killing means erasing text and saving it on the kill ring so it can be
glossary.texi(,373) yanked (q.v.@:) later.  Some other systems call this ``cutting.''
glossary.texi(,374) Most Emacs commands to erase text do killing, as opposed to deletion
glossary.texi(,375) (q.v.@:).  @xref{Killing}.
glossary.texi(,376) 
glossary.texi(,377) @item Killing Jobs
glossary.texi(,378) Killing a job (such as, an invocation of Emacs) means making it cease
glossary.texi(,379) to exist.  Any data within it, if not saved in a file, is lost.
glossary.texi(,380) @xref{Exiting}.
glossary.texi(,381) 
glossary.texi(,382) @item List
glossary.texi(,383) A list is, approximately, a text string beginning with an open
glossary.texi(,384) parenthesis and ending with the matching close parenthesis.  In C mode
glossary.texi(,385) and other non-Lisp modes, groupings surrounded by other kinds of matched
glossary.texi(,386) delimiters appropriate to the language, such as braces, are also
glossary.texi(,387) considered lists.  Emacs has special commands for many operations on
glossary.texi(,388) lists.  @xref{Lists}.
glossary.texi(,389) 
glossary.texi(,390) @item Local
glossary.texi(,391) Local means `in effect only in a particular context'; the relevant
glossary.texi(,392) kind of context is a particular function execution, a particular
glossary.texi(,393) buffer, or a particular major mode.  Local is the opposite of `global'
glossary.texi(,394) (q.v.@:).  Specific uses of `local' in Emacs terminology appear below.
glossary.texi(,395) 
glossary.texi(,396) @item Local Abbrev
glossary.texi(,397) A local abbrev definition is effective only if a particular major mode
glossary.texi(,398) is selected.  In that major mode, it overrides any global definition
glossary.texi(,399) for the same abbrev.  @xref{Abbrevs}.
glossary.texi(,400) 
glossary.texi(,401) @item Local Keymap
glossary.texi(,402) A local keymap is used in a particular major mode; the key bindings
glossary.texi(,403) (q.v.@:) in the current local keymap override global bindings of the
glossary.texi(,404) same keys.  @xref{Keymaps}.
glossary.texi(,405) 
glossary.texi(,406) @item Local Variable
glossary.texi(,407) A local value of a variable (q.v.@:) applies to only one buffer.
glossary.texi(,408) @xref{Locals}.
glossary.texi(,409) 
glossary.texi(,410) @item M-
glossary.texi(,411) @kbd{M-} in the name of a character is an abbreviation for @key{META},
glossary.texi(,412) one of the modifier keys that can accompany any character.
glossary.texi(,413) @xref{Keystrokes}.
glossary.texi(,414) 
glossary.texi(,415) @item M-C-
glossary.texi(,416) @samp{M-C-} in the name of a character is an abbreviation for
glossary.texi(,417) Control-Meta; it means the same thing as @samp{C-M-}.  If your
glossary.texi(,418) terminal lacks a real @key{META} key, you type a Control-Meta character by
glossary.texi(,419) typing @key{ESC} and then typing the corresponding Control character.
glossary.texi(,420) @xref{Keystrokes,C-M-}.
glossary.texi(,421) 
glossary.texi(,422) @item M-x
glossary.texi(,423) @kbd{M-x} is the key which is used to call an Emacs command by name.
glossary.texi(,424) You use it to call commands that are not bound to keys.
glossary.texi(,425) @xref{M-x}.
glossary.texi(,426) 
glossary.texi(,427) @item Mail
glossary.texi(,428) Mail means messages sent from one user to another through the computer
glossary.texi(,429) system, to be read at the recipient's convenience.  Emacs has commands for
glossary.texi(,430) composing and sending mail, and for reading and editing the mail you have
glossary.texi(,431) received.  @xref{Sending Mail}.
glossary.texi(,432) 
glossary.texi(,433) @item Major Mode
glossary.texi(,434) The major modes are a mutually exclusive set of options each of which
glossary.texi(,435) configures Emacs for editing a certain sort of text.  Ideally, each
glossary.texi(,436) programming language has its own major mode.  @xref{Major Modes}.
glossary.texi(,437) 
glossary.texi(,438) @item Mark
glossary.texi(,439) The mark points to a position in the text.  It specifies one end of the
glossary.texi(,440) region (q.v.@:), point being the other end.  Many commands operate on
glossary.texi(,441) the whole region, that is, all the text from point to the mark.
glossary.texi(,442) @xref{Mark}.
glossary.texi(,443) 
glossary.texi(,444) @item Mark Ring
glossary.texi(,445) The mark ring is used to hold several recent previous locations of the
glossary.texi(,446) mark, just in case you want to move back to them.  @xref{Mark Ring}.
glossary.texi(,447) 
glossary.texi(,448) @item Message
glossary.texi(,449) See `mail'.
glossary.texi(,450) 
glossary.texi(,451) @item Meta
glossary.texi(,452) Meta is the name of a modifier bit which a command character may have.
glossary.texi(,453) It is present in a character if the character is typed with the
glossary.texi(,454) @key{META} key held down.  Such characters are given names that start
glossary.texi(,455) with @kbd{Meta-}.  For example, @kbd{Meta-<} is typed by holding down
glossary.texi(,456) @key{META} and at the same time typing @kbd{<} (which itself is done,
glossary.texi(,457) on most terminals, by holding down @key{SHIFT} and typing @kbd{,}).
glossary.texi(,458) @xref{Keystrokes,Meta}.
glossary.texi(,459) 
glossary.texi(,460) @item Meta Character
glossary.texi(,461) A Meta character is one whose character code includes the Meta bit.
glossary.texi(,462) 
glossary.texi(,463) @item Minibuffer
glossary.texi(,464) The minibuffer is the window that Emacs displays inside the
glossary.texi(,465) echo area (q.v.@:) when it prompts you for arguments to commands.
glossary.texi(,466) @xref{Minibuffer}.
glossary.texi(,467) 
glossary.texi(,468) @item Minor Mode
glossary.texi(,469) A minor mode is an optional feature of Emacs which can be switched on
glossary.texi(,470) or off independent of the major mode.  Each minor mode has a
glossary.texi(,471) command to turn it on or off.  @xref{Minor Modes}.
glossary.texi(,472) 
glossary.texi(,473) @item Mode Line
glossary.texi(,474) The mode line is the line at the bottom of each text window (q.v.@:),
glossary.texi(,475) which gives status information on the buffer displayed in that window.
glossary.texi(,476) @xref{Mode Line}.
glossary.texi(,477) 
glossary.texi(,478) @item Modified Buffer
glossary.texi(,479) A buffer (q.v.@:) is modified if its text has been changed since the
glossary.texi(,480) last time the buffer was saved (or since it was created, if it
glossary.texi(,481) has never been saved).  @xref{Saving}.
glossary.texi(,482) 
glossary.texi(,483) @item Moving Text
glossary.texi(,484) Moving text means erasing it from one place and inserting it in
glossary.texi(,485) another.  This is done by killing (q.v.@:) and then yanking (q.v.@:).
glossary.texi(,486) @xref{Killing}.
glossary.texi(,487) 
glossary.texi(,488) @item Named Mark
glossary.texi(,489) A named mark is a register (q.v.@:) in its role of recording a
glossary.texi(,490) location in text so that you can move point to that location.
glossary.texi(,491) @xref{Registers}.
glossary.texi(,492) 
glossary.texi(,493) @item Narrowing
glossary.texi(,494) Narrowing means creating a restriction (q.v.@:) that limits editing in
glossary.texi(,495) the current buffer to only a part of the text in the buffer.  Text
glossary.texi(,496) outside that part is inaccessible to the user until the boundaries are
glossary.texi(,497) widened again, but it is still there, and saving the file saves the
glossary.texi(,498) invisible text.  @xref{Narrowing}.
glossary.texi(,499) 
glossary.texi(,500) @item Newline
glossary.texi(,501) @key{LFD} characters in the buffer terminate lines of text and are
glossary.texi(,502) called newlines.  @xref{Keystrokes,Newline}.
glossary.texi(,503) 
glossary.texi(,504) @item Numeric Argument
glossary.texi(,505) A numeric argument is a number, specified before a command, to change
glossary.texi(,506) the effect of the command.  Often the numeric argument serves as a
glossary.texi(,507) repeat count.  @xref{Arguments}.
glossary.texi(,508) 
glossary.texi(,509) @item Option
glossary.texi(,510) An option is a variable (q.v.@:) that allows you to customize
glossary.texi(,511) Emacs by giving it a new value.  @xref{Variables}.
glossary.texi(,512) 
glossary.texi(,513) @item Overwrite Mode
glossary.texi(,514) Overwrite mode is a minor mode.  When it is enabled, ordinary text
glossary.texi(,515) characters replace the existing text after point rather than pushing
glossary.texi(,516) it to the right.  @xref{Minor Modes}.
glossary.texi(,517) 
glossary.texi(,518) @item Page
glossary.texi(,519) A page is a unit of text, delimited by formfeed characters (ASCII
glossary.texi(,520) Control-L, code 014) coming at the beginning of a line.  Some Emacs
glossary.texi(,521) commands are provided for moving over and operating on pages.
glossary.texi(,522) @xref{Pages}.
glossary.texi(,523) 
glossary.texi(,524) @item Paragraphs
glossary.texi(,525) Paragraphs are the medium-size unit of English text.  There are
glossary.texi(,526) special Emacs commands for moving over and operating on paragraphs.
glossary.texi(,527) @xref{Paragraphs}.
glossary.texi(,528) 
glossary.texi(,529) @item Parsing
glossary.texi(,530) We say that Emacs parses words or expressions in the text being
glossary.texi(,531) edited.  Really, all it knows how to do is find the other end of a
glossary.texi(,532) word or expression.  @xref{Syntax}.
glossary.texi(,533) 
glossary.texi(,534) @item Point
glossary.texi(,535) Point is the place in the buffer at which insertion and deletion
glossary.texi(,536) occur.  Point is considered to be between two characters, not at one
glossary.texi(,537) character.  The terminal's cursor (q.v.@:) indicates the location of
glossary.texi(,538) point.  @xref{Basic,Point}.
glossary.texi(,539) 
glossary.texi(,540) @item Prefix Key
glossary.texi(,541) A prefix key is a key (q.v.@:) whose sole function is to introduce a
glossary.texi(,542) set of multi-character keys.  @kbd{Control-x} is an example of a prefix
glossary.texi(,543) key; any two-character sequence starting with @kbd{C-x} is also
glossary.texi(,544) a legitimate key.  @xref{Keystrokes}.
glossary.texi(,545) 
glossary.texi(,546) @item Prompt
glossary.texi(,547) A prompt is text printed to ask the user for input.  Printing a prompt
glossary.texi(,548) is called prompting.  Emacs prompts always appear in the echo area
glossary.texi(,549) (q.v.@:).  One kind of prompting happens when the minibuffer is used
glossary.texi(,550) to read an argument (@pxref{Minibuffer}); the echoing which happens
glossary.texi(,551) when you pause in the middle of typing a multi-character key is also a
glossary.texi(,552) kind of prompting (@pxref{Echo Area}).
glossary.texi(,553) 
glossary.texi(,554) @item Quitting
glossary.texi(,555) Quitting means cancelling a partially typed command or a running
glossary.texi(,556) command, using @kbd{C-g}.  @xref{Quitting}.
glossary.texi(,557) 
glossary.texi(,558) @item Quoting
glossary.texi(,559) Quoting means depriving a character of its usual special significance.
glossary.texi(,560) In Emacs this is usually done with @kbd{Control-q}.  What constitutes special
glossary.texi(,561) significance depends on the context and on convention.  For example,
glossary.texi(,562) an ``ordinary'' character as an Emacs command inserts itself; so in
glossary.texi(,563) this context, a special character is any character that does not
glossary.texi(,564) normally insert itself (such as @key{DEL}, for example), and quoting
glossary.texi(,565) it makes it insert itself as if it were not special.  Not all contexts
glossary.texi(,566) allow quoting.  @xref{Basic,Quoting,Basic Editing}.
glossary.texi(,567) 
glossary.texi(,568) @item Read-only Buffer
glossary.texi(,569) A read-only buffer is one whose text you are not allowed to change.
glossary.texi(,570) Normally Emacs makes buffers read-only when they contain text which
glossary.texi(,571) has a special significance to Emacs, such as Dired buffers.
glossary.texi(,572) Visiting a file that is write-protected also makes a read-only buffer.
glossary.texi(,573) @xref{Buffers}.
glossary.texi(,574) 
glossary.texi(,575) @item Recursive Editing Level
glossary.texi(,576) A recursive editing level is a state in which part of the execution of
glossary.texi(,577) a command involves asking the user to edit some text.  This text may
glossary.texi(,578) or may not be the same as the text to which the command was applied.
glossary.texi(,579) The mode line indicates recursive editing levels with square brackets
glossary.texi(,580) (@samp{[} and @samp{]}).  @xref{Recursive Edit}.
glossary.texi(,581) 
glossary.texi(,582) @item Redisplay
glossary.texi(,583) Redisplay is the process of correcting the image on the screen to
glossary.texi(,584) correspond to changes that have been made in the text being edited.
glossary.texi(,585) @xref{Frame,Redisplay}.
glossary.texi(,586) 
glossary.texi(,587) @item Regexp
glossary.texi(,588) See `regular expression'.
glossary.texi(,589) 
glossary.texi(,590) @item Region
glossary.texi(,591) The region is the text between point (q.v.@:) and the mark (q.v.@:).
glossary.texi(,592) Many commands operate on the text of the region.  @xref{Mark,Region}.
glossary.texi(,593) 
glossary.texi(,594) @item Registers
glossary.texi(,595) Registers are named slots in which text or buffer positions or
glossary.texi(,596) rectangles can be saved for later use.  @xref{Registers}.
glossary.texi(,597) 
glossary.texi(,598) @item Regular Expression
glossary.texi(,599) A regular expression is a pattern that can match various text strings;
glossary.texi(,600) for example, @samp{l[0-9]+} matches @samp{l} followed by one or more
glossary.texi(,601) digits.  @xref{Regexps}.
glossary.texi(,602) 
glossary.texi(,603) @item Replacement
glossary.texi(,604) See `global substitution'.
glossary.texi(,605) 
glossary.texi(,606) @item Restriction
glossary.texi(,607) A buffer's restriction is the amount of text, at the beginning or the
glossary.texi(,608) end of the buffer, that is temporarily invisible and inaccessible.
glossary.texi(,609) Giving a buffer a nonzero amount of restriction is called narrowing
glossary.texi(,610) (q.v.).  @xref{Narrowing}.
glossary.texi(,611) 
glossary.texi(,612) @item @key{RET}
glossary.texi(,613) @key{RET} is the character than runs the command to insert a
glossary.texi(,614) newline into the text.  It is also used to terminate most arguments
glossary.texi(,615) read in the minibuffer (q.v.@:).  @xref{Keystrokes,Return}.
glossary.texi(,616) 
glossary.texi(,617) @item Saving
glossary.texi(,618) Saving a buffer means copying its text into the file that was visited
glossary.texi(,619) (q.v.@:) in that buffer.  To actually change a file you have edited in
glossary.texi(,620) Emacs, you have to save it.  @xref{Saving}.
glossary.texi(,621) 
glossary.texi(,622) @item Scrolling
glossary.texi(,623) Scrolling means shifting the text in the Emacs window to make a
glossary.texi(,624) different part of the buffer visible.  @xref{Display,Scrolling}.
glossary.texi(,625) 
glossary.texi(,626) @item Searching
glossary.texi(,627) Searching means moving point to the next occurrence of a specified
glossary.texi(,628) string.  @xref{Search}.
glossary.texi(,629) 
glossary.texi(,630) @item Selecting
glossary.texi(,631) Selecting a buffer means making it the current (q.v.@:) buffer.
glossary.texi(,632) @xref{Buffers,Selecting}.
glossary.texi(,633) 
glossary.texi(,634) @item Self-documentation
glossary.texi(,635) Self-documentation is the feature of Emacs which can tell you what any
glossary.texi(,636) command does, or can give you a list of all commands related to a topic
glossary.texi(,637) you specify.  You ask for self-documentation with the help character,
glossary.texi(,638) @kbd{C-h}.  @xref{Help}.
glossary.texi(,639) 
glossary.texi(,640) @item Sentences
glossary.texi(,641) Emacs has commands for moving by or killing by sentences.
glossary.texi(,642) @xref{Sentences}.
glossary.texi(,643) 
glossary.texi(,644) @item Sexp
glossary.texi(,645) An sexp (short for `s-expression,' itself short for `symbolic
glossary.texi(,646) expression') is the basic syntactic unit of Lisp
glossary.texi(,647) in its textual form: either a list, or Lisp atom.  Many Emacs commands
glossary.texi(,648) operate on sexps.  The term `sexp' is generalized to languages other
glossary.texi(,649) than Lisp to mean a syntactically recognizable expression.
glossary.texi(,650) @xref{Lists,Sexps}.
glossary.texi(,651) 
glossary.texi(,652) @item Simultaneous Editing
glossary.texi(,653) Simultaneous editing means two users modifying the same file at once.
glossary.texi(,654) If simultaneous editing is not detected, you may lose your
glossary.texi(,655) work.  Emacs detects all cases of simultaneous editing and warns the
glossary.texi(,656) user to investigate them.  @xref{Interlocking,,Simultaneous Editing}.
glossary.texi(,657) 
glossary.texi(,658) @item String
glossary.texi(,659) A string is a kind of Lisp data object which contains a sequence of
glossary.texi(,660) characters.  Many Emacs variables are intended to have strings as
glossary.texi(,661) values.  The Lisp syntax for a string consists of the characters in
glossary.texi(,662) the string with a @samp{"} before and another @samp{"} after. Write a
glossary.texi(,663) @samp{"} that is part of the string as @samp{\"} and a
glossary.texi(,664) @samp{\} that is part of the string as @samp{\\}.  You can include all
glossary.texi(,665) other characters, including newline, just by writing
glossary.texi(,666) them inside the string. You can also include escape sequences as in C, such as
glossary.texi(,667) @samp{\n} for newline or @samp{\241} using an octal character code.
glossary.texi(,668) 
glossary.texi(,669) @item String Substitution
glossary.texi(,670) See `global substitution'.
glossary.texi(,671) 
glossary.texi(,672) @item Syntax Table
glossary.texi(,673) The syntax table tells Emacs which characters are part of a word,
glossary.texi(,674) which characters balance each other like parentheses, etc.
glossary.texi(,675) @xref{Syntax}.
glossary.texi(,676) 
glossary.texi(,677) @item Tag Table
glossary.texi(,678) A tag table is a file that serves as an index to the function
glossary.texi(,679) definitions in one or more other files.  @xref{Tags}.
glossary.texi(,680) 
glossary.texi(,681) @item Termscript File
glossary.texi(,682) A termscript file contains a record of all characters Emacs sent to
glossary.texi(,683) the terminal.  It is used for tracking down bugs in Emacs redisplay.
glossary.texi(,684) Emacs does not make a termscript file unless explicitly instructed to do
glossary.texi(,685) so.
glossary.texi(,686) @xref{Bugs}.
glossary.texi(,687) 
glossary.texi(,688) @item Text
glossary.texi(,689) Text has two meanings (@pxref{Text}):
glossary.texi(,690) 
glossary.texi(,691) @itemize @bullet
glossary.texi(,692) @item
glossary.texi(,693) Data consisting of a sequence of characters, as opposed to binary
glossary.texi(,694) numbers, images, graphics commands, executable programs, and the like.
glossary.texi(,695) The contents of an Emacs buffer are always text in this sense.
glossary.texi(,696) @item
glossary.texi(,697) Data consisting of written human language, as opposed to programs,
glossary.texi(,698) or something that follows the stylistic conventions of human language.
glossary.texi(,699) @end itemize
glossary.texi(,700) 
glossary.texi(,701) @item Top Level
glossary.texi(,702) Top level is the normal state of Emacs, in which you are editing the
glossary.texi(,703) text of the file you have visited.  You are at top level whenever you
glossary.texi(,704) are not in a recursive editing level (q.v.@:) or the minibuffer
glossary.texi(,705) (q.v.@:), and not in the middle of a command.  You can get back to top
glossary.texi(,706) level by aborting (q.v.@:) and quitting (q.v.@:).  @xref{Quitting}.
glossary.texi(,707) 
glossary.texi(,708) @item Transposition
glossary.texi(,709) Transposing two units of text means putting each one into the place
glossary.texi(,710) formerly occupied by the other.  There are Emacs commands to transpose
glossary.texi(,711) two adjacent characters, words, sexps (q.v.@:), or lines
glossary.texi(,712) (@pxref{Transpose}).
glossary.texi(,713) 
glossary.texi(,714) @item Truncation
glossary.texi(,715) Truncating text lines in the display means leaving out any text on a
glossary.texi(,716) line that does not fit within the right margin of the window
glossary.texi(,717) displaying it.  See also `continuation line'.
glossary.texi(,718) @xref{Basic,Truncation,Basic Editing}.
glossary.texi(,719) 
glossary.texi(,720) @item Undoing
glossary.texi(,721) Undoing means making your previous editing go in reverse, bringing
glossary.texi(,722) back the text that existed earlier in the editing session.
glossary.texi(,723) @xref{Undo}.
glossary.texi(,724) 
glossary.texi(,725) @item Variable
glossary.texi(,726) A variable is Lisp object that can store an arbitrary value.  Emacs uses
glossary.texi(,727) some variables for internal purposes, and has others (known as `options'
glossary.texi(,728) (q.v.@:)) you can set to control the behavior of Emacs.  The variables
glossary.texi(,729) used in Emacs that you are likely to be interested in are listed in the
glossary.texi(,730) Variables Index of this manual.  @xref{Variables}, for information on
glossary.texi(,731) variables.
glossary.texi(,732) 
glossary.texi(,733) @item Visiting
glossary.texi(,734) Visiting a file means loading its contents into a buffer (q.v.@:)
glossary.texi(,735) where they can be edited.  @xref{Visiting}.
glossary.texi(,736) 
glossary.texi(,737) @item Whitespace
glossary.texi(,738) Whitespace is any run of consecutive formatting characters (spaces,
glossary.texi(,739) tabs, newlines, and backspaces).
glossary.texi(,740) 
glossary.texi(,741) @item Widening
glossary.texi(,742) Widening is removing any restriction (q.v.@:) on the current buffer;
glossary.texi(,743) it is the opposite of narrowing (q.v.@:).  @xref{Narrowing}.
glossary.texi(,744) 
glossary.texi(,745) @item Window
glossary.texi(,746) Emacs divides the frame into one or more windows, each of which can
glossary.texi(,747) display the contents of one buffer (q.v.@:) at any time.
glossary.texi(,748) @xref{Frame}, for basic information on how Emacs uses the frame.
glossary.texi(,749) @xref{Windows}, for commands to control the use of windows. Note that if
glossary.texi(,750) you are running Emacs under X, terminology can be confusing: Each Emacs
glossary.texi(,751) frame occupies a separate X window and can, in turn, be divided into
glossary.texi(,752) different subwindows.
glossary.texi(,753) 
glossary.texi(,754) @item Word Abbrev
glossary.texi(,755) Synonymous with `abbrev'.
glossary.texi(,756) 
glossary.texi(,757) @item Word Search
glossary.texi(,758) Word search is searching for a sequence of words, considering the
glossary.texi(,759) punctuation between them as insignificant.  @xref{Word Search}.
glossary.texi(,760) 
glossary.texi(,761) @item Yanking
glossary.texi(,762) Yanking means reinserting text previously killed.  It can be used to
glossary.texi(,763) undo a mistaken kill, or for copying or moving text.  Some other
glossary.texi(,764) systems call this ``pasting''.  @xref{Yanking}.
glossary.texi(,765) @end table
gnu.texi(,1) 
gnu.texi(,2) @node Manifesto, Key Index, Glossary, Top
gnu.texi(,3) @unnumbered The GNU Manifesto
gnu.texi(,4) 
gnu.texi(,5) @unnumberedsec What's GNU?  GNU's Not Unix!
gnu.texi(,6) 
gnu.texi(,7) GNU, which stands for GNU's Not Unix, is the name for the complete
gnu.texi(,8) Unix-compatible software system which I am writing so that I can give it
gnu.texi(,9) away free to everyone who can use it.  Several other volunteers are helping
gnu.texi(,10) me.  Contributions of time, money, programs, and equipment are greatly
gnu.texi(,11) needed.
gnu.texi(,12) 
gnu.texi(,13) So far we have an Emacs text editor with Lisp for writing editor commands,
gnu.texi(,14) a source level debugger, a yacc-compatible parser generator, a linker, and
gnu.texi(,15) around 35 utilities.  A shell (command interpreter) is nearly completed.  A
gnu.texi(,16) new portable optimizing C compiler has compiled itself and may be released
gnu.texi(,17) this year.  An initial kernel exists, but many more features are needed to
gnu.texi(,18) emulate Unix.  When the kernel and compiler are finished, it will be
gnu.texi(,19) possible to distribute a GNU system suitable for program development.  We
gnu.texi(,20) will use @TeX{} as our text formatter, but an nroff is being worked on.  We
gnu.texi(,21) will use the free, portable X window system as well.  After this we will
gnu.texi(,22) add a portable Common Lisp, an Empire game, a spreadsheet, and hundreds of
gnu.texi(,23) other things, plus online documentation.  We hope to supply, eventually,
gnu.texi(,24) everything useful that normally comes with a Unix system, and more.
gnu.texi(,25) 
gnu.texi(,26) GNU will be able to run Unix programs, but will not be identical to Unix.
gnu.texi(,27) We will make all improvements that are convenient, based on our experience
gnu.texi(,28) with other operating systems.  In particular, we plan to have longer
gnu.texi(,29) filenames, file version numbers, a crashproof file system, filename
gnu.texi(,30) completion perhaps, terminal-independent display support, and perhaps
gnu.texi(,31) eventually a Lisp-based window system through which several Lisp programs
gnu.texi(,32) and ordinary Unix programs can share a screen.  Both C and Lisp will be
gnu.texi(,33) available as system programming languages.  We will try to support UUCP,
gnu.texi(,34) MIT Chaosnet, and Internet protocols for communication.
gnu.texi(,35) 
gnu.texi(,36) GNU is aimed initially at machines in the 68000/16000 class with virtual
gnu.texi(,37) memory, because they are the easiest machines to make it run on.  The extra
gnu.texi(,38) effort to make it run on smaller machines will be left to someone who wants
gnu.texi(,39) to use it on them.
gnu.texi(,40) 
gnu.texi(,41) To avoid horrible confusion, please pronounce the `G' in the word `GNU'
gnu.texi(,42) when it is the name of this project.
gnu.texi(,43) 
gnu.texi(,44) @page
gnu.texi(,45) @unnumberedsec Why I Must Write GNU
gnu.texi(,46) 
gnu.texi(,47) I consider that the golden rule requires that if I like a program I must
gnu.texi(,48) share it with other people who like it.  Software sellers want to divide
gnu.texi(,49) the users and conquer them, making each user agree not to share with
gnu.texi(,50) others.  I refuse to break solidarity with other users in this way.  I
gnu.texi(,51) cannot in good conscience sign a nondisclosure agreement or a software
gnu.texi(,52) license agreement.  For years I worked within the Artificial Intelligence
gnu.texi(,53) Lab to resist such tendencies and other inhospitalities, but eventually
gnu.texi(,54) they had gone too far: I could not remain in an institution where such
gnu.texi(,55) things are done for me against my will.
gnu.texi(,56) 
gnu.texi(,57) So that I can continue to use computers without dishonor, I have decided to
gnu.texi(,58) put together a sufficient body of free software so that I will be able to
gnu.texi(,59) get along without any software that is not free.  I have resigned from the
gnu.texi(,60) AI lab to deny MIT any legal excuse to prevent me from giving GNU away.
gnu.texi(,61) 
gnu.texi(,62) @unnumberedsec Why GNU Will Be Compatible With Unix
gnu.texi(,63) 
gnu.texi(,64) Unix is not my ideal system, but it is not too bad.  The essential features
gnu.texi(,65) of Unix seem to be good ones, and I think I can fill in what Unix lacks
gnu.texi(,66) without spoiling them.  And a system compatible with Unix would be
gnu.texi(,67) convenient for many other people to adopt.
gnu.texi(,68) 
gnu.texi(,69) @unnumberedsec How GNU Will Be Available
gnu.texi(,70) 
gnu.texi(,71) GNU is not in the public domain.  Everyone will be permitted to modify and
gnu.texi(,72) redistribute GNU, but no distributor will be allowed to restrict its
gnu.texi(,73) further redistribution.  That is to say, proprietary modifications will not
gnu.texi(,74) be allowed.  I want to make sure that all versions of GNU remain free.
gnu.texi(,75) 
gnu.texi(,76) @unnumberedsec Why Many Other Programmers Want to Help
gnu.texi(,77) 
gnu.texi(,78) I have found many other programmers who are excited about GNU and want to
gnu.texi(,79) help.
gnu.texi(,80) 
gnu.texi(,81) Many programmers are unhappy about the commercialization of system
gnu.texi(,82) software.  It may enable them to make more money, but it requires them to
gnu.texi(,83) feel in conflict with other programmers in general rather than feel as
gnu.texi(,84) comrades.  The fundamental act of friendship among programmers is the
gnu.texi(,85) sharing of programs; marketing arrangements now typically used essentially
gnu.texi(,86) forbid programmers to treat others as friends.  The purchaser of software
gnu.texi(,87) must choose between friendship and obeying the law.  Naturally, many decide
gnu.texi(,88) that friendship is more important.  But those who believe in law often do
gnu.texi(,89) not feel at ease with either choice.  They become cynical and think that
gnu.texi(,90) programming is just a way of making money.
gnu.texi(,91) 
gnu.texi(,92) By working on and using GNU rather than proprietary programs, we can be
gnu.texi(,93) hospitable to everyone and obey the law.  In addition, GNU serves as an
gnu.texi(,94) example to inspire and a banner to rally others to join us in sharing.
gnu.texi(,95) This can give us a feeling of harmony which is impossible if we use
gnu.texi(,96) software that is not free.  For about half the programmers I talk to, this
gnu.texi(,97) is an important happiness that money cannot replace.
gnu.texi(,98) 
gnu.texi(,99) @unnumberedsec How You Can Contribute
gnu.texi(,100) 
gnu.texi(,101) I am asking computer manufacturers for donations of machines and money.
gnu.texi(,102) I'm asking individuals for donations of programs and work.
gnu.texi(,103) 
gnu.texi(,104) One consequence you can expect if you donate machines is that GNU will run
gnu.texi(,105) on them at an early date.  The machines should be complete, ready-to-use
gnu.texi(,106) systems, approved for use in a residential area, and not in need of
gnu.texi(,107) sophisticated cooling or power.
gnu.texi(,108) 
gnu.texi(,109) I have found very many programmers eager to contribute part-time work for
gnu.texi(,110) GNU.  For most projects, such part-time distributed work would be very hard
gnu.texi(,111) to coordinate; the independently-written parts would not work together.
gnu.texi(,112) But for the particular task of replacing Unix, this problem is absent.  A
gnu.texi(,113) complete Unix system contains hundreds of utility programs, each of which
gnu.texi(,114) is documented separately.  Most interface specifications are fixed by Unix
gnu.texi(,115) compatibility.  If each contributor can write a compatible replacement for
gnu.texi(,116) a single Unix utility, and make it work properly in place of the original
gnu.texi(,117) on a Unix system, then these utilities will work right when put together.
gnu.texi(,118) Even allowing for Murphy to create a few unexpected problems, assembling
gnu.texi(,119) these components will be a feasible task.  (The kernel will require closer
gnu.texi(,120) communication and will be worked on by a small, tight group.)
gnu.texi(,121) 
gnu.texi(,122) If I get donations of money, I may be able to hire a few people full or
gnu.texi(,123) part time.  The salary won't be high by programmers' standards, but I'm
gnu.texi(,124) looking for people for whom building community spirit is as important as
gnu.texi(,125) making money.  I view this as a way of enabling dedicated people to devote
gnu.texi(,126) their full energies to working on GNU by sparing them the need to make a
gnu.texi(,127) living in another way.
gnu.texi(,128) 
gnu.texi(,129) @unnumberedsec Why All Computer Users Will Benefit
gnu.texi(,130) 
gnu.texi(,131) Once GNU is written, everyone will be able to obtain good system software
gnu.texi(,132) free, just like air.
gnu.texi(,133) 
gnu.texi(,134) This means much more than just saving everyone the price of a Unix license.
gnu.texi(,135) It means that much wasteful duplication of system programming effort will
gnu.texi(,136) be avoided.  This effort can go instead into advancing the state of the
gnu.texi(,137) art.
gnu.texi(,138) 
gnu.texi(,139) Complete system sources will be available to everyone.  As a result, a user
gnu.texi(,140) who needs changes in the system will always be free to make them himself,
gnu.texi(,141) or hire any available programmer or company to make them for him.  Users
gnu.texi(,142) will no longer be at the mercy of one programmer or company which owns the
gnu.texi(,143) sources and is in sole position to make changes.
gnu.texi(,144) 
gnu.texi(,145) Schools will be able to provide a much more educational environment by
gnu.texi(,146) encouraging all students to study and improve the system code.  Harvard's
gnu.texi(,147) computer lab used to have the policy that no program could be installed on
gnu.texi(,148) the system if its sources were not on public display, and upheld it by
gnu.texi(,149) actually refusing to install certain programs.  I was very much inspired by
gnu.texi(,150) this.
gnu.texi(,151) 
gnu.texi(,152) Finally, the overhead of considering who owns the system software and what
gnu.texi(,153) one is or is not entitled to do with it will be lifted.
gnu.texi(,154) 
gnu.texi(,155) Arrangements to make people pay for using a program, including licensing of
gnu.texi(,156) copies, always incur a tremendous cost to society through the cumbersome
gnu.texi(,157) mechanisms necessary to figure out how much (that is, which programs) a
gnu.texi(,158) person must pay for.  And only a police state can force everyone to obey
gnu.texi(,159) them.  Consider a space station where air must be manufactured at great
gnu.texi(,160) cost: charging each breather per liter of air may be fair, but wearing the
gnu.texi(,161) metered gas mask all day and all night is intolerable even if everyone can
gnu.texi(,162) afford to pay the air bill.  And the TV cameras everywhere to see if you
gnu.texi(,163) ever take the mask off are outrageous.  It's better to support the air
gnu.texi(,164) plant with a head tax and chuck the masks.
gnu.texi(,165) 
gnu.texi(,166) Copying all or parts of a program is as natural to a programmer as
gnu.texi(,167) breathing, and as productive.  It ought to be as free.
gnu.texi(,168) 
gnu.texi(,169) @unnumberedsec Some Easily Rebutted Objections to GNU's Goals
gnu.texi(,170) 
gnu.texi(,171) @quotation
gnu.texi(,172) ``Nobody will use it if it is free, because that means they can't rely
gnu.texi(,173) on any support.''
gnu.texi(,174) 
gnu.texi(,175) ``You have to charge for the program to pay for providing the
gnu.texi(,176) support.''
gnu.texi(,177) @end quotation
gnu.texi(,178) 
gnu.texi(,179) If people would rather pay for GNU plus service than get GNU free without
gnu.texi(,180) service, a company to provide just service to people who have obtained GNU
gnu.texi(,181) free ought to be profitable.
gnu.texi(,182) 
gnu.texi(,183) We must distinguish between support in the form of real programming work
gnu.texi(,184) and mere handholding.  The former is something one cannot rely on from a
gnu.texi(,185) software vendor.  If your problem is not shared by enough people, the
gnu.texi(,186) vendor will tell you to get lost.
gnu.texi(,187) 
gnu.texi(,188) If your business needs to be able to rely on support, the only way is to
gnu.texi(,189) have all the necessary sources and tools.  Then you can hire any available
gnu.texi(,190) person to fix your problem; you are not at the mercy of any individual.
gnu.texi(,191) With Unix, the price of sources puts this out of consideration for most
gnu.texi(,192) businesses.  With GNU this will be easy.  It is still possible for there to
gnu.texi(,193) be no available competent person, but this problem cannot be blamed on
gnu.texi(,194) distribution arrangements.  GNU does not eliminate all the world's problems,
gnu.texi(,195) only some of them.
gnu.texi(,196) 
gnu.texi(,197) Meanwhile, the users who know nothing about computers need handholding:
gnu.texi(,198) doing things for them which they could easily do themselves but don't know
gnu.texi(,199) how.
gnu.texi(,200) 
gnu.texi(,201) Such services could be provided by companies that sell just hand-holding
gnu.texi(,202) and repair service.  If it is true that users would rather spend money and
gnu.texi(,203) get a product with service, they will also be willing to buy the service
gnu.texi(,204) having got the product free.  The service companies will compete in quality
gnu.texi(,205) and price; users will not be tied to any particular one.  Meanwhile, those
gnu.texi(,206) of us who don't need the service should be able to use the program without
gnu.texi(,207) paying for the service.
gnu.texi(,208) 
gnu.texi(,209) @quotation
gnu.texi(,210) ``You cannot reach many people without advertising,
gnu.texi(,211) and you must charge for the program to support that.''
gnu.texi(,212) 
gnu.texi(,213) ``It's no use advertising a program people can get free.''
gnu.texi(,214) @end quotation
gnu.texi(,215) 
gnu.texi(,216) There are various forms of free or very cheap publicity that can be used to
gnu.texi(,217) inform numbers of computer users about something like GNU.  But it may be
gnu.texi(,218) true that one can reach more microcomputer users with advertising.  If this
gnu.texi(,219) is really so, a business which advertises the service of copying and
gnu.texi(,220) mailing GNU for a fee ought to be successful enough to pay for its
gnu.texi(,221) advertising and more.  This way, only the users who benefit from the
gnu.texi(,222) advertising pay for it.
gnu.texi(,223) 
gnu.texi(,224) On the other hand, if many people get GNU from their friends, and such
gnu.texi(,225) companies don't succeed, this will show that advertising was not really
gnu.texi(,226) necessary to spread GNU.  Why is it that free market advocates don't want
gnu.texi(,227) to let the free market decide this?
gnu.texi(,228) @page
gnu.texi(,229) @quotation
gnu.texi(,230) ``My company needs a proprietary operating system
gnu.texi(,231) to get a competitive edge.''
gnu.texi(,232) @end quotation
gnu.texi(,233) 
gnu.texi(,234) GNU will remove operating system software from the realm of competition.
gnu.texi(,235) You will not be able to get an edge in this area, but neither will your
gnu.texi(,236) competitors be able to get an edge over you.  You and they will compete in
gnu.texi(,237) other areas, while benefitting mutually in this one.  If your business is
gnu.texi(,238) selling an operating system, you will not like GNU, but that's tough on
gnu.texi(,239) you.  If your business is something else, GNU can save you from being
gnu.texi(,240) pushed into the expensive business of selling operating systems.
gnu.texi(,241) 
gnu.texi(,242) I would like to see GNU development supported by gifts from many
gnu.texi(,243) manufacturers and users, reducing the cost to each.
gnu.texi(,244) 
gnu.texi(,245) @quotation
gnu.texi(,246) ``Don't programmers deserve a reward for their creativity?''
gnu.texi(,247) @end quotation
gnu.texi(,248) 
gnu.texi(,249) If anything deserves a reward, it is social contribution.  Creativity can
gnu.texi(,250) be a social contribution, but only in so far as society is free to use the
gnu.texi(,251) results.  If programmers deserve to be rewarded for creating innovative
gnu.texi(,252) programs, by the same token they deserve to be punished if they restrict
gnu.texi(,253) the use of these programs.
gnu.texi(,254) 
gnu.texi(,255) @quotation
gnu.texi(,256) ``Shouldn't a programmer be able to ask for a reward for his creativity?''
gnu.texi(,257) @end quotation
gnu.texi(,258) 
gnu.texi(,259) There is nothing wrong with wanting pay for work, or seeking to maximize
gnu.texi(,260) one's income, as long as one does not use means that are destructive.  But
gnu.texi(,261) the means customary in the field of software today are based on
gnu.texi(,262) destruction.
gnu.texi(,263) 
gnu.texi(,264) Extracting money from users of a program by restricting their use of it is
gnu.texi(,265) destructive because the restrictions reduce the amount and the ways that
gnu.texi(,266) the program can be used.  This reduces the amount of wealth that humanity
gnu.texi(,267) derives from the program.  When there is a deliberate choice to restrict,
gnu.texi(,268) the harmful consequences are deliberate destruction.
gnu.texi(,269) 
gnu.texi(,270) The reason a good citizen does not use such destructive means to become
gnu.texi(,271) wealthier is that, if everyone did so, we would all become poorer from the
gnu.texi(,272) mutual destructiveness.  This is Kantian ethics; or, the Golden Rule.
gnu.texi(,273) Since I do not like the consequences that result if everyone hoards
gnu.texi(,274) information, I am required to consider it wrong for one to do so.
gnu.texi(,275) Specifically, the desire to be rewarded for one's creativity does not
gnu.texi(,276) justify depriving the world in general of all or part of that creativity.
gnu.texi(,277) 
gnu.texi(,278) @quotation
gnu.texi(,279) ``Won't programmers starve?''
gnu.texi(,280) @end quotation
gnu.texi(,281) 
gnu.texi(,282) I could answer that nobody is forced to be a programmer.  Most of us cannot
gnu.texi(,283) manage to get any money for standing on the street and making faces.  But
gnu.texi(,284) we are not, as a result, condemned to spend our lives standing on the
gnu.texi(,285) street making faces, and starving.  We do something else.
gnu.texi(,286) 
gnu.texi(,287) But that is the wrong answer because it accepts the questioner's implicit
gnu.texi(,288) assumption: that without ownership of software, programmers cannot possibly
gnu.texi(,289) be paid a cent.  Supposedly it is all or nothing.
gnu.texi(,290) 
gnu.texi(,291) The real reason programmers will not starve is that it will still be
gnu.texi(,292) possible for them to get paid for programming; just not paid as much as
gnu.texi(,293) now.
gnu.texi(,294) 
gnu.texi(,295) Restricting copying is not the only basis for business in software.  It is
gnu.texi(,296) the most common basis because it brings in the most money.  If it were
gnu.texi(,297) prohibited, or rejected by the customer, software business would move to
gnu.texi(,298) other bases of organization which are now used less often.  There are
gnu.texi(,299) always numerous ways to organize any kind of business.
gnu.texi(,300) 
gnu.texi(,301) Probably programming will not be as lucrative on the new basis as it is
gnu.texi(,302) now.  But that is not an argument against the change.  It is not considered
gnu.texi(,303) an injustice that sales clerks make the salaries that they now do.  If
gnu.texi(,304) programmers made the same, that would not be an injustice either.  (In
gnu.texi(,305) practice they would still make considerably more than that.)
gnu.texi(,306) 
gnu.texi(,307) @quotation
gnu.texi(,308) ``Don't people have a right to control how their creativity is used?''
gnu.texi(,309) @end quotation
gnu.texi(,310) 
gnu.texi(,311) ``Control over the use of one's ideas'' really constitutes control over
gnu.texi(,312) other people's lives; and it is usually used to make their lives more
gnu.texi(,313) difficult.
gnu.texi(,314) 
gnu.texi(,315) People who have studied the issue of intellectual property rights carefully
gnu.texi(,316) (such as lawyers) say that there is no intrinsic right to intellectual
gnu.texi(,317) property.  The kinds of supposed intellectual property rights that the
gnu.texi(,318) government recognizes were created by specific acts of legislation for
gnu.texi(,319) specific purposes.
gnu.texi(,320) 
gnu.texi(,321) For example, the patent system was established to encourage inventors to
gnu.texi(,322) disclose the details of their inventions.  Its purpose was to help society
gnu.texi(,323) rather than to help inventors.  At the time, the life span of 17 years for
gnu.texi(,324) a patent was short compared with the rate of advance of the state of the
gnu.texi(,325) art.  Since patents are an issue only among manufacturers, for whom the
gnu.texi(,326) cost and effort of a license agreement are small compared with setting up
gnu.texi(,327) production, the patents often do not do much harm.  They do not obstruct
gnu.texi(,328) most individuals who use patented products.
gnu.texi(,329) 
gnu.texi(,330) The idea of copyright did not exist in ancient times, when authors
gnu.texi(,331) frequently copied other authors at length in works of non-fiction.  This
gnu.texi(,332) practice was useful, and is the only way many authors' works have survived
gnu.texi(,333) even in part.  The copyright system was created expressly for the purpose
gnu.texi(,334) of encouraging authorship.  In the domain for which it was
gnu.texi(,335) invented---books, which could be copied economically only on a printing
gnu.texi(,336) press---it did little harm, and did not obstruct most of the individuals
gnu.texi(,337) who read the books.
gnu.texi(,338) 
gnu.texi(,339) All intellectual property rights are just licenses granted by society
gnu.texi(,340) because it was thought, rightly or wrongly, that society as a whole would
gnu.texi(,341) benefit by granting them.  But in any particular situation, we have to ask:
gnu.texi(,342) are we really better off granting such license?  What kind of act are we
gnu.texi(,343) licensing a person to do?
gnu.texi(,344) 
gnu.texi(,345) The case of programs today is very different from that of books a hundred
gnu.texi(,346) years ago.  The fact that the easiest way to copy a program is from one
gnu.texi(,347) neighbor to another, the fact that a program has both source code and
gnu.texi(,348) object code which are distinct, and the fact that a program is used rather
gnu.texi(,349) than read and enjoyed, combine to create a situation in which a person who
gnu.texi(,350) enforces a copyright is harming society as a whole both materially and
gnu.texi(,351) spiritually; in which a person should not do so regardless of whether the
gnu.texi(,352) law enables him to.
gnu.texi(,353) 
gnu.texi(,354) @quotation
gnu.texi(,355) ``Competition makes things get done better.''
gnu.texi(,356) @end quotation
gnu.texi(,357) 
gnu.texi(,358) The paradigm of competition is a race: by rewarding the winner, we
gnu.texi(,359) encourage everyone to run faster.  When capitalism really works this way,
gnu.texi(,360) it does a good job; but its defenders are wrong in assuming it always works
gnu.texi(,361) this way.  If the runners forget why the reward is offered and become
gnu.texi(,362) intent on winning, no matter how, they may find other strategies---such as,
gnu.texi(,363) attacking other runners.  If the runners get into a fist fight, they will
gnu.texi(,364) all finish late.
gnu.texi(,365) 
gnu.texi(,366) Proprietary and secret software is the moral equivalent of runners in a
gnu.texi(,367) fist fight.  Sad to say, the only referee we've got does not seem to
gnu.texi(,368) object to fights; he just regulates them (``For every ten yards you run,
gnu.texi(,369) you can fire one shot'').  He really ought to break them up, and penalize
gnu.texi(,370) runners for even trying to fight.
gnu.texi(,371) 
gnu.texi(,372) @quotation
gnu.texi(,373) ``Won't everyone stop programming without a monetary incentive?''
gnu.texi(,374) @end quotation
gnu.texi(,375) 
gnu.texi(,376) Actually, many people will program with absolutely no monetary incentive.
gnu.texi(,377) Programming has an irresistible fascination for some people, usually the
gnu.texi(,378) people who are best at it.  There is no shortage of professional musicians
gnu.texi(,379) who keep at it even though they have no hope of making a living that way.
gnu.texi(,380) 
gnu.texi(,381) But really this question, though commonly asked, is not appropriate to the
gnu.texi(,382) situation.  Pay for programmers will not disappear, only become less.  So
gnu.texi(,383) the right question is, will anyone program with a reduced monetary
gnu.texi(,384) incentive?  My experience shows that they will.
gnu.texi(,385) 
gnu.texi(,386) For more than ten years, many of the world's best programmers worked at the
gnu.texi(,387) Artificial Intelligence Lab for far less money than they could have had
gnu.texi(,388) anywhere else.  They got many kinds of non-monetary rewards: fame and
gnu.texi(,389) appreciation, for example.  And creativity is also fun, a reward in itself.
gnu.texi(,390) @page
gnu.texi(,391) Then most of them left when offered a chance to do the same interesting
gnu.texi(,392) work for a lot of money.
gnu.texi(,393) 
gnu.texi(,394) What the facts show is that people will program for reasons other than
gnu.texi(,395) riches; but if given a chance to make a lot of money as well, they will
gnu.texi(,396) come to expect and demand it.  Low-paying organizations do poorly in
gnu.texi(,397) competition with high-paying ones, but they do not have to do badly if the
gnu.texi(,398) high-paying ones are banned.
gnu.texi(,399) 
gnu.texi(,400) @quotation
gnu.texi(,401) ``We need the programmers desperately.  If they demand that we
gnu.texi(,402) stop helping our neighbors, we have to obey.''
gnu.texi(,403) @end quotation
gnu.texi(,404) 
gnu.texi(,405) You're never so desperate that you have to obey this sort of demand.
gnu.texi(,406) Remember: millions for defense, but not a cent for tribute!
gnu.texi(,407) 
gnu.texi(,408) @quotation
gnu.texi(,409) ``Programmers need to make a living somehow.''
gnu.texi(,410) @end quotation
gnu.texi(,411) 
gnu.texi(,412) In the short run, this is true.  However, there are plenty of ways that
gnu.texi(,413) programmers could make a living without selling the right to use a program.
gnu.texi(,414) This way is customary now because it brings programmers and businessmen the
gnu.texi(,415) most money, not because it is the only way to make a living.  It is easy to
gnu.texi(,416) find other ways if you want to find them.  Here are a number of examples.
gnu.texi(,417) 
gnu.texi(,418) A manufacturer introducing a new computer will pay for the porting of
gnu.texi(,419) operating systems onto the new hardware.
gnu.texi(,420) 
gnu.texi(,421) The sale of teaching, hand-holding, and maintenance services could also
gnu.texi(,422) employ programmers.
gnu.texi(,423) 
gnu.texi(,424) People with new ideas could distribute programs as freeware and ask for
gnu.texi(,425) donations from satisfied users or sell hand-holding services.  I have
gnu.texi(,426) met people who are already working this way successfully.
gnu.texi(,427) 
gnu.texi(,428) Users with related needs can form users' groups and pay dues.  A group
gnu.texi(,429) would contract with programming companies to write programs that the
gnu.texi(,430) group's members would like to use.
gnu.texi(,431) 
gnu.texi(,432) All sorts of development can be funded with a Software Tax:
gnu.texi(,433) 
gnu.texi(,434) @quotation
gnu.texi(,435) Suppose everyone who buys a computer has to pay a certain percent of
gnu.texi(,436) the price as a software tax.  The government gives this to
gnu.texi(,437) an agency like the NSF to spend on software development.
gnu.texi(,438) 
gnu.texi(,439) But if the computer buyer makes a donation to software development
gnu.texi(,440) himself, he can take a credit against the tax.  He can donate to
gnu.texi(,441) the project of his own choosing---often, chosen because he hopes to
gnu.texi(,442) use the results when
gnu.texi(,443) @page 
gnu.texi(,444) it is done.  He can take a credit for any amount
gnu.texi(,445) of donation up to the total tax he had to pay.
gnu.texi(,446) 
gnu.texi(,447) The total tax rate could be decided by a vote of the payers of
gnu.texi(,448) the tax, weighted according to the amount they will be taxed on.
gnu.texi(,449) 
gnu.texi(,450) The consequences:
gnu.texi(,451) 
gnu.texi(,452) @itemize @bullet
gnu.texi(,453) @item
gnu.texi(,454) The computer-using community supports software development.
gnu.texi(,455) @item
gnu.texi(,456) This community decides what level of support is needed.
gnu.texi(,457) @item
gnu.texi(,458) Users who care which projects their share is spent on
gnu.texi(,459) can choose this for themselves.
gnu.texi(,460) @end itemize
gnu.texi(,461) @end quotation
gnu.texi(,462) 
gnu.texi(,463) In the long run, making programs free is a step toward the post-scarcity
gnu.texi(,464) world, where nobody will have to work very hard just to make a living.
gnu.texi(,465) People will be free to devote themselves to activities that are fun, such
gnu.texi(,466) as programming, after spending the necessary ten hours a week on required
gnu.texi(,467) tasks such as legislation, family counseling, robot repair, and asteroid
gnu.texi(,468) prospecting.  There will be no need to be able to make a living from
gnu.texi(,469) programming.
gnu.texi(,470) 
gnu.texi(,471) We have already greatly reduced the amount of work that the whole society
gnu.texi(,472) must do for its actual productivity, but only a little of this has
gnu.texi(,473) translated itself into leisure for workers because much nonproductive
gnu.texi(,474) activity is required to accompany productive activity.  The main causes of
gnu.texi(,475) this are bureaucracy and isometric struggles against competition.  Free
gnu.texi(,476) software will greatly reduce these drains in the area of software
gnu.texi(,477) production.  We must do this, in order for technical gains in productivity
gnu.texi(,478) to translate into less work for us.
xemacs.texi(,1103) 
xemacs.texi(,1104) @node Key Index, Command Index, Manifesto, Top
xemacs.texi(,1105) @unnumbered Key (Character) Index
xemacs.texi(,1106) @printindex ky
xemacs.texi(,1107) 
xemacs.texi(,1108) @node Command Index, Variable Index, Key Index, Top
xemacs.texi(,1109) @unnumbered Command and Function Index
xemacs.texi(,1110) @printindex fn
xemacs.texi(,1111) 
xemacs.texi(,1112) @node Variable Index, Concept Index, Command Index, Top
xemacs.texi(,1113) @unnumbered Variable Index
xemacs.texi(,1114) @printindex vr
xemacs.texi(,1115) 
xemacs.texi(,1116) @node Concept Index, Frame, Variable Index, Top
xemacs.texi(,1117) @unnumbered Concept Index
xemacs.texi(,1118) @printindex cp
xemacs.texi(,1119) 
xemacs.texi(,1120) @summarycontents
xemacs.texi(,1121) @contents
xemacs.texi(,1122) @bye
