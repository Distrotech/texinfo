# -*-perl-*-
######################################################################
# File: texi2html.init
#
# Sets default values for command-line arguments and for various customizable
# procedures
#
# A copy of this file is pasted into the beginning of texi2html by
# 'make texi2html'
#
# Copy this file and make changes to it, if you like.
# Afterwards, load it with command-line option -init_file <your_init_file>
#
# $Id: texi2html.init,v 1.33 2003-07-23 12:04:44 pertusus Exp $

######################################################################
# stuff which can also be set by command-line options
#
#
# Note: values set here, overwrite values set by the command-line
# options before -init_file and might still be overwritten by
# command-line arguments following the -init_file option
#



$DEBUG = 0;
# APA: Add SystemLiteral to identify the canonical DTD.
# [Definition:] The SystemLiteral is called the entity's system
# identifier. It is a URI, which may be used to retrieve the entity.
# See http://www.xml.com/axml/target.html#NT-ExternalID
$DOCTYPE = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html401/loose.dtd">';

$FRAMESET_DOCTYPE = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html401/frameset.dtd">';

$TEST = 0;

$DUMP_TEXI = 0;

# -expand
# if set to "tex" (or, "info") expand @iftex and @tex (or, @ifinfo) sections
# else, neither expand @iftex, @tex, nor @ifinfo sections
@EXPAND = ("info");

# - glossary
# If set, uses section named `Footnotes' for glossary.
$USE_GLOSSARY = 0;

# -invisible
# $INVISIBLE_MARK is the text used to create invisible destination
# anchors for index links (you can for instance use the invisible.xbm
# file shipped with this program). This is a workaround for a known
# bug of many WWW browsers, including netscape.
# For me, it works fine without it -- on the contrary: if there, it
# inserts space between headers and start of text (obachman 3/99)
$INVISIBLE_MARK = '';
# $INVISIBLE_MARK = '&#160;';

# -iso
# if set, ISO8859 characters are used for special symbols (like copyright, etc)
$USE_ISO = 0;

# -I
# list directories where @include files are searched for (besides the
# directory of the doc file) additional '-I' args add to this list
# APA: Don't implicitely search ., to conform with the docs!
# my @INCLUDE_DIRS = (".");
@INCLUDE_DIRS = ();

# -top_file
# uses file of this name for top-level file
# extension is manipulated appropriately, if necessary.
# If empty, <basename of document>.html is used.
# Typically, you would set this to "index.html".
$TOP_FILE = '';

# -toc_file
# uses file of this name for table of contents.  File
# extension is manipulated appropriately, if necessary.
# If empty, <basename of document>_toc.html is used.
$TOC_FILE = '';

# -frames
# if set, output two additional files which use HTML 4.0 "frames".
$FRAMES = 0;

# -menu | -nomenu
# if set, show the Texinfo menus
$SHOW_MENU = 1;

# -number | -nonumber
# if set, number sections and show section names and numbers in references
# and menus
$NUMBER_SECTIONS = 1;

# -use-nodes
# if set the nodes are used as sectionning elements
$USE_NODES = 0;

# -node-files
# if set produce one file per node for cross manual references
$NODE_FILES = 0;

# -split section|chapter|node|none
# if set to 'section' (resp. 'chapter') create one html file per section
# (resp. chapter), if set to 'node' create one html file per per node or 
# sectionning element; separate pages for Top, ToC, Overview, Index,
# Glossary, About.
# Otherwise, create a monolithic html file that contains the whole document.
#$SPLIT = 'section';
$SPLIT = '';

# -sec_nav|-nosec_nav
# if set, then navigation panels are printed at the beginning of each section
# and, possibly at the end (depending on whether or not there were more than
# $WORDS_IN_PAGE  words on page
# This is most useful if you do not want to have section navigation
# on -split chapter
$SECTION_NAVIGATION = 1;

# -separated-footnotes
# if set footnotes are in a separated page
$SEPARATED_FOOTNOTES = 1;

# -subdir
# If set, then put result files into the specified directory.
# If not set, then result files are put into the current directory.
#$SUBDIR = 'html';
$SUBDIR = '';

# -short_extn
# If this is set, then all HTML files will have extension ".htm" instead of
# ".html". This is helpful when shipping the document to DOS-based systems.
$SHORTEXTN = 0;

# -prefix
# Set the output file prefix, prepended to all .html, .gif and .pl files.
# By default, this is the basename of the document
$PREFIX = '';

# -o filename
# If set, generate monolithic document output html into $filename
$OUT = '';

# -short_ref
#if set cross-references are given without section numbers
$SHORT_REF = '';

# -idx_sum
# if value is set, then for each @prinindex $what
# $docu_name_$what.idx is created which contains lines of the form
# $key\t$ref sorted alphabetically (case matters)
$IDX_SUMMARY = 0;

# -def_table
# Use a table construction for @def .... stuff instead
# New Option: 27.07.2000 Karl Heinz Marbaise
$DEF_TABLE = 0;


# -verbose
# if set, chatter about what we are doing
$VERBOSE = '';

# -lang
# For page titles use $Texi2HTML::I18n::WORDS->{$T2H_LANG}->{...} as title.
# To add a new language, supply list of titles (see $Texi2HTML::I18n::WORDS).
# and use ISO 639 language codes (see e.g. perl module Locale-Codes-1.02
# for  definitions)
# Default's to 'en' if not set or no @documentlanguage is specified
$LANG = 'en';

# -html-xref-prefix
# base directory for external manuals
$EXTERNAL_DIR = '../';

# -l2h
# if set, uses latex2html for generation of math content
$L2H = '';

######################
# The following options are only relevant if $L2H is set
#
# -l2h_l2h
# name/location of latex2html program
$L2H_L2H = "latex2html";

# -l2h_skip
# If set, skips actual call to latex2html: tries to reuse previously generated
# content, instead.
$L2H_SKIP = '';

# -l2h_tmp
# If set, l2h uses the specified directory for temporary files.  The path
# leading to this directory may not contain a dot (i.e., a ".");
# otherwise, l2h will fail.
$L2H_TMP = '';
 
# -l2h-file
# If set, l2h uses the file as latex2html init file
$L2H_FILE = 'l2h.init';

# if set, cleans intermediate files (they all have the prefix $doc_l2h_)
# of l2h
$L2H_CLEAN = 1;

# html version for latex2html
$L2H_HTML_VERSION = "4.0";

##############################################################################
#
# The following can only be set in the init file
#
##############################################################################

# if set, and NUMBER_SECTIONS is set, then use node names in menu
# entries, instead of section names
$NODE_NAME_IN_MENU = 0;

# if set and menu entry equals menu descr, then do not print menu descr.
# Likewise, if node name equals entry name, do not print entry name.
$AVOID_MENU_REDUNDANCY = 1;

# if set, center @image by default
# otherwise, do not center by default
$CENTER_IMAGE = 1;

# used as identation for block enclosing command @example, etc
# If not empty, must be enclosed in <td></td>
$EXAMPLE_INDENT_CELL = '<td>&nbsp;</td>';

# same as above, only for @small
$SMALL_EXAMPLE_INDENT_CELL = '<td>&nbsp;</td>';

# font size for @small
$SMALL_FONT_SIZE = '-1';

# horizontal rules
$SMALL_RULE = '<hr size="1">';
$DEFAULT_RULE = '<hr>';
$MIDDLE_RULE = '<hr size="2">';
$BIG_RULE = '<hr size="6">';

# if non-empty, and no @..heading appeared in Top node, then
# use this as header for top node/section, otherwise use value of
# @settitle or @shorttitle (in that order)
$TOP_HEADING = '';

# if set, use this chapter for 'Index' button, else
# use first chapter whose name matches 'index' (case insensitive)
$INDEX_CHAPTER = '';

# if set and $SPLIT is set, then split index pages at the next letter
# after they have more than that many entries
$SPLIT_INDEX = 100;

# symbol put at the beginning of nodes entry in menu (and optionnaly of 
# unnumbered in menus, see next variable)
$MENU_SYMBOL = '*';

# extension for nodes files when T2H_NODE_FILES is true
$NODE_FILE_EXTENSION = "html";	    

# file used for Top node when T2H_NODE_FILES is true
$TOP_NODE_FILE = "index";

# if true put a $MENU_SYMBOL before unnumbered in menus
$UNNUMBERED_SYMBOL_IN_MENU = 0;

# this controls the pre style for menus
$MENU_PRE_STYLE = 'font-family: serif';

# This controls the ul style for toc
$TOC_LIST_STYLE = 'list-style: none';
$TOC_LIST_ATTRIBUTE = ' class="toc"';

# This lines are inserted before and after the shortcontents 
$BEFORE_STOC_LINES = "<div class=\"shortcontents\">\n";
$AFTER_STOC_LINES = "</div>\n";

# This lines are inserted before and after the contents 
$BEFORE_TOC_LINES = "<div class=\"contents\">\n";
$AFTER_TOC_LINES = "</div>\n";

# if set (e.g., to index.html) replace hrefs to this file
# (i.e., to index.html) by ./
$HREF_DIR_INSTEAD_FILE = '';

# text inserted after <body ...>
$AFTER_BODY_OPEN = '';

# text inserted before </body>, this will be automatically inside <p></p>
$PRE_BODY_CLOSE = '';

# this is added inside <head></head> after <title> and some <meta name>
# stuff, it can be used for eg. <style>, <script>, <meta> etc. tags.
$EXTRA_HEAD = '';

# Specifies the minimum page length required before a navigation panel
# is placed at the bottom of a page (the default is that of latex2html)
# THIS_WORDS_IN_PAGE holds number of words of current page
$WORDS_IN_PAGE = 300;

# if this is set, then a vertical navigation panel is used
$VERTICAL_HEAD_NAVIGATION = 0;

# specify in this array which "buttons" should appear in which order
# in the navigation panel for sections; use ' ' for empty buttons (space)
@SECTION_BUTTONS =
    (
     'Back', 'Forward', ' ', 'FastBack', 'Up', 'FastForward',
     ' ', ' ', ' ', ' ',
     'Top', 'Contents', 'Index', 'About',
    );

# buttons for misc stuff
@MISC_BUTTONS = ('Top', 'Contents', 'Index', 'About');

# buttons for chapter file footers
# (and headers but only if SECTION_NAVIGATION is false)
@CHAPTER_BUTTONS =
    (
     'FastBack', 'FastForward', ' ',
     ' ', ' ', ' ', ' ',
     'Top', 'Contents', 'Index', 'About',
    );

# buttons for section file footers
@SECTION_FOOTER_BUTTONS =
    (
     'Back', 'Forward', ' ', 'FastBack', 'Up', 'FastForward'
    );

$ICONS = 0;

# insert here name of icon images for buttons
# Icons are used, if $ICONS and resp. value are set
%ACTIVE_ICONS =
    (
     'Top',         '',
     'Contents',    '',
     'Overview',    '',
     'Index',       '',
     'Back',        '',
     'FastBack',    '',
     'Prev',        '',
     'Up',          '',
     'Next',        '',
     'NodeUp',      '',
     'NodeNext',    '',
     'NodePrev',    '',
     'Following',   '',
     'Forward',     '',
     'FastForward', '',
     'About' ,      '',
     'First',       '',
     'Last',        '',
     ' ',           ''
    );

# insert here name of icon images for these, if button is inactive
%PASSIVE_ICONS =
    (
     'Top',         '',
     'Contents',    '',
     'Overview',    '',
     'Index',       '',
     'Back',        '',
     'FastBack',    '',
     'Prev',        '',
     'Up',          '',
     'Next',        '',
     'NodeUp',      '',
     'NodeNext',    '',
     'NodePrev',    '',
     'Following',   '',
     'Forward',     '',
     'FastForward', '',
     'About',       '',
     'First',       '',
     'Last',        '',
    );

# Names of text as alternative for icons
%NAVIGATION_TEXT =
    (
     'Top',         'Top',
     'Contents',    'Contents',
     'Overview',    'Overview',
     'Index',       'Index',
     ' ',           ' &nbsp; ',
     'Back',        ' &lt; ',
     'FastBack',    ' &lt;&lt; ',
     'Prev',        'Prev',
     'Up',          ' Up ',
     'Next',        'Next',
     'NodeUp',      'node up',
     'NodeNext',    'next node',
     'NodePrev',    'previous node',
     'Following',   'following node',
     'Forward',     ' &gt; ',
     'FastForward', ' &gt;&gt; ',
     'About',       ' ? ',
     'First',       ' |&lt; ',
     'Last',        ' &gt;| '
    );

%BUTTONS_GOTO =
    (
     'Top',         'cover (top) of document',
     'Contents',    'table of contents',
     'Overview',    'short table of contents',
     'Index',       'concept index',
     'Back',        'previous section in reading order',
     'FastBack',    'beginning of this chapter or previous chapter',
     'Prev',        'previous section on same level',
     'Up',          'up section',
     'Next',        'next section on same level',
     'NodeUp',      'up node',
     'NodeNext',    'next node',
     'NodePrev',    'previous node',
     'Following',   'node following in node reading order',
     'Forward',     'next section in reading order',
     'FastForward', 'next chapter',
     'About' ,      'about (this page)',
     'First',       'first section in reading order',
     'Last',        'last section in reading order',
    );

#######################################################################
#
# Values guessed if not set here
#
#######################################################################

# this is used in footer
$ADDRESS = undef;


# Set the default body text, inserted between <body ... >
$BODYTEXT = undef;

$set_body_text    = \&t2h_default_set_body_text;
# Set the default body text, inserted between <body ... >
sub t2h_default_set_body_text()
{
    $BODYTEXT = 'lang="' . $LANG . '" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000"' unless (defined($BODYTEXT));
}

########################################################################
# Control of Page layout:
# You can make changes of the Page layout at two levels:
# 1.) For small changes, it is often enough to change the value of
#     some global string/hash/array variables
# 2.) For larger changes, reimplement one of the T2H_DEFAULT_<fnc>* routines,
#     give them another name, and assign them to the respective
#     $<fnc> variable.

# As a general interface, the hashes Texi2HTML::HREF, Texi2HTML::NAME, Texi2HTML::NODE, Texi2HTML::NO_TEXI hold
# href, html-name, node-name, name after removal of texi commands of
# This     -- current section (resp. html page)
# Top      -- top page ($T2H_TOP_FILE)
# Contents -- Table of contents
# Overview -- Short table of contents
# Index    -- Index page
# About    -- page which explain "navigation buttons"
# First    -- first node
# Last     -- last node
#
# Whether or not the following hash values are set, depends on the context
# (all values are w.r.t. 'This' section)
# Next        -- next node of texinfo
# Prev        -- previous node of texinfo
# NodeUp      -- up node of texinfo
# Following   -- following node in node reading order, taking menu into account
# Forward     -- next node in reading order
# Back        -- previous node in reading order
# Up          -- parent given by sectionning commands
# FastForward -- if leave node, up and next, else next node
# FastBackward-- if leave node, up and prev, else prev node
#
# Furthermore, the following global variabels are set:
# $Texi2HTML::THISDOC{title}          -- title as set by @setttile
# $Texi2HTML::THISDOC{title_no_texi}  -- title without texi (without html elements)
# $Texi2HTML::THISDOC{fulltitle}      -- full title as set by @title...
# $Texi2HTML::THISDOC{subtitle}       -- subtitle as set by @subtitle
# $Texi2HTML::THISDOC{author}         -- author as set by @author
# $Texi2HTML::THISDOC{copying}        -- text of @copying and @end copying in comment
#
# $Texi2HTML::THISDOC{program}          -- name and version of texi2html
# $Texi2HTML::THISDOC{program_homepage} -- homepage for texi2html
# $Texi2HTML::THISDOC{program_authors}  -- authors of texi2html
# $Texi2HTML::THISDOC{today}            -- date formatted with pretty_date
#
# and pointer to arrays of lines which need to be printed by main::print_lines
# $Texi2HTML::OVERVIEW      -- lines of short table of contents
# $Texi2HTML::TOC           -- lines of table of contents
# $T2H_TOP           -- lines of Top texinfo node
# $Texi2HTML::THIS_SECTION  -- lines of 'This' section
# $Texi2HTML::THIS_HEADER   -- lines preceding navigation panel of 'This' section
# $Texi2HTML::STOC_LINES    -- lines of short table of contents
# $Texi2HTML::TOC_LINES     -- lines of table of contents

#
# There are the following subs which control the layout:
#
$print_section            = \&T2H_DEFAULT_print_section;
$print_Top_header         = \&T2H_DEFAULT_print_Top_header;
$print_Top_footer	      = \&T2H_DEFAULT_print_Top_footer;
$print_Top		      = \&T2H_DEFAULT_print_Top;
$print_Toc		      = \&T2H_DEFAULT_print_Toc;
$print_Overview	      = \&T2H_DEFAULT_print_Overview;
$print_Footnotes	      = \&T2H_DEFAULT_print_Footnotes;
$print_About	      = \&T2H_DEFAULT_print_About;
$print_misc_header	      = \&T2H_DEFAULT_print_misc_header;
$print_misc_footer	      = \&T2H_DEFAULT_print_misc_footer;
$print_misc		      = \&T2H_DEFAULT_print_misc;
$print_section_footer     = \&T2H_DEFAULT_print_section_footer;
$print_chapter_header     = \&T2H_DEFAULT_print_chapter_header;
$print_chapter_footer     = \&T2H_DEFAULT_print_chapter_footer;
$print_page_head	      = \&T2H_DEFAULT_print_page_head;
$print_page_foot	      = \&T2H_DEFAULT_print_page_foot;
$print_head_navigation    = \&T2H_DEFAULT_print_head_navigation;
$print_foot_navigation    = \&T2H_DEFAULT_print_foot_navigation;
$button_icon_img	      = \&T2H_DEFAULT_button_icon_img;
$print_navigation	      = \&T2H_DEFAULT_print_navigation;
$about_body		      = \&T2H_DEFAULT_about_body;
$print_frame              = \&T2H_DEFAULT_print_frame;
$print_toc_frame          = \&T2H_DEFAULT_print_toc_frame;
$toc_body                 = \&T2H_DEFAULT_toc_body;
$css_lines                 = \&T2H_DEFAULT_css_lines;
$print_redirection_page   = \&T2H_DEFAULT_print_redirection_page;

########################################################################
# Layout for html for every sections
#
sub T2H_DEFAULT_print_section
{
    my $fh = shift;
    my $buttons = \@SECTION_BUTTONS;
    if ($SECTION_NAVIGATION)
    {
        &$print_head_navigation($fh, $buttons);
    }
    else
    {
        main::print_lines($fh, $Texi2HTML::THIS_HEADER);
    }
    my $nw = main::print_lines($fh); 
    if (defined $SPLIT
        and (($SPLIT eq 'node') && $SECTION_NAVIGATION))
    {
        &$print_foot_navigation($fh, $buttons, $nw);
    }
    else
    {
        print $fh "$BIG_RULE\n";
    }
}

###################################################################
# Layout of top-page I recommend that you use @ifnothtml, @ifhtml,
# @html within the Top texinfo node to specify content of top-level
# page.
#
# If you enclose everything in @ifnothtml, then title, subtitle,
# author and overview is printed
# Texi2HTML::HREF of Next, Prev, Up, Forward, Back are not defined
# if $T2H_SPLIT then Top page is in its own html file
sub T2H_DEFAULT_print_Top_header
{
    my $fh = shift;
    my $buttons = shift;
    &$print_page_head($fh, $buttons) if $SPLIT;
    &$print_head_navigation($fh, $buttons);
}
sub T2H_DEFAULT_print_Top_footer
{
    &$print_foot_navigation(@_);
    &$print_page_foot(@_) if $SPLIT;
}
sub T2H_DEFAULT_print_Top
{
    my $fh = shift;
    my $has_top_heading = shift;

    # for redefining navigation buttons use:
    # my $buttons = [...];
    # as it is, 'Top', 'Contents', 'Index', 'About' are printed
    my $buttons = \@MISC_BUTTONS;
    &$print_Top_header($fh, $buttons);
    if ($Texi2HTML::THIS_SECTION)
    {
        # if top-level node has content, then print it with extra header
        print $fh "<h1>$Texi2HTML::NAME{Top}</h1>\n"
            unless ($has_top_heading);
        main::print_lines($fh, $Texi2HTML::THIS_SECTION)
    }
    else
    {
        # top-level node is fully enclosed in @ifnothtml
        # print fulltitle, subtitle, author, Overview
        print $fh
            "<div align=\"center\">\n<h1>",
                join("</h1>\n<h1>", split(/\n/,  $Texi2HTML::THISDOC{fulltitle})),
                    "</h1>\n";
        print $fh "<h2>$Texi2HTML::THISDOC{subtitle}</h2>\n"
          if $Texi2HTML::THISDOC{subtitle};
        print $fh "$Texi2HTML::THISDOC{author}\n" if $Texi2HTML::THISDOC{author};
        print $fh <<EOT;
</div>
$DEFAULT_RULE
<p></p>
<h2> Overview: </h2>
<blockquote>
EOT
        main::print_lines($fh, $Texi2HTML::OVERVIEW);
        print $fh "</blockquote>\n";
    }
    &$print_Top_footer($fh, $buttons);
}

###################################################################
# Layout of Toc, Overview, and Footnotes pages
# By default, we use "normal" layout
# Texi2HTML::HREF of Next, Prev, Up, Forward, Back, etc are not defined
# use: my $buttons = [...] to redefine navigation buttons
sub T2H_DEFAULT_print_Toc
{
    return &$print_misc(@_);
}
sub T2H_DEFAULT_print_Overview
{
    return &$print_misc(@_);
}
sub T2H_DEFAULT_print_Footnotes
{
    return &$print_misc(@_);
}
sub T2H_DEFAULT_print_About
{
    return &$print_misc(@_);
}

sub T2H_DEFAULT_print_misc_header
{
    my $fh = shift;
    my $buttons = shift;
    &$print_page_head($fh, $buttons) if $SPLIT;
    &$print_head_navigation($fh, $buttons);
}
sub T2H_DEFAULT_print_misc_footer
{
    &$print_foot_navigation(@_);
    &$print_page_foot(@_) if $SPLIT;
}
sub T2H_DEFAULT_print_misc
{
    my $fh = shift;
    my $buttons = \@MISC_BUTTONS;
    &$print_misc_header($fh, $buttons);
    print $fh "<h1>$Texi2HTML::NAME{This}</h1>\n";
    main::print_lines($fh);
    &$print_misc_footer($fh, $buttons);
}
##################################################################
# section_footer is only called if SPLIT eq 'section'
# section_footer: after print_section of last section, before print_page_foot
#

sub T2H_DEFAULT_print_section_footer
{
   my $fh = shift;
   if ($SECTION_NAVIGATION)
   {
       my $buttons = \@SECTION_FOOTER_BUTTONS;
       &$print_navigation($fh, $buttons);
   }
}

###################################################################
# chapter_header and chapter_footer are only called if
# SPLIT eq 'chapter'
# chapter_header: after print_page_head, before print_section
# chapter_footer: after print_section of last section, before print_page_foot
#
# If you want to get rid of navigation stuff after each section,
# redefine print_section such that it does not call print_navigation,
# and put print_navigation into print_chapter_header
sub T2H_DEFAULT_print_chapter_header
{
    # nothing to do there, by default
    if (! $SECTION_NAVIGATION)
    {
        my $fh = shift;
        my $buttons = \@CHAPTER_BUTTONS;
        &$print_navigation($fh, $buttons);
        print $fh "\n$MIDDLE_RULE\n";
    }
}

sub T2H_DEFAULT_print_chapter_footer
{
    my $fh = shift;
    my $buttons = \@CHAPTER_BUTTONS;
    &$print_navigation($fh, $buttons);
}

###################################################################
# Layout of standard header and footer
#

sub T2H_DEFAULT_print_page_head
{
    my $fh = shift;
    my $longtitle = "$Texi2HTML::THISDOC{'title_no_texi'}";
    $longtitle .= ": $Texi2HTML::NO_TEXI{'This'}" if exists $Texi2HTML::NO_TEXI{'This'};
    print $fh <<EOT;
$DOCTYPE
<html>
$Texi2HTML::THISDOC{'copying'}<!-- Created on $Texi2HTML::THISDOC{today} by $Texi2HTML::THISDOC{program} -->
<!--
$Texi2HTML::THISDOC{program_authors}
-->
<head>
<title>$longtitle</title>

<meta name="description" content="$longtitle">
<meta name="keywords" content="$longtitle">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="$Texi2HTML::THISDOC{program}">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
$CSS_LINES
$EXTRA_HEAD
</head>

<body $BODYTEXT>
$AFTER_BODY_OPEN
EOT
}

sub T2H_DEFAULT_print_page_foot
{
    my $fh = shift;
    print $fh <<EOT;
<p>
 <font size="-1">
  This document was generated $ADDRESS
  using <a href="$Texi2HTML::THISDOC{program_homepage}"><i>$Texi2HTML::THISDOC{program}</i></a>.
 </font>
 <br>
$PRE_BODY_CLOSE
</p>
</body>
</html>
EOT
}

###################################################################
# Layout of navigation panel

sub T2H_DEFAULT_print_head_navigation
{
    my $fh = shift;
    my $buttons = shift;
    if ($VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
<table border="0" cellpadding="0" cellspacing="0">
<tr valign="top">
<td align="left">
EOT
    }
    main::print_lines($fh, $Texi2HTML::THIS_HEADER);
    &$print_navigation($fh, $buttons, $VERTICAL_HEAD_NAVIGATION);
    if ($VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
</td>
<td align="left">
EOT
    }
    elsif (defined $SPLIT
           and ($SPLIT eq 'node'))
    {
        print $fh "$SMALL_RULE\n";
    }
}

sub T2H_DEFAULT_print_foot_navigation
{
    my $fh = shift;
    my $buttons = shift;
    my $nwords = shift;
    if ($VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
</td>
</tr>
</table>
EOT
    }
    print $fh "$SMALL_RULE\n";
    &$print_navigation($fh, $buttons) if (defined $nwords
                                    and $nwords >= $WORDS_IN_PAGE)
}

######################################################################
# navigation panel
#
# how to create IMG tag
sub T2H_DEFAULT_button_icon_img
{
    my $button = shift;
    my $icon = shift;
    my $name = shift;
    return '' if (!defined($icon));
    if (defined($name) && $name)
    {
        $name = ": $name";
    }
    else
    {
        $name = '';
    }
    $button = "" if (!defined ($button));
    return qq{<img src="$icon" border="0" alt="$button$name" align="middle">};
}

sub T2H_DEFAULT_print_navigation
{
    my $fh = shift;
    my $buttons = shift;
    my $vertical = shift;
    my $spacing = 1;
    print $fh '<table cellpadding="', $spacing, '" cellspacing="', $spacing,
      "\" border=\"0\">\n";

    print $fh "<tr>" unless $vertical;
    for my $button (@$buttons)
    {
        print $fh qq{<tr valign="top" align="left">\n} if $vertical;
        print $fh qq{<td valign="middle" align="left">};

        if (ref($button) eq 'CODE')
        {
            &$button($fh, $vertical);
        }
        elsif (ref($button) eq 'SCALAR')
        {
            print $fh "$$button" if defined($$button);
        }
        elsif (ref($button) eq 'ARRAY')
        {
            my $text = $button->[1];
            my $button_href = $button->[0];
            if (defined($button_href) and !ref($button_href) 
               and defined($text) and (ref($text) eq 'SCALAR') and defined($$text))
            {             # use given text
                if ($Texi2HTML::HREF{$button_href})
                {
                  print $fh "" .
                        &$anchor('',
                                    $Texi2HTML::HREF{$button_href},
                                    $$text
                                   ) 
                                    ;
                }
                else
                {
                  print $fh $$text;
                }
            }
        }
        elsif ($button eq ' ')
        {                       # handle space button
            print $fh
                $ICONS && $ACTIVE_ICONS{' '} ?
                    &$button_icon_img($button, $ACTIVE_ICONS{' '}) :
                        $NAVIGATION_TEXT{' '};
            #next;
        }
        elsif ($Texi2HTML::HREF{$button})
        {                       # button is active
            my $btitle = $BUTTONS_GOTO{$button} ?
                'title="' . ucfirst($BUTTONS_GOTO{$button}) . '"' : '';
            if ($ICONS && $ACTIVE_ICONS{$button})
            {                   # use icon
                print $fh '' .
                    &$anchor('',
                        $Texi2HTML::HREF{$button},
                        &$button_icon_img($button,
                                             $ACTIVE_ICONS{$button},
                                             $Texi2HTML::NAME{$button}),
                        $btitle
                      );
            }
            else
            {                   # use text
                print $fh
                    '[' .
                        &$anchor('',
                                    $Texi2HTML::HREF{$button},
                                    $NAVIGATION_TEXT{$button},
                                    $btitle
                                   ) .
                                       ']';
            }
        }
        else
        {                       # button is passive
            print $fh
                $ICONS && $PASSIVE_ICONS{$button} ?
                    &$button_icon_img($button,
                                          $PASSIVE_ICONS{$button},
                                          $Texi2HTML::NAME{$button}) :

                                              "[" . $NAVIGATION_TEXT{$button} . "]";
        }
        print $fh "</td>\n";
        print $fh "</tr>\n" if $vertical;
    }
    print $fh "</tr>" unless $vertical;
    print $fh "</table>\n";
}

######################################################################
# Frames: this is from "Richard Y. Kim" <ryk@coho.net>
# Should be improved to be more conforming to other _print* functions
# FIXME pass toc_file and main_file as args or in $Texi2HTML::THISDOC ?

sub T2H_DEFAULT_print_frame
{
    my $fh = shift;
    my $toc_file = shift;
    my $main_file = shift;
    print $fh <<EOT;
$FRAMESET_DOCTYPE
<html>
<head><title>$Texi2HTML::THISDOC{title}</title></head>
<frameset cols="140,*">
  <frame name="toc" src="$toc_file">
  <frame name="main" src="$main_file">
</frameset>
</html>
EOT
}

sub T2H_DEFAULT_print_toc_frame
{
    my $fh = shift;
    my $stoc_lines = shift;
    &$print_page_head($fh);
    print $fh <<EOT;
<h2>Content</h2>
EOT
    print $fh map {s/\bhref=/target="main" href=/; $_;} @$stoc_lines;
    print $fh "</body></html>\n";
}

sub T2H_DEFAULT_toc_body($$$)
{
    my $elements_list = shift;
    my $do_contents = shift;
    my $do_scontents = shift;
    return unless ($do_contents or $do_scontents or $FRAMES);
    my $current_level = 0;
    my $toc_nr = 0;
    my $ul_style = $NUMBER_SECTIONS ? $TOC_LIST_ATTRIBUTE : ''; 
    foreach my $element (@$elements_list)
    {
        next if ($element->{'top'} or $element->{'index_page'});
        my $ind = '  ' x $current_level;
        my $level = $element->{'toc_level'};
        print STDERR "Bug no toc_level for ($element) $element->{'texi'}\n" if (!defined ($level));
        if ($level > $current_level)
        {
            while ($level > $current_level)
            {
                $current_level++;
                my $ln = "\n$ind<ul${ul_style}>\n";
                $ind = '  ' x $current_level;
                push(@Texi2HTML::TOC_LINES, $ln);
            }
        }
        elsif ($level < $current_level)
        {
            while ($level < $current_level)
            {
                $current_level--;
                $ind = '  ' x $current_level;
                my $line = "</li>\n$ind</ul>";
                $line .=  "</li>" if ($level == $current_level);
                push(@Texi2HTML::TOC_LINES, "$line\n");
                
            }
        }
        else
        {
            push(@Texi2HTML::TOC_LINES, "</li>\n");
        }
        $toc_nr++;
        my $file = '';
        $file = $element->{'file'} if ($SPLIT);
        my $entry = "<li>" . &$anchor('TOC' . $toc_nr, "$file#$element->{'id'}",$element->{'text'});
        push (@Texi2HTML::TOC_LINES, $ind . $entry);
        push(@Texi2HTML::STOC_LINES, $entry. "</li>\n") if ($level == 1);
    }
    while (0 < $current_level)
    {
        $current_level--;
        my $ind = '  ' x $current_level;
        push(@Texi2HTML::TOC_LINES, "</li>\n$ind</ul>\n");
    }
    @Texi2HTML::TOC_LINES = () unless ($do_contents);
    if (@Texi2HTML::TOC_LINES)
    {
        unshift @Texi2HTML::TOC_LINES, $BEFORE_TOC_LINES;
        push @Texi2HTML::TOC_LINES, $AFTER_TOC_LINES;
    }
    @Texi2HTML::STOC_LINES = () unless ($do_scontents or $FRAMES);
    if (@Texi2HTML::STOC_LINES)
    {
        unshift @Texi2HTML::STOC_LINES, "<ul${ul_style}>\n";
        push @Texi2HTML::STOC_LINES, "</ul>\n";
        unshift @Texi2HTML::STOC_LINES, $BEFORE_STOC_LINES;
        push @Texi2HTML::STOC_LINES, $AFTER_STOC_LINES;
    }
}

sub T2H_DEFAULT_css_lines ()
{
    return if (defined($CSS_LINES) or (! keys(%css_map)));
    $CSS_LINES = "<style type=\"text/css\">\n<!--\n";
    foreach my $css_rule (sort(keys(%css_map)))
    {
        next unless ($css_map{$css_rule});
        $CSS_LINES .= "$css_rule {$css_map{$css_rule}}\n";
    }
    $CSS_LINES .= "-->\n</style>\n";
}

######################################################################
# About page
#

# PRE_ABOUT can be a function reference or a scalar.
# Note that if it is a scalar, T2H_InitGlobals has not been called,
# and all global variables like $ADDRESS are not available.
$PRE_ABOUT = sub
{
    return <<EOT;
  This document was generated $ADDRESS
  using <a href="$Texi2HTML::THISDOC{program_homepage}"><i>$Texi2HTML::THISDOC{program}</i></a>.
EOT
};

# If customizing $AFTER_ABOUT, be sure to put the content inside <p></p>.
$AFTER_ABOUT = '';

%BUTTONS_EXAMPLE =
    (
     'Top',         ' &nbsp; ',
     'Contents',    ' &nbsp; ',
     'Overview',    ' &nbsp; ',
     'Index',       ' &nbsp; ',
     'Back',        '1.2.2',
     'FastBack',    '1',
     'Prev',        '1.2.2',
     'Up',          '1.2',
     'Next',        '1.2.4',
     'NodeUp',      '1.2',
     'NodeNext',    '1.2.4',
     'NodePrev',    '1.2.2',
     'Following',   '1.2.4',
     'Forward',     '1.2.4',
     'FastForward', '2',
     'About',       ' &nbsp; ',
     'First',       '1.',
     'Last',        '1.2.4',
    );

sub T2H_DEFAULT_about_body
{
    my $about = "<p>\n";
    if (ref($PRE_ABOUT) eq 'CODE')
    {
        $about .= &$PRE_ABOUT();
    }
    else
    {
        $about .= $PRE_ABOUT;
    }
    $about .= <<EOT;
</p>
<p>
  The buttons in the navigation panels have the following meaning:
</p>
<table border="1">
  <tr>
    <th> Button </th>
    <th> Name </th>
    <th> Go to </th>
    <th> From 1.2.3 go to</th>
  </tr>
EOT

    for my $button (@SECTION_BUTTONS)
    {
        next if $button eq ' ' || ref($button) eq 'CODE' || ref($button) eq 'SCALAR' || ref($button) eq 'ARRAY';
        $about .= "  <tr>\n    <td align=\"center\">";
        $about .=
            ($ICONS && $ACTIVE_ICONS{$button} ?
             &$button_icon_img($button, $ACTIVE_ICONS{$button}) :
             ' [' . $NAVIGATION_TEXT{$button} . '] ');
        $about .= "</td>\n";
        $about .= <<EOT;
    <td align="center">$button</td>
    <td>$BUTTONS_GOTO{$button}</td>
    <td>$BUTTONS_EXAMPLE{$button}</td>
  </tr>
EOT
    }

    $about .= <<EOT;
</table>

<p>
  where the <strong> Example </strong> assumes that the current position
  is at <strong> Subsubsection One-Two-Three </strong> of a document of
  the following structure:
</p>

<ul>
  <li> 1. Section One
    <ul>
      <li>1.1 Subsection One-One
        <ul>
          <li>...</li>
        </ul>
      </li>
      <li>1.2 Subsection One-Two
        <ul>
          <li>1.2.1 Subsubsection One-Two-One</li>
          <li>1.2.2 Subsubsection One-Two-Two</li>
          <li>1.2.3 Subsubsection One-Two-Three &nbsp; &nbsp;
            <strong>&lt;== Current Position </strong></li>
          <li>1.2.4 Subsubsection One-Two-Four</li>
        </ul>
      </li>
      <li>1.3 Subsection One-Three
        <ul>
          <li>...</li>
        </ul>
      </li>
      <li>1.4 Subsection One-Four</li>
    </ul>
  </li>
</ul>
$AFTER_ABOUT
EOT
    return $about;
}

sub T2H_DEFAULT_print_redirection_page($)
{
    my $fh = shift;
    my $longtitle = "$Texi2HTML::THISDOC{'title_no_texi'}";
    $longtitle .= ": $Texi2HTML::NO_TEXI{'This'}" if exists $Texi2HTML::NO_TEXI{'This'};
    my $href = &$anchor('', $Texi2HTML::HREF{'This'}, $Texi2HTML::NAME{'This'}); 
    print $fh <<EOT;
$DOCTYPE
<html>
<!-- Created on $Texi2HTML::THISDOC{'today'} by $Texi2HTML::THISDOC{'program'} -->
<!--
$Texi2HTML::THISDOC{'program_authors'}
-->
<head>
<title>$longtitle</title>

<meta name="description" content="$longtitle">
<meta name="keywords" content="$longtitle">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="$Texi2HTML::THISDOC{program}">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Refresh" content="0; url=$Texi2HTML::HREF{'This'}">
$EXTRA_HEAD
</head>

<body $BODYTEXT>
$AFTER_BODY_OPEN
<p>The node you are looking for is at $href.</p>
</body>
EOT
}

########################################################################
# Control of formatting:
# 1.) For some changes, it is often enough to change the value of
#     some global map. It might necessitate building a little
#     function along with the change in hash, if the change is the use
#     of another function (in style_map).
# 2.) For other changes, reimplement one of the t2h_default_<fnc>* routines,
#     give them another name, and assign them to the respective
#     $<fnc> variable (below).


#
# accent map, TeX command to ISO name
#
%accent_map = (
          '"',  'uml',
          '~',  'tilde',
          '^',  'circ',
          '`',  'grave',
          '\'', 'acute',
          '=', '',
         );

#
# texinfo "simple things" (@foo) to HTML ones
#
%simple_map = (
           # cf. makeinfo.c
           "*", "<br>",     # HTML+
           " ", "&nbsp;",
           "\t", "&nbsp;",
           "\n", "&nbsp;",
     # "&#173;" or "&shy;" could also be possible for @-, but it seems
     # that some browser will consider this as an always visible hyphen mark
     # which is not what we want (see http://www.cs.tut.fi/~jkorpela/shy.html)
           "-", "",  # hyphenation hint
           "|", "",  # used in formatting commands @evenfooting and friends
       # spacing commands
           ":", "",
           "!", "!",
           "?", "?",
           ".", ".",
           '@', '@',
           '}', '}',
           '{', '{',
          );
# this map is used in preformatted text
%simple_map_pre = %simple_map;
$simple_map_pre{'*'} = "\n";

#
# texinfo "things" (@foo{}) to HTML ones
#
%things_map = (
               'TeX', 'TeX',
               'br', '<br>',     # paragraph break
               'bullet', '*',
               #'copyright', '(C)',
               'copyright', '&copy;',
               'dots', '<small class="dots">...</small>',
               'enddots', '<small class="enddots">....</small>',
               'equiv', '==',
               'error', 'error--&gt;',
               'expansion', '==&gt;',
               'minus', '-',
               'point', '-!-',
               'print', '-|',
               'result', '=&gt;',
               # APA: &pretty_date requires $MONTH_NAMES and $LANG
               # to be initialized.  The latter gets initialized by
               # &SetDocumentLanguage in &main.
               # We set following hash entry in &main afterwards.
               # 'today', &pretty_date,
               'aa', '&aring;',
               'AA', '&Aring;',
               'ae', '&aelig;',
               'oe', '&oelig;', #pertusus: also &#156;. &oelig; not in html 3.2
               'AE', '&AElig;',
               'OE', '&OElig;', #pertusus: also &#140;. &OElig; not in html 3.2
               'o',  '&oslash;',
               'O',  '&Oslash;',
               'ss', '&szlig;',
               'l', '/l',
               'L', '/L',
               'exclamdown', '&iexcl;',
               'questiondown', '&iquest;',
               'pounds', '&pound;'
             );

# This map is used in preformatted environments
%pre_map = %things_map;
$pre_map{'dots'} = '...';
$pre_map{'enddots'} = '....';
$pre_map{'br'} = "\n";

#
# texinfo styles (@foo{bar}) to HTML ones
#
# When the value begins with & the function with that name is used to do the
# html. The first argument is the text enclosed within {}, the second is the
# style name (which is also the key of the hash)
#
# Otherwithe the value is the html element used to enclose the text, and if
# there is a " the resulting text is also enclosed within `'
%style_map = (
      'acronym',    '',
      'asis',       '',
      'b',          'b',
      'cite',       'cite',
      'code',       'code',
      'command',    'code',
      'ctrl',       '&do_ctrl',   # special case
      'dfn',        'em',         # DFN tag is illegal in the standard
      'dmn',        '',           # useless
      'email',      '&do_email',  # insert a clickable email address
      'emph',       'em',
      'env',        'code',
      'file',       '"tt',        # will put quotes, cf. &apply_style
      'i',          'i',
      'kbd',        'kbd',
      'key',        'kbd',
      'math',       '&t2h_math',
      'option',     '"samp',      # will put quotes, cf. &apply_style
      'r',          '',           # unsupported
      'samp',       '"samp',      # will put quotes, cf. &apply_style
      'sc',         '&do_sc',     # special case
      'strong',     'strong',
      't',          'tt',
      'titlefont',  '',           # useless
      'uref',       '&do_uref',   # insert a clickable URL
      'url',        '&do_url',    # insert a clickable URL
      'var',        'var',
      'verb',       'tt',
      'w',          '',           # unsupported
      'H',          '&do_accent',
      'dotaccent',  '&do_accent',
      'ringaccent', '&do_accent',
      'tieaccent',  '&do_accent',
      'u',          '&do_accent',
      'ubaraccent', '&do_accent',
      'udotaccent', '&do_accent',
      'v',          '&do_accent',
      ',',          '&do_accent',
      'm_cedilla',  '&do_accent',
      'dotless',    '&do_accent'
     );


foreach my $accent (keys(%accent_map))
{
    $style_map{$accent} = '&do_accent';
}

# This is used for style in preformatted sections
%style_map_pre = %style_map;
$style_map_pre{'sc'} = '&do_sc_pre';

#
# texinfo format (@foo/@end foo) to HTML ones
#
%format_map = (
       'quotation',  'blockquote',
       # lists
       'itemize',    'ul',
       'enumerate',  'ol',
       'multitable',  'table',
       );

#
# texinfo format to align attribute of paragraphs
#

%paragraph_style = (
      'center' => 'center',
      'flushleft' => 'left',
      'flushright' => 'right',
      );
      
# an eval of these $complex_format_map->{what}->{'begin'} yields beginning
# an eval of these $complex_format_map->{what}->{'end'} yields end
$complex_format_map =
{
 'example' =>
 {
  'begin' => q{"<table><tr>$EXAMPLE_INDENT_CELL<td>"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => ''
 },
 'smallexample' =>
 {
  'begin' => q{"<table><tr>$SMALL_EXAMPLE_INDENT_CELL<td>"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => 'font-size: smaller'
 },
 'display' =>
 {
  'begin' => q{"<table><tr>$EXAMPLE_INDENT_CELL<td>"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => 'font-family: serif'
 },
 'smalldisplay' =>
 {
  'begin' => q{"<table><tr>$SMALL_EXAMPLE_INDENT_CELL<td>"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => 'font-family: serif; font-size: smaller'
 }
};

$complex_format_map->{'lisp'} = $complex_format_map->{'example'};
$complex_format_map->{'smalllisp'} = $complex_format_map->{'smallexample'};
$complex_format_map->{'format'} = $complex_format_map->{'display'};
$complex_format_map->{'smallformat'} = $complex_format_map->{'smalldisplay'};

#
# texinfo definition shortcuts to real ones
#
%def_map = (
    # basic commands
    'deffn', 0,
    'defvr', 0,
    'deftypefn', 0,
    'deftypeop', 0,
    'deftypevr', 0,
    'defcv', 0,
    'defop', 0,
    'deftp', 0,
    # basic x commands
    'deffnx', 0,
    'defvrx', 0,
    'deftypefnx', 0,
    'deftypeopx', 0,
    'deftypevrx', 0,
    'defcvx', 0,
    'defopx', 0,
    'deftpx', 0,
    # shortcuts
    'defun', 'deffn Function',
    'defmac', 'deffn Macro',
    'defspec', 'deffn {Special Form}',
    'defvar', 'defvr Variable',
    'defopt', 'defvr {User Option}',
    'deftypefun', 'deftypefn Function',
    'deftypevar', 'deftypevr Variable',
    'defivar', 'defcv {Instance Variable}',
    'deftypeivar', 'defcv {Instance Variable}', # NEW: FIXME
    'defmethod', 'defop Method',
    'deftypemethod', 'defop Method', # NEW:FIXME
    # x shortcuts
    'defunx', 'deffnx Function',
    'defmacx', 'deffnx Macro',
    'defspecx', 'deffnx {Special Form}',
    'defvarx', 'defvrx Variable',
    'defoptx', 'defvrx {User Option}',
    'deftypefunx', 'deftypefnx Function',
    'deftypevarx', 'deftypevrx Variable',
    'defivarx', 'defcvx {Instance Variable}',
    'defmethodx', 'defopx Method',
          );

#
# things to skip
#
# Depending on the value, things following the macro may be skipped:
# 
# if the value is 'line' then the remaining of the line is skipped
# if the value is 'arg' then an argument is skipped
# if the value is 'space' space following the macro is skipped
# otherwise only the macro, or @end macro is skipped
# 
%to_skip = (
        # not needed after pass_texi
        'raisesections', 'line',
        'lowersections', 'line',
        'contents', 1,
        'shortcontents', 1,
        'summarycontents', 1,
        'detailmenu', 'space',
        'end detailmenu', 1,
     );

%to_skip_texi = (
        # comments
        'comment', 'line',
        'c', 'line',
        # not needed after pass_texi
        'bye', 'line',
        # unsupported commands (formatting)
        'sp', 'arg',
        # ???
        'pagesizes', 'arg', 
        'finalout', 1,
        'page', 1,
        'refill', 1,
        'noindent', 1,
        'need', 'line',
        'paragraphindent', 'line', # in fact accepts only none asis 
                             # or a number and forbids anything else on the line
        'footnotestyle', 'line', # in fact accepts only end and separate
                                 # and nothing else on the line
        'afourpaper', 'line',
        'headings', 'line',
        'setchapternewpage', 'line',
        'everyheading', 'line',
        'everyfooting', 'line',
        'evenheading', 'line',
        'evenfooting', 'line',
        'oddheading', 'line',
        'oddfooting', 'line',
        'smallbook', 'line',
        # not valid for info (should be in @iftex)
        'vskip', 'line',
        'cropmarks', 1,
        # ???
        'filbreak', 1,
        # unsupported formats/features
        'direntry', 'space',
        'end direntry', 1,
        'group', 'space',
        'end group', 1,
        'exdent', 1,  
     );

# map mapping css specification to style
# css styles corresponding with complex formats should be changed in 
# $complex_format_map->{format}->{'pre_style'}

%css_map = 
     (
         'ul.toc'                 => "$TOC_LIST_STYLE",
         'pre.menu-comment'       => "$MENU_PRE_STYLE",
         'pre.menu-preformatted'  => "$MENU_PRE_STYLE",
         'a.summary-letter'       => 'text-decoration: none',
     );

# functions used for styles
sub do_ctrl($;$) { return "^$_[0]" }

sub do_email($;$)
{
    my($addr, $text) = split(/,\s*/, $_[0]);

    $text = $addr unless $text;
    &$anchor('', "mailto:$addr", $text);
}

sub do_sc($;$)
{
    # pertusus: l2h just do the same...
    # return l2h_ToLatex("{\\sc ".$_[0]."}") if ($L2H);
    return "<small>\U$_[0]\E</small>";
}

sub do_sc_pre($;$)
{ # no small allowed in pre
    return "\U$_[0]\E";
}

sub t2h_math($;$)
{
    return '<em>' . $_[0] . '</em>';
}

sub do_uref($;$)
{
    my($url, $text, $only_text) = split(/,\s*/, $_[0]);
    $text = $only_text if $only_text;
    $text = $url unless $text;
    return &$anchor('', $url, $text);
}

sub do_url($;$) { return &$anchor('', $_[0], $_[0]); }

sub do_accent($$)
{
    return "$_[0]''" if $_[1] eq 'H';
    return "$_[0]." if $_[1] eq 'dotaccent';
    return "$_[0]*" if $_[1] eq 'ringaccent';
    return "$_[0]".'[' if $_[1] eq 'tieaccent';
    return "$_[0]".'(' if $_[1] eq 'u';
    return "$_[0]".'=' if $_[1] eq '=';
    return "$_[0]_" if $_[1] eq 'ubaraccent';
    return ".$_[0]" if $_[1] eq 'udotaccent';
    return "$_[0]&lt;" if $_[1] eq 'v';
    return "&$_[0]cedil;" if ($_[1] eq ',' or $_[1] eq 'm_cedilla');
    return "$_[0]" if $_[1] eq 'dotless';
    return "&$_[0]$accent_map{$_[1]};" if $accent_map{$_[1]};
    return undef;
}

# formatting functions

$anchor            = \&t2h_default_anchor;
$def_item          = \&t2h_default_def_item;
$def               = \&t2h_default_def;
$menu              = \&t2h_default_menu;
$menu_entry        = \&t2h_default_menu_entry;
$menu_comment      = \&t2h_default_menu_comment;
$menu_description  = \&t2h_default_menu_description;
$simple_menu_entry = \&t2h_default_simple_menu_entry;
$ref_beginning     = \&t2h_default_ref_beginning;
$info_ref          = \&t2h_default_info_ref;
$book_ref          = \&t2h_default_book_ref;
$external_ref      = \&t2h_default_external_ref;
$internal_ref      = \&t2h_default_internal_ref;
$table_item        = \&t2h_default_table_item;
$table_line        = \&t2h_default_table_line;
$row               = \&t2h_default_row;
$cell              = \&t2h_default_cell;
$list_item         = \&t2h_default_list_item;
$comment           = \&t2h_default_comment;
$def_line	       = \&t2h_default_def_line;
$raw               = \&t2h_default_raw;
$heading           = \&t2h_default_heading;
$paragraph         = \&t2h_default_paragraph;
$preformatted      = \&t2h_default_preformatted;
$table             = \&t2h_default_table;
$foot_line_and_ref = \&t2h_default_foot_line_and_ref;
$foot_section      = \&t2h_default_foot_section;
$image             = \&t2h_default_image;
$address           = \&t2h_default_address;
$index_entry_label = \&t2h_default_index_entry_label;
$index_summary     = \&t2h_default_index_summary;
$summary_letter    = \&t2h_default_summary_letter;
$index_entry       = \&t2h_default_index_entry;
$index_letter      = \&t2h_default_index_letter;
$print_index       = \&t2h_default_index;
$protect_html      = \&t2h_default_protect_html;
$end_complex_format = \&t2h_default_end_complex_format;
$cartouche         = \&t2h_default_cartouche;


sub t2h_default_end_complex_format($$)
{
    my $tag = shift;
    my $text = shift;
    return '' unless ($text);
    my $start = eval $complex_format_map->{$tag}->{'begin'} ;
    if ($@)
    {
        warn "$ERROR: eval of complex_format_map->{$tag}->{'begin'} $complex_format_map->{$tag}->{'begin'}: $@";
        $start = '';
    }
    my $end = eval $complex_format_map->{$tag}->{'end'}; 
    if ($@)
    {
        warn "$ERROR: eval of complex_format_map->{$tag}->{'end'} $complex_format_map->{$tag}->{'end'}: $@";
        $end = '';
    }
    return $start . $text . $end;
}

sub t2h_default_protect_html($)
{
    my $what = shift;
    # protect &, ", <, and >.
    # APA: Keep it simple.  This is what perl's CGI::espaceHTML does.
    # We may consider using that instead.
    # If raw HTML is used outside @ifhtml or @html it's an error
    # anyway.
    $what =~ s/\&/\&amp;/go;
    $what =~ s/\"/\&quot;/go;
    $what =~ s/\</\&lt;/go;
    $what =~ s/\>/\&gt;/go;
    return($what);
}

# $name           :   anchor name
# $href           :   anchor href
# text            :   text displayed
# extra_attribs   :   added to anchor attributes list
sub t2h_default_anchor($;$$$)
{
    my($name, $href, $text, $extra_attribs) = @_;
    my @result = ();

    push(@result, '<a');
    push(@result, ' name="', $name, '"') if $name;
    if ($href)
    {
        $href =~ s|^$HREF_DIR_INSTEAD_FILE|./|
            if ($HREF_DIR_INSTEAD_FILE);
        push(@result, ' href="', $href, '"');
    }
    push(@result, ' ', $extra_attribs) if $extra_attribs;
    push(@result, '>');
    push(@result, $text) if $text;
    push(@result, '</a>');
    return join('', @result);
}

# format the text of a @deffn/@end deffn
sub t2h_default_def_item($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
        $text = $DEF_TABLE ? ('<tr><td colspan="2">'. $text .'</td></tr>')
            : ('<dd>' . $text . '</dd>');
    }
    return $text;
}

# format the container for the @deffn line and text
sub t2h_default_def($)
{
    my $text = shift;

    return  $DEF_TABLE ?
         ("<table width=\"100%\">\n" . $text . "</table>\n") : 
         ("<dl>\n" . $text . "</dl>\n");
}

# a whole menu
sub t2h_default_menu($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
        return "<table class=\"menu\" border=\"0\" cellspacing=\"0\">\n" . $text. "</table>\n";
    }
    return '';
}

# a simple menu entry ref in case we aren't in a standard menu context
sub t2h_default_simple_menu_entry($$$)
{
    my $entry = shift;
    my $state = shift;
    my $href = shift;
    $entry = &$anchor('', $href, $entry) if ($href);
    return $entry . '&nbsp;';
}

# a menu entry ref
sub t2h_default_menu_entry($$;$)
{
    my $entry = shift;
    my $state = shift;
    my $href = shift;
    $entry = &$anchor('', $href, $entry) if ($href);
    return '<tr><td>' . main::do_preformatted($entry, $state) if ($state->{'preformatted'});
    return '<tr><td align="left" valign="top">' .
              $entry .
          '</td><td>&nbsp;&nbsp;</td>';
}

# a menu description
sub t2h_default_menu_description($$)
{
    my $descr = shift;
    my $state = shift;
    return main::do_preformatted($descr, $state) . '</tr>' if ($state->{'preformatted'});
    return '<td align="left" valign="top">' . $descr .
          "</td></tr>\n";
}

# a menu comment (between menu lines)
sub t2h_default_menu_comment($)
{
    my $text = shift;
    my $state = shift;

    if ($text =~ /\S/)
    {
         return '<tr><th colspan="3" align="left" valign="top">' . $text . '</th></tr>';
    }
    return '';
}

# beginning of a ref
sub t2h_default_ref_beginning($)
{
    my $type = shift;
    if ($type eq 'xref')
    {
        return "$Texi2HTML::I18n::WORDS->{'See'} ";
    }
    elsif ($type eq 'pxref')
    {
        return  "$Texi2HTML::I18n::WORDS->{'see'} ";
    }
    else
    {
         return '';
    }
}

# ref to an info file
sub t2h_default_info_ref($$$)
{
    my $node = shift;
    my $file = shift;
    my $name = shift;
    $name = '' unless (defined($name));
    $node = "$name: " . $node if ($name);
    return &$anchor('', $file, $node);
}

# ref to a book
sub t2h_default_book_ref($$$)
{
    my $section = shift;
    my $book = shift;
    $book = main::apply_style ('cite', $book);
    return $book unless ($section);
    return "$Texi2HTML::I18n::WORDS->{'section'} `$section' in " . $book;
}

sub t2h_default_external_ref($$$)
{
    my $type = shift;
    my $info = shift;
    my $book = shift;

    my $ref = &$ref_beginning($type);
    $ref .= $info if ($info);
    $ref .= " " if ($info and $book);
    $ref .= $book if ($book);
    return $ref;
}

# ref to a node or section in the document
sub t2h_default_internal_ref($$$$$)
{
    my $type = shift;
    my $href = shift;
    my $short_name = shift;
    my $name = shift;
    my $is_section = shift;

    my $begin = &$ref_beginning($type); 
    if (! $SHORT_REF)
    {
        $begin .= "$Texi2HTML::I18n::WORDS->{'section'} " if ($begin and $is_section);
        return $begin . &$anchor('', $href, $name);
    }
    else
    {
        return $begin . &$anchor('', $href, $short_name);
    }
}

# text after @item in table, vtable and ftable
sub t2h_default_table_item($$$)
{
    my $text = shift;
    my $do_index = shift;
    my $state = shift;
    my $index_label;
    if ($do_index)
    {
        $index_label = main::do_index_entry_label($state);
        print STDERR "Bug: no index entry for $text" unless defined($index_label);
    }
    $text .= $index_label if ($do_index and defined($index_label));
    return '<dt>' . $text . '</dt>' . "\n";
}

# format text on the line following @item (in table, vtable and ftable)
sub t2h_default_table_line($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
         return '<dd>' . $text . '</dd>' . "\n";
    }
    return '';
}

# row in multitable
sub t2h_default_row($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
         return '<tr>' . $text . '</tr>' . "\n";
    }
    return '';
}

# cell in multitable
sub t2h_default_cell($)
{
    my $text = shift;
    return '<td>' . $text . '</td>';
}

# item in list
sub t2h_default_list_item($$)
{
   my $text = shift;
# FIXME add . "\n" ?
   return '<li>' . $text . '</li>';
}

# an html comment
sub t2h_default_comment($)
{
    my $text = shift;
    return '<!--' . $text . '-->';
}

# format the whole table ftable or vtable
sub t2h_default_table($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
        return "<dl compact=\"compact\">\n" . $text. "</dl>\n";
    }
    return '';
}

# a paragraph
sub t2h_default_paragraph($$)
{
    my $text = shift;
    my $align = shift;
    return '' if ($text =~ /^\s*$/);
    my $open = '<p>';
    if ($align)
    {
        $open = "<p align=\"$align\">";
    }
    return $open. "$text</p>";
}

# a preformatted section
sub t2h_default_preformatted($$$)
{
    my $text = shift;
    my $pre_style = shift;
    my $class = shift;

    return '' if ($text eq '');
    return "<pre class=\"$class\">$text</pre>";
}

# a heading for an element
sub t2h_default_heading($)
{
    my $element = shift;
    return '' if ($element->{'text'} =~ /^\s*$/);
    my $level = 3;
    if (!$element->{'node'})
    {
	$level = $element->{'level'};
        print STDERR "Bug: $element->{'texi'} level undef\n" if (!defined($level));
        $level = 1 if ($level == 0);
    }
    my $class = $element->{'tag'};
    print STDERR "Bug: $element->{'texi'} class undef\n" if (!defined($class));
    # do like makeinfo
    $class = 'unnumbered' if ($class eq 'top');
    return "<h$level class=\"$class\"> $element->{'text'} </h$level>\n";
}

# formatting of raw regions
# ih L2H is true another mechanism is used for tex
sub t2h_default_raw($$)
{
    my $style = shift;
    my $text = shift;
    if ($style eq 'verbatim' or $style eq 'tex')
    {
        return "<pre class=\"$style\">" . &$protect_html($text) . '</pre>';
    }
    elsif ($style eq 'html')
    {
        return $text;
    }
    else
    {
        warn "$WARN (bug) unknown style $style\n";
        return &$protect_html($text);
    }
}

# do header for the footnotes text, and ref to the footnote file
# for the text where the footnote is
sub t2h_default_foot_line_and_ref($$$$$$$)
{
    my $foot_num = shift;
    my $relative_num = shift;
    my $footid = shift;
    my $docid = shift;
    my $from_file = shift;
    my $footnote_file = shift;
    my $lines = shift;
    my $state = shift;
    
    my $foot = "($foot_num)";
    unshift @$lines, "<h3>" . &$anchor($footid, "$from_file#$docid", $foot) . "</h3>\n";
    return ($lines, &$anchor($docid, "$footnote_file#$footid", $foot));
}

sub t2h_default_foot_section($)
{
    my $lines = shift;
    unshift @$lines, "$DEFAULT_RULE\n<h3>$Texi2HTML::I18n::WORDS->{'Footnotes_Title'}</h3>\n";
    unshift @$lines, '<div class="footnote">' . "\n";
    push @$lines, "</div>\n";
    return $lines;
}

sub t2h_default_image($$$)
{
    my $image = shift;
    my $base = shift;
    my $preformatted = shift;
    if ($preformatted)
    {
        return "[ $base ]";
    }
    else
    {
        return ($CENTER_IMAGE ?
          "<div align=\"center\"><img src=\"$image\" alt=\"$base\"></div>" :
          "<img src=\"$image\" alt=\"$base\">");
    }
}

# address put in footer describing when was generated and who did the manual
sub t2h_default_address($$)
{
    my $user = shift;
    my $date = shift;
    my $text = '';
    $text .= "by <i>$user</i> " if $user;
    $text .= "on <i>$date</i>" if $date;
    return $text;
}

# label for an index entry, target of the link from the index page
sub t2h_default_index_entry_label($$)
{
    my $label = shift;
    my $preformatted = shift;
    $label = &$anchor($label) if ($label);
    $label .= "\n" if ($label and !$preformatted);
    return $label;
}

# process definition commands line @deffn for example
sub t2h_default_def_line($$$)
{
    my $tag = shift;
    my $line = shift;
    my $state = shift;
    
    $state->{'deff'} = $tag;
    
    if (defined($def_map{$tag}) and $def_map{$tag})
    {
        # substitute shortcuts for definition commands
        my $substituted = $def_map{$tag};
        $substituted =~ s/(\w+)//;
        $tag = $1;
        $line = $substituted . $line;
    }
    
    my ($type, $name, $ftype);
    ($line, $type, $name, $ftype) = main::parse_def($tag, $line);
    #print STDERR "Def $tag $name, $type\n";
    my $result = '';
    unless ($type)
    {
        warn "$ERROR bad $state->{'deff'}, no type\n";
        return '';
    }
    $type = main::substitute_line($type);
    $type .= ':' if (!$DEF_TABLE); # it's nicer like this
    unless ($name)
    {
        warn "$ERROR bad $state->{'deff'} nothing after the type\n";
        return '';
    }
    $name = main::substitute_line($name);
    $line = '' if (!$line);
    $result = $DEF_TABLE ? '' : '<dt>';
    if ($tag eq 'deffn' || $tag eq 'defvr' || $tag eq 'deftp')
    {
        if ($DEF_TABLE)
        {
            $result .= "<tr>\n<td align=\"left\"><b>$name</b>\n";
            $result .= main::substitute_line($line);
            $result .= "</td>\n";
            $result .= "<td align=\"right\">";
            $result .= "$type</td>\n</tr>\n";
        }
        else
        {
            #FIXME <u> is deprecated in xhtml 1.1
            #use <span style="text-description: underline"> ?
            $result .= "<u>$type</u> <b>$name</b>";
            $result .= main::substitute_line($line);
        }
    }
    elsif ($tag eq 'deftypefn' || $tag eq 'deftypevr'
        || $tag eq 'deftypeop' || $tag eq 'defcv'
        || $tag eq 'defop')
    {
        $ftype = main::substitute_line($ftype);
        if ($DEF_TABLE)
        {
            $result .= "<tr>\n<td align=\"left\"><b>$name</b>";
            $result .= main::substitute_line($line);
            $result .= "</td>\n";
            $result .= "<td align=\"right\">";
            $result .= "$type of $ftype</td>\n</tr>\n";
        }
        else
        {
            $result .= "<u>$type</u> $ftype <b>$name</b>";
            $result .= main::substitute_line($line);
        }
    }
    else
    {
        warn "$ERROR Unknown definition type: $tag\n";
        $result .= "<u>$type</u> <b>$name</b>";
        $result .= main::substitute_line($line);
    }
    $result .= main::do_index_entry_label($state);
    $result .= "</dt>\n" if (!$DEF_TABLE);
    return $result;
}

# a cartouche
sub t2h_default_cartouche($)
{
    my $text = shift;

    if ($text =~ /\S/)
    {
        return "<table class=\"cartouche\" border=\"1\"><tr><td>\n" . $text . "</td></tr></table>\n";
    }
    return '';
}

# a whole index
sub t2h_default_index($$)
{
    my $text = shift;
    my $name = shift;
    #FIXME i18n
    return "<table border=\"0\" class=\"index-$name\">" . "\n" .
"<tr><td></td><th align=\"left\">Index Entry</th><th align=\"left\"> Section</th></tr>\n" .
"<tr><td colspan=\"3\"> $DEFAULT_RULE</td></tr>\n" . $text . "</table>";
}

# format an letter entry in index
sub t2h_default_index_letter($$$)
{
    my $letter = shift;
    my $index = shift;
    my $id = shift;
    my $entries = shift;
    
    return '<tr><th>' .
      &$anchor("${id}_" . $index, '', &$protect_html($letter)) .
       "</th><td></td><td></td></tr>\n" . $entries .
    "<tr><td colspan=\"3\"> $DEFAULT_RULE</td></tr>\n";
}

# format an index entry (in a letter entry)
sub t2h_default_index_entry($$$$)
{
    my $origin_href = shift;
    my $entry = shift;
    my $element_href= shift;
    my $element_text = shift;
    return "<tr><td></td><td valign=\"top\">" .
      &$anchor('', $origin_href, $entry) .
      "</td><td valign=\"top\">" .
      &$anchor('', $element_href, $element_text) . "</td></tr>\n";
}

sub t2h_default_summary_letter($$$)
{
    my $letter = shift;
    my $file = shift;
    my $index = shift;
    my $id = shift;

    return &$anchor('', "$file#${id}_" . $index,
         "<b>" . &$protect_html($letter) . "</b>",
         'class="summary-letter"');
}

sub t2h_default_index_summary($$)
{
    my $alphabetical_letters = shift;
    my $non_alphabeticals = shift;

    my $alphabetical_line = '';
    $alphabetical_line = join ("\n &nbsp; \n", @$alphabetical_letters) . "\n &nbsp; \n" if (@$alphabetical_letters);
    my $non_alphabetical_line = '';
    $non_alphabetical_line = join ("\n &nbsp; \n", @$non_alphabeticals) . "\n &nbsp; \n" if (@$non_alphabeticals);

    $non_alphabetical_line .= "<br>\n" if ($non_alphabetical_line);
    #FIXME i18n
    return '<table><tr><th valign="top">Jump to: &nbsp; </th><td>' .
       $non_alphabetical_line . $alphabetical_line . '</td></tr></table>';
}

1;
