# -*-perl-*-
######################################################################
# File: texi2html.init
#
# Sets default values for command-line arguments and for various customizable
# procedures
#
# A copy of this file is pasted into the beginning of texi2html by
# 'make texi2html'
#
# Copy this file and make changes to it, if you like.
# Afterwards, either, load it with command-line option -init_file <your_init_file>
#
# $Id: texi2html.init,v 1.23 2003-04-10 14:31:17 pertusus Exp $

######################################################################
# stuff which can also be set by command-line options
#
#
# Note: values set here, overwrite values set by the command-line
# options before -init_file and might still be overwritten by
# command-line arguments following the -init_file option
#



$T2H_DEBUG = 0;
# APA: Add SystemLiteral to identify the canonical DTD.
# [Definition:] The SystemLiteral is called the entity's system
# identifier. It is a URI, which may be used to retrieve the entity.
# See http://www.xml.com/axml/target.html#NT-ExternalID
$T2H_DOCTYPE = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html401/loose.dtd">';

$T2H_FRAMESET_DOCTYPE = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html401/frameset.dtd">';

$T2H_TEST = 0;

$T2H_DUMP_TEXI = 0;

# -expand
# if set to "tex" (or, "info") expand @iftex and @tex (or, @ifinfo) sections
# else, neither expand @iftex, @tex, nor @ifinfo sections
@T2H_EXPAND = ("info");

# - glossary
# If set, uses section named `Footnotes' for glossary.
$T2H_USE_GLOSSARY = 0;

# -invisible
# $T2H_INVISIBLE_MARK is the text used to create invisible destination
# anchors for index links (you can for instance use the invisible.xbm
# file shipped with this program). This is a workaround for a known
# bug of many WWW browsers, including netscape.
# For me, it works fine without it -- on the contrary: if there, it
# inserts space between headers and start of text (obachman 3/99)
$T2H_INVISIBLE_MARK = '';
# $T2H_INVISIBLE_MARK = '&#160;';

# -iso
# if set, ISO8859 characters are used for special symbols (like copyright, etc)
$T2H_USE_ISO = 0;

# -I
# list directories where @include files are searched for (besides the
# directory of the doc file) additional '-I' args add to this list
# APA: Don't implicitely search ., to conform with the docs!
# my @T2H_INCLUDE_DIRS = (".");
@T2H_INCLUDE_DIRS = ();

# -top_file
# uses file of this name for top-level file
# extension is manipulated appropriately, if necessary.
# If empty, <basename of document>.html is used.
# Typically, you would set this to "index.html".
$T2H_TOP_FILE = '';

# -toc_file
# uses file of this name for table of contents.  File
# extension is manipulated appropriately, if necessary.
# If empty, <basename of document>_toc.html is used.
$T2H_TOC_FILE = '';

# -frames
# if set, output two additional files which use HTML 4.0 "frames".
$T2H_FRAMES = 0;

# -menu | -nomenu
# if set, show the Texinfo menus
$T2H_SHOW_MENU = 1;

# -number | -nonumber
# if set, number sections and show section names and numbers in references
# and menus
$T2H_NUMBER_SECTIONS = 1;

# -split section|chapter|none
# if set to 'section' (resp. 'chapter') create one html file per (sub)section
# (resp. chapter) and separate pages for Top, ToC, Overview, Index,
# Glossary, About.
# Otherwise, create a monolithic html file that contains the whole document.
#$T2H_SPLIT = 'section';
$T2H_SPLIT = '';

# -section_navigation|-no-section_navigation
# if set, then navigation panels are printed at the beginning of each section
# and, possibly at the end (depending on whether or not there were more than
# $T2H_WORDS_IN_PAGE  words on page
# This is most useful if you do not want to have section navigation
# on -split chapter
$T2H_SECTION_NAVIGATION = 1;

# -subdir
# If set, then put result files into the specified directory.
# If not set, then result files are put into the current directory.
#$T2H_SUBDIR = 'html';
$T2H_SUBDIR = '';

# -short_extn
# If this is set, then all HTML files will have extension ".htm" instead of
# ".html". This is helpful when shipping the document to DOS-based systems.
$T2H_SHORTEXTN = 0;

# -prefix
# Set the output file prefix, prepended to all .html, .gif and .pl files.
# By default, this is the basename of the document
$T2H_PREFIX = '';

# -o filename
# If set, generate monolithic document output html into $filename
$T2H_OUT = '';

# -short_ref
#if set cross-references are given without section numbers
$T2H_SHORT_REF = '';

# -idx_sum
# if value is set, then for each @prinindex $what
# $docu_name_$what.idx is created which contains lines of the form
# $key\t$ref sorted alphabetically (case matters)
$T2H_IDX_SUMMARY = 0;

# -def_table
# Use a table construction for @def .... stuff instead
# New Option: 27.07.2000 Karl Heinz Marbaise
$T2H_DEF_TABLE = 0;


# -verbose
# if set, chatter about what we are doing
$T2H_VERBOSE = '';

# -lang
# For page titles use $T2H_WORDS->{$T2H_LANG}->{...} as title.
# To add a new language, supply list of titles (see $T2H_WORDS below).
# and use ISO 639 language codes (see e.g. perl module Locale-Codes-1.02
# for  definitions)
# Default's to 'en' if not set or no @documentlanguage is specified
$T2H_LANG = 'en';

# -l2h
# if set, uses latex2html for generation of math content
$T2H_L2H = '';

######################
# The following options are only relevant if $T2H_L2H is set
#
# -l2h_l2h
# name/location of latex2html program
$T2H_L2H_L2H = "latex2html";

# -l2h_skip
# If set, skips actual call to latex2html: tries to reuse previously generated
# content, instead.
$T2H_L2H_SKIP = '';

# -l2h_tmp
# If set, l2h uses the specified directory for temporary files.  The path
# leading to this directory may not contain a dot (i.e., a ".");
# otherwise, l2h will fail.
$T2H_L2H_TMP = '';

# if set, cleans intermediate files (they all have the prefix $doc_l2h_)
# of l2h
$T2H_L2H_CLEAN = 1;


##############################################################################
#
# The following can only be set in the init file
#
##############################################################################

# if set, and T2H_NUMBER_SECTIONS is set, then use node names in menu
# entries, instead of section names
$T2H_NODE_NAME_IN_MENU = 0;

# if set and menu entry equals menu descr, then do not print menu descr.
# Likewise, if node name equals entry name, do not print entry name.
$T2H_AVOID_MENU_REDUNDANCY = 1;

# if set, center @image by default
# otherwise, do not center by default
$T2H_CENTER_IMAGE = 1;

# used as identation for block enclosing command @example, etc
# If not empty, must be enclosed in <td></td>
$T2H_EXAMPLE_INDENT_CELL = '<td>&nbsp;</td>';
# same as above, only for @small
$T2H_SMALL_EXAMPLE_INDENT_CELL = '<td>&nbsp;</td>';
# font size for @small
$T2H_SMALL_FONT_SIZE = '-1';

# if non-empty, and no @..heading appeared in Top node, then
# use this as header for top node/section, otherwise use value of
# @settitle or @shorttitle (in that order)
$T2H_TOP_HEADING = '';

# if set, use this chapter for 'Index' button, else
# use first chapter whose name matches 'index' (case insensitive)
$T2H_INDEX_CHAPTER = '';

# if set and $T2H_SPLIT is set, then split index pages at the next letter
# after they have more than that many entries
$T2H_SPLIT_INDEX = 100;

# if set the nodes are not used as sectionning elements
$T2H_NO_NODE = 1;

# if set warning is emitted when the next of the previous node isn't the node
# or the previous of the next node isn't the node
$T2H_WARN_PREV_NEXT = 0;

# this controls the pre style for menus
$T2H_MENU_PRE_STYLE = 'style="font-family: serif"';

# if set (e.g., to index.html) replace hrefs to this file
# (i.e., to index.html) by ./
$T2H_HREF_DIR_INSTEAD_FILE = '';

# text inserted after <body ...>
$T2H_AFTER_BODY_OPEN = '';

# text inserted before </body>, this will be automatically inside <p></p>
$T2H_PRE_BODY_CLOSE = '';

# this is added inside <head></head> after <title> and some <meta name>
# stuff, it can be used for eg. <style>, <script>, <meta> etc. tags.
$T2H_EXTRA_HEAD = '';

# Specifies the minimum page length required before a navigation panel
# is placed at the bottom of a page (the default is that of latex2html)
# T2H_THIS_WORDS_IN_PAGE holds number of words of current page
$T2H_WORDS_IN_PAGE = 300;

# if this is set, then a vertical navigation panel is used
$T2H_VERTICAL_HEAD_NAVIGATION = 0;

@T2H_CHAPTER_BUTTONS =
    (
     'FastBack', 'FastForward', ' ',
     ' ', ' ', ' ', ' ',
     'Top', 'Contents', 'Index', 'About',
    );

# specify in this array which "buttons" should appear in which order
# in the navigation panel for sections; use ' ' for empty buttons (space)
@T2H_SECTION_BUTTONS =
    (
     'Back', 'Forward', ' ', 'FastBack', 'Up', 'FastForward',
     ' ', ' ', ' ', ' ',
     'Top', 'Contents', 'Index', 'About',
    );

# buttons for misc stuff
@T2H_MISC_BUTTONS = ('Top', 'Contents', 'Index', 'About');

$T2H_ICONS = 0;

# insert here name of icon images for buttons
# Icons are used, if $T2H_ICONS and resp. value are set
%T2H_ACTIVE_ICONS =
    (
     'Top',         '',
     'Contents',    '',
     'Overview',    '',
     'Index',       '',
     'Back',        '',
     'FastBack',    '',
     'Prev',        '',
     'Up',          '',
     'Next',        '',
     'Forward',     '',
     'FastForward', '',
     'About' ,      '',
     'First',       '',
     'Last',        '',
     ' ',           ''
    );

# insert here name of icon images for these, if button is inactive
%T2H_PASSIVE_ICONS =
    (
     'Top',         '',
     'Contents',    '',
     'Overview',    '',
     'Index',       '',
     'Back',        '',
     'FastBack',    '',
     'Prev',        '',
     'Up',          '',
     'Next',        '',
     'Forward',     '',
     'FastForward', '',
     'About',       '',
     'First',       '',
     'Last',        '',
    );

# Names of text as alternative for icons
%T2H_NAVIGATION_TEXT =
    (
     'Top',         'Top',
     'Contents',    'Contents',
     'Overview',    'Overview',
     'Index',       'Index',
     ' ',           ' &nbsp; ',
     'Back',        ' &lt; ',
     'FastBack',    ' &lt;&lt; ',
     'Prev',        'Prev',
     'Up',          ' Up ',
     'Next',        'Next',
     'Forward',     ' &gt; ',
     'FastForward', ' &gt;&gt; ',
     'About',       ' ? ',
     'First',       ' |&lt; ',
     'Last',        ' &gt;| '
    );

%T2H_BUTTONS_GOTO =
    (
     'Top',         'cover (top) of document',
     'Contents',    'table of contents',
     'Overview',    'short table of contents',
     'Index',       'concept index',
     'Back',        'previous section in reading order',
     'FastBack',    'beginning of this chapter or previous chapter',
     'Prev',        'previous section on same level',
     'Up',          'up section',
     'Next',        'next section on same level',
     'Forward',     'next section in reading order',
     'FastForward', 'next chapter',
     'About' ,      'about (this page)',
     'First',       'first section in reading order',
     'Last',        'last section in reading order',
    );

#######################################################################
#
# Values guessed if not set here
#
#######################################################################

# this is used in footer
$T2H_ADDRESS = undef;

# Set the default body text, inserted between <body ... >
$T2H_BODYTEXT = undef;


########################################################################
# Control of Page layout:
# You can make changes of the Page layout at two levels:
# 1.) For small changes, it is often enough to change the value of
#     some global string/hash/array variables
# 2.) For larger changes, reimplement one of the T2H_DEFAULT_<fnc>* routines,
#     give them another name, and assign them to the respective
#     $T2H_<fnc> variable.

# As a general interface, the hashes T2H_HREF, T2H_NAME, T2H_NODE hold
# href, html-name, node-name of
# This     -- current section (resp. html page)
# Top      -- top page ($T2H_TOP_FILE)
# Contents -- Table of contents
# Overview -- Short table of contents
# Index    -- Index page
# About    -- page which explain "navigation buttons"
# First    -- first node
# Last     -- last node
#
# Whether or not the following hash values are set, depends on the context
# (all values are w.r.t. 'This' section)
# Next        -- next node of texinfo
# Prev        -- previous node of texinfo
# Up          -- up node of texinfo
# Forward     -- next node in reading order
# Back        -- previous node in reading order
# FastForward -- if leave node, up and next, else next node
# FastBackward-- if leave node, up and prev, else prev node
#
# Furthermore, the following global variabels are set:
# $T2H_THISDOC{title}          -- title as set by @setttile
# $T2H_THISDOC{fulltitle}      -- full title as set by @title...
# $T2H_THISDOC{subtitle}       -- subtitle as set by @subtitle
# $T2H_THISDOC{author}         -- author as set by @author
# $T2H_THISDOC{copying}        -- text of @copying and @end copying in comment
#
# $T2H_THISDOC{program}          -- name and version of texi2html
# $T2H_THISDOC{program_homepage} -- homepage for texi2html
# $T2H_THISDOC{program_authors}  -- authors of texi2html
# $T2H_THISDOC{today}            -- date formatted with pretty_date
#
# and pointer to arrays of lines which need to be printed by t2h_print_lines
# $T2H_OVERVIEW      -- lines of short table of contents
# $T2H_TOC           -- lines of table of contents
# $T2H_TOP           -- lines of Top texinfo node
# $T2H_THIS_SECTION  -- lines of 'This' section
# $T2H_THIS_HEADER   -- lines preceding navigation panel of 'This' section

#
# There are the following subs which control the layout:
#
$T2H_print_section            = \&T2H_DEFAULT_print_section;
$T2H_print_Top_header         = \&T2H_DEFAULT_print_Top_header;
$T2H_print_Top_footer	      = \&T2H_DEFAULT_print_Top_footer;
$T2H_print_Top		      = \&T2H_DEFAULT_print_Top;
$T2H_print_Toc		      = \&T2H_DEFAULT_print_Toc;
$T2H_print_Overview	      = \&T2H_DEFAULT_print_Overview;
$T2H_print_Footnotes	      = \&T2H_DEFAULT_print_Footnotes;
$T2H_print_About	      = \&T2H_DEFAULT_print_About;
$T2H_print_misc_header	      = \&T2H_DEFAULT_print_misc_header;
$T2H_print_misc_footer	      = \&T2H_DEFAULT_print_misc_footer;
$T2H_print_misc		      = \&T2H_DEFAULT_print_misc;
$T2H_print_chapter_header     = \&T2H_DEFAULT_print_chapter_header;
$T2H_print_chapter_footer     = \&T2H_DEFAULT_print_chapter_footer;
$T2H_print_page_head	      = \&T2H_DEFAULT_print_page_head;
$T2H_print_page_foot	      = \&T2H_DEFAULT_print_page_foot;
$T2H_print_head_navigation    = \&T2H_DEFAULT_print_head_navigation;
$T2H_print_foot_navigation    = \&T2H_DEFAULT_print_foot_navigation;
$T2H_button_icon_img	      = \&T2H_DEFAULT_button_icon_img;
$T2H_print_navigation	      = \&T2H_DEFAULT_print_navigation;
$T2H_about_body		      = \&T2H_DEFAULT_about_body;
$T2H_print_frame              = \&T2H_DEFAULT_print_frame;
$T2H_print_toc_frame          = \&T2H_DEFAULT_print_toc_frame;
$T2H_toc_body                 = \&T2H_DEFAULT_toc_body;

########################################################################
# Layout for html for every sections
#
sub T2H_DEFAULT_print_section
{
    my $fh = shift;
    my $buttons = \@T2H_SECTION_BUTTONS;
    &$T2H_print_head_navigation($fh, $buttons) if $T2H_SECTION_NAVIGATION;
    my $nw = t2h_print_lines($fh);
    if (defined $T2H_SPLIT
        and ($T2H_SPLIT eq 'section' && $T2H_SECTION_NAVIGATION))
    {
        &$T2H_print_foot_navigation($fh, $buttons, $nw);
    }
    else
    {
        print $fh '<hr size="6">' . "\n";
    }
}

###################################################################
# Layout of top-page I recommend that you use @ifnothtml, @ifhtml,
# @html within the Top texinfo node to specify content of top-level
# page.
#
# If you enclose everything in @ifnothtml, then title, subtitle,
# author and overview is printed
# T2H_HREF of Next, Prev, Up, Forward, Back are not defined
# if $T2H_SPLIT then Top page is in its own html file
sub T2H_DEFAULT_print_Top_header
{
    my $fh = shift;
    my $buttons = shift;
    &$T2H_print_page_head($fh, $buttons) if $T2H_SPLIT;
    &$T2H_print_head_navigation($fh, $buttons);
}
sub T2H_DEFAULT_print_Top_footer
{
    &$T2H_print_foot_navigation(@_);
    &$T2H_print_page_foot(@_) if $T2H_SPLIT;
}
sub T2H_DEFAULT_print_Top
{
    my $fh = shift;
    my $has_top_heading = shift;

    # for redefining navigation buttons use:
    # my $buttons = [...];
    # as it is, 'Top', 'Contents', 'Index', 'About' are printed
    my $buttons = \@T2H_MISC_BUTTONS;
    &$T2H_print_Top_header($fh, $buttons);
    if ($T2H_THIS_SECTION)
    {
        # if top-level node has content, then print it with extra header
        print $fh "<h1>$T2H_NAME{Top}</h1>\n"
            unless ($has_top_heading);
        t2h_print_lines($fh, $T2H_THIS_SECTION)
    }
    else
    {
        # top-level node is fully enclosed in @ifnothtml
        # print fulltitle, subtitle, author, Overview
        print $fh
            "<div align=\"center\">\n<h1>",
                join("</h1>\n<h1>", split(/\n/,  $T2H_THISDOC{fulltitle})),
                    "</h1>\n";
        print $fh "<h2>$T2H_THISDOC{subtitle}</h2>\n"
          if $T2H_THISDOC{subtitle};
        print $fh "$T2H_THISDOC{author}\n" if $T2H_THISDOC{author};
        print $fh <<EOT;
</div>
<hr>
<p></p>
<h2> Overview: </h2>
<blockquote>
EOT
        t2h_print_lines($fh, $T2H_OVERVIEW);
        print $fh "</blockquote>\n";
    }
    &$T2H_print_Top_footer($fh, $buttons);
}

###################################################################
# Layout of Toc, Overview, and Footnotes pages
# By default, we use "normal" layout
# T2H_HREF of Next, Prev, Up, Forward, Back, etc are not defined
# use: my $buttons = [...] to redefine navigation buttons
sub T2H_DEFAULT_print_Toc
{
    return &$T2H_print_misc(@_);
}
sub T2H_DEFAULT_print_Overview
{
    return &$T2H_print_misc(@_);
}
sub T2H_DEFAULT_print_Footnotes
{
    return &$T2H_print_misc(@_);
}
sub T2H_DEFAULT_print_About
{
    return &$T2H_print_misc(@_);
}

sub T2H_DEFAULT_print_misc_header
{
    my $fh = shift;
    my $buttons = shift;
    &$T2H_print_page_head($fh, $buttons) if $T2H_SPLIT;
    &$T2H_print_head_navigation($fh, $buttons);
}
sub T2H_DEFAULT_print_misc_footer
{
    &$T2H_print_foot_navigation(@_);
    &$T2H_print_page_foot(@_) if $T2H_SPLIT;
}
sub T2H_DEFAULT_print_misc
{
    my $fh = shift;
    my $buttons = \@T2H_MISC_BUTTONS;
    &$T2H_print_misc_header($fh, $buttons);
    print $fh "<h1>$T2H_NAME{This}</h1>\n";
    t2h_print_lines($fh);
    &$T2H_print_misc_footer($fh, $buttons);
}

###################################################################
# chapter_header and chapter_footer are only called if
# T2H_SPLIT eq 'chapter'
# chapter_header: after print_page_head, before print_section
# chapter_footer: after print_section of last section, before print_page_foot
#
# If you want to get rid of navigation stuff after each section,
# redefine print_section such that it does not call print_navigation,
# and put print_navigation into print_chapter_header
sub T2H_DEFAULT_print_chapter_header
{
    # nothing to do there, by default
    if (! $T2H_SECTION_NAVIGATION)
    {
        my $fh = shift;
        my $buttons = \@T2H_CHAPTER_BUTTONS;
        &$T2H_print_navigation($fh, $buttons);
        print $fh "\n<hr size=\"2\">\n";
    }
}

sub T2H_DEFAULT_print_chapter_footer
{
    my $fh = shift;
    my $buttons = \@T2H_CHAPTER_BUTTONS;
    &$T2H_print_navigation($fh, $buttons);
}

###################################################################
# Layout of standard header and footer
#

sub T2H_DEFAULT_print_page_head
{
    my $fh = shift;
    my $longtitle = "$T2H_THISDOC{title}";
    $longtitle .= ": $T2H_NAME{This}" if exists $T2H_NAME{This};
    print $fh <<EOT;
$T2H_DOCTYPE
<html>
$T2H_THISDOC{'copying'}<!-- Created on $T2H_THISDOC{today} by $T2H_THISDOC{program} -->
<!--
$T2H_THISDOC{program_authors}
-->
<head>
<title>$longtitle</title>

<meta name="description" content="$longtitle">
<meta name="keywords" content="$longtitle">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="Generator" content="$T2H_THISDOC{program}">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
$T2H_EXTRA_HEAD
</head>

<body $T2H_BODYTEXT>
$T2H_AFTER_BODY_OPEN
EOT
}

sub T2H_DEFAULT_print_page_foot
{
    my $fh = shift;
    print $fh <<EOT;
<p>
 <font size="-1">
  This document was generated $T2H_ADDRESS
  using <a href="$T2H_THISDOC{program_homepage}"><i>$T2H_THISDOC{program}</i></a>.
 </font>
 <br>
$T2H_PRE_BODY_CLOSE
</p>
</body>
</html>
EOT
}

###################################################################
# Layout of navigation panel

sub T2H_DEFAULT_print_head_navigation
{
    my $fh = shift;
    my $buttons = shift;
    if ($T2H_VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
<table border="0" cellpadding="0" cellspacing="0">
<tr valign="top">
<td align="left">
EOT
    }
    t2h_print_lines($fh, $T2H_THIS_HEADER);
    &$T2H_print_navigation($fh, $buttons, $T2H_VERTICAL_HEAD_NAVIGATION);
    if ($T2H_VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
</td>
<td align="left">
EOT
    }
    elsif (defined $T2H_SPLIT
           and ($T2H_SPLIT eq 'section'))
    {
        print $fh "<hr size=\"1\">\n";
    }
}

sub T2H_DEFAULT_print_foot_navigation
{
    my $fh = shift;
    my $buttons = shift;
    my $nwords = shift;
    if ($T2H_VERTICAL_HEAD_NAVIGATION)
    {
        print $fh <<EOT;
</td>
</tr>
</table>
EOT
    }
    print $fh "<hr size=\"1\">\n";
    &$T2H_print_navigation($fh, $buttons) if (defined $nwords
                                    and $nwords >= $T2H_WORDS_IN_PAGE)
}

######################################################################
# navigation panel
#
# how to create IMG tag
sub T2H_DEFAULT_button_icon_img
{
    my $button = shift;
    my $icon = shift;
    my $name = shift;
    return '' if (!defined($icon));
    if (defined($name) && $name)
    {
        $name = ": $name";
    }
    else
    {
        $name = '';
    }
    $button = "" if (!defined ($button));
    return qq{<img src="$icon" border="0" alt="$button$name" align="middle">};
}

sub T2H_DEFAULT_print_navigation
{
    my $fh = shift;
    my $buttons = shift;
    my $vertical = shift;
    my $spacing = 1;
    print $fh '<table cellpadding="', $spacing, '" cellspacing="', $spacing,
      "\" border=\"0\">\n";

    print $fh "<tr>" unless $vertical;
    for my $button (@$buttons)
    {
        print $fh qq{<tr valign="top" align="left">\n} if $vertical;
        print $fh qq{<td valign="middle" align="left">};

        if (ref($button) eq 'CODE')
        {
            &$button($fh, $vertical);
        }
        elsif ($button eq ' ')
        {                       # handle space button
            print $fh
                $T2H_ICONS && $T2H_ACTIVE_ICONS{' '} ?
                    &$T2H_button_icon_img($button, $T2H_ACTIVE_ICONS{' '}) :
                        $T2H_NAVIGATION_TEXT{' '};
            next;
        }
        elsif ($T2H_HREF{$button})
        {                       # button is active
            my $btitle = $T2H_BUTTONS_GOTO{$button} ?
                'title="' . ucfirst($T2H_BUTTONS_GOTO{$button}) . '"' : '';
            if ($T2H_ICONS && $T2H_ACTIVE_ICONS{$button})
            {                   # use icon
                print $fh '' .
                    &$t2h_anchor('',
                                $T2H_HREF{$button},
                                &$T2H_button_icon_img($button,
                                                    $T2H_ACTIVE_ICONS{$button},
                                                      $T2H_NAME{$button}),
                                $btitle
                               );
            }
            else
            {                   # use text
                print $fh
                    '[' .
                        &$t2h_anchor('',
                                    $T2H_HREF{$button},
                                    $T2H_NAVIGATION_TEXT{$button},
                                    $btitle
                                   ) .
                                       ']';
            }
        }
        else
        {                       # button is passive
            print $fh
                $T2H_ICONS && $T2H_PASSIVE_ICONS{$button} ?
                    &$T2H_button_icon_img($button,
                                          $T2H_PASSIVE_ICONS{$button},
                                          $T2H_NAME{$button}) :

                                              "[" . $T2H_NAVIGATION_TEXT{$button} . "]";
        }
        print $fh "</td>\n";
        print $fh "</tr>\n" if $vertical;
    }
    print $fh "</tr>" unless $vertical;
    print $fh "</table>\n";
}

######################################################################
# Frames: this is from "Richard Y. Kim" <ryk@coho.net>
# Should be improved to be more conforming to other _print* functions
# FIXME pass toc_file and main_file as args or in $T2H_THISDOC ?

sub T2H_DEFAULT_print_frame
{
    my $fh = shift;
    my $toc_file = shift;
    my $main_file = shift;
    print $fh <<EOT;
$T2H_FRAMESET_DOCTYPE
<html>
<head><title>$T2H_THISDOC{title}</title></head>
<frameset cols="140,*">
  <frame name="toc" src="$toc_file">
  <frame name="main" src="$main_file">
</frameset>
</html>
EOT
}

sub T2H_DEFAULT_print_toc_frame
{
    my $fh = shift;
    my $stoc_lines = shift;
    &$T2H_print_page_head($fh);
    print $fh <<EOT;
<h2>Content</h2>
EOT
    print $fh map {s/\bhref=/target="main" href=/; $_;} @$stoc_lines;
    print $fh "</body></html>\n";
}

sub T2H_DEFAULT_toc_body($$$)
{
    my $elements_list = shift;
    my $do_contents = shift;
    my $do_scontents = shift;
    return unless ($do_contents or $do_scontents or $T2H_FRAMES);
    my $current_level = 0;
    my $toc_nr = 0;
    my $ul_style = $T2H_NUMBER_SECTIONS ? ' style="list-style: none"' : ''; 
    foreach my $element (@$elements_list)
    {
        next if ($element->{'top'} or $element->{'index_page'});
        my $ind = '  ' x $current_level;
        my $level = $element->{'toc_level'};
        if ($level > $current_level)
        {
            while ($level > $current_level)
            {
                $current_level++;
                my $ln = "\n$ind<ul${ul_style}>\n";
                $ind = '  ' x $current_level;
                push(@T2H_TOC_LINES, $ln);
            }
        }
        elsif ($level < $current_level)
        {
            while ($level < $current_level)
            {
                $current_level--;
                $ind = '  ' x $current_level;
                push(@T2H_TOC_LINES, "</li>\n$ind</ul></li>\n");
            }
        }
        else
        {
            push(@T2H_TOC_LINES, "</li>\n");
        }
        $toc_nr++;
        my $file = '';
        $file = $element->{'file'} if ($T2H_SPLIT);
        my $entry = "<li>" . &$t2h_anchor('TOC' . $toc_nr, "$file#$element->{'id'}",$element->{'text'});
        push (@T2H_TOC_LINES, $ind . $entry);
        push(@T2H_STOC_LINES, $entry. "</li>\n") if ($level == 1);
    }
    while (0 < $current_level)
    {
        $current_level--;
        my $ind = '  ' x $current_level;
        push(@T2H_TOC_LINES, "</li>\n$ind</ul>\n");
    }
    @T2H_TOC_LINES = () unless ($do_contents);
    @T2H_STOC_LINES = () unless ($do_scontents or $T2H_FRAMES);
    if (@T2H_STOC_LINES)
    {
        unshift @T2H_STOC_LINES, "<ul${ul_style}>\n";
        push @T2H_STOC_LINES, "</ul>\n";
    }
}
######################################################################
# About page
#

# T2H_PRE_ABOUT can be a function reference or a scalar.
# Note that if it is a scalar, T2H_InitGlobals has not been called,
# and all global variables like $T2H_ADDRESS are not available.
$T2H_PRE_ABOUT = sub
{
    return <<EOT;
  This document was generated $T2H_ADDRESS
  using <a href="$T2H_THISDOC{program_homepage}"><i>$T2H_THISDOC{program}</i></a>.
EOT
};

# If customizing $T2H_AFTER_ABOUT, be sure to put the content inside <p></p>.
$T2H_AFTER_ABOUT = '';

my %T2H_BUTTONS_EXAMPLE =
    (
     'Top',         ' &nbsp; ',
     'Contents',    ' &nbsp; ',
     'Overview',    ' &nbsp; ',
     'Index',       ' &nbsp; ',
     'Back',        '1.2.2',
     'FastBack',    '1',
     'Prev',        '1.2.2',
     'Up',          '1.2',
     'Next',        '1.2.4',
     'Forward',     '1.2.4',
     'FastForward', '2',
     'About',       ' &nbsp; ',
     'First',       '1.',
     'Last',        '1.2.4',
    );

sub T2H_DEFAULT_about_body
{
    my $about = "<p>\n";
    if (ref($T2H_PRE_ABOUT) eq 'CODE')
    {
        $about .= &$T2H_PRE_ABOUT();
    }
    else
    {
        $about .= $T2H_PRE_ABOUT;
    }
    $about .= <<EOT;
</p>
<p>
  The buttons in the navigation panels have the following meaning:
</p>
<table border="1">
  <tr>
    <th> Button </th>
    <th> Name </th>
    <th> Go to </th>
    <th> From 1.2.3 go to</th>
  </tr>
EOT

    for my $button (@T2H_SECTION_BUTTONS)
    {
        next if $button eq ' ' || ref($button) eq 'CODE';
        $about .= "  <tr>\n    <td align=\"center\">";
        $about .=
            ($T2H_ICONS && $T2H_ACTIVE_ICONS{$button} ?
             &$T2H_button_icon_img($button, $T2H_ACTIVE_ICONS{$button}) :
             ' [' . $T2H_NAVIGATION_TEXT{$button} . '] ');
        $about .= "</td>\n";
        $about .= <<EOT;
    <td align="center">$button</td>
    <td>$T2H_BUTTONS_GOTO{$button}</td>
    <td>$T2H_BUTTONS_EXAMPLE{$button}</td>
  </tr>
EOT
    }

    $about .= <<EOT;
</table>

<p>
  where the <strong> Example </strong> assumes that the current position
  is at <strong> Subsubsection One-Two-Three </strong> of a document of
  the following structure:
</p>

<ul>
  <li> 1. Section One
    <ul>
      <li>1.1 Subsection One-One
        <ul>
          <li>...</li>
        </ul>
      <li>1.2 Subsection One-Two
        <ul>
          <li>1.2.1 Subsubsection One-Two-One</li>
          <li>1.2.2 Subsubsection One-Two-Two</li>
          <li>1.2.3 Subsubsection One-Two-Three &nbsp; &nbsp;
            <strong>&lt;== Current Position </strong></li>
          <li>1.2.4 Subsubsection One-Two-Four</li>
        </ul>
      </li>
      <li>1.3 Subsection One-Three
        <ul>
          <li>...</li>
        </ul>
      </li>
      <li>1.4 Subsection One-Four</li>
    </ul>
  </li>
</ul>
$T2H_AFTER_ABOUT
EOT
    return $about;
}

########################################################################
# Control of formatting:
# 1.) For some changes, it is often enough to change the value of
#     some global map. It might necessitate building a little
#     function along with the change in hash, if the change is the use
#     of another function (in style_map).
# 2.) For other changes, reimplement one of the t2h_default_<fnc>* routines,
#     give them another name, and assign them to the respective
#     $t2h_<fnc> variable (below).


#
# accent map, TeX command to ISO name
#
%accent_map = (
          '"',  'uml',
          '~',  'tilde',
          '^',  'circ',
          '`',  'grave',
          '\'', 'acute',
          '=', '',
         );

#
# texinfo "simple things" (@foo) to HTML ones
#
%simple_map = (
           # cf. makeinfo.c
           "*", "<br>",     # HTML+
           " ", "&nbsp;",
           "\t", "&nbsp;",
           "-", "&#173;",	 # soft hyphen
           "\n", "&nbsp;",
           "|", "",
       # spacing commands
           ":", "",
           "!", "!",
           "?", "?",
           ".", ".",
           "-", "",
           '@', '@',
           '}', '}',
           '{', '{',
          );
# this map is used in preformatted text
%simple_map_pre = %simple_map;
$simple_map_pre{'*'} = "\n";

#
# texinfo "things" (@foo{}) to HTML ones
#
%things_map = (
               'TeX', 'TeX',
               'br', '<br>',     # paragraph break
               'bullet', '*',
               #'copyright', '(C)',
               'copyright', '&copy;',
               'dots', '<small>...</small>',
               'enddots', '<small>....</small>',
               'equiv', '==',
               'error', 'error--&gt;',
               'expansion', '==&gt;',
               'minus', '-',
               'point', '-!-',
               'print', '-|',
               'result', '=&gt;',
               # APA: &pretty_date requires $MONTH_NAMES and $T2H_LANG
               # to be initialized.  The latter gets initialized by
               # &SetDocumentLanguage in &main.
               # We set following hash entry in &main afterwards.
               # 'today', &pretty_date,
               'aa', '&aring;',
               'AA', '&Aring;',
               'ae', '&aelig;',
               'oe', '&oelig;', #pertusus: also &#156; which one is better ?
               'AE', '&AElig;',
               'OE', '&OElig;', #pertusus: also &#140; which one is better ?
               'o',  '&oslash;',
               'O',  '&Oslash;',
               'ss', '&szlig;',
               'l', '/l',
               'L', '/L',
               'exclamdown', '&iexcl;',
               'questiondown', '&iquest;',
               'pounds', '&pound;'
             );

# This map is used in preformatted environments
%pre_map = %things_map;
$pre_map{'dots'} = '...';
$pre_map{'enddots'} = '....';
$pre_map{'br'} = "\n";

#
# texinfo styles (@foo{bar}) to HTML ones
#
# When the value begins with & the function with that name is used to do the
# html. The first argument is the text enclosed within {}, the second is the
# style name (which is also the key of the hash)
#
# Otherwithe the value is the html element used to enclose the text, and if
# there is a " the resulting text is also enclosed within `'
%style_map = (
      'acronym',    '',
      'asis',       '',
      'b',          'b',
      'cite',       'cite',
      'code',       'code',
      'command',    'code',
      'ctrl',       '&do_ctrl',   # special case
      'dfn',        'em',         # DFN tag is illegal in the standard
      'dmn',        '',           # useless
      'email',      '&do_email',  # insert a clickable email address
      'emph',       'em',
      'env',        'code',
      'file',       '"tt',        # will put quotes, cf. &apply_style
      'i',          'i',
      'kbd',        'kbd',
      'key',        'kbd',
      'math',       '&t2h_math',
      'option',     '"samp',      # will put quotes, cf. &apply_style
      'r',          '',           # unsupported
      'samp',       '"samp',      # will put quotes, cf. &apply_style
      'sc',         '&do_sc',     # special case
      'strong',     'strong',
      't',          'tt',
      'titlefont',  '',           # useless
      'uref',       '&do_uref',   # insert a clickable URL
      'url',        '&do_url',    # insert a clickable URL
      'var',        'var',
      'verb',       'tt',
      'w',          '',           # unsupported
      'H',          '&do_accent',
      'dotaccent',  '&do_accent',
      'ringaccent', '&do_accent',
      'tieaccent',  '&do_accent',
      'u',          '&do_accent',
      'ubaraccent', '&do_accent',
      'udotaccent', '&do_accent',
      'v',          '&do_accent',
      ',',          '&do_accent',
      'm_cedilla',  '&do_accent',
      'dotless',    '&do_accent'
     );


foreach my $accent (keys(%accent_map))
{
    $style_map{$accent} = '&do_accent';
}

# This is used for style in preformatted sections
%style_map_pre = %style_map;
$style_map_pre{'sc'} = '&do_sc_pre';

#
# texinfo format (@foo/@end foo) to HTML ones
#
%format_map = (
       'quotation',  'blockquote',
       # lists
       'itemize',    'ul',
       'enumerate',  'ol',
       'multitable',  'table',
       );

#
# texinfo format to align attribute of paragraphs
#

%paragraph_style = (
      'center' => 'center',
      'flushleft' => 'left',
      'flushright' => 'right',
      );
      
# an eval of these $complex_format_map->{what}->{'begin'} yields beginning
# an eval of these $complex_format_map->{what}->{'end'} yields end
$complex_format_map =
{
 example =>
 {
  'begin' => q{"<table><tr>$T2H_EXAMPLE_INDENT_CELL<td class=\"example\">"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => ''
 },
 smallexample =>
 {
  'begin' => q{"<table><tr>$T2H_SMALL_EXAMPLE_INDENT_CELL<td class=\"smallexample\"><font size=\"$T2H_SMALL_FONT_SIZE\">"},
  'end' => q{'</font></td></tr></table>'},
  'pre_style' => ''
 },
 display =>
 {
  'begin' => q{"<table><tr>$T2H_EXAMPLE_INDENT_CELL<td class=\"display\">"},
  'end' => q{'</td></tr></table>'},
  'pre_style' => 'style="font-family: serif"'
 },
 smalldisplay =>
 {
 # FIXME font is deprecated and forbidden in pre, while pre is forbidden in font
  'begin' => q{"<table><tr>$T2H_SMALL_EXAMPLE_INDENT_CELL<td class=\"smalldisplay\"><font size=\"$T2h_SMALL_FONT_SIZE\">"},
  'end' => q{'</font></td></tr></table>'},
  'pre_style' => 'style="font-family: serif"'
 }
};

$complex_format_map->{lisp} = $complex_format_map->{example};
$complex_format_map->{smalllisp} = $complex_format_map->{smallexample};
$complex_format_map->{format} = $complex_format_map->{display};
$complex_format_map->{smallformat} = $complex_format_map->{smalldisplay};

#
# texinfo definition shortcuts to real ones
#
%def_map = (
    # basic commands
    'deffn', 0,
    'defvr', 0,
    'deftypefn', 0,
    'deftypeop', 0,
    'deftypevr', 0,
    'defcv', 0,
    'defop', 0,
    'deftp', 0,
    # basic x commands
    'deffnx', 0,
    'defvrx', 0,
    'deftypefnx', 0,
    'deftypeopx', 0,
    'deftypevrx', 0,
    'defcvx', 0,
    'defopx', 0,
    'deftpx', 0,
    # shortcuts
    'defun', 'deffn Function',
    'defmac', 'deffn Macro',
    'defspec', 'deffn {Special Form}',
    'defvar', 'defvr Variable',
    'defopt', 'defvr {User Option}',
    'deftypefun', 'deftypefn Function',
    'deftypevar', 'deftypevr Variable',
    'defivar', 'defcv {Instance Variable}',
    'deftypeivar', 'defcv {Instance Variable}', # NEW: FIXME
    'defmethod', 'defop Method',
    'deftypemethod', 'defop Method', # NEW:FIXME
    # x shortcuts
    'defunx', 'deffnx Function',
    'defmacx', 'deffnx Macro',
    'defspecx', 'deffnx {Special Form}',
    'defvarx', 'defvrx Variable',
    'defoptx', 'defvrx {User Option}',
    'deftypefunx', 'deftypefnx Function',
    'deftypevarx', 'deftypevrx Variable',
    'defivarx', 'defcvx {Instance Variable}',
    'defmethodx', 'defopx Method',
          );

#
# things to skip
#
# Depending on the value, things following the macro may be skipped:
# 
# if the value is 'line' then the remaining of the line is skipped
# if the value is 'arg' then an argument is skipped
# if the value is 'space' then any space (including new lines)
# otherwise only the macro, or @end macro is skipped
# 
%to_skip = (
        # comments
        'comment', 'line',
        'c', 'line',
        # not needed after pass_texi
        'raisesections', 1,
        'lowersections', 1,
        'bye', 'line',
        'contents', 1,
        'shortcontents', 1,
        'summarycontents', 1,
        # useless
        'detailmenu', 1,
        'end detailmenu', 1,
        'direntry', 1,
        'end direntry', 1,
        'footnotestyle', 'arg',
        # unsupported commands (formatting)
        'afourpaper', 1,
        'pagesizes', 'arg',
        'cropmarks', 1,
        'finalout', 1,
        'headings', 'arg',
        'sp', 'arg',
        'need', 'arg',
        'page', 1,
        'setchapternewpage', 'arg',
        'everyheading', 'line',
        'everyfooting', 'line',
        'evenheading', 'line',
        'evenfooting', 'line',
        'oddheading', 'line',
        'oddfooting', 'line',
        'smallbook', 1,
        'vskip', 1,
        'filbreak', 1,
        'paragraphindent', 1,
        # unsupported formats
        'cartouche', 1,
        'end cartouche', 1,
        'group', 1,
        'end group', 1,
        'refill', 'space',  # FIXME pertusus: seems bad to me to remove 
        'exdent', 'space',  # trailing spaces, but it was like that in the
        'noindent', 'space' # original code
     );

# functions used for styles
sub do_ctrl($;$) { return "^$_[0]" }

sub do_email($;$)
{
    my($addr, $text) = split(/,\s*/, $_[0]);

    $text = $addr unless $text;
    &$t2h_anchor('', "mailto:$addr", $text);
}

sub do_sc($;$)
{
    # pertusus: l2h just do the same...
    # return l2h_ToLatex("{\\sc ".$_[0]."}") if ($T2H_L2H);
    return "<small>\U$_[0]\E</small>";
}

sub do_sc_pre($;$)
{ # no small allowed in pre
    return "\U$_[0]\E";
}

sub t2h_math($;$)
{
    return '<em>' . $_[0] . '</em>';
}

sub do_uref($;$)
{
    my($url, $text, $only_text) = split(/,\s*/, $_[0]);
    $text = $only_text if $only_text;
    $text = $url unless $text;
    return &$t2h_anchor('', $url, $text);
}

sub do_url($;$) { return &$t2h_anchor('', $_[0], $_[0]); }

sub do_accent($$)
{
    return "$_[0]''" if $_[1] eq 'H';
    return "$_[0]." if $_[1] eq 'dotaccent';
    return "$_[0]*" if $_[1] eq 'ringaccent';
    return "$_[0]".'[' if $_[1] eq 'tieaccent';
    return "$_[0]".'(' if $_[1] eq 'u';
    return "$_[0]".'=' if $_[1] eq '=';
    return "$_[0]_" if $_[1] eq 'ubaraccent';
    return ".$_[0]" if $_[1] eq 'udotaccent';
    return "$_[0]&lt;" if $_[1] eq 'v';
    return "&$_[0]cedil;" if ($_[1] eq ',' or $_[1] eq 'm_cedilla');
    return "$_[0]" if $_[1] eq 'dotless';
    return "&$_[0]$accent_map{$_[1]};" if $accent_map{$_[1]};
    return undef;
}

# formatting functions

$t2h_anchor            = \&t2h_default_anchor;
$t2h_def_item          = \&t2h_default_def_item;
$t2h_def               = \&t2h_default_def;
$t2h_menu              = \&t2h_default_menu;
$t2h_menu_entry        = \&t2h_default_menu_entry;
$t2h_menu_comment      = \&t2h_default_menu_comment;
$t2h_ref_beginning     = \&t2h_default_ref_beginning;
$t2h_info_ref          = \&t2h_default_info_ref;
$t2h_book_ref          = \&t2h_default_book_ref;
$t2h_internal_ref      = \&t2h_default_internal_ref;
$t2h_table_item        = \&t2h_default_table_item;
$t2h_table_line        = \&t2h_default_table_line;
$t2h_row               = \&t2h_default_row;
$t2h_cell              = \&t2h_default_cell;
$t2h_list_item         = \&t2h_default_list_item;
$t2h_comment           = \&t2h_default_comment;
$t2h_def_line	       = \&t2h_default_def_line;
$t2h_raw               = \&t2h_default_raw;
$t2h_heading           = \&t2h_default_heading;
$t2h_paragraph         = \&t2h_default_paragraph;
$t2h_preformatted      = \&t2h_default_preformatted;
$t2h_table             = \&t2h_default_table;
$t2h_foot_line_and_ref = \&t2h_default_foot_line_and_ref;
$t2h_image             = \&t2h_default_image;
$t2h_index_entry_label = \&t2h_default_index_entry_label;
$t2h_index_entries     = \&t2h_default_index_entries;
$t2h_index_summary     = \&t2h_default_index_summary;

# $name           :   anchor name
# $href           :   anchor href
# text            :   text displayed
# extra_attribs   :   added to anchor attributes list
sub t2h_default_anchor($;$$$)
{
    my($name, $href, $text, $extra_attribs) = @_;
    my @result = ();

    push(@result, '<a');
    push(@result, ' name="', $name, '"') if $name;
    if ($href)
    {
        $href =~ s|^$T2H_HREF_DIR_INSTEAD_FILE|./|
            if ($T2H_HREF_DIR_INSTEAD_FILE);
        push(@result, ' href="', $href, '"');
    }
    push(@result, ' ', $extra_attribs) if $extra_attribs;
    push(@result, '>');
    push(@result, $text) if $text;
    push(@result, '</a>');
    return join('', @result);
}

# format the text of a @deffn/@end deffn
sub t2h_default_def_item($)
{
    my $text = shift;

    if ($text =~ /[^\s]/)
    {
        $text = $T2H_DEF_TABLE ? ('<tr><td colspan="2">'. $text .'</td></tr>')
            : ('<dd>' . $text . '</dd>');
    }
    return $text;
}

# format the container for the @deffn line and text
sub t2h_default_def($)
{
    my $text = shift;

    return  $T2H_DEF_TABLE ?
         ("<table width=\"100%\">\n" . $text . "</table>\n") : 
         ("<dl>\n" . $text . "</dl>\n");
}

# a whole menu
sub t2h_default_menu($)
{
    my $text = shift;

    if ($text =~ /[^\s]/)
    {
        return "<table border=\"0\" cellspacing=\"0\">\n" . $text. "</table>\n";
    }
    return '';
}

# a menu entry (ref + description)
sub t2h_default_menu_entry($$$;$)
{
    my $entry = shift;
    my $descr = shift;
    my $state = shift;
    my $href = shift;
    $entry = &$t2h_anchor('', $href, $entry) if ($href);
    return '<tr><td>' . do_preformatted($entry . $descr, $state) . '</td></tr>' if ($state->{'preformatted'});
    return '<tr><td align="left" valign="top">' .
              $entry .
          '</td><td>&nbsp;&nbsp;</td>' .
          '<td align="left" valign="top">' . $descr .
          "</td></tr>\n";
}

# a menu comment (between menu lines)
sub t2h_default_menu_comment($)
{
    my $text = shift;
    my $state = shift;

    if ($text =~ /[^\s]/)
    {
         return '<tr><th colspan="3" align="left" valign="top">' . $text . '</th></tr>';
    }
    return '';
}

# beginning of a ref
sub t2h_default_ref_beginning($)
{
    my $type = shift;
    if ($type eq 'xref')
    {
        return "$T2H_WORDS->{'See'} ";
    }
    elsif ($type eq 'pxref')
    {
        return  "$T2H_WORDS->{'see'} ";
    }
    else
    {
         return '';
    }
}

# ref to an info file
sub t2h_default_info_ref($$$)
{
    my $type = shift;
    my $node = shift;
    my $file = shift;
    if ($node)
    { #i18n
        return &$t2h_ref_beginning($type) .  "Info `$file', node `$node'";
    }
    else 
    {
        return  &$t2h_ref_beginning($type) . "`$file'";
    }
}

# ref to a book
sub t2h_default_book_ref($$$)
{
    my $type = shift;
    my $section = shift;
    my $book = shift;
    return &$t2h_ref_beginning($type) . "$T2H_WORDS->{'section'} `$section' in " . apply_style ('cite', $book);
}

# ref to a node or section in the document
sub t2h_default_internal_ref($$$$$)
{
    my $type = shift;
    my $href = shift;
    my $short_name = shift;
    my $name = shift;
    my $is_section = shift;

    my $begin = &$t2h_ref_beginning($type); 
    if (! $T2H_SHORT_REF)
    {
        $begin .= "$T2H_WORDS->{'section'} " if ($begin and $is_section);
        return $begin . &$t2h_anchor('', $href, $name);
    }
    else
    {
        return $begin . &$t2h_anchor('', $href, $short_name);
    }
}

# text after @item in table, vtable and ftable
sub t2h_default_table_item($$$)
{
    my $text = shift;
    my $do_index = shift;
    my $state = shift;
    my $index_label;
    if ($do_index)
    {
        $index_label = do_index_entry_label($state);
        print STDERR "Bug: no index entry for $text" unless defined($index_label);
    }
    $text .= $index_label if ($do_index and defined($index_label));
    return '<dt>' . $text . '</dt>' . "\n";
}

# text on the lineq following @item in table, vtable and ftable
sub t2h_default_table_line($)
{
    my $text = shift;

    if ($text =~ /[^\s]/)
    {
         return '<dd>' . $text . '</dd>' . "\n";
    }
    return '';
}

# row in multitable
sub t2h_default_row($)
{
    my $text = shift;

    if ($text =~ /[^\s]/)
    {
         return '<tr>' . $text . '</tr>' . "\n";
    }
    return '';
}

# cell in multitable
sub t2h_default_cell($)
{
    my $text = shift;
    return '<td>' . $text . '</td>';
}

# item in list
sub t2h_default_list_item($$)
{
   my $text = shift;
# FIXME add . "\n" ?
   return '<li>' . $text . '</li>';
}

# an html comment
sub t2h_default_comment($)
{
    my $text = shift;
    return '<!--' . $text . '-->';
}

# format the whole table ftable or vtable
sub t2h_default_table($)
{
    my $text = shift;

    if ($text =~ /[^\s]/)
    {
        return "<dl compact=\"compact\">\n" . $text. "</dl>\n";
    }
    return '';
}

# a paragraph
sub t2h_default_paragraph($$)
{
    my $text = shift;
    my $align = shift;
    return '' if ($text =~ /^\s*$/);
    my $open = '<p>';
    if ($align)
    {
        $open = "<p align=\"$align\">";
    }
    return $open. "$text</p>";
}

# a preformatted section
sub t2h_default_preformatted($$)
{
    my $text = shift;
    my $pre_style = shift;

    return '' if ($text eq '');
    my $open = '<pre>';
    if ($pre_style)
    {
        $open = "<pre $pre_style>";
    }
    return $open . "$text</pre>";
}

# a heading of an element
sub t2h_default_heading($)
{
    my $element = shift;
    return '' if ($element->{'text'} =~ /^\s*$/);
    my $level = 3;
    if (!$element->{'node'})
    {
	$level = $element->{'level'};
        print STDERR "Bug: $element->{'texi'} level undef\n" if (!defined($level));
        $level = 1 if ($level == 0);
    }
    return "<h$level> $element->{'text'} </h$level>\n";
}

# formatting of raw regions
# ih T2H_L2H is true another mechanism is used for tex
sub t2h_default_raw($$)
{
    my $style = shift;
    my $text = shift;
    if ($style eq 'verbatim' or $style eq 'tex')
    {
        return '<pre>' . protect_html($text) . '</pre>';
    }
    elsif ($style eq 'html')
    {
        return $text;
    }
    else
    {
        warn "$WARN (bug) unknown style $style\n";
        return protect_html($text);
    }
}

# do footnote header for the footnotes file, and ref to the footnote file
# for the text where the footnote is
sub t2h_default_foot_line_and_ref($$$$$)
{
    my $foot_num = shift;
    my $footid = shift;
    my $docid = shift;
    my $from_file = shift;
    my $footnote_file = shift;
    
    my $foot = "($foot_num)";
    return ("<h3>" . &$t2h_anchor($footid, "$from_file#$docid", $foot) . "</h3>\n", 
         &$t2h_anchor($docid, "$footnote_file#$footid", $foot));
}

sub t2h_default_image($$$)
{
    my $image = shift;
    my $base = shift;
    my $preformatted = shift;
    if ($preformatted)
    {
        return "[ $base ]";
    }
    else
    {
        return ($T2H_CENTER_IMAGE ?
          "<div align=\"center\"><img src=\"$image\" alt=\"$base\"></div>" :
          "<img src=\"$image\" alt=\"$base\">");
    }
}

# label for an index entry, target of the link from the index page
sub t2h_default_index_entry_label($$)
{
    my $label = shift;
    my $preformatted = shift;
    $label = &$t2h_anchor($label) if ($label);
    $label .= "\n" if ($label and !$preformatted);
    return $label;
}

# process definition commands line @deffn for example
sub t2h_default_def_line($$$)
{
    my $tag = shift;
    my $line = shift;
    my $state = shift;
    
    $state->{'deff'} = $tag;
    
    if (defined($def_map{$tag}) and $def_map{$tag})
    {
        # substitute shortcuts for definition commands
        my $substituted = $def_map{$tag};
        $substituted =~ s/(\w+)//;
        $tag = $1;
        $line = $substituted . $line;
    }
    
    my ($type, $name, $ftype);
    ($line, $type, $name, $ftype) = parse_def($tag, $line);
    #print STDERR "Def $tag $name, $type\n";
    my $result = '';
    unless ($type)
    {
        warn "$ERROR bad $state->{'deff'}, no type\n";
        return '';
    }
    $type = substitute_line($type);
    $type .= ':' if (!$T2H_DEF_TABLE); # it's nicer like this
    unless ($name)
    {
        warn "$ERROR bad $state->{'deff'} nothing after the type\n";
        return '';
    }
    $name = substitute_line($name);
    $line = '' if (!$line);
    $result = $T2H_DEF_TABLE ? '' : '<dt>';
    if ($tag eq 'deffn' || $tag eq 'defvr' || $tag eq 'deftp')
    {
        if ($T2H_DEF_TABLE)
        {
            $result .= "<tr>\n<td align=\"left\"><b>$name</b>\n";
            $result .= substitute_line($line);
            $result .= "</td>\n";
            $result .= "<td align=\"right\">";
            $result .= "$type</td>\n</tr>\n";
        }
        else
        {
            #FIXME <u> is deprecated in xhtml 1.1
            #use <span style="text-description: underline"> ?
            $result .= "<u>$type</u> <b>$name</b>";
            $result .= substitute_line($line);
        }
    }
    elsif ($tag eq 'deftypefn' || $tag eq 'deftypevr'
        || $tag eq 'deftypeop' || $tag eq 'defcv'
        || $tag eq 'defop')
    {
        $ftype = substitute_line($ftype);
        if ($T2H_DEF_TABLE)
        {
            $result .= "<tr>\n<td align=\"left\"><b>$name</b>";
            $result .= substitute_line($line);
            $result .= "</td>\n";
            $result .= "<td align=\"right\">";
            $result .= "$type of $ftype</td>\n</tr>\n";
        }
        else
        {
            $result .= "<u>$type</u> $ftype <b>$name</b>";
            $result .= substitute_line($line);
        }
    }
    else
    {
        warn "$ERROR Unknown definition type: $tag\n";
        $result .= "<u>$type</u> <b>$name</b>";
        $result .= substitute_line($line);
    }
    $result .= do_index_entry_label($state);
    $result .= "</dt>\n" if (!$T2H_DEF_TABLE);
    return $result;
}

sub t2h_default_index_entries($$)
{
    my $element = shift;
    my $page = shift;
 
    #FIXME i18n
    my $result = '<table border="0">' . "\n" .
"<tr><td></td><th align=\"left\">Index Entry</th><th align=\"left\"> Section</th></tr>\n" .
"<tr><td colspan=\"3\"> <hr></td></tr>\n";

    for my $letter (@{$page->{Letters}})
    {
       $result .= '<tr><th>' .
            &$t2h_anchor("$element->{'id'}_" . protect_html($letter), '', protect_html($letter)) .
                "</th><td></td><td></td></tr>\n";
       for my $entry (@{$page->{EntriesByLetter}->{$letter}})
       {
           my $label = $entry->{'element'};
           my $entry_element = $label;
           # notice that we use the section associated with a node even when 
           # there is no with_section, i.e. when there is another node preceding
           # the sectionning command
           $entry_element = $entry_element->{'section_ref'} if ($entry_element->{'node'} and $entry_element->{'section_ref'});
           my $origin_href = '';
           $origin_href = $label->{'file'} if ($label->{'file'} ne $element->{'file'});
           if ($entry->{'label'})
           { 
               $origin_href .= '#' . $entry->{'label'};
           }
	   else
           {
               # If the $label element and the $index entry are on the same
               # file the label is prefered. If they aren't on the same file
               # the entry id is choosed as it means that the label element
               # and the index entry are separated by a printindex.
		 print STDERR "id undef $entry $entry->{'entry'}, $label->{'text'}\n"  if (!defined($entry->{'id'}));
               if ($entry->{'file'} eq $label->{'file'})
               {
                   $origin_href .= '#' . $label->{'id'};
               }
               else
               {
                   $origin_href .= '#' . $entry->{'id'} ;
               }
           }
           $result .=
                "<tr><td></td><td valign=\"top\">" .
                &$t2h_anchor('', $origin_href, $entry->{entry}) .
                "</td><td valign=\"top\">" .
                &$t2h_anchor('', href($entry_element, $element->{'file'}), $entry_element->{'text'}) .
                "</td></tr>\n";
        }
        $result .= "<tr><td colspan=\"3\"> <hr></td></tr>\n";
    }
    $result .= "</table>";
    return $result;
}

sub t2h_default_index_summary($$)
{
    my $element = shift;
    my $index_elements = shift;
    my ($summary, $l1, $l2);

    #FIXME i18n
    $summary = '<table><tr><th valign="top">Jump to: &nbsp; </th><td>';
    for my $index_element_item (@$index_elements)
    {
        my $index_element = $index_element_item->{'element'};
        my $file = '';
        $file .= $index_element->{'file'} if ($index_element->{'file'} ne $element->{'file'});
        for my $letter (@{$index_element_item->{'page'}->{Letters}})
        {
            my $l = &$t2h_anchor('', "$file#$index_element->{'id'}_" . protect_html($letter),
                            "<b>" . protect_html($letter) . "</b>",
                            'style="text-decoration: none"')
                . "\n &nbsp; \n";
            if ($letter =~ /^[A-Za-z]/)
            {
                $l2 .= $l;
            }
            else
            {
                $l1 .= $l;
            }
        }
    }
    $summary .= $l1 . "<br>\n" if ($l1);
    $summary .= $l2 if ($l2);
    $summary .= '</td></tr></table>';
    return $summary;
}


######################################################################
# from here on, its l2h init stuff
#

## initialization for latex2html as for Singular manual generation
## obachman 3/99

#
# Options controlling Titles, File-Names, Tracing and Sectioning
#
$TITLE = '';

$SHORTEXTN = 0;

$LONG_TITLES = 0;

$DESTDIR = '';                  # should be overwritten by cmd-line argument

$NO_SUBDIR = 0;                 # should be overwritten by cmd-line argument

$PREFIX = '';                   # should be overwritten by cmd-line argument

$AUTO_PREFIX = 0;               # this is needed, so that prefix settings are used

$AUTO_LINK = 0;

$SPLIT = 0;

$MAX_LINK_DEPTH = 0;

$TMP = '';                      # should be overwritten by cmd-line argument

$DEBUG = 0;

$VERBOSE = 1;

#
# Options controlling Extensions and Special Features
#
$HTML_VERSION = "3.2";

$TEXDEFS = 1;                   # we absolutely need that

$EXTERNAL_FILE = '';

$SCALABLE_FONTS = 1;

$NO_SIMPLE_MATH = 1;

$LOCAL_ICONS = 1;

$SHORT_INDEX = 0;

$NO_FOOTNODE = 1;

$ADDRESS = '';

$INFO = '';

#
# Switches controlling Image Generation
#
$ASCII_MODE = 0;

$NOLATEX = 0;

$EXTERNAL_IMAGES = 0;

$PS_IMAGES = 0;

$NO_IMAGES = 0;

$IMAGES_ONLY = 0;

$REUSE = 2;

$ANTI_ALIAS = 1;

$ANTI_ALIAS_TEXT = 1;

#
#Switches controlling Navigation Panels
#
$NO_NAVIGATION = 1;
$ADDRESS = '';
$INFO = 0;                      # 0 = do not make a "About this document..." section

#
#Switches for Linking to other documents
#
# currently -- we don't care

$MAX_SPLIT_DEPTH = 0;           # Stop making separate files at this depth

$MAX_LINK_DEPTH = 0;            # Stop showing child nodes at this depth

$NOLATEX = 0;                   # 1 = do not pass unknown environments to Latex

$EXTERNAL_IMAGES = 0;           # 1 = leave the images outside the document

$ASCII_MODE = 0;                # 1 = do not use any icons or internal images

# 1 =  use links to external postscript images rather than inlined bitmap
# images.
$PS_IMAGES = 0;
$SHOW_SECTION_NUMBERS = 0;

### Other global variables ###############################################
$CHILDLINE = "";

# This is the line width measured in pixels and it is used to right justify
# equations and equation arrays;
$LINE_WIDTH = 500;

# Used in conjunction with AUTO_NAVIGATION
$WORDS_IN_PAGE = 300;

# The value of this variable determines how many words to use in each
# title that is added to the navigation panel (see below)
#
$WORDS_IN_NAVIGATION_PANEL_TITLES = 0;

# This number will determine the size of the equations, special characters,
# and anything which will be converted into an inlined image
# *except* "image generating environments" such as "figure", "table"
# or "minipage".
# Effective values are those greater than 0.
# Sensible values are between 0.1 - 4.
$MATH_SCALE_FACTOR = 1.5;

# This number will determine the size of
# image generating environments such as "figure", "table" or "minipage".
# Effective values are those greater than 0.
# Sensible values are between 0.1 - 4.
$FIGURE_SCALE_FACTOR = 1.6;


#  If both of the following two variables are set then the "Up" button
#  of the navigation panel in the first node/page of a converted document
#  will point to $EXTERNAL_UP_LINK. $EXTERNAL_UP_TITLE should be set
#  to some text which describes this external link.
$EXTERNAL_UP_LINK = "";
$EXTERNAL_UP_TITLE = "";

# If this is set then the resulting HTML will look marginally better if viewed
# with Netscape.
$NETSCAPE_HTML = 1;

# Valid paper sizes are "letter", "legal", "a4","a3","a2" and "a0"
# Paper sizes has no effect other than in the time it takes to create inlined
# images and in whether large images can be created at all ie
#  - larger paper sizes *MAY* help with large image problems
#  - smaller paper sizes are quicker to handle
$PAPERSIZE = "a4";

# Replace "english" with another language in order to tell LaTeX2HTML that you
# want some generated section titles (eg "Table of Contents" or "References")
# to appear in a different language. Currently only "english" and "french"
# is supported but it is very easy to add your own. See the example in the
# file "latex2html.config"
$TITLES_LANGUAGE = "english";

1;                              # This must be the last non-comment line

# End File texi2html.init
######################################################################

