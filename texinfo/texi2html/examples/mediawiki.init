# -*-perl-*-
######################################################################
# File: mediawiki.init
#
# Override values for various customizable procedures are set in this file
# in such a way as to create text suitable for pasting into a MediaWiki.
#
# Load the file with command-line 
# option -init-file mediawiki.init
#
# $Id: mediawiki.init,v 1.26 2009-10-05 08:44:34 pertusus Exp $

use strict;

html_default_load();

$USE_SECTIONS = 1;
$USE_NODES = undef;

# if this is set the sections are numbered, and section names and numbers 
# are used in references and menus (instead of node names).
$NUMBER_SECTIONS = 0;

# if this is set footnotes are on a separated page. Otherwise they are at
# the end of each file (if the document is split).
# At the end is better for the mediawiki output which is more per page
# oriented.
$FOOTNOTESTYLE = 'end';

# extension
$EXTENSION = undef;

# extension for nodes files when NODE_FILES is true
$NODE_FILE_EXTENSION = "";	    

#Â no title page at the beginning
$USE_TITLEPAGE_FOR_TITLE = 0;

# Use "title: section" name as the file name.
#$SECTION_AS_FILE_NAME = 1;

# if set and $SPLIT is set, then split index pages at the next letter
# after they have more than that many entries
undef $SPLIT_INDEX;

# Use preformatted menus.
$SIMPLE_MENU = 1;

$texi_formats_map{'direntry'} = 0;

push @command_handler_setup, \&mediawiki_initialize_variables;

my %mediawiki_doc_nr_to_file; # File name cache based on file index.
my %mediawiki_target_to_name;
my %mediawiki_special_file_name;
sub mediawiki_initialize_variables()
{
    %mediawiki_doc_nr_to_file = (); # File name cache based on file index.
    %mediawiki_target_to_name = ();
    %mediawiki_special_file_name = ();
}

$heading_text                 = \&mediawiki_heading_text;

sub mediawiki_heading_text($$$)
{
    my $command = shift;
    my $text = shift;
    my $level = shift;

    return '' if ($text !~ /\S/);
    $level = 1 if ($level == 0);
    return (("=" x $level) . "= $text =" . ("=" x $level) . "\n");
}

###################################################################
# Layout of standard header and footer
#

$print_page_head	      = \&mediawiki_print_page_head;
$print_page_foot	      = \&mediawiki_print_page_foot;

sub mediawiki_print_page_head($)
{
    my $fh = shift;
    print $fh "$AFTER_BODY_OPEN\n" if $AFTER_BODY_OPEN;
}

sub mediawiki_print_page_foot($)
{
    my $fh = shift;
    my $program_string = &$program_string();
    print $fh $program_string, "\n";
    print $fh $PRE_BODY_CLOSE, "\n" if $PRE_BODY_CLOSE;
}


# This function produces an anchor 
#
# arguments:
# $name           :   anchor name
# $href           :   anchor href
# $text           :   text displayed
# extra_attribs   :   added to anchor attributes list

$anchor = \&mediawiki_anchor;

sub mediawiki_anchor($;$$$)
{
    my $name = shift;
    my $href = shift;
    my $text = shift;
    my $attributes = shift; # ignored
    $href = '' if !defined $href or $href !~ /\S/;
    $text = '' if !defined $text or $text !~ /\S/;
    return $text if $name eq '' and $href eq '';
    $name = "<div id=\"$name\"></div>" if $name ne '';
    if (defined($href) and $href ne '')
    {
        my $wiki_href;
        my ($file, $target);

        if ($href =~ /^([^#]*)\#(.+)$/)
        {
            $file = $1;
            $target = $2;

            if (defined($mediawiki_target_to_name{$target}))
            {
                if ($file eq '')
                {
                    $target = $mediawiki_target_to_name{$target}->[0]->[1]->{'text'}
                      if ($mediawiki_target_to_name{$target}->[0]->[1]->{'text'} ne '');
                    $wiki_href = '#' . $target;
                }
                else
                {
                    foreach my $element (@{$mediawiki_target_to_name{$target}})
                    {
                        if ($file eq $element->[0])
                        {
                             $target = $element->[1]->{'text'} if ($element->[1]->{'text'} ne '');
                             $wiki_href = $file . '#' . $target;
                        }
                    }
                }
            }
            
            # Element pages, or misc relative links.
            # mediawiki 1.15.1 doesn't like anchor only urls, they work as wiki_ref.
            if (!defined($wiki_href) and ($mediawiki_special_file_name{$file} or $file eq ''))
            {
                $wiki_href = $href;
            }
        }
        # Element page, no target
        elsif ($mediawiki_special_file_name{$href})
        {
            $wiki_href = $href;
        }
        if (defined($wiki_href))
        {
	    $text = "|$text" if $text;
            # FIXME trouble with http://meta.wikimedia.org/wiki/Help:Namespace#Generic_namespace_names
            # and with http://en.wikipedia.org/wiki/Wikipedia:Naming_conventions_(technical_restrictions)#Forbidden_characters
    	    $href = "[[$wiki_href$text]]";
        }
        else
        {
	    $text = " $text" if $text;
    	    $href = "[$href$text]";
        }
    }
    else
    {
    	$href = $text;
    }
#print STDERR "!!!$name!$href!$text!$attributes!\n";
    return "$name$href";
}



# This function formats a footnote reference and the footnote text associated
# with a given footnote.
# The footnote reference is the text appearing in the main document pointing
# to the footnote text.
#
# arguments:
# absolute number of the footnote (in the document)
# relative number of the footnote (in the page)
# identifier for the footnote
# identifier for the footnote reference in the main document
# main document file
# footnote text file
# array with the footnote text lines 
# the state. See menu entry.
#
# returns:
# reference on an array containing the footnote text lines which should
#     have been updated
# the text for the reference pointing on the footnote text

# currently not used, default case is good enough, but still this is 
# not mediwikified.
#$foot_line_and_ref = \&mediawiki_foot_line_and_ref;
#$foot_section      = \&mediawiki_default_foot_section;

sub mediawiki_foot_line_and_ref($$$$$$$)
{
    my $number_in_doc = shift;
    my $number_in_page = shift;
    my $footnote_id = shift;
    my $place_id = shift;
    my $document_file = shift;
    my $footnote_file = shift;
    my $lines = shift;
    my $state = shift;
    
    unshift (@$lines,
          &$anchor($footnote_id, $document_file . "#$place_id",
                   "($number_in_doc)")
          . "\n");
    return ($lines, &$anchor($place_id,  $footnote_file . "#$footnote_id", 
           "($number_in_doc)"));
}

# formats a group of footnotes.
#
# argument:
# array reference on the footnotes texts lines 
#
# returns an array reference on the group of footnotes lines
sub mediawiki_foot_section($)
{
    my $lines = shift;
    unshift @$lines, "$DEFAULT_RULE\n" if $DEFAULT_RULE;
    unshift @$lines, "==== " . &$I('Footnotes') . " ====\n";
    return $lines; 
}

$button_formatting	      = \&mediawiki_button_formatting;

sub mediawiki_button_formatting
{
   my $button = shift;
   my $vertical = shift;
   my ($active, $passive) = HTML_DEFAULT_button_formatting($button, $vertical);
   if (defined($active) and !ref($button))
   {
      $active =~ s/^\[/\|/;
      $active =~ s/\]$/\|/;
   }
   return ($active, $passive);
}

$element_file_name = \&mediawiki_element_file_name;

sub mediawiki_element_file_name
{
    my $element = shift;
    my $type = shift;
    my $docu_name = shift;
    my $file;
#print STDERR "!$element!$type!$docu_name!\n";

    if (!$element)
    {
	if ($type =~ /^toc$/)
	{
	    $file = $docu_name . ": Table of Contents";
	}
	elsif ($type =~ /^stoc$/)
	{
	    $file = $docu_name . ": Short Table of Contents";
	}
	elsif ($type =~ /^foot$/)
	{
	    $file = $docu_name . ": Footnotes";
	}
	elsif ($type =~ /^about$/)
	{
	    $file = $docu_name . ": About this Manual";
	}
	elsif ($type =~ /^doc$/)
	{
	    $file = $docu_name;
	}
    }
    elsif (exists $mediawiki_doc_nr_to_file{$element->{'doc_nr'}})
    {
	$file = $mediawiki_doc_nr_to_file{$element->{'doc_nr'}};
	$mediawiki_doc_nr_to_file{$element->{'doc_nr'}} = $file;
    }
    else
    {
	my $name = main::substitute_line($element->{'texi'}, 'file name', {'remove_texi' => 1}, $element->{'line_nr'});
	$name =~ s,/,%47,g;
	$name =~ s,\\,%92,g;
	$file = "$docu_name" . (($type eq 'top') ? "" : ": " . $name);
	$mediawiki_doc_nr_to_file{$element->{'doc_nr'}} = $file;
    }
    if (defined($element))
    {
        push @{$mediawiki_target_to_name{$element->{'target'}}}, [ $file, $element ];
    }
    $mediawiki_special_file_name{$file} = 1;
    return $file;
}

# a preformatted region
# arguments:
# $text of the preformatted region
# $pre_style css style
# $class identifier for the preformatted region (example, menu-comment)
# The following is usefull if the preformatted is in an itemize.
# $leading_command is the leading formatting command (like @minus)
# $leading_command_formatted is the leading formatting command formatted
# $preformatted_number is a reference on the number of preformatteds appearing
#    in the format. The value should be increased if a preformatted is done
$preformatted      = \&mediawiki_preformatted;
sub mediawiki_preformatted($$$$$$$$$$)
{
    my $text = shift;
    my $pre_style = shift;
    my $class = shift;
    my $leading_command = shift;
    my $leading_command_formatted = shift;
    my $preformatted_number = shift;
    my $format = shift;
    my $item_nr = shift;
    my $enumerate_style = shift;
    my $number = shift;
    my $command_stack_at_end = shift;
    my $command_stack_at_begin = shift;

    return '' if ($text eq '');
    $leading_command_formatted = '' if (!defined($leading_command_formatted) or 
          exists($special_list_commands{$format}->{$leading_command}));
    if (defined($preformatted_number) and defined($$preformatted_number))
    {
        $$preformatted_number++;
    }

    my $top_stack = '';
    $top_stack = $command_stack_at_begin->[-1] if (scalar (@$command_stack_at_begin));
    if ($top_stack eq 'multitable')
    {
       $text =~ s/^\s*//;
       $text =~ s/\s*$//;
    }

    return "<pre class=\"$class\"><nowiki>$text</nowiki></pre>";
}



# format an index summary. This is a list of letters linking to the letter
# entries.
#
# arguments:
# array reference containing the formatted alphabetical letters
# array reference containing the formatted non lphabetical letters
$index_summary     = \&mediawiki_index_summary;
sub mediawiki_index_summary($$)
{
    my $alpha = shift;
    my $nonalpha = shift;
    my $join = '';
    my $nonalpha_text = '';
    my $alpha_text = '';
    return "" if !@$nonalpha and !@$alpha;
    $nonalpha_text = join ("", map {"<td>$_</td>"} @$nonalpha) . "\n"
	if @$nonalpha;
    $alpha_text = join ("", @$alpha) . "\n &nbsp; \n"
	if @$alpha;
    return '<table cellpadding="1" cellspacing="1" border="0">'
	   . "<tr><th valign=\"top\">" . &$I('Jump to') .":</th>\n"
    	   . join ("", map {"<td>$_</td>\n"} @$nonalpha, @$alpha),
	   . "</tr></table>\n";
}

$line_command = \&mediawiki_line_command;

sub mediawiki_line_command($$$$)
{
    my $command = shift;
    my $arg_text = shift;
    my $arg_texi = shift;
    my $state = shift;

    return '' if ($arg_text eq '');
    if ($command eq 'title')
    {
        $arg_text = '== ' .$arg_text. " ==\n";
    }
    elsif ($command eq 'subtitle')
    {
        $arg_text = '=== ' .$arg_text. " ===\n";
    }
    elsif ($command eq 'author')
    {
        $arg_text = '<strong> ' .$arg_text. " </strong><br>\n";
    }
    return $arg_text;
}


## a simple menu entry ref in case we aren't in a standard menu context
#$simple_menu_link  = \&mediawiki_simple_menu_link;

# a menu link. We are always in preformatted because of SIMPLE_MENU.
$menu_link  = \&mediawiki_simple_menu_link;

sub mediawiki_simple_menu_link($$$$$$$)
{
    my $entry = shift;
#    my $preformatted = shift; # We assume this is true.
    my $state = shift;
    my $href = shift;
    my $node = shift;
    my $title = shift;
    my $ending = shift;
    my $has_title = shift;
    my $command_stack = shift;
    my $preformatted = shift;

    $title = '' unless ($has_title);
    $ending = '' unless defined $ending;
    $entry = "</nowiki>";
    $entry .= "$MENU_SYMBOL";
    if ($href)
    {
	$entry .= &$anchor ('', $href, $node);
    }
    else
    {
	$title .= ":" if ($title ne '');
	$entry .= "$title$node";
    }
    $entry .= $ending;
    $entry .= "<nowiki>";
    return $entry;
}
