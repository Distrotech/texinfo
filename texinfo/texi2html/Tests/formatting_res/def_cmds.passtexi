def_cmds.texi(,2) @setfilename def_cmds.info
def_cmds.texi(,3) @node Top
def_cmds.texi(,4) @top Test for definition commands
def_cmds.texi(,5) 
def_cmds.texi(,137) 
def_cmds.texi(,138) @copying
def_cmds.texi(mymacro,139) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,139) d--effn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,139)    more args @* even more so
def_cmds.texi(mymacro,139) def--fn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn fset @var{i} a g
def_cmds.texi(mymacro,139) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,139) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,139) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,139) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,139) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,139) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,139) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,139) @deffnx 
def_cmds.texi(mymacro,139) @deffnx aaa
def_cmds.texi(mymacro,139) @deffnx {} {}
def_cmds.texi(mymacro,139) @deffnx{}
def_cmds.texi(mymacro,139) @deffnx{} machin
def_cmds.texi(mymacro,139) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,139) @deffnx{truc} machin
def_cmds.texi(mymacro,139) @deffnx{truc} { }
def_cmds.texi(mymacro,139) @deffnx{truc}
def_cmds.texi(mymacro,139) @deffnx{} {}
def_cmds.texi(mymacro,139) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,139) @c comment
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,139) Various deff lines
def_cmds.texi(mymacro,139) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,139) @c comment
def_cmds.texi(mymacro,139) text in def item for second def item
def_cmds.texi(mymacro,139) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn empty deffn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,139) @deffnx empty deffnx
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,139) d--efvr
def_cmds.texi(mymacro,139) @end defvr
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypefn
def_cmds.texi(mymacro,139) @end deftypefn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypeop
def_cmds.texi(mymacro,139) @end deftypeop
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,139) d--eftypevr
def_cmds.texi(mymacro,139) @end deftypevr
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,139) d--efcv
def_cmds.texi(mymacro,139) @end defcv
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,139) d--efop
def_cmds.texi(mymacro,139) @end defop
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,139) d--eftp
def_cmds.texi(mymacro,139) @end deftp
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,139) d--efun
def_cmds.texi(mymacro,139) @end defun
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,139) d--efmac
def_cmds.texi(mymacro,139) @end defmac
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,139) d--efspec
def_cmds.texi(mymacro,139) @end defspec
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defvar d--efvar_name
def_cmds.texi(mymacro,139) d--efvar
def_cmds.texi(mymacro,139) @end defvar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defopt d--efopt_name
def_cmds.texi(mymacro,139) d--efopt
def_cmds.texi(mymacro,139) @end defopt
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypefun
def_cmds.texi(mymacro,139) @end deftypefun
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,139) d--eftypevar
def_cmds.texi(mymacro,139) @end deftypevar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,139) d--efivar
def_cmds.texi(mymacro,139) @end defivar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,139) d--eftypeivar
def_cmds.texi(mymacro,139) @end deftypeivar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,139) d--efmethod
def_cmds.texi(mymacro,139) @end defmethod
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypemethod
def_cmds.texi(mymacro,139) @end deftypemethod
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn category name args { @
def_cmds.texi(mymacro,139)   more args
def_cmds.texi(mymacro,139) deffn with @{
def_cmds.texi(mymacro,139) @end deffn 
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn category name args } @
def_cmds.texi(mymacro,139)   more args
def_cmds.texi(mymacro,139) deffn with @}
def_cmds.texi(mymacro,139) @end deffn 
def_cmds.texi(mymacro,139) 
def_cmds.texi(,140) @end copying
def_cmds.texi(,141) 
def_cmds.texi(mymacro,142) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,142) d--effn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,142)    more args @* even more so
def_cmds.texi(mymacro,142) def--fn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn fset @var{i} a g
def_cmds.texi(mymacro,142) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,142) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,142) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,142) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,142) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,142) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,142) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,142) @deffnx 
def_cmds.texi(mymacro,142) @deffnx aaa
def_cmds.texi(mymacro,142) @deffnx {} {}
def_cmds.texi(mymacro,142) @deffnx{}
def_cmds.texi(mymacro,142) @deffnx{} machin
def_cmds.texi(mymacro,142) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,142) @deffnx{truc} machin
def_cmds.texi(mymacro,142) @deffnx{truc} { }
def_cmds.texi(mymacro,142) @deffnx{truc}
def_cmds.texi(mymacro,142) @deffnx{} {}
def_cmds.texi(mymacro,142) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,142) @c comment
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,142) Various deff lines
def_cmds.texi(mymacro,142) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,142) @c comment
def_cmds.texi(mymacro,142) text in def item for second def item
def_cmds.texi(mymacro,142) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn empty deffn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,142) @deffnx empty deffnx
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,142) d--efvr
def_cmds.texi(mymacro,142) @end defvr
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypefn
def_cmds.texi(mymacro,142) @end deftypefn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypeop
def_cmds.texi(mymacro,142) @end deftypeop
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,142) d--eftypevr
def_cmds.texi(mymacro,142) @end deftypevr
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,142) d--efcv
def_cmds.texi(mymacro,142) @end defcv
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,142) d--efop
def_cmds.texi(mymacro,142) @end defop
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,142) d--eftp
def_cmds.texi(mymacro,142) @end deftp
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,142) d--efun
def_cmds.texi(mymacro,142) @end defun
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,142) d--efmac
def_cmds.texi(mymacro,142) @end defmac
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,142) d--efspec
def_cmds.texi(mymacro,142) @end defspec
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defvar d--efvar_name
def_cmds.texi(mymacro,142) d--efvar
def_cmds.texi(mymacro,142) @end defvar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defopt d--efopt_name
def_cmds.texi(mymacro,142) d--efopt
def_cmds.texi(mymacro,142) @end defopt
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypefun
def_cmds.texi(mymacro,142) @end deftypefun
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,142) d--eftypevar
def_cmds.texi(mymacro,142) @end deftypevar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,142) d--efivar
def_cmds.texi(mymacro,142) @end defivar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,142) d--eftypeivar
def_cmds.texi(mymacro,142) @end deftypeivar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,142) d--efmethod
def_cmds.texi(mymacro,142) @end defmethod
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypemethod
def_cmds.texi(mymacro,142) @end deftypemethod
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn category name args { @
def_cmds.texi(mymacro,142)   more args
def_cmds.texi(mymacro,142) deffn with @{
def_cmds.texi(mymacro,142) @end deffn 
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn category name args } @
def_cmds.texi(mymacro,142)   more args
def_cmds.texi(mymacro,142) deffn with @}
def_cmds.texi(mymacro,142) @end deffn 
def_cmds.texi(mymacro,142) 
def_cmds.texi(,143) 
def_cmds.texi(,144) @example
def_cmds.texi(mymacro,145) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,145) d--effn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,145)    more args @* even more so
def_cmds.texi(mymacro,145) def--fn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn fset @var{i} a g
def_cmds.texi(mymacro,145) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,145) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,145) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,145) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,145) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,145) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,145) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,145) @deffnx 
def_cmds.texi(mymacro,145) @deffnx aaa
def_cmds.texi(mymacro,145) @deffnx {} {}
def_cmds.texi(mymacro,145) @deffnx{}
def_cmds.texi(mymacro,145) @deffnx{} machin
def_cmds.texi(mymacro,145) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,145) @deffnx{truc} machin
def_cmds.texi(mymacro,145) @deffnx{truc} { }
def_cmds.texi(mymacro,145) @deffnx{truc}
def_cmds.texi(mymacro,145) @deffnx{} {}
def_cmds.texi(mymacro,145) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,145) @c comment
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,145) Various deff lines
def_cmds.texi(mymacro,145) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,145) @c comment
def_cmds.texi(mymacro,145) text in def item for second def item
def_cmds.texi(mymacro,145) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn empty deffn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,145) @deffnx empty deffnx
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,145) d--efvr
def_cmds.texi(mymacro,145) @end defvr
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypefn
def_cmds.texi(mymacro,145) @end deftypefn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypeop
def_cmds.texi(mymacro,145) @end deftypeop
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,145) d--eftypevr
def_cmds.texi(mymacro,145) @end deftypevr
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,145) d--efcv
def_cmds.texi(mymacro,145) @end defcv
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,145) d--efop
def_cmds.texi(mymacro,145) @end defop
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,145) d--eftp
def_cmds.texi(mymacro,145) @end deftp
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,145) d--efun
def_cmds.texi(mymacro,145) @end defun
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,145) d--efmac
def_cmds.texi(mymacro,145) @end defmac
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,145) d--efspec
def_cmds.texi(mymacro,145) @end defspec
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defvar d--efvar_name
def_cmds.texi(mymacro,145) d--efvar
def_cmds.texi(mymacro,145) @end defvar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defopt d--efopt_name
def_cmds.texi(mymacro,145) d--efopt
def_cmds.texi(mymacro,145) @end defopt
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypefun
def_cmds.texi(mymacro,145) @end deftypefun
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,145) d--eftypevar
def_cmds.texi(mymacro,145) @end deftypevar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,145) d--efivar
def_cmds.texi(mymacro,145) @end defivar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,145) d--eftypeivar
def_cmds.texi(mymacro,145) @end deftypeivar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,145) d--efmethod
def_cmds.texi(mymacro,145) @end defmethod
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypemethod
def_cmds.texi(mymacro,145) @end deftypemethod
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn category name args { @
def_cmds.texi(mymacro,145)   more args
def_cmds.texi(mymacro,145) deffn with @{
def_cmds.texi(mymacro,145) @end deffn 
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn category name args } @
def_cmds.texi(mymacro,145)   more args
def_cmds.texi(mymacro,145) deffn with @}
def_cmds.texi(mymacro,145) @end deffn 
def_cmds.texi(mymacro,145) 
def_cmds.texi(,146) @end example
def_cmds.texi(,147) 
def_cmds.texi(,148) @c deffn
def_cmds.texi(,149) @deffn Command @var{forward--char} @var{nchars} {argument2} {argument3} @
def_cmds.texi(,150)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,151) @end deffn
def_cmds.texi(,152) 
def_cmds.texi(,153) @c defvr
def_cmds.texi(,154) @defvr Variable fill-column {argument1} {argument2} @
def_cmds.texi(,155)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,156) @end defvr
def_cmds.texi(,157) 
def_cmds.texi(,158) @c deftypefn
def_cmds.texi(,159) @deftypefn {Library Function} int foobar (int @var{foo}, float @var{bar})
def_cmds.texi(,160) @end deftypefn
def_cmds.texi(,161) 
def_cmds.texi(,162) @deftypefn {Library Function} int foobar (int @var{foo}, float @var{bar}) @
def_cmds.texi(,163)         (arg in brace, {[something} @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) ct@*@* last
def_cmds.texi(,164) @end deftypefn
def_cmds.texi(,165) 
def_cmds.texi(,166) @deftypefn {Library Function} int foobug {[something}
def_cmds.texi(,167) @end deftypefn
def_cmds.texi(,168) 
def_cmds.texi(,169) @deftypefn stacks private push (@var{s}:in out stack; @
def_cmds.texi(,170)                  @var{n}:in integer) ; ;barg aarg; ; end
def_cmds.texi(,171) @end deftypefn
def_cmds.texi(,172) 
def_cmds.texi(,173) @c deftypevr
def_cmds.texi(,174) @deftypevr {Global Flag} int enable @
def_cmds.texi(,175)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,176) @end deftypevr
def_cmds.texi(,177) 
def_cmds.texi(,178) @c deftp
def_cmds.texi(,179) @deftp {Data type} pair car cdr @
def_cmds.texi(,180)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,181) @end deftp
def_cmds.texi(,182) 
def_cmds.texi(,183) @c defcv
def_cmds.texi(,184) @defcv {Class Option} Window border-pattern @
def_cmds.texi(,185)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,186) @end defcv
def_cmds.texi(,187) 
def_cmds.texi(,188) @c deftypecv
def_cmds.texi(,189) @deftypecv {Class Option2} Window @code{int} border-pattern @
def_cmds.texi(,190)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,191) @end deftypecv
def_cmds.texi(,192) 
def_cmds.texi(,193) @c defop
def_cmds.texi(,194) @defop Operation windows expose @
def_cmds.texi(,195)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,196) @end defop
def_cmds.texi(,197) 
def_cmds.texi(,198) @c deftypeop
def_cmds.texi(,199) @deftypeop Operation2 W,indow @code{int} expose @
def_cmds.texi(,200)         (arg in brace, [something @var{in v--ar}, @b{in, b} {, comma} a@var{pref} p]) last
def_cmds.texi(,201) @end deftypeop
def_cmds.texi(,202) 
def_cmds.texi(,203) @deftypeop Operation5 Window @code{int} expose type arg
def_cmds.texi(,204) @end deftypeop
def_cmds.texi(,205) 
def_cmds.texi(,206) @deftypeop Operation3 {W,indow} @code{int} {e,xpose} type arg
def_cmds.texi(,207) @end deftypeop
def_cmds.texi(,208) 
def_cmds.texi(,209) @deftypeop Operation4 {,Window} @code{int} {,expose} type arg
def_cmds.texi(,210) @end deftypeop
def_cmds.texi(,211) 
def_cmds.texi(,212) @deftypeop Operation6 W,indow @code{int} e,xpose type arg
def_cmds.texi(,213) @end deftypeop
def_cmds.texi(,214) 
def_cmds.texi(,215) @deftypeop Operation7 ,Window @code{int} ,expose type arg
def_cmds.texi(,216) @end deftypeop
def_cmds.texi(,217) 
def_cmds.texi(,218) @deftypeop Operation13 {W)indow} @code{int} {e)xpose} type arg
def_cmds.texi(,219) @end deftypeop
def_cmds.texi(,220) 
def_cmds.texi(,221) @deftypeop Operation14 {)Window} @code{int} {)expose} type arg
def_cmds.texi(,222) @end deftypeop
def_cmds.texi(,223) 
def_cmds.texi(,224) @deftypeop Operation16 W)indow @code{int} e)xpose type arg
def_cmds.texi(,225) @end deftypeop
def_cmds.texi(,226) 
def_cmds.texi(,227) @deftypeop Operation17 )Window @code{int} )expose type arg
def_cmds.texi(,228) @end deftypeop
def_cmds.texi(,229) 
def_cmds.texi(,230) @deftypeop Operation18 {W;indow} @code{int} {e;xpose} type arg
def_cmds.texi(,231) @end deftypeop
def_cmds.texi(,232) 
def_cmds.texi(,233) @deftypeop Operation19 {;Window} @code{int} {;expose} type arg
def_cmds.texi(,234) @end deftypeop
def_cmds.texi(,235) 
def_cmds.texi(,236) @deftypeop Operation20 W;indow @code{int} e;xpose type arg
def_cmds.texi(,237) @end deftypeop
def_cmds.texi(,238) 
def_cmds.texi(,239) @deftypeop Operation21 ;Window @code{int} ;expose type arg
def_cmds.texi(,240) @end deftypeop
def_cmds.texi(,241) 
def_cmds.texi(,242) @deftypeop Command@code{com} {Window@code{int}} expose@var{exp}
def_cmds.texi(,243) @end deftypeop
def_cmds.texi(,244) 
def_cmds.texi(,245) @c deffn
def_cmds.texi(,246) @deffn
def_cmds.texi(,247) @end deffn
def_cmds.texi(,248) 
def_cmds.texi(,249) @c defvr
def_cmds.texi(,250) @defvr
def_cmds.texi(,251) @end defvr
def_cmds.texi(,252) 
def_cmds.texi(,253) @c deftypefn
def_cmds.texi(,254) @deftypefn
def_cmds.texi(,255) @end deftypefn
def_cmds.texi(,256) 
def_cmds.texi(,257) @c deftypeop
def_cmds.texi(,258) @deftypeop
def_cmds.texi(,259) @end deftypeop
def_cmds.texi(,260) 
def_cmds.texi(,261) @c deftypevr
def_cmds.texi(,262) @deftypevr
def_cmds.texi(,263) @end deftypevr
def_cmds.texi(,264) 
def_cmds.texi(,265) @c defcv
def_cmds.texi(,266) @defcv
def_cmds.texi(,267) @end defcv
def_cmds.texi(,268) 
def_cmds.texi(,269) @c deftypecv
def_cmds.texi(,270) @deftypecv
def_cmds.texi(,271) @end deftypecv
def_cmds.texi(,272) 
def_cmds.texi(,273) @c defop
def_cmds.texi(,274) @defop
def_cmds.texi(,275) @end defop
def_cmds.texi(,276) 
def_cmds.texi(,277) @c deftp
def_cmds.texi(,278) @deftp
def_cmds.texi(,279) @end deftp
def_cmds.texi(,280) 
def_cmds.texi(,281) @c deffn
def_cmds.texi(,282) @deffn @var{A1} @var{A2} @var{A3} @var{A4}
def_cmds.texi(,283) @end deffn
def_cmds.texi(,284) 
def_cmds.texi(,285) @deffn @code{A1} @code{A2} @code{A3} @code{A4}
def_cmds.texi(,286) @end deffn
def_cmds.texi(,287) 
def_cmds.texi(,288) @c defvr
def_cmds.texi(,289) @defvr @var{A1} @var{A2} @var{A3} @var{A4}
def_cmds.texi(,290) @end defvr
def_cmds.texi(,291) 
def_cmds.texi(,292) @defvr @code{A1} @code{A2} @code{A3} @code{A4}
def_cmds.texi(,293) @end defvr
def_cmds.texi(,294) 
def_cmds.texi(,295) @c deftypefn
def_cmds.texi(,296) @deftypefn @var{A1} @var{A2} @var{A3} @var{A4} @var{A5}
def_cmds.texi(,297) @end deftypefn
def_cmds.texi(,298) 
def_cmds.texi(,299) @deftypefn @code{A1} @code{A2} @code{A3} @code{A4} @code{A5}
def_cmds.texi(,300) @end deftypefn
def_cmds.texi(,301) 
def_cmds.texi(,302) @c deftypevr
def_cmds.texi(,303) @deftypevr @var{A1} @var{A2} @var{A3} @var{A4} @var{A5}
def_cmds.texi(,304) @end deftypevr
def_cmds.texi(,305) 
def_cmds.texi(,306) @deftypevr @code{A1} @t{A2} @code{A3} @code{A4} @code{A5}
def_cmds.texi(,307) @end deftypevr
def_cmds.texi(,308) 
def_cmds.texi(,309) @c deftp
def_cmds.texi(,310) @deftp @var{A1} @var{A2} @var{A3} @var{A4}
def_cmds.texi(,311) @end deftp
def_cmds.texi(,312) 
def_cmds.texi(,313) @deftp @code{A1} @code{A2} @code{A3} @code{A4}
def_cmds.texi(,314) @end deftp
def_cmds.texi(,315) 
def_cmds.texi(,316) @c defcv
def_cmds.texi(,317) @defcv @var{A1} @var{A2} @var{A3} @var{A4} @var{A5}
def_cmds.texi(,318) @end defcv
def_cmds.texi(,319) 
def_cmds.texi(,320) @deftp @code{A1} @code{A2} @code{A3} @code{A4} @code{A5}
def_cmds.texi(,321) @end deftp
def_cmds.texi(,322) 
def_cmds.texi(,323) @c deftypecv
def_cmds.texi(,324) @deftypecv @var{A1} @var{A2} @var{A3} @var{A4} @var{A5} @var{A6}
def_cmds.texi(,325) @end deftypecv
def_cmds.texi(,326) 
def_cmds.texi(,327) @deftypecv @code{A1} @code{A2} @option{A3} @code{A4} @code{A5} @code{A6}
def_cmds.texi(,328) @end deftypecv
def_cmds.texi(,329) 
def_cmds.texi(,330) @c defop
def_cmds.texi(,331) @defop @var{A1} @var{A2} @var{A3} @var{A4} @var{A5}
def_cmds.texi(,332) @end defop
def_cmds.texi(,333) 
def_cmds.texi(,334) @defop @code{A1} @code{A2} @code{A3} @code{A4} @code{A5}
def_cmds.texi(,335) @end defop
def_cmds.texi(,336) 
def_cmds.texi(,337) @c deftypeop
def_cmds.texi(,338) @deftypeop @var{A1} @var{A2} @var{A3} @var{A4} @var{A5} @var{A6}
def_cmds.texi(,339) @end deftypeop
def_cmds.texi(,340) 
def_cmds.texi(,341) @deftypeop @code{A1} @code{A2} @code{A3} @code{A4} @code{A5} @code{A6}
def_cmds.texi(,342) @end deftypeop
def_cmds.texi(,343) 
def_cmds.texi(,344) @printindex vr
def_cmds.texi(,345) @printindex fn
def_cmds.texi(,346) 
def_cmds.texi(,347) @bye
