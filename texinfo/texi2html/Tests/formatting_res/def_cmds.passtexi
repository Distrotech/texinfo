def_cmds.texi(,2) @setfilename def_cmds.info
def_cmds.texi(,3) @node Top
def_cmds.texi(,4) @top Test for definition commands
def_cmds.texi(,5) 
def_cmds.texi(,137) 
def_cmds.texi(,138) @copying
def_cmds.texi(mymacro,139) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,139) d--effn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,139)    more args @* even more so
def_cmds.texi(mymacro,139) def--fn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn fset @var{i} a g
def_cmds.texi(mymacro,139) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,139) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,139) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,139) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,139) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,139) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,139) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,139) @deffnx 
def_cmds.texi(mymacro,139) @deffnx aaa
def_cmds.texi(mymacro,139) @deffnx {} {}
def_cmds.texi(mymacro,139) @deffnx{}
def_cmds.texi(mymacro,139) @deffnx{} machin
def_cmds.texi(mymacro,139) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,139) @deffnx{truc} machin
def_cmds.texi(mymacro,139) @deffnx{truc} { }
def_cmds.texi(mymacro,139) @deffnx{truc}
def_cmds.texi(mymacro,139) @deffnx{} {}
def_cmds.texi(mymacro,139) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,139) @c comment
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,139) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,139) Various deff lines
def_cmds.texi(mymacro,139) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,139) @c comment
def_cmds.texi(mymacro,139) text in def item for second def item
def_cmds.texi(mymacro,139) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn empty deffn
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,139) @deffnx empty deffnx
def_cmds.texi(mymacro,139) @end deffn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,139) d--efvr
def_cmds.texi(mymacro,139) @end defvr
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypefn
def_cmds.texi(mymacro,139) @end deftypefn
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypeop
def_cmds.texi(mymacro,139) @end deftypeop
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,139) d--eftypevr
def_cmds.texi(mymacro,139) @end deftypevr
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,139) d--efcv
def_cmds.texi(mymacro,139) @end defcv
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,139) d--efop
def_cmds.texi(mymacro,139) @end defop
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,139) d--eftp
def_cmds.texi(mymacro,139) @end deftp
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,139) d--efun
def_cmds.texi(mymacro,139) @end defun
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,139) d--efmac
def_cmds.texi(mymacro,139) @end defmac
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,139) d--efspec
def_cmds.texi(mymacro,139) @end defspec
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defvar d--efvar_name
def_cmds.texi(mymacro,139) d--efvar
def_cmds.texi(mymacro,139) @end defvar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defopt d--efopt_name
def_cmds.texi(mymacro,139) d--efopt
def_cmds.texi(mymacro,139) @end defopt
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypefun
def_cmds.texi(mymacro,139) @end deftypefun
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,139) d--eftypevar
def_cmds.texi(mymacro,139) @end deftypevar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,139) d--efivar
def_cmds.texi(mymacro,139) @end defivar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,139) d--eftypeivar
def_cmds.texi(mymacro,139) @end deftypeivar
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,139) d--efmethod
def_cmds.texi(mymacro,139) @end defmethod
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,139) d--eftypemethod
def_cmds.texi(mymacro,139) @end deftypemethod
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn category name args { @
def_cmds.texi(mymacro,139)   more args
def_cmds.texi(mymacro,139) deffn with @{
def_cmds.texi(mymacro,139) @end deffn 
def_cmds.texi(mymacro,139) 
def_cmds.texi(mymacro,139) @deffn category name args } @
def_cmds.texi(mymacro,139)   more args
def_cmds.texi(mymacro,139) deffn with @}
def_cmds.texi(mymacro,139) @end deffn 
def_cmds.texi(mymacro,139) 
def_cmds.texi(,140) @end copying
def_cmds.texi(,141) 
def_cmds.texi(mymacro,142) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,142) d--effn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,142)    more args @* even more so
def_cmds.texi(mymacro,142) def--fn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn fset @var{i} a g
def_cmds.texi(mymacro,142) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,142) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,142) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,142) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,142) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,142) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,142) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,142) @deffnx 
def_cmds.texi(mymacro,142) @deffnx aaa
def_cmds.texi(mymacro,142) @deffnx {} {}
def_cmds.texi(mymacro,142) @deffnx{}
def_cmds.texi(mymacro,142) @deffnx{} machin
def_cmds.texi(mymacro,142) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,142) @deffnx{truc} machin
def_cmds.texi(mymacro,142) @deffnx{truc} { }
def_cmds.texi(mymacro,142) @deffnx{truc}
def_cmds.texi(mymacro,142) @deffnx{} {}
def_cmds.texi(mymacro,142) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,142) @c comment
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,142) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,142) Various deff lines
def_cmds.texi(mymacro,142) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,142) @c comment
def_cmds.texi(mymacro,142) text in def item for second def item
def_cmds.texi(mymacro,142) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn empty deffn
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,142) @deffnx empty deffnx
def_cmds.texi(mymacro,142) @end deffn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,142) d--efvr
def_cmds.texi(mymacro,142) @end defvr
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypefn
def_cmds.texi(mymacro,142) @end deftypefn
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypeop
def_cmds.texi(mymacro,142) @end deftypeop
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,142) d--eftypevr
def_cmds.texi(mymacro,142) @end deftypevr
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,142) d--efcv
def_cmds.texi(mymacro,142) @end defcv
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,142) d--efop
def_cmds.texi(mymacro,142) @end defop
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,142) d--eftp
def_cmds.texi(mymacro,142) @end deftp
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,142) d--efun
def_cmds.texi(mymacro,142) @end defun
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,142) d--efmac
def_cmds.texi(mymacro,142) @end defmac
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,142) d--efspec
def_cmds.texi(mymacro,142) @end defspec
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defvar d--efvar_name
def_cmds.texi(mymacro,142) d--efvar
def_cmds.texi(mymacro,142) @end defvar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defopt d--efopt_name
def_cmds.texi(mymacro,142) d--efopt
def_cmds.texi(mymacro,142) @end defopt
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypefun
def_cmds.texi(mymacro,142) @end deftypefun
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,142) d--eftypevar
def_cmds.texi(mymacro,142) @end deftypevar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,142) d--efivar
def_cmds.texi(mymacro,142) @end defivar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,142) d--eftypeivar
def_cmds.texi(mymacro,142) @end deftypeivar
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,142) d--efmethod
def_cmds.texi(mymacro,142) @end defmethod
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,142) d--eftypemethod
def_cmds.texi(mymacro,142) @end deftypemethod
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn category name args { @
def_cmds.texi(mymacro,142)   more args
def_cmds.texi(mymacro,142) deffn with @{
def_cmds.texi(mymacro,142) @end deffn 
def_cmds.texi(mymacro,142) 
def_cmds.texi(mymacro,142) @deffn category name args } @
def_cmds.texi(mymacro,142)   more args
def_cmds.texi(mymacro,142) deffn with @}
def_cmds.texi(mymacro,142) @end deffn 
def_cmds.texi(mymacro,142) 
def_cmds.texi(,143) 
def_cmds.texi(,144) @example
def_cmds.texi(mymacro,145) @deffn c--ategory d--effn_name a--rguments...
def_cmds.texi(mymacro,145) d--effn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn cate--gory de--ffn_name ar--guments @
def_cmds.texi(mymacro,145)    more args @* even more so
def_cmds.texi(mymacro,145) def--fn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn fset @var{i} a g
def_cmds.texi(mymacro,145) @deffnx {cmde} truc {}
def_cmds.texi(mymacro,145) @deffnx Command {log trap} {}
def_cmds.texi(mymacro,145) @deffnx Command { log trap1} {}  
def_cmds.texi(mymacro,145) @deffnx Command {log trap2 } {}
def_cmds.texi(mymacro,145) @deffnx cmde @b{id ule} truc
def_cmds.texi(mymacro,145) @deffnx cmde2 @b{id @samp{i} ule} truc
def_cmds.texi(mymacro,145) @deffnx @b{id @samp{i} ule}    
def_cmds.texi(mymacro,145) @deffnx 
def_cmds.texi(mymacro,145) @deffnx aaa
def_cmds.texi(mymacro,145) @deffnx {} {}
def_cmds.texi(mymacro,145) @deffnx{}
def_cmds.texi(mymacro,145) @deffnx{} machin
def_cmds.texi(mymacro,145) @deffnx{} {bidule machin}
def_cmds.texi(mymacro,145) @deffnx{truc} machin
def_cmds.texi(mymacro,145) @deffnx{truc} { }
def_cmds.texi(mymacro,145) @deffnx{truc}
def_cmds.texi(mymacro,145) @deffnx{} {}
def_cmds.texi(mymacro,145) @deffnx {truc} followed by a comment
def_cmds.texi(mymacro,145) @c comment
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and }
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and } after
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and {
def_cmds.texi(mymacro,145) @deffnx truc machin bidule chose and { and after
def_cmds.texi(mymacro,145) Various deff lines
def_cmds.texi(mymacro,145) @deffnx {truc} after a deff item
def_cmds.texi(mymacro,145) @c comment
def_cmds.texi(mymacro,145) text in def item for second def item
def_cmds.texi(mymacro,145) @deffnx {truc} deffnx before end deffn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn empty deffn
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn empty deffn with deffnx
def_cmds.texi(mymacro,145) @deffnx empty deffnx
def_cmds.texi(mymacro,145) @end deffn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defvr c--ategory d--efvr_name
def_cmds.texi(mymacro,145) d--efvr
def_cmds.texi(mymacro,145) @end defvr
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypefn c--ategory t--ype d--eftypefn_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypefn
def_cmds.texi(mymacro,145) @end deftypefn
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypeop c--ategory c--lass t--ype d--eftypeop_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypeop
def_cmds.texi(mymacro,145) @end deftypeop
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypevr c--ategory t--ype d--eftypevr_name
def_cmds.texi(mymacro,145) d--eftypevr
def_cmds.texi(mymacro,145) @end deftypevr
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defcv c--ategory c--lass d--efcv_name
def_cmds.texi(mymacro,145) d--efcv
def_cmds.texi(mymacro,145) @end defcv
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defop c--ategory c--lass d--efop_name a--rguments...
def_cmds.texi(mymacro,145) d--efop
def_cmds.texi(mymacro,145) @end defop
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftp c--ategory d--eftp_name a--ttributes...
def_cmds.texi(mymacro,145) d--eftp
def_cmds.texi(mymacro,145) @end deftp
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defun d--efun_name a--rguments...
def_cmds.texi(mymacro,145) d--efun
def_cmds.texi(mymacro,145) @end defun
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defmac d--efmac_name a--rguments...
def_cmds.texi(mymacro,145) d--efmac
def_cmds.texi(mymacro,145) @end defmac
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defspec d--efspec_name a--rguments...
def_cmds.texi(mymacro,145) d--efspec
def_cmds.texi(mymacro,145) @end defspec
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defvar d--efvar_name
def_cmds.texi(mymacro,145) d--efvar
def_cmds.texi(mymacro,145) @end defvar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defopt d--efopt_name
def_cmds.texi(mymacro,145) d--efopt
def_cmds.texi(mymacro,145) @end defopt
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypefun t--ype d--eftypefun_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypefun
def_cmds.texi(mymacro,145) @end deftypefun
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypevar t--ype d--eftypevar_name
def_cmds.texi(mymacro,145) d--eftypevar
def_cmds.texi(mymacro,145) @end deftypevar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defivar c--lass d--efivar_name
def_cmds.texi(mymacro,145) d--efivar
def_cmds.texi(mymacro,145) @end defivar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypeivar c--lass t--ype d--eftypeivar_name
def_cmds.texi(mymacro,145) d--eftypeivar
def_cmds.texi(mymacro,145) @end deftypeivar
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @defmethod c--lass d--efmethod_name a--rguments...
def_cmds.texi(mymacro,145) d--efmethod
def_cmds.texi(mymacro,145) @end defmethod
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deftypemethod c--lass t--ype d--eftypemethod_name a--rguments...
def_cmds.texi(mymacro,145) d--eftypemethod
def_cmds.texi(mymacro,145) @end deftypemethod
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn category name args { @
def_cmds.texi(mymacro,145)   more args
def_cmds.texi(mymacro,145) deffn with @{
def_cmds.texi(mymacro,145) @end deffn 
def_cmds.texi(mymacro,145) 
def_cmds.texi(mymacro,145) @deffn category name args } @
def_cmds.texi(mymacro,145)   more args
def_cmds.texi(mymacro,145) deffn with @}
def_cmds.texi(mymacro,145) @end deffn 
def_cmds.texi(mymacro,145) 
def_cmds.texi(,146) @end example
def_cmds.texi(,147) 
def_cmds.texi(,148) @bye
