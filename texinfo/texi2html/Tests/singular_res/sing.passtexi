../singular_texi/singular.tex(,2) @comment Id: singular.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/singular.tex(,3) @comment This file was generated by doc2tex.pl from singular.doc
../singular_texi/singular.tex(,4) @comment DO NOT EDIT DIRECTLY, BUT EDIT singular.doc INSTEAD
../singular_texi/singular.tex(,5) @comment this file contains the main structure of the manual
../singular_texi/singular.tex(,6) 
../singular_texi/singular.tex(,7) 
../singular_texi/singular.tex(,8) @c ------------------------
../singular_texi/singular.tex(,9) @c %**start of header
../singular_texi/singular.tex(,10) @c ------------------------
../singular_texi/version.texi(,1) @c DO not edit this file. 
../singular_texi/version.texi(,2) 
../singular_texi/version.texi(,3) @set VERSION 2-0-4
../singular_texi/version.texi(,4) @set VERSION_DATE October 2002
../singular_texi/version.texi(,5) @set SHORT_VERSION 2-0
../singular_texi/version.texi(,6) @set RPM_VERSION 2.0.4
../singular_texi/singular.tex(,12) @setfilename singular.hlp
../singular_texi/singular.tex(,13) @settitle Singular 2-0-4 Manual
../singular_texi/singular.tex(,14) @c @setchapternewpage odd
../singular_texi/singular.tex(,15) @paragraphindent 0
../singular_texi/singular.tex(,16) @c ------------------------
../singular_texi/singular.tex(,17) @c %**end of header
../singular_texi/singular.tex(,18) @c ------------------------
../singular_texi/singular.tex(,19) 
../singular_texi/singular.tex(,20) @c --------------------- general settings --------------------
../singular_texi/singular.tex(,22) @afourpaper
../singular_texi/singular.tex(,23) @finalout
../singular_texi/singular.tex(,24) @pagesizes 23cm, 16.5cm
../singular_texi/singular.tex(,26) 
../singular_texi/singular.tex(,27) @set singularmanual 1
../singular_texi/singular.tex(,28) @c @set namespaces 1
../singular_texi/uname.texi(,1) @c DO not edit this file. 
../singular_texi/uname.texi(,2) 
../singular_texi/uname.texi(,3) @set _UNAME ix86-Linux
../singular_texi/uname.texi(,4) @set ix86-Linux
../singular_texi/singular.tex(,30) @c --------------------- end general setting --------------------
../singular_texi/singular.tex(,31) 
../singular_texi/singular.tex(,32) 
../singular_texi/singular.tex(,33) @c --------------------- invisible Info header ------------------------
../singular_texi/singular.tex(,37) @c --------------------- end Info invisible header --------------------
../singular_texi/singular.tex(,38) 
../singular_texi/singular.tex(,39) 
../singular_texi/singular.tex(,40) @c --------------------- tex titlepage --------------------
../singular_texi/singular.tex(,41) @titlepage
../singular_texi/singular.tex(,42) @sp 2
../singular_texi/singular.tex(,43) @center @titlefont{Singular}
../singular_texi/singular.tex(,44) @sp 2
../singular_texi/singular.tex(,45) @center A Computer Algebra System for Polynomial Computations
../singular_texi/singular.tex(,46) @sp 5
../singular_texi/singular.tex(,47) @center @titlefont{Manual}
../singular_texi/singular.tex(,48) @center Version 2-0-4
../singular_texi/singular.tex(,49) @sp 2
../singular_texi/singular.tex(,50) @center Singular is created and its development is directed and coordinated by
../singular_texi/singular.tex(,51) @center G.-M. Greuel, G. Pfister, and H. Sch@"onemann
../singular_texi/singular.tex(,52) @sp 2
../singular_texi/singular.tex(,53) @center with contributions by
../singular_texi/singular.tex(,54) @center O. Bachmann, W. Decker, S. Endra@ss{}, I. Farran, A. Fr@"uhbis-Kr@"uger, C. Gorzel,
../singular_texi/singular.tex(,55) @center H. Grassmann, A. Heydtmann, D. Hillebrand, T. Keilen, U. Klein, K. Kr@"uger, M. Lamm,
../singular_texi/singular.tex(,56) @center C. Lossen, B. Martin, M. Me@ss{}ollen, W. Neumann, T. N@"u@ss{}ler, W. Pohl, T. Siebert,
../singular_texi/singular.tex(,57) @center J. Schmidt, M. Schulze, R. Stobbe, M. Wenk, T. Wichmann
../singular_texi/singular.tex(,58) @sp 2
../singular_texi/singular.tex(,59) @author Fachbereich Mathematik
../singular_texi/singular.tex(,60) @author Zentrum f@"ur Computeralgebra
../singular_texi/singular.tex(,61) @author Universit@"at Kaiserslautern
../singular_texi/singular.tex(,62) @author D-67653 Kaiserslautern
../singular_texi/singular.tex(,63) @end titlepage
../singular_texi/singular.tex(,64) 
../singular_texi/singular.tex(,65) @c print short table of contents in tex right after titlepage
../singular_texi/singular.tex(,66) @c Detailed ToC is printed at the end of the manual
../singular_texi/singular.tex(,67) @shortcontents
../singular_texi/singular.tex(,68) 
../singular_texi/singular.tex(,69) @c -----------------------Top node-----------------------------------
../singular_texi/singular.tex(,70) @node Top, Preface, (dir), (dir)
../singular_texi/singular.tex(,71) 
../singular_texi/singular.tex(,80) 
../singular_texi/singular.tex(,82) @html
../singular_texi/singular.tex(,83) <CENTER>
../singular_texi/singular.tex(,84) <A HREF="http://www.singular.uni-kl.de">
../singular_texi/singular.tex(,85) <IMG SRC="singular.jpg"></A><br>
../singular_texi/singular.tex(,86) <h3> A Computer Algebra System for Polynomial Computations </h3>
../singular_texi/singular.tex(,87) <p></p>
../singular_texi/singular.tex(,88) <h4>HTML User Manual for Singular Version
../singular_texi/singular.tex(,89) @end html
../singular_texi/singular.tex(,90) 2-0-4, October 2002
../singular_texi/singular.tex(,91) @html
../singular_texi/singular.tex(,92) </h4>
../singular_texi/singular.tex(,93) </center>
../singular_texi/singular.tex(,94) <CENTER><A HREF="http://www.uni-kl.de/"><I>University of Kaiserslautern</I></A></CENTER>
../singular_texi/singular.tex(,95) <CENTER><A HREF="http://www.mathematik.uni-kl.de/"><I>Department of Mathematics</I></A></CENTER>
../singular_texi/singular.tex(,96) <CENTER><A HREF="http://www.mathematik.uni-kl.de/~zca/">
../singular_texi/singular.tex(,97) <I>Centre for Computer Algebra</I></A></CENTER><p></p>
../singular_texi/singular.tex(,98) @end html
../singular_texi/singular.tex(,100) 
../singular_texi/singular.tex(,101) @menu
../singular_texi/singular.tex(,102) * Preface::
../singular_texi/singular.tex(,103) * Introduction::
../singular_texi/singular.tex(,104) * General concepts::
../singular_texi/singular.tex(,105) * Data types::
../singular_texi/singular.tex(,106) * Functions and system variables::
../singular_texi/singular.tex(,107) * Tricks and pitfalls::
../singular_texi/singular.tex(,108) * Examples::
../singular_texi/singular.tex(,109) * Polynomial data::
../singular_texi/singular.tex(,110) * Mathematical background::
../singular_texi/singular.tex(,111) * SINGULAR libraries::
../singular_texi/singular.tex(,112) * Release Notes::
../singular_texi/singular.tex(,113) * Index::
../singular_texi/singular.tex(,114) @end menu
../singular_texi/singular.tex(,115) 
../singular_texi/singular.tex(,116) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,117) @node Preface, Introduction, Top, Top
../singular_texi/singular.tex(,118) @chapter Preface
../singular_texi/singular.tex(,119) @cindex Preface
../singular_texi/COPYING.texi(,1) @comment -*-texinfo-*-
../singular_texi/COPYING.texi(,2) @comment Id: COPYING.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/COPYING.texi(,3) @comment this file contains the copyright notice on Singular
../singular_texi/COPYING.texi(,7) 
../singular_texi/COPYING.texi(,8) @cindex copyright
../singular_texi/COPYING.texi(,9) @cindex factory
../singular_texi/COPYING.texi(,10) @cindex GMP
../singular_texi/COPYING.texi(,11) @cindex MP
../singular_texi/COPYING.texi(,12) @cindex readline
../singular_texi/COPYING.texi(,13) @cindex libfac
../singular_texi/COPYING.texi(,14) 
../singular_texi/COPYING.texi(,15) @center @sc{Singular} version 2-0-4
../singular_texi/COPYING.texi(,16) @center @uref{http://www.uni-kl.de/,,University of Kaiserslautern}
../singular_texi/COPYING.texi(,17) @center @uref{http://www.mathematik.uni-kl.de/,,Department of Mathematics} and  @uref{http://www.mathematik.uni-kl.de/~zca/,,Centre for Computer Algebra}
../singular_texi/COPYING.texi(,18) @center Authors: @uref{http://www.mathematik.uni-kl.de/~greuel,,G.-M. Greuel}, @uref{http://www.mathematik.uni-kl.de/~pfister,,G. Pfister}, @uref{http://www.mathematik.uni-kl.de/~hannes,,H. Schoenemann}
../singular_texi/COPYING.texi(,19) 
../singular_texi/COPYING.texi(,20) @center Copyright @copyright{} 1986-2003
../singular_texi/COPYING.texi(,21) @sp 2
../singular_texi/COPYING.texi(,22) @center @strong{NOTICE}
../singular_texi/COPYING.texi(,23) 
../singular_texi/COPYING.texi(,24) This program is free software; you can redistribute it and/or modify
../singular_texi/COPYING.texi(,25) it under the terms of the GNU General Public License as published by
../singular_texi/COPYING.texi(,26) the Free Software Foundation ( version 2 of the License );
../singular_texi/COPYING.texi(,27) with the following additional restrictions (which override any conflicting
../singular_texi/COPYING.texi(,28) restrictions in the GPL):
../singular_texi/COPYING.texi(,29) 
../singular_texi/COPYING.texi(,30) The following software used with @sc{Singular} have their own copyright:
../singular_texi/COPYING.texi(,31) the omalloc library, the readline library,
../singular_texi/COPYING.texi(,32) the Gnu Multiple Precision Library (GMP),
../singular_texi/COPYING.texi(,33) NTL: A Library for doing Number Theory (NTL),
../singular_texi/COPYING.texi(,34) the Multi Protocol library (MP), the
../singular_texi/COPYING.texi(,35) Singular-Factory library, the Singular-libfac library, and,
../singular_texi/COPYING.texi(,36) for the Windows distributions the Cygwin DLL and the Cygwin tools (Cygwin), and the
../singular_texi/COPYING.texi(,37) XEmacs editor (XEmacs).
../singular_texi/COPYING.texi(,38) 
../singular_texi/COPYING.texi(,39) Their copyrights and licenses can be found in the accompanying files
../singular_texi/COPYING.texi(,40) which are distributed along with these packages.
../singular_texi/COPYING.texi(,41) 
../singular_texi/COPYING.texi(,42) This program is distributed in the hope that it will be useful,
../singular_texi/COPYING.texi(,43) but WITHOUT ANY WARRANTY; without even the implied warranty of
../singular_texi/COPYING.texi(,44) MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../singular_texi/COPYING.texi(,45) GNU General Public License for more details.
../singular_texi/COPYING.texi(,46) 
../singular_texi/COPYING.texi(,47) You should have received a copy of the GNU General Public License
../singular_texi/COPYING.texi(,48) along with this program; if not, write to the Free Software
../singular_texi/COPYING.texi(,49) Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
../singular_texi/COPYING.texi(,50) (see @uref{http://www.gnu.org/copyleft/gpl.html,,GPL})
../singular_texi/COPYING.texi(,51) 
../singular_texi/COPYING.texi(,52) Please send any comments or bug reports to
../singular_texi/COPYING.texi(,53) @email{singular@@mathematik.uni-kl.de}.
../singular_texi/COPYING.texi(,54) 
../singular_texi/COPYING.texi(,55) Please register yourself as a @sc{Singular} user by using the
../singular_texi/COPYING.texi(,56) registration form on the @sc{Singular} homepage
../singular_texi/COPYING.texi(,57)               @uref{http://www.singular.uni-kl.de}.
../singular_texi/COPYING.texi(,58) If for some reason you cannot access the registration form, you
../singular_texi/COPYING.texi(,59) can also register by sending an email to
../singular_texi/COPYING.texi(,60)               @email{singular@@mathematik.uni-kl.de}
../singular_texi/COPYING.texi(,61) with subject line @code{register} and body containing the following data:
../singular_texi/COPYING.texi(,62)      your name, email address, organisation, country and platform(s).
../singular_texi/COPYING.texi(,63) 
../singular_texi/COPYING.texi(,64) 
../singular_texi/COPYING.texi(,65) If you use Singular or parts thereof in a project and/or publish
../singular_texi/COPYING.texi(,66) results that were partly obtained using @sc{Singular}, we ask you to
../singular_texi/COPYING.texi(,67) cite @sc{Singular} and inform us thereof -- see
../singular_texi/COPYING.texi(,68) @uref{http://www.singular.uni-kl.de/how_to_cite.html},
../singular_texi/COPYING.texi(,69) for information on how to cite Singular.
../singular_texi/COPYING.texi(,70) 
../singular_texi/COPYING.texi(,71) @heading Availability
../singular_texi/COPYING.texi(,72) 
../singular_texi/COPYING.texi(,73) The latest information about @sc{Singular} is always available from
../singular_texi/COPYING.texi(,74) @uref{http://www.singular.uni-kl.de}.
../singular_texi/COPYING.texi(,76) The program @sc{Singular} and the above mentioned parts are available via
../singular_texi/COPYING.texi(,77) anonymous ftp through the following addresses:
../singular_texi/COPYING.texi(,78) @table @asis
../singular_texi/COPYING.texi(,79) @item GMP, libreadline
../singular_texi/COPYING.texi(,80) @copyright{} Free Software Foundation
../singular_texi/COPYING.texi(,81) @* @uref{ftp://ftp.gnu.ai.mit.edu} or its mirrors
../singular_texi/COPYING.texi(,82) @item MP
../singular_texi/COPYING.texi(,83) @copyright{} Gray/Kajler/Wang, Kent State University
../singular_texi/COPYING.texi(,84) @* @uref{http://www.symbolicnet.org/areas/protocols/mp.html}
../singular_texi/COPYING.texi(,85) @item NTL
../singular_texi/COPYING.texi(,86) @copyright{} Victor Shoup
../singular_texi/COPYING.texi(,87) @* @uref{ftp://www.shoup.net}
../singular_texi/COPYING.texi(,88) @item Singular-Factory
../singular_texi/COPYING.texi(,89) @copyright{} Greuel/Stobbe, University of Kaiserslautern:
../singular_texi/COPYING.texi(,90) @* @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/Factory}
../singular_texi/COPYING.texi(,91) @item Singular-libfac
../singular_texi/COPYING.texi(,92) @copyright{}  Messollen, University of Saarbr@"ucken:
../singular_texi/COPYING.texi(,93) @* @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/Libfac}
../singular_texi/COPYING.texi(,94) @item @sc{Singular} binaries and sources
../singular_texi/COPYING.texi(,95) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/} or via a
../singular_texi/COPYING.texi(,96) WWW brow@-ser from
../singular_texi/COPYING.texi(,97) @uref{http://www.mathematik.uni-kl.de/ftp/pub/Math/Singular/}
../singular_texi/COPYING.texi(,98) @item Cygwin
../singular_texi/COPYING.texi(,99) @uref{http://www.cygwin.com/}
../singular_texi/COPYING.texi(,100) @item Xemacs
../singular_texi/COPYING.texi(,101) @uref{http://www.xemacs.org}
../singular_texi/COPYING.texi(,102) @end table
../singular_texi/COPYING.texi(,104) 
../singular_texi/COPYING.texi(,105) @heading Acknowledgements
../singular_texi/COPYING.texi(,106) 
../singular_texi/COPYING.texi(,107) The development of @sc{Singular} is directed and coordinated by
../singular_texi/COPYING.texi(,108) Gert-Martin Greuel, Gerhard Pfister, and Hans
../singular_texi/COPYING.texi(,109) Sch@"onemann.
../singular_texi/COPYING.texi(,110) 
../singular_texi/COPYING.texi(,111) @cindex  Greuel, Gert-Martin
../singular_texi/COPYING.texi(,112) @cindex  Pfister, Gerhard
../singular_texi/COPYING.texi(,113) @cindex Sch@"onemann, Hans
../singular_texi/COPYING.texi(,114) 
../singular_texi/COPYING.texi(,115) Currently, the @sc{Singular} team has the following members:
../singular_texi/COPYING.texi(,116) Olaf Bachmann,
../singular_texi/COPYING.texi(,117) Anne Fr@"ubis-Kr@"uger,
../singular_texi/COPYING.texi(,118) Thomas Keilen,
../singular_texi/COPYING.texi(,119) Kai Kr@"uger,
../singular_texi/COPYING.texi(,120) Christoph Lossen,
../singular_texi/COPYING.texi(,121) Viktor Levandovskyy,
../singular_texi/COPYING.texi(,122) Wilfred Pohl,
../singular_texi/COPYING.texi(,123) Mathias Schulze,
../singular_texi/COPYING.texi(,124) Eric Westenberger,
../singular_texi/COPYING.texi(,125) and
../singular_texi/COPYING.texi(,126) Tim Wichmann.
../singular_texi/COPYING.texi(,127) @cindex Bachmann, Olaf
../singular_texi/COPYING.texi(,128) @cindex Fr@"ubis-Kr@"uger, Anne
../singular_texi/COPYING.texi(,129) @cindex Keilen, Thomas
../singular_texi/COPYING.texi(,130) @cindex Kr@"uger, Kai
../singular_texi/COPYING.texi(,131) @cindex Lossen, Christoph
../singular_texi/COPYING.texi(,132) @cindex Levandovskyy, Viktor
../singular_texi/COPYING.texi(,133) @cindex Pohl, Wilfred
../singular_texi/COPYING.texi(,134) @cindex Schulze, Mathias
../singular_texi/COPYING.texi(,135) @cindex Westenberger, Eric
../singular_texi/COPYING.texi(,136) @cindex Wichmann, Tim
../singular_texi/COPYING.texi(,137) 
../singular_texi/COPYING.texi(,138) Past members of the @sc{Singular} team are:
../singular_texi/COPYING.texi(,139) Hubert Grassmann,
../singular_texi/COPYING.texi(,140) Wolfgang Neumann,
../singular_texi/COPYING.texi(,141) Jens Schmidt,
../singular_texi/COPYING.texi(,142) R@"udiger Stobbe.
../singular_texi/COPYING.texi(,143) @cindex Grassmann, Hubert
../singular_texi/COPYING.texi(,144) @cindex Neumann, Wolfgang
../singular_texi/COPYING.texi(,145) @cindex Schmidt, Jens
../singular_texi/COPYING.texi(,146) @cindex Stobbe, R@"udiger
../singular_texi/COPYING.texi(,147) 
../singular_texi/COPYING.texi(,148) Further contributions to @sc{Singular} were made by:
../singular_texi/COPYING.texi(,149) Thomas Bayer,
../singular_texi/COPYING.texi(,150) Isabelle Bermejo,
../singular_texi/COPYING.texi(,151) Stephan Endra@ss{},
../singular_texi/COPYING.texi(,152) Jose Ignacio Farran Martin,
../singular_texi/COPYING.texi(,153) Wolfram Decker,
../singular_texi/COPYING.texi(,154) Philippe Gimenez,
../singular_texi/COPYING.texi(,155) Christian Gorzel,
../singular_texi/COPYING.texi(,156) Agnes Heydtmann,
../singular_texi/COPYING.texi(,157) Dietmar Hillebrand,
../singular_texi/COPYING.texi(,158) Tobias Hirsch,
../singular_texi/COPYING.texi(,159) Martin Lamm,
../singular_texi/COPYING.texi(,160) Bernd Martin,
../singular_texi/COPYING.texi(,161) Michael Me@ss{}ollen,
../singular_texi/COPYING.texi(,162) Thomas N@"u@ss{}ler,
../singular_texi/COPYING.texi(,163) Moritz Wenk.
../singular_texi/COPYING.texi(,164) 
../singular_texi/COPYING.texi(,165) 
../singular_texi/COPYING.texi(,166) We should like to acknowledge the financial support given by
../singular_texi/COPYING.texi(,167) the Volkswagen-Stiftung,
../singular_texi/COPYING.texi(,168) the Deutsche Forschungsgemeinschaft
../singular_texi/COPYING.texi(,169) and the Stiftung f@"ur Innovation des Landes Rheinland-Pfalz
../singular_texi/COPYING.texi(,170) to the @sc{Singular} project.
../singular_texi/COPYING.texi(,171) 
../singular_texi/singular.tex(,121) 
../singular_texi/singular.tex(,122) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,123) @node Introduction, General concepts, Preface, Top
../singular_texi/singular.tex(,124) @chapter Introduction
../singular_texi/singular.tex(,125) @cindex Introduction
../singular_texi/singular.tex(,126) 
../singular_texi/start.tex(,1) @comment -*-texinfo-*-
../singular_texi/start.tex(,2) @comment This file was generated by doc2tex.pl from start.doc
../singular_texi/start.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT start.doc INSTEAD
../singular_texi/start.tex(,4) @comment Id: start.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/start.tex(,5) @comment this file contains the "Introduction" chapter.
../singular_texi/start.tex(,6) @c * wichmann: + added changes by GMG.
../singular_texi/start.tex(,7) 
../singular_texi/start.tex(,8) @c The following directives are necessary for proper compilation
../singular_texi/start.tex(,9) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/start.tex(,10) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/start.tex(,11) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/start.tex(,12) @c ignores the `@ignore').
../singular_texi/start.tex(,25) 
../singular_texi/start.tex(,26) 
../singular_texi/start.tex(,28) @menu
../singular_texi/start.tex(,29) * Background::
../singular_texi/start.tex(,30) * How to use this manual::
../singular_texi/start.tex(,31) * Getting started::
../singular_texi/start.tex(,32) @end menu
../singular_texi/start.tex(,41) 
../singular_texi/start.tex(,42) @c ------------------------------------------------------------------
../singular_texi/start.tex(,44) @node Background, How to use this manual, Introduction, Introduction
../singular_texi/start.tex(,49) @section Background
../singular_texi/start.tex(,50) @cindex Background
../singular_texi/start.tex(,51) 
../singular_texi/start.tex(,52) @sc{Singular} is a Computer Algebra system for polynomial
../singular_texi/start.tex(,53) computations with emphasis on the special needs of commutative
../singular_texi/start.tex(,54) algebra, algebraic geometry, and singularity theory.
../singular_texi/start.tex(,55) 
../singular_texi/start.tex(,56) @sc{Singular}'s main computational objects are ideals and
../singular_texi/start.tex(,57) modules over a large variety of baserings. The baserings are polynomial
../singular_texi/start.tex(,58) rings or localizations thereof over a field (e.g., finite fields, the
../singular_texi/start.tex(,59) rationals, floats, algebraic extensions, transcendental extensions) or
../singular_texi/start.tex(,60) quotient rings with respect to an ideal.
../singular_texi/start.tex(,61) 
../singular_texi/start.tex(,62) @sc{Singular} features one of the fastest and most general
../singular_texi/start.tex(,63) implementations of various algorithms for computing Groebner
../singular_texi/start.tex(,64) resp.@: standard bases. The implementation includes Buchberger's algorithm
../singular_texi/start.tex(,65) (if the ordering is a well ordering) and Mora's algorithm (if the
../singular_texi/start.tex(,66) ordering is a tangent cone ordering) as special cases.  Furthermore, it
../singular_texi/start.tex(,67) provides polynomial factorizations, resultant, characteristic set and
../singular_texi/start.tex(,68) gcd computations, syzygy and free-resolution computations, and many more
../singular_texi/start.tex(,69) related functionalities.
../singular_texi/start.tex(,70) 
../singular_texi/start.tex(,71) Based on an easy-to-use interactive shell and a C-like programming
../singular_texi/start.tex(,72) language, @sc{Singular}'s internal functionality is augmented and
../singular_texi/start.tex(,73) user-extendible by libraries written in the @sc{Singular} programming
../singular_texi/start.tex(,74) language. A general and efficient implementation of communication links
../singular_texi/start.tex(,75) allows @sc{Singular} to make its functionality available to other
../singular_texi/start.tex(,76) programs.
../singular_texi/start.tex(,77) 
../singular_texi/start.tex(,78) @sc{Singular}'s development started in 1984 with an implementation of
../singular_texi/start.tex(,79) Mora's Tangent Cone algorithm in Modula-2 on an Atari computer (K.P.
../singular_texi/start.tex(,80) Neuendorf, G. Pfister,
../singular_texi/start.tex(,84) @tex
../singular_texi/start.tex(,85) H.\ Sch\"onemann; Humboldt-Universit\"at
../singular_texi/start.tex(,86) @end tex
../singular_texi/start.tex(,87)  zu Berlin).  The need for a new system arose from the investigation of
../singular_texi/start.tex(,88) mathematical problems coming from singularity theory which none of the
../singular_texi/start.tex(,89) existing systems was able to compute.
../singular_texi/start.tex(,90) 
../singular_texi/start.tex(,91) In the early 1990s @sc{Singular}'s "home-town" moved to
../singular_texi/start.tex(,92) Kaiserslautern, a general standard basis algorithm was implemented in C
../singular_texi/start.tex(,93) and @sc{Singular} was ported to Unix, MS-DOS, Windows NT, and MacOS.
../singular_texi/start.tex(,94) 
../singular_texi/start.tex(,95) Continuous extensions (like polynomial factorization, gcd computations,
../singular_texi/start.tex(,96) links) and refinements led in 1997 to the release of @sc{Singular}
../singular_texi/start.tex(,97) version 1.0 and in 1998 to the release of version 1.2
../singular_texi/start.tex(,98) (much faster standard and Groebner bases computations based on Hilbert series
../singular_texi/start.tex(,99) and on improved implementations of the algorithms,
../singular_texi/start.tex(,100) libraries for primary decomposition, ring normalization, etc.)
../singular_texi/start.tex(,101) 
../singular_texi/start.tex(,102) For the highlights of the new @sc{Singular} version 2-0-4 see @ref{News and changes}.
../singular_texi/start.tex(,103) 
../singular_texi/start.tex(,104) @c Thus, we hope to offer a useful system
../singular_texi/start.tex(,105) @c for dealing with local and global computational aspects
../singular_texi/start.tex(,106) @c of systems of polynomial equations.
../singular_texi/start.tex(,107) 
../singular_texi/start.tex(,108) @c ------------------------------------------------------------------
../singular_texi/start.tex(,110) @node How to use this manual, Getting started, Background, Introduction
../singular_texi/start.tex(,111) @section How to use this manual
../singular_texi/start.tex(,112) @cindex How to use this manual
../singular_texi/start.tex(,119) 
../singular_texi/start.tex(,121) @subsubheading For the impatient user
../singular_texi/start.tex(,123) In @ref{Getting started}, some simple examples explain how to use
../singular_texi/start.tex(,124) @sc{Singular}  in a step-by-step manner.
../singular_texi/start.tex(,125) 
../singular_texi/start.tex(,126) @ref{Examples} should come next for real learning-by-doing or to quickly
../singular_texi/start.tex(,127) solve some given mathematical problems without dwelling too deeply into
../singular_texi/start.tex(,128) @sc{Singular}.
../singular_texi/start.tex(,130) This chapter contains a lot of real-life examples and
../singular_texi/start.tex(,131) detailed instructions and explanations on how to solve mathematical
../singular_texi/start.tex(,132) problems using @sc{Singular}.
../singular_texi/start.tex(,134) 
../singular_texi/start.tex(,135) @c ------------------------------------------------------------------------
../singular_texi/start.tex(,137) @subsubheading For the systematic user
../singular_texi/start.tex(,138) In @ref{General concepts}, all basic concepts which are important to use
../singular_texi/start.tex(,139) and to understand @sc{Singular} are developed.  But even for users
../singular_texi/start.tex(,140) preferring the systematic approach it will be helpful to have a look at
../singular_texi/start.tex(,141) the examples in @ref{Getting started}, every now and then. The topics in
../singular_texi/start.tex(,142) the chapter are organized more or less in the order the novice user has
../singular_texi/start.tex(,143) to deal with them.
../singular_texi/start.tex(,144) 
../singular_texi/start.tex(,145) @itemize @bullet
../singular_texi/start.tex(,146) @item
../singular_texi/start.tex(,147) In @ref{Interactive use}, and its subsections there are some words on
../singular_texi/start.tex(,148) entering and exiting @sc{Singular}, followed by a number of other
../singular_texi/start.tex(,149) aspects concerning the interactive user-interface.
../singular_texi/start.tex(,150) 
../singular_texi/start.tex(,151) @item
../singular_texi/start.tex(,152) To do anything more than trivial integer computations, one needs to
../singular_texi/start.tex(,153) define a basering in @sc{Singular}.  This is explained in detail in
../singular_texi/start.tex(,154) @ref{Rings and orderings}.
../singular_texi/start.tex(,155) 
../singular_texi/start.tex(,156) @item
../singular_texi/start.tex(,157) An overview of the algorithms implemented in the kernel of @sc{Singular}
../singular_texi/start.tex(,158) is given in @ref{Implemented algorithms}.
../singular_texi/start.tex(,159) 
../singular_texi/start.tex(,160) @item
../singular_texi/start.tex(,161) In @ref{The SINGULAR language}, language specific concepts are
../singular_texi/start.tex(,162) introduced such as the notions of names and objects, data types and
../singular_texi/start.tex(,163) conversion between them, etc.
../singular_texi/start.tex(,164) 
../singular_texi/start.tex(,165) @item
../singular_texi/start.tex(,166) In @ref{Input and output}, @sc{Singular}'s mechanisms to store and
../singular_texi/start.tex(,167) retrieve data are discussed.
../singular_texi/start.tex(,168) 
../singular_texi/start.tex(,169) @item
../singular_texi/start.tex(,170) The more complex concepts of procedures and libraries as
../singular_texi/start.tex(,171) well as tools to debug them are considered in the following sections:
../singular_texi/start.tex(,172) @ref{Procedures}, @ref{Libraries}, and @ref{Debugging tools}.
../singular_texi/start.tex(,173) 
../singular_texi/start.tex(,174) @end itemize
../singular_texi/start.tex(,175) 
../singular_texi/start.tex(,176) @ref{Data types}, is a complete treatment for @sc{Singular}'s data types
../singular_texi/start.tex(,177) where each section corresponds to one data type, alphabetically sorted.
../singular_texi/start.tex(,178) For each data type, its purpose is explained, the syntax of its
../singular_texi/start.tex(,179) declaration is given, and related operations and functions are
../singular_texi/start.tex(,180) listed. Examples illustrate its usage.
../singular_texi/start.tex(,181) 
../singular_texi/start.tex(,182) @ref{Functions and system variables}, is an alphabetically ordered
../singular_texi/start.tex(,183) reference list of all of @sc{Singular}'s functions, control structures,
../singular_texi/start.tex(,184) and system variables.  Each entry includes a description of the syntax
../singular_texi/start.tex(,185) and semantics of the item being explained as well as one or more
../singular_texi/start.tex(,186) examples on how to use it.
../singular_texi/start.tex(,187) 
../singular_texi/start.tex(,188) @subsubheading Miscellaneous
../singular_texi/start.tex(,189) @ref{Tricks and pitfalls}, is a loose collection of limitations and
../singular_texi/start.tex(,190) features which may be unexpected by those who expect the
../singular_texi/start.tex(,191) @sc{Singular} language to be an exact copy of the C programming language or of
../singular_texi/start.tex(,192) some Computer Algebra system's languages.  But some mathematical hints are
../singular_texi/start.tex(,193) collected there, as well.
../singular_texi/start.tex(,194) 
../singular_texi/start.tex(,195) @ref{Mathematical background}, introduces some of the mathematical
../singular_texi/start.tex(,196) notions and definitions used throughout this manual.  For example, if in
../singular_texi/start.tex(,197) doubt what exactly @sc{Singular} means by a ``negative degree reverse
../singular_texi/start.tex(,198) lexicographical ordering'' one should refer to this chapter.
../singular_texi/start.tex(,199) 
../singular_texi/start.tex(,200) @ref{SINGULAR libraries}, lists the
../singular_texi/start.tex(,201) libraries which come with @sc{Singular} and the functions contained in
../singular_texi/start.tex(,202) them, respectively.
../singular_texi/start.tex(,204) @c ------------------------------------------------------------------------
../singular_texi/start.tex(,205) 
../singular_texi/start.tex(,206) @subsubheading Typographical conventions
../singular_texi/start.tex(,207) Throughout this manual, the following typographical conventions are
../singular_texi/start.tex(,208) adopted:
../singular_texi/start.tex(,209) 
../singular_texi/start.tex(,210) @itemize @bullet
../singular_texi/start.tex(,211) @item
../singular_texi/start.tex(,212) text in @code{typewriter} denotes @sc{Singular} input and output as well
../singular_texi/start.tex(,213) as reserved names:
../singular_texi/start.tex(,214) 
../singular_texi/start.tex(,215) @itemize @asis
../singular_texi/start.tex(,216) @item The basering can be set using the command @code{setring}.
../singular_texi/start.tex(,217) @end itemize
../singular_texi/start.tex(,218) 
../singular_texi/start.tex(,219) @item
../singular_texi/start.tex(,220) the arrow @expansion{} denotes @sc{Singular} output:
../singular_texi/start.tex(,221) 
../singular_texi/start.tex(,222) @itemize @asis
../singular_texi/start.tex(,223) @item @code{poly p=x+y+z;}
../singular_texi/start.tex(,224) @item @code{p*p;}
../singular_texi/start.tex(,225) @item @code{@expansion{} x2+2xy+y2+2xz+2yz+z2}
../singular_texi/start.tex(,226) @end itemize
../singular_texi/start.tex(,227) 
../singular_texi/start.tex(,228) @item
../singular_texi/start.tex(,229) square brackets are used to denote parts of syntax descriptions which
../singular_texi/start.tex(,230) are optional:
../singular_texi/start.tex(,231) 
../singular_texi/start.tex(,232) @itemize @asis
../singular_texi/start.tex(,233) [optional_text] required_text
../singular_texi/start.tex(,234) @end itemize
../singular_texi/start.tex(,235) 
../singular_texi/start.tex(,236) @item
../singular_texi/start.tex(,237) keys are denoted using typewriter, for example:
../singular_texi/start.tex(,238) 
../singular_texi/start.tex(,239) @itemize @asis
../singular_texi/start.tex(,240) @item @code{N} (press the key @code{N} to get to the next node in help
../singular_texi/start.tex(,241) mode)
../singular_texi/start.tex(,242) @item @code{RETURN} (press @code{RETURN} to finish an input line)
../singular_texi/start.tex(,243) @item @code{CTRL-P} (press control key together with the key @code{P} to
../singular_texi/start.tex(,244) get the previous input line)
../singular_texi/start.tex(,245) @end itemize
../singular_texi/start.tex(,246) 
../singular_texi/start.tex(,247) @end itemize
../singular_texi/start.tex(,248) 
../singular_texi/start.tex(,249) @c ------------------------------------------------------------------
../singular_texi/start.tex(,251) @node Getting started,  , How to use this manual, Introduction
../singular_texi/start.tex(,252) @section Getting started
../singular_texi/start.tex(,258) @cindex Getting started
../singular_texi/start.tex(,259) 
../singular_texi/start.tex(,260) @sc{Singular} is a special purpose system for polynomial
../singular_texi/start.tex(,261) computations. Hence, most of the powerful computations in @sc{Singular}
../singular_texi/start.tex(,262) require the prior definition of a ring. Most important rings are
../singular_texi/start.tex(,263) polynomial rings over a field, localizations hereof, or quotient rings of
../singular_texi/start.tex(,264) such rings modulo an ideal. However, some simple computations with
../singular_texi/start.tex(,265) integers (machine integers of limited size) and manipulations of strings
../singular_texi/start.tex(,266) are available without a ring.
../singular_texi/start.tex(,267) 
../singular_texi/start.tex(,268) @menu
../singular_texi/start.tex(,269) * First steps::
../singular_texi/start.tex(,270) * Rings and standard bases::
../singular_texi/start.tex(,271) * Procedures and libraries::
../singular_texi/start.tex(,272) * Change of rings::
../singular_texi/start.tex(,273) * Modules and their annihilator::
../singular_texi/start.tex(,274) * Resolution::
../singular_texi/start.tex(,275) @end menu
../singular_texi/start.tex(,276) 
../singular_texi/start.tex(,277) @c ------------------------------------------------------------------
../singular_texi/start.tex(,278) @node First steps, Rings and standard bases, Getting started, Getting started
../singular_texi/start.tex(,280) @subsection First steps
../singular_texi/start.tex(,285) @cindex First steps
../singular_texi/start.tex(,286) 
../singular_texi/start.tex(,287) Once @sc{Singular} is started, it awaits an input after the prompt
../singular_texi/start.tex(,288) @code{>}.  Every statement has to be terminated by @code{;} .
../singular_texi/start.tex(,289) 
../singular_texi/start.tex(,290) @smallexample
../singular_texi/start.tex(,291) 37+5;
../singular_texi/start.tex(,292) @expansion{} 42
../singular_texi/start.tex(,293) @end smallexample
../singular_texi/start.tex(,294) 
../singular_texi/start.tex(,295) All objects have a type, e.g., integer variables are defined by
../singular_texi/start.tex(,296) the word @code{int}. An assignment is done by the symbol @code{=} .
../singular_texi/start.tex(,297) 
../singular_texi/start.tex(,298) @smallexample
../singular_texi/start.tex(,299) int k = 2;
../singular_texi/start.tex(,300) @end smallexample
../singular_texi/start.tex(,301) 
../singular_texi/start.tex(,302) @noindent Test for equality resp.@: inequality is done using @code{==}
../singular_texi/start.tex(,303) resp.@: @code{!=} (or @code{<>}), where @code{0} represents the boolean
../singular_texi/start.tex(,304) value FALSE, any other value represents TRUE.
../singular_texi/start.tex(,305) 
../singular_texi/start.tex(,306) @smallexample
../singular_texi/start.tex(,307) k == 2;
../singular_texi/start.tex(,308) @expansion{} 1
../singular_texi/start.tex(,309) k != 2;
../singular_texi/start.tex(,310) @expansion{} 0
../singular_texi/start.tex(,311) @end smallexample
../singular_texi/start.tex(,312) 
../singular_texi/start.tex(,313) @noindent The value of an object is displayed by simply typing its name.
../singular_texi/start.tex(,314) 
../singular_texi/start.tex(,315) @smallexample
../singular_texi/start.tex(,316) k;
../singular_texi/start.tex(,317) @expansion{} 2
../singular_texi/start.tex(,318) @end smallexample
../singular_texi/start.tex(,319) 
../singular_texi/start.tex(,320) @noindent On the other hand the output is suppressed if an assignment
../singular_texi/start.tex(,321) is made.
../singular_texi/start.tex(,322) 
../singular_texi/start.tex(,323) @smallexample
../singular_texi/start.tex(,324) int j;
../singular_texi/start.tex(,325) j = k+1;
../singular_texi/start.tex(,326) @end smallexample
../singular_texi/start.tex(,327) 
../singular_texi/start.tex(,328) @noindent The last displayed (!) result is always available
../singular_texi/start.tex(,329) with the special symbol @code{_} .
../singular_texi/start.tex(,330) 
../singular_texi/start.tex(,331) @smallexample
../singular_texi/start.tex(,332) 2*_;   // the value from k displayed above
../singular_texi/start.tex(,333) @expansion{} 4
../singular_texi/start.tex(,334) @end smallexample
../singular_texi/start.tex(,335) 
../singular_texi/start.tex(,336) Text starting with @code{//} denotes a comment and is ignored in
../singular_texi/start.tex(,337) calculations, as seen in the previous example. Furthermore @sc{Singular}
../singular_texi/start.tex(,338) maintains a history of the previous lines of input, which may be accessed by
../singular_texi/start.tex(,339) @code{CTRL-P} (previous) and @code{CTRL-N} (next) or the arrows on the
../singular_texi/start.tex(,340) keyboard. Note that the history is not available on Macintosh systems.
../singular_texi/start.tex(,341) 
../singular_texi/start.tex(,342) The whole manual is available online by typing the command @code{help;} .
../singular_texi/start.tex(,343) Explanation on single topics, e.g., on @code{intmat}, which defines a
../singular_texi/start.tex(,344) matrix of integers, are obtained by
../singular_texi/start.tex(,345) 
../singular_texi/start.tex(,346) @smallexample
../singular_texi/start.tex(,347) help intmat;
../singular_texi/start.tex(,348) @end smallexample
../singular_texi/start.tex(,349) 
../singular_texi/start.tex(,351) @noindent This shows the text of @ref{intmat}, in the printed manual.
../singular_texi/start.tex(,356) 
../singular_texi/start.tex(,357) Next, we define a
../singular_texi/start.tex(,358) @tex
../singular_texi/start.tex(,359) $3 \times 3$
../singular_texi/start.tex(,360) @end tex
../singular_texi/start.tex(,364)  matrix of integers and initialize it with some values, row by row
../singular_texi/start.tex(,365) from left to right:
../singular_texi/start.tex(,366) 
../singular_texi/start.tex(,367) @smallexample
../singular_texi/start.tex(,368) intmat m[3][3] = 1,2,3,4,5,6,7,8,9;
../singular_texi/start.tex(,369) @end smallexample
../singular_texi/start.tex(,370) 
../singular_texi/start.tex(,371) @noindent A single matrix entry may be selected and changed using
../singular_texi/start.tex(,372) square brackets @code{[} and @code{]}.
../singular_texi/start.tex(,373) 
../singular_texi/start.tex(,374) @smallexample
../singular_texi/start.tex(,375) m[1,2]=0;
../singular_texi/start.tex(,376) m;
../singular_texi/start.tex(,377) @expansion{} 1,0,3,
../singular_texi/start.tex(,378) @expansion{} 4,5,6,
../singular_texi/start.tex(,379) @expansion{} 7,8,9
../singular_texi/start.tex(,380) @end smallexample
../singular_texi/start.tex(,381) 
../singular_texi/start.tex(,382) To calculate the trace of this matrix, we use a @code{for} loop. The
../singular_texi/start.tex(,383) curly brackets @code{@{} and @code{@}} denote the beginning resp.@:
../singular_texi/start.tex(,384) end of a block. If you define a variable without giving an initial
../singular_texi/start.tex(,385) value, as the variable @code{tr} in the example below, @sc{Singular}
../singular_texi/start.tex(,386) assigns a default value for the specific type. In this case, the default
../singular_texi/start.tex(,387) value for integers is @code{0}. Note that the integer variable @code{j}
../singular_texi/start.tex(,388) has already been defined above.
../singular_texi/start.tex(,389) 
../singular_texi/start.tex(,390) @smallexample
../singular_texi/start.tex(,391) int tr;
../singular_texi/start.tex(,392) for ( j=1; j <= 3; j++ ) @{ tr=tr + m[j,j]; @}
../singular_texi/start.tex(,393) tr;
../singular_texi/start.tex(,394) @expansion{} 15
../singular_texi/start.tex(,395) @end smallexample
../singular_texi/start.tex(,396) 
../singular_texi/start.tex(,397) Variables of type string can also be defined and used without a ring
../singular_texi/start.tex(,398) being active. Strings are delimited by @code{"} (double quotes). They
../singular_texi/start.tex(,399) may be used to comment the output of a computation or to give it a nice
../singular_texi/start.tex(,400) format. If a string contains valid @sc{Singular} commands, it can be
../singular_texi/start.tex(,401) executed using the function @code{execute}. The result is the same as if
../singular_texi/start.tex(,402) the commands would have been written on the command line. This feature
../singular_texi/start.tex(,403) is especially useful to define new rings inside procedures.
../singular_texi/start.tex(,404) 
../singular_texi/start.tex(,405) @smallexample
../singular_texi/start.tex(,406) "example for strings:";
../singular_texi/start.tex(,407) @expansion{} example for strings:
../singular_texi/start.tex(,408) string s="The element of m ";
../singular_texi/start.tex(,409) s = s + "at position [2,3] is:";  // concatenation of strings by +
../singular_texi/start.tex(,410) s , m[2,3] , ".";
../singular_texi/start.tex(,411) @expansion{} The element of m at position [2,3] is: 6 .
../singular_texi/start.tex(,412) s="m[2,1]=0; m;";
../singular_texi/start.tex(,413) execute(s);
../singular_texi/start.tex(,414) @expansion{} 1,0,3,
../singular_texi/start.tex(,415) @expansion{} 0,5,6,
../singular_texi/start.tex(,416) @expansion{} 7,8,9
../singular_texi/start.tex(,417) @end smallexample
../singular_texi/start.tex(,418) 
../singular_texi/start.tex(,419) This example shows that expressions can be separated by @code{,} (comma)
../singular_texi/start.tex(,420) giving a list of expressions. @sc{Singular} evaluates each expression in
../singular_texi/start.tex(,421) this list and prints all results separated by spaces.
../singular_texi/start.tex(,422) 
../singular_texi/start.tex(,423) @c ------------------------------------------------------------------
../singular_texi/start.tex(,424) @node Rings and standard bases, Procedures and libraries, First steps, Getting started
../singular_texi/start.tex(,426) @subsection Rings and standard bases
../singular_texi/start.tex(,431) @cindex Rings and standard bases
../singular_texi/start.tex(,432) 
../singular_texi/start.tex(,433) To calculate with objects as ideals, matrices, modules, and polynomial
../singular_texi/start.tex(,434) vectors, a ring has to be defined first.
../singular_texi/start.tex(,435) 
../singular_texi/start.tex(,436) @smallexample
../singular_texi/start.tex(,437) ring r = 0,(x,y,z),dp;
../singular_texi/start.tex(,438) @end smallexample
../singular_texi/start.tex(,439) 
../singular_texi/start.tex(,440) The definition of a ring consists of three parts: the first part
../singular_texi/start.tex(,441) determines the ground field, the second part determines the names of the
../singular_texi/start.tex(,442) ring variables, and the third part determines the monomial ordering to
../singular_texi/start.tex(,443) be used. So the example above declares a polynomial ring called @code{r}
../singular_texi/start.tex(,444) with a ground field of characteristic 
../singular_texi/start.tex(,448) @tex
../singular_texi/start.tex(,449) $0$
../singular_texi/start.tex(,450) @end tex
../singular_texi/start.tex(,451)  (i.e., the rational
../singular_texi/start.tex(,452) numbers) and ring variables called @code{x}, @code{y}, and @code{z}. The
../singular_texi/start.tex(,453) @code{dp} at the end means that the degree reverse lexicographical
../singular_texi/start.tex(,454) ordering should be used.
../singular_texi/start.tex(,455) 
../singular_texi/start.tex(,456) Other ring declarations:
../singular_texi/start.tex(,457) 
../singular_texi/start.tex(,458) @table @code
../singular_texi/start.tex(,459) @item ring r1=32003,(x,y,z),dp;
../singular_texi/start.tex(,460) characteristic 32003, variables @code{x}, @code{y}, and @code{z} and
../singular_texi/start.tex(,461) ordering @code{dp}.
../singular_texi/start.tex(,462) 
../singular_texi/start.tex(,463) @item ring r2=32003,(a,b,c,d),lp;
../singular_texi/start.tex(,464) characteristic 32003, variable names @code{a}, @code{b}, @code{c},
../singular_texi/start.tex(,465) @code{d} and lexicographical ordering.
../singular_texi/start.tex(,466) 
../singular_texi/start.tex(,467) @item ring r3=7,(x(1..10)),ds;
../singular_texi/start.tex(,468) characteristic 7, variable names @code{x(1)},@dots{},@code{x(10)}, negative
../singular_texi/start.tex(,469) degree reverse lexicographical ordering (@code{ds}).
../singular_texi/start.tex(,470) 
../singular_texi/start.tex(,471) @item ring r4=(0,a),(mu,nu),lp;
../singular_texi/start.tex(,472) transcendental extension of 
../singular_texi/start.tex(,476) @tex
../singular_texi/start.tex(,477) $Q$
../singular_texi/start.tex(,478) @end tex
../singular_texi/start.tex(,479)  by 
../singular_texi/start.tex(,483) @tex
../singular_texi/start.tex(,484) $a$
../singular_texi/start.tex(,485) @end tex
../singular_texi/start.tex(,486) , variable names
../singular_texi/start.tex(,487) @code{mu} and @code{nu}.
../singular_texi/start.tex(,488) 
../singular_texi/start.tex(,489) @item ring r5=real,(a,b),lp;
../singular_texi/start.tex(,490) floating point numbers (single machine precision),
../singular_texi/start.tex(,491) variable names @code{a} and @code{b}.
../singular_texi/start.tex(,492) 
../singular_texi/start.tex(,493) @item ring r6=(real,50),(a,b),lp;
../singular_texi/start.tex(,494) floating point numbers with extended precision of 50 digits,
../singular_texi/start.tex(,495) variable names @code{a} and @code{b}.
../singular_texi/start.tex(,496) 
../singular_texi/start.tex(,497) @item ring r7=(complex,50,i),(a,b),lp;
../singular_texi/start.tex(,498) complex floating point numbers with extended precision of 50 digits
../singular_texi/start.tex(,499) and imaginary unit @code{i},
../singular_texi/start.tex(,500) variable names @code{a} and @code{b}.
../singular_texi/start.tex(,501) @end table
../singular_texi/start.tex(,502) 
../singular_texi/start.tex(,503) @c Another valid characteristic would be, for example, a prime number less
../singular_texi/start.tex(,504) @c or equal to 32003. The name of the ring variables may be any
../singular_texi/start.tex(,505) @c valid @sc{Singular} name. Even indexed names are allowed, so
../singular_texi/start.tex(,506) @c @code{x(1..10)} specifies the ring variables @code{x(1)}, @dots{},
../singular_texi/start.tex(,507) @c @code{x(10)}. @sc{Singular} offers the possibility to calculate with any
../singular_texi/start.tex(,508) @c monomial ordering, some orderings are predefined with special names like
../singular_texi/start.tex(,509) @c @code{dp} in the example above. Another important example is the
../singular_texi/start.tex(,510) @c lexicographical ordering called @code{lp}.
../singular_texi/start.tex(,511) @c
../singular_texi/start.tex(,512) Typing the name of a ring prints its definition. The example below
../singular_texi/start.tex(,513) shows that the default ring in @sc{Singular} is 
../singular_texi/start.tex(,517) @tex
../singular_texi/start.tex(,518) $Z/32003[x,y,z]$
../singular_texi/start.tex(,519) @end tex
../singular_texi/start.tex(,520) 
../singular_texi/start.tex(,521) with degree reverse lexicographical ordering:
../singular_texi/start.tex(,522) 
../singular_texi/start.tex(,523) @smallexample
../singular_texi/start.tex(,524) @c computed example Rings_and_standard_bases start.doc:494 
../singular_texi/start.tex(,525) ring r8;
../singular_texi/start.tex(,526) r8;
../singular_texi/start.tex(,527) @expansion{} //   characteristic : 32003
../singular_texi/start.tex(,528) @expansion{} //   number of vars : 3
../singular_texi/start.tex(,529) @expansion{} //        block   1 : ordering dp
../singular_texi/start.tex(,530) @expansion{} //                  : names    x y z 
../singular_texi/start.tex(,531) @expansion{} //        block   2 : ordering C
../singular_texi/start.tex(,532) @c end example Rings_and_standard_bases start.doc:494
../singular_texi/start.tex(,533) @end smallexample
../singular_texi/start.tex(,534) 
../singular_texi/start.tex(,535) Defining a ring makes this ring the current active basering, so each
../singular_texi/start.tex(,536) ring definition above switches to a new basering. The concept of rings
../singular_texi/start.tex(,537) in @sc{Singular} is discussed in detail in
../singular_texi/start.tex(,539) @ref{Rings and orderings}.
../singular_texi/start.tex(,544) 
../singular_texi/start.tex(,545) The basering is now @code{r8}. Since we want to calculate in the ring
../singular_texi/start.tex(,546) @code{r}, which we defined first, we have to switch back to it. This can
../singular_texi/start.tex(,547) be done using the function @code{setring}:
../singular_texi/start.tex(,548) 
../singular_texi/start.tex(,549) @smallexample
../singular_texi/start.tex(,550) setring r;
../singular_texi/start.tex(,551) @end smallexample
../singular_texi/start.tex(,552) 
../singular_texi/start.tex(,553) Once a ring is active, we can define polynomials. A monomial, say
../singular_texi/start.tex(,554) @tex
../singular_texi/start.tex(,555) $x^3$
../singular_texi/start.tex(,556) @end tex
../singular_texi/start.tex(,560) may be entered in two ways: either using the power operator @code{^},
../singular_texi/start.tex(,561) saying @code{x^3}, or in short-hand notation without operator, saying
../singular_texi/start.tex(,562) @code{x3}. Note that the short-hand notation is forbidden if the name
../singular_texi/start.tex(,563) of the ring variable consists of more than one character. Note, that
../singular_texi/start.tex(,564) @sc{Singular} always expands brackets and automatically sorts the terms
../singular_texi/start.tex(,565) with respect to the monomial ordering of the basering.
../singular_texi/start.tex(,566) 
../singular_texi/start.tex(,567) @smallexample
../singular_texi/start.tex(,568) poly f =  x3+y3+(x-y)*x2y2+z2;
../singular_texi/start.tex(,569) f;
../singular_texi/start.tex(,570) @expansion{} x3y2-x2y3+x3+y3+z2
../singular_texi/start.tex(,571) @end smallexample
../singular_texi/start.tex(,572) 
../singular_texi/start.tex(,573) The command @code{size} determines in general the number of ''single
../singular_texi/start.tex(,574) entries`` in an object. In particular, for polynomials, @code{size}
../singular_texi/start.tex(,575) determines the number of monomials.
../singular_texi/start.tex(,576) 
../singular_texi/start.tex(,577) @smallexample
../singular_texi/start.tex(,578) size(f);
../singular_texi/start.tex(,579) @expansion{} 5
../singular_texi/start.tex(,580) @end smallexample
../singular_texi/start.tex(,581) 
../singular_texi/start.tex(,582) A natural question is to ask if a point, e.g., @code{(x,y,z)=(1,2,0)}, lies
../singular_texi/start.tex(,583) on the variety defined by the polynomials @code{f} and @code{g}. For
../singular_texi/start.tex(,584) this we define an ideal generated by both polynomials, substitute the
../singular_texi/start.tex(,585) coordinates of the point for the ring variables, and check if the result
../singular_texi/start.tex(,586) is zero:
../singular_texi/start.tex(,587) 
../singular_texi/start.tex(,588) @smallexample
../singular_texi/start.tex(,589) poly g =  f^2 *(2x-y);
../singular_texi/start.tex(,590) ideal I = f,g;
../singular_texi/start.tex(,591) ideal J = subst(I,var(1),1);
../singular_texi/start.tex(,592) J = subst(J,var(2),2);
../singular_texi/start.tex(,593) J = subst(J,var(3),0);
../singular_texi/start.tex(,594) J;
../singular_texi/start.tex(,595) @expansion{} J[1]=5
../singular_texi/start.tex(,596) @expansion{} J[2]=0
../singular_texi/start.tex(,597) @end smallexample
../singular_texi/start.tex(,598) 
../singular_texi/start.tex(,599) @noindent Since the result is not zero, the point @code{(1,2,0)} does
../singular_texi/start.tex(,600) not lie on the variety @code{V(f,g)}.
../singular_texi/start.tex(,601) 
../singular_texi/start.tex(,602) Another question is to decide whether some function vanishes on a
../singular_texi/start.tex(,603) variety, or in algebraic terms if a polynomial is contained in a given
../singular_texi/start.tex(,604) ideal. For this we calculate a standard basis using the command
../singular_texi/start.tex(,605) @code{groebner} and afterwards reduce the polynomial with respect to
../singular_texi/start.tex(,606) this standard basis.
../singular_texi/start.tex(,607) 
../singular_texi/start.tex(,608) @smallexample
../singular_texi/start.tex(,609) ideal sI = groebner(f);
../singular_texi/start.tex(,610) reduce(g,sI);
../singular_texi/start.tex(,611) @expansion{} 0
../singular_texi/start.tex(,612) @end smallexample
../singular_texi/start.tex(,613) 
../singular_texi/start.tex(,614) @noindent As the result is @code{0} the polynomial @code{g} belongs to the
../singular_texi/start.tex(,615) ideal defined by @code{f}.
../singular_texi/start.tex(,616) 
../singular_texi/start.tex(,617) The function @code{groebner}, like many other functions in
../singular_texi/start.tex(,618) @sc{Singular}, prints a protocol during calculations, if desired. The
../singular_texi/start.tex(,619) command @code{option(prot);} enables protocolling whereas
../singular_texi/start.tex(,620) @code{option(noprot);} turns it off.
../singular_texi/start.tex(,622) @ref{option}, explains the meaning
../singular_texi/start.tex(,623) of the different symbols printed during calculations.
../singular_texi/start.tex(,625) 
../singular_texi/start.tex(,626) The command @code{kbase} calculates a basis of the polynomial ring
../singular_texi/start.tex(,627) modulo an ideal, if the quotient ring is finite dimensional.
../singular_texi/start.tex(,628) As an example we calculate the Milnor number of a
../singular_texi/start.tex(,629) hypersurface singularity in the global and local case. This is the
../singular_texi/start.tex(,630) vector space dimension of the polynomial ring modulo the Jacobian ideal
../singular_texi/start.tex(,631) in the global case resp.@: of the power series ring modulo the Jacobian
../singular_texi/start.tex(,632) ideal in the local case. @xref{Critical points}, for a detailed
../singular_texi/start.tex(,633) explanation.
../singular_texi/start.tex(,634) 
../singular_texi/start.tex(,635) The Jacobian ideal is obtained with the command @code{jacob}.
../singular_texi/start.tex(,636) 
../singular_texi/start.tex(,637) @smallexample
../singular_texi/start.tex(,638) ideal J = jacob(f);
../singular_texi/start.tex(,639) @expansion{} // ** redefining J **
../singular_texi/start.tex(,640) J;
../singular_texi/start.tex(,641) @expansion{} J[1]=3x2y2-2xy3+3x2
../singular_texi/start.tex(,642) @expansion{} J[2]=2x3y-3x2y2+3y2
../singular_texi/start.tex(,643) @expansion{} J[3]=2z
../singular_texi/start.tex(,644) @end smallexample
../singular_texi/start.tex(,645) 
../singular_texi/start.tex(,646) @noindent @sc{Singular} prints the line @code{// ** redefining J
../singular_texi/start.tex(,647) **}. This indicates that we have previously defined a variable with name
../singular_texi/start.tex(,648) @code{J} of type ideal (see above).
../singular_texi/start.tex(,649) 
../singular_texi/start.tex(,650) To obtain a representing set of the quotient vector space we first
../singular_texi/start.tex(,651) calculate a standard basis, then we apply the function @code{kbase} to
../singular_texi/start.tex(,652) this standard basis.
../singular_texi/start.tex(,653) 
../singular_texi/start.tex(,654) @smallexample
../singular_texi/start.tex(,655) J = groebner(J);
../singular_texi/start.tex(,656) ideal K = kbase(J);
../singular_texi/start.tex(,657) K;
../singular_texi/start.tex(,658) @expansion{} K[1]=y4
../singular_texi/start.tex(,659) @expansion{} K[2]=xy3
../singular_texi/start.tex(,660) @expansion{} K[3]=y3
../singular_texi/start.tex(,661) @expansion{} K[4]=xy2
../singular_texi/start.tex(,662) @expansion{} K[5]=y2
../singular_texi/start.tex(,663) @expansion{} K[6]=x2y
../singular_texi/start.tex(,664) @expansion{} K[7]=xy
../singular_texi/start.tex(,665) @expansion{} K[8]=y
../singular_texi/start.tex(,666) @expansion{} K[9]=x3
../singular_texi/start.tex(,667) @expansion{} K[10]=x2
../singular_texi/start.tex(,668) @expansion{} K[11]=x
../singular_texi/start.tex(,669) @expansion{} K[12]=1
../singular_texi/start.tex(,670) @end smallexample
../singular_texi/start.tex(,671) 
../singular_texi/start.tex(,672) @noindent Then
../singular_texi/start.tex(,673) 
../singular_texi/start.tex(,674) @smallexample
../singular_texi/start.tex(,675) size(K);
../singular_texi/start.tex(,676) @expansion{} 12
../singular_texi/start.tex(,677) @end smallexample
../singular_texi/start.tex(,678) 
../singular_texi/start.tex(,679) @noindent gives the desired vector space dimension
../singular_texi/start.tex(,680) @tex
../singular_texi/start.tex(,681) $K[x,y,z]/\hbox{\rm jacob}(f)$.
../singular_texi/start.tex(,682) @end tex
../singular_texi/start.tex(,686) As in @sc{Singular} the functions may take the input directly from
../singular_texi/start.tex(,687) earlier calculations, the whole sequence of commands may be written
../singular_texi/start.tex(,688) in one single statement.
../singular_texi/start.tex(,689) 
../singular_texi/start.tex(,690) @smallexample
../singular_texi/start.tex(,691) size(kbase(groebner(jacob(f))));
../singular_texi/start.tex(,692) @expansion{} 12
../singular_texi/start.tex(,693) @end smallexample
../singular_texi/start.tex(,694) 
../singular_texi/start.tex(,695) When we are not interested in a basis of the quotient vector space, but
../singular_texi/start.tex(,696) only in the resulting dimension we may even use the command @code{vdim}
../singular_texi/start.tex(,697) and write:
../singular_texi/start.tex(,698) 
../singular_texi/start.tex(,699) @smallexample
../singular_texi/start.tex(,700) vdim(groebner(jacob(f)));
../singular_texi/start.tex(,701) @expansion{} 12
../singular_texi/start.tex(,702) @end smallexample
../singular_texi/start.tex(,703) 
../singular_texi/start.tex(,704) @c ------------------------------------------------------------------
../singular_texi/start.tex(,705) @node Procedures and libraries, Change of rings, Rings and standard bases, Getting started
../singular_texi/start.tex(,707) @subsection Procedures and libraries
../singular_texi/start.tex(,712) @cindex Procedures and libraries
../singular_texi/start.tex(,713) 
../singular_texi/start.tex(,714) @sc{Singular} offers a comfortable programming language, with a syntax
../singular_texi/start.tex(,715) close to C. So it is possible to define procedures which collect several
../singular_texi/start.tex(,716) commands to a new one. Procedures are defined with the keyword
../singular_texi/start.tex(,717) @code{proc} followed by a name and an optional parameter list with
../singular_texi/start.tex(,718) specified types.  Finally, a procedure may return values using the
../singular_texi/start.tex(,719) command @code{return}.
../singular_texi/start.tex(,720) 
../singular_texi/start.tex(,721) Define the following procedure called @code{Milnor}:
../singular_texi/start.tex(,722) 
../singular_texi/start.tex(,723) @smallexample
../singular_texi/start.tex(,724) proc Milnor (poly h)
../singular_texi/start.tex(,725) @{
../singular_texi/start.tex(,726)   return(vdim(groebner(jacob(h))));
../singular_texi/start.tex(,727) @}
../singular_texi/start.tex(,728) @end smallexample
../singular_texi/start.tex(,729) 
../singular_texi/start.tex(,730) Note: if you have entered the first line of the procedure and pressed
../singular_texi/start.tex(,731) @code{RETURN}, @sc{Singular} prints the prompt @code{.} (dot) instead of
../singular_texi/start.tex(,732) the usual prompt @code{>} . This shows that the input is incomplete and
../singular_texi/start.tex(,733) @sc{Singular} expects more lines. After typing the closing curly
../singular_texi/start.tex(,734) bracket, @sc{Singular} prints the usual prompt indicating that the input
../singular_texi/start.tex(,735) is now complete.
../singular_texi/start.tex(,736) 
../singular_texi/start.tex(,737) @noindent Then call the procedure:
../singular_texi/start.tex(,738) 
../singular_texi/start.tex(,739) @smallexample
../singular_texi/start.tex(,740) Milnor(f);
../singular_texi/start.tex(,741) @expansion{} 12
../singular_texi/start.tex(,742) @end smallexample
../singular_texi/start.tex(,743) 
../singular_texi/start.tex(,744) @noindent Note that the result may depend on the basering as we will
../singular_texi/start.tex(,745) see in the next chapter.
../singular_texi/start.tex(,746) 
../singular_texi/start.tex(,747) The distribution of  @sc{Singular} contains  several libraries, each of
../singular_texi/start.tex(,748) which is a collection of useful
../singular_texi/start.tex(,749) procedures based on the kernel commands, which extend the functionality
../singular_texi/start.tex(,750) of @sc{Singular}. The command @code{help "all.lib";} lists all libraries
../singular_texi/start.tex(,751) together with a one-line explanation.
../singular_texi/start.tex(,752) @c The command @code{help}
../singular_texi/start.tex(,753) @c library_name@code{;} lists all procedures of the library, @code{help}
../singular_texi/start.tex(,754) @c proc_name@code{;} shows an explanation of the procedure after the
../singular_texi/start.tex(,755) @c library has been loaded. The command @code{LIB "all.lib";} loads all
../singular_texi/start.tex(,756) @c libraries.
../singular_texi/start.tex(,757) 
../singular_texi/start.tex(,758) One of these libraries is @code{sing.lib} which already contains a
../singular_texi/start.tex(,759) procedure called @code{milnor} to calculate the Milnor number not only
../singular_texi/start.tex(,760) for hypersurfaces but more generally for complete intersection
../singular_texi/start.tex(,761) singularities.
../singular_texi/start.tex(,762) 
../singular_texi/start.tex(,763) Libraries are loaded with the command @code{LIB}. Some additional
../singular_texi/start.tex(,764) information during the process of loading is displayed on the screen,
../singular_texi/start.tex(,765) which we omit here.
../singular_texi/start.tex(,766) 
../singular_texi/start.tex(,767) @smallexample
../singular_texi/start.tex(,768) LIB "sing.lib";
../singular_texi/start.tex(,769) @end smallexample
../singular_texi/start.tex(,770) 
../singular_texi/start.tex(,771) As all input in @sc{Singular} is case sensitive, there is no conflict with
../singular_texi/start.tex(,772) the previously  defined procedure @code{Milnor}, but the result is the same.
../singular_texi/start.tex(,773) 
../singular_texi/start.tex(,774) @smallexample
../singular_texi/start.tex(,775) milnor(f);
../singular_texi/start.tex(,776) @expansion{} 12
../singular_texi/start.tex(,777) @end smallexample
../singular_texi/start.tex(,778) 
../singular_texi/start.tex(,779) The procedures in a library have a help part
../singular_texi/start.tex(,780) which is displayed by typing
../singular_texi/start.tex(,781) 
../singular_texi/start.tex(,782) @smallexample
../singular_texi/start.tex(,783) help milnor;
../singular_texi/start.tex(,784) @c @expansion{} // proc milnor from lib sing.lib
../singular_texi/start.tex(,785) @c @expansion{} proc milnor (ideal i)
../singular_texi/start.tex(,786) @c @expansion{} USAGE:   milnor(i); i ideal or poly
../singular_texi/start.tex(,787) @c @expansion{} RETURN:  Milnor number of i, if i is ICIS (isolated complete intersection
../singular_texi/start.tex(,788) @c @expansion{}          singularity) in generic form, resp. -1 if not
../singular_texi/start.tex(,789) @c @expansion{} NOTE:    use proc nf_icis to put generators in generic form
../singular_texi/start.tex(,790) @c @expansion{}          printlevel >=0: display comments (default)
../singular_texi/start.tex(,791) @c @expansion{} EXAMPLE: example milnor; shows an example
../singular_texi/start.tex(,792) @c @expansion{}
../singular_texi/start.tex(,793) @end smallexample
../singular_texi/start.tex(,794) 
../singular_texi/start.tex(,795) @noindent as well as some examples, which are executed by
../singular_texi/start.tex(,796) 
../singular_texi/start.tex(,797) @smallexample
../singular_texi/start.tex(,798) example milnor;
../singular_texi/start.tex(,799) @c @expansion{} // proc milnor from lib sing.lib
../singular_texi/start.tex(,800) @c @expansion{} EXAMPLE:
../singular_texi/start.tex(,801) @c @expansion{}    int p      = printlevel;
../singular_texi/start.tex(,802) @c @expansion{}    printlevel = 1;
../singular_texi/start.tex(,803) @c @expansion{}    ring r     = 32003,(x,y,z),ds;
../singular_texi/start.tex(,804) @c @expansion{}    ideal j    = x5+y6+z6,x2+2y2+3z2,xyz+yx;
../singular_texi/start.tex(,805) @c @expansion{}    milnor(j);
../singular_texi/start.tex(,806) @c @expansion{} //sequence of discriminant numbers: 100,149,70
../singular_texi/start.tex(,807) @c @expansion{} 21
../singular_texi/start.tex(,808) @c @expansion{}    poly f     = x7+y7+(x-y)^2*x2y2+z2;
../singular_texi/start.tex(,809) @c @expansion{}    milnor(f);
../singular_texi/start.tex(,810) @c @expansion{} 28
../singular_texi/start.tex(,811) @c @expansion{}    printlevel = p;
../singular_texi/start.tex(,812) @c @expansion{}
../singular_texi/start.tex(,813) @end smallexample
../singular_texi/start.tex(,814) 
../singular_texi/start.tex(,815) @noindent Likewise, the library itself has a help part, to show a list of
../singular_texi/start.tex(,816) all the functions
../singular_texi/start.tex(,817) available for the user which are contained in the library.
../singular_texi/start.tex(,818) 
../singular_texi/start.tex(,819) @smallexample
../singular_texi/start.tex(,820) help sing.lib;
../singular_texi/start.tex(,821) @end smallexample
../singular_texi/start.tex(,822) 
../singular_texi/start.tex(,823) @noindent The output of the help commands is omitted here.
../singular_texi/start.tex(,824) 
../singular_texi/start.tex(,825) @c ------------------------------------------------------------------
../singular_texi/start.tex(,826) @node Change of rings, Modules and their annihilator, Procedures and libraries, Getting started
../singular_texi/start.tex(,828) @subsection Change of rings
../singular_texi/start.tex(,833) @cindex Change of rings
../singular_texi/start.tex(,834) 
../singular_texi/start.tex(,835) To calculate the local Milnor number we have to do the calculation with the
../singular_texi/start.tex(,836) same commands in a ring with local ordering.
../singular_texi/start.tex(,838) Define the localization of the polynomial ring at the origin
../singular_texi/start.tex(,839) (@pxref{Polynomial data}, and @ref{Mathematical background}).
../singular_texi/start.tex(,844) 
../singular_texi/start.tex(,845) @smallexample
../singular_texi/start.tex(,846) ring rl = 0,(x,y,z),ds;
../singular_texi/start.tex(,847) @end smallexample
../singular_texi/start.tex(,848) 
../singular_texi/start.tex(,849) This ordering determines the standard basis which will be calculated.
../singular_texi/start.tex(,850) Fetch the polynomial defined in the ring @code{r} into this new ring,
../singular_texi/start.tex(,851) thus avoiding retyping the input.
../singular_texi/start.tex(,852) 
../singular_texi/start.tex(,853) @smallexample
../singular_texi/start.tex(,854) poly f = fetch(r,f);
../singular_texi/start.tex(,855) f;
../singular_texi/start.tex(,856) @expansion{} z2+x3+y3+x3y2-x2y3
../singular_texi/start.tex(,857) @end smallexample
../singular_texi/start.tex(,858) 
../singular_texi/start.tex(,859) @noindent Instead of @code{fetch} we can use the function @code{imap}
../singular_texi/start.tex(,860) which is more general but less efficient.
../singular_texi/start.tex(,862) The most general way to fetch data from one ring to another is to use maps,
../singular_texi/start.tex(,863) this will be explained in @ref{map}.
../singular_texi/start.tex(,868) 
../singular_texi/start.tex(,869) In this ring the terms are ordered by increasing exponents. The local Milnor
../singular_texi/start.tex(,870) number is now
../singular_texi/start.tex(,871) 
../singular_texi/start.tex(,872) @smallexample
../singular_texi/start.tex(,873) Milnor(f);
../singular_texi/start.tex(,874) @expansion{} 4
../singular_texi/start.tex(,875) @end smallexample
../singular_texi/start.tex(,876) 
../singular_texi/start.tex(,877) This shows that @code{f} has outside the origin in affine 3-space
../singular_texi/start.tex(,878) singularities with local Milnor number adding up to
../singular_texi/start.tex(,879) @tex
../singular_texi/start.tex(,880) $12-4=8$.
../singular_texi/start.tex(,881) @end tex
../singular_texi/start.tex(,885) Using global and local orderings as above is a convenient way to check
../singular_texi/start.tex(,886) whether a variety has singularities outside the origin.
../singular_texi/start.tex(,887) 
../singular_texi/start.tex(,888) The command @code{jacob} applied twice gives the Hessian of @code{f}, a
../singular_texi/start.tex(,889) 3x3 - matrix.
../singular_texi/start.tex(,890) 
../singular_texi/start.tex(,891) @smallexample
../singular_texi/start.tex(,892) matrix H = jacob(jacob(f));
../singular_texi/start.tex(,893) H;
../singular_texi/start.tex(,894) @expansion{} H[1,1]=6x+6xy2-2y3
../singular_texi/start.tex(,895) @expansion{} H[1,2]=6x2y-6xy2
../singular_texi/start.tex(,896) @expansion{} H[1,3]=0
../singular_texi/start.tex(,897) @expansion{} H[2,1]=6x2y-6xy2
../singular_texi/start.tex(,898) @expansion{} H[2,2]=6y+2x3-6x2y
../singular_texi/start.tex(,899) @expansion{} H[2,3]=0
../singular_texi/start.tex(,900) @expansion{} H[3,1]=0
../singular_texi/start.tex(,901) @expansion{} H[3,2]=0
../singular_texi/start.tex(,902) @expansion{} H[3,3]=2
../singular_texi/start.tex(,903) @end smallexample
../singular_texi/start.tex(,904) 
../singular_texi/start.tex(,905) The @code{print} command displays the matrix in a nicer form.
../singular_texi/start.tex(,906) 
../singular_texi/start.tex(,907) @smallexample
../singular_texi/start.tex(,908) print(H);
../singular_texi/start.tex(,909) @expansion{} 6x+6xy2-2y3,6x2y-6xy2,  0,
../singular_texi/start.tex(,910) @expansion{} 6x2y-6xy2,  6y+2x3-6x2y,0,
../singular_texi/start.tex(,911) @expansion{} 0,          0,          2
../singular_texi/start.tex(,912) @end smallexample
../singular_texi/start.tex(,913) 
../singular_texi/start.tex(,914) We may calculate the determinant and (the ideal generated by all) minors of
../singular_texi/start.tex(,915) a given size.
../singular_texi/start.tex(,916) 
../singular_texi/start.tex(,917) @smallexample
../singular_texi/start.tex(,918) det(H);
../singular_texi/start.tex(,919) @expansion{} 72xy+24x4-72x3y+72xy3-24y4-48x4y2+64x3y3-48x2y4
../singular_texi/start.tex(,920) minor(H,1);  // the 1x1 - minors
../singular_texi/start.tex(,921) @expansion{} _[1]=2
../singular_texi/start.tex(,922) @expansion{} _[2]=6y+2x3-6x2y
../singular_texi/start.tex(,923) @expansion{} _[3]=6x2y-6xy2
../singular_texi/start.tex(,924) @expansion{} _[4]=6x2y-6xy2
../singular_texi/start.tex(,925) @expansion{} _[5]=6x+6xy2-2y3
../singular_texi/start.tex(,926) @end smallexample
../singular_texi/start.tex(,927) 
../singular_texi/start.tex(,928) The algorithm of the standard basis computations may be
../singular_texi/start.tex(,929) affected by the command @code{option}. For example, a reduced standard
../singular_texi/start.tex(,930) basis of the ideal generated by the
../singular_texi/start.tex(,931) @tex
../singular_texi/start.tex(,932) $1 \times 1$-minors
../singular_texi/start.tex(,933) @end tex
../singular_texi/start.tex(,937)  of H  is obtained in the following way:
../singular_texi/start.tex(,938) @smallexample
../singular_texi/start.tex(,939) option(redSB);
../singular_texi/start.tex(,940) groebner(minor(H,1));
../singular_texi/start.tex(,941) @expansion{} _[1]=1
../singular_texi/start.tex(,942) @end smallexample
../singular_texi/start.tex(,943) 
../singular_texi/start.tex(,944) This shows that 1 is contained in the ideal of the
../singular_texi/start.tex(,945) @tex
../singular_texi/start.tex(,946) $1 \times 1$-minors,
../singular_texi/start.tex(,947) @end tex
../singular_texi/start.tex(,951) hence the corresponding variety is empty.
../singular_texi/start.tex(,952) @c Coming back to some mathematical considerations, we study the problem how
../singular_texi/start.tex(,953) @c to calculate some ....
../singular_texi/start.tex(,954) 
../singular_texi/start.tex(,955) @c ------------------------------------------------------------------
../singular_texi/start.tex(,956) @c REMEMBER TO EDIT NEXT AND PREVIOUS NODE IF YOU UNCOMMENT THIS NODE!
../singular_texi/start.tex(,957) @c @node Maps and elimination, Modules and their annihilator, Change of rings, Getting started
../singular_texi/start.tex(,958) @c @subsection Maps and elimination
../singular_texi/start.tex(,959) @c @cindex Maps and elimination
../singular_texi/start.tex(,960) 
../singular_texi/start.tex(,961) @c ------------------------------------------------------------------
../singular_texi/start.tex(,962) @node Modules and their annihilator, Resolution, Change of rings, Getting started
../singular_texi/start.tex(,964) @subsection Modules and their annihilator
../singular_texi/start.tex(,969) @cindex Modules and and their annihilator
../singular_texi/start.tex(,970) 
../singular_texi/start.tex(,971) Now we shall give three more advanced examples.
../singular_texi/start.tex(,972) 
../singular_texi/start.tex(,973) @sc{Singular} is able to handle modules over all the rings,
../singular_texi/start.tex(,974) which can be defined as a basering. A free module of rank @code{n}
../singular_texi/start.tex(,975) is defined as follows:
../singular_texi/start.tex(,976) 
../singular_texi/start.tex(,977) @smallexample
../singular_texi/start.tex(,978) ring rr;
../singular_texi/start.tex(,979) int n = 4;
../singular_texi/start.tex(,980) freemodule(4);
../singular_texi/start.tex(,981) @expansion{} _[1]=gen(1)
../singular_texi/start.tex(,982) @expansion{} _[2]=gen(2)
../singular_texi/start.tex(,983) @expansion{} _[3]=gen(3)
../singular_texi/start.tex(,984) @expansion{} _[4]=gen(4)
../singular_texi/start.tex(,985) typeof(_);
../singular_texi/start.tex(,986) @expansion{} module
../singular_texi/start.tex(,987) print(freemodule(4));
../singular_texi/start.tex(,988) @expansion{} 1,0,0,0,
../singular_texi/start.tex(,989) @expansion{} 0,1,0,0,
../singular_texi/start.tex(,990) @expansion{} 0,0,1,0,
../singular_texi/start.tex(,991) @expansion{} 0,0,0,1
../singular_texi/start.tex(,992) @end smallexample
../singular_texi/start.tex(,993) 
../singular_texi/start.tex(,994) To define a module, we give a list of vectors generating a submodule of
../singular_texi/start.tex(,995) a free module. Then this set of vectors may be identified with the
../singular_texi/start.tex(,996) columns of a matrix.  For that reason in @sc{Singular} matrices and
../singular_texi/start.tex(,997) modules may be interchanged. However, the representation is different
../singular_texi/start.tex(,998) (modules may be considered as sparse represented matrices).
../singular_texi/start.tex(,999) 
../singular_texi/start.tex(,1000) @smallexample
../singular_texi/start.tex(,1001) ring r =0,(x,y,z),dp;
../singular_texi/start.tex(,1002) module MD = [x,0,x],[y,z,-y],[0,z,-2y];
../singular_texi/start.tex(,1003) matrix MM = MD;
../singular_texi/start.tex(,1004) print(MM);
../singular_texi/start.tex(,1005) @expansion{} x,y,0,
../singular_texi/start.tex(,1006) @expansion{} 0,z,z,
../singular_texi/start.tex(,1007) @expansion{} x,-y,-2y
../singular_texi/start.tex(,1008) @end smallexample
../singular_texi/start.tex(,1009) 
../singular_texi/start.tex(,1010) However the submodule 
../singular_texi/start.tex(,1014) @tex
../singular_texi/start.tex(,1015) $MD$
../singular_texi/start.tex(,1016) @end tex
../singular_texi/start.tex(,1017)  may also be considered as the module
../singular_texi/start.tex(,1018) of relations of the factor module
../singular_texi/start.tex(,1019) @tex
../singular_texi/start.tex(,1020) $r^3/MD$.
../singular_texi/start.tex(,1021) @end tex
../singular_texi/start.tex(,1025) In this way, @sc{Singular} can treat arbitrary finitely generated modules
../singular_texi/start.tex(,1026) over the
../singular_texi/start.tex(,1028) basering (@pxref{Representation of mathematical objects}).
../singular_texi/start.tex(,1033) 
../singular_texi/start.tex(,1034) In order to get the module of relations of 
../singular_texi/start.tex(,1038) @tex
../singular_texi/start.tex(,1039) $MD$
../singular_texi/start.tex(,1040) @end tex
../singular_texi/start.tex(,1041) ,
../singular_texi/start.tex(,1042) we use the command @code{syz}.
../singular_texi/start.tex(,1043) 
../singular_texi/start.tex(,1044) @smallexample
../singular_texi/start.tex(,1045) syz(MD);
../singular_texi/start.tex(,1046) @expansion{} _[1]=x*gen(3)-x*gen(2)+y*gen(1)
../singular_texi/start.tex(,1047) @end smallexample
../singular_texi/start.tex(,1048) 
../singular_texi/start.tex(,1049) We want to calculate, as an application, the annihilator of a given module.
../singular_texi/start.tex(,1050) Let
../singular_texi/start.tex(,1051) @tex
../singular_texi/start.tex(,1052) $M = r^3/U$,
../singular_texi/start.tex(,1053) @end tex
../singular_texi/start.tex(,1057) where U is our defining module of relations for the module
../singular_texi/start.tex(,1058) @tex
../singular_texi/start.tex(,1059) $M$.
../singular_texi/start.tex(,1060) @end tex
../singular_texi/start.tex(,1064) 
../singular_texi/start.tex(,1065) @smallexample
../singular_texi/start.tex(,1066) module U = [z3,xy2,x3],[yz2,1,xy5z+z3],[y2z,0,x3],[xyz+x2,y2,0],[xyz,x2y,1];
../singular_texi/start.tex(,1067) @end smallexample
../singular_texi/start.tex(,1068) 
../singular_texi/start.tex(,1069) Then, by definition, the annihilator of M is the ideal
../singular_texi/start.tex(,1070) @tex
../singular_texi/start.tex(,1071) $\hbox{ann}(M) = \{a \mid aM = 0 \}$
../singular_texi/start.tex(,1072) @end tex
../singular_texi/start.tex(,1076) which is by the description of M the same as
../singular_texi/start.tex(,1077) @tex
../singular_texi/start.tex(,1078) $\{ a \mid ar^3 \in U \}$.
../singular_texi/start.tex(,1079) @end tex
../singular_texi/start.tex(,1083) Hence we have to calculate the quotient
../singular_texi/start.tex(,1084) @tex
../singular_texi/start.tex(,1085) $U \colon r^3 $.
../singular_texi/start.tex(,1086) @end tex
../singular_texi/start.tex(,1090) The rank of the free module is determined by the choice of U and is the
../singular_texi/start.tex(,1091) number of rows of the corresponding matrix. This may be determined by
../singular_texi/start.tex(,1092) the function @code{nrows}. All we have to do now is the following:
../singular_texi/start.tex(,1093) 
../singular_texi/start.tex(,1094) @smallexample
../singular_texi/start.tex(,1095) quotient(U,freemodule(nrows(U)));
../singular_texi/start.tex(,1096) @end smallexample
../singular_texi/start.tex(,1097) 
../singular_texi/start.tex(,1098) @noindent The result is too big to be shown here.
../singular_texi/start.tex(,1099) 
../singular_texi/start.tex(,1100) @c ------------------------------------------------------------------
../singular_texi/start.tex(,1101) @node Resolution,  , Modules and their annihilator, Getting started
../singular_texi/start.tex(,1103) @subsection Resolution
../singular_texi/start.tex(,1108) @cindex Resolution
../singular_texi/start.tex(,1109) 
../singular_texi/start.tex(,1110) There are several commands in @sc{Singular} for computing free resolutions.
../singular_texi/start.tex(,1111) The most general command is @code{res(... ,n)} which determines heuristically
../singular_texi/start.tex(,1112) what method to use for the given problem. It computes the free resolution
../singular_texi/start.tex(,1113) up to the length 
../singular_texi/start.tex(,1117) @tex
../singular_texi/start.tex(,1118) $n$
../singular_texi/start.tex(,1119) @end tex
../singular_texi/start.tex(,1120) , where 
../singular_texi/start.tex(,1124) @tex
../singular_texi/start.tex(,1125) $n=0$
../singular_texi/start.tex(,1126) @end tex
../singular_texi/start.tex(,1127)  corresponds to the full resolution.
../singular_texi/start.tex(,1128) 
../singular_texi/start.tex(,1129) Here we use the possibility to inspect the calculation process using the
../singular_texi/start.tex(,1130) option @code{prot}.
../singular_texi/start.tex(,1131) 
../singular_texi/start.tex(,1132) @smallexample
../singular_texi/start.tex(,1133) ring R;      // the default ring in char 32003
../singular_texi/start.tex(,1134) R;
../singular_texi/start.tex(,1135) @expansion{} //   characteristic : 32003
../singular_texi/start.tex(,1136) @expansion{} //   number of vars : 3
../singular_texi/start.tex(,1137) @expansion{} //        block   1 : ordering dp
../singular_texi/start.tex(,1138) @expansion{} //                  : names    x y z
../singular_texi/start.tex(,1139) @expansion{} //        block   2 : ordering C
../singular_texi/start.tex(,1140) ideal I = x4+x3y+x2yz,x2y2+xy2z+y2z2,x2z2+2xz3,2x2z2+xyz2;
../singular_texi/start.tex(,1141) option(prot);
../singular_texi/start.tex(,1142) resolution rs = res(I,0);
../singular_texi/start.tex(,1143) @expansion{} using lres
../singular_texi/start.tex(,1144) @expansion{} 4(m0)4(m1).5(m1)g.g6(m1)...6(m2)..
../singular_texi/start.tex(,1145) @end smallexample
../singular_texi/start.tex(,1146) 
../singular_texi/start.tex(,1147) @noindent Disable this protocol with
../singular_texi/start.tex(,1148) 
../singular_texi/start.tex(,1149) @smallexample
../singular_texi/start.tex(,1150) option(noprot);
../singular_texi/start.tex(,1151) @end smallexample
../singular_texi/start.tex(,1152) 
../singular_texi/start.tex(,1153) When we enter the name of the calculated resolution, we get a pictorial
../singular_texi/start.tex(,1154) description of the minimized resolution where the exponents denote the rank of the
../singular_texi/start.tex(,1155) free modules. Note that the calculated resolution itself may not yet be minimal.
../singular_texi/start.tex(,1156) 
../singular_texi/start.tex(,1157) @smallexample
../singular_texi/start.tex(,1158) rs;
../singular_texi/start.tex(,1159) @expansion{} 1      4      5      2      0
../singular_texi/start.tex(,1160) @expansion{}R  <-- R  <-- R  <-- R  <-- R
../singular_texi/start.tex(,1161) @expansion{}
../singular_texi/start.tex(,1162) @expansion{}0      1      2      3      4
../singular_texi/start.tex(,1163) print(betti(rs),"betti");
../singular_texi/start.tex(,1164) @expansion{}            0     1     2     3
../singular_texi/start.tex(,1165) @expansion{} ------------------------------
../singular_texi/start.tex(,1166) @expansion{}     0:     1     -     -     -
../singular_texi/start.tex(,1167) @expansion{}     1:     -     -     -     -
../singular_texi/start.tex(,1168) @expansion{}     2:     -     -     -     -
../singular_texi/start.tex(,1169) @expansion{}     3:     -     4     1     -
../singular_texi/start.tex(,1170) @expansion{}     4:     -     -     1     -
../singular_texi/start.tex(,1171) @expansion{}     5:     -     -     3     2
../singular_texi/start.tex(,1172) @expansion{} ------------------------------
../singular_texi/start.tex(,1173) @expansion{} total:     1     4     5     2
../singular_texi/start.tex(,1174) @end smallexample
../singular_texi/start.tex(,1175) 
../singular_texi/start.tex(,1176) In order to minimize the resolution, that is to calculate the maps of the minimal 
../singular_texi/start.tex(,1177) free resolution, we use the command @code{minres}:
../singular_texi/start.tex(,1178) 
../singular_texi/start.tex(,1179) @smallexample
../singular_texi/start.tex(,1180) rs=minres(rs);
../singular_texi/start.tex(,1181) @end smallexample
../singular_texi/start.tex(,1182) 
../singular_texi/start.tex(,1183) A single module in this resolution is obtained (as usual) with the
../singular_texi/start.tex(,1184) brackets @code{[} and @code{]}. The @code{print} command can be used to
../singular_texi/start.tex(,1185) display a module in a more readable format:
../singular_texi/start.tex(,1186) 
../singular_texi/start.tex(,1187) @smallexample
../singular_texi/start.tex(,1188) print(rs[3]);
../singular_texi/start.tex(,1189) @expansion{} z3,   -xyz-y2z-4xz2+16z3,
../singular_texi/start.tex(,1190) @expansion{} 0,    -y2,
../singular_texi/start.tex(,1191) @expansion{} -y+4z,48z, 
../singular_texi/start.tex(,1192) @expansion{} x+2z, 48z, 
../singular_texi/start.tex(,1193) @expansion{} 0,    x+y-z  
../singular_texi/start.tex(,1194) @end smallexample
../singular_texi/start.tex(,1195) 
../singular_texi/start.tex(,1196) In this case, the output is to be interpreted as follows: the 3rd syzygy
../singular_texi/start.tex(,1197) module of R/I, @code{rs[3]}, is the rank-2-submodule of
../singular_texi/start.tex(,1198) @tex
../singular_texi/start.tex(,1199) $R^5$
../singular_texi/start.tex(,1200) @end tex
../singular_texi/start.tex(,1204) generated by the vectors
../singular_texi/start.tex(,1205) @tex
../singular_texi/start.tex(,1206) $(z^3,0,-y+4z,x+2z,0)$ and $(-xyz-y^2z-4xz^2+16z^3,-y^2,48z,48z,x+y-z)$.
../singular_texi/start.tex(,1207) @end tex
../singular_texi/start.tex(,1211) 
../singular_texi/singular.tex(,128) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,129) @node General concepts, Data types, Introduction, Top
../singular_texi/singular.tex(,130) @chapter General concepts
../singular_texi/singular.tex(,131) @cindex General concepts
../singular_texi/general.tex(,1) @comment -*-texinfo-*-
../singular_texi/general.tex(,2) @comment This file was generated by doc2tex.pl from general.doc
../singular_texi/general.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT general.doc INSTEAD
../singular_texi/general.tex(,4) @comment Id: general.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/general.tex(,5) @comment this file contains the general information about Singular
../singular_texi/general.tex(,6) 
../singular_texi/general.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/general.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/general.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/general.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/general.tex(,11) @c ignores the `@ignore').
../singular_texi/general.tex(,24) 
../singular_texi/general.tex(,25) @menu
../singular_texi/general.tex(,26) * Interactive use::
../singular_texi/general.tex(,27) * Emacs user interface::
../singular_texi/general.tex(,28) * Rings and orderings::
../singular_texi/general.tex(,29) * Implemented algorithms::
../singular_texi/general.tex(,30) * The SINGULAR language::
../singular_texi/general.tex(,31) * Input and output::
../singular_texi/general.tex(,32) * Procedures::
../singular_texi/general.tex(,33) * Libraries::
../singular_texi/general.tex(,34) * Guidelines for writing a library::
../singular_texi/general.tex(,35) * Debugging tools::
../singular_texi/general.tex(,36) @end menu
../singular_texi/general.tex(,37) 
../singular_texi/general.tex(,38) 
../singular_texi/general.tex(,39) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,40) @node Interactive use, Emacs user interface, General concepts, General concepts
../singular_texi/general.tex(,41) @section Interactive use
../singular_texi/general.tex(,42) @cindex Interactive use
../singular_texi/general.tex(,43) 
../singular_texi/general.tex(,44) In this section, aspects of interactive use are discussed.  This
../singular_texi/general.tex(,45) includes how to enter and exit @sc{Singular}, how to interpret its
../singular_texi/general.tex(,46) prompt, how to get the online help, and so on.
../singular_texi/general.tex(,47) 
../singular_texi/general.tex(,48) There are a few important notes which one should not forget:
../singular_texi/general.tex(,49) @itemize @bullet
../singular_texi/general.tex(,50) @item
../singular_texi/general.tex(,51) every command has to be terminated by a @code{;} (semicolon) followed
../singular_texi/general.tex(,52) by a @key{RETURN}
../singular_texi/general.tex(,53) @item
../singular_texi/general.tex(,54) the online help is accessible by means of the @code{help} function
../singular_texi/general.tex(,55) @end itemize
../singular_texi/general.tex(,56) 
../singular_texi/general.tex(,57) @menu
../singular_texi/general.tex(,58) * How to enter and exit::
../singular_texi/general.tex(,59) * The SINGULAR prompt::
../singular_texi/general.tex(,60) * The online help system::
../singular_texi/general.tex(,61) * Interrupting SINGULAR::
../singular_texi/general.tex(,62) * Editing input::
../singular_texi/general.tex(,63) * Command line options::
../singular_texi/general.tex(,64) * Startup sequence::
../singular_texi/general.tex(,65) @end menu
../singular_texi/general.tex(,66) 
../singular_texi/general.tex(,67) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,68) @node How to enter and exit, The SINGULAR prompt, Interactive use, Interactive use
../singular_texi/general.tex(,69) @subsection How to enter and exit
../singular_texi/general.tex(,70) @cindex How to enter and exit
../singular_texi/general.tex(,71) 
../singular_texi/general.tex(,72) @sc{Singular} can either be run in ASCII-terminal or within Emacs.
../singular_texi/general.tex(,73) 
../singular_texi/general.tex(,74) To start @sc{Singular} in its ASCII-terminal user interface,  enter
../singular_texi/general.tex(,75) @code{Singular} at the system prompt. The
../singular_texi/general.tex(,76) @sc{Singular} banner appears which, among others, reports the version
../singular_texi/general.tex(,77) and the compilation date.
../singular_texi/general.tex(,78) 
../singular_texi/general.tex(,79) To start @sc{Singular} in its Emacs user interface, either enter
../singular_texi/general.tex(,80) @code{ESingular} at the system prompt, or type @code{M-x singular}
../singular_texi/general.tex(,81) within a running Emacs (provided you have loaded the file
../singular_texi/general.tex(,82) @code{singular.el} in your running Emacs, see @ref{Running SINGULAR
../singular_texi/general.tex(,83) under Emacs} for details).
../singular_texi/general.tex(,84) 
../singular_texi/general.tex(,85) Generally, we recommend to use @sc{Singular} in its Emacs interface,
../singular_texi/general.tex(,86) since this offers many more features and is more convenient to
../singular_texi/general.tex(,87) use than the ASCII-terminal interface (@pxref{Emacs user interface}).
../singular_texi/general.tex(,88) 
../singular_texi/general.tex(,89) To exit @sc{Singular} type @code{quit;}, @code{exit;} or @code{$} (or,
../singular_texi/general.tex(,90) when running within Emacs preferably type @code{C-c $}).
../singular_texi/general.tex(,91) 
../singular_texi/general.tex(,92) @sc{Singular} and @code{ESingular} may also be started with command line
../singular_texi/general.tex(,93) options and with
../singular_texi/general.tex(,94) filenames as arguments. More generally, the synopsis of @sc{Singular} is
../singular_texi/general.tex(,95) @smallexample
../singular_texi/general.tex(,96) Singular  [options] [file1 [file2 @dots{}]]
../singular_texi/general.tex(,97) ESingular  [options] [file1 [file2 @dots{}]]
../singular_texi/general.tex(,98) @end smallexample
../singular_texi/general.tex(,99) 
../singular_texi/general.tex(,100) @xref{Command line options}, @ref{Startup sequence}, @ref{Running SINGULAR
../singular_texi/general.tex(,101) under Emacs}.
../singular_texi/general.tex(,102) 
../singular_texi/general.tex(,103) 
../singular_texi/general.tex(,104) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,105) @node The SINGULAR prompt,The online help system,How to enter and exit, Interactive use
../singular_texi/general.tex(,106) @subsection The SINGULAR prompt
../singular_texi/general.tex(,107) @cindex prompt
../singular_texi/general.tex(,108) @cindex error recovery
../singular_texi/general.tex(,109) The @sc{Singular} prompt @code{>} (larger than) asks the user for input
../singular_texi/general.tex(,110) of commands.  The ``continuation'' prompt @code{.} (period) asks the
../singular_texi/general.tex(,111) user for input of missing parts of a command (remember the semicolon at
../singular_texi/general.tex(,112) the end of every command).
../singular_texi/general.tex(,113) 
../singular_texi/general.tex(,114) @sc{Singular} does not interpret the semicolon as the end of a command
../singular_texi/general.tex(,115) if it occurs inside a string.  Also, @sc{Singular} waits for blocks
../singular_texi/general.tex(,116) (sequences of commands enclosed in curly brackets) to be closed before
../singular_texi/general.tex(,117) prompting with @code{>} for more commands.  Thus, if @sc{Singular} does
../singular_texi/general.tex(,118) not respond with its regular prompt after typing a semicolon it may wait
../singular_texi/general.tex(,119) for a @code{"} or a @code{@}} first.
../singular_texi/general.tex(,120) 
../singular_texi/general.tex(,121) Additional semicolons will not harm @sc{Singular} since they are
../singular_texi/general.tex(,122) interpreted as empty statements.
../singular_texi/general.tex(,123) 
../singular_texi/general.tex(,124) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,125) @node The online help system,Interrupting SINGULAR, The SINGULAR prompt,Interactive use
../singular_texi/general.tex(,126) @subsection The online help system
../singular_texi/general.tex(,127) @cindex The online help system
../singular_texi/general.tex(,128) @cindex online help
../singular_texi/general.tex(,129) @cindex help, online help system
../singular_texi/general.tex(,130) 
../singular_texi/general.tex(,131) The online help system is invoked with the @code{help} command.
../singular_texi/general.tex(,132) @code{?} may be used as a synonym for @code{help}.  Simply typing
../singular_texi/general.tex(,133) @code{help;} displays the ``top'' of the help system (i.e., the title
../singular_texi/general.tex(,134) page of the @sc{Singular} manual) which offers a
../singular_texi/general.tex(,135) short table of contents.  Typing @code{help} topic@code{;} shows the
../singular_texi/general.tex(,136) available documentation on topic.  Here, topic may be either a function
../singular_texi/general.tex(,137) name or, more generally, any index entry of the @sc{Singular}
../singular_texi/general.tex(,138) manual. Furthermore, topic may contain wildcard characters.
../singular_texi/general.tex(,139) @xref{help}, for more information.
../singular_texi/general.tex(,140) 
../singular_texi/general.tex(,141) @cindex browsers
../singular_texi/general.tex(,142) @cindex help browsers
../singular_texi/general.tex(,143) Online help information can be displayed in various help browsers. The
../singular_texi/general.tex(,144) following table lists a summary of the supported browsers. See below for
../singular_texi/general.tex(,145) more details about particular browsers.
../singular_texi/general.tex(,146) 
../singular_texi/general.tex(,147) @multitable @columnfractions .2 .2 .6
../singular_texi/general.tex(,148) @item @strong{Browser} @tab @strong{Platform}
../singular_texi/general.tex(,149) @tab @strong{Description}
../singular_texi/general.tex(,150) 
../singular_texi/general.tex(,151) @item html
../singular_texi/general.tex(,152) @cindex help browsers, html
../singular_texi/general.tex(,153) @cindex html, default help
../singular_texi/general.tex(,154) @tab Windows
../singular_texi/general.tex(,155) @tab displays html version of manual in your default html browser
../singular_texi/general.tex(,156) 
../singular_texi/general.tex(,157) @item winhlp
../singular_texi/general.tex(,158) @cindex help browsers, winhlp
../singular_texi/general.tex(,159) @cindex html, default help
../singular_texi/general.tex(,160) @tab Windows
../singular_texi/general.tex(,161) @tab displays Windows help (.hlp) version of manual
../singular_texi/general.tex(,162) 
../singular_texi/general.tex(,163) @item netscape
../singular_texi/general.tex(,164) @cindex netscape
../singular_texi/general.tex(,165) @cindex help browsers, netscape
../singular_texi/general.tex(,166) @tab Unix, Windows
../singular_texi/general.tex(,167) @tab uses @code{netscape} to display html version of manual
../singular_texi/general.tex(,168) 
../singular_texi/general.tex(,169) @item tkinfo
../singular_texi/general.tex(,170) @cindex tkinfo
../singular_texi/general.tex(,171) @cindex help browsers, tkinfo
../singular_texi/general.tex(,172) @tab Unix
../singular_texi/general.tex(,173) @tab uses the @code{tkinfo} program to display texinfo version of manual
../singular_texi/general.tex(,174) 
../singular_texi/general.tex(,175) @item xinfo
../singular_texi/general.tex(,176) @cindex xinfo
../singular_texi/general.tex(,177) @cindex help browsers, xinfo
../singular_texi/general.tex(,178) @tab Unix, Windows
../singular_texi/general.tex(,179) @tab uses the @code{info} program to display texinfo version of manual in an
../singular_texi/general.tex(,180) extra @code{xterm}
../singular_texi/general.tex(,181) 
../singular_texi/general.tex(,182) @item info
../singular_texi/general.tex(,183) @cindex info
../singular_texi/general.tex(,184) @cindex help browsers, info
../singular_texi/general.tex(,185) @tab Unix, Windows
../singular_texi/general.tex(,186) @tab uses the @code{info} program to display texinfo version of manual
../singular_texi/general.tex(,187) 
../singular_texi/general.tex(,188) @item builtin
../singular_texi/general.tex(,189) @cindex help browsers, dummy
../singular_texi/general.tex(,190) @tab all
../singular_texi/general.tex(,191) @tab simply outputs the help information in plain ASCII format
../singular_texi/general.tex(,192) 
../singular_texi/general.tex(,193) @item emacs
../singular_texi/general.tex(,194) @cindex help browsers, emacs
../singular_texi/general.tex(,195) @tab Unix, Windows
../singular_texi/general.tex(,196) @tab when running @sc{Singular} within (X)emacs, display help in
../singular_texi/general.tex(,197) (X)emacs info buffer.
../singular_texi/general.tex(,198) 
../singular_texi/general.tex(,199) @item dummy
../singular_texi/general.tex(,200) @tab all
../singular_texi/general.tex(,201) @cindex help browsers, dummy
../singular_texi/general.tex(,202) @tab displays error message about no available help browser
../singular_texi/general.tex(,203) @end multitable
../singular_texi/general.tex(,204) 
../singular_texi/general.tex(,205) The browser which is used to display the help information, can be either
../singular_texi/general.tex(,206) set at startup time with the command line option  (@pxref{Command line
../singular_texi/general.tex(,207) options})
../singular_texi/general.tex(,208) @smallexample
../singular_texi/general.tex(,209) --brower=<browser>
../singular_texi/general.tex(,210) @end smallexample
../singular_texi/general.tex(,211) or with the @sc{Singular} command (@pxref{system})
../singular_texi/general.tex(,212) @smallexample
../singular_texi/general.tex(,213) system("--browser", <browser>);
../singular_texi/general.tex(,214) @end smallexample
../singular_texi/general.tex(,215) The  @sc{Singular} command
../singular_texi/general.tex(,216) @smallexample
../singular_texi/general.tex(,217) system("browsers");
../singular_texi/general.tex(,218) @end smallexample
../singular_texi/general.tex(,219) lists all available browsers and the command
../singular_texi/general.tex(,220) @smallexample
../singular_texi/general.tex(,221) system("--browser");
../singular_texi/general.tex(,222) @end smallexample
../singular_texi/general.tex(,223) returns the currently used browser.
../singular_texi/general.tex(,224) 
../singular_texi/general.tex(,225) If no browser is explicitly set by the user, then the first (w.r.t. the
../singular_texi/general.tex(,226) order of the browsers in the table above) available browser is
../singular_texi/general.tex(,227) chosen. In other words, the default browser is @code{netscape} for Unix
../singular_texi/general.tex(,228) platforms, and @code{html} for Windows, unless
../singular_texi/general.tex(,229) your local set-up does not allow to run it.
../singular_texi/general.tex(,230) 
../singular_texi/general.tex(,231) The @code{.singularrc} (@pxref{Startup sequence}) file is a good place
../singular_texi/general.tex(,232) to set your default browser. Recall that if a file
../singular_texi/general.tex(,233) @code{$HOME/.singularrc} exists on your system, then the content of this
../singular_texi/general.tex(,234) file is executed before the first user input. Hence, putting
../singular_texi/general.tex(,235) @smallexample
../singular_texi/general.tex(,236) if (system("version") >= 1306) // keep backwards-compatibility
../singular_texi/general.tex(,237) @{
../singular_texi/general.tex(,238)   if (! system("--emacs")
../singular_texi/general.tex(,239)   @{
../singular_texi/general.tex(,240)     // only set help browser if not running within emacs
../singular_texi/general.tex(,241)     system("--browser", "info");
../singular_texi/general.tex(,242)   @}
../singular_texi/general.tex(,243)   // if help browser is later on set to netscape,
../singular_texi/general.tex(,244)   // allow it to fetch HTML pages from the net
../singular_texi/general.tex(,245)   system("--allow-net", 1);
../singular_texi/general.tex(,246) @}; // the last semicolon is important: otherwise no ">", but "." prompt
../singular_texi/general.tex(,247) @end smallexample
../singular_texi/general.tex(,248) in your file @code{$HOME/.singularrc} sets your default browser to
../singular_texi/general.tex(,249) @code{info}, unless @sc{Singular} is run within emacs (in which case the
../singular_texi/general.tex(,250) default browser is set automatically to @code{emacs}).
../singular_texi/general.tex(,251) 
../singular_texi/general.tex(,252) 
../singular_texi/general.tex(,253) Obviously, certain external files and programs are required for the
../singular_texi/general.tex(,254) @sc{Singular} help system to work correctly. If something is not available
../singular_texi/general.tex(,255) or goes wrong, here are some tips for troubleshooting the help system:
../singular_texi/general.tex(,256) 
../singular_texi/general.tex(,257) @itemize @bullet
../singular_texi/general.tex(,258) @item
../singular_texi/general.tex(,259) @cindex DISPLAY environment variable
../singular_texi/general.tex(,260) @cindex environment variable, DISPLAY
../singular_texi/general.tex(,261) Under Unix, the environment variable @code{DISPLAY} has to be set for
../singular_texi/general.tex(,262) the browsers @code{netscape}, @code{tkinfo}, and @code{xinfo} to work.
../singular_texi/general.tex(,263) 
../singular_texi/general.tex(,264) @item
../singular_texi/general.tex(,265) @cindex NETSCAPE environment variable
../singular_texi/general.tex(,266) @cindex XINFO environment variable
../singular_texi/general.tex(,267) @cindex XTERM environment variable
../singular_texi/general.tex(,268) @cindex INFO environment variable
../singular_texi/general.tex(,269) @cindex help browsers, setting command to use
../singular_texi/general.tex(,270) The help browsers @code{netscape}, @code{tkinfo}, @code{xinfo}, and
../singular_texi/general.tex(,271) @code{info} are only available if the respective programs are installed
../singular_texi/general.tex(,272) on your system (for @code{xinfo}, the programs @code{xterm} and
../singular_texi/general.tex(,273) @code{info} are necessary). You can explicitly specify which program to
../singular_texi/general.tex(,274) use, by setting appropriate environment variables (whose names
../singular_texi/general.tex(,275) are the names of the respective programs in all up-case letters).
../singular_texi/general.tex(,276) @*For example,
../singular_texi/general.tex(,277) to use the program @code{navigator} with a private colormap as
../singular_texi/general.tex(,278) @code{netscape} help browser, set the environment variable
../singular_texi/general.tex(,279) @code{NETSCAPE} to the value
../singular_texi/general.tex(,280) @code{"navigator -install"}.
../singular_texi/general.tex(,281) @c TBC (@xref{Setting environment variables}).
../singular_texi/general.tex(,282) 
../singular_texi/general.tex(,283) @item
../singular_texi/general.tex(,284) If the help browser @code{netscape} can not find the local html
../singular_texi/general.tex(,285) pages of the @sc{Singular} manual (which it looks for at
../singular_texi/general.tex(,286) @code{$RootDir/html} -- see @ref{Loading of a library} for more info on
../singular_texi/general.tex(,287) @code{$RootDir}) @emph{and} the (command-line) option @code{--allow-net}
../singular_texi/general.tex(,288) has @emph{explicitly} been set (see @ref{Command line options} and
../singular_texi/general.tex(,289) @ref{system} for more info on
../singular_texi/general.tex(,290) setting values of command-line options), then it dispatches the html
../singular_texi/general.tex(,291) pages from
../singular_texi/general.tex(,292) @url{http://www.singular.uni-kl.de/Manual} (note that
../singular_texi/general.tex(,293) the non-local net-access of HTML pages is disabled, by default).
../singular_texi/general.tex(,294) @*An
../singular_texi/general.tex(,295) alternative location of a local directory where the html pages reside
../singular_texi/general.tex(,296) can be specified by setting the environment variable
../singular_texi/general.tex(,297) @code{SINGULAR_HTML_DIR}.
../singular_texi/general.tex(,298) @c TBC (@xref{Setting environment variables}).
../singular_texi/general.tex(,299) 
../singular_texi/general.tex(,300) @item
../singular_texi/general.tex(,301) The help browsers @code{tkinfo}, @code{xinfo}, @code{info}, and
../singular_texi/general.tex(,302) @code{builtin} need the (info) file @code{singular.hlp} which it looks
../singular_texi/general.tex(,303) for at @code{$RootDir/info/singular.hlp} (see @ref{Loading of a library}
../singular_texi/general.tex(,304) for more info on @code{$RootDir}).  An alternative
../singular_texi/general.tex(,305) location of the info file of the manual can be specified by setting the
../singular_texi/general.tex(,306) environment variable @code{SINGULAR_INFO_FILE}.
../singular_texi/general.tex(,307) @c TBC (@xref{Setting environment variables}).
../singular_texi/general.tex(,308) @end itemize
../singular_texi/general.tex(,309) 
../singular_texi/general.tex(,310) @c inserted refs from general.doc:308
../singular_texi/general.tex(,321) @strong{See also:}
../singular_texi/general.tex(,322) @ref{Command line options};
../singular_texi/general.tex(,323) @ref{Loading of a library};
../singular_texi/general.tex(,324) @ref{Startup sequence};
../singular_texi/general.tex(,325) @ref{system}.
../singular_texi/general.tex(,327) @c end inserted refs from general.doc:308
../singular_texi/general.tex(,328) 
../singular_texi/general.tex(,329) @subsubheading Info help browsers
../singular_texi/general.tex(,330) @cindex info
../singular_texi/general.tex(,331) 
../singular_texi/general.tex(,332) The help browsers @code{tkinfo}, @code{xinfo} and @code{info} (so-called
../singular_texi/general.tex(,333) info help browsers) are based on the
../singular_texi/general.tex(,334) @code{info} program from the Gnu @code{texinfo} package.  @xref{Top, An
../singular_texi/general.tex(,335) Introduction to Info, Getting started, info, The Info Manual}, for more
../singular_texi/general.tex(,336) information.
../singular_texi/general.tex(,337) 
../singular_texi/general.tex(,338) For info help browsers, the online manual is decomposed into ``nodes''
../singular_texi/general.tex(,339) of information, closely
../singular_texi/general.tex(,340) related to the division of the printed manual into sections and
../singular_texi/general.tex(,341) subsections.  A node contains text describing a specific topic at a
../singular_texi/general.tex(,342) specific level of detail.  The top line of a node is its ``header''.
../singular_texi/general.tex(,343) The node's header tells the name of the current node (@code{Node:}), the
../singular_texi/general.tex(,344) name of the next node (@code{Next:}), the name of the previous node
../singular_texi/general.tex(,345) (@code{Prev:}), and the name of the upper node (@code{Up:}).
../singular_texi/general.tex(,346) 
../singular_texi/general.tex(,347) To move within info, type commands consisting of single characters.  Do
../singular_texi/general.tex(,348) not type @code{RETURN}.  Do not use cursor keys, either.  Using some of
../singular_texi/general.tex(,349) the cursor keys by accident might pop to some totally different node.
../singular_texi/general.tex(,350) Type @code{l} to return to the original node.  Some of the @code{info}
../singular_texi/general.tex(,351) commands read input from the command line at the bottom line.  The
../singular_texi/general.tex(,352) @code{TAB} key may be used to complete partially entered input.
../singular_texi/general.tex(,353) 
../singular_texi/general.tex(,354) The most important commands are:
../singular_texi/general.tex(,355) @table @asis
../singular_texi/general.tex(,356) @item @code{q}
../singular_texi/general.tex(,357) leaves the online help system
../singular_texi/general.tex(,358) @item @code{n}
../singular_texi/general.tex(,359) goes to the next node
../singular_texi/general.tex(,360) @item @code{p}
../singular_texi/general.tex(,361) goes to the previous node
../singular_texi/general.tex(,362) @item @code{u}
../singular_texi/general.tex(,363) goes to the upper node
../singular_texi/general.tex(,364) @item @code{m}
../singular_texi/general.tex(,365) picks a menu item specified by name
../singular_texi/general.tex(,366) @item @code{f}
../singular_texi/general.tex(,367) follows a cross reference
../singular_texi/general.tex(,368) @item @code{l}
../singular_texi/general.tex(,369) goes to the previously visited node
../singular_texi/general.tex(,370) @item @code{b}
../singular_texi/general.tex(,371) goes to the beginning of the current node
../singular_texi/general.tex(,372) @item @code{e}
../singular_texi/general.tex(,373) goes to the end of the current node
../singular_texi/general.tex(,374) @item @code{SPACE}
../singular_texi/general.tex(,375) scrolls forward a page
../singular_texi/general.tex(,376) @item @code{DEL}
../singular_texi/general.tex(,377) scrolls backward a page
../singular_texi/general.tex(,378) @item @code{h}
../singular_texi/general.tex(,379) invokes info tutorial (use @code{l} to return to the manual or
../singular_texi/general.tex(,380) @code{CTRL-X 0} to remove extra window)
../singular_texi/general.tex(,381) @item @code{CTRL-H}
../singular_texi/general.tex(,382) shows a short overview on the online help system (use @code{l} to return
../singular_texi/general.tex(,383) to the manual or @code{CTRL-X 0} to remove extra window)
../singular_texi/general.tex(,384) @item @code{s}
../singular_texi/general.tex(,385) searches through the manual for a specified string, and selects the node in
../singular_texi/general.tex(,386) which the next occurrence is found
../singular_texi/general.tex(,387) @item @code{1}, @dots{}, @code{9}
../singular_texi/general.tex(,388) picks i-th subtopic from a menu
../singular_texi/general.tex(,389) @end table
../singular_texi/general.tex(,390) 
../singular_texi/general.tex(,391) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,392) @node Interrupting SINGULAR,Editing input,The online help system,Interactive use
../singular_texi/general.tex(,393) @subsection Interrupting SINGULAR
../singular_texi/general.tex(,394) @cindex Interrupting SINGULAR
../singular_texi/general.tex(,395) 
../singular_texi/general.tex(,396) On Unix-like operating systems and on Windows NT, typing @code{CTRL-C}
../singular_texi/general.tex(,397) (or, alternatively @code{C-c C-c}, when running within Emacs),
../singular_texi/general.tex(,398) interrupts @sc{Singular}.  @sc{Singular} prints the current command and
../singular_texi/general.tex(,399) the current line and prompts for further action.  The following choices
../singular_texi/general.tex(,400) are available:
../singular_texi/general.tex(,401) @table @code
../singular_texi/general.tex(,402) @item a
../singular_texi/general.tex(,403) returns to the top level after finishing the current (kernel) command. Notice
../singular_texi/general.tex(,404) that commands of the @sc{Singular} kernel (like @code{std}) can not be
../singular_texi/general.tex(,405) aborted, i.e. (@code{a})bort only happens whenever the interpreter is active.
../singular_texi/general.tex(,406) @item c
../singular_texi/general.tex(,407) continues
../singular_texi/general.tex(,408) @item q
../singular_texi/general.tex(,409) quits  @sc{Singular}
../singular_texi/general.tex(,410) @end table
../singular_texi/general.tex(,411) 
../singular_texi/general.tex(,412) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,413) @node Editing input,Command line options,Interrupting SINGULAR,Interactive use
../singular_texi/general.tex(,414) @subsection Editing input
../singular_texi/general.tex(,415) @cindex Editing input
../singular_texi/general.tex(,416) @cindex SINGULARHIST
../singular_texi/general.tex(,417) 
../singular_texi/general.tex(,418) @c This section describes only a subset of the key bindings of
../singular_texi/general.tex(,419) @c @sc{Singular} binaries built with the GNU Readline library.
../singular_texi/general.tex(,420) @c @xref{Command Line Editing, GNU Readline Library, Command Line Editing,
../singular_texi/general.tex(,421) @c readline, The GNU Readline Library Manual}, for more information.
../singular_texi/general.tex(,422) 
../singular_texi/general.tex(,423) The following keys can be used for editing the input and retrieving
../singular_texi/general.tex(,424) previous input lines:
../singular_texi/general.tex(,425) @table @code
../singular_texi/general.tex(,426) @item TAB
../singular_texi/general.tex(,427) provides command line completion for function names and file names
../singular_texi/general.tex(,428) @item CTRL-B
../singular_texi/general.tex(,429) moves cursor left
../singular_texi/general.tex(,430) @item CTRL-F
../singular_texi/general.tex(,431) moves cursor right
../singular_texi/general.tex(,432) @item CTRL-A
../singular_texi/general.tex(,433) moves cursor to beginning of line
../singular_texi/general.tex(,434) @item CTRL-E
../singular_texi/general.tex(,435) moves cursor to end of line
../singular_texi/general.tex(,436) @item CTRL-D
../singular_texi/general.tex(,437) deletes character under cursor
../singular_texi/general.tex(,438) @* Warning: on an empty line, @code{CTRL-D} is interpreted as the
../singular_texi/general.tex(,439) @code{EOF} character which immediately terminates @sc{Singular}.
../singular_texi/general.tex(,440) @item BACKSPACE
../singular_texi/general.tex(,441) @itemx DELETE
../singular_texi/general.tex(,442) @itemx CTRL-H
../singular_texi/general.tex(,443) deletes character before cursor
../singular_texi/general.tex(,444) @item CTRL-K
../singular_texi/general.tex(,445) kills from cursor to end of line
../singular_texi/general.tex(,446) @item CTRL-U
../singular_texi/general.tex(,447) kills from cursor to beginning of line
../singular_texi/general.tex(,448) @item CTRL-N
../singular_texi/general.tex(,449) saves current line on history and gives next line
../singular_texi/general.tex(,450) @item CTRL-P
../singular_texi/general.tex(,451) saves current line on history and gives previous line
../singular_texi/general.tex(,452) @item RETURN
../singular_texi/general.tex(,453) saves the current line to the history and
../singular_texi/general.tex(,454) sends it to the @sc{Singular} parser for interpretation
../singular_texi/general.tex(,455) @end table
../singular_texi/general.tex(,456) 
../singular_texi/general.tex(,457) When run under a Unix-like operating system and in its ASCII-terminal
../singular_texi/general.tex(,458) user interface,   @sc{Singular} tries to dynamically link at runtime
../singular_texi/general.tex(,459) with the GNU Readline library. @xref{Command Line Editing, GNU Readline
../singular_texi/general.tex(,460) Library, Command Line Editing, readline, The GNU Readline Library
../singular_texi/general.tex(,461) Manual}, for more information. If a shared version of this library can
../singular_texi/general.tex(,462) be found on your machine, then additional command-line editing
../singular_texi/general.tex(,463) features like  history completion are available.
../singular_texi/general.tex(,464) In particular, if @sc{Singular} is able to load that library and
../singular_texi/general.tex(,465) if the environment
../singular_texi/general.tex(,466) variable @code{SINGULARHIST} is set and has a name of a file as value,
../singular_texi/general.tex(,467) then the input history is stored across sessions using this
../singular_texi/general.tex(,468) file. Otherwise, i.e., if the environment variable @code{SINGULARHIST}
../singular_texi/general.tex(,469) is not set, then the history of the last inputs is only available for
../singular_texi/general.tex(,470) the commands of the current session.
../singular_texi/general.tex(,471) 
../singular_texi/general.tex(,472) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,473) @node Command line options, Startup sequence, Editing input, Interactive use
../singular_texi/general.tex(,474) @subsection Command line options
../singular_texi/general.tex(,475) @cindex Command line options
../singular_texi/general.tex(,476) 
../singular_texi/general.tex(,477) The synopsis of @sc{Singular} is
../singular_texi/general.tex(,478) @smallexample
../singular_texi/general.tex(,479) Singular  [options] [file1 [file2 @dots{}]]
../singular_texi/general.tex(,480) ESingular  [options] [file1 [file2 @dots{}]]
../singular_texi/general.tex(,481) @end smallexample
../singular_texi/general.tex(,482) Options can be given in both, their long and short format. The following
../singular_texi/general.tex(,483) options control the general behavior of @sc{Singular}:
../singular_texi/general.tex(,484) @table @asis
../singular_texi/general.tex(,485) 
../singular_texi/general.tex(,486) @item @code{-d}, @code{--sdb}
../singular_texi/general.tex(,487) @cindex -d
../singular_texi/general.tex(,488) @cindex --sdb
../singular_texi/general.tex(,489) @cindex Source code debugger, invocation
../singular_texi/general.tex(,490) Enable the use of the source code debugger.
../singular_texi/general.tex(,491) @xref{Source code debugger}.
../singular_texi/general.tex(,492) 
../singular_texi/general.tex(,493) @item @code{-e}, @code{--echo[=VAL]}
../singular_texi/general.tex(,494) @cindex -e
../singular_texi/general.tex(,495) @cindex --echo
../singular_texi/general.tex(,496) Set value of variable @code{echo} to @code{VAL} (integer in the range
../singular_texi/general.tex(,497) 0, @dots{}, 9). Without an argument, @code{echo} is set to 1, which echoes
../singular_texi/general.tex(,498) all input coming from a file. By default, the value of @code{echo} is
../singular_texi/general.tex(,499) 0. @xref{echo}.
../singular_texi/general.tex(,500) 
../singular_texi/general.tex(,501) @item @code{-h}, @code{--help}
../singular_texi/general.tex(,502) @cindex -h
../singular_texi/general.tex(,503) @cindex --help
../singular_texi/general.tex(,504) @cindex command-line options, short help
../singular_texi/general.tex(,505) Print a one-line description of each command line option and exit.
../singular_texi/general.tex(,506) 
../singular_texi/general.tex(,507) @item @code{--allow-net}
../singular_texi/general.tex(,508) @cindex --allow-net
../singular_texi/general.tex(,509) @cindex net access
../singular_texi/general.tex(,510) @cindex allowing net access
../singular_texi/general.tex(,511) @cindex help, accessing over the net
../singular_texi/general.tex(,512) Allow the @code{netscape} and @code{html} help browser to fetch HTML manual pages over
../singular_texi/general.tex(,513) the net from the WWW home-site of @sc{Singular}. @xref{The online help
../singular_texi/general.tex(,514) system}, for more info.
../singular_texi/general.tex(,515) 
../singular_texi/general.tex(,516) @item @code{--browser=VAL}
../singular_texi/general.tex(,517) @cindex --browser
../singular_texi/general.tex(,518) @cindex browser, command line option
../singular_texi/general.tex(,519) Use @code{VAL} as browser for the @sc{Singular} online manual.
../singular_texi/general.tex(,520) @*@code{VAL} may be one of @code{html} (Windows only), @code{netscape}, @code{xinfo},
../singular_texi/general.tex(,521) @code{tkinfo}, @code{info}, @code{builtin}, or @code{emacs}. Depending
../singular_texi/general.tex(,522) on your platform and local
../singular_texi/general.tex(,523) installation, only some browsers might be available. The default browser
../singular_texi/general.tex(,524) is @code{html} for Windows and @code{netscape} for Unix
../singular_texi/general.tex(,525) platforms. @xref{The online help system}, for more info.
../singular_texi/general.tex(,526) 
../singular_texi/general.tex(,527) @item @code{--no-rc}
../singular_texi/general.tex(,528) @cindex --no-rc
../singular_texi/general.tex(,529) @cindex .singularrc file, no loading
../singular_texi/general.tex(,530) Do not execute the @code{.singularrc} file on start-up.  By default,
../singular_texi/general.tex(,531) this file is executed on start-up.  @xref{Startup sequence}.
../singular_texi/general.tex(,532) 
../singular_texi/general.tex(,533) @item @code{--no-stdlib}
../singular_texi/general.tex(,534) @cindex --no-stdlib
../singular_texi/general.tex(,535) Do not load the library @code{standard.lib} on start-up. By default,
../singular_texi/general.tex(,536) this library is loaded on start-up.  @xref{Startup sequence}.
../singular_texi/general.tex(,537) 
../singular_texi/general.tex(,538) @item @code{--no-warn}
../singular_texi/general.tex(,539) @cindex --no-warn
../singular_texi/general.tex(,540) Do not display warning messages.
../singular_texi/general.tex(,541) 
../singular_texi/general.tex(,542) @item @code{--no-out}
../singular_texi/general.tex(,543) @cindex --no-out
../singular_texi/general.tex(,544) Suppress display of all output.
../singular_texi/general.tex(,545) 
../singular_texi/general.tex(,546) @item @code{-t}, @code{--no-tty}
../singular_texi/general.tex(,547) @cindex --no-tty
../singular_texi/general.tex(,548) Do not redefine the terminal characteristics.  This option should be
../singular_texi/general.tex(,549) used for batch processes.
../singular_texi/general.tex(,550) 
../singular_texi/general.tex(,551) @item @code{-q}, @code{--quiet}
../singular_texi/general.tex(,552) @cindex -q
../singular_texi/general.tex(,553) @cindex --quiet
../singular_texi/general.tex(,554) Do not print the start-up banner and messages when loading
../singular_texi/general.tex(,555) libraries. Furthermore, redirect @code{stderr}
../singular_texi/general.tex(,556) (all error messages) to @code{stdout} (normal output channel).  This
../singular_texi/general.tex(,557) option should be used if @sc{Singular}'s output is redirected to a file.
../singular_texi/general.tex(,558) 
../singular_texi/general.tex(,559) @item @code{-v}, @code{--verbose}
../singular_texi/general.tex(,560) @cindex --verbose
../singular_texi/general.tex(,561) @cindex -v
../singular_texi/general.tex(,562) Print extended information about the version and configuration of
../singular_texi/general.tex(,563) @sc{Singular}  (used optional parts, compilation date, start of random
../singular_texi/general.tex(,564) generator etc.). This information should be included if a user reports
../singular_texi/general.tex(,565) an error to the authors.
../singular_texi/general.tex(,566) @end table
../singular_texi/general.tex(,567) 
../singular_texi/general.tex(,568) The following command line options allow manipulations of the timer and
../singular_texi/general.tex(,569) the pseudo random generator and enable the passing of commands and strings
../singular_texi/general.tex(,570) to @sc{Singular}:
../singular_texi/general.tex(,571) 
../singular_texi/general.tex(,572) @table @asis
../singular_texi/general.tex(,573) @item @code{-c}, @code{--execute=STRING}
../singular_texi/general.tex(,574) @cindex -c
../singular_texi/general.tex(,575) @cindex --execute
../singular_texi/general.tex(,576) Execute @code{STRING} as (a sequence of) @sc{Singular} commands on
../singular_texi/general.tex(,577) start-up after the @code{.singularrc} file is executed, but prior to
../singular_texi/general.tex(,578) executing the files given on the command line.  E.g., @code{Singular -c
../singular_texi/general.tex(,579) "help all.lib; quit;"} shows the help for the library @code{all.lib} and
../singular_texi/general.tex(,580) exits.
../singular_texi/general.tex(,581) 
../singular_texi/general.tex(,582) @item @code{-u}, @code{--user-option=STRING}
../singular_texi/general.tex(,583) @cindex -u
../singular_texi/general.tex(,584) @cindex --user-option
../singular_texi/general.tex(,585) Returns @code{STRING} on @code{system("--user-option")}. This is useful
../singular_texi/general.tex(,586) for passing arbitrary arguments from the command line to the
../singular_texi/general.tex(,587) @sc{Singular} interpreter.  E.g.,
../singular_texi/general.tex(,588) @*@code{Singular -u "xxx.dump" -c 'getdump(system("--user-option"))'}
../singular_texi/general.tex(,589) reads the file @code{xxx.dump} at
../singular_texi/general.tex(,590) start-up and allows the user to start working with all the objects
../singular_texi/general.tex(,591) defined in a previous session.
../singular_texi/general.tex(,592) 
../singular_texi/general.tex(,593) @item @code{-r}, @code{--random=SEED}
../singular_texi/general.tex(,594) @cindex -r
../singular_texi/general.tex(,595) @cindex --random
../singular_texi/general.tex(,596) Seed (i.e., set the initial value of) the pseudo random generator with
../singular_texi/general.tex(,597) integer @code{SEED}.  If this option is not given, then the random
../singular_texi/general.tex(,598) generator is seeded with a time-based @code{SEED} (the number of
../singular_texi/general.tex(,599) seconds since January, 1, 1970, on Unix-like operating systems, to be
../singular_texi/general.tex(,600) precise).
../singular_texi/general.tex(,601) 
../singular_texi/general.tex(,602) @item @code{--min-time=SECS}
../singular_texi/general.tex(,603) @cindex --min-time
../singular_texi/general.tex(,604) If the @code{timer} (@pxref{timer}), resp.@:  @code{rtimer}
../singular_texi/general.tex(,605) (@pxref{rtimer}) , variable is
../singular_texi/general.tex(,606) set, report only
../singular_texi/general.tex(,607) times larger than @code{SECS} seconds (@code{SECS} needs to be a
../singular_texi/general.tex(,608) floating point number greater than 0).  By default, this value is set to
../singular_texi/general.tex(,609) 0.5 (i.e., half a second).  E.g., the option @code{--min-time=0.01}
../singular_texi/general.tex(,610) forces @sc{Singular} to report all times larger than 1/100 of a
../singular_texi/general.tex(,611) second.
../singular_texi/general.tex(,612) 
../singular_texi/general.tex(,613) @item @code{--ticks-per-sec=TICKS}
../singular_texi/general.tex(,614) @cindex --ticks-per-sec
../singular_texi/general.tex(,615) Set unit of timer to @code{TICKS} ticks per second (i.e., the value
../singular_texi/general.tex(,616) reported by the @code{timer} and @code{rtimer} variable divided by
../singular_texi/general.tex(,617) @code{TICKS} gives the time in seconds).  By default, this value is 1.
../singular_texi/general.tex(,618) 
../singular_texi/general.tex(,619) @end table
../singular_texi/general.tex(,620) 
../singular_texi/general.tex(,621) The next three options are of interest for the use with MP links:
../singular_texi/general.tex(,622) @table @asis
../singular_texi/general.tex(,623) @item @code{-b}, @code{--batch}
../singular_texi/general.tex(,624) @cindex -b
../singular_texi/general.tex(,625) @cindex --batch
../singular_texi/general.tex(,626) Run in MP batch mode. Opens a TCP/IP connection with host specified by
../singular_texi/general.tex(,627) @code{--MPhost} at the port specified by @code{--MPport}. Input is read
../singular_texi/general.tex(,628) from and output is written to this connection in the MP format.
../singular_texi/general.tex(,629) @xref{MPtcp links}.
../singular_texi/general.tex(,630) 
../singular_texi/general.tex(,631) @item @code{--MPport=PORT}
../singular_texi/general.tex(,632) @cindex --MPport
../singular_texi/general.tex(,633) Use @code{PORT} as default port number for MP connections (whenever not
../singular_texi/general.tex(,634) further specified). This option is mandatory when the @code{--batch}
../singular_texi/general.tex(,635) option is given.  @xref{MPtcp links}.
../singular_texi/general.tex(,636) 
../singular_texi/general.tex(,637) @item @code{--MPhost=HOST}
../singular_texi/general.tex(,638) @cindex --MPhost
../singular_texi/general.tex(,639) Use @code{HOST} as default host for MP connections (whenever not
../singular_texi/general.tex(,640) further specified).  This option is mandatory when the @code{--batch}
../singular_texi/general.tex(,641) option is given.  @xref{MPtcp links}.
../singular_texi/general.tex(,642) @end table
../singular_texi/general.tex(,643) 
../singular_texi/general.tex(,644) Finally, the following options are only available when running
../singular_texi/general.tex(,645) @code{ESingular} (see @ref{Running SINGULAR under Emacs} for details).
../singular_texi/general.tex(,646) 
../singular_texi/general.tex(,647) @table @code
../singular_texi/general.tex(,648) 
../singular_texi/general.tex(,649) @item --emacs=EMACS
../singular_texi/general.tex(,650) @cindex --emacs
../singular_texi/general.tex(,651) Use @code{EMACS} as Emacs program to run the @sc{Singular} Emacs
../singular_texi/general.tex(,652) interface, where @code{EMACS} may e.g. be emacs ore xemacs.
../singular_texi/general.tex(,653) 
../singular_texi/general.tex(,654) @item --emacs-dir=DIR
../singular_texi/general.tex(,655) @cindex --emacs-dir
../singular_texi/general.tex(,656) Set the singular-emacs-home-directory, which is the directory where
../singular_texi/general.tex(,657) singular.el can be found, to @code{DIR}.
../singular_texi/general.tex(,658) 
../singular_texi/general.tex(,659) @item --emacs-load=FILE
../singular_texi/general.tex(,660) @cindex --emacs-load
../singular_texi/general.tex(,661) Load @code{FILE} on Emacs start-up, instead of the default load file.
../singular_texi/general.tex(,662) 
../singular_texi/general.tex(,663) @item --singular=PROG
../singular_texi/general.tex(,664) @cindex --singular
../singular_texi/general.tex(,665) Start @code{PROG} as @sc{Singular} program within Emacs
../singular_texi/general.tex(,666) @end table
../singular_texi/general.tex(,667) 
../singular_texi/general.tex(,668) The value of options given to @sc{Singular} (resp.@: their default values,
../singular_texi/general.tex(,669) if an option was not given), can be checked with the command
../singular_texi/general.tex(,670) @code{system("--}long_option_name@code{")}.  @xref{system}.
../singular_texi/general.tex(,671) @smallexample
../singular_texi/general.tex(,672) @c computed example Command_line_options general.doc:658 
../singular_texi/general.tex(,673)   system("--quiet");    // if ``quiet'' 1, otherwise 0
../singular_texi/general.tex(,674) @expansion{} 1
../singular_texi/general.tex(,675)   system("--min-time"); // minimal reported time
../singular_texi/general.tex(,676) @expansion{} 0.5
../singular_texi/general.tex(,677)   system("--random");   // seed of the random generator
../singular_texi/general.tex(,678) @expansion{} 12345678
../singular_texi/general.tex(,679) @c end example Command_line_options general.doc:658
../singular_texi/general.tex(,680) @end smallexample
../singular_texi/general.tex(,681) 
../singular_texi/general.tex(,682) Furthermore, the value of options (e.g., @code{--browser}) can be
../singular_texi/general.tex(,683) re-set while @sc{Singular} is running with the command
../singular_texi/general.tex(,684) @code{system("--}long_option_name_string @code{",}expression@code{)}. @xref{system}.
../singular_texi/general.tex(,685) @smallexample
../singular_texi/general.tex(,686)   system("--browser", "builtin");  // sets browser to 'builtin'
../singular_texi/general.tex(,687)   system("--ticks-per-sec", 100);  // sets timer resolution to 100
../singular_texi/general.tex(,688) @end smallexample
../singular_texi/general.tex(,689) 
../singular_texi/general.tex(,690) 
../singular_texi/general.tex(,691) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,692) 
../singular_texi/general.tex(,693) @node Startup sequence, , Command line options, Interactive use
../singular_texi/general.tex(,694) @subsection Startup sequence
../singular_texi/general.tex(,695) @cindex Startup sequence
../singular_texi/general.tex(,696) 
../singular_texi/general.tex(,697) On start-up, @sc{Singular}
../singular_texi/general.tex(,698) @enumerate
../singular_texi/general.tex(,699) @item
../singular_texi/general.tex(,700) loads the library @code{standard.lib} (provided the @code{--no-stdlib}
../singular_texi/general.tex(,701) option was not given),
../singular_texi/general.tex(,702) 
../singular_texi/general.tex(,703) @item
../singular_texi/general.tex(,704) @cindex file, .singularrc
../singular_texi/general.tex(,705) @cindex .singularrc file
../singular_texi/general.tex(,706) @cindex singularrc
../singular_texi/general.tex(,707) searches the current directory and then the
../singular_texi/general.tex(,708) home directory of the user, and then all directories contained in the
../singular_texi/general.tex(,709) library @code{SearchPath} (see @ref{Loading of a library} for more info
../singular_texi/general.tex(,710) on @code{SearchPath}) for a file named @code{.singularrc} and
../singular_texi/general.tex(,711) executes it, if found (provided the @code{--no-rc} option was not
../singular_texi/general.tex(,712) given),
../singular_texi/general.tex(,713) 
../singular_texi/general.tex(,714) @item
../singular_texi/general.tex(,715) executes the string specified with the @code{--execute} command line
../singular_texi/general.tex(,716) option,
../singular_texi/general.tex(,717) 
../singular_texi/general.tex(,718) @item
../singular_texi/general.tex(,719) executes the files @code{file1}, @code{file2} @dots{}  (given on the command
../singular_texi/general.tex(,720) line) in that order.
../singular_texi/general.tex(,721) @end enumerate
../singular_texi/general.tex(,722) 
../singular_texi/general.tex(,723) @strong{Note:} @code{.singularrc} file(s) are an appropriate place for
../singular_texi/general.tex(,724) setting some default values of (command-line) options.
../singular_texi/general.tex(,725) 
../singular_texi/general.tex(,726) For example, a system administrator might remove the locally installed
../singular_texi/general.tex(,727) HTML version of the manual and put a @code{.singularrc} file
../singular_texi/general.tex(,728) with the following content
../singular_texi/general.tex(,729) @smallexample
../singular_texi/general.tex(,730) if (system("version") >= 1306) // assure backwards-compatibility
../singular_texi/general.tex(,731) @{
../singular_texi/general.tex(,732)   system("--allow-net", 1);
../singular_texi/general.tex(,733) @}; // the last semicolon is important: otherwise no ">", but "." prompt
../singular_texi/general.tex(,734) @end smallexample
../singular_texi/general.tex(,735) in the directory containing the @sc{Singular} libraries, thereby
../singular_texi/general.tex(,736) allowing to fetch the HTML on-line help from the WWW home-site of
../singular_texi/general.tex(,737) @sc{Singular}.
../singular_texi/general.tex(,738) 
../singular_texi/general.tex(,739) On the other hand, a single user might put a @code{.singularrc} with the
../singular_texi/general.tex(,740) following content
../singular_texi/general.tex(,741) @smallexample
../singular_texi/general.tex(,742) if (system("version") >= 1306) // assure backwards-compatibility
../singular_texi/general.tex(,743) @{
../singular_texi/general.tex(,744)   if (! system("--emacs"))
../singular_texi/general.tex(,745)   @{
../singular_texi/general.tex(,746)     // set default browser to info, unless we run within emacs
../singular_texi/general.tex(,747)     system("--browser", "info");
../singular_texi/general.tex(,748)   @}
../singular_texi/general.tex(,749) @}; // the last semicolon is important: otherwise no ">", but "." prompt
../singular_texi/general.tex(,750) @end smallexample
../singular_texi/general.tex(,751) in his home directory, which sets the default help browser to
../singular_texi/general.tex(,752) @code{info} (unless @sc{Singular} is run within emacs) and thereby
../singular_texi/general.tex(,753) prevents the execution of the"global"
../singular_texi/general.tex(,754) @code{.singularrc} file installed by the system administrator (since the
../singular_texi/general.tex(,755) @code{.singularrc} file of the user is found before the "global"
../singular_texi/general.tex(,756) @code{.singularrc} file installed by the system administrator).
../singular_texi/general.tex(,757) 
../singular_texi/general.tex(,758) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,759) @node Emacs user interface, Rings and orderings, Interactive use, General concepts
../singular_texi/general.tex(,760) @section Emacs user interface
../singular_texi/general.tex(,761) @cindex Emacs, user interface
../singular_texi/general.tex(,762) @cindex Emacs
../singular_texi/general.tex(,763) @cindex interface, Emacs
../singular_texi/general.tex(,764) @cindex user interface, Emacs
../singular_texi/general.tex(,765) 
../singular_texi/general.tex(,766) Besides running @sc{Singular} in an ASCII-terminal, @sc{Singular} might
../singular_texi/general.tex(,767) also be run within Emacs. Emacs (or, XEmacs which is very similar) is a
../singular_texi/general.tex(,768) powerful and freely available text editor, which, among others,
../singular_texi/general.tex(,769) provides a framework for the implementation of interactive user
../singular_texi/general.tex(,770) interfaces. Starting from version 1.3.6, @sc{Singular} provides such an
../singular_texi/general.tex(,771) implementation, the so-called @sc{Singular} Emacs mode, or Emacs user
../singular_texi/general.tex(,772) interface.
../singular_texi/general.tex(,773) 
../singular_texi/general.tex(,774) Generally, we recommend to use the Emacs interface,
../singular_texi/general.tex(,775) instead of the ASCII-terminal interface: The Emacs interface does not
../singular_texi/general.tex(,776) only provide everything the ASCII-terminal interface provides, but
../singular_texi/general.tex(,777) offers much more. Among others, it offers
../singular_texi/general.tex(,778) @itemize @bullet
../singular_texi/general.tex(,779) @item
../singular_texi/general.tex(,780) color-highlighting
../singular_texi/general.tex(,781) @item
../singular_texi/general.tex(,782) truncation of long lines
../singular_texi/general.tex(,783) @item
../singular_texi/general.tex(,784) folding of input and output
../singular_texi/general.tex(,785) @item
../singular_texi/general.tex(,786) TAB-completion for help topics
../singular_texi/general.tex(,787) @item
../singular_texi/general.tex(,788) highlighting of matching parentheses
../singular_texi/general.tex(,789) @item
../singular_texi/general.tex(,790) key-bindings and interactive menus for most user interface commands and
../singular_texi/general.tex(,791) for basic @sc{Singular} commands (such as loading of libraries and files)
../singular_texi/general.tex(,792) @item
../singular_texi/general.tex(,793) a mode for running interactive @sc{Singular} demonstrations
../singular_texi/general.tex(,794) @item
../singular_texi/general.tex(,795) convenient ways to edit @sc{Singular} input files
../singular_texi/general.tex(,796) @item
../singular_texi/general.tex(,797) interactive customization of nearly all aspects of the user-interface.
../singular_texi/general.tex(,798) @end itemize
../singular_texi/general.tex(,799) 
../singular_texi/general.tex(,800) To use the @sc{Singular}-Emacs interface you need to have Emacs version
../singular_texi/general.tex(,801) 20 or higher, or XEmacs
../singular_texi/general.tex(,802) version 20.3 or higher installed on your system. These
../singular_texi/general.tex(,803) editors can be downloaded for most hard- and software platforms
../singular_texi/general.tex(,804) (including Windows
../singular_texi/general.tex(,805) 95/98/NT, but excluding the Macintosh), from either
../singular_texi/general.tex(,806) @uref{http://www.fsf.org/software/emacs/emacs.html} (Emacs), from
../singular_texi/general.tex(,807) @uref{http://www.xemacs.org} (XEmacs), or from our ftp site at
../singular_texi/general.tex(,808) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/utils/}. The
../singular_texi/general.tex(,809) differences between Emacs and XEmacs w.r.t. the  @sc{Singular}-Emacs
../singular_texi/general.tex(,810) interface are marginal -- which editor to use is mainly a matter of personal
../singular_texi/general.tex(,811) preferences.
../singular_texi/general.tex(,812) 
../singular_texi/general.tex(,813) The simplest way to start-up @sc{Singular} in its Emacs interface is by
../singular_texi/general.tex(,814) running the program @code{ESingular} which is contained in the Singular
../singular_texi/general.tex(,815) distribution. Alternatively, @sc{Singular} can be started within an
../singular_texi/general.tex(,816) already running Emacs -- see @ref{Running SINGULAR under Emacs} for
../singular_texi/general.tex(,817) details.
../singular_texi/general.tex(,818) 
../singular_texi/general.tex(,819) The next section gives  a tutorial-like introduction to Emacs. This
../singular_texi/general.tex(,820) introductory section is
../singular_texi/general.tex(,821) followed by sections which explain the functionality of various aspects
../singular_texi/general.tex(,822) of the Emacs user interface in more detail: how to start/restart/kill
../singular_texi/general.tex(,823) @sc{Singular} within Emacs, how to run an interactive demonstration, how
../singular_texi/general.tex(,824) to customize the Emacs user interface, etc. Finally, the 20 most
../singular_texi/general.tex(,825) important commands of the Emacs interface together with their key
../singular_texi/general.tex(,826) bindings are listed.
../singular_texi/general.tex(,827) 
../singular_texi/general.tex(,828) @menu
../singular_texi/general.tex(,829) * A quick guide to Emacs::
../singular_texi/general.tex(,830) * Running SINGULAR under Emacs::
../singular_texi/general.tex(,831) * Demo mode::
../singular_texi/general.tex(,832) * Customization of the Emacs interface::
../singular_texi/general.tex(,833) * Editing SINGULAR input files with Emacs::
../singular_texi/general.tex(,834) * Top 20 Emacs commands::
../singular_texi/general.tex(,835) @end menu
../singular_texi/general.tex(,836) 
../singular_texi/general.tex(,837) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,838) @node A quick guide to Emacs, Running SINGULAR under Emacs, Emacs user interface, Emacs user interface
../singular_texi/general.tex(,839) @subsection A quick guide to Emacs
../singular_texi/general.tex(,840) @cindex Emacs, overview
../singular_texi/general.tex(,841) @cindex Emacs, a quick guide
../singular_texi/general.tex(,842) 
../singular_texi/general.tex(,843) This section gives a tutorial-like introduction to Emacs. Especially to
../singular_texi/general.tex(,844) users who are not familiar with Emacs, we recommend that they go through
../singular_texi/general.tex(,845) this section and try out the described features.
../singular_texi/general.tex(,846) 
../singular_texi/general.tex(,847) Emacs commands generally involve the @code{CONTROL} key (sometimes
../singular_texi/general.tex(,848) labeled @code{CTRL} or @code{CTL}) or the @code{META} key.  On some
../singular_texi/general.tex(,849) keyboards, the @code{META} key is labeled @code{ALT} or @code{EDIT} or
../singular_texi/general.tex(,850) something else (for example, on Sun keyboards, the diamond key to the
../singular_texi/general.tex(,851) left of the space-bar is @code{META}).  If there is no @code{META} key,
../singular_texi/general.tex(,852) the @code{ESC} key can be used, instead.  Rather than writing out
../singular_texi/general.tex(,853) @code{META} or
../singular_texi/general.tex(,854) @code{CONTROL} each time we want to prefix a character, we will use the
../singular_texi/general.tex(,855) following abbreviations:
../singular_texi/general.tex(,856) 
../singular_texi/general.tex(,857) @multitable @columnfractions .2 .8
../singular_texi/general.tex(,858) @item @code{C-<chr>}
../singular_texi/general.tex(,859) @tab means hold the @code{CONTROL} key while typing the character
../singular_texi/general.tex(,860) @code{<chr>}. Thus, @code{C-f} would be: hold the @code{CONTROL} key and
../singular_texi/general.tex(,861) type @code{f}.
../singular_texi/general.tex(,862) @item @code{M-<chr>}
../singular_texi/general.tex(,863) @tab means hold the @code{META} key down while typing @code{<chr>}.  If there
../singular_texi/general.tex(,864) is no @code{META} key, type @key{ESC}, release it, then type the
../singular_texi/general.tex(,865) character @code{<chr>}.
../singular_texi/general.tex(,866) @end multitable
../singular_texi/general.tex(,867) 
../singular_texi/general.tex(,868) For user new to Emacs, we highly recommend that they go through the
../singular_texi/general.tex(,869) interactive Emacs tutorial: type @code{C-h t} to start it.
../singular_texi/general.tex(,870) 
../singular_texi/general.tex(,871) For others, it is important to understand the following Emacs concepts:
../singular_texi/general.tex(,872) @table @asis
../singular_texi/general.tex(,873) @item window
../singular_texi/general.tex(,874) In Emacs terminology, a window refers to separate panes within the same
../singular_texi/general.tex(,875) window of the window system, and not to overlapping, separate
../singular_texi/general.tex(,876) windows. When using @sc{Singular} within Emacs, extra windows may appear
../singular_texi/general.tex(,877) which display help or output from certain commands. The most important
../singular_texi/general.tex(,878) window commands are:
../singular_texi/general.tex(,879) @multitable @columnfractions 2. .3 .5
../singular_texi/general.tex(,880) @item @code{C-x 1}
../singular_texi/general.tex(,881) @tab @code{File->Un-Split}
../singular_texi/general.tex(,882) @tab Un-Split window (i.e., kill other windows)
../singular_texi/general.tex(,883) @item @code{C-x o}
../singular_texi/general.tex(,884) @tab
../singular_texi/general.tex(,885) @tab Goto other window, i.e. move cursor into other window.
../singular_texi/general.tex(,886) @end multitable
../singular_texi/general.tex(,887) 
../singular_texi/general.tex(,888) @item cursor and point
../singular_texi/general.tex(,889) The location of the cursor in the text is also called "point".  To
../singular_texi/general.tex(,890) paraphrase, the cursor shows on the screen where point is located in
../singular_texi/general.tex(,891) the text. Here is a summary of simple cursor-moving operations:
../singular_texi/general.tex(,892) @multitable @columnfractions .2 .8
../singular_texi/general.tex(,893) @item @code{C-f} @tab   Move forward a character
../singular_texi/general.tex(,894) @item @code{C-b} @tab   Move backward a character
../singular_texi/general.tex(,895) @item @code{M-f} @tab   Move forward a word
../singular_texi/general.tex(,896) @item @code{M-b} @tab   Move backward a word
../singular_texi/general.tex(,897) @item @code{C-a} @tab   Move to the beginning of line
../singular_texi/general.tex(,898) @item @code{C-e} @tab   Move to the end of line
../singular_texi/general.tex(,899) @end multitable
../singular_texi/general.tex(,900) 
../singular_texi/general.tex(,901) @item buffer
../singular_texi/general.tex(,902) Any text you see in an Emacs window is always part of some buffer. For
../singular_texi/general.tex(,903) example, each file you are editing with Emacs is stored inside a buffer,
../singular_texi/general.tex(,904) but also @sc{Singular} is running inside an Emacs buffer. Each buffer
../singular_texi/general.tex(,905) has a name: for example, the buffer of a file you edit usually has the
../singular_texi/general.tex(,906) same name as the file, @sc{Singular} is running in a buffer which has
../singular_texi/general.tex(,907) the name @code{*singular*} (or, @code{*singular<2>*},
../singular_texi/general.tex(,908) @code{*singular<3>*}, etc., if you have multiple @sc{Singular}
../singular_texi/general.tex(,909) sessions within the same Emacs).
../singular_texi/general.tex(,910) 
../singular_texi/general.tex(,911) When you are asked for input to an Emacs command, the cursor
../singular_texi/general.tex(,912) moves to the bottom line of Emacs, i.e., to a special buffer, called the
../singular_texi/general.tex(,913) "minibuffer". Typing @key{RETURN} within the minibuffer, ends the
../singular_texi/general.tex(,914) input, typing @key{SPACE} within the minibuffer, lists all possible
../singular_texi/general.tex(,915) input values to the interactive Emacs command.
../singular_texi/general.tex(,916) 
../singular_texi/general.tex(,917) The most important buffer commands are
../singular_texi/general.tex(,918) @multitable @columnfractions .2 .8
../singular_texi/general.tex(,919) @item @code{C-x b} @tab Switch buffer
../singular_texi/general.tex(,920) @item @code{C-x k} @tab Kill current buffer
../singular_texi/general.tex(,921) @end multitable
../singular_texi/general.tex(,922) Alternatively, you can switch to or kill buffers using the @code{Buffer}
../singular_texi/general.tex(,923) menu.
../singular_texi/general.tex(,924) 
../singular_texi/general.tex(,925) @item Executing commands
../singular_texi/general.tex(,926) Emacs commands are executed by typing @code{M-x <command-name>}
../singular_texi/general.tex(,927) (remember that @key{SPACE} completes partial
../singular_texi/general.tex(,928) command names). Important and frequently used commands have short-cuts
../singular_texi/general.tex(,929) for their execution: Key bindings or even menu entries. For example, a
../singular_texi/general.tex(,930) file can be loaded with @code{M-x load-file}, or @code{C-x C-f}, or with
../singular_texi/general.tex(,931) the @code{File->Open} menu.
../singular_texi/general.tex(,932) 
../singular_texi/general.tex(,933) @item How to exit
../singular_texi/general.tex(,934) To end the Emacs (and, @sc{Singular}) session,
../singular_texi/general.tex(,935) type @code{C-x C-c} (two characters), or use the @code{File -> Exit}
../singular_texi/general.tex(,936) menu.
../singular_texi/general.tex(,937) 
../singular_texi/general.tex(,938) @item When Emacs is hung
../singular_texi/general.tex(,939) If Emacs stops responding to your commands, you can stop it safely by
../singular_texi/general.tex(,940) typing @code{C-g}, or, if this fails, by typing @code{C-]}.
../singular_texi/general.tex(,941) 
../singular_texi/general.tex(,942) @item More help
../singular_texi/general.tex(,943) Nearly all aspects of Emacs are very well documented: type
../singular_texi/general.tex(,944) @code{C-h}  and then a character saying what kind of help you want.
../singular_texi/general.tex(,945) For example, typing @code{C-h i} enters the @code{Info} documentation
../singular_texi/general.tex(,946) browser.
../singular_texi/general.tex(,947) 
../singular_texi/general.tex(,948) @item Using the mouse
../singular_texi/general.tex(,949) Emacs is fully integrated with the mouse. In particular, clicking the
../singular_texi/general.tex(,950) right mouse button brings up a pop-up menu which usually contains a few
../singular_texi/general.tex(,951) commonly used commands.
../singular_texi/general.tex(,952) @end table
../singular_texi/general.tex(,953) 
../singular_texi/general.tex(,954) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,955) @node Running SINGULAR under Emacs, Demo mode, A quick guide to Emacs, Emacs user interface
../singular_texi/general.tex(,956) @subsection Running SINGULAR under Emacs
../singular_texi/general.tex(,957) @cindex Emacs, running Singular under
../singular_texi/general.tex(,958) @cindex Singular, running within Emacs
../singular_texi/general.tex(,959) @cindex Running SINGULAR under Emacs
../singular_texi/general.tex(,960) 
../singular_texi/general.tex(,961) There are two ways to start the @sc{Singular} Emacs interface: Typing
../singular_texi/general.tex(,962) @code{ESingular} instead of @code{Singular} on the command shell
../singular_texi/general.tex(,963) launches a new Emacs process, initializes the interface and runs
../singular_texi/general.tex(,964) @sc{Singular} within Emacs. The other way is to start the interface in
../singular_texi/general.tex(,965) an already running Emacs, by typing @code{M-x singular} inside
../singular_texi/general.tex(,966) Emacs. This initializes the interface and runs @sc{Singular} within
../singular_texi/general.tex(,967) Emacs. Both ways are described in more detail below.
../singular_texi/general.tex(,968) 
../singular_texi/general.tex(,969) Note: To properly run the Emacs interface, several files are needed
../singular_texi/general.tex(,970) which usually reside in the @code{emacs} subdirectory of your
../singular_texi/general.tex(,971) @sc{Singular} distribution. This directory is called
../singular_texi/general.tex(,972) singular-emacs-home-directory in the following.
../singular_texi/general.tex(,973) 
../singular_texi/general.tex(,974) @subheading Starting the interface using ESingular
../singular_texi/general.tex(,975) 
../singular_texi/general.tex(,976) As mentioned above, @code{ESingular} is an "out-of-the-box" solution:
../singular_texi/general.tex(,977) You don't have to add special things to your @code{.emacs} startup file
../singular_texi/general.tex(,978) to initialize the interface; everything is done for you in a special
../singular_texi/general.tex(,979) file called @code{.emacs-singular} (which comes along with the
../singular_texi/general.tex(,980) @sc{Singular} distribution and resides in the
../singular_texi/general.tex(,981) singular-emacs-home-directory) which is automatically loaded on Emacs
../singular_texi/general.tex(,982) startup (and the loading of the @code{.emacs} file is automatically
../singular_texi/general.tex(,983) suppressed).
../singular_texi/general.tex(,984) 
../singular_texi/general.tex(,985) The customizable variables of the @sc{Singular} Emacs interface are set
../singular_texi/general.tex(,986) to defaults which give the novice user a very shell like
../singular_texi/general.tex(,987) feeling of the interface. Nevertheless, these default settings can be
../singular_texi/general.tex(,988) changed, see @ref{Customization of the Emacs interface}. Besides other
../singular_texi/general.tex(,989) Emacs initializations, such as fontification or blinking parentheses, a
../singular_texi/general.tex(,990) new menu item called @code{Singular} is added to the main menu,
../singular_texi/general.tex(,991) providing menu items for starting @sc{Singular}. On XEmacs, a button
../singular_texi/general.tex(,992) starting @sc{Singular} is added to the main toolbar.
../singular_texi/general.tex(,993) 
../singular_texi/general.tex(,994) The @sc{Singular} interface is started automatically; once you see a
../singular_texi/general.tex(,995) buffer called @code{*singular*} and the @sc{Singular} prompt you are
../singular_texi/general.tex(,996) ready to start your @sc{Singular} session.
../singular_texi/general.tex(,997) 
../singular_texi/general.tex(,998) @code{ESingular} inherits all @code{Singular} options. For a description
../singular_texi/general.tex(,999) off all these options, see @ref{Command line options}. Additionally
../singular_texi/general.tex(,1000) there are the following options which are special to @code{ESingular}:
../singular_texi/general.tex(,1001) 
../singular_texi/general.tex(,1002) @multitable @columnfractions .3 .7
../singular_texi/general.tex(,1003) 
../singular_texi/general.tex(,1004) @item command-line option /
../singular_texi/general.tex(,1005) @*environment variable
../singular_texi/general.tex(,1006) @tab functionality
../singular_texi/general.tex(,1007) 
../singular_texi/general.tex(,1008) @item @code{--emacs=EMACS}
../singular_texi/general.tex(,1009) @*@code{ESINGULAR_EMACS}
../singular_texi/general.tex(,1010) @tab Use @code{EMACS} as Emacs program to run the @sc{Singular} Emacs
../singular_texi/general.tex(,1011) interface, where @code{EMACS} may e.g. be emacs or xemacs.
../singular_texi/general.tex(,1012) 
../singular_texi/general.tex(,1013) @item @code{--emacs-dir=DIR}
../singular_texi/general.tex(,1014) @*@code{ESINGULAR_EMACS_DIR}
../singular_texi/general.tex(,1015) @tab Set the singular-emacs-home-directory, which is the directory where
../singular_texi/general.tex(,1016) singular.el can be found,  to @code{DIR}.
../singular_texi/general.tex(,1017) 
../singular_texi/general.tex(,1018) @item @code{--emacs-load=FILE}
../singular_texi/general.tex(,1019) @*@code{ESINGULAR_EMACS_LOAD}
../singular_texi/general.tex(,1020) @tab Load @code{FILE} on Emacs start-up, instead of the default load file.
../singular_texi/general.tex(,1021) 
../singular_texi/general.tex(,1022) @item @code{--singular=PROG}
../singular_texi/general.tex(,1023) @*@code{ESINGULAR_SINGULAR}
../singular_texi/general.tex(,1024) @tab Start @code{PROG} as @sc{Singular} program within Emacs
../singular_texi/general.tex(,1025) 
../singular_texi/general.tex(,1026) @end multitable
../singular_texi/general.tex(,1027) 
../singular_texi/general.tex(,1028) Notice that values of these options can also be given by setting the
../singular_texi/general.tex(,1029) above mentioned environment variables (where values  given as
../singular_texi/general.tex(,1030) command-line arguments take priority over values given by environment
../singular_texi/general.tex(,1031) variables).
../singular_texi/general.tex(,1032) 
../singular_texi/general.tex(,1033) @subheading Starting the interface within a running Emacs
../singular_texi/general.tex(,1034) 
../singular_texi/general.tex(,1035) If you are a more experienced Emacs user and you already have your own
../singular_texi/general.tex(,1036) local @code{.emacs} startup file, you might want to start the interface
../singular_texi/general.tex(,1037) out of your running Emacs without using @code{ESingular}. For this, you
../singular_texi/general.tex(,1038) should add the following lisp code to your @code{.emacs} file:
../singular_texi/general.tex(,1039) 
../singular_texi/general.tex(,1040) @smallexample
../singular_texi/general.tex(,1041) (setq load-path (cons "<singular-emacs-home-directory>" load-path))
../singular_texi/general.tex(,1042) (autoload 'singular "singular"
../singular_texi/general.tex(,1043)   "Start Singular using default values." t)
../singular_texi/general.tex(,1044) (autoload 'singular-other "singular"
../singular_texi/general.tex(,1045)   "Ask for arguments and start Singular." t)
../singular_texi/general.tex(,1046) @end smallexample
../singular_texi/general.tex(,1047) 
../singular_texi/general.tex(,1048) Then typing @code{M-x singular} in a running Emacs session initializes
../singular_texi/general.tex(,1049) the interface in a new buffer and launches a @sc{Singular} process. The
../singular_texi/general.tex(,1050) @sc{Singular} prompt comes up and you are ready to start your
../singular_texi/general.tex(,1051) @sc{Singular} session.
../singular_texi/general.tex(,1052) 
../singular_texi/general.tex(,1053) It is a good idea to take a look at the (well documented) file
../singular_texi/general.tex(,1054) @code{.emacs-singular} in the singular-emacs-home-directory, which comes
../singular_texi/general.tex(,1055) along with the distribution. In it you find some useful initializations
../singular_texi/general.tex(,1056) of the @sc{Singular} interface as well as some lisp code, which, for
../singular_texi/general.tex(,1057) example, adds a button to the XEmacs toolbar. Some of this code might be
../singular_texi/general.tex(,1058) useful for your @code{.emacs} file, too. And if you are a Emacs wizard,
../singular_texi/general.tex(,1059) it is of course a good idea to take a look at @code{singular.el} in the
../singular_texi/general.tex(,1060) singular-emacs-home-directory.
../singular_texi/general.tex(,1061) 
../singular_texi/general.tex(,1062) @subheading Starting, interrupting and stopping SINGULAR
../singular_texi/general.tex(,1063) 
../singular_texi/general.tex(,1064) There are the following commands to start and stop @sc{Singular}:
../singular_texi/general.tex(,1065) 
../singular_texi/general.tex(,1066) @itemize @bullet
../singular_texi/general.tex(,1067) @item @code{singular-other} (or menu @code{Singular}, item
../singular_texi/general.tex(,1068) @code{Start...})
../singular_texi/general.tex(,1069) 
../singular_texi/general.tex(,1070) Starts a @sc{Singular} process and asks for the following four
../singular_texi/general.tex(,1071) parameters in the minibuffer area:
../singular_texi/general.tex(,1072) 
../singular_texi/general.tex(,1073) @enumerate
../singular_texi/general.tex(,1074) @item
../singular_texi/general.tex(,1075) The Singular executable. This can either be a file name with complete
../singular_texi/general.tex(,1076) path, e.g., @code{/local/bin/Singular}. Then exactly this executable is
../singular_texi/general.tex(,1077) started. The path may contain the character @code{~} denoting your home
../singular_texi/general.tex(,1078) directory. Or it can be the name of a command without path, e.g.,
../singular_texi/general.tex(,1079) @code{Singular}. Then the executable is searched for in your
../singular_texi/general.tex(,1080) @code{$PATH} environment variable.
../singular_texi/general.tex(,1081) 
../singular_texi/general.tex(,1082) @item
../singular_texi/general.tex(,1083) The default working directory. This is the path to an existing
../singular_texi/general.tex(,1084) directory, e.g., @code{~/work}. The current directory is set to this
../singular_texi/general.tex(,1085) directory before @sc{Singular} is started.
../singular_texi/general.tex(,1086) 
../singular_texi/general.tex(,1087) @item
../singular_texi/general.tex(,1088) Command line options. You can set any @sc{Singular} command line
../singular_texi/general.tex(,1089) option (see @ref{Command line options}).
../singular_texi/general.tex(,1090) 
../singular_texi/general.tex(,1091) @item
../singular_texi/general.tex(,1092) The buffer name. You can specify the name of the buffer the interface is
../singular_texi/general.tex(,1093) running in.
../singular_texi/general.tex(,1094) 
../singular_texi/general.tex(,1095) @end enumerate
../singular_texi/general.tex(,1096) 
../singular_texi/general.tex(,1097) @item @code{singular} (or menu @code{Singular}, item @code{Start
../singular_texi/general.tex(,1098) default})
../singular_texi/general.tex(,1099) 
../singular_texi/general.tex(,1100) Starts @sc{Singular} with default settings for the executable, the
../singular_texi/general.tex(,1101) working directory, command line switches, and the buffer name. You can
../singular_texi/general.tex(,1102) customize this default settings, see
../singular_texi/general.tex(,1103) @ref{Customization of the Emacs interface}.
../singular_texi/general.tex(,1104) 
../singular_texi/general.tex(,1105) @item @code{singular-exit-singular} (bound to @code{C-c $} or menu
../singular_texi/general.tex(,1106) @code{Singular}, item @code{Exit})
../singular_texi/general.tex(,1107) 
../singular_texi/general.tex(,1108) Kills the running @sc{Singular} process of the current
../singular_texi/general.tex(,1109) buffer (but does not kill the buffer). Once you have killed a
../singular_texi/general.tex(,1110) @sc{Singular} process you can start a new one in the same buffer with
../singular_texi/general.tex(,1111) the command @code{singular} (or select the item @code{Start default} of
../singular_texi/general.tex(,1112) the @code{Singular} menu).
../singular_texi/general.tex(,1113) 
../singular_texi/general.tex(,1114) @item @code{singular-restart} (bound to @code{C-c C-r} or menu
../singular_texi/general.tex(,1115) @code{Singular}, item @code{Restart})
../singular_texi/general.tex(,1116) 
../singular_texi/general.tex(,1117) Kills the running @sc{Singular} process of the current buffer and starts
../singular_texi/general.tex(,1118) a new process in the same buffer with exactly the same command line
../singular_texi/general.tex(,1119) arguments as before.
../singular_texi/general.tex(,1120) 
../singular_texi/general.tex(,1121) @item @code{singular-control-c} (bound to @code{C-c C-c} or menu @code{Singular}, item @code{Interrupt})
../singular_texi/general.tex(,1122) 
../singular_texi/general.tex(,1123) Interrupt the Singular process running in the current buffer. Asks
../singular_texi/general.tex(,1124) whether to (@code{a})bort the current @sc{Singular} command,
../singular_texi/general.tex(,1125) (@code{q})uit or (@code{r})estart the current @sc{Singular} process, or
../singular_texi/general.tex(,1126) (@code{c})ontinue without doing anything (default).
../singular_texi/general.tex(,1127) @end itemize
../singular_texi/general.tex(,1128) 
../singular_texi/general.tex(,1129) Whenever a @sc{Singular} process is started within the Emacs interface,
../singular_texi/general.tex(,1130) the contents of a special startup file (by default
../singular_texi/general.tex(,1131) @code{~/.emacs-singularrc}) is pasted as input to @sc{Singular} at the
../singular_texi/general.tex(,1132) very end of the usual startup sequence (see @ref{Startup sequence}). The
../singular_texi/general.tex(,1133) name of the startup file can be changed, see
../singular_texi/general.tex(,1134) @ref{Customization of the Emacs interface}.
../singular_texi/general.tex(,1135) 
../singular_texi/general.tex(,1136) 
../singular_texi/general.tex(,1137) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,1138) @node Demo mode, Customization of the Emacs interface, Running SINGULAR under Emacs, Emacs user interface
../singular_texi/general.tex(,1139) @subsection Demo mode
../singular_texi/general.tex(,1140) @cindex Emacs, Singular demo mode
../singular_texi/general.tex(,1141) @cindex Singular, demo mode
../singular_texi/general.tex(,1142) @cindex Demo mode
../singular_texi/general.tex(,1143) 
../singular_texi/general.tex(,1144) The Emacs interface can be used to run interactive @sc{Singular}
../singular_texi/general.tex(,1145) demonstrations. A demonstration is started by loading a so-called
../singular_texi/general.tex(,1146) @sc{Singular} demo file with the Emacs command
../singular_texi/general.tex(,1147) @code{singular-demo-load}, bound to
../singular_texi/general.tex(,1148) @code{C-c C-d}, or with the menu @code{Commands->Load Demo}.
../singular_texi/general.tex(,1149) 
../singular_texi/general.tex(,1150) A @sc{Singular} demo file should consist of @sc{Singular} commands
../singular_texi/general.tex(,1151) separated by blank lines. When running a demo, the input up to the next
../singular_texi/general.tex(,1152) blank line is echoed to the screen. Hitting @key{RETURN} executes the
../singular_texi/general.tex(,1153) echoed commands and shows their output. Hitting @key{RETURN} again,
../singular_texi/general.tex(,1154) echos the next commands to the screen, and so on, until all commands of
../singular_texi/general.tex(,1155) the demo file are executed. While running a demo, you can
../singular_texi/general.tex(,1156) execute other commands on the @sc{Singular} prompt: the next input of
../singular_texi/general.tex(,1157) from the demo file is then echoed again, if you hit @key{RETURN} on
../singular_texi/general.tex(,1158) an empty input line.
../singular_texi/general.tex(,1159) 
../singular_texi/general.tex(,1160) A @sc{Singular} demo can prematurely be exited by either starting
../singular_texi/general.tex(,1161) another demo, or by executing the Emacs command
../singular_texi/general.tex(,1162) @code{singular-demo-exit} (menu: @code{Commands->Exit Demo}).
../singular_texi/general.tex(,1163) 
../singular_texi/general.tex(,1164) Some aspects of running @sc{Singular} demos can be customized.
../singular_texi/general.tex(,1165) @xref{Customization of the Emacs interface}, for more info.
../singular_texi/general.tex(,1166) 
../singular_texi/general.tex(,1167) 
../singular_texi/general.tex(,1168) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,1169) @node Customization of the Emacs interface, Editing SINGULAR input files with Emacs, Demo mode, Emacs user interface
../singular_texi/general.tex(,1170) @subsection Customization of the Emacs interface
../singular_texi/general.tex(,1171) @cindex Emacs, customization of Singular mode
../singular_texi/general.tex(,1172) @cindex Singular, customization of Emacs user interface
../singular_texi/general.tex(,1173) @cindex Customization of the Emacs interface
../singular_texi/general.tex(,1174) 
../singular_texi/general.tex(,1175) Emacs provides a convenient interface to customize the behavior of
../singular_texi/general.tex(,1176) Emacs and the SINGULAR Emacs interface for your own needs. You enter the
../singular_texi/general.tex(,1177) customize environment by either calling @code{M-x customize} (on XEmacs
../singular_texi/general.tex(,1178) you afterwards have to enter @code{emacs} in the minibuffer area) or by
../singular_texi/general.tex(,1179) selecting the menu item @code{Options->Customize->Emacs...} for XEmacs,
../singular_texi/general.tex(,1180) and the menu item @code{Help->Customize->Toplevel Customization Group}
../singular_texi/general.tex(,1181) for Emacs, resp. A brief introduction to the customization mode comes up
../singular_texi/general.tex(,1182) with the customization buffer. All customizable parameters are
../singular_texi/general.tex(,1183) hierarchically grouped and you can browse through all these groups and
../singular_texi/general.tex(,1184) change the values of the parameters using the mouse. At the end you can
../singular_texi/general.tex(,1185) safe the settings to a special file making your changes permanent.
../singular_texi/general.tex(,1186) 
../singular_texi/general.tex(,1187) To change the settings of the @sc{Singular} Emacs interface you can
../singular_texi/general.tex(,1188) either select the item @code{Preferences} of the @code{Singular} menu,
../singular_texi/general.tex(,1189) call @code{M-x customize-group} and give the argument
../singular_texi/general.tex(,1190) @code{singular-interactive} in the minibuffer area, or browse from the
../singular_texi/general.tex(,1191) top-level customization group through the path
../singular_texi/general.tex(,1192) @code{External->Singular->Singular interactive}.
../singular_texi/general.tex(,1193) 
../singular_texi/general.tex(,1194) The @sc{Singular} interface customization buffer is divided into four
../singular_texi/general.tex(,1195) groups:
../singular_texi/general.tex(,1196) 
../singular_texi/general.tex(,1197) @itemize @bullet
../singular_texi/general.tex(,1198) @item Singular Faces
../singular_texi/general.tex(,1199) 
../singular_texi/general.tex(,1200) Here you can specify various faces used if font-lock-mode is enabled
../singular_texi/general.tex(,1201) (which it is, by default).
../singular_texi/general.tex(,1202) 
../singular_texi/general.tex(,1203) @item Singular Sections And Foldings
../singular_texi/general.tex(,1204) 
../singular_texi/general.tex(,1205) Here you can specify special faces for @sc{Singular} input and output
../singular_texi/general.tex(,1206) and change the text used as replacement for folded sections.
../singular_texi/general.tex(,1207) 
../singular_texi/general.tex(,1208) For doing this, you also might
../singular_texi/general.tex(,1209) find handy the function @code{customize-face-at-point},
../singular_texi/general.tex(,1210) which let's you customize the face at the current position of
../singular_texi/general.tex(,1211) point. This function is automatically defined if you run
../singular_texi/general.tex(,1212) @code{ESingular}). Otherwise, you should add its definition (see below)
../singular_texi/general.tex(,1213) to your personal @code{.emacs} file.
../singular_texi/general.tex(,1214) 
../singular_texi/general.tex(,1215) @item Singular Interactive Miscellaneous
../singular_texi/general.tex(,1216) 
../singular_texi/general.tex(,1217) Here you can specify various different things such as the behavior of
../singular_texi/general.tex(,1218) the cursor keys, the name of the special @sc{Singular} startup file, the
../singular_texi/general.tex(,1219) appearance of the help window, or the default values for the
../singular_texi/general.tex(,1220) @code{singular} command.
../singular_texi/general.tex(,1221) @c Time: I find this sentence rather confusing
../singular_texi/general.tex(,1222) @c For a first look at customization of the
../singular_texi/general.tex(,1223) @c interface, this is probably the best group.
../singular_texi/general.tex(,1224) 
../singular_texi/general.tex(,1225) 
../singular_texi/general.tex(,1226) @item Singular Demo Mode
../singular_texi/general.tex(,1227) 
../singular_texi/general.tex(,1228) Here you can specify how chunks of the demo file are divided, or specify
../singular_texi/general.tex(,1229) a default directory for demo files.
../singular_texi/general.tex(,1230) @end itemize
../singular_texi/general.tex(,1231) 
../singular_texi/general.tex(,1232) When you run @code{ESingular}, the settings of customized variables are
../singular_texi/general.tex(,1233) saved in the file @code{$HOME/.emacs-singular-cust}. Otherwise, the
../singular_texi/general.tex(,1234) settings are appended to your @code{.emacs} file. Among others, this
../singular_texi/general.tex(,1235) means that the customized settings of @code{ESingular} are not
../singular_texi/general.tex(,1236) automatically  taken over by a "normal" Emacs, and vice versa.
../singular_texi/general.tex(,1237) 
../singular_texi/general.tex(,1238) 
../singular_texi/general.tex(,1239) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,1240) @node Editing SINGULAR input files with Emacs, Top 20 Emacs commands, Customization of the Emacs interface, Emacs user interface
../singular_texi/general.tex(,1241) @subsection Editing SINGULAR input files with Emacs
../singular_texi/general.tex(,1242) @cindex Emacs, editing Singular input files
../singular_texi/general.tex(,1243) @cindex Singular, editing input files with Emacs
../singular_texi/general.tex(,1244) @cindex Editing SINGULAR input files with Emacs
../singular_texi/general.tex(,1245) 
../singular_texi/general.tex(,1246) Since @sc{Singular}'s programming language is similar to C, you
../singular_texi/general.tex(,1247) should use the Emacs C/C++-mode to edit @sc{Singular} input files and
../singular_texi/general.tex(,1248) @sc{Singular} libraries. Among others, this Emacs mode provides
../singular_texi/general.tex(,1249) automatic indentation, line-breaking and keyword highlighting.
../singular_texi/general.tex(,1250) 
../singular_texi/general.tex(,1251) When running @code{ESingular}, the C/C++-mode is automatically turned on
../singular_texi/general.tex(,1252) whenever a file with the suffix @code{.sing}, or @code{.lib} is loaded.
../singular_texi/general.tex(,1253) 
../singular_texi/general.tex(,1254) For Emacs sessions which were not started by @code{ESingular},  you
../singular_texi/general.tex(,1255) should add the following to your @code{.emacs} file:
../singular_texi/general.tex(,1256) @smallexample
../singular_texi/general.tex(,1257) ;; turn on c++-mode for files ending in ".sing" and ".lib"
../singular_texi/general.tex(,1258) (setq auto-mode-alist (cons '("\\.sing\\'" . c++-mode) auto-mode-alist))
../singular_texi/general.tex(,1259) (setq auto-mode-alist (cons '("\\.lib\\'" .  c++-mode) auto-mode-alist))
../singular_texi/general.tex(,1260) ;; turn-on fontification for c++-mode
../singular_texi/general.tex(,1261) (add-hook 'c++-mode-hook
../singular_texi/general.tex(,1262)          (function (lambda () (font-lock-mode 1))))
../singular_texi/general.tex(,1263) ;; turn on aut-new line and hungry-delete
../singular_texi/general.tex(,1264) (add-hook 'c++-mode-hook
../singular_texi/general.tex(,1265)           (function (lambda () (c-toggle-auto-hungry-state 1))))
../singular_texi/general.tex(,1266) ;; a handy function for customization
../singular_texi/general.tex(,1267) (defun customize-face-at-point ()
../singular_texi/general.tex(,1268)   "Customize face which point is at."
../singular_texi/general.tex(,1269)   (interactive)
../singular_texi/general.tex(,1270)   (let ((face (get-text-property (point) 'face)))
../singular_texi/general.tex(,1271)     (if face
../singular_texi/general.tex(,1272)         (customize-face face)
../singular_texi/general.tex(,1273)       (message "No face defined at point"))))
../singular_texi/general.tex(,1274) 
../singular_texi/general.tex(,1275) @end smallexample
../singular_texi/general.tex(,1276) 
../singular_texi/general.tex(,1277) Notice that you can change the default settings for source-code
../singular_texi/general.tex(,1278) highlighting (colors, fonts, etc.) by customizing the respective faces
../singular_texi/general.tex(,1279) using the @code{Customize} feature of Emacs. For doing this, you might
../singular_texi/general.tex(,1280) find handy the above given function @code{customize-face-at-point},
../singular_texi/general.tex(,1281) which lets you customize the face of the current position of point (this
../singular_texi/general.tex(,1282) function is automatically defined if you run @code{ESingular}).
../singular_texi/general.tex(,1283) 
../singular_texi/general.tex(,1284) @c --------------------------------------------------------------------------
../singular_texi/general.tex(,1285) @node Top 20 Emacs commands,,Editing SINGULAR input files with Emacs, Emacs user interface
../singular_texi/general.tex(,1286) @subsection Top 20 Emacs commands
../singular_texi/general.tex(,1287) @cindex Emacs, important commands
../singular_texi/general.tex(,1288) @cindex Singular, important commands of Emacs interface
../singular_texi/general.tex(,1289) @cindex Top 20 Emacs commands
../singular_texi/general.tex(,1290) 
../singular_texi/general.tex(,1291) Here is a list of the 20 probably most useful commands when using the
../singular_texi/general.tex(,1292) @sc{Singular} Emacs interface.
../singular_texi/general.tex(,1293) 
../singular_texi/general.tex(,1294) Starting and stopping of @sc{Singular}:
../singular_texi/general.tex(,1295) 
../singular_texi/general.tex(,1296) @itemize @bullet
../singular_texi/general.tex(,1297) 
../singular_texi/general.tex(,1298) @item @code{singular} (menu @code{Singular->Start Default...}): starts
../singular_texi/general.tex(,1299) @sc{Singular} using default arguments.
../singular_texi/general.tex(,1300) 
../singular_texi/general.tex(,1301) @item @code{singular-other} (menu @code{Singular->Start}): starts
../singular_texi/general.tex(,1302) @sc{Singular} asking for several arguments in the minibuffer area.
../singular_texi/general.tex(,1303) 
../singular_texi/general.tex(,1304) @item @code{singular-exit} (key @code{C-c $} or menu
../singular_texi/general.tex(,1305) @code{Singular->Exit}): kills the @sc{Singular} process running in the
../singular_texi/general.tex(,1306) current buffer (but does not kill the buffer).
../singular_texi/general.tex(,1307) 
../singular_texi/general.tex(,1308) @item @code{singular-restart} (key @code{C-c C-r} or menu
../singular_texi/general.tex(,1309) @code{Singular->Restart}): kills the @sc{Singular} process running in
../singular_texi/general.tex(,1310) the current buffer and starts a new @sc{Singular} process with exactly
../singular_texi/general.tex(,1311) the same arguments as before.
../singular_texi/general.tex(,1312) 
../singular_texi/general.tex(,1313) @end itemize
../singular_texi/general.tex(,1314) 
../singular_texi/general.tex(,1315) Editing input and output:
../singular_texi/general.tex(,1316) 
../singular_texi/general.tex(,1317) @itemize @bullet
../singular_texi/general.tex(,1318) 
../singular_texi/general.tex(,1319) @item @code{singular-beginning-of-line} (key @code{C-a}): moves point to
../singular_texi/general.tex(,1320) beginning of line, then skip past the @sc{Singular} prompt, if any.
../singular_texi/general.tex(,1321) 
../singular_texi/general.tex(,1322) @item @code{singular-toggle-truncate-lines} (key @code{C-c C-t} or menu
../singular_texi/general.tex(,1323) @code{Commands->Truncate lines}): toggles whether long lines should be
../singular_texi/general.tex(,1324) truncated or not. If lines are not truncated, the commands
../singular_texi/general.tex(,1325) @code{singular-scroll-left} and @code{singular-scroll-right} are useful
../singular_texi/general.tex(,1326) to scroll left and right, resp.
../singular_texi/general.tex(,1327) 
../singular_texi/general.tex(,1328) @item @code{singular-dynamic-complete} (key @code{TAB}): performs
../singular_texi/general.tex(,1329) context specific completion. If point is inside a string, file name
../singular_texi/general.tex(,1330) completion is done. If point is at the end of a help command (i.e.,
../singular_texi/general.tex(,1331) @code{help} or @code{?}), completion on @sc{Singular} help topics is
../singular_texi/general.tex(,1332) done. If point is at the end of an example command (i.e.,
../singular_texi/general.tex(,1333) @code{example}), completion is done on @sc{Singular} examples. In all
../singular_texi/general.tex(,1334) other cases, completion on @sc{Singular} commands is done.
../singular_texi/general.tex(,1335) 
../singular_texi/general.tex(,1336) @c note: add space between Fold/ Unfold to avoid overfull line
../singular_texi/general.tex(,1337) @item @code{singular-folding-toggle-fold-latest-output} (key @code{C-c
../singular_texi/general.tex(,1338) C-o} or menu @code{Commands->Fold/ Unfold Latest Output}): toggles
../singular_texi/general.tex(,1339) folding of the latest output section. If your last @sc{Singular} command
../singular_texi/general.tex(,1340) produced a huge output, simply type @code{C-c C-o} and it will be
../singular_texi/general.tex(,1341) replaced by a single line.
../singular_texi/general.tex(,1342) 
../singular_texi/general.tex(,1343) @item @code{singular-folding-toggle-fold-at-point} (key @code{C-c C-f}
../singular_texi/general.tex(,1344) or menu @code{Commands->Fold/Unfold At Point}): toggles folding of the
../singular_texi/general.tex(,1345) section the point currently is in.
../singular_texi/general.tex(,1346) 
../singular_texi/general.tex(,1347) @item @code{singular-folding-fold-all-output} (menu @code{Commands->Fold
../singular_texi/general.tex(,1348) All Output}): folds all @sc{Singular} output, replacing each output
../singular_texi/general.tex(,1349) section by a single line.
../singular_texi/general.tex(,1350) 
../singular_texi/general.tex(,1351) @item @code{singular-folding-unfold-all-output} (menu
../singular_texi/general.tex(,1352) @code{Commands->Unfold All Output}): unfolds all @sc{Singular} output
../singular_texi/general.tex(,1353) sections showing their true contents.
../singular_texi/general.tex(,1354) 
../singular_texi/general.tex(,1355) @end itemize
../singular_texi/general.tex(,1356) 
../singular_texi/general.tex(,1357) Loading of files and @sc{Singular} demo mode:
../singular_texi/general.tex(,1358) 
../singular_texi/general.tex(,1359) @itemize @bullet
../singular_texi/general.tex(,1360) 
../singular_texi/general.tex(,1361) @item @code{singular-load-library} (key @code{C-c C-l} or menu
../singular_texi/general.tex(,1362) @code{Commands->Libraries->other...}): asks for a standard library name
../singular_texi/general.tex(,1363) or a library file in the minibuffer (hit @code{TAB} for completion) and
../singular_texi/general.tex(,1364) loads the library into @sc{Singular}. The submenu @code{Libraries} of
../singular_texi/general.tex(,1365) the @code{Commands} menu also provides a separate menu item for each
../singular_texi/general.tex(,1366) standard library.
../singular_texi/general.tex(,1367) 
../singular_texi/general.tex(,1368) @item @code{singular-load-file} (key @code{C-c <} or menu
../singular_texi/general.tex(,1369) @code{Commands->Load File...}): asks for a file name in the minibuffer
../singular_texi/general.tex(,1370) (which is expanded using @code{expand-file-name} if given a prefix
../singular_texi/general.tex(,1371) argument) and loads the file into @sc{Singular}.
../singular_texi/general.tex(,1372) 
../singular_texi/general.tex(,1373) @item @code{singular-demo-load} (key @code{C-c C-d} or menu
../singular_texi/general.tex(,1374) @code{Commands->Load Demo...}): asks for a file name of a @sc{Singular}
../singular_texi/general.tex(,1375) demo file in the minibuffer area (hit @code{SPACE} for completion) and
../singular_texi/general.tex(,1376) enters the @sc{Singular} demo mode showing the first chunk of the demo.
../singular_texi/general.tex(,1377) 
../singular_texi/general.tex(,1378) @item @code{singular-demo-exit} (menu @code{Commands->Exit Demo}):
../singular_texi/general.tex(,1379) exits from @sc{Singular} demo mode and cleans up everything that is
../singular_texi/general.tex(,1380) left from the demo.
../singular_texi/general.tex(,1381) 
../singular_texi/general.tex(,1382) @end itemize
../singular_texi/general.tex(,1383) 
../singular_texi/general.tex(,1384) Help and Customization:
../singular_texi/general.tex(,1385) 
../singular_texi/general.tex(,1386) @itemize @bullet
../singular_texi/general.tex(,1387) 
../singular_texi/general.tex(,1388) @item @code{singular-help} (key @code{C-h C-s} or menu
../singular_texi/general.tex(,1389) @code{Singular->Singular Help}): asks for a @sc{Singular} help topic in
../singular_texi/general.tex(,1390) the minibuffer (hit @code{TAB} for completion) and shows the help text
../singular_texi/general.tex(,1391) in a separate buffer.
../singular_texi/general.tex(,1392) 
../singular_texi/general.tex(,1393) @item @code{singular-example} (key @code{C-c C-e} or menu
../singular_texi/general.tex(,1394) @code{Singular->Singular Example}): asks for a @sc{Singular} command in
../singular_texi/general.tex(,1395) the minibuffer (hit @code{TAB} for completion) and executes the example
../singular_texi/general.tex(,1396) of this command in the current @sc{Singular} buffer.
../singular_texi/general.tex(,1397) 
../singular_texi/general.tex(,1398) @item @code{customize-group} (menu @code{Singular->Preferences}): enters
../singular_texi/general.tex(,1399) the customization group of the @sc{Singular} Emacs interface. (If called
../singular_texi/general.tex(,1400) via @code{M-x customize-group} give argument @code{singular-interactive}
../singular_texi/general.tex(,1401) in the minibuffer area.)
../singular_texi/general.tex(,1402) 
../singular_texi/general.tex(,1403) @end itemize
../singular_texi/general.tex(,1404) 
../singular_texi/general.tex(,1405) 
../singular_texi/general.tex(,1406) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,1407) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,1408) @node Rings and orderings, Implemented algorithms, Emacs user interface, General concepts
../singular_texi/general.tex(,1409) @section Rings and orderings
../singular_texi/general.tex(,1410) @cindex Rings and orderings
../singular_texi/general.tex(,1411) 
../singular_texi/general.tex(,1412) All non-trivial algorithms in @sc{Singular} require the prior definition of
../singular_texi/general.tex(,1413) a ring. Such a ring can be
../singular_texi/general.tex(,1414) 
../singular_texi/general.tex(,1415) @enumerate
../singular_texi/general.tex(,1416) @item
../singular_texi/general.tex(,1417) a polynomial ring over a field,
../singular_texi/general.tex(,1418) @item
../singular_texi/general.tex(,1419) a localization of a polynomial ring,
../singular_texi/general.tex(,1420) @item
../singular_texi/general.tex(,1421) a quotient ring by an ideal of one of 1.@: or 2.,
../singular_texi/general.tex(,1422) @item
../singular_texi/general.tex(,1423) a tensor product of one of 1.@: or 2.
../singular_texi/general.tex(,1424) @end enumerate
../singular_texi/general.tex(,1425) 
../singular_texi/general.tex(,1426) Except for quotient rings, all of these rings are realized by choosing a
../singular_texi/general.tex(,1427) coefficient field, ring variables, and an appropriate global or local
../singular_texi/general.tex(,1428) monomial ordering on the ring variables.  @xref{Term orderings},
../singular_texi/general.tex(,1429) @ref{Mathematical background}.
../singular_texi/general.tex(,1430) 
../singular_texi/general.tex(,1431) The coefficient field of the rings may be
../singular_texi/general.tex(,1432) 
../singular_texi/general.tex(,1433) @cindex real
../singular_texi/general.tex(,1434) @cindex complex
../singular_texi/general.tex(,1435) @enumerate
../singular_texi/general.tex(,1436) @item
../singular_texi/general.tex(,1437) the field of rational numbers 
../singular_texi/general.tex(,1441) @tex
../singular_texi/general.tex(,1442) $Q$
../singular_texi/general.tex(,1443) @end tex
../singular_texi/general.tex(,1444) ,
../singular_texi/general.tex(,1445) @item
../singular_texi/general.tex(,1446) @tex
../singular_texi/general.tex(,1447) finite fields $Z/p$, $p$ a prime $\le 2147483629$,
../singular_texi/general.tex(,1448) @end tex
../singular_texi/general.tex(,1452) @item
../singular_texi/general.tex(,1453) @tex
../singular_texi/general.tex(,1454) finite fields $\hbox{GF}(p^n)$ with $p^n$ elements, $p$ a prime, $p^n \le 2^{15}$,
../singular_texi/general.tex(,1455) @end tex
../singular_texi/general.tex(,1459) @item
../singular_texi/general.tex(,1460) transcendental extension of 
../singular_texi/general.tex(,1464) @tex
../singular_texi/general.tex(,1465) $Q$
../singular_texi/general.tex(,1466) @end tex
../singular_texi/general.tex(,1467)  or 
../singular_texi/general.tex(,1471) @tex
../singular_texi/general.tex(,1472) $Z/p$
../singular_texi/general.tex(,1473) @end tex
../singular_texi/general.tex(,1474) ,
../singular_texi/general.tex(,1475) @item
../singular_texi/general.tex(,1476) simple algebraic extension of 
../singular_texi/general.tex(,1480) @tex
../singular_texi/general.tex(,1481) $Q$
../singular_texi/general.tex(,1482) @end tex
../singular_texi/general.tex(,1483)  or 
../singular_texi/general.tex(,1487) @tex
../singular_texi/general.tex(,1488) $Z/p$
../singular_texi/general.tex(,1489) @end tex
../singular_texi/general.tex(,1490) ,
../singular_texi/general.tex(,1491) @item
../singular_texi/general.tex(,1492) the field of real numbers represented by floating point
../singular_texi/general.tex(,1493) numbers of a user defined precision.
../singular_texi/general.tex(,1494) @item
../singular_texi/general.tex(,1495) the field of complex numbers represented by (pairs of) floating point
../singular_texi/general.tex(,1496) numbers of a user defined precision.
../singular_texi/general.tex(,1497) @end enumerate
../singular_texi/general.tex(,1498) 
../singular_texi/general.tex(,1499) Throughout this manual, the current active ring in @sc{Singular} is
../singular_texi/general.tex(,1500) called basering.  The reserved name @code{basering} in @sc{Singular} is
../singular_texi/general.tex(,1501) an alias for the current active ring.  The basering can be set by
../singular_texi/general.tex(,1502) declaring a new ring as described in the following subsections or with
../singular_texi/general.tex(,1503) the commands @code{setring} and @code{keepring}.  @xref{keepring},
../singular_texi/general.tex(,1504) @ref{setring}.
../singular_texi/general.tex(,1505) 
../singular_texi/general.tex(,1506) Objects of ring dependent types are local to a ring. To access them
../singular_texi/general.tex(,1507) after a change of the basering they have to be mapped using @code{map} or by
../singular_texi/general.tex(,1508) the functions @code{imap} or @code{fetch}.  @xref{Objects}, @ref{fetch},
../singular_texi/general.tex(,1509) @ref{imap}, @ref{map}.
../singular_texi/general.tex(,1510) 
../singular_texi/general.tex(,1511) All changes of the basering in a procedure are local to this procedure
../singular_texi/general.tex(,1512) unless a @code{keepring} command is used as the last statement of the
../singular_texi/general.tex(,1513) procedure.  @xref{Procedures}, @ref{keepring}.
../singular_texi/general.tex(,1514) 
../singular_texi/general.tex(,1515) @menu
../singular_texi/general.tex(,1516) * Examples of ring declarations::
../singular_texi/general.tex(,1517) * General syntax of a ring declaration::
../singular_texi/general.tex(,1518) * Term orderings::
../singular_texi/general.tex(,1519) @end menu
../singular_texi/general.tex(,1520) 
../singular_texi/general.tex(,1521) @c --------------------------------------
../singular_texi/general.tex(,1522) @node Examples of ring declarations, General syntax of a ring declaration, Rings and orderings, Rings and orderings
../singular_texi/general.tex(,1523) @subsection Examples of ring declarations
../singular_texi/general.tex(,1524) @cindex Examples of ring declarations
../singular_texi/general.tex(,1525) 
../singular_texi/general.tex(,1526) The exact syntax of a ring declaration is given in the next two
../singular_texi/general.tex(,1527) subsections; this subsection lists some examples first. Note that the
../singular_texi/general.tex(,1528) ordering has to be chosen such that the unit-elements of the
../singular_texi/general.tex(,1529) ring are precisely those elements with leading monomial 1.  For more
../singular_texi/general.tex(,1530) information, see @ref{Monomial orderings}.
../singular_texi/general.tex(,1531) 
../singular_texi/general.tex(,1532) Every floating point number in a ring consists of two parts, which may be
../singular_texi/general.tex(,1533) chosen from the user. The leading part represents the number and the rest
../singular_texi/general.tex(,1534) is for the numerical stability. Two numbers with a difference only in the
../singular_texi/general.tex(,1535) rest are equal.
../singular_texi/general.tex(,1536) 
../singular_texi/general.tex(,1537) @itemize @bullet
../singular_texi/general.tex(,1538) @item
../singular_texi/general.tex(,1539) the ring 
../singular_texi/general.tex(,1543) @tex
../singular_texi/general.tex(,1544) $Z/32003[x,y,z]$
../singular_texi/general.tex(,1545) @end tex
../singular_texi/general.tex(,1546)  with degree reverse lexicographical
../singular_texi/general.tex(,1547) ordering.  The exact ring declaration may be omitted in the first
../singular_texi/general.tex(,1548) example since this is the default ring:
../singular_texi/general.tex(,1549) 
../singular_texi/general.tex(,1550) @smallexample
../singular_texi/general.tex(,1551) ring r;
../singular_texi/general.tex(,1552) ring r = 32003,(x,y,z),dp;
../singular_texi/general.tex(,1553) @end smallexample
../singular_texi/general.tex(,1554) 
../singular_texi/general.tex(,1555) @item
../singular_texi/general.tex(,1556) the ring 
../singular_texi/general.tex(,1560) @tex
../singular_texi/general.tex(,1561) $Q[a,b,c,d]$
../singular_texi/general.tex(,1562) @end tex
../singular_texi/general.tex(,1563)  with lexicographical ordering:
../singular_texi/general.tex(,1564) 
../singular_texi/general.tex(,1565) @smallexample
../singular_texi/general.tex(,1566) ring r = 0,(a,b,c,d),lp;
../singular_texi/general.tex(,1567) @end smallexample
../singular_texi/general.tex(,1568) 
../singular_texi/general.tex(,1569) @item
../singular_texi/general.tex(,1570) the ring 
../singular_texi/general.tex(,1574) @tex
../singular_texi/general.tex(,1575) $Z/7[x,y,z]$
../singular_texi/general.tex(,1576) @end tex
../singular_texi/general.tex(,1577)  with local degree reverse lexicographical
../singular_texi/general.tex(,1578) ordering.  The non-prime 10 is converted to the next lower prime in the
../singular_texi/general.tex(,1579) second example:
../singular_texi/general.tex(,1580) 
../singular_texi/general.tex(,1581) @smallexample
../singular_texi/general.tex(,1582) ring r = 7,(x,y,z),ds;
../singular_texi/general.tex(,1583) ring r = 10,(x,y,z),ds;
../singular_texi/general.tex(,1584) @end smallexample
../singular_texi/general.tex(,1585) 
../singular_texi/general.tex(,1586) @item
../singular_texi/general.tex(,1587) the ring
../singular_texi/general.tex(,1588) @tex
../singular_texi/general.tex(,1589) $Z/7[x_1,\ldots,x_6]$
../singular_texi/general.tex(,1590) @end tex
../singular_texi/general.tex(,1594) with lexicographical ordering for
../singular_texi/general.tex(,1595) @tex
../singular_texi/general.tex(,1596) $x_1,x_2,x_3$
../singular_texi/general.tex(,1597) @end tex
../singular_texi/general.tex(,1601) and degree reverse lexicographical ordering for
../singular_texi/general.tex(,1602) @tex
../singular_texi/general.tex(,1603) $x_4,x_5,x_6$:
../singular_texi/general.tex(,1604) @end tex
../singular_texi/general.tex(,1608) 
../singular_texi/general.tex(,1609) @smallexample
../singular_texi/general.tex(,1610) ring r = 7,(x(1..6)),(lp(3),dp);
../singular_texi/general.tex(,1611) @end smallexample
../singular_texi/general.tex(,1612) 
../singular_texi/general.tex(,1613) @item
../singular_texi/general.tex(,1614) the localization of 
../singular_texi/general.tex(,1618) @tex
../singular_texi/general.tex(,1619) $(Q[a,b,c])[x,y,z]$
../singular_texi/general.tex(,1620) @end tex
../singular_texi/general.tex(,1621)  at the maximal ideal
../singular_texi/general.tex(,1622) 
../singular_texi/general.tex(,1626) @tex
../singular_texi/general.tex(,1627) $(x,y,z)$
../singular_texi/general.tex(,1628) @end tex
../singular_texi/general.tex(,1629) :
../singular_texi/general.tex(,1630) 
../singular_texi/general.tex(,1631) @smallexample
../singular_texi/general.tex(,1632) ring r = 0,(x,y,z,a,b,c),(ds(3), dp(3));
../singular_texi/general.tex(,1633) @end smallexample
../singular_texi/general.tex(,1634) 
../singular_texi/general.tex(,1635) @item
../singular_texi/general.tex(,1636) the ring 
../singular_texi/general.tex(,1640) @tex
../singular_texi/general.tex(,1641) $Q[x,y,z]$
../singular_texi/general.tex(,1642) @end tex
../singular_texi/general.tex(,1643)  with weighted reverse lexicographical ordering.
../singular_texi/general.tex(,1644) The variables 
../singular_texi/general.tex(,1648) @tex
../singular_texi/general.tex(,1649) $x$
../singular_texi/general.tex(,1650) @end tex
../singular_texi/general.tex(,1651) , 
../singular_texi/general.tex(,1655) @tex
../singular_texi/general.tex(,1656) $y$
../singular_texi/general.tex(,1657) @end tex
../singular_texi/general.tex(,1658) , and 
../singular_texi/general.tex(,1662) @tex
../singular_texi/general.tex(,1663) $z$
../singular_texi/general.tex(,1664) @end tex
../singular_texi/general.tex(,1665)  have the weights 2, 1,
../singular_texi/general.tex(,1666) and 3, respectively, and  vectors are first ordered by components (in
../singular_texi/general.tex(,1667) descending order) and then by monomials:
../singular_texi/general.tex(,1668) @smallexample
../singular_texi/general.tex(,1669) ring r = 0,(x,y,z),(c,wp(2,1,3));
../singular_texi/general.tex(,1670) @end smallexample
../singular_texi/general.tex(,1671) For ascending component order, the component ordering @code{C} has to be
../singular_texi/general.tex(,1672) used.
../singular_texi/general.tex(,1673) 
../singular_texi/general.tex(,1674) @item
../singular_texi/general.tex(,1675) the ring 
../singular_texi/general.tex(,1679) @tex
../singular_texi/general.tex(,1680) $K[x,y,z]$
../singular_texi/general.tex(,1681) @end tex
../singular_texi/general.tex(,1682) , where 
../singular_texi/general.tex(,1686) @tex
../singular_texi/general.tex(,1687) $K=Z/7(a,b,c)$
../singular_texi/general.tex(,1688) @end tex
../singular_texi/general.tex(,1689)  denotes the transcendental
../singular_texi/general.tex(,1690) extension of 
../singular_texi/general.tex(,1694) @tex
../singular_texi/general.tex(,1695) $Z/7$
../singular_texi/general.tex(,1696) @end tex
../singular_texi/general.tex(,1697)  by 
../singular_texi/general.tex(,1701) @tex
../singular_texi/general.tex(,1702) $a$
../singular_texi/general.tex(,1703) @end tex
../singular_texi/general.tex(,1704) , 
../singular_texi/general.tex(,1708) @tex
../singular_texi/general.tex(,1709) $b$
../singular_texi/general.tex(,1710) @end tex
../singular_texi/general.tex(,1711)  and 
../singular_texi/general.tex(,1715) @tex
../singular_texi/general.tex(,1716) $c$
../singular_texi/general.tex(,1717) @end tex
../singular_texi/general.tex(,1718)  with degree
../singular_texi/general.tex(,1719) lexicographical ordering:
../singular_texi/general.tex(,1720) 
../singular_texi/general.tex(,1721) @smallexample
../singular_texi/general.tex(,1722) ring r = (7,a,b,c),(x,y,z),Dp;
../singular_texi/general.tex(,1723) @end smallexample
../singular_texi/general.tex(,1724) 
../singular_texi/general.tex(,1725) @item
../singular_texi/general.tex(,1726) the ring 
../singular_texi/general.tex(,1730) @tex
../singular_texi/general.tex(,1731) $K[x,y,z]$
../singular_texi/general.tex(,1732) @end tex
../singular_texi/general.tex(,1733) , where 
../singular_texi/general.tex(,1737) @tex
../singular_texi/general.tex(,1738) $K=Z/7[a]$
../singular_texi/general.tex(,1739) @end tex
../singular_texi/general.tex(,1740)  denotes the algebraic extension of
../singular_texi/general.tex(,1741) degree 2 of 
../singular_texi/general.tex(,1745) @tex
../singular_texi/general.tex(,1746) $Z/7$
../singular_texi/general.tex(,1747) @end tex
../singular_texi/general.tex(,1748)  by 
../singular_texi/general.tex(,1752) @tex
../singular_texi/general.tex(,1753) $a.$
../singular_texi/general.tex(,1754) @end tex
../singular_texi/general.tex(,1755)  In other words, 
../singular_texi/general.tex(,1759) @tex
../singular_texi/general.tex(,1760) $K$
../singular_texi/general.tex(,1761) @end tex
../singular_texi/general.tex(,1762)  is the finite field with
../singular_texi/general.tex(,1763) 49 elements.  In the first case, 
../singular_texi/general.tex(,1767) @tex
../singular_texi/general.tex(,1768) $a$
../singular_texi/general.tex(,1769) @end tex
../singular_texi/general.tex(,1770)  denotes an algebraic
../singular_texi/general.tex(,1771) element over 
../singular_texi/general.tex(,1775) @tex
../singular_texi/general.tex(,1776) $Z/7$
../singular_texi/general.tex(,1777) @end tex
../singular_texi/general.tex(,1778)  with minimal polynomial
../singular_texi/general.tex(,1779) @tex
../singular_texi/general.tex(,1780) $\mu_a=a^2+a+3$,
../singular_texi/general.tex(,1781) @end tex
../singular_texi/general.tex(,1785) in the second case, 
../singular_texi/general.tex(,1789) @tex
../singular_texi/general.tex(,1790) $a$
../singular_texi/general.tex(,1791) @end tex
../singular_texi/general.tex(,1792) 
../singular_texi/general.tex(,1793) refers to some generator of the cyclic group of units of 
../singular_texi/general.tex(,1797) @tex
../singular_texi/general.tex(,1798) $K$
../singular_texi/general.tex(,1799) @end tex
../singular_texi/general.tex(,1800) :
../singular_texi/general.tex(,1801) 
../singular_texi/general.tex(,1802) @smallexample
../singular_texi/general.tex(,1803) ring r = (7,a),(x,y,z),dp; minpoly = a^2+a+3;
../singular_texi/general.tex(,1804) ring r = (7^2,a),(x,y,z),dp;
../singular_texi/general.tex(,1805) @end smallexample
../singular_texi/general.tex(,1806) 
../singular_texi/general.tex(,1807) @item
../singular_texi/general.tex(,1808) the ring 
../singular_texi/general.tex(,1812) @tex
../singular_texi/general.tex(,1813) $R[x,y,z]$
../singular_texi/general.tex(,1814) @end tex
../singular_texi/general.tex(,1815) , where 
../singular_texi/general.tex(,1819) @tex
../singular_texi/general.tex(,1820) $R$
../singular_texi/general.tex(,1821) @end tex
../singular_texi/general.tex(,1822)  denotes the field of real
../singular_texi/general.tex(,1823) numbers represented by simple precision floating point numbers. This is
../singular_texi/general.tex(,1824) a special case:
../singular_texi/general.tex(,1825) 
../singular_texi/general.tex(,1826) @smallexample
../singular_texi/general.tex(,1827) ring r = real,(x,y,z),dp;
../singular_texi/general.tex(,1828) @end smallexample
../singular_texi/general.tex(,1829) 
../singular_texi/general.tex(,1830) @item
../singular_texi/general.tex(,1831) the ring 
../singular_texi/general.tex(,1835) @tex
../singular_texi/general.tex(,1836) $R[x,y,z]$
../singular_texi/general.tex(,1837) @end tex
../singular_texi/general.tex(,1838) , where 
../singular_texi/general.tex(,1842) @tex
../singular_texi/general.tex(,1843) $R$
../singular_texi/general.tex(,1844) @end tex
../singular_texi/general.tex(,1845)  denotes the field of real
../singular_texi/general.tex(,1846) numbers represented by floating point numbers of 50 valid decimal digits
../singular_texi/general.tex(,1847) and the same number of digits for the rest:
../singular_texi/general.tex(,1848) 
../singular_texi/general.tex(,1849) @smallexample
../singular_texi/general.tex(,1850) ring r = (real,50),(x,y,z),dp;
../singular_texi/general.tex(,1851) @end smallexample
../singular_texi/general.tex(,1852) 
../singular_texi/general.tex(,1853) @item
../singular_texi/general.tex(,1854) the ring 
../singular_texi/general.tex(,1858) @tex
../singular_texi/general.tex(,1859) $R[x,y,z]$
../singular_texi/general.tex(,1860) @end tex
../singular_texi/general.tex(,1861) , where 
../singular_texi/general.tex(,1865) @tex
../singular_texi/general.tex(,1866) $R$
../singular_texi/general.tex(,1867) @end tex
../singular_texi/general.tex(,1868)  denotes the field of real
../singular_texi/general.tex(,1869) numbers represented by floating point numbers of 10 valid decimal digits
../singular_texi/general.tex(,1870) and with 50 digits for the rest:
../singular_texi/general.tex(,1871) 
../singular_texi/general.tex(,1872) @smallexample
../singular_texi/general.tex(,1873) ring r = (real,10,50),(x,y,z),dp;
../singular_texi/general.tex(,1874) @end smallexample
../singular_texi/general.tex(,1875) 
../singular_texi/general.tex(,1876) @item
../singular_texi/general.tex(,1877) the ring 
../singular_texi/general.tex(,1881) @tex
../singular_texi/general.tex(,1882) $R(j)[x,y,z]$
../singular_texi/general.tex(,1883) @end tex
../singular_texi/general.tex(,1884) , where 
../singular_texi/general.tex(,1888) @tex
../singular_texi/general.tex(,1889) $R$
../singular_texi/general.tex(,1890) @end tex
../singular_texi/general.tex(,1891)  denotes the field of real
../singular_texi/general.tex(,1892) numbers represented by floating point numbers of 30 valid decimal digits
../singular_texi/general.tex(,1893) and the same number for the rest. 
../singular_texi/general.tex(,1897) @tex
../singular_texi/general.tex(,1898) $j$
../singular_texi/general.tex(,1899) @end tex
../singular_texi/general.tex(,1900)  denotes the imaginary unit.
../singular_texi/general.tex(,1901) 
../singular_texi/general.tex(,1902) @smallexample
../singular_texi/general.tex(,1903) ring r = (complex,30,j),(x,y,z),dp;
../singular_texi/general.tex(,1904) @end smallexample
../singular_texi/general.tex(,1905) 
../singular_texi/general.tex(,1906) @item
../singular_texi/general.tex(,1907) the ring 
../singular_texi/general.tex(,1911) @tex
../singular_texi/general.tex(,1912) $R(i)[x,y,z]$
../singular_texi/general.tex(,1913) @end tex
../singular_texi/general.tex(,1914) , where 
../singular_texi/general.tex(,1918) @tex
../singular_texi/general.tex(,1919) $R$
../singular_texi/general.tex(,1920) @end tex
../singular_texi/general.tex(,1921)  denotes the field of real
../singular_texi/general.tex(,1922) numbers represented by floating point numbers of 6 valid decimal digits
../singular_texi/general.tex(,1923) and the same number for the rest. 
../singular_texi/general.tex(,1927) @tex
../singular_texi/general.tex(,1928) $i$
../singular_texi/general.tex(,1929) @end tex
../singular_texi/general.tex(,1930)  is the default for the imaginary unit.
../singular_texi/general.tex(,1931) 
../singular_texi/general.tex(,1932) @smallexample
../singular_texi/general.tex(,1933) ring r = complex,(x,y,z),dp;
../singular_texi/general.tex(,1934) @end smallexample
../singular_texi/general.tex(,1935) 
../singular_texi/general.tex(,1936) @item
../singular_texi/general.tex(,1937) the quotient ring 
../singular_texi/general.tex(,1941) @tex
../singular_texi/general.tex(,1942) $Z/7[x,y,z]$
../singular_texi/general.tex(,1943) @end tex
../singular_texi/general.tex(,1944)  modulo the square of the maximal
../singular_texi/general.tex(,1945) ideal 
../singular_texi/general.tex(,1949) @tex
../singular_texi/general.tex(,1950) $(x,y,z)$
../singular_texi/general.tex(,1951) @end tex
../singular_texi/general.tex(,1952) :
../singular_texi/general.tex(,1953) 
../singular_texi/general.tex(,1954) @smallexample
../singular_texi/general.tex(,1955) ring R = 7,(x,y,z), dp;
../singular_texi/general.tex(,1956) qring r = std(maxideal(2));
../singular_texi/general.tex(,1957) @end smallexample
../singular_texi/general.tex(,1958) @end itemize
../singular_texi/general.tex(,1959) 
../singular_texi/general.tex(,1960) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,1961) @node General syntax of a ring declaration, Term orderings, Examples of ring declarations, Rings and orderings
../singular_texi/general.tex(,1962) @subsection General syntax of a ring declaration
../singular_texi/general.tex(,1963) @cindex General syntax of a ring declaration
../singular_texi/general.tex(,1964) 
../singular_texi/general.tex(,1965) @subsubheading Rings
../singular_texi/general.tex(,1966) @c ------------------------------------------------------------
../singular_texi/general.tex(,1967) @c   This piece of text (partially) exists also in the
../singular_texi/general.tex(,1968) @c   file types.doc, chapter "ring declarations".
../singular_texi/general.tex(,1969) @c   If you change something here, change it there, too!
../singular_texi/general.tex(,1970) @c ------------------------------------------------------------
../singular_texi/general.tex(,1971) @table @strong
../singular_texi/general.tex(,1972) @item Syntax:
../singular_texi/general.tex(,1973) @code{ring} name @code{=} @code{(}coefficient_field@code{),}
../singular_texi/general.tex(,1974)   @code{(} names_of_ring_variables @code{),}
../singular_texi/general.tex(,1975)   @code{(} ordering @code{);}
../singular_texi/general.tex(,1976) @item Default:
../singular_texi/general.tex(,1977) @code{32003,(x,y,z),(dp,C);}
../singular_texi/general.tex(,1978) @item Purpose:
../singular_texi/general.tex(,1979) declares a ring and sets it as the current basering.
../singular_texi/general.tex(,1980) @end table
../singular_texi/general.tex(,1981) 
../singular_texi/general.tex(,1982) The coefficient_field is given by one of the following:
../singular_texi/general.tex(,1983) @enumerate
../singular_texi/general.tex(,1984) @item
../singular_texi/general.tex(,1985) a non-negative int_expression less or equal 32003.
../singular_texi/general.tex(,1986) @* The int_expression should either be 0, specifying the field of
../singular_texi/general.tex(,1987) rational numbers Q, or a prime number p, specifying the finite field
../singular_texi/general.tex(,1988) with p elements.  If it is not a prime number, int_expression is
../singular_texi/general.tex(,1989) converted to the next lower prime number.
../singular_texi/general.tex(,1990) 
../singular_texi/general.tex(,1991) @item
../singular_texi/general.tex(,1992) an expression_list of an int_expression and one or more names.
../singular_texi/general.tex(,1993) @* The int_expression specifies the characteristic of the coefficient
../singular_texi/general.tex(,1994) field as described above. The names are used as parameters in
../singular_texi/general.tex(,1995) transcendental or algebraic extensions of the coefficient
../singular_texi/general.tex(,1996) field. Algebraic extensions are implemented for one parameter only. In
../singular_texi/general.tex(,1997) this case, a minimal polynomial has to be defined by assignment to
../singular_texi/general.tex(,1998) @code{minpoly}. @xref{minpoly}.
../singular_texi/general.tex(,1999) 
../singular_texi/general.tex(,2000) @item
../singular_texi/general.tex(,2001) an expression_list of an int_expression and a name.
../singular_texi/general.tex(,2002) @* The int_expression has to be a prime number p to the power of a
../singular_texi/general.tex(,2003) positive integer n. This defines the Galois field
../singular_texi/general.tex(,2004) @tex
../singular_texi/general.tex(,2005) $\hbox{GF}(p^n)$ with $p^n$ elements, where $p^n$ has to be smaller or equal $2^{15}$.
../singular_texi/general.tex(,2006) @end tex
../singular_texi/general.tex(,2010) The given name refers to a primitive element of
../singular_texi/general.tex(,2011) @tex
../singular_texi/general.tex(,2012) $\hbox{GF}(p^n)$
../singular_texi/general.tex(,2013) @end tex
../singular_texi/general.tex(,2017) generating the multiplicative group.  Due to a different internal
../singular_texi/general.tex(,2018) representation, the arithmetic operations in these coefficient fields
../singular_texi/general.tex(,2019) are faster than arithmetic operations in algebraic extensions as
../singular_texi/general.tex(,2020) described above.
../singular_texi/general.tex(,2021) 
../singular_texi/general.tex(,2022) @item
../singular_texi/general.tex(,2023) an expression_list of the name @code{real} and two optional int_expression
../singular_texi/general.tex(,2024) giving the precision in decimal digits and
../singular_texi/general.tex(,2025) the size for the stabilizing rest. The default for the rest is the same size
../singular_texi/general.tex(,2026) as for the representation.
../singular_texi/general.tex(,2027) An exception is the name @code{real} without any integers.
../singular_texi/general.tex(,2028) These numbers are implemented as machine floating point numbers
../singular_texi/general.tex(,2029) of single precision.
../singular_texi/general.tex(,2030) Note that computations over all these fields are not exact.
../singular_texi/general.tex(,2031) 
../singular_texi/general.tex(,2032) @item
../singular_texi/general.tex(,2033) an expression_list of the name @code{complex},
../singular_texi/general.tex(,2034) two optional int_expression and a name.
../singular_texi/general.tex(,2035) This specifies the field of complex numbers represented with floating point
../singular_texi/general.tex(,2036) numbers with a precision similar to @code{real}. An expression_list
../singular_texi/general.tex(,2037) without int_expression defines a precision and rest with length 6.
../singular_texi/general.tex(,2038) The name of the imaginary unit is given by the last parameter.
../singular_texi/general.tex(,2039) Note that computations over these fields are not exact.
../singular_texi/general.tex(,2040) @end enumerate
../singular_texi/general.tex(,2041) 
../singular_texi/general.tex(,2042) 'names_of_ring_variables' is a list of names or indexed names.
../singular_texi/general.tex(,2043) 
../singular_texi/general.tex(,2044) 'ordering' is a list of block orderings where each block ordering is either
../singular_texi/general.tex(,2045) 
../singular_texi/general.tex(,2046) @enumerate
../singular_texi/general.tex(,2047) @item
../singular_texi/general.tex(,2048) @code{lp}, @code{dp}, @code{Dp}, @code{ls}, @code{ds}, or @code{Ds}
../singular_texi/general.tex(,2049) optionally followed by a size parameter in parentheses.
../singular_texi/general.tex(,2050) 
../singular_texi/general.tex(,2051) @item
../singular_texi/general.tex(,2052) @code{wp}, @code{Wp}, @code{ws}, @code{Ws}, or @code{a} followed by a
../singular_texi/general.tex(,2053) weight vector given as an intvec_expression in parentheses.
../singular_texi/general.tex(,2054) 
../singular_texi/general.tex(,2055) @item
../singular_texi/general.tex(,2056) @code{M} followed by an intmat_expression in parentheses.
../singular_texi/general.tex(,2057) 
../singular_texi/general.tex(,2058) @item
../singular_texi/general.tex(,2059) @code{c} or @code{C}.
../singular_texi/general.tex(,2060) @end enumerate
../singular_texi/general.tex(,2061) 
../singular_texi/general.tex(,2062) For the definition of the orderings, see @ref{Monomial orderings}.
../singular_texi/general.tex(,2063) 
../singular_texi/general.tex(,2064) If one of coefficient_field, names_of_ring_variables, and ordering
../singular_texi/general.tex(,2065) consists of only one entry, the parentheses around this entry may be
../singular_texi/general.tex(,2066) omitted.
../singular_texi/general.tex(,2067) @c ------------------------------------------------------------
../singular_texi/general.tex(,2068) @c   End of duplicate piece of text.
../singular_texi/general.tex(,2069) @c ------------------------------------------------------------
../singular_texi/general.tex(,2070) 
../singular_texi/general.tex(,2071) @subsubheading Quotient rings
../singular_texi/general.tex(,2072) @c ------------------------------------------------------------
../singular_texi/general.tex(,2073) @c   This piece of text (partially) exists also in the
../singular_texi/general.tex(,2074) @c   file types.doc, chapter "qring declarations", and in
../singular_texi/general.tex(,2075) @c   singular.doc, chapter "Miscellaneous oddities".
../singular_texi/general.tex(,2076) @c   If you change something here, change it there, too!
../singular_texi/general.tex(,2077) @c ------------------------------------------------------------
../singular_texi/general.tex(,2078) @table @strong
../singular_texi/general.tex(,2079) @item Syntax:
../singular_texi/general.tex(,2080) @code{qring} name @code{=} ideal_expression @code{;}
../singular_texi/general.tex(,2081) @item Default:
../singular_texi/general.tex(,2082) none
../singular_texi/general.tex(,2083) @item Purpose:
../singular_texi/general.tex(,2084) declares a quotient ring as the basering modulo ideal_expression.  Sets
../singular_texi/general.tex(,2085) it as current basering.
../singular_texi/general.tex(,2086) @end table
../singular_texi/general.tex(,2087) 
../singular_texi/general.tex(,2088) ideal_expression has to be represented by a standard basis.
../singular_texi/general.tex(,2089) 
../singular_texi/general.tex(,2090) The most convenient way to map objects from a ring to its quotient ring
../singular_texi/general.tex(,2091) and vice versa is to use the @code{fetch} function (@pxref{fetch}).
../singular_texi/general.tex(,2092) 
../singular_texi/general.tex(,2093) @sc{Singular} computes in a quotient ring as long as possible with the
../singular_texi/general.tex(,2094) given representative of a polynomial, say, @code{f}.  I.e., it usually
../singular_texi/general.tex(,2095) does not reduce @code{f} w.r.t. the quotient ideal.  This is only done
../singular_texi/general.tex(,2096) when necessary
../singular_texi/general.tex(,2097) during standard bases computations or by an explicit reduction using
../singular_texi/general.tex(,2098) the command @code{reduce(f, std(0))} (@pxref{reduce}).
../singular_texi/general.tex(,2099) 
../singular_texi/general.tex(,2100) @strong{Example:}
../singular_texi/general.tex(,2101) @smallexample
../singular_texi/general.tex(,2102) @c computed example Quotient_rings general.doc:1784 
../singular_texi/general.tex(,2103)   ring r=32003,(x,y),dp;
../singular_texi/general.tex(,2104)   poly f=x3+yx2+3y+4;
../singular_texi/general.tex(,2105)   qring q=std(maxideal(2));
../singular_texi/general.tex(,2106)   basering;
../singular_texi/general.tex(,2107) @expansion{} //   characteristic : 32003
../singular_texi/general.tex(,2108) @expansion{} //   number of vars : 2
../singular_texi/general.tex(,2109) @expansion{} //        block   1 : ordering dp
../singular_texi/general.tex(,2110) @expansion{} //                  : names    x y 
../singular_texi/general.tex(,2111) @expansion{} //        block   2 : ordering C
../singular_texi/general.tex(,2112) @expansion{} // quotient ring from ideal
../singular_texi/general.tex(,2113) @expansion{} _[1]=y2
../singular_texi/general.tex(,2114) @expansion{} _[2]=xy
../singular_texi/general.tex(,2115) @expansion{} _[3]=x2
../singular_texi/general.tex(,2116)   poly g=fetch(r, f);
../singular_texi/general.tex(,2117)   g;
../singular_texi/general.tex(,2118) @expansion{} x3+x2y+3y+4
../singular_texi/general.tex(,2119)   reduce(g,std(0));
../singular_texi/general.tex(,2120) @expansion{} 3y+4
../singular_texi/general.tex(,2121) @c end example Quotient_rings general.doc:1784
../singular_texi/general.tex(,2122) @end smallexample
../singular_texi/general.tex(,2123) 
../singular_texi/general.tex(,2124) @c ------------------------------------------------------------
../singular_texi/general.tex(,2125) @c   End of duplicate piece of text.
../singular_texi/general.tex(,2126) @c ------------------------------------------------------------
../singular_texi/general.tex(,2127) 
../singular_texi/general.tex(,2128) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,2129) @node Term orderings,  , General syntax of a ring declaration, Rings and orderings
../singular_texi/general.tex(,2130) @subsection Term orderings
../singular_texi/general.tex(,2131) @cindex Monomial orderings, Term orderings
../singular_texi/general.tex(,2132) 
../singular_texi/general.tex(,2133) Any polynomial (resp.@: vector) in @sc{Singular} is ordered w.r.t. a
../singular_texi/general.tex(,2134) term ordering (or, monomial ordering), which has to be specified
../singular_texi/general.tex(,2135) together with the declaration of a ring. @sc{Singular} stores and
../singular_texi/general.tex(,2136) displays a polynomial (resp.@: vector) w.r.t. this ordering, i.e., the
../singular_texi/general.tex(,2137) greatest monomial (also called the leading monomial) is the first one
../singular_texi/general.tex(,2138) appearing in the output polynomial, and the smallest monomial is the last one.
../singular_texi/general.tex(,2139) 
../singular_texi/general.tex(,2140) @strong{Remark:} The novice user should generally use the ordering
../singular_texi/general.tex(,2141) @code{dp} for computations in the polynomial ring
../singular_texi/general.tex(,2142) @tex
../singular_texi/general.tex(,2143) $K[x_1,\ldots,x_n]$,
../singular_texi/general.tex(,2144) @end tex
../singular_texi/general.tex(,2148) resp.@:  @code{ds} for computations in the localization
../singular_texi/general.tex(,2149) @tex
../singular_texi/general.tex(,2150) $\hbox{Loc}_{(x)}K[x_1,\ldots,x_n])$.
../singular_texi/general.tex(,2151) @end tex
../singular_texi/general.tex(,2155) For more details, see @ref{Polynomial data}.
../singular_texi/general.tex(,2156) 
../singular_texi/general.tex(,2157) In a ring declaration, @sc{Singular} offers the following orderings:
../singular_texi/general.tex(,2158) @enumerate
../singular_texi/general.tex(,2159) @item Global orderings
../singular_texi/general.tex(,2160) @table @asis
../singular_texi/general.tex(,2161) @item @code{lp}
../singular_texi/general.tex(,2162) lexicographical ordering
../singular_texi/general.tex(,2163) 
../singular_texi/general.tex(,2164) @item @code{dp}
../singular_texi/general.tex(,2165) degree reverse lexicographical ordering
../singular_texi/general.tex(,2166) 
../singular_texi/general.tex(,2167) @item @code{Dp}
../singular_texi/general.tex(,2168) degree lexicographical ordering
../singular_texi/general.tex(,2169) 
../singular_texi/general.tex(,2170) @item @code{wp(} intvec_expression @code{)}
../singular_texi/general.tex(,2171) weighted reverse lexicographical ordering; the weight vector may
../singular_texi/general.tex(,2172) consist of positive integers only.
../singular_texi/general.tex(,2173) 
../singular_texi/general.tex(,2174) @item @code{Wp(} intvec_expression @code{)}
../singular_texi/general.tex(,2175) weighted lexicographical ordering; the weight vector may consist of
../singular_texi/general.tex(,2176) positive integers only.
../singular_texi/general.tex(,2177) @end table
../singular_texi/general.tex(,2178) 
../singular_texi/general.tex(,2179) Global orderings are well-orderings, i.e., 
../singular_texi/general.tex(,2183) @tex
../singular_texi/general.tex(,2184) $1 < x$
../singular_texi/general.tex(,2185) @end tex
../singular_texi/general.tex(,2186)  for each ring
../singular_texi/general.tex(,2187) variable 
../singular_texi/general.tex(,2191) @tex
../singular_texi/general.tex(,2192) $x$
../singular_texi/general.tex(,2193) @end tex
../singular_texi/general.tex(,2194) . They are denoted by a @code{p} as the second
../singular_texi/general.tex(,2195) character in their name.
../singular_texi/general.tex(,2196) 
../singular_texi/general.tex(,2197) @item Local orderings
../singular_texi/general.tex(,2198) @table @asis
../singular_texi/general.tex(,2199) @item @code{ls}
../singular_texi/general.tex(,2200) negative lexicographical ordering
../singular_texi/general.tex(,2201) 
../singular_texi/general.tex(,2202) @item @code{ds}
../singular_texi/general.tex(,2203) negative degree reverse lexicographical ordering
../singular_texi/general.tex(,2204) 
../singular_texi/general.tex(,2205) @item @code{Ds}
../singular_texi/general.tex(,2206) negative degree lexicographical ordering
../singular_texi/general.tex(,2207) 
../singular_texi/general.tex(,2208) @item @code{ws(} intvec_expression @code{)}
../singular_texi/general.tex(,2209) (general) weighted reverse lexicographical ordering; the first element
../singular_texi/general.tex(,2210) of the weight vector has to be non-zero.
../singular_texi/general.tex(,2211) 
../singular_texi/general.tex(,2212) @item @code{Ws(} intvec_expression @code{)}
../singular_texi/general.tex(,2213) (general) weighted lexicographical ordering; the first element
../singular_texi/general.tex(,2214) of the weight vector has to be non-zero.
../singular_texi/general.tex(,2215) @end table
../singular_texi/general.tex(,2216) 
../singular_texi/general.tex(,2217) Local orderings are not well-orderings. They are denoted by an @code{s}
../singular_texi/general.tex(,2218) as the second character in their name.
../singular_texi/general.tex(,2219) 
../singular_texi/general.tex(,2220) @item Matrix orderings
../singular_texi/general.tex(,2221) @table @asis
../singular_texi/general.tex(,2222) @item @code{M(} intmat_expression @code{)}
../singular_texi/general.tex(,2223) intmat_expression has to be an invertible square matrix
../singular_texi/general.tex(,2224) @end table
../singular_texi/general.tex(,2225) 
../singular_texi/general.tex(,2226) Using matrix orderings, @sc{Singular} can compute standard bases
../singular_texi/general.tex(,2227) w.r.t.@: any monomial ordering that is compatible with the natural
../singular_texi/general.tex(,2228) semi-group structure on the monomials. In practice, the predefined global
../singular_texi/general.tex(,2229) and local orderings together with the block orderings should be
../singular_texi/general.tex(,2230) sufficient in most cases. These orderings are faster than their
../singular_texi/general.tex(,2231) corresponding matrix orderings since evaluation of a matrix ordering is
../singular_texi/general.tex(,2232) time consuming.
../singular_texi/general.tex(,2233) 
../singular_texi/general.tex(,2234) @item Extra weight vector
../singular_texi/general.tex(,2235) @table @asis
../singular_texi/general.tex(,2236) @item @code{a(} intvec_expression @code{)}
../singular_texi/general.tex(,2237) an extra weight vector @code{a(} intvec_expression @code{)} may precede
../singular_texi/general.tex(,2238) any monomial ordering
../singular_texi/general.tex(,2239) @end table
../singular_texi/general.tex(,2240) 
../singular_texi/general.tex(,2241) @item Product ordering
../singular_texi/general.tex(,2242) @table @asis
../singular_texi/general.tex(,2243) @item @code{(} ordering [ @code{(} int_expression @code{)} ]@code{,} @dots{} @code{)}
../singular_texi/general.tex(,2244) any of the above orderings and the extra weight vector may be combined
../singular_texi/general.tex(,2245) to yield product or block orderings
../singular_texi/general.tex(,2246) @end table
../singular_texi/general.tex(,2247) 
../singular_texi/general.tex(,2248) The orderings @code{lp}, @code{dp}, @code{Dp}, @code{ls}, @code{ds}, and
../singular_texi/general.tex(,2249) @code{Ds} may be followed by an int_expression in parentheses giving the
../singular_texi/general.tex(,2250) size of the block. For the last block the size is calculated
../singular_texi/general.tex(,2251) automatically. For the weighted orderings the size of the block is given
../singular_texi/general.tex(,2252) by the size of the weight vector. The same holds analogously for matrix
../singular_texi/general.tex(,2253) orderings.
../singular_texi/general.tex(,2254) 
../singular_texi/general.tex(,2255) @item Module orderings
../singular_texi/general.tex(,2256) @table @asis
../singular_texi/general.tex(,2257) @itemx @code{(} ordering@code{,} @dots{}@code{, C )}
../singular_texi/general.tex(,2258) @item @code{(} ordering@code{,} @dots{}@code{, c )}
../singular_texi/general.tex(,2259) sort polynomial vectors by the monomial ordering first, then by
../singular_texi/general.tex(,2260) components
../singular_texi/general.tex(,2261) 
../singular_texi/general.tex(,2262) @itemx @code{( C,} ordering@code{,} @dots{} @code{)}
../singular_texi/general.tex(,2263) @item @code{( c,} ordering@code{,} @dots{} @code{)}
../singular_texi/general.tex(,2264) sort polynomial vectors by components first, then by the monomial
../singular_texi/general.tex(,2265) ordering
../singular_texi/general.tex(,2266) @end table
../singular_texi/general.tex(,2267) 
../singular_texi/general.tex(,2268) Here a capital @code{C} sorts generators in ascending order, i.e.,
../singular_texi/general.tex(,2269) @code{gen(1)} < @code{gen(2)} < @enddots{} A small @code{c} sorts in
../singular_texi/general.tex(,2270) descending order, i.e., @code{gen(1)} > @code{gen(2)} > @enddots{} It is
../singular_texi/general.tex(,2271) not necessary to specify the module ordering explicitly since @code{(}
../singular_texi/general.tex(,2272) ordering@code{,} @dots{}@code{, C )} is the default.
../singular_texi/general.tex(,2273) 
../singular_texi/general.tex(,2274) In fact, @code{c} or @code{C} may be specified anywhere in a product
../singular_texi/general.tex(,2275) ordering specification, not only at its beginning or end.  All monomial
../singular_texi/general.tex(,2276) block orderings preceding the component ordering have higher precedence,
../singular_texi/general.tex(,2277) all monomial block orderings following after it have lower precedence.
../singular_texi/general.tex(,2278) @end enumerate
../singular_texi/general.tex(,2279) 
../singular_texi/general.tex(,2280) For a mathematical description of these orderings, see
../singular_texi/general.tex(,2281) @ref{Polynomial data}.
../singular_texi/general.tex(,2282) 
../singular_texi/general.tex(,2283) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,2284) @node Implemented algorithms, The SINGULAR language, Rings and orderings, General concepts
../singular_texi/general.tex(,2285) @section Implemented algorithms
../singular_texi/general.tex(,2286) @cindex Implemented algorithms
../singular_texi/general.tex(,2287) 
../singular_texi/general.tex(,2288) The basic algorithm in @sc{Singular} is a general standard basis algorithm for
../singular_texi/general.tex(,2289) any monomial ordering which is compatible with the natural semi-group
../singular_texi/general.tex(,2290) structure of the exponents. This includes well-orderings
../singular_texi/general.tex(,2291) (Buchberger algorithm to compute a Groebner basis)
../singular_texi/general.tex(,2292) and tangent cone orderings (Mora algorithm) as special cases.
../singular_texi/general.tex(,2293) 
../singular_texi/general.tex(,2294) Nonetheless, there are a lot of other important algorithms:
../singular_texi/general.tex(,2295) @itemize @bullet
../singular_texi/general.tex(,2296) 
../singular_texi/general.tex(,2297) @item
../singular_texi/general.tex(,2298) Algorithms to compute the standard operations on ideals and modules:
../singular_texi/general.tex(,2299) intersection, ideal quotient, elimination, etc.
../singular_texi/general.tex(,2300) 
../singular_texi/general.tex(,2301) @item
../singular_texi/general.tex(,2302) Different Syzygy algorithms and algorithms to compute free resolutions
../singular_texi/general.tex(,2303) of modules.
../singular_texi/general.tex(,2304) 
../singular_texi/general.tex(,2305) @item
../singular_texi/general.tex(,2306) Combinatorial algorithms to compute dimensions, Hilbert series,
../singular_texi/general.tex(,2307) multiplicities, etc.
../singular_texi/general.tex(,2308) 
../singular_texi/general.tex(,2309) @item
../singular_texi/general.tex(,2310) Algorithms for univariate and multivariate polynomial factorization,
../singular_texi/general.tex(,2311) resultant and gcd computations.
../singular_texi/general.tex(,2312) @end itemize
../singular_texi/general.tex(,2313) 
../singular_texi/general.tex(,2314) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2315) @subheading Commands to compute standard bases
../singular_texi/general.tex(,2316) @table @code
../singular_texi/general.tex(,2317) @item facstd
../singular_texi/general.tex(,2318) @ref{facstd}
../singular_texi/general.tex(,2319) @*computes a list of Groebner bases via the Factorizing Groebner Basis
../singular_texi/general.tex(,2320) Algorithm, i.e., their intersection has the same radical as the original ideal. It need not
../singular_texi/general.tex(,2321) be a Groebner basis of the given ideal.
../singular_texi/general.tex(,2322) 
../singular_texi/general.tex(,2323) The intersection of the zero-sets is the zero-set of the given ideal.
../singular_texi/general.tex(,2324) @item fglm
../singular_texi/general.tex(,2325) @ref{fglm}
../singular_texi/general.tex(,2326) @*computes a Groebner basis provided that a reduced Groebner basis
../singular_texi/general.tex(,2327) w.r.t.@: another ordering is given.
../singular_texi/general.tex(,2328) 
../singular_texi/general.tex(,2329) Implements the so-called FGLM (Faugere, Gianni, Lazard, Mora) algorithm.
../singular_texi/general.tex(,2330) The given ideal must be zero-dimensional.
../singular_texi/general.tex(,2331) @item groebner
../singular_texi/general.tex(,2332) @ref{groebner}@*
../singular_texi/general.tex(,2333) computes a standard resp.@: Groebner bases using a heuristically chosen
../singular_texi/general.tex(,2334) method.
../singular_texi/general.tex(,2335) 
../singular_texi/general.tex(,2336) This is the preferred method to compute a standard resp.@: Groebner
../singular_texi/general.tex(,2337) bases.
../singular_texi/general.tex(,2338) @item mstd
../singular_texi/general.tex(,2339) @ref{mstd}
../singular_texi/general.tex(,2340) @*computes a standard basis and a minimal set of generators.
../singular_texi/general.tex(,2341) @item std
../singular_texi/general.tex(,2342) @ref{std}
../singular_texi/general.tex(,2343) @*computes a standard resp.@: Groebner basis.
../singular_texi/general.tex(,2344) @item stdfglm
../singular_texi/general.tex(,2345) @ref{stdfglm}
../singular_texi/general.tex(,2346) @*computes a Groebner basis in a ring with a ``difficult'' ordering
../singular_texi/general.tex(,2347) (e.g., lexicographical) via @code{std} w.r.t.@: a ``simple'' ordering and
../singular_texi/general.tex(,2348) @code{fglm}.
../singular_texi/general.tex(,2349) 
../singular_texi/general.tex(,2350) The given ideal must be zero-dimensional.
../singular_texi/general.tex(,2351) @item stdhilb
../singular_texi/general.tex(,2352) @ref{stdhilb}@*
../singular_texi/general.tex(,2353) computes a Groebner basis in a ring with a ``difficult'' ordering
../singular_texi/general.tex(,2354) (e.g., lexicographical) via @code{std} w.r.t.@: a ``simple'' ordering
../singular_texi/general.tex(,2355) and a @code{std} computation guided by the Hilbert series.
../singular_texi/general.tex(,2356) @end table
../singular_texi/general.tex(,2357) 
../singular_texi/general.tex(,2358) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2359) @subheading Further processing of standard bases
../singular_texi/general.tex(,2360) The next commands require the input to be a standard basis.
../singular_texi/general.tex(,2361) 
../singular_texi/general.tex(,2362) @table @code
../singular_texi/general.tex(,2363) @item degree
../singular_texi/general.tex(,2364) @ref{degree}
../singular_texi/general.tex(,2365) @*computes the (Krull) dimension, codimension and the multiplicity.
../singular_texi/general.tex(,2366) 
../singular_texi/general.tex(,2367) The result is only displayed on the screen.
../singular_texi/general.tex(,2368) @item dim
../singular_texi/general.tex(,2369) @ref{dim}@*
../singular_texi/general.tex(,2370) computes the dimension of the ideal resp.@: module.
../singular_texi/general.tex(,2371) @item highcorner
../singular_texi/general.tex(,2372) @ref{highcorner}@*
../singular_texi/general.tex(,2373) computes the smallest monomial not contained in the ideal resp.@: module.
../singular_texi/general.tex(,2374) The ideal resp.@: module has to be finite dimensional as a vector space
../singular_texi/general.tex(,2375) over the ground field.
../singular_texi/general.tex(,2376) @item hilb
../singular_texi/general.tex(,2377) @ref{hilb}@*
../singular_texi/general.tex(,2378) computes the first, and resp.@: or, second Hilbert series of an ideal
../singular_texi/general.tex(,2379) resp.@: module.
../singular_texi/general.tex(,2380) @item kbase
../singular_texi/general.tex(,2381) @ref{kbase}@* computes a vector space basis (consisting of monomials) of
../singular_texi/general.tex(,2382) the quotient of a ring by an ideal resp.@: of a free module by a
../singular_texi/general.tex(,2383) submodule.
../singular_texi/general.tex(,2384) 
../singular_texi/general.tex(,2385) The ideal resp.@: module has to be finite dimensional as a vector space
../singular_texi/general.tex(,2386) over the ground field and has to be represented by a standard basis w.r.t.@:
../singular_texi/general.tex(,2387) the ring ordering.
../singular_texi/general.tex(,2388) @item mult
../singular_texi/general.tex(,2389) @ref{mult}@*
../singular_texi/general.tex(,2390) computes the degree of the monomial ideal resp.@: module generated by
../singular_texi/general.tex(,2391) the leading monomials of the input.
../singular_texi/general.tex(,2392) @item reduce
../singular_texi/general.tex(,2393) @ref{reduce}@*
../singular_texi/general.tex(,2394) reduces a polynomial, vector, ideal or module to its normal form with
../singular_texi/general.tex(,2395) respect to an ideal or module represented by a standard basis.
../singular_texi/general.tex(,2396) @item vdim
../singular_texi/general.tex(,2397) @ref{vdim}@*
../singular_texi/general.tex(,2398) computes the vector space dimension of a ring (resp.@: free module)
../singular_texi/general.tex(,2399) modulo an ideal (resp.@: module).
../singular_texi/general.tex(,2400) @end table
../singular_texi/general.tex(,2401) 
../singular_texi/general.tex(,2402) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2403) @subheading Commands to compute resolutions
../singular_texi/general.tex(,2404) @table @code
../singular_texi/general.tex(,2405) @item res
../singular_texi/general.tex(,2406) @ref{res}@*
../singular_texi/general.tex(,2407) computes a free resolution of an ideal or module using a heuristically
../singular_texi/general.tex(,2408) chosen method.
../singular_texi/general.tex(,2409) This is the preferred method to compute free resolutions of ideals or
../singular_texi/general.tex(,2410) modules.
../singular_texi/general.tex(,2411) @item lres
../singular_texi/general.tex(,2412) @ref{lres}@*
../singular_texi/general.tex(,2413) computes a free resolution of an ideal or module with La Scala's
../singular_texi/general.tex(,2414) method. The input needs to be homogeneous.
../singular_texi/general.tex(,2415) @item mres
../singular_texi/general.tex(,2416) @ref{mres}@*
../singular_texi/general.tex(,2417) computes a minimal free resolution of an ideal or module with the Syzygy
../singular_texi/general.tex(,2418) method.
../singular_texi/general.tex(,2419) @item sres
../singular_texi/general.tex(,2420) @ref{sres}@*
../singular_texi/general.tex(,2421) computes a free resolution of an ideal or module with Schreyer's
../singular_texi/general.tex(,2422) method. The input has to be a standard basis.
../singular_texi/general.tex(,2423) @item nres
../singular_texi/general.tex(,2424) @ref{nres}@*
../singular_texi/general.tex(,2425) computes a free resolution of an ideal or module with the standard basis
../singular_texi/general.tex(,2426) method.
../singular_texi/general.tex(,2427) @item syz
../singular_texi/general.tex(,2428) @ref{syz}@*
../singular_texi/general.tex(,2429) computes the first Syzygy (i.e., the module of relations of the
../singular_texi/general.tex(,2430) given generators).
../singular_texi/general.tex(,2431) @end table
../singular_texi/general.tex(,2432) 
../singular_texi/general.tex(,2433) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2434) @subheading Further processing of resolutions
../singular_texi/general.tex(,2435) @table @code
../singular_texi/general.tex(,2436) @item betti
../singular_texi/general.tex(,2437) @ref{betti}@*
../singular_texi/general.tex(,2438) computes the graded Betti numbers of a module from a free resolution.
../singular_texi/general.tex(,2439) @item minres
../singular_texi/general.tex(,2440) @ref{minres}@*
../singular_texi/general.tex(,2441) minimizes a free resolution of an ideal or module.
../singular_texi/general.tex(,2442) @item regularity
../singular_texi/general.tex(,2443) @ref{regularity}@*
../singular_texi/general.tex(,2444) computes the regularity of a homogeneous ideal resp.@: module from a given
../singular_texi/general.tex(,2445) minimal free resolution.
../singular_texi/general.tex(,2446) @end table
../singular_texi/general.tex(,2447) 
../singular_texi/general.tex(,2448) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2449) @subheading Processing of polynomials
../singular_texi/general.tex(,2450) @table @code
../singular_texi/general.tex(,2451) @item char_series
../singular_texi/general.tex(,2452) @ref{char_series}@*
../singular_texi/general.tex(,2453) computes characteristic sets of polynomial ideals.
../singular_texi/general.tex(,2454) @item extgcd
../singular_texi/general.tex(,2455) @ref{extgcd}@*
../singular_texi/general.tex(,2456) computes the extended gcd of two polynomials.
../singular_texi/general.tex(,2457) 
../singular_texi/general.tex(,2458) Implemented as extended Euclidean Algorithm.  Applicable for univariate
../singular_texi/general.tex(,2459) polynomials only.
../singular_texi/general.tex(,2460) @item factorize
../singular_texi/general.tex(,2461) @ref{factorize}@*
../singular_texi/general.tex(,2462) computes factorization of univariate and multivariate polynomials into
../singular_texi/general.tex(,2463) irreducible factors.
../singular_texi/general.tex(,2464) 
../singular_texi/general.tex(,2465) The most basic algorithm is univariate factorization in prime
../singular_texi/general.tex(,2466) characteristic.  The Cantor-Zassenhaus Algorithm is used in this case.
../singular_texi/general.tex(,2467) For characteristic 0, a univariate Hensel-lifting is done to lift from
../singular_texi/general.tex(,2468) prime characteristic to characteristic 0.  For multivariate
../singular_texi/general.tex(,2469) factorization in any characteristic, the problem is reduced to the
../singular_texi/general.tex(,2470) univariate case first, then a multivariate Hensel-lifting is used to
../singular_texi/general.tex(,2471) lift the univariate factorization.
../singular_texi/general.tex(,2472) 
../singular_texi/general.tex(,2473) Note that there is no factorization of polynomials over algebraic
../singular_texi/general.tex(,2474) extensions of Q.
../singular_texi/general.tex(,2475) @item gcd
../singular_texi/general.tex(,2476) @ref{gcd}@*
../singular_texi/general.tex(,2477) computes greatest common divisors of univariate and multivariate polynomials.
../singular_texi/general.tex(,2478) 
../singular_texi/general.tex(,2479) For prime characteristic, a subresultant gcd is used.  In characteristic 0, a
../singular_texi/general.tex(,2480) modular algorithm is used for the univariate case.  For the multivariate case,
../singular_texi/general.tex(,2481) the EZGCD is used.
../singular_texi/general.tex(,2482) 
../singular_texi/general.tex(,2483) Note that there is no gcd calculation for polynomials over algebraic
../singular_texi/general.tex(,2484) extensions of Q.
../singular_texi/general.tex(,2485) @item resultant
../singular_texi/general.tex(,2486) @ref{resultant}@*
../singular_texi/general.tex(,2487) computes the resultant of two univariate polynomials using the subresultant
../singular_texi/general.tex(,2488) algorithm.
../singular_texi/general.tex(,2489) 
../singular_texi/general.tex(,2490) Multivariate polynomials are considered as univariate polynomials in the
../singular_texi/general.tex(,2491) main variable (which has to be specified by the user).
../singular_texi/general.tex(,2492) @item vandermonde
../singular_texi/general.tex(,2493) @ref{vandermonde}@*
../singular_texi/general.tex(,2494) interpolates a polynomial from its values at several points
../singular_texi/general.tex(,2495) @end table
../singular_texi/general.tex(,2496) 
../singular_texi/general.tex(,2497) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2498) @subheading Matrix computations
../singular_texi/general.tex(,2499) @table @code
../singular_texi/general.tex(,2500) @item bareiss
../singular_texi/general.tex(,2501) @ref{bareiss}@*
../singular_texi/general.tex(,2502) implements sparse Gauss-Bareiss method for elimination (matrix
../singular_texi/general.tex(,2503) triangularization) in arbitrary integral domains.
../singular_texi/general.tex(,2504) @item det
../singular_texi/general.tex(,2505) @ref{det}@*
../singular_texi/general.tex(,2506) computes the determinant of a square matrix.
../singular_texi/general.tex(,2507) 
../singular_texi/general.tex(,2508) For matrices with integer entries a modular algorithm is used.  For
../singular_texi/general.tex(,2509) other domains the Gauss-Bareiss method is used.
../singular_texi/general.tex(,2510) @item minor
../singular_texi/general.tex(,2511) @ref{minor}@*
../singular_texi/general.tex(,2512) computes all minors (=subdeterminants) of a given size for a matrix.
../singular_texi/general.tex(,2513) @end table
../singular_texi/general.tex(,2514) 
../singular_texi/general.tex(,2515) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2516) @subheading Numeric computations
../singular_texi/general.tex(,2517) @table @code
../singular_texi/general.tex(,2518) @item laguerre
../singular_texi/general.tex(,2519) @ref{laguerre}@*
../singular_texi/general.tex(,2520) computes all (complex) roots of a univariate polynomial
../singular_texi/general.tex(,2521) @item uressolve
../singular_texi/general.tex(,2522) @ref{uressolve}@*
../singular_texi/general.tex(,2523) find all roots of 0-dimensional ideal i with multivariate resultants
../singular_texi/general.tex(,2524) @end table
../singular_texi/general.tex(,2525) 
../singular_texi/general.tex(,2526) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,2527) @subheading Controlling computations
../singular_texi/general.tex(,2528) @table @code
../singular_texi/general.tex(,2529) @item option
../singular_texi/general.tex(,2530) @ref{option}@*
../singular_texi/general.tex(,2531) allows setting of options for manipulating the behavior of computations
../singular_texi/general.tex(,2532) (such as reduction strategies) and for showing protocol information indicating
../singular_texi/general.tex(,2533) the progress of a computation.
../singular_texi/general.tex(,2534) @end table
../singular_texi/general.tex(,2535) 
../singular_texi/general.tex(,2536) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,2537) @node The SINGULAR language, Input and output, Implemented algorithms, General concepts
../singular_texi/general.tex(,2538) @section The SINGULAR language
../singular_texi/general.tex(,2539) @cindex The SINGULAR language
../singular_texi/general.tex(,2540) 
../singular_texi/general.tex(,2541) @sc{Singular} interprets commands given interactively on the command
../singular_texi/general.tex(,2542) line as well as given in the context of user-defined procedures.  In
../singular_texi/general.tex(,2543) fact, @sc{Singular} makes no distinction between these two cases.
../singular_texi/general.tex(,2544) Thus, @sc{Singular} offers a powerful programming language as well as
../singular_texi/general.tex(,2545) an easy-to-use command line interface without differences in syntax or
../singular_texi/general.tex(,2546) semantics.
../singular_texi/general.tex(,2547) 
../singular_texi/general.tex(,2548) In the following, the basic language concepts such as commands,
../singular_texi/general.tex(,2549) expressions, names, objects, etc., are discussed.  @xref{Procedures},
../singular_texi/general.tex(,2550) and @ref{Libraries},
../singular_texi/general.tex(,2551) for the concepts of procedures
../singular_texi/general.tex(,2552) and libraries.
../singular_texi/general.tex(,2553) 
../singular_texi/general.tex(,2554) In many aspects, the @sc{Singular} language is similar to the C
../singular_texi/general.tex(,2555) programming language.  For a description of some of the subtle
../singular_texi/general.tex(,2556) differences, see @ref{Major differences to the C programming language}.
../singular_texi/general.tex(,2557) 
../singular_texi/general.tex(,2558) @subsubheading Elements of the language
../singular_texi/general.tex(,2559) 
../singular_texi/general.tex(,2560) The major building blocks of the @sc{Singular} language  are
../singular_texi/general.tex(,2561) expressions, commands, and control structures.  The notion of expressions
../singular_texi/general.tex(,2562) in the @sc{Singular} and the C programming language are identical,
../singular_texi/general.tex(,2563) whereas the notion of commands and control structures only roughly
../singular_texi/general.tex(,2564) corresponds to the C statements.
../singular_texi/general.tex(,2565) 
../singular_texi/general.tex(,2566) @itemize @bullet
../singular_texi/general.tex(,2567) 
../singular_texi/general.tex(,2568) @item
../singular_texi/general.tex(,2569) An ``expression'' is a sequence of operators, functions, and operands
../singular_texi/general.tex(,2570) that specifies a computation.  An expression always results in a
../singular_texi/general.tex(,2571) value of a specific type.  @xref{Data types}, and its subsections (e.g.,
../singular_texi/general.tex(,2572) @ref{poly expressions}), for information on how to build expressions.
../singular_texi/general.tex(,2573) 
../singular_texi/general.tex(,2574) @item
../singular_texi/general.tex(,2575) A ``command'' is either a declaration, an assignment, a call to a
../singular_texi/general.tex(,2576) function without return value, or a print command.  For detailed
../singular_texi/general.tex(,2577) information, see @ref{General command syntax}.
../singular_texi/general.tex(,2578) 
../singular_texi/general.tex(,2579) @item
../singular_texi/general.tex(,2580) ``Control structures'' determine the execution sequence of commands.
../singular_texi/general.tex(,2581) @sc{Singular} provides control structures for conditional execution
../singular_texi/general.tex(,2582) (@code{if} @dots{} @code{else}) and iteration (@code{for} and
../singular_texi/general.tex(,2583) @code{while}).  Commands may be grouped in pairs of @code{@{} @code{@}}
../singular_texi/general.tex(,2584) (curly brackets) to form blocks.  @xref{Control structures}, for
../singular_texi/general.tex(,2585) more information.
../singular_texi/general.tex(,2586) @end itemize
../singular_texi/general.tex(,2587) 
../singular_texi/general.tex(,2588) @subsubheading Other notational conventions
../singular_texi/general.tex(,2589) For user-defined functions, the notion of ``procedure'' and
../singular_texi/general.tex(,2590) ``function'' are synonymous.
../singular_texi/general.tex(,2591) 
../singular_texi/general.tex(,2592) As already mentioned above, functions without return values are called
../singular_texi/general.tex(,2593) commands.  Furthermore, whenever convenient, the term ``command'' is
../singular_texi/general.tex(,2594) used for a function, even if it does return a value.
../singular_texi/general.tex(,2595) 
../singular_texi/general.tex(,2596) @menu
../singular_texi/general.tex(,2597) * General command syntax::
../singular_texi/general.tex(,2598) * Special characters::
../singular_texi/general.tex(,2599) * Names::
../singular_texi/general.tex(,2600) * Objects::
../singular_texi/general.tex(,2601) * Type conversion and casting::
../singular_texi/general.tex(,2602) * Flow control::
../singular_texi/general.tex(,2603) @end menu
../singular_texi/general.tex(,2604) 
../singular_texi/general.tex(,2605) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,2606) @node General command syntax, Special characters, The SINGULAR language, The SINGULAR language
../singular_texi/general.tex(,2607) @subsection General command syntax
../singular_texi/general.tex(,2608) @cindex General command syntax
../singular_texi/general.tex(,2609) 
../singular_texi/general.tex(,2610) In @sc{Singular} a command is either a declaration, an assignment, a
../singular_texi/general.tex(,2611) call to a function without return value, or a print command. The general
../singular_texi/general.tex(,2612) form of a command is described in the following subsections.
../singular_texi/general.tex(,2613) 
../singular_texi/general.tex(,2614) @subsubheading Declaration
../singular_texi/general.tex(,2615) @enumerate
../singular_texi/general.tex(,2616) @item type name @code{=} expression @code{;}
../singular_texi/general.tex(,2617) @* declares a variable with the given name of the given type and assigns
../singular_texi/general.tex(,2618) the expression as initial value to it.  Expression is an expression of
../singular_texi/general.tex(,2619) the specified type or one that can be converted to that type.
../singular_texi/general.tex(,2620) @xref{Type conversion and casting}.
../singular_texi/general.tex(,2621) 
../singular_texi/general.tex(,2622) @item type name_list @code{=} expression_list @code{;}
../singular_texi/general.tex(,2623) @* declares variables with the given names and assigns successively each
../singular_texi/general.tex(,2624) expression of expression_list to the corresponding name of
../singular_texi/general.tex(,2625) name_list.  Both lists must be of the same length.  Each expression in
../singular_texi/general.tex(,2626) expression_list is an expression of the specified type or one that can
../singular_texi/general.tex(,2627) be converted to that type.  @xref{Type conversion and casting}.
../singular_texi/general.tex(,2628) 
../singular_texi/general.tex(,2629) @item type name @code{;}
../singular_texi/general.tex(,2630) @* declares a variable with the given name of the given type and assigns
../singular_texi/general.tex(,2631) the default value of the specific type to it.
../singular_texi/general.tex(,2632) @end enumerate
../singular_texi/general.tex(,2633) 
../singular_texi/general.tex(,2634) @xref{Names}, for more information on declarations.  @xref{Data types},
../singular_texi/general.tex(,2635) for a description of all data types known to @sc{Singular}.
../singular_texi/general.tex(,2636) 
../singular_texi/general.tex(,2637) @smallexample
../singular_texi/general.tex(,2638) ring r;                   // the default ring
../singular_texi/general.tex(,2639) poly f,g = x^2+y^3,xy+z2; // the polynomials f=x^2+y^3 and g=x*y+z^2
../singular_texi/general.tex(,2640) ideal I = f,g;            // the ideal generated by f and g
../singular_texi/general.tex(,2641) matrix m[3][3];           // a 3 x 3 zero matrix
../singular_texi/general.tex(,2642) int i=2;                  // the integer i=2
../singular_texi/general.tex(,2643) @end smallexample
../singular_texi/general.tex(,2644) 
../singular_texi/general.tex(,2645) @subsubheading Assignment
../singular_texi/general.tex(,2646) @enumerate 4
../singular_texi/general.tex(,2647) @item
../singular_texi/general.tex(,2648) name @code{=} expression @code{;}
../singular_texi/general.tex(,2649) @* assigns expression to name.
../singular_texi/general.tex(,2650) 
../singular_texi/general.tex(,2651) @item
../singular_texi/general.tex(,2652) name_list @code{=} expression_list @code{;}
../singular_texi/general.tex(,2653) @* assigns successively each expression of expression_list to the
../singular_texi/general.tex(,2654) corresponding name of name_list. Both lists must be of the same
../singular_texi/general.tex(,2655) length.  This is not a simultaneous assignment.  Thus, @code{f, g = g, f;} does
../singular_texi/general.tex(,2656) not swap the values of @code{f} and @code{g}, but rather assigns
../singular_texi/general.tex(,2657) @code{g} to both @code{f} and @code{g}.
../singular_texi/general.tex(,2658) @end enumerate
../singular_texi/general.tex(,2659) 
../singular_texi/general.tex(,2660) There must be a type conversion of the type of expression to the type of
../singular_texi/general.tex(,2661) name. @xref{Type conversion and casting}.
../singular_texi/general.tex(,2662) 
../singular_texi/general.tex(,2663) An assignment itself does not yield a value. Hence, compound assignments
../singular_texi/general.tex(,2664) like @code{i = j = k;} are not allowed and result in an error.
../singular_texi/general.tex(,2665) 
../singular_texi/general.tex(,2666) @smallexample
../singular_texi/general.tex(,2667) f = x^2 + y^2 ;      // overwrites the old value of f
../singular_texi/general.tex(,2668) I = jacob(f);
../singular_texi/general.tex(,2669) f,g = I[1],x^2+y^2 ; // overwrites the old values of f and g
../singular_texi/general.tex(,2670) @end smallexample
../singular_texi/general.tex(,2671) 
../singular_texi/general.tex(,2672) @subsubheading Function without return value
../singular_texi/general.tex(,2673) @enumerate 6
../singular_texi/general.tex(,2674) @item
../singular_texi/general.tex(,2675) function_name [ @code{(} argument_list @code{)} ] @code{;}
../singular_texi/general.tex(,2676) @* calls function function_name with arguments argument_list.
../singular_texi/general.tex(,2677) @end enumerate
../singular_texi/general.tex(,2678) 
../singular_texi/general.tex(,2679) The function may have output (not to be confused with a return value of
../singular_texi/general.tex(,2680) type string). @xref{Functions}. Functions without a return value are
../singular_texi/general.tex(,2681) specified there to have a return type 'none'.
../singular_texi/general.tex(,2682) 
../singular_texi/general.tex(,2683) Some of these functions have to be called without parentheses, e.g.,
../singular_texi/general.tex(,2684) @code{help}, @code{LIB}.
../singular_texi/general.tex(,2685) 
../singular_texi/general.tex(,2686) @smallexample
../singular_texi/general.tex(,2687) @c computed example Function_without_return_value general.doc:2344 
../singular_texi/general.tex(,2688)   ring r;
../singular_texi/general.tex(,2689)   ideal i=x2+y2,x;
../singular_texi/general.tex(,2690)   i=std(i);
../singular_texi/general.tex(,2691)   degree(i);        // degree has no return value but prints output
../singular_texi/general.tex(,2692) @expansion{} 2
../singular_texi/general.tex(,2693) @c end example Function_without_return_value general.doc:2344
../singular_texi/general.tex(,2694) @end smallexample
../singular_texi/general.tex(,2695) 
../singular_texi/general.tex(,2696) @subsubheading Print command
../singular_texi/general.tex(,2697) @enumerate 7
../singular_texi/general.tex(,2698) @item
../singular_texi/general.tex(,2699) expression @code{;}
../singular_texi/general.tex(,2700) @* prints the value of an expression, for example, of a variable.
../singular_texi/general.tex(,2701) @end enumerate
../singular_texi/general.tex(,2702) 
../singular_texi/general.tex(,2703) Use the function @code{print} (or the procedure show from inout.lib)
../singular_texi/general.tex(,2704) to get a pretty output of various data
../singular_texi/general.tex(,2705) types, e.g., matrix or intmat. @xref{print}.
../singular_texi/general.tex(,2706) 
../singular_texi/general.tex(,2707) @smallexample
../singular_texi/general.tex(,2708) @c computed example Print_command general.doc:2364 
../singular_texi/general.tex(,2709)   int i=2;
../singular_texi/general.tex(,2710)   i;
../singular_texi/general.tex(,2711) @expansion{} 2
../singular_texi/general.tex(,2712)   intmat m[2][2]=1,7,10,0;
../singular_texi/general.tex(,2713)   print(m);
../singular_texi/general.tex(,2714) @expansion{}      1     7
../singular_texi/general.tex(,2715) @expansion{}     10     0
../singular_texi/general.tex(,2716) @c end example Print_command general.doc:2364
../singular_texi/general.tex(,2717) @end smallexample
../singular_texi/general.tex(,2718) 
../singular_texi/general.tex(,2719) @c ------------------------------------------------------------
../singular_texi/general.tex(,2720) @node Special characters, Names, General command syntax, The SINGULAR language
../singular_texi/general.tex(,2721) @subsection Special characters
../singular_texi/general.tex(,2722) @cindex Special characters
../singular_texi/general.tex(,2723) The following characters and operators have special meaning:
../singular_texi/general.tex(,2724) @table @asis
../singular_texi/general.tex(,2725) @item @code{=}
../singular_texi/general.tex(,2726) @cindex =
../singular_texi/general.tex(,2727) assignment
../singular_texi/general.tex(,2728) @item @code{(}, @code{)}
../singular_texi/general.tex(,2729) @cindex (
../singular_texi/general.tex(,2730) @cindex )
../singular_texi/general.tex(,2731) @cindex indexed names
../singular_texi/general.tex(,2732) in expressions, for indexed names and for argument lists
../singular_texi/general.tex(,2733) @item @code{[}, @code{]}
../singular_texi/general.tex(,2734) @cindex [
../singular_texi/general.tex(,2735) @cindex ]
../singular_texi/general.tex(,2736) access operator for strings, integer vectors, ideals, matrices,
../singular_texi/general.tex(,2737) polynomials, resolutions, and lists.  Used to build vectors of
../singular_texi/general.tex(,2738) polynomials.  Example: @code{s[3]}, @code{m[1,3]}, @code{i[1..3]},
../singular_texi/general.tex(,2739) @code{[f,g+x,0,0,1]}.
../singular_texi/general.tex(,2740) @item @code{+}
../singular_texi/general.tex(,2741) @cindex +
../singular_texi/general.tex(,2742) addition operator
../singular_texi/general.tex(,2743) @item @code{-}
../singular_texi/general.tex(,2744) @cindex -
../singular_texi/general.tex(,2745) subtraction operator
../singular_texi/general.tex(,2746) @item @code{*}
../singular_texi/general.tex(,2747) @cindex *
../singular_texi/general.tex(,2748) multiplication operator
../singular_texi/general.tex(,2749) @item @code{/}
../singular_texi/general.tex(,2750) @cindex /
../singular_texi/general.tex(,2751) division  operator.  @xref{Miscellaneous oddities}, for the difference
../singular_texi/general.tex(,2752) between the division operators @code{/} and @code{div}.
../singular_texi/general.tex(,2753) @item @code{%}
../singular_texi/general.tex(,2754) @cindex %
../singular_texi/general.tex(,2755) modulo operator
../singular_texi/general.tex(,2756) @item @code{^} or @code{**}
../singular_texi/general.tex(,2757) @cindex ^
../singular_texi/general.tex(,2758) @cindex **
../singular_texi/general.tex(,2759) exponentiation operator
../singular_texi/general.tex(,2760) @item @code{==}
../singular_texi/general.tex(,2761) @cindex ==
../singular_texi/general.tex(,2762) comparison operator equal
../singular_texi/general.tex(,2763) @item @code{!=} or @code{<>}
../singular_texi/general.tex(,2764) @cindex !=
../singular_texi/general.tex(,2765) @cindex <>
../singular_texi/general.tex(,2766) comparison operator not equal
../singular_texi/general.tex(,2767) @item @code{>=}
../singular_texi/general.tex(,2768) @cindex >=
../singular_texi/general.tex(,2769) comparison operator bigger or equal
../singular_texi/general.tex(,2770) @item @code{>}
../singular_texi/general.tex(,2771) @cindex >
../singular_texi/general.tex(,2772) comparison operator bigger
../singular_texi/general.tex(,2773) @item @code{<=}
../singular_texi/general.tex(,2774) @cindex <=
../singular_texi/general.tex(,2775) comparison operator smaller or equal
../singular_texi/general.tex(,2776) @item @code{<}
../singular_texi/general.tex(,2777) @cindex <
../singular_texi/general.tex(,2778) comparison operator smaller.  Also used for file input.  @xref{filecmd}.
../singular_texi/general.tex(,2779) @item @code{!}
../singular_texi/general.tex(,2780) @cindex !
../singular_texi/general.tex(,2781) boolean operator not
../singular_texi/general.tex(,2782) @item @code{&&}
../singular_texi/general.tex(,2783) @cindex &&
../singular_texi/general.tex(,2784) boolean operator and
../singular_texi/general.tex(,2785) @item @code{||}
../singular_texi/general.tex(,2786) @cindex ||
../singular_texi/general.tex(,2787) boolean operator or
../singular_texi/general.tex(,2788) @item @code{"}
../singular_texi/general.tex(,2789) @cindex "
../singular_texi/general.tex(,2790) delimiter for string constants
../singular_texi/general.tex(,2791) @item @code{`}
../singular_texi/general.tex(,2792) @cindex `
../singular_texi/general.tex(,2793) delimiter for name substitution
../singular_texi/general.tex(,2794) @item @code{?}
../singular_texi/general.tex(,2795) @cindex ?
../singular_texi/general.tex(,2796) synonym for @code{help}
../singular_texi/general.tex(,2797) @item @code{//}
../singular_texi/general.tex(,2798) @cindex //
../singular_texi/general.tex(,2799) comment delimiter.  Comment extends to end of line.
../singular_texi/general.tex(,2800) @item @code{/*}
../singular_texi/general.tex(,2801) @cindex //
../singular_texi/general.tex(,2802) comment delimiter.  Starts a comment which ends with @code{*/}.
../singular_texi/general.tex(,2803) @item @code{*/}
../singular_texi/general.tex(,2804) @cindex //
../singular_texi/general.tex(,2805) comment delimiter.  Ends a comment which starts with @code{/*}.
../singular_texi/general.tex(,2806) @item @code{;}
../singular_texi/general.tex(,2807) @cindex ;
../singular_texi/general.tex(,2808) statement separator
../singular_texi/general.tex(,2809) @item @code{,}
../singular_texi/general.tex(,2810) separator for expression lists and function arguments
../singular_texi/general.tex(,2811) @item @code{\}
../singular_texi/general.tex(,2812) @cindex \
../singular_texi/general.tex(,2813) escape character for @code{"} and @code{\} within strings
../singular_texi/general.tex(,2814) @item @code{..}
../singular_texi/general.tex(,2815) @cindex ..
../singular_texi/general.tex(,2816) interval specifier returning intvec.
../singular_texi/general.tex(,2817) E.g., @code{1..3} which is equivalent to the intvec @code{1, 2, 3}.
../singular_texi/general.tex(,2818) @item @code{_}
../singular_texi/general.tex(,2819) @cindex _
../singular_texi/general.tex(,2820) value of expression last displayed
../singular_texi/general.tex(,2821) @item @code{~}
../singular_texi/general.tex(,2822) @cindex ~
../singular_texi/general.tex(,2823) breakpoint in procedures
../singular_texi/general.tex(,2824) @item @code{#}
../singular_texi/general.tex(,2825) @cindex #
../singular_texi/general.tex(,2826) list of parameters in procedures without explicit parameter list
../singular_texi/general.tex(,2827) @item @code{$}
../singular_texi/general.tex(,2828) @cindex $
../singular_texi/general.tex(,2829) terminates @sc{Singular}
../singular_texi/general.tex(,2830) @end table
../singular_texi/general.tex(,2831) 
../singular_texi/general.tex(,2832) @c ------------------------------------------------------------
../singular_texi/general.tex(,2833) @node Names, Objects, Special characters, The SINGULAR language
../singular_texi/general.tex(,2834) @subsection Names
../singular_texi/general.tex(,2835) @cindex Names
../singular_texi/general.tex(,2836) @cindex Identifiers, syntax of
../singular_texi/general.tex(,2837) 
../singular_texi/general.tex(,2838) @sc{Singular} is a strongly typed language.  This means that all names
../singular_texi/general.tex(,2839) (= identifiers) have to be declared prior to their use.  For the general
../singular_texi/general.tex(,2840) syntax of a declaration, see the description of declaration commands
../singular_texi/general.tex(,2841) (@pxref{General command syntax}).
../singular_texi/general.tex(,2842) 
../singular_texi/general.tex(,2843) @xref{Data types}, for a description of @sc{Singular}'s data types.
../singular_texi/general.tex(,2844) @xref{typeof}, for a short overview of possible types.  To get information
../singular_texi/general.tex(,2845) on a name and the object named by it, the @code{type} command may be
../singular_texi/general.tex(,2846) used (@pxref{type}).
../singular_texi/general.tex(,2847) 
../singular_texi/general.tex(,2848) It is possible to redefine an already existing name if doing so does not
../singular_texi/general.tex(,2849) change its type. A redefinition first sets the variable to the default
../singular_texi/general.tex(,2850) value and then computes the expression. The difference between
../singular_texi/general.tex(,2851) redefining and overwriting a variable is shown in the following example:
../singular_texi/general.tex(,2852) 
../singular_texi/general.tex(,2853) @smallexample
../singular_texi/general.tex(,2854) @c computed example Names general.doc:2507 
../singular_texi/general.tex(,2855)   int i=3;
../singular_texi/general.tex(,2856)   i=i+1;        // overwriting
../singular_texi/general.tex(,2857)   i;
../singular_texi/general.tex(,2858) @expansion{} 4
../singular_texi/general.tex(,2859)   int i=i+1;    // redefinition
../singular_texi/general.tex(,2860) @expansion{} // ** redefining i **
../singular_texi/general.tex(,2861)   i;
../singular_texi/general.tex(,2862) @expansion{} 1
../singular_texi/general.tex(,2863) @c end example Names general.doc:2507
../singular_texi/general.tex(,2864) @end smallexample
../singular_texi/general.tex(,2865) 
../singular_texi/general.tex(,2866) User defined names should start with a letter and consist of letters and
../singular_texi/general.tex(,2867) digits only.  As an exception to this rule, the characters @code{@@},
../singular_texi/general.tex(,2868) and @code{_} may
../singular_texi/general.tex(,2869) be used as part of a name, too.  Capital and small letters are
../singular_texi/general.tex(,2870) distinguished.  Indexed names are built as a name followed by an
../singular_texi/general.tex(,2871) int_expression in parentheses.  A list of indexed names can be built as
../singular_texi/general.tex(,2872) a name followed by an intvec_expression in parentheses.
../singular_texi/general.tex(,2873) 
../singular_texi/general.tex(,2874) @smallexample
../singular_texi/general.tex(,2875) @c computed example Names_1 general.doc:2525 
../singular_texi/general.tex(,2876)   ring R;
../singular_texi/general.tex(,2877)   int n=3;
../singular_texi/general.tex(,2878)   ideal j(3);
../singular_texi/general.tex(,2879)   ideal j(n);     // is equivalent to the above
../singular_texi/general.tex(,2880) @expansion{} // ** redefining j(3) **
../singular_texi/general.tex(,2881)   ideal j(2)=x;
../singular_texi/general.tex(,2882)   j(2..3);
../singular_texi/general.tex(,2883) @expansion{} j(2)[1]=x j(3)[1]=0
../singular_texi/general.tex(,2884) @c end example Names_1 general.doc:2525
../singular_texi/general.tex(,2885) @end smallexample
../singular_texi/general.tex(,2886) 
../singular_texi/general.tex(,2887) Names may not coincide with reserved names (keywords).  Type
../singular_texi/general.tex(,2888) @code{reservedName();} to get a list of the reserved names.
../singular_texi/general.tex(,2889) @xref{reservedName}.  Names should not interfere with names of ring
../singular_texi/general.tex(,2890) variables or, more generally, with monomials.  @xref{Identifier
../singular_texi/general.tex(,2891) resolution}.
../singular_texi/general.tex(,2892) @* The command @code{listvar} provides a list of the names in use
../singular_texi/general.tex(,2893) (@pxref{listvar}).
../singular_texi/general.tex(,2894) 
../singular_texi/general.tex(,2895) The most recently printed expression is available
../singular_texi/general.tex(,2896) under the special name @code{_}, e.g.,
../singular_texi/general.tex(,2897) @smallexample
../singular_texi/general.tex(,2898) @c computed example Names_2 general.doc:2546 
../singular_texi/general.tex(,2899)   ring r;
../singular_texi/general.tex(,2900)   ideal i=x2+y3,y3+z4;
../singular_texi/general.tex(,2901)   std(i);
../singular_texi/general.tex(,2902) @expansion{} _[1]=y3+x2
../singular_texi/general.tex(,2903) @expansion{} _[2]=z4-x2
../singular_texi/general.tex(,2904)   ideal k=_;
../singular_texi/general.tex(,2905)   k*k+x;
../singular_texi/general.tex(,2906) @expansion{} _[1]=y6+2x2y3+x4
../singular_texi/general.tex(,2907) @expansion{} _[2]=y3z4+x2z4-x2y3-x4
../singular_texi/general.tex(,2908) @expansion{} _[3]=z8-2x2z4+x4
../singular_texi/general.tex(,2909) @expansion{} _[4]=x
../singular_texi/general.tex(,2910)   size(_[3]);
../singular_texi/general.tex(,2911) @expansion{} 3
../singular_texi/general.tex(,2912) @c end example Names_2 general.doc:2546
../singular_texi/general.tex(,2913) @end smallexample
../singular_texi/general.tex(,2914) 
../singular_texi/general.tex(,2915) A string_expression enclosed in @code{`}@dots{}@code{`} (back ticks)
../singular_texi/general.tex(,2916) evaluates to the value of the variable named by the string_expression.
../singular_texi/general.tex(,2917) This feature is referred to as name substitution.
../singular_texi/general.tex(,2918) 
../singular_texi/general.tex(,2919) @smallexample
../singular_texi/general.tex(,2920) @c computed example Names_3 general.doc:2561 
../singular_texi/general.tex(,2921)   int foo(1)=42;
../singular_texi/general.tex(,2922)   string bar="foo";
../singular_texi/general.tex(,2923)   `bar+"(1)"`;
../singular_texi/general.tex(,2924) @expansion{} 42
../singular_texi/general.tex(,2925) @c end example Names_3 general.doc:2561
../singular_texi/general.tex(,2926) @end smallexample
../singular_texi/general.tex(,2927) 
../singular_texi/general.tex(,2928) @c ------------------------------------------------------------
../singular_texi/general.tex(,2929) @node Objects, Type conversion and casting, Names, The SINGULAR language
../singular_texi/general.tex(,2930) @subsection Objects
../singular_texi/general.tex(,2931) @cindex Objects
../singular_texi/general.tex(,2932) 
../singular_texi/general.tex(,2933) Every object in @sc{Singular} has a type and a value.  In most cases it
../singular_texi/general.tex(,2934) has also a name and in some cases an attribute list.  The value of an
../singular_texi/general.tex(,2935) object may be examined simply by printing it with a print command:
../singular_texi/general.tex(,2936) object@code{;}.  The type of an object may be determined by means of the
../singular_texi/general.tex(,2937) @code{typeof} function, the attributes by means of the @code{attrib}
../singular_texi/general.tex(,2938) function (@ref{typeof}, @ref{attrib}):
../singular_texi/general.tex(,2939) 
../singular_texi/general.tex(,2940) @smallexample
../singular_texi/general.tex(,2941) @c computed example Objects general.doc:2581 
../singular_texi/general.tex(,2942)   ring r=0,x,dp;
../singular_texi/general.tex(,2943)   typeof(10);
../singular_texi/general.tex(,2944) @expansion{} int
../singular_texi/general.tex(,2945)   typeof(10000000000000000);
../singular_texi/general.tex(,2946) @expansion{} number
../singular_texi/general.tex(,2947)   typeof(r);
../singular_texi/general.tex(,2948) @expansion{} ring
../singular_texi/general.tex(,2949)   attrib(x);
../singular_texi/general.tex(,2950) @expansion{} no attributes
../singular_texi/general.tex(,2951)   attrib(std(ideal(x)));
../singular_texi/general.tex(,2952) @expansion{} attr:isSB, type int
../singular_texi/general.tex(,2953) @c end example Objects general.doc:2581
../singular_texi/general.tex(,2954) @end smallexample
../singular_texi/general.tex(,2955) 
../singular_texi/general.tex(,2956) Each object of type
../singular_texi/general.tex(,2957) @code{poly},
../singular_texi/general.tex(,2958) @code{ideal},
../singular_texi/general.tex(,2959) @code{vector},
../singular_texi/general.tex(,2960) @code{module},
../singular_texi/general.tex(,2961) @code{map},
../singular_texi/general.tex(,2962) @code{matrix},
../singular_texi/general.tex(,2963) @code{number}, or
../singular_texi/general.tex(,2964) @code{resolution}
../singular_texi/general.tex(,2965) belongs to a specific ring.  Also @code{list}, if at least one of the
../singular_texi/general.tex(,2966) objects contained in the list belongs to a ring.  These objects are local
../singular_texi/general.tex(,2967) to the ring.  Their names can be used for other objects in other rings.
../singular_texi/general.tex(,2968) Objects from one ring can be mapped to another ring using maps or with the
../singular_texi/general.tex(,2969) commands @code{fetch} or @code{imap}.  @xref{map}, @ref{fetch}, @ref{imap}.
../singular_texi/general.tex(,2970) 
../singular_texi/general.tex(,2971) All other types do not belong to a ring and can be accessed within every
../singular_texi/general.tex(,2972) ring and across rings.  They can be declared even if there is no active
../singular_texi/general.tex(,2973) basering.
../singular_texi/general.tex(,2974) 
../singular_texi/general.tex(,2975) @c ------------------------------------------------------------
../singular_texi/general.tex(,2976) @node Type conversion and casting, Flow control, Objects, The SINGULAR language
../singular_texi/general.tex(,2977) @subsection Type conversion and casting
../singular_texi/general.tex(,2978) 
../singular_texi/general.tex(,2979) @subsubheading Type conversion
../singular_texi/general.tex(,2980) @cindex Type conversion
../singular_texi/general.tex(,2981) Assignments convert the type of the right-hand side to the type of the
../singular_texi/general.tex(,2982) left-hand side of the assignment, if possible.  Operators and functions
../singular_texi/general.tex(,2983) which require certain types of operands can also implicitly convert the
../singular_texi/general.tex(,2984) type of an expression.  It is, for example, possible to multiply a
../singular_texi/general.tex(,2985) polynomial by an integer because the integer is automatically converted to
../singular_texi/general.tex(,2986) a polynomial.  Type conversions do not act transitively.  Possible
../singular_texi/general.tex(,2987) conversions are:
../singular_texi/general.tex(,2988) 
../singular_texi/general.tex(,2989) 
../singular_texi/general.tex(,2990) @c ------------------------------------------------
../singular_texi/general.tex(,2991) @c Do not delete the leading `@ ' for indentation of the whole table.  The
../singular_texi/general.tex(,2992) @c table is indented since regular @tables are indented by a small amount,
../singular_texi/general.tex(,2993) @c too.
../singular_texi/general.tex(,2994) @c ------------------------------------------------
../singular_texi/general.tex(,2995) @multitable @columnfractions .05 .18 .81
../singular_texi/general.tex(,2996) @item
../singular_texi/general.tex(,2997) @   1. @tab @code{int}  @tab @expansion{} @code{ideal}
../singular_texi/general.tex(,2998) @item
../singular_texi/general.tex(,2999) @   2. @tab @code{poly}  @tab @expansion{} @code{ideal}
../singular_texi/general.tex(,3000) @item
../singular_texi/general.tex(,3001) @   3. @tab @code{intvec}  @tab @expansion{} @code{intmat}
../singular_texi/general.tex(,3002) @item
../singular_texi/general.tex(,3003) @   4. @tab @code{int}  @tab @expansion{} @code{intvec}
../singular_texi/general.tex(,3004) @item
../singular_texi/general.tex(,3005) @   5. @tab @code{int}  @tab @expansion{} @code{intmat}
../singular_texi/general.tex(,3006) @item
../singular_texi/general.tex(,3007) @   6. @tab @code{string}  @tab @expansion{} @code{link}
../singular_texi/general.tex(,3008) @item
../singular_texi/general.tex(,3009) @   7. @tab @code{resolution} @tab @expansion{} @code{list}
../singular_texi/general.tex(,3010) @item
../singular_texi/general.tex(,3011) @   8. @tab @code{ideal}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3012) @item
../singular_texi/general.tex(,3013) @   9. @tab @code{int}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3014) @item
../singular_texi/general.tex(,3015) @  10. @tab @code{intmat}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3016) @item
../singular_texi/general.tex(,3017) @  11. @tab @code{intvec}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3018) @item
../singular_texi/general.tex(,3019) @  12. @tab @code{module}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3020) @item
../singular_texi/general.tex(,3021) @  13. @tab @code{number}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3022) @item
../singular_texi/general.tex(,3023) @  14. @tab @code{poly}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3024) @item
../singular_texi/general.tex(,3025) @  15. @tab @code{vector}  @tab @expansion{} @code{matrix}
../singular_texi/general.tex(,3026) @item
../singular_texi/general.tex(,3027) @  16. @tab @code{ideal}  @tab @expansion{} @code{module}
../singular_texi/general.tex(,3028) @item
../singular_texi/general.tex(,3029) @  17. @tab @code{matrix}  @tab @expansion{} @code{module}
../singular_texi/general.tex(,3030) @item
../singular_texi/general.tex(,3031) @  18. @tab @code{vector}  @tab @expansion{} @code{module}
../singular_texi/general.tex(,3032) @item
../singular_texi/general.tex(,3033) @  19. @tab @code{int}  @tab @expansion{} @code{number}
../singular_texi/general.tex(,3034) @item
../singular_texi/general.tex(,3035) @  20. @tab @code{int}  @tab @expansion{} @code{poly}
../singular_texi/general.tex(,3036) @item
../singular_texi/general.tex(,3037) @  21. @tab @code{number}  @tab @expansion{} @code{poly}
../singular_texi/general.tex(,3038) @item
../singular_texi/general.tex(,3039) @  22. @tab @code{string}  @tab @expansion{} @code{proc}
../singular_texi/general.tex(,3040) @item
../singular_texi/general.tex(,3041) @  23. @tab @code{list}  @tab @expansion{} @code{resolution}
../singular_texi/general.tex(,3042) @item
../singular_texi/general.tex(,3043) @  24. @tab @code{int}  @tab @expansion{} @code{vector}
../singular_texi/general.tex(,3044)   (i @expansion{} i*@code{gen(1)})
../singular_texi/general.tex(,3045) @item
../singular_texi/general.tex(,3046) @  25. @tab @code{poly}  @tab @expansion{} @code{vector}
../singular_texi/general.tex(,3047)   (p @expansion{} p*@code{gen(1)})
../singular_texi/general.tex(,3048) @end multitable
../singular_texi/general.tex(,3049) 
../singular_texi/general.tex(,3050) @subsubheading Type casting
../singular_texi/general.tex(,3051) @cindex Type casting
../singular_texi/general.tex(,3052) An expression can be casted to another type by using a type cast
../singular_texi/general.tex(,3053) expression:
../singular_texi/general.tex(,3054) @* type @code{(} expression @code{)}.
../singular_texi/general.tex(,3055) 
../singular_texi/general.tex(,3056) Possible type casts are:
../singular_texi/general.tex(,3057) 
../singular_texi/general.tex(,3058) @c ------------------------------------------------
../singular_texi/general.tex(,3059) @c Do not delete the leading `@ ' for indentation of the whole table.  The
../singular_texi/general.tex(,3060) @c table is indented since regular @tables are indented by a small amount,
../singular_texi/general.tex(,3061) @c too.
../singular_texi/general.tex(,3062) @c ------------------------------------------------
../singular_texi/general.tex(,3063) @multitable @columnfractions .05 .15 .83
../singular_texi/general.tex(,3064) @item
../singular_texi/general.tex(,3065) @    @tab to @tab from
../singular_texi/general.tex(,3066) @item
../singular_texi/general.tex(,3067) @    @tab  @code{ideal} @tab  expression lists of @code{int}, @code{number}, @code{poly}
../singular_texi/general.tex(,3068) @item
../singular_texi/general.tex(,3069) @    @tab  @code{ideal} @tab  @code{int}, @code{matrix}, @code{module}, @code{number}, @code{poly}, @code{vector}
../singular_texi/general.tex(,3070) @item
../singular_texi/general.tex(,3071) @    @tab  @code{int} @tab    @code{number}, @code{poly}
../singular_texi/general.tex(,3072) @item
../singular_texi/general.tex(,3073) @    @tab  @code{intvec} @tab expression lists of @code{int}, @code{intmat}
../singular_texi/general.tex(,3074) @item
../singular_texi/general.tex(,3075) @    @tab  @code{intmat} @tab @code{intvec} (@pxref{intmat type cast})
../singular_texi/general.tex(,3076) @item
../singular_texi/general.tex(,3077) @    @tab  @code{list} @tab   expression lists of any type
../singular_texi/general.tex(,3078) @item
../singular_texi/general.tex(,3079) @    @tab  @code{matrix} @tab @code{module}, @code{ideal},
../singular_texi/general.tex(,3080) @code{vector}, @code{matrix}.
../singular_texi/general.tex(,3081) @* There are two forms to convert something to a matrix: if @code{matrix(}
../singular_texi/general.tex(,3082) expression @code{)} is used then the size of the matrix is determined
../singular_texi/general.tex(,3083) by the size of expression.
../singular_texi/general.tex(,3084) @* But @code{matrix(} expression @code{,} m @code{,} n @code{)} may also be
../singular_texi/general.tex(,3085) used - the result is a
../singular_texi/general.tex(,3086) @tex
../singular_texi/general.tex(,3087) $ m \times n $
../singular_texi/general.tex(,3088) @end tex
../singular_texi/general.tex(,3092) matrix (@pxref{matrix type cast})
../singular_texi/general.tex(,3093) @item
../singular_texi/general.tex(,3094) @    @tab  @code{module} @tab expression lists of @code{int}, @code{number},
../singular_texi/general.tex(,3095) @code{poly}, @code{vector}
../singular_texi/general.tex(,3096) @item
../singular_texi/general.tex(,3097) @    @tab  @code{module} @tab @code{ideal}, @code{matrix}, @code{vector}
../singular_texi/general.tex(,3098) @item
../singular_texi/general.tex(,3099) @    @tab  @code{number} @tab @code{poly}
../singular_texi/general.tex(,3100) @item
../singular_texi/general.tex(,3101) @   @tab  @code{poly} @tab   @code{int}, @code{number}
../singular_texi/general.tex(,3102) @item
../singular_texi/general.tex(,3103) @   @tab  @code{string} @tab   any type (@pxref{string type cast})
../singular_texi/general.tex(,3104) @end multitable
../singular_texi/general.tex(,3105) 
../singular_texi/general.tex(,3106) @strong{Example:}
../singular_texi/general.tex(,3107) @smallexample
../singular_texi/general.tex(,3108) @c computed example Type_casting general.doc:2743 
../singular_texi/general.tex(,3109)   ring r=0,x,(c,dp);
../singular_texi/general.tex(,3110)   number(3x);
../singular_texi/general.tex(,3111) @expansion{} 0
../singular_texi/general.tex(,3112)   number(poly(3));
../singular_texi/general.tex(,3113) @expansion{} 3
../singular_texi/general.tex(,3114)   ideal i=1,2,3,4,5,6;
../singular_texi/general.tex(,3115)   print(matrix(i));
../singular_texi/general.tex(,3116) @expansion{} 1,2,3,4,5,6
../singular_texi/general.tex(,3117)   print(matrix(i,3,2));
../singular_texi/general.tex(,3118) @expansion{} 1,2,
../singular_texi/general.tex(,3119) @expansion{} 3,4,
../singular_texi/general.tex(,3120) @expansion{} 5,6 
../singular_texi/general.tex(,3121)   vector v=[1,2];
../singular_texi/general.tex(,3122)   print(matrix(v));
../singular_texi/general.tex(,3123) @expansion{} 1,
../singular_texi/general.tex(,3124) @expansion{} 2 
../singular_texi/general.tex(,3125)   module(matrix(i,3,2));
../singular_texi/general.tex(,3126) @expansion{} _[1]=[1,3,5]
../singular_texi/general.tex(,3127) @expansion{} _[2]=[2,4,6]
../singular_texi/general.tex(,3128) @c end example Type_casting general.doc:2743
../singular_texi/general.tex(,3129) @end smallexample
../singular_texi/general.tex(,3130) 
../singular_texi/general.tex(,3131) 
../singular_texi/general.tex(,3132) @c ------------------------------------------------------------
../singular_texi/general.tex(,3133) @node Flow control, ,Type conversion and casting, The SINGULAR language
../singular_texi/general.tex(,3134) @subsection Flow control
../singular_texi/general.tex(,3135) @cindex Flow control
../singular_texi/general.tex(,3136) @cindex block
../singular_texi/general.tex(,3137) 
../singular_texi/general.tex(,3138) A block is a sequence of commands surrounded by @{ and @}.
../singular_texi/general.tex(,3139) @smallexample
../singular_texi/general.tex(,3140) @{
../singular_texi/general.tex(,3141)    command;
../singular_texi/general.tex(,3142)    @dots{}
../singular_texi/general.tex(,3143) @}
../singular_texi/general.tex(,3144) @end smallexample
../singular_texi/general.tex(,3145) Blocks are used whenever @sc{Singular} is used as a structured programming
../singular_texi/general.tex(,3146) language. The @code{if} and @code{else} structures allow conditional
../singular_texi/general.tex(,3147) execution of blocks (see @ref{if}, @ref{else}). @code{for} and @code{while}
../singular_texi/general.tex(,3148) loops are available for repeated execution of blocks (see @ref{for},
../singular_texi/general.tex(,3149) @ref{while}).
../singular_texi/general.tex(,3150) In procedure definitions the main part and the example section are blocks
../singular_texi/general.tex(,3151) as well(see @ref{proc}).
../singular_texi/general.tex(,3152) @menu
../singular_texi/general.tex(,3153) * break::
../singular_texi/general.tex(,3154) * quit::
../singular_texi/general.tex(,3155) * keepring::
../singular_texi/general.tex(,3156) * export::
../singular_texi/general.tex(,3157) * if::
../singular_texi/general.tex(,3158) * else::
../singular_texi/general.tex(,3159) * for::
../singular_texi/general.tex(,3160) * while::
../singular_texi/general.tex(,3161) * proc::
../singular_texi/general.tex(,3162) * return::
../singular_texi/general.tex(,3163) * continue::
../singular_texi/general.tex(,3164) @end menu
../singular_texi/general.tex(,3165) 
../singular_texi/general.tex(,3166) 
../singular_texi/general.tex(,3167) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,3168) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,3169) @node Input and output, Procedures, The SINGULAR language, General concepts
../singular_texi/general.tex(,3170) @section Input and output
../singular_texi/general.tex(,3171) @cindex input
../singular_texi/general.tex(,3172) @cindex output
../singular_texi/general.tex(,3173) 
../singular_texi/general.tex(,3174) @sc{Singular}'s input and output (short, I/O) is realized using links.
../singular_texi/general.tex(,3175) Links are the communication channels of @sc{Singular}, i.e., something
../singular_texi/general.tex(,3176) @sc{Singular} can write to and read from.  In this section, a short
../singular_texi/general.tex(,3177) overview of the usage of links and of the different link types is given.
../singular_texi/general.tex(,3178) 
../singular_texi/general.tex(,3179) For loading of libraries, see @ref{LIB}. For executing program scripts,
../singular_texi/general.tex(,3180) see @ref{filecmd}.
../singular_texi/general.tex(,3181) 
../singular_texi/general.tex(,3182) @subheading Monitoring
../singular_texi/general.tex(,3183) A special form of I/O is monitoring.  When monitoring is enabled,
../singular_texi/general.tex(,3184) @sc{Singular} makes a typescript of everything printed on your terminal
../singular_texi/general.tex(,3185) to a file.  This is
../singular_texi/general.tex(,3186) useful to create a protocol of a @sc{Singular} session.  The
../singular_texi/general.tex(,3187) @code{monitor} command enables and disables this feature
../singular_texi/general.tex(,3188) (@pxref{monitor}).
../singular_texi/general.tex(,3189) 
../singular_texi/general.tex(,3190) 
../singular_texi/general.tex(,3191) @subheading How to use links
../singular_texi/general.tex(,3192) Recall that links are the communication channels of @sc{Singular}, i.e.,
../singular_texi/general.tex(,3193) something @sc{Singular} can write to and read from using the functions
../singular_texi/general.tex(,3194) @code{write} and @code{read}. There are furthermore
../singular_texi/general.tex(,3195) the functions @code{dump} and @code{getdump} which store resp.@:
../singular_texi/general.tex(,3196) retrieve the content of an entire @sc{Singular} session to, resp.@: from,
../singular_texi/general.tex(,3197) a link.  The @code{dump} and @code{getdump} commands are not available
../singular_texi/general.tex(,3198) for DBM links.
../singular_texi/general.tex(,3199) 
../singular_texi/general.tex(,3200) For more information, see @ref{write}, @ref{read}, @ref{dump},
../singular_texi/general.tex(,3201) @ref{getdump}.
../singular_texi/general.tex(,3202) 
../singular_texi/general.tex(,3203) @strong{Example:}
../singular_texi/general.tex(,3204) @smallexample
../singular_texi/general.tex(,3205) @c computed example How_to_use_links general.doc:2830 
../singular_texi/general.tex(,3206)   ring r; poly p = x+y;
../singular_texi/general.tex(,3207)   dump("MPfile:w test.mp");   // dump the session to the file test.mp
../singular_texi/general.tex(,3208)   kill r;                     // kill the basering
../singular_texi/general.tex(,3209)   listvar();
../singular_texi/general.tex(,3210) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/general.tex(,3211)   getdump("MPfile:r test.mp");// read the dump from the file
../singular_texi/general.tex(,3212)   listvar();
../singular_texi/general.tex(,3213) @expansion{} // r                    [0]  *ring
../singular_texi/general.tex(,3214) @expansion{} //      p                    [0]  poly
../singular_texi/general.tex(,3215) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/general.tex(,3216) @c end example How_to_use_links general.doc:2830
../singular_texi/general.tex(,3217) @end smallexample
../singular_texi/general.tex(,3218) 
../singular_texi/general.tex(,3219) Specifying a link can be as easy as specifying a filename as a string.
../singular_texi/general.tex(,3220) Except for MPtcp links, links even do not need to be explicitly opened
../singular_texi/general.tex(,3221) or closed before, resp.@: after, they are used.  To explicitly open or
../singular_texi/general.tex(,3222) close a link, the @code{open}, resp.@: @code{close}, commands may be
../singular_texi/general.tex(,3223) used (see @ref{open}, @ref{close}).
../singular_texi/general.tex(,3224) 
../singular_texi/general.tex(,3225) Links have various properties which can be queried using the
../singular_texi/general.tex(,3226) @code{status} function (@pxref{status}).
../singular_texi/general.tex(,3227) 
../singular_texi/general.tex(,3228) @strong{Example:}
../singular_texi/general.tex(,3229) @smallexample
../singular_texi/general.tex(,3230) @c computed example How_to_use_links_1 general.doc:2851 
../singular_texi/general.tex(,3231)   link l = "MPtcp:fork";
../singular_texi/general.tex(,3232)   l;
../singular_texi/general.tex(,3233) @expansion{} // type : MPtcp
../singular_texi/general.tex(,3234) @expansion{} // mode : fork
../singular_texi/general.tex(,3235) @expansion{} // name : 
../singular_texi/general.tex(,3236) @expansion{} // open : no
../singular_texi/general.tex(,3237) @expansion{} // read : not ready
../singular_texi/general.tex(,3238) @expansion{} // write: not ready
../singular_texi/general.tex(,3239)   open(l);
../singular_texi/general.tex(,3240)   status(l, "open");
../singular_texi/general.tex(,3241) @expansion{} yes
../singular_texi/general.tex(,3242)   close(l);
../singular_texi/general.tex(,3243)   status(l, "open");
../singular_texi/general.tex(,3244) @expansion{} no
../singular_texi/general.tex(,3245) @c end example How_to_use_links_1 general.doc:2851
../singular_texi/general.tex(,3246) @end smallexample
../singular_texi/general.tex(,3247) 
../singular_texi/general.tex(,3248) @subheading ASCII links
../singular_texi/general.tex(,3249) Data that can be converted to a string that can be written into files for
../singular_texi/general.tex(,3250) storage or communication with other programs. The data are written in
../singular_texi/general.tex(,3251) plain ASCII format. Reading from an ASCII link returns a string ---
../singular_texi/general.tex(,3252) conversion into other data is up to the user. This can be done, for
../singular_texi/general.tex(,3253) example, using the command @code{execute} (@pxref{execute}).
../singular_texi/general.tex(,3254) 
../singular_texi/general.tex(,3255) ASCII links should primarily be used for storing small amounts of data,
../singular_texi/general.tex(,3256) especially if it might become necessary to manually inspect or
../singular_texi/general.tex(,3257) manipulate the data.
../singular_texi/general.tex(,3258) 
../singular_texi/general.tex(,3259) @xref{ASCII links}, for more information.
../singular_texi/general.tex(,3260) 
../singular_texi/general.tex(,3261) @strong{Example:}
../singular_texi/general.tex(,3262) @smallexample
../singular_texi/general.tex(,3263) @c computed example ASCII_links general.doc:2876 
../singular_texi/general.tex(,3264)   // (over)write file test.ascii, link is specified as string
../singular_texi/general.tex(,3265)   write(":w test.ascii", "int i =", 3, ";");
../singular_texi/general.tex(,3266)   // reading simply returns the string
../singular_texi/general.tex(,3267)   read("test.ascii");
../singular_texi/general.tex(,3268) @expansion{} int i =
../singular_texi/general.tex(,3269) @expansion{} 3
../singular_texi/general.tex(,3270) @expansion{} ;
../singular_texi/general.tex(,3271) @expansion{} 
../singular_texi/general.tex(,3272)   // but now test.ascii is "executed"
../singular_texi/general.tex(,3273)   execute(read("test.ascii"));
../singular_texi/general.tex(,3274)   i;
../singular_texi/general.tex(,3275) @expansion{} 3
../singular_texi/general.tex(,3276) @c end example ASCII_links general.doc:2876
../singular_texi/general.tex(,3277) @end smallexample
../singular_texi/general.tex(,3278) 
../singular_texi/general.tex(,3279) @subheading MPfile links
../singular_texi/general.tex(,3280) Data is stored in the binary MP format.  Read and write access is very
../singular_texi/general.tex(,3281) fast compared to ASCII links.  All data (including such data that cannot
../singular_texi/general.tex(,3282) be converted to a string) can be written to an MPfile link.  Reading
../singular_texi/general.tex(,3283) from an MPfile link returns the written expressions (i.e., not a string,
../singular_texi/general.tex(,3284) in general).
../singular_texi/general.tex(,3285) 
../singular_texi/general.tex(,3286) MPfile links should primarily be used for storing large amounts of data
../singular_texi/general.tex(,3287) (like dumps of the content of an entire @sc{Singular} session), and if
../singular_texi/general.tex(,3288) the data to be stored cannot be easily converted from or to a string
../singular_texi/general.tex(,3289) (like rings, or maps).
../singular_texi/general.tex(,3290) 
../singular_texi/general.tex(,3291) MPfile links are implemented on Unix-like operating systems only.
../singular_texi/general.tex(,3292) 
../singular_texi/general.tex(,3293) @xref{MPfile links}, for more information.
../singular_texi/general.tex(,3294) 
../singular_texi/general.tex(,3295) @strong{Example:}
../singular_texi/general.tex(,3296) @smallexample
../singular_texi/general.tex(,3297) @c computed example MPfile_links general.doc:2905 
../singular_texi/general.tex(,3298)   ring r;
../singular_texi/general.tex(,3299)   // (over)write MPfile test.mp, link is specified as string
../singular_texi/general.tex(,3300)   write("MPfile:w test.mp", x+y);
../singular_texi/general.tex(,3301)   kill r;
../singular_texi/general.tex(,3302)   def p = read("MPfile:r test.mp");
../singular_texi/general.tex(,3303)   typeof(p); p;
../singular_texi/general.tex(,3304) @expansion{} poly
../singular_texi/general.tex(,3305) @expansion{} x+y
../singular_texi/general.tex(,3306) @c end example MPfile_links general.doc:2905
../singular_texi/general.tex(,3307) @end smallexample
../singular_texi/general.tex(,3308) 
../singular_texi/general.tex(,3309) @subheading MPtcp links
../singular_texi/general.tex(,3310) Data is communicated with other processes (e.g., @sc{Singular}
../singular_texi/general.tex(,3311) processes) which may run on the same computer or on different ones.  Data
../singular_texi/general.tex(,3312) exchange is accomplished using TCP/IP links in the binary MP format.
../singular_texi/general.tex(,3313) Reading from an MPtcp link returns the written expressions (i.e., not a
../singular_texi/general.tex(,3314) string, in general).
../singular_texi/general.tex(,3315) 
../singular_texi/general.tex(,3316) MPtcp links should primarily be used for communications with other
../singular_texi/general.tex(,3317) programs or for parallel computations (see, for example,
../singular_texi/general.tex(,3318) @ref{Parallelization with MPtcp links}).
../singular_texi/general.tex(,3319) 
../singular_texi/general.tex(,3320) MPtcp links are implemented on Unix-like operating systems only.
../singular_texi/general.tex(,3321) 
../singular_texi/general.tex(,3322) @xref{MPtcp links}, for more information.
../singular_texi/general.tex(,3323) 
../singular_texi/general.tex(,3324) @strong{Example:}
../singular_texi/general.tex(,3325) @smallexample
../singular_texi/general.tex(,3326) @c computed example MPtcp_links general.doc:2932 
../singular_texi/general.tex(,3327)   ring r;
../singular_texi/general.tex(,3328)   link l = "MPtcp:launch"; // declare a link explicitly
../singular_texi/general.tex(,3329)   open(l);  // needs an open, launches another SINGULAR as a server
../singular_texi/general.tex(,3330)   write(l, x+y);
../singular_texi/general.tex(,3331)   kill r;
../singular_texi/general.tex(,3332)   def p = read(l);
../singular_texi/general.tex(,3333)   typeof(p); p;
../singular_texi/general.tex(,3334) @expansion{} poly
../singular_texi/general.tex(,3335) @expansion{} x+y
../singular_texi/general.tex(,3336)   close(l); // shuts down SINGULAR server
../singular_texi/general.tex(,3337) @c end example MPtcp_links general.doc:2932
../singular_texi/general.tex(,3338) @end smallexample
../singular_texi/general.tex(,3339) 
../singular_texi/general.tex(,3340) @subheading DBM links
../singular_texi/general.tex(,3341) Data is stored in and accessed from a data base.  Writing is
../singular_texi/general.tex(,3342) accomplished by a key and a value and associates the value with the key
../singular_texi/general.tex(,3343) in the specified data base.  Reading is accomplished w.r.t.@: a key,
../singular_texi/general.tex(,3344) the value associated to it is returned.  Both the key and the value have to
../singular_texi/general.tex(,3345) be specified as strings.  Hence, DBM links may be used only for data
../singular_texi/general.tex(,3346) which may be converted to or from strings.
../singular_texi/general.tex(,3347) 
../singular_texi/general.tex(,3348) DBM links should primarily be used when data needs to be accessed not in a
../singular_texi/general.tex(,3349) sequential way (like with files) but in an associative way (like with
../singular_texi/general.tex(,3350) data bases).
../singular_texi/general.tex(,3351) 
../singular_texi/general.tex(,3352) @xref{DBM links}, for more information.
../singular_texi/general.tex(,3353) 
../singular_texi/general.tex(,3354) @strong{Example:}
../singular_texi/general.tex(,3355) @smallexample
../singular_texi/general.tex(,3356) @c computed example DBM_links general.doc:2960 
../singular_texi/general.tex(,3357)   ring r;
../singular_texi/general.tex(,3358)   // associate "x+y" with "mykey"
../singular_texi/general.tex(,3359)   write("DBM:w test.dbm", "mykey", string(x+y));
../singular_texi/general.tex(,3360)   // get from data base what is stored under "mykey"
../singular_texi/general.tex(,3361)   execute(read("DBM: test.dbm", "mykey"));
../singular_texi/general.tex(,3362) @expansion{} x+y
../singular_texi/general.tex(,3363) @c end example DBM_links general.doc:2960
../singular_texi/general.tex(,3364) @end smallexample
../singular_texi/general.tex(,3365) 
../singular_texi/general.tex(,3366) 
../singular_texi/general.tex(,3367) @c ---------------------------------------------------------------------------
../singular_texi/general.tex(,3368) @node Procedures, Libraries, Input and output, General concepts
../singular_texi/general.tex(,3369) @section Procedures
../singular_texi/general.tex(,3370) @cindex Procedures
../singular_texi/general.tex(,3371) 
../singular_texi/general.tex(,3372) Procedures contain sequences of commands of the @sc{Singular} language.
../singular_texi/general.tex(,3373) They are used to extend
../singular_texi/general.tex(,3374) the set of commands with user defined commands.  Procedures are defined
../singular_texi/general.tex(,3375) by either typing them on the command line or by loading them from a
../singular_texi/general.tex(,3376) so-called library file with the LIB command, see @ref{LIB}.  Procedures are
../singular_texi/general.tex(,3377) invoked like normal built-in commands, i.e., by typing their name
../singular_texi/general.tex(,3378) followed by the list of arguments in parentheses. The invocation then
../singular_texi/general.tex(,3379) executes the sequence of commands stored in the specified procedure. All
../singular_texi/general.tex(,3380) defined procedures can be displayed by the command @code{listvar(proc);}.
../singular_texi/general.tex(,3381) 
../singular_texi/general.tex(,3382) @menu
../singular_texi/general.tex(,3383) * Procedure definition::
../singular_texi/general.tex(,3384) * Names in procedures::
../singular_texi/general.tex(,3385) * Parameter list::
../singular_texi/general.tex(,3386) * Procedure commands::
../singular_texi/general.tex(,3387) @end menu
../singular_texi/general.tex(,3388) @c -------------------------------------------------
../singular_texi/general.tex(,3389) @node Procedure definition, Names in procedures, Procedures, Procedures
../singular_texi/general.tex(,3390) @subsection Procedure definition
../singular_texi/general.tex(,3391) @cindex Procedure definition
../singular_texi/general.tex(,3392) @cindex procedures, static
../singular_texi/general.tex(,3393) @cindex static procedures
../singular_texi/general.tex(,3394) @c ------------------------------------------------------------
../singular_texi/general.tex(,3395) @c   This piece of text exists also in the file types.doc,
../singular_texi/general.tex(,3396) @c   chapter "proc declaration".
../singular_texi/general.tex(,3397) @c   If you change something here, change it there, too!
../singular_texi/general.tex(,3398) @c ------------------------------------------------------------
../singular_texi/general.tex(,3399) @table @strong
../singular_texi/general.tex(,3400) @item Syntax:
../singular_texi/general.tex(,3401) [@code{static}] @code{proc} proc_name [parameter_list]
../singular_texi/general.tex(,3402) @*["help_text"]
../singular_texi/general.tex(,3403) @*@code{@{}
../singular_texi/general.tex(,3404) @*
../singular_texi/general.tex(,3405) @tex
../singular_texi/general.tex(,3406) \quad
../singular_texi/general.tex(,3407) @end tex
../singular_texi/general.tex(,3408)    procedure_body
../singular_texi/general.tex(,3409) @*@code{@}}
../singular_texi/general.tex(,3410) @*[@code{example}
../singular_texi/general.tex(,3411) @*@code{@{}
../singular_texi/general.tex(,3412) @*
../singular_texi/general.tex(,3413) @tex
../singular_texi/general.tex(,3414) \quad
../singular_texi/general.tex(,3415) @end tex
../singular_texi/general.tex(,3416)    sequence_of_commands;
../singular_texi/general.tex(,3417) @*@code{@}}]
../singular_texi/general.tex(,3418) @item Purpose:
../singular_texi/general.tex(,3419) defines a new function, the @code{proc} proc_name, with the additional
../singular_texi/general.tex(,3420) information help_text, which is copied to the screen by
../singular_texi/general.tex(,3421) @code{help proc_name;} and the @code{example} section
../singular_texi/general.tex(,3422) which is executed by @code{example proc_name;}.
../singular_texi/general.tex(,3423) @* The help_text, the parameter_list, and the example section are optional.
../singular_texi/general.tex(,3424) The default for a parameter_list is @code{(list #)}, see @ref{Parameter list}.
../singular_texi/general.tex(,3425) The help and example sections are ignored if the procedure is defined
../singular_texi/general.tex(,3430) interactively, i.e., if it was not loaded from a file by a LIB command
../singular_texi/general.tex(,3431) (@ref{LIB}).
../singular_texi/general.tex(,3433) @* Specifying @code{static} in front of the proc-definition (in a library file)
../singular_texi/general.tex(,3434) makes this procedure local to the library, i.e., accessible only for the other
../singular_texi/general.tex(,3435) procedures in the same library, but not for the users. So there is no
../singular_texi/general.tex(,3436) reason anymore to define a procedure within another one (it just makes
../singular_texi/general.tex(,3437) debugging harder).
../singular_texi/general.tex(,3438) @end table
../singular_texi/general.tex(,3439) 
../singular_texi/general.tex(,3440) @subsubheading Example of an interactive procedure definition
../singular_texi/general.tex(,3441) @smallexample
../singular_texi/general.tex(,3442) @c computed example Example_of_an_interactive_procedure_definition general.doc:3045 
../singular_texi/general.tex(,3443)   proc milnor_number (poly p)
../singular_texi/general.tex(,3444)   @{
../singular_texi/general.tex(,3445)     ideal i= std(jacob(p));
../singular_texi/general.tex(,3446)     int m_nr=vdim(i);
../singular_texi/general.tex(,3447)     if (m_nr<0)
../singular_texi/general.tex(,3448)     @{
../singular_texi/general.tex(,3449)       "// not an isolated singularity";
../singular_texi/general.tex(,3450)     @}
../singular_texi/general.tex(,3451)     return(m_nr);         // the value of m_nr is returned
../singular_texi/general.tex(,3452)   @}
../singular_texi/general.tex(,3453)   ring r1=0,(x,y,z),ds;
../singular_texi/general.tex(,3454)   poly p=x^2+y^2+z^5;
../singular_texi/general.tex(,3455)   milnor_number(p);
../singular_texi/general.tex(,3456) @expansion{} 4
../singular_texi/general.tex(,3457) @c end example Example_of_an_interactive_procedure_definition general.doc:3045
../singular_texi/general.tex(,3458) @end smallexample
../singular_texi/general.tex(,3459) 
../singular_texi/general.tex(,3460) @subsubheading Example of a procedure definition in a library
../singular_texi/general.tex(,3461) First, the library definition:
../singular_texi/general.tex(,3462) @smallexample
../singular_texi/general.tex(,3463) @c begin included file sample.lib from general.doc:3065
../singular_texi/general.tex(,3464) // Example of a user accessible procedure
../singular_texi/general.tex(,3465) proc tab (int n)
../singular_texi/general.tex(,3466) "USAGE:    tab(n);  (n integer)
../singular_texi/general.tex(,3467) RETURNS:  string of n space tabs
../singular_texi/general.tex(,3468) EXAMPLE:  example tab; shows an example"
../singular_texi/general.tex(,3469) @{ return(internal_tab(n)); @}
../singular_texi/general.tex(,3470) example
../singular_texi/general.tex(,3471) @{
../singular_texi/general.tex(,3472)   "EXAMPLE:"; echo=2;
../singular_texi/general.tex(,3473)   for(int n=0; n<=4; n=n+1)
../singular_texi/general.tex(,3474)   @{ tab(4-n)+"*"+tab(n)+"+"+tab(n)+"*"; @}
../singular_texi/general.tex(,3475) @}
../singular_texi/general.tex(,3476) 
../singular_texi/general.tex(,3477) // Example of a static procedure
../singular_texi/general.tex(,3478) static proc internal_tab (int n)
../singular_texi/general.tex(,3479) @{ return(" "[1,n]); @}
../singular_texi/general.tex(,3480) @c end included file from general.doc:3065
../singular_texi/general.tex(,3481) @end smallexample
../singular_texi/general.tex(,3482) 
../singular_texi/general.tex(,3483) Now, we load the library and execute the procedures defined there:
../singular_texi/general.tex(,3484) @smallexample
../singular_texi/general.tex(,3485) @c computed example Example_of_a_procedure_definition_in_a_library general.doc:3070 
../singular_texi/general.tex(,3486)   LIB "sample.lib";        // load the library sample.lib
../singular_texi/general.tex(,3487)   example tab;             // show an example
../singular_texi/general.tex(,3488) @expansion{} // proc tab from lib sample.lib
../singular_texi/general.tex(,3489) @expansion{} EXAMPLE:
../singular_texi/general.tex(,3490) @expansion{}   for(int n=0; n<=4; n=n+1)
../singular_texi/general.tex(,3491) @expansion{}   @{ tab(4-n)+"*"+tab(n)+"+"+tab(n)+"*"; @}
../singular_texi/general.tex(,3492) @expansion{}     *+*
../singular_texi/general.tex(,3493) @expansion{}    * + *
../singular_texi/general.tex(,3494) @expansion{}   *  +  *
../singular_texi/general.tex(,3495) @expansion{}  *   +   *
../singular_texi/general.tex(,3496) @expansion{} *    +    *
../singular_texi/general.tex(,3497) @expansion{} 
../singular_texi/general.tex(,3498)   "*"+tab(3)+"*";          // use the procedure tab
../singular_texi/general.tex(,3499) @expansion{} *   *
../singular_texi/general.tex(,3500)   // the static procedure internal_tab is not accessible
../singular_texi/general.tex(,3501)   "*"+internal_tab(3)+"*";
../singular_texi/general.tex(,3502) @expansion{}    ? 'sample.lib::internal_tab()' is a local procedure and cannot be acce\
../singular_texi/general.tex(,3503)    ssed by an user.
../singular_texi/general.tex(,3504) @expansion{}    ? error occurred in line 5: `  "*"+internal_tab(3)+"*";`
../singular_texi/general.tex(,3505)   // show the help section for tab
../singular_texi/general.tex(,3506)   help tab;
../singular_texi/general.tex(,3507) @expansion{} // ** Could not get IdxFile. 
../singular_texi/general.tex(,3508) @expansion{} // ** Either set environment variable SINGULAR_IDX_FILE to IdxFile,
../singular_texi/general.tex(,3509) @expansion{} // ** or make sure that IdxFile is at /home/hannes/singular/2-0/doc/singu\
../singular_texi/general.tex(,3510)    lar.idx
../singular_texi/general.tex(,3511) @expansion{} // proc tab from lib sample.lib
../singular_texi/general.tex(,3512) @expansion{} proc tab (int n)
../singular_texi/general.tex(,3513) @expansion{} USAGE:    tab(n);  (n integer)
../singular_texi/general.tex(,3514) @expansion{} RETURNS:  string of n space tabs
../singular_texi/general.tex(,3515) @expansion{} EXAMPLE:  example tab; shows an example
../singular_texi/general.tex(,3516) @c end example Example_of_a_procedure_definition_in_a_library general.doc:3070
../singular_texi/general.tex(,3517) @end smallexample
../singular_texi/general.tex(,3518) 
../singular_texi/general.tex(,3519) @subsubheading Guidelines for the help text of a procedure
../singular_texi/general.tex(,3520) There are no enforced rules on the format of the help section of a
../singular_texi/general.tex(,3521) procedure.
../singular_texi/general.tex(,3522) 
../singular_texi/general.tex(,3523) Nevertheless, we recommend that the help text of a procedure should
../singular_texi/general.tex(,3524) contain information about the usage,
../singular_texi/general.tex(,3525) purpose, return values and generated objects. Particular assumptions or
../singular_texi/general.tex(,3526) limitations should be listed. It should also be mentioned if global
../singular_texi/general.tex(,3527) objects are generated or manipulated.
../singular_texi/general.tex(,3528) 
../singular_texi/general.tex(,3529) The help text of procedures contained in libraries of the
../singular_texi/general.tex(,3530) @sc{Singular} distribution
../singular_texi/general.tex(,3531) should furthermore comply with  certain rules as explained in
../singular_texi/general.tex(,3532) @ref{The help string of procedures}.
../singular_texi/general.tex(,3533) 
../singular_texi/general.tex(,3534) @c ---------------------------------------
../singular_texi/general.tex(,3535) @node Names in procedures, Parameter list, Procedure definition, Procedures
../singular_texi/general.tex(,3536) @subsection Names in procedures
../singular_texi/general.tex(,3537) @cindex Names in procedures
../singular_texi/general.tex(,3538) @cindex local names
../singular_texi/general.tex(,3539) 
../singular_texi/general.tex(,3540) All variables are local to the procedure they are defined in.
../singular_texi/general.tex(,3541) Locally defined variables cannot interfere with names in other
../singular_texi/general.tex(,3542) procedures and are automatically deleted after leaving
../singular_texi/general.tex(,3543) the procedure.
../singular_texi/general.tex(,3544) 
../singular_texi/general.tex(,3545) Internally, local variables are stored using the nesting level. A variable
../singular_texi/general.tex(,3546) is said to have nesting level 1, if it is local to a procedure that was
../singular_texi/general.tex(,3547) called interactively, nesting level 2, if it is local to a procedure that
../singular_texi/general.tex(,3548) was called by a procedure of nesting level 1 etc. @code{listvar()} also
../singular_texi/general.tex(,3549) displays the nesting level, nesting level 0 is used for global objects
../singular_texi/general.tex(,3550) (see @ref{listvar}). A ring may be 'moved up' by one nesting level
../singular_texi/general.tex(,3551) with @code{keepring} (see @ref{keepring}). All variables living in that
../singular_texi/general.tex(,3552) ring are moved together with that ring.
../singular_texi/general.tex(,3553) 
../singular_texi/general.tex(,3554) To keep local variables after leaving the procedure, they have to be
../singular_texi/general.tex(,3555) exported (i.e. made known) to some higher level by the @code{export}
../singular_texi/general.tex(,3556) command (@pxref{export}).
../singular_texi/general.tex(,3557) 
../singular_texi/general.tex(,3558) @strong{Example:}
../singular_texi/general.tex(,3559) @smallexample
../singular_texi/general.tex(,3560) @c computed example Names_in_procedures general.doc:3122 
../singular_texi/general.tex(,3561) proc xxx
../singular_texi/general.tex(,3562) @{
../singular_texi/general.tex(,3563)   int k=4;        //defines a local variable k
../singular_texi/general.tex(,3564)   int result=k+2;
../singular_texi/general.tex(,3565)   export(result);  //defines the global variable "result".
../singular_texi/general.tex(,3566) @}
../singular_texi/general.tex(,3567) xxx();
../singular_texi/general.tex(,3568) listvar(all);
../singular_texi/general.tex(,3569) @expansion{} // result               [0]  int 6
../singular_texi/general.tex(,3570) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/general.tex(,3571) @c end example Names_in_procedures general.doc:3122
../singular_texi/general.tex(,3572) @end smallexample
../singular_texi/general.tex(,3573) Note that the variable @code{result} became a global variable after the
../singular_texi/general.tex(,3574) execution of @code{xxx}.
../singular_texi/general.tex(,3575) 
../singular_texi/general.tex(,3576) @c ---------------------------------------
../singular_texi/general.tex(,3577) @node Parameter list, Procedure commands, Names in procedures, Procedures
../singular_texi/general.tex(,3578) @subsection Parameter list
../singular_texi/general.tex(,3579) @cindex Parameter list
../singular_texi/general.tex(,3580) @table @code
../singular_texi/general.tex(,3581) @item @strong{Syntax:}
../singular_texi/general.tex(,3582) @code{( )}
../singular_texi/general.tex(,3583) @*@code{(} parameter_definition @code{)}
../singular_texi/general.tex(,3584) @item @strong{Purpose:}
../singular_texi/general.tex(,3585) defines the number, type and names of the
../singular_texi/general.tex(,3586) arguments to a @code{proc}.
../singular_texi/general.tex(,3587) @*The parameter_list is optional.
../singular_texi/general.tex(,3588) The default for a parameter_list is @code{(list #)}
../singular_texi/general.tex(,3589) which means the arguments are referenced by @code{#[1], #[2]}, etc.
../singular_texi/general.tex(,3590) @item @strong{Example:}
../singular_texi/general.tex(,3591) @smallexample
../singular_texi/general.tex(,3592) proc x0
../singular_texi/general.tex(,3593) @{
../singular_texi/general.tex(,3594)     // can be called with
../singular_texi/general.tex(,3595) ... // any number of arguments of any type: #[1], #[2],...
../singular_texi/general.tex(,3596)     // number of arguments: size(#)
../singular_texi/general.tex(,3597) @}
../singular_texi/general.tex(,3598) 
../singular_texi/general.tex(,3599) proc x1 ()
../singular_texi/general.tex(,3600) @{
../singular_texi/general.tex(,3601) ... // can only be called without arguments
../singular_texi/general.tex(,3602) @}
../singular_texi/general.tex(,3603) 
../singular_texi/general.tex(,3604) proc x2 (ideal i, int j)
../singular_texi/general.tex(,3605) @{
../singular_texi/general.tex(,3606) ... // can only be called with 2 arguments,
../singular_texi/general.tex(,3607)     // which can be converted to ideal resp. int
../singular_texi/general.tex(,3608) @}
../singular_texi/general.tex(,3609) 
../singular_texi/general.tex(,3610) proc x3 (i,j)
../singular_texi/general.tex(,3611) @{
../singular_texi/general.tex(,3612) ... // can only be called with 2 arguments
../singular_texi/general.tex(,3613)     // of any type
../singular_texi/general.tex(,3614)     // (i,j) is the same as (def i,def j)
../singular_texi/general.tex(,3615) @}
../singular_texi/general.tex(,3616) 
../singular_texi/general.tex(,3617) proc x5 (i,list #)
../singular_texi/general.tex(,3618) @{
../singular_texi/general.tex(,3619) ... // can only be called with at least 1 argument
../singular_texi/general.tex(,3620)     // number of arguments: size(#)+1
../singular_texi/general.tex(,3621) @}
../singular_texi/general.tex(,3622) 
../singular_texi/general.tex(,3623) @end smallexample
../singular_texi/general.tex(,3624) @item @strong{Note:}
../singular_texi/general.tex(,3625) @* The parameter_list may stretch across multiple lines.
../singular_texi/general.tex(,3626) @* A parameter may have any type (including the types @code{proc}
../singular_texi/general.tex(,3627)    and @code{ring}). If a parameter is of type ring, then it
../singular_texi/general.tex(,3628)    can only be specified by name, but not with a type, e.g.
../singular_texi/general.tex(,3629) @smallexample
../singular_texi/general.tex(,3630) proc x6 (r)
../singular_texi/general.tex(,3631) @{
../singular_texi/general.tex(,3632) ... // this is correct even if the parameter is a ring
../singular_texi/general.tex(,3633) @}
../singular_texi/general.tex(,3634) 
../singular_texi/general.tex(,3635) proc x7 (ring r)
../singular_texi/general.tex(,3636) @{
../singular_texi/general.tex(,3637) ... // this is NOT CORRECT
../singular_texi/general.tex(,3638) @}
../singular_texi/general.tex(,3639) @end smallexample
../singular_texi/general.tex(,3640) @end table
../singular_texi/general.tex(,3641) 
../singular_texi/general.tex(,3642) @c --------------------------------------- ----------
../singular_texi/general.tex(,3643) @node Procedure commands, , Parameter list, Procedures
../singular_texi/general.tex(,3644) @subsection Procedure commands
../singular_texi/general.tex(,3645) @cindex Procedure commands
../singular_texi/general.tex(,3646) 
../singular_texi/general.tex(,3647) Some commands only make sense inside a procedure, since they make
../singular_texi/general.tex(,3648) objects known to the nesting level from which the procedure was called
../singular_texi/general.tex(,3649) or to all nesting levels.
../singular_texi/general.tex(,3650) 
../singular_texi/general.tex(,3651) @c inserted refs from general.doc:3211
../singular_texi/general.tex(,3661) See
../singular_texi/general.tex(,3662) @ref{export};
../singular_texi/general.tex(,3663) @ref{keepring};
../singular_texi/general.tex(,3664) @ref{return}.
../singular_texi/general.tex(,3666) @c end inserted refs from general.doc:3211
../singular_texi/general.tex(,3667) 
../singular_texi/general.tex(,3668) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,3669) @node Libraries, Guidelines for writing a library, Procedures, General concepts
../singular_texi/general.tex(,3670) @section Libraries
../singular_texi/general.tex(,3671) @cindex Libraries
../singular_texi/general.tex(,3672) 
../singular_texi/general.tex(,3673) A library is a collection of @sc{Singular}
../singular_texi/general.tex(,3674) procedures in a file.
../singular_texi/general.tex(,3675) @*@sc{Singular} reads a library with the command
../singular_texi/general.tex(,3676) @code{LIB}. General information about the library is displayed by the command
../singular_texi/general.tex(,3677) @code{help libname_lib}. After loading the library, its procedures can be used
../singular_texi/general.tex(,3678) like the built-in @sc{Singular} functions.
../singular_texi/general.tex(,3679) 
../singular_texi/general.tex(,3680) To have the full functionality of a built-in function libraries have to
../singular_texi/general.tex(,3681) comply with the few syntax rules described below.
../singular_texi/general.tex(,3682) 
../singular_texi/general.tex(,3683) Furthermore, libraries which are to be included in the @sc{Singular}
../singular_texi/general.tex(,3684) distribution, have to comply with certain rules as explained in
../singular_texi/general.tex(,3685) @ref{Guidelines for writing a library}.
../singular_texi/general.tex(,3686) 
../singular_texi/general.tex(,3687) @menu
../singular_texi/general.tex(,3688) * Loading of a library::
../singular_texi/general.tex(,3689) * Format of a library::
../singular_texi/general.tex(,3690) @end menu
../singular_texi/general.tex(,3691) 
../singular_texi/general.tex(,3692) @c ---------------------------------------
../singular_texi/general.tex(,3693) @node Loading of a library, Format of a library,, Libraries
../singular_texi/general.tex(,3694) @subsection Loading of a library
../singular_texi/general.tex(,3695) @cindex Loading of a library
../singular_texi/general.tex(,3696) @cindex path
../singular_texi/general.tex(,3697) @cindex SearchPath
../singular_texi/general.tex(,3698) @cindex RootDir
../singular_texi/general.tex(,3699) @cindex BinDir
../singular_texi/general.tex(,3700) @cindex DefaultDir
../singular_texi/general.tex(,3701) @cindex SINGULARPATH
../singular_texi/general.tex(,3702) 
../singular_texi/general.tex(,3703) Libraries can be loaded with the @code{LIB} command:
../singular_texi/general.tex(,3704) 
../singular_texi/general.tex(,3705) @c ------------------------------------------------------------
../singular_texi/general.tex(,3706) @c   This piece of text exists also in the file reference.doc,
../singular_texi/general.tex(,3707) @c   chapter "LIB".
../singular_texi/general.tex(,3708) @c   chapter "load".
../singular_texi/general.tex(,3709) @c   If you change something here, change it there, too!
../singular_texi/general.tex(,3710) @c ------------------------------------------------------------
../singular_texi/general.tex(,3711) @table @code
../singular_texi/general.tex(,3712) @item @strong{Syntax:}
../singular_texi/general.tex(,3713) @code{LIB} string_expression @code{;}
../singular_texi/general.tex(,3714) @item @strong{Type:}
../singular_texi/general.tex(,3715) none
../singular_texi/general.tex(,3716) @item @strong{Purpose:}
../singular_texi/general.tex(,3717) reads a library of procedures from a file. If the given filename does
../singular_texi/general.tex(,3718) not start with @kbd{.} or @kbd{/} and can not be located in the current
../singular_texi/general.tex(,3719) directory, each directory contained in the library
../singular_texi/general.tex(,3720) @code{SearchPath} is searched for file of this name.
../singular_texi/general.tex(,3721) @item @strong{Note on SearchPath:}
../singular_texi/general.tex(,3722) The the library @code{SearchPath} is constructed at @sc{Singular}
../singular_texi/general.tex(,3723) start-up time as follows:
../singular_texi/general.tex(,3724) @enumerate
../singular_texi/general.tex(,3725) @item
../singular_texi/general.tex(,3726) the directories contained in the environment variable
../singular_texi/general.tex(,3727) @code{SINGULARPATH} are appended
../singular_texi/general.tex(,3728) 
../singular_texi/general.tex(,3729) @item
../singular_texi/general.tex(,3730) the directories @code{$BinDir/LIB}, @code{$RootDir/LIB},
../singular_texi/general.tex(,3731) @code{$RootDir/../LIB}, @code{$DefaultDir/LIB}, @code{$DefaultDir/../LIB}
../singular_texi/general.tex(,3732) are appended, where
../singular_texi/general.tex(,3733) @itemize @bullet
../singular_texi/general.tex(,3734) @item @code{$BinDir}
../singular_texi/general.tex(,3735) is the value of the environment variable
../singular_texi/general.tex(,3736) @code{SINGULAR_BIN_DIR}, if set, or, if not set, the directory in which the
../singular_texi/general.tex(,3737) @sc{Singular} program
../singular_texi/general.tex(,3738) resides
../singular_texi/general.tex(,3739) @item @code{$RootDir}
../singular_texi/general.tex(,3740) is the value of the environment variable
../singular_texi/general.tex(,3741) @code{SINGULAR_ROOT_DIR}, if set, or, if not set, @code{$BinDir/../}.
../singular_texi/general.tex(,3742) @item @code{$DefaultDir}
../singular_texi/general.tex(,3743) is the value of the environment variable
../singular_texi/general.tex(,3744) @code{SINGULAR_DEFAULT_DIR}, if set, or @code{/usr/local/Singular/} on a
../singular_texi/general.tex(,3745) Unix platform, @code{\Singular\} on a Windows 95/98/NT platform, and
../singular_texi/general.tex(,3746) @code{::Singular:} on a Macintosh.
../singular_texi/general.tex(,3747) @end itemize
../singular_texi/general.tex(,3748) 
../singular_texi/general.tex(,3749) @item
../singular_texi/general.tex(,3750) all directories which do not exist are removed from the @code{SearchPath}.
../singular_texi/general.tex(,3751) @end enumerate
../singular_texi/general.tex(,3752) 
../singular_texi/general.tex(,3753) For setting environment variables see @ref{system}, or consult the manual of
../singular_texi/general.tex(,3754) your shell.
../singular_texi/general.tex(,3755) 
../singular_texi/general.tex(,3756) The library @code{SearchPath} can be examined  by starting up
../singular_texi/general.tex(,3757) @sc{Singular} with the option @code{-v}, or by issuing the command
../singular_texi/general.tex(,3758) @code{system("--version");}.
../singular_texi/general.tex(,3759) 
../singular_texi/general.tex(,3760) @item @strong{Note on standard.lib:}
../singular_texi/general.tex(,3761) Unless  @sc{Singular} is started with the @code{--no-stdlib} option, the
../singular_texi/general.tex(,3762) library @code{standard.lib} is automatically loaded at start-up time.
../singular_texi/general.tex(,3763) 
../singular_texi/general.tex(,3764) @end table
../singular_texi/general.tex(,3765) 
../singular_texi/general.tex(,3766) Only the names of the procedures in the library are loaded, the body of
../singular_texi/general.tex(,3767) the procedures is read during the first call of this procedure. This minimizes
../singular_texi/general.tex(,3768) memory consumption by unused procedures.  When @sc{Singular} is started
../singular_texi/general.tex(,3769) with the @code{-q} or @code{--quiet} option, no message about the
../singular_texi/general.tex(,3770) loading of a library is displayed.  More precisely, option @code{-q} (and
../singular_texi/general.tex(,3771) likewise @code{--quiet}) unsets option @code{loadLib} to inhibit
../singular_texi/general.tex(,3772) monitoring of library loading (@pxref{option}).
../singular_texi/general.tex(,3773) 
../singular_texi/general.tex(,3774) All loaded libraries are displayed by the @code{LIB;}
../singular_texi/general.tex(,3775) command:
../singular_texi/general.tex(,3776) @smallexample
../singular_texi/general.tex(,3777) @c computed example Loading_of_a_library general.doc:3327 
../singular_texi/general.tex(,3778)   option(loadLib);   // show loading of libraries;
../singular_texi/general.tex(,3779)                      // standard.lib is loaded
../singular_texi/general.tex(,3780)   LIB;
../singular_texi/general.tex(,3781) @expansion{} standard.lib
../singular_texi/general.tex(,3782)                      // the names of the procedures of inout.lib
../singular_texi/general.tex(,3783)   LIB "inout.lib";   // are now known to Singular
../singular_texi/general.tex(,3784) @expansion{} // ** loaded inout.lib (1.21.2.5,2002/06/12)
../singular_texi/general.tex(,3785)   LIB;
../singular_texi/general.tex(,3786) @expansion{} standard.lib,inout.lib
../singular_texi/general.tex(,3787) @c end example Loading_of_a_library general.doc:3327
../singular_texi/general.tex(,3788) @end smallexample
../singular_texi/general.tex(,3789) 
../singular_texi/general.tex(,3790) @c inserted refs from general.doc:3337
../singular_texi/general.tex(,3805) See
../singular_texi/general.tex(,3806) @ref{Command line options};
../singular_texi/general.tex(,3807) @ref{LIB};
../singular_texi/general.tex(,3808) @ref{Procedures and libraries};
../singular_texi/general.tex(,3809) @ref{SINGULAR libraries};
../singular_texi/general.tex(,3810) @ref{proc};
../singular_texi/general.tex(,3811) @ref{standard_lib};
../singular_texi/general.tex(,3812) @ref{string};
../singular_texi/general.tex(,3813) @ref{system}.
../singular_texi/general.tex(,3815) @c end inserted refs from general.doc:3337
../singular_texi/general.tex(,3816) 
../singular_texi/general.tex(,3817) @c ---------------------------------------
../singular_texi/general.tex(,3818) @node Format of a library,, Loading of a library, Libraries
../singular_texi/general.tex(,3819) @subsection Format of a library
../singular_texi/general.tex(,3820) @cindex Format of a library
../singular_texi/general.tex(,3821) 
../singular_texi/general.tex(,3822) A library file can contain comments, a category-, info- and version-string
../singular_texi/general.tex(,3823) definition, @code{LIB} commands, @code{proc} commands
../singular_texi/general.tex(,3824) and @code{proc} commands with @code{example} and @code{help} sections,
../singular_texi/general.tex(,3825) i.e., the following keywords are allowed:
../singular_texi/general.tex(,3826) @code{category},
../singular_texi/general.tex(,3827) @code{info},
../singular_texi/general.tex(,3828) @code{version},
../singular_texi/general.tex(,3829) @code{LIB},
../singular_texi/general.tex(,3830) @code{/* ... */},
../singular_texi/general.tex(,3831) @code{//},
../singular_texi/general.tex(,3832) @code{[static] proc}.
../singular_texi/general.tex(,3833) Anything else is not recognized by the parser of @sc{Singular} and leads
../singular_texi/general.tex(,3834) to an error message while loading the library.
../singular_texi/general.tex(,3835) If an error occurs, loading is aborted and an error message is displayed,
../singular_texi/general.tex(,3836) specifying the type of error and the line where it was detected.
../singular_texi/general.tex(,3837) 
../singular_texi/general.tex(,3838) The category-, info- and version-string are defined as follows:
../singular_texi/general.tex(,3839) @cindex  info in a library
../singular_texi/general.tex(,3840) @table @code
../singular_texi/general.tex(,3841) @item @strong{Syntax:}
../singular_texi/general.tex(,3842) @code{info} = string_constant @code{;}
../singular_texi/general.tex(,3843) @item @strong{Purpose:}
../singular_texi/general.tex(,3844) defines the general help for the library. This text is displayed on
../singular_texi/general.tex(,3845) @code{help libname_lib;}.
../singular_texi/general.tex(,3846) @item @strong{Example:}
../singular_texi/general.tex(,3847) @smallexample
../singular_texi/general.tex(,3848) info="
../singular_texi/general.tex(,3849)       This could be the general help of a library.
../singular_texi/general.tex(,3850)      Quotes must be escaped with a \ such as \"
../singular_texi/general.tex(,3851) ";
../singular_texi/general.tex(,3852) @end smallexample
../singular_texi/general.tex(,3853) @item @strong{Note:}
../singular_texi/general.tex(,3854) In the info-string the characters \ and " must be preceded by a \ (escaped).
../singular_texi/general.tex(,3855) It is recommended that the info string is placed on the top of a
../singular_texi/general.tex(,3856) library file and contains general information about the library as well
../singular_texi/general.tex(,3857) as a listing of all procedures available to the users (with a one line
../singular_texi/general.tex(,3858) description of each procedure).
../singular_texi/general.tex(,3859) 
../singular_texi/general.tex(,3860) Although there is no enforced format of the info string of a library, we
../singular_texi/general.tex(,3861) recommend that you follow certain rules as explained in
../singular_texi/general.tex(,3862) @ref{The help string of a library}.
../singular_texi/general.tex(,3863) @end table
../singular_texi/general.tex(,3864) 
../singular_texi/general.tex(,3865) @cindex  version in a library
../singular_texi/general.tex(,3866) @table @code
../singular_texi/general.tex(,3867) @item @strong{Syntax:}
../singular_texi/general.tex(,3868) @code{version} = string_constant @code{;}
../singular_texi/general.tex(,3869) @item @strong{Purpose:}
../singular_texi/general.tex(,3870) defines the version number for the library. It is displayed when the
../singular_texi/general.tex(,3871) library is loaded.
../singular_texi/general.tex(,3872) @item @strong{Example:}
../singular_texi/general.tex(,3873) @smallexample
../singular_texi/general.tex(,3874) version="$I@comment
../singular_texi/general.tex(,3875) @comment !! Do not erase the @comment at the end of the previous line !!
../singular_texi/general.tex(,3876) @comment !! It prevents cvs to substitute the id string                !!
../singular_texi/general.tex(,3877) d: sample.lib,v 1.2 1998/05/07 singular Exp $";
../singular_texi/general.tex(,3878) version="some version string";
../singular_texi/general.tex(,3879) @end smallexample
../singular_texi/general.tex(,3880) @item @strong{Note:}
../singular_texi/general.tex(,3881) It is common practice to simply define the version string to be
../singular_texi/general.tex(,3882) @code{"$I}@comment
../singular_texi/general.tex(,3883) @comment !! Do not erase the @comment at the end of the previous line !!
../singular_texi/general.tex(,3884) @comment !! It prevents cvs to substitute the id string                !!
../singular_texi/general.tex(,3885) @code{d:$"} and let a version control system expand it.
../singular_texi/general.tex(,3886) @end table
../singular_texi/general.tex(,3887) 
../singular_texi/general.tex(,3888) @cindex  category in a library
../singular_texi/general.tex(,3889) @table @code
../singular_texi/general.tex(,3890) @item @strong{Syntax:}
../singular_texi/general.tex(,3891) @code{category} = string_constant @code{;}
../singular_texi/general.tex(,3892) @item @strong{Purpose:}
../singular_texi/general.tex(,3893) defines the category for the library.
../singular_texi/general.tex(,3894) @item @strong{Example:}
../singular_texi/general.tex(,3895) @smallexample
../singular_texi/general.tex(,3896) category="Utilities";
../singular_texi/general.tex(,3897) @end smallexample
../singular_texi/general.tex(,3898) @item @strong{Note:}
../singular_texi/general.tex(,3899) reserved for sorting the libraries into categories.
../singular_texi/general.tex(,3900) @end table
../singular_texi/general.tex(,3901) 
../singular_texi/general.tex(,3902) @c ---------------------------------------
../singular_texi/general.tex(,3903) @node Guidelines for writing a library, Debugging tools, Libraries, General concepts
../singular_texi/general.tex(,3904) @section Guidelines for writing a library
../singular_texi/general.tex(,3905) @cindex Guidelines for writing a library
../singular_texi/general.tex(,3906) @cindex library, Guidelines for writing
../singular_texi/general.tex(,3907) 
../singular_texi/general.tex(,3908) Although there are very few enforced rules on how libraries are written
../singular_texi/general.tex(,3909) (see @ref{Libraries}), it is recommended that the libraries comply with
../singular_texi/general.tex(,3910) the guidelines explained in this section, so that debugging and
../singular_texi/general.tex(,3911) understanding are made easier.
../singular_texi/general.tex(,3912) 
../singular_texi/general.tex(,3913) @strong{Note:} For libraries which are to be included in the @sc{Singular}
../singular_texi/general.tex(,3914) distribution, the following guidelines are mandatory.
../singular_texi/general.tex(,3915) 
../singular_texi/general.tex(,3916) @menu
../singular_texi/general.tex(,3917) * Procedures in a library::
../singular_texi/general.tex(,3918) * Documentation of a library::
../singular_texi/general.tex(,3919) * Typesetting of help strings::
../singular_texi/general.tex(,3920) * The help string of a library::
../singular_texi/general.tex(,3921) * The help string of procedures::
../singular_texi/general.tex(,3922) * template_lib::
../singular_texi/general.tex(,3923) @end menu
../singular_texi/general.tex(,3924) 
../singular_texi/general.tex(,3925) @c ---------------------------------------
../singular_texi/general.tex(,3926) @node Procedures in a library, Documentation of a library,,Guidelines for writing a library
../singular_texi/general.tex(,3927) 
../singular_texi/general.tex(,3928) @subsection Procedures in a library
../singular_texi/general.tex(,3929) @cindex Procedures in a library
../singular_texi/general.tex(,3930) @cindex library, procedures
../singular_texi/general.tex(,3931) 
../singular_texi/general.tex(,3932) In this section we list miscellaneous recommendations on how procedures
../singular_texi/general.tex(,3933) contained in a library should be implemented.
../singular_texi/general.tex(,3934) @enumerate
../singular_texi/general.tex(,3935) @item
../singular_texi/general.tex(,3936) The info- and version-string should appear at the beginning of the
../singular_texi/general.tex(,3937) library, before procedure definitions.
../singular_texi/general.tex(,3938) 
../singular_texi/general.tex(,3939) @item
../singular_texi/general.tex(,3940) The info-string should have the format as explained in @ref{The help
../singular_texi/general.tex(,3941) string of a library}.
../singular_texi/general.tex(,3942) 
../singular_texi/general.tex(,3943) @item
../singular_texi/general.tex(,3944) Each procedure which should not be accessible by users should be
../singular_texi/general.tex(,3945) declared @code{static}.
../singular_texi/general.tex(,3946) 
../singular_texi/general.tex(,3947) @item
../singular_texi/general.tex(,3948) Each procedure which is not declared @code{static} should have a
../singular_texi/general.tex(,3949) help and example section as explained in @ref{Procedure definition}.
../singular_texi/general.tex(,3950) @*Such procedures should furthermore carefully check any assumptions
../singular_texi/general.tex(,3951) made about their input (like the type of list elements), and, if
../singular_texi/general.tex(,3952) necessary, omit an error using the  function @ref{ERROR}.
../singular_texi/general.tex(,3953) 
../singular_texi/general.tex(,3954) @item
../singular_texi/general.tex(,3955) No procedures should be defined within the body of another procedure.
../singular_texi/general.tex(,3956) 
../singular_texi/general.tex(,3957) @item
../singular_texi/general.tex(,3958) If the value of
../singular_texi/general.tex(,3959) the reserved variable @code{printlevel} (@pxref{printlevel}) is greater
../singular_texi/general.tex(,3960) than 0 then interactive user-input, i.e., the usage of functions like
../singular_texi/general.tex(,3961) @code{pause("..")} or @code{read("");} (@pxref{read}), may be requested.
../singular_texi/general.tex(,3962) 
../singular_texi/general.tex(,3963) @item
../singular_texi/general.tex(,3964) If the value of
../singular_texi/general.tex(,3965) the reserved variable @code{printlevel} (@pxref{printlevel}) is 0
../singular_texi/general.tex(,3966) then interactive user-input, i.e., the usage of functions like
../singular_texi/general.tex(,3967) @code{pause("..")} or @code{read("");} (@pxref{read}), may @strong{not} be
../singular_texi/general.tex(,3968) requested. Instead, an error (using the function
../singular_texi/general.tex(,3969) @ref{ERROR}) should be reported together with the recommendation on
../singular_texi/general.tex(,3970) increasing the value of the reserved variable @code{printlevel}.
../singular_texi/general.tex(,3971) 
../singular_texi/general.tex(,3972) @item
../singular_texi/general.tex(,3973) It is often useful for a procedure to print out comments, either to
../singular_texi/general.tex(,3974) explain results or to display intermediate computations. However,
../singular_texi/general.tex(,3975) if this procedure is called by another procedure, such comments are
../singular_texi/general.tex(,3976) confusing and disturbing in most cases.
../singular_texi/general.tex(,3977) 
../singular_texi/general.tex(,3978) @sc{Singular} offers an elegant solution, which requires the usage of
../singular_texi/general.tex(,3979) the @sc{Singular} function @ref{dbprint} and the reserved variables
../singular_texi/general.tex(,3980) @ref{printlevel}, and @ref{voice} (@code{voice} counts the nesting of
../singular_texi/general.tex(,3981) procedures; It has the value 1 on the top level, 2 inside the first
../singular_texi/general.tex(,3982) procedure etc.; @code{printlevel} has the value 0 by default, but can be
../singular_texi/general.tex(,3983) set to any integer value by the user).
../singular_texi/general.tex(,3984) 
../singular_texi/general.tex(,3985) For example, if the following procedure @code{Test} is called
../singular_texi/general.tex(,3986) directly from the top level then @samp{comment1} is displayed (i.e.,
../singular_texi/general.tex(,3987) printed out) but not
../singular_texi/general.tex(,3988) @samp{comment2}; and nothing is displayed if  @code{Test} is called
../singular_texi/general.tex(,3989) from within any other procedure.
../singular_texi/general.tex(,3990) However, if @code{printlevel} is set to  a value k with k>0, then
../singular_texi/general.tex(,3991) @samp{comment1} (resp.@: @samp{comment2}) is displayed provided that
../singular_texi/general.tex(,3992) @code{Test} is called from other procedures, with a nesting level up to
../singular_texi/general.tex(,3993) k (resp.@: k-1).
../singular_texi/general.tex(,3994) 
../singular_texi/general.tex(,3995) Note furthermore, that the example part of a procedure
../singular_texi/general.tex(,3996) behaves in this respect like a procedure (i.e., the value of @code{voice}
../singular_texi/general.tex(,3997) is 1). Therefore, the command @code{printlevel=1;} is necessary for
../singular_texi/general.tex(,3998) @samp{comment1} to be displayed on @code{ example Test;}. However,
../singular_texi/general.tex(,3999) since printlevel is a global variable, it should be reset to the old
../singular_texi/general.tex(,4000) value at the end of the example part.
../singular_texi/general.tex(,4001) 
../singular_texi/general.tex(,4002) @smallexample
../singular_texi/general.tex(,4003) proc Test
../singular_texi/general.tex(,4004) "USAGE:   ...
../singular_texi/general.tex(,4005)          ...
../singular_texi/general.tex(,4006) EXAMPLE: example Test; shows an example
../singular_texi/general.tex(,4007) "
../singular_texi/general.tex(,4008) @{   ...
../singular_texi/general.tex(,4009)    int p = printlevel - voice + 3;
../singular_texi/general.tex(,4010)     ...
../singular_texi/general.tex(,4011)    dbprint(p,"comment1");
../singular_texi/general.tex(,4012)    dbprint(p-1,"comment2");
../singular_texi/general.tex(,4013)    // dbprint prints only if p > 0
../singular_texi/general.tex(,4014)     ...
../singular_texi/general.tex(,4015) @}
../singular_texi/general.tex(,4016) example
../singular_texi/general.tex(,4017) @{ "EXAMPLE:"; echo = 2;
../singular_texi/general.tex(,4018)    int p = printlevel;   //store old value of printlevel
../singular_texi/general.tex(,4019)    printlevel = 1;       //assign new value to printlevel
../singular_texi/general.tex(,4020)     ...
../singular_texi/general.tex(,4021)    Test();
../singular_texi/general.tex(,4022)    printlevel = p;       //reset printlevel to old value
../singular_texi/general.tex(,4023) @}
../singular_texi/general.tex(,4024) @end smallexample
../singular_texi/general.tex(,4025) 
../singular_texi/general.tex(,4026) @end enumerate
../singular_texi/general.tex(,4027) @c @end table
../singular_texi/general.tex(,4028) 
../singular_texi/general.tex(,4029) @c ---------------------------------------
../singular_texi/general.tex(,4030) @node Documentation of a library, Typesetting of help strings, Procedures in a library, Guidelines for writing a library
../singular_texi/general.tex(,4031) 
../singular_texi/general.tex(,4032) @subsection Documentation of a library
../singular_texi/general.tex(,4033) @cindex Documentation of a library
../singular_texi/general.tex(,4034) @cindex library, documentation
../singular_texi/general.tex(,4035) 
../singular_texi/general.tex(,4036) The typesetting language in which the @sc{Singular} documentation is
../singular_texi/general.tex(,4037) written is @code{texinfo}. Based on various tools, @code{info, dvi, ps,} and
../singular_texi/general.tex(,4038) @code{html} versions of the @code{texinfo} documentation are generated.
../singular_texi/general.tex(,4039) 
../singular_texi/general.tex(,4040) 
../singular_texi/general.tex(,4041) Starting with @sc{Singular} version 1-3, the @code{texinfo}
../singular_texi/general.tex(,4042) documentation of all libraries of the @sc{Singular} distribution is
../singular_texi/general.tex(,4043) generated automatically from their source code.
../singular_texi/general.tex(,4044) 
../singular_texi/general.tex(,4045) More precisely, for each library,
../singular_texi/general.tex(,4046) @itemize @minus
../singular_texi/general.tex(,4047) @item
../singular_texi/general.tex(,4048) the info string of the library is parsed and typeset
../singular_texi/general.tex(,4049) as explained in @ref{Typesetting of help strings}.
../singular_texi/general.tex(,4050) 
../singular_texi/general.tex(,4051) @item
../singular_texi/general.tex(,4052) the help string of each procedure listed in the @code{PROCEDURE:}
../singular_texi/general.tex(,4053) section of the library info string is parsed
../singular_texi/general.tex(,4054) and typeset as explained in @ref{Typesetting of help strings}.
../singular_texi/general.tex(,4055) 
../singular_texi/general.tex(,4056) @item
../singular_texi/general.tex(,4057) the example of each procedure listed in the @code{PROCEDURE:} section of
../singular_texi/general.tex(,4058) the library info string is computed and its output is
../singular_texi/general.tex(,4059) included into the documentation.
../singular_texi/general.tex(,4060) @end itemize
../singular_texi/general.tex(,4061) 
../singular_texi/general.tex(,4062) For a uniform look-and-feel of the library documentation, library
../singular_texi/general.tex(,4063) developers should
../singular_texi/general.tex(,4064) @itemize @minus
../singular_texi/general.tex(,4065) @item
../singular_texi/general.tex(,4066) follow the recommendation of
../singular_texi/general.tex(,4067) @ref{The help string of a library} and @ref{The help string of
../singular_texi/general.tex(,4068) procedures}.
../singular_texi/general.tex(,4069) 
../singular_texi/general.tex(,4070) @item
../singular_texi/general.tex(,4071) consult the source code of libraries like
../singular_texi/general.tex(,4072) @code{template.lib} (@pxref{template_lib})
../singular_texi/general.tex(,4073) for examples on how library documentations are
../singular_texi/general.tex(,4074) written.
../singular_texi/general.tex(,4075) 
../singular_texi/general.tex(,4076) @item
../singular_texi/general.tex(,4077) make sure that each procedure listed in the @code{PROCEDURE:}
../singular_texi/general.tex(,4078) section of the library info string has a help string and an example
../singular_texi/general.tex(,4079) section.
../singular_texi/general.tex(,4080) 
../singular_texi/general.tex(,4081) @item
../singular_texi/general.tex(,4082) not use interactive functions like
../singular_texi/general.tex(,4083) @code{pause("..")} or @code{read("");} (@pxref{read}) and should limit the
../singular_texi/general.tex(,4084) length of input lines to 60 characters in the example section of
../singular_texi/general.tex(,4085) procedures.
../singular_texi/general.tex(,4086) 
../singular_texi/general.tex(,4087) @item
../singular_texi/general.tex(,4088) carefully check the generated
../singular_texi/general.tex(,4089) documentation of their libraries in its various formats using the
../singular_texi/general.tex(,4090) @code{lib2doc} (@pxref{lib2doc}) utility.
../singular_texi/general.tex(,4091) @end itemize
../singular_texi/general.tex(,4092) 
../singular_texi/general.tex(,4093) @menu
../singular_texi/general.tex(,4094) * lib2doc::
../singular_texi/general.tex(,4095) @end menu
../singular_texi/general.tex(,4096) 
../singular_texi/general.tex(,4097) @node lib2doc,,,Documentation of a library
../singular_texi/general.tex(,4098) @subsubsection lib2doc
../singular_texi/general.tex(,4099) @cindex lib2doc
../singular_texi/general.tex(,4100) 
../singular_texi/lib2doc.texi(,4) 
../singular_texi/lib2doc.texi(,5) @code{lib2doc} is a utility to generate the stand-alone documentation for 
../singular_texi/lib2doc.texi(,6) a @sc{Singular} library in various formats. 
../singular_texi/lib2doc.texi(,7) 
../singular_texi/lib2doc.texi(,8) The @code{lib2doc} utility should be used by developers of @sc{Singular}
../singular_texi/lib2doc.texi(,9) libraries to check the generation of the documentation of their
../singular_texi/lib2doc.texi(,10) libraries.
../singular_texi/lib2doc.texi(,11) 
../singular_texi/lib2doc.texi(,12) @code{lib2doc} can be downloaded from @*
../singular_texi/lib2doc.texi(,13) @url{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/misc/lib2doc.tar.gz}
../singular_texi/lib2doc.texi(,14) 
../singular_texi/lib2doc.texi(,15) 
../singular_texi/lib2doc.texi(,16) @strong{Important:} 
../singular_texi/lib2doc.texi(,17) @*To use @code{lib2doc}, you need 
../singular_texi/lib2doc.texi(,18) to have @code{perl} (version 5 or
../singular_texi/lib2doc.texi(,19) higher), @code{texinfo} (version 3.12 or higher)  and @code{Singular}
../singular_texi/lib2doc.texi(,20) and @code{libparse} (version 1-3-4 or higher) installed on your system.
../singular_texi/lib2doc.texi(,21) 
../singular_texi/lib2doc.texi(,22) To generate the documentation for a library, follow these steps:
../singular_texi/lib2doc.texi(,23) @enumerate
../singular_texi/lib2doc.texi(,24) @item
../singular_texi/lib2doc.texi(,25) Unpack lib2doc.tar.gz
../singular_texi/lib2doc.texi(,26) @smallexample
../singular_texi/lib2doc.texi(,27) gzip -dc  lib2doc.tar.gz | tar -pxf -
../singular_texi/lib2doc.texi(,28) @end smallexample
../singular_texi/lib2doc.texi(,29) and 
../singular_texi/lib2doc.texi(,30) @smallexample
../singular_texi/lib2doc.texi(,31) cd lib2doc
../singular_texi/lib2doc.texi(,32) @end smallexample
../singular_texi/lib2doc.texi(,33) 
../singular_texi/lib2doc.texi(,34) @item 
../singular_texi/lib2doc.texi(,35) Edit the beginning of the file @code{Makefile}, filling in the values for
../singular_texi/lib2doc.texi(,36) @code{SINGULAR} and @code{LIBPARSE}. Check also the values of @code{PERL} 
../singular_texi/lib2doc.texi(,37) and @code{LATEX2HTML}.
../singular_texi/lib2doc.texi(,38) 
../singular_texi/lib2doc.texi(,39) @item 
../singular_texi/lib2doc.texi(,40) Copy your library to the current directory:
../singular_texi/lib2doc.texi(,41) @smallexample
../singular_texi/lib2doc.texi(,42) cp <path-where-your-lib-is>/mylib.lib .
../singular_texi/lib2doc.texi(,43) @end smallexample
../singular_texi/lib2doc.texi(,44) 
../singular_texi/lib2doc.texi(,45) @item 
../singular_texi/lib2doc.texi(,46) Now you can run the following commands:
../singular_texi/lib2doc.texi(,47) @table @code
../singular_texi/lib2doc.texi(,48) @item make mylib.hlp
../singular_texi/lib2doc.texi(,49) Generates the file @code{mylib.hlp} -- the info file for the documentation
../singular_texi/lib2doc.texi(,50) of @code{mylib.lib}. This file can be viewed with
../singular_texi/lib2doc.texi(,51) @smallexample
../singular_texi/lib2doc.texi(,52) info -f mylib.hlp
../singular_texi/lib2doc.texi(,53) @end smallexample
../singular_texi/lib2doc.texi(,54) @item make mylib.dvi
../singular_texi/lib2doc.texi(,55) Generates the file @code{mylib.dvi} -- the dvi file for the documentation
../singular_texi/lib2doc.texi(,56) of @code{mylib.lib}. This file can be viewed with
../singular_texi/lib2doc.texi(,57) @smallexample
../singular_texi/lib2doc.texi(,58) xdvi mylib.dvi
../singular_texi/lib2doc.texi(,59) @end smallexample
../singular_texi/lib2doc.texi(,60) @item make mylib.ps
../singular_texi/lib2doc.texi(,61) Generates the file @code{mylib.ps} -- the PostScript file for the documentation
../singular_texi/lib2doc.texi(,62) of @code{mylib.lib}. This file can be viewed with (for example)
../singular_texi/lib2doc.texi(,63) @smallexample
../singular_texi/lib2doc.texi(,64) ghostview mylib.dvi
../singular_texi/lib2doc.texi(,65) @end smallexample
../singular_texi/lib2doc.texi(,66) @item make mylib.html
../singular_texi/lib2doc.texi(,67) Generates the file @code{mylib.html} -- the HTML file for the documentation
../singular_texi/lib2doc.texi(,68) of @code{mylib.lib}. This file can be viewed with (for example)
../singular_texi/lib2doc.texi(,69) @smallexample
../singular_texi/lib2doc.texi(,70) netscape mylib.html
../singular_texi/lib2doc.texi(,71) @end smallexample
../singular_texi/lib2doc.texi(,72) @item make clean
../singular_texi/lib2doc.texi(,73) Deletes all generated files.
../singular_texi/lib2doc.texi(,74) @end table
../singular_texi/lib2doc.texi(,75) 
../singular_texi/lib2doc.texi(,76) 
../singular_texi/lib2doc.texi(,77) Note that you can safely ignore messages complaining about undefined
../singular_texi/lib2doc.texi(,78) references.  
../singular_texi/lib2doc.texi(,79) 
../singular_texi/lib2doc.texi(,80) @end enumerate
../singular_texi/lib2doc.texi(,81) 
../singular_texi/general.tex(,4102) 
../singular_texi/general.tex(,4103) @c ----------------------------------------
../singular_texi/general.tex(,4104) @node Typesetting of help strings, The help string of a library, Documentation of a library, Guidelines for writing a library
../singular_texi/general.tex(,4105) @subsection Typesetting of help strings
../singular_texi/general.tex(,4106) @cindex Typesetting of help strings
../singular_texi/general.tex(,4107) @cindex library, typesetting of help strings
../singular_texi/general.tex(,4108) 
../singular_texi/general.tex(,4109) The help strings of procedures and info strings of libraries which are
../singular_texi/general.tex(,4110) included in the
../singular_texi/general.tex(,4111) distribution of @sc{Singular} are parsed and automatically converted
../singular_texi/general.tex(,4112) into the texinfo format (the typesetting language in which the
../singular_texi/general.tex(,4113) documentation  of @sc{Singular} is written).
../singular_texi/general.tex(,4114) 
../singular_texi/general.tex(,4115) For optimal typesetting results, the guidelines for writing libraries
../singular_texi/general.tex(,4116) and procedures should be followed, and the following points should be
../singular_texi/general.tex(,4117) kept in mind:
../singular_texi/general.tex(,4118) 
../singular_texi/general.tex(,4119) @itemize @bullet
../singular_texi/general.tex(,4120) @item
../singular_texi/general.tex(,4121) If a help string starts with an @code{@@} sign, then no parsing is done,
../singular_texi/general.tex(,4122) and the help string is assumed to be already in the texinfo format.
../singular_texi/general.tex(,4123) @item
../singular_texi/general.tex(,4124) help strings are typeset within a @code{@@table @@asis} environment
../singular_texi/general.tex(,4125) (which is similar to a latex @code{description} environment).
../singular_texi/general.tex(,4126) @item
../singular_texi/general.tex(,4127) If a line starts with  only uppercase words and contains a colon, then
../singular_texi/general.tex(,4128) the text up
../singular_texi/general.tex(,4129) to the colon is taken to be the description-string of an item and the
../singular_texi/general.tex(,4130) text following the colon is taken to be the content of the item.
../singular_texi/general.tex(,4131) @item
../singular_texi/general.tex(,4132) If the description-string of an item matches
../singular_texi/general.tex(,4133) @table @asis
../singular_texi/general.tex(,4134) @item @code{EXAMPLE}
../singular_texi/general.tex(,4135) then this item and its content is ignored.
../singular_texi/general.tex(,4136) @item @code{SEE ALSO}
../singular_texi/general.tex(,4137) then the
../singular_texi/general.tex(,4138) content of the item is assumed to be comma-separated words which are
../singular_texi/general.tex(,4139) valid references to other texinfo nodes of the manual. (e.g., all
../singular_texi/general.tex(,4140) procedure and command names are also texinfo nodes).
../singular_texi/general.tex(,4141) @item  @code{KEYWORDS} (or, @code{KEYPHRASES})
../singular_texi/general.tex(,4142) then the content of the item is assumed to be a
../singular_texi/general.tex(,4143) semicolon-separated list of phrases which are taken as keys for the
../singular_texi/general.tex(,4144) index of the manual (N.B. the name of a procedure/library is
../singular_texi/general.tex(,4145) automatically added to the index keys).
../singular_texi/general.tex(,4146) @item @code{PROCEDURES}
../singular_texi/general.tex(,4147) then the
../singular_texi/general.tex(,4148) content of the item is assumed to be a summary description of the
../singular_texi/general.tex(,4149) procedures contained in the library. Separate texinfo nodes (subsections
../singular_texi/general.tex(,4150) in printed documents) are
../singular_texi/general.tex(,4151) @strong{only} created out of the help strings of such procedures which
../singular_texi/general.tex(,4152) appear in the summary description of a library.
../singular_texi/general.tex(,4153) @item @code{LIBRARY}
../singular_texi/general.tex(,4154) then the content of the item is assumed to be a one-line description of
../singular_texi/general.tex(,4155) a library. If this one-line description consist of only uppercase
../singular_texi/general.tex(,4156) characters, then it is typeset in all lowercase characters in the
../singular_texi/general.tex(,4157) manual (otherwise it is left as is).
../singular_texi/general.tex(,4158) @end table
../singular_texi/general.tex(,4159) 
../singular_texi/general.tex(,4160) @item
../singular_texi/general.tex(,4161) For the content of an item, the following texinfo markup elements
../singular_texi/general.tex(,4162) are recognized (and, their content not further manipulated):
../singular_texi/general.tex(,4163) @table @asis
../singular_texi/general.tex(,4164) @item @code{@@*}
../singular_texi/general.tex(,4165) to enforce a line-break.
../singular_texi/general.tex(,4166) @table @asis
../singular_texi/general.tex(,4167) @item Example:
../singular_texi/general.tex(,4168) @code{old line @@* new line}
../singular_texi/general.tex(,4169) @* @expansion{}
../singular_texi/general.tex(,4170) @* old line @* new line
../singular_texi/general.tex(,4171) @end table
../singular_texi/general.tex(,4172) 
../singular_texi/general.tex(,4173) @item @code{@@ref@{...@}}
../singular_texi/general.tex(,4174) References to other parts of the @sc{Singular} manual can be set using
../singular_texi/general.tex(,4175) one of the following @code{@@ref@{node@}} constructs. Notice that
../singular_texi/general.tex(,4176) @code{node} must be the name of a section of the @sc{Singular}
../singular_texi/general.tex(,4177) manual. In particular, it may be a name of a function, library or library
../singular_texi/general.tex(,4178) procedure.
../singular_texi/general.tex(,4179) 
../singular_texi/general.tex(,4180) @table @asis
../singular_texi/general.tex(,4181) @item @code{@@xref@{node@}}
../singular_texi/general.tex(,4182) for a reference to the node @code{node} at the beginning of a sentence.
../singular_texi/general.tex(,4183) @item @code{@@ref@{node@}}
../singular_texi/general.tex(,4184) for a reference to the node @code{node} at the end of a sentence.
../singular_texi/general.tex(,4185) @item @code{@@pxref@{node@}}
../singular_texi/general.tex(,4186) for a reference to the node @code{node} within parenthesis.
../singular_texi/general.tex(,4187) 
../singular_texi/general.tex(,4188) @item Example:
../singular_texi/general.tex(,4189) @code{@@xref@{Tropical Storms@}, for more info.}
../singular_texi/general.tex(,4190) @*@expansion{}*Note Hurricanes::, for more info.
../singular_texi/general.tex(,4191) @*@expansion{}See Section 3.1 [Hurricanes], page 24, for more info.
../singular_texi/general.tex(,4192) 
../singular_texi/general.tex(,4193) @code{For more information, see @@ref@{Hurricanes@}.}
../singular_texi/general.tex(,4194) @*@expansion{}For more information, see *Note Hurricanes::.
../singular_texi/general.tex(,4195) @*@expansion{}For more information, see Section 3.1 [Hurricanes], page 24.
../singular_texi/general.tex(,4196) 
../singular_texi/general.tex(,4197) 
../singular_texi/general.tex(,4198) @code{... storms cause flooding (@@pxref@{Hurricanes@}) ...}
../singular_texi/general.tex(,4199) @*@expansion{}... storms cause flooding (*Note Hurricanes::) ...
../singular_texi/general.tex(,4200) @*@expansion{}... storms cause flooding (see Section 3.1 [Hurricanes],
../singular_texi/general.tex(,4201) page 24)
../singular_texi/general.tex(,4202) @end table
../singular_texi/general.tex(,4203) 
../singular_texi/general.tex(,4204) @item @code{@@math@{..@}}
../singular_texi/general.tex(,4205) for typesetting of small (i.e., which do not go over
../singular_texi/general.tex(,4206) multiple lines) mathematical expressions  in LaTeX math-mode
../singular_texi/general.tex(,4207) syntax.
../singular_texi/general.tex(,4208) @table @asis
../singular_texi/general.tex(,4209) @item Example:
../singular_texi/general.tex(,4210) @code{@@math@{\alpha@}}
../singular_texi/general.tex(,4211) @*@expansion{}
../singular_texi/general.tex(,4212) @*
../singular_texi/general.tex(,4216) @tex
../singular_texi/general.tex(,4217) $\alpha$
../singular_texi/general.tex(,4218) @end tex
../singular_texi/general.tex(,4219) 
../singular_texi/general.tex(,4220) @item Note:
../singular_texi/general.tex(,4221) Mathematical expressions inside @code{@@math@{..@}} may
../singular_texi/general.tex(,4222) not contain curly parenthesis and the "at" sign, i.e., may not contain
../singular_texi/general.tex(,4223) @code{@{,@},@@}.
../singular_texi/general.tex(,4224) @end table
../singular_texi/general.tex(,4225) 
../singular_texi/general.tex(,4226) @item @code{@@code@{..@}}
../singular_texi/general.tex(,4227) for typesetting of small (i.e., which do not go over
../singular_texi/general.tex(,4228) multiple lines) strings in typewriter font.
../singular_texi/general.tex(,4229) @table @asis
../singular_texi/general.tex(,4230) @item Example:
../singular_texi/general.tex(,4231) @code{@@code@{typewriter font@}}
../singular_texi/general.tex(,4232) @*@expansion{}
../singular_texi/general.tex(,4233) @*@code{typewriter font}
../singular_texi/general.tex(,4234) @item Note:
../singular_texi/general.tex(,4235) The string inside @code{@@code@{..@}} may
../singular_texi/general.tex(,4236) not contain curly parenthesis and the "at" sign, i.e., may not contain
../singular_texi/general.tex(,4237) @code{@{,@},@@}.
../singular_texi/general.tex(,4238) @end table
../singular_texi/general.tex(,4239) 
../singular_texi/general.tex(,4240) @item @code{@@example}
../singular_texi/general.tex(,4241)  @code{...}
../singular_texi/general.tex(,4242) @item @code{@@end example}
../singular_texi/general.tex(,4243) for pre-formatted text which is indented and typeset in typewriter
../singular_texi/general.tex(,4244) font.
../singular_texi/general.tex(,4245) @table @asis
../singular_texi/general.tex(,4246) @item Example:
../singular_texi/general.tex(,4247) @example
../singular_texi/general.tex(,4248) before example
../singular_texi/general.tex(,4249) @@example
../singular_texi/general.tex(,4250) in              example
../singular_texi/general.tex(,4251) notice extra identation and
../singular_texi/general.tex(,4252) escape of special characters like @@@{,@@@},@@@@
../singular_texi/general.tex(,4253) @@end example
../singular_texi/general.tex(,4254) after example
../singular_texi/general.tex(,4255) @end example
../singular_texi/general.tex(,4256) @expansion{}
../singular_texi/general.tex(,4257) @*before example
../singular_texi/general.tex(,4258) @example
../singular_texi/general.tex(,4259) in                example
../singular_texi/general.tex(,4260) notice extra identation  and
../singular_texi/general.tex(,4261) escape of special characters like @{,@},@@
../singular_texi/general.tex(,4262) @end example
../singular_texi/general.tex(,4263) after example
../singular_texi/general.tex(,4264) @item Note:
../singular_texi/general.tex(,4265) The characters @{,@},@@ have to be escaped by an @@ sign inside an
../singular_texi/general.tex(,4266) @@example environment.
../singular_texi/general.tex(,4267) @end table
../singular_texi/general.tex(,4268) 
../singular_texi/general.tex(,4269) @item @code{@@format}
../singular_texi/general.tex(,4270)  @code{...}
../singular_texi/general.tex(,4271) @item @code{@@end format}
../singular_texi/general.tex(,4272) for pre-formatted text which is not indented and typeset in normal
../singular_texi/general.tex(,4273) font.
../singular_texi/general.tex(,4274) @table @asis
../singular_texi/general.tex(,4275) @item Example:
../singular_texi/general.tex(,4276) @example
../singular_texi/general.tex(,4277) before format
../singular_texi/general.tex(,4278) @@format
../singular_texi/general.tex(,4279) in              format
../singular_texi/general.tex(,4280) no extra identation but still
../singular_texi/general.tex(,4281) escape of special characters like @@@{,@@@},@@@@
../singular_texi/general.tex(,4282) @@end format
../singular_texi/general.tex(,4283) after format
../singular_texi/general.tex(,4284) @end example
../singular_texi/general.tex(,4285) @expansion{}
../singular_texi/general.tex(,4286) @*before format
../singular_texi/general.tex(,4287) @format
../singular_texi/general.tex(,4288) in              format
../singular_texi/general.tex(,4289) no extra identation  but still
../singular_texi/general.tex(,4290) escape of special characters like @{,@},@@
../singular_texi/general.tex(,4291) @end format
../singular_texi/general.tex(,4292) after format
../singular_texi/general.tex(,4293) @item Note:
../singular_texi/general.tex(,4294) The characters @{,@},@@ have to be escaped by an @@ sign inside an
../singular_texi/general.tex(,4295) @@example environment.
../singular_texi/general.tex(,4296) @end table
../singular_texi/general.tex(,4297) 
../singular_texi/general.tex(,4298) 
../singular_texi/general.tex(,4299) @item @code{@@texinfo}
../singular_texi/general.tex(,4300)  @code{...}
../singular_texi/general.tex(,4301) @item @code{@@end texinfo}
../singular_texi/general.tex(,4302) for text which is written in pure texinfo.
../singular_texi/general.tex(,4303) @table @asis
../singular_texi/general.tex(,4304) @item Example:
../singular_texi/general.tex(,4305) @example
../singular_texi/general.tex(,4306) @@texinfo
../singular_texi/general.tex(,4307) Among others, within a texinfo environment
../singular_texi/general.tex(,4308) one can use the tex environment to typeset
../singular_texi/general.tex(,4309) more complex mathematical like
../singular_texi/general.tex(,4310) @@tex
../singular_texi/general.tex(,4311) $i_@{1,1@} $
../singular_texi/general.tex(,4312) @@tex
../singular_texi/general.tex(,4313) @@end texinfo
../singular_texi/general.tex(,4314) @end example
../singular_texi/general.tex(,4315) @*@expansion{}
../singular_texi/general.tex(,4316) @*Among others, within a texinfo environment one can use the tex environment
../singular_texi/general.tex(,4317) to typeset more complex mathematical like
../singular_texi/general.tex(,4318) @tex
../singular_texi/general.tex(,4319) $ i_{1,1} $
../singular_texi/general.tex(,4320) @end tex
../singular_texi/general.tex(,4321) @end table
../singular_texi/general.tex(,4322) 
../singular_texi/general.tex(,4323) @end table
../singular_texi/general.tex(,4324) 
../singular_texi/general.tex(,4325) Furthermore, a line-break is inserted in front of each line
../singular_texi/general.tex(,4326) whose previous line is shorter than 60
../singular_texi/general.tex(,4327) characters and does not contain any of the above described recognized
../singular_texi/general.tex(,4328) texinfo markup elements.
../singular_texi/general.tex(,4329) @end itemize
../singular_texi/general.tex(,4330) 
../singular_texi/general.tex(,4331) See also @ref{template_lib} for an examples of the typesetting rules
../singular_texi/general.tex(,4332) explained here.
../singular_texi/general.tex(,4333) 
../singular_texi/general.tex(,4334) @c ----------------------------------------
../singular_texi/general.tex(,4335) @node The help string of a library, The help string of procedures, Typesetting of help strings, Guidelines for writing a library
../singular_texi/general.tex(,4336) @subsection The help string of a library
../singular_texi/general.tex(,4337) @cindex help string of a library
../singular_texi/general.tex(,4338) @cindex library, help string
../singular_texi/general.tex(,4339) @cindex library, info string
../singular_texi/general.tex(,4340) @cindex info string of a library
../singular_texi/general.tex(,4341) 
../singular_texi/general.tex(,4342) The help (or, info) string of a library should have the following format:
../singular_texi/general.tex(,4343) 
../singular_texi/general.tex(,4344) @smallexample
../singular_texi/general.tex(,4345) info="
../singular_texi/general.tex(,4346) LIBRARY: <library_name> <one line description of the content>
../singular_texi/general.tex(,4347) AUTHOR:  <name, and email address of author>
../singular_texi/general.tex(,4348) [SEE ALSO: <comma-separated words of cross references>]
../singular_texi/general.tex(,4349) [KEYWORDS: <semicolon-separated phrases of index keys>]
../singular_texi/general.tex(,4350) PROCEDURES:
../singular_texi/general.tex(,4351)   <procedure1>;     <one line description of the purpose>
../singular_texi/general.tex(,4352)    .
../singular_texi/general.tex(,4353)    .
../singular_texi/general.tex(,4354)   <procedureN>;     <one line description of the purpose>
../singular_texi/general.tex(,4355) ";
../singular_texi/general.tex(,4356) @end smallexample
../singular_texi/general.tex(,4357) Only such procedures should be listed in the @code{PROCEDURE} section
../singular_texi/general.tex(,4358) which are not @code{static} and which
../singular_texi/general.tex(,4359) have a help and example section.
../singular_texi/general.tex(,4360) 
../singular_texi/general.tex(,4361) The purpose of the one line procedure descriptions is not to give a short help
../singular_texi/general.tex(,4362) for the procedure, but to help the user decide what procedure might be
../singular_texi/general.tex(,4363) the right one for the job. Details can then be found in the help section
../singular_texi/general.tex(,4364) of each procedure. Therefore parameters may be omitted or abbreviated if
../singular_texi/general.tex(,4365) necessary. If this description consists of only upper-case characters,
../singular_texi/general.tex(,4366) then it will be typeset in all lowercase characters in the manual.
../singular_texi/general.tex(,4367) 
../singular_texi/general.tex(,4368) For more information, see @ref{Typesetting of help strings}. For an
../singular_texi/general.tex(,4369) example, see @ref{template_lib}.
../singular_texi/general.tex(,4370) 
../singular_texi/general.tex(,4371) 
../singular_texi/general.tex(,4372) @c ----------------------------------------
../singular_texi/general.tex(,4373) @node The help string of procedures, template_lib, The help string of a library, Guidelines for writing a library
../singular_texi/general.tex(,4374) @subsection The help string of procedures
../singular_texi/general.tex(,4375) @cindex help string of a procedure
../singular_texi/general.tex(,4376) @cindex procedures, help string
../singular_texi/general.tex(,4377) 
../singular_texi/general.tex(,4378) The help string of a procedure should have the following format:
../singular_texi/general.tex(,4379) 
../singular_texi/general.tex(,4380) @smallexample
../singular_texi/general.tex(,4381) USAGE:    <proc_name>(<parameters>);   <explanation of parameters>
../singular_texi/general.tex(,4382) [CREATE:  <description of created objects which are not returned>]
../singular_texi/general.tex(,4383) RETURN:   <description of the purpose and return value>
../singular_texi/general.tex(,4384) [NOTE:    <particular assumptions or limitations, details>]
../singular_texi/general.tex(,4385) [SEE ALSO: <comma-separated names of related procedures/cross references>]
../singular_texi/general.tex(,4386) [KEYWORDS: <semicolon-separated phrases of index keys>]
../singular_texi/general.tex(,4387) EXAMPLE:  example <proc_name>; shows an example
../singular_texi/general.tex(,4388) @end smallexample
../singular_texi/general.tex(,4389) 
../singular_texi/general.tex(,4390) Further arbitrary items (like @code{THEORY:}, or @code{BACKGROUND:}) are
../singular_texi/general.tex(,4391) recognized, as well, but should be used diligently.
../singular_texi/general.tex(,4392) 
../singular_texi/general.tex(,4393) Remember that help strings are formatted as explained in
../singular_texi/general.tex(,4394) @ref{Typesetting of help strings}. In particular, descriptions may
../singular_texi/general.tex(,4395) contain the texinfo markup elements @code{@@*, @@math@{..@},
../singular_texi/general.tex(,4396) @@code@{..@}, @@example, @@format, @@texinfo} to better control their
../singular_texi/general.tex(,4397) typesetting. See @ref{msum}, @ref{mdouble}, @ref{mtripple} for examples.
../singular_texi/general.tex(,4398) 
../singular_texi/general.tex(,4399) @c ----------------------------------------
../singular_texi/general.tex(,4400) @node template_lib,, The help string of procedures, Guidelines for writing a library
../singular_texi/general.tex(,4401) @subsection template_lib
../singular_texi/general.tex(,4402) @cindex template_lib
../singular_texi/general.tex(,4403) @cindex Template for writing a library
../singular_texi/general.tex(,4404) @cindex library, template
../singular_texi/general.tex(,4405) 
../singular_texi/general.tex(,4406) First, we show the source-code of a template library:
../singular_texi/general.tex(,4407) @smallexample
../singular_texi/general.tex(,4408) @c begin included file template.lib from general.doc:3933
../singular_texi/general.tex(,4409) ////////////////////////////////////////////////////////////////////
../singular_texi/general.tex(,4410) // version string automatically expanded by CVS
../singular_texi/general.tex(,4411) 
../singular_texi/general.tex(,4412) version="Id: general.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $";
../singular_texi/general.tex(,4413) category="Miscellaneous";
../singular_texi/general.tex(,4414) // summary description of the library
../singular_texi/general.tex(,4415) info="
../singular_texi/general.tex(,4416) LIBRARY:   template.lib  A Template for a Singular Library
../singular_texi/general.tex(,4417) AUTHOR:    Olaf Bachmann, email: obachman@@mathematik.uni-kl.de
../singular_texi/general.tex(,4418) 
../singular_texi/general.tex(,4419) SEE ALSO:  standard_lib, Guidelines for writing a library,
../singular_texi/general.tex(,4420)            Typesetting of help strings
../singular_texi/general.tex(,4421) 
../singular_texi/general.tex(,4422) KEYWORDS: library, template.lib; template.lib; library, info string
../singular_texi/general.tex(,4423) 
../singular_texi/general.tex(,4424) PROCEDURES:
../singular_texi/general.tex(,4425)   mdouble(int)           return double of int argument
../singular_texi/general.tex(,4426)   mtripple(int)          return three times int argument
../singular_texi/general.tex(,4427)   msum([int,..,int])     sum of int arguments
../singular_texi/general.tex(,4428) ";
../singular_texi/general.tex(,4429) ////////////////////////////////////////////////////////////////////
../singular_texi/general.tex(,4430) proc mdouble(int i)
../singular_texi/general.tex(,4431) "USAGE:    mdouble(i); i int
../singular_texi/general.tex(,4432) RETURN:   int: i+i
../singular_texi/general.tex(,4433) NOTE:     Help string is in pure ASCII
../singular_texi/general.tex(,4434)           this line starts on a new line since previous line is short
../singular_texi/general.tex(,4435)           mdouble(i): no new line
../singular_texi/general.tex(,4436) SEE ALSO: msum, mtripple, Typesetting of help strings
../singular_texi/general.tex(,4437) KEYWORDS: procedure, ASCII help
../singular_texi/general.tex(,4438) EXAMPLE:  example mdouble; shows an example"
../singular_texi/general.tex(,4439) @{
../singular_texi/general.tex(,4440)   return (i + i);
../singular_texi/general.tex(,4441) @}
../singular_texi/general.tex(,4442) example
../singular_texi/general.tex(,4443) @{ "EXAMPLE:"; echo = 2;
../singular_texi/general.tex(,4444)   mdouble(0);
../singular_texi/general.tex(,4445)   mdouble(-1);
../singular_texi/general.tex(,4446) @}
../singular_texi/general.tex(,4447) ////////////////////////////////////////////////////////////////////
../singular_texi/general.tex(,4448) proc mtripple(int i)
../singular_texi/general.tex(,4449) "@@c we do texinfo here
../singular_texi/general.tex(,4450) @@table @@asis
../singular_texi/general.tex(,4451) @@item @@strong@{Usage:@}
../singular_texi/general.tex(,4452) @@code@{mtripple(i)@}; @@code@{i@} int
../singular_texi/general.tex(,4453) 
../singular_texi/general.tex(,4454) @@item @@strong@{Return:@}
../singular_texi/general.tex(,4455) int: @@math@{i+i+i@}
../singular_texi/general.tex(,4456) @@item @@strong@{Note:@}
../singular_texi/general.tex(,4457) Help is in pure Texinfo
../singular_texi/general.tex(,4458) @@*This help string is written in texinfo, which enables you to use,
../singular_texi/general.tex(,4459) among others, the @@@@math command for mathematical typesetting (like
../singular_texi/general.tex(,4460) @@math@{\alpha, \beta@}).
../singular_texi/general.tex(,4461) @@*It also gives more control over the layout, but is, admittingly,
../singular_texi/general.tex(,4462) more cumbersome to write.
../singular_texi/general.tex(,4463) @@end table
../singular_texi/general.tex(,4464) @@c use @@c ref contstuct for references
../singular_texi/general.tex(,4465) @@cindex procedure, texinfo help
../singular_texi/general.tex(,4466) @@c ref
../singular_texi/general.tex(,4467) @@strong@{See also:@}
../singular_texi/general.tex(,4468) @@ref@{mdouble@}, @@ref@{msum@}, @@ref@{Typesetting of help strings@}
../singular_texi/general.tex(,4469) @@c ref
../singular_texi/general.tex(,4470) "
../singular_texi/general.tex(,4471) @{
../singular_texi/general.tex(,4472)   return (i + i + i);
../singular_texi/general.tex(,4473) @}
../singular_texi/general.tex(,4474) example
../singular_texi/general.tex(,4475) @{ "EXAMPLE:"; echo = 2;
../singular_texi/general.tex(,4476)   mtripple(0);
../singular_texi/general.tex(,4477)   mtripple(-1);
../singular_texi/general.tex(,4478) @}
../singular_texi/general.tex(,4479) ////////////////////////////////////////////////////////////////////
../singular_texi/general.tex(,4480) proc msum(list #)
../singular_texi/general.tex(,4481) "USAGE:  msum([i_1,..,i_n]); @@code@{i_1,..,i_n@} def
../singular_texi/general.tex(,4482) RETURN:  Sum of int arguments
../singular_texi/general.tex(,4483) NOTE:    This help string is written in a mixture of ASCII and texinfo
../singular_texi/general.tex(,4484)          @@* Use a @@ref constructs for references (like @@pxref@{mtripple@})
../singular_texi/general.tex(,4485)          @@* Use @@code  for typewriter font (like @@code@{i_1@})
../singular_texi/general.tex(,4486)          @@* Use @@math  for simple math mode typesetting (like @@math@{i_1@}).
../singular_texi/general.tex(,4487)          @@* Note: No parenthesis like @} are allowed inside @@math and @@code
../singular_texi/general.tex(,4488)          @@* Use @@example for indented preformatted text typeset in typewriter
../singular_texi/general.tex(,4489)          font like
../singular_texi/general.tex(,4490) @@example
../singular_texi/general.tex(,4491)          this  --> that
../singular_texi/general.tex(,4492) @@end example
../singular_texi/general.tex(,4493)         Use @@format  for preformatted text typeset in normal font
../singular_texi/general.tex(,4494) @@format
../singular_texi/general.tex(,4495)          this --> that
../singular_texi/general.tex(,4496) @@end format
../singular_texi/general.tex(,4497)         Use @@texinfo for text in pure texinfo
../singular_texi/general.tex(,4498) @@texinfo
../singular_texi/general.tex(,4499) @@expansion@{@}
../singular_texi/general.tex(,4500) @@tex
../singular_texi/general.tex(,4501) $i_@{1,1@}$
../singular_texi/general.tex(,4502) @@end tex
../singular_texi/general.tex(,4503) 
../singular_texi/general.tex(,4504) @@end texinfo
../singular_texi/general.tex(,4505)         Notice that
../singular_texi/general.tex(,4506)         automatic linebreaking         is still in affect (like on this line).
../singular_texi/general.tex(,4507) SEE ALSO: mdouble, mtripple, Typesetting of help strings
../singular_texi/general.tex(,4508) KEYWORDS: procedure, ASCII/Texinfo help
../singular_texi/general.tex(,4509) EXAMPLE: example msum; shows an example"
../singular_texi/general.tex(,4510) @{
../singular_texi/general.tex(,4511)   if (size(#) == 0) @{ return (0);@}
../singular_texi/general.tex(,4512)   if (size(#) == 1) @{ return (#[1]);@}
../singular_texi/general.tex(,4513)   int i;
../singular_texi/general.tex(,4514)   def s = #[1];
../singular_texi/general.tex(,4515)   for (i=2; i<=size(#); i++)
../singular_texi/general.tex(,4516)   @{
../singular_texi/general.tex(,4517)     s = s + #[i];
../singular_texi/general.tex(,4518)   @}
../singular_texi/general.tex(,4519)   return (s);
../singular_texi/general.tex(,4520) @}
../singular_texi/general.tex(,4521) example
../singular_texi/general.tex(,4522) @{ "EXAMPLE:"; echo = 2;
../singular_texi/general.tex(,4523)   msum();
../singular_texi/general.tex(,4524)   msum(4);
../singular_texi/general.tex(,4525)   msum(1,2,3,4);
../singular_texi/general.tex(,4526) @}
../singular_texi/general.tex(,4527) @c end included file from general.doc:3933
../singular_texi/general.tex(,4528) @end smallexample
../singular_texi/general.tex(,4529) 
../singular_texi/general.tex(,4530) After typesetting, the library appears in the document as follows (with
../singular_texi/general.tex(,4531) one subsection for each procedure):
../singular_texi/general.tex(,4532) 
../singular_texi/general.tex(,4533) @c include of docu for template.lib
../singular_texi/./d2t_singular/template_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/template_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/template_lib.doc
../singular_texi/./d2t_singular/template_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/template_lib.doc INSTEAD
../singular_texi/./d2t_singular/template_lib.tex(,4) @c library version: (1.10,2001/01/16)
../singular_texi/./d2t_singular/template_lib.tex(,5) @c library file: ../Singular/LIB/template.lib
../singular_texi/./d2t_singular/template_lib.tex(,6) @cindex template.lib
../singular_texi/./d2t_singular/template_lib.tex(,7) @cindex template_lib
../singular_texi/./d2t_singular/template_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/template_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/template_lib.tex(,10) template.lib
../singular_texi/./d2t_singular/template_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/template_lib.tex(,12)   A Template for a Singular Library
../singular_texi/./d2t_singular/template_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/template_lib.tex(,14) Olaf Bachmann, email: obachman@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/template_lib.tex(,15) 
../singular_texi/./d2t_singular/template_lib.tex(,16) @cindex library, template.lib
../singular_texi/./d2t_singular/template_lib.tex(,17) @cindex template.lib
../singular_texi/./d2t_singular/template_lib.tex(,18) @cindex library, info string
../singular_texi/./d2t_singular/template_lib.tex(,19) @end table
../singular_texi/./d2t_singular/template_lib.tex(,20) 
../singular_texi/./d2t_singular/template_lib.tex(,21) @strong{Procedures:}
../singular_texi/./d2t_singular/template_lib.tex(,22) @menu
../singular_texi/./d2t_singular/template_lib.tex(,23) * mdouble:: return double of int argument
../singular_texi/./d2t_singular/template_lib.tex(,24) * mtripple:: return three times int argument
../singular_texi/./d2t_singular/template_lib.tex(,25) * msum:: sum of int arguments
../singular_texi/./d2t_singular/template_lib.tex(,26) @end menu
../singular_texi/./d2t_singular/template_lib.tex(,27) @c inserted refs from d2t_singular/template_lib.doc:25
../singular_texi/./d2t_singular/template_lib.tex(,37) @strong{See also:}
../singular_texi/./d2t_singular/template_lib.tex(,38) @ref{Guidelines for writing a library};
../singular_texi/./d2t_singular/template_lib.tex(,39) @ref{Typesetting of help strings};
../singular_texi/./d2t_singular/template_lib.tex(,40) @ref{standard_lib}.
../singular_texi/./d2t_singular/template_lib.tex(,42) @c end inserted refs from d2t_singular/template_lib.doc:25
../singular_texi/./d2t_singular/template_lib.tex(,43) 
../singular_texi/./d2t_singular/template_lib.tex(,44) @c ---end content LibInfo---
../singular_texi/./d2t_singular/template_lib.tex(,45) 
../singular_texi/./d2t_singular/template_lib.tex(,46) @c ------------------- mdouble -------------
../singular_texi/./d2t_singular/template_lib.tex(,47) @node mdouble, mtripple,, template_lib
../singular_texi/./d2t_singular/template_lib.tex(,48) @subsubsection mdouble
../singular_texi/./d2t_singular/template_lib.tex(,49) @cindex mdouble
../singular_texi/./d2t_singular/template_lib.tex(,50) @c ---content mdouble---
../singular_texi/./d2t_singular/template_lib.tex(,51) Procedure from library @code{template.lib} (@pxref{template_lib}).
../singular_texi/./d2t_singular/template_lib.tex(,52) 
../singular_texi/./d2t_singular/template_lib.tex(,53) @table @asis
../singular_texi/./d2t_singular/template_lib.tex(,54) @item @strong{Usage:}
../singular_texi/./d2t_singular/template_lib.tex(,55) mdouble(i); i int
../singular_texi/./d2t_singular/template_lib.tex(,56) 
../singular_texi/./d2t_singular/template_lib.tex(,57) @item @strong{Return:}
../singular_texi/./d2t_singular/template_lib.tex(,58) int: i+i
../singular_texi/./d2t_singular/template_lib.tex(,59) 
../singular_texi/./d2t_singular/template_lib.tex(,60) @item @strong{Note:}
../singular_texi/./d2t_singular/template_lib.tex(,61) Help string is in pure ASCII
../singular_texi/./d2t_singular/template_lib.tex(,62) @*this line starts on a new line since previous line is short
../singular_texi/./d2t_singular/template_lib.tex(,63) mdouble(i): no new line
../singular_texi/./d2t_singular/template_lib.tex(,64) 
../singular_texi/./d2t_singular/template_lib.tex(,65) @cindex procedure, ASCII help
../singular_texi/./d2t_singular/template_lib.tex(,66) @end table
../singular_texi/./d2t_singular/template_lib.tex(,67) @strong{Example:}
../singular_texi/./d2t_singular/template_lib.tex(,68) @smallexample
../singular_texi/./d2t_singular/template_lib.tex(,69) @c computed example mdouble d2t_singular/template_lib.doc:54 
../singular_texi/./d2t_singular/template_lib.tex(,70) LIB "template.lib";
../singular_texi/./d2t_singular/template_lib.tex(,71) mdouble(0);
../singular_texi/./d2t_singular/template_lib.tex(,72) @expansion{} 0
../singular_texi/./d2t_singular/template_lib.tex(,73) mdouble(-1);
../singular_texi/./d2t_singular/template_lib.tex(,74) @expansion{} -2
../singular_texi/./d2t_singular/template_lib.tex(,75) @c end example mdouble d2t_singular/template_lib.doc:54
../singular_texi/./d2t_singular/template_lib.tex(,76) @end smallexample
../singular_texi/./d2t_singular/template_lib.tex(,77) @c inserted refs from d2t_singular/template_lib.doc:60
../singular_texi/./d2t_singular/template_lib.tex(,87) @strong{See also:}
../singular_texi/./d2t_singular/template_lib.tex(,88) @ref{Typesetting of help strings};
../singular_texi/./d2t_singular/template_lib.tex(,89) @ref{msum};
../singular_texi/./d2t_singular/template_lib.tex(,90) @ref{mtripple}.
../singular_texi/./d2t_singular/template_lib.tex(,92) @c end inserted refs from d2t_singular/template_lib.doc:60
../singular_texi/./d2t_singular/template_lib.tex(,93) 
../singular_texi/./d2t_singular/template_lib.tex(,94) @c ---end content mdouble---
../singular_texi/./d2t_singular/template_lib.tex(,95) 
../singular_texi/./d2t_singular/template_lib.tex(,96) @c ------------------- mtripple -------------
../singular_texi/./d2t_singular/template_lib.tex(,97) @node mtripple, msum, mdouble, template_lib
../singular_texi/./d2t_singular/template_lib.tex(,98) @subsubsection mtripple
../singular_texi/./d2t_singular/template_lib.tex(,99) @cindex mtripple
../singular_texi/./d2t_singular/template_lib.tex(,100) @c ---content mtripple---
../singular_texi/./d2t_singular/template_lib.tex(,101) Procedure from library @code{template.lib} (@pxref{template_lib}).
../singular_texi/./d2t_singular/template_lib.tex(,102) 
../singular_texi/./d2t_singular/template_lib.tex(,103) @c we do texinfo here
../singular_texi/./d2t_singular/template_lib.tex(,104) @table @asis
../singular_texi/./d2t_singular/template_lib.tex(,105) @item @strong{Usage:}
../singular_texi/./d2t_singular/template_lib.tex(,106) @code{mtripple(i)}; @code{i} int
../singular_texi/./d2t_singular/template_lib.tex(,107) 
../singular_texi/./d2t_singular/template_lib.tex(,108) @item @strong{Return:}
../singular_texi/./d2t_singular/template_lib.tex(,109) int: 
../singular_texi/./d2t_singular/template_lib.tex(,113) @tex
../singular_texi/./d2t_singular/template_lib.tex(,114) $i+i+i$
../singular_texi/./d2t_singular/template_lib.tex(,115) @end tex
../singular_texi/./d2t_singular/template_lib.tex(,116) 
../singular_texi/./d2t_singular/template_lib.tex(,117) @item @strong{Note:}
../singular_texi/./d2t_singular/template_lib.tex(,118) Help is in pure Texinfo
../singular_texi/./d2t_singular/template_lib.tex(,119) @*This help string is written in texinfo, which enables you to use,
../singular_texi/./d2t_singular/template_lib.tex(,120) among others, the @@math command for mathematical typesetting (like
../singular_texi/./d2t_singular/template_lib.tex(,121) 
../singular_texi/./d2t_singular/template_lib.tex(,125) @tex
../singular_texi/./d2t_singular/template_lib.tex(,126) $\alpha, \beta$
../singular_texi/./d2t_singular/template_lib.tex(,127) @end tex
../singular_texi/./d2t_singular/template_lib.tex(,128) ).
../singular_texi/./d2t_singular/template_lib.tex(,129) @*It also gives more control over the layout, but is, admittingly,
../singular_texi/./d2t_singular/template_lib.tex(,130) more cumbersome to write.
../singular_texi/./d2t_singular/template_lib.tex(,131) @end table
../singular_texi/./d2t_singular/template_lib.tex(,132) @c use @c ref contstuct for references
../singular_texi/./d2t_singular/template_lib.tex(,133) @cindex procedure, texinfo help
../singular_texi/./d2t_singular/template_lib.tex(,134) @c inserted refs from d2t_singular/template_lib.doc:90
../singular_texi/./d2t_singular/template_lib.tex(,144) @strong{See also:}
../singular_texi/./d2t_singular/template_lib.tex(,145) @ref{Typesetting of help strings};
../singular_texi/./d2t_singular/template_lib.tex(,146) @ref{mdouble};
../singular_texi/./d2t_singular/template_lib.tex(,147) @ref{msum}.
../singular_texi/./d2t_singular/template_lib.tex(,149) @c end inserted refs from d2t_singular/template_lib.doc:90
../singular_texi/./d2t_singular/template_lib.tex(,150) 
../singular_texi/./d2t_singular/template_lib.tex(,151) @strong{Example:}
../singular_texi/./d2t_singular/template_lib.tex(,152) @smallexample
../singular_texi/./d2t_singular/template_lib.tex(,153) @c computed example mtripple d2t_singular/template_lib.doc:97 
../singular_texi/./d2t_singular/template_lib.tex(,154) LIB "template.lib";
../singular_texi/./d2t_singular/template_lib.tex(,155) mtripple(0);
../singular_texi/./d2t_singular/template_lib.tex(,156) @expansion{} 0
../singular_texi/./d2t_singular/template_lib.tex(,157) mtripple(-1);
../singular_texi/./d2t_singular/template_lib.tex(,158) @expansion{} -3
../singular_texi/./d2t_singular/template_lib.tex(,159) @c end example mtripple d2t_singular/template_lib.doc:97
../singular_texi/./d2t_singular/template_lib.tex(,160) @end smallexample
../singular_texi/./d2t_singular/template_lib.tex(,161) @c ---end content mtripple---
../singular_texi/./d2t_singular/template_lib.tex(,162) 
../singular_texi/./d2t_singular/template_lib.tex(,163) @c ------------------- msum -------------
../singular_texi/./d2t_singular/template_lib.tex(,164) @node msum,, mtripple, template_lib
../singular_texi/./d2t_singular/template_lib.tex(,165) @subsubsection msum
../singular_texi/./d2t_singular/template_lib.tex(,166) @cindex msum
../singular_texi/./d2t_singular/template_lib.tex(,167) @c ---content msum---
../singular_texi/./d2t_singular/template_lib.tex(,168) Procedure from library @code{template.lib} (@pxref{template_lib}).
../singular_texi/./d2t_singular/template_lib.tex(,169) 
../singular_texi/./d2t_singular/template_lib.tex(,170) @table @asis
../singular_texi/./d2t_singular/template_lib.tex(,171) @item @strong{Usage:}
../singular_texi/./d2t_singular/template_lib.tex(,172) msum([i_1,..,i_n]); @code{i_1,..,i_n} def
../singular_texi/./d2t_singular/template_lib.tex(,173) 
../singular_texi/./d2t_singular/template_lib.tex(,174) @item @strong{Return:}
../singular_texi/./d2t_singular/template_lib.tex(,175) Sum of int arguments
../singular_texi/./d2t_singular/template_lib.tex(,176) 
../singular_texi/./d2t_singular/template_lib.tex(,177) @item @strong{Note:}
../singular_texi/./d2t_singular/template_lib.tex(,178) This help string is written in a mixture of ASCII and texinfo
../singular_texi/./d2t_singular/template_lib.tex(,179) @* Use a @@ref constructs for references (like @pxref{mtripple})
../singular_texi/./d2t_singular/template_lib.tex(,180) @* Use @@code for typewriter font (like @code{i_1})
../singular_texi/./d2t_singular/template_lib.tex(,181) @* Use @@math for simple math mode typesetting (like 
../singular_texi/./d2t_singular/template_lib.tex(,185) @tex
../singular_texi/./d2t_singular/template_lib.tex(,186) $i_1$
../singular_texi/./d2t_singular/template_lib.tex(,187) @end tex
../singular_texi/./d2t_singular/template_lib.tex(,188) ).
../singular_texi/./d2t_singular/template_lib.tex(,189) @* Note: No parenthesis like @} are allowed inside @@math and @@code
../singular_texi/./d2t_singular/template_lib.tex(,190) @* Use @@example for indented preformatted text typeset in typewriter
../singular_texi/./d2t_singular/template_lib.tex(,191) font like
../singular_texi/./d2t_singular/template_lib.tex(,192) @smallexample
../singular_texi/./d2t_singular/template_lib.tex(,193)          this  --> that
../singular_texi/./d2t_singular/template_lib.tex(,194) @end smallexample
../singular_texi/./d2t_singular/template_lib.tex(,195) Use @@format for preformatted text typeset in normal font
../singular_texi/./d2t_singular/template_lib.tex(,196) @format
../singular_texi/./d2t_singular/template_lib.tex(,197)          this --> that
../singular_texi/./d2t_singular/template_lib.tex(,198) @end format
../singular_texi/./d2t_singular/template_lib.tex(,199) Use @@texinfo for text in pure texinfo
../singular_texi/./d2t_singular/template_lib.tex(,200) 
../singular_texi/./d2t_singular/template_lib.tex(,201) @expansion{}
../singular_texi/./d2t_singular/template_lib.tex(,202) @tex
../singular_texi/./d2t_singular/template_lib.tex(,203) $i_{1,1}$
../singular_texi/./d2t_singular/template_lib.tex(,204) @end tex
../singular_texi/./d2t_singular/template_lib.tex(,205) 
../singular_texi/./d2t_singular/template_lib.tex(,206) 
../singular_texi/./d2t_singular/template_lib.tex(,207) Notice that
../singular_texi/./d2t_singular/template_lib.tex(,208) @*automatic linebreaking is still in affect (like on this line).
../singular_texi/./d2t_singular/template_lib.tex(,209) 
../singular_texi/./d2t_singular/template_lib.tex(,210) @cindex procedure, ASCII/Texinfo help
../singular_texi/./d2t_singular/template_lib.tex(,211) @end table
../singular_texi/./d2t_singular/template_lib.tex(,212) @strong{Example:}
../singular_texi/./d2t_singular/template_lib.tex(,213) @smallexample
../singular_texi/./d2t_singular/template_lib.tex(,214) @c computed example msum d2t_singular/template_lib.doc:149 
../singular_texi/./d2t_singular/template_lib.tex(,215) LIB "template.lib";
../singular_texi/./d2t_singular/template_lib.tex(,216) msum();
../singular_texi/./d2t_singular/template_lib.tex(,217) @expansion{} 0
../singular_texi/./d2t_singular/template_lib.tex(,218) msum(4);
../singular_texi/./d2t_singular/template_lib.tex(,219) @expansion{} 4
../singular_texi/./d2t_singular/template_lib.tex(,220) msum(1,2,3,4);
../singular_texi/./d2t_singular/template_lib.tex(,221) @expansion{} 10
../singular_texi/./d2t_singular/template_lib.tex(,222) @c end example msum d2t_singular/template_lib.doc:149
../singular_texi/./d2t_singular/template_lib.tex(,223) @end smallexample
../singular_texi/./d2t_singular/template_lib.tex(,224) @c inserted refs from d2t_singular/template_lib.doc:156
../singular_texi/./d2t_singular/template_lib.tex(,234) @strong{See also:}
../singular_texi/./d2t_singular/template_lib.tex(,235) @ref{Typesetting of help strings};
../singular_texi/./d2t_singular/template_lib.tex(,236) @ref{mdouble};
../singular_texi/./d2t_singular/template_lib.tex(,237) @ref{mtripple}.
../singular_texi/./d2t_singular/template_lib.tex(,239) @c end inserted refs from d2t_singular/template_lib.doc:156
../singular_texi/./d2t_singular/template_lib.tex(,240) 
../singular_texi/./d2t_singular/template_lib.tex(,241) @c ---end content msum---
../singular_texi/general.tex(,4535) 
../singular_texi/general.tex(,4536) @c ----------------------------------------------------------------------
../singular_texi/general.tex(,4537) @node Debugging tools,  , Guidelines for writing a library, General concepts
../singular_texi/general.tex(,4538) @section Debugging tools
../singular_texi/general.tex(,4539) @cindex Debugging tools
../singular_texi/general.tex(,4540) 
../singular_texi/general.tex(,4541) If @sc{Singular} does not come back to the prompt while calling a user
../singular_texi/general.tex(,4542) defined procedure, probably a bracket or a @code{"} is missing.  The
../singular_texi/general.tex(,4543) easiest way to leave the procedure is to type some brackets or @code{"}
../singular_texi/general.tex(,4544) and then @key{RETURN} .
../singular_texi/general.tex(,4545) 
../singular_texi/general.tex(,4546) @menu
../singular_texi/general.tex(,4547) * Tracing of procedures::
../singular_texi/general.tex(,4548) * Source code debugger::
../singular_texi/general.tex(,4549) * Break points::
../singular_texi/general.tex(,4550) * Printing of data::
../singular_texi/general.tex(,4551) * libparse::
../singular_texi/general.tex(,4552) @end menu
../singular_texi/general.tex(,4553) 
../singular_texi/general.tex(,4554) @c ---------------------------------------
../singular_texi/general.tex(,4555) @node Tracing of procedures,Source code debugger,Debugging tools,Debugging tools
../singular_texi/general.tex(,4556) @subsection Tracing of procedures
../singular_texi/general.tex(,4557) Setting the @code{TRACE} variable to 1 (resp.@: 3) results in a listing of
../singular_texi/general.tex(,4558) the called procedures (resp.@: together with line numbers).
../singular_texi/general.tex(,4559) If @code{TRACE} is set to 4, @code{Singular}
../singular_texi/general.tex(,4560) displays each line before its interpretation and waits for the @key{RETURN}
../singular_texi/general.tex(,4561) key being pressed.
../singular_texi/general.tex(,4562) @menu
../singular_texi/general.tex(,4563) * TRACE var::
../singular_texi/general.tex(,4564) @end menu
../singular_texi/general.tex(,4566) See @ref{TRACE var}.
../singular_texi/general.tex(,4568) 
../singular_texi/general.tex(,4569) @strong{Example:}
../singular_texi/general.tex(,4570) @smallexample
../singular_texi/general.tex(,4571) @c computed example Tracing_of_procedures general.doc:3976 
../singular_texi/general.tex(,4572)   proc t1
../singular_texi/general.tex(,4573)   @{
../singular_texi/general.tex(,4574)     int i=2;
../singular_texi/general.tex(,4575)     while (i>0)
../singular_texi/general.tex(,4576)     @{ i=i-1; @}
../singular_texi/general.tex(,4577)   @}
../singular_texi/general.tex(,4578)   TRACE=3;
../singular_texi/general.tex(,4579)   t1();
../singular_texi/general.tex(,4580) @expansion{} 
../singular_texi/general.tex(,4581) @expansion{} entering t1 (level 0)
../singular_texi/general.tex(,4582) @expansion{} @{1@}@{2@}@{3@}@{4@}@{5@}@{4@}@{5@}@{6@}@{7@}@{4@}@{5@}@{6@}@{7@}@{4@}@{6@}@{7@}@{8@}
../singular_texi/general.tex(,4583) @expansion{} leaving  t1 (level 0)
../singular_texi/general.tex(,4584) @c end example Tracing_of_procedures general.doc:3976
../singular_texi/general.tex(,4585) @end smallexample
../singular_texi/general.tex(,4586) 
../singular_texi/general.tex(,4587) @c ---------------------------------------
../singular_texi/general.tex(,4588) @node Source code debugger, Break points, Tracing of procedures, Debugging tools
../singular_texi/general.tex(,4589) @subsection Source code debugger
../singular_texi/general.tex(,4590) @cindex debugging library code
../singular_texi/general.tex(,4591) @cindex source code debugger, sdb
../singular_texi/general.tex(,4592) @cindex debugger
../singular_texi/general.tex(,4593) @cindex sdb, source code debugger
../singular_texi/general.tex(,4594) 
../singular_texi/general.tex(,4595) 
../singular_texi/general.tex(,4596) The source code debugger (sdb) is an experimental feature, it's
../singular_texi/general.tex(,4597) interface may change in future versions of Singular.  @*To enable the
../singular_texi/general.tex(,4598) use of the source code debugger @sc{Singular} has to be started with the
../singular_texi/general.tex(,4599) option @code{-d} or @code{--sdb} (see @ref{Command line options}).
../singular_texi/general.tex(,4600) 
../singular_texi/general.tex(,4601) 
../singular_texi/general.tex(,4602) @subsubheading sdb commands
../singular_texi/general.tex(,4603) Each sdb command consist of one character which may be followed by
../singular_texi/general.tex(,4604) a parameter.
../singular_texi/general.tex(,4605) @table @asis
../singular_texi/general.tex(,4606) @item @code{b}
../singular_texi/general.tex(,4607) print backtrace of calling stack
../singular_texi/general.tex(,4608) @item @code{c}
../singular_texi/general.tex(,4609) continue
../singular_texi/general.tex(,4610) @item @code{e}
../singular_texi/general.tex(,4611) edit the current procedure and reload it (current call will be aborted)
../singular_texi/general.tex(,4612) @* only available on UNIX systems
../singular_texi/general.tex(,4613) @item @code{h},@code{?}
../singular_texi/general.tex(,4614) display help screen
../singular_texi/general.tex(,4615) @item @code{n}
../singular_texi/general.tex(,4616) execute current line, sdb break at next line
../singular_texi/general.tex(,4617) @item @code{p} <identifier>
../singular_texi/general.tex(,4618) display type and value of the variable given by <identifier>
../singular_texi/general.tex(,4619) @item @code{Q}
../singular_texi/general.tex(,4620) quit this Singular session
../singular_texi/general.tex(,4621) @item @code{q} <flags>
../singular_texi/general.tex(,4622) quit debugger, set debugger flags(0,1,2)
../singular_texi/general.tex(,4623) @* 0: continue, disable the debugger
../singular_texi/general.tex(,4624) @* 1: continue
../singular_texi/general.tex(,4625) @* 2: throw an error, return to toplevel
../singular_texi/general.tex(,4626) @end table
../singular_texi/general.tex(,4627) 
../singular_texi/general.tex(,4628) 
../singular_texi/general.tex(,4629) @subsubheading Syntactical errors in procedures
../singular_texi/general.tex(,4630) If @sc{Singular} was started with the command line option @code{-d} or
../singular_texi/general.tex(,4631) @code{--sdb} a syntactical error in a procedure will start the
../singular_texi/general.tex(,4632) source code debugger instead of returning to the top level with an
../singular_texi/general.tex(,4633) error message. The commands @code{q 1} and @code{q 2} are equivalent in this
../singular_texi/general.tex(,4634) case.
../singular_texi/general.tex(,4635) 
../singular_texi/general.tex(,4636) @subsubheading SDB breakpoints in procedures
../singular_texi/general.tex(,4637) @cindex SDB breakpoint
../singular_texi/general.tex(,4638) @cindex SDB debugger
../singular_texi/general.tex(,4639) Up to seven SDB breakpoints can be set.
../singular_texi/general.tex(,4640) To set a breakpoint at a procedure use
../singular_texi/general.tex(,4641) @code{breakpoint}. (See @ref{breakpoint}).
../singular_texi/general.tex(,4642) @*These breakpoints can be cleared with the command @code{d breakpoint_no}
../singular_texi/general.tex(,4643) from within the debugger or with
../singular_texi/general.tex(,4644) @code{breakpoint(} proc_name @code{,-1);}.
../singular_texi/general.tex(,4645) 
../singular_texi/general.tex(,4646) 
../singular_texi/general.tex(,4647) @c ---------------------------------------
../singular_texi/general.tex(,4648) @node Break points, Printing of data, Source code debugger, Debugging tools
../singular_texi/general.tex(,4649) @subsection Break points
../singular_texi/general.tex(,4650) A break point can be put into a proc by inserting the command @code{~}.
../singular_texi/general.tex(,4651) If @code{Singular} reaches a break point it asks for lines of commands
../singular_texi/general.tex(,4652) (line-length must be less than 80 characters)
../singular_texi/general.tex(,4653) from the user. It returns to normal execution if given an empty line.
../singular_texi/general.tex(,4654) See @ref{~}.
../singular_texi/general.tex(,4655) 
../singular_texi/general.tex(,4656) 
../singular_texi/general.tex(,4657) @strong{Example:}
../singular_texi/general.tex(,4658) @smallexample
../singular_texi/general.tex(,4659) proc t
../singular_texi/general.tex(,4660) @{
../singular_texi/general.tex(,4661)   int i=2;
../singular_texi/general.tex(,4662)   ~;
../singular_texi/general.tex(,4663)   return(i+1);
../singular_texi/general.tex(,4664) @}
../singular_texi/general.tex(,4665) t();
../singular_texi/general.tex(,4666) @expansion{} -- break point in t --
../singular_texi/general.tex(,4667) @expansion{} -- 0: called    from STDIN --
../singular_texi/general.tex(,4668) i;               // here local variables of the procedure can be accessed
../singular_texi/general.tex(,4669) @expansion{} 2
../singular_texi/general.tex(,4670) @expansion{} -- break point in t --
../singular_texi/general.tex(,4671) 
../singular_texi/general.tex(,4672) @expansion{} 3
../singular_texi/general.tex(,4673) @end smallexample
../singular_texi/general.tex(,4674) @sp 2
../singular_texi/general.tex(,4675) 
../singular_texi/general.tex(,4676) @c ---------------------------------------
../singular_texi/general.tex(,4677) @node Printing of data,libparse,Break points,Debugging tools
../singular_texi/general.tex(,4678) @subsection Printing of data
../singular_texi/general.tex(,4679) The procedure @code{dbprint} is useful for optional output of data:
../singular_texi/general.tex(,4680) it takes 2 arguments and prints the second argument, if the first
../singular_texi/general.tex(,4681) argument is positive; it does nothing otherwise.
../singular_texi/general.tex(,4682) @menu
../singular_texi/general.tex(,4683) * dbprint::
../singular_texi/general.tex(,4684) * voice::
../singular_texi/general.tex(,4685) @end menu
../singular_texi/general.tex(,4691) 
../singular_texi/general.tex(,4692) @c ---------------------------------------
../singular_texi/general.tex(,4693) @node libparse,,Printing of data,Debugging tools
../singular_texi/general.tex(,4694) @subsection libparse
../singular_texi/general.tex(,4695) @cindex libparse
../singular_texi/general.tex(,4696) 
../singular_texi/general.tex(,4697) @code{libparse} is a stand-alone program contained in the @sc{Singular}
../singular_texi/general.tex(,4698) distribution (at the place where the @sc{Singular} executable program
../singular_texi/general.tex(,4699) resides), which cannot be called inside of @sc{Singular}. It is a
../singular_texi/general.tex(,4700) debugging tool for libraries which performs exactly the same checks as
../singular_texi/general.tex(,4705) the @code{LIB} command in @sc{Singular}, but generates more output during
../singular_texi/general.tex(,4707) parsing.  @code{libparse} is useful if an error
../singular_texi/general.tex(,4708) occurs while loading the library, but the whole block around the line
../singular_texi/general.tex(,4709) specified seems to be correct. In these situations the real error might
../singular_texi/general.tex(,4710) be hundreds of lines earlier in the library.
../singular_texi/general.tex(,4711) 
../singular_texi/general.tex(,4712) @strong{Usage:}
../singular_texi/general.tex(,4713) @*@code{libparse [options] singular-library}
../singular_texi/general.tex(,4714) @*@strong{Options:}
../singular_texi/general.tex(,4715) @table @asis
../singular_texi/general.tex(,4716) @item @code{-d} Debuglevel
../singular_texi/general.tex(,4717) increases the amount of output during parsing, where Debuglevel is an integer
../singular_texi/general.tex(,4718) between 0 and 4. Default is 0.
../singular_texi/general.tex(,4719) @item @code{-s}
../singular_texi/general.tex(,4720) turns on reporting about violations of unenforced syntax rules
../singular_texi/general.tex(,4721) @end table
../singular_texi/general.tex(,4722) 
../singular_texi/general.tex(,4723) The following syntax checks are performed in any case:
../singular_texi/general.tex(,4724) @itemize @bullet
../singular_texi/general.tex(,4725) @item counting of pairs of brackets @{,@} , [,] and (,)
../singular_texi/general.tex(,4726)     (number of @{ has to match number of @}, same for [,] and (,) ).
../singular_texi/general.tex(,4727) @item counting of "
../singular_texi/general.tex(,4728)     ( number of " must be even ).
../singular_texi/general.tex(,4729) @item general library syntax
../singular_texi/general.tex(,4730)     ( only LIB, static, proc (with parameters, help, body and example)
../singular_texi/general.tex(,4731) and comments, i.e // and @code{/* ... */}, are allowed).
../singular_texi/general.tex(,4732) @end itemize
../singular_texi/general.tex(,4733) Its output lists all procedures that have been parsed successfully:
../singular_texi/general.tex(,4734) 
../singular_texi/general.tex(,4735) @smallexample
../singular_texi/general.tex(,4736) $ libparse sample.lib
../singular_texi/general.tex(,4737) Checking library 'sample.lib'
../singular_texi/general.tex(,4738)   Library         function      line,start-eod line,body-eob  line,example-eoe
../singular_texi/general.tex(,4739) Version:0.0.0;
../singular_texi/general.tex(,4740) g Sample               tab line    9,  149-165   13,  271-298   14,  300-402
../singular_texi/general.tex(,4741) l Sample      internal_tab line   24,  450-475   25,  476-496    0,    0-496
../singular_texi/general.tex(,4742) @end smallexample
../singular_texi/general.tex(,4743) 
../singular_texi/general.tex(,4744) where the following abbreviations are used:
../singular_texi/general.tex(,4745) @itemize @bullet
../singular_texi/general.tex(,4746) @item g: global procedure (default)
../singular_texi/general.tex(,4747) @item l: static procedure, i.e., local to the library.
../singular_texi/general.tex(,4748) @end itemize
../singular_texi/general.tex(,4749) 
../singular_texi/general.tex(,4750) each of the following is the position of the byte in the library.
../singular_texi/general.tex(,4751) @itemize @bullet
../singular_texi/general.tex(,4752) @item start: begin of 'proc'
../singular_texi/general.tex(,4753) @item eod: end of parameters
../singular_texi/general.tex(,4754) @item body: start of procedure body '@{'
../singular_texi/general.tex(,4755) @item eob:  end of procedure body '@}'
../singular_texi/general.tex(,4756) @item example: position of 'example'
../singular_texi/general.tex(,4757) @item eoe: end of example '@}'
../singular_texi/general.tex(,4758) @end itemize
../singular_texi/general.tex(,4759) 
../singular_texi/general.tex(,4760) Hence in the above example, the first procedure of the library
../singular_texi/general.tex(,4761) sample.lib is user-accessible and its name is tab. The procedure
../singular_texi/general.tex(,4762) starts in line 9, at character 149. The head of the procedure
../singular_texi/general.tex(,4763) ends at character 165, the body starts in line 13 at character 271
../singular_texi/general.tex(,4764) and ends at character 298. The example section extends from line 14
../singular_texi/general.tex(,4765) character 300 to character 402.
../singular_texi/general.tex(,4766) 
../singular_texi/general.tex(,4767) The following example shows the result of a missing close-bracket @} in
../singular_texi/general.tex(,4768) line 26 of the library @code{sample.lib}.
../singular_texi/general.tex(,4769) 
../singular_texi/general.tex(,4770) @smallexample
../singular_texi/general.tex(,4771) LIB "sample.lib";
../singular_texi/general.tex(,4772) @expansion{}    ? Library sample.lib: ERROR occurred: in line 26, 497.
../singular_texi/general.tex(,4773) @expansion{}    ? missing close bracket '@}' at end of library in line 26.
../singular_texi/general.tex(,4774) @expansion{}    ? Cannot load library,... aborting.
../singular_texi/general.tex(,4775) @expansion{}    ? error occurred in STDIN line 1: `LIB "sample.lib";`
../singular_texi/general.tex(,4776) @end smallexample
../singular_texi/singular.tex(,133) 
../singular_texi/singular.tex(,134) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,135) @node Data types, Functions and system variables, General concepts, Top
../singular_texi/singular.tex(,136) @chapter Data types
../singular_texi/singular.tex(,137) @cindex Data types
../singular_texi/types.tex(,1) @comment -*-texinfo-*-
../singular_texi/types.tex(,2) @comment This file was generated by doc2tex.pl from types.doc
../singular_texi/types.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT types.doc INSTEAD
../singular_texi/types.tex(,4) @comment Id: types.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/types.tex(,5) @comment this file contains the type definitions
../singular_texi/types.tex(,6) 
../singular_texi/types.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/types.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/types.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/types.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/types.tex(,11) @c ignores the conditionals).
../singular_texi/types.tex(,12) 
../singular_texi/types.tex(,26) 
../singular_texi/types.tex(,27) @cindex expression list
../singular_texi/types.tex(,28) This chapter explains all data types of @sc{Singular} in
../singular_texi/types.tex(,29) alphabetical order. For every type, there is a description of the
../singular_texi/types.tex(,30) declaration syntax as well as information about how to build expressions
../singular_texi/types.tex(,31) of certain types.
../singular_texi/types.tex(,32) 
../singular_texi/types.tex(,33) The term expression list in @sc{Singular} refers to any comma separated
../singular_texi/types.tex(,34) list of expressions.
../singular_texi/types.tex(,35) 
../singular_texi/types.tex(,36) For the general syntax of a declaration see @ref{General command syntax}.
../singular_texi/types.tex(,37) 
../singular_texi/types.tex(,38) @menu
../singular_texi/types.tex(,39) * def::
../singular_texi/types.tex(,40) * ideal::
../singular_texi/types.tex(,41) * int::
../singular_texi/types.tex(,42) * intmat::
../singular_texi/types.tex(,43) * intvec::
../singular_texi/types.tex(,44) * link::
../singular_texi/types.tex(,45) * list::
../singular_texi/types.tex(,46) * map::
../singular_texi/types.tex(,47) * matrix::
../singular_texi/types.tex(,48) * module::
../singular_texi/types.tex(,49) * number::
../singular_texi/types.tex(,50) * poly::
../singular_texi/types.tex(,51) * proc::
../singular_texi/types.tex(,52) * qring::
../singular_texi/types.tex(,53) * resolution::
../singular_texi/types.tex(,54) * ring::
../singular_texi/types.tex(,55) * string::
../singular_texi/types.tex(,56) * vector::
../singular_texi/types.tex(,60) @end menu
../singular_texi/types.tex(,61) 
../singular_texi/types.tex(,62) @c ---------------------------------------
../singular_texi/types.tex(,63) @node def, ideal, Data types, Data types
../singular_texi/types.tex(,64) @section def
../singular_texi/types.tex(,65) @cindex def
../singular_texi/types.tex(,66) @cindex untyped definitions
../singular_texi/types.tex(,67) 
../singular_texi/types.tex(,68) Objects may be defined without a specific type: they get their
../singular_texi/types.tex(,69) type from the first assignment to them.
../singular_texi/types.tex(,70) E.g., @code{ideal i=x,y,z; def j=i^2;} defines the ideal @code{i^2}
../singular_texi/types.tex(,71) with the name @code{j}.
../singular_texi/types.tex(,72) 
../singular_texi/types.tex(,73) @strong{Note:} Unlike other assignments a ring as an untyped object
../singular_texi/types.tex(,74) is not a copy but another reference to the same (possibly unnamed) ring.
../singular_texi/types.tex(,75) This means that entries in one of these rings appear also in the other ones.
../singular_texi/types.tex(,76) The following defines a ring @code{s} which is just another reference (or name)
../singular_texi/types.tex(,77) for the basering @code{r}.
../singular_texi/types.tex(,78) 
../singular_texi/types.tex(,79) @smallexample
../singular_texi/types.tex(,80) @c reused example def types.doc:78 
../singular_texi/types.tex(,81)   ring r=32003,(x,y,z),dp;
../singular_texi/types.tex(,82)   poly f = x;
../singular_texi/types.tex(,83)   def s=basering;
../singular_texi/types.tex(,84)   setring s;
../singular_texi/types.tex(,85)   nameof(basering);
../singular_texi/types.tex(,86) @expansion{} s
../singular_texi/types.tex(,87)   listvar();
../singular_texi/types.tex(,88) @expansion{} // s                    [0]  *ring
../singular_texi/types.tex(,89) @expansion{} //      f                    [0]  poly
../singular_texi/types.tex(,90) @expansion{} // r                    [0]  ring
../singular_texi/types.tex(,91) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/types.tex(,92)   poly g = y;
../singular_texi/types.tex(,93)   kill f;
../singular_texi/types.tex(,94)   listvar(r);
../singular_texi/types.tex(,95) @expansion{} // r                    [0]  ring
../singular_texi/types.tex(,96) @expansion{} // g                    [0]  poly
../singular_texi/types.tex(,97)   ring t=32003,(u,w),dp;
../singular_texi/types.tex(,98)   def rt=r+t;
../singular_texi/types.tex(,99)   rt;
../singular_texi/types.tex(,100) @expansion{} //   characteristic : 32003
../singular_texi/types.tex(,101) @expansion{} //   number of vars : 5
../singular_texi/types.tex(,102) @expansion{} //        block   1 : ordering dp
../singular_texi/types.tex(,103) @expansion{} //                  : names    x y z 
../singular_texi/types.tex(,104) @expansion{} //        block   2 : ordering dp
../singular_texi/types.tex(,105) @expansion{} //                  : names    u w 
../singular_texi/types.tex(,106) @expansion{} //        block   3 : ordering C
../singular_texi/types.tex(,107) @c end example def types.doc:78
../singular_texi/types.tex(,108) @end smallexample
../singular_texi/types.tex(,109) 
../singular_texi/types.tex(,110) This reference to a ring with def is useful if the basering
../singular_texi/types.tex(,111) is not local to the procedure (so it cannot be accessed by its name) but one
../singular_texi/types.tex(,112) needs a name for it (e.g., for a use with @code{setring} or @code{map}).
../singular_texi/types.tex(,113) @code{setring r;} does not work in this case, because
../singular_texi/types.tex(,114) @code{r} may not be local to the procedure.
../singular_texi/types.tex(,115) 
../singular_texi/types.tex(,116) @menu
../singular_texi/types.tex(,117) * def declarations::
../singular_texi/types.tex(,118) @end menu
../singular_texi/types.tex(,119) 
../singular_texi/types.tex(,120) @c ------------------------------
../singular_texi/types.tex(,121) @node def declarations,  , def, def
../singular_texi/types.tex(,122) @subsection def declarations
../singular_texi/types.tex(,123) @cindex def declarations
../singular_texi/types.tex(,124) 
../singular_texi/types.tex(,125) @table @strong
../singular_texi/types.tex(,126) @item Syntax:
../singular_texi/types.tex(,127) @code{def} name @code{=} expression @code{;}
../singular_texi/types.tex(,128) 
../singular_texi/types.tex(,129) @item Purpose:
../singular_texi/types.tex(,130) defines an object of the same type as the right-hand side.
../singular_texi/types.tex(,131) 
../singular_texi/types.tex(,132) @item Default:
../singular_texi/types.tex(,133) none
../singular_texi/types.tex(,134) 
../singular_texi/types.tex(,135) @item Note:
../singular_texi/types.tex(,136) This is useful if the right-hand side may be of
../singular_texi/types.tex(,137) variable type as a consequence of a computation (e.g., ideal or module or
../singular_texi/types.tex(,138) matrix). It may also be used in procedures to give the basering a name which
../singular_texi/types.tex(,139) is local to the procedure.
../singular_texi/types.tex(,140) 
../singular_texi/types.tex(,141) @item Example:
../singular_texi/types.tex(,142) @smallexample
../singular_texi/types.tex(,143) @c reused example def_declarations types.doc:127 
../singular_texi/types.tex(,144)   def i=2;
../singular_texi/types.tex(,145)   typeof(i);
../singular_texi/types.tex(,146) @expansion{} int
../singular_texi/types.tex(,147) @c end example def_declarations types.doc:127
../singular_texi/types.tex(,148) @end smallexample
../singular_texi/types.tex(,149) @end table
../singular_texi/types.tex(,150) 
../singular_texi/types.tex(,151) @c inserted refs from types.doc:134
../singular_texi/types.tex(,159) See
../singular_texi/types.tex(,160) @ref{typeof}.
../singular_texi/types.tex(,162) @c end inserted refs from types.doc:134
../singular_texi/types.tex(,163) 
../singular_texi/types.tex(,164) @c ---------------------------------------
../singular_texi/types.tex(,165) @node ideal, int, def, Data types
../singular_texi/types.tex(,166) @section ideal
../singular_texi/types.tex(,167) @cindex ideal
../singular_texi/types.tex(,168) 
../singular_texi/types.tex(,169) Ideals are represented as lists of polynomials which generate the ideal.
../singular_texi/types.tex(,170) Like polynomials they
../singular_texi/types.tex(,171) can only be defined or accessed with respect to a basering.
../singular_texi/types.tex(,172) 
../singular_texi/types.tex(,173) @strong{Note:} @code{size} counts only the non-zero generators of an ideal
../singular_texi/types.tex(,174) whereas @code{ncols} counts all generators.
../singular_texi/types.tex(,175) @menu
../singular_texi/types.tex(,176) * ideal declarations::
../singular_texi/types.tex(,177) * ideal expressions::
../singular_texi/types.tex(,178) * ideal operations::
../singular_texi/types.tex(,179) * ideal related functions::
../singular_texi/types.tex(,180) @end menu
../singular_texi/types.tex(,181) 
../singular_texi/types.tex(,182) @c ---------------------------------------
../singular_texi/types.tex(,183) @node ideal declarations, ideal expressions, ideal, ideal
../singular_texi/types.tex(,184) @subsection ideal declarations
../singular_texi/types.tex(,185) @cindex ideal declarations
../singular_texi/types.tex(,186) 
../singular_texi/types.tex(,187) @table @strong
../singular_texi/types.tex(,188) @item Syntax:
../singular_texi/types.tex(,189) @code{ideal} name @code{=} list_of_poly_and_ideal_expressions @code{;}
../singular_texi/types.tex(,190) @*@code{ideal} name @code{=} ideal_expression @code{;}
../singular_texi/types.tex(,191) 
../singular_texi/types.tex(,192) @item Purpose:
../singular_texi/types.tex(,193) defines an ideal.
../singular_texi/types.tex(,194) 
../singular_texi/types.tex(,195) @item Default:
../singular_texi/types.tex(,196) 0
../singular_texi/types.tex(,197) 
../singular_texi/types.tex(,198) @item Example:
../singular_texi/types.tex(,199) @smallexample
../singular_texi/types.tex(,200) @c reused example ideal_declarations types.doc:175 
../singular_texi/types.tex(,201)   ring r=0,(x,y,z),dp;
../singular_texi/types.tex(,202)   poly s1 = x2;
../singular_texi/types.tex(,203)   poly s2 = y3;
../singular_texi/types.tex(,204)   poly s3 = z;
../singular_texi/types.tex(,205)   ideal i =  s1, s2-s1, 0,s2*s3, s3^4;
../singular_texi/types.tex(,206)   i;
../singular_texi/types.tex(,207) @expansion{} i[1]=x2
../singular_texi/types.tex(,208) @expansion{} i[2]=y3-x2
../singular_texi/types.tex(,209) @expansion{} i[3]=0
../singular_texi/types.tex(,210) @expansion{} i[4]=y3z
../singular_texi/types.tex(,211) @expansion{} i[5]=z4
../singular_texi/types.tex(,212)   size(i);
../singular_texi/types.tex(,213) @expansion{} 4
../singular_texi/types.tex(,214)   ncols(i);
../singular_texi/types.tex(,215) @expansion{} 5
../singular_texi/types.tex(,216) @c end example ideal_declarations types.doc:175
../singular_texi/types.tex(,217) @end smallexample
../singular_texi/types.tex(,218) @end table
../singular_texi/types.tex(,219) 
../singular_texi/types.tex(,220) @c ------------------------------
../singular_texi/types.tex(,221) @node ideal expressions, ideal operations, ideal declarations, ideal
../singular_texi/types.tex(,222) @subsection ideal expressions
../singular_texi/types.tex(,223) @cindex ideal expressions
../singular_texi/types.tex(,224) 
../singular_texi/types.tex(,225) An ideal expression is:
../singular_texi/types.tex(,226) @enumerate
../singular_texi/types.tex(,227) @item
../singular_texi/types.tex(,228) an identifier of type ideal
../singular_texi/types.tex(,229) @item
../singular_texi/types.tex(,230) a function returning ideal
../singular_texi/types.tex(,231) @item
../singular_texi/types.tex(,232) ideal expressions combined by the arithmetic operations
../singular_texi/types.tex(,233) @code{+} or @code{*}
../singular_texi/types.tex(,234) @item
../singular_texi/types.tex(,235) a power of an ideal expression (operator @code{^} or @code{**})
../singular_texi/types.tex(,236) @*Note that the computation of the product @code{i*i} involves
../singular_texi/types.tex(,237) all products of generators of @code{i} while @code{i^2} involves
../singular_texi/types.tex(,238) only the different ones, and is therefore faster.
../singular_texi/types.tex(,239) @item
../singular_texi/types.tex(,240) a type cast to ideal
../singular_texi/types.tex(,241) @end enumerate
../singular_texi/types.tex(,242) 
../singular_texi/types.tex(,243) @*@strong{Example:}
../singular_texi/types.tex(,244) @smallexample
../singular_texi/types.tex(,245) @c reused example ideal_expressions types.doc:213 
../singular_texi/types.tex(,246)   ring r=0,(x,y,z),dp;
../singular_texi/types.tex(,247)   ideal m = maxideal(1);
../singular_texi/types.tex(,248)   m;
../singular_texi/types.tex(,249) @expansion{} m[1]=x
../singular_texi/types.tex(,250) @expansion{} m[2]=y
../singular_texi/types.tex(,251) @expansion{} m[3]=z
../singular_texi/types.tex(,252)   poly f = x2;
../singular_texi/types.tex(,253)   poly g = y3;
../singular_texi/types.tex(,254)   ideal i = x*y*z , f-g, g*(x-y) + f^4 ,0, 2x-z2y;
../singular_texi/types.tex(,255)   ideal M = i + maxideal(10);
../singular_texi/types.tex(,256)   timer =0;
../singular_texi/types.tex(,257)   i = M*M;
../singular_texi/types.tex(,258)   timer;
../singular_texi/types.tex(,259) @expansion{} 0
../singular_texi/types.tex(,260)   ncols(i);
../singular_texi/types.tex(,261) @expansion{} 505
../singular_texi/types.tex(,262)   timer =0;
../singular_texi/types.tex(,263)   i = M^2;
../singular_texi/types.tex(,264)   ncols(i);
../singular_texi/types.tex(,265) @expansion{} 505
../singular_texi/types.tex(,266)   timer;
../singular_texi/types.tex(,267) @expansion{} 0
../singular_texi/types.tex(,268)   i[ncols(i)];
../singular_texi/types.tex(,269) @expansion{} x20
../singular_texi/types.tex(,270)   vector v = [x,y-z,x2,y-x,x2yz2-y];
../singular_texi/types.tex(,271)   ideal j = ideal(v);
../singular_texi/types.tex(,272) @c end example ideal_expressions types.doc:213
../singular_texi/types.tex(,273) @end smallexample
../singular_texi/types.tex(,274) 
../singular_texi/types.tex(,275) @c ------------------------------
../singular_texi/types.tex(,276) @node ideal operations, ideal related functions, ideal expressions, ideal
../singular_texi/types.tex(,277) @subsection ideal operations
../singular_texi/types.tex(,278) @cindex ideal operations
../singular_texi/types.tex(,279) 
../singular_texi/types.tex(,280) @table @asis
../singular_texi/types.tex(,281) @item @code{+}
../singular_texi/types.tex(,282) addition (concatenation of the generators and simplification)
../singular_texi/types.tex(,283) 
../singular_texi/types.tex(,284) @item @code{*}
../singular_texi/types.tex(,285) multiplication (with ideal, poly, vector, module; simplification in case of
../singular_texi/types.tex(,286) multiplication with ideal)
../singular_texi/types.tex(,287) 
../singular_texi/types.tex(,288) @item @code{^}
../singular_texi/types.tex(,289) exponentiation (by a non-negative integer)
../singular_texi/types.tex(,290) 
../singular_texi/types.tex(,291) @item ideal_expression @code{[} intvec_expression @code{]}
../singular_texi/types.tex(,292) are polynomial generators of the ideal, index 1 gives the first generator.
../singular_texi/types.tex(,293) @end table
../singular_texi/types.tex(,294) 
../singular_texi/types.tex(,295) @strong{Note:} For simplification of an ideal, see also @ref{simplify}.
../singular_texi/types.tex(,296) 
../singular_texi/types.tex(,297) @*@strong{Example:}
../singular_texi/types.tex(,298) @smallexample
../singular_texi/types.tex(,299) @c reused example ideal_operations types.doc:259 
../singular_texi/types.tex(,300)   ring r=0,(x,y,z),dp;
../singular_texi/types.tex(,301)   ideal I = 0,x,0,1;
../singular_texi/types.tex(,302)   I;
../singular_texi/types.tex(,303) @expansion{} I[1]=0
../singular_texi/types.tex(,304) @expansion{} I[2]=x
../singular_texi/types.tex(,305) @expansion{} I[3]=0
../singular_texi/types.tex(,306) @expansion{} I[4]=1
../singular_texi/types.tex(,307)   I + 0;    // simplification
../singular_texi/types.tex(,308) @expansion{} _[1]=1
../singular_texi/types.tex(,309)   ideal J = I,0,x,x-z;;
../singular_texi/types.tex(,310)   J;
../singular_texi/types.tex(,311) @expansion{} J[1]=0
../singular_texi/types.tex(,312) @expansion{} J[2]=x
../singular_texi/types.tex(,313) @expansion{} J[3]=0
../singular_texi/types.tex(,314) @expansion{} J[4]=1
../singular_texi/types.tex(,315) @expansion{} J[5]=0
../singular_texi/types.tex(,316) @expansion{} J[6]=x
../singular_texi/types.tex(,317) @expansion{} J[7]=x-z
../singular_texi/types.tex(,318)   I * J;   //  multiplication with simplification
../singular_texi/types.tex(,319) @expansion{} _[1]=1
../singular_texi/types.tex(,320)   I*x;
../singular_texi/types.tex(,321) @expansion{} _[1]=0
../singular_texi/types.tex(,322) @expansion{} _[2]=x2
../singular_texi/types.tex(,323) @expansion{} _[3]=0
../singular_texi/types.tex(,324) @expansion{} _[4]=x
../singular_texi/types.tex(,325)   vector V = [x,y,z];
../singular_texi/types.tex(,326)   print(V*I);
../singular_texi/types.tex(,327) @expansion{} 0,x2,0,x,
../singular_texi/types.tex(,328) @expansion{} 0,xy,0,y,
../singular_texi/types.tex(,329) @expansion{} 0,xz,0,z 
../singular_texi/types.tex(,330)   ideal m = maxideal(1);
../singular_texi/types.tex(,331)   m^2;
../singular_texi/types.tex(,332) @expansion{} _[1]=x2
../singular_texi/types.tex(,333) @expansion{} _[2]=xy
../singular_texi/types.tex(,334) @expansion{} _[3]=xz
../singular_texi/types.tex(,335) @expansion{} _[4]=y2
../singular_texi/types.tex(,336) @expansion{} _[5]=yz
../singular_texi/types.tex(,337) @expansion{} _[6]=z2
../singular_texi/types.tex(,338)   ideal II = I[2..4];
../singular_texi/types.tex(,339)   II;
../singular_texi/types.tex(,340) @expansion{} II[1]=x
../singular_texi/types.tex(,341) @expansion{} II[2]=0
../singular_texi/types.tex(,342) @expansion{} II[3]=1
../singular_texi/types.tex(,343) @c end example ideal_operations types.doc:259
../singular_texi/types.tex(,344) @end smallexample
../singular_texi/types.tex(,345) 
../singular_texi/types.tex(,346) @c ------------------------------
../singular_texi/types.tex(,347) @node ideal related functions,  , ideal operations, ideal
../singular_texi/types.tex(,348) @subsection ideal related functions
../singular_texi/types.tex(,349) @cindex ideal related functions
../singular_texi/types.tex(,350) 
../singular_texi/types.tex(,351) @table @code
../singular_texi/types.tex(,352) @item char_series
../singular_texi/types.tex(,353) irreducible characteristic series (see @ref{char_series})
../singular_texi/types.tex(,354) @item coeffs
../singular_texi/types.tex(,355) matrix of coefficients (see @ref{coeffs})
../singular_texi/types.tex(,356) @item contract
../singular_texi/types.tex(,357) contraction by an ideal (see @ref{contract})
../singular_texi/types.tex(,358) @item diff
../singular_texi/types.tex(,359) partial derivative (see @ref{diff})
../singular_texi/types.tex(,360) @item degree
../singular_texi/types.tex(,361) multiplicity, dimension and codimension of the ideal of leading terms (see @ref{degree})
../singular_texi/types.tex(,362) @item dim
../singular_texi/types.tex(,363) Krull dimension of basering modulo the ideal of leading terms (see @ref{dim})
../singular_texi/types.tex(,364) @item eliminate
../singular_texi/types.tex(,365) elimination of variables (see @ref{eliminate})
../singular_texi/types.tex(,366) @item facstd
../singular_texi/types.tex(,367) factorizing Groebner basis algorithm (see @ref{facstd})
../singular_texi/types.tex(,368) @item factorize
../singular_texi/types.tex(,369) ideal of factors of a polynomial (see @ref{factorize})
../singular_texi/types.tex(,370) @item fglm
../singular_texi/types.tex(,371) Groebner basis computation from a Groebner basis w.r.t.@: a different
../singular_texi/types.tex(,372) ordering (see @ref{fglm})
../singular_texi/types.tex(,373) @item finduni
../singular_texi/types.tex(,374) computation of univariate polynomials lying in a zero dimensional ideal
../singular_texi/types.tex(,375) (see @ref{finduni})
../singular_texi/types.tex(,376) @item groebner
../singular_texi/types.tex(,377) Groebner basis computation (a wrapper around @code{std,stdhilb,stdfglm},...)
../singular_texi/types.tex(,378) (see @ref{groebner})
../singular_texi/types.tex(,379) @item highcorner
../singular_texi/types.tex(,380) computes the smallest monomial not contained in the ideal.
../singular_texi/types.tex(,381) The ideal has to be zero-dimensional.
../singular_texi/types.tex(,382) (see @ref{highcorner})
../singular_texi/types.tex(,383) @item homog
../singular_texi/types.tex(,384) homogenization with respect to a variable (see @ref{homog})
../singular_texi/types.tex(,385) @item hilb
../singular_texi/types.tex(,386) Hilbert series of a standard basis (see @ref{hilb})
../singular_texi/types.tex(,387) @item indepSet
../singular_texi/types.tex(,388) sets of independent variables of an ideal (see @ref{indepSet})
../singular_texi/types.tex(,389) @item interred
../singular_texi/types.tex(,390) interreduction of an ideal (see @ref{interred})
../singular_texi/types.tex(,391) @item intersect
../singular_texi/types.tex(,392) ideal intersection (see @ref{intersect})
../singular_texi/types.tex(,393) @item jacob
../singular_texi/types.tex(,394) ideal of all partial derivatives resp.@: jacobian matrix (see @ref{jacob})
../singular_texi/types.tex(,395) @item jet
../singular_texi/types.tex(,396) Taylor series up to a given order (see @ref{jet})
../singular_texi/types.tex(,397) @item kbase
../singular_texi/types.tex(,398) vector space basis of basering modulo ideal of leading terms
../singular_texi/types.tex(,399) (see @ref{kbase})
../singular_texi/types.tex(,400) @item koszul
../singular_texi/types.tex(,401) Koszul matrix (see @ref{koszul})
../singular_texi/types.tex(,402) @item lead
../singular_texi/types.tex(,403) leading terms of a set of generators (see @ref{lead})
../singular_texi/types.tex(,404) @item lift
../singular_texi/types.tex(,405) lift-matrix (see @ref{lift})
../singular_texi/types.tex(,406) @item liftstd
../singular_texi/types.tex(,407) standard basis and transformation matrix computation (see @ref{liftstd})
../singular_texi/types.tex(,408) @item lres
../singular_texi/types.tex(,409) free resolution for homogeneous ideals (see @ref{lres})
../singular_texi/types.tex(,410) @item maxideal
../singular_texi/types.tex(,411) power of the maximal ideal at 0 (see @ref{maxideal})
../singular_texi/types.tex(,412) @item minbase
../singular_texi/types.tex(,413) minimal generating set of a homogeneous ideal, resp.@: module, or an ideal, resp.@: module, in a local ring
../singular_texi/types.tex(,414) (see @ref{minbase})
../singular_texi/types.tex(,415) @item minor
../singular_texi/types.tex(,416) set of minors of a matrix (see @ref{minor})
../singular_texi/types.tex(,417) @item modulo
../singular_texi/types.tex(,418) represents
../singular_texi/types.tex(,419) @tex
../singular_texi/types.tex(,420) $(h1+h2)/h1 \cong h2/(h1 \cap h2)$
../singular_texi/types.tex(,421) @end tex
../singular_texi/types.tex(,425) (see @ref{modulo})
../singular_texi/types.tex(,426) @item mres
../singular_texi/types.tex(,427) minimal free resolution of an ideal resp.@: module w.r.t. a minimal set of generators of the given ideal resp.@: module
../singular_texi/types.tex(,428) (see @ref{mres})
../singular_texi/types.tex(,429) @item mstd
../singular_texi/types.tex(,430) standard basis and minimal generating set of an ideal (see @ref{mstd})
../singular_texi/types.tex(,431) @item mult
../singular_texi/types.tex(,432) multiplicity, resp.@: degree, of the ideal of leading terms (see @ref{mult})
../singular_texi/types.tex(,433) @item ncols
../singular_texi/types.tex(,434) number of columns (see @ref{ncols})
../singular_texi/types.tex(,435) @item preimage
../singular_texi/types.tex(,436) preimage under a ring map (see @ref{preimage})
../singular_texi/types.tex(,437) @item qhweight
../singular_texi/types.tex(,438) quasihomogeneous weights of an ideal (see @ref{qhweight})
../singular_texi/types.tex(,439) @item quotient
../singular_texi/types.tex(,440) ideal quotient (see @ref{quotient})
../singular_texi/types.tex(,441) @item reduce
../singular_texi/types.tex(,442) normalform with respect to a standard basis (see @ref{reduce})
../singular_texi/types.tex(,443) @item res
../singular_texi/types.tex(,444) free resolution of an ideal resp.@: module but not changing the given ideal resp.@: module
../singular_texi/types.tex(,445) (see @ref{res})
../singular_texi/types.tex(,446) @item simplify
../singular_texi/types.tex(,447) simplify a set of polynomials (see @ref{simplify})
../singular_texi/types.tex(,448) @item size
../singular_texi/types.tex(,449) number of non-zero generators (see @ref{size})
../singular_texi/types.tex(,450) @item sortvec
../singular_texi/types.tex(,451) permutation for sorting ideals resp@:. modules (see @ref{sortvec})
../singular_texi/types.tex(,452) @item sres
../singular_texi/types.tex(,453) free resolution of a standard basis (see @ref{sres})
../singular_texi/types.tex(,454) @item std
../singular_texi/types.tex(,455) standard basis computation (see @ref{std})
../singular_texi/types.tex(,456) @item stdfglm
../singular_texi/types.tex(,457) standard basis computation with fglm technique (see @ref{stdfglm})
../singular_texi/types.tex(,458) @item stdhilb
../singular_texi/types.tex(,459) Hilbert driven standard basis computation (see @ref{stdhilb}
../singular_texi/types.tex(,460) @item subst
../singular_texi/types.tex(,461) substitute a ring variable (see @ref{subst})
../singular_texi/types.tex(,462) @item syz
../singular_texi/types.tex(,463) computation of the first syzygy module (see @ref{syz})
../singular_texi/types.tex(,464) @item vdim
../singular_texi/types.tex(,465) vector space dimension of basering modulo ideal of leading terms
../singular_texi/types.tex(,466) (see @ref{vdim})
../singular_texi/types.tex(,467) @item weight
../singular_texi/types.tex(,468) optimal weights (see @ref{weight})
../singular_texi/types.tex(,469) @end table
../singular_texi/types.tex(,470) 
../singular_texi/types.tex(,471) @c ---------------------------------------
../singular_texi/types.tex(,472) @node int, intmat, ideal, Data types
../singular_texi/types.tex(,473) @section int
../singular_texi/types.tex(,474) @cindex int
../singular_texi/types.tex(,475) 
../singular_texi/types.tex(,476) Variables of type int represent the machine integers and are, therefore,
../singular_texi/types.tex(,477) limited  in their range (e.g., the range is between
../singular_texi/types.tex(,478) -2147483647 and 2147483647 on 32-bit machines). They are mainly used
../singular_texi/types.tex(,479) to count things (dimension, rank, etc.),
../singular_texi/types.tex(,480) in loops (see @ref{for}), and
../singular_texi/types.tex(,481) to represent boolean values
../singular_texi/types.tex(,482) (FALSE is represented by 0, every other value means TRUE, see
../singular_texi/types.tex(,483) @ref{boolean expressions}).
../singular_texi/types.tex(,484) 
../singular_texi/types.tex(,485) Integers consist of a sequence of digits, possibly preceded by a sign.
../singular_texi/types.tex(,486) A space is considered as a separator, so it is not allowed between digits.
../singular_texi/types.tex(,487) A sequence of digits outside the allowed range is converted to the type
../singular_texi/types.tex(,488) @code{number} if possible.
../singular_texi/types.tex(,489) 
../singular_texi/types.tex(,490) @menu
../singular_texi/types.tex(,491) * int declarations::
../singular_texi/types.tex(,492) * int expressions::
../singular_texi/types.tex(,493) * int operations::
../singular_texi/types.tex(,494) * boolean expressions::
../singular_texi/types.tex(,495) * boolean operations::
../singular_texi/types.tex(,496) * int related functions::
../singular_texi/types.tex(,497) @end menu
../singular_texi/types.tex(,498) 
../singular_texi/types.tex(,499) @c ---------------------------------------
../singular_texi/types.tex(,500) @node int declarations, int expressions, int, int
../singular_texi/types.tex(,501) @subsection int declarations
../singular_texi/types.tex(,502) @cindex int declarations
../singular_texi/types.tex(,503) 
../singular_texi/types.tex(,504) @table @strong
../singular_texi/types.tex(,505) @item Syntax:
../singular_texi/types.tex(,506) @code{int} name @code{=} int_expression @code{;}
../singular_texi/types.tex(,507) 
../singular_texi/types.tex(,508) @item Purpose:
../singular_texi/types.tex(,509) defines an integer variable.
../singular_texi/types.tex(,510) 
../singular_texi/types.tex(,511) @item Default:
../singular_texi/types.tex(,512) 0
../singular_texi/types.tex(,513) 
../singular_texi/types.tex(,514) @item Example:
../singular_texi/types.tex(,515) @smallexample
../singular_texi/types.tex(,516) @c reused example int_declarations types.doc:447 
../singular_texi/types.tex(,517)   int i = 42;
../singular_texi/types.tex(,518)   int j = i + 3; j;
../singular_texi/types.tex(,519) @expansion{} 45
../singular_texi/types.tex(,520)   i = i * 3 - j; i;
../singular_texi/types.tex(,521) @expansion{} 81
../singular_texi/types.tex(,522)   int k;   // assigning the default value 0 to k
../singular_texi/types.tex(,523)   k;
../singular_texi/types.tex(,524) @expansion{} 0
../singular_texi/types.tex(,525) @c end example int_declarations types.doc:447
../singular_texi/types.tex(,526) @end smallexample
../singular_texi/types.tex(,527) @end table
../singular_texi/types.tex(,528) 
../singular_texi/types.tex(,529) @c ------------------------------
../singular_texi/types.tex(,530) @node int expressions, int operations, int declarations, int
../singular_texi/types.tex(,531) @subsection int expressions
../singular_texi/types.tex(,532) @cindex int expressions
../singular_texi/types.tex(,533) 
../singular_texi/types.tex(,534) An int expression is:
../singular_texi/types.tex(,535) @enumerate
../singular_texi/types.tex(,536) @item
../singular_texi/types.tex(,537) a sequence of digits (if the number represented by this sequence is too
../singular_texi/types.tex(,538) large to fit into the range of integers it is automatically
../singular_texi/types.tex(,539) converted to the type number, if a basering is defined)
../singular_texi/types.tex(,540) @item
../singular_texi/types.tex(,541) an identifier of type int
../singular_texi/types.tex(,542) @item
../singular_texi/types.tex(,543) a function returning int
../singular_texi/types.tex(,544) @item
../singular_texi/types.tex(,545) int expressions combined by the arithmetic operations
../singular_texi/types.tex(,546) @code{+}, @code{-}, @code{*}, @code{div}, @code{/},
../singular_texi/types.tex(,547) @code{%} (@code{mod}), or @code{^}
../singular_texi/types.tex(,548) @item a boolean expression
../singular_texi/types.tex(,549) @item
../singular_texi/types.tex(,550) a type cast to int
../singular_texi/types.tex(,551) @end enumerate
../singular_texi/types.tex(,552) 
../singular_texi/types.tex(,553) @strong{Note:}
../singular_texi/types.tex(,554) Variables of type int represent the compiler integers  and are, therefore,
../singular_texi/types.tex(,555) limited  in their range (see @ref{Limitations}). If this range is too small
../singular_texi/types.tex(,556) the expression must be converted to the type number over a ring with
../singular_texi/types.tex(,557) characteristic 0.
../singular_texi/types.tex(,558) 
../singular_texi/types.tex(,559) @*@strong{Example:}
../singular_texi/types.tex(,560) @smallexample
../singular_texi/types.tex(,561) @c reused example int_expressions types.doc:489 
../singular_texi/types.tex(,562) 12345678901; // too large
../singular_texi/types.tex(,563) @expansion{}    ? `12345678901` greater than 2147483647(max. integer representation)
../singular_texi/types.tex(,564) @expansion{}    ? error occurred in line 1: `12345678901; // too large`
../singular_texi/types.tex(,565) typeof(_);
../singular_texi/types.tex(,566) @expansion{} none
../singular_texi/types.tex(,567) ring r=0,x,dp;
../singular_texi/types.tex(,568) 12345678901;
../singular_texi/types.tex(,569) @expansion{} 12345678901
../singular_texi/types.tex(,570) typeof(_);
../singular_texi/types.tex(,571) @expansion{} number
../singular_texi/types.tex(,572) // Note: 11*13*17*100*200*2000*503*1111*222222
../singular_texi/types.tex(,573) // returns a machine integer:
../singular_texi/types.tex(,574) 11*13*17*100*200*2000*503*1111*222222;
../singular_texi/types.tex(,575) @expansion{} // ** int overflow(*), result may be wrong
../singular_texi/types.tex(,576) @expansion{} // ** int overflow(*), result may be wrong
../singular_texi/types.tex(,577) @expansion{} // ** int overflow(*), result may be wrong
../singular_texi/types.tex(,578) @expansion{} // ** int overflow(*), result may be wrong
../singular_texi/types.tex(,579) @expansion{} -1875651584
../singular_texi/types.tex(,580) // using the type cast number for a greater allowed range
../singular_texi/types.tex(,581) number(11)*13*17*100*200*2000*503*1111*222222;
../singular_texi/types.tex(,582) @expansion{} 12075748128684240000000
../singular_texi/types.tex(,583) ring rp=32003,x,dp;
../singular_texi/types.tex(,584) 12345678901;
../singular_texi/types.tex(,585) @expansion{} 9603
../singular_texi/types.tex(,586) typeof(_);
../singular_texi/types.tex(,587) @expansion{} number
../singular_texi/types.tex(,588) intmat m[2][2] = 1,2,3,4;
../singular_texi/types.tex(,589) m;
../singular_texi/types.tex(,590) @expansion{} 1,2,
../singular_texi/types.tex(,591) @expansion{} 3,4 
../singular_texi/types.tex(,592) m[2,2];
../singular_texi/types.tex(,593) @expansion{} 4
../singular_texi/types.tex(,594) typeof(_);
../singular_texi/types.tex(,595) @expansion{} int
../singular_texi/types.tex(,596) det(m);
../singular_texi/types.tex(,597) @expansion{} -2
../singular_texi/types.tex(,598) m[1,1] + m[2,1] == trace(m);
../singular_texi/types.tex(,599) @expansion{} 0
../singular_texi/types.tex(,600) ! 0;
../singular_texi/types.tex(,601) @expansion{} 1
../singular_texi/types.tex(,602) 1 and 2;
../singular_texi/types.tex(,603) @expansion{} 1
../singular_texi/types.tex(,604) intvec v = 1,2,3;
../singular_texi/types.tex(,605) def d =transpose(v)*v;    // scalarproduct gives an 1x1 intvec
../singular_texi/types.tex(,606) typeof(d);
../singular_texi/types.tex(,607) @expansion{} intvec
../singular_texi/types.tex(,608) int i = d[1];             // access the first (the only) entry in the intvec
../singular_texi/types.tex(,609) ring rr=31,(x,y,z),dp;
../singular_texi/types.tex(,610) poly f = 1;
../singular_texi/types.tex(,611) i = int(f);               // cast to int
../singular_texi/types.tex(,612) // Integers may be converted to constant  polynomials by an assignment,
../singular_texi/types.tex(,613) poly g=37;
../singular_texi/types.tex(,614) // define the constant polynomial g equal to the image of
../singular_texi/types.tex(,615) // the integer 37 in the actual coefficient field, here it equals 6
../singular_texi/types.tex(,616) g;
../singular_texi/types.tex(,617) @expansion{} 6
../singular_texi/types.tex(,618) @c end example int_expressions types.doc:489
../singular_texi/types.tex(,619) @end smallexample
../singular_texi/types.tex(,620) 
../singular_texi/types.tex(,621) @c inserted refs from types.doc:526
../singular_texi/types.tex(,630) See
../singular_texi/types.tex(,631) @ref{Type conversion and casting};
../singular_texi/types.tex(,632) @ref{number}.
../singular_texi/types.tex(,634) @c end inserted refs from types.doc:526
../singular_texi/types.tex(,635) 
../singular_texi/types.tex(,636) @c ------------------------------
../singular_texi/types.tex(,637) @node int operations, int related functions, int expressions, int
../singular_texi/types.tex(,638) @subsection int operations
../singular_texi/types.tex(,639) @cindex int operations
../singular_texi/types.tex(,640) @cindex mod
../singular_texi/types.tex(,641) @cindex div
../singular_texi/types.tex(,642) 
../singular_texi/types.tex(,643) @c remark: the following table should have style @asis, since the
../singular_texi/types.tex(,644) @c   commas below should not by set in style @code.
../singular_texi/types.tex(,645) @table @asis
../singular_texi/types.tex(,646) @item @code{++}
../singular_texi/types.tex(,647) changes its operand to its successor, is itself no int expression
../singular_texi/types.tex(,648) @item @code{--}
../singular_texi/types.tex(,649) changes its operand to its predecessor, is itself no int expression
../singular_texi/types.tex(,650) @item @code{+}
../singular_texi/types.tex(,651) addition
../singular_texi/types.tex(,652) @item @code{-}
../singular_texi/types.tex(,653) negation or subtraction
../singular_texi/types.tex(,654) @item @code{*}
../singular_texi/types.tex(,655) multiplication
../singular_texi/types.tex(,656) @item @code{/}
../singular_texi/types.tex(,657) integer division (omitting the remainder), rounding toward 0
../singular_texi/types.tex(,658) @item @code{div}
../singular_texi/types.tex(,659) integer division (omitting the remainder >= 0)
../singular_texi/types.tex(,660) @item @code{%}
../singular_texi/types.tex(,661) integer modulo (the remainder of the division @code{/})
../singular_texi/types.tex(,662) @item @code{mod}
../singular_texi/types.tex(,663) integer modulo (the remainder of the division @code{div}), always non-negative
../singular_texi/types.tex(,664) @item @code{^}, @code{**}
../singular_texi/types.tex(,665) exponentiation (exponent must be non-negative)
../singular_texi/types.tex(,666) @item @code{<}, @code{>}, @code{<=}, @code{>=}, @code{==}, @code{<>}
../singular_texi/types.tex(,667) comparison
../singular_texi/types.tex(,668) @end table
../singular_texi/types.tex(,669) 
../singular_texi/types.tex(,670) @strong{Note:} An assignment @code{j=i++;} or @code{j=i--;} is not allowed,
../singular_texi/types.tex(,671) in particular it does not change
../singular_texi/types.tex(,672) the value of @code{j}, see @ref{Limitations}.
../singular_texi/types.tex(,673) 
../singular_texi/types.tex(,674) @c @strong{Note:} @code{/} might no longer be available in the future.
../singular_texi/types.tex(,675) 
../singular_texi/types.tex(,676) @*@strong{Example:}
../singular_texi/types.tex(,677) @smallexample
../singular_texi/types.tex(,678) @c reused example int_operations types.doc:574 
../singular_texi/types.tex(,679)   int i=1;
../singular_texi/types.tex(,680)   int j;
../singular_texi/types.tex(,681)   i++; i;  i--; i;
../singular_texi/types.tex(,682) @expansion{} 2
../singular_texi/types.tex(,683) @expansion{} 1
../singular_texi/types.tex(,684)   // ++ and -- do not return a value as in C, can not assign
../singular_texi/types.tex(,685)   j = i++;
../singular_texi/types.tex(,686) @expansion{} // ** right side is not a datum, assignment ignored
../singular_texi/types.tex(,687)   // the value of j is unchanged
../singular_texi/types.tex(,688)   j; i;
../singular_texi/types.tex(,689) @expansion{} 0
../singular_texi/types.tex(,690) @expansion{} 2
../singular_texi/types.tex(,691)   i+2, 2-i, 5^2;
../singular_texi/types.tex(,692) @expansion{} 4 0 25
../singular_texi/types.tex(,693)   5 div 2, 8%3;
../singular_texi/types.tex(,694) @expansion{} 2 2
../singular_texi/types.tex(,695)   -5 div 2, -5 / 2, -5 mod 2, -5 % 2;
../singular_texi/types.tex(,696) @expansion{} -3 -2 1 -1
../singular_texi/types.tex(,697)   1<2, 2<=2;
../singular_texi/types.tex(,698) @expansion{} 1 1
../singular_texi/types.tex(,699) @c end example int_operations types.doc:574
../singular_texi/types.tex(,700) @end smallexample
../singular_texi/types.tex(,701) 
../singular_texi/types.tex(,702) @c ------------------------------
../singular_texi/types.tex(,703) @node int related functions, boolean expressions,int operations, int
../singular_texi/types.tex(,704) @subsection int related functions
../singular_texi/types.tex(,705) @cindex int related functions
../singular_texi/types.tex(,706) 
../singular_texi/types.tex(,707) @table @code
../singular_texi/types.tex(,708) @item char
../singular_texi/types.tex(,709) characteristic of the coefficient field of a ring (see @ref{char})
../singular_texi/types.tex(,710) @item deg
../singular_texi/types.tex(,711) degree of a poly resp.@: vector (see @ref{deg})
../singular_texi/types.tex(,712) @item det
../singular_texi/types.tex(,713) determinant (see @ref{det})
../singular_texi/types.tex(,714) @item dim
../singular_texi/types.tex(,715) Krull dimension of basering modulo ideal of leading terms, resp.@:
../singular_texi/types.tex(,716) dimension of module of leading terms (see @ref{dim})
../singular_texi/types.tex(,717) @item extgcd
../singular_texi/types.tex(,718) Bezout representation of gcd (see @ref{extgcd})
../singular_texi/types.tex(,719) @item find
../singular_texi/types.tex(,720) position of a substring in a string (see @ref{find})
../singular_texi/types.tex(,721) @item gcd
../singular_texi/types.tex(,722) greatest common divisor (see @ref{gcd})
../singular_texi/types.tex(,723) @item koszul
../singular_texi/types.tex(,724) Koszul matrix (see @ref{koszul})
../singular_texi/types.tex(,725) @item memory
../singular_texi/types.tex(,726) memory usage (see @ref{memory})
../singular_texi/types.tex(,727) @item mult
../singular_texi/types.tex(,728) multiplicity of an ideal, resp.@: module, of leading terms (see @ref{mult})
../singular_texi/types.tex(,729) @item ncols
../singular_texi/types.tex(,730) number of columns (see @ref{ncols})
../singular_texi/types.tex(,731) @item npars
../singular_texi/types.tex(,732) number of ring parameters (see @ref{npars})
../singular_texi/types.tex(,733) @item nrows
../singular_texi/types.tex(,734) number of rows of a matrix, resp.@:
../singular_texi/types.tex(,735) the rank of the free module where the vector or module lives
../singular_texi/types.tex(,736) (see @ref{nrows})
../singular_texi/types.tex(,737) @item nvars
../singular_texi/types.tex(,738) number of ring variables (see @ref{nvars})
../singular_texi/types.tex(,739) @item ord
../singular_texi/types.tex(,740) degree of the leading term of a poly resp.@: vector (see @ref{ord})
../singular_texi/types.tex(,741) @item par
../singular_texi/types.tex(,742) n-th parameter of the basering (see @ref{par})
../singular_texi/types.tex(,743) @item pardeg
../singular_texi/types.tex(,744) degree of a number considered as a polynomial in the ring parameters (see @ref{pardeg})
../singular_texi/types.tex(,745) @item prime
../singular_texi/types.tex(,746) the next lower prime (see @ref{prime})
../singular_texi/types.tex(,747) @item random
../singular_texi/types.tex(,748) a pseudo random integer between the given limits (see @ref{random})
../singular_texi/types.tex(,749) @item regularity
../singular_texi/types.tex(,750) regularity of a resolution (see @ref{regularity})
../singular_texi/types.tex(,751) @item rvar
../singular_texi/types.tex(,752) test, if the given expression or string is a ring variable (see @ref{rvar})
../singular_texi/types.tex(,753) @item size
../singular_texi/types.tex(,754) number of elements in an object (see @ref{size})
../singular_texi/types.tex(,755) @item trace
../singular_texi/types.tex(,756) trace of an integer matrix (see @ref{trace})
../singular_texi/types.tex(,757) @item var
../singular_texi/types.tex(,758) n-th ring variable of the basering (see @ref{var})
../singular_texi/types.tex(,759) @item vdim
../singular_texi/types.tex(,760) vector space dimension of basering modulo ideal of leading terms,
../singular_texi/types.tex(,761) resp.@: of freemodule modulo module of leading terms (see @ref{vdim})
../singular_texi/types.tex(,762) @end table
../singular_texi/types.tex(,763) 
../singular_texi/types.tex(,764) @c ------------------------------
../singular_texi/types.tex(,765) @node boolean expressions, boolean operations, int related functions, int
../singular_texi/types.tex(,766) @subsection boolean expressions
../singular_texi/types.tex(,767) @cindex boolean expressions
../singular_texi/types.tex(,768) @cindex ==
../singular_texi/types.tex(,769) @cindex !=
../singular_texi/types.tex(,770) @cindex <>
../singular_texi/types.tex(,771) @cindex <=
../singular_texi/types.tex(,772) @cindex >=
../singular_texi/types.tex(,773) 
../singular_texi/types.tex(,774) A boolean expression is really an int expression used in a logical context:
../singular_texi/types.tex(,775) 
../singular_texi/types.tex(,776) @c item
../singular_texi/types.tex(,777) @*An int expression (<> 0 evaluates to @emph{TRUE} (represented by 1),
../singular_texi/types.tex(,778) 0 represents @emph{FALSE}).
../singular_texi/types.tex(,779) 
../singular_texi/types.tex(,780) The following is the list of available comparisons of objects of the same type.
../singular_texi/types.tex(,781) 
../singular_texi/types.tex(,782) @strong{Note:} There are no comparisons for ideals and modules, resolution
../singular_texi/types.tex(,783) and maps.
../singular_texi/types.tex(,784) 
../singular_texi/types.tex(,785) @enumerate
../singular_texi/types.tex(,786) @item
../singular_texi/types.tex(,787) an integer comparison:
../singular_texi/types.tex(,788) @smallexample
../singular_texi/types.tex(,789)   i == j
../singular_texi/types.tex(,790)   i != j    // or     i <> j
../singular_texi/types.tex(,791)   i <= j
../singular_texi/types.tex(,792)   i >= j
../singular_texi/types.tex(,793)   i > j
../singular_texi/types.tex(,794)   i < j
../singular_texi/types.tex(,795) @end smallexample
../singular_texi/types.tex(,796) @item
../singular_texi/types.tex(,797) a number comparison:
../singular_texi/types.tex(,798) @smallexample
../singular_texi/types.tex(,799)   m == n
../singular_texi/types.tex(,800)   m != n    // or     m <> n
../singular_texi/types.tex(,801)   m < n
../singular_texi/types.tex(,802)   m > n
../singular_texi/types.tex(,803)   m <= n
../singular_texi/types.tex(,804)   m >= n
../singular_texi/types.tex(,805) @end smallexample
../singular_texi/types.tex(,806) For numbers from Z/p or from field extensions not all operations are useful:
../singular_texi/types.tex(,807) @* - 0 is always the smallest element,
../singular_texi/types.tex(,808) @* - in Z/p the representatives in the range -(p-1)/2..(p-1)/2 when p>2 resp.
../singular_texi/types.tex(,809)      0 and 1 for p=2 are used for comparisons,
../singular_texi/types.tex(,810) @* - in field extensions the last two operations
../singular_texi/types.tex(,811) (@code{>=,<=}) yield always TRUE (1) and
../singular_texi/types.tex(,812) the @code{<} and @code{>} are equivalent to @code{!=}.
../singular_texi/types.tex(,813) @item
../singular_texi/types.tex(,814) a polynomial or vector comparison:
../singular_texi/types.tex(,815) @smallexample
../singular_texi/types.tex(,816)   f == g
../singular_texi/types.tex(,817)   f != g    // or     f <> g
../singular_texi/types.tex(,818)   f <= g    // comparing the leading term w.r.t. the monomial order
../singular_texi/types.tex(,819)   f <  g
../singular_texi/types.tex(,820)   f >= g
../singular_texi/types.tex(,821)   f >  g
../singular_texi/types.tex(,822) @end smallexample
../singular_texi/types.tex(,823) @item
../singular_texi/types.tex(,824) an intmat or matrix comparison:
../singular_texi/types.tex(,825) @smallexample
../singular_texi/types.tex(,826)   v == w
../singular_texi/types.tex(,827)   v != w    // or     v <> w
../singular_texi/types.tex(,828) @end smallexample
../singular_texi/types.tex(,829) @item
../singular_texi/types.tex(,830) an intvec or  string comparison:
../singular_texi/types.tex(,831) @smallexample
../singular_texi/types.tex(,832)   f == g
../singular_texi/types.tex(,833)   f != g    // or     f <> g
../singular_texi/types.tex(,834)   f <= g    // comparing lexicographically
../singular_texi/types.tex(,835)   f >= g    // w.r.t. the order specified by ASCII
../singular_texi/types.tex(,836)   f >  g
../singular_texi/types.tex(,837)   f <  g
../singular_texi/types.tex(,838) @end smallexample
../singular_texi/types.tex(,839) @item
../singular_texi/types.tex(,840) boolean expressions combined by boolean operations (@code{and},
../singular_texi/types.tex(,841) @code{or}, @code{not})
../singular_texi/types.tex(,842) @end enumerate
../singular_texi/types.tex(,843) 
../singular_texi/types.tex(,844) @strong{Note:}
../singular_texi/types.tex(,845) @c ------------------------------------------------------------
../singular_texi/types.tex(,846) @c   This piece of text exists also in the file singular.doc,
../singular_texi/types.tex(,847) @c   chapter "Evaluation of logical expressions".
../singular_texi/types.tex(,848) @c   If you change something here, change it there, too!
../singular_texi/types.tex(,849) @c ------------------------------------------------------------
../singular_texi/types.tex(,850) All arguments of a logical expression are first evaluated and
../singular_texi/types.tex(,851) then the value of the logical expression is determined. For example, the
../singular_texi/types.tex(,852) logical expression @code{(a || b)} is evaluated by first evaluating
../singular_texi/types.tex(,853) @code{a} @emph{and} @code{b}, even though the value of @code{b} has no
../singular_texi/types.tex(,854) influence on the value of @code{(a || b)}, if @code{a} evaluates to
../singular_texi/types.tex(,855) true.
../singular_texi/types.tex(,856) 
../singular_texi/types.tex(,857) Note that this evaluation is different from the left-to-right, conditional
../singular_texi/types.tex(,858) evaluation of logical expressions (as found in most programming
../singular_texi/types.tex(,859) languages). For example, in these other languages, the value of @code{(1
../singular_texi/types.tex(,860) || b)} is determined without ever evaluating @code{b}.
../singular_texi/types.tex(,861) 
../singular_texi/types.tex(,862) See @ref{Major differences to the C programming language}.
../singular_texi/types.tex(,863) 
../singular_texi/types.tex(,864) @c ------------------------------
../singular_texi/types.tex(,865) @node boolean operations, , boolean expressions, int
../singular_texi/types.tex(,866) @subsection boolean operations
../singular_texi/types.tex(,867) @cindex boolean operations
../singular_texi/types.tex(,868) @cindex and
../singular_texi/types.tex(,869) @cindex &&
../singular_texi/types.tex(,870) @cindex or
../singular_texi/types.tex(,871) @cindex ||
../singular_texi/types.tex(,872) @cindex not
../singular_texi/types.tex(,873) 
../singular_texi/types.tex(,874) @table @code
../singular_texi/types.tex(,875) @item and
../singular_texi/types.tex(,876) logical @code{and}, may also be written as @code{&&}
../singular_texi/types.tex(,877) 
../singular_texi/types.tex(,878) @item or
../singular_texi/types.tex(,879) logical @code{or}, may also be written as @code{||}
../singular_texi/types.tex(,880) 
../singular_texi/types.tex(,881) @item not
../singular_texi/types.tex(,882) logical @code{not}, may also be written as @code{!}
../singular_texi/types.tex(,883) @end table
../singular_texi/types.tex(,884) 
../singular_texi/types.tex(,885) The precedence of the boolean operations is:
../singular_texi/types.tex(,886) 
../singular_texi/types.tex(,887) @enumerate
../singular_texi/types.tex(,888) @item parentheses
../singular_texi/types.tex(,889) @item comparisons
../singular_texi/types.tex(,890) @item not
../singular_texi/types.tex(,891) @item and
../singular_texi/types.tex(,892) @item or
../singular_texi/types.tex(,893) @end enumerate
../singular_texi/types.tex(,894) 
../singular_texi/types.tex(,895) @*@strong{Example:}
../singular_texi/types.tex(,896) @smallexample
../singular_texi/types.tex(,897) @c reused example boolean_operations types.doc:784 
../singular_texi/types.tex(,898)   (1>2) and 3;
../singular_texi/types.tex(,899) @expansion{} 0
../singular_texi/types.tex(,900)   1 > 2 and 3;
../singular_texi/types.tex(,901) @expansion{} 0
../singular_texi/types.tex(,902)   ! 0 or 1;
../singular_texi/types.tex(,903) @expansion{} 1
../singular_texi/types.tex(,904)   !(0 or 1);
../singular_texi/types.tex(,905) @expansion{} 0
../singular_texi/types.tex(,906) @c end example boolean_operations types.doc:784
../singular_texi/types.tex(,907) @end smallexample
../singular_texi/types.tex(,908) 
../singular_texi/types.tex(,909) @c ---------------------------------------
../singular_texi/types.tex(,910) @node intmat, intvec, int, Data types
../singular_texi/types.tex(,911) @section intmat
../singular_texi/types.tex(,912) @cindex intmat
../singular_texi/types.tex(,913) 
../singular_texi/types.tex(,914) Integer matrices are matrices with integer entries. For the range of
../singular_texi/types.tex(,915) integers see @ref{Limitations}. Integer matrices do not belong to a
../singular_texi/types.tex(,916) ring, they may be defined without a basering being defined. An intmat
../singular_texi/types.tex(,917) can be multiplied by and added to an int; in this case the int is
../singular_texi/types.tex(,918) converted into an intmat of the right size with the integer on the
../singular_texi/types.tex(,919) diagonal. The integer @code{1}, for example, is converted into the unit
../singular_texi/types.tex(,920) matrix.
../singular_texi/types.tex(,921) 
../singular_texi/types.tex(,922) @menu
../singular_texi/types.tex(,923) * intmat declarations::
../singular_texi/types.tex(,924) * intmat expressions::
../singular_texi/types.tex(,925) * intmat type cast::
../singular_texi/types.tex(,926) * intmat operations::
../singular_texi/types.tex(,927) * intmat related functions::
../singular_texi/types.tex(,928) @end menu
../singular_texi/types.tex(,929) 
../singular_texi/types.tex(,930) @c ------------------------------
../singular_texi/types.tex(,931) @node intmat declarations, intmat expressions, intmat, intmat
../singular_texi/types.tex(,932) @subsection intmat declarations
../singular_texi/types.tex(,933) @cindex intmat declarations
../singular_texi/types.tex(,934) 
../singular_texi/types.tex(,935) @table @strong
../singular_texi/types.tex(,936) @item Syntax:
../singular_texi/types.tex(,937) @code{intmat} name @code{=} intmat_expression @code{;}
../singular_texi/types.tex(,938) @*@code{intmat} name @code{[} rows @code{] [} cols @code{] =} intmat_expression @code{;}
../singular_texi/types.tex(,939) @*@code{intmat} name @code{[} rows @code{] [} cols @code{] =} list_of_int_and_intvec_and_intmat_expressions @code{;}
../singular_texi/types.tex(,940) @*rows and cols must be positive int expressions.
../singular_texi/types.tex(,941) 
../singular_texi/types.tex(,942) @item Purpose:
../singular_texi/types.tex(,943) defines an intmat variable.
../singular_texi/types.tex(,944) @* Given a list of integers, the matrix is filled up with the first row
../singular_texi/types.tex(,945) from the left to the right, then the second row and so on.
../singular_texi/types.tex(,946) If the int_list contains less than rows*cols elements,
../singular_texi/types.tex(,947) the matrix is filled up with zeros; if it contains more
../singular_texi/types.tex(,948) elements, only the first rows*cols elements are used.
../singular_texi/types.tex(,949) 
../singular_texi/types.tex(,950) @item Default:
../singular_texi/types.tex(,951) 0 (1 x 1 matrix)
../singular_texi/types.tex(,952) 
../singular_texi/types.tex(,953) @item Example:
../singular_texi/types.tex(,954) @smallexample
../singular_texi/types.tex(,955) @c reused example intmat_declarations types.doc:838 
../singular_texi/types.tex(,956)   intmat im[3][5]=1,3,5,7,8,9,10,11,12,13;
../singular_texi/types.tex(,957)   im;
../singular_texi/types.tex(,958) @expansion{} 1,3,5,7,8,
../singular_texi/types.tex(,959) @expansion{} 9,10,11,12,13,
../singular_texi/types.tex(,960) @expansion{} 0,0,0,0,0 
../singular_texi/types.tex(,961)   im[3,2];
../singular_texi/types.tex(,962) @expansion{} 0
../singular_texi/types.tex(,963)   intmat m[2][3] = im[1..2,3..5];  // defines a submatrix
../singular_texi/types.tex(,964)   m;
../singular_texi/types.tex(,965) @expansion{} 5,7,8,
../singular_texi/types.tex(,966) @expansion{} 11,12,13 
../singular_texi/types.tex(,967) @c end example intmat_declarations types.doc:838
../singular_texi/types.tex(,968) @end smallexample
../singular_texi/types.tex(,969) @end table
../singular_texi/types.tex(,970) 
../singular_texi/types.tex(,971) @c ------------------------------
../singular_texi/types.tex(,972) @node intmat expressions, intmat type cast, intmat declarations, intmat
../singular_texi/types.tex(,973) @subsection intmat expressions
../singular_texi/types.tex(,974) @cindex intmat expressions
../singular_texi/types.tex(,975) 
../singular_texi/types.tex(,976) An intmat expression is:
../singular_texi/types.tex(,977) @enumerate
../singular_texi/types.tex(,978) @item
../singular_texi/types.tex(,979) an identifier of type intmat
../singular_texi/types.tex(,980) @item
../singular_texi/types.tex(,981) a function returning intmat
../singular_texi/types.tex(,982) @item
../singular_texi/types.tex(,983) intmat operations with int (@code{+}, @code{-}, @code{*}, @code{div}, @code{%})
../singular_texi/types.tex(,984) @item
../singular_texi/types.tex(,985) intmat operations (@code{+}, @code{-}, @code{*})
../singular_texi/types.tex(,986) @item
../singular_texi/types.tex(,987) a type cast to intmat (@pxref{intmat type cast})
../singular_texi/types.tex(,988) @end enumerate
../singular_texi/types.tex(,989) 
../singular_texi/types.tex(,990) @*@strong{Example:}
../singular_texi/types.tex(,991) @smallexample
../singular_texi/types.tex(,992) @c reused example intmat_expressions types.doc:869 
../singular_texi/types.tex(,993)   intmat Idm[2][2];
../singular_texi/types.tex(,994)   Idm +1;          // add the unit intmat
../singular_texi/types.tex(,995) @expansion{} 1,0,
../singular_texi/types.tex(,996) @expansion{} 0,1 
../singular_texi/types.tex(,997)   intmat m1[3][2] = _,1,-2;  // take entries from the last result
../singular_texi/types.tex(,998)   m1;
../singular_texi/types.tex(,999) @expansion{} 1,0,
../singular_texi/types.tex(,1000) @expansion{} 0,1,
../singular_texi/types.tex(,1001) @expansion{} 1,-2 
../singular_texi/types.tex(,1002)   intmat m2[2][3]=1,0,2,4,5,1;
../singular_texi/types.tex(,1003)   transpose(m2);
../singular_texi/types.tex(,1004) @expansion{} 1,4,
../singular_texi/types.tex(,1005) @expansion{} 0,5,
../singular_texi/types.tex(,1006) @expansion{} 2,1 
../singular_texi/types.tex(,1007)   intvec v1=1,2,4;
../singular_texi/types.tex(,1008)   intvec v2=5,7,8;
../singular_texi/types.tex(,1009)   m1=v1,v2;         // fill m1 with v1 and v2
../singular_texi/types.tex(,1010)   m1;
../singular_texi/types.tex(,1011) @expansion{} 1,2,
../singular_texi/types.tex(,1012) @expansion{} 4,5,
../singular_texi/types.tex(,1013) @expansion{} 7,8 
../singular_texi/types.tex(,1014)   trace(m1*m2);
../singular_texi/types.tex(,1015) @expansion{} 56
../singular_texi/types.tex(,1016) @c end example intmat_expressions types.doc:869
../singular_texi/types.tex(,1017) @end smallexample
../singular_texi/types.tex(,1018) @c inserted refs from types.doc:883
../singular_texi/types.tex(,1027) See
../singular_texi/types.tex(,1028) @ref{Type conversion and casting};
../singular_texi/types.tex(,1029) @ref{number}.
../singular_texi/types.tex(,1031) @c end inserted refs from types.doc:883
../singular_texi/types.tex(,1032) 
../singular_texi/types.tex(,1033) @c ------------------------------
../singular_texi/types.tex(,1034) @node intmat type cast,  intmat operations, intmat expressions, intmat
../singular_texi/types.tex(,1035) @subsection intmat type cast
../singular_texi/types.tex(,1036) @cindex intmat type cast
../singular_texi/types.tex(,1037) @table @code
../singular_texi/types.tex(,1038) @item @strong{Syntax:}
../singular_texi/types.tex(,1039) @code{intmat (} expression @code{)}
../singular_texi/types.tex(,1040) @*@code{intmat (} expression, int_n, int_m  @code{)}
../singular_texi/types.tex(,1041) @item @strong{Type:}
../singular_texi/types.tex(,1042) intmat
../singular_texi/types.tex(,1043) @item @strong{Purpose:}
../singular_texi/types.tex(,1044) Converts expression to an intmat, where expression must be of type
../singular_texi/types.tex(,1045) intvec, or intmat. If
../singular_texi/types.tex(,1046) int_n and int_m are supplied, then they specify the dimension of the
../singular_texi/types.tex(,1047) intmat. Otherwise, the size (resp.@: dimensions) of the intmat
../singular_texi/types.tex(,1048) are determined  by the size (resp.@: dimensions) of the
../singular_texi/types.tex(,1049) expression.
../singular_texi/types.tex(,1050) @item @strong{Example:}
../singular_texi/types.tex(,1051) @smallexample
../singular_texi/types.tex(,1052) @c reused example intmat_type_cast types.doc:908 
../singular_texi/types.tex(,1053)   intmat(intvec(1));
../singular_texi/types.tex(,1054) @expansion{} 1 
../singular_texi/types.tex(,1055)   intmat(intvec(1), 1, 2);
../singular_texi/types.tex(,1056) @expansion{} 1,0 
../singular_texi/types.tex(,1057)   intmat(intvec(1,2,3,4), 2, 2);
../singular_texi/types.tex(,1058) @expansion{} 1,2,
../singular_texi/types.tex(,1059) @expansion{} 3,4 
../singular_texi/types.tex(,1060)   intmat(_, 2, 3);
../singular_texi/types.tex(,1061) @expansion{} 1,2,3,
../singular_texi/types.tex(,1062) @expansion{} 4,0,0 
../singular_texi/types.tex(,1063)   intmat(_, 2, 1);
../singular_texi/types.tex(,1064) @expansion{} 1,
../singular_texi/types.tex(,1065) @expansion{} 2 
../singular_texi/types.tex(,1066) @c end example intmat_type_cast types.doc:908
../singular_texi/types.tex(,1067) @end smallexample
../singular_texi/types.tex(,1068) @end table
../singular_texi/types.tex(,1069) @c inserted refs from types.doc:917
../singular_texi/types.tex(,1079) See
../singular_texi/types.tex(,1080) @ref{Type conversion and casting};
../singular_texi/types.tex(,1081) @ref{intmat};
../singular_texi/types.tex(,1082) @ref{matrix type cast}.
../singular_texi/types.tex(,1084) @c end inserted refs from types.doc:917
../singular_texi/types.tex(,1085) @c ------------------------------
../singular_texi/types.tex(,1086) @node intmat operations, intmat related functions, intmat type cast, intmat
../singular_texi/types.tex(,1087) @subsection intmat operations
../singular_texi/types.tex(,1088) @cindex intmat operations
../singular_texi/types.tex(,1089) 
../singular_texi/types.tex(,1090) @table @asis
../singular_texi/types.tex(,1091) @item @code{+}
../singular_texi/types.tex(,1092) addition with intmat or int; the int is converted into a diagonal intmat
../singular_texi/types.tex(,1093) 
../singular_texi/types.tex(,1094) @item @code{-}
../singular_texi/types.tex(,1095) negation or subtraction with intmat or int; the int is converted into a
../singular_texi/types.tex(,1096) diagonal intmat
../singular_texi/types.tex(,1097) 
../singular_texi/types.tex(,1098) @item @code{*}
../singular_texi/types.tex(,1099) multiplication with intmat, intvec, or int; the int is converted into a
../singular_texi/types.tex(,1100) diagonal intmat
../singular_texi/types.tex(,1101) 
../singular_texi/types.tex(,1102) @item @code{div,/}
../singular_texi/types.tex(,1103) division of entries in the integers (omitting the remainder)
../singular_texi/types.tex(,1104) @item @code{%, mod}
../singular_texi/types.tex(,1105) entries modulo int (remainder of the division)
../singular_texi/types.tex(,1106) @item @code{<>}, @code{==}
../singular_texi/types.tex(,1107) comparison
../singular_texi/types.tex(,1108) 
../singular_texi/types.tex(,1109) @item intmat_expression @code{[} intvec_expression@code{,} intvec_expression @code{]}
../singular_texi/types.tex(,1110) is an intmat entry, where the first index indicates the row and the
../singular_texi/types.tex(,1111) second the column
../singular_texi/types.tex(,1112) @end table
../singular_texi/types.tex(,1113) 
../singular_texi/types.tex(,1114) @*@strong{Example:}
../singular_texi/types.tex(,1115) @smallexample
../singular_texi/types.tex(,1116) @c reused example intmat_operations types.doc:954 
../singular_texi/types.tex(,1117)   intmat m[2][4] = 1,0,2,4,0,1,-1,0,3,2,1,-2;
../singular_texi/types.tex(,1118)   m;
../singular_texi/types.tex(,1119) @expansion{} 1,0,2,4,
../singular_texi/types.tex(,1120) @expansion{} 0,1,-1,0 
../singular_texi/types.tex(,1121)   m[2,3];          // entry at row 2, col 3
../singular_texi/types.tex(,1122) @expansion{} -1
../singular_texi/types.tex(,1123)   size(m);         // number of entries
../singular_texi/types.tex(,1124) @expansion{} 8
../singular_texi/types.tex(,1125)   intvec v = 1,0,-1,2;
../singular_texi/types.tex(,1126)   m * v;
../singular_texi/types.tex(,1127) @expansion{} 7,1
../singular_texi/types.tex(,1128)   typeof(_);
../singular_texi/types.tex(,1129) @expansion{} intvec
../singular_texi/types.tex(,1130)   intmat m1[4][3] = 0,1,2,3,v,1;
../singular_texi/types.tex(,1131)   intmat m2 = m * m1;
../singular_texi/types.tex(,1132)   m2;             //  2 x 3 intmat
../singular_texi/types.tex(,1133) @expansion{} -2,5,4,
../singular_texi/types.tex(,1134) @expansion{} 4,-1,-1 
../singular_texi/types.tex(,1135)   m2*10;           // multiply each entry of m with 10;
../singular_texi/types.tex(,1136) @expansion{} -20,50,40,
../singular_texi/types.tex(,1137) @expansion{} 40,-10,-10 
../singular_texi/types.tex(,1138)   -m2;
../singular_texi/types.tex(,1139) @expansion{} 2,-5,-4,
../singular_texi/types.tex(,1140) @expansion{} -4,1,1 
../singular_texi/types.tex(,1141)   m2 % 2;
../singular_texi/types.tex(,1142) @expansion{} 0,1,0,
../singular_texi/types.tex(,1143) @expansion{} 0,1,1 
../singular_texi/types.tex(,1144)   m2 div 2;
../singular_texi/types.tex(,1145) @expansion{} -1,2,2,
../singular_texi/types.tex(,1146) @expansion{} 2,-1,-1 
../singular_texi/types.tex(,1147)   m2[2,1];          // entry at row 2, col 1
../singular_texi/types.tex(,1148) @expansion{} 4
../singular_texi/types.tex(,1149)   m1[2..3,2..3];   // submatrix
../singular_texi/types.tex(,1150) @expansion{} 1 0 2 1
../singular_texi/types.tex(,1151)   m2[nrows(m2),ncols(m2)];      // the last entry of intmat m2
../singular_texi/types.tex(,1152) @expansion{} -1
../singular_texi/types.tex(,1153) @c end example intmat_operations types.doc:954
../singular_texi/types.tex(,1154) @end smallexample
../singular_texi/types.tex(,1155) 
../singular_texi/types.tex(,1156) @c ------------------------------
../singular_texi/types.tex(,1157) @node intmat related functions,  , intmat operations, intmat
../singular_texi/types.tex(,1158) @subsection intmat related functions
../singular_texi/types.tex(,1159) @cindex intmat related functions
../singular_texi/types.tex(,1160) 
../singular_texi/types.tex(,1161) @table @code
../singular_texi/types.tex(,1162) @item betti
../singular_texi/types.tex(,1163) Betti numbers of a free resolution (see @ref{betti})
../singular_texi/types.tex(,1164) @item det
../singular_texi/types.tex(,1165) determinant (see @ref{det})
../singular_texi/types.tex(,1166) @item ncols
../singular_texi/types.tex(,1167) number of cols (see @ref{ncols})
../singular_texi/types.tex(,1168) @item nrows
../singular_texi/types.tex(,1169) number of rows (see @ref{nrows})
../singular_texi/types.tex(,1170) @item random
../singular_texi/types.tex(,1171) create a pseudo random intmat (see @ref{random})
../singular_texi/types.tex(,1172) @item size
../singular_texi/types.tex(,1173) total number of entries (see @ref{size})
../singular_texi/types.tex(,1174) @item transpose
../singular_texi/types.tex(,1175) transpose of an intmat (see @ref{transpose})
../singular_texi/types.tex(,1176) @item trace
../singular_texi/types.tex(,1177) trace of an intmat (see @ref{trace})
../singular_texi/types.tex(,1178) @end table
../singular_texi/types.tex(,1179) 
../singular_texi/types.tex(,1180) @c ---------------------------------------
../singular_texi/types.tex(,1181) @node intvec, link, intmat, Data types
../singular_texi/types.tex(,1182) @section intvec
../singular_texi/types.tex(,1183) @cindex intvec
../singular_texi/types.tex(,1184) 
../singular_texi/types.tex(,1185) Variables of type intvec are lists of integers.  For the range of
../singular_texi/types.tex(,1186) integers see @ref{Limitations}. They may be used for simulating
../singular_texi/types.tex(,1187) sets of integers (and other sets if the intvec is used as an index set
../singular_texi/types.tex(,1188) for other objects). Addition and subtraction of an
../singular_texi/types.tex(,1189) intvec with an int or an intvec is done element-wise.
../singular_texi/types.tex(,1190) @c @example
../singular_texi/types.tex(,1191) @c @c example
../singular_texi/types.tex(,1192) @c   intvec iv=1,2,5,7;
../singular_texi/types.tex(,1193) @c   iv;
../singular_texi/types.tex(,1194) @c   iv[3];
../singular_texi/types.tex(,1195) @c   iv[7]=1;
../singular_texi/types.tex(,1196) @c   iv;
../singular_texi/types.tex(,1197) @c @c example
../singular_texi/types.tex(,1198) @c @end example
../singular_texi/types.tex(,1199) 
../singular_texi/types.tex(,1200) @menu
../singular_texi/types.tex(,1201) * intvec declarations::
../singular_texi/types.tex(,1202) * intvec expressions::
../singular_texi/types.tex(,1203) * intvec operations::
../singular_texi/types.tex(,1204) * intvec related functions::
../singular_texi/types.tex(,1205) @end menu
../singular_texi/types.tex(,1206) 
../singular_texi/types.tex(,1207) @c ------------------------------
../singular_texi/types.tex(,1208) @node intvec declarations, intvec expressions, intvec, intvec
../singular_texi/types.tex(,1209) @subsection intvec declarations
../singular_texi/types.tex(,1210) @cindex intvec declarations
../singular_texi/types.tex(,1211) 
../singular_texi/types.tex(,1212) @table @strong
../singular_texi/types.tex(,1213) @item Syntax:
../singular_texi/types.tex(,1214) @code{intvec} name @code{=} intvec_expression @code{;}
../singular_texi/types.tex(,1215) @*@code{intvec} name @code{=} list_of_int_and_intvec_expressions @code{;}
../singular_texi/types.tex(,1216) 
../singular_texi/types.tex(,1217) @item Purpose:
../singular_texi/types.tex(,1218) defines an intvec variable.
../singular_texi/types.tex(,1219) @* An intvec consists of an ordered list of integers.
../singular_texi/types.tex(,1220) 
../singular_texi/types.tex(,1221) @item Default:
../singular_texi/types.tex(,1222) 0
../singular_texi/types.tex(,1223) 
../singular_texi/types.tex(,1224) @item Example:
../singular_texi/types.tex(,1225) @smallexample
../singular_texi/types.tex(,1226) @c reused example intvec_declarations types.doc:1045 
../singular_texi/types.tex(,1227)   intvec iv=1,3,5,7,8;
../singular_texi/types.tex(,1228)   iv;
../singular_texi/types.tex(,1229) @expansion{} 1,3,5,7,8
../singular_texi/types.tex(,1230)   iv[4];
../singular_texi/types.tex(,1231) @expansion{} 7
../singular_texi/types.tex(,1232)   iv[3..size (iv)];
../singular_texi/types.tex(,1233) @expansion{} 5 7 8
../singular_texi/types.tex(,1234) @c end example intvec_declarations types.doc:1045
../singular_texi/types.tex(,1235) @end smallexample
../singular_texi/types.tex(,1236) @end table
../singular_texi/types.tex(,1237) 
../singular_texi/types.tex(,1238) @c ------------------------------
../singular_texi/types.tex(,1239) @node intvec expressions, intvec operations, intvec declarations, intvec
../singular_texi/types.tex(,1240) @subsection intvec expressions
../singular_texi/types.tex(,1241) @cindex intvec expressions
../singular_texi/types.tex(,1242) 
../singular_texi/types.tex(,1243) An intvec expression is:
../singular_texi/types.tex(,1244) @enumerate
../singular_texi/types.tex(,1245) @item
../singular_texi/types.tex(,1246) a range: int expression @code{..} int expression
../singular_texi/types.tex(,1247) @item
../singular_texi/types.tex(,1248) a function returning intvec
../singular_texi/types.tex(,1249) @item
../singular_texi/types.tex(,1250) intvec operations with int (@code{+}, @code{-}, @code{*}, @code{/}, @code{%})
../singular_texi/types.tex(,1251) @item
../singular_texi/types.tex(,1252) intvec operations (@code{+}, @code{-})
../singular_texi/types.tex(,1253) @item
../singular_texi/types.tex(,1254) intvec operation with intmat (@code{*})
../singular_texi/types.tex(,1255) @item
../singular_texi/types.tex(,1256) a type cast to intvec
../singular_texi/types.tex(,1257) @end enumerate
../singular_texi/types.tex(,1258) 
../singular_texi/types.tex(,1259) @*@strong{Example:}
../singular_texi/types.tex(,1260) @smallexample
../singular_texi/types.tex(,1261) @c reused example intvec_expressions types.doc:1077 
../singular_texi/types.tex(,1262)   intvec v=-1,2;
../singular_texi/types.tex(,1263)   intvec w=v,v;         // concatenation
../singular_texi/types.tex(,1264)   w;
../singular_texi/types.tex(,1265) @expansion{} -1,2,-1,2
../singular_texi/types.tex(,1266)   w = -2..2,v,1;
../singular_texi/types.tex(,1267)   w;
../singular_texi/types.tex(,1268) @expansion{} -2,-1,0,1,2,-1,2,1
../singular_texi/types.tex(,1269)   intmat m[3][2] = 0,1,2,-2,3,1;
../singular_texi/types.tex(,1270)   m*v;
../singular_texi/types.tex(,1271) @expansion{} 2,-6,-1
../singular_texi/types.tex(,1272)   typeof(_);
../singular_texi/types.tex(,1273) @expansion{} intvec
../singular_texi/types.tex(,1274)   v = intvec(m);
../singular_texi/types.tex(,1275)   v;
../singular_texi/types.tex(,1276) @expansion{} 0,1,2,-2,3,1
../singular_texi/types.tex(,1277)   ring r;
../singular_texi/types.tex(,1278)   poly f = x2z + 2xy-z;
../singular_texi/types.tex(,1279)   f;
../singular_texi/types.tex(,1280) @expansion{} x2z+2xy-z
../singular_texi/types.tex(,1281)   v = leadexp(f);
../singular_texi/types.tex(,1282)   v;
../singular_texi/types.tex(,1283) @expansion{} 2,0,1
../singular_texi/types.tex(,1284) @c end example intvec_expressions types.doc:1077
../singular_texi/types.tex(,1285) @end smallexample
../singular_texi/types.tex(,1286) 
../singular_texi/types.tex(,1287) @c ------------------------------
../singular_texi/types.tex(,1288) @node intvec operations, intvec related functions, intvec expressions, intvec
../singular_texi/types.tex(,1289) @subsection intvec operations
../singular_texi/types.tex(,1290) @cindex intvec operations
../singular_texi/types.tex(,1291) 
../singular_texi/types.tex(,1292) @table @asis
../singular_texi/types.tex(,1293) @item @code{+}
../singular_texi/types.tex(,1294) addition with intvec or int (component-wise)
../singular_texi/types.tex(,1295) 
../singular_texi/types.tex(,1296) @item @code{-}
../singular_texi/types.tex(,1297) negation or subtraction with intvec or int (component-wise)
../singular_texi/types.tex(,1298) 
../singular_texi/types.tex(,1299) @item @code{*}
../singular_texi/types.tex(,1300) multiplication with int (component-wise)
../singular_texi/types.tex(,1301) 
../singular_texi/types.tex(,1302) @item @code{/}, @code{div}
../singular_texi/types.tex(,1303) division by int (component-wise)
../singular_texi/types.tex(,1304) 
../singular_texi/types.tex(,1305) @item  @code{%, mod}
../singular_texi/types.tex(,1306) modulo (component-wise)
../singular_texi/types.tex(,1307) 
../singular_texi/types.tex(,1308) @item  @code{<>}, @code{==}, @code{<=}, @code{>=}, @code{>}, @code{<}
../singular_texi/types.tex(,1309) comparison (done lexicographically)
../singular_texi/types.tex(,1310) 
../singular_texi/types.tex(,1311) @item intvec_expression @code{[} int_expression @code{]}
../singular_texi/types.tex(,1312) is an element of the intvec; the first element has index one.
../singular_texi/types.tex(,1313) @end table
../singular_texi/types.tex(,1314) 
../singular_texi/types.tex(,1315) @*@strong{Example:}
../singular_texi/types.tex(,1316) @smallexample
../singular_texi/types.tex(,1317) @c reused example intvec_operations types.doc:1126 
../singular_texi/types.tex(,1318)   intvec iv =  1,3,5,7,8;
../singular_texi/types.tex(,1319)   iv+1;               // add 1 to each entry
../singular_texi/types.tex(,1320) @expansion{} 2,4,6,8,9
../singular_texi/types.tex(,1321)   iv*2;
../singular_texi/types.tex(,1322) @expansion{} 2,6,10,14,16
../singular_texi/types.tex(,1323)   iv;
../singular_texi/types.tex(,1324) @expansion{} 1,3,5,7,8
../singular_texi/types.tex(,1325)   iv-10;
../singular_texi/types.tex(,1326) @expansion{} -9,-7,-5,-3,-2
../singular_texi/types.tex(,1327)   iv=iv,0;
../singular_texi/types.tex(,1328)   iv;
../singular_texi/types.tex(,1329) @expansion{} 1,3,5,7,8,0
../singular_texi/types.tex(,1330)   iv div 2;
../singular_texi/types.tex(,1331) @expansion{} 0,1,2,3,4,0
../singular_texi/types.tex(,1332)   iv+iv;              // component-wise addition
../singular_texi/types.tex(,1333) @expansion{} 2,6,10,14,16,0
../singular_texi/types.tex(,1334)   iv[size(iv)-1];     // last-1 entry
../singular_texi/types.tex(,1335) @expansion{} 8
../singular_texi/types.tex(,1336)   intvec iw=2,3,4,0;
../singular_texi/types.tex(,1337)   iv==iw;             // lexicographic comparison
../singular_texi/types.tex(,1338) @expansion{} 0
../singular_texi/types.tex(,1339)   iv < iw;
../singular_texi/types.tex(,1340) @expansion{} 1
../singular_texi/types.tex(,1341)   iv != iw;
../singular_texi/types.tex(,1342) @expansion{} 1
../singular_texi/types.tex(,1343)   iv[2];
../singular_texi/types.tex(,1344) @expansion{} 3
../singular_texi/types.tex(,1345)   iw = 4,1,2;
../singular_texi/types.tex(,1346)   iv[iw];
../singular_texi/types.tex(,1347) @expansion{} 7 1 3
../singular_texi/types.tex(,1348) @c end example intvec_operations types.doc:1126
../singular_texi/types.tex(,1349) @end smallexample
../singular_texi/types.tex(,1350) 
../singular_texi/types.tex(,1351) @c ------------------------------
../singular_texi/types.tex(,1352) @node intvec related functions,  , intvec operations, intvec
../singular_texi/types.tex(,1353) @subsection intvec related functions
../singular_texi/types.tex(,1354) @cindex intvec related functions
../singular_texi/types.tex(,1355) 
../singular_texi/types.tex(,1356) @table @code
../singular_texi/types.tex(,1357) @item hilb
../singular_texi/types.tex(,1358) returns Hilbert series as intvec (see @ref{hilb})
../singular_texi/types.tex(,1359) @item indepSet
../singular_texi/types.tex(,1360) sets of independent variables of an ideal (see @ref{indepSet})
../singular_texi/types.tex(,1361) @item leadexp
../singular_texi/types.tex(,1362) the exponent vector of the leading monomial (see @ref{leadexp})
../singular_texi/types.tex(,1363) @item nrows
../singular_texi/types.tex(,1364) number of rows (see @ref{nrows})
../singular_texi/types.tex(,1365) @item qhweight
../singular_texi/types.tex(,1366) returns quasihomogeneous weights (see @ref{qhweight})
../singular_texi/types.tex(,1367) @item size
../singular_texi/types.tex(,1368) length of the intvec (see @ref{size})
../singular_texi/types.tex(,1369) @item sortvec
../singular_texi/types.tex(,1370) permutation for sorting ideals/modules (see @ref{sortvec})
../singular_texi/types.tex(,1371) @item transpose
../singular_texi/types.tex(,1372) transpose of an intvec, returns an intmat (see @ref{transpose})
../singular_texi/types.tex(,1373) @item weight
../singular_texi/types.tex(,1374) returns weights for the weighted ecart method (see @ref{weight})
../singular_texi/types.tex(,1375) @end table
../singular_texi/types.tex(,1376) 
../singular_texi/types.tex(,1377) @c ---------------------------------------
../singular_texi/types.tex(,1378) @node link, list, intvec, Data types
../singular_texi/types.tex(,1379) @section link
../singular_texi/types.tex(,1380) @cindex link
../singular_texi/types.tex(,1381) 
../singular_texi/types.tex(,1382) @c {{{ section link }}}
../singular_texi/types.tex(,1383) Links are the communication channels of @sc{Singular}, i.e.,
../singular_texi/types.tex(,1384) something @sc{Singular} can write to and/or read from. Currently,
../singular_texi/types.tex(,1385) @sc{Singular} supports four different link types:
../singular_texi/types.tex(,1386) @itemize @bullet
../singular_texi/types.tex(,1387) @item ASCII links (see
../singular_texi/types.tex(,1388) @ref{ASCII links})
../singular_texi/types.tex(,1389) 
../singular_texi/types.tex(,1390) @item MPfile links (see
../singular_texi/types.tex(,1391) @ref{MPfile links})
../singular_texi/types.tex(,1392) 
../singular_texi/types.tex(,1393) @item MPtcp links (see
../singular_texi/types.tex(,1394) @ref{MPtcp links})
../singular_texi/types.tex(,1395) 
../singular_texi/types.tex(,1396) @item DBM links (see
../singular_texi/types.tex(,1397) @ref{DBM links})
../singular_texi/types.tex(,1398) @end itemize
../singular_texi/types.tex(,1399) 
../singular_texi/types.tex(,1400) @menu
../singular_texi/types.tex(,1401) * link declarations::
../singular_texi/types.tex(,1402) * link expressions::
../singular_texi/types.tex(,1403) * link related functions::
../singular_texi/types.tex(,1404) * ASCII links::
../singular_texi/types.tex(,1405) * MP links::
../singular_texi/types.tex(,1406) * DBM links::
../singular_texi/types.tex(,1407) @end menu
../singular_texi/types.tex(,1408) 
../singular_texi/types.tex(,1409) @c ------------------------------
../singular_texi/types.tex(,1410) @node link declarations, link expressions, link, link
../singular_texi/types.tex(,1411) @subsection link declarations
../singular_texi/types.tex(,1412) @cindex link declarations
../singular_texi/types.tex(,1413) 
../singular_texi/types.tex(,1414) @table @strong
../singular_texi/types.tex(,1415) @item Syntax:
../singular_texi/types.tex(,1416) @code{link} name @code{=} string_expression @code{;}
../singular_texi/types.tex(,1417) 
../singular_texi/types.tex(,1418) @item Purpose:
../singular_texi/types.tex(,1419) defines a new communication link.
../singular_texi/types.tex(,1420) 
../singular_texi/types.tex(,1421) @item Default:
../singular_texi/types.tex(,1422) none
../singular_texi/types.tex(,1423) 
../singular_texi/types.tex(,1424) @item Example:
../singular_texi/types.tex(,1425) @smallexample
../singular_texi/types.tex(,1426) @c Tim: Let's only do the read here once, doing it twice without closing
../singular_texi/types.tex(,1427) @c it first might be confusing
../singular_texi/types.tex(,1428) @c reused example link_declarations types.doc:1224 
../singular_texi/types.tex(,1429)   link l=":w example.txt";
../singular_texi/types.tex(,1430)   int i=22;          // cf. ASCII links for explanation
../singular_texi/types.tex(,1431)   string s="An int follows:";
../singular_texi/types.tex(,1432)   write(l,s,i);
../singular_texi/types.tex(,1433)   l;
../singular_texi/types.tex(,1434) @expansion{} // type : ASCII
../singular_texi/types.tex(,1435) @expansion{} // mode : w
../singular_texi/types.tex(,1436) @expansion{} // name : example.txt
../singular_texi/types.tex(,1437) @expansion{} // open : yes
../singular_texi/types.tex(,1438) @expansion{} // read : not ready
../singular_texi/types.tex(,1439) @expansion{} // write: ready
../singular_texi/types.tex(,1440)   close(l);          //
../singular_texi/types.tex(,1441)   read(l);
../singular_texi/types.tex(,1442) @expansion{} An int follows:
../singular_texi/types.tex(,1443) @expansion{} 22
../singular_texi/types.tex(,1444) @expansion{} 
../singular_texi/types.tex(,1445)   close(l);
../singular_texi/types.tex(,1446) @c end example link_declarations types.doc:1224
../singular_texi/types.tex(,1447) @end smallexample
../singular_texi/types.tex(,1448) @end table
../singular_texi/types.tex(,1449) 
../singular_texi/types.tex(,1450) @c ------------------------------
../singular_texi/types.tex(,1451) @node link expressions, link related functions, link declarations, link
../singular_texi/types.tex(,1452) @subsection link expressions
../singular_texi/types.tex(,1453) @cindex link expressions
../singular_texi/types.tex(,1454) 
../singular_texi/types.tex(,1455) A link expression is:
../singular_texi/types.tex(,1456) @enumerate
../singular_texi/types.tex(,1457) @item
../singular_texi/types.tex(,1458) an identifier of type link
../singular_texi/types.tex(,1459) @item
../singular_texi/types.tex(,1460) a string describing the link
../singular_texi/types.tex(,1461) @end enumerate
../singular_texi/types.tex(,1462) 
../singular_texi/types.tex(,1463) A link is described by a string which consists of two parts: a property
../singular_texi/types.tex(,1464) string followed by a name string. The property string describes the type
../singular_texi/types.tex(,1465) of the link (@code{ASCII}, @code{MPfile}, @code{MPtcp} or @code{DBM})
../singular_texi/types.tex(,1466) and the mode of the link (e.g., open for read, write or append). The name
../singular_texi/types.tex(,1467) string describes the filename of the link, resp.@: a network connection
../singular_texi/types.tex(,1468) for MPtcp links.
../singular_texi/types.tex(,1469) 
../singular_texi/types.tex(,1470) For a detailed format description of the link describing string see:
../singular_texi/types.tex(,1472) @itemize @bullet
../singular_texi/types.tex(,1473) @item for ASCII links:
../singular_texi/types.tex(,1474) @ref{ASCII links}
../singular_texi/types.tex(,1475) 
../singular_texi/types.tex(,1476) @item for MPfile links:
../singular_texi/types.tex(,1477) @ref{MPfile links}
../singular_texi/types.tex(,1478) 
../singular_texi/types.tex(,1479) @item for MPtcp links:
../singular_texi/types.tex(,1480) @ref{MPtcp links}
../singular_texi/types.tex(,1481) 
../singular_texi/types.tex(,1482) @item for DBM links:
../singular_texi/types.tex(,1483) @ref{DBM links}
../singular_texi/types.tex(,1484) @end itemize
../singular_texi/types.tex(,1486) 
../singular_texi/types.tex(,1487) @menu
../singular_texi/types.tex(,1488) * ASCII links::
../singular_texi/types.tex(,1489) * MPfile links::
../singular_texi/types.tex(,1490) * MPtcp links::
../singular_texi/types.tex(,1491) * DBM links::
../singular_texi/types.tex(,1492) @end menu
../singular_texi/types.tex(,1493) 
../singular_texi/types.tex(,1494) @c ------------------------------
../singular_texi/types.tex(,1495) @node link related functions, ASCII links, link expressions, link
../singular_texi/types.tex(,1496) @subsection link related functions
../singular_texi/types.tex(,1497) @cindex link related functions
../singular_texi/types.tex(,1498) 
../singular_texi/types.tex(,1499) @table @code
../singular_texi/types.tex(,1500) @item close
../singular_texi/types.tex(,1501) closes a link (see @ref{close})
../singular_texi/types.tex(,1502) @item dump
../singular_texi/types.tex(,1503) generates a dump of all variables and their values (see @ref{dump})
../singular_texi/types.tex(,1504) @item getdump
../singular_texi/types.tex(,1505) reads a dump (see @ref{getdump})
../singular_texi/types.tex(,1506) @item open
../singular_texi/types.tex(,1507) opens a link (see @ref{open})
../singular_texi/types.tex(,1508) @item read
../singular_texi/types.tex(,1509) reads from a link (see @ref{read})
../singular_texi/types.tex(,1510) @item status
../singular_texi/types.tex(,1511) gets the status of a link (see @ref{status})
../singular_texi/types.tex(,1512) @item write
../singular_texi/types.tex(,1513) writes to a link (see @ref{write})
../singular_texi/types.tex(,1514) @item kill
../singular_texi/types.tex(,1515) closes and kills a link (see @ref{kill})
../singular_texi/types.tex(,1516) @end table
../singular_texi/types.tex(,1517) 
../singular_texi/types.tex(,1518) @c ------------------------------
../singular_texi/types.tex(,1519) @node ASCII links, MP links, link related functions, link
../singular_texi/types.tex(,1520) @subsection ASCII links
../singular_texi/types.tex(,1521) @cindex ASCII links
../singular_texi/types.tex(,1522) 
../singular_texi/types.tex(,1523) Via ASCII links data that can be converted to a string can be written
../singular_texi/types.tex(,1524) into files for storage or communication with other programs. The data is
../singular_texi/types.tex(,1525) written in plain ASCII format. The output format of polynomials is done
../singular_texi/types.tex(,1526) w.r.t@:. the value of the global variable @code{short} (see @ref{short}).
../singular_texi/types.tex(,1527) Reading from an ASCII link returns a string --- conversion into other data
../singular_texi/types.tex(,1528) is up to the user. This can be done, for example,
../singular_texi/types.tex(,1529) using the command @code{execute}
../singular_texi/types.tex(,1530) (see @ref{execute}).
../singular_texi/types.tex(,1531) 
../singular_texi/types.tex(,1532) The ASCII link describing string has to be one of the following:
../singular_texi/types.tex(,1533) 
../singular_texi/types.tex(,1534) @enumerate
../singular_texi/types.tex(,1535) @item @code{"ASCII: "} + filename
../singular_texi/types.tex(,1536) @*the mode (read or append) is set by the first @code{read} or
../singular_texi/types.tex(,1537) @code{write} command.
../singular_texi/types.tex(,1538) @item @code{"ASCII:r "} + filename
../singular_texi/types.tex(,1539) @*opens the file for reading.
../singular_texi/types.tex(,1540) @item @code{"ASCII:w "} + filename
../singular_texi/types.tex(,1541) @*opens the file for overwriting.
../singular_texi/types.tex(,1542) @item @code{"ASCII:a "} + filename
../singular_texi/types.tex(,1543) @*opens the file for appending.
../singular_texi/types.tex(,1544) @end enumerate
../singular_texi/types.tex(,1545) 
../singular_texi/types.tex(,1546) There are the following default values:
../singular_texi/types.tex(,1547) @itemize @bullet
../singular_texi/types.tex(,1548) @item the type @code{ASCII} may be omitted since ASCII links are the
../singular_texi/types.tex(,1549) default links.
../singular_texi/types.tex(,1550) 
../singular_texi/types.tex(,1551) @item if non of @code{r}, @code{w}, or @code{a} is specified, the mode of
../singular_texi/types.tex(,1552) the link is set by the first @code{read} or @code{write} command on the
../singular_texi/types.tex(,1553) link. If the first command is @code{write}, the mode is set to @code{a}
../singular_texi/types.tex(,1554) (append mode).
../singular_texi/types.tex(,1555) 
../singular_texi/types.tex(,1556) @item if the filename is omitted, @code{read} reads from stdin and
../singular_texi/types.tex(,1557) @code{write} writes to stdout.
../singular_texi/types.tex(,1558) @end itemize
../singular_texi/types.tex(,1559) 
../singular_texi/types.tex(,1560) Using these default rules, the string @code{":r temp"} describes a link
../singular_texi/types.tex(,1561) which is equivalent to the link @code{"ASCII:r temp"}: an ASCII link to
../singular_texi/types.tex(,1562) the file @code{temp} which is opened for reading. The string
../singular_texi/types.tex(,1563) @code{"temp"} describes an ASCII link to the file @code{temp}, where the
../singular_texi/types.tex(,1564) mode is set by the first @code{read} or @code{write} command. See also
../singular_texi/types.tex(,1565) the example below.
../singular_texi/types.tex(,1566) 
../singular_texi/types.tex(,1567) Note that the filename may contain a path. On Microsoft Windows
../singular_texi/types.tex(,1568) (resp.@: MS-DOS) platforms, names of a drive can precede the filename, but
../singular_texi/types.tex(,1569) must be started with a @code{//} (as in @code{//c/temp/ex}. An ASCII
../singular_texi/types.tex(,1570) link can be used either for reading or for writing, but not for both at
../singular_texi/types.tex(,1571) the same time. A @code{close} command must be used before a change of
../singular_texi/types.tex(,1572) I/O direction. Types without a conversion to @code{string} cannot be
../singular_texi/types.tex(,1573) written.
../singular_texi/types.tex(,1574) 
../singular_texi/types.tex(,1575) @*@strong{Example:}
../singular_texi/types.tex(,1576) @smallexample
../singular_texi/types.tex(,1577) @c reused example ASCII_links types.doc:1364 
../singular_texi/types.tex(,1578)   ring r=32003,(x,y,z),dp;
../singular_texi/types.tex(,1579)   link l=":w example.txt";     // type is ASCII, mode is overwrite
../singular_texi/types.tex(,1580)   l;
../singular_texi/types.tex(,1581) @expansion{} // type : ASCII
../singular_texi/types.tex(,1582) @expansion{} // mode : w
../singular_texi/types.tex(,1583) @expansion{} // name : example.txt
../singular_texi/types.tex(,1584) @expansion{} // open : no
../singular_texi/types.tex(,1585) @expansion{} // read : not ready
../singular_texi/types.tex(,1586) @expansion{} // write: not ready
../singular_texi/types.tex(,1587)   status(l, "open", "yes");    // link is not yet opened
../singular_texi/types.tex(,1588) @expansion{} 0
../singular_texi/types.tex(,1589)   ideal i=x2,y2,z2;
../singular_texi/types.tex(,1590)   write (l,1,";",2,";","ideal i=",i,";");
../singular_texi/types.tex(,1591)   status(l, "open", "yes");    // now link is open
../singular_texi/types.tex(,1592) @expansion{} 1
../singular_texi/types.tex(,1593)   status(l, "mode");           // for writing
../singular_texi/types.tex(,1594) @expansion{} w
../singular_texi/types.tex(,1595)   close(l);                    // link is closed
../singular_texi/types.tex(,1596)   write("example.txt","int j=5;");// data is appended to file
../singular_texi/types.tex(,1597)   read("example.txt");         // data is returned as string
../singular_texi/types.tex(,1598) @expansion{} 1
../singular_texi/types.tex(,1599) @expansion{} ;
../singular_texi/types.tex(,1600) @expansion{} 2
../singular_texi/types.tex(,1601) @expansion{} ;
../singular_texi/types.tex(,1602) @expansion{} ideal i=
../singular_texi/types.tex(,1603) @expansion{} x2,y2,z2
../singular_texi/types.tex(,1604) @expansion{} ;
../singular_texi/types.tex(,1605) @expansion{} int j=5;
../singular_texi/types.tex(,1606) @expansion{} 
../singular_texi/types.tex(,1607)   execute(read(l));            // read string is executed
../singular_texi/types.tex(,1608) @expansion{} 1
../singular_texi/types.tex(,1609) @expansion{} 2
../singular_texi/types.tex(,1610) @expansion{} // ** redefining i **
../singular_texi/types.tex(,1611)   close(l);                    // link is closed
../singular_texi/types.tex(,1612) @c end example ASCII_links types.doc:1364
../singular_texi/types.tex(,1613) @c  // dump vars overwriting previous file content:
../singular_texi/types.tex(,1614) @c  dump(":w example.txt");
../singular_texi/types.tex(,1615) @end smallexample
../singular_texi/types.tex(,1616) 
../singular_texi/types.tex(,1617) @c ------------------------------
../singular_texi/types.tex(,1618) @node MP links, DBM links, ASCII links, link
../singular_texi/types.tex(,1619) @subsection MP links
../singular_texi/types.tex(,1620) @cindex MP links
../singular_texi/types.tex(,1621) 
../singular_texi/types.tex(,1622) MP (Multi Protocol) links give the possibility to store and communicate
../singular_texi/types.tex(,1623) data in the binary MP format: Read and write access is very fast
../singular_texi/types.tex(,1624) compared to ASCII links. MP links can be established using files (link
../singular_texi/types.tex(,1625) type is @code{MPfile}) or using TCP sockets (link type is
../singular_texi/types.tex(,1626) @code{MPtcp}). All data (including such data that cannot be converted
../singular_texi/types.tex(,1627) to a string) can be written to an MP link. For ring-dependent data, a
../singular_texi/types.tex(,1628) ring description is written together with the data. Reading from an MP
../singular_texi/types.tex(,1629) link returns an expression (not a string) which was evaluated after the
../singular_texi/types.tex(,1630) read operation. If the expression read from an MP link is not from the
../singular_texi/types.tex(,1631) same ring as the current ring, then a @code{read} changes the current
../singular_texi/types.tex(,1632) ring.
../singular_texi/types.tex(,1633) 
../singular_texi/types.tex(,1634) Currently, MP links are only available on Unix platforms and data is
../singular_texi/types.tex(,1635) written without attributes (which is likely to change in future
../singular_texi/types.tex(,1636) versions). For a general description of MP, see
../singular_texi/types.tex(,1637) @code{http://symbolicnet.mcs.kent.edu/areas/mp.html}.
../singular_texi/types.tex(,1638) 
../singular_texi/types.tex(,1639) @menu
../singular_texi/types.tex(,1640) * MPfile links::
../singular_texi/types.tex(,1641) * MPtcp links::
../singular_texi/types.tex(,1642) @end menu
../singular_texi/types.tex(,1643) 
../singular_texi/types.tex(,1644) @c -------------------------------------------------------------
../singular_texi/types.tex(,1645) @node MPfile links, MPtcp links, MP links, MP links
../singular_texi/types.tex(,1646) @subsubsection MPfile links
../singular_texi/types.tex(,1647) @cindex MPfile links
../singular_texi/types.tex(,1648) 
../singular_texi/types.tex(,1649) MPfile links provide the possibility to store data in a file using the
../singular_texi/types.tex(,1650) binary MP format. Read and write operations are very fast compared to
../singular_texi/types.tex(,1651) ASCII links. Therefore, for storing large amounts of data, MPfile links
../singular_texi/types.tex(,1652) should be used instead of ASCII links. Unlike ASCII links, data read
../singular_texi/types.tex(,1653) from MPfile links is returned as expressions one at a time, and not as a
../singular_texi/types.tex(,1654) string containing the entire content of the file. Furthermore, ring-dependent
../singular_texi/types.tex(,1655) data is stored together with a ring description. Therefore,
../singular_texi/types.tex(,1656) reading ring-dependent data might change the current ring.
../singular_texi/types.tex(,1657) 
../singular_texi/types.tex(,1658) The MPfile link describing string has to be one of the following:
../singular_texi/types.tex(,1659) 
../singular_texi/types.tex(,1660) @enumerate
../singular_texi/types.tex(,1661) @item @code{"MPfile: "} + filename
../singular_texi/types.tex(,1662) @*the mode (read or append) is set by the first @code{read} or
../singular_texi/types.tex(,1663) @code{write} command.
../singular_texi/types.tex(,1664) @item @code{"MPfile:r "} + filename
../singular_texi/types.tex(,1665) @*opens the file for reading.
../singular_texi/types.tex(,1666) @item @code{"MPfile:w "} + filename
../singular_texi/types.tex(,1667) @*opens the file for overwriting.
../singular_texi/types.tex(,1668) @item @code{"MPfile:a "} + filename
../singular_texi/types.tex(,1669) @*opens the file for appending.
../singular_texi/types.tex(,1670) @end enumerate
../singular_texi/types.tex(,1671) 
../singular_texi/types.tex(,1672) There are the following default values:
../singular_texi/types.tex(,1673) @itemize @bullet
../singular_texi/types.tex(,1674) @item if none of @code{r}, @code{w}, or @code{a} is specified, the mode of
../singular_texi/types.tex(,1675) the link is set by the first @code{read} or @code{write} command on the
../singular_texi/types.tex(,1676) link. If the first command is @code{write}, the mode is set to @code{a}
../singular_texi/types.tex(,1677) (append mode).
../singular_texi/types.tex(,1678) @c Tim: You and I were right here: It is indeed append. Olaf
../singular_texi/types.tex(,1679) @end itemize
../singular_texi/types.tex(,1680) 
../singular_texi/types.tex(,1681) Note that the filename may contain a path. An MPfile link can be used
../singular_texi/types.tex(,1682) either for reading or for writing, but not for both at the same time. A
../singular_texi/types.tex(,1683) @code{close} command must be used before a change of I/O direction.
../singular_texi/types.tex(,1684) 
../singular_texi/types.tex(,1685) @*@strong{Example:}
../singular_texi/types.tex(,1686) @smallexample
../singular_texi/types.tex(,1687) @c reused example MPfile_links types.doc:1453 
../singular_texi/types.tex(,1688)   ring r;
../singular_texi/types.tex(,1689)   link l="MPfile:w example.mp"; // type=MPfile, mode=overwrite
../singular_texi/types.tex(,1690)   l;
../singular_texi/types.tex(,1691) @expansion{} // type : MPfile
../singular_texi/types.tex(,1692) @expansion{} // mode : w
../singular_texi/types.tex(,1693) @expansion{} // name : example.mp
../singular_texi/types.tex(,1694) @expansion{} // open : no
../singular_texi/types.tex(,1695) @expansion{} // read : not ready
../singular_texi/types.tex(,1696) @expansion{} // write: not ready
../singular_texi/types.tex(,1697)   ideal i=x2,y2,z2;
../singular_texi/types.tex(,1698)   write (l,1, i, "hello world");// write three expressions
../singular_texi/types.tex(,1699)   write(l,4);                   // append one more expression
../singular_texi/types.tex(,1700)   close(l);                     // link is closed
../singular_texi/types.tex(,1701)   // open the file for reading now
../singular_texi/types.tex(,1702)   read(l);                      // only first expression is read
../singular_texi/types.tex(,1703) @expansion{} 1
../singular_texi/types.tex(,1704)   kill r;                       // no basering active now
../singular_texi/types.tex(,1705)   def i = read(l);              // second expression
../singular_texi/types.tex(,1706)   // notice that current ring was set, the name was assigned
../singular_texi/types.tex(,1707)   // automatically
../singular_texi/types.tex(,1708)   listvar(ring);
../singular_texi/types.tex(,1709) @expansion{} // mpsr_r0              [0]  *ring
../singular_texi/types.tex(,1710)   def s = read(l);              // third expression
../singular_texi/types.tex(,1711)   listvar();
../singular_texi/types.tex(,1712) @expansion{} // s                    [0]  string hello world
../singular_texi/types.tex(,1713) @expansion{} // mpsr_r0              [0]  *ring
../singular_texi/types.tex(,1714) @expansion{} //      i                    [0]  ideal, 3 generator(s)
../singular_texi/types.tex(,1715) @expansion{} // l                    [0]  link
../singular_texi/types.tex(,1716) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/types.tex(,1717)   close(l);                     // link is closed
../singular_texi/types.tex(,1718)   dump("MPfile:w example.mp");  // dump everything to example.mp
../singular_texi/types.tex(,1719)   kill i, s;                    // kill i and s
../singular_texi/types.tex(,1720)   getdump("MPfile: example.mp");// get previous dump
../singular_texi/types.tex(,1721)   listvar();                    // got all variables and values back
../singular_texi/types.tex(,1722) @expansion{} // mpsr_r0              [0]  *ring
../singular_texi/types.tex(,1723) @expansion{} //      i                    [0]  ideal, 3 generator(s)
../singular_texi/types.tex(,1724) @expansion{} // s                    [0]  string hello world
../singular_texi/types.tex(,1725) @expansion{} // l                    [0]  link
../singular_texi/types.tex(,1726) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/types.tex(,1727) @c end example MPfile_links types.doc:1453
../singular_texi/types.tex(,1728) @end smallexample
../singular_texi/types.tex(,1729) 
../singular_texi/types.tex(,1730) @c -------------------------------------------------------------
../singular_texi/types.tex(,1731) @node MPtcp links,  , MPfile links, MP links
../singular_texi/types.tex(,1732) @subsubsection MPtcp links
../singular_texi/types.tex(,1733) @cindex MPtcp links
../singular_texi/types.tex(,1734) 
../singular_texi/types.tex(,1735) MPtcp links give the possibility to exchange data in the binary MP
../singular_texi/types.tex(,1736) format between two processes which may run on the same or on different
../singular_texi/types.tex(,1737) computers. MPtcp links can be opened in four different modes:
../singular_texi/types.tex(,1738) 
../singular_texi/types.tex(,1739) @table @code
../singular_texi/types.tex(,1740) @item listen
../singular_texi/types.tex(,1741) @sc{Singular} acts as a server.
../singular_texi/types.tex(,1742) 
../singular_texi/types.tex(,1743) @item connect
../singular_texi/types.tex(,1744) @sc{Singular} acts as a client.
../singular_texi/types.tex(,1745) 
../singular_texi/types.tex(,1746) @item launch
../singular_texi/types.tex(,1747) @sc{Singular} acts as a client, launching an application as server.
../singular_texi/types.tex(,1748) 
../singular_texi/types.tex(,1749) @item fork
../singular_texi/types.tex(,1750) @sc{Singular} acts as a client, forking another @sc{Singular} as
../singular_texi/types.tex(,1751) server.
../singular_texi/types.tex(,1752) @end table
../singular_texi/types.tex(,1753) 
../singular_texi/types.tex(,1754) The MPtcp link describing string has to be
../singular_texi/types.tex(,1755) @itemize @bullet
../singular_texi/types.tex(,1756) @item listen mode:
../singular_texi/types.tex(,1757) @enumerate
../singular_texi/types.tex(,1758) @item @code{"MPtcp:listen --MPport "} + portnumber
../singular_texi/types.tex(,1759) @end enumerate
../singular_texi/types.tex(,1760) @sc{Singular} becomes a server and waits at the port for a
../singular_texi/types.tex(,1761) connect call.
../singular_texi/types.tex(,1762) @item connect mode:
../singular_texi/types.tex(,1763) @enumerate 2
../singular_texi/types.tex(,1764) @item @code{"MPtcp:connect --MPport "} + portnumber
../singular_texi/types.tex(,1765) @item @code{"MPtcp:connect --MPhost "} + hostname + @code{" --MPport "} +
../singular_texi/types.tex(,1766) portnumber
../singular_texi/types.tex(,1767) @end enumerate
../singular_texi/types.tex(,1768) @sc{Singular} becomes a client and connects to a server waiting at
../singular_texi/types.tex(,1769) the host and port.
../singular_texi/types.tex(,1770) @item launch mode:
../singular_texi/types.tex(,1771) @enumerate 4
../singular_texi/types.tex(,1772) @item @code{"MPtcp:launch"}
../singular_texi/types.tex(,1773) @item @code{"MPtcp:launch --MPrsh "} + rsh
../singular_texi/types.tex(,1774) @item @code{"MPtcp:launch --MPrsh "} + rsh  + @code{" --MPhost "} +
../singular_texi/types.tex(,1775) hostname
../singular_texi/types.tex(,1776) @item @code{"MPtcp:launch --MPrsh "} + rsh  + @code{" --MPhost "} +
../singular_texi/types.tex(,1777) hostname + @code{" --MPapplication "} + application
../singular_texi/types.tex(,1778) @end enumerate
../singular_texi/types.tex(,1779) @sc{Singular} becomes a client and starts (launches) the application
../singular_texi/types.tex(,1780) using the specified remote shell command (default is
../singular_texi/types.tex(,1781) @code{ssh}) on a (possibly) different host (default is @code{localhost}
../singular_texi/types.tex(,1782) which then acts as a server.
../singular_texi/types.tex(,1783) @item fork mode:
../singular_texi/types.tex(,1784) @enumerate 8
../singular_texi/types.tex(,1785) @item @code{"MPtcp:fork"}
../singular_texi/types.tex(,1786) @end enumerate
../singular_texi/types.tex(,1787) @sc{Singular} becomes a client and forks another @sc{Singular} on the
../singular_texi/types.tex(,1788) same host which acts as a server.
../singular_texi/types.tex(,1789) @end itemize
../singular_texi/types.tex(,1790) 
../singular_texi/types.tex(,1791) There are the following default values:
../singular_texi/types.tex(,1792) @itemize @bullet
../singular_texi/types.tex(,1793) @item if none of @code{listen}, @code{connect}, @code{launch} or
../singular_texi/types.tex(,1794) @code{fork} is specified, the default mode is set to @code{fork}.
../singular_texi/types.tex(,1795) 
../singular_texi/types.tex(,1796) @item if no remote shell (rsh) command is specified, then the command
../singular_texi/types.tex(,1797) @code{ssh} is used.
../singular_texi/types.tex(,1798) 
../singular_texi/types.tex(,1799) @item if no application is specified (in mode @code{launch}) the default
../singular_texi/types.tex(,1800) application is the value of @code{system("Singular") + "-bq"}.
../singular_texi/types.tex(,1801) (This evaluates to the absolute path of the @sc{Singular} currently running
../singular_texi/types.tex(,1802) with the option @code{"-bq"} appended.)
../singular_texi/types.tex(,1803) 
../singular_texi/types.tex(,1804) @item if no hostname is specified the local host is used as default host.
../singular_texi/types.tex(,1805) @end itemize
../singular_texi/types.tex(,1806) 
../singular_texi/types.tex(,1807) To open an MPtcp link in launch mode, the application to launch must
../singular_texi/types.tex(,1808) either be given with an absolute pathname, or must be in a directory
../singular_texi/types.tex(,1809) contained in the search path. The launched application acts as a server,
../singular_texi/types.tex(,1810) whereas the @sc{Singular} that actually opened the link acts as a
../singular_texi/types.tex(,1811) client. @sc{Singular} automatically appends the command line arguments
../singular_texi/types.tex(,1812) "@code{--MPmode connect --MPhost} hostname @code{--MPport} portnumber"
../singular_texi/types.tex(,1813) to the command line of the server application. Both hostname and
../singular_texi/types.tex(,1814) portnumber are substituted by the values from the link
../singular_texi/types.tex(,1815) specification. The client "listens" at the given port until the server
../singular_texi/types.tex(,1816) application does a connect call. If @sc{Singular} is used as server
../singular_texi/types.tex(,1817) application it has to be started with the command line option @code{-b}.
../singular_texi/types.tex(,1818) Since launching is done using a remote shell command, the host on which
../singular_texi/types.tex(,1819) the application should run must have an entry in the @code{.rhosts}
../singular_texi/types.tex(,1820) file. Even the local machine must have an entry if applications are to
../singular_texi/types.tex(,1821) be launched locally.
../singular_texi/types.tex(,1822) 
../singular_texi/types.tex(,1823) If the MPtcp link is opened in fork mode a child of the current
../singular_texi/types.tex(,1824) @sc{Singular} is forked. All variables and their values are inherited by
../singular_texi/types.tex(,1825) the child. The child acts as a server whereas the @sc{Singular} that
../singular_texi/types.tex(,1826) actually opened the link acts as a client.
../singular_texi/types.tex(,1827) 
../singular_texi/types.tex(,1828) To arrange the evaluation of an expression by a server, the expression
../singular_texi/types.tex(,1829) must be quoted using the command @code{quote} (see @ref{quote}), so that
../singular_texi/types.tex(,1830) a local evaluation is prevented. Otherwise, the expression is evaluated
../singular_texi/types.tex(,1831) first, and the result of the evaluation is written, instead of the
../singular_texi/types.tex(,1832) expression which is to be evaluated.
../singular_texi/types.tex(,1833) 
../singular_texi/types.tex(,1834) If @sc{Singular} is in server mode, the value of the variable
../singular_texi/types.tex(,1835) @code{mp_ll} is the MPtcp link connecting to the client and
../singular_texi/types.tex(,1836) @sc{Singular} is in an infinite read-eval-write loop until the
../singular_texi/types.tex(,1837) connection is closed from the client side (by closing its connecting
../singular_texi/types.tex(,1838) link). Reading and writing is done to the link @code{mp_ll}: After an
../singular_texi/types.tex(,1839) expression is read, it is evaluated and the result of the evaluation is
../singular_texi/types.tex(,1840) written back.  That is, for each expression which was written to the
../singular_texi/types.tex(,1841) server, there is exactly one expression written back. This might be an
../singular_texi/types.tex(,1842) "empty" expression, if the evaluation on the server side does not return
../singular_texi/types.tex(,1843) a value.
../singular_texi/types.tex(,1844) 
../singular_texi/types.tex(,1845) MPtcp links should explicitly be opened before being used. MPtcp links
../singular_texi/types.tex(,1846) are bidirectional, i.e., can be be used for both, writing and
../singular_texi/types.tex(,1847) reading. Reading from an MPtcp link blocks until data was written to
../singular_texi/types.tex(,1848) that link. The @code{status} command can be used to check whether there
../singular_texi/types.tex(,1849) is data to read.
../singular_texi/types.tex(,1850) 
../singular_texi/types.tex(,1851) @*@strong{Example:}
../singular_texi/types.tex(,1852) @smallexample
../singular_texi/types.tex(,1853) @c reused example MPtcp_links types.doc:1601 
../singular_texi/types.tex(,1854)   LIB "general.lib"; // needed for "killall" command
../singular_texi/types.tex(,1855)   link l="MPtcp:launch";
../singular_texi/types.tex(,1856)   open(l); l;        // l is ready for writing but not for reading
../singular_texi/types.tex(,1857) @expansion{} // type : MPtcp
../singular_texi/types.tex(,1858) @expansion{} // mode : launch
../singular_texi/types.tex(,1859) @expansion{} // name : 
../singular_texi/types.tex(,1860) @expansion{} // open : yes
../singular_texi/types.tex(,1861) @expansion{} // read : not ready
../singular_texi/types.tex(,1862) @expansion{} // write: ready
../singular_texi/types.tex(,1863) 
../singular_texi/types.tex(,1864)   ring r; ideal i=x2+y,xyz+z,x2+y2;
../singular_texi/types.tex(,1865) 
../singular_texi/types.tex(,1866)   write (l,quote(std(eval(i))));   // std(i) is computed on server
../singular_texi/types.tex(,1867)   def j = read(l);j; // result of computation on server is read
../singular_texi/types.tex(,1868) @expansion{} j[1]=z
../singular_texi/types.tex(,1869) @expansion{} j[2]=y2-y
../singular_texi/types.tex(,1870) @expansion{} j[3]=x2+y2
../singular_texi/types.tex(,1871) 
../singular_texi/types.tex(,1872)   write(l, quote(getdump(mp_ll))); // server reads dump
../singular_texi/types.tex(,1873)   dump(l);           //  dump is written to server (includes proc's)
../singular_texi/types.tex(,1874)   read(l);           // result of previous write-command is read
../singular_texi/types.tex(,1875)   killall("not", "link"); killall("proc"); // kills everything, but links
../singular_texi/types.tex(,1876) @expansion{} // ** killing the basering for level 0
../singular_texi/types.tex(,1877) 
../singular_texi/types.tex(,1878)   write(l, quote(dump(mp_ll)));    // server writes dump
../singular_texi/types.tex(,1879)   getdump(l);        // dump is read from server
../singular_texi/types.tex(,1880)   read(l);           // result of previous write-command is read
../singular_texi/types.tex(,1881) 
../singular_texi/types.tex(,1882)   close(l);          // server is shut down
../singular_texi/types.tex(,1883)   listvar(all);      // same state as we had before "killall()"
../singular_texi/types.tex(,1884) @expansion{} // mpsr_r0              [0]  ring
../singular_texi/types.tex(,1885) @expansion{} // r                    [0]  *ring
../singular_texi/types.tex(,1886) @expansion{} //      j                    [0]  ideal, 3 generator(s)
../singular_texi/types.tex(,1887) @expansion{} //      i                    [0]  ideal, 3 generator(s)
../singular_texi/types.tex(,1888) @expansion{} // l                    [0]  link
../singular_texi/types.tex(,1889) 
../singular_texi/types.tex(,1890)   l = "MPtcp:";      // fork link declaration
../singular_texi/types.tex(,1891)   open(l); l;        // Notice that name is "parent"
../singular_texi/types.tex(,1892) @expansion{} // type : MPtcp
../singular_texi/types.tex(,1893) @expansion{} // mode : fork
../singular_texi/types.tex(,1894) @expansion{} // name : parent
../singular_texi/types.tex(,1895) @expansion{} // open : yes
../singular_texi/types.tex(,1896) @expansion{} // read : not ready
../singular_texi/types.tex(,1897) @expansion{} // write: ready
../singular_texi/types.tex(,1898) 
../singular_texi/types.tex(,1899)   write(l, quote(status(mp_ll, "name")));
../singular_texi/types.tex(,1900)   read(l);           // and name of forked link is "child"
../singular_texi/types.tex(,1901) @expansion{} child
../singular_texi/types.tex(,1902)   write(l,quote(i)); // Child inherited vars and their values
../singular_texi/types.tex(,1903)   read(l);
../singular_texi/types.tex(,1904) @expansion{} _[1]=x2+y
../singular_texi/types.tex(,1905) @expansion{} _[2]=xyz+z
../singular_texi/types.tex(,1906) @expansion{} _[3]=x2+y2
../singular_texi/types.tex(,1907)   close(l);          // shut down forked child
../singular_texi/types.tex(,1908) @c end example MPtcp_links types.doc:1601
../singular_texi/types.tex(,1909) @end smallexample
../singular_texi/types.tex(,1910) 
../singular_texi/types.tex(,1911) @c ------------------------------
../singular_texi/types.tex(,1912) @node DBM links,  , MP links, link
../singular_texi/types.tex(,1913) @subsection DBM links
../singular_texi/types.tex(,1914) @cindex DBM links
../singular_texi/types.tex(,1915) 
../singular_texi/types.tex(,1916) DBM links provide access to data stored in a data base.
../singular_texi/types.tex(,1917) Each entry in the data base consists of a (key_string,
../singular_texi/types.tex(,1918) value_string) pair. Such a pair can be inserted with the command
../singular_texi/types.tex(,1919) @code{write(}link@code{,} key_string@code{,} value_string@code{)}.  By
../singular_texi/types.tex(,1920) calling @code{write(}link@code{,} key_string@code{)}, the entry with key
../singular_texi/types.tex(,1921) key_string is deleted from the data base. The value of an entry is
../singular_texi/types.tex(,1922) returned by the command @code{read(}link@code{,}
../singular_texi/types.tex(,1923) key_string@code{)}. With only one argument, @code{read(}link@code{)}
../singular_texi/types.tex(,1924) returns the next key in the data base. Using this feature a
../singular_texi/types.tex(,1925) data base can be scanned in order to access all entries of the data base.
../singular_texi/types.tex(,1926) 
../singular_texi/types.tex(,1927) If a data base with name @code{name} is opened for writing for the first
../singular_texi/types.tex(,1928) time, two files (@code{name.pag} and @code{name.dir}), which contain the
../singular_texi/types.tex(,1929) data base, are automatically created.
../singular_texi/types.tex(,1930) 
../singular_texi/types.tex(,1931) The DBM link describing string has to be one of the following:
../singular_texi/types.tex(,1932) 
../singular_texi/types.tex(,1933) @enumerate
../singular_texi/types.tex(,1934) @item @code{"DBM: "} + name
../singular_texi/types.tex(,1935) @*opens the data base for reading (default mode).
../singular_texi/types.tex(,1936) 
../singular_texi/types.tex(,1937) @item @code{"DBM:r "} + name
../singular_texi/types.tex(,1938) @*opens the data base for reading.
../singular_texi/types.tex(,1939) 
../singular_texi/types.tex(,1940) @item @code{"DBM:rw "} + name
../singular_texi/types.tex(,1941) @*opens the data base for reading and writing.
../singular_texi/types.tex(,1942) @end enumerate
../singular_texi/types.tex(,1943) 
../singular_texi/types.tex(,1944) Note that @code{name} must be given without the suffix @code{.pag} or
../singular_texi/types.tex(,1945) @code{.dir}. The name may contain an (absolute) path.
../singular_texi/types.tex(,1946) 
../singular_texi/types.tex(,1947) @*@strong{Example:}
../singular_texi/types.tex(,1948) @smallexample
../singular_texi/types.tex(,1949) @c reused example DBM_links types.doc:1672 
../singular_texi/types.tex(,1950)   link l="DBM:rw example";
../singular_texi/types.tex(,1951)   write(l,"1","abc");
../singular_texi/types.tex(,1952)   write(l,"3","XYZ");
../singular_texi/types.tex(,1953)   write(l,"2","ABC");
../singular_texi/types.tex(,1954)   l;
../singular_texi/types.tex(,1955) @expansion{} // type : DBM
../singular_texi/types.tex(,1956) @expansion{} // mode : rw
../singular_texi/types.tex(,1957) @expansion{} // name : example
../singular_texi/types.tex(,1958) @expansion{} // open : yes
../singular_texi/types.tex(,1959) @expansion{} // read : ready
../singular_texi/types.tex(,1960) @expansion{} // write: ready
../singular_texi/types.tex(,1961)   close(l);
../singular_texi/types.tex(,1962)   // read all keys (till empty string):
../singular_texi/types.tex(,1963)   read(l);
../singular_texi/types.tex(,1964) @expansion{} 1
../singular_texi/types.tex(,1965)   read(l);
../singular_texi/types.tex(,1966) @expansion{} 3
../singular_texi/types.tex(,1967)   read(l);
../singular_texi/types.tex(,1968) @expansion{} 2
../singular_texi/types.tex(,1969)   read(l);
../singular_texi/types.tex(,1970) @expansion{} 
../singular_texi/types.tex(,1971)   // read data corresponding to key "1"
../singular_texi/types.tex(,1972)   read(l,"1");
../singular_texi/types.tex(,1973) @expansion{} abc
../singular_texi/types.tex(,1974)   // read all data:
../singular_texi/types.tex(,1975)   read(l,read(l));
../singular_texi/types.tex(,1976) @expansion{} abc
../singular_texi/types.tex(,1977)   read(l,read(l));
../singular_texi/types.tex(,1978) @expansion{} XYZ
../singular_texi/types.tex(,1979)   read(l,read(l));
../singular_texi/types.tex(,1980) @expansion{} ABC
../singular_texi/types.tex(,1981)   // close
../singular_texi/types.tex(,1982)   close(l);
../singular_texi/types.tex(,1983) @c end example DBM_links types.doc:1672
../singular_texi/types.tex(,1984) @end smallexample
../singular_texi/types.tex(,1985) 
../singular_texi/types.tex(,1986) @c ---------------------------------------
../singular_texi/types.tex(,1987) @node list, map, link, Data types
../singular_texi/types.tex(,1988) @section list
../singular_texi/types.tex(,1989) @cindex list
../singular_texi/types.tex(,1990) 
../singular_texi/types.tex(,1991) Lists are arrays whose elements can be of any type (including ring and
../singular_texi/types.tex(,1992) qring). If one element belongs to a ring the whole list belongs to that
../singular_texi/types.tex(,1993) ring. This applies also to the special list @code{#}. The expression
../singular_texi/types.tex(,1994) @code{list()} is the empty list.
../singular_texi/types.tex(,1995) 
../singular_texi/types.tex(,1996) Note that a list stores the objects itself and not the names.  Hence, if
../singular_texi/types.tex(,1997) @code{L} is a list, @code{L[1]} for example has no name.  A name, say
../singular_texi/types.tex(,1998) @code{R}, can be created for @code{L[1]} by @code{def R=L[1];}. To store
../singular_texi/types.tex(,1999) also the name of an object, say @code{r}, it can be added to the list
../singular_texi/types.tex(,2000) with @code{nameof(r);}. Rings and qrings may be objects of a list.
../singular_texi/types.tex(,2001) 
../singular_texi/types.tex(,2002) @strong{Note}: Unlike other assignments a ring as an element of a list
../singular_texi/types.tex(,2003) is not a copy but another reference to the same ring.
../singular_texi/types.tex(,2004) 
../singular_texi/types.tex(,2005) @menu
../singular_texi/types.tex(,2006) * list declarations::
../singular_texi/types.tex(,2007) * list expressions::
../singular_texi/types.tex(,2008) * list operations::
../singular_texi/types.tex(,2009) * list related functions::
../singular_texi/types.tex(,2010) @end menu
../singular_texi/types.tex(,2011) 
../singular_texi/types.tex(,2012) @c ------------------------------
../singular_texi/types.tex(,2013) @node list declarations, list expressions, list, list
../singular_texi/types.tex(,2014) @subsection list declarations
../singular_texi/types.tex(,2015) @cindex list declarations
../singular_texi/types.tex(,2016) 
../singular_texi/types.tex(,2017) @table @strong
../singular_texi/types.tex(,2018) @item Syntax:
../singular_texi/types.tex(,2019) @code{list} name @code{=} expression_list@code{;}
../singular_texi/types.tex(,2020) @*@code{list} name @code{=} list_expression@code{;}
../singular_texi/types.tex(,2021) 
../singular_texi/types.tex(,2022) @item Purpose:
../singular_texi/types.tex(,2023) defines a list (of objects of possibly different types).
../singular_texi/types.tex(,2024) 
../singular_texi/types.tex(,2025) @item Default:
../singular_texi/types.tex(,2026) empty list
../singular_texi/types.tex(,2027) 
../singular_texi/types.tex(,2028) @item Example:
../singular_texi/types.tex(,2029) @smallexample
../singular_texi/types.tex(,2030) @c reused example list_declarations types.doc:1739 
../singular_texi/types.tex(,2031)   list l=1,"str";
../singular_texi/types.tex(,2032)   l[1];
../singular_texi/types.tex(,2033) @expansion{} 1
../singular_texi/types.tex(,2034)   l[2];
../singular_texi/types.tex(,2035) @expansion{} str
../singular_texi/types.tex(,2036)   ring r;
../singular_texi/types.tex(,2037)   listvar(r);
../singular_texi/types.tex(,2038) @expansion{} // r                    [0]  *ring
../singular_texi/types.tex(,2039)   ideal i = x^2, y^2 + z^3;
../singular_texi/types.tex(,2040)   l[3] = i;
../singular_texi/types.tex(,2041)   l;
../singular_texi/types.tex(,2042) @expansion{} [1]:
../singular_texi/types.tex(,2043) @expansion{}    1
../singular_texi/types.tex(,2044) @expansion{} [2]:
../singular_texi/types.tex(,2045) @expansion{}    str
../singular_texi/types.tex(,2046) @expansion{} [3]:
../singular_texi/types.tex(,2047) @expansion{}    _[1]=x2
../singular_texi/types.tex(,2048) @expansion{}    _[2]=z3+y2
../singular_texi/types.tex(,2049)   listvar(r);     // the list l belongs now to the ring r
../singular_texi/types.tex(,2050) @expansion{} // r                    [0]  *ring
../singular_texi/types.tex(,2051) @expansion{} // l                    [0]  list, size: 3
../singular_texi/types.tex(,2052) @expansion{} // i                    [0]  ideal, 2 generator(s)
../singular_texi/types.tex(,2053) @c end example list_declarations types.doc:1739
../singular_texi/types.tex(,2054) @end smallexample
../singular_texi/types.tex(,2055) @end table
../singular_texi/types.tex(,2056) 
../singular_texi/types.tex(,2057) @c ------------------------------
../singular_texi/types.tex(,2058) @node list expressions, list operations, list declarations, list
../singular_texi/types.tex(,2059) @subsection list expressions
../singular_texi/types.tex(,2060) @cindex list expressions
../singular_texi/types.tex(,2061) 
../singular_texi/types.tex(,2062) A list expression is:
../singular_texi/types.tex(,2063) @enumerate
../singular_texi/types.tex(,2064) @item
../singular_texi/types.tex(,2065) the empty list @code{list()}
../singular_texi/types.tex(,2066) @item
../singular_texi/types.tex(,2067) an identifier of type list
../singular_texi/types.tex(,2068) @item
../singular_texi/types.tex(,2069) a function returning list
../singular_texi/types.tex(,2070) @item
../singular_texi/types.tex(,2071) list expressions combined by the arithmetic operation @code{+}
../singular_texi/types.tex(,2072) @item
../singular_texi/types.tex(,2073) a type cast to list
../singular_texi/types.tex(,2074) @end enumerate
../singular_texi/types.tex(,2075) 
../singular_texi/types.tex(,2076) @c inserted refs from types.doc:1772
../singular_texi/types.tex(,2084) See 
../singular_texi/types.tex(,2085) @ref{Type conversion and casting}.
../singular_texi/types.tex(,2087) @c end inserted refs from types.doc:1772
../singular_texi/types.tex(,2088) 
../singular_texi/types.tex(,2089) @*@strong{Example:}
../singular_texi/types.tex(,2090) @smallexample
../singular_texi/types.tex(,2091) @c reused example list_expressions types.doc:1778 
../singular_texi/types.tex(,2092)   list l = "hello",1;
../singular_texi/types.tex(,2093)   l;
../singular_texi/types.tex(,2094) @expansion{} [1]:
../singular_texi/types.tex(,2095) @expansion{}    hello
../singular_texi/types.tex(,2096) @expansion{} [2]:
../singular_texi/types.tex(,2097) @expansion{}    1
../singular_texi/types.tex(,2098)   l = list();
../singular_texi/types.tex(,2099)   l;
../singular_texi/types.tex(,2100) @expansion{} empty list
../singular_texi/types.tex(,2101)   ring r =0,x,dp;
../singular_texi/types.tex(,2102)   factorize((x+1)^2);
../singular_texi/types.tex(,2103) @expansion{} [1]:
../singular_texi/types.tex(,2104) @expansion{}    _[1]=1
../singular_texi/types.tex(,2105) @expansion{}    _[2]=x+1
../singular_texi/types.tex(,2106) @expansion{} [2]:
../singular_texi/types.tex(,2107) @expansion{}    1,2
../singular_texi/types.tex(,2108)   list(1,2,3);
../singular_texi/types.tex(,2109) @expansion{} [1]:
../singular_texi/types.tex(,2110) @expansion{}    1
../singular_texi/types.tex(,2111) @expansion{} [2]:
../singular_texi/types.tex(,2112) @expansion{}    2
../singular_texi/types.tex(,2113) @expansion{} [3]:
../singular_texi/types.tex(,2114) @expansion{}    3
../singular_texi/types.tex(,2115) @c end example list_expressions types.doc:1778
../singular_texi/types.tex(,2116) @end smallexample
../singular_texi/types.tex(,2117) 
../singular_texi/types.tex(,2118) @c ------------------------------
../singular_texi/types.tex(,2119) @node list operations, list related functions, list expressions, list
../singular_texi/types.tex(,2120) @subsection list operations
../singular_texi/types.tex(,2121) @cindex list operations
../singular_texi/types.tex(,2122) 
../singular_texi/types.tex(,2123) @table @asis
../singular_texi/types.tex(,2124) @item @code{+}
../singular_texi/types.tex(,2125) concatenation
../singular_texi/types.tex(,2126) @item @code{delete}
../singular_texi/types.tex(,2127) deletes one element from list, returns new list
../singular_texi/types.tex(,2128) @item @code{insert}
../singular_texi/types.tex(,2129) inserts or appends a new element to list, returns a new list
../singular_texi/types.tex(,2130) @item list_expression @code{[} int_expression @code{]}
../singular_texi/types.tex(,2131) is a list entry; the index 1 gives the first element.
../singular_texi/types.tex(,2132) @end table
../singular_texi/types.tex(,2133) 
../singular_texi/types.tex(,2134) @*@strong{Example:}
../singular_texi/types.tex(,2135) @smallexample
../singular_texi/types.tex(,2136) @c reused example list_operations types.doc:1807 
../singular_texi/types.tex(,2137)   list l1 = 1,"hello",list(-1,1);
../singular_texi/types.tex(,2138)   list l2 = list(1,2,3);
../singular_texi/types.tex(,2139)   l1 + l2;          // one new list
../singular_texi/types.tex(,2140) @expansion{} [1]:
../singular_texi/types.tex(,2141) @expansion{}    1
../singular_texi/types.tex(,2142) @expansion{} [2]:
../singular_texi/types.tex(,2143) @expansion{}    hello
../singular_texi/types.tex(,2144) @expansion{} [3]:
../singular_texi/types.tex(,2145) @expansion{}    [1]:
../singular_texi/types.tex(,2146) @expansion{}       -1
../singular_texi/types.tex(,2147) @expansion{}    [2]:
../singular_texi/types.tex(,2148) @expansion{}       1
../singular_texi/types.tex(,2149) @expansion{} [4]:
../singular_texi/types.tex(,2150) @expansion{}    1
../singular_texi/types.tex(,2151) @expansion{} [5]:
../singular_texi/types.tex(,2152) @expansion{}    2
../singular_texi/types.tex(,2153) @expansion{} [6]:
../singular_texi/types.tex(,2154) @expansion{}    3
../singular_texi/types.tex(,2155)   list l3 =_;
../singular_texi/types.tex(,2156)   l1,l2;            // two lists
../singular_texi/types.tex(,2157) @expansion{} [1]:
../singular_texi/types.tex(,2158) @expansion{}    1
../singular_texi/types.tex(,2159) @expansion{} [2]:
../singular_texi/types.tex(,2160) @expansion{}    hello
../singular_texi/types.tex(,2161) @expansion{} [3]:
../singular_texi/types.tex(,2162) @expansion{}    [1]:
../singular_texi/types.tex(,2163) @expansion{}       -1
../singular_texi/types.tex(,2164) @expansion{}    [2]:
../singular_texi/types.tex(,2165) @expansion{}       1
../singular_texi/types.tex(,2166) @expansion{} [1]:
../singular_texi/types.tex(,2167) @expansion{}    1
../singular_texi/types.tex(,2168) @expansion{} [2]:
../singular_texi/types.tex(,2169) @expansion{}    2
../singular_texi/types.tex(,2170) @expansion{} [3]:
../singular_texi/types.tex(,2171) @expansion{}    3
../singular_texi/types.tex(,2172)   l2[2];
../singular_texi/types.tex(,2173) @expansion{} 2
../singular_texi/types.tex(,2174) @c end example list_operations types.doc:1807
../singular_texi/types.tex(,2175) @end smallexample
../singular_texi/types.tex(,2176) 
../singular_texi/types.tex(,2177) @c ------------------------------
../singular_texi/types.tex(,2178) @node list related functions,  , list operations, list
../singular_texi/types.tex(,2179) @subsection list related functions
../singular_texi/types.tex(,2180) @cindex list related functions
../singular_texi/types.tex(,2181) 
../singular_texi/types.tex(,2182) @table @code
../singular_texi/types.tex(,2183) @item bareiss
../singular_texi/types.tex(,2184) returns a list of a matrix (lower triangular) and
../singular_texi/types.tex(,2185) of an intvec (permutations of columns, see @ref{bareiss})
../singular_texi/types.tex(,2186) @item betti
../singular_texi/types.tex(,2187) Betti numbers of a resolution (see @ref{betti})
../singular_texi/types.tex(,2188) @item delete
../singular_texi/types.tex(,2189) deletes an element from a list (see @ref{delete})
../singular_texi/types.tex(,2190) @item facstd
../singular_texi/types.tex(,2191) factorizing Groebner basis algorithm (see @ref{facstd})
../singular_texi/types.tex(,2192) @item factorize
../singular_texi/types.tex(,2193) list of factors of a polynomial (see @ref{factorize})
../singular_texi/types.tex(,2194) @item insert
../singular_texi/types.tex(,2195) inserts or appends a new element to a list (see @ref{insert})
../singular_texi/types.tex(,2196) @item lres
../singular_texi/types.tex(,2197) free resolution (see @ref{lres})
../singular_texi/types.tex(,2198) @item minres
../singular_texi/types.tex(,2199) minimize a free resolution (see @ref{minres})
../singular_texi/types.tex(,2200) @item mres
../singular_texi/types.tex(,2201) minimal free resolution of an ideal, resp.@: module w.r.t.
../singular_texi/types.tex(,2202) a minimal set of generators of the first module (see @ref{mres})
../singular_texi/types.tex(,2203) @item names
../singular_texi/types.tex(,2204) list of all user-defined variable names (see @ref{names})
../singular_texi/types.tex(,2205) @item res
../singular_texi/types.tex(,2206) free resolution of an ideal, resp.@: module (see @ref{res})
../singular_texi/types.tex(,2207) @item size
../singular_texi/types.tex(,2208) number of entries (see @ref{size})
../singular_texi/types.tex(,2209) @item sres
../singular_texi/types.tex(,2210) free resolution of an ideal, resp.@: module, given by a standard base (see @ref{sres})
../singular_texi/types.tex(,2211) @end table
../singular_texi/types.tex(,2212) 
../singular_texi/types.tex(,2213) 
../singular_texi/types.tex(,2214) @c ---------------------------------------
../singular_texi/types.tex(,2215) @node map, matrix, list, Data types
../singular_texi/types.tex(,2216) @section map
../singular_texi/types.tex(,2217) @cindex map
../singular_texi/types.tex(,2218) 
../singular_texi/types.tex(,2219) Maps are ring maps from a preimage ring into the basering.
../singular_texi/types.tex(,2220) 
../singular_texi/types.tex(,2221) @strong{Note:}
../singular_texi/types.tex(,2222) @itemize @bullet
../singular_texi/types.tex(,2223) @item
../singular_texi/types.tex(,2224) the target of a map is @strong{ALWAYS} the actual basering
../singular_texi/types.tex(,2225) @item
../singular_texi/types.tex(,2226) the preimage ring is stored "by name", that means, maps can only be
../singular_texi/types.tex(,2227) used in such contexts, where the name of the preimage ring can be
../singular_texi/types.tex(,2228) resolved (i.e., there might be problems for rings/maps defined in
../singular_texi/types.tex(,2229) subprocedures). See also @ref{Identifier resolution}, @ref{Names in
../singular_texi/types.tex(,2230) procedures}.
../singular_texi/types.tex(,2231) @end itemize
../singular_texi/types.tex(,2232) 
../singular_texi/types.tex(,2233) Maps between rings with different coefficient fields are
../singular_texi/types.tex(,2234) possible and listed below.
../singular_texi/types.tex(,2235) 
../singular_texi/types.tex(,2236) Canonically realized are
../singular_texi/types.tex(,2237) @itemize @bullet
../singular_texi/types.tex(,2238) @item
../singular_texi/types.tex(,2239) @tex
../singular_texi/types.tex(,2240) $Q \rightarrow  Q(a, \ldots)$
../singular_texi/types.tex(,2241) @end tex
../singular_texi/types.tex(,2245) 
../singular_texi/types.tex(,2246) @item
../singular_texi/types.tex(,2247) @tex
../singular_texi/types.tex(,2248) $Q \rightarrow R$
../singular_texi/types.tex(,2249) @end tex
../singular_texi/types.tex(,2253) 
../singular_texi/types.tex(,2254) @item
../singular_texi/types.tex(,2255) @tex
../singular_texi/types.tex(,2256) $Q \rightarrow  C$
../singular_texi/types.tex(,2257) @end tex
../singular_texi/types.tex(,2261) 
../singular_texi/types.tex(,2262) @item
../singular_texi/types.tex(,2263) @tex
../singular_texi/types.tex(,2264) $Z/p \rightarrow  (Z/p)(a, \ldots)$
../singular_texi/types.tex(,2265) @end tex
../singular_texi/types.tex(,2269) 
../singular_texi/types.tex(,2270) @item
../singular_texi/types.tex(,2271) @tex
../singular_texi/types.tex(,2272) $Z/p \rightarrow  GF(p^n)$
../singular_texi/types.tex(,2273) @end tex
../singular_texi/types.tex(,2277) 
../singular_texi/types.tex(,2278) @item
../singular_texi/types.tex(,2279) @tex
../singular_texi/types.tex(,2280) $Z/p \rightarrow  R$
../singular_texi/types.tex(,2281) @end tex
../singular_texi/types.tex(,2285) 
../singular_texi/types.tex(,2286) @item
../singular_texi/types.tex(,2287) @tex
../singular_texi/types.tex(,2288) $R \rightarrow C$
../singular_texi/types.tex(,2289) @end tex
../singular_texi/types.tex(,2293) @end itemize
../singular_texi/types.tex(,2294) 
../singular_texi/types.tex(,2295) Possible are furthermore
../singular_texi/types.tex(,2296) @itemize @bullet
../singular_texi/types.tex(,2297) @item
../singular_texi/types.tex(,2298) @tex
../singular_texi/types.tex(,2299) % This is quite a hack, but for now it works.
../singular_texi/types.tex(,2300) $Z/p \rightarrow Q,
../singular_texi/types.tex(,2301) \quad
../singular_texi/types.tex(,2302) [i]_p \mapsto i \in [-p/2, \, p/2]
../singular_texi/types.tex(,2303) \subseteq Z$
../singular_texi/types.tex(,2304) @end tex
../singular_texi/types.tex(,2308) @item
../singular_texi/types.tex(,2309) @tex
../singular_texi/types.tex(,2310) $Z/p \rightarrow Z/p^\prime,
../singular_texi/types.tex(,2311) \quad
../singular_texi/types.tex(,2312) [i]_p \mapsto i \in [-p/2, \, p/2] \subseteq Z, \;
../singular_texi/types.tex(,2313) i \mapsto [i]_{p^\prime} \in Z/p^\prime$
../singular_texi/types.tex(,2314) @end tex
../singular_texi/types.tex(,2318) @item
../singular_texi/types.tex(,2319) @tex
../singular_texi/types.tex(,2320) $C \rightarrow R, \quad$ the real part
../singular_texi/types.tex(,2321) @end tex
../singular_texi/types.tex(,2325) @end itemize
../singular_texi/types.tex(,2326) 
../singular_texi/types.tex(,2327) Finally, in Singular we allow the mapping from rings
../singular_texi/types.tex(,2328) with coefficient field Q to rings whose ground fields
../singular_texi/types.tex(,2329) have finite characteristic:
../singular_texi/types.tex(,2330) 
../singular_texi/types.tex(,2331) @itemize @bullet
../singular_texi/types.tex(,2332) @item
../singular_texi/types.tex(,2333) @tex
../singular_texi/types.tex(,2334) $Q \rightarrow Z/p$
../singular_texi/types.tex(,2335) @end tex
../singular_texi/types.tex(,2339) 
../singular_texi/types.tex(,2340) @item
../singular_texi/types.tex(,2341) @tex
../singular_texi/types.tex(,2342) $Q \rightarrow (Z/p)(a, \ldots)$
../singular_texi/types.tex(,2343) @end tex
../singular_texi/types.tex(,2347) @end itemize
../singular_texi/types.tex(,2348) In these cases the denominator and the numerator
../singular_texi/types.tex(,2349) of a number are mapped separately by the usual
../singular_texi/types.tex(,2350) map from Z to Z/p, and the image of the number
../singular_texi/types.tex(,2351) is built again afterwards by division. It is thus
../singular_texi/types.tex(,2352) not allowed to map numbers whose denominator is
../singular_texi/types.tex(,2353) divisible by the characteristic of the target
../singular_texi/types.tex(,2354) ground field, or objects containing such numbers.
../singular_texi/types.tex(,2355) We, therefore, strongly recommend using such
../singular_texi/types.tex(,2356) maps only to map objects with integer coefficients.
../singular_texi/types.tex(,2357) 
../singular_texi/types.tex(,2358) 
../singular_texi/types.tex(,2359) @menu
../singular_texi/types.tex(,2360) * map declarations::
../singular_texi/types.tex(,2361) * map expressions::
../singular_texi/types.tex(,2362) * map operations::
../singular_texi/types.tex(,2363) * fetch::
../singular_texi/types.tex(,2364) * imap::
../singular_texi/types.tex(,2365) * subst::
../singular_texi/types.tex(,2366) @end menu
../singular_texi/types.tex(,2368) See @ref{imap}; @ref{fetch}; @ref{subst}.
../singular_texi/types.tex(,2370) 
../singular_texi/types.tex(,2371) @c ------------------------------
../singular_texi/types.tex(,2372) @node map declarations, map expressions, map, map
../singular_texi/types.tex(,2373) @subsection map declarations
../singular_texi/types.tex(,2374) @cindex map declarations
../singular_texi/types.tex(,2375) 
../singular_texi/types.tex(,2376) @table @strong
../singular_texi/types.tex(,2377) @item Syntax:
../singular_texi/types.tex(,2378) @code{map} name @code{=} preimage_ring_name @code{,} ideal_expression @code{;}
../singular_texi/types.tex(,2379) @*@code{map} name @code{=} preimage_ring_name @code{,} list_of_poly_and_ideal_expressions @code{;}
../singular_texi/types.tex(,2380) @*@code{map} name @code{=} map_expression @code{;}
../singular_texi/types.tex(,2381) 
../singular_texi/types.tex(,2382) @item Purpose:
../singular_texi/types.tex(,2383) defines a ring map from preimage_ring to basering.
../singular_texi/types.tex(,2384) @* Maps the variables of the preimage ring to the generators of the ideal.
../singular_texi/types.tex(,2385) If the ideal contains less elements than variables in the
../singular_texi/types.tex(,2386) preimage_ring the remaining variables are mapped to 0, if the ideal contains
../singular_texi/types.tex(,2387) more elements these are ignored.
../singular_texi/types.tex(,2388) The image ring is always the actual basering.
../singular_texi/types.tex(,2389) For the mapping of coefficients from different fields see @ref{map}.
../singular_texi/types.tex(,2390) 
../singular_texi/types.tex(,2391) @item Default:
../singular_texi/types.tex(,2392) none
../singular_texi/types.tex(,2393) 
../singular_texi/types.tex(,2394) @item Note:
../singular_texi/types.tex(,2395) There are standard mappings for maps which are close to the identity
../singular_texi/types.tex(,2396) map: @code{fetch} and @code{imap}.
../singular_texi/types.tex(,2397) 
../singular_texi/types.tex(,2398) The name of a map serves as the function which maps objects from the
../singular_texi/types.tex(,2399) preimage_ring into the basering.  These objects must be defined
../singular_texi/types.tex(,2400) by names (no evaluation in the preimage ring is possible).
../singular_texi/types.tex(,2401) 
../singular_texi/types.tex(,2402) @item Example:
../singular_texi/types.tex(,2403) @smallexample
../singular_texi/types.tex(,2404) @c reused example map_declarations types.doc:2044 
../singular_texi/types.tex(,2405)   ring r1=32003,(x,y,z),dp;
../singular_texi/types.tex(,2406)   ideal i=x,y,z;
../singular_texi/types.tex(,2407)   ring r2=32003,(a,b),dp;
../singular_texi/types.tex(,2408)   map f=r1,a,b,a+b;
../singular_texi/types.tex(,2409)   // maps from r1 to r2,
../singular_texi/types.tex(,2410)   // x -> a
../singular_texi/types.tex(,2411)   // y -> b
../singular_texi/types.tex(,2412)   // z -> a+b
../singular_texi/types.tex(,2413)   f(i);
../singular_texi/types.tex(,2414) @expansion{} _[1]=a
../singular_texi/types.tex(,2415) @expansion{} _[2]=b
../singular_texi/types.tex(,2416) @expansion{} _[3]=a+b
../singular_texi/types.tex(,2417)   // operations like f(i[1]) or f(i*i) are not allowed
../singular_texi/types.tex(,2418)   ideal i=f(i);
../singular_texi/types.tex(,2419)   // objects in different rings may have the same name
../singular_texi/types.tex(,2420)   map g   = r2,a2,b2;
../singular_texi/types.tex(,2421)   map phi = g(f);
../singular_texi/types.tex(,2422)   // composition of map f and g
../singular_texi/types.tex(,2423)   // maps from r1 to r2,
../singular_texi/types.tex(,2424)   // x -> a2
../singular_texi/types.tex(,2425)   // y -> b2
../singular_texi/types.tex(,2426)   // z -> a2+b2
../singular_texi/types.tex(,2427)   phi(i);
../singular_texi/types.tex(,2428) @expansion{} _[1]=a2
../singular_texi/types.tex(,2429) @expansion{} _[2]=b2
../singular_texi/types.tex(,2430) @expansion{} _[3]=a2+b2
../singular_texi/types.tex(,2431) @c end example map_declarations types.doc:2044
../singular_texi/types.tex(,2432) @end smallexample
../singular_texi/types.tex(,2433) @end table
../singular_texi/types.tex(,2434) 
../singular_texi/types.tex(,2435) @c inserted refs from types.doc:2069
../singular_texi/types.tex(,2447) See 
../singular_texi/types.tex(,2448) @ref{fetch};
../singular_texi/types.tex(,2449) @ref{ideal expressions};
../singular_texi/types.tex(,2450) @ref{imap};
../singular_texi/types.tex(,2451) @ref{map};
../singular_texi/types.tex(,2452) @ref{ring}.
../singular_texi/types.tex(,2454) @c end inserted refs from types.doc:2069
../singular_texi/types.tex(,2455) 
../singular_texi/types.tex(,2456) @c ------------------------------
../singular_texi/types.tex(,2457) @node map expressions, map operations, map declarations, map
../singular_texi/types.tex(,2458) @subsection map expressions
../singular_texi/types.tex(,2459) @cindex map expressions
../singular_texi/types.tex(,2460) 
../singular_texi/types.tex(,2461) A map expression is:
../singular_texi/types.tex(,2462) @enumerate
../singular_texi/types.tex(,2463) @item
../singular_texi/types.tex(,2464) an identifier of type map
../singular_texi/types.tex(,2465) @item
../singular_texi/types.tex(,2466) a function returning map
../singular_texi/types.tex(,2467) @item
../singular_texi/types.tex(,2468) map expressions combined by composition using parentheses (@code{(}, @code{)})
../singular_texi/types.tex(,2469) @end enumerate
../singular_texi/types.tex(,2470) 
../singular_texi/types.tex(,2471) @c ------------------------------
../singular_texi/types.tex(,2472) @node map operations,  , map expressions, map
../singular_texi/types.tex(,2473) @subsection map operations
../singular_texi/types.tex(,2474) 
../singular_texi/types.tex(,2475) @cindex map operations
../singular_texi/types.tex(,2476) 
../singular_texi/types.tex(,2477) @table @asis
../singular_texi/types.tex(,2478) @item @code{( )}
../singular_texi/types.tex(,2479) composition of maps. If, for example, @code{f} and @code{g} are maps,
../singular_texi/types.tex(,2480) then @code{f(g)} is a map expression giving the composition of @code{f}
../singular_texi/types.tex(,2481) and @code{g}.
../singular_texi/types.tex(,2482) 
../singular_texi/types.tex(,2483) @item map_expression @code{[} int_expressions @code{]}
../singular_texi/types.tex(,2484) is a map entry (the image of the corresponding variable)
../singular_texi/types.tex(,2485) @end table
../singular_texi/types.tex(,2486) 
../singular_texi/types.tex(,2487) @*@strong{Example:}
../singular_texi/types.tex(,2488) @smallexample
../singular_texi/types.tex(,2489) @c reused example map_operations types.doc:2107 
../singular_texi/types.tex(,2490)   ring r=0,(x,y),dp;
../singular_texi/types.tex(,2491)   map f=r,y,x;    // the map f permutes the variables
../singular_texi/types.tex(,2492)   f;
../singular_texi/types.tex(,2493) @expansion{} f[1]=y
../singular_texi/types.tex(,2494) @expansion{} f[2]=x
../singular_texi/types.tex(,2495)   poly p=x+2y3;
../singular_texi/types.tex(,2496)   f(p);
../singular_texi/types.tex(,2497) @expansion{} 2x3+y
../singular_texi/types.tex(,2498)   map g=f(f);    // the map g defined as  f^2 is the identity
../singular_texi/types.tex(,2499)   g;
../singular_texi/types.tex(,2500) @expansion{} g[1]=x
../singular_texi/types.tex(,2501) @expansion{} g[2]=y
../singular_texi/types.tex(,2502)   g(p) == p;
../singular_texi/types.tex(,2503) @expansion{} 1
../singular_texi/types.tex(,2504) @c end example map_operations types.doc:2107
../singular_texi/types.tex(,2505) @end smallexample
../singular_texi/types.tex(,2506) 
../singular_texi/types.tex(,2507) @c ---------------------------------------
../singular_texi/types.tex(,2508) @node matrix, module, map, Data types
../singular_texi/types.tex(,2509) @section matrix
../singular_texi/types.tex(,2510) @cindex matrix
../singular_texi/types.tex(,2511) 
../singular_texi/types.tex(,2512) Objects of type matrix are matrices with polynomial entries.
../singular_texi/types.tex(,2513) Like polynomials they can
../singular_texi/types.tex(,2514) only be defined or accessed with respect to a basering. In order to
../singular_texi/types.tex(,2515) compute with matrices having integer or rational entries define a ring
../singular_texi/types.tex(,2516) with characteristic 0 and at least one variable.
../singular_texi/types.tex(,2517) 
../singular_texi/types.tex(,2518) A matrix can be multiplied by and added to a poly; in this case the
../singular_texi/types.tex(,2519) poly is converted into a matrix of the right size with the poly on the
../singular_texi/types.tex(,2520) diagonal.
../singular_texi/types.tex(,2521) 
../singular_texi/types.tex(,2522) If A is a matrix then the assignment @code{module M=A;} or @code{module
../singular_texi/types.tex(,2523) M=module(A);} creates a module generated by the columns of A.  Note that
../singular_texi/types.tex(,2524) the trailing zero columns of A may be deleted by module operations with
../singular_texi/types.tex(,2525) M.
../singular_texi/types.tex(,2526) 
../singular_texi/types.tex(,2527) @menu
../singular_texi/types.tex(,2528) * matrix declarations::
../singular_texi/types.tex(,2529) * matrix expressions::
../singular_texi/types.tex(,2530) * matrix type cast::
../singular_texi/types.tex(,2531) * matrix operations::
../singular_texi/types.tex(,2532) * matrix related functions::
../singular_texi/types.tex(,2533) @end menu
../singular_texi/types.tex(,2534) 
../singular_texi/types.tex(,2535) @c ------------------------------
../singular_texi/types.tex(,2536) @node matrix declarations, matrix expressions, matrix, matrix
../singular_texi/types.tex(,2537) @subsection matrix declarations
../singular_texi/types.tex(,2538) @cindex matrix declarations
../singular_texi/types.tex(,2539) 
../singular_texi/types.tex(,2540) @table @strong
../singular_texi/types.tex(,2541) @item Syntax:
../singular_texi/types.tex(,2542) @code{matrix} name@code{[}rows@code{][}cols@code{] =} list_of_poly_expressions @code{;}
../singular_texi/types.tex(,2543) @*@code{matrix} name = matrix_expression @code{;}
../singular_texi/types.tex(,2544) 
../singular_texi/types.tex(,2545) @item Purpose:
../singular_texi/types.tex(,2546) defines a matrix (of polynomials).
../singular_texi/types.tex(,2547) 
../singular_texi/types.tex(,2548) The given poly_list fills up the matrix beginning with the first row
../singular_texi/types.tex(,2549) from the left to the right, then the second row and so on.
../singular_texi/types.tex(,2550) If the poly_list contains less than rows*cols elements,
../singular_texi/types.tex(,2551) the matrix is filled up with zeros; if it contains more
../singular_texi/types.tex(,2552) elements, then only the first rows*cols elements are used.
../singular_texi/types.tex(,2553) If the right-hand side is a matrix expression
../singular_texi/types.tex(,2554) the matrix on the left-hand side gets the same size as the right-hand side,
../singular_texi/types.tex(,2555) otherwise the size is determined by the left-hand side.
../singular_texi/types.tex(,2556) If the size is omitted a 1x1 matrix is created.
../singular_texi/types.tex(,2557) 
../singular_texi/types.tex(,2558) @item Default:
../singular_texi/types.tex(,2559) 0 (1 x 1 matrix)
../singular_texi/types.tex(,2560) 
../singular_texi/types.tex(,2561) @item Example:
../singular_texi/types.tex(,2562) @smallexample
../singular_texi/types.tex(,2563) @c reused example matrix_declarations types.doc:2175 
../singular_texi/types.tex(,2564)   int ro = 3;
../singular_texi/types.tex(,2565)   ring r = 32003,(x,y,z),dp;
../singular_texi/types.tex(,2566)   poly f=xyz;
../singular_texi/types.tex(,2567)   poly g=z*f;
../singular_texi/types.tex(,2568)   ideal i=f,g,g^2;
../singular_texi/types.tex(,2569)   matrix m[ro][3] = x3y4, 0, i, f ; // a 3 x 3 matrix
../singular_texi/types.tex(,2570)   m;
../singular_texi/types.tex(,2571) @expansion{} m[1,1]=x3y4
../singular_texi/types.tex(,2572) @expansion{} m[1,2]=0
../singular_texi/types.tex(,2573) @expansion{} m[1,3]=xyz
../singular_texi/types.tex(,2574) @expansion{} m[2,1]=xyz2
../singular_texi/types.tex(,2575) @expansion{} m[2,2]=x2y2z4
../singular_texi/types.tex(,2576) @expansion{} m[2,3]=xyz
../singular_texi/types.tex(,2577) @expansion{} m[3,1]=0
../singular_texi/types.tex(,2578) @expansion{} m[3,2]=0
../singular_texi/types.tex(,2579) @expansion{} m[3,3]=0
../singular_texi/types.tex(,2580)   print(m);
../singular_texi/types.tex(,2581) @expansion{} x3y4,0,     xyz,
../singular_texi/types.tex(,2582) @expansion{} xyz2,x2y2z4,xyz,
../singular_texi/types.tex(,2583) @expansion{} 0,   0,     0   
../singular_texi/types.tex(,2584)   matrix A;   // the 1 x 1 zero matrix
../singular_texi/types.tex(,2585)   matrix B[2][2] = m[1..2, 2..3]; //defines a submatrix
../singular_texi/types.tex(,2586)   print(B);
../singular_texi/types.tex(,2587) @expansion{} 0,     xyz,
../singular_texi/types.tex(,2588) @expansion{} x2y2z4,xyz 
../singular_texi/types.tex(,2589)   matrix C=m; // defines C as a 3 x 3 matrix equal to m
../singular_texi/types.tex(,2590)   print(C);
../singular_texi/types.tex(,2591) @expansion{} x3y4,0,     xyz,
../singular_texi/types.tex(,2592) @expansion{} xyz2,x2y2z4,xyz,
../singular_texi/types.tex(,2593) @expansion{} 0,   0,     0   
../singular_texi/types.tex(,2594) @c end example matrix_declarations types.doc:2175
../singular_texi/types.tex(,2595) @end smallexample
../singular_texi/types.tex(,2596) @end table
../singular_texi/types.tex(,2597) 
../singular_texi/types.tex(,2598) @c ------------------------------
../singular_texi/types.tex(,2599) @node matrix expressions, matrix type cast, matrix declarations, matrix
../singular_texi/types.tex(,2600) @subsection matrix expressions
../singular_texi/types.tex(,2601) @cindex matrix expressions
../singular_texi/types.tex(,2602) 
../singular_texi/types.tex(,2603) A matrix expression is:
../singular_texi/types.tex(,2604) @enumerate
../singular_texi/types.tex(,2605) @item
../singular_texi/types.tex(,2606) an identifier of type matrix
../singular_texi/types.tex(,2607) @item
../singular_texi/types.tex(,2608) a function returning matrix
../singular_texi/types.tex(,2609) @item
../singular_texi/types.tex(,2610) matrix expressions combined by the arithmetic operations
../singular_texi/types.tex(,2611) @code{+}, @code{-} or @code{*}
../singular_texi/types.tex(,2612) @item
../singular_texi/types.tex(,2613) a type cast to matrix (@pxref{matrix type cast})
../singular_texi/types.tex(,2614) @end enumerate
../singular_texi/types.tex(,2615) 
../singular_texi/types.tex(,2616) @*@strong{Example:}
../singular_texi/types.tex(,2617) @smallexample
../singular_texi/types.tex(,2618) @c reused example matrix_expressions types.doc:2213 
../singular_texi/types.tex(,2619)   ring r=0,(x,y),dp;
../singular_texi/types.tex(,2620)   poly f= x3y2 + 2x2y2 +2;
../singular_texi/types.tex(,2621)   matrix H = jacob(jacob(f));    // the Hessian of f
../singular_texi/types.tex(,2622)   matrix mc = coef(f,y);
../singular_texi/types.tex(,2623)   print(mc);
../singular_texi/types.tex(,2624) @expansion{} y2,    1,
../singular_texi/types.tex(,2625) @expansion{} x3+2x2,2 
../singular_texi/types.tex(,2626)   module MD = [x+y,1,x],[x+y,0,y];
../singular_texi/types.tex(,2627)   matrix M = MD;
../singular_texi/types.tex(,2628)   print(M);
../singular_texi/types.tex(,2629) @expansion{} x+y,x+y,
../singular_texi/types.tex(,2630) @expansion{} 1,  0,  
../singular_texi/types.tex(,2631) @expansion{} x,  y   
../singular_texi/types.tex(,2632) @c end example matrix_expressions types.doc:2213
../singular_texi/types.tex(,2633) @end smallexample
../singular_texi/types.tex(,2634) 
../singular_texi/types.tex(,2635) @c ------------------------------
../singular_texi/types.tex(,2636) @node matrix type cast,  matrix operations, matrix expressions, matrix
../singular_texi/types.tex(,2637) @subsection matrix type cast
../singular_texi/types.tex(,2638) @cindex matrix type cast
../singular_texi/types.tex(,2639) @table @code
../singular_texi/types.tex(,2640) @item @strong{Syntax:}
../singular_texi/types.tex(,2641) @code{matrix (} expression @code{)}
../singular_texi/types.tex(,2642) @*@code{matrix (} expression, int_n, int_m  @code{)}
../singular_texi/types.tex(,2643) @item @strong{Type:}
../singular_texi/types.tex(,2644) matrix
../singular_texi/types.tex(,2645) @item @strong{Purpose:}
../singular_texi/types.tex(,2646) Converts expression to a matrix, where expression must be of type int,
../singular_texi/types.tex(,2647) intmat, intvec, number, poly, ideal, vector, module, or matrix. If
../singular_texi/types.tex(,2648) int_n and int_m are supplied, then they specify the dimension of the
../singular_texi/types.tex(,2649) matrix. Otherwise, the size (resp.@: dimensions) of the matrix
../singular_texi/types.tex(,2650) are determined  by the size (resp.@: dimensions) of the
../singular_texi/types.tex(,2651) expression.
../singular_texi/types.tex(,2652) @item @strong{Example:}
../singular_texi/types.tex(,2653) @smallexample
../singular_texi/types.tex(,2654) @c reused example matrix_type_cast types.doc:2244 
../singular_texi/types.tex(,2655)   ring r=32003,(x,y,z),dp;
../singular_texi/types.tex(,2656)   matrix(x);
../singular_texi/types.tex(,2657) @expansion{} _[1,1]=x
../singular_texi/types.tex(,2658)   matrix(x, 1, 2);
../singular_texi/types.tex(,2659) @expansion{} _[1,1]=x
../singular_texi/types.tex(,2660) @expansion{} _[1,2]=0
../singular_texi/types.tex(,2661)   matrix(intmat(intvec(1,2,3,4), 2, 2));
../singular_texi/types.tex(,2662) @expansion{} _[1,1]=1
../singular_texi/types.tex(,2663) @expansion{} _[1,2]=2
../singular_texi/types.tex(,2664) @expansion{} _[2,1]=3
../singular_texi/types.tex(,2665) @expansion{} _[2,2]=4
../singular_texi/types.tex(,2666)   matrix(_, 2, 3);
../singular_texi/types.tex(,2667) @expansion{} _[1,1]=1
../singular_texi/types.tex(,2668) @expansion{} _[1,2]=2
../singular_texi/types.tex(,2669) @expansion{} _[1,3]=0
../singular_texi/types.tex(,2670) @expansion{} _[2,1]=3
../singular_texi/types.tex(,2671) @expansion{} _[2,2]=4
../singular_texi/types.tex(,2672) @expansion{} _[2,3]=0
../singular_texi/types.tex(,2673)   matrix(_, 2, 1);
../singular_texi/types.tex(,2674) @expansion{} _[1,1]=1
../singular_texi/types.tex(,2675) @expansion{} _[2,1]=3
../singular_texi/types.tex(,2676) @c end example matrix_type_cast types.doc:2244
../singular_texi/types.tex(,2677) @end smallexample
../singular_texi/types.tex(,2678) @end table
../singular_texi/types.tex(,2679) @c inserted refs from types.doc:2254
../singular_texi/types.tex(,2689) See
../singular_texi/types.tex(,2690) @ref{Type conversion and casting};
../singular_texi/types.tex(,2691) @ref{intmat type cast};
../singular_texi/types.tex(,2692) @ref{matrix}.
../singular_texi/types.tex(,2694) @c end inserted refs from types.doc:2254
../singular_texi/types.tex(,2695) @c ------------------------------
../singular_texi/types.tex(,2696) @node matrix operations, matrix related functions, matrix type cast, matrix
../singular_texi/types.tex(,2697) @subsection matrix operations
../singular_texi/types.tex(,2698) @cindex matrix operations
../singular_texi/types.tex(,2699) 
../singular_texi/types.tex(,2700) @table @asis
../singular_texi/types.tex(,2701) @item @code{+}
../singular_texi/types.tex(,2702) addition with matrix or poly; the poly is converted into a diagonal
../singular_texi/types.tex(,2703) matrix
../singular_texi/types.tex(,2704) 
../singular_texi/types.tex(,2705) @item @code{-}
../singular_texi/types.tex(,2706) negation or subtraction with matrix or poly; the poly is converted into
../singular_texi/types.tex(,2707) a diagonal matrix
../singular_texi/types.tex(,2708) 
../singular_texi/types.tex(,2709) @item @code{*}
../singular_texi/types.tex(,2710) multiplication with matrix or poly; the poly is converted into a
../singular_texi/types.tex(,2711) diagonal matrix
../singular_texi/types.tex(,2712) 
../singular_texi/types.tex(,2713) @item @code{/}
../singular_texi/types.tex(,2714) division by poly
../singular_texi/types.tex(,2715) 
../singular_texi/types.tex(,2716) @item @code{==}, @code{<>}, @code{!=}
../singular_texi/types.tex(,2717) comparison
../singular_texi/types.tex(,2718) 
../singular_texi/types.tex(,2719) @item matrix_expression @code{[} int_expression@code{,} int_expression @code{]}
../singular_texi/types.tex(,2720) is a matrix entry, where the first index indicates the row and the
../singular_texi/types.tex(,2721) second the column
../singular_texi/types.tex(,2722) @end table
../singular_texi/types.tex(,2723) 
../singular_texi/types.tex(,2724) @*@strong{Example:}
../singular_texi/types.tex(,2725) @smallexample
../singular_texi/types.tex(,2726) @c reused example matrix_operations types.doc:2291 
../singular_texi/types.tex(,2727)   ring r=32003,x,dp;
../singular_texi/types.tex(,2728)   matrix A[3][3] = 1,3,2,5,0,3,2,4,5; // define a matrix
../singular_texi/types.tex(,2729)   print(A); // nice printing of small matrices
../singular_texi/types.tex(,2730) @expansion{} 1,3,2,
../singular_texi/types.tex(,2731) @expansion{} 5,0,3,
../singular_texi/types.tex(,2732) @expansion{} 2,4,5 
../singular_texi/types.tex(,2733)   A[2,3];   // matrix entry
../singular_texi/types.tex(,2734) @expansion{} 3
../singular_texi/types.tex(,2735)   A[2,3] = A[2,3] + 1; // change entry
../singular_texi/types.tex(,2736)   A[2,1..3] = 1,2,3;   // change 2nd row
../singular_texi/types.tex(,2737)   print(A);
../singular_texi/types.tex(,2738) @expansion{} 1,3,2,
../singular_texi/types.tex(,2739) @expansion{} 1,2,3,
../singular_texi/types.tex(,2740) @expansion{} 2,4,5 
../singular_texi/types.tex(,2741)   matrix E[3][3]; E = E + 1;  // the unit matrix
../singular_texi/types.tex(,2742)   matrix B =x*E - A;
../singular_texi/types.tex(,2743)   print(B);
../singular_texi/types.tex(,2744) @expansion{} x-1,-3, -2,
../singular_texi/types.tex(,2745) @expansion{} -1, x-2,-3,
../singular_texi/types.tex(,2746) @expansion{} -2, -4, x-5
../singular_texi/types.tex(,2747)   det(B);        // the characteristic polynomial of A
../singular_texi/types.tex(,2748) @expansion{} x3-8x2-2x-1
../singular_texi/types.tex(,2749)   A*A*A - 8 * A*A - 2*A == E;  // Cayley-Hamilton
../singular_texi/types.tex(,2750) @expansion{} 1
../singular_texi/types.tex(,2751)   vector v =[x,-1,x2];
../singular_texi/types.tex(,2752)   A*v; // multiplication of matrix and vector
../singular_texi/types.tex(,2753) @expansion{} _[1,1]=2x2+x-3
../singular_texi/types.tex(,2754) @expansion{} _[2,1]=3x2+x-2
../singular_texi/types.tex(,2755) @expansion{} _[3,1]=5x2+2x-4
../singular_texi/types.tex(,2756)   matrix m[2][2]=1,2,3;
../singular_texi/types.tex(,2757)   print(m-transpose(m));
../singular_texi/types.tex(,2758) @expansion{} 0,-1,
../singular_texi/types.tex(,2759) @expansion{} 1,0  
../singular_texi/types.tex(,2760) @c end example matrix_operations types.doc:2291
../singular_texi/types.tex(,2761) @end smallexample
../singular_texi/types.tex(,2762) 
../singular_texi/types.tex(,2763) @c ------------------------------
../singular_texi/types.tex(,2764) @node matrix related functions,  , matrix operations, matrix
../singular_texi/types.tex(,2765) @subsection matrix related functions
../singular_texi/types.tex(,2766) @cindex matrix related functions
../singular_texi/types.tex(,2767) 
../singular_texi/types.tex(,2768) @table @code
../singular_texi/types.tex(,2769) @item bareiss
../singular_texi/types.tex(,2770) Gauss-Bareiss algorithm (see @ref{bareiss})
../singular_texi/types.tex(,2771) @item coef
../singular_texi/types.tex(,2772) matrix of coefficients and monomials (see @ref{coef})
../singular_texi/types.tex(,2773) @item coeffs
../singular_texi/types.tex(,2774) matrix of coefficients (see @ref{coeffs})
../singular_texi/types.tex(,2775) @item det
../singular_texi/types.tex(,2776) determinant (see @ref{det})
../singular_texi/types.tex(,2777) @item diff
../singular_texi/types.tex(,2778) partial derivative (see @ref{diff})
../singular_texi/types.tex(,2779) @item jacob
../singular_texi/types.tex(,2780) Jacobi matrix (see @ref{jacob})
../singular_texi/types.tex(,2781) @item koszul
../singular_texi/types.tex(,2782) Koszul matrix (see @ref{koszul})
../singular_texi/types.tex(,2783) @item lift
../singular_texi/types.tex(,2784) lift-matrix (see @ref{lift})
../singular_texi/types.tex(,2785) @item liftstd
../singular_texi/types.tex(,2786) standard basis and transformation matrix computation (see @ref{liftstd})
../singular_texi/types.tex(,2787) @item minor
../singular_texi/types.tex(,2788) set of minors of a matrix (see @ref{minor})
../singular_texi/types.tex(,2789) @item ncols
../singular_texi/types.tex(,2790) number of columns (see @ref{ncols})
../singular_texi/types.tex(,2791) @item nrows
../singular_texi/types.tex(,2792) number of rows (see @ref{nrows})
../singular_texi/types.tex(,2793) @item print
../singular_texi/types.tex(,2794) nice print format (see @ref{print})
../singular_texi/types.tex(,2795) @item size
../singular_texi/types.tex(,2796) number of matrix entries (see @ref{size})
../singular_texi/types.tex(,2797) @item subst
../singular_texi/types.tex(,2798) substitute a ring variable (see @ref{subst})
../singular_texi/types.tex(,2799) @item trace
../singular_texi/types.tex(,2800) trace of a matrix (see @ref{trace})
../singular_texi/types.tex(,2801) @item transpose
../singular_texi/types.tex(,2802) transpose a matrix (see @ref{transpose})
../singular_texi/types.tex(,2803) @item wedge
../singular_texi/types.tex(,2804) wedge product (see @ref{wedge})
../singular_texi/types.tex(,2805) @end table
../singular_texi/types.tex(,2806) 
../singular_texi/types.tex(,2807) See also the library @ref{matrix_lib}, which contains more
../singular_texi/types.tex(,2808) matrix-related functions.
../singular_texi/types.tex(,2809) 
../singular_texi/types.tex(,2810) @c @*@strong{Example:}
../singular_texi/types.tex(,2811) @c @example
../singular_texi/types.tex(,2812) @c @end example
../singular_texi/types.tex(,2813) 
../singular_texi/types.tex(,2814) @c ---------------------------------------
../singular_texi/types.tex(,2815) @node module, number, matrix, Data types
../singular_texi/types.tex(,2816) @section module
../singular_texi/types.tex(,2817) @cindex module
../singular_texi/types.tex(,2818) 
../singular_texi/types.tex(,2819) Modules are submodules of a free module over the basering with basis
../singular_texi/types.tex(,2820) @code{gen(1)}, @code{gen(2)}, @dots{} .
../singular_texi/types.tex(,2821) They are represented by lists of vectors which generate the submodule.
../singular_texi/types.tex(,2822) Like vectors they
../singular_texi/types.tex(,2823) can only be defined or accessed with respect to a basering.
../singular_texi/types.tex(,2824) If 
../singular_texi/types.tex(,2828) @tex
../singular_texi/types.tex(,2829) $M$
../singular_texi/types.tex(,2830) @end tex
../singular_texi/types.tex(,2831)  is a submodule of
../singular_texi/types.tex(,2835) @tex
../singular_texi/types.tex(,2836) $R^n$,
../singular_texi/types.tex(,2837) @end tex
../singular_texi/types.tex(,2838) 
../singular_texi/types.tex(,2842) @tex
../singular_texi/types.tex(,2843) $R$
../singular_texi/types.tex(,2844) @end tex
../singular_texi/types.tex(,2845)  the basering, generated by vectors
../singular_texi/types.tex(,2849) @tex
../singular_texi/types.tex(,2850) $v_1, \ldots, v_k$, then $v_1, \ldots, v_k$
../singular_texi/types.tex(,2851) @end tex
../singular_texi/types.tex(,2852) may be considered as the generators of relations of
../singular_texi/types.tex(,2856) @tex
../singular_texi/types.tex(,2857) $R^n/M$
../singular_texi/types.tex(,2858) @end tex
../singular_texi/types.tex(,2859) between the canonical generators @code{gen(1)},@dots{},@code{gen(n)}.
../singular_texi/types.tex(,2860) Hence any finitely generated 
../singular_texi/types.tex(,2864) @tex
../singular_texi/types.tex(,2865) $R$
../singular_texi/types.tex(,2866) @end tex
../singular_texi/types.tex(,2867) -module can be represented in @sc{Singular}
../singular_texi/types.tex(,2868) by its module of relations. The assignments
../singular_texi/types.tex(,2869) @code{module M=v1,...,vk; matrix A=M;}
../singular_texi/types.tex(,2870) create the presentation matrix of size
../singular_texi/types.tex(,2874) @tex
../singular_texi/types.tex(,2875) n$\times$k
../singular_texi/types.tex(,2876) @end tex
../singular_texi/types.tex(,2877)  for
../singular_texi/types.tex(,2881) @tex
../singular_texi/types.tex(,2882) R$^n$/M,
../singular_texi/types.tex(,2883) @end tex
../singular_texi/types.tex(,2884) i.e., the columns of A are the vectors
../singular_texi/types.tex(,2888) @tex
../singular_texi/types.tex(,2889) $v_1, \ldots, v_k$
../singular_texi/types.tex(,2890) @end tex
../singular_texi/types.tex(,2891) which generate M (cf. @ref{Representation of mathematical objects}).
../singular_texi/types.tex(,2892) 
../singular_texi/types.tex(,2893) @menu
../singular_texi/types.tex(,2894) * module declarations::
../singular_texi/types.tex(,2895) * module expressions::
../singular_texi/types.tex(,2896) * module operations::
../singular_texi/types.tex(,2897) * module related functions::
../singular_texi/types.tex(,2898) @end menu
../singular_texi/types.tex(,2899) 
../singular_texi/types.tex(,2900) @c ------------------------------
../singular_texi/types.tex(,2901) @node module declarations, module expressions, module, module
../singular_texi/types.tex(,2902) @subsection module declarations
../singular_texi/types.tex(,2903) @cindex module declarations
../singular_texi/types.tex(,2904) 
../singular_texi/types.tex(,2905) @table @strong
../singular_texi/types.tex(,2906) @item Syntax:
../singular_texi/types.tex(,2907) @code{module} name @code{=} list_of_vector_expressions @code{;}
../singular_texi/types.tex(,2908) @*@code{module} name @code{=} module_expression @code{;}
../singular_texi/types.tex(,2909) 
../singular_texi/types.tex(,2910) @item Purpose:
../singular_texi/types.tex(,2911) defines a module.
../singular_texi/types.tex(,2912) 
../singular_texi/types.tex(,2913) @item Default:
../singular_texi/types.tex(,2914) [0]
../singular_texi/types.tex(,2915) 
../singular_texi/types.tex(,2916) @item Example:
../singular_texi/types.tex(,2917) @smallexample
../singular_texi/types.tex(,2918) @c reused example module_declarations types.doc:2445 
../singular_texi/types.tex(,2919)   ring r=0,(x,y,z),(c,dp);
../singular_texi/types.tex(,2920)   vector s1 = [x2,y3,z];
../singular_texi/types.tex(,2921)   vector s2 = [xy,1,0];
../singular_texi/types.tex(,2922)   vector s3 = [0,x2-y2,z];
../singular_texi/types.tex(,2923)   poly   f  = xyz;
../singular_texi/types.tex(,2924)   module m = s1, s2-s1,f*(s3-s1);
../singular_texi/types.tex(,2925)   m;
../singular_texi/types.tex(,2926) @expansion{} m[1]=[x2,y3,z]
../singular_texi/types.tex(,2927) @expansion{} m[2]=[-x2+xy,-y3+1,-z]
../singular_texi/types.tex(,2928) @expansion{} m[3]=[-x3yz,-xy4z+x3yz-xy3z]
../singular_texi/types.tex(,2929)   // show m in matrix format (columns generate m)
../singular_texi/types.tex(,2930)   print(m);
../singular_texi/types.tex(,2931) @expansion{} x2,-x2+xy,-x3yz,          
../singular_texi/types.tex(,2932) @expansion{} y3,-y3+1, -xy4z+x3yz-xy3z,
../singular_texi/types.tex(,2933) @expansion{} z, -z,    0               
../singular_texi/types.tex(,2934) @c end example module_declarations types.doc:2445
../singular_texi/types.tex(,2935) @end smallexample
../singular_texi/types.tex(,2936) @end table
../singular_texi/types.tex(,2937) 
../singular_texi/types.tex(,2938) @c ------------------------------
../singular_texi/types.tex(,2939) @node module expressions, module operations, module declarations, module
../singular_texi/types.tex(,2940) @subsection module expressions
../singular_texi/types.tex(,2941) @cindex module expressions
../singular_texi/types.tex(,2942) 
../singular_texi/types.tex(,2943) A module expression is:
../singular_texi/types.tex(,2944) @enumerate
../singular_texi/types.tex(,2945) @item
../singular_texi/types.tex(,2946) an identifier of type module
../singular_texi/types.tex(,2947) @item
../singular_texi/types.tex(,2948) a function returning module
../singular_texi/types.tex(,2949) @item
../singular_texi/types.tex(,2950) module expressions combined by the arithmetic operation @code{+}
../singular_texi/types.tex(,2951) @item
../singular_texi/types.tex(,2952) multiplication of a module expression with an ideal or a poly expression: @code{*}
../singular_texi/types.tex(,2953) @item
../singular_texi/types.tex(,2954) a type cast to module
../singular_texi/types.tex(,2955) @end enumerate
../singular_texi/types.tex(,2956) 
../singular_texi/types.tex(,2957) @c inserted refs from types.doc:2478
../singular_texi/types.tex(,2968) See
../singular_texi/types.tex(,2969) @ref{Type conversion and casting};
../singular_texi/types.tex(,2970) @ref{ideal};
../singular_texi/types.tex(,2971) @ref{poly};
../singular_texi/types.tex(,2972) @ref{vector}.
../singular_texi/types.tex(,2974) @c end inserted refs from types.doc:2478
../singular_texi/types.tex(,2975) 
../singular_texi/types.tex(,2976) @c @*@strong{Example:}
../singular_texi/types.tex(,2977) @c @example
../singular_texi/types.tex(,2978) @c @c example
../singular_texi/types.tex(,2979) @c @c example
../singular_texi/types.tex(,2980) @c @end example
../singular_texi/types.tex(,2981) 
../singular_texi/types.tex(,2982) @c ------------------------------
../singular_texi/types.tex(,2983) @node module operations, module related functions, module expressions, module
../singular_texi/types.tex(,2984) @subsection module operations
../singular_texi/types.tex(,2985) @cindex module operations
../singular_texi/types.tex(,2986) 
../singular_texi/types.tex(,2987) @table @asis
../singular_texi/types.tex(,2988) @item @code{+}
../singular_texi/types.tex(,2989) addition (concatenation of the generators and simplification)
../singular_texi/types.tex(,2990) 
../singular_texi/types.tex(,2991) @item @code{*}
../singular_texi/types.tex(,2992) multiplication with ideal or poly, but not `module` * `module`
../singular_texi/types.tex(,2993) 
../singular_texi/types.tex(,2994) @item module_expression @code{[} int_expression @code{,} int_expression @code{]}
../singular_texi/types.tex(,2995) is a module entry, where the first index indicates the row and
../singular_texi/types.tex(,2996) the second the column
../singular_texi/types.tex(,2997) 
../singular_texi/types.tex(,2998) @item module_expressions @code{[} int_expression @code{]}
../singular_texi/types.tex(,2999) is a vector, where the index indicates the column
../singular_texi/types.tex(,3000) @end table
../singular_texi/types.tex(,3001) 
../singular_texi/types.tex(,3002) @*@strong{Example:}
../singular_texi/types.tex(,3003) @smallexample
../singular_texi/types.tex(,3004) @c reused example module_operations types.doc:2514 
../singular_texi/types.tex(,3005)   ring r=0,(x,y,z),dp;
../singular_texi/types.tex(,3006)   module m=[x,y],[0,0,z];
../singular_texi/types.tex(,3007)   print(m*(x+y));
../singular_texi/types.tex(,3008) @expansion{} x2+xy,0,   
../singular_texi/types.tex(,3009) @expansion{} xy+y2,0,   
../singular_texi/types.tex(,3010) @expansion{} 0,    xz+yz
../singular_texi/types.tex(,3011) @c end example module_operations types.doc:2514
../singular_texi/types.tex(,3012) @end smallexample
../singular_texi/types.tex(,3013) 
../singular_texi/types.tex(,3014) @c ------------------------------
../singular_texi/types.tex(,3015) @node module related functions,  , module operations, module
../singular_texi/types.tex(,3016) @subsection module related functions
../singular_texi/types.tex(,3017) @cindex module related functions
../singular_texi/types.tex(,3018) 
../singular_texi/types.tex(,3019) @table @code
../singular_texi/types.tex(,3020) @item coeffs
../singular_texi/types.tex(,3021) matrix of coefficients (see @ref{coeffs})
../singular_texi/types.tex(,3022) @item degree
../singular_texi/types.tex(,3023) multiplicity, dimension and codimension of the module of leading terms (see @ref{degree})
../singular_texi/types.tex(,3024) @item diff
../singular_texi/types.tex(,3025) partial derivative (see @ref{diff})
../singular_texi/types.tex(,3026) @item dim
../singular_texi/types.tex(,3027) Krull dimension of free module over the basering modulo the module of leading terms (see @ref{dim})
../singular_texi/types.tex(,3028) @item eliminate
../singular_texi/types.tex(,3029) elimination of variables (see @ref{eliminate})
../singular_texi/types.tex(,3030) @item freemodule
../singular_texi/types.tex(,3031) the free module of given rank (see @ref{freemodule})
../singular_texi/types.tex(,3032) @item groebner
../singular_texi/types.tex(,3033) Groebner basis computation (a wrapper around @code{std,stdhilb,stdfglm},...)
../singular_texi/types.tex(,3034) (see @ref{groebner})
../singular_texi/types.tex(,3035) @item hilb
../singular_texi/types.tex(,3036) Hilbert function of a standard basis (see @ref{hilb})
../singular_texi/types.tex(,3037) @item homog
../singular_texi/types.tex(,3038) homogenization with respect to a variable (see @ref{homog})
../singular_texi/types.tex(,3039) @item interred
../singular_texi/types.tex(,3040) interreduction of a module (see @ref{interred})
../singular_texi/types.tex(,3041) @item intersect
../singular_texi/types.tex(,3042) module intersection (see @ref{intersect})
../singular_texi/types.tex(,3043) @item jet
../singular_texi/types.tex(,3044) Taylor series up to a given order (see @ref{jet})
../singular_texi/types.tex(,3045) @item kbase
../singular_texi/types.tex(,3046) vector space basis of free module over the basering modulo the module of
../singular_texi/types.tex(,3047) leading terms (see @ref{kbase})
../singular_texi/types.tex(,3048) @item lead
../singular_texi/types.tex(,3049) initial module (see @ref{lead})
../singular_texi/types.tex(,3050) @item lift
../singular_texi/types.tex(,3051) lift-matrix (see @ref{lift})
../singular_texi/types.tex(,3052) @item liftstd
../singular_texi/types.tex(,3053) standard basis and transformation matrix computation (see @ref{liftstd})
../singular_texi/types.tex(,3054) @item lres
../singular_texi/types.tex(,3055) free resolution (see @ref{lres})
../singular_texi/types.tex(,3056) @item minbase
../singular_texi/types.tex(,3057) minimal generating set of a homogeneous ideal, resp.@: module, or an ideal, resp.@: module,
../singular_texi/types.tex(,3058) over a local ring
../singular_texi/types.tex(,3059) @item modulo
../singular_texi/types.tex(,3060) represents
../singular_texi/types.tex(,3061) @tex
../singular_texi/types.tex(,3062) $(h1+h2)/h1=h2/(h1 \cap h2)$
../singular_texi/types.tex(,3063) @end tex
../singular_texi/types.tex(,3067) (see @ref{modulo})
../singular_texi/types.tex(,3068) @item mres
../singular_texi/types.tex(,3069) minimal free resolution of an ideal resp.@: module w.r.t. a minimal set of generators of the given module
../singular_texi/types.tex(,3070) (see @ref{mres})
../singular_texi/types.tex(,3071) @item mult
../singular_texi/types.tex(,3072) multiplicity, resp.@: degree, of the module of leading terms (see @ref{mult})
../singular_texi/types.tex(,3073) @item ncols
../singular_texi/types.tex(,3074) number of columns (see @ref{ncols})
../singular_texi/types.tex(,3075) @item nrows
../singular_texi/types.tex(,3076) number of rows (see @ref{nrows})
../singular_texi/types.tex(,3077) @item print
../singular_texi/types.tex(,3078) nice print format (see @ref{print})
../singular_texi/types.tex(,3079) @item prune
../singular_texi/types.tex(,3080) minimize the embedding into a free module (see @ref{prune})
../singular_texi/types.tex(,3081) @item qhweight
../singular_texi/types.tex(,3082) quasihomogeneous weights of an ideal, resp.@: module (see @ref{qhweight})
../singular_texi/types.tex(,3083) @item quotient
../singular_texi/types.tex(,3084) module quotient (see @ref{quotient})
../singular_texi/types.tex(,3085) @item reduce
../singular_texi/types.tex(,3086) normalform with respect to a standard basis (see @ref{reduce})
../singular_texi/types.tex(,3087) @item res
../singular_texi/types.tex(,3088) free resolution of an ideal, resp.@: module, but not changing the given ideal, resp.@: module
../singular_texi/types.tex(,3089) (see @ref{res})
../singular_texi/types.tex(,3090) @item simplify
../singular_texi/types.tex(,3091) simplify a set of vectors (see @ref{simplify})
../singular_texi/types.tex(,3092) @item size
../singular_texi/types.tex(,3093) number of non-zero generators (see @ref{size})
../singular_texi/types.tex(,3094) @item sortvec
../singular_texi/types.tex(,3095) permutation for sorting ideals/modules (see @ref{sortvec})
../singular_texi/types.tex(,3096) @item sres
../singular_texi/types.tex(,3097) free resolution of a standard basis (see @ref{sres})
../singular_texi/types.tex(,3098) @item std
../singular_texi/types.tex(,3099) standard basis computation (see @ref{std}, @ref{liftstd})
../singular_texi/types.tex(,3100) @item subst
../singular_texi/types.tex(,3101) substitute a ring variable (see @ref{subst})
../singular_texi/types.tex(,3102) @item syz
../singular_texi/types.tex(,3103) computation of the first syzygy module (see @ref{syz})
../singular_texi/types.tex(,3104) @item vdim
../singular_texi/types.tex(,3105) vector space dimension of free module over the basering modulo module
../singular_texi/types.tex(,3106) of leading terms (see @ref{vdim})
../singular_texi/types.tex(,3107) @item weight
../singular_texi/types.tex(,3108) "optimal" weights (see @ref{weight})
../singular_texi/types.tex(,3109) @end table
../singular_texi/types.tex(,3110) 
../singular_texi/types.tex(,3111) @c @*@strong{Example:}
../singular_texi/types.tex(,3112) @c @example
../singular_texi/types.tex(,3113) @c @end example
../singular_texi/types.tex(,3114) 
../singular_texi/types.tex(,3115) @c ---------------------------------------
../singular_texi/types.tex(,3120) @node number, poly, module, Data types
../singular_texi/types.tex(,3122) @section number
../singular_texi/types.tex(,3123) @cindex number
../singular_texi/types.tex(,3124) @cindex coefficient field
../singular_texi/types.tex(,3125) @cindex ground field
../singular_texi/types.tex(,3126) @cindex field
../singular_texi/types.tex(,3127) @cindex galois field
../singular_texi/types.tex(,3128) @cindex finite field
../singular_texi/types.tex(,3129) @cindex parameter, as numbers
../singular_texi/types.tex(,3130) 
../singular_texi/types.tex(,3131) Numbers are elements from the coefficient field (or ground field).
../singular_texi/types.tex(,3132) They can only be defined or accessed with respect to a basering
../singular_texi/types.tex(,3133) which determines the coefficient field. See @ref{ring declarations} for
../singular_texi/types.tex(,3134) declarations of coefficient fields.
../singular_texi/types.tex(,3135) 
../singular_texi/types.tex(,3136) @strong{Warning:} Beware of the special meaning of the letter @code{e}
../singular_texi/types.tex(,3137) (immediately following a sequence of digits) if the field is real (or complex).
../singular_texi/types.tex(,3138) See @ref{number operations}, @ref{Miscellaneous oddities}.
../singular_texi/types.tex(,3139) 
../singular_texi/types.tex(,3140) @menu
../singular_texi/types.tex(,3141) * number declarations::
../singular_texi/types.tex(,3142) * number expressions::
../singular_texi/types.tex(,3143) * number operations::
../singular_texi/types.tex(,3144) * number related functions::
../singular_texi/types.tex(,3145) @end menu
../singular_texi/types.tex(,3146) 
../singular_texi/types.tex(,3147) @c ------------------------------
../singular_texi/types.tex(,3148) @node number declarations, number expressions, number, number
../singular_texi/types.tex(,3149) @subsection number declarations
../singular_texi/types.tex(,3150) @cindex number declarations
../singular_texi/types.tex(,3151) 
../singular_texi/types.tex(,3152) @table @strong
../singular_texi/types.tex(,3153) @item Syntax:
../singular_texi/types.tex(,3154) @code{number} name @code{=} number_expression @code{;}
../singular_texi/types.tex(,3155) 
../singular_texi/types.tex(,3156) @item Purpose:
../singular_texi/types.tex(,3157) defines a number.
../singular_texi/types.tex(,3158) 
../singular_texi/types.tex(,3159) @item Default:
../singular_texi/types.tex(,3160) 0
../singular_texi/types.tex(,3161) 
../singular_texi/types.tex(,3162) @item Note:
../singular_texi/types.tex(,3163) Numbers may only be declared w.r.t. the coefficient field of the current
../singular_texi/types.tex(,3164) basering, i.e., a ring
../singular_texi/types.tex(,3165) has to be defined prior to any number declaration. See @ref{Rings and
../singular_texi/types.tex(,3166) orderings} for a list of the available coefficient fields.
../singular_texi/types.tex(,3167) 
../singular_texi/types.tex(,3168) @item Example:
../singular_texi/types.tex(,3169) @smallexample
../singular_texi/types.tex(,3170) @c reused example number_declarations types.doc:2677 
../singular_texi/types.tex(,3171)   // finite field Z/p, p<= 32003
../singular_texi/types.tex(,3172)   ring r = 32003,(x,y,z),dp;
../singular_texi/types.tex(,3173)   number n = 4/6;
../singular_texi/types.tex(,3174)   n;
../singular_texi/types.tex(,3175) @expansion{} -10667
../singular_texi/types.tex(,3176)   // finite field GF(p^n), p^n <= 32767
../singular_texi/types.tex(,3177)   // z is a primitive root of the minimal polynomial
../singular_texi/types.tex(,3178)   ring rg= (7^2,z),x,dp;
../singular_texi/types.tex(,3179)   number n = 4/9+z;
../singular_texi/types.tex(,3180)   n;
../singular_texi/types.tex(,3181) @expansion{} z11
../singular_texi/types.tex(,3182)   // the rational numbers
../singular_texi/types.tex(,3183)   ring r0 = 0,x,dp;
../singular_texi/types.tex(,3184)   number n = 4/6;
../singular_texi/types.tex(,3185)   n;
../singular_texi/types.tex(,3186) @expansion{} 2/3
../singular_texi/types.tex(,3187)   // algebraic extensions of Z/p or Q
../singular_texi/types.tex(,3188)   ring ra=(0,a),x,dp;
../singular_texi/types.tex(,3189)   minpoly=a^2+1;
../singular_texi/types.tex(,3190)   number n=a3+a2+2a-1;
../singular_texi/types.tex(,3191)   n;
../singular_texi/types.tex(,3192) @expansion{} (a-2)
../singular_texi/types.tex(,3193)   a^2;
../singular_texi/types.tex(,3194) @expansion{} -1
../singular_texi/types.tex(,3195)   // transcedental extensions of Z/p or Q
../singular_texi/types.tex(,3196)   ring rt=(0,a),x,dp;
../singular_texi/types.tex(,3197)   number n=a3+a2+2a-1;
../singular_texi/types.tex(,3198)   n;
../singular_texi/types.tex(,3199) @expansion{} (a3+a2+2a-1)
../singular_texi/types.tex(,3200)   a^2;
../singular_texi/types.tex(,3201) @expansion{} (a2)
../singular_texi/types.tex(,3202)   // machine floating point numbers, single precision
../singular_texi/types.tex(,3203)   ring R_0=real,x,dp;
../singular_texi/types.tex(,3204)   number n=4/6;
../singular_texi/types.tex(,3205)   n;
../singular_texi/types.tex(,3206) @expansion{} 6.667e-01
../singular_texi/types.tex(,3207)   n=0.25e+2;
../singular_texi/types.tex(,3208)   n;
../singular_texi/types.tex(,3209) @expansion{} 2.500e+01
../singular_texi/types.tex(,3210)   // floating point numbers, arbitrary prescribed precision
../singular_texi/types.tex(,3211)   ring R_1=(real,50),x,dp;
../singular_texi/types.tex(,3212)   number n=4.0/6;
../singular_texi/types.tex(,3213)   n;
../singular_texi/types.tex(,3214) @expansion{} 0.66666666666666666666666666666666666666666666666667
../singular_texi/types.tex(,3215)   n=0.25e+2;
../singular_texi/types.tex(,3216)   n;
../singular_texi/types.tex(,3217) @expansion{} 25
../singular_texi/types.tex(,3218)   // floating point complex numbers, arbitrary prescribed precision
../singular_texi/types.tex(,3219)   // the third parameter gives the name of the imaginary unit
../singular_texi/types.tex(,3220)   ring R_2=(complex,50,i),x,dp;
../singular_texi/types.tex(,3221)   number n=4.0/6;
../singular_texi/types.tex(,3222)   n;
../singular_texi/types.tex(,3223) @expansion{} 0.66666666666666666666666666666666666666666666666667
../singular_texi/types.tex(,3224)   n=0.25e+2*i+n;
../singular_texi/types.tex(,3225)   n;
../singular_texi/types.tex(,3226) @expansion{} (0.66666666666666666666666666666666666666666666666667+i*25)
../singular_texi/types.tex(,3227) @c end example number_declarations types.doc:2677
../singular_texi/types.tex(,3228) @end smallexample
../singular_texi/types.tex(,3229) @end table
../singular_texi/types.tex(,3230) 
../singular_texi/types.tex(,3231) @c ------------------------------
../singular_texi/types.tex(,3232) @node number expressions, number operations, number declarations, number
../singular_texi/types.tex(,3233) @subsection number expressions
../singular_texi/types.tex(,3234) @cindex number expressions
../singular_texi/types.tex(,3235) 
../singular_texi/types.tex(,3236) A number expression is:
../singular_texi/types.tex(,3237) @enumerate
../singular_texi/types.tex(,3238) @item
../singular_texi/types.tex(,3239) a rational number (there are NO spaces allowed inside a rational number,
../singular_texi/types.tex(,3240) see @ref{int expressions})
../singular_texi/types.tex(,3241) @item
../singular_texi/types.tex(,3242) a floating point number (if the coefficient field is @code{real}):
../singular_texi/types.tex(,3243) @*<digits>@code{.}<digits>@code{e}<sign><digits>
../singular_texi/types.tex(,3244) @item
../singular_texi/types.tex(,3245) an identifier of type number
../singular_texi/types.tex(,3246) @item
../singular_texi/types.tex(,3247) a function returning number
../singular_texi/types.tex(,3248) @item
../singular_texi/types.tex(,3249) an int expression (see @ref{Type conversion and casting})
../singular_texi/types.tex(,3250) @item
../singular_texi/types.tex(,3251) number expressions combined by the arithmetic operations
../singular_texi/types.tex(,3252) @code{+}, @code{-}, @code{*}, @code{/}, @code{^}, or @code{**}.
../singular_texi/types.tex(,3253) @item
../singular_texi/types.tex(,3254) a type cast to number
../singular_texi/types.tex(,3255) @end enumerate
../singular_texi/types.tex(,3256) 
../singular_texi/types.tex(,3257) @*@strong{Example:}
../singular_texi/types.tex(,3258) @smallexample
../singular_texi/types.tex(,3259) @c reused example number_expressions types.doc:2753 
../singular_texi/types.tex(,3260)   // the following expressions are in any ring int expressions
../singular_texi/types.tex(,3261)   2 / 3;
../singular_texi/types.tex(,3262) @expansion{} 0
../singular_texi/types.tex(,3263)   4/ 8;
../singular_texi/types.tex(,3264) @expansion{} 0
../singular_texi/types.tex(,3265)   2 /2;   // the notation of / for div might change in the future
../singular_texi/types.tex(,3266) @expansion{} 1
../singular_texi/types.tex(,3267)   ring r0=0,x,dp;
../singular_texi/types.tex(,3268)   2/3, 4/8, 2/2 ; // are numbers
../singular_texi/types.tex(,3269) @expansion{} 2/3 1/2 1
../singular_texi/types.tex(,3270) 
../singular_texi/types.tex(,3271)   poly f = 2x2 +1;
../singular_texi/types.tex(,3272)   leadcoef(f);
../singular_texi/types.tex(,3273) @expansion{} 2
../singular_texi/types.tex(,3274)   typeof(_);
../singular_texi/types.tex(,3275) @expansion{} number
../singular_texi/types.tex(,3276)   ring rr =real,x,dp;
../singular_texi/types.tex(,3277)   1.7e-2; 1.7e+2; // are valid (but  1.7e2 not), if the field is `real`
../singular_texi/types.tex(,3278) @expansion{} 1.700e-02
../singular_texi/types.tex(,3279) @expansion{} 1.700e+02
../singular_texi/types.tex(,3280)   ring rp = (31,t),x,dp;
../singular_texi/types.tex(,3281)   2/3, 4/8, 2/2 ; // are numbers
../singular_texi/types.tex(,3282) @expansion{} 11 -15 1
../singular_texi/types.tex(,3283)   poly g = (3t2 +1)*x2 +1;
../singular_texi/types.tex(,3284)   leadcoef(g);
../singular_texi/types.tex(,3285) @expansion{} (3t2+1)
../singular_texi/types.tex(,3286)   typeof(_);
../singular_texi/types.tex(,3287) @expansion{} number
../singular_texi/types.tex(,3288)   par(1);
../singular_texi/types.tex(,3289) @expansion{} (t)
../singular_texi/types.tex(,3290)   typeof(_);
../singular_texi/types.tex(,3291) @expansion{} number
../singular_texi/types.tex(,3292) @c end example number_expressions types.doc:2753
../singular_texi/types.tex(,3293) @end smallexample
../singular_texi/types.tex(,3294) @c inserted refs from types.doc:2775
../singular_texi/types.tex(,3303) See
../singular_texi/types.tex(,3304) @ref{Type conversion and casting};
../singular_texi/types.tex(,3305) @ref{ring}.
../singular_texi/types.tex(,3307) @c end inserted refs from types.doc:2775
../singular_texi/types.tex(,3308) 
../singular_texi/types.tex(,3309) @c ------------------------------
../singular_texi/types.tex(,3310) @node number operations, number related functions, number expressions, number
../singular_texi/types.tex(,3311) @subsection number operations
../singular_texi/types.tex(,3312) @cindex number operations
../singular_texi/types.tex(,3313) @cindex mod
../singular_texi/types.tex(,3314) 
../singular_texi/types.tex(,3315) @table @asis
../singular_texi/types.tex(,3316) @item @code{+}
../singular_texi/types.tex(,3317) addition
../singular_texi/types.tex(,3318) @item @code{-}
../singular_texi/types.tex(,3319) negation or subtraction
../singular_texi/types.tex(,3320) @item @code{*}
../singular_texi/types.tex(,3321) multiplication
../singular_texi/types.tex(,3322) @item @code{/}
../singular_texi/types.tex(,3323) division
../singular_texi/types.tex(,3324) @item @code{^}, @code{**}
../singular_texi/types.tex(,3325) power, exponentiation (by an integer)
../singular_texi/types.tex(,3326) @item @code{<=, >=, ==, <>}
../singular_texi/types.tex(,3327) comparison
../singular_texi/types.tex(,3328) @item @code{mod}
../singular_texi/types.tex(,3329) integer modulo (the remainder of the division @code{div}), always non-negative
../singular_texi/types.tex(,3330) @end table
../singular_texi/types.tex(,3331) 
../singular_texi/types.tex(,3332) @strong{Note:} quotient and exponentiation is only recognized as a
../singular_texi/types.tex(,3333) number expression if it is already a number, see @ref{Miscellaneous
../singular_texi/types.tex(,3334) oddities}.
../singular_texi/types.tex(,3335) @* For the behavior of comparison operators in rings with
../singular_texi/types.tex(,3336) ground field different from real or the rational numbers, see @ref{boolean
../singular_texi/types.tex(,3337) expressions}.
../singular_texi/types.tex(,3338) 
../singular_texi/types.tex(,3339) @*@strong{Example:}
../singular_texi/types.tex(,3340) @smallexample
../singular_texi/types.tex(,3341) @c reused example number_operations types.doc:2813 
../singular_texi/types.tex(,3342)   ring r=0,x,dp;
../singular_texi/types.tex(,3343)   number n = 1/2 +1/3;
../singular_texi/types.tex(,3344)   n;
../singular_texi/types.tex(,3345) @expansion{} 5/6
../singular_texi/types.tex(,3346)   n/2;
../singular_texi/types.tex(,3347) @expansion{} 5/12
../singular_texi/types.tex(,3348)   1/2/3;
../singular_texi/types.tex(,3349) @expansion{} 1/6
../singular_texi/types.tex(,3350)   1/2 * 1/3;
../singular_texi/types.tex(,3351) @expansion{} 1/6
../singular_texi/types.tex(,3352)   n = 2;
../singular_texi/types.tex(,3353)   n^-2;
../singular_texi/types.tex(,3354) @expansion{} 1/4
../singular_texi/types.tex(,3355)   // the following oddities appear here
../singular_texi/types.tex(,3356)   2/(2+3);
../singular_texi/types.tex(,3357) @expansion{} 0
../singular_texi/types.tex(,3358)   number(2)/(2+3);
../singular_texi/types.tex(,3359) @expansion{} 2/5
../singular_texi/types.tex(,3360)   2^-2; // for int's exponent must be non-negative
../singular_texi/types.tex(,3361) @expansion{}    ? exponent must be non-negative
../singular_texi/types.tex(,3362) @expansion{}    ? error occurred in line 12: `  2^-2; // for int's exponent must be no\
../singular_texi/types.tex(,3363)    n-negative`
../singular_texi/types.tex(,3364)   number(2)^-2;
../singular_texi/types.tex(,3365) @expansion{} 1/4
../singular_texi/types.tex(,3366)   3/4>=2/5;
../singular_texi/types.tex(,3367) @expansion{} 1
../singular_texi/types.tex(,3368)   2/6==1/3;
../singular_texi/types.tex(,3369) @expansion{} 1
../singular_texi/types.tex(,3370) @c end example number_operations types.doc:2813
../singular_texi/types.tex(,3371) @end smallexample
../singular_texi/types.tex(,3372) 
../singular_texi/types.tex(,3373) @c ------------------------------
../singular_texi/types.tex(,3374) @node number related functions,  , number operations, number
../singular_texi/types.tex(,3375) @subsection number related functions
../singular_texi/types.tex(,3376) @cindex number related functions
../singular_texi/types.tex(,3377) 
../singular_texi/types.tex(,3378) @table @code
../singular_texi/types.tex(,3379) @item cleardenom
../singular_texi/types.tex(,3380) cancel denominators of numbers in poly and divide it by its content
../singular_texi/types.tex(,3381) (see @ref{cleardenom})
../singular_texi/types.tex(,3382) @item impart
../singular_texi/types.tex(,3383) imaginary part of a complex number, 0 otherwise
../singular_texi/types.tex(,3384) (see @ref{impart}, @ref{repart})
../singular_texi/types.tex(,3385) @item numerator, denominator
../singular_texi/types.tex(,3386) return the numerator/denominator of a rational number
../singular_texi/types.tex(,3387) (see @ref{numerator}, @ref{denominator})
../singular_texi/types.tex(,3388) @item leadcoef
../singular_texi/types.tex(,3389) coefficient of the leading term (see @ref{leadcoef})
../singular_texi/types.tex(,3390) @item par
../singular_texi/types.tex(,3391) n-th parameter of the basering (see @ref{par})
../singular_texi/types.tex(,3392) @item pardeg
../singular_texi/types.tex(,3393) degree of a number in ring parameters (see @ref{pardeg})
../singular_texi/types.tex(,3394) @item parstr
../singular_texi/types.tex(,3395) string form of ring parameters (see @ref{parstr})
../singular_texi/types.tex(,3396) @item repart
../singular_texi/types.tex(,3397) real part of a complex number
../singular_texi/types.tex(,3398) (see @ref{impart}, @ref{repart})
../singular_texi/types.tex(,3399) @end table
../singular_texi/types.tex(,3400) 
../singular_texi/types.tex(,3401) @c ---------------------------------------
../singular_texi/types.tex(,3481) 
../singular_texi/types.tex(,3482) @c ---------------------------------------
../singular_texi/types.tex(,3487) @node poly, proc, number, Data types
../singular_texi/types.tex(,3489) @section poly
../singular_texi/types.tex(,3490) @cindex poly
../singular_texi/types.tex(,3491) 
../singular_texi/types.tex(,3492) Polynomials are the basic data for all main algorithms in
../singular_texi/types.tex(,3493) @code{@sc{Singular}}. They consist of finitely many terms
../singular_texi/types.tex(,3494) (coefficient*power product) which are combined by the usual polynomial
../singular_texi/types.tex(,3495) operations (see @ref{poly expressions}). Polynomials can only be defined
../singular_texi/types.tex(,3496) or accessed with respect to a basering which determines the coefficient
../singular_texi/types.tex(,3497) type, the names of the indeterminates and the monomial ordering.
../singular_texi/types.tex(,3498) 
../singular_texi/types.tex(,3499) @smallexample
../singular_texi/types.tex(,3500) @c reused example poly types.doc:2950 
../singular_texi/types.tex(,3501)   ring r=32003,(x,y,z),dp;
../singular_texi/types.tex(,3502)   poly f=x3+y5+z2;
../singular_texi/types.tex(,3503) @c end example poly types.doc:2950
../singular_texi/types.tex(,3504) @end smallexample
../singular_texi/types.tex(,3505) 
../singular_texi/types.tex(,3506) @menu
../singular_texi/types.tex(,3507) * poly declarations::
../singular_texi/types.tex(,3508) * poly expressions::
../singular_texi/types.tex(,3509) * poly operations::
../singular_texi/types.tex(,3510) * poly related functions::
../singular_texi/types.tex(,3511) @end menu
../singular_texi/types.tex(,3512) 
../singular_texi/types.tex(,3513) @c ------------------------------
../singular_texi/types.tex(,3514) @node poly declarations, poly expressions, poly, poly
../singular_texi/types.tex(,3515) @subsection poly declarations
../singular_texi/types.tex(,3516) @cindex poly declarations
../singular_texi/types.tex(,3517) 
../singular_texi/types.tex(,3518) @table @strong
../singular_texi/types.tex(,3519) @item Syntax:
../singular_texi/types.tex(,3520) @code{poly} name @code{=} poly_expression @code{;}
../singular_texi/types.tex(,3521) 
../singular_texi/types.tex(,3522) @item Purpose:
../singular_texi/types.tex(,3523) defines a polynomial.
../singular_texi/types.tex(,3524) 
../singular_texi/types.tex(,3525) @item Default:
../singular_texi/types.tex(,3526) 0
../singular_texi/types.tex(,3527) 
../singular_texi/types.tex(,3528) @item Example:
../singular_texi/types.tex(,3529) @smallexample
../singular_texi/types.tex(,3530) @c reused example poly_declarations types.doc:2980 
../singular_texi/types.tex(,3531)   ring r = 32003,(x,y,z),dp;
../singular_texi/types.tex(,3532)   poly s1  = x3y2+151x5y+186xy6+169y9;
../singular_texi/types.tex(,3533)   poly s2  = 1*x^2*y^2*z^2+3z8;
../singular_texi/types.tex(,3534)   poly s3  = 5/4x4y2+4/5*x*y^5+2x2y2z3+y7+11x10;
../singular_texi/types.tex(,3535)   int a,b,c,t=37,5,4,1;
../singular_texi/types.tex(,3536)   poly f=3*x^a+x*y^(b+c)+t*x^a*y^b*z^c;
../singular_texi/types.tex(,3537)   f;
../singular_texi/types.tex(,3538) @expansion{} x37y5z4+3x37+xy9
../singular_texi/types.tex(,3539)   short = 0;
../singular_texi/types.tex(,3540)   f;
../singular_texi/types.tex(,3541) @expansion{} x^37*y^5*z^4+3*x^37+x*y^9
../singular_texi/types.tex(,3542) @c end example poly_declarations types.doc:2980
../singular_texi/types.tex(,3543) @end smallexample
../singular_texi/types.tex(,3544) @end table
../singular_texi/types.tex(,3545) @c inserted refs from types.doc:2993
../singular_texi/types.tex(,3553) @strong{See also:}
../singular_texi/types.tex(,3554) @ref{short}.
../singular_texi/types.tex(,3556) @c end inserted refs from types.doc:2993
../singular_texi/types.tex(,3557) @c ------------------------------
../singular_texi/types.tex(,3558) @node poly expressions, poly operations, poly declarations, poly
../singular_texi/types.tex(,3559) @subsection poly expressions
../singular_texi/types.tex(,3560) @cindex poly expressions
../singular_texi/types.tex(,3561) 
../singular_texi/types.tex(,3562) A poly expression is (optional parts in square brackets):
../singular_texi/types.tex(,3563) @enumerate
../singular_texi/types.tex(,3564) @item
../singular_texi/types.tex(,3565) a monomial (there are NO spaces allowed inside a monomial)
../singular_texi/types.tex(,3566) @smallexample
../singular_texi/types.tex(,3567)   [coefficient] ring_variable [ exponent] [ring_variable [exponent] @dots{}]
../singular_texi/types.tex(,3568) @end smallexample
../singular_texi/types.tex(,3569) monomials which contain an indexed ring variable
../singular_texi/types.tex(,3570) must be built from @code{ring_variable} and @code{coefficient}
../singular_texi/types.tex(,3571) with the operations @code{*} and @code{^}
../singular_texi/types.tex(,3572) @item
../singular_texi/types.tex(,3573) an identifier of type poly
../singular_texi/types.tex(,3574) @item
../singular_texi/types.tex(,3575) a function returning poly
../singular_texi/types.tex(,3576) @item
../singular_texi/types.tex(,3577) poly expressions combined by the arithmetic operations
../singular_texi/types.tex(,3578) @code{+}, @code{-}, @code{*}, @code{/}, or @code{^}
../singular_texi/types.tex(,3579) @item
../singular_texi/types.tex(,3580) an int expression (see @ref{Type conversion and casting})
../singular_texi/types.tex(,3581) @item
../singular_texi/types.tex(,3582) a type cast to poly
../singular_texi/types.tex(,3583) @end enumerate
../singular_texi/types.tex(,3584) 
../singular_texi/types.tex(,3585) @*@strong{Example:}
../singular_texi/types.tex(,3586) @smallexample
../singular_texi/types.tex(,3587) 2x, x3, 2x2y3, xyz, 2xy2; //  are monomials
../singular_texi/types.tex(,3588) 2*x, x^3, 2*x^2*y^3, x*y*z, 2*x*y^2; // are poly expressions
../singular_texi/types.tex(,3589) 2*x(1); // is a valid poly expression, but not 2x(1) (a syntax error)
../singular_texi/types.tex(,3590) 2*x^3;  // is a valid poly expression equal to 2x3 (a valid monomial)
../singular_texi/types.tex(,3591)         // but not equal to 2x^3 which will be interpreted as (2x)^3
../singular_texi/types.tex(,3592)         // since 2x is a monomial
../singular_texi/types.tex(,3593) @c reused example poly_expressions types.doc:3032 
../singular_texi/types.tex(,3594)   ring r=0,(x,y),dp;
../singular_texi/types.tex(,3595)   poly f = 10x2y3 +2x2y2-2xy+y -x+2;
../singular_texi/types.tex(,3596)   lead(f);
../singular_texi/types.tex(,3597) @expansion{} 10x2y3
../singular_texi/types.tex(,3598)   leadmonom(f);
../singular_texi/types.tex(,3599) @expansion{} x2y3
../singular_texi/types.tex(,3600)   simplify(f,1);     // normalize leading coefficient
../singular_texi/types.tex(,3601) @expansion{} x2y3+1/5x2y2-1/5xy-1/10x+1/10y+1/5
../singular_texi/types.tex(,3602)   poly g = 1/2x2 + 1/3y;
../singular_texi/types.tex(,3603)   cleardenom(g);
../singular_texi/types.tex(,3604) @expansion{} 3x2+2y
../singular_texi/types.tex(,3605)   int i = 102;
../singular_texi/types.tex(,3606)   poly(i);
../singular_texi/types.tex(,3607) @expansion{} 102
../singular_texi/types.tex(,3608)   typeof(_);
../singular_texi/types.tex(,3609) @expansion{} poly
../singular_texi/types.tex(,3610) @c end example poly_expressions types.doc:3032
../singular_texi/types.tex(,3611) @end smallexample
../singular_texi/types.tex(,3612) 
../singular_texi/types.tex(,3613) @c inserted refs from types.doc:3046
../singular_texi/types.tex(,3622) See 
../singular_texi/types.tex(,3623) @ref{Type conversion and casting};
../singular_texi/types.tex(,3624) @ref{ring}.
../singular_texi/types.tex(,3626) @c end inserted refs from types.doc:3046
../singular_texi/types.tex(,3627) 
../singular_texi/types.tex(,3628) @c ------------------------------
../singular_texi/types.tex(,3629) @node poly operations, poly related functions, poly expressions, poly
../singular_texi/types.tex(,3630) @subsection poly operations
../singular_texi/types.tex(,3631) @cindex poly operations
../singular_texi/types.tex(,3632) 
../singular_texi/types.tex(,3633) @table @asis
../singular_texi/types.tex(,3634) @item @code{+}
../singular_texi/types.tex(,3635) addition
../singular_texi/types.tex(,3636) 
../singular_texi/types.tex(,3637) @item @code{-}
../singular_texi/types.tex(,3638) negation or subtraction
../singular_texi/types.tex(,3639) 
../singular_texi/types.tex(,3640) @item @code{*}
../singular_texi/types.tex(,3641) multiplication
../singular_texi/types.tex(,3642) 
../singular_texi/types.tex(,3643) @item @code{/}
../singular_texi/types.tex(,3644) division by a polynomial, ignoring the rest
../singular_texi/types.tex(,3645) 
../singular_texi/types.tex(,3646) @item @code{^}, @code{**}
../singular_texi/types.tex(,3647) power by an integer
../singular_texi/types.tex(,3648) 
../singular_texi/types.tex(,3649) @item @code{<}, @code{<=}, @code{>}, @code{>=}, @code{==}, @code{<>}
../singular_texi/types.tex(,3650) comparison (w.r.t. monomial ordering)
../singular_texi/types.tex(,3651) 
../singular_texi/types.tex(,3652) @item poly_expression @code{[} intvec_expression @code{]}
../singular_texi/types.tex(,3653) the monomial at the indicated place w.r.t.@: the monomial ordering
../singular_texi/types.tex(,3654) @end table
../singular_texi/types.tex(,3655) 
../singular_texi/types.tex(,3656) @*@strong{Example:}
../singular_texi/types.tex(,3657) @smallexample
../singular_texi/types.tex(,3658) @c reused example poly_operations types.doc:3080 
../singular_texi/types.tex(,3659)   ring R=0,(x,y),dp;
../singular_texi/types.tex(,3660)   poly f = x3y2 + 2x2y2 + xy - x + y + 1;
../singular_texi/types.tex(,3661)   f;
../singular_texi/types.tex(,3662) @expansion{} x3y2+2x2y2+xy-x+y+1
../singular_texi/types.tex(,3663)   f + x5 + 2;
../singular_texi/types.tex(,3664) @expansion{} x5+x3y2+2x2y2+xy-x+y+3
../singular_texi/types.tex(,3665)   f * x2;
../singular_texi/types.tex(,3666) @expansion{} x5y2+2x4y2+x3y-x3+x2y+x2
../singular_texi/types.tex(,3667)   (x+y)/x;
../singular_texi/types.tex(,3668) @expansion{} 1
../singular_texi/types.tex(,3669)   f/3x2;
../singular_texi/types.tex(,3670) @expansion{} 1/3xy2+2/3y2
../singular_texi/types.tex(,3671)   x5 > f;
../singular_texi/types.tex(,3672) @expansion{} 1
../singular_texi/types.tex(,3673)   x<=y;
../singular_texi/types.tex(,3674) @expansion{} 0
../singular_texi/types.tex(,3675)   x>y;
../singular_texi/types.tex(,3676) @expansion{} 1
../singular_texi/types.tex(,3677)   ring r=0,(x,y),ds;
../singular_texi/types.tex(,3678)   poly f = fetch(R,f);
../singular_texi/types.tex(,3679)   f;
../singular_texi/types.tex(,3680) @expansion{} 1-x+y+xy+2x2y2+x3y2
../singular_texi/types.tex(,3681)   x5 > f;
../singular_texi/types.tex(,3682) @expansion{} 0
../singular_texi/types.tex(,3683)   f[2..4];
../singular_texi/types.tex(,3684) @expansion{} -x+y+xy
../singular_texi/types.tex(,3685)   size(f);
../singular_texi/types.tex(,3686) @expansion{} 6
../singular_texi/types.tex(,3687)   f[size(f)+1]; f[-1];    // monomials out of range are 0
../singular_texi/types.tex(,3688) @expansion{} 0
../singular_texi/types.tex(,3689) @expansion{} 0
../singular_texi/types.tex(,3690)   intvec v = 6,1,3;
../singular_texi/types.tex(,3691)   f[v];          // the polynom built from the 1st, 3rd and 6th monomial of f
../singular_texi/types.tex(,3692) @expansion{} 1+y+x3y2
../singular_texi/types.tex(,3693) @c end example poly_operations types.doc:3080
../singular_texi/types.tex(,3694) @end smallexample
../singular_texi/types.tex(,3695) 
../singular_texi/types.tex(,3696) @c ------------------------------
../singular_texi/types.tex(,3697) @node poly related functions,  , poly operations, poly
../singular_texi/types.tex(,3698) @subsection poly related functions
../singular_texi/types.tex(,3699) @cindex poly related functions
../singular_texi/types.tex(,3700) 
../singular_texi/types.tex(,3701) @table @code
../singular_texi/types.tex(,3702) @item cleardenom
../singular_texi/types.tex(,3703) cancel denominators of numbers in poly and divide it by its content
../singular_texi/types.tex(,3704) (see @ref{cleardenom})
../singular_texi/types.tex(,3705) @item coef
../singular_texi/types.tex(,3706) matrix of coefficients and monomials (see @ref{coef})
../singular_texi/types.tex(,3707) @item coeffs
../singular_texi/types.tex(,3708) matrix of coefficients (see @ref{coeffs})
../singular_texi/types.tex(,3709) @item deg
../singular_texi/types.tex(,3710) degree (see @ref{deg})
../singular_texi/types.tex(,3711) @item det
../singular_texi/types.tex(,3712) determinant (see @ref{det})
../singular_texi/types.tex(,3713) @item diff
../singular_texi/types.tex(,3714) partial derivative (see @ref{diff})
../singular_texi/types.tex(,3715) @item extgcd
../singular_texi/types.tex(,3716) Bezout representation of gcd (see @ref{extgcd})
../singular_texi/types.tex(,3717) @item factorize
../singular_texi/types.tex(,3718) factorize polynomial (see @ref{factorize})
../singular_texi/types.tex(,3719) @item finduni
../singular_texi/types.tex(,3720) find univariate polynomials in a zero-dimensional ideal (see @ref{finduni})
../singular_texi/types.tex(,3721) @item gcd
../singular_texi/types.tex(,3722) greatest common divisor (see @ref{gcd})
../singular_texi/types.tex(,3723) @item homog
../singular_texi/types.tex(,3724) homogenization (see @ref{homog})
../singular_texi/types.tex(,3725) @item jacob
../singular_texi/types.tex(,3726) ideal, resp.@: matrix, of all partial derivatives (see @ref{jacob})
../singular_texi/types.tex(,3727) @item lead
../singular_texi/types.tex(,3728) leading term (see @ref{lead})
../singular_texi/types.tex(,3729) @item leadcoef
../singular_texi/types.tex(,3730) coefficient of the leading term (see @ref{leadcoef})
../singular_texi/types.tex(,3731) @item leadexp
../singular_texi/types.tex(,3732) the exponent vector of the leading monomial (see @ref{leadexp})
../singular_texi/types.tex(,3733) @item leadmonom
../singular_texi/types.tex(,3734) leading monomial (see @ref{leadmonom})
../singular_texi/types.tex(,3735) @item jet
../singular_texi/types.tex(,3736) monomials with degree smaller k+1 (see @ref{jet})
../singular_texi/types.tex(,3737) @item ord
../singular_texi/types.tex(,3738) degree of the leading monomial (see @ref{ord})
../singular_texi/types.tex(,3739) @item qhweight
../singular_texi/types.tex(,3740) quasihomogeneous weights (see @ref{qhweight})
../singular_texi/types.tex(,3741) @item reduce
../singular_texi/types.tex(,3742) normal form with respect to a standard base (see @ref{reduce})
../singular_texi/types.tex(,3743) @item rvar
../singular_texi/types.tex(,3744) test for ring variable (see @ref{rvar})
../singular_texi/types.tex(,3745) @item simplify
../singular_texi/types.tex(,3746) normalize a polynomial (see @ref{simplify})
../singular_texi/types.tex(,3747) @item size
../singular_texi/types.tex(,3748) number of monomials (see @ref{size})
../singular_texi/types.tex(,3749) @item subst
../singular_texi/types.tex(,3750) substitute a ring variable (see @ref{subst})
../singular_texi/types.tex(,3751) @item trace
../singular_texi/types.tex(,3752) trace of a matrix (see @ref{trace})
../singular_texi/types.tex(,3753) @item var
../singular_texi/types.tex(,3754) the indicated variable of the ring (see @ref{var})
../singular_texi/types.tex(,3755) @item varstr
../singular_texi/types.tex(,3756) variable in string form (see @ref{varstr})
../singular_texi/types.tex(,3757) @end table
../singular_texi/types.tex(,3758) 
../singular_texi/types.tex(,3759) @c @*@strong{Example:}
../singular_texi/types.tex(,3760) @c @example
../singular_texi/types.tex(,3761) @c @end example
../singular_texi/types.tex(,3762) 
../singular_texi/types.tex(,3763) @c ---------------------------------------
../singular_texi/types.tex(,3764) @node proc, qring, poly, Data types
../singular_texi/types.tex(,3765) @section proc
../singular_texi/types.tex(,3766) @cindex proc
../singular_texi/types.tex(,3767) 
../singular_texi/types.tex(,3768) Procedures are sequences of @sc{Singular} commands in a special
../singular_texi/types.tex(,3769) format. They are used to extend the set of @sc{Singular} commands with
../singular_texi/types.tex(,3770) user defined commands. Once a procedure is defined it can be used as
../singular_texi/types.tex(,3771) any other @sc{Singular} command. Procedures may be defined by either
../singular_texi/types.tex(,3772) typing them on the command line or by loading them from a file. For a
../singular_texi/types.tex(,3773) detailed description on the concept of procedures in @sc{Singular} see
../singular_texi/types.tex(,3774) @ref{Procedures}. A file containing procedure definitions which comply with
../singular_texi/types.tex(,3775) certain syntax rules is called a library. Such a file is loaded
../singular_texi/types.tex(,3776) using the command @code{LIB}. For more information on libraries see
../singular_texi/types.tex(,3777) @ref{Libraries}.
../singular_texi/types.tex(,3778) 
../singular_texi/types.tex(,3779) @menu
../singular_texi/types.tex(,3780) * proc declaration::
../singular_texi/types.tex(,3781) @end menu
../singular_texi/types.tex(,3782) 
../singular_texi/types.tex(,3783) @c ---------------------------------------
../singular_texi/types.tex(,3784) @node proc declaration,  , proc, proc
../singular_texi/types.tex(,3785) @subsection proc declaration
../singular_texi/types.tex(,3786) @cindex proc declaration
../singular_texi/types.tex(,3787) 
../singular_texi/types.tex(,3788) @c ------------------------------------------------------------
../singular_texi/types.tex(,3789) @c   This piece of text exists also in the file general.doc,
../singular_texi/types.tex(,3790) @c   chapter "Proc in a library".
../singular_texi/types.tex(,3791) @c   If you change something here, change it there, too!
../singular_texi/types.tex(,3792) @c ------------------------------------------------------------
../singular_texi/types.tex(,3793) @table @strong
../singular_texi/types.tex(,3794) @item Syntax:
../singular_texi/types.tex(,3795) [@code{static}] @code{proc} proc_name [parameter_list]
../singular_texi/types.tex(,3796) @*["help_text"]
../singular_texi/types.tex(,3797) @*@code{@{}
../singular_texi/types.tex(,3798) @*
../singular_texi/types.tex(,3799) @tex
../singular_texi/types.tex(,3800) \quad
../singular_texi/types.tex(,3801) @end tex
../singular_texi/types.tex(,3802)    procedure_body
../singular_texi/types.tex(,3803) @*@code{@}}
../singular_texi/types.tex(,3804) @*[@code{example}
../singular_texi/types.tex(,3805) @*@code{@{}
../singular_texi/types.tex(,3806) @*
../singular_texi/types.tex(,3807) @tex
../singular_texi/types.tex(,3808) \quad
../singular_texi/types.tex(,3809) @end tex
../singular_texi/types.tex(,3810)    sequence_of_commands;
../singular_texi/types.tex(,3811) @*@code{@}}]
../singular_texi/types.tex(,3812) @*@code{proc} proc_name @code{=} proc_name @code{;}
../singular_texi/types.tex(,3813) @*@code{proc} proc_name @code{=} string_expression @code{;}
../singular_texi/types.tex(,3814) @item Purpose:
../singular_texi/types.tex(,3815) defines a new function, the @code{proc} proc_name, with the additional
../singular_texi/types.tex(,3816) information help_text, which is copied to the screen by
../singular_texi/types.tex(,3817) @code{help proc_name;} and the @code{example} section
../singular_texi/types.tex(,3818) which is executed by @code{example proc_name;}.
../singular_texi/types.tex(,3819) @* The help_text, the parameter_list, and the example section are optional.
../singular_texi/types.tex(,3820) The default for a parameter_list is @code{(list #)}, see @ref{Parameter list}.
../singular_texi/types.tex(,3821) The help and example sections are ignored if the procedure is defined
../singular_texi/types.tex(,3822) interactively, i.e., if it was not loaded from a file by a @ref{LIB} command.
../singular_texi/types.tex(,3823) @* Specifying @code{static} in front of the proc-definition is only possible
../singular_texi/types.tex(,3824) in a library file and makes this procedure local to the library,
../singular_texi/types.tex(,3825) i.e., accessible only for the other procedures in the same library,
../singular_texi/types.tex(,3826) but not for the users.
../singular_texi/types.tex(,3827) 
../singular_texi/types.tex(,3828) @item Example:
../singular_texi/types.tex(,3829) @smallexample
../singular_texi/types.tex(,3830) @c reused example proc_declaration types.doc:3237 
../singular_texi/types.tex(,3831)   proc milnor_number (poly p)
../singular_texi/types.tex(,3832)   @{
../singular_texi/types.tex(,3833)     ideal i= std(jacob(p));
../singular_texi/types.tex(,3834)     int m_nr=vdim(i);
../singular_texi/types.tex(,3835)     if (m_nr<0)
../singular_texi/types.tex(,3836)     @{
../singular_texi/types.tex(,3837)       "// not an isolated singularity";
../singular_texi/types.tex(,3838)     @}
../singular_texi/types.tex(,3839)     return(m_nr);         // the value of m_nr is returned
../singular_texi/types.tex(,3840)   @}
../singular_texi/types.tex(,3841)   ring r1=0,(x,y,z),ds;
../singular_texi/types.tex(,3842)   poly p=x^2+y^2+z^5;
../singular_texi/types.tex(,3843)   milnor_number(p);
../singular_texi/types.tex(,3844) @expansion{} 4
../singular_texi/types.tex(,3845) @c end example proc_declaration types.doc:3237
../singular_texi/types.tex(,3846) @end smallexample
../singular_texi/types.tex(,3847) @end table
../singular_texi/types.tex(,3848) @c inserted refs from types.doc:3254
../singular_texi/types.tex(,3858) See
../singular_texi/types.tex(,3859) @ref{LIB};
../singular_texi/types.tex(,3860) @ref{Libraries};
../singular_texi/types.tex(,3861) @ref{Procedures}.
../singular_texi/types.tex(,3863) @c end inserted refs from types.doc:3254
../singular_texi/types.tex(,3864) 
../singular_texi/types.tex(,3865) 
../singular_texi/types.tex(,3866) 
../singular_texi/types.tex(,3867) @c ---------------------------------------
../singular_texi/types.tex(,3868) @node qring, resolution, proc, Data types
../singular_texi/types.tex(,3869) @section qring
../singular_texi/types.tex(,3870) @cindex qring
../singular_texi/types.tex(,3871) 
../singular_texi/types.tex(,3872) @sc{Singular} offers the opportunity to calculate in quotient rings
../singular_texi/types.tex(,3873) (factor rings), i.e., rings modulo an ideal.  The ideal has to be given
../singular_texi/types.tex(,3874) as a standard basis.  For a detailed description of the concept
../singular_texi/types.tex(,3875) of rings and quotient rings see @ref{Rings and orderings}.
../singular_texi/types.tex(,3876) 
../singular_texi/types.tex(,3877) @menu
../singular_texi/types.tex(,3878) * qring declaration::
../singular_texi/types.tex(,3879) @end menu
../singular_texi/types.tex(,3880) 
../singular_texi/types.tex(,3881) @c ---------------------------------------
../singular_texi/types.tex(,3882) @node qring declaration,  , qring, qring
../singular_texi/types.tex(,3883) @subsection qring declaration
../singular_texi/types.tex(,3884) @cindex qring declaration
../singular_texi/types.tex(,3885) 
../singular_texi/types.tex(,3886) @c ------------------------------------------------------------
../singular_texi/types.tex(,3887) @c   This piece of text exists also in the file general.doc,
../singular_texi/types.tex(,3888) @c   chapter "General syntax of a ring declaration".
../singular_texi/types.tex(,3889) @c   If you change something here, change it there, too!
../singular_texi/types.tex(,3890) @c ------------------------------------------------------------
../singular_texi/types.tex(,3891) @table @strong
../singular_texi/types.tex(,3892) @item Syntax:
../singular_texi/types.tex(,3893) @code{qring} name @code{=} ideal_expression @code{;}
../singular_texi/types.tex(,3894) @item Default:
../singular_texi/types.tex(,3895) none
../singular_texi/types.tex(,3896) @item Purpose:
../singular_texi/types.tex(,3897) declares a quotient ring as the basering modulo ideal_expression.  Sets
../singular_texi/types.tex(,3898) it as current basering.
../singular_texi/types.tex(,3899) @item Example:
../singular_texi/types.tex(,3900) @smallexample
../singular_texi/types.tex(,3901) @c reused example qring_declaration types.doc:3297 
../singular_texi/types.tex(,3902) ring r=0,(x,y,z),dp;
../singular_texi/types.tex(,3903) ideal i=xy;
../singular_texi/types.tex(,3904) qring q=std(i);
../singular_texi/types.tex(,3905) basering;
../singular_texi/types.tex(,3906) @expansion{} //   characteristic : 0
../singular_texi/types.tex(,3907) @expansion{} //   number of vars : 3
../singular_texi/types.tex(,3908) @expansion{} //        block   1 : ordering dp
../singular_texi/types.tex(,3909) @expansion{} //                  : names    x y z 
../singular_texi/types.tex(,3910) @expansion{} //        block   2 : ordering C
../singular_texi/types.tex(,3911) @expansion{} // quotient ring from ideal
../singular_texi/types.tex(,3912) @expansion{} _[1]=xy
../singular_texi/types.tex(,3913) @c end example qring_declaration types.doc:3297
../singular_texi/types.tex(,3914) @end smallexample
../singular_texi/types.tex(,3915) @end table
../singular_texi/types.tex(,3916) 
../singular_texi/types.tex(,3917) @c ---------------------------------------
../singular_texi/types.tex(,3918) @node resolution, ring, qring, Data types
../singular_texi/types.tex(,3919) @section resolution
../singular_texi/types.tex(,3920) @cindex resolution
../singular_texi/types.tex(,3921) 
../singular_texi/types.tex(,3922) The resolution type is intended as an intermediate representation which
../singular_texi/types.tex(,3923) internally retains additional information obtained during computation of
../singular_texi/types.tex(,3924) resolutions. It furthermore enables the use of partial results to
../singular_texi/types.tex(,3925) compute, for example, Betti numbers or minimal resolutions. Like ideals
../singular_texi/types.tex(,3926) and modules, a resolution can only be defined w.r.t.@: a basering.
../singular_texi/types.tex(,3927) 
../singular_texi/types.tex(,3928) @strong{Note:}
../singular_texi/types.tex(,3929) to access the elements of a resolution, it has to be assigned to a list,
../singular_texi/types.tex(,3930) which also completes computations and may therefore take time,
../singular_texi/types.tex(,3931) (resp.@: an access directly with the brackets @code{[ , ]} causes
../singular_texi/types.tex(,3932) implicitly a cast to a list).
../singular_texi/types.tex(,3933) 
../singular_texi/types.tex(,3934) @menu
../singular_texi/types.tex(,3935) * resolution declarations::
../singular_texi/types.tex(,3936) * resolution expressions::
../singular_texi/types.tex(,3937) * resolution related functions::
../singular_texi/types.tex(,3938) @end menu
../singular_texi/types.tex(,3939) 
../singular_texi/types.tex(,3940) @c ---------------------------------------
../singular_texi/types.tex(,3941) @node resolution declarations, resolution expressions, resolution, resolution
../singular_texi/types.tex(,3942) @subsection resolution declarations
../singular_texi/types.tex(,3943) @cindex resolution declarations
../singular_texi/types.tex(,3944) 
../singular_texi/types.tex(,3945) @table @strong
../singular_texi/types.tex(,3946) @item Syntax:
../singular_texi/types.tex(,3947) @code{resolution} name @code{=} resolution_expression @code{;}
../singular_texi/types.tex(,3948) 
../singular_texi/types.tex(,3949) @item Purpose:
../singular_texi/types.tex(,3950) defines a resolution.
../singular_texi/types.tex(,3951) 
../singular_texi/types.tex(,3952) @item Default:
../singular_texi/types.tex(,3953) none
../singular_texi/types.tex(,3954) 
../singular_texi/types.tex(,3955) @item Example:
../singular_texi/types.tex(,3956) @smallexample
../singular_texi/types.tex(,3957) @c reused example resolution_declarations types.doc:3346 
../singular_texi/types.tex(,3958)   ring R;
../singular_texi/types.tex(,3959)   ideal i=z2,x;
../singular_texi/types.tex(,3960)   resolution re=res(i,0);
../singular_texi/types.tex(,3961)   re;
../singular_texi/types.tex(,3962) @expansion{}  1      2      1      
../singular_texi/types.tex(,3963) @expansion{} R <--  R <--  R
../singular_texi/types.tex(,3964) @expansion{} 
../singular_texi/types.tex(,3965) @expansion{} 0      1      2      
../singular_texi/types.tex(,3966) @expansion{} resolution not minimized yet
../singular_texi/types.tex(,3967) @expansion{} 
../singular_texi/types.tex(,3968)   betti(re);
../singular_texi/types.tex(,3969) @expansion{} 1,1,0,
../singular_texi/types.tex(,3970) @expansion{} 0,1,1 
../singular_texi/types.tex(,3971)   list l = re;
../singular_texi/types.tex(,3972)   l;
../singular_texi/types.tex(,3973) @expansion{} [1]:
../singular_texi/types.tex(,3974) @expansion{}    _[1]=x
../singular_texi/types.tex(,3975) @expansion{}    _[2]=z2
../singular_texi/types.tex(,3976) @expansion{} [2]:
../singular_texi/types.tex(,3977) @expansion{}    _[1]=-z2*gen(1)+x*gen(2)
../singular_texi/types.tex(,3978) @expansion{} [3]:
../singular_texi/types.tex(,3979) @expansion{}    _[1]=0
../singular_texi/types.tex(,3980) @c end example resolution_declarations types.doc:3346
../singular_texi/types.tex(,3981) @end smallexample
../singular_texi/types.tex(,3982) @end table
../singular_texi/types.tex(,3983) 
../singular_texi/types.tex(,3984) @c ------------------------------
../singular_texi/types.tex(,3985) @node resolution expressions, resolution related functions, resolution declarations, resolution
../singular_texi/types.tex(,3986) @subsection resolution expressions
../singular_texi/types.tex(,3987) @cindex resolution expressions
../singular_texi/types.tex(,3988) 
../singular_texi/types.tex(,3989) A resolution expression is:
../singular_texi/types.tex(,3990) @enumerate
../singular_texi/types.tex(,3991) @item
../singular_texi/types.tex(,3992) an identifier of type resolution
../singular_texi/types.tex(,3993) @item
../singular_texi/types.tex(,3994) a function returning a resolution
../singular_texi/types.tex(,3995) @item
../singular_texi/types.tex(,3996) a type cast to resolution from a list of ideals, resp.@: modules..
../singular_texi/types.tex(,3997) @end enumerate
../singular_texi/types.tex(,3998) 
../singular_texi/types.tex(,3999) @c inserted refs from types.doc:3373
../singular_texi/types.tex(,4007) See 
../singular_texi/types.tex(,4008) @ref{Type conversion and casting}.
../singular_texi/types.tex(,4010) @c end inserted refs from types.doc:3373
../singular_texi/types.tex(,4011) 
../singular_texi/types.tex(,4012) @c ------------------------------
../singular_texi/types.tex(,4013) @node resolution related functions,  , resolution expressions, resolution
../singular_texi/types.tex(,4014) @subsection resolution related functions
../singular_texi/types.tex(,4015) @cindex resolution related functions
../singular_texi/types.tex(,4016) 
../singular_texi/types.tex(,4017) @table @code
../singular_texi/types.tex(,4018) @item betti
../singular_texi/types.tex(,4019) Betti numbers of a resolution (see @ref{betti})
../singular_texi/types.tex(,4020) @item lres
../singular_texi/types.tex(,4021) free resolution (see @ref{lres})
../singular_texi/types.tex(,4022) @item minres
../singular_texi/types.tex(,4023) minimize a free resolution (see @ref{minres})
../singular_texi/types.tex(,4024) @item mres
../singular_texi/types.tex(,4025) minimal free resolution of an ideal, resp.@: module w.r.t. a minimal set of generators of
../singular_texi/types.tex(,4026) the given ideal, resp.@: module (see @ref{mres})
../singular_texi/types.tex(,4027) @item res
../singular_texi/types.tex(,4028) free resolution of an ideal, resp.@: module, but not changing the
../singular_texi/types.tex(,4029) given ideal, resp.@: module (see @ref{res})
../singular_texi/types.tex(,4030) @item sres
../singular_texi/types.tex(,4031) free resolution of a standard basis (see @ref{sres})
../singular_texi/types.tex(,4032) @end table
../singular_texi/types.tex(,4033) 
../singular_texi/types.tex(,4034) @c @*@strong{Example:}
../singular_texi/types.tex(,4035) @c @example
../singular_texi/types.tex(,4036) @c @end example
../singular_texi/types.tex(,4037) 
../singular_texi/types.tex(,4038) @c ---------------------------------------
../singular_texi/types.tex(,4039) @node ring, string, resolution, Data types
../singular_texi/types.tex(,4040) @section ring
../singular_texi/types.tex(,4041) @cindex ring
../singular_texi/types.tex(,4042) 
../singular_texi/types.tex(,4043) Rings are used to describe properties of polynomials, ideals etc.
../singular_texi/types.tex(,4044) Almost all computations in @sc{Singular} require a basering.
../singular_texi/types.tex(,4045) For a detailed description of the concept of rings see
../singular_texi/types.tex(,4046) @ref{Rings and orderings}.
../singular_texi/types.tex(,4047) 
../singular_texi/types.tex(,4048) @menu
../singular_texi/types.tex(,4049) * ring declarations::
../singular_texi/types.tex(,4050) * ring related functions::
../singular_texi/types.tex(,4051) * ring operations::
../singular_texi/types.tex(,4052) @end menu
../singular_texi/types.tex(,4053) 
../singular_texi/types.tex(,4054) @c ---------------------------------------
../singular_texi/types.tex(,4055) @node ring declarations, ring related functions, ring, ring
../singular_texi/types.tex(,4056) @subsection ring declarations
../singular_texi/types.tex(,4057) @cindex ring declarations
../singular_texi/types.tex(,4058) 
../singular_texi/types.tex(,4059) @table @strong
../singular_texi/types.tex(,4060) @item Syntax:
../singular_texi/types.tex(,4061) @code{ring} name @code{= (} coefficient_field @code{),}
../singular_texi/types.tex(,4062)   @code{(} names_of_ring_variables @code{),}
../singular_texi/types.tex(,4063)   @code{(} ordering @code{);}
../singular_texi/types.tex(,4064) @item Default:
../singular_texi/types.tex(,4065) @code{32003,(x,y,z),(dp,C);}
../singular_texi/types.tex(,4066) @item Purpose:
../singular_texi/types.tex(,4067) declares a ring and sets it as the actual basering.
../singular_texi/types.tex(,4068) @end table
../singular_texi/types.tex(,4069) 
../singular_texi/types.tex(,4070) The coefficient_field is given by one of the following:
../singular_texi/types.tex(,4071) @enumerate
../singular_texi/types.tex(,4072) @item
../singular_texi/types.tex(,4073) a non-negative int_expression less or equal 2147483629.
../singular_texi/types.tex(,4074) @item
../singular_texi/types.tex(,4075) an expression_list of an int_expression and one or more names.
../singular_texi/types.tex(,4076) @item
../singular_texi/types.tex(,4077) the name @code{real}
../singular_texi/types.tex(,4078) @item
../singular_texi/types.tex(,4079) an expression_list of the name @code{real} and an  int_expression.
../singular_texi/types.tex(,4080) @item
../singular_texi/types.tex(,4081) an expression_list of the name @code{complex}, an optional int_expression
../singular_texi/types.tex(,4082) and a name.
../singular_texi/types.tex(,4083) @end enumerate
../singular_texi/types.tex(,4084) 
../singular_texi/types.tex(,4085) For the definition of the 'coefficient_field', see @ref{Rings and orderings}.
../singular_texi/types.tex(,4086) 
../singular_texi/types.tex(,4087) 'names_of_ring_variables' must be a list of names or indexed names.
../singular_texi/types.tex(,4088) 
../singular_texi/types.tex(,4089) 'ordering' is a list of block orderings where each block ordering is either
../singular_texi/types.tex(,4090) @enumerate
../singular_texi/types.tex(,4091) @item
../singular_texi/types.tex(,4092) @code{lp}, @code{dp}, @code{Dp}, @code{ls}, @code{ds}, or @code{Ds}
../singular_texi/types.tex(,4093) optionally followed by a size parameter in parentheses.
../singular_texi/types.tex(,4094) 
../singular_texi/types.tex(,4095) @item
../singular_texi/types.tex(,4096) @code{wp}, @code{Wp}, @code{ws}, @code{Ws}, or @code{a} followed by a
../singular_texi/types.tex(,4097) weight vector given as an intvec_expression in parentheses.
../singular_texi/types.tex(,4098) 
../singular_texi/types.tex(,4099) @item
../singular_texi/types.tex(,4100) @code{M} followed by an intmat_expression in parentheses.
../singular_texi/types.tex(,4101) 
../singular_texi/types.tex(,4102) @item
../singular_texi/types.tex(,4103) @code{c} or @code{C}.
../singular_texi/types.tex(,4104) @end enumerate
../singular_texi/types.tex(,4105) 
../singular_texi/types.tex(,4106) For the definition of the orderings, see @ref{Term orderings},
../singular_texi/types.tex(,4107) @ref{Monomial orderings}.
../singular_texi/types.tex(,4108) 
../singular_texi/types.tex(,4109) If one of coefficient_field, names_of_ring_variables, and ordering
../singular_texi/types.tex(,4110) consists of only one entry, the parentheses around this entry may be
../singular_texi/types.tex(,4111) omitted.
../singular_texi/types.tex(,4112) 
../singular_texi/types.tex(,4113) @c ---------------------------------------
../singular_texi/types.tex(,4114) @node ring related functions, ring operations, ring declarations, ring
../singular_texi/types.tex(,4115) @subsection ring related functions
../singular_texi/types.tex(,4116) @cindex ring related functions
../singular_texi/types.tex(,4117) 
../singular_texi/types.tex(,4118) @table @code
../singular_texi/types.tex(,4119) @item charstr
../singular_texi/types.tex(,4120) description of the coefficient field of a ring (see @ref{charstr})
../singular_texi/types.tex(,4121) @item keepring
../singular_texi/types.tex(,4122) move ring to next upper level (see @ref{keepring})
../singular_texi/types.tex(,4123) @item npars
../singular_texi/types.tex(,4124) number of ring parameters (see @ref{npars})
../singular_texi/types.tex(,4125) @item nvars
../singular_texi/types.tex(,4126) number of ring variables (see @ref{nvars})
../singular_texi/types.tex(,4127) @item ordstr
../singular_texi/types.tex(,4128) monomial ordering of a ring (see @ref{ordstr})
../singular_texi/types.tex(,4129) @item parstr
../singular_texi/types.tex(,4130) names of all ring parameters or the
../singular_texi/types.tex(,4131) name of the n-th ring parameter (see @ref{parstr})
../singular_texi/types.tex(,4132) @item qring
../singular_texi/types.tex(,4133) quotient ring (see @ref{qring})
../singular_texi/types.tex(,4134) @item setring
../singular_texi/types.tex(,4135) set a new basering (see @ref{setring})
../singular_texi/types.tex(,4136) @item varstr
../singular_texi/types.tex(,4137) names of all ring variables or the
../singular_texi/types.tex(,4138) name of the n-th ring variable (see @ref{varstr})
../singular_texi/types.tex(,4139) @end table
../singular_texi/types.tex(,4140) 
../singular_texi/types.tex(,4141) @c ---------------------------------------
../singular_texi/types.tex(,4142) @node ring operations, , ring related functions, ring
../singular_texi/types.tex(,4143) @subsection ring operations
../singular_texi/types.tex(,4144) @cindex ring operations
../singular_texi/types.tex(,4145) @table @asis
../singular_texi/types.tex(,4146) @item @code{+}
../singular_texi/types.tex(,4147) construct a new ring 
../singular_texi/types.tex(,4151) @tex
../singular_texi/types.tex(,4152) $k[X,Y]$
../singular_texi/types.tex(,4153) @end tex
../singular_texi/types.tex(,4154)  from 
../singular_texi/types.tex(,4158) @tex
../singular_texi/types.tex(,4159) $k_1[X]$
../singular_texi/types.tex(,4160) @end tex
../singular_texi/types.tex(,4161)   and 
../singular_texi/types.tex(,4165) @tex
../singular_texi/types.tex(,4166) $k_2[Y]$
../singular_texi/types.tex(,4167) @end tex
../singular_texi/types.tex(,4168) .
../singular_texi/types.tex(,4169) @end table
../singular_texi/types.tex(,4170) 
../singular_texi/types.tex(,4171) Concerning the ground fields 
../singular_texi/types.tex(,4175) @tex
../singular_texi/types.tex(,4176) $k_1$
../singular_texi/types.tex(,4177) @end tex
../singular_texi/types.tex(,4178)  and 
../singular_texi/types.tex(,4182) @tex
../singular_texi/types.tex(,4183) $k_2$
../singular_texi/types.tex(,4184) @end tex
../singular_texi/types.tex(,4185)  take the
../singular_texi/types.tex(,4186) following guide lines into consideration:
../singular_texi/types.tex(,4187) @itemize @bullet
../singular_texi/types.tex(,4188) @item Neither 
../singular_texi/types.tex(,4192) @tex
../singular_texi/types.tex(,4193) $k_1$
../singular_texi/types.tex(,4194) @end tex
../singular_texi/types.tex(,4195)  nor 
../singular_texi/types.tex(,4199) @tex
../singular_texi/types.tex(,4200) $k_2$
../singular_texi/types.tex(,4201) @end tex
../singular_texi/types.tex(,4202)  may be 
../singular_texi/types.tex(,4206) @tex
../singular_texi/types.tex(,4207) $R$
../singular_texi/types.tex(,4208) @end tex
../singular_texi/types.tex(,4209)  or 
../singular_texi/types.tex(,4213) @tex
../singular_texi/types.tex(,4214) $C$
../singular_texi/types.tex(,4215) @end tex
../singular_texi/types.tex(,4216) .
../singular_texi/types.tex(,4217) @item If the characteristic of 
../singular_texi/types.tex(,4221) @tex
../singular_texi/types.tex(,4222) $k_1$
../singular_texi/types.tex(,4223) @end tex
../singular_texi/types.tex(,4224)  and 
../singular_texi/types.tex(,4228) @tex
../singular_texi/types.tex(,4229) $k_2$
../singular_texi/types.tex(,4230) @end tex
../singular_texi/types.tex(,4231)  differs, then one of them must be 
../singular_texi/types.tex(,4235) @tex
../singular_texi/types.tex(,4236) $Q$
../singular_texi/types.tex(,4237) @end tex
../singular_texi/types.tex(,4238) .
../singular_texi/types.tex(,4239) @item At most one of 
../singular_texi/types.tex(,4243) @tex
../singular_texi/types.tex(,4244) $k_1$
../singular_texi/types.tex(,4245) @end tex
../singular_texi/types.tex(,4246)  and 
../singular_texi/types.tex(,4250) @tex
../singular_texi/types.tex(,4251) $k_2$
../singular_texi/types.tex(,4252) @end tex
../singular_texi/types.tex(,4253)  may be have parameters.
../singular_texi/types.tex(,4254) @item If one of 
../singular_texi/types.tex(,4258) @tex
../singular_texi/types.tex(,4259) $k_1$
../singular_texi/types.tex(,4260) @end tex
../singular_texi/types.tex(,4261)  and 
../singular_texi/types.tex(,4265) @tex
../singular_texi/types.tex(,4266) $k_2$
../singular_texi/types.tex(,4267) @end tex
../singular_texi/types.tex(,4268)  is an algebraic extension of 
../singular_texi/types.tex(,4272) @tex
../singular_texi/types.tex(,4273) $Z/p$
../singular_texi/types.tex(,4274) @end tex
../singular_texi/types.tex(,4275)  it may not be defined by a @code{charstr} of type @code{(p^n,a)}.
../singular_texi/types.tex(,4276) @end itemize
../singular_texi/types.tex(,4277) 
../singular_texi/types.tex(,4278) 
../singular_texi/types.tex(,4279) @strong{Example:}
../singular_texi/types.tex(,4280) @smallexample
../singular_texi/types.tex(,4281) @c reused example ring_operations types.doc:3527 
../singular_texi/types.tex(,4282)   ring R1=0,(x,y),dp;
../singular_texi/types.tex(,4283)   ring R2=32003,(a,b),dp;
../singular_texi/types.tex(,4284)   def R=R1+R2;
../singular_texi/types.tex(,4285)   R;
../singular_texi/types.tex(,4286) @expansion{} //   characteristic : 32003
../singular_texi/types.tex(,4287) @expansion{} //   number of vars : 4
../singular_texi/types.tex(,4288) @expansion{} //        block   1 : ordering dp
../singular_texi/types.tex(,4289) @expansion{} //                  : names    x y 
../singular_texi/types.tex(,4290) @expansion{} //        block   2 : ordering dp
../singular_texi/types.tex(,4291) @expansion{} //                  : names    a b 
../singular_texi/types.tex(,4292) @expansion{} //        block   3 : ordering C
../singular_texi/types.tex(,4293) @c end example ring_operations types.doc:3527
../singular_texi/types.tex(,4294) @end smallexample
../singular_texi/types.tex(,4295) 
../singular_texi/types.tex(,4296) @c inserted refs from types.doc:3535
../singular_texi/types.tex(,4304) @strong{See also:}
../singular_texi/types.tex(,4305) @ref{ring_lib}.
../singular_texi/types.tex(,4307) @c end inserted refs from types.doc:3535
../singular_texi/types.tex(,4308) 
../singular_texi/types.tex(,4309) @c ---------------------------------------
../singular_texi/types.tex(,4310) @node string, vector, ring, Data types
../singular_texi/types.tex(,4311) @section string
../singular_texi/types.tex(,4312) @cindex string
../singular_texi/types.tex(,4313) @cindex newline
../singular_texi/types.tex(,4314) 
../singular_texi/types.tex(,4315) Variables of type @code{string} are used for output (almost every type
../singular_texi/types.tex(,4316) can be "converted" to @code{string}) and for creating new
../singular_texi/types.tex(,4317) commands at runtime see @ref{execute}.  They are also return values of
../singular_texi/types.tex(,4318) certain interpreter related functions (see @ref{Functions}).  String
../singular_texi/types.tex(,4319) constants consist of a sequence of ANY characters (including newline!)
../singular_texi/types.tex(,4320) between a starting @code{"} and a closing @code{"}.  There is also a
../singular_texi/types.tex(,4321) string constant @code{newline}, which is the newline character.  The
../singular_texi/types.tex(,4322) @code{+} sign "adds" strings, @code{""} is the empty string (hence
../singular_texi/types.tex(,4323) strings form a semigroup). Strings may be used to comment the output of
../singular_texi/types.tex(,4324) a computation or to give it a nice format. Strings may also be used for
../singular_texi/types.tex(,4325) intermediate conversion of one type into another.
../singular_texi/types.tex(,4326) 
../singular_texi/types.tex(,4327) @smallexample
../singular_texi/types.tex(,4328) @c reused example string types.doc:3558 
../singular_texi/types.tex(,4329)   string s="Hi";
../singular_texi/types.tex(,4330)   string s1="a string with new line at the end"+newline;
../singular_texi/types.tex(,4331)   string s2="another string with new line at the end
../singular_texi/types.tex(,4332)   ";
../singular_texi/types.tex(,4333)   s;s1;s2;
../singular_texi/types.tex(,4334) @expansion{} Hi
../singular_texi/types.tex(,4335) @expansion{} a string with new line at the end
../singular_texi/types.tex(,4336) @expansion{} 
../singular_texi/types.tex(,4337) @expansion{} another string with new line at the end
../singular_texi/types.tex(,4338) @expansion{}   
../singular_texi/types.tex(,4339)   ring r; ideal i=std(ideal(x,y^3));
../singular_texi/types.tex(,4340)   "dimension of i =",dim(i),", multiplicity of i =",mult(i);
../singular_texi/types.tex(,4341) @expansion{} dimension of i = 1 , multiplicity of i = 3
../singular_texi/types.tex(,4342)   "dimension of i = "+string(dim(i))+", multiplicity of i = "+string(mult(i));
../singular_texi/types.tex(,4343) @expansion{} dimension of i = 1, multiplicity of i = 3
../singular_texi/types.tex(,4344)   "a"+"b","c";
../singular_texi/types.tex(,4345) @expansion{} ab c
../singular_texi/types.tex(,4346) @c end example string types.doc:3558
../singular_texi/types.tex(,4347) @end smallexample
../singular_texi/types.tex(,4348) A comma between two strings makes an expression list out of them
../singular_texi/types.tex(,4349) (such a list is printed with a separating blank in between),
../singular_texi/types.tex(,4350) while a @code{+} concatenates strings.
../singular_texi/types.tex(,4351) 
../singular_texi/types.tex(,4352) @menu
../singular_texi/types.tex(,4353) * string declarations::
../singular_texi/types.tex(,4354) * string expressions::
../singular_texi/types.tex(,4355) * string type cast::
../singular_texi/types.tex(,4356) * string operations::
../singular_texi/types.tex(,4357) * string related functions::
../singular_texi/types.tex(,4358) @end menu
../singular_texi/types.tex(,4359) 
../singular_texi/types.tex(,4360) @c ------------------------------
../singular_texi/types.tex(,4361) @node string declarations, string expressions, string, string
../singular_texi/types.tex(,4362) @subsection string declarations
../singular_texi/types.tex(,4363) @cindex string declarations
../singular_texi/types.tex(,4364) 
../singular_texi/types.tex(,4365) @table @strong
../singular_texi/types.tex(,4366) @item Syntax:
../singular_texi/types.tex(,4367) @code{string} name @code{=} string_expression @code{;}
../singular_texi/types.tex(,4368) @*@code{string} name @code{=} list_of_string_expressions @code{;}
../singular_texi/types.tex(,4369) 
../singular_texi/types.tex(,4370) @item Purpose:
../singular_texi/types.tex(,4371) defines a string variable.
../singular_texi/types.tex(,4372) 
../singular_texi/types.tex(,4373) @item Default:
../singular_texi/types.tex(,4374) "" (the empty string)
../singular_texi/types.tex(,4375) 
../singular_texi/types.tex(,4376) @item Example:
../singular_texi/types.tex(,4377) @smallexample
../singular_texi/types.tex(,4378) @c reused example string_declarations types.doc:3600 
../singular_texi/types.tex(,4379)   string s1="Now I know";
../singular_texi/types.tex(,4380)   string s2="how to encode a \" in a string...";
../singular_texi/types.tex(,4381)   string s=s1+" "+s2; // concatenation of 3 strings
../singular_texi/types.tex(,4382)   s;
../singular_texi/types.tex(,4383) @expansion{} Now I know how to encode a " in a string...
../singular_texi/types.tex(,4384)   s1,s2;   // 2 strings, separated by a blank in the output:
../singular_texi/types.tex(,4385) @expansion{} Now I know how to encode a " in a string...
../singular_texi/types.tex(,4386) @c end example string_declarations types.doc:3600
../singular_texi/types.tex(,4387) @end smallexample
../singular_texi/types.tex(,4388) @end table
../singular_texi/types.tex(,4389) 
../singular_texi/types.tex(,4390) @c ------------------------------
../singular_texi/types.tex(,4391) @node string expressions, string type cast, string declarations, string
../singular_texi/types.tex(,4392) @subsection string expressions
../singular_texi/types.tex(,4393) @cindex string expressions
../singular_texi/types.tex(,4394) 
../singular_texi/types.tex(,4395) A string expression is:
../singular_texi/types.tex(,4396) @enumerate
../singular_texi/types.tex(,4397) @item
../singular_texi/types.tex(,4398) a sequence of characters between two unescaped quotes (@code{"})
../singular_texi/types.tex(,4399) @item
../singular_texi/types.tex(,4400) an identifier of type string
../singular_texi/types.tex(,4401) @item
../singular_texi/types.tex(,4402) a function returning string
../singular_texi/types.tex(,4403) @item
../singular_texi/types.tex(,4404) a substring (using the bracket operator)
../singular_texi/types.tex(,4405) @item
../singular_texi/types.tex(,4406) a type cast to string (@pxref{string type cast})
../singular_texi/types.tex(,4407) @item
../singular_texi/types.tex(,4408) string expressions combined by the operation @code{+}.
../singular_texi/types.tex(,4409) @end enumerate
../singular_texi/types.tex(,4410) 
../singular_texi/types.tex(,4411) @*@strong{Example:}
../singular_texi/types.tex(,4412) @smallexample
../singular_texi/types.tex(,4413) @c  // a string constant
../singular_texi/types.tex(,4414) @c  "@dots{}";
../singular_texi/types.tex(,4415) @c  // a type cast from name
../singular_texi/types.tex(,4416) @c  string(name)
../singular_texi/types.tex(,4417) @c  // concatenation
../singular_texi/types.tex(,4418) @c  string_expression + string_expression
../singular_texi/types.tex(,4419) @c reused example string_expressions types.doc:3639 
../singular_texi/types.tex(,4420) // string_expression[start, length] : a substring
../singular_texi/types.tex(,4421) // (possibly filled up with blanks)
../singular_texi/types.tex(,4422) // the substring of s starting at position 2
../singular_texi/types.tex(,4423) // with a length of 4
../singular_texi/types.tex(,4424) string s="123456";
../singular_texi/types.tex(,4425) s[2,4];
../singular_texi/types.tex(,4426) @expansion{} 2345
../singular_texi/types.tex(,4427) "abcd"[2,2];
../singular_texi/types.tex(,4428) @expansion{} bc
../singular_texi/types.tex(,4429) // string_expression[position] : a character from a string
../singular_texi/types.tex(,4430) s[3];
../singular_texi/types.tex(,4431) @expansion{} 3
../singular_texi/types.tex(,4432) // string_expression[position..position] :
../singular_texi/types.tex(,4433) // a substring starting at the first position up to the second
../singular_texi/types.tex(,4434) // given position
../singular_texi/types.tex(,4435) s[2..4];
../singular_texi/types.tex(,4436) @expansion{} 2 3 4
../singular_texi/types.tex(,4437) // a function returning a string
../singular_texi/types.tex(,4438) typeof(s);
../singular_texi/types.tex(,4439) @expansion{} string
../singular_texi/types.tex(,4440) @c end example string_expressions types.doc:3639
../singular_texi/types.tex(,4441) @end smallexample
../singular_texi/types.tex(,4442) 
../singular_texi/types.tex(,4443) @c inserted refs from types.doc:3658
../singular_texi/types.tex(,4452) See 
../singular_texi/types.tex(,4453) @ref{Type conversion and casting};
../singular_texi/types.tex(,4454) @ref{string type cast}.
../singular_texi/types.tex(,4456) @c end inserted refs from types.doc:3658
../singular_texi/types.tex(,4457) 
../singular_texi/types.tex(,4458) @c ------------------------------
../singular_texi/types.tex(,4459) @node string type cast,  string operations, string expressions, string
../singular_texi/types.tex(,4460) @subsection string type cast
../singular_texi/types.tex(,4461) @cindex string type cast
../singular_texi/types.tex(,4462) @table @code
../singular_texi/types.tex(,4463) @item @strong{Syntax:}
../singular_texi/types.tex(,4464) @code{string (} expression [, expression_2, ... expression_n]@code{)}
../singular_texi/types.tex(,4465) @item @strong{Type:}
../singular_texi/types.tex(,4466) string
../singular_texi/types.tex(,4467) @item @strong{Purpose:}
../singular_texi/types.tex(,4468) Converts each expression to a string, where expression can be of any
../singular_texi/types.tex(,4469) type. The concatenated string of all concersions is returned.
../singular_texi/types.tex(,4470) 
../singular_texi/types.tex(,4471) @*The elements of intvec, intmat, ideal, module, matrix, and list, are
../singular_texi/types.tex(,4472) separated by a comma. No newlines are inserted.
../singular_texi/types.tex(,4473) @*Not defined elements of a list are omitted.
../singular_texi/types.tex(,4474) @*For link, the name of the link is used.
../singular_texi/types.tex(,4475) @*For map, the ideal defining the mapping is converted.
../singular_texi/types.tex(,4476) 
../singular_texi/types.tex(,4477) @item @strong{Note:}
../singular_texi/types.tex(,4478) When applied to a list, elements of type intvec, intmat, ideal, module,
../singular_texi/types.tex(,4479) matrix, and list become indistinguishable.
../singular_texi/types.tex(,4480) 
../singular_texi/types.tex(,4481) @item @strong{Example:}
../singular_texi/types.tex(,4482) @smallexample
../singular_texi/types.tex(,4483) @c reused example string_type_cast types.doc:3688 
../singular_texi/types.tex(,4484)   string("1+1=", 2);
../singular_texi/types.tex(,4485) @expansion{} 1+1=2
../singular_texi/types.tex(,4486)   string(intvec(1,2,3,4));
../singular_texi/types.tex(,4487) @expansion{} 1,2,3,4
../singular_texi/types.tex(,4488)   string(intmat(intvec(1,2,3,4), 2, 2));
../singular_texi/types.tex(,4489) @expansion{} 1,2,3,4 
../singular_texi/types.tex(,4490)   ring r;
../singular_texi/types.tex(,4491)   string(r);
../singular_texi/types.tex(,4492) @expansion{} (32003),(x,y,z),(dp(3),C)
../singular_texi/types.tex(,4493)   string(ideal(x,y));
../singular_texi/types.tex(,4494) @expansion{} x,y
../singular_texi/types.tex(,4495)   qring R = std(ideal(x,y));
../singular_texi/types.tex(,4496)   string(R);
../singular_texi/types.tex(,4497) @expansion{} (32003),(x,y,z),(dp(3),C)
../singular_texi/types.tex(,4498)   map phi = r, ideal(x,z);
../singular_texi/types.tex(,4499)   string(phi);
../singular_texi/types.tex(,4500) @expansion{} x,z
../singular_texi/types.tex(,4501)   list l;
../singular_texi/types.tex(,4502)   string(l);
../singular_texi/types.tex(,4503) @expansion{} 
../singular_texi/types.tex(,4504)   l[3] = 1;
../singular_texi/types.tex(,4505)   string(l); // notice that l[1],l[2] are omitted
../singular_texi/types.tex(,4506) @expansion{} 1
../singular_texi/types.tex(,4507)   l[2] = l;
../singular_texi/types.tex(,4508)   l;
../singular_texi/types.tex(,4509) @expansion{} [2]:
../singular_texi/types.tex(,4510) @expansion{}    [3]:
../singular_texi/types.tex(,4511) @expansion{}       1
../singular_texi/types.tex(,4512) @expansion{} [3]:
../singular_texi/types.tex(,4513) @expansion{}    1
../singular_texi/types.tex(,4514)   string(l); // notice that lists of list is flattened
../singular_texi/types.tex(,4515) @expansion{} 1,1
../singular_texi/types.tex(,4516)   l[1] = intvec(1,2,3);
../singular_texi/types.tex(,4517)   l;
../singular_texi/types.tex(,4518) @expansion{} [1]:
../singular_texi/types.tex(,4519) @expansion{}    1,2,3
../singular_texi/types.tex(,4520) @expansion{} [2]:
../singular_texi/types.tex(,4521) @expansion{}    [3]:
../singular_texi/types.tex(,4522) @expansion{}       1
../singular_texi/types.tex(,4523) @expansion{} [3]:
../singular_texi/types.tex(,4524) @expansion{}    1
../singular_texi/types.tex(,4525)   string(l); // notice that intvec elements are not distinguishable
../singular_texi/types.tex(,4526) @expansion{} 1,2,3,1,1
../singular_texi/types.tex(,4527) @c end example string_type_cast types.doc:3688
../singular_texi/types.tex(,4528) @end smallexample
../singular_texi/types.tex(,4529) @end table
../singular_texi/types.tex(,4530) @c inserted refs from types.doc:3712
../singular_texi/types.tex(,4540) See
../singular_texi/types.tex(,4541) @ref{Type conversion and casting};
../singular_texi/types.tex(,4542) @ref{print};
../singular_texi/types.tex(,4543) @ref{string}.
../singular_texi/types.tex(,4545) @c end inserted refs from types.doc:3712
../singular_texi/types.tex(,4546) 
../singular_texi/types.tex(,4547) @c ------------------------------
../singular_texi/types.tex(,4548) @node string operations, string related functions, string type cast, string
../singular_texi/types.tex(,4549) @subsection string operations
../singular_texi/types.tex(,4550) @cindex string operations
../singular_texi/types.tex(,4551) 
../singular_texi/types.tex(,4552) @table @asis
../singular_texi/types.tex(,4553) @item @code{+}
../singular_texi/types.tex(,4554) concatenation
../singular_texi/types.tex(,4555) 
../singular_texi/types.tex(,4556) @item @code{<=}, @code{>=}, @code{==}, @code{<>}
../singular_texi/types.tex(,4557) comparison (lexicographical with respect to the ASCII encoding)
../singular_texi/types.tex(,4558) 
../singular_texi/types.tex(,4559) @item string_expression @code{[} int_expression @code{]}
../singular_texi/types.tex(,4560) is a character of the string; the index 1 gives the first character.
../singular_texi/types.tex(,4561) 
../singular_texi/types.tex(,4562) @item string_expression @code{[} int_expression@code{,} int_expression @code{]}
../singular_texi/types.tex(,4563) is a substring, where the first argument is the start index and the
../singular_texi/types.tex(,4564) second is the length of the substring, filled up with blanks if the
../singular_texi/types.tex(,4565) length exceeds the total size of the string
../singular_texi/types.tex(,4566) 
../singular_texi/types.tex(,4567) @item string_expression @code{[} intvec_expression @code{]}
../singular_texi/types.tex(,4568) is a expression list of characters from the string
../singular_texi/types.tex(,4569) @end table
../singular_texi/types.tex(,4570) 
../singular_texi/types.tex(,4571) @*@strong{Example:}
../singular_texi/types.tex(,4572) @smallexample
../singular_texi/types.tex(,4573) @c reused example string_operations types.doc:3745 
../singular_texi/types.tex(,4574)   string s="abcde";
../singular_texi/types.tex(,4575)   s[2];
../singular_texi/types.tex(,4576) @expansion{} b
../singular_texi/types.tex(,4577)   s[3,2];
../singular_texi/types.tex(,4578) @expansion{} cd
../singular_texi/types.tex(,4579)   ">>"+s[1,10]+"<<";
../singular_texi/types.tex(,4580) @expansion{} >>abcde     <<
../singular_texi/types.tex(,4581)   s[2]="BC"; s;
../singular_texi/types.tex(,4582) @expansion{} aBcde
../singular_texi/types.tex(,4583)   intvec v=1,3,5;
../singular_texi/types.tex(,4584)   s=s[v]; s;
../singular_texi/types.tex(,4585) @expansion{} ace
../singular_texi/types.tex(,4586)   s="123456"; s=s[3..5]; s;
../singular_texi/types.tex(,4587) @expansion{} 345
../singular_texi/types.tex(,4588) @c end example string_operations types.doc:3745
../singular_texi/types.tex(,4589) @end smallexample
../singular_texi/types.tex(,4590) 
../singular_texi/types.tex(,4591) @c ------------------------------
../singular_texi/types.tex(,4592) @node string related functions,  , string operations, string
../singular_texi/types.tex(,4593) @subsection string related functions
../singular_texi/types.tex(,4594) @cindex string related functions
../singular_texi/types.tex(,4595) 
../singular_texi/types.tex(,4596) @table @code
../singular_texi/types.tex(,4597) @item charstr
../singular_texi/types.tex(,4598) description of the coefficient field of a ring (see @ref{charstr})
../singular_texi/types.tex(,4599) @item execute
../singular_texi/types.tex(,4600) executing string as command (see @ref{execute})
../singular_texi/types.tex(,4601) @item find
../singular_texi/types.tex(,4602) position of a substring in a string (see @ref{find})
../singular_texi/types.tex(,4603) @item names
../singular_texi/types.tex(,4604) list of strings of all user-defined variable names (see @ref{names})
../singular_texi/types.tex(,4605) @item nameof
../singular_texi/types.tex(,4606) name of an object (see @ref{nameof})
../singular_texi/types.tex(,4607) @item option
../singular_texi/types.tex(,4608) lists all defined options (see @ref{option})
../singular_texi/types.tex(,4609) @item ordstr
../singular_texi/types.tex(,4610) monomial ordering of a ring (see @ref{ordstr})
../singular_texi/types.tex(,4611) @item parstr
../singular_texi/types.tex(,4612) names of all ring parameters or the
../singular_texi/types.tex(,4613) name of the n-th ring parameter (see @ref{parstr})
../singular_texi/types.tex(,4614) @item read
../singular_texi/types.tex(,4615) read a file (see @ref{read})
../singular_texi/types.tex(,4616) @item size
../singular_texi/types.tex(,4617) length of a string (see @ref{size})
../singular_texi/types.tex(,4618) @item sprintf
../singular_texi/types.tex(,4619) string formatting (see @ref{sprintf})
../singular_texi/types.tex(,4620) @item typeof
../singular_texi/types.tex(,4621) type of an object (see @ref{typeof})
../singular_texi/types.tex(,4622) @item varstr
../singular_texi/types.tex(,4623) names of all ring variables or the
../singular_texi/types.tex(,4624) name of the n-th ring variable (see @ref{varstr})
../singular_texi/types.tex(,4625) @end table
../singular_texi/types.tex(,4626) 
../singular_texi/types.tex(,4627) @c @*@strong{Example:}
../singular_texi/types.tex(,4628) @c @example
../singular_texi/types.tex(,4629) @c @end example
../singular_texi/types.tex(,4630) 
../singular_texi/types.tex(,4631) @c ---------------------------------------
../singular_texi/types.tex(,4632) @node vector,  , string, Data types
../singular_texi/types.tex(,4633) @section vector
../singular_texi/types.tex(,4634) @cindex vector
../singular_texi/types.tex(,4635) 
../singular_texi/types.tex(,4636) Vectors are elements of a free module over the basering with basis
../singular_texi/types.tex(,4637) @code{gen(1)}, @code{gen(2)}, @dots{} .
../singular_texi/types.tex(,4638) Each vector belongs to a free module of rank equal to the biggest index
../singular_texi/types.tex(,4639) of a generator with non-zero coefficient. Since generators with zero
../singular_texi/types.tex(,4640) coefficients need not be written any vector may be considered
../singular_texi/types.tex(,4641) also as an element of a free module of higher rank.
../singular_texi/types.tex(,4642) Like polynomials they
../singular_texi/types.tex(,4643) can only be defined or accessed with respect to the basering.
../singular_texi/types.tex(,4644) (E.g., if @code{f} and @code{g} are polynomials then
../singular_texi/types.tex(,4645) @code{f*gen(1)+g*gen(3)+gen(4)} may also be written as @code{[f,0,g,1]}
../singular_texi/types.tex(,4646) or as @code{[f,0,g,1,0]}.) Note that the elements of a vector have to be
../singular_texi/types.tex(,4647) surrounded by square brackets (@code{[}  , @code{]})
../singular_texi/types.tex(,4648) (cf. @ref{Representation of mathematical objects}).
../singular_texi/types.tex(,4649) 
../singular_texi/types.tex(,4650) @menu
../singular_texi/types.tex(,4651) * vector declarations::
../singular_texi/types.tex(,4652) * vector expressions::
../singular_texi/types.tex(,4653) * vector operations::
../singular_texi/types.tex(,4654) * vector related functions::
../singular_texi/types.tex(,4655) @end menu
../singular_texi/types.tex(,4656) 
../singular_texi/types.tex(,4657) @c ------------------------------
../singular_texi/types.tex(,4658) @node vector declarations, vector expressions, vector, vector
../singular_texi/types.tex(,4659) @subsection vector declarations
../singular_texi/types.tex(,4660) @cindex vector declarations
../singular_texi/types.tex(,4661) 
../singular_texi/types.tex(,4662) @table @strong
../singular_texi/types.tex(,4663) @item Syntax:
../singular_texi/types.tex(,4664) @code{vector} name @code{=} vector_expression @code{;}
../singular_texi/types.tex(,4665) 
../singular_texi/types.tex(,4666) @item Purpose:
../singular_texi/types.tex(,4667) defines a vector of polynomials (an element of a free module).
../singular_texi/types.tex(,4668) 
../singular_texi/types.tex(,4669) @item Default:
../singular_texi/types.tex(,4670) [0]
../singular_texi/types.tex(,4671) 
../singular_texi/types.tex(,4672) @item Example:
../singular_texi/types.tex(,4673) @smallexample
../singular_texi/types.tex(,4674) @c reused example vector_declarations types.doc:3840 
../singular_texi/types.tex(,4675)   ring r=0,(x,y,z),(c,dp);
../singular_texi/types.tex(,4676)   poly s1 = x2;
../singular_texi/types.tex(,4677)   poly s2 = y3;
../singular_texi/types.tex(,4678)   poly s3 = z;
../singular_texi/types.tex(,4679)   vector v = [s1, s2-s1, s3-s1]+ s1*gen(5);
../singular_texi/types.tex(,4680)   // v is a vector in the free module of rank 5
../singular_texi/types.tex(,4681)   v;
../singular_texi/types.tex(,4682) @expansion{} [x2,y3-x2,-x2+z,0,x2]
../singular_texi/types.tex(,4683) @c end example vector_declarations types.doc:3840
../singular_texi/types.tex(,4684) @end smallexample
../singular_texi/types.tex(,4685) @end table
../singular_texi/types.tex(,4686) 
../singular_texi/types.tex(,4687) @c ------------------------------
../singular_texi/types.tex(,4688) @node vector expressions, vector operations, vector declarations, vector
../singular_texi/types.tex(,4689) @subsection vector expressions
../singular_texi/types.tex(,4690) @cindex vector expressions
../singular_texi/types.tex(,4691) 
../singular_texi/types.tex(,4692) A vector expression is:
../singular_texi/types.tex(,4693) @enumerate
../singular_texi/types.tex(,4694) @item
../singular_texi/types.tex(,4695) an identifier of type vector
../singular_texi/types.tex(,4696) @item
../singular_texi/types.tex(,4697) a function returning vector
../singular_texi/types.tex(,4698) @item
../singular_texi/types.tex(,4699) a poly expression (via the canonical embedding @code{p} @expansion{} @code{p*gen(1)})
../singular_texi/types.tex(,4700) @item
../singular_texi/types.tex(,4701) vector expressions combined by the arithmetic operations @code{+} or
../singular_texi/types.tex(,4702) @code{-}
../singular_texi/types.tex(,4703) @item
../singular_texi/types.tex(,4704) a poly expression and a vector expression combined by the arithmetic
../singular_texi/types.tex(,4705) operation @code{*}
../singular_texi/types.tex(,4706) @item
../singular_texi/types.tex(,4707) a type cast to vector using the brackets @code{[} , @code{]}
../singular_texi/types.tex(,4708) @end enumerate
../singular_texi/types.tex(,4709) 
../singular_texi/types.tex(,4710) @*@strong{Example:}
../singular_texi/types.tex(,4711) @smallexample
../singular_texi/types.tex(,4712) @c reused example vector_expressions types.doc:3877 
../singular_texi/types.tex(,4713)   // ordering gives priority to components:
../singular_texi/types.tex(,4714)   ring rr=0,(x,y,z),(c,dp);
../singular_texi/types.tex(,4715)   vector v=[x2+y3,2,0,x*y]+gen(6)*x6;
../singular_texi/types.tex(,4716)   v;
../singular_texi/types.tex(,4717) @expansion{} [y3+x2,2,0,xy,0,x6]
../singular_texi/types.tex(,4718)   vector w=[z3-x,3y];
../singular_texi/types.tex(,4719)   v-w;
../singular_texi/types.tex(,4720) @expansion{} [y3-z3+x2+x,-3y+2,0,xy,0,x6]
../singular_texi/types.tex(,4721)   v*(z+x);
../singular_texi/types.tex(,4722) @expansion{} [xy3+y3z+x3+x2z,2x+2z,0,x2y+xyz,0,x7+x6z]
../singular_texi/types.tex(,4723) @c end example vector_expressions types.doc:3877
../singular_texi/types.tex(,4724) @end smallexample
../singular_texi/types.tex(,4725) 
../singular_texi/types.tex(,4726) @c inserted refs from types.doc:3888
../singular_texi/types.tex(,4735) See
../singular_texi/types.tex(,4736) @ref{Type conversion and casting};
../singular_texi/types.tex(,4737) @ref{ring}.
../singular_texi/types.tex(,4739) @c end inserted refs from types.doc:3888
../singular_texi/types.tex(,4740) 
../singular_texi/types.tex(,4741) @c ------------------------------
../singular_texi/types.tex(,4742) @node vector operations, vector related functions, vector expressions, vector
../singular_texi/types.tex(,4743) @subsection vector operations
../singular_texi/types.tex(,4744) @cindex vector operations
../singular_texi/types.tex(,4745) 
../singular_texi/types.tex(,4746) @table @asis
../singular_texi/types.tex(,4747) @item @code{+}
../singular_texi/types.tex(,4748) addition
../singular_texi/types.tex(,4749) 
../singular_texi/types.tex(,4750) @item @code{-}
../singular_texi/types.tex(,4751) negation or subtraction
../singular_texi/types.tex(,4752) 
../singular_texi/types.tex(,4753) @item @code{/}
../singular_texi/types.tex(,4754) division by a monomial, not divisible terms yield 0
../singular_texi/types.tex(,4755) 
../singular_texi/types.tex(,4756) @item @code{<}, @code{<=}, @code{>}, @code{>=}, @code{==}, @code{<>}
../singular_texi/types.tex(,4757) comparison of leading terms w.r.t. monomial ordering
../singular_texi/types.tex(,4758) 
../singular_texi/types.tex(,4759) @item vector_expression @code{[} int_expressions @code{]}
../singular_texi/types.tex(,4760) is a vector entry; the index 1 gives the first entry.
../singular_texi/types.tex(,4761) @end table
../singular_texi/types.tex(,4762) 
../singular_texi/types.tex(,4763) @*@strong{Example:}
../singular_texi/types.tex(,4764) @smallexample
../singular_texi/types.tex(,4765) @c reused example vector_operations types.doc:3918 
../singular_texi/types.tex(,4766)   ring R=0,(x,y),(c,dp);
../singular_texi/types.tex(,4767)   [x,y]-[1,x];
../singular_texi/types.tex(,4768) @expansion{} [x-1,-x+y]
../singular_texi/types.tex(,4769)   [1,2,x,4][3];
../singular_texi/types.tex(,4770) @expansion{} x
../singular_texi/types.tex(,4771) @c end example vector_operations types.doc:3918
../singular_texi/types.tex(,4772) @end smallexample
../singular_texi/types.tex(,4773) 
../singular_texi/types.tex(,4774) 
../singular_texi/types.tex(,4775) @c ------------------------------
../singular_texi/types.tex(,4776) @node vector related functions,  , vector operations, vector
../singular_texi/types.tex(,4777) @subsection vector related functions
../singular_texi/types.tex(,4778) @cindex vector related functions
../singular_texi/types.tex(,4779) 
../singular_texi/types.tex(,4780) @table @code
../singular_texi/types.tex(,4781) @item cleardenom
../singular_texi/types.tex(,4782) quotient of a vector by its content (see @ref{cleardenom})
../singular_texi/types.tex(,4783) @item coeffs
../singular_texi/types.tex(,4784) matrix of coefficients (see @ref{coeffs})
../singular_texi/types.tex(,4785) @item deg
../singular_texi/types.tex(,4786) degree (see @ref{deg})
../singular_texi/types.tex(,4787) @item diff
../singular_texi/types.tex(,4788) partial derivative (see @ref{diff})
../singular_texi/types.tex(,4789) @item gen
../singular_texi/types.tex(,4790) i-th generator (see @ref{gen})
../singular_texi/types.tex(,4791) @item homog
../singular_texi/types.tex(,4792) homogenization (see @ref{homog})
../singular_texi/types.tex(,4793) @item jet
../singular_texi/types.tex(,4794) k-jet: monomials with degree smaller k+1 (see @ref{jet})
../singular_texi/types.tex(,4795) @item lead
../singular_texi/types.tex(,4796) leading term (see @ref{lead})
../singular_texi/types.tex(,4797) @item leadcoef
../singular_texi/types.tex(,4798) leading coefficient (see @ref{leadcoef})
../singular_texi/types.tex(,4799) @item leadexp
../singular_texi/types.tex(,4800) the exponent vector of the leading monomial (see @ref{leadexp})
../singular_texi/types.tex(,4801) @item leadmonom
../singular_texi/types.tex(,4802) leading monomial (see @ref{leadmonom})
../singular_texi/types.tex(,4803) @item nrows
../singular_texi/types.tex(,4804) number of rows (see @ref{nrows})
../singular_texi/types.tex(,4805) @item ord
../singular_texi/types.tex(,4806) degree of the leading monomial (see @ref{ord})
../singular_texi/types.tex(,4807) @item reduce
../singular_texi/types.tex(,4808) normal form with respect to a standard base (see @ref{reduce})
../singular_texi/types.tex(,4809) @item simplify
../singular_texi/types.tex(,4810) normalize a vector (see @ref{simplify})
../singular_texi/types.tex(,4811) @item size
../singular_texi/types.tex(,4812) number of monomials (see @ref{size})
../singular_texi/types.tex(,4813) @item subst
../singular_texi/types.tex(,4814) substitute a ring variable (see @ref{subst})
../singular_texi/types.tex(,4815) @end table
../singular_texi/types.tex(,4816) 
../singular_texi/types.tex(,4817) @c @*@strong{Example:}
../singular_texi/types.tex(,4818) @c @example
../singular_texi/types.tex(,4819) @c @end example
../singular_texi/singular.tex(,139) 
../singular_texi/singular.tex(,140) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,141) @node Functions and system variables, Tricks and pitfalls, Data types, Top
../singular_texi/singular.tex(,142) @chapter Functions and system variables
../singular_texi/singular.tex(,143) @cindex Commands
../singular_texi/reference.tex(,1) @comment -*-texinfo-*-
../singular_texi/reference.tex(,2) @comment This file was generated by doc2tex.pl from reference.doc
../singular_texi/reference.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT reference.doc INSTEAD
../singular_texi/reference.tex(,4) @comment Id: reference.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/reference.tex(,5) @comment this file contains the reference part of the manual
../singular_texi/reference.tex(,6) 
../singular_texi/reference.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/reference.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/reference.tex(,9) @c is wrapped in `@ifset' and `@end' it does not harm `tex' or
../singular_texi/reference.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/reference.tex(,11) @c ignores the conditionals).
../singular_texi/reference.tex(,24) 
../singular_texi/reference.tex(,25) @c ---------------------------------------
../singular_texi/reference.tex(,26) @menu
../singular_texi/reference.tex(,27) * Functions::
../singular_texi/reference.tex(,28) * Control structures::
../singular_texi/reference.tex(,29) * System variables::
../singular_texi/reference.tex(,30) @end menu
../singular_texi/reference.tex(,31) 
../singular_texi/reference.tex(,32) @c ---------------------------------------
../singular_texi/reference.tex(,33) @node Functions, Control structures, Functions and system variables, Functions and system variables
../singular_texi/reference.tex(,34) @section Functions
../singular_texi/reference.tex(,35) @cindex Functions
../singular_texi/reference.tex(,36) 
../singular_texi/reference.tex(,37) This section gives a complete reference of all functions, commands and
../singular_texi/reference.tex(,38) special variables of the @sc{Singular} kernel (i.e., all built-in
../singular_texi/reference.tex(,39) commands). @xref{standard_lib}, for those
../singular_texi/reference.tex(,40) functions from the @code{standard.lib} (this library is automatically
../singular_texi/reference.tex(,41) loaded at start-up time) which extend the functionality of the kernel
../singular_texi/reference.tex(,42) and are written
../singular_texi/reference.tex(,43) in the  @sc{Singular} programming language.
../singular_texi/reference.tex(,44) 
../singular_texi/reference.tex(,45) The general syntax of a function is
../singular_texi/reference.tex(,46) @format
../singular_texi/reference.tex(,47)                    [target =] function_name (<arguments>);
../singular_texi/reference.tex(,48) @end format
../singular_texi/reference.tex(,49) If no target is specified, the result is printed.
../singular_texi/reference.tex(,50) In some cases (e.g., @code{export}, @code{keepring}, @code{kill},
../singular_texi/reference.tex(,51) @code{setring}, @code{type}) the brackets are optional. For the commands
../singular_texi/reference.tex(,52) @code{help}, @code{break}, @code{quit}, @code{exit} and @code{LIB} no
../singular_texi/reference.tex(,53) brackets are allowed.
../singular_texi/reference.tex(,54) 
../singular_texi/reference.tex(,58) @menu
../singular_texi/reference.tex(,59) * attrib::
../singular_texi/reference.tex(,60) * bareiss::
../singular_texi/reference.tex(,61) * betti::
../singular_texi/reference.tex(,62) * char::
../singular_texi/reference.tex(,63) * char_series::
../singular_texi/reference.tex(,64) * charstr::
../singular_texi/reference.tex(,65) * cleardenom::
../singular_texi/reference.tex(,66) * close::
../singular_texi/reference.tex(,67) * coef::
../singular_texi/reference.tex(,68) * coeffs::
../singular_texi/reference.tex(,69) * contract::
../singular_texi/reference.tex(,70) * dbprint::
../singular_texi/reference.tex(,71) * defined::
../singular_texi/reference.tex(,72) * deg::
../singular_texi/reference.tex(,73) * degree::
../singular_texi/reference.tex(,74) * delete::
../singular_texi/reference.tex(,75) * det::
../singular_texi/reference.tex(,76) * diff::
../singular_texi/reference.tex(,77) * dim::
../singular_texi/reference.tex(,78) * division::
../singular_texi/reference.tex(,79) * dump::
../singular_texi/reference.tex(,80) * eliminate::
../singular_texi/reference.tex(,81) * eval::
../singular_texi/reference.tex(,82) * ERROR::
../singular_texi/reference.tex(,83) * example::
../singular_texi/reference.tex(,84) * execute::
../singular_texi/reference.tex(,85) * exit::
../singular_texi/reference.tex(,86) * extgcd::
../singular_texi/reference.tex(,87) * facstd::
../singular_texi/reference.tex(,88) * factorize::
../singular_texi/reference.tex(,89) * fetch::
../singular_texi/reference.tex(,90) * fglm::
../singular_texi/reference.tex(,91) * fglmquot::
../singular_texi/reference.tex(,92) * filecmd::
../singular_texi/reference.tex(,93) * find::
../singular_texi/reference.tex(,94) * finduni::
../singular_texi/reference.tex(,95) * fprintf::
../singular_texi/reference.tex(,96) * freemodule::
../singular_texi/reference.tex(,97) * gcd::
../singular_texi/reference.tex(,98) * gen::
../singular_texi/reference.tex(,99) * getdump::
../singular_texi/reference.tex(,100) * groebner::
../singular_texi/reference.tex(,101) * help::
../singular_texi/reference.tex(,102) * highcorner::
../singular_texi/reference.tex(,103) * hilb::
../singular_texi/reference.tex(,104) * homog::
../singular_texi/reference.tex(,105) * hres::
../singular_texi/reference.tex(,106) * imap::
../singular_texi/reference.tex(,107) * impart::
../singular_texi/reference.tex(,108) * indepSet::
../singular_texi/reference.tex(,109) * insert::
../singular_texi/reference.tex(,110) * interred::
../singular_texi/reference.tex(,111) * intersect::
../singular_texi/reference.tex(,112) * jacob::
../singular_texi/reference.tex(,113) * jet::
../singular_texi/reference.tex(,114) * kbase::
../singular_texi/reference.tex(,115) * kill::
../singular_texi/reference.tex(,116) * killattrib::
../singular_texi/reference.tex(,117) * koszul::
../singular_texi/reference.tex(,118) * laguerre::
../singular_texi/reference.tex(,119) * lead::
../singular_texi/reference.tex(,120) * leadcoef::
../singular_texi/reference.tex(,121) * leadexp::
../singular_texi/reference.tex(,122) * leadmonom::
../singular_texi/reference.tex(,123) * LIB::
../singular_texi/reference.tex(,124) * lift::
../singular_texi/reference.tex(,125) * liftstd::
../singular_texi/reference.tex(,126) * listvar::
../singular_texi/reference.tex(,127) * lres::
../singular_texi/reference.tex(,128) * maxideal::
../singular_texi/reference.tex(,129) * memory::
../singular_texi/reference.tex(,130) * minbase::
../singular_texi/reference.tex(,131) * minor::
../singular_texi/reference.tex(,132) * minres::
../singular_texi/reference.tex(,133) * modulo::
../singular_texi/reference.tex(,134) * monitor::
../singular_texi/reference.tex(,135) * mpresmat::
../singular_texi/reference.tex(,136) * mres::
../singular_texi/reference.tex(,137) * mstd::
../singular_texi/reference.tex(,138) * mult::
../singular_texi/reference.tex(,139) * nameof::
../singular_texi/reference.tex(,140) * names::
../singular_texi/reference.tex(,141) * ncols::
../singular_texi/reference.tex(,142) * npars::
../singular_texi/reference.tex(,143) * nres::
../singular_texi/reference.tex(,144) * nrows::
../singular_texi/reference.tex(,145) * nvars::
../singular_texi/reference.tex(,146) * open::
../singular_texi/reference.tex(,147) * option::
../singular_texi/reference.tex(,148) * ord::
../singular_texi/reference.tex(,149) * ordstr::
../singular_texi/reference.tex(,150) * par::
../singular_texi/reference.tex(,151) * pardeg::
../singular_texi/reference.tex(,152) * parstr::
../singular_texi/reference.tex(,153) * preimage::
../singular_texi/reference.tex(,154) * prime::
../singular_texi/reference.tex(,155) * print::
../singular_texi/reference.tex(,156) * printf::
../singular_texi/reference.tex(,157) * prune::
../singular_texi/reference.tex(,158) * qhweight::
../singular_texi/reference.tex(,159) * quot::
../singular_texi/reference.tex(,160) * quote::
../singular_texi/reference.tex(,161) * quotient::
../singular_texi/reference.tex(,162) * random::
../singular_texi/reference.tex(,163) * read::
../singular_texi/reference.tex(,164) * reduce::
../singular_texi/reference.tex(,165) * regularity::
../singular_texi/reference.tex(,166) * repart::
../singular_texi/reference.tex(,167) * res::
../singular_texi/reference.tex(,168) * reservedName::
../singular_texi/reference.tex(,169) * resultant::
../singular_texi/reference.tex(,170) * rvar::
../singular_texi/reference.tex(,171) * setring::
../singular_texi/reference.tex(,172) * simplex::
../singular_texi/reference.tex(,173) * simplify::
../singular_texi/reference.tex(,174) * size::
../singular_texi/reference.tex(,175) * sortvec::
../singular_texi/reference.tex(,176) * sprintf::
../singular_texi/reference.tex(,177) * sres::
../singular_texi/reference.tex(,178) * status::
../singular_texi/reference.tex(,179) * std::
../singular_texi/reference.tex(,180) * stdfglm::
../singular_texi/reference.tex(,181) * stdhilb::
../singular_texi/reference.tex(,182) * subst::
../singular_texi/reference.tex(,183) * system::
../singular_texi/reference.tex(,184) * syz::
../singular_texi/reference.tex(,185) * trace::
../singular_texi/reference.tex(,186) * transpose::
../singular_texi/reference.tex(,187) * type::
../singular_texi/reference.tex(,188) * typeof::
../singular_texi/reference.tex(,189) * uressolve::
../singular_texi/reference.tex(,190) * vandermonde::
../singular_texi/reference.tex(,191) * var::
../singular_texi/reference.tex(,192) * varstr::
../singular_texi/reference.tex(,193) * vdim::
../singular_texi/reference.tex(,194) * wedge::
../singular_texi/reference.tex(,195) * weight::
../singular_texi/reference.tex(,196) * write::
../singular_texi/reference.tex(,197) @end menu
../singular_texi/reference.tex(,198) @c ---------------------------------------
../singular_texi/reference.tex(,199) @node attrib, bareiss, Functions, Functions
../singular_texi/reference.tex(,200) @subsection attrib
../singular_texi/reference.tex(,201) @cindex attrib
../singular_texi/reference.tex(,202) @table @code
../singular_texi/reference.tex(,203) @item @strong{Syntax:}
../singular_texi/reference.tex(,204) @code{attrib (} name @code{)}
../singular_texi/reference.tex(,205) @item @strong{Type:}
../singular_texi/reference.tex(,206) none
../singular_texi/reference.tex(,207) @item @strong{Purpose:}
../singular_texi/reference.tex(,208) displays the attribute list of the object called name.
../singular_texi/reference.tex(,209) @item @strong{Example:}
../singular_texi/reference.tex(,210) @smallexample
../singular_texi/reference.tex(,211) @c reused example attrib reference.doc:209 
../singular_texi/reference.tex(,212)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,213)   ideal I=std(maxideal(2));
../singular_texi/reference.tex(,214)   attrib(I);
../singular_texi/reference.tex(,215) @expansion{} attr:isSB, type int
../singular_texi/reference.tex(,216) @c end example attrib reference.doc:209
../singular_texi/reference.tex(,217) @end smallexample
../singular_texi/reference.tex(,218) @item @strong{Syntax:}
../singular_texi/reference.tex(,219) @code{attrib (} name @code{,} string_expression @code{)}
../singular_texi/reference.tex(,220) @item @strong{Type:}
../singular_texi/reference.tex(,221) any
../singular_texi/reference.tex(,222) @item @strong{Purpose:}
../singular_texi/reference.tex(,223) returns the value of the attribute string_expression of the
../singular_texi/reference.tex(,224) variable name. If the attribute is not defined for this variable,
../singular_texi/reference.tex(,225) @code{attrib} returns the empty string.
../singular_texi/reference.tex(,226) @item @strong{Example:}
../singular_texi/reference.tex(,227) @smallexample
../singular_texi/reference.tex(,228) @c reused example attrib_1 reference.doc:225 
../singular_texi/reference.tex(,229)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,230)   ideal I=std(maxideal(2));
../singular_texi/reference.tex(,231)   attrib(I,"isSB");
../singular_texi/reference.tex(,232) @expansion{} 1
../singular_texi/reference.tex(,233)   // although maxideal(2) is a standard basis,
../singular_texi/reference.tex(,234)   // SINGULAR does not know it:
../singular_texi/reference.tex(,235)   attrib(maxideal(2), "isSB");
../singular_texi/reference.tex(,236) @expansion{} 0
../singular_texi/reference.tex(,237) @c end example attrib_1 reference.doc:225
../singular_texi/reference.tex(,238) @end smallexample
../singular_texi/reference.tex(,239) @item @strong{Syntax:}
../singular_texi/reference.tex(,240) @code{attrib (} name@code{,} string_expression@code{,} expression @code{)}
../singular_texi/reference.tex(,241) @item @strong{Type:}
../singular_texi/reference.tex(,242) none
../singular_texi/reference.tex(,243) @item @strong{Purpose:}
../singular_texi/reference.tex(,244) sets the attribute string_expression of the variable name
../singular_texi/reference.tex(,245) to the value expression.
../singular_texi/reference.tex(,246) @item @strong{Example:}
../singular_texi/reference.tex(,247) @smallexample
../singular_texi/reference.tex(,248) @c reused example attrib_2 reference.doc:243 
../singular_texi/reference.tex(,249)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,250)   ideal I=maxideal(2); // the attribute "isSB" is not set
../singular_texi/reference.tex(,251)   vdim(I);
../singular_texi/reference.tex(,252) @expansion{} // ** I is no standardbasis
../singular_texi/reference.tex(,253) @expansion{} 4
../singular_texi/reference.tex(,254)   attrib(I,"isSB",1);  // the standard basis attribute is set here
../singular_texi/reference.tex(,255)   vdim(I);
../singular_texi/reference.tex(,256) @expansion{} 4
../singular_texi/reference.tex(,257) @c end example attrib_2 reference.doc:243
../singular_texi/reference.tex(,258) @end smallexample
../singular_texi/reference.tex(,259) @item @strong{Remark:}
../singular_texi/reference.tex(,260) An attribute may be described by any string_expression. Some of these are
../singular_texi/reference.tex(,261) used by the kernel of @sc{Singular} and referred to as reserved attributes.
../singular_texi/reference.tex(,262) Non-reserved attributes may be used, however, in procedures and can
../singular_texi/reference.tex(,263) considerably speed up computations.
../singular_texi/reference.tex(,264) @sp 1
../singular_texi/reference.tex(,265) @item @strong{Reserved attributes:}
../singular_texi/reference.tex(,266) (not all are in use at the moment)
../singular_texi/reference.tex(,267) @table @code
../singular_texi/reference.tex(,268) @item isSB
../singular_texi/reference.tex(,269) the standard basis property is set by all commands computing a standard
../singular_texi/reference.tex(,270) basis like
../singular_texi/reference.tex(,271) @code{groebner}, @code{std}, @code{stdhilb} etc.; used by @code{lift}, @code{dim},
../singular_texi/reference.tex(,272) @code{degree}, @code{mult}, @code{hilb}, @code{vdim}, @code{kbase}
../singular_texi/reference.tex(,273) @item isHomog
../singular_texi/reference.tex(,274) the weight vector for homogeneous or quasihomogeneous ideals/modules
../singular_texi/reference.tex(,275) @item isCI
../singular_texi/reference.tex(,276) complete intersection property
../singular_texi/reference.tex(,277) @item isCM
../singular_texi/reference.tex(,278) Cohen-Macaulay property
../singular_texi/reference.tex(,279) @item rank
../singular_texi/reference.tex(,280) set the rank of a module (see @ref{nrows})
../singular_texi/reference.tex(,281) @item withSB
../singular_texi/reference.tex(,282) value of type ideal, resp.@: module, is std
../singular_texi/reference.tex(,283) @item withHilb
../singular_texi/reference.tex(,284) value of type intvec is hilb(_,1) (see @ref{hilb})
../singular_texi/reference.tex(,285) @item withRes
../singular_texi/reference.tex(,286) value of type list is a free resolution
../singular_texi/reference.tex(,287) @item withDim
../singular_texi/reference.tex(,288) value of type int is the dimension (see @ref{dim})
../singular_texi/reference.tex(,289) @item withMult
../singular_texi/reference.tex(,290) value of type int is the multiplicity (see @ref{mult})
../singular_texi/reference.tex(,291) @c @item @code{D}
../singular_texi/reference.tex(,292) @c object is an differential operator, if set to 1;
../singular_texi/reference.tex(,293) @c @*object is in a module, if set to 0
../singular_texi/reference.tex(,294) @c @*only valid in a dring (see @ref{dring}).
../singular_texi/reference.tex(,295) @end table
../singular_texi/reference.tex(,296) @end table
../singular_texi/reference.tex(,297) @c @c ref
../singular_texi/reference.tex(,298) @c See
../singular_texi/reference.tex(,299) @c @ref{Expressions};
../singular_texi/reference.tex(,300) @c @ref{killattrib}.
../singular_texi/reference.tex(,301) @c @c ref
../singular_texi/reference.tex(,302) @c ---------------------------------------
../singular_texi/reference.tex(,303) @node bareiss, betti, attrib, Functions
../singular_texi/reference.tex(,304) @subsection bareiss
../singular_texi/reference.tex(,305) @cindex bareiss
../singular_texi/reference.tex(,306) 
../singular_texi/reference.tex(,307) @table @code
../singular_texi/reference.tex(,308) @item @strong{Syntax:}
../singular_texi/reference.tex(,309) @code{bareiss (} module_expression @code{)}
../singular_texi/reference.tex(,310) @*@code{bareiss (} matrix_expression @code{)}
../singular_texi/reference.tex(,311) @*@code{bareiss (} module_expression@code{,} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,312) @*@code{bareiss (} matrix_expression@code{,} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,313) @item @strong{Type:}
../singular_texi/reference.tex(,314) list of module and intvec
../singular_texi/reference.tex(,315) @item @strong{Purpose:}
../singular_texi/reference.tex(,316) applies the sparse Gauss-Bareiss algorithm (see @ref{References}, Lee and
../singular_texi/reference.tex(,317) Saunders) to a module (or with type conversion to a matrix) with an 'optimal'
../singular_texi/reference.tex(,318) pivot strategy. The vectors of the module are the columns of the matrix,
../singular_texi/reference.tex(,319) hence elimination takes place w.r.t.@: rows.
../singular_texi/reference.tex(,320) @* With only one parameter a complete elimination is done.
../singular_texi/reference.tex(,321) Result is a list: the first entry is a module with a minimal independent set
../singular_texi/reference.tex(,322) of vectors (as a matrix lower triangular),
../singular_texi/reference.tex(,323) the second entry an intvec with the permutation of the rows
../singular_texi/reference.tex(,324) w.r.t.@: the original matrix, that is, a k at position l indicates that
../singular_texi/reference.tex(,325) row l became row k.
../singular_texi/reference.tex(,326) @* The further parameters control the algorithm. @code{bareiss(M,i,j)}
../singular_texi/reference.tex(,327) does not consider the last i rows in the elimination procedure and stops
../singular_texi/reference.tex(,328) computing when the remaining number of vectors (columns) to reduce is at
../singular_texi/reference.tex(,329) most j.
../singular_texi/reference.tex(,330) @item @strong{Example:}
../singular_texi/reference.tex(,331) @smallexample
../singular_texi/reference.tex(,332) @c reused example bareiss reference.doc:324 
../singular_texi/reference.tex(,333)   ring r=0,(x,y,z),(c,dp);
../singular_texi/reference.tex(,334)   module mm;
../singular_texi/reference.tex(,335)   // ** generation of the module mm **
../singular_texi/reference.tex(,336)   int d=7;
../singular_texi/reference.tex(,337)   int b=2;
../singular_texi/reference.tex(,338)   int db=d-b;
../singular_texi/reference.tex(,339)   int i;
../singular_texi/reference.tex(,340)   for(i=d;i>0;i--)@{ mm[i]=3*x*gen(i); @}
../singular_texi/reference.tex(,341)   for(i=db;i;i--)@{ mm[i]=mm[i]+7*y*gen(i+b); @}
../singular_texi/reference.tex(,342)   for(i=d;i>db;i--)@{ mm[i]=mm[i]+7*y*gen(i-db); @}
../singular_texi/reference.tex(,343)   for(i=d;i>b;i--)@{ mm[i]=mm[i]+11*z*gen(i-b); @}
../singular_texi/reference.tex(,344)   for(i=b;i;i--)@{ mm[i]=mm[i]+11*z*gen(i+db); @}
../singular_texi/reference.tex(,345)   // ** the generating matrix of mm **
../singular_texi/reference.tex(,346)   print(mm);
../singular_texi/reference.tex(,347) @expansion{} 3x, 0,  11z,0,  0,  7y, 0,  
../singular_texi/reference.tex(,348) @expansion{} 0,  3x, 0,  11z,0,  0,  7y, 
../singular_texi/reference.tex(,349) @expansion{} 7y, 0,  3x, 0,  11z,0,  0,  
../singular_texi/reference.tex(,350) @expansion{} 0,  7y, 0,  3x, 0,  11z,0,  
../singular_texi/reference.tex(,351) @expansion{} 0,  0,  7y, 0,  3x, 0,  11z,
../singular_texi/reference.tex(,352) @expansion{} 11z,0,  0,  7y, 0,  3x, 0,  
../singular_texi/reference.tex(,353) @expansion{} 0,  11z,0,  0,  7y, 0,  3x  
../singular_texi/reference.tex(,354)   // complete elimination
../singular_texi/reference.tex(,355)   list ss=bareiss(mm);
../singular_texi/reference.tex(,356)   print(ss[1]);
../singular_texi/reference.tex(,357) @expansion{} 7y, 0,     0,     0,      0,        0,     0,    
../singular_texi/reference.tex(,358) @expansion{} 3x, -33xz, 0,     0,      0,        0,     0,    
../singular_texi/reference.tex(,359) @expansion{} 11z,-121z2,1331z3,0,      0,        0,     0,    
../singular_texi/reference.tex(,360) @expansion{} 0,  0,     0,     9317yz3,0,        0,     0,    
../singular_texi/reference.tex(,361) @expansion{} 0,  21xy,  _[5,3],14641z4,-43923xz4,0,     0,    
../singular_texi/reference.tex(,362) @expansion{} 0,  0,     0,     0,      65219y2z3,_[6,6],0,    
../singular_texi/reference.tex(,363) @expansion{} 0,  49y2,  _[7,3],3993xz3,_[7,5],   _[7,6],_[7,7]
../singular_texi/reference.tex(,364)   ss[2];
../singular_texi/reference.tex(,365) @expansion{} 2,7,5,1,4,3,6
../singular_texi/reference.tex(,366)   // elimination up to 3 vectors
../singular_texi/reference.tex(,367)   ss=bareiss(mm,0,3);
../singular_texi/reference.tex(,368)   print(ss[1]);
../singular_texi/reference.tex(,369) @expansion{} 7y, 0,     0,     0,      0,        0,        0,        
../singular_texi/reference.tex(,370) @expansion{} 3x, -33xz, 0,     0,      0,        0,        0,        
../singular_texi/reference.tex(,371) @expansion{} 11z,-121z2,1331z3,0,      0,        0,        0,        
../singular_texi/reference.tex(,372) @expansion{} 0,  0,     0,     9317yz3,0,        0,        0,        
../singular_texi/reference.tex(,373) @expansion{} 0,  0,     0,     0,      27951xyz3,102487yz4,65219y2z3,
../singular_texi/reference.tex(,374) @expansion{} 0,  21xy,  _[6,3],14641z4,_[6,5],   _[6,6],   -43923xz4,
../singular_texi/reference.tex(,375) @expansion{} 0,  49y2,  _[7,3],3993xz3,_[7,5],   _[7,6],   _[7,7]    
../singular_texi/reference.tex(,376)   ss[2];
../singular_texi/reference.tex(,377) @expansion{} 2,7,5,1,3,4,6
../singular_texi/reference.tex(,378)   // elimination without the last 3 rows
../singular_texi/reference.tex(,379)   ss=bareiss(mm,3,0);
../singular_texi/reference.tex(,380)   print(ss[1]);
../singular_texi/reference.tex(,381) @expansion{} 7y, 0,   0,      0,       0,     0,     0,       
../singular_texi/reference.tex(,382) @expansion{} 0,  77yz,0,      0,       0,     0,     0,       
../singular_texi/reference.tex(,383) @expansion{} 0,  0,   231xyz, 0,       0,     0,     0,       
../singular_texi/reference.tex(,384) @expansion{} 0,  0,   0,      1617xy2z,0,     0,     0,       
../singular_texi/reference.tex(,385) @expansion{} 11z,21xy,-1331z3,14641z4, _[5,5],_[5,6],_[5,7],  
../singular_texi/reference.tex(,386) @expansion{} 0,  0,   539y2z, _[6,4],  _[6,5],_[6,6],-3773y3z,
../singular_texi/reference.tex(,387) @expansion{} 3x, 49y2,-363xz2,3993xz3, _[7,5],_[7,6],_[7,7]   
../singular_texi/reference.tex(,388)   ss[2];
../singular_texi/reference.tex(,389) @expansion{} 2,3,4,1
../singular_texi/reference.tex(,390) @c end example bareiss reference.doc:324
../singular_texi/reference.tex(,391) @end smallexample
../singular_texi/reference.tex(,392) @end table
../singular_texi/reference.tex(,393) @c inserted refs from reference.doc:354
../singular_texi/reference.tex(,402) See
../singular_texi/reference.tex(,403) @ref{det};
../singular_texi/reference.tex(,404) @ref{matrix}.
../singular_texi/reference.tex(,406) @c end inserted refs from reference.doc:354
../singular_texi/reference.tex(,407) @c ---------------------------------------
../singular_texi/reference.tex(,408) @node betti, char, bareiss, Functions
../singular_texi/reference.tex(,409) @subsection betti
../singular_texi/reference.tex(,410) @cindex betti
../singular_texi/reference.tex(,411) @table @code
../singular_texi/reference.tex(,412) @item @strong{Syntax:}
../singular_texi/reference.tex(,413) @code{betti (} list_expression @code{)}
../singular_texi/reference.tex(,414) @*@code{betti (} resolution_expression @code{)}
../singular_texi/reference.tex(,415) @*@code{betti (} list_expression @code{,} int_expression @code{)}
../singular_texi/reference.tex(,416) @*@code{betti (} resolution_expression @code{,} int_expression @code{)}
../singular_texi/reference.tex(,417) @item @strong{Type:}
../singular_texi/reference.tex(,418) intmat
../singular_texi/reference.tex(,419) @item @strong{Purpose:}
../singular_texi/reference.tex(,420) with 1 argument: computes the graded Betti numbers of a minimal resolution of
../singular_texi/reference.tex(,421) @tex
../singular_texi/reference.tex(,422) $R^n/M$, if $R$ denotes the basering and
../singular_texi/reference.tex(,423) $M$ a homogeneous submodule of $R^n$ and the argument represents a
../singular_texi/reference.tex(,424) resolution of
../singular_texi/reference.tex(,425) $R^n/M$.
../singular_texi/reference.tex(,426) @end tex
../singular_texi/reference.tex(,428) @*
../singular_texi/reference.tex(,430) @tex
../singular_texi/reference.tex(,431) The entry d of the intmat at place (i,j) is the minimal number of
../singular_texi/reference.tex(,432) generators in degree i+j of the j-th syzygy module (= module of
../singular_texi/reference.tex(,433) relations) of $R^n/M$ (the 0th (resp.\ 1st) syzygy module of $R^n/M$ is
../singular_texi/reference.tex(,434) $R^n$ (resp.\ $M$)).
../singular_texi/reference.tex(,435) @end tex
../singular_texi/reference.tex(,445) The argument is considered to be the result of a res/sres/mres/nres/lres
../singular_texi/reference.tex(,446) command. This implies that a zero is only allowed (and counted) as a
../singular_texi/reference.tex(,447) generator in the first module.
../singular_texi/reference.tex(,448) @*For the computation betti uses only the initial monomials. This could lead
../singular_texi/reference.tex(,449) to confusing results for a non-homogeneous input.
../singular_texi/reference.tex(,450) 
../singular_texi/reference.tex(,451) The optional second argument is a switch for the minimization of the Betti
../singular_texi/reference.tex(,452) numbers. If it is 0 then the Betti numbers correspond exactly to the input -
../singular_texi/reference.tex(,453) otherwise the command is identical to the one-argument form.
../singular_texi/reference.tex(,454) @item @strong{Example:}
../singular_texi/reference.tex(,455) @smallexample
../singular_texi/reference.tex(,456) @c reused example betti reference.doc:408 
../singular_texi/reference.tex(,457)   ring r=32003,(a,b,c,d),dp;
../singular_texi/reference.tex(,458)   ideal j=bc-ad,b3-a2c,c3-bd2,ac2-b2d;
../singular_texi/reference.tex(,459)   list T=mres(j,0); // 0 forces a full resolution
../singular_texi/reference.tex(,460)   // a minimal set of generators for j:
../singular_texi/reference.tex(,461)   print(T[1]);
../singular_texi/reference.tex(,462) @expansion{} bc-ad,
../singular_texi/reference.tex(,463) @expansion{} c3-bd2,
../singular_texi/reference.tex(,464) @expansion{} ac2-b2d,
../singular_texi/reference.tex(,465) @expansion{} b3-a2c
../singular_texi/reference.tex(,466)   // second syzygy module of r/j which is the first
../singular_texi/reference.tex(,467)   // syzygy module of j (minimal generating set):
../singular_texi/reference.tex(,468)   print(T[2]);
../singular_texi/reference.tex(,469) @expansion{} bd,c2,ac,b2,
../singular_texi/reference.tex(,470) @expansion{} -a,-b,0, 0, 
../singular_texi/reference.tex(,471) @expansion{} c, d, -b,-a,
../singular_texi/reference.tex(,472) @expansion{} 0, 0, -d,-c 
../singular_texi/reference.tex(,473)   // the second syzygy module (minimal generating set):
../singular_texi/reference.tex(,474)   print(T[3]);
../singular_texi/reference.tex(,475) @expansion{} -b,
../singular_texi/reference.tex(,476) @expansion{} a, 
../singular_texi/reference.tex(,477) @expansion{} -c,
../singular_texi/reference.tex(,478) @expansion{} d  
../singular_texi/reference.tex(,479)   print(T[4]);
../singular_texi/reference.tex(,480) @expansion{} 0
../singular_texi/reference.tex(,481)   betti(T);
../singular_texi/reference.tex(,482) @expansion{} 1,0,0,0,
../singular_texi/reference.tex(,483) @expansion{} 0,1,0,0,
../singular_texi/reference.tex(,484) @expansion{} 0,3,4,1 
../singular_texi/reference.tex(,485)   // most useful for reading off the graded Betti numbers:
../singular_texi/reference.tex(,486)   print(betti(T),"betti");
../singular_texi/reference.tex(,487) @expansion{}            0     1     2     3
../singular_texi/reference.tex(,488) @expansion{} ------------------------------
../singular_texi/reference.tex(,489) @expansion{}     0:     1     -     -     -
../singular_texi/reference.tex(,490) @expansion{}     1:     -     1     -     -
../singular_texi/reference.tex(,491) @expansion{}     2:     -     3     4     1
../singular_texi/reference.tex(,492) @expansion{} ------------------------------
../singular_texi/reference.tex(,493) @expansion{} total:     1     4     4     1
../singular_texi/reference.tex(,494) @c end example betti reference.doc:408
../singular_texi/reference.tex(,495) @end smallexample
../singular_texi/reference.tex(,496) @end table
../singular_texi/reference.tex(,497) 
../singular_texi/reference.tex(,498) Hence
../singular_texi/reference.tex(,499) @itemize @bullet
../singular_texi/reference.tex(,500) @item the 0th syzygy module of r/j (which is r) has 1 generator in
../singular_texi/reference.tex(,501) degree 0 (which is 1),
../singular_texi/reference.tex(,502) @item the 1st syzygy module @code{T[1]} (which is j) has 4
../singular_texi/reference.tex(,503) generators (one in degree 2 and three in degree 3),
../singular_texi/reference.tex(,504) @item the 2nd syzygy
../singular_texi/reference.tex(,505) module @code{T[2]} has 4 generators (all in degree 4),
../singular_texi/reference.tex(,506) @item the 3rd syzygy module @code{T[3]} has
../singular_texi/reference.tex(,507) 1 generator in degree 5,
../singular_texi/reference.tex(,508) @end itemize
../singular_texi/reference.tex(,509) where the generators are the columns of the
../singular_texi/reference.tex(,510) displayed matrix and degrees are assigned such that the corresponding maps
../singular_texi/reference.tex(,511) have degree 0:
../singular_texi/reference.tex(,512) @tex
../singular_texi/reference.tex(,513) $$
../singular_texi/reference.tex(,514) 0 \longleftarrow r/j \longleftarrow r(1)
../singular_texi/reference.tex(,515) \buildrel{T[1]}\over{\longleftarrow} r(2) \oplus r^3(3)
../singular_texi/reference.tex(,516) \buildrel{T[2]}\over{\longleftarrow} r^4(4)
../singular_texi/reference.tex(,517) \buildrel{T[3]}\over{\longleftarrow} r(5)
../singular_texi/reference.tex(,518) \longleftarrow 0 \quad .
../singular_texi/reference.tex(,519) $$
../singular_texi/reference.tex(,520) @end tex
../singular_texi/reference.tex(,525) 
../singular_texi/reference.tex(,526) @c inserted refs from reference.doc:455
../singular_texi/reference.tex(,541) See
../singular_texi/reference.tex(,542) @ref{Syzygies and resolutions};
../singular_texi/reference.tex(,543) @ref{hres};
../singular_texi/reference.tex(,544) @ref{lres};
../singular_texi/reference.tex(,545) @ref{mres};
../singular_texi/reference.tex(,546) @ref{print};
../singular_texi/reference.tex(,547) @ref{res};
../singular_texi/reference.tex(,548) @ref{resolution};
../singular_texi/reference.tex(,549) @ref{sres}.
../singular_texi/reference.tex(,551) @c end inserted refs from reference.doc:455
../singular_texi/reference.tex(,552) @c ---------------------------------------
../singular_texi/reference.tex(,553) @node char, char_series, betti, Functions
../singular_texi/reference.tex(,554) @subsection char
../singular_texi/reference.tex(,555) @cindex char
../singular_texi/reference.tex(,556) 
../singular_texi/reference.tex(,557) @table @code
../singular_texi/reference.tex(,558) @item @strong{Syntax:}
../singular_texi/reference.tex(,559) @code{char (} ring_name @code{)}
../singular_texi/reference.tex(,560) @item @strong{Type:}
../singular_texi/reference.tex(,561) int
../singular_texi/reference.tex(,562) @item @strong{Purpose:}
../singular_texi/reference.tex(,563) returns the characteristic of the coefficient field of a ring.
../singular_texi/reference.tex(,564) @item @strong{Example:}
../singular_texi/reference.tex(,565) @smallexample
../singular_texi/reference.tex(,566) @c reused example char reference.doc:480 
../singular_texi/reference.tex(,567)   ring r=32003,(x,y),dp;
../singular_texi/reference.tex(,568)   char(r);
../singular_texi/reference.tex(,569) @expansion{} 32003
../singular_texi/reference.tex(,570)   ring s=0,(x,y),dp;
../singular_texi/reference.tex(,571)   char(s);
../singular_texi/reference.tex(,572) @expansion{} 0
../singular_texi/reference.tex(,573)   ring ra=(7,a),(x,y),dp;
../singular_texi/reference.tex(,574)   minpoly=a^3+a+1;
../singular_texi/reference.tex(,575)   char(ra);
../singular_texi/reference.tex(,576) @expansion{} 7
../singular_texi/reference.tex(,577)   ring rp=(49,a),(x,y),dp;
../singular_texi/reference.tex(,578)   char(rp);
../singular_texi/reference.tex(,579) @expansion{} 7
../singular_texi/reference.tex(,580)   ring rr=real,x,dp;
../singular_texi/reference.tex(,581)   char(rr);
../singular_texi/reference.tex(,582) @expansion{} 0
../singular_texi/reference.tex(,583) @c end example char reference.doc:480
../singular_texi/reference.tex(,584) @end smallexample
../singular_texi/reference.tex(,585) @end table
../singular_texi/reference.tex(,586) @c inserted refs from reference.doc:495
../singular_texi/reference.tex(,595) See
../singular_texi/reference.tex(,596) @ref{charstr};
../singular_texi/reference.tex(,597) @ref{ring}.
../singular_texi/reference.tex(,599) @c end inserted refs from reference.doc:495
../singular_texi/reference.tex(,600) @c ---------------------------------------
../singular_texi/reference.tex(,601) @node char_series, charstr, char, Functions
../singular_texi/reference.tex(,602) @subsection char_series
../singular_texi/reference.tex(,603) @cindex char_series
../singular_texi/reference.tex(,604) 
../singular_texi/reference.tex(,605) @table @code
../singular_texi/reference.tex(,606) @item @strong{Syntax:}
../singular_texi/reference.tex(,607) @code{char_series (} ideal_expression @code{)}
../singular_texi/reference.tex(,608) @item @strong{Type:}
../singular_texi/reference.tex(,609) matrix
../singular_texi/reference.tex(,610) @item @strong{Purpose:}
../singular_texi/reference.tex(,611) the rows of the matrix represent the irreducible characteristic series of the
../singular_texi/reference.tex(,612) ideal with respect to the current ordering of variables.
../singular_texi/reference.tex(,613) @*One application is the decomposition of the zero-set.
../singular_texi/reference.tex(,614) @item @strong{Example:}
../singular_texi/reference.tex(,615) @smallexample
../singular_texi/reference.tex(,616) @c reused example char_series reference.doc:516 
../singular_texi/reference.tex(,617)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,618)   print(char_series(ideal(xyz,xz,y)));
../singular_texi/reference.tex(,619) @expansion{} y,z,
../singular_texi/reference.tex(,620) @expansion{} x,y 
../singular_texi/reference.tex(,621) @c end example char_series reference.doc:516
../singular_texi/reference.tex(,622) @end smallexample
../singular_texi/reference.tex(,623) @c @item @strong{Background:}
../singular_texi/reference.tex(,624) @c @tex
../singular_texi/reference.tex(,625) @c Let $>$ be the lexicographical ordering $x_1 < ... < x_n$ on $R=K[x_1,...,x_n]$.
../singular_texi/reference.tex(,626) @c For $f \in R$ let lvar(f) (the leading variable of f) be the largest
../singular_texi/reference.tex(,627) @c variable in lead(f) (the leading term of f with respect to $>$),
../singular_texi/reference.tex(,628) @c i.e., if $f=a_k(x_1,...,x_{k-1})x_k^s+...+a_0(x_1,...,x_{k-1})$ for some
../singular_texi/reference.tex(,629) @c $k \leq n$ then $lvar(f)=x_k$, moreover let $ini(f):=a_k(x_1,...,x_{k-1})$.
../singular_texi/reference.tex(,630) @c
../singular_texi/reference.tex(,631) @c A set $T=\{f_1,...,f_r\} \subset R$ is called triangular if $lvar(f_1)<...<lvar(f_r)$.
../singular_texi/reference.tex(,632) @c The pseudo remainder $r=prem(g,f)$ of $g$ with respect to $f$ is defined by
../singular_texi/reference.tex(,633) @c $ini(f)^a*g=q*f+r$ with the property $deg_{lvar(f)}(r)<deg_{lvar(f)}(f)$,
../singular_texi/reference.tex(,634) @c a minimal.
../singular_texi/reference.tex(,635) @c
../singular_texi/reference.tex(,636) @c (T,U) is called a triangular system, if T is a triangular set such that ini(T)
../singular_texi/reference.tex(,637) @c does not vanish on $Zero(T) \setminus Zero(U)
../singular_texi/reference.tex(,638) @c ( =:Zero(T\setminus U))$.
../singular_texi/reference.tex(,639) @c
../singular_texi/reference.tex(,640) @c T is called irreducible if for every i there are no $d_i$,$f_i'$,$f_i''$ with
../singular_texi/reference.tex(,641) @c the property:
../singular_texi/reference.tex(,642) @c $$   lvar(d_i)<lvar(f_i) $$
../singular_texi/reference.tex(,643) @c $$   lvar(f_i')=lvar(f_i'')=lvar(f_i)$$
../singular_texi/reference.tex(,644) @c $$   0 \not\in prem(\{ d_i, ini(f_i'), ini(f_i'')\},\{ f_1,...,f_(i-1)\})$$
../singular_texi/reference.tex(,645) @c such that $prem(d_i*f_i-f_i'*f_i'',\{f_1,...,f_(i-1)\})=0$.
../singular_texi/reference.tex(,646) @c
../singular_texi/reference.tex(,647) @c (T,U) is irreducible if T is irreducible.
../singular_texi/reference.tex(,648) @c
../singular_texi/reference.tex(,649) @c Let $G=\{g_1,...,g_s\}$ then there are irreducible triangular sets $T_1,...,T_l$
../singular_texi/reference.tex(,650) @c such that $Zero(G)=\bigcup(i=1..l: Zero(T_i\setminus I_i))$
../singular_texi/reference.tex(,651) @c where $I_i=\{ini(f), f \in T_i \}$.
../singular_texi/reference.tex(,652) @c @end tex
../singular_texi/reference.tex(,653) @c @ifinfo
../singular_texi/reference.tex(,654) @c Let > be the lexicographical ordering x_1 < ... < x_n on R=K[x_1,...,x_n].
../singular_texi/reference.tex(,655) @c For f in R let lvar(f) (the leading variable of f) be the largest
../singular_texi/reference.tex(,656) @c variable in lead(f) (the leading term of f with respect to >),
../singular_texi/reference.tex(,657) @c i.e., if f=a_k(x_1,...,x_(k-1))x_k^s+...+a_0(x_1,...,x_(k-1)) for some
../singular_texi/reference.tex(,658) @c k<=n then lvar(f)=x_k, moreover let ini(f):=a_k(x_1,...,x_(k-1)).
../singular_texi/reference.tex(,659) @c
../singular_texi/reference.tex(,660) @c A set T=@{f_1,...,f_r@} in R is called triangular if lvar(f_1)<...<lvar(f_r).
../singular_texi/reference.tex(,661) @c The pseudo remainder r=prem(g,f) of g with respect to f is defined by
../singular_texi/reference.tex(,662) @c ini(f)^a*g=q*f+r with the property deg_(lvar(f))(r)<deg_(lvar(f))(f),s
../singular_texi/reference.tex(,663) @c a minimal.
../singular_texi/reference.tex(,664) @c
../singular_texi/reference.tex(,665) @c (T,U) is called a triangular system, if T is a triangular set such that ini(T)
../singular_texi/reference.tex(,666) @c does not vanish on the zero-set of T \ zero-set of U
../singular_texi/reference.tex(,667) @c ( =:Zero(T\U)).
../singular_texi/reference.tex(,668) @c
../singular_texi/reference.tex(,669) @c T is called irreducible if for every i there are no d_i,f_i',f_i'' with
../singular_texi/reference.tex(,670) @c the property:
../singular_texi/reference.tex(,671) @c @*   lvar(d_i)<lvar(f_i)
../singular_texi/reference.tex(,672) @c @*   lvar(f_i')=lvar(f_i'')=lvar(f_i)
../singular_texi/reference.tex(,673) @c @*   0 not in prem(@{ d_i, ini(f_i'), ini(f_i'')@},@{ f_1,...,f_(i-1)@})
../singular_texi/reference.tex(,674) @c @*such that prem(d_i*f_i-f_i'*f_i'',@{f_1,...,f_(i-1)@})=0.
../singular_texi/reference.tex(,675) @c
../singular_texi/reference.tex(,676) @c (T,U) is irreducible if T is irreducible.
../singular_texi/reference.tex(,677) @c
../singular_texi/reference.tex(,678) @c Let G=@{g_1,...,g_s@} then there are irreducible triangular sets T_1,...,T_l
../singular_texi/reference.tex(,679) @c such that Zero(G)=Union(i=1..l: Zero(T_i\I_i))
../singular_texi/reference.tex(,680) @c where I_i=@{ini(f), f in T_i @}.
../singular_texi/reference.tex(,681) @c @end ifinfo
../singular_texi/reference.tex(,682) @c @item @strong{Example:}
../singular_texi/reference.tex(,683) @c @example
../singular_texi/reference.tex(,684) @c @c example
../singular_texi/reference.tex(,685) @c   ring R=0,(x,y,z,u),dp;
../singular_texi/reference.tex(,686) @c   ideal i=-3zu+y2-2x+2,
../singular_texi/reference.tex(,687) @c           -3x2u-4yz-6xz+2y2+3xy,
../singular_texi/reference.tex(,688) @c           -3z2u-xu+y2z+y;
../singular_texi/reference.tex(,689) @c   print(char_series(i));
../singular_texi/reference.tex(,690) @c @c example
../singular_texi/reference.tex(,691) @c @end example
../singular_texi/reference.tex(,692) @end table
../singular_texi/reference.tex(,693) 
../singular_texi/reference.tex(,694) @c inserted refs from reference.doc:592
../singular_texi/reference.tex(,702) See
../singular_texi/reference.tex(,703) @ref{Characteristic sets}.
../singular_texi/reference.tex(,705) @c end inserted refs from reference.doc:592
../singular_texi/reference.tex(,706) @c ---------------------------------------
../singular_texi/reference.tex(,707) @node charstr, cleardenom, char_series, Functions
../singular_texi/reference.tex(,708) @subsection charstr
../singular_texi/reference.tex(,709) @cindex charstr
../singular_texi/reference.tex(,710) 
../singular_texi/reference.tex(,711) @table @code
../singular_texi/reference.tex(,712) @item @strong{Syntax:}
../singular_texi/reference.tex(,713) @code{charstr (} ring_name @code{)}
../singular_texi/reference.tex(,714) @item @strong{Type:}
../singular_texi/reference.tex(,715) string
../singular_texi/reference.tex(,716) @item @strong{Purpose:}
../singular_texi/reference.tex(,717) returns the description of the coefficient field of a ring.
../singular_texi/reference.tex(,718) @item @strong{Example:}
../singular_texi/reference.tex(,719) @smallexample
../singular_texi/reference.tex(,720) @c reused example charstr reference.doc:610 
../singular_texi/reference.tex(,721)   ring r=32003,(x,y),dp;
../singular_texi/reference.tex(,722)   charstr(r);
../singular_texi/reference.tex(,723) @expansion{} 32003
../singular_texi/reference.tex(,724)   ring s=0,(x,y),dp;
../singular_texi/reference.tex(,725)   charstr(s);
../singular_texi/reference.tex(,726) @expansion{} 0
../singular_texi/reference.tex(,727)   ring ra=(7,a),(x,y),dp;
../singular_texi/reference.tex(,728)   minpoly=a^3+a+1;
../singular_texi/reference.tex(,729)   charstr(ra);
../singular_texi/reference.tex(,730) @expansion{} 7,a
../singular_texi/reference.tex(,731)   ring rp=(49,a),(x,y),dp;
../singular_texi/reference.tex(,732)   charstr(rp);
../singular_texi/reference.tex(,733) @expansion{} 49,a
../singular_texi/reference.tex(,734)   ring rr=real,x,dp;
../singular_texi/reference.tex(,735)   charstr(rr);
../singular_texi/reference.tex(,736) @expansion{} real
../singular_texi/reference.tex(,737) @c end example charstr reference.doc:610
../singular_texi/reference.tex(,738) @end smallexample
../singular_texi/reference.tex(,739) @end table
../singular_texi/reference.tex(,740) @c inserted refs from reference.doc:625
../singular_texi/reference.tex(,751) See
../singular_texi/reference.tex(,752) @ref{char};
../singular_texi/reference.tex(,753) @ref{ordstr};
../singular_texi/reference.tex(,754) @ref{ring};
../singular_texi/reference.tex(,755) @ref{varstr}.
../singular_texi/reference.tex(,757) @c end inserted refs from reference.doc:625
../singular_texi/reference.tex(,758) @c ---------------------------------------
../singular_texi/reference.tex(,759) @node cleardenom, close, charstr, Functions
../singular_texi/reference.tex(,760) @subsection cleardenom
../singular_texi/reference.tex(,761) @cindex cleardenom
../singular_texi/reference.tex(,762) 
../singular_texi/reference.tex(,763) @table @code
../singular_texi/reference.tex(,764) @item @strong{Syntax:}
../singular_texi/reference.tex(,765) @code{cleardenom (} poly_expression @code{)}
../singular_texi/reference.tex(,766) @*@code{cleardenom (} vector_expression @code{)}
../singular_texi/reference.tex(,767) @item @strong{Type:}
../singular_texi/reference.tex(,768) same as the input type
../singular_texi/reference.tex(,769) @item @strong{Purpose:}
../singular_texi/reference.tex(,770) multiplies a polynomial, resp.@: vector, by a suitable constant to cancel
../singular_texi/reference.tex(,771) all denominators from its coefficients and then divide it by its content.
../singular_texi/reference.tex(,772) @item @strong{Example:}
../singular_texi/reference.tex(,773) @smallexample
../singular_texi/reference.tex(,774) @c reused example cleardenom reference.doc:648 
../singular_texi/reference.tex(,775)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,776)   poly f=(3x+6y)^5;
../singular_texi/reference.tex(,777)   f/5;
../singular_texi/reference.tex(,778) @expansion{} 243/5x5+486x4y+1944x3y2+3888x2y3+3888xy4+7776/5y5
../singular_texi/reference.tex(,779)   cleardenom(f/5);
../singular_texi/reference.tex(,780) @expansion{} x5+10x4y+40x3y2+80x2y3+80xy4+32y5
../singular_texi/reference.tex(,781) @c end example cleardenom reference.doc:648
../singular_texi/reference.tex(,782) @end smallexample
../singular_texi/reference.tex(,783) @end table
../singular_texi/reference.tex(,784) @c @c ref
../singular_texi/reference.tex(,785) @c See @ref{poly}.
../singular_texi/reference.tex(,786) @c @c ref
../singular_texi/reference.tex(,787) @c ---------------------------------------
../singular_texi/reference.tex(,788) @node close, coef, cleardenom, Functions
../singular_texi/reference.tex(,789) @subsection close
../singular_texi/reference.tex(,790) @cindex close
../singular_texi/reference.tex(,791) @table @code
../singular_texi/reference.tex(,792) @item @strong{Syntax:}
../singular_texi/reference.tex(,793) @code{close (} link_expression @code{)}
../singular_texi/reference.tex(,794) @item @strong{Type:}
../singular_texi/reference.tex(,795) none
../singular_texi/reference.tex(,796) @item @strong{Purpose:}
../singular_texi/reference.tex(,797) closes a link.
../singular_texi/reference.tex(,798) @item @strong{Example:}
../singular_texi/reference.tex(,799) @smallexample
../singular_texi/reference.tex(,800) link l="MPtcp:launch";
../singular_texi/reference.tex(,801) open(l); // start SINGULAR "server" on localhost in batchmode
../singular_texi/reference.tex(,802) close(l); // shut down SINGULAR server
../singular_texi/reference.tex(,803) @end smallexample
../singular_texi/reference.tex(,804) @end table
../singular_texi/reference.tex(,805) @c inserted refs from reference.doc:677
../singular_texi/reference.tex(,814) See
../singular_texi/reference.tex(,815) @ref{link};
../singular_texi/reference.tex(,816) @ref{open}.
../singular_texi/reference.tex(,818) @c end inserted refs from reference.doc:677
../singular_texi/reference.tex(,819) @c ---------------------------------------
../singular_texi/reference.tex(,820) @node coef, coeffs, close, Functions
../singular_texi/reference.tex(,821) @subsection coef
../singular_texi/reference.tex(,822) @cindex coef
../singular_texi/reference.tex(,823) 
../singular_texi/reference.tex(,824) @table @code
../singular_texi/reference.tex(,825) @item @strong{Syntax:}
../singular_texi/reference.tex(,826) @code{coef (} poly_expression@code{,} product_of_ringvars @code{)}
../singular_texi/reference.tex(,827) @item @strong{Type:}
../singular_texi/reference.tex(,828) matrix
../singular_texi/reference.tex(,829) @item @strong{Syntax:}
../singular_texi/reference.tex(,830) @code{coef (} vector_expression@code{,} product_of_ringvars@code{,} matrix_name@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,831) @item @strong{Type:}
../singular_texi/reference.tex(,832) none
../singular_texi/reference.tex(,833) @item @strong{Purpose:}
../singular_texi/reference.tex(,834) determines the monomials in f divisible by one of the ring variables of m
../singular_texi/reference.tex(,835) (where f is the first argument and m the second argument) and the coefficients
../singular_texi/reference.tex(,836) of these monomials as polynomials in the remaining variables.
../singular_texi/reference.tex(,837) 
../singular_texi/reference.tex(,838) First case:  returns a 2 x n matrix M, n being the number
../singular_texi/reference.tex(,839) of the determined monomials.
../singular_texi/reference.tex(,840) The first row consists of these monomials, the second row
../singular_texi/reference.tex(,841) of the corresponding coefficients of the monomials in f.
../singular_texi/reference.tex(,842) Thus, f = M[1,1]*M[2,1]+...+M[1,n]*M[2,n].
../singular_texi/reference.tex(,843) 
../singular_texi/reference.tex(,844) Second case: the second matrix (i.e., the 4th argument) contains the
../singular_texi/reference.tex(,845) monomials, the first matrix (i.e., the 3rd argument) the corresponding
../singular_texi/reference.tex(,846) coefficients of the monomials in the vector.
../singular_texi/reference.tex(,847) 
../singular_texi/reference.tex(,848) @item @strong{Note:}
../singular_texi/reference.tex(,849) coef considers only monomials which really occur in f (i.e., which are not 0),
../singular_texi/reference.tex(,850) while coeffs (see @ref{coeffs}) returns the coefficient 0 at the
../singular_texi/reference.tex(,851) appropriate place if a monomial is not present.
../singular_texi/reference.tex(,852) 
../singular_texi/reference.tex(,853) @item @strong{Example:}
../singular_texi/reference.tex(,854) @smallexample
../singular_texi/reference.tex(,855) @c reused example coef reference.doc:718 
../singular_texi/reference.tex(,856)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,857)   poly f=x5+5x4y+10x2y3+y5;
../singular_texi/reference.tex(,858)   matrix m=coef(f,y);
../singular_texi/reference.tex(,859)   print(m);
../singular_texi/reference.tex(,860) @expansion{} y5,y3,  y,  1,
../singular_texi/reference.tex(,861) @expansion{} 1, 10x2,5x4,x5
../singular_texi/reference.tex(,862)   f=x20+xyz+xy+x2y+z3;
../singular_texi/reference.tex(,863)   print(coef(f,xy));
../singular_texi/reference.tex(,864) @expansion{} x20,x2y,xy, 1,
../singular_texi/reference.tex(,865) @expansion{} 1,  1,  z+1,z3
../singular_texi/reference.tex(,866)   vector v=[f,zy+77+xy];
../singular_texi/reference.tex(,867)   print(v);
../singular_texi/reference.tex(,868) @expansion{} [x20+x2y+xyz+z3+xy,xy+yz+77]
../singular_texi/reference.tex(,869)   matrix mc; matrix mm;
../singular_texi/reference.tex(,870)   coef(v,y,mc,mm);
../singular_texi/reference.tex(,871)   print(mc);
../singular_texi/reference.tex(,872) @expansion{} x2+xz+x,x20+z3,
../singular_texi/reference.tex(,873) @expansion{} x+z,    77     
../singular_texi/reference.tex(,874)   print(mm);
../singular_texi/reference.tex(,875) @expansion{} y,1,
../singular_texi/reference.tex(,876) @expansion{} y,1 
../singular_texi/reference.tex(,877) @c end example coef reference.doc:718
../singular_texi/reference.tex(,878) @end smallexample
../singular_texi/reference.tex(,879) @end table
../singular_texi/reference.tex(,880) @c inserted refs from reference.doc:734
../singular_texi/reference.tex(,888) See
../singular_texi/reference.tex(,889) @ref{coeffs}.
../singular_texi/reference.tex(,891) @c end inserted refs from reference.doc:734
../singular_texi/reference.tex(,892) @c ---------------------------------------
../singular_texi/reference.tex(,893) @node coeffs, contract, coef, Functions
../singular_texi/reference.tex(,894) @subsection coeffs
../singular_texi/reference.tex(,895) @cindex coeffs
../singular_texi/reference.tex(,896) 
../singular_texi/reference.tex(,897) @table @code
../singular_texi/reference.tex(,898) @item @strong{Syntax:}
../singular_texi/reference.tex(,899) @code{coeffs (} poly_expression @code{,} ring_variable @code{)}
../singular_texi/reference.tex(,900) @*@code{coeffs (} ideal_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,901) @*@code{coeffs (} vector_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,902) @*@code{coeffs (} module_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,903) @*@code{coeffs (} poly_expression@code{,} ring_variable@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,904) @*@code{coeffs (} ideal_expression@code{,} ring_variable@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,905) @*@code{coeffs (} vector_expression@code{,} ring_variable@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,906) @*@code{coeffs (} module_expression@code{,} ring_variable@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,907) @item @strong{Type:}
../singular_texi/reference.tex(,908) matrix
../singular_texi/reference.tex(,909) @item @strong{Purpose:}
../singular_texi/reference.tex(,910) develops each polynomial of the first argument, say J,
../singular_texi/reference.tex(,911) as a univariate polynomial in the given ring_variable,
../singular_texi/reference.tex(,912) say z, and returns the coefficients as a k x d
../singular_texi/reference.tex(,913) matrix M,
../singular_texi/reference.tex(,914) where:
../singular_texi/reference.tex(,915) @format
../singular_texi/reference.tex(,916)     d-1 = maximum z-degree of all occurring polynomials
../singular_texi/reference.tex(,917)       k = 1 if J is a polynomial,
../singular_texi/reference.tex(,918)       k = number of generators  if J is an ideal.
../singular_texi/reference.tex(,919) @end format
../singular_texi/reference.tex(,920) If J is a vector or a module this procedure is repeated for each
../singular_texi/reference.tex(,921) component and the resulting matrices are appended.@*
../singular_texi/reference.tex(,926) @tex
../singular_texi/reference.tex(,927) The third argument is used to return the matrix T of coefficients
../singular_texi/reference.tex(,928) such that {\tt matrix}(J) = T*M.
../singular_texi/reference.tex(,929) @end tex
../singular_texi/reference.tex(,930) @item @strong{Note:}
../singular_texi/reference.tex(,931) @code{coeffs} returns the coefficient 0 at the appropriate place if a monomial
../singular_texi/reference.tex(,932) is not present, while @code{coef} considers only monomials which really occur
../singular_texi/reference.tex(,933) in the given expression. @*
../singular_texi/reference.tex(,934) If
../singular_texi/reference.tex(,935) @tex
../singular_texi/reference.tex(,936) $M=(m_{ij})$
../singular_texi/reference.tex(,937) @end tex
../singular_texi/reference.tex(,941) then the j-th generator of an ideal J is equal to
../singular_texi/reference.tex(,942) @tex
../singular_texi/reference.tex(,943) $$J_j = z^0 \cdot m_{1j} + z^1 \cdot m_{2j} + ... + z^{d-1} \cdot m_{dj},$$
../singular_texi/reference.tex(,944) while for a module J the i-th component of the j-th generator is
../singular_texi/reference.tex(,945) equal to the entry [i,j] of {\tt matrix}(J), and we get
../singular_texi/reference.tex(,946) @end tex
../singular_texi/reference.tex(,956) @tex
../singular_texi/reference.tex(,957) $$ J_{i,j} = z^0 \cdot m_{(i-1)d+1,j} + z^1 \cdot m_{(i-1)d+2,j} + ... +
../singular_texi/reference.tex(,958) z^{d-1} \cdot m_{id,j}.$$
../singular_texi/reference.tex(,959) @end tex
../singular_texi/reference.tex(,968) 
../singular_texi/reference.tex(,969) @item @strong{Example:}
../singular_texi/reference.tex(,970) @smallexample
../singular_texi/reference.tex(,971) @c reused example coeffs reference.doc:817 
../singular_texi/reference.tex(,972)   ring r;
../singular_texi/reference.tex(,973)   poly f=(x+y)^3;
../singular_texi/reference.tex(,974)   matrix M=coeffs(f,y);
../singular_texi/reference.tex(,975)   print(M);
../singular_texi/reference.tex(,976) @expansion{} x3, 
../singular_texi/reference.tex(,977) @expansion{} 3x2,
../singular_texi/reference.tex(,978) @expansion{} 3x, 
../singular_texi/reference.tex(,979) @expansion{} 1   
../singular_texi/reference.tex(,980)   ideal i=f,xyz+z10y4;
../singular_texi/reference.tex(,981)   print(coeffs(i,y));
../singular_texi/reference.tex(,982) @expansion{} x3, 0, 
../singular_texi/reference.tex(,983) @expansion{} 3x2,xz,
../singular_texi/reference.tex(,984) @expansion{} 3x, 0, 
../singular_texi/reference.tex(,985) @expansion{} 1,  0, 
../singular_texi/reference.tex(,986) @expansion{} 0,  z10
../singular_texi/reference.tex(,987) @c end example coeffs reference.doc:817
../singular_texi/reference.tex(,988) @end smallexample
../singular_texi/reference.tex(,989) @item @strong{Syntax:}
../singular_texi/reference.tex(,990) @code{coeffs (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,991) @*@code{coeffs (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,992) @*@code{coeffs (} ideal_expression@code{,} ideal_expression@code{,} product_of_ringvars @code{)}
../singular_texi/reference.tex(,993) @*@code{coeffs (} module_expression@code{,} module_expression@code{,} product_of_ringvars @code{)}
../singular_texi/reference.tex(,994) @item @strong{Type:}
../singular_texi/reference.tex(,995) matrix
../singular_texi/reference.tex(,996) @item @strong{Purpose:}
../singular_texi/reference.tex(,997) let the first argument be M,
../singular_texi/reference.tex(,998) the second argument  be K (a set of monomials, resp.@: vectors with monomial
../singular_texi/reference.tex(,999) entries, in the variables appearing in P),
../singular_texi/reference.tex(,1000) the third argument be the product P of variables to consider (if this
../singular_texi/reference.tex(,1001) argument is not given, then the product of all ring variables is taken
../singular_texi/reference.tex(,1002) as default argument).
../singular_texi/reference.tex(,1003) @*M is supposed to consist of elements of (resp.@: have entries in)
../singular_texi/reference.tex(,1004) a finitely generated module
../singular_texi/reference.tex(,1005) over a ring in the variables not appearing in P. K should contain the
../singular_texi/reference.tex(,1006) generators of M over this smaller ring.
../singular_texi/reference.tex(,1007) Then @code{coeffs(M,K,P)} returns a matrix A of coefficients with K*A=M
../singular_texi/reference.tex(,1008) such that the entries of A do not contain any variable from P.
../singular_texi/reference.tex(,1009) @*If K does not contain all generators that are necessary to express
../singular_texi/reference.tex(,1010) M, then K*A=M' where M' is the part of M that can be expressed.
../singular_texi/reference.tex(,1011) 
../singular_texi/reference.tex(,1012) @item @strong{Example:}
../singular_texi/reference.tex(,1013) @smallexample
../singular_texi/reference.tex(,1014) @c reused example coeffs_1 reference.doc:851 
../singular_texi/reference.tex(,1015)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,1016)   ideal M=x2z+y3,xy;
../singular_texi/reference.tex(,1017)   print(coeffs(M,ideal(x2,xy,y2),xy));
../singular_texi/reference.tex(,1018) @expansion{} z,0,
../singular_texi/reference.tex(,1019) @expansion{} 0,1,
../singular_texi/reference.tex(,1020) @expansion{} 0,0 
../singular_texi/reference.tex(,1021)   print(coeffs(M,ideal(x2,xy,y2)));
../singular_texi/reference.tex(,1022) @expansion{} 0,0,
../singular_texi/reference.tex(,1023) @expansion{} 0,1,
../singular_texi/reference.tex(,1024) @expansion{} 0,0 
../singular_texi/reference.tex(,1025) @c end example coeffs_1 reference.doc:851
../singular_texi/reference.tex(,1026) @end smallexample
../singular_texi/reference.tex(,1027) @end table
../singular_texi/reference.tex(,1028) @c inserted refs from reference.doc:859
../singular_texi/reference.tex(,1037) See
../singular_texi/reference.tex(,1038) @ref{coef};
../singular_texi/reference.tex(,1039) @ref{kbase}.
../singular_texi/reference.tex(,1041) @c end inserted refs from reference.doc:859
../singular_texi/reference.tex(,1042) @c ---------------------------------------
../singular_texi/reference.tex(,1043) @node contract, dbprint, coeffs, Functions
../singular_texi/reference.tex(,1044) @subsection contract
../singular_texi/reference.tex(,1045) @cindex contract
../singular_texi/reference.tex(,1046) 
../singular_texi/reference.tex(,1047) @table @code
../singular_texi/reference.tex(,1048) @item @strong{Syntax:}
../singular_texi/reference.tex(,1049) @code{contract (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,1050) @item @strong{Type:}
../singular_texi/reference.tex(,1051) matrix
../singular_texi/reference.tex(,1052) @item @strong{Purpose:}
../singular_texi/reference.tex(,1053) contracts each of the n elements of the second ideal J
../singular_texi/reference.tex(,1054) by each of the m elements of the first ideal I,
../singular_texi/reference.tex(,1055) producing a m x n matrix.
../singular_texi/reference.tex(,1056) @*Contraction is defined on monomials by:
../singular_texi/reference.tex(,1057) @*
../singular_texi/reference.tex(,1064) @tex
../singular_texi/reference.tex(,1065) $${\rm contract}(x^A ,  x^B) := \cases{ x^{(B-A)}, &if $B\ge A$
../singular_texi/reference.tex(,1066) componentwise\cr 0,&otherwise.\cr}$$
../singular_texi/reference.tex(,1067) @end tex
../singular_texi/reference.tex(,1068) where A and B are the multiexponents of the ring variables represented by
../singular_texi/reference.tex(,1069) @tex
../singular_texi/reference.tex(,1070) $x$.
../singular_texi/reference.tex(,1071) @end tex
../singular_texi/reference.tex(,1075) @code{contract} is extended bilinearly to all polynomials.
../singular_texi/reference.tex(,1076) @item @strong{Example:}
../singular_texi/reference.tex(,1077) @smallexample
../singular_texi/reference.tex(,1078) @c reused example contract reference.doc:900 
../singular_texi/reference.tex(,1079)   ring r=0,(a,b,c,d),dp;
../singular_texi/reference.tex(,1080)   ideal I=a2,a2+bc,abc;
../singular_texi/reference.tex(,1081)   ideal J=a2-bc,abcd;
../singular_texi/reference.tex(,1082)   print(contract(I,J));
../singular_texi/reference.tex(,1083) @expansion{} 1,0, 
../singular_texi/reference.tex(,1084) @expansion{} 0,ad,
../singular_texi/reference.tex(,1085) @expansion{} 0,d  
../singular_texi/reference.tex(,1086) @c end example contract reference.doc:900
../singular_texi/reference.tex(,1087) @end smallexample
../singular_texi/reference.tex(,1088) @end table
../singular_texi/reference.tex(,1089) @c inserted refs from reference.doc:908
../singular_texi/reference.tex(,1097) See
../singular_texi/reference.tex(,1098) @ref{diff}.
../singular_texi/reference.tex(,1100) @c end inserted refs from reference.doc:908
../singular_texi/reference.tex(,1101) @c ---------------------------------------
../singular_texi/reference.tex(,1102) @node dbprint, defined, contract, Functions
../singular_texi/reference.tex(,1103) @subsection dbprint
../singular_texi/reference.tex(,1104) @cindex dbprint
../singular_texi/reference.tex(,1105) @table @code
../singular_texi/reference.tex(,1106) @item @strong{Syntax:}
../singular_texi/reference.tex(,1107) @code{dbprint (} int_expression@code{,} expression_list @code{)}
../singular_texi/reference.tex(,1108) @item @strong{Type:}
../singular_texi/reference.tex(,1109) none
../singular_texi/reference.tex(,1110) @item @strong{Purpose:}
../singular_texi/reference.tex(,1111) applies the print command to each expression in the expression_list if
../singular_texi/reference.tex(,1112) int_expression is positive.
../singular_texi/reference.tex(,1113) @code{dbprint} may also be used in procedures
../singular_texi/reference.tex(,1114) in order to print results subject to certain
../singular_texi/reference.tex(,1115) conditions.
../singular_texi/reference.tex(,1116) @item @strong{Syntax:}
../singular_texi/reference.tex(,1117) @code{dbprint (} expression @code{)}
../singular_texi/reference.tex(,1118) @item @strong{Type:}
../singular_texi/reference.tex(,1119) none
../singular_texi/reference.tex(,1120) @item @strong{Purpose:}
../singular_texi/reference.tex(,1121) The print command is applied to the expression
../singular_texi/reference.tex(,1122) if @code{printlevel>=voice}.
../singular_texi/reference.tex(,1123) @item @strong{Note:}
../singular_texi/reference.tex(,1124) @xref{Guidelines for writing a library}, for an example how this is used
../singular_texi/reference.tex(,1125) for displaying comments while procedures are executed.
../singular_texi/reference.tex(,1126) @item @strong{Example:}
../singular_texi/reference.tex(,1127) @smallexample
../singular_texi/reference.tex(,1128) @c reused example dbprint reference.doc:939 
../singular_texi/reference.tex(,1129)   int debug=0;
../singular_texi/reference.tex(,1130)   intvec i=1,2,3;
../singular_texi/reference.tex(,1131)   dbprint(debug,i);
../singular_texi/reference.tex(,1132)   debug=1;
../singular_texi/reference.tex(,1133)   dbprint(debug,i);
../singular_texi/reference.tex(,1134) @expansion{} 1,2,3
../singular_texi/reference.tex(,1135)   voice;
../singular_texi/reference.tex(,1136) @expansion{} 1
../singular_texi/reference.tex(,1137)   printlevel;
../singular_texi/reference.tex(,1138) @expansion{} 0
../singular_texi/reference.tex(,1139)   dbprint(i);
../singular_texi/reference.tex(,1140) @c end example dbprint reference.doc:939
../singular_texi/reference.tex(,1141) @end smallexample
../singular_texi/reference.tex(,1142) @end table
../singular_texi/reference.tex(,1143) @c inserted refs from reference.doc:951
../singular_texi/reference.tex(,1154) See
../singular_texi/reference.tex(,1155) @ref{Debugging tools};
../singular_texi/reference.tex(,1156) @ref{print};
../singular_texi/reference.tex(,1157) @ref{printlevel};
../singular_texi/reference.tex(,1158) @ref{voice}.
../singular_texi/reference.tex(,1160) @c end inserted refs from reference.doc:951
../singular_texi/reference.tex(,1161) @c ---------------------------------------
../singular_texi/reference.tex(,1162) @node defined, deg, dbprint, Functions
../singular_texi/reference.tex(,1163) @subsection defined
../singular_texi/reference.tex(,1164) @cindex defined
../singular_texi/reference.tex(,1165) 
../singular_texi/reference.tex(,1166) @table @code
../singular_texi/reference.tex(,1167) @item @strong{Syntax:}
../singular_texi/reference.tex(,1168) @code{defined (} name @code{)}
../singular_texi/reference.tex(,1169) @item @strong{Type:}
../singular_texi/reference.tex(,1170) int
../singular_texi/reference.tex(,1171) @item @strong{Purpose:}
../singular_texi/reference.tex(,1172) returns a value <>0 (TRUE) if there is a user-defined object with this name,
../singular_texi/reference.tex(,1173) and 0 (FALSE) otherwise.
../singular_texi/reference.tex(,1174) @*A non-zero return value is the level where the object is defined (level
../singular_texi/reference.tex(,1175) 1 denotes the top level, level 2 the level of a first procedure, level 3
../singular_texi/reference.tex(,1176) the level of a procedure called by a first procedure, etc.). For ring
../singular_texi/reference.tex(,1177) variables, -1 is returned.
../singular_texi/reference.tex(,1178) @item @strong{Note:}
../singular_texi/reference.tex(,1179) A local object @code{m} may be identified by @code{if
../singular_texi/reference.tex(,1180) (defined(m)==voice)}.
../singular_texi/reference.tex(,1181) @item @strong{Example:}
../singular_texi/reference.tex(,1182) @smallexample
../singular_texi/reference.tex(,1183) @c reused example defined reference.doc:980 
../singular_texi/reference.tex(,1184)   ring r=(0,t),(x,y),dp;
../singular_texi/reference.tex(,1185)   matrix m[5][6]=x,y,1,2,0,x+y;
../singular_texi/reference.tex(,1186)   defined(mm);
../singular_texi/reference.tex(,1187) @expansion{} 0
../singular_texi/reference.tex(,1188)   defined(r) and defined(m);
../singular_texi/reference.tex(,1189) @expansion{} 1
../singular_texi/reference.tex(,1190)   defined(m)==voice;   // m is defined in the current level
../singular_texi/reference.tex(,1191) @expansion{} 1
../singular_texi/reference.tex(,1192)   defined(x);
../singular_texi/reference.tex(,1193) @expansion{} -1
../singular_texi/reference.tex(,1194)   defined(z);
../singular_texi/reference.tex(,1195) @expansion{} 0
../singular_texi/reference.tex(,1196)   defined(t);
../singular_texi/reference.tex(,1197) @expansion{} -1
../singular_texi/reference.tex(,1198)   defined(42);
../singular_texi/reference.tex(,1199) @expansion{} -1
../singular_texi/reference.tex(,1200) @c end example defined reference.doc:980
../singular_texi/reference.tex(,1201) @end smallexample
../singular_texi/reference.tex(,1202) @end table
../singular_texi/reference.tex(,1203) @c inserted refs from reference.doc:993
../singular_texi/reference.tex(,1212) See
../singular_texi/reference.tex(,1213) @ref{rvar};
../singular_texi/reference.tex(,1214) @ref{voice}.
../singular_texi/reference.tex(,1216) @c end inserted refs from reference.doc:993
../singular_texi/reference.tex(,1217) @c ---------------------------------------
../singular_texi/reference.tex(,1218) @node deg, degree, defined, Functions
../singular_texi/reference.tex(,1219) @subsection deg
../singular_texi/reference.tex(,1220) @cindex deg
../singular_texi/reference.tex(,1221) 
../singular_texi/reference.tex(,1222) @table @code
../singular_texi/reference.tex(,1223) @item @strong{Syntax:}
../singular_texi/reference.tex(,1224) @code{deg (} poly_expression @code{)}
../singular_texi/reference.tex(,1225) @*@code{deg (} vector_expression @code{)}
../singular_texi/reference.tex(,1226) @*@code{deg (} poly_expression @code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,1227) @*@code{deg (} vector_expression @code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,1228) @item @strong{Type:}
../singular_texi/reference.tex(,1229) int
../singular_texi/reference.tex(,1230) @item @strong{Purpose:}
../singular_texi/reference.tex(,1231) returns the maximal (weighted) degree of
../singular_texi/reference.tex(,1232) the terms of a polynomial or a vector;
../singular_texi/reference.tex(,1233) @*deg(0) is -1.
../singular_texi/reference.tex(,1234) @*The optional second argument gives the weight vector,
../singular_texi/reference.tex(,1235) the default weights of the base ring will be used otherwise.
../singular_texi/reference.tex(,1236) @item @strong{Example:}
../singular_texi/reference.tex(,1237) @smallexample
../singular_texi/reference.tex(,1238) @c reused example deg reference.doc:1019 
../singular_texi/reference.tex(,1239)   ring r=0,(x,y,z),lp;
../singular_texi/reference.tex(,1240)   deg(0);
../singular_texi/reference.tex(,1241) @expansion{} -1
../singular_texi/reference.tex(,1242)   deg(x3+y4+xyz3);
../singular_texi/reference.tex(,1243) @expansion{} 5
../singular_texi/reference.tex(,1244)   ring rr=7,(x,y),wp(2,3);
../singular_texi/reference.tex(,1245)   poly f=x2+y3;
../singular_texi/reference.tex(,1246)   deg(f);
../singular_texi/reference.tex(,1247) @expansion{} 9
../singular_texi/reference.tex(,1248)   ring R=7,(x,y),ws(2,3);
../singular_texi/reference.tex(,1249)   poly f=x2+y3;
../singular_texi/reference.tex(,1250)   deg(f);
../singular_texi/reference.tex(,1251) @expansion{} 9
../singular_texi/reference.tex(,1252)   vector v=[x2,y];
../singular_texi/reference.tex(,1253)   deg(v);
../singular_texi/reference.tex(,1254) @expansion{} 4
../singular_texi/reference.tex(,1255) @c end example deg reference.doc:1019
../singular_texi/reference.tex(,1256) @end smallexample
../singular_texi/reference.tex(,1257) @end table
../singular_texi/reference.tex(,1258) @c inserted refs from reference.doc:1034
../singular_texi/reference.tex(,1269) See
../singular_texi/reference.tex(,1270) @ref{jet};
../singular_texi/reference.tex(,1271) @ref{ord};
../singular_texi/reference.tex(,1272) @ref{poly};
../singular_texi/reference.tex(,1273) @ref{vector}.
../singular_texi/reference.tex(,1275) @c end inserted refs from reference.doc:1034
../singular_texi/reference.tex(,1276) @c ---------------------------------------
../singular_texi/reference.tex(,1277) @node degree, delete, deg, Functions
../singular_texi/reference.tex(,1278) @subsection degree
../singular_texi/reference.tex(,1279) @cindex degree
../singular_texi/reference.tex(,1280) @table @code
../singular_texi/reference.tex(,1281) @item @strong{Syntax:}
../singular_texi/reference.tex(,1282) @code{degree (} ideal_expression @code{)}
../singular_texi/reference.tex(,1283) @*@code{degree (} module_expression @code{)}
../singular_texi/reference.tex(,1284) @item @strong{Type:}
../singular_texi/reference.tex(,1285) int
../singular_texi/reference.tex(,1286) @item @strong{Purpose:}
../singular_texi/reference.tex(,1287) computes the (weighted) degree of the projective
../singular_texi/reference.tex(,1288) variety, respectively sheaf over the projective variety, defined by the ideal,
../singular_texi/reference.tex(,1289) respectively module, generated by the leading monomials of the input.  
../singular_texi/reference.tex(,1290) This is equal to the
../singular_texi/reference.tex(,1291) (weighted) degree of the projective variety, respectively
../singular_texi/reference.tex(,1292) sheaf over the projective variety, defined by the ideal,
../singular_texi/reference.tex(,1293) respectively module, if the 
../singular_texi/reference.tex(,1294) input is a standard basis with respect to a (weighted) degree ordering. 
../singular_texi/reference.tex(,1295) @item @strong{Example:}
../singular_texi/reference.tex(,1296) @smallexample
../singular_texi/reference.tex(,1297) ring r3=32003,(x,y,z,h),dp;
../singular_texi/reference.tex(,1298) int a,b,c,t=11,10,3,1;
../singular_texi/reference.tex(,1299) poly f=x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3
../singular_texi/reference.tex(,1300)   +x^(c-2)*y^c*(y2+t*x)^2;
../singular_texi/reference.tex(,1301) ideal i=jacob(f);
../singular_texi/reference.tex(,1302) i=homog(i,h);
../singular_texi/reference.tex(,1303) ideal i0=std(i);
../singular_texi/reference.tex(,1304) degree(i0);
../singular_texi/reference.tex(,1305) @expansion{} 720 
../singular_texi/reference.tex(,1306) @end smallexample
../singular_texi/reference.tex(,1307) @end table
../singular_texi/reference.tex(,1308) @c inserted refs from reference.doc:1073
../singular_texi/reference.tex(,1320) See
../singular_texi/reference.tex(,1321) @ref{dim};
../singular_texi/reference.tex(,1322) @ref{ideal};
../singular_texi/reference.tex(,1323) @ref{mult};
../singular_texi/reference.tex(,1324) @ref{std};
../singular_texi/reference.tex(,1325) @ref{vdim}.
../singular_texi/reference.tex(,1327) @c end inserted refs from reference.doc:1073
../singular_texi/reference.tex(,1328) @c ---------------------------------------
../singular_texi/reference.tex(,1329) @node delete, det, degree, Functions
../singular_texi/reference.tex(,1330) @subsection delete
../singular_texi/reference.tex(,1331) @cindex delete
../singular_texi/reference.tex(,1332) 
../singular_texi/reference.tex(,1333) @table @code
../singular_texi/reference.tex(,1334) @item @strong{Syntax:}
../singular_texi/reference.tex(,1335) @code{delete (} list_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,1336) @item @strong{Type:}
../singular_texi/reference.tex(,1337) list
../singular_texi/reference.tex(,1338) @item @strong{Purpose:}
../singular_texi/reference.tex(,1339) deletes the element with the given index from a list (the input is not changed).
../singular_texi/reference.tex(,1340) @item @strong{Example:}
../singular_texi/reference.tex(,1341) @smallexample
../singular_texi/reference.tex(,1342) @c reused example delete reference.doc:1095 
../singular_texi/reference.tex(,1343)   list l="a","b","c";
../singular_texi/reference.tex(,1344)   list l1=delete(l,2);l1;
../singular_texi/reference.tex(,1345) @expansion{} [1]:
../singular_texi/reference.tex(,1346) @expansion{}    a
../singular_texi/reference.tex(,1347) @expansion{} [2]:
../singular_texi/reference.tex(,1348) @expansion{}    c
../singular_texi/reference.tex(,1349)   l;
../singular_texi/reference.tex(,1350) @expansion{} [1]:
../singular_texi/reference.tex(,1351) @expansion{}    a
../singular_texi/reference.tex(,1352) @expansion{} [2]:
../singular_texi/reference.tex(,1353) @expansion{}    b
../singular_texi/reference.tex(,1354) @expansion{} [3]:
../singular_texi/reference.tex(,1355) @expansion{}    c
../singular_texi/reference.tex(,1356) @c end example delete reference.doc:1095
../singular_texi/reference.tex(,1357) @end smallexample
../singular_texi/reference.tex(,1358) @end table
../singular_texi/reference.tex(,1359) @c inserted refs from reference.doc:1102
../singular_texi/reference.tex(,1368) See
../singular_texi/reference.tex(,1369) @ref{insert};
../singular_texi/reference.tex(,1370) @ref{list}.
../singular_texi/reference.tex(,1372) @c end inserted refs from reference.doc:1102
../singular_texi/reference.tex(,1373) @c ---------------------------------------
../singular_texi/reference.tex(,1374) @node det, diff, delete, Functions
../singular_texi/reference.tex(,1375) @subsection det
../singular_texi/reference.tex(,1376) @cindex det
../singular_texi/reference.tex(,1377) 
../singular_texi/reference.tex(,1378) @table @code
../singular_texi/reference.tex(,1379) @item @strong{Syntax:}
../singular_texi/reference.tex(,1380) @code{det (} intmat_expression @code{)}
../singular_texi/reference.tex(,1381) @*@code{det (} matrix_expression @code{)}
../singular_texi/reference.tex(,1382) @*@code{det (} module_expression @code{)}
../singular_texi/reference.tex(,1383) @item @strong{Type:}
../singular_texi/reference.tex(,1384) int, resp.@: poly
../singular_texi/reference.tex(,1385) @item @strong{Purpose:}
../singular_texi/reference.tex(,1386) returns the determinant of a square matrix. A module is considered
../singular_texi/reference.tex(,1387) as a matrix. The applied algorithms depend on type of input.
../singular_texi/reference.tex(,1388) If the input is a module or matrix with symbolic entries the
../singular_texi/reference.tex(,1389) Bareiss algorithm is used. In the other cases the chinese remainder
../singular_texi/reference.tex(,1390) algorithm is used. For large sparse problems the input as a module
../singular_texi/reference.tex(,1391) has advantages.
../singular_texi/reference.tex(,1392) @item @strong{Example:}
../singular_texi/reference.tex(,1393) @smallexample
../singular_texi/reference.tex(,1394) @c reused example det reference.doc:1128 
../singular_texi/reference.tex(,1395)   ring r=7,(x,y),wp(2,3);
../singular_texi/reference.tex(,1396)   matrix m[3][3]=1,2,3,4,5,6,7,8,x;
../singular_texi/reference.tex(,1397)   det(m);
../singular_texi/reference.tex(,1398) @expansion{} -3x-1
../singular_texi/reference.tex(,1399) @c end example det reference.doc:1128
../singular_texi/reference.tex(,1400) @end smallexample
../singular_texi/reference.tex(,1401) @end table
../singular_texi/reference.tex(,1402) @c inserted refs from reference.doc:1135
../singular_texi/reference.tex(,1412) See
../singular_texi/reference.tex(,1413) @ref{intmat};
../singular_texi/reference.tex(,1414) @ref{matrix};
../singular_texi/reference.tex(,1415) @ref{minor}.
../singular_texi/reference.tex(,1417) @c end inserted refs from reference.doc:1135
../singular_texi/reference.tex(,1418) @c ---------------------------------------
../singular_texi/reference.tex(,1419) @node diff, dim, det, Functions
../singular_texi/reference.tex(,1420) @subsection diff
../singular_texi/reference.tex(,1421) @cindex diff
../singular_texi/reference.tex(,1422) 
../singular_texi/reference.tex(,1423) @table @code
../singular_texi/reference.tex(,1424) @item @strong{Syntax:}
../singular_texi/reference.tex(,1425) @code{diff (} poly_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,1426) @*@code{diff (} vector_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,1427) @*@code{diff (} ideal_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,1428) @*@code{diff (} module_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,1429) @*@code{diff (} matrix_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,1430) @item @strong{Type:}
../singular_texi/reference.tex(,1431) the same as the type of the first argument
../singular_texi/reference.tex(,1432) @item @strong{Syntax:}
../singular_texi/reference.tex(,1433) @code{diff (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,1434) @item @strong{Type:}
../singular_texi/reference.tex(,1435) matrix
../singular_texi/reference.tex(,1436) @item @strong{Purpose:}
../singular_texi/reference.tex(,1437) computes the partial derivative of a polynomial object by a ring variable
../singular_texi/reference.tex(,1438) (first forms)
../singular_texi/reference.tex(,1439) @*respectively differentiates each polynomial (1..n) of the second ideal
../singular_texi/reference.tex(,1440) by the differential operator corresponding to each polynomial (1..m) in the first
../singular_texi/reference.tex(,1441) ideal, producing an m x n matrix.
../singular_texi/reference.tex(,1442) @item @strong{Example:}
../singular_texi/reference.tex(,1443) @smallexample
../singular_texi/reference.tex(,1444) @c reused example diff reference.doc:1167 
../singular_texi/reference.tex(,1445)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,1446)   poly f=2x3y+3z5;
../singular_texi/reference.tex(,1447)   diff(f,x);
../singular_texi/reference.tex(,1448) @expansion{} 6x2y
../singular_texi/reference.tex(,1449)   vector v=[f,y2+z];
../singular_texi/reference.tex(,1450)   diff(v,z);
../singular_texi/reference.tex(,1451) @expansion{} 15z4*gen(1)+gen(2)
../singular_texi/reference.tex(,1452)   ideal j=x2-yz,xyz;
../singular_texi/reference.tex(,1453)   ideal i=x2,x2+yz,xyz;
../singular_texi/reference.tex(,1454)   // corresponds to differential operators
../singular_texi/reference.tex(,1455)   // d2/dx2, d2/dx2+d2/dydz, d3/dxdydz:
../singular_texi/reference.tex(,1456)   print(diff(i,j));
../singular_texi/reference.tex(,1457) @expansion{} 2,0,
../singular_texi/reference.tex(,1458) @expansion{} 1,x,
../singular_texi/reference.tex(,1459) @expansion{} 0,1 
../singular_texi/reference.tex(,1460) @c end example diff reference.doc:1167
../singular_texi/reference.tex(,1461) @end smallexample
../singular_texi/reference.tex(,1462) @end table
../singular_texi/reference.tex(,1463) @c inserted refs from reference.doc:1181
../singular_texi/reference.tex(,1478) See
../singular_texi/reference.tex(,1479) @ref{contract};
../singular_texi/reference.tex(,1480) @ref{ideal};
../singular_texi/reference.tex(,1481) @ref{jacob};
../singular_texi/reference.tex(,1482) @ref{matrix};
../singular_texi/reference.tex(,1483) @ref{module};
../singular_texi/reference.tex(,1484) @ref{poly};
../singular_texi/reference.tex(,1485) @ref{var};
../singular_texi/reference.tex(,1486) @ref{vector}.
../singular_texi/reference.tex(,1488) @c end inserted refs from reference.doc:1181
../singular_texi/reference.tex(,1489) @c ---------------------------------------
../singular_texi/reference.tex(,1490) @node dim, division, diff, Functions
../singular_texi/reference.tex(,1491) @subsection dim
../singular_texi/reference.tex(,1492) @cindex dim
../singular_texi/reference.tex(,1493) 
../singular_texi/reference.tex(,1494) @table @code
../singular_texi/reference.tex(,1495) @item @strong{Syntax:}
../singular_texi/reference.tex(,1496) @code{dim (} ideal_expression @code{)}
../singular_texi/reference.tex(,1497) @*@code{dim (} module_expression @code{)}
../singular_texi/reference.tex(,1498) @item @strong{Type:}
../singular_texi/reference.tex(,1499) int
../singular_texi/reference.tex(,1500) @item @strong{Purpose:}
../singular_texi/reference.tex(,1501) computes the dimension of the ideal, resp.@: module, generated by
../singular_texi/reference.tex(,1502) the leading monomials of the given generators of the ideal, resp.@: module.
../singular_texi/reference.tex(,1503) This is also the dimension of the ideal if it is represented by
../singular_texi/reference.tex(,1504) a standard basis.
../singular_texi/reference.tex(,1505) @item @strong{Note:}
../singular_texi/reference.tex(,1506) The dimension of an ideal I means
../singular_texi/reference.tex(,1507) the Krull dimension of the basering modulo I.
../singular_texi/reference.tex(,1508) @*The dimension of a
../singular_texi/reference.tex(,1509) module is the dimension of its annihilator ideal.
../singular_texi/reference.tex(,1510) @item @strong{Example:}
../singular_texi/reference.tex(,1511) @smallexample
../singular_texi/reference.tex(,1512) @c reused example dim reference.doc:1215 
../singular_texi/reference.tex(,1513)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,1514)   ideal I=x2-y,x3;
../singular_texi/reference.tex(,1515)   dim(std(I));
../singular_texi/reference.tex(,1516) @expansion{} 1
../singular_texi/reference.tex(,1517) @c end example dim reference.doc:1215
../singular_texi/reference.tex(,1518) @end smallexample
../singular_texi/reference.tex(,1519) @end table
../singular_texi/reference.tex(,1520) @c inserted refs from reference.doc:1222
../singular_texi/reference.tex(,1532) See
../singular_texi/reference.tex(,1533) @ref{degree};
../singular_texi/reference.tex(,1534) @ref{ideal};
../singular_texi/reference.tex(,1535) @ref{mult};
../singular_texi/reference.tex(,1536) @ref{std};
../singular_texi/reference.tex(,1537) @ref{vdim}.
../singular_texi/reference.tex(,1539) @c end inserted refs from reference.doc:1222
../singular_texi/reference.tex(,1540) @c -------------------------------------------------
../singular_texi/reference.tex(,1541) @node division, dump, dim, Functions
../singular_texi/reference.tex(,1542) @subsection division
../singular_texi/reference.tex(,1543) @cindex division
../singular_texi/reference.tex(,1544) @table @code
../singular_texi/reference.tex(,1545) @item @strong{Syntax:}
../singular_texi/reference.tex(,1546) @code{division (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,1547) @*@code{division (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,1548) @*@code{division (} ideal_expression@code{,} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,1549) @*@code{division (} module_expression@code{,} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,1550) @*@code{division (} ideal_expression@code{,} ideal_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,1551) @*@code{division (} module_expression@code{,} module_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,1552) @item @strong{Type:}
../singular_texi/reference.tex(,1553) list
../singular_texi/reference.tex(,1554) @item @strong{Purpose:}
../singular_texi/reference.tex(,1555) @code{division} computes a division with remainder.
../singular_texi/reference.tex(,1556) For two ideals resp.@: modules @code{M} (first argument) and @code{N} (second argument), it returns a list @code{T,R,U} where @code{T} is a matrix, @code{R} is an ideal resp. a module, and @code{U} is a diagonal matrix of units such that @code{matrix(M)*U=matrix(N)*T+matrix(R)} is a standard representation for the normal form @code{R} of @code{M} with respect to a standard basis of @code{N}.
../singular_texi/reference.tex(,1557) @code{division} uses different algorithms depending on whether @code{N} is represented by a standard basis.
../singular_texi/reference.tex(,1558) For a polynomial basering, the matrix @code{U} is the identity matrix.
../singular_texi/reference.tex(,1559) A matrix @code{T} as above is also computed by @code{lift}.
../singular_texi/reference.tex(,1560) @*For additional arguments @code{n} (third argument) and @code{w} (fourth argument), @code{division} returns a list @code{T,R} as above such that @code{matrix(M)=matrix(N)*T+matrix(R)} is a standard representation for the normal form @code{R} of @code{M} with respect to @code{N} up to weighted degree @code{n} with respect to the weight vector @code{w}.
../singular_texi/reference.tex(,1561) The weighted degree of @code{T} and @code{R} respect to @code{w} is at most @code{n}.
../singular_texi/reference.tex(,1562) If the weight vector @code{w} is not given, @code{division} uses the standard weight vector @code{w=1,...,1}.
../singular_texi/reference.tex(,1563) @item @strong{Example:}
../singular_texi/reference.tex(,1564) @smallexample
../singular_texi/reference.tex(,1565) @c reused example division reference.doc:1255 
../singular_texi/reference.tex(,1566) ring R=0,(x,y),ds;
../singular_texi/reference.tex(,1567) poly f=x5+x2y2+y5;
../singular_texi/reference.tex(,1568) division(f,jacob(f));
../singular_texi/reference.tex(,1569) @expansion{} [1]:
../singular_texi/reference.tex(,1570) @expansion{}    _[1,1]=1/5x
../singular_texi/reference.tex(,1571) @expansion{}    _[2,1]=3/10y
../singular_texi/reference.tex(,1572) @expansion{} [2]:
../singular_texi/reference.tex(,1573) @expansion{}    _[1]=-1/2y5
../singular_texi/reference.tex(,1574) @expansion{} [3]:
../singular_texi/reference.tex(,1575) @expansion{}    _[1,1]=1
../singular_texi/reference.tex(,1576) division(f^2,jacob(f));
../singular_texi/reference.tex(,1577) @expansion{} [1]:
../singular_texi/reference.tex(,1578) @expansion{}    _[1,1]=1/20x6-9/80xy5-5/16x7y+5/8x2y6
../singular_texi/reference.tex(,1579) @expansion{}    _[2,1]=1/8x2y3+1/5x5y+1/20y6-3/4x3y4-5/4x6y2-5/16xy7
../singular_texi/reference.tex(,1580) @expansion{} [2]:
../singular_texi/reference.tex(,1581) @expansion{}    _[1]=0
../singular_texi/reference.tex(,1582) @expansion{} [3]:
../singular_texi/reference.tex(,1583) @expansion{}    _[1,1]=1/4-25/16xy
../singular_texi/reference.tex(,1584) division(ideal(f^2),jacob(f),10);
../singular_texi/reference.tex(,1585) @expansion{} // ** _ is no standardbasis
../singular_texi/reference.tex(,1586) @expansion{} [1]:
../singular_texi/reference.tex(,1587) @expansion{}    _[1,1]=-75/8y9
../singular_texi/reference.tex(,1588) @expansion{}    _[2,1]=1/2x2y3+x5y-1/4y6-3/2x3y4+15/4xy7+375/16x2y8
../singular_texi/reference.tex(,1589) @expansion{} [2]:
../singular_texi/reference.tex(,1590) @expansion{}    _[1]=x10+9/4y10
../singular_texi/reference.tex(,1591) @c end example division reference.doc:1255
../singular_texi/reference.tex(,1592) @end smallexample
../singular_texi/reference.tex(,1593) @end table
../singular_texi/reference.tex(,1594) @c inserted refs from reference.doc:1264
../singular_texi/reference.tex(,1604) See
../singular_texi/reference.tex(,1605) @ref{ideal};
../singular_texi/reference.tex(,1606) @ref{lift};
../singular_texi/reference.tex(,1607) @ref{module}.
../singular_texi/reference.tex(,1609) @c end inserted refs from reference.doc:1264
../singular_texi/reference.tex(,1610) @c ---------------------------------------
../singular_texi/reference.tex(,1611) @node dump, eliminate, division, Functions
../singular_texi/reference.tex(,1612) @subsection dump
../singular_texi/reference.tex(,1613) @cindex dump
../singular_texi/reference.tex(,1614) @table @code
../singular_texi/reference.tex(,1615) @item @strong{Syntax:}
../singular_texi/reference.tex(,1616) @code{dump (} link_expression @code{)}
../singular_texi/reference.tex(,1617) @item @strong{Type:}
../singular_texi/reference.tex(,1618) none
../singular_texi/reference.tex(,1619) @item @strong{Purpose:}
../singular_texi/reference.tex(,1620) dumps (i.e., writes in one "message" or "block") the state of the @sc{Singular}
../singular_texi/reference.tex(,1621) session (i.e., all defined variables and their values) to the specified
../singular_texi/reference.tex(,1622) link (which must be either an ASCII or MP link) such that a
../singular_texi/reference.tex(,1623) @code{getdump} can retrieve it later on.
../singular_texi/reference.tex(,1624) @item @strong{Example:}
../singular_texi/reference.tex(,1625) @smallexample
../singular_texi/reference.tex(,1626) @c reused example dump reference.doc:1286 
../singular_texi/reference.tex(,1627)   ring r;
../singular_texi/reference.tex(,1628)   // write the whole session to the file dump.ascii
../singular_texi/reference.tex(,1629)   // in ASCII format
../singular_texi/reference.tex(,1630)   dump(":w dump.ascii");
../singular_texi/reference.tex(,1631)   kill r;                  // kill the basering
../singular_texi/reference.tex(,1632)   // reread the session from the file
../singular_texi/reference.tex(,1633)   // redefining everything which was not explicitly killed before
../singular_texi/reference.tex(,1634)   getdump("dump.ascii");
../singular_texi/reference.tex(,1635) @expansion{} // ** redefining stdfglm **
../singular_texi/reference.tex(,1636) @expansion{} // ** redefining stdhilb **
../singular_texi/reference.tex(,1637) @expansion{} // ** redefining groebner **
../singular_texi/reference.tex(,1638) @expansion{} // ** redefining res **
../singular_texi/reference.tex(,1639) @expansion{} // ** redefining quot **
../singular_texi/reference.tex(,1640) @expansion{} // ** redefining quot1 **
../singular_texi/reference.tex(,1641) @expansion{} // ** redefining quotient0 **
../singular_texi/reference.tex(,1642) @expansion{} // ** redefining quotient1 **
../singular_texi/reference.tex(,1643) @expansion{} // ** redefining quotient2 **
../singular_texi/reference.tex(,1644) @expansion{} // ** redefining quotient3 **
../singular_texi/reference.tex(,1645) @expansion{} // ** redefining quotient5 **
../singular_texi/reference.tex(,1646) @expansion{} // ** redefining quotient4 **
../singular_texi/reference.tex(,1647) @expansion{} // ** redefining intersect1 **
../singular_texi/reference.tex(,1648) @expansion{} // ** redefining sprintf **
../singular_texi/reference.tex(,1649) @expansion{} // ** redefining printf **
../singular_texi/reference.tex(,1650) @expansion{} // ** redefining fprintf **
../singular_texi/reference.tex(,1651)   r;
../singular_texi/reference.tex(,1652) @expansion{} //   characteristic : 32003
../singular_texi/reference.tex(,1653) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,1654) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,1655) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,1656) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,1657) @c end example dump reference.doc:1286
../singular_texi/reference.tex(,1658) @end smallexample
../singular_texi/reference.tex(,1659) @item @strong{Restrictions:}
../singular_texi/reference.tex(,1660) For ASCII links, integer matrices contained in lists are  dumped as
../singular_texi/reference.tex(,1661) integer list elements (and not as integer matrices), and lists of lists
../singular_texi/reference.tex(,1662) are dumped as one flatted list. Furthermore, links
../singular_texi/reference.tex(,1663) themselves are not dumped.
../singular_texi/reference.tex(,1664) @end table
../singular_texi/reference.tex(,1665) @c inserted refs from reference.doc:1304
../singular_texi/reference.tex(,1675) See
../singular_texi/reference.tex(,1676) @ref{getdump};
../singular_texi/reference.tex(,1677) @ref{link};
../singular_texi/reference.tex(,1678) @ref{write}.
../singular_texi/reference.tex(,1680) @c end inserted refs from reference.doc:1304
../singular_texi/reference.tex(,1681) @c ---------------------------------------
../singular_texi/reference.tex(,1682) @node eliminate, eval, dump, Functions
../singular_texi/reference.tex(,1683) @subsection eliminate
../singular_texi/reference.tex(,1684) @cindex eliminate
../singular_texi/reference.tex(,1685) 
../singular_texi/reference.tex(,1686) @table @code
../singular_texi/reference.tex(,1687) @item @strong{Syntax:}
../singular_texi/reference.tex(,1688) @code{eliminate (} ideal_expression@code{,} product_of_ring_variables@code{)}
../singular_texi/reference.tex(,1689) @*@code{eliminate (} module_expression@code{,} product_of_ring_variables@code{)}
../singular_texi/reference.tex(,1690) @*@code{eliminate (} ideal_expression@code{,} product_of_ring_variables@code{,} intvec_hilb @code{)}
../singular_texi/reference.tex(,1691) @*@code{eliminate (} module_expression@code{,} product_of_ring_variables@code{,} intvec_hilb @code{)}
../singular_texi/reference.tex(,1692) @item @strong{Type:}
../singular_texi/reference.tex(,1693) the same as the type of the first argument
../singular_texi/reference.tex(,1694) @item @strong{Purpose:}
../singular_texi/reference.tex(,1695) eliminates variables occurring as factors of the second argument from an
../singular_texi/reference.tex(,1696) ideal, resp.@: module, by intersecting it with the subring not containing
../singular_texi/reference.tex(,1697) these variables.
../singular_texi/reference.tex(,1698) @*@code{eliminate} does not need a special ordering nor a standard basis as input.
../singular_texi/reference.tex(,1699) @item @strong{Note:}
../singular_texi/reference.tex(,1700) Since elimination is expensive, for homogeneous input it might be useful
../singular_texi/reference.tex(,1701) first to compute the Hilbert function of the ideal (first
../singular_texi/reference.tex(,1702) argument) with a fast ordering (e.g., @code{dp}). Then make use of it to speed
../singular_texi/reference.tex(,1703) up the computation: a Hilbert-driven elimination uses the intvec
../singular_texi/reference.tex(,1704) provided as the third argument.
../singular_texi/reference.tex(,1705) @item @strong{Example:}
../singular_texi/reference.tex(,1706) @smallexample
../singular_texi/reference.tex(,1707) @c reused example eliminate reference.doc:1336 
../singular_texi/reference.tex(,1708)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,1709)   ideal i=x2,xy,y5;
../singular_texi/reference.tex(,1710)   eliminate(i,x);
../singular_texi/reference.tex(,1711) @expansion{} _[1]=y5
../singular_texi/reference.tex(,1712)   ring R=0,(x,y,t,s,z),dp;
../singular_texi/reference.tex(,1713)   ideal i=x-t,y-t2,z-t3,s-x+y3;
../singular_texi/reference.tex(,1714)   eliminate(i,ts);
../singular_texi/reference.tex(,1715) @expansion{} _[1]=y2-xz
../singular_texi/reference.tex(,1716) @expansion{} _[2]=xy-z
../singular_texi/reference.tex(,1717) @expansion{} _[3]=x2-y
../singular_texi/reference.tex(,1718)   intvec v=hilb(std(i),1);
../singular_texi/reference.tex(,1719)   eliminate(i,ts,v);
../singular_texi/reference.tex(,1720) @expansion{} _[1]=y2-xz
../singular_texi/reference.tex(,1721) @expansion{} _[2]=xy-z
../singular_texi/reference.tex(,1722) @expansion{} _[3]=x2-y
../singular_texi/reference.tex(,1723) @c end example eliminate reference.doc:1336
../singular_texi/reference.tex(,1724) @end smallexample
../singular_texi/reference.tex(,1725) @end table
../singular_texi/reference.tex(,1726) @c inserted refs from reference.doc:1348
../singular_texi/reference.tex(,1737) See
../singular_texi/reference.tex(,1738) @ref{hilb};
../singular_texi/reference.tex(,1739) @ref{ideal};
../singular_texi/reference.tex(,1740) @ref{module};
../singular_texi/reference.tex(,1741) @ref{std}.
../singular_texi/reference.tex(,1743) @c end inserted refs from reference.doc:1348
../singular_texi/reference.tex(,1744) @c ---------------------------------------
../singular_texi/reference.tex(,1745) @node eval, ERROR, eliminate, Functions
../singular_texi/reference.tex(,1746) @subsection eval
../singular_texi/reference.tex(,1747) @cindex eval
../singular_texi/reference.tex(,1748) @table @code
../singular_texi/reference.tex(,1749) @item @strong{Syntax:}
../singular_texi/reference.tex(,1750) @code{eval (} expression @code{)}
../singular_texi/reference.tex(,1751) @item @strong{Type:}
../singular_texi/reference.tex(,1752) none
../singular_texi/reference.tex(,1753) @item @strong{Purpose:}
../singular_texi/reference.tex(,1754) evaluates (quoted) expressions. Within a quoted expression, the
../singular_texi/reference.tex(,1755) quote can be "undone" by an @code{eval} (i.e., each eval "undoes" the
../singular_texi/reference.tex(,1756) effect of exactly one quote). Used only when receiving a quoted expression
../singular_texi/reference.tex(,1757) from an MPfile link,
../singular_texi/reference.tex(,1758) with @code{quote} and @code{write} to
../singular_texi/reference.tex(,1759) prevent local evaluations  when writing to an MPtcp link.
../singular_texi/reference.tex(,1760) @item @strong{Example:}
../singular_texi/reference.tex(,1761) @smallexample
../singular_texi/reference.tex(,1762) @c @c example unix_only
../singular_texi/reference.tex(,1763)   link l="MPfile:w example.mp";
../singular_texi/reference.tex(,1764)   ring r=0,(x,y,z),ds;
../singular_texi/reference.tex(,1765)   ideal i=maxideal(3);
../singular_texi/reference.tex(,1766)   ideal j=x7,x2,z;
../singular_texi/reference.tex(,1767)   // compute i+j before writing, but not std
../singular_texi/reference.tex(,1768)   // this writes 'std(ideal(x3,...,z))'
../singular_texi/reference.tex(,1769)   write (l, quote(std(eval(i+j))));
../singular_texi/reference.tex(,1770)   option(prot);
../singular_texi/reference.tex(,1771)   close(l);
../singular_texi/reference.tex(,1772)   // now read it in again and evaluate
../singular_texi/reference.tex(,1773)   // read(l) forces to compute 'std(ideal(x3,...,z))'
../singular_texi/reference.tex(,1774)   read(l);
../singular_texi/reference.tex(,1775)   close(l);
../singular_texi/reference.tex(,1776) @c @c example
../singular_texi/reference.tex(,1777) @end smallexample
../singular_texi/reference.tex(,1778) @end table
../singular_texi/reference.tex(,1779) @c inserted refs from reference.doc:1390
../singular_texi/reference.tex(,1789) See
../singular_texi/reference.tex(,1790) @ref{MPfile links};
../singular_texi/reference.tex(,1791) @ref{quote};
../singular_texi/reference.tex(,1792) @ref{write}.
../singular_texi/reference.tex(,1794) @c end inserted refs from reference.doc:1390
../singular_texi/reference.tex(,1795) @c ---------------------------------------
../singular_texi/reference.tex(,1796) @node ERROR, example, eval, Functions
../singular_texi/reference.tex(,1797) @subsection ERROR
../singular_texi/reference.tex(,1798) @cindex ERROR
../singular_texi/reference.tex(,1799) @table @code
../singular_texi/reference.tex(,1800) @item @strong{Syntax:}
../singular_texi/reference.tex(,1801) @code{ERROR (} string_expression @code{)}
../singular_texi/reference.tex(,1802) @item @strong{Type:}
../singular_texi/reference.tex(,1803) none
../singular_texi/reference.tex(,1804) @item @strong{Purpose:}
../singular_texi/reference.tex(,1805) Immediately interrupts the current computation, returns to the
../singular_texi/reference.tex(,1806) top-level, and displays the argument @code{string_expression} as error
../singular_texi/reference.tex(,1807) message.
../singular_texi/reference.tex(,1808) 
../singular_texi/reference.tex(,1809) @item @strong{Note:}
../singular_texi/reference.tex(,1810) This should be used as an emergency, resp.@: failure, exit within procedures.
../singular_texi/reference.tex(,1811) 
../singular_texi/reference.tex(,1812) @item @strong{Example:}
../singular_texi/reference.tex(,1813) @smallexample
../singular_texi/reference.tex(,1814) @c reused example ERROR reference.doc:1415 
../singular_texi/reference.tex(,1815) int i=1;
../singular_texi/reference.tex(,1816) proc myError() @{ERROR("Need to leave now");i=2;@}
../singular_texi/reference.tex(,1817) myError();
../singular_texi/reference.tex(,1818) @expansion{}    ? Need to leave now
../singular_texi/reference.tex(,1819) @expansion{}    ? error occurred in line 2: `ERROR("Need to leave now");i=2;`
../singular_texi/reference.tex(,1820) @expansion{}    ? leaving ::myError
../singular_texi/reference.tex(,1821) @expansion{}    skipping text from `;` error at token `)`
../singular_texi/reference.tex(,1822) i;
../singular_texi/reference.tex(,1823) @expansion{} 1
../singular_texi/reference.tex(,1824) @c end example ERROR reference.doc:1415
../singular_texi/reference.tex(,1825) @end smallexample
../singular_texi/reference.tex(,1826) @end table
../singular_texi/reference.tex(,1827) @c ---------------------------------------
../singular_texi/reference.tex(,1828) @node example, execute, ERROR, Functions
../singular_texi/reference.tex(,1829) @subsection example
../singular_texi/reference.tex(,1830) @cindex example
../singular_texi/reference.tex(,1831) @table @code
../singular_texi/reference.tex(,1832) @item @strong{Syntax:}
../singular_texi/reference.tex(,1833) @code{example} topic @code{;}
../singular_texi/reference.tex(,1834) @item @strong{Purpose:}
../singular_texi/reference.tex(,1835) computes an example for @code{topic}. Examples are available for all
../singular_texi/reference.tex(,1836) @sc{Singular} kernel and library functions. Where available (e.g.,
../singular_texi/reference.tex(,1837) within Emacs), use @code{<TAB>} completion for a list of all available
../singular_texi/reference.tex(,1838) example @code{topic}s.
../singular_texi/reference.tex(,1839) @item @strong{Example:}
../singular_texi/reference.tex(,1840) @smallexample
../singular_texi/reference.tex(,1841) example prime;
../singular_texi/reference.tex(,1842) example intvec_declarations;
../singular_texi/reference.tex(,1843) @end smallexample
../singular_texi/reference.tex(,1844) @end table
../singular_texi/reference.tex(,1845) @c inserted refs from reference.doc:1441
../singular_texi/reference.tex(,1853) @strong{See also:}
../singular_texi/reference.tex(,1854) @ref{help}.
../singular_texi/reference.tex(,1856) @c end inserted refs from reference.doc:1441
../singular_texi/reference.tex(,1857) @c ---------------------------------------
../singular_texi/reference.tex(,1858) @node execute, exit, example, Functions
../singular_texi/reference.tex(,1859) @subsection execute
../singular_texi/reference.tex(,1860) @cindex execute
../singular_texi/reference.tex(,1861) @table @code
../singular_texi/reference.tex(,1862) @item @strong{Syntax:}
../singular_texi/reference.tex(,1863) @code{execute (} string_expression @code{)}
../singular_texi/reference.tex(,1864) @item @strong{Type:}
../singular_texi/reference.tex(,1865) none
../singular_texi/reference.tex(,1866) @item @strong{Purpose:}
../singular_texi/reference.tex(,1867) executes a string containing a sequence of @sc{Singular} commands.
../singular_texi/reference.tex(,1868) @item @strong{Note:}
../singular_texi/reference.tex(,1869) The command @code{return} cannot appear in the string.
../singular_texi/reference.tex(,1870) @* @code{execute} should be avoided in procedures
../singular_texi/reference.tex(,1871) whenever possible, since it may give rise to name conflicts.  Moreover,
../singular_texi/reference.tex(,1872) such procedures cannot be precompiled (a feature which @sc{Singular} will
../singular_texi/reference.tex(,1873) provide in the future).
../singular_texi/reference.tex(,1874) @item @strong{Example:}
../singular_texi/reference.tex(,1875) @smallexample
../singular_texi/reference.tex(,1876) @c reused example execute reference.doc:1463 
../singular_texi/reference.tex(,1877)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,1878)   ideal i=x+y,z3+22y;
../singular_texi/reference.tex(,1879)   write(":w save_i",i);
../singular_texi/reference.tex(,1880)   ring r0=0,(x,y,z),Dp;
../singular_texi/reference.tex(,1881)   string s="ideal k="+read("save_i")+";";
../singular_texi/reference.tex(,1882)   s;
../singular_texi/reference.tex(,1883) @expansion{} ideal k=x+y,z3+22y
../singular_texi/reference.tex(,1884) @expansion{} ;
../singular_texi/reference.tex(,1885)   execute(s); // define the ideal k
../singular_texi/reference.tex(,1886)   k;
../singular_texi/reference.tex(,1887) @expansion{} k[1]=x+y
../singular_texi/reference.tex(,1888) @expansion{} k[2]=z3+22y
../singular_texi/reference.tex(,1889) @c end example execute reference.doc:1463
../singular_texi/reference.tex(,1890) @end smallexample
../singular_texi/reference.tex(,1891) @end table
../singular_texi/reference.tex(,1892) @c ---------------------------------------
../singular_texi/reference.tex(,1893) @node exit, extgcd, execute, Functions
../singular_texi/reference.tex(,1894) @subsection exit
../singular_texi/reference.tex(,1895) @cindex exit
../singular_texi/reference.tex(,1896) @table @code
../singular_texi/reference.tex(,1897) @item @strong{Syntax:}
../singular_texi/reference.tex(,1898) @code{exit;}
../singular_texi/reference.tex(,1899) @item @strong{Purpose:}
../singular_texi/reference.tex(,1900) exits (quits) @sc{Singular},
../singular_texi/reference.tex(,1901) works also from inside a procedure or from an interrupt.
../singular_texi/reference.tex(,1902) @end table
../singular_texi/reference.tex(,1903) @c ---------------------------------------
../singular_texi/reference.tex(,1904) @node extgcd, facstd, exit, Functions
../singular_texi/reference.tex(,1905) @subsection extgcd
../singular_texi/reference.tex(,1906) @cindex extgcd
../singular_texi/reference.tex(,1907) 
../singular_texi/reference.tex(,1908) @table @code
../singular_texi/reference.tex(,1909) @item @strong{Syntax:}
../singular_texi/reference.tex(,1910) @code{extgcd (} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,1911) @*@code{extgcd (} poly_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,1912) @item @strong{Type:}
../singular_texi/reference.tex(,1913) list of 3 objects of the same type as the type of the arguments
../singular_texi/reference.tex(,1914) @item @strong{Purpose:}
../singular_texi/reference.tex(,1915) computes extended gcd: the first element is the greatest common divisor
../singular_texi/reference.tex(,1916) of the two arguments,
../singular_texi/reference.tex(,1917) the second and third are factors such that if @code{list L=extgcd(a,b);}
../singular_texi/reference.tex(,1918) then L[1]=a*L[2]+b*L[3].
../singular_texi/reference.tex(,1919) @item @strong{Note:}
../singular_texi/reference.tex(,1920) Polynomials must be univariate to apply @code{extgcd}.
../singular_texi/reference.tex(,1921) @item @strong{Example:}
../singular_texi/reference.tex(,1922) @smallexample
../singular_texi/reference.tex(,1923) @c reused example extgcd reference.doc:1506 
../singular_texi/reference.tex(,1924)   extgcd(24,10);
../singular_texi/reference.tex(,1925) @expansion{} [1]:
../singular_texi/reference.tex(,1926) @expansion{}    2
../singular_texi/reference.tex(,1927) @expansion{} [2]:
../singular_texi/reference.tex(,1928) @expansion{}    -2
../singular_texi/reference.tex(,1929) @expansion{} [3]:
../singular_texi/reference.tex(,1930) @expansion{}    5
../singular_texi/reference.tex(,1931)   ring r=0,(x,y),lp;
../singular_texi/reference.tex(,1932)   extgcd(x4-x6,(x2+x5)*(x2+x3));
../singular_texi/reference.tex(,1933) @expansion{} [1]:
../singular_texi/reference.tex(,1934) @expansion{}    2x5+2x4
../singular_texi/reference.tex(,1935) @expansion{} [2]:
../singular_texi/reference.tex(,1936) @expansion{}    x2+x+1
../singular_texi/reference.tex(,1937) @expansion{} [3]:
../singular_texi/reference.tex(,1938) @expansion{}    1
../singular_texi/reference.tex(,1939) @c end example extgcd reference.doc:1506
../singular_texi/reference.tex(,1940) @end smallexample
../singular_texi/reference.tex(,1941) @end table
../singular_texi/reference.tex(,1942) @c inserted refs from reference.doc:1513
../singular_texi/reference.tex(,1952) See
../singular_texi/reference.tex(,1953) @ref{gcd};
../singular_texi/reference.tex(,1954) @ref{int};
../singular_texi/reference.tex(,1955) @ref{poly}.
../singular_texi/reference.tex(,1957) @c end inserted refs from reference.doc:1513
../singular_texi/reference.tex(,1958) @c ---------------------------------------
../singular_texi/reference.tex(,1959) @node facstd, factorize, extgcd, Functions
../singular_texi/reference.tex(,1960) @subsection facstd
../singular_texi/reference.tex(,1961) @cindex facstd
../singular_texi/reference.tex(,1962) 
../singular_texi/reference.tex(,1963) @table @code
../singular_texi/reference.tex(,1964) @item @strong{Syntax:}
../singular_texi/reference.tex(,1965) @code{facstd (} ideal_expression @code{)}
../singular_texi/reference.tex(,1966) @*@code{facstd (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,1967) @item @strong{Type:}
../singular_texi/reference.tex(,1968) list of ideals
../singular_texi/reference.tex(,1969) @item @strong{Purpose:}
../singular_texi/reference.tex(,1970) returns a list of ideals computed by the factorizing Groebner basis algorithm.
../singular_texi/reference.tex(,1971) @*The intersection of these ideals has the same zero-set as the input,
../singular_texi/reference.tex(,1972) i.e., the radical of the intersection coincides with the radical of the input
../singular_texi/reference.tex(,1973) ideal.
../singular_texi/reference.tex(,1974) In many (but not all!) cases this is already a decomposition of the radical
../singular_texi/reference.tex(,1975) of the ideal. (Note however, that, in general, no inclusion between the
../singular_texi/reference.tex(,1976) input and output ideals holds.)
../singular_texi/reference.tex(,1977) @*The second, optional argument gives a list of polynomials which define
../singular_texi/reference.tex(,1978) non-zero constraints. Hence, the intersection of the output ideals
../singular_texi/reference.tex(,1979) has a zero-set which is the (closure of the) complement of the zero-set
../singular_texi/reference.tex(,1980) of the second argument in the zero-set of the first argument.
../singular_texi/reference.tex(,1981) @item @strong{Note:}
../singular_texi/reference.tex(,1982) Not implemented for baserings over real ground fields, galois fields and
../singular_texi/reference.tex(,1983) over algebraic extensions over the rational numbers (that is, only
../singular_texi/reference.tex(,1984) implemented for ground fields for which @ref{factorize} is implemented).
../singular_texi/reference.tex(,1985) @item @strong{Example:}
../singular_texi/reference.tex(,1986) @smallexample
../singular_texi/reference.tex(,1987) @c reused example facstd reference.doc:1548 
../singular_texi/reference.tex(,1988)   ring r=32003,(x,y,z),(c,dp);
../singular_texi/reference.tex(,1989)   ideal I=xyz,x2z;
../singular_texi/reference.tex(,1990)   facstd(I);
../singular_texi/reference.tex(,1991) @expansion{} [1]:
../singular_texi/reference.tex(,1992) @expansion{}    _[1]=z
../singular_texi/reference.tex(,1993) @expansion{} [2]:
../singular_texi/reference.tex(,1994) @expansion{}    _[1]=x
../singular_texi/reference.tex(,1995)   facstd(I,x);
../singular_texi/reference.tex(,1996) @expansion{} [1]:
../singular_texi/reference.tex(,1997) @expansion{}    _[1]=z
../singular_texi/reference.tex(,1998) @c end example facstd reference.doc:1548
../singular_texi/reference.tex(,1999) @end smallexample
../singular_texi/reference.tex(,2000) @end table
../singular_texi/reference.tex(,2001) @c inserted refs from reference.doc:1556
../singular_texi/reference.tex(,2011) See
../singular_texi/reference.tex(,2012) @ref{ideal};
../singular_texi/reference.tex(,2013) @ref{ring};
../singular_texi/reference.tex(,2014) @ref{std}.
../singular_texi/reference.tex(,2016) @c end inserted refs from reference.doc:1556
../singular_texi/reference.tex(,2017) @c ---------------------------------------
../singular_texi/reference.tex(,2018) @node factorize, fetch, facstd, Functions
../singular_texi/reference.tex(,2019) @subsection factorize
../singular_texi/reference.tex(,2020) @cindex factorize
../singular_texi/reference.tex(,2021) 
../singular_texi/reference.tex(,2022) @table @code
../singular_texi/reference.tex(,2023) @item @strong{Syntax:}
../singular_texi/reference.tex(,2024) @code{factorize (} poly_expression @code{)}
../singular_texi/reference.tex(,2025) @*@code{factorize (} poly_expression@code{, 0 )}
../singular_texi/reference.tex(,2026) @*@code{factorize (} poly_expression@code{, 2 )}
../singular_texi/reference.tex(,2027) @item @strong{Type:}
../singular_texi/reference.tex(,2028) list of ideal and intvec
../singular_texi/reference.tex(,2029) @*
../singular_texi/reference.tex(,2030) @item @strong{Syntax:}
../singular_texi/reference.tex(,2031) @code{factorize (} poly_expression@code{, 1 )}
../singular_texi/reference.tex(,2032) @item @strong{Type:}
../singular_texi/reference.tex(,2033) ideal
../singular_texi/reference.tex(,2034) @item @strong{Purpose:}
../singular_texi/reference.tex(,2035) computes the irreducible factors (as an ideal) of the polynomial
../singular_texi/reference.tex(,2036) together with or without
../singular_texi/reference.tex(,2037) the multiplicities (as an intvec) depending on the second argument:
../singular_texi/reference.tex(,2038) @format
../singular_texi/reference.tex(,2039)     0: returns factors and multiplicities, first factor is a constant.
../singular_texi/reference.tex(,2040)        May also be written with only one argument.
../singular_texi/reference.tex(,2041)     1: returns non-constant factors (no multiplicities).
../singular_texi/reference.tex(,2042)     2: returns non-constant factors and multiplicities.
../singular_texi/reference.tex(,2043) @end format
../singular_texi/reference.tex(,2044) @item @strong{Note:}
../singular_texi/reference.tex(,2045) Not implemented for the coefficient fields real and finite fields of
../singular_texi/reference.tex(,2046) type @code{(p^n,a)}.
../singular_texi/reference.tex(,2047) @item @strong{Example:}
../singular_texi/reference.tex(,2048) @smallexample
../singular_texi/reference.tex(,2049) @c reused example factorize reference.doc:1594 
../singular_texi/reference.tex(,2050)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,2051)   factorize(9*(x-1)^2*(y+z));
../singular_texi/reference.tex(,2052) @expansion{} [1]:
../singular_texi/reference.tex(,2053) @expansion{}    _[1]=9
../singular_texi/reference.tex(,2054) @expansion{}    _[2]=y+z
../singular_texi/reference.tex(,2055) @expansion{}    _[3]=x-1
../singular_texi/reference.tex(,2056) @expansion{} [2]:
../singular_texi/reference.tex(,2057) @expansion{}    1,1,2
../singular_texi/reference.tex(,2058)   factorize(9*(x-1)^2*(y+z),1);
../singular_texi/reference.tex(,2059) @expansion{} _[1]=y+z
../singular_texi/reference.tex(,2060) @expansion{} _[2]=x-1
../singular_texi/reference.tex(,2061)   factorize(9*(x-1)^2*(y+z),2);
../singular_texi/reference.tex(,2062) @expansion{} [1]:
../singular_texi/reference.tex(,2063) @expansion{}    _[1]=y+z
../singular_texi/reference.tex(,2064) @expansion{}    _[2]=x-1
../singular_texi/reference.tex(,2065) @expansion{} [2]:
../singular_texi/reference.tex(,2066) @expansion{}    1,2
../singular_texi/reference.tex(,2067) @c end example factorize reference.doc:1594
../singular_texi/reference.tex(,2068) @end smallexample
../singular_texi/reference.tex(,2069) @end table
../singular_texi/reference.tex(,2070) @c inserted refs from reference.doc:1602
../singular_texi/reference.tex(,2078) See
../singular_texi/reference.tex(,2079) @ref{poly}.
../singular_texi/reference.tex(,2081) @c end inserted refs from reference.doc:1602
../singular_texi/reference.tex(,2082) @c ---------------------------------------
../singular_texi/reference.tex(,2083) @node fetch, fglm, factorize, Functions
../singular_texi/reference.tex(,2084) @subsection fetch
../singular_texi/reference.tex(,2085) @cindex fetch
../singular_texi/reference.tex(,2086) 
../singular_texi/reference.tex(,2087) @table @code
../singular_texi/reference.tex(,2088) @item @strong{Syntax:}
../singular_texi/reference.tex(,2089) @code{fetch (} ring_name@code{,} name @code{)}
../singular_texi/reference.tex(,2090) @item @strong{Type:}
../singular_texi/reference.tex(,2091) number, poly, vector, ideal, module, matrix or list
../singular_texi/reference.tex(,2092) (the same type as the second argument)
../singular_texi/reference.tex(,2093) @item @strong{Purpose:}
../singular_texi/reference.tex(,2094) maps objects between rings.
../singular_texi/reference.tex(,2095) @code{fetch} is the identity map between rings and qrings,
../singular_texi/reference.tex(,2096) the i-th variable of the source ring is mapped to the i-th
../singular_texi/reference.tex(,2097) variable of the basering.  The coefficient fields must be compatible.
../singular_texi/reference.tex(,2098) (See @ref{map} for a description of possible mapping between
../singular_texi/reference.tex(,2099) different ground fields).
../singular_texi/reference.tex(,2100) @*@code{fetch} offers a convenient way to change
../singular_texi/reference.tex(,2101) variable names or orderings, or to map objects from a ring to a quotient
../singular_texi/reference.tex(,2102) ring of that ring or vice versa.
../singular_texi/reference.tex(,2103) @item @strong{Note:}
../singular_texi/reference.tex(,2104) Compared with @code{imap}, @code{fetch} uses the position of the ring
../singular_texi/reference.tex(,2105) variables, not their names.
../singular_texi/reference.tex(,2106) @item @strong{Example:}
../singular_texi/reference.tex(,2107) @smallexample
../singular_texi/reference.tex(,2108) @c reused example fetch reference.doc:1632 
../singular_texi/reference.tex(,2109)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,2110)   ideal i=maxideal(2);
../singular_texi/reference.tex(,2111)   ideal j=std(i);
../singular_texi/reference.tex(,2112)   poly f=x+y2+z3;
../singular_texi/reference.tex(,2113)   vector v=[f,1];
../singular_texi/reference.tex(,2114)   qring q=j;
../singular_texi/reference.tex(,2115)   poly f=fetch(r,f);
../singular_texi/reference.tex(,2116)   f;
../singular_texi/reference.tex(,2117) @expansion{} z3+y2+x
../singular_texi/reference.tex(,2118)   vector v=fetch(r,v);
../singular_texi/reference.tex(,2119)   v;
../singular_texi/reference.tex(,2120) @expansion{} z3*gen(1)+y2*gen(1)+x*gen(1)+gen(2)
../singular_texi/reference.tex(,2121)   ideal i=fetch(r,i);
../singular_texi/reference.tex(,2122)   i;
../singular_texi/reference.tex(,2123) @expansion{} i[1]=z2
../singular_texi/reference.tex(,2124) @expansion{} i[2]=yz
../singular_texi/reference.tex(,2125) @expansion{} i[3]=y2
../singular_texi/reference.tex(,2126) @expansion{} i[4]=xz
../singular_texi/reference.tex(,2127) @expansion{} i[5]=xy
../singular_texi/reference.tex(,2128) @expansion{} i[6]=x2
../singular_texi/reference.tex(,2129)   ring rr=0,(a,b,c),lp;
../singular_texi/reference.tex(,2130)   poly f=fetch(q,f);
../singular_texi/reference.tex(,2131)   f;
../singular_texi/reference.tex(,2132) @expansion{} a+b2+c3
../singular_texi/reference.tex(,2133)   vector v=fetch(r,v);
../singular_texi/reference.tex(,2134)   v;
../singular_texi/reference.tex(,2135) @expansion{} a*gen(1)+b2*gen(1)+c3*gen(1)+gen(2)
../singular_texi/reference.tex(,2136)   ideal k=fetch(q,i);
../singular_texi/reference.tex(,2137)   k;
../singular_texi/reference.tex(,2138) @expansion{} k[1]=c2
../singular_texi/reference.tex(,2139) @expansion{} k[2]=bc
../singular_texi/reference.tex(,2140) @expansion{} k[3]=b2
../singular_texi/reference.tex(,2141) @expansion{} k[4]=ac
../singular_texi/reference.tex(,2142) @expansion{} k[5]=ab
../singular_texi/reference.tex(,2143) @expansion{} k[6]=a2
../singular_texi/reference.tex(,2144) @c end example fetch reference.doc:1632
../singular_texi/reference.tex(,2145) @end smallexample
../singular_texi/reference.tex(,2146) @end table
../singular_texi/reference.tex(,2147) @c inserted refs from reference.doc:1655
../singular_texi/reference.tex(,2158) See
../singular_texi/reference.tex(,2159) @ref{imap};
../singular_texi/reference.tex(,2160) @ref{map};
../singular_texi/reference.tex(,2161) @ref{qring};
../singular_texi/reference.tex(,2162) @ref{ring}.
../singular_texi/reference.tex(,2164) @c end inserted refs from reference.doc:1655
../singular_texi/reference.tex(,2165) @c ---------------------------------------
../singular_texi/reference.tex(,2166) @node fglm, fglmquot, fetch, Functions
../singular_texi/reference.tex(,2167) @subsection fglm
../singular_texi/reference.tex(,2168) @cindex fglm
../singular_texi/reference.tex(,2169) 
../singular_texi/reference.tex(,2170) @table @code
../singular_texi/reference.tex(,2171) @item @strong{Syntax:}
../singular_texi/reference.tex(,2172) @code{fglm (} ring_name@code{,} ideal_name @code{)}
../singular_texi/reference.tex(,2173) @item @strong{Type:}
../singular_texi/reference.tex(,2174) ideal
../singular_texi/reference.tex(,2175) @item @strong{Purpose:}
../singular_texi/reference.tex(,2176) computes for the given ideal in the given ring
../singular_texi/reference.tex(,2177) a reduced Groebner basis in the current ring, by applying the so-called FGLM
../singular_texi/reference.tex(,2178) (Faugere, Gianni, Lazard, Mora)  algorithm.
../singular_texi/reference.tex(,2179) @*The main application is to compute a lexicographical Groebner basis
../singular_texi/reference.tex(,2180) from a reduced Groebner basis with respect to a degree ordering. This
../singular_texi/reference.tex(,2181) can be much faster than computing a lexicographical Groebner basis
../singular_texi/reference.tex(,2182) directly.
../singular_texi/reference.tex(,2183) @item @strong{Note:}
../singular_texi/reference.tex(,2184) The ideal must be zero-dimensional and given as a reduced Groebner
../singular_texi/reference.tex(,2185) basis in the given ring.
../singular_texi/reference.tex(,2186) @*The only permissible differences between the given ring and the current ring
../singular_texi/reference.tex(,2187) are the monomial ordering and a permutation of the variables,
../singular_texi/reference.tex(,2188) resp.@: parameters.
../singular_texi/reference.tex(,2189) @item @strong{Example:}
../singular_texi/reference.tex(,2190) @smallexample
../singular_texi/reference.tex(,2191) @c reused example fglm reference.doc:1688 
../singular_texi/reference.tex(,2192)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,2193)   ideal i=y3+x2, x2y+x2, x3-x2, z4-x2-y;
../singular_texi/reference.tex(,2194)   option(redSB);   // force the computation of a reduced SB
../singular_texi/reference.tex(,2195)   i=std(i);
../singular_texi/reference.tex(,2196)   vdim(i);
../singular_texi/reference.tex(,2197) @expansion{} 28
../singular_texi/reference.tex(,2198)   ring s=0,(z,x,y),lp;
../singular_texi/reference.tex(,2199)   ideal j=fglm(r,i);
../singular_texi/reference.tex(,2200)   j;
../singular_texi/reference.tex(,2201) @expansion{} j[1]=y4+y3
../singular_texi/reference.tex(,2202) @expansion{} j[2]=xy3-y3
../singular_texi/reference.tex(,2203) @expansion{} j[3]=x2+y3
../singular_texi/reference.tex(,2204) @expansion{} j[4]=z4+y3-y
../singular_texi/reference.tex(,2205) @c end example fglm reference.doc:1688
../singular_texi/reference.tex(,2206) @end smallexample
../singular_texi/reference.tex(,2207) @end table
../singular_texi/reference.tex(,2208) @c inserted refs from reference.doc:1700
../singular_texi/reference.tex(,2222) See
../singular_texi/reference.tex(,2223) @ref{fglmquot};
../singular_texi/reference.tex(,2224) @ref{option};
../singular_texi/reference.tex(,2225) @ref{qring};
../singular_texi/reference.tex(,2226) @ref{ring};
../singular_texi/reference.tex(,2227) @ref{std};
../singular_texi/reference.tex(,2228) @ref{stdfglm};
../singular_texi/reference.tex(,2229) @ref{vdim}.
../singular_texi/reference.tex(,2231) @c end inserted refs from reference.doc:1700
../singular_texi/reference.tex(,2232) @c ---------------------------------------
../singular_texi/reference.tex(,2233) @node fglmquot, filecmd, fglm, Functions
../singular_texi/reference.tex(,2234) @subsection fglmquot
../singular_texi/reference.tex(,2235) @cindex fglmquot
../singular_texi/reference.tex(,2236) 
../singular_texi/reference.tex(,2237) @table @code
../singular_texi/reference.tex(,2238) @item @strong{Syntax:}
../singular_texi/reference.tex(,2239) @code{fglmquot (} ideal_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,2240) @item @strong{Type:}
../singular_texi/reference.tex(,2241) ideal
../singular_texi/reference.tex(,2242) @item @strong{Purpose:}
../singular_texi/reference.tex(,2243) computes a reduced Groebner basis of the ideal quotient @code{I:p} of
../singular_texi/reference.tex(,2244) a zero-dimensional ideal @code{I} and a polynomial @code{p} using
../singular_texi/reference.tex(,2245) FGLM-techniques.
../singular_texi/reference.tex(,2246) @item @strong{Note:}
../singular_texi/reference.tex(,2247) The ideal must be zero-dimensional and given as a reduced Groebner
../singular_texi/reference.tex(,2248) basis in the given ring. The poly must be reduced with respect to the
../singular_texi/reference.tex(,2249) ideal.
../singular_texi/reference.tex(,2250) @item @strong{Example:}
../singular_texi/reference.tex(,2251) @smallexample
../singular_texi/reference.tex(,2252) @c reused example fglmquot reference.doc:1730 
../singular_texi/reference.tex(,2253)   ring r=0,(x,y,z),lp;
../singular_texi/reference.tex(,2254)   ideal i=y3+x2,x2y+x2,x3-x2,z4-x2-y;
../singular_texi/reference.tex(,2255)   option(redSB);   // force the computation of a reduced SB
../singular_texi/reference.tex(,2256)   i=std(i);
../singular_texi/reference.tex(,2257)   poly p=reduce(x+yz2+z10,i);
../singular_texi/reference.tex(,2258)   ideal j=fglmquot(i,p);
../singular_texi/reference.tex(,2259)   j;
../singular_texi/reference.tex(,2260) @expansion{} j[1]=z12
../singular_texi/reference.tex(,2261) @expansion{} j[2]=yz4-z8
../singular_texi/reference.tex(,2262) @expansion{} j[3]=y2+y-z8-z4
../singular_texi/reference.tex(,2263) @expansion{} j[4]=x+y-z10-z6-z4
../singular_texi/reference.tex(,2264) @c end example fglmquot reference.doc:1730
../singular_texi/reference.tex(,2265) @end smallexample
../singular_texi/reference.tex(,2266) @end table
../singular_texi/reference.tex(,2267) @c inserted refs from reference.doc:1741
../singular_texi/reference.tex(,2280) See
../singular_texi/reference.tex(,2281) @ref{fglm};
../singular_texi/reference.tex(,2282) @ref{option};
../singular_texi/reference.tex(,2283) @ref{quotient};
../singular_texi/reference.tex(,2284) @ref{ring};
../singular_texi/reference.tex(,2285) @ref{std};
../singular_texi/reference.tex(,2286) @ref{vdim}.
../singular_texi/reference.tex(,2288) @c end inserted refs from reference.doc:1741
../singular_texi/reference.tex(,2289) @c ---------------------------------------
../singular_texi/reference.tex(,2290) @node filecmd, find, fglmquot, Functions
../singular_texi/reference.tex(,2291) @subsection files, input from
../singular_texi/reference.tex(,2292) @cindex filecmd
../singular_texi/reference.tex(,2293) @cindex <
../singular_texi/reference.tex(,2294) @table @code
../singular_texi/reference.tex(,2295) @item @strong{Syntax:}
../singular_texi/reference.tex(,2296) @code{< "}filename@code{"}
../singular_texi/reference.tex(,2297) @item @strong{Type:}
../singular_texi/reference.tex(,2298) none
../singular_texi/reference.tex(,2299) @item @strong{Purpose:}
../singular_texi/reference.tex(,2300) input comes from the file filename. Shorthand for
../singular_texi/reference.tex(,2301) @code{execute(read(filename))}.
../singular_texi/reference.tex(,2302) @item @strong{Example:}
../singular_texi/reference.tex(,2303) @smallexample
../singular_texi/reference.tex(,2304) < "example"; //read in the file example and execute it
../singular_texi/reference.tex(,2305) @end smallexample
../singular_texi/reference.tex(,2306) @end table
../singular_texi/reference.tex(,2307) @c inserted refs from reference.doc:1768
../singular_texi/reference.tex(,2316) See
../singular_texi/reference.tex(,2317) @ref{execute};
../singular_texi/reference.tex(,2318) @ref{read}.
../singular_texi/reference.tex(,2320) @c end inserted refs from reference.doc:1768
../singular_texi/reference.tex(,2321) @c ---------------------------------------
../singular_texi/reference.tex(,2322) @node find, finduni, filecmd, Functions
../singular_texi/reference.tex(,2323) @subsection find
../singular_texi/reference.tex(,2324) @cindex find
../singular_texi/reference.tex(,2325) @table @code
../singular_texi/reference.tex(,2326) @item @strong{Syntax:}
../singular_texi/reference.tex(,2327) @code{find (} string_expression@code{,} substring_expression @code{)}
../singular_texi/reference.tex(,2328) @*@code{find (} string_expression@code{,} substring_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,2329) @item @strong{Type:}
../singular_texi/reference.tex(,2330) int
../singular_texi/reference.tex(,2331) @item @strong{Purpose:}
../singular_texi/reference.tex(,2332) returns the first position of the substring
../singular_texi/reference.tex(,2333) in the string or 0 (if not found),
../singular_texi/reference.tex(,2334) @*starts the search at the position given in the 3rd argument.
../singular_texi/reference.tex(,2335) @item @strong{Example:}
../singular_texi/reference.tex(,2336) @smallexample
../singular_texi/reference.tex(,2337) @c reused example find reference.doc:1789 
../singular_texi/reference.tex(,2338)   find("Aac","a");
../singular_texi/reference.tex(,2339) @expansion{} 2
../singular_texi/reference.tex(,2340)   find("abab","a"+"b");
../singular_texi/reference.tex(,2341) @expansion{} 1
../singular_texi/reference.tex(,2342)   find("abab","a"+"b",2);
../singular_texi/reference.tex(,2343) @expansion{} 3
../singular_texi/reference.tex(,2344)   find("abab","ab",3);
../singular_texi/reference.tex(,2345) @expansion{} 3
../singular_texi/reference.tex(,2346)   find("0123","abcd");
../singular_texi/reference.tex(,2347) @expansion{} 0
../singular_texi/reference.tex(,2348) @c end example find reference.doc:1789
../singular_texi/reference.tex(,2349) @end smallexample
../singular_texi/reference.tex(,2350) @end table
../singular_texi/reference.tex(,2351) @c inserted refs from reference.doc:1798
../singular_texi/reference.tex(,2359) See
../singular_texi/reference.tex(,2360) @ref{string}.
../singular_texi/reference.tex(,2362) @c end inserted refs from reference.doc:1798
../singular_texi/reference.tex(,2363) @c ---------------------------------------
../singular_texi/reference.tex(,2364) @node finduni, fprintf, find, Functions
../singular_texi/reference.tex(,2365) @subsection finduni
../singular_texi/reference.tex(,2366) @cindex finduni
../singular_texi/reference.tex(,2367) @table @code
../singular_texi/reference.tex(,2368) @item @strong{Syntax:}
../singular_texi/reference.tex(,2369) @code{finduni (} ideal_expression @code{)}
../singular_texi/reference.tex(,2370) @item @strong{Type:}
../singular_texi/reference.tex(,2371) ideal
../singular_texi/reference.tex(,2372) @item @strong{Purpose:}
../singular_texi/reference.tex(,2373) returns an ideal which is contained in the ideal_expression such that the i-th
../singular_texi/reference.tex(,2374) generator is a univariate polynomial in the i-th ring variable.
../singular_texi/reference.tex(,2375) @* The polynomials have minimal degree w.r.t.@: this property.
../singular_texi/reference.tex(,2376) @item @strong{Note:}
../singular_texi/reference.tex(,2377) The ideal must be zero-dimensional and given as a reduced Groebner basis in
../singular_texi/reference.tex(,2378) the current ring.
../singular_texi/reference.tex(,2379) @item @strong{Example:}
../singular_texi/reference.tex(,2380) @smallexample
../singular_texi/reference.tex(,2381) @c reused example finduni reference.doc:1820 
../singular_texi/reference.tex(,2382)   ring  r=0,(x,y,z), dp;
../singular_texi/reference.tex(,2383)   ideal i=y3+x2,x2y+x2,z4-x2-y;
../singular_texi/reference.tex(,2384)   option(redSB);  // force computation of reduced basis
../singular_texi/reference.tex(,2385)   i=std(i);
../singular_texi/reference.tex(,2386)   ideal k=finduni(i);
../singular_texi/reference.tex(,2387)   print(k);
../singular_texi/reference.tex(,2388) @expansion{} x4-x2,
../singular_texi/reference.tex(,2389) @expansion{} y4+y3,
../singular_texi/reference.tex(,2390) @expansion{} z12
../singular_texi/reference.tex(,2391) @c end example finduni reference.doc:1820
../singular_texi/reference.tex(,2392) @end smallexample
../singular_texi/reference.tex(,2393) @end table
../singular_texi/reference.tex(,2394) @c inserted refs from reference.doc:1830
../singular_texi/reference.tex(,2405) See
../singular_texi/reference.tex(,2406) @ref{option};
../singular_texi/reference.tex(,2407) @ref{ring};
../singular_texi/reference.tex(,2408) @ref{std};
../singular_texi/reference.tex(,2409) @ref{vdim}.
../singular_texi/reference.tex(,2411) @c end inserted refs from reference.doc:1830
../singular_texi/reference.tex(,2412) 
../singular_texi/reference.tex(,2413) @c ---------------------------------------
../singular_texi/reference.tex(,2414) @node fprintf, freemodule, finduni, Functions
../singular_texi/reference.tex(,2415) @subsection fprintf
../singular_texi/reference.tex(,2416) @cindex fprintf
../singular_texi/reference.tex(,2417) @c start include of docu for standard.lib:fprintf
../singular_texi/reference.tex(,2418) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,2419) @c ---content fprintf---
../singular_texi/reference.tex(,2420) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,2421) 
../singular_texi/reference.tex(,2422) @table @asis
../singular_texi/reference.tex(,2423) @item @strong{Syntax:}
../singular_texi/reference.tex(,2424) @code{fprintf (} link_expression@code{,} string_expression @code{[,}
../singular_texi/reference.tex(,2425) any_expressions@code{] )}
../singular_texi/reference.tex(,2426) 
../singular_texi/reference.tex(,2427) @item @strong{Return:}
../singular_texi/reference.tex(,2428) none
../singular_texi/reference.tex(,2429) 
../singular_texi/reference.tex(,2430) @item @strong{Purpose:}
../singular_texi/reference.tex(,2431) @code{fprintf(l,fmt,...);} performs output formatting.
../singular_texi/reference.tex(,2432) The second argument is a format control string. Additional
../singular_texi/reference.tex(,2433) arguments may be required, depending on the content of the
../singular_texi/reference.tex(,2434) control string. A series of output characters is generated as
../singular_texi/reference.tex(,2435) directed by the control string; these characters are
../singular_texi/reference.tex(,2436) written to the link l.
../singular_texi/reference.tex(,2437) The control string @code{fmt} is simply text to be copied, except
../singular_texi/reference.tex(,2438) that the string may contain conversion specifications.@*
../singular_texi/reference.tex(,2439) Do @code{help print;} for a listing of valid conversion
../singular_texi/reference.tex(,2440) specifications. As an addition to the conversions of @code{print},
../singular_texi/reference.tex(,2441) the @code{%n} and @code{%2} conversion specification does not
../singular_texi/reference.tex(,2442) consume an additional argument, but simply generates a newline
../singular_texi/reference.tex(,2443) character.
../singular_texi/reference.tex(,2444) 
../singular_texi/reference.tex(,2445) @item @strong{Note:}
../singular_texi/reference.tex(,2446) If one of the additional arguments is a list, then it should be
../singular_texi/reference.tex(,2447) enclosed once more into a @code{list()} command, since passing
../singular_texi/reference.tex(,2448) a list as an argument flattens the list by one level.
../singular_texi/reference.tex(,2449) 
../singular_texi/reference.tex(,2450) @end table
../singular_texi/reference.tex(,2451) @strong{Example:}
../singular_texi/reference.tex(,2452) @smallexample
../singular_texi/reference.tex(,2453) @c reused example fprintf d2t_singular/standard_lib.doc:393 
../singular_texi/reference.tex(,2454)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,2455) module m=[1,y],[0,x+z];
../singular_texi/reference.tex(,2456) intmat M=betti(mres(m,0));
../singular_texi/reference.tex(,2457) list l=r,m,M;
../singular_texi/reference.tex(,2458) link li="";   // link to stdout
../singular_texi/reference.tex(,2459) fprintf(li,"s:%s,l:%l",1,2);
../singular_texi/reference.tex(,2460) @expansion{} s:1,l:int(2)
../singular_texi/reference.tex(,2461) fprintf(li,"s:%s",l);
../singular_texi/reference.tex(,2462) @expansion{} s:(0),(x,y,z),(dp(3),C)
../singular_texi/reference.tex(,2463) fprintf(li,"s:%s",list(l));
../singular_texi/reference.tex(,2464) @expansion{} s:(0),(x,y,z),(dp(3),C),y*gen(2)+gen(1),x*gen(2)+z*gen(2),1,1 
../singular_texi/reference.tex(,2465) fprintf(li,"2l:%2l",list(l));
../singular_texi/reference.tex(,2466) @expansion{} 2l:list("(0),(x,y,z),(dp(3),C)",
../singular_texi/reference.tex(,2467) @expansion{} module(y*gen(2)+gen(1),
../singular_texi/reference.tex(,2468) @expansion{} x*gen(2)+z*gen(2)),
../singular_texi/reference.tex(,2469) @expansion{} intmat(intvec(1,1 ),1,2))
../singular_texi/reference.tex(,2470) @expansion{} 
../singular_texi/reference.tex(,2471) fprintf(li,"%p",list(l));
../singular_texi/reference.tex(,2472) @expansion{} [1]:
../singular_texi/reference.tex(,2473) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,2474) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,2475) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,2476) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,2477) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,2478) @expansion{} [2]:
../singular_texi/reference.tex(,2479) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,2480) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,2481) @expansion{} [3]:
../singular_texi/reference.tex(,2482) @expansion{}    1,1 
../singular_texi/reference.tex(,2483) @expansion{} 
../singular_texi/reference.tex(,2484) fprintf(li,"%;",list(l));
../singular_texi/reference.tex(,2485) @expansion{} [1]:
../singular_texi/reference.tex(,2486) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,2487) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,2488) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,2489) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,2490) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,2491) @expansion{} [2]:
../singular_texi/reference.tex(,2492) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,2493) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,2494) @expansion{} [3]:
../singular_texi/reference.tex(,2495) @expansion{}    1,1 
../singular_texi/reference.tex(,2496) @expansion{} 
../singular_texi/reference.tex(,2497) fprintf(li,"%b",M);
../singular_texi/reference.tex(,2498) @expansion{}            0     1
../singular_texi/reference.tex(,2499) @expansion{} ------------------
../singular_texi/reference.tex(,2500) @expansion{}     0:     1     1
../singular_texi/reference.tex(,2501) @expansion{} ------------------
../singular_texi/reference.tex(,2502) @expansion{} total:     1     1
../singular_texi/reference.tex(,2503) @expansion{} 
../singular_texi/reference.tex(,2504) @c end example fprintf d2t_singular/standard_lib.doc:393
../singular_texi/reference.tex(,2505) @end smallexample
../singular_texi/reference.tex(,2506) @c inserted refs from d2t_singular/standard_lib.doc:408
../singular_texi/reference.tex(,2517) @strong{See also:}
../singular_texi/reference.tex(,2518) @ref{print};
../singular_texi/reference.tex(,2519) @ref{printf};
../singular_texi/reference.tex(,2520) @ref{sprintf};
../singular_texi/reference.tex(,2521) @ref{string}.
../singular_texi/reference.tex(,2523) @c end inserted refs from d2t_singular/standard_lib.doc:408
../singular_texi/reference.tex(,2524) 
../singular_texi/reference.tex(,2525) @c ---end content fprintf---
../singular_texi/reference.tex(,2526) @c generated lib proc docu for standard.lib:fprintf reference.doc:1842 
../singular_texi/reference.tex(,2527) @c end include of docu for standard.lib:fprintf
../singular_texi/reference.tex(,2528) 
../singular_texi/reference.tex(,2529) @c ---------------------------------------
../singular_texi/reference.tex(,2530) @node freemodule, gcd, fprintf, Functions
../singular_texi/reference.tex(,2531) @subsection freemodule
../singular_texi/reference.tex(,2532) @cindex freemodule
../singular_texi/reference.tex(,2533) 
../singular_texi/reference.tex(,2534) @table @code
../singular_texi/reference.tex(,2535) @item @strong{Syntax:}
../singular_texi/reference.tex(,2536) @code{freemodule (} int_expression @code{)}
../singular_texi/reference.tex(,2537) @item @strong{Type:}
../singular_texi/reference.tex(,2538) module
../singular_texi/reference.tex(,2539) @item @strong{Purpose:}
../singular_texi/reference.tex(,2540) creates the free module of rank n generated by
../singular_texi/reference.tex(,2541) @code{gen(1)}, @dots{}, @code{gen(n)}.
../singular_texi/reference.tex(,2542) @item @strong{Example:}
../singular_texi/reference.tex(,2543) @smallexample
../singular_texi/reference.tex(,2544) @c reused example freemodule reference.doc:1859 
../singular_texi/reference.tex(,2545)   ring r=32003,(x,y),(c,dp);
../singular_texi/reference.tex(,2546)   freemodule(3);
../singular_texi/reference.tex(,2547) @expansion{} _[1]=[1]
../singular_texi/reference.tex(,2548) @expansion{} _[2]=[0,1]
../singular_texi/reference.tex(,2549) @expansion{} _[3]=[0,0,1]
../singular_texi/reference.tex(,2550)   matrix m=freemodule(3); // generates the 3x3 unit matrix
../singular_texi/reference.tex(,2551)   print(m);
../singular_texi/reference.tex(,2552) @expansion{} 1,0,0,
../singular_texi/reference.tex(,2553) @expansion{} 0,1,0,
../singular_texi/reference.tex(,2554) @expansion{} 0,0,1 
../singular_texi/reference.tex(,2555) @c end example freemodule reference.doc:1859
../singular_texi/reference.tex(,2556) @end smallexample
../singular_texi/reference.tex(,2557) @end table
../singular_texi/reference.tex(,2558) @c inserted refs from reference.doc:1867
../singular_texi/reference.tex(,2567) See
../singular_texi/reference.tex(,2568) @ref{gen};
../singular_texi/reference.tex(,2569) @ref{module}.
../singular_texi/reference.tex(,2571) @c end inserted refs from reference.doc:1867
../singular_texi/reference.tex(,2572) @c ---------------------------------------
../singular_texi/reference.tex(,2573) @node gcd, gen, freemodule, Functions
../singular_texi/reference.tex(,2574) @subsection gcd
../singular_texi/reference.tex(,2575) @cindex gcd
../singular_texi/reference.tex(,2576) 
../singular_texi/reference.tex(,2577) @table @code
../singular_texi/reference.tex(,2578) @item @strong{Syntax:}
../singular_texi/reference.tex(,2579) @code{gcd (} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,2580) @*@code{gcd (} number_expression@code{,} number_expression @code{)}
../singular_texi/reference.tex(,2581) @*@code{gcd (} poly_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,2582) @item @strong{Type:}
../singular_texi/reference.tex(,2583) the same as the type of the arguments
../singular_texi/reference.tex(,2584) @item @strong{Purpose:}
../singular_texi/reference.tex(,2585) computes the greatest common divisor.
../singular_texi/reference.tex(,2586) @item @strong{Note:}
../singular_texi/reference.tex(,2587) Not implemented for the coefficient fields real and finite fields of
../singular_texi/reference.tex(,2588) type @code{(p^n,a)}.
../singular_texi/reference.tex(,2589) @*The gcd of two numbers is their gcd as integer numbers or polynomials,
../singular_texi/reference.tex(,2590) otherwise it is not defined.
../singular_texi/reference.tex(,2591) @item @strong{Example:}
../singular_texi/reference.tex(,2592) @smallexample
../singular_texi/reference.tex(,2593) @c reused example gcd reference.doc:1893 
../singular_texi/reference.tex(,2594)   gcd(2,3);
../singular_texi/reference.tex(,2595) @expansion{} 1
../singular_texi/reference.tex(,2596)   ring r=0,(x,y,z),lp;
../singular_texi/reference.tex(,2597)   gcd(3x2*(x+y),9x*(y2-x2));
../singular_texi/reference.tex(,2598) @expansion{} x2+xy
../singular_texi/reference.tex(,2599)   gcd(number(6472674604870),number(878646537247372));
../singular_texi/reference.tex(,2600) @expansion{} 2
../singular_texi/reference.tex(,2601) @c end example gcd reference.doc:1893
../singular_texi/reference.tex(,2602) @end smallexample
../singular_texi/reference.tex(,2603) @end table
../singular_texi/reference.tex(,2604) @c inserted refs from reference.doc:1901
../singular_texi/reference.tex(,2615) See
../singular_texi/reference.tex(,2616) @ref{extgcd};
../singular_texi/reference.tex(,2617) @ref{int};
../singular_texi/reference.tex(,2618) @ref{number};
../singular_texi/reference.tex(,2619) @ref{poly}.
../singular_texi/reference.tex(,2621) @c end inserted refs from reference.doc:1901
../singular_texi/reference.tex(,2622) @c ----------------------------------------
../singular_texi/reference.tex(,2623) @node gen, getdump, gcd, Functions
../singular_texi/reference.tex(,2624) @subsection gen
../singular_texi/reference.tex(,2625) @cindex gen
../singular_texi/reference.tex(,2626) 
../singular_texi/reference.tex(,2627) @table @code
../singular_texi/reference.tex(,2628) @item @strong{Syntax:}
../singular_texi/reference.tex(,2629) @code{gen (} int_expression @code{)}
../singular_texi/reference.tex(,2630) @item @strong{Type:}
../singular_texi/reference.tex(,2631) vector
../singular_texi/reference.tex(,2632) @item @strong{Purpose:}
../singular_texi/reference.tex(,2633) returns the i-th free generator of a free module.
../singular_texi/reference.tex(,2634) @item @strong{Example:}
../singular_texi/reference.tex(,2635) @smallexample
../singular_texi/reference.tex(,2636) @c reused example gen reference.doc:1922 
../singular_texi/reference.tex(,2637)   ring r=32003,(x,y,z),(c,dp);
../singular_texi/reference.tex(,2638)   gen(3);
../singular_texi/reference.tex(,2639) @expansion{} [0,0,1]
../singular_texi/reference.tex(,2640)   vector v=gen(5);
../singular_texi/reference.tex(,2641)   poly f=xyz;
../singular_texi/reference.tex(,2642)   v=v+f*gen(4); v;
../singular_texi/reference.tex(,2643) @expansion{} [0,0,0,xyz,1]
../singular_texi/reference.tex(,2644)   ring rr=32003,(x,y,z),dp;
../singular_texi/reference.tex(,2645)   fetch(r,v);
../singular_texi/reference.tex(,2646) @expansion{} xyz*gen(4)+gen(5)
../singular_texi/reference.tex(,2647) @c end example gen reference.doc:1922
../singular_texi/reference.tex(,2648) @end smallexample
../singular_texi/reference.tex(,2649) @end table
../singular_texi/reference.tex(,2650) @c inserted refs from reference.doc:1933
../singular_texi/reference.tex(,2660) See
../singular_texi/reference.tex(,2661) @ref{freemodule};
../singular_texi/reference.tex(,2662) @ref{int};
../singular_texi/reference.tex(,2663) @ref{vector}.
../singular_texi/reference.tex(,2665) @c end inserted refs from reference.doc:1933
../singular_texi/reference.tex(,2666) @c ---------------------------------------
../singular_texi/reference.tex(,2667) @node getdump, groebner, gen, Functions
../singular_texi/reference.tex(,2668) @subsection getdump
../singular_texi/reference.tex(,2669) @cindex getdump
../singular_texi/reference.tex(,2670) @table @code
../singular_texi/reference.tex(,2671) @item @strong{Syntax:}
../singular_texi/reference.tex(,2672) @code{getdump (} link_expression @code{)}
../singular_texi/reference.tex(,2673) @item @strong{Type:}
../singular_texi/reference.tex(,2674) none
../singular_texi/reference.tex(,2675) @item @strong{Purpose:}
../singular_texi/reference.tex(,2676) reads the content of the entire file, resp.@: link, and restores all variables
../singular_texi/reference.tex(,2677) from it. For ASCII links, @code{getdump} is equivalent to an
../singular_texi/reference.tex(,2678) @code{execute(read(} link @code{))} command. For MP links,
../singular_texi/reference.tex(,2679) @code{getdump} should only be used on data which were previously
../singular_texi/reference.tex(,2680) @code{dump}'ed.
../singular_texi/reference.tex(,2681) @item @strong{Example:}
../singular_texi/reference.tex(,2682) @smallexample
../singular_texi/reference.tex(,2683) @c reused example getdump reference.doc:1956 
../singular_texi/reference.tex(,2684)   int i=3;
../singular_texi/reference.tex(,2685)   dump(":w example.txt");
../singular_texi/reference.tex(,2686)   kill i;
../singular_texi/reference.tex(,2687)   option(noredefine);
../singular_texi/reference.tex(,2688)   getdump("example.txt");
../singular_texi/reference.tex(,2689)   i;
../singular_texi/reference.tex(,2690) @expansion{} 3
../singular_texi/reference.tex(,2691) @c end example getdump reference.doc:1956
../singular_texi/reference.tex(,2692) @end smallexample
../singular_texi/reference.tex(,2693) @item @strong{Restrictions:}
../singular_texi/reference.tex(,2694) @code{getdump} is not supported for DBM links, or for a link connecting
../singular_texi/reference.tex(,2695) to @code{stdin} (standard input).
../singular_texi/reference.tex(,2696) @end table
../singular_texi/reference.tex(,2697) @c inserted refs from reference.doc:1969
../singular_texi/reference.tex(,2707) See
../singular_texi/reference.tex(,2708) @ref{dump};
../singular_texi/reference.tex(,2709) @ref{link};
../singular_texi/reference.tex(,2710) @ref{read}.
../singular_texi/reference.tex(,2712) @c end inserted refs from reference.doc:1969
../singular_texi/reference.tex(,2713) @c ---------------------------------------
../singular_texi/reference.tex(,2714) @node groebner, help, getdump, Functions
../singular_texi/reference.tex(,2715) @subsection groebner
../singular_texi/reference.tex(,2716) @cindex groebner
../singular_texi/reference.tex(,2717) @c start include of docu for standard.lib:groebner
../singular_texi/reference.tex(,2718) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,2719) @c ---content groebner---
../singular_texi/reference.tex(,2720) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,2721) 
../singular_texi/reference.tex(,2722) @table @asis
../singular_texi/reference.tex(,2723) @item @strong{Syntax:}
../singular_texi/reference.tex(,2724) @code{groebner (} ideal_expression @code{)} @*
../singular_texi/reference.tex(,2725) @code{groebner (} module_expression @code{)} @*
../singular_texi/reference.tex(,2726) @code{groebner (} ideal_expression@code{,} int_expression @code{)} @*
../singular_texi/reference.tex(,2727) @code{groebner (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,2728) 
../singular_texi/reference.tex(,2729) @item @strong{Type:}
../singular_texi/reference.tex(,2730) type of the first argument
../singular_texi/reference.tex(,2731) 
../singular_texi/reference.tex(,2732) @item @strong{Purpose:}
../singular_texi/reference.tex(,2733) computes the standard basis of the first argument @code{I}
../singular_texi/reference.tex(,2734) (ideal or module), by a heuristically chosen method: if the
../singular_texi/reference.tex(,2735) ordering of the current ring is a local ordering, or if it is a
../singular_texi/reference.tex(,2736) non-block ordering and the current ring has no parameters, then
../singular_texi/reference.tex(,2737) @code{std(I)} is returned. Otherwise, @code{I} is mapped into a
../singular_texi/reference.tex(,2738) ring with no parameters and ordering dp, where its Hilbert series
../singular_texi/reference.tex(,2739) is computed. This is followed by a Hilbert-series based std
../singular_texi/reference.tex(,2740) computation in the original ring.
../singular_texi/reference.tex(,2741) 
../singular_texi/reference.tex(,2742) @item @strong{Note:}
../singular_texi/reference.tex(,2743) If a 2nd argument @code{wait} is given, then the computation proceeds
../singular_texi/reference.tex(,2744) at most @code{wait} seconds. That is, if no result could be computed in
../singular_texi/reference.tex(,2745) @code{wait} seconds, then the computation is interrupted, 0 is returned,
../singular_texi/reference.tex(,2746) a warning message is displayed, and the global variable
../singular_texi/reference.tex(,2747) @code{groebner_error} is defined.
../singular_texi/reference.tex(,2748) 
../singular_texi/reference.tex(,2749) @cindex time limit on computations
../singular_texi/reference.tex(,2750) @cindex MP, groebner basis computations
../singular_texi/reference.tex(,2751) @end table
../singular_texi/reference.tex(,2752) @strong{Example:}
../singular_texi/reference.tex(,2753) @smallexample
../singular_texi/reference.tex(,2754) @c reused example groebner d2t_singular/standard_lib.doc:149 
../singular_texi/reference.tex(,2755)   ring r=0,(a,b,c,d),lp;
../singular_texi/reference.tex(,2756) option(prot);
../singular_texi/reference.tex(,2757) ideal i=a+b+c+d,ab+ad+bc+cd,abc+abd+acd+bcd,abcd-1; // cyclic 4
../singular_texi/reference.tex(,2758) groebner(i);
../singular_texi/reference.tex(,2759) @expansion{} std in (0),(a,b,c,d,@@t),(dp,C)
../singular_texi/reference.tex(,2760) @expansion{} [63:1]1(3)s2(2)s3s4-s5ss6-s7--
../singular_texi/reference.tex(,2761) @expansion{} product criterion:8 chain criterion:5
../singular_texi/reference.tex(,2762) @expansion{} std with hilb in  (0),(a,b,c,d,@@t),(lp(4),C)
../singular_texi/reference.tex(,2763) @expansion{} [63:1]1(3)s2(2)s3s4-s5ss6shhhh8shh
../singular_texi/reference.tex(,2764) @expansion{} product criterion:9 chain criterion:8
../singular_texi/reference.tex(,2765) @expansion{} hilbert series criterion:6
../singular_texi/reference.tex(,2766) @expansion{} dehomogenization
../singular_texi/reference.tex(,2767) @expansion{} imap to original ring
../singular_texi/reference.tex(,2768) @expansion{} simplification
../singular_texi/reference.tex(,2769) @expansion{} _[1]=c2d6-c2d2-d4+1
../singular_texi/reference.tex(,2770) @expansion{} _[2]=c3d2+c2d3-c-d
../singular_texi/reference.tex(,2771) @expansion{} _[3]=bd4-b+d5-d
../singular_texi/reference.tex(,2772) @expansion{} _[4]=bc-bd5+c2d4+cd-d6-d2
../singular_texi/reference.tex(,2773) @expansion{} _[5]=b2+2bd+d2
../singular_texi/reference.tex(,2774) @expansion{} _[6]=a+b+c+d
../singular_texi/reference.tex(,2775) ring rp=(0,a,b),(c,d), lp;
../singular_texi/reference.tex(,2776) ideal i=imap(r,i);
../singular_texi/reference.tex(,2777) ideal j=groebner(i);
../singular_texi/reference.tex(,2778) @expansion{} std in 0,(c,d,a,b,@@t),(dp,C)
../singular_texi/reference.tex(,2779) @expansion{} [63:1]1(3)s2(2)s3s4-s5ss6-s7--
../singular_texi/reference.tex(,2780) @expansion{} product criterion:8 chain criterion:5
../singular_texi/reference.tex(,2781) @expansion{} std with hilb in  (0),(c,d,a,b,@@t),(lp(2),C, dp(3))
../singular_texi/reference.tex(,2782) @expansion{} [63:3]1(3)s2(2)s3s4-s5ss6shhhh8shh
../singular_texi/reference.tex(,2783) @expansion{} product criterion:9 chain criterion:8
../singular_texi/reference.tex(,2784) @expansion{} hilbert series criterion:6
../singular_texi/reference.tex(,2785) @expansion{} dehomogenization
../singular_texi/reference.tex(,2786) @expansion{} imap to original ring
../singular_texi/reference.tex(,2787) @expansion{} simplification
../singular_texi/reference.tex(,2788) option(noprot);
../singular_texi/reference.tex(,2789) j; simplify(j,1); std(i);
../singular_texi/reference.tex(,2790) @expansion{} j[1]=(a3b2+a2b3-a-b)
../singular_texi/reference.tex(,2791) @expansion{} _[1]=1
../singular_texi/reference.tex(,2792) @expansion{} _[1]=1
../singular_texi/reference.tex(,2793) if (system("with","MP")) @{groebner(i,0);@}
../singular_texi/reference.tex(,2794) @expansion{} // ** groebner did not finish
../singular_texi/reference.tex(,2795) @expansion{} _[1]=0
../singular_texi/reference.tex(,2796) defined(groebner_error);
../singular_texi/reference.tex(,2797) @expansion{} 1
../singular_texi/reference.tex(,2798) @c end example groebner d2t_singular/standard_lib.doc:149
../singular_texi/reference.tex(,2799) @end smallexample
../singular_texi/reference.tex(,2800) @c inserted refs from d2t_singular/standard_lib.doc:163
../singular_texi/reference.tex(,2810) @strong{See also:}
../singular_texi/reference.tex(,2811) @ref{std};
../singular_texi/reference.tex(,2812) @ref{stdfglm};
../singular_texi/reference.tex(,2813) @ref{stdhilb}.
../singular_texi/reference.tex(,2815) @c end inserted refs from d2t_singular/standard_lib.doc:163
../singular_texi/reference.tex(,2816) 
../singular_texi/reference.tex(,2817) @c ---end content groebner---
../singular_texi/reference.tex(,2818) @c generated lib proc docu for standard.lib:groebner reference.doc:1979 
../singular_texi/reference.tex(,2819) @c end include of docu for standard.lib:groebner
../singular_texi/reference.tex(,2820) 
../singular_texi/reference.tex(,2821) @c @table @code
../singular_texi/reference.tex(,2822) @c @item @strong{Syntax:}
../singular_texi/reference.tex(,2823) @c @code{groebner (} ideal_expression @code{)}
../singular_texi/reference.tex(,2824) @c @*@code{groebner (} module_expression @code{)}
../singular_texi/reference.tex(,2825) @c @item @strong{Type:}
../singular_texi/reference.tex(,2826) @c ideal or module
../singular_texi/reference.tex(,2827) @c @item @strong{Purpose:}
../singular_texi/reference.tex(,2828) @c returns a standard basis of an ideal or module with respect to the
../singular_texi/reference.tex(,2829) @c monomial ordering of the basering using a heuristically chosen method.
../singular_texi/reference.tex(,2830) @c @item @strong{Example:}
../singular_texi/reference.tex(,2831) @c @example
../singular_texi/reference.tex(,2832) @c @c example
../singular_texi/reference.tex(,2833) @c   ring r=0,(a,b,c,d),lp;
../singular_texi/reference.tex(,2834) @c   ideal i=a+b+c+d,ab+ad+bc+cd,abc+abd+acd+bcd,abcd-1;
../singular_texi/reference.tex(,2835) @c   groebner(i);
../singular_texi/reference.tex(,2836) @c @c example
../singular_texi/reference.tex(,2837) @c @end example
../singular_texi/reference.tex(,2838) @c @end table
../singular_texi/reference.tex(,2839) @c @c ref
../singular_texi/reference.tex(,2840) @c See
../singular_texi/reference.tex(,2841) @c @ref{std};
../singular_texi/reference.tex(,2842) @c @ref{stdfglm};
../singular_texi/reference.tex(,2843) @c @ref{stdhilb}.
../singular_texi/reference.tex(,2844) @c @c ref
../singular_texi/reference.tex(,2845) @c ---------------------------------------
../singular_texi/reference.tex(,2846) @node help, highcorner, groebner, Functions
../singular_texi/reference.tex(,2847) @subsection help
../singular_texi/reference.tex(,2848) @cindex help
../singular_texi/reference.tex(,2849) @table @code
../singular_texi/reference.tex(,2850) @item @strong{Syntax:}
../singular_texi/reference.tex(,2851) @code{help;}
../singular_texi/reference.tex(,2852) @*@code{help} topic @code{;}
../singular_texi/reference.tex(,2853) @item @strong{Type:}
../singular_texi/reference.tex(,2854) none
../singular_texi/reference.tex(,2855) @item @strong{Purpose:}
../singular_texi/reference.tex(,2856) displays online help information for @code{topic} using the currently
../singular_texi/reference.tex(,2857) set help browser. If no @code{topic} is given, the title page of the
../singular_texi/reference.tex(,2858) manual is displayed.
../singular_texi/reference.tex(,2859) 
../singular_texi/reference.tex(,2860) @item @strong{Note:}
../singular_texi/reference.tex(,2861) @itemize @bullet
../singular_texi/reference.tex(,2862) @cindex ?
../singular_texi/reference.tex(,2863) @item
../singular_texi/reference.tex(,2864) @code{?} may be used instead of @code{help}.
../singular_texi/reference.tex(,2865) 
../singular_texi/reference.tex(,2866) @item
../singular_texi/reference.tex(,2867) @code{topic} can be an index entry of the @sc{Singular} manual or the
../singular_texi/reference.tex(,2868) name of a (loaded) procedure which has a help section.
../singular_texi/reference.tex(,2869) @item
../singular_texi/reference.tex(,2870) @code{topic} may contain wildcard characters (i.e.,
../singular_texi/reference.tex(,2871) @code{*} characters).
../singular_texi/reference.tex(,2872) @item
../singular_texi/reference.tex(,2873) If a (possibly "wildcarded") @code{topic} cannot be found (or
../singular_texi/reference.tex(,2874) uniquely matched) a warning is displayed and no help information is
../singular_texi/reference.tex(,2875) provided.
../singular_texi/reference.tex(,2876) @item
../singular_texi/reference.tex(,2877) If @code{topic} is the name of a (loaded) procedure whose help
../singular_texi/reference.tex(,2878) section has changed w.r.t.@: the help available in the manual then,
../singular_texi/reference.tex(,2879) instead of displaying the respective help section of the manual in the
../singular_texi/reference.tex(,2880) help browser, the "newer" help section of the procedure is simply
../singular_texi/reference.tex(,2881) printed to the terminal.
../singular_texi/reference.tex(,2882) 
../singular_texi/reference.tex(,2883) @item
../singular_texi/reference.tex(,2884) The browser in which the help information is displayed can be either set
../singular_texi/reference.tex(,2885) with the command-line option @code{--browser=<browser>} (@pxref{Command
../singular_texi/reference.tex(,2886) line options}), or with the command @code{system("--browser",
../singular_texi/reference.tex(,2887) "<browser>")}. Use the command @code{system("browsers");} for a list of
../singular_texi/reference.tex(,2888) all available browsers. @xref{The online help system}, for more details
../singular_texi/reference.tex(,2889) about help browsers.
../singular_texi/reference.tex(,2890) 
../singular_texi/reference.tex(,2891) @end itemize
../singular_texi/reference.tex(,2892) 
../singular_texi/reference.tex(,2893) @item @strong{Example:}
../singular_texi/reference.tex(,2894) @smallexample
../singular_texi/reference.tex(,2895) help;      // display title page of manual
../singular_texi/reference.tex(,2896) help ring; // display help for 'ring'
../singular_texi/reference.tex(,2897) ?ringe;    // equivalent to 'help ringe;'
../singular_texi/reference.tex(,2898) @expansion{} // ** No help for topic 'ringe' (not even for '*ringe*')
../singular_texi/reference.tex(,2899) @expansion{} // ** Try '?;'       for general help
../singular_texi/reference.tex(,2900) @expansion{} // ** or  '?Index;'  for all available help topics
../singular_texi/reference.tex(,2901) ?ring*;
../singular_texi/reference.tex(,2902) @expansion{} //  ** No unique help for 'ring*'
../singular_texi/reference.tex(,2903) @expansion{} //  ** Try one of
../singular_texi/reference.tex(,2904) @expansion{} ?Rings and orderings; ?Rings and standard bases; ?ring;
../singular_texi/reference.tex(,2905) @expansion{} ?ring declarations; ?ring operations; ?ring related functions;
../singular_texi/reference.tex(,2906) @expansion{} ?ring.lib; ?ring_lib; ?ringtensor; ?ringweights;
../singular_texi/reference.tex(,2907) help Rings and orderings;
../singular_texi/reference.tex(,2908) help standard.lib;  // displays help for library 'standard.lib'
../singular_texi/reference.tex(,2909) @end smallexample
../singular_texi/reference.tex(,2910) @end table
../singular_texi/reference.tex(,2911) 
../singular_texi/reference.tex(,2912) @c inserted refs from reference.doc:2072
../singular_texi/reference.tex(,2924) See
../singular_texi/reference.tex(,2925) @ref{Command line options};
../singular_texi/reference.tex(,2926) @ref{Format of a library};
../singular_texi/reference.tex(,2927) @ref{Procedure definition};
../singular_texi/reference.tex(,2928) @ref{The online help system};
../singular_texi/reference.tex(,2929) @ref{system}.
../singular_texi/reference.tex(,2931) @c end inserted refs from reference.doc:2072
../singular_texi/reference.tex(,2932) @c ---------------------------------------
../singular_texi/reference.tex(,2933) @node highcorner, hilb, help, Functions
../singular_texi/reference.tex(,2934) @subsection highcorner
../singular_texi/reference.tex(,2935) @cindex highcorner
../singular_texi/reference.tex(,2936) @table @code
../singular_texi/reference.tex(,2937) @item @strong{Syntax:}
../singular_texi/reference.tex(,2938) @code{highcorner (} ideal_expression @code{)}
../singular_texi/reference.tex(,2939) @*@code{highcorner (} module_expression @code{)}
../singular_texi/reference.tex(,2940) @item @strong{Type:}
../singular_texi/reference.tex(,2941) poly, resp.@: vector
../singular_texi/reference.tex(,2942) @item @strong{Purpose:}
../singular_texi/reference.tex(,2943) returns the smallest monomial not contained in
../singular_texi/reference.tex(,2944) the ideal, resp.@: module, generated by the initial terms of the given
../singular_texi/reference.tex(,2945) generators. If the generators are a standard basis,
../singular_texi/reference.tex(,2946) this is also the smallest monomial not contained in the ideal, resp.@: module.
../singular_texi/reference.tex(,2947) @*If the ideal, resp.@: module, is not zero-dimensional, 0 is returned.
../singular_texi/reference.tex(,2948) @item @strong{Note:}
../singular_texi/reference.tex(,2949) Let the ideal I be given by a standard basis. Then
../singular_texi/reference.tex(,2950) @code{highcorner(I)} returns 0 iff @code{dim(I)>0} or @code{dim(I)=-1}.
../singular_texi/reference.tex(,2951) Otherwise it returns the smallest monomial m not in I which has the following
../singular_texi/reference.tex(,2952) properties (with
../singular_texi/reference.tex(,2956) @tex
../singular_texi/reference.tex(,2957) $x_i$
../singular_texi/reference.tex(,2958) @end tex
../singular_texi/reference.tex(,2959) the variables of the basering):
../singular_texi/reference.tex(,2960) @itemize @bullet
../singular_texi/reference.tex(,2961) @item
../singular_texi/reference.tex(,2962) if
../singular_texi/reference.tex(,2966) @tex
../singular_texi/reference.tex(,2967) $x_i>1$ then $x_i$
../singular_texi/reference.tex(,2968) @end tex
../singular_texi/reference.tex(,2969) does not divide m (e.g., m=1 if the ordering is global)
../singular_texi/reference.tex(,2970) @item
../singular_texi/reference.tex(,2971) given any set of generators
../singular_texi/reference.tex(,2977) @tex
../singular_texi/reference.tex(,2978) $f_1,\dots,f_k$ of I, let $f'_i$ be obtained from
../singular_texi/reference.tex(,2979) $f_i$ by deleting the terms divisible by $x_i\cdot m$ for all i with $x_i<1$.
../singular_texi/reference.tex(,2980) Then $f'_1,\dots,f'_k$ generate I.
../singular_texi/reference.tex(,2981) @end tex
../singular_texi/reference.tex(,2982) @end itemize
../singular_texi/reference.tex(,2983) @item @strong{Example:}
../singular_texi/reference.tex(,2984) @smallexample
../singular_texi/reference.tex(,2985) @c reused example highcorner reference.doc:2133 
../singular_texi/reference.tex(,2986) ring r=0,(x,y),ds;
../singular_texi/reference.tex(,2987) ideal i=x3,x2y,y3;
../singular_texi/reference.tex(,2988) highcorner(std(i));
../singular_texi/reference.tex(,2989) @expansion{} xy2
../singular_texi/reference.tex(,2990) highcorner(std(ideal(1)));
../singular_texi/reference.tex(,2991) @expansion{} 0
../singular_texi/reference.tex(,2992) @c end example highcorner reference.doc:2133
../singular_texi/reference.tex(,2993) @end smallexample
../singular_texi/reference.tex(,2994) @end table
../singular_texi/reference.tex(,2995) @c inserted refs from reference.doc:2141
../singular_texi/reference.tex(,3005) See
../singular_texi/reference.tex(,3006) @ref{dim};
../singular_texi/reference.tex(,3007) @ref{std};
../singular_texi/reference.tex(,3008) @ref{vdim}.
../singular_texi/reference.tex(,3010) @c end inserted refs from reference.doc:2141
../singular_texi/reference.tex(,3011) @c ---------------------------------------
../singular_texi/reference.tex(,3012) @node hilb, homog, highcorner, Functions
../singular_texi/reference.tex(,3013) @subsection hilb
../singular_texi/reference.tex(,3014) @cindex hilb
../singular_texi/reference.tex(,3015) @table @code
../singular_texi/reference.tex(,3016) @item @strong{Syntax:}
../singular_texi/reference.tex(,3017) @code{hilb (} ideal_expression @code{)}
../singular_texi/reference.tex(,3018) @*@code{hilb (} module_expression @code{)}
../singular_texi/reference.tex(,3019) @*@code{hilb (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3020) @*@code{hilb (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3021) @*@code{hilb (} ideal_expression@code{,} int_expression @code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3022) @*@code{hilb (} module_expression@code{,} int_expression @code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3023) @item @strong{Type:}
../singular_texi/reference.tex(,3024) none (if called with one argument)
../singular_texi/reference.tex(,3025) @*intvec (if called with two or three arguments)
../singular_texi/reference.tex(,3026) @item @strong{Purpose:}
../singular_texi/reference.tex(,3027) computes the (weighted) Hilbert series of the ideal, resp.@: module,
../singular_texi/reference.tex(,3028) defined by the leading terms of the generators of the given ideal, resp.@: module.@*
../singular_texi/reference.tex(,3029) If @code{hilb} is called with one argument, then the 1st and 2nd Hilbert series
../singular_texi/reference.tex(,3030) together with some additional information are displayed.@*
../singular_texi/reference.tex(,3031) If @code{hilb} is called with two arguments, then the n-th Hilbert series is returned
../singular_texi/reference.tex(,3032) as an intvec, where n=1,2 is the second argument.@*
../singular_texi/reference.tex(,3033) If a weight vector w is a given as 3rd argument, then the Hilbert series is computed
../singular_texi/reference.tex(,3034) w.r.t.@: these weights w (by default all weights are set to 1).
../singular_texi/reference.tex(,3035) @item @strong{Caution:}
../singular_texi/reference.tex(,3036) The last entry of the returned intvec is not part of the actual Hilbert series,
../singular_texi/reference.tex(,3037) but is used in the Hilbert driven standard basis computation (see @ref{stdhilb}).
../singular_texi/reference.tex(,3038) @item @strong{Note:}
../singular_texi/reference.tex(,3039) If the input is homogeneous w.r.t.@: the weights and a standard basis, the result is
../singular_texi/reference.tex(,3040) the (weighted) Hilbert series of the original ideal, resp.@: module.@*
../singular_texi/reference.tex(,3041) @item @strong{Example:}
../singular_texi/reference.tex(,3042) @smallexample
../singular_texi/reference.tex(,3043) @c reused example hilb reference.doc:2179 
../singular_texi/reference.tex(,3044)   ring R=32003,(x,y,z),dp;
../singular_texi/reference.tex(,3045)   ideal i=x2,y2,z2;
../singular_texi/reference.tex(,3046)   ideal s=std(i);
../singular_texi/reference.tex(,3047)   hilb(s);
../singular_texi/reference.tex(,3048) @expansion{} //         1 t^0
../singular_texi/reference.tex(,3049) @expansion{} //        -3 t^2
../singular_texi/reference.tex(,3050) @expansion{} //         3 t^4
../singular_texi/reference.tex(,3051) @expansion{} //        -1 t^6
../singular_texi/reference.tex(,3052) @expansion{} 
../singular_texi/reference.tex(,3053) @expansion{} //         1 t^0
../singular_texi/reference.tex(,3054) @expansion{} //         3 t^1
../singular_texi/reference.tex(,3055) @expansion{} //         3 t^2
../singular_texi/reference.tex(,3056) @expansion{} //         1 t^3
../singular_texi/reference.tex(,3057) @expansion{} // dimension (affine)  = 0
../singular_texi/reference.tex(,3058) @expansion{} // degree      = 8
../singular_texi/reference.tex(,3059)   hilb(s,1);
../singular_texi/reference.tex(,3060) @expansion{} 1,0,-3,0,3,0,-1,0
../singular_texi/reference.tex(,3061)   hilb(s,2);
../singular_texi/reference.tex(,3062) @expansion{} 1,3,3,1,0
../singular_texi/reference.tex(,3063)   intvec w=2,2,2;
../singular_texi/reference.tex(,3064)   hilb(s,1,w);
../singular_texi/reference.tex(,3065) @expansion{} 1,0,0,0,-3,0,0,0,3,0,0,0,-1,0
../singular_texi/reference.tex(,3066) @c end example hilb reference.doc:2179
../singular_texi/reference.tex(,3067) @end smallexample
../singular_texi/reference.tex(,3068) @end table
../singular_texi/reference.tex(,3069) @c inserted refs from reference.doc:2191
../singular_texi/reference.tex(,3082) See
../singular_texi/reference.tex(,3083) @ref{Hilbert function};
../singular_texi/reference.tex(,3084) @ref{ideal};
../singular_texi/reference.tex(,3085) @ref{intvec};
../singular_texi/reference.tex(,3086) @ref{module};
../singular_texi/reference.tex(,3087) @ref{std};
../singular_texi/reference.tex(,3088) @ref{stdhilb}.
../singular_texi/reference.tex(,3090) @c end inserted refs from reference.doc:2191
../singular_texi/reference.tex(,3091) @c ---------------------------------------
../singular_texi/reference.tex(,3092) @node homog, hres, hilb, Functions
../singular_texi/reference.tex(,3093) @subsection homog
../singular_texi/reference.tex(,3094) @cindex homog
../singular_texi/reference.tex(,3095) 
../singular_texi/reference.tex(,3096) @table @code
../singular_texi/reference.tex(,3097) @item @strong{Syntax:}
../singular_texi/reference.tex(,3098) @code{homog (} ideal_expression @code{)}
../singular_texi/reference.tex(,3099) @*@code{homog (} module_expression @code{)}
../singular_texi/reference.tex(,3100) @item @strong{Type:}
../singular_texi/reference.tex(,3101) int
../singular_texi/reference.tex(,3102) @item @strong{Purpose:}
../singular_texi/reference.tex(,3103) tests for homogeneity: returns 1 for homogeneous input, 0 otherwise.
../singular_texi/reference.tex(,3104) @item @strong{Syntax:}
../singular_texi/reference.tex(,3105) @*@code{homog (} polynomial_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,3106) @*@code{homog (} vector_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,3107) @*@code{homog (} ideal_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,3108) @*@code{homog (} module_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,3109) @item @strong{Type:}
../singular_texi/reference.tex(,3110) same as first argument
../singular_texi/reference.tex(,3111) @item @strong{Purpose:}
../singular_texi/reference.tex(,3112) homogenizes polynomials, vectors, ideals, or modules by multiplying
../singular_texi/reference.tex(,3113) each monomial with a suitable power of the given ring variable (which must have
../singular_texi/reference.tex(,3114) weight 1).
../singular_texi/reference.tex(,3115) @item @strong{Example:}
../singular_texi/reference.tex(,3116) @smallexample
../singular_texi/reference.tex(,3117) @c reused example homog reference.doc:2226 
../singular_texi/reference.tex(,3118)   ring r=32003,(x,y,z),ds;
../singular_texi/reference.tex(,3119)   poly s1=x3y2+x5y+3y9;
../singular_texi/reference.tex(,3120)   poly s2=x2y2z2+3z8;
../singular_texi/reference.tex(,3121)   poly s3=5x4y2+4xy5+2x2y2z3+y7+11x10;
../singular_texi/reference.tex(,3122)   ideal i=s1,s2,s3;
../singular_texi/reference.tex(,3123)   homog(s2,z);
../singular_texi/reference.tex(,3124) @expansion{} x2y2z4+3z8
../singular_texi/reference.tex(,3125)   homog(i,z);
../singular_texi/reference.tex(,3126) @expansion{} _[1]=3y9+x5yz3+x3y2z4
../singular_texi/reference.tex(,3127) @expansion{} _[2]=x2y2z4+3z8
../singular_texi/reference.tex(,3128) @expansion{} _[3]=11x10+y7z3+5x4y2z4+4xy5z4+2x2y2z6
../singular_texi/reference.tex(,3129)   homog(i);
../singular_texi/reference.tex(,3130) @expansion{} 0
../singular_texi/reference.tex(,3131)   homog(homog(i,z));
../singular_texi/reference.tex(,3132) @expansion{} 1
../singular_texi/reference.tex(,3133) @c end example homog reference.doc:2226
../singular_texi/reference.tex(,3134) @end smallexample
../singular_texi/reference.tex(,3135) @end table
../singular_texi/reference.tex(,3136) @c inserted refs from reference.doc:2239
../singular_texi/reference.tex(,3147) See
../singular_texi/reference.tex(,3148) @ref{ideal};
../singular_texi/reference.tex(,3149) @ref{module};
../singular_texi/reference.tex(,3150) @ref{poly};
../singular_texi/reference.tex(,3151) @ref{vector}.
../singular_texi/reference.tex(,3153) @c end inserted refs from reference.doc:2239
../singular_texi/reference.tex(,3154) @c ---------------------------------------
../singular_texi/reference.tex(,3155) @node hres, imap, homog, Functions
../singular_texi/reference.tex(,3156) @subsection hres
../singular_texi/reference.tex(,3157) @cindex hres
../singular_texi/reference.tex(,3158) @cindex resolution, hilbert-driven
../singular_texi/reference.tex(,3159) @table @code
../singular_texi/reference.tex(,3160) @item @strong{Syntax:}
../singular_texi/reference.tex(,3161) @code{hres (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3162) @item @strong{Type:}
../singular_texi/reference.tex(,3163) resolution
../singular_texi/reference.tex(,3164) @item @strong{Purpose:}
../singular_texi/reference.tex(,3165) computes a free resolution of an ideal using the Hilbert-driven
../singular_texi/reference.tex(,3166) algorithm.
../singular_texi/reference.tex(,3167) 
../singular_texi/reference.tex(,3168) More precisely, let R be the basering and I be the given ideal.
../singular_texi/reference.tex(,3169) Then @code{hres} computes a minimal free resolution of R/I
../singular_texi/reference.tex(,3176) @tex
../singular_texi/reference.tex(,3177) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1
../singular_texi/reference.tex(,3178) \buildrel{A_1}\over{\longrightarrow} R\longrightarrow R/I
../singular_texi/reference.tex(,3179) \longrightarrow 0.$$
../singular_texi/reference.tex(,3180) @end tex
../singular_texi/reference.tex(,3181) If the int_expression k is not zero then the computation stops after
../singular_texi/reference.tex(,3182) k steps and returns a list of modules
../singular_texi/reference.tex(,3183) @tex
../singular_texi/reference.tex(,3184) $M_i={\tt module} (A_i)$, i=1..k.
../singular_texi/reference.tex(,3185) @end tex
../singular_texi/reference.tex(,3189) 
../singular_texi/reference.tex(,3190) @code{list L=hres(I,0);} returns a list L of n modules (where n is the
../singular_texi/reference.tex(,3191) number of variables of the basering) such that
../singular_texi/reference.tex(,3192) @tex
../singular_texi/reference.tex(,3193) ${\tt L[i]}=M_i$
../singular_texi/reference.tex(,3194) @end tex
../singular_texi/reference.tex(,3198) in the above notation.
../singular_texi/reference.tex(,3199) @item @strong{Note:}
../singular_texi/reference.tex(,3200) The ideal_expression has to be homogeneous.
../singular_texi/reference.tex(,3201) @* Accessing single elements of a resolution may require that some partial
../singular_texi/reference.tex(,3202) computations have to be finished and may therefore take some time.
../singular_texi/reference.tex(,3203) @item @strong{Example:}
../singular_texi/reference.tex(,3204) @smallexample
../singular_texi/reference.tex(,3205) @c reused example hres reference.doc:2297 
../singular_texi/reference.tex(,3206)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,3207)   ideal I=xz,yz,x3-y3;
../singular_texi/reference.tex(,3208)   def L=hres(I,0);
../singular_texi/reference.tex(,3209)   print(betti(L),"betti");
../singular_texi/reference.tex(,3210) @expansion{}            0     1     2
../singular_texi/reference.tex(,3211) @expansion{} ------------------------
../singular_texi/reference.tex(,3212) @expansion{}     0:     1     -     -
../singular_texi/reference.tex(,3213) @expansion{}     1:     -     2     1
../singular_texi/reference.tex(,3214) @expansion{}     2:     -     1     1
../singular_texi/reference.tex(,3215) @expansion{} ------------------------
../singular_texi/reference.tex(,3216) @expansion{} total:     1     3     2
../singular_texi/reference.tex(,3217)   L[2];     // the first syzygy module of r/I
../singular_texi/reference.tex(,3218) @expansion{} _[1]=-x*gen(1)+y*gen(2)
../singular_texi/reference.tex(,3219) @expansion{} _[2]=-x2*gen(2)+y2*gen(1)+z*gen(3)
../singular_texi/reference.tex(,3220) @c end example hres reference.doc:2297
../singular_texi/reference.tex(,3221) @end smallexample
../singular_texi/reference.tex(,3222) @end table
../singular_texi/reference.tex(,3223) @c inserted refs from reference.doc:2306
../singular_texi/reference.tex(,3239) See
../singular_texi/reference.tex(,3240) @ref{betti};
../singular_texi/reference.tex(,3241) @ref{ideal};
../singular_texi/reference.tex(,3242) @ref{int};
../singular_texi/reference.tex(,3243) @ref{lres};
../singular_texi/reference.tex(,3244) @ref{minres};
../singular_texi/reference.tex(,3245) @ref{module};
../singular_texi/reference.tex(,3246) @ref{mres};
../singular_texi/reference.tex(,3247) @ref{res};
../singular_texi/reference.tex(,3248) @ref{sres}.
../singular_texi/reference.tex(,3250) @c end inserted refs from reference.doc:2306
../singular_texi/reference.tex(,3251) @c ---------------------------------------
../singular_texi/reference.tex(,3252) @node imap, impart, hres, Functions
../singular_texi/reference.tex(,3253) @subsection imap
../singular_texi/reference.tex(,3254) @cindex imap
../singular_texi/reference.tex(,3255) 
../singular_texi/reference.tex(,3256) @table @code
../singular_texi/reference.tex(,3257) @item @strong{Syntax:}
../singular_texi/reference.tex(,3258) @code{imap (} ring_name@code{,} name @code{)}
../singular_texi/reference.tex(,3259) @item @strong{Type:}
../singular_texi/reference.tex(,3260) number, poly, vector, ideal, module, matrix or list
../singular_texi/reference.tex(,3261) (the same type as the second argument)
../singular_texi/reference.tex(,3262) @item @strong{Purpose:}
../singular_texi/reference.tex(,3263) identity map on common subrings.  @code{imap} is the map between rings
../singular_texi/reference.tex(,3264) and qrings with compatible ground fields which is the identity on
../singular_texi/reference.tex(,3265) variables and parameters of the same name and 0 otherwise.
../singular_texi/reference.tex(,3266) (See @ref{map} for a description of possible mapping between
../singular_texi/reference.tex(,3267) different ground fields).
../singular_texi/reference.tex(,3268) Useful for mapping from a homogenized ring to the original ring or
../singular_texi/reference.tex(,3269) for mappings from/to rings with/without parameters. Compared with
../singular_texi/reference.tex(,3270) @code{fetch}, @code{imap} uses the names of variables and parameters.
../singular_texi/reference.tex(,3271) Unlike @code{map} and @code{fetch} @code{imap} can map parameters to variables.
../singular_texi/reference.tex(,3272) @item @strong{Example:}
../singular_texi/reference.tex(,3273) @smallexample
../singular_texi/reference.tex(,3274) @c reused example imap reference.doc:2341 
../singular_texi/reference.tex(,3275)   ring r=0,(x,y,z,a,b,c),dp;
../singular_texi/reference.tex(,3276)   ideal i=xy2z3a4b5+1,homog(xy2z3a4b5+1,c); i;
../singular_texi/reference.tex(,3277) @expansion{} i[1]=xy2z3a4b5+1
../singular_texi/reference.tex(,3278) @expansion{} i[2]=xy2z3a4b5+c15
../singular_texi/reference.tex(,3279)   ring r1=0,(a,b,x,y,z),lp;
../singular_texi/reference.tex(,3280)   ideal j=imap(r,i); j;
../singular_texi/reference.tex(,3281) @expansion{} j[1]=a4b5xy2z3+1
../singular_texi/reference.tex(,3282) @expansion{} j[2]=a4b5xy2z3
../singular_texi/reference.tex(,3283)   ring r2=(0,a,b),(x,y,z),ls;
../singular_texi/reference.tex(,3284)   ideal j=imap(r,i); j;
../singular_texi/reference.tex(,3285) @expansion{} j[1]=1+(a4b5)*xy2z3
../singular_texi/reference.tex(,3286) @expansion{} j[2]=(a4b5)*xy2z3
../singular_texi/reference.tex(,3287) @c end example imap reference.doc:2341
../singular_texi/reference.tex(,3288) @end smallexample
../singular_texi/reference.tex(,3289) @end table
../singular_texi/reference.tex(,3290) @c inserted refs from reference.doc:2351
../singular_texi/reference.tex(,3302) See
../singular_texi/reference.tex(,3303) @ref{fetch};
../singular_texi/reference.tex(,3304) @ref{homog};
../singular_texi/reference.tex(,3305) @ref{map};
../singular_texi/reference.tex(,3306) @ref{qring};
../singular_texi/reference.tex(,3307) @ref{ring}.
../singular_texi/reference.tex(,3309) @c end inserted refs from reference.doc:2351
../singular_texi/reference.tex(,3310) @c ---------------------------------------
../singular_texi/reference.tex(,3311) @node impart, indepSet, imap, Functions
../singular_texi/reference.tex(,3312) @subsection impart
../singular_texi/reference.tex(,3313) @cindex impart
../singular_texi/reference.tex(,3314) 
../singular_texi/reference.tex(,3315) @table @code
../singular_texi/reference.tex(,3316) @item @strong{Syntax:}
../singular_texi/reference.tex(,3317) @code{impart (} number_expression @code{)}
../singular_texi/reference.tex(,3318) @item @strong{Type:}
../singular_texi/reference.tex(,3319) number
../singular_texi/reference.tex(,3320) @item @strong{Purpose:}
../singular_texi/reference.tex(,3321) returns the imaginary part of a number in a complex ground field,
../singular_texi/reference.tex(,3322) @*returns 0 otherwise.
../singular_texi/reference.tex(,3323) @item @strong{Example:}
../singular_texi/reference.tex(,3324) @smallexample
../singular_texi/reference.tex(,3325) @c reused example impart reference.doc:2374 
../singular_texi/reference.tex(,3326)   ring r=(complex,i),x,dp;
../singular_texi/reference.tex(,3327)   impart(1+2*i);
../singular_texi/reference.tex(,3328) @expansion{} 2
../singular_texi/reference.tex(,3329) @c end example impart reference.doc:2374
../singular_texi/reference.tex(,3330) @end smallexample
../singular_texi/reference.tex(,3331) @end table
../singular_texi/reference.tex(,3332) @c inserted refs from reference.doc:2380
../singular_texi/reference.tex(,3340) See
../singular_texi/reference.tex(,3341) @ref{repart}.
../singular_texi/reference.tex(,3343) @c end inserted refs from reference.doc:2380
../singular_texi/reference.tex(,3344) @c ---------------------------------------
../singular_texi/reference.tex(,3345) @node indepSet, insert, impart, Functions
../singular_texi/reference.tex(,3346) @subsection indepSet
../singular_texi/reference.tex(,3347) @cindex indepSet
../singular_texi/reference.tex(,3348) 
../singular_texi/reference.tex(,3349) @table @code
../singular_texi/reference.tex(,3350) @item @strong{Syntax:}
../singular_texi/reference.tex(,3351) @code{indepSet (} ideal_expression @code{)}
../singular_texi/reference.tex(,3352) @item @strong{Type:}
../singular_texi/reference.tex(,3353) intvec
../singular_texi/reference.tex(,3354) @item @strong{Purpose:}
../singular_texi/reference.tex(,3355) computes a maximal set U of independent variables of the ideal given by
../singular_texi/reference.tex(,3356) a standard basis.  If @code{v} is the result then @code{v[i]} is 1 if and
../singular_texi/reference.tex(,3357) only if the i-th variable of the ring, @code{x(i)}, is an independent
../singular_texi/reference.tex(,3358) variable.  Hence, the set U consisting of all variables @code{x(i)} with
../singular_texi/reference.tex(,3359) @code{v[i]=1} is a maximal independent set.
../singular_texi/reference.tex(,3360) 
../singular_texi/reference.tex(,3361) @c Indeed we compute a maximal strongly independent set U,
../singular_texi/reference.tex(,3362) @c where no power of a variable from U occurs as a leading term ofs
../singular_texi/reference.tex(,3363) @c a standard basis of the ideal.
../singular_texi/reference.tex(,3364) 
../singular_texi/reference.tex(,3365) @item @strong{Note:}
../singular_texi/reference.tex(,3366) U is a set of independent variables for I if and only if
../singular_texi/reference.tex(,3367) @tex
../singular_texi/reference.tex(,3368) $I \cap K[U]=(0)$,
../singular_texi/reference.tex(,3369) @end tex
../singular_texi/reference.tex(,3373) i.e., eliminating the remaining variables gives (0).
../singular_texi/reference.tex(,3374) U is maximal if dim(I)=#U.
../singular_texi/reference.tex(,3375) @item @strong{Syntax:}
../singular_texi/reference.tex(,3376) @code{indepSet (} ideal_expression, int_expression @code{)}
../singular_texi/reference.tex(,3377) @item @strong{Type:}
../singular_texi/reference.tex(,3378) list
../singular_texi/reference.tex(,3379) @item @strong{Purpose:}
../singular_texi/reference.tex(,3380) computes a list of all maximal independent sets of the leading ideal
../singular_texi/reference.tex(,3381) (if the flag is 0), resp.@: of all those sets of independent variables
../singular_texi/reference.tex(,3382) of the leading ideal which cannot be enlarged.
../singular_texi/reference.tex(,3383) @item @strong{Example:}
../singular_texi/reference.tex(,3384) @smallexample
../singular_texi/reference.tex(,3385) @c reused example indepSet reference.doc:2425 
../singular_texi/reference.tex(,3386)   ring r=32003,(x,y,u,v,w),dp;
../singular_texi/reference.tex(,3387)   ideal I=xyw,yvw,uyw,xv;
../singular_texi/reference.tex(,3388)   attrib(I,"isSB",1);
../singular_texi/reference.tex(,3389)   indepSet(I);
../singular_texi/reference.tex(,3390) @expansion{} 1,1,1,0,0
../singular_texi/reference.tex(,3391)   eliminate(I,vw);
../singular_texi/reference.tex(,3392) @expansion{} _[1]=0
../singular_texi/reference.tex(,3393)   indepSet(I,0);
../singular_texi/reference.tex(,3394) @expansion{} [1]:
../singular_texi/reference.tex(,3395) @expansion{}    1,1,1,0,0
../singular_texi/reference.tex(,3396) @expansion{} [2]:
../singular_texi/reference.tex(,3397) @expansion{}    0,1,1,1,0
../singular_texi/reference.tex(,3398) @expansion{} [3]:
../singular_texi/reference.tex(,3399) @expansion{}    1,0,1,0,1
../singular_texi/reference.tex(,3400) @expansion{} [4]:
../singular_texi/reference.tex(,3401) @expansion{}    0,0,1,1,1
../singular_texi/reference.tex(,3402)   indepSet(I,1);
../singular_texi/reference.tex(,3403) @expansion{} [1]:
../singular_texi/reference.tex(,3404) @expansion{}    1,1,1,0,0
../singular_texi/reference.tex(,3405) @expansion{} [2]:
../singular_texi/reference.tex(,3406) @expansion{}    0,1,1,1,0
../singular_texi/reference.tex(,3407) @expansion{} [3]:
../singular_texi/reference.tex(,3408) @expansion{}    1,0,1,0,1
../singular_texi/reference.tex(,3409) @expansion{} [4]:
../singular_texi/reference.tex(,3410) @expansion{}    0,0,1,1,1
../singular_texi/reference.tex(,3411) @expansion{} [5]:
../singular_texi/reference.tex(,3412) @expansion{}    0,1,0,0,1
../singular_texi/reference.tex(,3413)   eliminate(I,xuv);
../singular_texi/reference.tex(,3414) @expansion{} _[1]=0
../singular_texi/reference.tex(,3415) @c end example indepSet reference.doc:2425
../singular_texi/reference.tex(,3416) @end smallexample
../singular_texi/reference.tex(,3417) @end table
../singular_texi/reference.tex(,3418) @c inserted refs from reference.doc:2437
../singular_texi/reference.tex(,3427) See
../singular_texi/reference.tex(,3428) @ref{ideal};
../singular_texi/reference.tex(,3429) @ref{std}.
../singular_texi/reference.tex(,3431) @c end inserted refs from reference.doc:2437
../singular_texi/reference.tex(,3432) @c ---------------------------------------
../singular_texi/reference.tex(,3433) @node insert, interred, indepSet, Functions
../singular_texi/reference.tex(,3434) @subsection insert
../singular_texi/reference.tex(,3435) @cindex insert
../singular_texi/reference.tex(,3436) 
../singular_texi/reference.tex(,3437) @table @code
../singular_texi/reference.tex(,3438) @item @strong{Syntax:}
../singular_texi/reference.tex(,3439) @code{insert (} list_expression@code{,} expression @code{)}
../singular_texi/reference.tex(,3440) @*@code{insert (} list_expression@code{,} expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3441) @item @strong{Type:}
../singular_texi/reference.tex(,3442) list
../singular_texi/reference.tex(,3443) @item @strong{Purpose:}
../singular_texi/reference.tex(,3444) inserts a new element (expression) into a list at the beginning, or (if
../singular_texi/reference.tex(,3445) called with 3 arguments) after the given position (the input is not changed).
../singular_texi/reference.tex(,3446) @item @strong{Example:}
../singular_texi/reference.tex(,3447) @smallexample
../singular_texi/reference.tex(,3448) @c reused example insert reference.doc:2458 
../singular_texi/reference.tex(,3449)   list L=1,2;
../singular_texi/reference.tex(,3450)   insert(L,4,2);
../singular_texi/reference.tex(,3451) @expansion{} [1]:
../singular_texi/reference.tex(,3452) @expansion{}    1
../singular_texi/reference.tex(,3453) @expansion{} [2]:
../singular_texi/reference.tex(,3454) @expansion{}    2
../singular_texi/reference.tex(,3455) @expansion{} [3]:
../singular_texi/reference.tex(,3456) @expansion{}    4
../singular_texi/reference.tex(,3457)   insert(L,4);
../singular_texi/reference.tex(,3458) @expansion{} [1]:
../singular_texi/reference.tex(,3459) @expansion{}    4
../singular_texi/reference.tex(,3460) @expansion{} [2]:
../singular_texi/reference.tex(,3461) @expansion{}    1
../singular_texi/reference.tex(,3462) @expansion{} [3]:
../singular_texi/reference.tex(,3463) @expansion{}    2
../singular_texi/reference.tex(,3464) @c end example insert reference.doc:2458
../singular_texi/reference.tex(,3465) @end smallexample
../singular_texi/reference.tex(,3466) @end table
../singular_texi/reference.tex(,3467) @c inserted refs from reference.doc:2465
../singular_texi/reference.tex(,3476) See
../singular_texi/reference.tex(,3477) @ref{delete};
../singular_texi/reference.tex(,3478) @ref{list}.
../singular_texi/reference.tex(,3480) @c end inserted refs from reference.doc:2465
../singular_texi/reference.tex(,3481) @c ---------------------------------------
../singular_texi/reference.tex(,3482) @node interred, intersect, insert, Functions
../singular_texi/reference.tex(,3483) @subsection interred
../singular_texi/reference.tex(,3484) @cindex interred
../singular_texi/reference.tex(,3485) @table @code
../singular_texi/reference.tex(,3486) @item @strong{Syntax:}
../singular_texi/reference.tex(,3487) @code{interred (} ideal_expression @code{)}
../singular_texi/reference.tex(,3488) @*@code{interred (} module_expression @code{)}
../singular_texi/reference.tex(,3489) @item @strong{Type:}
../singular_texi/reference.tex(,3490) the same as the input type
../singular_texi/reference.tex(,3491) @item @strong{Purpose:}
../singular_texi/reference.tex(,3492) interreduces a set of polynomials/vectors.
../singular_texi/reference.tex(,3493) @*
../singular_texi/reference.tex(,3497) @tex
../singular_texi/reference.tex(,3498) input: $f_1,\dots,f_n$
../singular_texi/reference.tex(,3499) @end tex
../singular_texi/reference.tex(,3500) @*
../singular_texi/reference.tex(,3506) @tex
../singular_texi/reference.tex(,3507) output: $g_1,\dots,g_s$ with $s \leq n$ and the properties
../singular_texi/reference.tex(,3508) @end tex
../singular_texi/reference.tex(,3509) @itemize @bullet
../singular_texi/reference.tex(,3510) @item
../singular_texi/reference.tex(,3514) @tex
../singular_texi/reference.tex(,3515) $(f_1,\dots,f_n) = (g_1,\dots,g_s)$
../singular_texi/reference.tex(,3516) @end tex
../singular_texi/reference.tex(,3517) @item
../singular_texi/reference.tex(,3521) @tex
../singular_texi/reference.tex(,3522) $L(g_i)\neq L(g_j)$ for all $i\neq j$
../singular_texi/reference.tex(,3523) @end tex
../singular_texi/reference.tex(,3524) @item
../singular_texi/reference.tex(,3525) in the case of a global ordering (polynomial ring):
../singular_texi/reference.tex(,3526) @*
../singular_texi/reference.tex(,3530) @tex
../singular_texi/reference.tex(,3531) $L(g_i)$
../singular_texi/reference.tex(,3532) @end tex
../singular_texi/reference.tex(,3533)  does not divide m for all monomials m of
../singular_texi/reference.tex(,3537) @tex
../singular_texi/reference.tex(,3538) $\{g_1,\dots,g_{i-1},g_{i+1},\dots,g_s\}$
../singular_texi/reference.tex(,3539) @end tex
../singular_texi/reference.tex(,3540) @item
../singular_texi/reference.tex(,3541) in the case of a local or mixed ordering (localization of polynomial ring):
../singular_texi/reference.tex(,3542) @* if
../singular_texi/reference.tex(,3546) @tex
../singular_texi/reference.tex(,3547) $L(g_i) | L(g_j)$ for any $i \neq j$,
../singular_texi/reference.tex(,3548) @end tex
../singular_texi/reference.tex(,3549) then
../singular_texi/reference.tex(,3553) @tex
../singular_texi/reference.tex(,3554) $ecart(g_i) > ecart(g_j)$
../singular_texi/reference.tex(,3555) @end tex
../singular_texi/reference.tex(,3556) @end itemize
../singular_texi/reference.tex(,3557) @tex
../singular_texi/reference.tex(,3558) Here, $L(g)$ denotes the leading term of $g$ and
../singular_texi/reference.tex(,3559) $ecart(g):=deg(g)-deg(L(g))$.
../singular_texi/reference.tex(,3560) @end tex
../singular_texi/reference.tex(,3566) @item @strong{Example:}
../singular_texi/reference.tex(,3567) @smallexample
../singular_texi/reference.tex(,3568) @c reused example interred reference.doc:2557 
../singular_texi/reference.tex(,3569)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,3570)   ideal i=x2+z,z,2z;
../singular_texi/reference.tex(,3571)   interred(i);
../singular_texi/reference.tex(,3572) @expansion{} _[1]=z
../singular_texi/reference.tex(,3573) @expansion{} _[2]=x2
../singular_texi/reference.tex(,3574)   ring R=0,(x,y,z),ds;
../singular_texi/reference.tex(,3575)   ideal i=zx+y3,z+y3,z+xy;
../singular_texi/reference.tex(,3576)   interred(i);
../singular_texi/reference.tex(,3577) @expansion{} _[1]=z+xy
../singular_texi/reference.tex(,3578) @expansion{} _[2]=xy-y3
../singular_texi/reference.tex(,3579) @expansion{} _[3]=x2y-y3
../singular_texi/reference.tex(,3580) @c end example interred reference.doc:2557
../singular_texi/reference.tex(,3581) @end smallexample
../singular_texi/reference.tex(,3582) @end table
../singular_texi/reference.tex(,3583) @c inserted refs from reference.doc:2567
../singular_texi/reference.tex(,3593) See
../singular_texi/reference.tex(,3594) @ref{ideal};
../singular_texi/reference.tex(,3595) @ref{module};
../singular_texi/reference.tex(,3596) @ref{std}.
../singular_texi/reference.tex(,3598) @c end inserted refs from reference.doc:2567
../singular_texi/reference.tex(,3599) @c ---------------------------------------
../singular_texi/reference.tex(,3600) @node intersect, jacob, interred, Functions
../singular_texi/reference.tex(,3601) @subsection intersect
../singular_texi/reference.tex(,3602) @cindex intersect
../singular_texi/reference.tex(,3603) @table @code
../singular_texi/reference.tex(,3604) @item @strong{Syntax:}
../singular_texi/reference.tex(,3605) @code{intersect (} expression_list of ideal_expression @code{)}
../singular_texi/reference.tex(,3606) @*@code{intersect (} expression_list of module_expression @code{)}
../singular_texi/reference.tex(,3607) @item @strong{Type:}
../singular_texi/reference.tex(,3608) ideal, resp.@: module
../singular_texi/reference.tex(,3609) @item @strong{Purpose:}
../singular_texi/reference.tex(,3610) computes the intersection of ideals, resp.@: modules.
../singular_texi/reference.tex(,3611) @item @strong{Note:}
../singular_texi/reference.tex(,3612) If the option @code{returnSB} is enabled then the result is a standard basis.
../singular_texi/reference.tex(,3613) @item @strong{Example:}
../singular_texi/reference.tex(,3614) @smallexample
../singular_texi/reference.tex(,3615) @c reused example intersect reference.doc:2589 
../singular_texi/reference.tex(,3616)   ring R=0,(x,y),dp;
../singular_texi/reference.tex(,3617)   ideal i=x;
../singular_texi/reference.tex(,3618)   ideal j=y;
../singular_texi/reference.tex(,3619)   intersect(i,j);
../singular_texi/reference.tex(,3620) @expansion{} _[1]=xy
../singular_texi/reference.tex(,3621)   ring r=181,(x,y,z),(c,ls);
../singular_texi/reference.tex(,3622)   ideal id1=maxideal(3);
../singular_texi/reference.tex(,3623)   ideal id2=x2+xyz,y2-z3y,z3+y5xz;
../singular_texi/reference.tex(,3624)   ideal id3=intersect(id1,id2,ideal(x,y));
../singular_texi/reference.tex(,3625)   id3;
../singular_texi/reference.tex(,3626) @expansion{} id3[1]=yz3+xy6z
../singular_texi/reference.tex(,3627) @expansion{} id3[2]=yz4-y2z
../singular_texi/reference.tex(,3628) @expansion{} id3[3]=y2z3-y3
../singular_texi/reference.tex(,3629) @expansion{} id3[4]=xz3+x2y5z
../singular_texi/reference.tex(,3630) @expansion{} id3[5]=xyz2+x2z
../singular_texi/reference.tex(,3631) @expansion{} id3[6]=xyz3-xy2
../singular_texi/reference.tex(,3632) @expansion{} id3[7]=xy2z+x2y
../singular_texi/reference.tex(,3633) @expansion{} id3[8]=x2yz+x3
../singular_texi/reference.tex(,3634) @c end example intersect reference.doc:2589
../singular_texi/reference.tex(,3635) @end smallexample
../singular_texi/reference.tex(,3636) @end table
../singular_texi/reference.tex(,3637) @c inserted refs from reference.doc:2602
../singular_texi/reference.tex(,3647) See
../singular_texi/reference.tex(,3648) @ref{ideal};
../singular_texi/reference.tex(,3649) @ref{module};
../singular_texi/reference.tex(,3650) @ref{option}.
../singular_texi/reference.tex(,3652) @c end inserted refs from reference.doc:2602
../singular_texi/reference.tex(,3653) @c ---------------------------------------
../singular_texi/reference.tex(,3654) @node jacob, jet, intersect, Functions
../singular_texi/reference.tex(,3655) @subsection jacob
../singular_texi/reference.tex(,3656) @cindex jacob
../singular_texi/reference.tex(,3657) @table @code
../singular_texi/reference.tex(,3658) @item @strong{Syntax:}
../singular_texi/reference.tex(,3659) @code{jacob (} poly_expression @code{)}
../singular_texi/reference.tex(,3660) @*@code{jacob (} ideal_expression @code{)}
../singular_texi/reference.tex(,3661) @item @strong{Type:}
../singular_texi/reference.tex(,3662) ideal, if the input is a polynomial
../singular_texi/reference.tex(,3663) @* matrix, if the input is an ideal
../singular_texi/reference.tex(,3664) @item @strong{Purpose:}
../singular_texi/reference.tex(,3665) computes the Jacobi ideal, resp.@: Jacobi matrix, generated by all
../singular_texi/reference.tex(,3666) partial derivatives of the input.
../singular_texi/reference.tex(,3667) @item @strong{Example:}
../singular_texi/reference.tex(,3668) @smallexample
../singular_texi/reference.tex(,3669) @c reused example jacob reference.doc:2624 
../singular_texi/reference.tex(,3670)   ring R;
../singular_texi/reference.tex(,3671)   poly f=x2+y3+z5;
../singular_texi/reference.tex(,3672)   jacob(f);
../singular_texi/reference.tex(,3673) @expansion{} _[1]=2x
../singular_texi/reference.tex(,3674) @expansion{} _[2]=3y2
../singular_texi/reference.tex(,3675) @expansion{} _[3]=5z4
../singular_texi/reference.tex(,3676)   ideal i=jacob(f);
../singular_texi/reference.tex(,3677)   print(jacob(i));
../singular_texi/reference.tex(,3678) @expansion{} 2,0, 0,  
../singular_texi/reference.tex(,3679) @expansion{} 0,6y,0,  
../singular_texi/reference.tex(,3680) @expansion{} 0,0, 20z3
../singular_texi/reference.tex(,3681) @c end example jacob reference.doc:2624
../singular_texi/reference.tex(,3682) @end smallexample
../singular_texi/reference.tex(,3683) @end table
../singular_texi/reference.tex(,3684) @c inserted refs from reference.doc:2633
../singular_texi/reference.tex(,3695) See
../singular_texi/reference.tex(,3696) @ref{diff};
../singular_texi/reference.tex(,3697) @ref{ideal};
../singular_texi/reference.tex(,3698) @ref{module};
../singular_texi/reference.tex(,3699) @ref{nvars}.
../singular_texi/reference.tex(,3701) @c end inserted refs from reference.doc:2633
../singular_texi/reference.tex(,3702) @c ---------------------------------------
../singular_texi/reference.tex(,3703) @node jet, kbase, jacob, Functions
../singular_texi/reference.tex(,3704) @subsection jet
../singular_texi/reference.tex(,3705) @cindex jet
../singular_texi/reference.tex(,3706) @table @code
../singular_texi/reference.tex(,3707) @item @strong{Syntax:}
../singular_texi/reference.tex(,3708) @code{jet (} poly_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3709) @*@code{jet (} vector_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3710) @*@code{jet (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3711) @*@code{jet (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3712) @*@code{jet (} poly_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3713) @*@code{jet (} vector_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3714) @*@code{jet (} ideal_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3715) @*@code{jet (} module_expression@code{,} int_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,3716) @*@code{jet (} poly_expression@code{,} int_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,3717) @*@code{jet (} vector_expression@code{,} int_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,3718) @*@code{jet (} ideal_expression@code{,} int_expression@code{,} matrix_expression @code{)}
../singular_texi/reference.tex(,3719) @*@code{jet (} module_expression@code{,} int_expression@code{,} matrix_expression @code{)}
../singular_texi/reference.tex(,3720) @item @strong{Type:}
../singular_texi/reference.tex(,3721) the same as the type of the first argument
../singular_texi/reference.tex(,3722) @item @strong{Purpose:}
../singular_texi/reference.tex(,3723) deletes from the first argument all terms of degree bigger than the second argument.
../singular_texi/reference.tex(,3724) @*If a third argument @code{w} of type intvec is given, the degree is replaced by the weighted degree defined by @code{w}.
../singular_texi/reference.tex(,3725) @*If a third argument @code{u} of type poly or matrix is given, the first argument @code{p} is replaced by @code{p/u}.
../singular_texi/reference.tex(,3726) @item @strong{Example:}
../singular_texi/reference.tex(,3727) @smallexample
../singular_texi/reference.tex(,3728) @c reused example jet reference.doc:2666 
../singular_texi/reference.tex(,3729)   ring r=32003,(x,y,z),(c,dp);
../singular_texi/reference.tex(,3730)   jet(1+x+x2+x3+x4,3);
../singular_texi/reference.tex(,3731) @expansion{} x3+x2+x+1
../singular_texi/reference.tex(,3732)   poly f=1+x+x2+xz+y2+x3+y3+x2y2+z4;
../singular_texi/reference.tex(,3733)   jet(f,3);
../singular_texi/reference.tex(,3734) @expansion{} x3+y3+x2+y2+xz+x+1
../singular_texi/reference.tex(,3735)   intvec iv=2,1,1;
../singular_texi/reference.tex(,3736)   jet(f,3,iv);
../singular_texi/reference.tex(,3737) @expansion{} y3+y2+xz+x+1
../singular_texi/reference.tex(,3738)   // the part of f with (total) degree >3:
../singular_texi/reference.tex(,3739)   f-jet(f,3);
../singular_texi/reference.tex(,3740) @expansion{} x2y2+z4
../singular_texi/reference.tex(,3741)   // the homogeneous part of f of degree 2:
../singular_texi/reference.tex(,3742)   jet(f,2)-jet(f,1);
../singular_texi/reference.tex(,3743) @expansion{} x2+y2+xz
../singular_texi/reference.tex(,3744)   // the part of maximal degree:
../singular_texi/reference.tex(,3745)   jet(f,deg(f))-jet(f,deg(f)-1);
../singular_texi/reference.tex(,3746) @expansion{} x2y2+z4
../singular_texi/reference.tex(,3747)   // the absolute term of f:
../singular_texi/reference.tex(,3748)   jet(f,0);
../singular_texi/reference.tex(,3749) @expansion{} 1
../singular_texi/reference.tex(,3750)   // now for other types:
../singular_texi/reference.tex(,3751)   ideal i=f,x,f*f;
../singular_texi/reference.tex(,3752)   jet(i,2);
../singular_texi/reference.tex(,3753) @expansion{} _[1]=x2+y2+xz+x+1
../singular_texi/reference.tex(,3754) @expansion{} _[2]=x
../singular_texi/reference.tex(,3755) @expansion{} _[3]=3x2+2y2+2xz+2x+1
../singular_texi/reference.tex(,3756)   vector v=[f,1,x];
../singular_texi/reference.tex(,3757)   jet(v,1);
../singular_texi/reference.tex(,3758) @expansion{} [x+1,1,x]
../singular_texi/reference.tex(,3759)   jet(v,0);
../singular_texi/reference.tex(,3760) @expansion{} [1,1]
../singular_texi/reference.tex(,3761)   v=[f,1,0];
../singular_texi/reference.tex(,3762)   module m=v,v,[1,x2,z3,0,1];
../singular_texi/reference.tex(,3763)   jet(m,2);
../singular_texi/reference.tex(,3764) @expansion{} _[1]=[x2+y2+xz+x+1,1]
../singular_texi/reference.tex(,3765) @expansion{} _[2]=[x2+y2+xz+x+1,1]
../singular_texi/reference.tex(,3766) @expansion{} _[3]=[1,x2,0,0,1]
../singular_texi/reference.tex(,3767) @c end example jet reference.doc:2666
../singular_texi/reference.tex(,3768) @end smallexample
../singular_texi/reference.tex(,3769) @end table
../singular_texi/reference.tex(,3770) @c inserted refs from reference.doc:2693
../singular_texi/reference.tex(,3784) See
../singular_texi/reference.tex(,3785) @ref{deg};
../singular_texi/reference.tex(,3786) @ref{ideal};
../singular_texi/reference.tex(,3787) @ref{int};
../singular_texi/reference.tex(,3788) @ref{intvec};
../singular_texi/reference.tex(,3789) @ref{module};
../singular_texi/reference.tex(,3790) @ref{poly};
../singular_texi/reference.tex(,3791) @ref{vector}.
../singular_texi/reference.tex(,3793) @c end inserted refs from reference.doc:2693
../singular_texi/reference.tex(,3794) @c ---------------------------------------
../singular_texi/reference.tex(,3795) @node kbase, kill, jet, Functions
../singular_texi/reference.tex(,3796) @subsection kbase
../singular_texi/reference.tex(,3797) @cindex kbase
../singular_texi/reference.tex(,3798) @table @code
../singular_texi/reference.tex(,3799) @item @strong{Syntax:}
../singular_texi/reference.tex(,3800) @code{kbase (} ideal_expression @code{)}
../singular_texi/reference.tex(,3801) @*@code{kbase (} module_expression @code{)}
../singular_texi/reference.tex(,3802) @*@code{kbase (} ideal_expression@code{,} int_expression@code{)}
../singular_texi/reference.tex(,3803) @*@code{kbase (} module_expression@code{,} int_expression@code{)}
../singular_texi/reference.tex(,3804) @item @strong{Type:}
../singular_texi/reference.tex(,3805) the same as the input type of the first argument
../singular_texi/reference.tex(,3806) @item @strong{Purpose:}
../singular_texi/reference.tex(,3807) with one argument:
../singular_texi/reference.tex(,3808) computes a vector space basis (consisting of monomials)
../singular_texi/reference.tex(,3809) of the quotient ring by the ideal,
../singular_texi/reference.tex(,3810) resp.@: of a free module by the module, in case it is finite dimensional
../singular_texi/reference.tex(,3811) and if the input is a standard basis with respect to the ring ordering.
../singular_texi/reference.tex(,3812) If the input is not a standard basis, the leading terms of the input are
../singular_texi/reference.tex(,3813) used and the result may have no meaning.
../singular_texi/reference.tex(,3814) @*With two arguments: computes the part of a vector space basis of the
../singular_texi/reference.tex(,3815) respective quotient with degree of the monomials equal to the
../singular_texi/reference.tex(,3816) second argument. Here, the quotient does not need to be finite dimensional.
../singular_texi/reference.tex(,3817) @item @strong{Example:}
../singular_texi/reference.tex(,3818) @smallexample
../singular_texi/reference.tex(,3819) @c reused example kbase reference.doc:2728 
../singular_texi/reference.tex(,3820)   ring r=32003,(x,y,z),ds;
../singular_texi/reference.tex(,3821)   ideal i=x2,y2,z;
../singular_texi/reference.tex(,3822)   kbase(std(i));
../singular_texi/reference.tex(,3823) @expansion{} _[1]=xy
../singular_texi/reference.tex(,3824) @expansion{} _[2]=y
../singular_texi/reference.tex(,3825) @expansion{} _[3]=x
../singular_texi/reference.tex(,3826) @expansion{} _[4]=1
../singular_texi/reference.tex(,3827)   i=x2,y3,xyz;  // quotient not finite dimensional
../singular_texi/reference.tex(,3828)   kbase(std(i),2);
../singular_texi/reference.tex(,3829) @expansion{} _[1]=z2
../singular_texi/reference.tex(,3830) @expansion{} _[2]=yz
../singular_texi/reference.tex(,3831) @expansion{} _[3]=xz
../singular_texi/reference.tex(,3832) @expansion{} _[4]=y2
../singular_texi/reference.tex(,3833) @expansion{} _[5]=xy
../singular_texi/reference.tex(,3834) @c end example kbase reference.doc:2728
../singular_texi/reference.tex(,3835) @end smallexample
../singular_texi/reference.tex(,3836) @end table
../singular_texi/reference.tex(,3837) @c inserted refs from reference.doc:2737
../singular_texi/reference.tex(,3847) See
../singular_texi/reference.tex(,3848) @ref{ideal};
../singular_texi/reference.tex(,3849) @ref{module};
../singular_texi/reference.tex(,3850) @ref{vdim}.
../singular_texi/reference.tex(,3852) @c end inserted refs from reference.doc:2737
../singular_texi/reference.tex(,3853) @c ---------------------------------------
../singular_texi/reference.tex(,3854) @node kill, killattrib, kbase, Functions
../singular_texi/reference.tex(,3855) @subsection kill
../singular_texi/reference.tex(,3856) @cindex kill
../singular_texi/reference.tex(,3857) @table @code
../singular_texi/reference.tex(,3858) @item @strong{Syntax:}
../singular_texi/reference.tex(,3859) @code{kill (} name @code{)}
../singular_texi/reference.tex(,3860) @*@code{kill (} list_of_names @code{)}
../singular_texi/reference.tex(,3861) @item @strong{Type:}
../singular_texi/reference.tex(,3862) none
../singular_texi/reference.tex(,3863) @item @strong{Purpose:}
../singular_texi/reference.tex(,3864) deletes objects.
../singular_texi/reference.tex(,3865) @item @strong{Example:}
../singular_texi/reference.tex(,3866) @smallexample
../singular_texi/reference.tex(,3867) @c reused example kill reference.doc:2757 
../singular_texi/reference.tex(,3868)   int i=3;
../singular_texi/reference.tex(,3869)   ring r=0,x,dp;
../singular_texi/reference.tex(,3870)   poly p;
../singular_texi/reference.tex(,3871)   listvar();
../singular_texi/reference.tex(,3872) @expansion{} // r                    [0]  *ring
../singular_texi/reference.tex(,3873) @expansion{} //      p                    [0]  poly
../singular_texi/reference.tex(,3874) @expansion{} // i                    [0]  int 3
../singular_texi/reference.tex(,3875) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/reference.tex(,3876)   kill(i,r);
../singular_texi/reference.tex(,3877)   // the variable `i` does not exist any more
../singular_texi/reference.tex(,3878)   i;
../singular_texi/reference.tex(,3879) @expansion{}    ? `i` is undefined
../singular_texi/reference.tex(,3880) @expansion{}    ? error occurred in line 7: `  i;`
../singular_texi/reference.tex(,3881)   listvar();
../singular_texi/reference.tex(,3882) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/reference.tex(,3883) @c end example kill reference.doc:2757
../singular_texi/reference.tex(,3884) @end smallexample
../singular_texi/reference.tex(,3885) @end table
../singular_texi/reference.tex(,3886) @c inserted refs from reference.doc:2769
../singular_texi/reference.tex(,3896) See
../singular_texi/reference.tex(,3897) @ref{defined};
../singular_texi/reference.tex(,3898) @ref{general_lib};
../singular_texi/reference.tex(,3899) @ref{names}.
../singular_texi/reference.tex(,3901) @c end inserted refs from reference.doc:2769
../singular_texi/reference.tex(,3902) @c ---------------------------------------
../singular_texi/reference.tex(,3903) @node killattrib, koszul, kill, Functions
../singular_texi/reference.tex(,3904) @subsection killattrib
../singular_texi/reference.tex(,3905) @cindex killattrib
../singular_texi/reference.tex(,3906) @table @code
../singular_texi/reference.tex(,3907) @item @strong{Syntax:}
../singular_texi/reference.tex(,3908) @code{killattrib (} name@code{,} string_expression @code{)}
../singular_texi/reference.tex(,3909) @item @strong{Type:}
../singular_texi/reference.tex(,3910) none
../singular_texi/reference.tex(,3911) @item @strong{Purpose:}
../singular_texi/reference.tex(,3912) deletes the attribute given as the second argument.
../singular_texi/reference.tex(,3913) @item @strong{Example:}
../singular_texi/reference.tex(,3914) @smallexample
../singular_texi/reference.tex(,3915) @c reused example killattrib reference.doc:2788 
../singular_texi/reference.tex(,3916)   ring r=32003,(x,y),lp;
../singular_texi/reference.tex(,3917)   ideal i=maxideal(1);
../singular_texi/reference.tex(,3918)   attrib(i,"isSB",1);
../singular_texi/reference.tex(,3919)   attrib(i);
../singular_texi/reference.tex(,3920) @expansion{} attr:isSB, type int
../singular_texi/reference.tex(,3921)   killattrib(i,"isSB");
../singular_texi/reference.tex(,3922)   attrib(i);
../singular_texi/reference.tex(,3923) @expansion{} no attributes
../singular_texi/reference.tex(,3924) @c end example killattrib reference.doc:2788
../singular_texi/reference.tex(,3925) @end smallexample
../singular_texi/reference.tex(,3926) @end table
../singular_texi/reference.tex(,3927) @c inserted refs from reference.doc:2798
../singular_texi/reference.tex(,3936) See
../singular_texi/reference.tex(,3937) @ref{attrib};
../singular_texi/reference.tex(,3938) @ref{option}.
../singular_texi/reference.tex(,3940) @c end inserted refs from reference.doc:2798
../singular_texi/reference.tex(,3941) @c ---------------------------------------
../singular_texi/reference.tex(,3942) @node koszul, laguerre, killattrib, Functions
../singular_texi/reference.tex(,3943) @subsection koszul
../singular_texi/reference.tex(,3944) @cindex koszul
../singular_texi/reference.tex(,3945) @table @code
../singular_texi/reference.tex(,3946) @item @strong{Syntax:}
../singular_texi/reference.tex(,3947) @code{koszul (} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,3948) @*@code{koszul (} int_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,3949) @*@code{koszul (} int_expression@code{,} int_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,3950) @item @strong{Type:}
../singular_texi/reference.tex(,3951) matrix
../singular_texi/reference.tex(,3952) @item @strong{Purpose:}
../singular_texi/reference.tex(,3953) @code{koszul(d,n)} computes a matrix of the Koszul relations of degree d of
../singular_texi/reference.tex(,3954) the first n ring variables.
../singular_texi/reference.tex(,3955) 
../singular_texi/reference.tex(,3956) @code{koszul(d,id)} computes a matrix of the Koszul relations of degree d of
../singular_texi/reference.tex(,3957) the generators of the ideal @code{id}.
../singular_texi/reference.tex(,3958) 
../singular_texi/reference.tex(,3959) @code{koszul(d,n,id)} computes a matrix of the Koszul relations of degree d of
../singular_texi/reference.tex(,3960) the first n generators of the ideal @code{id}.
../singular_texi/reference.tex(,3961) 
../singular_texi/reference.tex(,3962) @item @strong{Note:}
../singular_texi/reference.tex(,3963) @code{koszul(1,id),koszul(2,id),...} form a complex, that is, the product
../singular_texi/reference.tex(,3964) of the matrices @code{koszul(i,id)} and @code{koszul(i+1,id)} equals zero.
../singular_texi/reference.tex(,3965) @item @strong{Example:}
../singular_texi/reference.tex(,3966) @smallexample
../singular_texi/reference.tex(,3967) @c reused example koszul reference.doc:2829 
../singular_texi/reference.tex(,3968)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,3969)   print(koszul(2,3));
../singular_texi/reference.tex(,3970) @expansion{} -y,-z,0, 
../singular_texi/reference.tex(,3971) @expansion{} x, 0, -z,
../singular_texi/reference.tex(,3972) @expansion{} 0, x, y  
../singular_texi/reference.tex(,3973)   ideal I=xz2+yz2+z3,xyz+y2z+yz2,xy2+y3+y2z;
../singular_texi/reference.tex(,3974)   print(koszul(1,I));
../singular_texi/reference.tex(,3975) @expansion{} xz2+yz2+z3,xyz+y2z+yz2,xy2+y3+y2z
../singular_texi/reference.tex(,3976)   print(koszul(2,I));
../singular_texi/reference.tex(,3977) @expansion{} -xyz-y2z-yz2,-xy2-y3-y2z,0,          
../singular_texi/reference.tex(,3978) @expansion{} xz2+yz2+z3,  0,          -xy2-y3-y2z,
../singular_texi/reference.tex(,3979) @expansion{} 0,           xz2+yz2+z3, xyz+y2z+yz2 
../singular_texi/reference.tex(,3980)   print(koszul(2,I)*koszul(3,I));
../singular_texi/reference.tex(,3981) @expansion{} 0,
../singular_texi/reference.tex(,3982) @expansion{} 0,
../singular_texi/reference.tex(,3983) @expansion{} 0 
../singular_texi/reference.tex(,3984) @c end example koszul reference.doc:2829
../singular_texi/reference.tex(,3985) @end smallexample
../singular_texi/reference.tex(,3986) @end table
../singular_texi/reference.tex(,3987) @c inserted refs from reference.doc:2839
../singular_texi/reference.tex(,3996) See
../singular_texi/reference.tex(,3997) @ref{int};
../singular_texi/reference.tex(,3998) @ref{matrix}.
../singular_texi/reference.tex(,4000) @c end inserted refs from reference.doc:2839
../singular_texi/reference.tex(,4001) @c ---------------------------------------
../singular_texi/reference.tex(,4002) @node laguerre, lead, koszul, Functions
../singular_texi/reference.tex(,4003) @subsection laguerre
../singular_texi/reference.tex(,4004) @cindex laguerre
../singular_texi/reference.tex(,4005) @table @code
../singular_texi/reference.tex(,4006) @item @strong{Syntax:}
../singular_texi/reference.tex(,4007) @code{laguerre (} poly_expression@code{,} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,4008) @item @strong{Type:}
../singular_texi/reference.tex(,4009) list
../singular_texi/reference.tex(,4010) @item @strong{Purpose:}
../singular_texi/reference.tex(,4011) computes all complex roots of a univariate polynomial using Laguerre's
../singular_texi/reference.tex(,4012) algorithm. The second argument defines the precision of the fractional part
../singular_texi/reference.tex(,4013) if the ground field is the field of rational numbers, otherwise it will be
../singular_texi/reference.tex(,4014) ignored. The third argument (can be 0, 1 or 2) gives the number of extra runs
../singular_texi/reference.tex(,4015) for Laguerre's algorithm (with corrupted roots), leading to better results.
../singular_texi/reference.tex(,4016) @item @strong{Note:}
../singular_texi/reference.tex(,4017) If the ground field is the field of complex numbers, the elements of the
../singular_texi/reference.tex(,4018) list are of type number, otherwise of type string.
../singular_texi/reference.tex(,4019) @item @strong{Example:}
../singular_texi/reference.tex(,4020) @smallexample
../singular_texi/reference.tex(,4021) @c reused example laguerre reference.doc:2864 
../singular_texi/reference.tex(,4022) ring rs1=0,(x,y),lp;
../singular_texi/reference.tex(,4023) poly f=15x5+x3+x2-10;
../singular_texi/reference.tex(,4024) laguerre(f,10,2);
../singular_texi/reference.tex(,4025) @expansion{} [1]:
../singular_texi/reference.tex(,4026) @expansion{}    (0.2930464644-I*0.9003002396)
../singular_texi/reference.tex(,4027) @expansion{} [2]:
../singular_texi/reference.tex(,4028) @expansion{}    (0.2930464644+I*0.9003002396)
../singular_texi/reference.tex(,4029) @expansion{} [3]:
../singular_texi/reference.tex(,4030) @expansion{}    (-0.7392783383-I*0.5355190078)
../singular_texi/reference.tex(,4031) @expansion{} [4]:
../singular_texi/reference.tex(,4032) @expansion{}    (-0.7392783383+I*0.5355190078)
../singular_texi/reference.tex(,4033) @expansion{} [5]:
../singular_texi/reference.tex(,4034) @expansion{}    0.8924637479
../singular_texi/reference.tex(,4035) @c end example laguerre reference.doc:2864
../singular_texi/reference.tex(,4036) @end smallexample
../singular_texi/reference.tex(,4037) @end table
../singular_texi/reference.tex(,4038) @c @c ref
../singular_texi/reference.tex(,4039) @c @c ref
../singular_texi/reference.tex(,4040) @c -------------------------------------------------
../singular_texi/reference.tex(,4041) @node lead, leadcoef, laguerre, Functions
../singular_texi/reference.tex(,4042) @subsection lead
../singular_texi/reference.tex(,4043) @cindex lead
../singular_texi/reference.tex(,4044) @table @code
../singular_texi/reference.tex(,4045) @item @strong{Syntax:}
../singular_texi/reference.tex(,4046) @code{lead (} poly_expression @code{)}
../singular_texi/reference.tex(,4047) @*@code{lead (} vector_expression @code{)}
../singular_texi/reference.tex(,4048) @*@code{lead (} ideal_expression @code{)}
../singular_texi/reference.tex(,4049) @*@code{lead (} module_expression @code{)}
../singular_texi/reference.tex(,4050) @item @strong{Type:}
../singular_texi/reference.tex(,4051) the same as the input type
../singular_texi/reference.tex(,4052) @item @strong{Purpose:}
../singular_texi/reference.tex(,4053) returns the leading (or initial) term(s) of a polynomial, a vector,
../singular_texi/reference.tex(,4054) resp.@: of the generators of an ideal or module with respect
../singular_texi/reference.tex(,4055) to the monomial ordering.
../singular_texi/reference.tex(,4056) @cindex IN
../singular_texi/reference.tex(,4057) @item @strong{Note:}
../singular_texi/reference.tex(,4058) @code{IN} may be used instead of @code{lead}.
../singular_texi/reference.tex(,4059) @item @strong{Example:}
../singular_texi/reference.tex(,4060) @smallexample
../singular_texi/reference.tex(,4061) @c reused example lead reference.doc:2894 
../singular_texi/reference.tex(,4062)   ring r=32003,(x,y,z),(c,ds);
../singular_texi/reference.tex(,4063)   poly f=2x2+3y+4z3;
../singular_texi/reference.tex(,4064)   vector v=[2x10,f];
../singular_texi/reference.tex(,4065)   ideal i=f,z;
../singular_texi/reference.tex(,4066)   module m=v,[0,0,2+x];
../singular_texi/reference.tex(,4067)   lead(f);
../singular_texi/reference.tex(,4068) @expansion{} 3y
../singular_texi/reference.tex(,4069)   lead(v);
../singular_texi/reference.tex(,4070) @expansion{} [2x10]
../singular_texi/reference.tex(,4071)   lead(i);
../singular_texi/reference.tex(,4072) @expansion{} _[1]=3y
../singular_texi/reference.tex(,4073) @expansion{} _[2]=z
../singular_texi/reference.tex(,4074)   lead(m);
../singular_texi/reference.tex(,4075) @expansion{} _[1]=[2x10]
../singular_texi/reference.tex(,4076) @expansion{} _[2]=[0,0,2]
../singular_texi/reference.tex(,4077)   lead(0);
../singular_texi/reference.tex(,4078) @expansion{} 0
../singular_texi/reference.tex(,4079) @c end example lead reference.doc:2894
../singular_texi/reference.tex(,4080) @end smallexample
../singular_texi/reference.tex(,4081) @end table
../singular_texi/reference.tex(,4082) @c inserted refs from reference.doc:2908
../singular_texi/reference.tex(,4096) See
../singular_texi/reference.tex(,4097) @ref{ideal};
../singular_texi/reference.tex(,4098) @ref{leadcoef};
../singular_texi/reference.tex(,4099) @ref{leadexp};
../singular_texi/reference.tex(,4100) @ref{leadmonom};
../singular_texi/reference.tex(,4101) @ref{module};
../singular_texi/reference.tex(,4102) @ref{poly};
../singular_texi/reference.tex(,4103) @ref{vector}.
../singular_texi/reference.tex(,4105) @c end inserted refs from reference.doc:2908
../singular_texi/reference.tex(,4106) @c -------------------------------------------------
../singular_texi/reference.tex(,4107) @node leadcoef, leadexp, lead, Functions
../singular_texi/reference.tex(,4108) @subsection leadcoef
../singular_texi/reference.tex(,4109) @cindex leadcoef
../singular_texi/reference.tex(,4110) @table @code
../singular_texi/reference.tex(,4111) @item @strong{Syntax:}
../singular_texi/reference.tex(,4112) @code{leadcoef (} poly_expression @code{)}
../singular_texi/reference.tex(,4113) @*@code{leadcoef (} vector_expression @code{)}
../singular_texi/reference.tex(,4114) @item @strong{Type:}
../singular_texi/reference.tex(,4115) number
../singular_texi/reference.tex(,4116) @item @strong{Purpose:}
../singular_texi/reference.tex(,4117) returns the leading (or initial) coefficient of a polynomial or a vector
../singular_texi/reference.tex(,4118) with respect to the monomial ordering.
../singular_texi/reference.tex(,4119) @item @strong{Example:}
../singular_texi/reference.tex(,4120) @smallexample
../singular_texi/reference.tex(,4121) @c reused example leadcoef reference.doc:2933 
../singular_texi/reference.tex(,4122)   ring r=32003,(x,y,z),(c,ds);
../singular_texi/reference.tex(,4123)   poly f=x2+y+z3;
../singular_texi/reference.tex(,4124)   vector v=[2*x^10,f];
../singular_texi/reference.tex(,4125)   leadcoef(f);
../singular_texi/reference.tex(,4126) @expansion{} 1
../singular_texi/reference.tex(,4127)   leadcoef(v);
../singular_texi/reference.tex(,4128) @expansion{} 2
../singular_texi/reference.tex(,4129)   leadcoef(0);
../singular_texi/reference.tex(,4130) @expansion{} 0
../singular_texi/reference.tex(,4131) @c end example leadcoef reference.doc:2933
../singular_texi/reference.tex(,4132) @end smallexample
../singular_texi/reference.tex(,4133) @end table
../singular_texi/reference.tex(,4134) @c inserted refs from reference.doc:2943
../singular_texi/reference.tex(,4147) See
../singular_texi/reference.tex(,4148) @ref{lead};
../singular_texi/reference.tex(,4149) @ref{leadexp};
../singular_texi/reference.tex(,4150) @ref{leadmonom};
../singular_texi/reference.tex(,4151) @ref{number};
../singular_texi/reference.tex(,4152) @ref{poly};
../singular_texi/reference.tex(,4153) @ref{vector}.
../singular_texi/reference.tex(,4155) @c end inserted refs from reference.doc:2943
../singular_texi/reference.tex(,4156) @c -------------------------------------------------
../singular_texi/reference.tex(,4157) @node leadexp, leadmonom, leadcoef, Functions
../singular_texi/reference.tex(,4158) @subsection leadexp
../singular_texi/reference.tex(,4159) @cindex leadexp
../singular_texi/reference.tex(,4160) @table @code
../singular_texi/reference.tex(,4161) @item @strong{Syntax:}
../singular_texi/reference.tex(,4162) @code{leadexp (} poly_expression @code{)}
../singular_texi/reference.tex(,4163) @*@code{leadexp (} vector_expression @code{)}
../singular_texi/reference.tex(,4164) @item @strong{Type:}
../singular_texi/reference.tex(,4165) intvec
../singular_texi/reference.tex(,4166) @item @strong{Purpose:}
../singular_texi/reference.tex(,4167) returns the exponent vector of the leading monomial of a polynomial or a vector.
../singular_texi/reference.tex(,4168) In the case of a vector the last component is the index in the vector.
../singular_texi/reference.tex(,4169) @item @strong{Example:}
../singular_texi/reference.tex(,4170) @smallexample
../singular_texi/reference.tex(,4171) @c reused example leadexp reference.doc:2967 
../singular_texi/reference.tex(,4172)   ring r=32003,(x,y,z),(c,ds);
../singular_texi/reference.tex(,4173)   poly f=x2+y+z3;
../singular_texi/reference.tex(,4174)   vector v=[2*x^10,f];
../singular_texi/reference.tex(,4175)   leadexp(f);
../singular_texi/reference.tex(,4176) @expansion{} 0,1,0
../singular_texi/reference.tex(,4177)   leadexp(v);
../singular_texi/reference.tex(,4178) @expansion{} 10,0,0,1
../singular_texi/reference.tex(,4179)   leadexp(0);
../singular_texi/reference.tex(,4180) @expansion{} 0,0,0
../singular_texi/reference.tex(,4181) @c end example leadexp reference.doc:2967
../singular_texi/reference.tex(,4182) @end smallexample
../singular_texi/reference.tex(,4183) @end table
../singular_texi/reference.tex(,4184) @c inserted refs from reference.doc:2977
../singular_texi/reference.tex(,4197) See
../singular_texi/reference.tex(,4198) @ref{intvec};
../singular_texi/reference.tex(,4199) @ref{lead};
../singular_texi/reference.tex(,4200) @ref{leadcoef};
../singular_texi/reference.tex(,4201) @ref{leadmonom};
../singular_texi/reference.tex(,4202) @ref{poly};
../singular_texi/reference.tex(,4203) @ref{vector}.
../singular_texi/reference.tex(,4205) @c end inserted refs from reference.doc:2977
../singular_texi/reference.tex(,4206) @c -------------------------------------------------
../singular_texi/reference.tex(,4207) @node leadmonom, LIB, leadexp, Functions
../singular_texi/reference.tex(,4208) @subsection leadmonom
../singular_texi/reference.tex(,4209) @cindex leadmonom
../singular_texi/reference.tex(,4210) @table @code
../singular_texi/reference.tex(,4211) @item @strong{Syntax:}
../singular_texi/reference.tex(,4212) @code{leadmonom (} poly_expression @code{)}
../singular_texi/reference.tex(,4213) @*@code{leadmonom (} vector_expression @code{)}
../singular_texi/reference.tex(,4214) @item @strong{Type:}
../singular_texi/reference.tex(,4215) the same as the input type
../singular_texi/reference.tex(,4216) @item @strong{Purpose:}
../singular_texi/reference.tex(,4217) returns the leading monomial of a polynomial or a vector as a polynomial
../singular_texi/reference.tex(,4218) or vector whose coefficient is one.
../singular_texi/reference.tex(,4219) @item @strong{Example:}
../singular_texi/reference.tex(,4220) @smallexample
../singular_texi/reference.tex(,4221) @c reused example leadmonom reference.doc:3001 
../singular_texi/reference.tex(,4222)   ring r=32003,(x,y,z),(c,ds);
../singular_texi/reference.tex(,4223)   poly f=2x2+3y+4z3;
../singular_texi/reference.tex(,4224)   vector v=[2x10,f];
../singular_texi/reference.tex(,4225)   leadmonom(f);
../singular_texi/reference.tex(,4226) @expansion{} y
../singular_texi/reference.tex(,4227)   leadmonom(v);
../singular_texi/reference.tex(,4228) @expansion{} [x10]
../singular_texi/reference.tex(,4229)   leadmonom(0);
../singular_texi/reference.tex(,4230) @expansion{} 0
../singular_texi/reference.tex(,4231) @c end example leadmonom reference.doc:3001
../singular_texi/reference.tex(,4232) @end smallexample
../singular_texi/reference.tex(,4233) @end table
../singular_texi/reference.tex(,4234) 
../singular_texi/reference.tex(,4235) @c inserted refs from reference.doc:3012
../singular_texi/reference.tex(,4248) See
../singular_texi/reference.tex(,4249) @ref{intvec};
../singular_texi/reference.tex(,4250) @ref{lead};
../singular_texi/reference.tex(,4251) @ref{leadcoef};
../singular_texi/reference.tex(,4252) @ref{leadexp};
../singular_texi/reference.tex(,4253) @ref{poly};
../singular_texi/reference.tex(,4254) @ref{vector}.
../singular_texi/reference.tex(,4256) @c end inserted refs from reference.doc:3012
../singular_texi/reference.tex(,4257) @c ---------------------------------------
../singular_texi/reference.tex(,4258) @node LIB, lift, leadmonom, Functions
../singular_texi/reference.tex(,4259) @subsection LIB
../singular_texi/reference.tex(,4260) @cindex LIB
../singular_texi/reference.tex(,4261) @table @code
../singular_texi/reference.tex(,4262) @item @strong{Syntax:}
../singular_texi/reference.tex(,4263) @code{LIB} string_expression@code{;}
../singular_texi/reference.tex(,4264) @item @strong{Type:}
../singular_texi/reference.tex(,4265) none
../singular_texi/reference.tex(,4272) @item @strong{Purpose:}
../singular_texi/reference.tex(,4273) reads a library of procedures from a file. If the given filename does
../singular_texi/reference.tex(,4274) not start with @kbd{.} or @kbd{/} and cannot be located in the current
../singular_texi/reference.tex(,4275) directory, each directory contained in the library
../singular_texi/reference.tex(,4276) @code{SearchPath} is searched for file of this name.
../singular_texi/reference.tex(,4277) @xref{Loading of a library}, for more info on @code{SearchPath}.
../singular_texi/reference.tex(,4279) 
../singular_texi/reference.tex(,4280) @item @strong{Note on standard.lib:}
../singular_texi/reference.tex(,4281) Unless  @sc{Singular} is started with the @code{--no-stdlib} option, the
../singular_texi/reference.tex(,4282) library @code{standard.lib} is automatically loaded at start-up time.
../singular_texi/reference.tex(,4283) 
../singular_texi/reference.tex(,4284) @item @strong{Syntax:}
../singular_texi/reference.tex(,4285) @code{LIB;}
../singular_texi/reference.tex(,4286) @item @strong{Type:}
../singular_texi/reference.tex(,4287) string
../singular_texi/reference.tex(,4288) @item @strong{Purpose:}
../singular_texi/reference.tex(,4289) shows all loaded libraries written in Singular.
../singular_texi/reference.tex(,4290) 
../singular_texi/reference.tex(,4291) 
../singular_texi/reference.tex(,4292) @item @strong{Example:}
../singular_texi/reference.tex(,4293) @smallexample
../singular_texi/reference.tex(,4294) @c reused example LIB reference.doc:3058 
../singular_texi/reference.tex(,4295)   option(loadLib); // show loading of libraries
../singular_texi/reference.tex(,4296)   LIB;             // standard.lib is loaded
../singular_texi/reference.tex(,4297) @expansion{} standard.lib
../singular_texi/reference.tex(,4298) 
../singular_texi/reference.tex(,4299)                    // the names of the procedures of inout.lib
../singular_texi/reference.tex(,4300)   LIB "inout.lib"; // are now known to Singular
../singular_texi/reference.tex(,4301) @expansion{} // ** loaded inout.lib (1.21.2.5,2002/06/12)
../singular_texi/reference.tex(,4302)   LIB;
../singular_texi/reference.tex(,4303) @expansion{} standard.lib,inout.lib
../singular_texi/reference.tex(,4304) @c end example LIB reference.doc:3058
../singular_texi/reference.tex(,4305) @end smallexample
../singular_texi/reference.tex(,4306) @end table
../singular_texi/reference.tex(,4340) @c inserted refs from reference.doc:3084
../singular_texi/reference.tex(,4355) See
../singular_texi/reference.tex(,4356) @ref{Command line options};
../singular_texi/reference.tex(,4357) @ref{Loading of a library};
../singular_texi/reference.tex(,4358) @ref{Procedures and libraries};
../singular_texi/reference.tex(,4359) @ref{SINGULAR libraries};
../singular_texi/reference.tex(,4360) @ref{proc};
../singular_texi/reference.tex(,4361) @ref{standard_lib};
../singular_texi/reference.tex(,4362) @ref{string};
../singular_texi/reference.tex(,4363) @ref{system}.
../singular_texi/reference.tex(,4365) @c end inserted refs from reference.doc:3084
../singular_texi/reference.tex(,4367) @c -------------------------------------------------
../singular_texi/reference.tex(,4368) @node lift, liftstd, LIB, Functions
../singular_texi/reference.tex(,4369) @subsection lift
../singular_texi/reference.tex(,4370) @cindex lift
../singular_texi/reference.tex(,4371) @table @code
../singular_texi/reference.tex(,4372) @item @strong{Syntax:}
../singular_texi/reference.tex(,4373) @code{lift (} ideal_expression@code{,} subideal_expression @code{)}
../singular_texi/reference.tex(,4374) @*@code{lift (} module_expression@code{,} submodule_expression @code{)}
../singular_texi/reference.tex(,4375) @*@code{lift (} ideal_expression@code{,} subideal_expression@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,4376) @*@code{lift (} module_expression@code{,} submodule_expression@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,4377) @item @strong{Type:}
../singular_texi/reference.tex(,4378) matrix
../singular_texi/reference.tex(,4379) @item @strong{Purpose:}
../singular_texi/reference.tex(,4380) computes the transformation matrix which expresses the generators of a
../singular_texi/reference.tex(,4381) submodule in terms of the generators of a module.  Uses different
../singular_texi/reference.tex(,4382) algorithms for modules which are, resp.@: are not, represented by a
../singular_texi/reference.tex(,4383) standard basis.
../singular_texi/reference.tex(,4384) @* More precisely, if  @code{m} is the
../singular_texi/reference.tex(,4385) module (or ideal), @code{sm} the submodule (or ideal),
../singular_texi/reference.tex(,4386) and @code{T} the transformation matrix returned by
../singular_texi/reference.tex(,4387) lift, then @code{matrix(sm)*U = matrix(m)*T}
../singular_texi/reference.tex(,4388) and @code{module(sm*U) = module(matrix(m)*T)}
../singular_texi/reference.tex(,4389) (resp.@: @code{ideal(sm*U) = ideal(matrix(m)*T)}),
../singular_texi/reference.tex(,4390) where @code{U} is a diagonal matrix of units.
../singular_texi/reference.tex(,4391) @*@code{U} is always the unity matrix if the basering is a polynomial ring
../singular_texi/reference.tex(,4392) (not power series ring). @code{U} is stored in the optional third argument.
../singular_texi/reference.tex(,4393) @item @strong{Note:}
../singular_texi/reference.tex(,4394) Gives a warning if @code{sm} is not a submodule.
../singular_texi/reference.tex(,4395) @item @strong{Example:}
../singular_texi/reference.tex(,4396) @smallexample
../singular_texi/reference.tex(,4397) @c reused example lift reference.doc:3126 
../singular_texi/reference.tex(,4398)   ring r=32003,(x,y,z),(dp,C);
../singular_texi/reference.tex(,4399)   ideal m=3x2+yz,7y6+2x2y+5xz;
../singular_texi/reference.tex(,4400)   poly f=y7+x3+xyz+z2;
../singular_texi/reference.tex(,4401)   ideal i=jacob(f);
../singular_texi/reference.tex(,4402)   matrix T=lift(i,m);
../singular_texi/reference.tex(,4403)   matrix(m)-matrix(i)*T;
../singular_texi/reference.tex(,4404) @expansion{} _[1,1]=0
../singular_texi/reference.tex(,4405) @expansion{} _[1,2]=0
../singular_texi/reference.tex(,4406) @c end example lift reference.doc:3126
../singular_texi/reference.tex(,4407) @end smallexample
../singular_texi/reference.tex(,4408) @end table
../singular_texi/reference.tex(,4409) @c inserted refs from reference.doc:3136
../singular_texi/reference.tex(,4419) See
../singular_texi/reference.tex(,4420) @ref{division};
../singular_texi/reference.tex(,4421) @ref{ideal};
../singular_texi/reference.tex(,4422) @ref{module}.
../singular_texi/reference.tex(,4424) @c end inserted refs from reference.doc:3136
../singular_texi/reference.tex(,4425) @c -----------------------------------------
../singular_texi/reference.tex(,4426) @node liftstd, listvar, lift, Functions
../singular_texi/reference.tex(,4427) @subsection liftstd
../singular_texi/reference.tex(,4428) @cindex liftstd
../singular_texi/reference.tex(,4429) @table @code
../singular_texi/reference.tex(,4430) @item @strong{Syntax:}
../singular_texi/reference.tex(,4431) @code{liftstd (} ideal_expression@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,4432) @*@code{liftstd (} module_expression@code{,} matrix_name @code{)}
../singular_texi/reference.tex(,4433) @item @strong{Type:}
../singular_texi/reference.tex(,4434) ideal or module
../singular_texi/reference.tex(,4435) @item @strong{Purpose:}
../singular_texi/reference.tex(,4436) returns a standard basis of an ideal or module and the transformation
../singular_texi/reference.tex(,4437) matrix from the given ideal, resp.@: module, to the standard basis.
../singular_texi/reference.tex(,4438) @*That is, if @code{m} is the ideal or module, @code{sm} the standard
../singular_texi/reference.tex(,4439) basis returned by @code{liftstd}, and @code{T} the transformation matrix
../singular_texi/reference.tex(,4440) then @code{matrix(sm)=matrix(m)*T} and @code{sm=ideal(matrix(m)*T)},
../singular_texi/reference.tex(,4441) resp.@: @code{sm=module(matrix(m)*T)}.
../singular_texi/reference.tex(,4442) @item @strong{Example:}
../singular_texi/reference.tex(,4443) @smallexample
../singular_texi/reference.tex(,4444) @c reused example liftstd reference.doc:3161 
../singular_texi/reference.tex(,4445)   ring R=0,(x,y,z),dp;
../singular_texi/reference.tex(,4446)   poly f=x3+y7+z2+xyz;
../singular_texi/reference.tex(,4447)   ideal i=jacob(f);
../singular_texi/reference.tex(,4448)   matrix T;
../singular_texi/reference.tex(,4449)   ideal sm=liftstd(i,T);
../singular_texi/reference.tex(,4450)   sm;
../singular_texi/reference.tex(,4451) @expansion{} sm[1]=xy+2z
../singular_texi/reference.tex(,4452) @expansion{} sm[2]=3x2+yz
../singular_texi/reference.tex(,4453) @expansion{} sm[3]=yz2+3048192z3
../singular_texi/reference.tex(,4454) @expansion{} sm[4]=3024xz2-yz2
../singular_texi/reference.tex(,4455) @expansion{} sm[5]=y2z-6xz
../singular_texi/reference.tex(,4456) @expansion{} sm[6]=3097158156288z4+2016z3
../singular_texi/reference.tex(,4457) @expansion{} sm[7]=7y6+xz
../singular_texi/reference.tex(,4458)   print(T);
../singular_texi/reference.tex(,4459) @expansion{} 0,1,T[1,3],   T[1,4],y,  T[1,6],0,
../singular_texi/reference.tex(,4460) @expansion{} 0,0,-3x+3024z,3x,    0,  T[2,6],1,
../singular_texi/reference.tex(,4461) @expansion{} 1,0,T[3,3],   T[3,4],-3x,T[3,6],0 
../singular_texi/reference.tex(,4462)   matrix(sm)-matrix(i)*T;
../singular_texi/reference.tex(,4463) @expansion{} _[1,1]=0
../singular_texi/reference.tex(,4464) @expansion{} _[1,2]=0
../singular_texi/reference.tex(,4465) @expansion{} _[1,3]=0
../singular_texi/reference.tex(,4466) @expansion{} _[1,4]=0
../singular_texi/reference.tex(,4467) @expansion{} _[1,5]=0
../singular_texi/reference.tex(,4468) @expansion{} _[1,6]=0
../singular_texi/reference.tex(,4469) @expansion{} _[1,7]=0
../singular_texi/reference.tex(,4470) @c end example liftstd reference.doc:3161
../singular_texi/reference.tex(,4471) @end smallexample
../singular_texi/reference.tex(,4472) @end table
../singular_texi/reference.tex(,4473) @c inserted refs from reference.doc:3173
../singular_texi/reference.tex(,4485) See
../singular_texi/reference.tex(,4486) @ref{ideal};
../singular_texi/reference.tex(,4487) @ref{matrix};
../singular_texi/reference.tex(,4488) @ref{option};
../singular_texi/reference.tex(,4489) @ref{ring};
../singular_texi/reference.tex(,4490) @ref{std}.
../singular_texi/reference.tex(,4492) @c end inserted refs from reference.doc:3173
../singular_texi/reference.tex(,4493) @c ---------------------------------------
../singular_texi/reference.tex(,4494) @node listvar, lres, liftstd, Functions
../singular_texi/reference.tex(,4495) @subsection listvar
../singular_texi/reference.tex(,4496) @cindex listvar
../singular_texi/reference.tex(,4497) @table @code
../singular_texi/reference.tex(,4498) @item @strong{Syntax:}
../singular_texi/reference.tex(,4507) @code{listvar (} [package] @code{)}
../singular_texi/reference.tex(,4508) @*@code{listvar (} [package@code{,}] type @code{)}
../singular_texi/reference.tex(,4509) @*@code{listvar (} [package@code{,}] ring_name @code{)}
../singular_texi/reference.tex(,4510) @*@code{listvar (} [package@code{,}] name @code{)}
../singular_texi/reference.tex(,4511) @*@code{listvar (} [package@code{,}] @code{all )}
../singular_texi/reference.tex(,4513) @item @strong{Type:}
../singular_texi/reference.tex(,4514) none
../singular_texi/reference.tex(,4515) @item @strong{Purpose:}
../singular_texi/reference.tex(,4516) lists all (user-)defined names in the current namespace:
../singular_texi/reference.tex(,4517) @itemize @bullet
../singular_texi/reference.tex(,4518) @item @code{listvar()}: all currently visible names except procedures,
../singular_texi/reference.tex(,4519) @item @code{listvar(}type@code{)}: all currently visible names of the given
../singular_texi/reference.tex(,4520) type,
../singular_texi/reference.tex(,4521) @item @code{listvar(}ring_name@code{)}: all names which belong to the given
../singular_texi/reference.tex(,4522) ring,
../singular_texi/reference.tex(,4523) @item @code{listvar(}name@code{)}: the object with the given name,
../singular_texi/reference.tex(,4524) @item @code{listvar(all)}: all names except procedures.
../singular_texi/reference.tex(,4525) @end itemize
../singular_texi/reference.tex(,4526) The current basering is marked with a @code{*}.  The nesting level of
../singular_texi/reference.tex(,4527) variables in procedures is shown in square brackets.
../singular_texi/reference.tex(,4528) 
../singular_texi/reference.tex(,4588) @item @strong{Example:}
../singular_texi/reference.tex(,4589) @smallexample
../singular_texi/reference.tex(,4590) @c reused example listvar_1 reference.doc:3243 
../singular_texi/reference.tex(,4591)   proc t1 @{ @}
../singular_texi/reference.tex(,4592)   proc t2 @{ @}
../singular_texi/reference.tex(,4593)   ring s;
../singular_texi/reference.tex(,4594)   poly ss;
../singular_texi/reference.tex(,4595)   ring r;
../singular_texi/reference.tex(,4596)   poly f=x+y+z;
../singular_texi/reference.tex(,4597)   int i=7;
../singular_texi/reference.tex(,4598)   ideal I=f,x,y;
../singular_texi/reference.tex(,4599)   listvar(all);
../singular_texi/reference.tex(,4600) @expansion{} // i                    [0]  int 7
../singular_texi/reference.tex(,4601) @expansion{} // r                    [0]  *ring
../singular_texi/reference.tex(,4602) @expansion{} //      I                    [0]  ideal, 3 generator(s)
../singular_texi/reference.tex(,4603) @expansion{} //      f                    [0]  poly
../singular_texi/reference.tex(,4604) @expansion{} // s                    [0]  ring
../singular_texi/reference.tex(,4605) @expansion{} //      ss                   [0]  poly
../singular_texi/reference.tex(,4606) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/reference.tex(,4607)   listvar();
../singular_texi/reference.tex(,4608) @expansion{} // i                    [0]  int 7
../singular_texi/reference.tex(,4609) @expansion{} // r                    [0]  *ring
../singular_texi/reference.tex(,4610) @expansion{} //      I                    [0]  ideal, 3 generator(s)
../singular_texi/reference.tex(,4611) @expansion{} //      f                    [0]  poly
../singular_texi/reference.tex(,4612) @expansion{} // s                    [0]  ring
../singular_texi/reference.tex(,4613) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/reference.tex(,4614)   listvar(r);
../singular_texi/reference.tex(,4615) @expansion{} // r                    [0]  *ring
../singular_texi/reference.tex(,4616) @expansion{} // I                    [0]  ideal, 3 generator(s)
../singular_texi/reference.tex(,4617) @expansion{} // f                    [0]  poly
../singular_texi/reference.tex(,4618)   listvar(t1);
../singular_texi/reference.tex(,4619) @expansion{} // t1                   [0]  proc
../singular_texi/reference.tex(,4620)   listvar(proc);
../singular_texi/reference.tex(,4621) @expansion{} // t2                   [0]  proc
../singular_texi/reference.tex(,4622) @expansion{} // t1                   [0]  proc
../singular_texi/reference.tex(,4623) @expansion{} // fprintf              [0]  proc from standard.lib
../singular_texi/reference.tex(,4624) @expansion{} // printf               [0]  proc from standard.lib
../singular_texi/reference.tex(,4625) @expansion{} // sprintf              [0]  proc from standard.lib
../singular_texi/reference.tex(,4626) @expansion{} // intersect1           [0]  proc from standard.lib (static)
../singular_texi/reference.tex(,4627) @expansion{} // quotient4            [0]  proc from standard.lib
../singular_texi/reference.tex(,4628) @expansion{} // quotient5            [0]  proc from standard.lib
../singular_texi/reference.tex(,4629) @expansion{} // quotient3            [0]  proc from standard.lib
../singular_texi/reference.tex(,4630) @expansion{} // quotient2            [0]  proc from standard.lib
../singular_texi/reference.tex(,4631) @expansion{} // quotient1            [0]  proc from standard.lib
../singular_texi/reference.tex(,4632) @expansion{} // quotient0            [0]  proc from standard.lib (static)
../singular_texi/reference.tex(,4633) @expansion{} // quot1                [0]  proc from standard.lib (static)
../singular_texi/reference.tex(,4634) @expansion{} // quot                 [0]  proc from standard.lib
../singular_texi/reference.tex(,4635) @expansion{} // res                  [0]  proc from standard.lib
../singular_texi/reference.tex(,4636) @expansion{} // groebner             [0]  proc from standard.lib
../singular_texi/reference.tex(,4637) @expansion{} // stdhilb              [0]  proc from standard.lib
../singular_texi/reference.tex(,4638) @expansion{} // stdfglm              [0]  proc from standard.lib
../singular_texi/reference.tex(,4639) @c end example listvar_1 reference.doc:3243
../singular_texi/reference.tex(,4640) @end smallexample
../singular_texi/reference.tex(,4642) @end table
../singular_texi/reference.tex(,4670) @c inserted refs from reference.doc:3274
../singular_texi/reference.tex(,4682) See
../singular_texi/reference.tex(,4683) @ref{Names};
../singular_texi/reference.tex(,4684) @ref{Names in procedures};
../singular_texi/reference.tex(,4685) @ref{defined};
../singular_texi/reference.tex(,4686) @ref{names};
../singular_texi/reference.tex(,4687) @ref{type}.
../singular_texi/reference.tex(,4689) @c end inserted refs from reference.doc:3274
../singular_texi/reference.tex(,4691) @c ---------------------------------------
../singular_texi/reference.tex(,4692) @node lres, maxideal, listvar, Functions
../singular_texi/reference.tex(,4693) @subsection lres
../singular_texi/reference.tex(,4694) @cindex lres
../singular_texi/reference.tex(,4695) @cindex resolution, La Scala's method
../singular_texi/reference.tex(,4696) 
../singular_texi/reference.tex(,4697) @table @code
../singular_texi/reference.tex(,4698) @item @strong{Syntax:}
../singular_texi/reference.tex(,4699) @code{lres (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,4700) @item @strong{Type:}
../singular_texi/reference.tex(,4701) resolution
../singular_texi/reference.tex(,4702) @item @strong{Purpose:}
../singular_texi/reference.tex(,4703) computes a free resolution of an ideal using La Scala's algorithm.
../singular_texi/reference.tex(,4704) 
../singular_texi/reference.tex(,4705) More precisely, let R be the basering and I be the given ideal.
../singular_texi/reference.tex(,4706) Then @code{lres} computes a minimal free resolution of R/I
../singular_texi/reference.tex(,4713) @tex
../singular_texi/reference.tex(,4714) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1
../singular_texi/reference.tex(,4715) \buildrel{A_1}\over{\longrightarrow} R\longrightarrow R/I
../singular_texi/reference.tex(,4716) \longrightarrow 0.$$
../singular_texi/reference.tex(,4717) @end tex
../singular_texi/reference.tex(,4718) If the int_expression k is not zero then the computation stops after
../singular_texi/reference.tex(,4719) k steps and returns a list of modules
../singular_texi/reference.tex(,4720) @tex
../singular_texi/reference.tex(,4721) $M_i={\tt module}(A_i)$, i=1..k.
../singular_texi/reference.tex(,4722) @end tex
../singular_texi/reference.tex(,4726) 
../singular_texi/reference.tex(,4727) @code{list L=lres(I,0);} returns a list L of n modules (where n is the
../singular_texi/reference.tex(,4728) number of variables of the basering) such that
../singular_texi/reference.tex(,4729) @tex
../singular_texi/reference.tex(,4730) ${\tt L[i]}=M_i$
../singular_texi/reference.tex(,4731) @end tex
../singular_texi/reference.tex(,4735) in the above notation.
../singular_texi/reference.tex(,4736) @item @strong{Note:}
../singular_texi/reference.tex(,4737) The ideal_expression has to be homogeneous.
../singular_texi/reference.tex(,4738) @*Accessing single elements of a resolution may require that some partial
../singular_texi/reference.tex(,4739) computations have to be finished and may therefore take some time.
../singular_texi/reference.tex(,4740) @item @strong{Example:}
../singular_texi/reference.tex(,4741) @smallexample
../singular_texi/reference.tex(,4742) @c reused example lres reference.doc:3334 
../singular_texi/reference.tex(,4743)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,4744)   ideal I=xz,yz,x3-y3;
../singular_texi/reference.tex(,4745)   def L=lres(I,0);
../singular_texi/reference.tex(,4746)   print(betti(L),"betti");
../singular_texi/reference.tex(,4747) @expansion{}            0     1     2
../singular_texi/reference.tex(,4748) @expansion{} ------------------------
../singular_texi/reference.tex(,4749) @expansion{}     0:     1     -     -
../singular_texi/reference.tex(,4750) @expansion{}     1:     -     2     1
../singular_texi/reference.tex(,4751) @expansion{}     2:     -     1     1
../singular_texi/reference.tex(,4752) @expansion{} ------------------------
../singular_texi/reference.tex(,4753) @expansion{} total:     1     3     2
../singular_texi/reference.tex(,4754)   L[2];     // the first syzygy module of r/I
../singular_texi/reference.tex(,4755) @expansion{} _[1]=-x*gen(1)+y*gen(2)
../singular_texi/reference.tex(,4756) @expansion{} _[2]=-x2*gen(2)+y2*gen(1)+z*gen(3)
../singular_texi/reference.tex(,4757) @c end example lres reference.doc:3334
../singular_texi/reference.tex(,4758) @end smallexample
../singular_texi/reference.tex(,4759) @end table
../singular_texi/reference.tex(,4760) @c inserted refs from reference.doc:3343
../singular_texi/reference.tex(,4776) See
../singular_texi/reference.tex(,4777) @ref{betti};
../singular_texi/reference.tex(,4778) @ref{hres};
../singular_texi/reference.tex(,4779) @ref{ideal};
../singular_texi/reference.tex(,4780) @ref{int};
../singular_texi/reference.tex(,4781) @ref{minres};
../singular_texi/reference.tex(,4782) @ref{module};
../singular_texi/reference.tex(,4783) @ref{mres};
../singular_texi/reference.tex(,4784) @ref{res};
../singular_texi/reference.tex(,4785) @ref{sres}.
../singular_texi/reference.tex(,4787) @c end inserted refs from reference.doc:3343
../singular_texi/reference.tex(,4788) @c ---------------------------------------
../singular_texi/reference.tex(,4789) @node maxideal, memory, lres, Functions
../singular_texi/reference.tex(,4790) @subsection maxideal
../singular_texi/reference.tex(,4791) @cindex maxideal
../singular_texi/reference.tex(,4792) @table @code
../singular_texi/reference.tex(,4793) @item @strong{Syntax:}
../singular_texi/reference.tex(,4794) @code{maxideal (} int_expression @code{)}
../singular_texi/reference.tex(,4795) @item @strong{Type:}
../singular_texi/reference.tex(,4796) ideal
../singular_texi/reference.tex(,4797) @item @strong{Purpose:}
../singular_texi/reference.tex(,4798) returns the power given by int_expression of the maximal ideal
../singular_texi/reference.tex(,4799) generated by all ring variables (@code{maxideal(i)=1} for @code{i<=0}).
../singular_texi/reference.tex(,4800) @item @strong{Example:}
../singular_texi/reference.tex(,4801) @smallexample
../singular_texi/reference.tex(,4802) @c reused example maxideal reference.doc:3369 
../singular_texi/reference.tex(,4803)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,4804)   maxideal(2);
../singular_texi/reference.tex(,4805) @expansion{} _[1]=z2
../singular_texi/reference.tex(,4806) @expansion{} _[2]=yz
../singular_texi/reference.tex(,4807) @expansion{} _[3]=y2
../singular_texi/reference.tex(,4808) @expansion{} _[4]=xz
../singular_texi/reference.tex(,4809) @expansion{} _[5]=xy
../singular_texi/reference.tex(,4810) @expansion{} _[6]=x2
../singular_texi/reference.tex(,4811) @c end example maxideal reference.doc:3369
../singular_texi/reference.tex(,4812) @end smallexample
../singular_texi/reference.tex(,4813) @end table
../singular_texi/reference.tex(,4814) @c inserted refs from reference.doc:3375
../singular_texi/reference.tex(,4823) See
../singular_texi/reference.tex(,4824) @ref{ideal};
../singular_texi/reference.tex(,4825) @ref{ring}.
../singular_texi/reference.tex(,4827) @c end inserted refs from reference.doc:3375
../singular_texi/reference.tex(,4828) @c ---------------------------------------
../singular_texi/reference.tex(,4829) @node  memory, minbase, maxideal, Functions
../singular_texi/reference.tex(,4830) @subsection memory
../singular_texi/reference.tex(,4831) @cindex memory
../singular_texi/reference.tex(,4832) @cindex memory managment
../singular_texi/reference.tex(,4833) @table @code
../singular_texi/reference.tex(,4834) @item @strong{Syntax:}
../singular_texi/reference.tex(,4835) @code{memory (} int_expression @code{)}
../singular_texi/reference.tex(,4836) @item @strong{Type:}
../singular_texi/reference.tex(,4837) int
../singular_texi/reference.tex(,4838) @item @strong{Purpose:}
../singular_texi/reference.tex(,4839) returns statistics concerning the memory management:
../singular_texi/reference.tex(,4840) @itemize @bullet
../singular_texi/reference.tex(,4841) @item @code{memory(0)} is the number of active (used) bytes,
../singular_texi/reference.tex(,4842) @item @code{memory(1)} is the number of bytes allocated from the
../singular_texi/reference.tex(,4843) operating system,
../singular_texi/reference.tex(,4844) @item @code{memory(2)} is the maximal number of bytes ever allocated from the
../singular_texi/reference.tex(,4845) operating system during the current @sc{Singular} session.
../singular_texi/reference.tex(,4846) @end itemize
../singular_texi/reference.tex(,4847) @item @strong{Note:}
../singular_texi/reference.tex(,4848) To monitor the memory usage during ongoing computations the option
../singular_texi/reference.tex(,4849) @code{mem} should be set (using the command @code{option(mem);}, see
../singular_texi/reference.tex(,4850) also @ref{option}).
../singular_texi/reference.tex(,4851) @item @strong{Example:}
../singular_texi/reference.tex(,4852) @smallexample
../singular_texi/reference.tex(,4853) @c reused example memory reference.doc:3405 
../singular_texi/reference.tex(,4854)   ring r=0,(x(1..500)),dp;
../singular_texi/reference.tex(,4855)   poly p=(x(1)+x(500))^50;
../singular_texi/reference.tex(,4856)   proc ReportMemoryUsage()
../singular_texi/reference.tex(,4857)   @{  "Memory currently used by SINGULAR     :",memory(0),"Byte (",
../singular_texi/reference.tex(,4858)      memory(0)/1023, "KByte)" +newline+
../singular_texi/reference.tex(,4859)      "Memory currently allocated from system:",memory(1), "Byte (",
../singular_texi/reference.tex(,4860)      memory(1)/1023, "KByte)";
../singular_texi/reference.tex(,4861)      "Maximal memory allocated from system  :",memory(2), "Byte (",
../singular_texi/reference.tex(,4862)      memory(2)/1023, "KByte)";
../singular_texi/reference.tex(,4863)   @}
../singular_texi/reference.tex(,4864)   ReportMemoryUsage();
../singular_texi/reference.tex(,4865) @expansion{} Memory currently used by SINGULAR     : 206940 Byte ( 202 KByte)
../singular_texi/reference.tex(,4866) @expansion{} Memory currently allocated from system: 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4867) @expansion{} Maximal memory allocated from system  : 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4868)   kill p;
../singular_texi/reference.tex(,4869)   ReportMemoryUsage(); // less memory used: p killed
../singular_texi/reference.tex(,4870) @expansion{} Memory currently used by SINGULAR     : 153704 Byte ( 150 KByte)
../singular_texi/reference.tex(,4871) @expansion{} Memory currently allocated from system: 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4872) @expansion{} Maximal memory allocated from system  : 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4873)   kill r;
../singular_texi/reference.tex(,4874)   ReportMemoryUsage(); // even less memory: r killed
../singular_texi/reference.tex(,4875) @expansion{} Memory currently used by SINGULAR     : 143124 Byte ( 139 KByte)
../singular_texi/reference.tex(,4876) @expansion{} Memory currently allocated from system: 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4877) @expansion{} Maximal memory allocated from system  : 669128 Byte ( 654 KByte)
../singular_texi/reference.tex(,4878) @c end example memory reference.doc:3405
../singular_texi/reference.tex(,4879) @end smallexample
../singular_texi/reference.tex(,4880) @end table
../singular_texi/reference.tex(,4881) @c inserted refs from reference.doc:3424
../singular_texi/reference.tex(,4890) See
../singular_texi/reference.tex(,4891) @ref{option};
../singular_texi/reference.tex(,4892) @ref{system}.
../singular_texi/reference.tex(,4894) @c end inserted refs from reference.doc:3424
../singular_texi/reference.tex(,4895) @c ---------------------------------------
../singular_texi/reference.tex(,4896) @node minbase, minor, memory, Functions
../singular_texi/reference.tex(,4897) @subsection minbase
../singular_texi/reference.tex(,4898) @cindex minbase
../singular_texi/reference.tex(,4899) @table @code
../singular_texi/reference.tex(,4900) @item @strong{Syntax:}
../singular_texi/reference.tex(,4901) @code{minbase (} ideal_expression @code{)}
../singular_texi/reference.tex(,4902) @*@code{minbase (} module_expression @code{)}
../singular_texi/reference.tex(,4903) @item @strong{Type:}
../singular_texi/reference.tex(,4904) the same as the type of the argument
../singular_texi/reference.tex(,4905) @item @strong{Purpose:}
../singular_texi/reference.tex(,4906) returns a minimal set of generators of an ideal, resp.@: module, if the
../singular_texi/reference.tex(,4907) input is
../singular_texi/reference.tex(,4908) either homogeneous or if the ordering is local.
../singular_texi/reference.tex(,4909) @item @strong{Example:}
../singular_texi/reference.tex(,4910) @smallexample
../singular_texi/reference.tex(,4911) @c reused example minbase reference.doc:3445 
../singular_texi/reference.tex(,4912)   ring r=181,(x,y,z),(c,ls);
../singular_texi/reference.tex(,4913)   ideal id2=x2+xyz,y2-z3y,z3+y5xz;
../singular_texi/reference.tex(,4914)   ideal id4=maxideal(3)+id2;
../singular_texi/reference.tex(,4915)   size(id4);
../singular_texi/reference.tex(,4916) @expansion{} 13
../singular_texi/reference.tex(,4917)   minbase(id4);
../singular_texi/reference.tex(,4918) @expansion{} _[1]=x2
../singular_texi/reference.tex(,4919) @expansion{} _[2]=xyz+x2
../singular_texi/reference.tex(,4920) @expansion{} _[3]=xz2
../singular_texi/reference.tex(,4921) @expansion{} _[4]=y2
../singular_texi/reference.tex(,4922) @expansion{} _[5]=yz2
../singular_texi/reference.tex(,4923) @expansion{} _[6]=z3
../singular_texi/reference.tex(,4924) @c end example minbase reference.doc:3445
../singular_texi/reference.tex(,4925) @end smallexample
../singular_texi/reference.tex(,4926) @end table
../singular_texi/reference.tex(,4927) @c inserted refs from reference.doc:3454
../singular_texi/reference.tex(,4935) See
../singular_texi/reference.tex(,4936) @ref{mstd}.
../singular_texi/reference.tex(,4938) @c end inserted refs from reference.doc:3454
../singular_texi/reference.tex(,4939) @c ---------------------------------------
../singular_texi/reference.tex(,4940) @node minor, minres, minbase, Functions
../singular_texi/reference.tex(,4941) @subsection minor
../singular_texi/reference.tex(,4942) @cindex minor
../singular_texi/reference.tex(,4943) @table @code
../singular_texi/reference.tex(,4944) @item @strong{Syntax:}
../singular_texi/reference.tex(,4945) @code{minor (} matrix_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,4946) @*@code{minor (} matrix_expression@code{,} int_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,4947) @item @strong{Type:}
../singular_texi/reference.tex(,4948) ideal
../singular_texi/reference.tex(,4949) @item @strong{Purpose:}
../singular_texi/reference.tex(,4950) returns the set of all minors (=subdeterminants) of the given size of a matrix.
../singular_texi/reference.tex(,4951) The optional third argument must be a standard basis.
../singular_texi/reference.tex(,4952) If a third argument is given, the computations will be performed modulo that
../singular_texi/reference.tex(,4953) ideal.
../singular_texi/reference.tex(,4954) @item @strong{Example:}
../singular_texi/reference.tex(,4955) @smallexample
../singular_texi/reference.tex(,4956) @c reused example minor reference.doc:3475 
../singular_texi/reference.tex(,4957)   ring r=0,(x(1..5)),ds;
../singular_texi/reference.tex(,4958)   matrix m[2][4]=x(1..4),x(2..5);
../singular_texi/reference.tex(,4959)   print(m);
../singular_texi/reference.tex(,4960) @expansion{} x(1),x(2),x(3),x(4),
../singular_texi/reference.tex(,4961) @expansion{} x(2),x(3),x(4),x(5) 
../singular_texi/reference.tex(,4962)   ideal j=minor(m,2);
../singular_texi/reference.tex(,4963)   j;
../singular_texi/reference.tex(,4964) @expansion{} j[1]=-x(4)^2+x(3)*x(5)
../singular_texi/reference.tex(,4965) @expansion{} j[2]=-x(3)*x(4)+x(2)*x(5)
../singular_texi/reference.tex(,4966) @expansion{} j[3]=-x(2)*x(4)+x(1)*x(5)
../singular_texi/reference.tex(,4967) @expansion{} j[4]=x(3)^2-x(2)*x(4)
../singular_texi/reference.tex(,4968) @expansion{} j[5]=x(2)*x(3)-x(1)*x(4)
../singular_texi/reference.tex(,4969) @expansion{} j[6]=-x(2)^2+x(1)*x(3)
../singular_texi/reference.tex(,4970)   minor(m,2,std(ideal(x(1))));
../singular_texi/reference.tex(,4971) @expansion{} _[1]=-x(4)^2+x(3)*x(5)
../singular_texi/reference.tex(,4972) @expansion{} _[2]=-x(3)*x(4)+x(2)*x(5)
../singular_texi/reference.tex(,4973) @expansion{} _[3]=-x(2)*x(4)
../singular_texi/reference.tex(,4974) @expansion{} _[4]=x(3)^2-x(2)*x(4)
../singular_texi/reference.tex(,4975) @expansion{} _[5]=x(2)*x(3)
../singular_texi/reference.tex(,4976) @expansion{} _[6]=-x(2)^2
../singular_texi/reference.tex(,4977) @c end example minor reference.doc:3475
../singular_texi/reference.tex(,4978) @end smallexample
../singular_texi/reference.tex(,4979) @end table
../singular_texi/reference.tex(,4980) @c inserted refs from reference.doc:3485
../singular_texi/reference.tex(,4988) See
../singular_texi/reference.tex(,4989) @ref{det}.
../singular_texi/reference.tex(,4991) @c end inserted refs from reference.doc:3485
../singular_texi/reference.tex(,4992) @c ---------------------------------------
../singular_texi/reference.tex(,4993) @node  minres, modulo, minor, Functions
../singular_texi/reference.tex(,4994) @subsection minres
../singular_texi/reference.tex(,4995) @cindex minres
../singular_texi/reference.tex(,4996) @table @code
../singular_texi/reference.tex(,4997) @item @strong{Syntax:}
../singular_texi/reference.tex(,4998) @code{minres (} list_expression @code{)}
../singular_texi/reference.tex(,4999) @item @strong{Type:}
../singular_texi/reference.tex(,5000) list
../singular_texi/reference.tex(,5001) @item @strong{Syntax:}
../singular_texi/reference.tex(,5002) @code{minres (} resolution_expression @code{)}
../singular_texi/reference.tex(,5003) @item @strong{Type:}
../singular_texi/reference.tex(,5004) resolution
../singular_texi/reference.tex(,5005) @item @strong{Purpose:}
../singular_texi/reference.tex(,5006) minimizes a free resolution of an ideal or module
../singular_texi/reference.tex(,5007) given by the list_expression, resp.@: resolution_expression.
../singular_texi/reference.tex(,5008) @item @strong{Example:}
../singular_texi/reference.tex(,5009) @smallexample
../singular_texi/reference.tex(,5010) @c reused example minres reference.doc:3507 
../singular_texi/reference.tex(,5011)   ring r1=32003,(x,y),dp;
../singular_texi/reference.tex(,5012)   ideal i=x5+xy4,x3+x2y+xy2+y3;
../singular_texi/reference.tex(,5013)   resolution rs=lres(i,0);
../singular_texi/reference.tex(,5014)   rs;
../singular_texi/reference.tex(,5015) @expansion{}   1       2       1       
../singular_texi/reference.tex(,5016) @expansion{} r1 <--  r1 <--  r1
../singular_texi/reference.tex(,5017) @expansion{} 
../singular_texi/reference.tex(,5018) @expansion{} 0       1       2       
../singular_texi/reference.tex(,5019) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,5020) @expansion{} 
../singular_texi/reference.tex(,5021)   list(rs);
../singular_texi/reference.tex(,5022) @expansion{} [1]:
../singular_texi/reference.tex(,5023) @expansion{}    _[1]=x3+x2y+xy2+y3
../singular_texi/reference.tex(,5024) @expansion{}    _[2]=xy4
../singular_texi/reference.tex(,5025) @expansion{}    _[3]=y7
../singular_texi/reference.tex(,5026) @expansion{} [2]:
../singular_texi/reference.tex(,5027) @expansion{}    _[1]=-y4*gen(1)+x2*gen(2)+xy*gen(2)+y2*gen(2)+gen(3)
../singular_texi/reference.tex(,5028) @expansion{}    _[2]=-y3*gen(2)+x*gen(3)
../singular_texi/reference.tex(,5029)   minres(rs);
../singular_texi/reference.tex(,5030) @expansion{}   1       2       1       
../singular_texi/reference.tex(,5031) @expansion{} r1 <--  r1 <--  r1
../singular_texi/reference.tex(,5032) @expansion{} 
../singular_texi/reference.tex(,5033) @expansion{} 0       1       2       
../singular_texi/reference.tex(,5034) @expansion{} 
../singular_texi/reference.tex(,5035)   list(rs);
../singular_texi/reference.tex(,5036) @expansion{} [1]:
../singular_texi/reference.tex(,5037) @expansion{}    _[1]=x3+x2y+xy2+y3
../singular_texi/reference.tex(,5038) @expansion{}    _[2]=xy4
../singular_texi/reference.tex(,5039) @expansion{} [2]:
../singular_texi/reference.tex(,5040) @expansion{}    _[1]=xy4*gen(1)-x3*gen(2)-x2y*gen(2)-xy2*gen(2)-y3*gen(2)
../singular_texi/reference.tex(,5041) @c end example minres reference.doc:3507
../singular_texi/reference.tex(,5042) @end smallexample
../singular_texi/reference.tex(,5043) @end table
../singular_texi/reference.tex(,5044) @c inserted refs from reference.doc:3518
../singular_texi/reference.tex(,5054) See
../singular_texi/reference.tex(,5055) @ref{mres};
../singular_texi/reference.tex(,5056) @ref{res};
../singular_texi/reference.tex(,5057) @ref{sres}.
../singular_texi/reference.tex(,5059) @c end inserted refs from reference.doc:3518
../singular_texi/reference.tex(,5060) @c --------------------------------------
../singular_texi/reference.tex(,5061) @node modulo, monitor, minres, Functions
../singular_texi/reference.tex(,5062) @subsection modulo
../singular_texi/reference.tex(,5063) @cindex modulo
../singular_texi/reference.tex(,5064) @table @code
../singular_texi/reference.tex(,5065) @item @strong{Syntax:}
../singular_texi/reference.tex(,5066) @code{modulo (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,5067) @*@code{modulo (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,5068) @item @strong{Type:}
../singular_texi/reference.tex(,5069) module
../singular_texi/reference.tex(,5070) @item @strong{Purpose:}
../singular_texi/reference.tex(,5071) @code{modulo(h1,h2)}
../singular_texi/reference.tex(,5075) @tex
../singular_texi/reference.tex(,5076) represents $h_1/(h_1 \cap h_2) \cong (h_1+h_2)/h_2$
../singular_texi/reference.tex(,5077) @end tex
../singular_texi/reference.tex(,5078) where
../singular_texi/reference.tex(,5079) @tex
../singular_texi/reference.tex(,5080) $h_1$ and $h_2$
../singular_texi/reference.tex(,5081) @end tex
../singular_texi/reference.tex(,5085) are considered as submodules of the same free module
../singular_texi/reference.tex(,5086) @tex
../singular_texi/reference.tex(,5087) $R^l$
../singular_texi/reference.tex(,5088) @end tex
../singular_texi/reference.tex(,5092) (l=1 for ideals). Let
../singular_texi/reference.tex(,5093) @tex
../singular_texi/reference.tex(,5094) $H_1$, resp.\ $H_2$,
../singular_texi/reference.tex(,5095) @end tex
../singular_texi/reference.tex(,5100) @tex
../singular_texi/reference.tex(,5101) be the matrices of size $l \times k$, resp.\ $l \times m$, having the
../singular_texi/reference.tex(,5102) generators of $h_1$, resp.\ $h_2$,
../singular_texi/reference.tex(,5103) @end tex
../singular_texi/reference.tex(,5107) as columns.
../singular_texi/reference.tex(,5108) @c @*
../singular_texi/reference.tex(,5109) @c @tex
../singular_texi/reference.tex(,5110) @c $R^k \buildrel{H_1}\over{\rightarrow} R^l
../singular_texi/reference.tex(,5111) @c \buildrel{H_2}\over{\leftarrow} R^m$
../singular_texi/reference.tex(,5112) @c @end tex
../singular_texi/reference.tex(,5113) @c @ifinfo
../singular_texi/reference.tex(,5114) @c @smallexample
../singular_texi/reference.tex(,5115) @c      H1         H2
../singular_texi/reference.tex(,5116) @c R^k ----> R^l <---- R^m
../singular_texi/reference.tex(,5117) @c @end smallexample
../singular_texi/reference.tex(,5118) @c @end ifinfo
../singular_texi/reference.tex(,5119) Then
../singular_texi/reference.tex(,5120) @tex
../singular_texi/reference.tex(,5121) $h_1/(h_1 \cap h_2) \cong R^k / ker(\overline{H_1})$
../singular_texi/reference.tex(,5122) @end tex
../singular_texi/reference.tex(,5131) where
../singular_texi/reference.tex(,5132) @tex
../singular_texi/reference.tex(,5133) $\overline{H_1}: R^k \rightarrow R^l/Im(H_2)=R^l/h_2$
../singular_texi/reference.tex(,5134) is the induced map.
../singular_texi/reference.tex(,5135) @end tex
../singular_texi/reference.tex(,5144) @*@code{modulo(h1,h2)} returns generators of
../singular_texi/reference.tex(,5145) the kernel of this induced map.
../singular_texi/reference.tex(,5146) @item @strong{Example:}
../singular_texi/reference.tex(,5147) @smallexample
../singular_texi/reference.tex(,5148) @c reused example modulo reference.doc:3612 
../singular_texi/reference.tex(,5149)   ring r;
../singular_texi/reference.tex(,5150)   ideal h1=x,y,z;
../singular_texi/reference.tex(,5151)   ideal h2=x;
../singular_texi/reference.tex(,5152)   module m=modulo(h1,h2);
../singular_texi/reference.tex(,5153)   print(m);
../singular_texi/reference.tex(,5154) @expansion{} 1,0, 0,0,
../singular_texi/reference.tex(,5155) @expansion{} 0,-z,x,0,
../singular_texi/reference.tex(,5156) @expansion{} 0,y, 0,x 
../singular_texi/reference.tex(,5157) @c end example modulo reference.doc:3612
../singular_texi/reference.tex(,5158) @end smallexample
../singular_texi/reference.tex(,5159) @end table
../singular_texi/reference.tex(,5160) @c inserted refs from reference.doc:3621
../singular_texi/reference.tex(,5168) See
../singular_texi/reference.tex(,5169) @ref{syz}.
../singular_texi/reference.tex(,5171) @c end inserted refs from reference.doc:3621
../singular_texi/reference.tex(,5172) @c ---------------------------------------
../singular_texi/reference.tex(,5173) @node monitor, mpresmat, modulo, Functions
../singular_texi/reference.tex(,5174) @subsection monitor
../singular_texi/reference.tex(,5175) @cindex monitor
../singular_texi/reference.tex(,5176) @table @code
../singular_texi/reference.tex(,5177) @item @strong{Syntax:}
../singular_texi/reference.tex(,5178) @code{monitor (} string_expression @code{)}
../singular_texi/reference.tex(,5179) @*@code{monitor (} string_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,5180) @item @strong{Type:}
../singular_texi/reference.tex(,5181) none
../singular_texi/reference.tex(,5182) @item @strong{Purpose:}
../singular_texi/reference.tex(,5183) controls the recording of all user input and/or program output into a file.
../singular_texi/reference.tex(,5184) The second argument describes what to log: @code{"i"} means input,
../singular_texi/reference.tex(,5185) @code{"o"} means output, @code{"io"} for both.
../singular_texi/reference.tex(,5186) @*The default for the second argument is @code{"i"}.
../singular_texi/reference.tex(,5187) @*Each @code{monitor} command closes a previous monitor file
../singular_texi/reference.tex(,5188) and opens the file given by the first string expression.
../singular_texi/reference.tex(,5189) @*@code{monitor ("")} turns off recording.
../singular_texi/reference.tex(,5190) @item @strong{Example:}
../singular_texi/reference.tex(,5191) @smallexample
../singular_texi/reference.tex(,5192)   monitor("doe.tmp","io"); // log input and output to doe.tmp
../singular_texi/reference.tex(,5193)   ring r;
../singular_texi/reference.tex(,5194)   poly f=x+y+z;
../singular_texi/reference.tex(,5195)   int i=7;
../singular_texi/reference.tex(,5196)   ideal I=f,x,y;
../singular_texi/reference.tex(,5197)   monitor("");             // stop logging
../singular_texi/reference.tex(,5198) @end smallexample
../singular_texi/reference.tex(,5199) @end table
../singular_texi/reference.tex(,5200) @c ---------------------------------------
../singular_texi/reference.tex(,5201) @node mpresmat, mres, monitor, Functions
../singular_texi/reference.tex(,5202) @subsection mpresmat
../singular_texi/reference.tex(,5203) @cindex mpresmat
../singular_texi/reference.tex(,5204) @table @code
../singular_texi/reference.tex(,5205) @item @strong{Syntax:}
../singular_texi/reference.tex(,5206) @code{mpresmat (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,5207) @item @strong{Type:}
../singular_texi/reference.tex(,5208) module
../singular_texi/reference.tex(,5209) @item @strong{Purpose:}
../singular_texi/reference.tex(,5210) computes the multipolynomial resultant matrix of the input system.
../singular_texi/reference.tex(,5211) Uses the sparse resultant matrix method of Gelfand, Kapranov and Zelevinsky
../singular_texi/reference.tex(,5212) (second parameter = 0) or the resultant matrix method of Macaulay
../singular_texi/reference.tex(,5213) (second parameter = 1).
../singular_texi/reference.tex(,5214) @item @strong{Note:}
../singular_texi/reference.tex(,5215) When using the resultant matrix method of Macaulay the input system must be
../singular_texi/reference.tex(,5216) homogeneous. The number of elements in the input system must be the number of
../singular_texi/reference.tex(,5217) variables in the basering plus one.
../singular_texi/reference.tex(,5218) @item @strong{Example:}
../singular_texi/reference.tex(,5219) @smallexample
../singular_texi/reference.tex(,5220) @c reused example mpresmat reference.doc:3675 
../singular_texi/reference.tex(,5221)   ring rsq=(0,s,t,u),(x,y),lp;
../singular_texi/reference.tex(,5222)   ideal i=s+tx+uy,x2+y2-10,x2+xy+2y2-16;
../singular_texi/reference.tex(,5223)   module m=mpresmat(i,0);
../singular_texi/reference.tex(,5224)   print(m);
../singular_texi/reference.tex(,5225) @expansion{} -16,0,  -10,0,  (s),0,  0,  0,  0,  0,  
../singular_texi/reference.tex(,5226) @expansion{} 0,  -16,0,  -10,(u),(s),0,  0,  0,  0,  
../singular_texi/reference.tex(,5227) @expansion{} 2,  0,  1,  0,  0,  (u),0,  0,  0,  0,  
../singular_texi/reference.tex(,5228) @expansion{} 0,  2,  0,  1,  0,  0,  0,  0,  0,  0,  
../singular_texi/reference.tex(,5229) @expansion{} 0,  0,  0,  0,  (t),0,  -10,(s),0,  -16,
../singular_texi/reference.tex(,5230) @expansion{} 1,  0,  0,  0,  0,  (t),0,  (u),(s),0,  
../singular_texi/reference.tex(,5231) @expansion{} 0,  1,  0,  0,  0,  0,  1,  0,  (u),2,  
../singular_texi/reference.tex(,5232) @expansion{} 1,  0,  1,  0,  0,  0,  0,  (t),0,  0,  
../singular_texi/reference.tex(,5233) @expansion{} 0,  1,  0,  1,  0,  0,  0,  0,  (t),1,  
../singular_texi/reference.tex(,5234) @expansion{} 0,  0,  0,  0,  0,  0,  1,  0,  0,  1   
../singular_texi/reference.tex(,5235) @c end example mpresmat reference.doc:3675
../singular_texi/reference.tex(,5236) @end smallexample
../singular_texi/reference.tex(,5237) @end table
../singular_texi/reference.tex(,5238) @c inserted refs from reference.doc:3683
../singular_texi/reference.tex(,5246) See
../singular_texi/reference.tex(,5247) @ref{uressolve}.
../singular_texi/reference.tex(,5249) @c end inserted refs from reference.doc:3683
../singular_texi/reference.tex(,5250) @c ---------------------------------------
../singular_texi/reference.tex(,5251) @node  mres, mstd, mpresmat, Functions
../singular_texi/reference.tex(,5252) @subsection mres
../singular_texi/reference.tex(,5253) @cindex mres
../singular_texi/reference.tex(,5254) @table @code
../singular_texi/reference.tex(,5255) @item @strong{Syntax:}
../singular_texi/reference.tex(,5256) @code{mres (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,5257) @*@code{mres (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,5258) @item @strong{Type:}
../singular_texi/reference.tex(,5259) resolution
../singular_texi/reference.tex(,5260) @item @strong{Purpose:}
../singular_texi/reference.tex(,5261) computes a minimal free resolution of an ideal or module M with the
../singular_texi/reference.tex(,5262) standard basis method. More precisely, let A=@code{matrix}(M), then @code{mres}
../singular_texi/reference.tex(,5263) computes a free resolution of
../singular_texi/reference.tex(,5271) @tex
../singular_texi/reference.tex(,5272) $coker(A)=F_0/M$
../singular_texi/reference.tex(,5273) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1
../singular_texi/reference.tex(,5274) \buildrel{A_1}\over{\longrightarrow} F_0\longrightarrow F_0/M
../singular_texi/reference.tex(,5275) \longrightarrow 0,$$
../singular_texi/reference.tex(,5276) @end tex
../singular_texi/reference.tex(,5277) where the columns of the matrix
../singular_texi/reference.tex(,5278) @tex
../singular_texi/reference.tex(,5279) $A_1$
../singular_texi/reference.tex(,5280) @end tex
../singular_texi/reference.tex(,5284) are a minimal set of generators
../singular_texi/reference.tex(,5285) of M if the basering is local or if M is homogeneous.
../singular_texi/reference.tex(,5286) If the int expression k is not zero then the computation stops after k steps
../singular_texi/reference.tex(,5287) and returns a list of modules
../singular_texi/reference.tex(,5288) @tex
../singular_texi/reference.tex(,5289) $M_i={\tt module}(A_i)$, i=1...k.
../singular_texi/reference.tex(,5290) @end tex
../singular_texi/reference.tex(,5294) @*@code{mres(M,0)} returns a resolution consisting of at most n+2 modules,
../singular_texi/reference.tex(,5295) where n is the number of variables of the basering.
../singular_texi/reference.tex(,5296) Let @code{list L=mres(M,0);}
../singular_texi/reference.tex(,5297)  then @code{L[1]} consists of a minimal set of generators of the input, @code{L[2]}
../singular_texi/reference.tex(,5298) consists of a minimal set of generators for the first syzygy module of
../singular_texi/reference.tex(,5299) @code{L[1]}, etc., until @code{L[p+1]}, such that
../singular_texi/reference.tex(,5303) @tex
../singular_texi/reference.tex(,5304) ${\tt L[i]}\neq 0$ for $i \le p$,
../singular_texi/reference.tex(,5305) @end tex
../singular_texi/reference.tex(,5306)  but @code{L[p+1]}, the first syzygy module of @code{L[p]},
../singular_texi/reference.tex(,5307) is 0 (if the basering is not a qring).
../singular_texi/reference.tex(,5308) @item @strong{Note:}
../singular_texi/reference.tex(,5309) Accessing single elements of a resolution may require that some partial
../singular_texi/reference.tex(,5310) computations have to be finished and may therefore take some time.
../singular_texi/reference.tex(,5311) @item @strong{Example:}
../singular_texi/reference.tex(,5312) @smallexample
../singular_texi/reference.tex(,5313) @c reused example mres reference.doc:3750 
../singular_texi/reference.tex(,5314)   ring r=31991,(t,x,y,z,w),ls;
../singular_texi/reference.tex(,5315)   ideal M=t2x2+tx2y+x2yz,t2y2+ty2z+y2zw,
../singular_texi/reference.tex(,5316)           t2z2+tz2w+xz2w,t2w2+txw2+xyw2;
../singular_texi/reference.tex(,5317)   resolution L=mres(M,0);
../singular_texi/reference.tex(,5318)   L;
../singular_texi/reference.tex(,5319) @expansion{}  1      4      15      18      7      1      
../singular_texi/reference.tex(,5320) @expansion{} r <--  r <--  r <--   r <--   r <--  r
../singular_texi/reference.tex(,5321) @expansion{} 
../singular_texi/reference.tex(,5322) @expansion{} 0      1      2       3       4      5      
../singular_texi/reference.tex(,5323) @expansion{} 
../singular_texi/reference.tex(,5324)   // projective dimension of M is 5
../singular_texi/reference.tex(,5325) @c end example mres reference.doc:3750
../singular_texi/reference.tex(,5326) @end smallexample
../singular_texi/reference.tex(,5327) @end table
../singular_texi/reference.tex(,5328) @c inserted refs from reference.doc:3760
../singular_texi/reference.tex(,5341) See
../singular_texi/reference.tex(,5342) @ref{hres};
../singular_texi/reference.tex(,5343) @ref{ideal};
../singular_texi/reference.tex(,5344) @ref{lres};
../singular_texi/reference.tex(,5345) @ref{module};
../singular_texi/reference.tex(,5346) @ref{res};
../singular_texi/reference.tex(,5347) @ref{sres}.
../singular_texi/reference.tex(,5349) @c end inserted refs from reference.doc:3760
../singular_texi/reference.tex(,5350) @c ---------------------------------------
../singular_texi/reference.tex(,5351) @node  mstd, mult, mres, Functions
../singular_texi/reference.tex(,5352) @subsection mstd
../singular_texi/reference.tex(,5353) @cindex mstd
../singular_texi/reference.tex(,5354) @table @code
../singular_texi/reference.tex(,5355) @item @strong{Syntax:}
../singular_texi/reference.tex(,5356) @code{mstd (} ideal_expression @code{)}
../singular_texi/reference.tex(,5357) @*@code{mstd (} module_expression @code{)}
../singular_texi/reference.tex(,5358) @item @strong{Type:}
../singular_texi/reference.tex(,5359) list
../singular_texi/reference.tex(,5360) @item @strong{Purpose:}
../singular_texi/reference.tex(,5361) returns a list whose first entry is a standard basis for the ideal, resp.@:
../singular_texi/reference.tex(,5362) module. If the monomial ordering is global, then the second entry is both
../singular_texi/reference.tex(,5363) a generating set for the
../singular_texi/reference.tex(,5364) ideal, resp.@: module, and a subset of the standard basis.
../singular_texi/reference.tex(,5365) If, additionally, the input is homogeneous then the second entry is a
../singular_texi/reference.tex(,5366) minimal generating set for the ideal, resp.@: module.
../singular_texi/reference.tex(,5367) @item @strong{Example:}
../singular_texi/reference.tex(,5368) @smallexample
../singular_texi/reference.tex(,5369) @c reused example mstd reference.doc:3788 
../singular_texi/reference.tex(,5370)   ring r=0,(x,y,z,t),dp;
../singular_texi/reference.tex(,5371)   poly f=x3+y4+z6+xyz;
../singular_texi/reference.tex(,5372)   ideal j=jacob(f),f;
../singular_texi/reference.tex(,5373)   j=homog(j,t);j;
../singular_texi/reference.tex(,5374) @expansion{} j[1]=3x2+yz
../singular_texi/reference.tex(,5375) @expansion{} j[2]=4y3+xzt
../singular_texi/reference.tex(,5376) @expansion{} j[3]=6z5+xyt3
../singular_texi/reference.tex(,5377) @expansion{} j[4]=0
../singular_texi/reference.tex(,5378) @expansion{} j[5]=z6+y4t2+x3t3+xyzt3
../singular_texi/reference.tex(,5379)   mstd(j);
../singular_texi/reference.tex(,5380) @expansion{} [1]:
../singular_texi/reference.tex(,5381) @expansion{}    _[1]=3x2+yz
../singular_texi/reference.tex(,5382) @expansion{}    _[2]=4y3+xzt
../singular_texi/reference.tex(,5383) @expansion{}    _[3]=6z5+xyt3
../singular_texi/reference.tex(,5384) @expansion{}    _[4]=xyzt3
../singular_texi/reference.tex(,5385) @expansion{}    _[5]=y2z2t3
../singular_texi/reference.tex(,5386) @expansion{}    _[6]=yz3t4
../singular_texi/reference.tex(,5387) @expansion{}    _[7]=xz3t4
../singular_texi/reference.tex(,5388) @expansion{}    _[8]=yz2t7
../singular_texi/reference.tex(,5389) @expansion{}    _[9]=xz2t7
../singular_texi/reference.tex(,5390) @expansion{}    _[10]=y2zt7
../singular_texi/reference.tex(,5391) @expansion{}    _[11]=xy2t7
../singular_texi/reference.tex(,5392) @expansion{} [2]:
../singular_texi/reference.tex(,5393) @expansion{}    _[1]=3x2+yz
../singular_texi/reference.tex(,5394) @expansion{}    _[2]=4y3+xzt
../singular_texi/reference.tex(,5395) @expansion{}    _[3]=6z5+xyt3
../singular_texi/reference.tex(,5396) @expansion{}    _[4]=xyzt3
../singular_texi/reference.tex(,5397) @c end example mstd reference.doc:3788
../singular_texi/reference.tex(,5398) @end smallexample
../singular_texi/reference.tex(,5399) @end table
../singular_texi/reference.tex(,5400) @c inserted refs from reference.doc:3797
../singular_texi/reference.tex(,5411) See
../singular_texi/reference.tex(,5412) @ref{ideal};
../singular_texi/reference.tex(,5413) @ref{minbase};
../singular_texi/reference.tex(,5414) @ref{module};
../singular_texi/reference.tex(,5415) @ref{std}.
../singular_texi/reference.tex(,5417) @c end inserted refs from reference.doc:3797
../singular_texi/reference.tex(,5418) @c ---------------------------------------
../singular_texi/reference.tex(,5419) @node mult, nameof, mstd, Functions
../singular_texi/reference.tex(,5420) @subsection mult
../singular_texi/reference.tex(,5421) @cindex mult
../singular_texi/reference.tex(,5422) @table @code
../singular_texi/reference.tex(,5423) @item @strong{Syntax:}
../singular_texi/reference.tex(,5424) @code{mult (} ideal_expression @code{)}
../singular_texi/reference.tex(,5425) @*@code{mult (} module_expression @code{)}
../singular_texi/reference.tex(,5426) @item @strong{Type:}
../singular_texi/reference.tex(,5427) int
../singular_texi/reference.tex(,5428) @item @strong{Purpose:}
../singular_texi/reference.tex(,5429) computes the degree of the monomial ideal, resp.@: module, generated by
../singular_texi/reference.tex(,5430) the leading monomials of the input.
../singular_texi/reference.tex(,5431) @*If the input is a standard basis of a homogeneous ideal
../singular_texi/reference.tex(,5432) then it returns the degree of this ideal.
../singular_texi/reference.tex(,5433) @*If the input is a standard basis of an ideal in a (local)
../singular_texi/reference.tex(,5434) ring with respect to a local degree ordering
../singular_texi/reference.tex(,5435) then it returns the multiplicity of the ideal (in the sense of Samuel,
../singular_texi/reference.tex(,5436) with respect to the maximal ideal).
../singular_texi/reference.tex(,5437) @item @strong{Example:}
../singular_texi/reference.tex(,5438) @smallexample
../singular_texi/reference.tex(,5439) @c reused example mult reference.doc:3825 
../singular_texi/reference.tex(,5440)   ring r=32003,(x,y),ds;
../singular_texi/reference.tex(,5441)   poly f=(x3+y5)^2+x2y7;
../singular_texi/reference.tex(,5442)   ideal i=std(jacob(f));
../singular_texi/reference.tex(,5443)   mult(i);
../singular_texi/reference.tex(,5444) @expansion{} 46
../singular_texi/reference.tex(,5445)   mult(std(f));
../singular_texi/reference.tex(,5446) @expansion{} 6
../singular_texi/reference.tex(,5447) @c end example mult reference.doc:3825
../singular_texi/reference.tex(,5448) @end smallexample
../singular_texi/reference.tex(,5449) @end table
../singular_texi/reference.tex(,5450) @c inserted refs from reference.doc:3834
../singular_texi/reference.tex(,5462) See
../singular_texi/reference.tex(,5463) @ref{degree};
../singular_texi/reference.tex(,5464) @ref{dim};
../singular_texi/reference.tex(,5465) @ref{ideal};
../singular_texi/reference.tex(,5466) @ref{std};
../singular_texi/reference.tex(,5467) @ref{vdim}.
../singular_texi/reference.tex(,5469) @c end inserted refs from reference.doc:3834
../singular_texi/reference.tex(,5470) @c ---------------------------------------
../singular_texi/reference.tex(,5471) @node nameof, names, mult, Functions
../singular_texi/reference.tex(,5472) @subsection nameof
../singular_texi/reference.tex(,5473) @cindex nameof
../singular_texi/reference.tex(,5474) @table @code
../singular_texi/reference.tex(,5475) @item @strong{Syntax:}
../singular_texi/reference.tex(,5476) @code{nameof (} expression @code{)}
../singular_texi/reference.tex(,5477) @item @strong{Type:}
../singular_texi/reference.tex(,5478) string
../singular_texi/reference.tex(,5479) @item @strong{Purpose:}
../singular_texi/reference.tex(,5480) returns the name of an expression as string.
../singular_texi/reference.tex(,5481) @item @strong{Example:}
../singular_texi/reference.tex(,5482) @smallexample
../singular_texi/reference.tex(,5483) @c reused example nameof reference.doc:3855 
../singular_texi/reference.tex(,5484)   int i=9;
../singular_texi/reference.tex(,5485)   string s=nameof(i);
../singular_texi/reference.tex(,5486)   s;
../singular_texi/reference.tex(,5487) @expansion{} i
../singular_texi/reference.tex(,5488)   nameof(s);
../singular_texi/reference.tex(,5489) @expansion{} s
../singular_texi/reference.tex(,5490)   nameof(i+1); //returns the empty string:
../singular_texi/reference.tex(,5491) @expansion{} 
../singular_texi/reference.tex(,5492)   nameof(basering);
../singular_texi/reference.tex(,5493) @expansion{} basering
../singular_texi/reference.tex(,5494)   basering;
../singular_texi/reference.tex(,5495) @expansion{}    ? `basering` is undefined
../singular_texi/reference.tex(,5496) @expansion{}    ? error occurred in line 7: `  basering;`
../singular_texi/reference.tex(,5497)   ring r;
../singular_texi/reference.tex(,5498)   nameof(basering);
../singular_texi/reference.tex(,5499) @expansion{} r
../singular_texi/reference.tex(,5500) @c end example nameof reference.doc:3855
../singular_texi/reference.tex(,5501) @end smallexample
../singular_texi/reference.tex(,5502) @end table
../singular_texi/reference.tex(,5503) @c inserted refs from reference.doc:3868
../singular_texi/reference.tex(,5513) See
../singular_texi/reference.tex(,5514) @ref{names};
../singular_texi/reference.tex(,5515) @ref{reservedName};
../singular_texi/reference.tex(,5516) @ref{typeof}.
../singular_texi/reference.tex(,5518) @c end inserted refs from reference.doc:3868
../singular_texi/reference.tex(,5519) @c ---------------------------------------
../singular_texi/reference.tex(,5520) @node names, ncols, nameof, Functions
../singular_texi/reference.tex(,5521) @subsection names
../singular_texi/reference.tex(,5522) @cindex names
../singular_texi/reference.tex(,5523) @table @code
../singular_texi/reference.tex(,5524) @item @strong{Syntax:}
../singular_texi/reference.tex(,5525) @code{names ( )}
../singular_texi/reference.tex(,5526) @*@code{names (} ring_name @code{)}
../singular_texi/reference.tex(,5530) @item @strong{Type:}
../singular_texi/reference.tex(,5531) list of strings
../singular_texi/reference.tex(,5532) @item @strong{Purpose:}
../singular_texi/reference.tex(,5533) returns the names of all user-defined variables which are ring independent
../singular_texi/reference.tex(,5534) (this includes the names of  procedures) or, in the second case, which
../singular_texi/reference.tex(,5535) belong to the given ring.
../singular_texi/reference.tex(,5536) 
../singular_texi/reference.tex(,5613) @item @strong{Example:}
../singular_texi/reference.tex(,5614) @smallexample
../singular_texi/reference.tex(,5615) @c reused example names_1 reference.doc:3916 
../singular_texi/reference.tex(,5616)   int i=9;
../singular_texi/reference.tex(,5617)   ring r;
../singular_texi/reference.tex(,5618)   poly f;
../singular_texi/reference.tex(,5619)   poly g;
../singular_texi/reference.tex(,5620)   setring r;
../singular_texi/reference.tex(,5621)   names();
../singular_texi/reference.tex(,5622) @expansion{} [1]:
../singular_texi/reference.tex(,5623) @expansion{}    r
../singular_texi/reference.tex(,5624) @expansion{} [2]:
../singular_texi/reference.tex(,5625) @expansion{}    i
../singular_texi/reference.tex(,5626) @expansion{} [3]:
../singular_texi/reference.tex(,5627) @expansion{}    fprintf
../singular_texi/reference.tex(,5628) @expansion{} [4]:
../singular_texi/reference.tex(,5629) @expansion{}    printf
../singular_texi/reference.tex(,5630) @expansion{} [5]:
../singular_texi/reference.tex(,5631) @expansion{}    sprintf
../singular_texi/reference.tex(,5632) @expansion{} [6]:
../singular_texi/reference.tex(,5633) @expansion{}    intersect1
../singular_texi/reference.tex(,5634) @expansion{} [7]:
../singular_texi/reference.tex(,5635) @expansion{}    quotient4
../singular_texi/reference.tex(,5636) @expansion{} [8]:
../singular_texi/reference.tex(,5637) @expansion{}    quotient5
../singular_texi/reference.tex(,5638) @expansion{} [9]:
../singular_texi/reference.tex(,5639) @expansion{}    quotient3
../singular_texi/reference.tex(,5640) @expansion{} [10]:
../singular_texi/reference.tex(,5641) @expansion{}    quotient2
../singular_texi/reference.tex(,5642) @expansion{} [11]:
../singular_texi/reference.tex(,5643) @expansion{}    quotient1
../singular_texi/reference.tex(,5644) @expansion{} [12]:
../singular_texi/reference.tex(,5645) @expansion{}    quotient0
../singular_texi/reference.tex(,5646) @expansion{} [13]:
../singular_texi/reference.tex(,5647) @expansion{}    quot1
../singular_texi/reference.tex(,5648) @expansion{} [14]:
../singular_texi/reference.tex(,5649) @expansion{}    quot
../singular_texi/reference.tex(,5650) @expansion{} [15]:
../singular_texi/reference.tex(,5651) @expansion{}    res
../singular_texi/reference.tex(,5652) @expansion{} [16]:
../singular_texi/reference.tex(,5653) @expansion{}    groebner
../singular_texi/reference.tex(,5654) @expansion{} [17]:
../singular_texi/reference.tex(,5655) @expansion{}    stdhilb
../singular_texi/reference.tex(,5656) @expansion{} [18]:
../singular_texi/reference.tex(,5657) @expansion{}    stdfglm
../singular_texi/reference.tex(,5658) @expansion{} [19]:
../singular_texi/reference.tex(,5659) @expansion{}    LIB
../singular_texi/reference.tex(,5660)   names(r);
../singular_texi/reference.tex(,5661) @expansion{} [1]:
../singular_texi/reference.tex(,5662) @expansion{}    g
../singular_texi/reference.tex(,5663) @expansion{} [2]:
../singular_texi/reference.tex(,5664) @expansion{}    f
../singular_texi/reference.tex(,5665) @c end example names_1 reference.doc:3916
../singular_texi/reference.tex(,5666) @end smallexample
../singular_texi/reference.tex(,5668) @end table
../singular_texi/reference.tex(,5669) @c inserted refs from reference.doc:3928
../singular_texi/reference.tex(,5678) See
../singular_texi/reference.tex(,5679) @ref{nameof};
../singular_texi/reference.tex(,5680) @ref{reservedName}.
../singular_texi/reference.tex(,5682) @c end inserted refs from reference.doc:3928
../singular_texi/reference.tex(,5683) @c ---------------------------------------
../singular_texi/reference.tex(,5684) @node ncols, npars, names, Functions
../singular_texi/reference.tex(,5685) @subsection ncols
../singular_texi/reference.tex(,5686) @cindex ncols
../singular_texi/reference.tex(,5687) @table @code
../singular_texi/reference.tex(,5688) @item @strong{Syntax:}
../singular_texi/reference.tex(,5689) @code{ncols (} matrix_expression @code{)}
../singular_texi/reference.tex(,5690) @*@code{ncols (} intmat_expression @code{)}
../singular_texi/reference.tex(,5691) @*@code{ncols (} ideal_expression @code{)}
../singular_texi/reference.tex(,5692) @item @strong{Type:}
../singular_texi/reference.tex(,5693) int
../singular_texi/reference.tex(,5694) @item @strong{Purpose:}
../singular_texi/reference.tex(,5695) returns the number of columns of a matrix or an intmat or the number of
../singular_texi/reference.tex(,5696) given generators of the ideal, including zeros.
../singular_texi/reference.tex(,5697) @item @strong{Note:}
../singular_texi/reference.tex(,5698) @code{size(}ideal@code{)} counts the number of generators
../singular_texi/reference.tex(,5699) which are different from zero. (Use @code{nrows} to get the number of rows
../singular_texi/reference.tex(,5700) of a given matrix or intmat.)
../singular_texi/reference.tex(,5701) @item @strong{Example:}
../singular_texi/reference.tex(,5702) @smallexample
../singular_texi/reference.tex(,5703) @c reused example ncols reference.doc:3953 
../singular_texi/reference.tex(,5704)   ring r;
../singular_texi/reference.tex(,5705)   matrix m[5][6];
../singular_texi/reference.tex(,5706)   ncols(m);
../singular_texi/reference.tex(,5707) @expansion{} 6
../singular_texi/reference.tex(,5708)   ideal i=x,0,y;
../singular_texi/reference.tex(,5709)   ncols(i);
../singular_texi/reference.tex(,5710) @expansion{} 3
../singular_texi/reference.tex(,5711)   size(i);
../singular_texi/reference.tex(,5712) @expansion{} 2
../singular_texi/reference.tex(,5713) @c end example ncols reference.doc:3953
../singular_texi/reference.tex(,5714) @end smallexample
../singular_texi/reference.tex(,5715) @end table
../singular_texi/reference.tex(,5716) @c inserted refs from reference.doc:3963
../singular_texi/reference.tex(,5726) See
../singular_texi/reference.tex(,5727) @ref{matrix};
../singular_texi/reference.tex(,5728) @ref{nrows};
../singular_texi/reference.tex(,5729) @ref{size}.
../singular_texi/reference.tex(,5731) @c end inserted refs from reference.doc:3963
../singular_texi/reference.tex(,5732) @c ---------------------------------------
../singular_texi/reference.tex(,5733) @node npars, nres, ncols, Functions
../singular_texi/reference.tex(,5734) @subsection npars
../singular_texi/reference.tex(,5735) @cindex npars
../singular_texi/reference.tex(,5736) @table @code
../singular_texi/reference.tex(,5737) @item @strong{Syntax:}
../singular_texi/reference.tex(,5738) @code{npars (} ring_name @code{)}
../singular_texi/reference.tex(,5739) @item @strong{Type:}
../singular_texi/reference.tex(,5740) int
../singular_texi/reference.tex(,5741) @item @strong{Purpose:}
../singular_texi/reference.tex(,5742) returns the number of parameters of a ring.
../singular_texi/reference.tex(,5743) @item @strong{Example:}
../singular_texi/reference.tex(,5744) @smallexample
../singular_texi/reference.tex(,5745) @c reused example npars reference.doc:3982 
../singular_texi/reference.tex(,5746)   ring r=(23,t,v),(x,a(1..7)),lp;
../singular_texi/reference.tex(,5747)   // the parameters are t,v
../singular_texi/reference.tex(,5748)   npars(r);
../singular_texi/reference.tex(,5749) @expansion{} 2
../singular_texi/reference.tex(,5750) @c end example npars reference.doc:3982
../singular_texi/reference.tex(,5751) @end smallexample
../singular_texi/reference.tex(,5752) @end table
../singular_texi/reference.tex(,5753) @c inserted refs from reference.doc:3989
../singular_texi/reference.tex(,5763) See
../singular_texi/reference.tex(,5764) @ref{par};
../singular_texi/reference.tex(,5765) @ref{parstr};
../singular_texi/reference.tex(,5766) @ref{ring}.
../singular_texi/reference.tex(,5768) @c end inserted refs from reference.doc:3989
../singular_texi/reference.tex(,5769) @c ---------------------------------------
../singular_texi/reference.tex(,5770) @node  nres, nrows, npars, Functions
../singular_texi/reference.tex(,5771) @subsection nres
../singular_texi/reference.tex(,5772) @cindex nres
../singular_texi/reference.tex(,5773) @table @code
../singular_texi/reference.tex(,5774) @item @strong{Syntax:}
../singular_texi/reference.tex(,5775) @code{nres (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,5776) @*@code{nres (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,5777) @item @strong{Type:}
../singular_texi/reference.tex(,5778) resolution
../singular_texi/reference.tex(,5779) @item @strong{Purpose:}
../singular_texi/reference.tex(,5780) computes a free resolution of an ideal or module M which is minimized from
../singular_texi/reference.tex(,5781) the second module on (by the standard basis method).
../singular_texi/reference.tex(,5782) 
../singular_texi/reference.tex(,5783) More precisely, let
../singular_texi/reference.tex(,5784) @tex
../singular_texi/reference.tex(,5785) $A_1$=matrix(M),
../singular_texi/reference.tex(,5786) @end tex
../singular_texi/reference.tex(,5790) then @code{nres} computes a free resolution of
../singular_texi/reference.tex(,5798) @tex
../singular_texi/reference.tex(,5799) $coker(A_1)=F_0/M$
../singular_texi/reference.tex(,5800) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1 \buildrel{A_1}\over{\longrightarrow} F_0\longrightarrow F_0/M\longrightarrow 0,$$
../singular_texi/reference.tex(,5801) @end tex
../singular_texi/reference.tex(,5802) @*where the columns of the matrix
../singular_texi/reference.tex(,5803) @tex
../singular_texi/reference.tex(,5804) $A_1$
../singular_texi/reference.tex(,5805) @end tex
../singular_texi/reference.tex(,5809) are the given set of generators of M.
../singular_texi/reference.tex(,5810) If the int expression k is not zero then the computation stops after k steps
../singular_texi/reference.tex(,5811) and returns a list of modules
../singular_texi/reference.tex(,5812) @tex
../singular_texi/reference.tex(,5813) $M_i={\tt module}(A_i)$, i=1..k.
../singular_texi/reference.tex(,5814) @end tex
../singular_texi/reference.tex(,5818) @*@code{nres(M,0)} returns a list of n modules where n is the number of
../singular_texi/reference.tex(,5819) variables of the basering.
../singular_texi/reference.tex(,5820) Let @code{list L=nres(M,0);} then @code{L[1]=M} is identical to the input,
../singular_texi/reference.tex(,5821) @code{L[2]} is a minimal set of generators for the first syzygy
../singular_texi/reference.tex(,5822) module of  @code{L[1]}, etc.
../singular_texi/reference.tex(,5826) @tex
../singular_texi/reference.tex(,5827) (${\tt L[i]}=M_i$
../singular_texi/reference.tex(,5828) @end tex
../singular_texi/reference.tex(,5829) in the notations from above).
../singular_texi/reference.tex(,5830) @item @strong{Example:}
../singular_texi/reference.tex(,5831) @smallexample
../singular_texi/reference.tex(,5832) @c reused example nres reference.doc:4058 
../singular_texi/reference.tex(,5833)   ring r=31991,(t,x,y,z,w),ls;
../singular_texi/reference.tex(,5834)   ideal M=t2x2+tx2y+x2yz,t2y2+ty2z+y2zw,
../singular_texi/reference.tex(,5835)           t2z2+tz2w+xz2w,t2w2+txw2+xyw2;
../singular_texi/reference.tex(,5836)   resolution L=nres(M,0);
../singular_texi/reference.tex(,5837)   L;
../singular_texi/reference.tex(,5838) @expansion{}  1      4      15      18      7      1      
../singular_texi/reference.tex(,5839) @expansion{} r <--  r <--  r <--   r <--   r <--  r
../singular_texi/reference.tex(,5840) @expansion{} 
../singular_texi/reference.tex(,5841) @expansion{} 0      1      2       3       4      5      
../singular_texi/reference.tex(,5842) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,5843) @expansion{} 
../singular_texi/reference.tex(,5844) @c end example nres reference.doc:4058
../singular_texi/reference.tex(,5845) @end smallexample
../singular_texi/reference.tex(,5846) @end table
../singular_texi/reference.tex(,5847) @c inserted refs from reference.doc:4067
../singular_texi/reference.tex(,5862) See
../singular_texi/reference.tex(,5863) @ref{hres};
../singular_texi/reference.tex(,5864) @ref{ideal};
../singular_texi/reference.tex(,5865) @ref{lres};
../singular_texi/reference.tex(,5866) @ref{module};
../singular_texi/reference.tex(,5867) @ref{mres};
../singular_texi/reference.tex(,5868) @ref{res};
../singular_texi/reference.tex(,5869) @ref{resolution};
../singular_texi/reference.tex(,5870) @ref{sres}.
../singular_texi/reference.tex(,5872) @c end inserted refs from reference.doc:4067
../singular_texi/reference.tex(,5873) @c ---------------------------------------
../singular_texi/reference.tex(,5874) @node nrows, nvars, nres, Functions
../singular_texi/reference.tex(,5875) @subsection nrows
../singular_texi/reference.tex(,5876) @cindex nrows
../singular_texi/reference.tex(,5877) @table @code
../singular_texi/reference.tex(,5878) @item @strong{Syntax:}
../singular_texi/reference.tex(,5879) @code{nrows (} matrix_expression @code{)}
../singular_texi/reference.tex(,5880) @*@code{nrows (} intmat_expression @code{)}
../singular_texi/reference.tex(,5881) @*@code{nrows (} intvec_expression @code{)}
../singular_texi/reference.tex(,5882) @*@code{nrows (} module_expression @code{)}
../singular_texi/reference.tex(,5883) @*@code{nrows (} vector_expression @code{)}
../singular_texi/reference.tex(,5884) @item @strong{Type:}
../singular_texi/reference.tex(,5885) int
../singular_texi/reference.tex(,5886) @item @strong{Purpose:}
../singular_texi/reference.tex(,5887) returns the number of rows of a matrix, an intmat or an intvec, resp.@:
../singular_texi/reference.tex(,5888) the minimal rank of a free module in which the given module or
../singular_texi/reference.tex(,5889) vector lives (the index of the last non-zero component).
../singular_texi/reference.tex(,5890) @item @strong{Note:}
../singular_texi/reference.tex(,5891) Use @code{ncols} to get the number of columns of a given matrix or intmat.
../singular_texi/reference.tex(,5892) @item @strong{Example:}
../singular_texi/reference.tex(,5893) @smallexample
../singular_texi/reference.tex(,5894) @c reused example nrows reference.doc:4099 
../singular_texi/reference.tex(,5895)   ring R;
../singular_texi/reference.tex(,5896)   matrix M[2][3];
../singular_texi/reference.tex(,5897)   nrows(M);
../singular_texi/reference.tex(,5898) @expansion{} 2
../singular_texi/reference.tex(,5899)   nrows(freemodule(4));
../singular_texi/reference.tex(,5900) @expansion{} 4
../singular_texi/reference.tex(,5901)   module m=[0,0,1];
../singular_texi/reference.tex(,5902)   nrows(m);
../singular_texi/reference.tex(,5903) @expansion{} 3
../singular_texi/reference.tex(,5904)   nrows([0,x,0]);
../singular_texi/reference.tex(,5905) @expansion{} 2
../singular_texi/reference.tex(,5906) @c end example nrows reference.doc:4099
../singular_texi/reference.tex(,5907) @end smallexample
../singular_texi/reference.tex(,5908) @end table
../singular_texi/reference.tex(,5909) @c inserted refs from reference.doc:4110
../singular_texi/reference.tex(,5921) See
../singular_texi/reference.tex(,5922) @ref{gen};
../singular_texi/reference.tex(,5923) @ref{matrix};
../singular_texi/reference.tex(,5924) @ref{module};
../singular_texi/reference.tex(,5925) @ref{ncols};
../singular_texi/reference.tex(,5926) @ref{vector}.
../singular_texi/reference.tex(,5928) @c end inserted refs from reference.doc:4110
../singular_texi/reference.tex(,5929) @c ---------------------------------------
../singular_texi/reference.tex(,5930) @node nvars, open, nrows, Functions
../singular_texi/reference.tex(,5931) @subsection nvars
../singular_texi/reference.tex(,5932) @cindex nvars
../singular_texi/reference.tex(,5933) @table @code
../singular_texi/reference.tex(,5934) @item @strong{Syntax:}
../singular_texi/reference.tex(,5935) @code{nvars (} ring_name @code{)}
../singular_texi/reference.tex(,5936) @item @strong{Type:}
../singular_texi/reference.tex(,5937) int
../singular_texi/reference.tex(,5938) @item @strong{Purpose:}
../singular_texi/reference.tex(,5939) returns the number of variables of a ring.
../singular_texi/reference.tex(,5940) @item @strong{Example:}
../singular_texi/reference.tex(,5941) @smallexample
../singular_texi/reference.tex(,5942) @c reused example nvars reference.doc:4131 
../singular_texi/reference.tex(,5943)   ring r=(23,t,v),(x,a(1..7)),ls;
../singular_texi/reference.tex(,5944)   // the variables are x,a(1),...,a(7)
../singular_texi/reference.tex(,5945)   nvars(r);
../singular_texi/reference.tex(,5946) @expansion{} 8
../singular_texi/reference.tex(,5947) @c end example nvars reference.doc:4131
../singular_texi/reference.tex(,5948) @end smallexample
../singular_texi/reference.tex(,5949) @end table
../singular_texi/reference.tex(,5950) @c inserted refs from reference.doc:4138
../singular_texi/reference.tex(,5961) See
../singular_texi/reference.tex(,5962) @ref{npars};
../singular_texi/reference.tex(,5963) @ref{ring};
../singular_texi/reference.tex(,5964) @ref{var};
../singular_texi/reference.tex(,5965) @ref{varstr}.
../singular_texi/reference.tex(,5967) @c end inserted refs from reference.doc:4138
../singular_texi/reference.tex(,5968) @c ---------------------------------------
../singular_texi/reference.tex(,5969) @node open, option, nvars, Functions
../singular_texi/reference.tex(,5970) @subsection open
../singular_texi/reference.tex(,5971) @cindex open
../singular_texi/reference.tex(,5972) @table @code
../singular_texi/reference.tex(,5973) @item @strong{Syntax:}
../singular_texi/reference.tex(,5974) @code{open (} link_expression @code{)}
../singular_texi/reference.tex(,5975) @item @strong{Type:}
../singular_texi/reference.tex(,5976) none
../singular_texi/reference.tex(,5977) @item @strong{Purpose:}
../singular_texi/reference.tex(,5978) opens a link.
../singular_texi/reference.tex(,5979) @item @strong{Example:}
../singular_texi/reference.tex(,5980) @smallexample
../singular_texi/reference.tex(,5981) link l="MPtcp:launch";
../singular_texi/reference.tex(,5982) open(l);  // start SINGULAR "server" on localhost in batchmode
../singular_texi/reference.tex(,5983) close(l); // shut down SINGULAR server
../singular_texi/reference.tex(,5984) @end smallexample
../singular_texi/reference.tex(,5985) @end table
../singular_texi/reference.tex(,5986) @c inserted refs from reference.doc:4163
../singular_texi/reference.tex(,5995) See
../singular_texi/reference.tex(,5996) @ref{close};
../singular_texi/reference.tex(,5997) @ref{link}.
../singular_texi/reference.tex(,5999) @c end inserted refs from reference.doc:4163
../singular_texi/reference.tex(,6000) @c ---------------------------------------
../singular_texi/reference.tex(,6001) @node option, ord, open, Functions
../singular_texi/reference.tex(,6002) @subsection option
../singular_texi/reference.tex(,6003) @cindex option
../singular_texi/reference.tex(,6004) @table @code
../singular_texi/reference.tex(,6005) @item @strong{Syntax:}
../singular_texi/reference.tex(,6006) @code{option ()}
../singular_texi/reference.tex(,6007) @item @strong{Type:}
../singular_texi/reference.tex(,6008) string
../singular_texi/reference.tex(,6009) @item @strong{Purpose:}
../singular_texi/reference.tex(,6010) lists all defined options.
../singular_texi/reference.tex(,6011) @*
../singular_texi/reference.tex(,6012) @item @strong{Syntax:}
../singular_texi/reference.tex(,6013) @code{option (} option_name @code{)}
../singular_texi/reference.tex(,6014) @item @strong{Type:}
../singular_texi/reference.tex(,6015) none
../singular_texi/reference.tex(,6016) @item @strong{Purpose:}
../singular_texi/reference.tex(,6017) sets an option.
../singular_texi/reference.tex(,6018) @item @strong{Note:}
../singular_texi/reference.tex(,6019) To disable an option, use the prefix @code{no}.
../singular_texi/reference.tex(,6020) @*
../singular_texi/reference.tex(,6021) @item @strong{Syntax:}
../singular_texi/reference.tex(,6022) @code{option ( get )}
../singular_texi/reference.tex(,6023) @item @strong{Type:}
../singular_texi/reference.tex(,6024) intvec
../singular_texi/reference.tex(,6025) @item @strong{Purpose:}
../singular_texi/reference.tex(,6026) dumps the state of all options to an intvec.
../singular_texi/reference.tex(,6027) @*
../singular_texi/reference.tex(,6028) @item @strong{Syntax:}
../singular_texi/reference.tex(,6029) @code{option ( set,} intvec_expression @code{)}
../singular_texi/reference.tex(,6030) @item @strong{Type:}
../singular_texi/reference.tex(,6031) none
../singular_texi/reference.tex(,6032) @item @strong{Purpose:}
../singular_texi/reference.tex(,6033) restores the state of all options from an intvec (produced by
../singular_texi/reference.tex(,6034) @code{option(get)}).
../singular_texi/reference.tex(,6035) @sp 1
../singular_texi/reference.tex(,6036) @item @strong{Values:}
../singular_texi/reference.tex(,6037) The following options are used to manipulate the behavior of
../singular_texi/reference.tex(,6038) computations and act like boolean switches. Use the prefix @code{no} to
../singular_texi/reference.tex(,6039) disable an option. Notice that some options are ring dependent and reset
../singular_texi/reference.tex(,6040) to their default values on a change of the current basering.
../singular_texi/reference.tex(,6041) @table @asis
../singular_texi/reference.tex(,6042) @item @code{none}
../singular_texi/reference.tex(,6043) @c ---------
../singular_texi/reference.tex(,6044) @cindex none, option
../singular_texi/reference.tex(,6045) turns off all options (including the @code{prompt} option).
../singular_texi/reference.tex(,6046) @c ---------
../singular_texi/reference.tex(,6047) @item @code{returnSB}
../singular_texi/reference.tex(,6048) @cindex returnSB, option
../singular_texi/reference.tex(,6049) the functions @code{syz}, @code{intersect}, @code{quotient},
../singular_texi/reference.tex(,6050) @code{modulo} return a standard base instead of a generating set if
../singular_texi/reference.tex(,6051) @code{returnSB} is set. This option should not be used for @code{lift}.
../singular_texi/reference.tex(,6052) @c ---------
../singular_texi/reference.tex(,6053) @item @code{fastHC}
../singular_texi/reference.tex(,6054) @cindex fastHC, option
../singular_texi/reference.tex(,6055) tries to the find the highest corner of the staircase (HC) as fast as
../singular_texi/reference.tex(,6056) possible during a standard basis computation (only used for local
../singular_texi/reference.tex(,6057) orderings).
../singular_texi/reference.tex(,6058) @c ---------
../singular_texi/reference.tex(,6059) @c @item @code{interrupt}
../singular_texi/reference.tex(,6060) @c allows fast interruption of standard basis computation
../singular_texi/reference.tex(,6061) @c ---------
../singular_texi/reference.tex(,6062) @item @code{intStrategy}
../singular_texi/reference.tex(,6063) @cindex intStrategy, option
../singular_texi/reference.tex(,6064) avoids division of coefficients during standard basis
../singular_texi/reference.tex(,6065) computations. This option is ring dependent. By default, it is set for
../singular_texi/reference.tex(,6066) rings with characteristic 0 and not set for all other rings.
../singular_texi/reference.tex(,6067) @c ---------
../singular_texi/reference.tex(,6068) @item @code{oldStd}
../singular_texi/reference.tex(,6069) @cindex oldStd, option
../singular_texi/reference.tex(,6070) uses a more lazy approach in std computations,
../singular_texi/reference.tex(,6071) which was used in Singular version before 2-0
../singular_texi/reference.tex(,6072) (and which may lead to faster or slower computations, depending on the example)
../singular_texi/reference.tex(,6073) @item @code{minRes}
../singular_texi/reference.tex(,6074) @cindex minRes, option
../singular_texi/reference.tex(,6075) special (additional) minimizing during computations (@code{res}, @code{mres}),
../singular_texi/reference.tex(,6076) @*assumes homogeneous case and degree-compatible ordering.
../singular_texi/reference.tex(,6077) @c ---------
../singular_texi/reference.tex(,6078) @item @code{notRegularity}
../singular_texi/reference.tex(,6079) @cindex notRegularity, option
../singular_texi/reference.tex(,6080) disables the regularity bound for @code{res} and @code{mres} (see
../singular_texi/reference.tex(,6081) @ref{regularity}).
../singular_texi/reference.tex(,6082) @c ---------
../singular_texi/reference.tex(,6083) @item @code{notSugar}
../singular_texi/reference.tex(,6084) @cindex notSugar, option
../singular_texi/reference.tex(,6085) disables the sugar strategy during standard basis computation.
../singular_texi/reference.tex(,6086) @anchor{option(prot)}
../singular_texi/reference.tex(,6087) @c ---------
../singular_texi/reference.tex(,6088) @item @code{notBuckets}
../singular_texi/reference.tex(,6089) @cindex notBuckets, option
../singular_texi/reference.tex(,6090) disables the bucket representation of polynomials during standard basis
../singular_texi/reference.tex(,6091) computations. This option usually decreases the memory usage but
../singular_texi/reference.tex(,6092) increases the computation time. It should only be set for
../singular_texi/reference.tex(,6093) memory-critical standard basis computations.
../singular_texi/reference.tex(,6094) @c ---------
../singular_texi/reference.tex(,6095) @item @code{prot}
../singular_texi/reference.tex(,6096) @cindex prot, option
../singular_texi/reference.tex(,6097) @cindex protocoll of computations
../singular_texi/reference.tex(,6098) @cindex progress watch
../singular_texi/reference.tex(,6099) shows protocol information indicating the
../singular_texi/reference.tex(,6100) progress during the following computations:
../singular_texi/reference.tex(,6101) @code{facstd},
../singular_texi/reference.tex(,6102) @code{fglm},
../singular_texi/reference.tex(,6103) @code{groebner},
../singular_texi/reference.tex(,6104) @code{lres},
../singular_texi/reference.tex(,6105) @code{mres},
../singular_texi/reference.tex(,6106) @code{minres},
../singular_texi/reference.tex(,6107) @code{mstd},
../singular_texi/reference.tex(,6108) @code{res},
../singular_texi/reference.tex(,6109) @code{sres},
../singular_texi/reference.tex(,6110) @code{std},
../singular_texi/reference.tex(,6111) @code{stdfglm},
../singular_texi/reference.tex(,6112) @code{stdhilb},
../singular_texi/reference.tex(,6113) @code{syz}.
../singular_texi/reference.tex(,6114) See below for more details.
../singular_texi/reference.tex(,6115) @c ---------
../singular_texi/reference.tex(,6116) @item @code{redSB}
../singular_texi/reference.tex(,6117) @cindex redSB, option
../singular_texi/reference.tex(,6118) @cindex reduced standard basis
../singular_texi/reference.tex(,6119) computes a reduced standard basis in any standard basis computation.
../singular_texi/reference.tex(,6120) @c ---------
../singular_texi/reference.tex(,6121) @item @code{redTail}
../singular_texi/reference.tex(,6122) @cindex redTail, option
../singular_texi/reference.tex(,6123) reduction of the tails of polynomials during standard basis
../singular_texi/reference.tex(,6124) computations. This option is ring dependent. By default, it is set for
../singular_texi/reference.tex(,6125) rings with global degree orderings and not set for all other rings.
../singular_texi/reference.tex(,6126) @c ---------
../singular_texi/reference.tex(,6127) @item @code{redThrough}
../singular_texi/reference.tex(,6128) @cindex redThrough, option
../singular_texi/reference.tex(,6129) for inhomogeneous input, polynomial reductions during standard basis
../singular_texi/reference.tex(,6130) computations are never postponed, but always finished through. This option
../singular_texi/reference.tex(,6131) is ring   dependent. By default, it is set for rings with global degree
../singular_texi/reference.tex(,6132) orderings and not set for all other rings.
../singular_texi/reference.tex(,6133) @c ---------
../singular_texi/reference.tex(,6134) @item @code{sugarCrit}
../singular_texi/reference.tex(,6135) @cindex sugarCrit, option
../singular_texi/reference.tex(,6136) uses criteria similar to the homogeneous case to keep more useless pairs.
../singular_texi/reference.tex(,6137) @c ---------
../singular_texi/reference.tex(,6138) @item @code{weightM}
../singular_texi/reference.tex(,6139) @cindex weightM, option
../singular_texi/reference.tex(,6140) automatically computes suitable weights for the weighted ecart and the
../singular_texi/reference.tex(,6141) weighted sugar method.
../singular_texi/reference.tex(,6142) @end table
../singular_texi/reference.tex(,6143) @*
../singular_texi/reference.tex(,6144) The following options, which also control computations, are special,
../singular_texi/reference.tex(,6145) since they are not manipulated by the @code{option} command but by a
../singular_texi/reference.tex(,6146) direct assignment of a value. Reset the option by assigning the value 0;
../singular_texi/reference.tex(,6147) the command @code{option(none)} will not reset them! If there is a
../singular_texi/reference.tex(,6148) non-zero value assigned, the command @code{option()} prints the option.
../singular_texi/reference.tex(,6149) @table @asis
../singular_texi/reference.tex(,6150) @item @code{multBound}
../singular_texi/reference.tex(,6151) a multiplicity bound is set (see @ref{multBound}).
../singular_texi/reference.tex(,6152) @item @code{degBound}
../singular_texi/reference.tex(,6153) a degree bound is set (see @ref{degBound}).
../singular_texi/reference.tex(,6154) @end table
../singular_texi/reference.tex(,6155) @*
../singular_texi/reference.tex(,6156) The last set of options controls the output of @sc{Singular}:
../singular_texi/reference.tex(,6157) @table @asis
../singular_texi/reference.tex(,6158) @item @code{Imap}
../singular_texi/reference.tex(,6159) @cindex Imap, option
../singular_texi/reference.tex(,6160) shows the mapping of variables with the fetch and imap commands.
../singular_texi/reference.tex(,6161) @item @code{loadLib}
../singular_texi/reference.tex(,6162) @cindex loadLib, option
../singular_texi/reference.tex(,6163) shows loading of libraries (set by default).
../singular_texi/reference.tex(,6164) @item @code{debugLib}
../singular_texi/reference.tex(,6165) @cindex debugLib, option
../singular_texi/reference.tex(,6166) warns about syntax errors during loading of libraries.
../singular_texi/reference.tex(,6167) @item @code{loadProc}
../singular_texi/reference.tex(,6168) @cindex loadProc, option
../singular_texi/reference.tex(,6169) shows loading of procedures from libraries.
../singular_texi/reference.tex(,6170) @item @code{mem}
../singular_texi/reference.tex(,6171) @cindex mem, option
../singular_texi/reference.tex(,6172) shows memory usage in square brackets (see @ref{memory}).
../singular_texi/reference.tex(,6173) @item @code{prompt}
../singular_texi/reference.tex(,6174) @cindex prompt, option
../singular_texi/reference.tex(,6175) shows prompt (@code{>}, resp.@: @code{.}) if ready for input (default).
../singular_texi/reference.tex(,6176) @item @code{reading}
../singular_texi/reference.tex(,6177) @cindex reading, option
../singular_texi/reference.tex(,6178) shows the number of characters read from a file.
../singular_texi/reference.tex(,6179) @item @code{redefine}
../singular_texi/reference.tex(,6180) @cindex redefine, option
../singular_texi/reference.tex(,6181) warns about variable redefinitions (set by default).
../singular_texi/reference.tex(,6182) @item @code{usage}
../singular_texi/reference.tex(,6183) @cindex usage, option
../singular_texi/reference.tex(,6184) shows correct usage in error messages (set by default).
../singular_texi/reference.tex(,6185) @end table
../singular_texi/reference.tex(,6186) @item @strong{Example:}
../singular_texi/reference.tex(,6187) @smallexample
../singular_texi/reference.tex(,6188) @c reused example option reference.doc:4356 
../singular_texi/reference.tex(,6189)   option(prot);
../singular_texi/reference.tex(,6190)   option();
../singular_texi/reference.tex(,6191) @expansion{} //options: prot redefine usage prompt
../singular_texi/reference.tex(,6192)   option(notSugar);
../singular_texi/reference.tex(,6193)   option();
../singular_texi/reference.tex(,6194) @expansion{} //options: prot notSugar redefine usage prompt
../singular_texi/reference.tex(,6195)   option(noprot);
../singular_texi/reference.tex(,6196)   option();
../singular_texi/reference.tex(,6197) @expansion{} //options: notSugar redefine usage prompt
../singular_texi/reference.tex(,6198)   option(none);
../singular_texi/reference.tex(,6199)   option();
../singular_texi/reference.tex(,6200) @expansion{} //options: none
../singular_texi/reference.tex(,6201)   ring r=0,x,dp;
../singular_texi/reference.tex(,6202)   degBound=22;
../singular_texi/reference.tex(,6203)   option();
../singular_texi/reference.tex(,6204) @expansion{} //options: degBound redTail redThrough intStrategy
../singular_texi/reference.tex(,6205)   intvec i=option(get);
../singular_texi/reference.tex(,6206)   option(none);
../singular_texi/reference.tex(,6207)   option(set,i);
../singular_texi/reference.tex(,6208)   option();
../singular_texi/reference.tex(,6209) @expansion{} //options: degBound redTail redThrough intStrategy
../singular_texi/reference.tex(,6210) @c end example option reference.doc:4356
../singular_texi/reference.tex(,6211) @end smallexample
../singular_texi/reference.tex(,6212) @end table
../singular_texi/reference.tex(,6213) 
../singular_texi/reference.tex(,6214) @*The output reported on @code{option(prot)} has the following meaning:
../singular_texi/reference.tex(,6215) @multitable @columnfractions .01 .14 .11 .65
../singular_texi/reference.tex(,6216) 
../singular_texi/reference.tex(,6217) @item @tab @code{facstd}
../singular_texi/reference.tex(,6218) @tab @code{F} @tab found a new factor
../singular_texi/reference.tex(,6219) @item @tab @tab @tab all other characters: like the output of @code{std} and @code{reduce}
../singular_texi/reference.tex(,6220) @item @tab @tab @tab
../singular_texi/reference.tex(,6221) @item @tab @code{fglm}
../singular_texi/reference.tex(,6222) @tab @code{.} @tab basis monomial found
../singular_texi/reference.tex(,6223) @item @tab @tab @code{+} @tab edge monomial found
../singular_texi/reference.tex(,6224) @item @tab @tab @code{-} @tab border monomial found
../singular_texi/reference.tex(,6225) @item @tab @tab @tab
../singular_texi/reference.tex(,6226) @item @tab @code{groebner} @tab @tab all characters: like the output of @code{std}
../singular_texi/reference.tex(,6227) @item @tab @tab @tab
../singular_texi/reference.tex(,6228) @item @tab @code{lres}
../singular_texi/reference.tex(,6229) @tab @code{.} @tab minimal syzygy found
../singular_texi/reference.tex(,6230) @item @tab @tab @code{n} @tab slanted degree, i.e., row of Betti matrix
../singular_texi/reference.tex(,6231) @item @tab @tab @code{(mn)} @tab calculate in module n
../singular_texi/reference.tex(,6232) @item @tab @tab @code{g} @tab pair found giving reductum and syzygy
../singular_texi/reference.tex(,6233) @item @tab @tab @tab
../singular_texi/reference.tex(,6234) @item @tab @code{mres}
../singular_texi/reference.tex(,6235) @tab @code{[d]}
../singular_texi/reference.tex(,6236) @tab computations of the d-th syzygy module
../singular_texi/reference.tex(,6237) @item @tab @tab @tab all other characters: like the output of @code{std}
../singular_texi/reference.tex(,6238) @item @tab @tab @tab
../singular_texi/reference.tex(,6239) @item @tab @code{minres}
../singular_texi/reference.tex(,6240) @tab @code{[d]}
../singular_texi/reference.tex(,6241) @tab minimizing of the d-th syzygy module
../singular_texi/reference.tex(,6242) @item @tab @tab @tab
../singular_texi/reference.tex(,6243) @item @tab @code{mstd} @tab @tab all characters: like the output of @code{std}
../singular_texi/reference.tex(,6244) @item @tab @tab @tab
../singular_texi/reference.tex(,6245) @item @tab @code{reduce}
../singular_texi/reference.tex(,6246) @tab @code{r} @tab reduced a leading term
../singular_texi/reference.tex(,6247) @item @tab @tab @code{t} @tab reduced a non-leading term
../singular_texi/reference.tex(,6248) @item @tab @code{res}
../singular_texi/reference.tex(,6249) @tab @code{[d]}
../singular_texi/reference.tex(,6250) @tab computations of the d-th syzygy module
../singular_texi/reference.tex(,6251) @item @tab @tab @tab all other characters: like the output of @code{std}
../singular_texi/reference.tex(,6252) @item @tab @tab @tab
../singular_texi/reference.tex(,6253) @item @tab @code{sres}
../singular_texi/reference.tex(,6254) @tab @code{.} @tab syzygy found
../singular_texi/reference.tex(,6255) @item @tab @tab @code{(n)} @tab n elements remaining
../singular_texi/reference.tex(,6256) @item @tab @tab @code{[n]} @tab finished module n
../singular_texi/reference.tex(,6257) @item @tab @tab @tab
../singular_texi/reference.tex(,6258) @item @tab @code{std}
../singular_texi/reference.tex(,6259) @tab @code{[m:n]}
../singular_texi/reference.tex(,6260) @tab internal ring change to poly representation with exponent bound
../singular_texi/reference.tex(,6261) m and n words in exponent vector
../singular_texi/reference.tex(,6262) @item @tab @tab @code{s} @tab found a new element of the standard basis
../singular_texi/reference.tex(,6263) @item @tab @tab @code{-} @tab reduced a pair/S-polynomial to 0
../singular_texi/reference.tex(,6264) @item @tab @tab @code{.} @tab postponed a reduction of a pair/S-polynomial
../singular_texi/reference.tex(,6265) @item @tab @tab @code{h} @tab used Hilbert series criterion
../singular_texi/reference.tex(,6266) @item @tab @tab @code{H(d)} @tab found a 'highest corner' of degree d, no need to consider higher degrees
../singular_texi/reference.tex(,6267) @item @tab @tab @code{(n)} @tab n critical pairs are still to be reduced
../singular_texi/reference.tex(,6268) @item @tab @tab @code{(S:n)} @tab doing complete reduction of n elements
../singular_texi/reference.tex(,6269) @item @tab @tab @code{d} @tab the degree of the leading terms is currently d
../singular_texi/reference.tex(,6270) @item @tab @tab @tab
../singular_texi/reference.tex(,6271) @item @tab @code{stdfglm} @tab @tab all characters in first part: like the output of @code{std}
../singular_texi/reference.tex(,6272) @item @tab @tab @tab all characters in second part: like the output of @code{fglm}
../singular_texi/reference.tex(,6273) @item @tab @tab @tab
../singular_texi/reference.tex(,6274) @item @tab @code{stdhilb} @tab @tab all characters: like the output of @code{std}
../singular_texi/reference.tex(,6275) @item @tab @tab @tab
../singular_texi/reference.tex(,6276) @item @tab @code{syz} @tab @tab all characters: like the output of @code{std}
../singular_texi/reference.tex(,6277) @end multitable
../singular_texi/reference.tex(,6278) 
../singular_texi/reference.tex(,6279) 
../singular_texi/reference.tex(,6280) @c inserted refs from reference.doc:4442
../singular_texi/reference.tex(,6290) See
../singular_texi/reference.tex(,6291) @ref{degBound};
../singular_texi/reference.tex(,6292) @ref{multBound};
../singular_texi/reference.tex(,6293) @ref{std}.
../singular_texi/reference.tex(,6295) @c end inserted refs from reference.doc:4442
../singular_texi/reference.tex(,6296) @c ---------------------------------------
../singular_texi/reference.tex(,6297) @node ord, ordstr, option, Functions
../singular_texi/reference.tex(,6298) @subsection ord
../singular_texi/reference.tex(,6299) @cindex ord
../singular_texi/reference.tex(,6300) @table @code
../singular_texi/reference.tex(,6301) @item @strong{Syntax:}
../singular_texi/reference.tex(,6302) @code{ord (} poly_expression @code{)}
../singular_texi/reference.tex(,6303) @*@code{ord (} vector_expression @code{)}
../singular_texi/reference.tex(,6304) @item @strong{Type:}
../singular_texi/reference.tex(,6305) int
../singular_texi/reference.tex(,6306) @item @strong{Purpose:}
../singular_texi/reference.tex(,6307) returns the (weighted) degree of
../singular_texi/reference.tex(,6308) the initial term of a polynomial or a vector;
../singular_texi/reference.tex(,6309) the weights are the weights used for the first block of the ring ordering.
../singular_texi/reference.tex(,6310) @item @strong{Note:}
../singular_texi/reference.tex(,6311) @code{ord(0)} is @code{-1}.
../singular_texi/reference.tex(,6312) @item @strong{Example:}
../singular_texi/reference.tex(,6313) @smallexample
../singular_texi/reference.tex(,6314) @c reused example ord reference.doc:4466 
../singular_texi/reference.tex(,6315)   ring r=7,(x,y),wp(2,3);
../singular_texi/reference.tex(,6316)   ord(0);
../singular_texi/reference.tex(,6317) @expansion{} -1
../singular_texi/reference.tex(,6318)   poly f=x2+y3;  // weight on y is 3
../singular_texi/reference.tex(,6319)   ord(f);
../singular_texi/reference.tex(,6320) @expansion{} 9
../singular_texi/reference.tex(,6321)   ring R=7,(x,y),ws(2,3);
../singular_texi/reference.tex(,6322)   poly f=x2+y3;
../singular_texi/reference.tex(,6323)   ord(f);
../singular_texi/reference.tex(,6324) @expansion{} 4
../singular_texi/reference.tex(,6325)   vector v=[x2,y];
../singular_texi/reference.tex(,6326)   ord(v);
../singular_texi/reference.tex(,6327) @expansion{} 3
../singular_texi/reference.tex(,6328) @c end example ord reference.doc:4466
../singular_texi/reference.tex(,6329) @end smallexample
../singular_texi/reference.tex(,6330) @end table
../singular_texi/reference.tex(,6331) @c inserted refs from reference.doc:4479
../singular_texi/reference.tex(,6341) See
../singular_texi/reference.tex(,6342) @ref{deg};
../singular_texi/reference.tex(,6343) @ref{poly};
../singular_texi/reference.tex(,6344) @ref{vector}.
../singular_texi/reference.tex(,6346) @c end inserted refs from reference.doc:4479
../singular_texi/reference.tex(,6347) @c ---------------------------------------
../singular_texi/reference.tex(,6348) @node ordstr, par, ord, Functions
../singular_texi/reference.tex(,6349) @subsection ordstr
../singular_texi/reference.tex(,6350) @cindex ordstr
../singular_texi/reference.tex(,6351) @table @code
../singular_texi/reference.tex(,6352) @item @strong{Syntax:}
../singular_texi/reference.tex(,6353) @code{ordstr (} ring_name @code{)}
../singular_texi/reference.tex(,6354) @item @strong{Type:}
../singular_texi/reference.tex(,6355) string
../singular_texi/reference.tex(,6356) @item @strong{Purpose:}
../singular_texi/reference.tex(,6357) returns the description of the monomial ordering of the ring.
../singular_texi/reference.tex(,6358) @item @strong{Example:}
../singular_texi/reference.tex(,6359) @smallexample
../singular_texi/reference.tex(,6360) @c reused example ordstr reference.doc:4498 
../singular_texi/reference.tex(,6361)   ring r=7,(x,y),wp(2,3);
../singular_texi/reference.tex(,6362)   ordstr(r);
../singular_texi/reference.tex(,6363) @expansion{} wp(2,3),C
../singular_texi/reference.tex(,6364) @c end example ordstr reference.doc:4498
../singular_texi/reference.tex(,6365) @end smallexample
../singular_texi/reference.tex(,6366) @end table
../singular_texi/reference.tex(,6367) @c inserted refs from reference.doc:4504
../singular_texi/reference.tex(,6378) See
../singular_texi/reference.tex(,6379) @ref{charstr};
../singular_texi/reference.tex(,6380) @ref{parstr};
../singular_texi/reference.tex(,6381) @ref{ring};
../singular_texi/reference.tex(,6382) @ref{varstr}.
../singular_texi/reference.tex(,6384) @c end inserted refs from reference.doc:4504
../singular_texi/reference.tex(,6385) @c ---------------------------------------
../singular_texi/reference.tex(,6386) @node par, pardeg, ordstr, Functions
../singular_texi/reference.tex(,6387) @subsection par
../singular_texi/reference.tex(,6388) @cindex par
../singular_texi/reference.tex(,6389) @table @code
../singular_texi/reference.tex(,6390) @item @strong{Syntax:}
../singular_texi/reference.tex(,6391) @code{par (} int_expression @code{)}
../singular_texi/reference.tex(,6392) @item @strong{Type:}
../singular_texi/reference.tex(,6393) number
../singular_texi/reference.tex(,6394) @item @strong{Purpose:}
../singular_texi/reference.tex(,6395) @code{par(n);} returns the n-th parameter of the basering.
../singular_texi/reference.tex(,6396) @item @strong{Note:}
../singular_texi/reference.tex(,6397) This command should only be used if the basering has at least one parameter.
../singular_texi/reference.tex(,6398) @item @strong{Example:}
../singular_texi/reference.tex(,6399) @smallexample
../singular_texi/reference.tex(,6400) @c reused example par reference.doc:4526 
../singular_texi/reference.tex(,6401)   ring r=(0,a,b,c),(x,y,z),dp;
../singular_texi/reference.tex(,6402)   char(r);  // char to get the characteristic
../singular_texi/reference.tex(,6403) @expansion{} 0
../singular_texi/reference.tex(,6404)   par(2);   // par to get the n-th parameter
../singular_texi/reference.tex(,6405) @expansion{} (b)
../singular_texi/reference.tex(,6406) @c end example par reference.doc:4526
../singular_texi/reference.tex(,6407) @end smallexample
../singular_texi/reference.tex(,6408) @end table
../singular_texi/reference.tex(,6409) @c inserted refs from reference.doc:4533
../singular_texi/reference.tex(,6421) See
../singular_texi/reference.tex(,6422) @ref{char};
../singular_texi/reference.tex(,6423) @ref{npars};
../singular_texi/reference.tex(,6424) @ref{parstr};
../singular_texi/reference.tex(,6425) @ref{ring};
../singular_texi/reference.tex(,6426) @ref{var}.
../singular_texi/reference.tex(,6428) @c end inserted refs from reference.doc:4533
../singular_texi/reference.tex(,6429) @c ---------------------------------------
../singular_texi/reference.tex(,6430) @node pardeg, parstr, par, Functions
../singular_texi/reference.tex(,6431) @subsection pardeg
../singular_texi/reference.tex(,6432) @cindex pardeg
../singular_texi/reference.tex(,6433) @table @code
../singular_texi/reference.tex(,6434) @item @strong{Syntax:}
../singular_texi/reference.tex(,6435) @code{pardeg (} number_expression @code{)}
../singular_texi/reference.tex(,6436) @item @strong{Type:}
../singular_texi/reference.tex(,6437) int
../singular_texi/reference.tex(,6438) @item @strong{Purpose:}
../singular_texi/reference.tex(,6439) returns the degree of a number considered as a polynomial in the ring parameters.
../singular_texi/reference.tex(,6440) @item @strong{Example:}
../singular_texi/reference.tex(,6441) @smallexample
../singular_texi/reference.tex(,6442) @c reused example pardeg reference.doc:4554 
../singular_texi/reference.tex(,6443)   ring r=(0,a,b,c),(x,y,z),dp;
../singular_texi/reference.tex(,6444)   pardeg(a^2*b);
../singular_texi/reference.tex(,6445) @expansion{} 3
../singular_texi/reference.tex(,6446) @c end example pardeg reference.doc:4554
../singular_texi/reference.tex(,6447) @end smallexample
../singular_texi/reference.tex(,6448) @end table
../singular_texi/reference.tex(,6449) @c inserted refs from reference.doc:4560
../singular_texi/reference.tex(,6460) See
../singular_texi/reference.tex(,6461) @ref{deg};
../singular_texi/reference.tex(,6462) @ref{number};
../singular_texi/reference.tex(,6463) @ref{ring};
../singular_texi/reference.tex(,6464) @ref{var}.
../singular_texi/reference.tex(,6466) @c end inserted refs from reference.doc:4560
../singular_texi/reference.tex(,6467) @c ---------------------------------------
../singular_texi/reference.tex(,6468) @node parstr, preimage, pardeg, Functions
../singular_texi/reference.tex(,6469) @subsection parstr
../singular_texi/reference.tex(,6470) @cindex parstr
../singular_texi/reference.tex(,6471) @table @code
../singular_texi/reference.tex(,6472) @item @strong{Syntax:}
../singular_texi/reference.tex(,6473) @code{parstr (} ring_name @code{)}
../singular_texi/reference.tex(,6474) @*@code{parstr (} int_expression @code{)}
../singular_texi/reference.tex(,6475) @*@code{parstr (} ring_name@code{,} int_expression @code{)}
../singular_texi/reference.tex(,6476) @item @strong{Type:}
../singular_texi/reference.tex(,6477) string
../singular_texi/reference.tex(,6478) @item @strong{Purpose:}
../singular_texi/reference.tex(,6479) returns the list of parameters of the ring as a string
../singular_texi/reference.tex(,6480) or the name of the n-th parameter where n is given by the int_expression.
../singular_texi/reference.tex(,6481) @*If the ring_name is omitted, the basering is used, thus
../singular_texi/reference.tex(,6482) @code{parstr(n)} is equivalent to @code{parstr(basering,n)}.
../singular_texi/reference.tex(,6483) @item @strong{Example:}
../singular_texi/reference.tex(,6484) @smallexample
../singular_texi/reference.tex(,6485) @c reused example parstr reference.doc:4585 
../singular_texi/reference.tex(,6486)   ring r=(7,a,b,c),(x,y),wp(2,3);
../singular_texi/reference.tex(,6487)   parstr(r);
../singular_texi/reference.tex(,6488) @expansion{} a,b,c
../singular_texi/reference.tex(,6489)   parstr(2);
../singular_texi/reference.tex(,6490) @expansion{} b
../singular_texi/reference.tex(,6491)   parstr(r,3);
../singular_texi/reference.tex(,6492) @expansion{} c
../singular_texi/reference.tex(,6493) @c end example parstr reference.doc:4585
../singular_texi/reference.tex(,6494) @end smallexample
../singular_texi/reference.tex(,6495) @end table
../singular_texi/reference.tex(,6496) @c inserted refs from reference.doc:4593
../singular_texi/reference.tex(,6509) See
../singular_texi/reference.tex(,6510) @ref{charstr};
../singular_texi/reference.tex(,6511) @ref{npars};
../singular_texi/reference.tex(,6512) @ref{ordstr};
../singular_texi/reference.tex(,6513) @ref{par};
../singular_texi/reference.tex(,6514) @ref{ring};
../singular_texi/reference.tex(,6515) @ref{varstr}.
../singular_texi/reference.tex(,6517) @c end inserted refs from reference.doc:4593
../singular_texi/reference.tex(,6518) @c ---------------------------------------
../singular_texi/reference.tex(,6519) @node preimage, prime, parstr, Functions
../singular_texi/reference.tex(,6520) @subsection preimage
../singular_texi/reference.tex(,6521) @cindex preimage
../singular_texi/reference.tex(,6522) @cindex kernel
../singular_texi/reference.tex(,6523) 
../singular_texi/reference.tex(,6524) @table @code
../singular_texi/reference.tex(,6525) @item @strong{Syntax:}
../singular_texi/reference.tex(,6526) @code{preimage (} ring_name@code{,} map_name@code{,} ideal_name @code{)}
../singular_texi/reference.tex(,6527) @*@code{preimage (} ring_name@code{,} ideal_expression@code{,} ideal_name @code{)}
../singular_texi/reference.tex(,6528) @item @strong{Type:}
../singular_texi/reference.tex(,6529) ideal
../singular_texi/reference.tex(,6530) @item @strong{Purpose:}
../singular_texi/reference.tex(,6531) returns the preimage of an ideal under a given map.
../singular_texi/reference.tex(,6532) @*
../singular_texi/reference.tex(,6533) The second argument has to be a map from the basering to the given ring
../singular_texi/reference.tex(,6534) (or an ideal defining such a map),
../singular_texi/reference.tex(,6535) and the ideal has to be an ideal in the given ring.
../singular_texi/reference.tex(,6536) @item @strong{Note:}
../singular_texi/reference.tex(,6537) To compute the kernel of a map, the preimage of zero has to be determined.
../singular_texi/reference.tex(,6538) Hence there is no special command for computing the kernel of a map in
../singular_texi/reference.tex(,6539) @sc{Singular}.
../singular_texi/reference.tex(,6540) @item @strong{Example:}
../singular_texi/reference.tex(,6541) @smallexample
../singular_texi/reference.tex(,6542) @c reused example preimage reference.doc:4626 
../singular_texi/reference.tex(,6543)   ring r1=32003,(x,y,z,w),lp;
../singular_texi/reference.tex(,6544)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,6545)   ideal i=x,y,z;
../singular_texi/reference.tex(,6546)   ideal i1=x,y;
../singular_texi/reference.tex(,6547)   ideal i0=0;
../singular_texi/reference.tex(,6548)   map f=r1,i;
../singular_texi/reference.tex(,6549)   setring r1;
../singular_texi/reference.tex(,6550)   ideal i1=preimage(r,f,i1);
../singular_texi/reference.tex(,6551)   i1;
../singular_texi/reference.tex(,6552) @expansion{} i1[1]=w
../singular_texi/reference.tex(,6553) @expansion{} i1[2]=y
../singular_texi/reference.tex(,6554) @expansion{} i1[3]=x
../singular_texi/reference.tex(,6555)   // the kernel of f
../singular_texi/reference.tex(,6556)   preimage(r,f,i0);
../singular_texi/reference.tex(,6557) @expansion{} _[1]=w
../singular_texi/reference.tex(,6558) @c end example preimage reference.doc:4626
../singular_texi/reference.tex(,6559) @end smallexample
../singular_texi/reference.tex(,6560) @end table
../singular_texi/reference.tex(,6561) @c inserted refs from reference.doc:4641
../singular_texi/reference.tex(,6571) See
../singular_texi/reference.tex(,6572) @ref{ideal};
../singular_texi/reference.tex(,6573) @ref{map};
../singular_texi/reference.tex(,6574) @ref{ring}.
../singular_texi/reference.tex(,6576) @c end inserted refs from reference.doc:4641
../singular_texi/reference.tex(,6577) @c ---------------------------------------
../singular_texi/reference.tex(,6578) @node prime, print, preimage, Functions
../singular_texi/reference.tex(,6579) @subsection prime
../singular_texi/reference.tex(,6580) @cindex prime
../singular_texi/reference.tex(,6581) @table @code
../singular_texi/reference.tex(,6582) @item @strong{Syntax:}
../singular_texi/reference.tex(,6583) @code{prime (} int_expression @code{)}
../singular_texi/reference.tex(,6584) @item @strong{Type:}
../singular_texi/reference.tex(,6585) int
../singular_texi/reference.tex(,6586) @item @strong{Purpose:}
../singular_texi/reference.tex(,6587) returns the largest prime less then 32004 smaller or equal to the argument;
../singular_texi/reference.tex(,6588) @*returns 2 for all arguments smaller than 3.
../singular_texi/reference.tex(,6589) @item @strong{Example:}
../singular_texi/reference.tex(,6590) @smallexample
../singular_texi/reference.tex(,6591) @c reused example prime reference.doc:4661 
../singular_texi/reference.tex(,6592)   prime(32004);
../singular_texi/reference.tex(,6593) @expansion{} 32003
../singular_texi/reference.tex(,6594)   prime(0);
../singular_texi/reference.tex(,6595) @expansion{} 2
../singular_texi/reference.tex(,6596)   prime(-1);
../singular_texi/reference.tex(,6597) @expansion{} 2
../singular_texi/reference.tex(,6598) @c end example prime reference.doc:4661
../singular_texi/reference.tex(,6599) @end smallexample
../singular_texi/reference.tex(,6600) @end table
../singular_texi/reference.tex(,6601) @c inserted refs from reference.doc:4668
../singular_texi/reference.tex(,6610) See
../singular_texi/reference.tex(,6611) @ref{general_lib};
../singular_texi/reference.tex(,6612) @ref{int}.
../singular_texi/reference.tex(,6614) @c end inserted refs from reference.doc:4668
../singular_texi/reference.tex(,6615) @c ---------------------------------------
../singular_texi/reference.tex(,6616) @node print, printf, prime, Functions
../singular_texi/reference.tex(,6617) @subsection print
../singular_texi/reference.tex(,6618) @cindex print
../singular_texi/reference.tex(,6619) @table @code
../singular_texi/reference.tex(,6620) @item @strong{Syntax:}
../singular_texi/reference.tex(,6621) @code{print (} expression @code{)}
../singular_texi/reference.tex(,6622) @*@code{print (} expression@code{, "betti" )}
../singular_texi/reference.tex(,6623) @*@code{print (} expression@code{,} format_string @code{)}
../singular_texi/reference.tex(,6624) @item @strong{Type:}
../singular_texi/reference.tex(,6625) none (for the first two calling sequences), resp.@:
../singular_texi/reference.tex(,6626) @*string (for the last calling sequence)
../singular_texi/reference.tex(,6627) @item @strong{Purpose:}
../singular_texi/reference.tex(,6628) The first form prints the expression to the terminal and has no return
../singular_texi/reference.tex(,6629) value. Use the format string @code{%p} to print into a string (see
../singular_texi/reference.tex(,6630) below).
../singular_texi/reference.tex(,6631) @*The second form prints the graded Betti numbers from a matrix. See
../singular_texi/reference.tex(,6632) the description of the format string @code{"betti"} below for more
../singular_texi/reference.tex(,6633) details.
../singular_texi/reference.tex(,6634) @*The last form returns the printed output as a string. The format
../singular_texi/reference.tex(,6635) string determines which format to use to generate the string.
../singular_texi/reference.tex(,6636) 
../singular_texi/reference.tex(,6637) The following format strings are supported:
../singular_texi/reference.tex(,6638) @table @code
../singular_texi/reference.tex(,6639) @item "betti"
../singular_texi/reference.tex(,6640) The Betti numbers are printed in a matrix-like format where the entry
../singular_texi/reference.tex(,6641) @tex
../singular_texi/reference.tex(,6642) $d$ in row $i$ and column $j$
../singular_texi/reference.tex(,6643) @end tex
../singular_texi/reference.tex(,6647) is the minimal number of generators in
../singular_texi/reference.tex(,6648) degree
../singular_texi/reference.tex(,6649) @tex
../singular_texi/reference.tex(,6650) $i+j$ of the $j$-th
../singular_texi/reference.tex(,6651) @end tex
../singular_texi/reference.tex(,6655)  syzygy module of
../singular_texi/reference.tex(,6656) @tex
../singular_texi/reference.tex(,6657) $R^n/M$ (the 0th and 1st syzygy module of $R^n/M$ is $R^n$ and $M$, resp.).
../singular_texi/reference.tex(,6658) @end tex
../singular_texi/reference.tex(,6662) @item "%s"
../singular_texi/reference.tex(,6663) returns @code{string(} expression @code{)}
../singular_texi/reference.tex(,6664) @item "%2s"
../singular_texi/reference.tex(,6665) similar to @code{"%s"}, except that newlines are inserted after every
../singular_texi/reference.tex(,6666) comma and at the end
../singular_texi/reference.tex(,6667) @item "%l"
../singular_texi/reference.tex(,6668) similar to @code{"%s"}, except that each object is embraced by its type
../singular_texi/reference.tex(,6669) such that it can be directly used for "cutting and pasting"
../singular_texi/reference.tex(,6670) @item "%2l"
../singular_texi/reference.tex(,6671) similar to @code{"%l"}, except that newlines are inserted after every
../singular_texi/reference.tex(,6672) comma and at the end
../singular_texi/reference.tex(,6673) @item "%;"
../singular_texi/reference.tex(,6674) returns the string equivalent to typing @code{expression;}
../singular_texi/reference.tex(,6675) @item "%t"
../singular_texi/reference.tex(,6676) returns the string equivalent to typing @code{type expression;}
../singular_texi/reference.tex(,6677) @item "%p"
../singular_texi/reference.tex(,6678) returns the string equivalent to typing @code{print(expression);}
../singular_texi/reference.tex(,6679) @item "%b"
../singular_texi/reference.tex(,6680) returns the string equivalent to typing @code{print(expression, "betti");}
../singular_texi/reference.tex(,6681) @end table
../singular_texi/reference.tex(,6682) @item @strong{Example:}
../singular_texi/reference.tex(,6683) @smallexample
../singular_texi/reference.tex(,6684) @c reused example print reference.doc:4742 
../singular_texi/reference.tex(,6685)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,6686)   module m=[1,y],[0,x+z];
../singular_texi/reference.tex(,6687)   m;
../singular_texi/reference.tex(,6688) @expansion{} m[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,6689) @expansion{} m[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6690)   print(m);  // the columns generate m
../singular_texi/reference.tex(,6691) @expansion{} 1,0, 
../singular_texi/reference.tex(,6692) @expansion{} y,x+z
../singular_texi/reference.tex(,6693)   string s=print(m,"%s"); s;
../singular_texi/reference.tex(,6694) @expansion{} y*gen(2)+gen(1),x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6695)   s=print(m,"%2s"); s;
../singular_texi/reference.tex(,6696) @expansion{} y*gen(2)+gen(1),
../singular_texi/reference.tex(,6697) @expansion{} x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6698) @expansion{} 
../singular_texi/reference.tex(,6699)   s=print(m,"%l"); s;
../singular_texi/reference.tex(,6700) @expansion{} module(y*gen(2)+gen(1),x*gen(2)+z*gen(2))
../singular_texi/reference.tex(,6701)   s=print(m,"%;"); s;
../singular_texi/reference.tex(,6702) @expansion{} m[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,6703) @expansion{} m[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6704) @expansion{} 
../singular_texi/reference.tex(,6705)   s=print(m,"%t"); s;
../singular_texi/reference.tex(,6706) @expansion{} // m                    [0]  module, rk 2, 2 generator(s)
../singular_texi/reference.tex(,6707) @expansion{} m[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,6708) @expansion{} m[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6709)   s=print(m,"%p"); s;
../singular_texi/reference.tex(,6710) @expansion{} 1,0, 
../singular_texi/reference.tex(,6711) @expansion{} y,x+z
../singular_texi/reference.tex(,6712) @expansion{} 
../singular_texi/reference.tex(,6713)   intmat M=betti(mres(m,0));
../singular_texi/reference.tex(,6714)   print(M,"betti");
../singular_texi/reference.tex(,6715) @expansion{}            0     1
../singular_texi/reference.tex(,6716) @expansion{} ------------------
../singular_texi/reference.tex(,6717) @expansion{}     0:     1     1
../singular_texi/reference.tex(,6718) @expansion{} ------------------
../singular_texi/reference.tex(,6719) @expansion{} total:     1     1
../singular_texi/reference.tex(,6720)   list l=r,M;
../singular_texi/reference.tex(,6721)   s=print(l,"%s"); s;
../singular_texi/reference.tex(,6722) @expansion{} (0),(x,y,z),(dp(3),C),1,1 
../singular_texi/reference.tex(,6723)   s=print(l,"%2s"); s;
../singular_texi/reference.tex(,6724) @expansion{} (0),(x,y,z),(dp(3),C),
../singular_texi/reference.tex(,6725) @expansion{} 1,1 
../singular_texi/reference.tex(,6726) @expansion{} 
../singular_texi/reference.tex(,6727)   s=print(l,"%l"); s;
../singular_texi/reference.tex(,6728) @expansion{} list("(0),(x,y,z),(dp(3),C)",intmat(intvec(1,1 ),1,2))
../singular_texi/reference.tex(,6729) @c end example print reference.doc:4742
../singular_texi/reference.tex(,6730) @end smallexample
../singular_texi/reference.tex(,6731) @end table
../singular_texi/reference.tex(,6732) @c inserted refs from reference.doc:4762
../singular_texi/reference.tex(,6748) See
../singular_texi/reference.tex(,6749) @ref{Type conversion and casting};
../singular_texi/reference.tex(,6750) @ref{betti};
../singular_texi/reference.tex(,6751) @ref{dbprint};
../singular_texi/reference.tex(,6752) @ref{fprintf};
../singular_texi/reference.tex(,6753) @ref{printf};
../singular_texi/reference.tex(,6754) @ref{short};
../singular_texi/reference.tex(,6755) @ref{sprintf};
../singular_texi/reference.tex(,6756) @ref{string type cast};
../singular_texi/reference.tex(,6757) @ref{type}.
../singular_texi/reference.tex(,6759) @c end inserted refs from reference.doc:4762
../singular_texi/reference.tex(,6760) 
../singular_texi/reference.tex(,6761) @c ---------------------------------------
../singular_texi/reference.tex(,6762) @node printf, prune, print, Functions
../singular_texi/reference.tex(,6763) @subsection printf
../singular_texi/reference.tex(,6764) @cindex printf
../singular_texi/reference.tex(,6765) @c start include of docu for standard.lib:printf
../singular_texi/reference.tex(,6766) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,6767) @c ---content printf---
../singular_texi/reference.tex(,6768) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,6769) 
../singular_texi/reference.tex(,6770) @table @asis
../singular_texi/reference.tex(,6771) @item @strong{Syntax:}
../singular_texi/reference.tex(,6772) @code{printf (} string_expression @code{[,} any_expressions@code{] )}
../singular_texi/reference.tex(,6773) 
../singular_texi/reference.tex(,6774) @item @strong{Return:}
../singular_texi/reference.tex(,6775) none
../singular_texi/reference.tex(,6776) 
../singular_texi/reference.tex(,6777) @item @strong{Purpose:}
../singular_texi/reference.tex(,6778) @code{printf(fmt,...);} performs output formatting. The first
../singular_texi/reference.tex(,6779) argument is a format control string. Additional arguments may be
../singular_texi/reference.tex(,6780) required, depending on the content of the control string. A series
../singular_texi/reference.tex(,6781) of output characters is generated as directed by the control string;
../singular_texi/reference.tex(,6782) these characters are displayed (i.e., printed to standard out). @*
../singular_texi/reference.tex(,6783) The control string @code{fmt} is simply text to be copied, except
../singular_texi/reference.tex(,6784) that the string may contain conversion specifications. @*
../singular_texi/reference.tex(,6785) Do @code{help print;} for a listing of valid conversion
../singular_texi/reference.tex(,6786) specifications. As an addition to the conversions of @code{print},
../singular_texi/reference.tex(,6787) the @code{%n} and @code{%2} conversion specification does not
../singular_texi/reference.tex(,6788) consume an additional argument, but simply generates a newline
../singular_texi/reference.tex(,6789) character.
../singular_texi/reference.tex(,6790) 
../singular_texi/reference.tex(,6791) @item @strong{Note:}
../singular_texi/reference.tex(,6792) If one of the additional arguments is a list, then it should be
../singular_texi/reference.tex(,6793) enclosed once more into a @code{list()} command, since passing a
../singular_texi/reference.tex(,6794) list as an argument flattens the list by one level.
../singular_texi/reference.tex(,6795) 
../singular_texi/reference.tex(,6796) @end table
../singular_texi/reference.tex(,6797) @strong{Example:}
../singular_texi/reference.tex(,6798) @smallexample
../singular_texi/reference.tex(,6799) @c reused example printf d2t_singular/standard_lib.doc:450 
../singular_texi/reference.tex(,6800)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,6801) module m=[1,y],[0,x+z];
../singular_texi/reference.tex(,6802) intmat M=betti(mres(m,0));
../singular_texi/reference.tex(,6803) list l=r,m,M;
../singular_texi/reference.tex(,6804) printf("s:%s,l:%l",1,2);
../singular_texi/reference.tex(,6805) @expansion{} s:1,l:int(2)
../singular_texi/reference.tex(,6806) printf("s:%s",l);
../singular_texi/reference.tex(,6807) @expansion{} s:(0),(x,y,z),(dp(3),C)
../singular_texi/reference.tex(,6808) printf("s:%s",list(l));
../singular_texi/reference.tex(,6809) @expansion{} s:(0),(x,y,z),(dp(3),C),y*gen(2)+gen(1),x*gen(2)+z*gen(2),1,1 
../singular_texi/reference.tex(,6810) printf("2l:%2l",list(l));
../singular_texi/reference.tex(,6811) @expansion{} 2l:list("(0),(x,y,z),(dp(3),C)",
../singular_texi/reference.tex(,6812) @expansion{} module(y*gen(2)+gen(1),
../singular_texi/reference.tex(,6813) @expansion{} x*gen(2)+z*gen(2)),
../singular_texi/reference.tex(,6814) @expansion{} intmat(intvec(1,1 ),1,2))
../singular_texi/reference.tex(,6815) @expansion{} 
../singular_texi/reference.tex(,6816) printf("%p",list(l));
../singular_texi/reference.tex(,6817) @expansion{} [1]:
../singular_texi/reference.tex(,6818) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,6819) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,6820) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,6821) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,6822) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,6823) @expansion{} [2]:
../singular_texi/reference.tex(,6824) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,6825) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6826) @expansion{} [3]:
../singular_texi/reference.tex(,6827) @expansion{}    1,1 
../singular_texi/reference.tex(,6828) @expansion{} 
../singular_texi/reference.tex(,6829) printf("%;",list(l));
../singular_texi/reference.tex(,6830) @expansion{} [1]:
../singular_texi/reference.tex(,6831) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,6832) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,6833) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,6834) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,6835) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,6836) @expansion{} [2]:
../singular_texi/reference.tex(,6837) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,6838) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,6839) @expansion{} [3]:
../singular_texi/reference.tex(,6840) @expansion{}    1,1 
../singular_texi/reference.tex(,6841) @expansion{} 
../singular_texi/reference.tex(,6842) printf("%b",M);
../singular_texi/reference.tex(,6843) @expansion{}            0     1
../singular_texi/reference.tex(,6844) @expansion{} ------------------
../singular_texi/reference.tex(,6845) @expansion{}     0:     1     1
../singular_texi/reference.tex(,6846) @expansion{} ------------------
../singular_texi/reference.tex(,6847) @expansion{} total:     1     1
../singular_texi/reference.tex(,6848) @expansion{} 
../singular_texi/reference.tex(,6849) @c end example printf d2t_singular/standard_lib.doc:450
../singular_texi/reference.tex(,6850) @end smallexample
../singular_texi/reference.tex(,6851) @c inserted refs from d2t_singular/standard_lib.doc:464
../singular_texi/reference.tex(,6862) @strong{See also:}
../singular_texi/reference.tex(,6863) @ref{fprintf};
../singular_texi/reference.tex(,6864) @ref{print};
../singular_texi/reference.tex(,6865) @ref{sprintf};
../singular_texi/reference.tex(,6866) @ref{string}.
../singular_texi/reference.tex(,6868) @c end inserted refs from d2t_singular/standard_lib.doc:464
../singular_texi/reference.tex(,6869) 
../singular_texi/reference.tex(,6870) @c ---end content printf---
../singular_texi/reference.tex(,6871) @c generated lib proc docu for standard.lib:printf reference.doc:4779 
../singular_texi/reference.tex(,6872) @c end include of docu for standard.lib:printf
../singular_texi/reference.tex(,6873) 
../singular_texi/reference.tex(,6874) @c ---------------------------------------
../singular_texi/reference.tex(,6875) @node prune, qhweight, printf, Functions
../singular_texi/reference.tex(,6876) @subsection prune
../singular_texi/reference.tex(,6877) @cindex prune
../singular_texi/reference.tex(,6878) @table @code
../singular_texi/reference.tex(,6879) @item @strong{Syntax:}
../singular_texi/reference.tex(,6880) @code{prune (} module_expression @code{)}
../singular_texi/reference.tex(,6881) @item @strong{Type:}
../singular_texi/reference.tex(,6882) module
../singular_texi/reference.tex(,6883) @item @strong{Purpose:}
../singular_texi/reference.tex(,6884) returns the module minimally embedded in a free module such that the
../singular_texi/reference.tex(,6885) corresponding factor modules are isomorphic.
../singular_texi/reference.tex(,6886) @item @strong{Example:}
../singular_texi/reference.tex(,6887) @smallexample
../singular_texi/reference.tex(,6888) @c reused example prune reference.doc:4795 
../singular_texi/reference.tex(,6889)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,6890)   module m=gen(1),gen(3),[x,y,0,z],[x+y,0,0,0,1];
../singular_texi/reference.tex(,6891)   print(m);
../singular_texi/reference.tex(,6892) @expansion{} 1,0,x,x+y,
../singular_texi/reference.tex(,6893) @expansion{} 0,0,y,0,  
../singular_texi/reference.tex(,6894) @expansion{} 0,1,0,0,  
../singular_texi/reference.tex(,6895) @expansion{} 0,0,z,0,  
../singular_texi/reference.tex(,6896) @expansion{} 0,0,0,1   
../singular_texi/reference.tex(,6897)   print(prune(m));
../singular_texi/reference.tex(,6898) @expansion{} y,
../singular_texi/reference.tex(,6899) @expansion{} z 
../singular_texi/reference.tex(,6900) @c end example prune reference.doc:4795
../singular_texi/reference.tex(,6901) @end smallexample
../singular_texi/reference.tex(,6902) @end table
../singular_texi/reference.tex(,6903) @c inserted refs from reference.doc:4803
../singular_texi/reference.tex(,6911) See
../singular_texi/reference.tex(,6912) @ref{module}.
../singular_texi/reference.tex(,6914) @c end inserted refs from reference.doc:4803
../singular_texi/reference.tex(,6915) @c ---------------------------------------
../singular_texi/reference.tex(,6916) @node qhweight, quot, prune, Functions
../singular_texi/reference.tex(,6917) @subsection qhweight
../singular_texi/reference.tex(,6918) @cindex qhweight
../singular_texi/reference.tex(,6919) @table @code
../singular_texi/reference.tex(,6920) @item @strong{Syntax:}
../singular_texi/reference.tex(,6921) @code{qhweight (} ideal_expression @code{)}
../singular_texi/reference.tex(,6922) @item @strong{Type:}
../singular_texi/reference.tex(,6923) intvec
../singular_texi/reference.tex(,6924) @item @strong{Purpose:}
../singular_texi/reference.tex(,6925) computes the weight vector of the variables for a quasihomogeneous ideal.
../singular_texi/reference.tex(,6926) If the input is not weighted homogeneous, an intvec of zeros is returned.
../singular_texi/reference.tex(,6927) @item @strong{Example:}
../singular_texi/reference.tex(,6928) @smallexample
../singular_texi/reference.tex(,6929) @c reused example qhweight reference.doc:4821 
../singular_texi/reference.tex(,6930)   ring h1=32003,(t,x,y,z),dp;
../singular_texi/reference.tex(,6931)   ideal i=x4+y3+z2;
../singular_texi/reference.tex(,6932)   qhweight(i);
../singular_texi/reference.tex(,6933) @expansion{} 0,3,4,6
../singular_texi/reference.tex(,6934) @c end example qhweight reference.doc:4821
../singular_texi/reference.tex(,6935) @end smallexample
../singular_texi/reference.tex(,6936) @end table
../singular_texi/reference.tex(,6937) @c inserted refs from reference.doc:4828
../singular_texi/reference.tex(,6947) See
../singular_texi/reference.tex(,6948) @ref{ideal};
../singular_texi/reference.tex(,6949) @ref{intvec};
../singular_texi/reference.tex(,6950) @ref{weight}.
../singular_texi/reference.tex(,6952) @c end inserted refs from reference.doc:4828
../singular_texi/reference.tex(,6953) 
../singular_texi/reference.tex(,6954) @c ---------------------------------------
../singular_texi/reference.tex(,6955) @node quot, quote, qhweight, Functions
../singular_texi/reference.tex(,6956) @subsection quot
../singular_texi/reference.tex(,6957) @cindex quot
../singular_texi/reference.tex(,6958) @c start include of docu for standard.lib:quot
../singular_texi/reference.tex(,6959) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,6960) @c ---content quot---
../singular_texi/reference.tex(,6961) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,6962) 
../singular_texi/reference.tex(,6963) @table @asis
../singular_texi/reference.tex(,6964) @item @strong{Syntax:}
../singular_texi/reference.tex(,6965) @code{quot (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,6966) @*@code{quot (} module_expression@code{,} module_expression@code{,}
../singular_texi/reference.tex(,6967) int_expression @code{)}
../singular_texi/reference.tex(,6968) @*@code{quot (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,6969) @*@code{quot (} ideal_expression@code{,} ideal_expression@code{,}
../singular_texi/reference.tex(,6970) int_expression @code{)}
../singular_texi/reference.tex(,6971) 
../singular_texi/reference.tex(,6972) @item @strong{Type:}
../singular_texi/reference.tex(,6973) ideal
../singular_texi/reference.tex(,6974) 
../singular_texi/reference.tex(,6975) @item @strong{Syntax:}
../singular_texi/reference.tex(,6976) @code{quot (} module_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,6977) 
../singular_texi/reference.tex(,6978) @item @strong{Type:}
../singular_texi/reference.tex(,6979) module
../singular_texi/reference.tex(,6980) 
../singular_texi/reference.tex(,6981) @item @strong{Purpose:}
../singular_texi/reference.tex(,6982) computes the quotient of the 1st and the 2nd argument.
../singular_texi/reference.tex(,6983) If a 3rd argument 'n' is given the n-th method is used
../singular_texi/reference.tex(,6984) (n=1...5).
../singular_texi/reference.tex(,6985) 
../singular_texi/reference.tex(,6986) @end table
../singular_texi/reference.tex(,6987) @strong{Example:}
../singular_texi/reference.tex(,6988) @smallexample
../singular_texi/reference.tex(,6989) @c reused example quot d2t_singular/standard_lib.doc:202 
../singular_texi/reference.tex(,6990)   ring r=181,(x,y,z),(c,ls);
../singular_texi/reference.tex(,6991) ideal id1=maxideal(4);
../singular_texi/reference.tex(,6992) ideal id2=x2+xyz,y2-z3y,z3+y5xz;
../singular_texi/reference.tex(,6993) option(prot);
../singular_texi/reference.tex(,6994) ideal id3=quotient(id1,id2);
../singular_texi/reference.tex(,6995) @expansion{} [1023:1]4(14)s(13)s(12)s(11)s(10)s(9)s(8)s(7)s(6)s(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,6996) @expansion{} product criterion:12 chain criterion:0
../singular_texi/reference.tex(,6997) @expansion{} @{3@}[1023:3]8(2)s(4)s(5)s9s.s.s.s.s.s
../singular_texi/reference.tex(,6998) @expansion{} product criterion:0 chain criterion:39
../singular_texi/reference.tex(,6999) id3;
../singular_texi/reference.tex(,7000) @expansion{} id3[1]=z2
../singular_texi/reference.tex(,7001) @expansion{} id3[2]=yz
../singular_texi/reference.tex(,7002) @expansion{} id3[3]=y2
../singular_texi/reference.tex(,7003) @expansion{} id3[4]=xz
../singular_texi/reference.tex(,7004) @expansion{} id3[5]=xy
../singular_texi/reference.tex(,7005) @expansion{} id3[6]=x2
../singular_texi/reference.tex(,7006) ideal id4=quot(id1,id2,1);
../singular_texi/reference.tex(,7007) @expansion{} [1023:2]4(14)s(13)s(12)s(11)s(10)s(9)s(8)s(7)s(6)s(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,7008) @expansion{} product criterion:0 chain criterion:0
../singular_texi/reference.tex(,7009) @expansion{} (S:3)rtrtrt
../singular_texi/reference.tex(,7010) @expansion{} @{1@}[1023:3]4(2)s(4)s(5)s5s.s(3)s(2)sss
../singular_texi/reference.tex(,7011) @expansion{} product criterion:0 chain criterion:39
../singular_texi/reference.tex(,7012) @expansion{} @{1@}[1023:3]4(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,7013) @expansion{} product criterion:0 chain criterion:9
../singular_texi/reference.tex(,7014) @expansion{} [255:3]3(11)s(10)sss(9)s(10)s(8)ss(7)s(8)s(6)s(7)s4(5)-----
../singular_texi/reference.tex(,7015) @expansion{} product criterion:12 chain criterion:9
../singular_texi/reference.tex(,7016) @expansion{} @{1@}[1023:3]4(2)sss
../singular_texi/reference.tex(,7017) @expansion{} product criterion:0 chain criterion:12
../singular_texi/reference.tex(,7018) @expansion{} [255:3]2(8)s(7)s(6)s3(5)ssssss4-----
../singular_texi/reference.tex(,7019) @expansion{} product criterion:15 chain criterion:3
../singular_texi/reference.tex(,7020) id4;
../singular_texi/reference.tex(,7021) @expansion{} id4[1]=z2
../singular_texi/reference.tex(,7022) @expansion{} id4[2]=yz
../singular_texi/reference.tex(,7023) @expansion{} id4[3]=xz
../singular_texi/reference.tex(,7024) @expansion{} id4[4]=y2
../singular_texi/reference.tex(,7025) @expansion{} id4[5]=xy
../singular_texi/reference.tex(,7026) @expansion{} id4[6]=x2
../singular_texi/reference.tex(,7027) ideal id5=quot(id1,id2,2);
../singular_texi/reference.tex(,7028) @expansion{} [1023:2]4(14)s(13)s(12)s(11)s(10)s(9)s(8)s(7)s(6)s(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,7029) @expansion{} product criterion:0 chain criterion:0
../singular_texi/reference.tex(,7030) @expansion{} (S:3)rtrtrt
../singular_texi/reference.tex(,7031) @expansion{} @{1@}[1023:3]4(2)sss
../singular_texi/reference.tex(,7032) @expansion{} product criterion:0 chain criterion:12
../singular_texi/reference.tex(,7033) @expansion{} @{1@}[1023:3]4(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,7034) @expansion{} product criterion:0 chain criterion:9
../singular_texi/reference.tex(,7035) @expansion{} [255:3]2(8)s(7)s(6)s3(5)s(4)s(3)s(2)sss
../singular_texi/reference.tex(,7036) @expansion{} product criterion:15 chain criterion:0
../singular_texi/reference.tex(,7037) id5;
../singular_texi/reference.tex(,7038) @expansion{} id5[1]=z2
../singular_texi/reference.tex(,7039) @expansion{} id5[2]=yz
../singular_texi/reference.tex(,7040) @expansion{} id5[3]=xz
../singular_texi/reference.tex(,7041) @expansion{} id5[4]=y2
../singular_texi/reference.tex(,7042) @expansion{} id5[5]=xy
../singular_texi/reference.tex(,7043) @expansion{} id5[6]=x2
../singular_texi/reference.tex(,7044) @c end example quot d2t_singular/standard_lib.doc:202
../singular_texi/reference.tex(,7045) @end smallexample
../singular_texi/reference.tex(,7046) @c inserted refs from d2t_singular/standard_lib.doc:215
../singular_texi/reference.tex(,7054) @strong{See also:}
../singular_texi/reference.tex(,7055) @ref{quotient}.
../singular_texi/reference.tex(,7057) @c end inserted refs from d2t_singular/standard_lib.doc:215
../singular_texi/reference.tex(,7058) 
../singular_texi/reference.tex(,7059) @c ---end content quot---
../singular_texi/reference.tex(,7060) @c generated lib proc docu for standard.lib:quot reference.doc:4839 
../singular_texi/reference.tex(,7061) @c end include of docu for standard.lib:quot
../singular_texi/reference.tex(,7062) 
../singular_texi/reference.tex(,7063) 
../singular_texi/reference.tex(,7064) @c ---------------------------------------
../singular_texi/reference.tex(,7065) @node quote, quotient, quot, Functions
../singular_texi/reference.tex(,7066) @subsection quote
../singular_texi/reference.tex(,7067) @cindex quote
../singular_texi/reference.tex(,7068) @table @code
../singular_texi/reference.tex(,7069) @item @strong{Syntax:}
../singular_texi/reference.tex(,7070) @code{quote (} expression @code{)}
../singular_texi/reference.tex(,7071) @item @strong{Type:}
../singular_texi/reference.tex(,7072) none
../singular_texi/reference.tex(,7073) @item @strong{Purpose:}
../singular_texi/reference.tex(,7074) prevents expressions from evaluation. Used only in connections with write to
../singular_texi/reference.tex(,7075) MPfile links, prevents evaluation of an expression before sending it to an other
../singular_texi/reference.tex(,7076) @sc{Singular} process.
../singular_texi/reference.tex(,7077) Within a quoted expression, the
../singular_texi/reference.tex(,7078) quote can be "undone" by an @code{eval} (i.e., each eval "undoes" the
../singular_texi/reference.tex(,7079) effect of exactly one quote).
../singular_texi/reference.tex(,7080) @item @strong{Example:}
../singular_texi/reference.tex(,7081) @smallexample
../singular_texi/reference.tex(,7082) @c reused example quote reference.doc:4860 
../singular_texi/reference.tex(,7083)   link l="MPfile:w example.mp";
../singular_texi/reference.tex(,7084)   ring r=0,(x,y,z),ds;
../singular_texi/reference.tex(,7085)   ideal i=maxideal(3);
../singular_texi/reference.tex(,7086)   ideal j=x7,x2,z;
../singular_texi/reference.tex(,7087)   option(prot);
../singular_texi/reference.tex(,7088)   // compute i+j before writing, but not std
../singular_texi/reference.tex(,7089)   write (l, quote(std(eval(i+j))));
../singular_texi/reference.tex(,7090)   close(l);
../singular_texi/reference.tex(,7091)   // now read it in again and evaluate:
../singular_texi/reference.tex(,7092)   read(l);
../singular_texi/reference.tex(,7093) @expansion{} [1023:1]1(12)s2(11)s3(10)--s(7)s(6)-----7-
../singular_texi/reference.tex(,7094) @expansion{} product criterion:4 chain criterion:0
../singular_texi/reference.tex(,7095) @expansion{} _[1]=z
../singular_texi/reference.tex(,7096) @expansion{} _[2]=x2
../singular_texi/reference.tex(,7097) @expansion{} _[3]=xy2
../singular_texi/reference.tex(,7098) @expansion{} _[4]=y3
../singular_texi/reference.tex(,7099)   close(l);
../singular_texi/reference.tex(,7100) @c end example quote reference.doc:4860
../singular_texi/reference.tex(,7101) @end smallexample
../singular_texi/reference.tex(,7102) @end table
../singular_texi/reference.tex(,7103) @c inserted refs from reference.doc:4875
../singular_texi/reference.tex(,7113) See
../singular_texi/reference.tex(,7114) @ref{MPfile links};
../singular_texi/reference.tex(,7115) @ref{eval};
../singular_texi/reference.tex(,7116) @ref{write}.
../singular_texi/reference.tex(,7118) @c end inserted refs from reference.doc:4875
../singular_texi/reference.tex(,7119) @c ---------------------------------------
../singular_texi/reference.tex(,7120) @node quotient, random, quote, Functions
../singular_texi/reference.tex(,7121) @subsection quotient
../singular_texi/reference.tex(,7122) @cindex quotient
../singular_texi/reference.tex(,7123) @table @code
../singular_texi/reference.tex(,7124) @item @strong{Syntax:}
../singular_texi/reference.tex(,7125) @code{quotient (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7126) @*@code{quotient (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,7127) @item @strong{Type:}
../singular_texi/reference.tex(,7128) ideal
../singular_texi/reference.tex(,7129) @item @strong{Syntax:}
../singular_texi/reference.tex(,7130) @code{quotient (} module_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7131) @item @strong{Type:}
../singular_texi/reference.tex(,7132) module
../singular_texi/reference.tex(,7133) @item @strong{Purpose:}
../singular_texi/reference.tex(,7134) computes the ideal quotient, resp.@: module quotient. Let @code{R} be the
../singular_texi/reference.tex(,7135) basering, @code{I,J} ideals and @code{M} a module in
../singular_texi/reference.tex(,7139) @tex
../singular_texi/reference.tex(,7140) ${\tt R}^n$.
../singular_texi/reference.tex(,7141) @end tex
../singular_texi/reference.tex(,7142) Then
../singular_texi/reference.tex(,7143) @itemize
../singular_texi/reference.tex(,7144) @item
../singular_texi/reference.tex(,7145) @code{quotient(I,J)}=
../singular_texi/reference.tex(,7149) @tex
../singular_texi/reference.tex(,7150) $\{a \in R \mid aJ \subset I\}$,
../singular_texi/reference.tex(,7151) @end tex
../singular_texi/reference.tex(,7152) @item
../singular_texi/reference.tex(,7153) @code{quotient(M,J)}=
../singular_texi/reference.tex(,7157) @tex
../singular_texi/reference.tex(,7158) $\{b \in R^n \mid bJ \subset M\}$.
../singular_texi/reference.tex(,7159) @end tex
../singular_texi/reference.tex(,7160) @end itemize
../singular_texi/reference.tex(,7161) @item @strong{Example:}
../singular_texi/reference.tex(,7162) @smallexample
../singular_texi/reference.tex(,7163) @c reused example quotient reference.doc:4925 
../singular_texi/reference.tex(,7164) ring r=181,(x,y,z),(c,ls);
../singular_texi/reference.tex(,7165) ideal id1=maxideal(3);
../singular_texi/reference.tex(,7166) ideal id2=x2+xyz,y2-z3y,z3+y5xz;
../singular_texi/reference.tex(,7167) ideal id6=quotient(id1,id2);
../singular_texi/reference.tex(,7168) id6;
../singular_texi/reference.tex(,7169) @expansion{} id6[1]=z
../singular_texi/reference.tex(,7170) @expansion{} id6[2]=y
../singular_texi/reference.tex(,7171) @expansion{} id6[3]=x
../singular_texi/reference.tex(,7172) quotient(id2,id1);
../singular_texi/reference.tex(,7173) @expansion{} _[1]=z2
../singular_texi/reference.tex(,7174) @expansion{} _[2]=yz
../singular_texi/reference.tex(,7175) @expansion{} _[3]=y2
../singular_texi/reference.tex(,7176) @expansion{} _[4]=xz
../singular_texi/reference.tex(,7177) @expansion{} _[5]=xy
../singular_texi/reference.tex(,7178) @expansion{} _[6]=x2
../singular_texi/reference.tex(,7179) module m=x*freemodule(3),y*freemodule(2);
../singular_texi/reference.tex(,7180) ideal id3=x,y;
../singular_texi/reference.tex(,7181) quotient(m,id3);
../singular_texi/reference.tex(,7182) @expansion{} _[1]=[1]
../singular_texi/reference.tex(,7183) @expansion{} _[2]=[0,1]
../singular_texi/reference.tex(,7184) @expansion{} _[3]=[0,0,x]
../singular_texi/reference.tex(,7185) @c end example quotient reference.doc:4925
../singular_texi/reference.tex(,7186) @end smallexample
../singular_texi/reference.tex(,7187) @end table
../singular_texi/reference.tex(,7188) @c inserted refs from reference.doc:4938
../singular_texi/reference.tex(,7198) See
../singular_texi/reference.tex(,7199) @ref{fglmquot};
../singular_texi/reference.tex(,7200) @ref{ideal};
../singular_texi/reference.tex(,7201) @ref{module}.
../singular_texi/reference.tex(,7203) @c end inserted refs from reference.doc:4938
../singular_texi/reference.tex(,7204) @c ---------------------------------------
../singular_texi/reference.tex(,7205) @node random, read, quotient, Functions
../singular_texi/reference.tex(,7206) @subsection random
../singular_texi/reference.tex(,7207) @cindex random
../singular_texi/reference.tex(,7208) @table @code
../singular_texi/reference.tex(,7209) @item @strong{Syntax:}
../singular_texi/reference.tex(,7210) @code{random (} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7211) @item @strong{Type:}
../singular_texi/reference.tex(,7212) int
../singular_texi/reference.tex(,7213) @item @strong{Purpose:}
../singular_texi/reference.tex(,7214) returns a random integer between the integer given by the first
../singular_texi/reference.tex(,7215) int_expression and the one given by the second int_expression.
../singular_texi/reference.tex(,7216) @*
../singular_texi/reference.tex(,7217) @item @strong{Syntax:}
../singular_texi/reference.tex(,7218) @code{random (} int_expression@code{,} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7219) @item @strong{Type:}
../singular_texi/reference.tex(,7220) intmat
../singular_texi/reference.tex(,7221) @item @strong{Purpose:}
../singular_texi/reference.tex(,7222) returns a random intmat where the size is given by the second (number of
../singular_texi/reference.tex(,7223) rows) and third argument (number of columns). The absolute value of the
../singular_texi/reference.tex(,7224) entries of the matrix is smaller than or equal to the integer given as
../singular_texi/reference.tex(,7225) the first argument.
../singular_texi/reference.tex(,7226) @item @strong{Note:}
../singular_texi/reference.tex(,7227) The random generator can be set to a start value with
../singular_texi/reference.tex(,7228) the function @code{system}, resp.@: by a command line option.
../singular_texi/reference.tex(,7229) @item @strong{Example:}
../singular_texi/reference.tex(,7230) @smallexample
../singular_texi/reference.tex(,7231) @c reused example random reference.doc:4971 
../singular_texi/reference.tex(,7232)   random(1,1000);
../singular_texi/reference.tex(,7233) @expansion{} 35
../singular_texi/reference.tex(,7234)   random(1,2,3);
../singular_texi/reference.tex(,7235) @expansion{} 0,0,0,
../singular_texi/reference.tex(,7236) @expansion{} 1,1,-1 
../singular_texi/reference.tex(,7237)   system("random",210);  // start random generator with 210
../singular_texi/reference.tex(,7238)   random(-1000,1000);
../singular_texi/reference.tex(,7239) @expansion{} 707
../singular_texi/reference.tex(,7240)   random(-1000,1000);
../singular_texi/reference.tex(,7241) @expansion{} 284
../singular_texi/reference.tex(,7242)   system("random",210);
../singular_texi/reference.tex(,7243)   random(-1000,1000);    // the same random values again
../singular_texi/reference.tex(,7244) @expansion{} 707
../singular_texi/reference.tex(,7245) @c end example random reference.doc:4971
../singular_texi/reference.tex(,7246) @end smallexample
../singular_texi/reference.tex(,7247) @end table
../singular_texi/reference.tex(,7248) @c inserted refs from reference.doc:4982
../singular_texi/reference.tex(,7259) See
../singular_texi/reference.tex(,7260) @ref{Command line options};
../singular_texi/reference.tex(,7261) @ref{int};
../singular_texi/reference.tex(,7262) @ref{intmat};
../singular_texi/reference.tex(,7263) @ref{system}.
../singular_texi/reference.tex(,7265) @c end inserted refs from reference.doc:4982
../singular_texi/reference.tex(,7266) @c ---------------------------------------
../singular_texi/reference.tex(,7267) @node read, reduce, random, Functions
../singular_texi/reference.tex(,7268) @subsection read
../singular_texi/reference.tex(,7269) @cindex read
../singular_texi/reference.tex(,7270) @table @code
../singular_texi/reference.tex(,7271) @item @strong{Syntax:}
../singular_texi/reference.tex(,7272) @code{read (} link_expression @code{)}
../singular_texi/reference.tex(,7273) @*for DBM links:
../singular_texi/reference.tex(,7274) @*@code{read (} link_expression @code{)}
../singular_texi/reference.tex(,7275) @*@code{read (} link_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,7276) @item @strong{Type:}
../singular_texi/reference.tex(,7277) any
../singular_texi/reference.tex(,7278) @item @strong{Purpose:}
../singular_texi/reference.tex(,7279) reads data from a link.
../singular_texi/reference.tex(,7280) @*For ASCII links, the content of the entire
../singular_texi/reference.tex(,7281) file is returned as one string. If the ASCII link is the empty string,
../singular_texi/reference.tex(,7282) @code{read} reads from standard input.
../singular_texi/reference.tex(,7283) @*For MP links, one expression is read
../singular_texi/reference.tex(,7284) from the link and returned after evaluation.
../singular_texi/reference.tex(,7285) @*For MPtcp links the @code{read} command blocks as long as there is no
../singular_texi/reference.tex(,7286) data to be read from the link. The @code{status} command can be used to
../singular_texi/reference.tex(,7287) check whether or not there is data to be read.
../singular_texi/reference.tex(,7288) @*For DBM links, a @code{read} with one argument returns the value of
../singular_texi/reference.tex(,7289) the next entry in the data base, and a @code{read} with two arguments
../singular_texi/reference.tex(,7290) returns the value to the key given as the second argument from the data
../singular_texi/reference.tex(,7291) base.
../singular_texi/reference.tex(,7292) @item @strong{Example:}
../singular_texi/reference.tex(,7293) @smallexample
../singular_texi/reference.tex(,7294) @c reused example read reference.doc:5017 
../singular_texi/reference.tex(,7295)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,7296)   ideal i=x+y,z3+22y;
../singular_texi/reference.tex(,7297)   // write the ideal i to the file save_i
../singular_texi/reference.tex(,7298)   write(":w save_i",i);
../singular_texi/reference.tex(,7299)   ring r0=0,(x,y,z),Dp;
../singular_texi/reference.tex(,7300)   // create an ideal k equal to the content
../singular_texi/reference.tex(,7301)   // of the file save_i
../singular_texi/reference.tex(,7302)   string s="ideal k="+read("save_i")+";";
../singular_texi/reference.tex(,7303)   execute(s);
../singular_texi/reference.tex(,7304)   k;
../singular_texi/reference.tex(,7305) @expansion{} k[1]=x+y
../singular_texi/reference.tex(,7306) @expansion{} k[2]=z3+22y
../singular_texi/reference.tex(,7307) @c end example read reference.doc:5017
../singular_texi/reference.tex(,7308) @end smallexample
../singular_texi/reference.tex(,7309) @end table
../singular_texi/reference.tex(,7310) @c inserted refs from reference.doc:5031
../singular_texi/reference.tex(,7322) See
../singular_texi/reference.tex(,7323) @ref{execute};
../singular_texi/reference.tex(,7324) @ref{getdump};
../singular_texi/reference.tex(,7325) @ref{link};
../singular_texi/reference.tex(,7326) @ref{status};
../singular_texi/reference.tex(,7327) @ref{write}.
../singular_texi/reference.tex(,7329) @c end inserted refs from reference.doc:5031
../singular_texi/reference.tex(,7330) @c ---------------------------------------
../singular_texi/reference.tex(,7331) @node reduce, regularity, read, Functions
../singular_texi/reference.tex(,7332) @subsection reduce
../singular_texi/reference.tex(,7333) @cindex reduce
../singular_texi/reference.tex(,7334) @cindex NF
../singular_texi/reference.tex(,7335) @table @code
../singular_texi/reference.tex(,7336) @item @strong{Syntax:}
../singular_texi/reference.tex(,7337) @code{reduce (} poly_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7338) @*@code{reduce (} poly_expression@code{,} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7339) @*@code{reduce (} poly_expression@code{,} ideal_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,7340) @*@code{reduce (} vector_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7341) @*@code{reduce (} vector_expression@code{,} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7342) @*@code{reduce (} vector_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,7343) @*@code{reduce (} vector_expression@code{,} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7344) @*@code{reduce (} vector_expression@code{,} module_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,7345) @*@code{reduce (} ideal_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7346) @*@code{reduce (} ideal_expression@code{,} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7347) @*@code{reduce (} ideal_expression@code{,} ideal_expression@code{,} matrix_expression @code{)}
../singular_texi/reference.tex(,7348) @*@code{reduce (} module_expression@code{,} ideal_expression @code{)}
../singular_texi/reference.tex(,7349) @*@code{reduce (} module_expression@code{,} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7350) @*@code{reduce (} module_expression@code{,} module_expression @code{)}
../singular_texi/reference.tex(,7351) @*@code{reduce (} module_expression@code{,} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7352) @*@code{reduce (} module_expression@code{,} module_expression@code{,} matrix_expression @code{)}
../singular_texi/reference.tex(,7353) @item @strong{Type:}
../singular_texi/reference.tex(,7354) the type of the first argument
../singular_texi/reference.tex(,7355) @item @strong{Purpose:}
../singular_texi/reference.tex(,7356) reduces a polynomial, vector, ideal  or module to its normal form with respect to an ideal or module represented by a standard basis.
../singular_texi/reference.tex(,7357) Returns 0 if and only if the polynomial (resp.@: vector, ideal, module)
../singular_texi/reference.tex(,7358) is an element (resp.@: subideal, submodule) of the ideal (resp.@: module).
../singular_texi/reference.tex(,7359) The result may have no meaning if the second argument is not a standard basis.
../singular_texi/reference.tex(,7360) @*The third (optional) argument 1 of type int forces a reduction which considers only the leading term and does no tail reduction.
../singular_texi/reference.tex(,7361) @*If a third argument @code{u} of type poly or matrix is given, the first argument @code{p} is replaced by @code{p/u}.
../singular_texi/reference.tex(,7362) This works only for zero dimensional ideals (resp.@: modules) in the second argument and gives, even in a local ring, a reduced normal form which is the projection to the quotient by the ideal (resp.@: module).
../singular_texi/reference.tex(,7363) @item @strong{Note:}
../singular_texi/reference.tex(,7364) The commands @code{reduce} and @code{NF} are synonymous.
../singular_texi/reference.tex(,7365) @item @strong{Example:}
../singular_texi/reference.tex(,7366) @smallexample
../singular_texi/reference.tex(,7367) @c reused example reduce reference.doc:5076 
../singular_texi/reference.tex(,7368)   ring r1 = 0,(z,y,x),ds;
../singular_texi/reference.tex(,7369)   poly s1=2x5y+7x2y4+3x2yz3;
../singular_texi/reference.tex(,7370)   poly s2=1x2y2z2+3z8;
../singular_texi/reference.tex(,7371)   poly s3=4xy5+2x2y2z3+11x10;
../singular_texi/reference.tex(,7372)   ideal i=s1,s2,s3;
../singular_texi/reference.tex(,7373)   ideal j=std(i);
../singular_texi/reference.tex(,7374)   reduce(3z3yx2+7y4x2+yx5+z12y2x2,j);
../singular_texi/reference.tex(,7375) @expansion{} -yx5+2401/81y14x2+2744/81y11x5+392/27y8x8+224/81y5x11+16/81y2x14
../singular_texi/reference.tex(,7376)   reduce(3z3yx2+7y4x2+yx5+z12y2x2,j,1);
../singular_texi/reference.tex(,7377) @expansion{} -yx5+z12y2x2
../singular_texi/reference.tex(,7378) @c end example reduce reference.doc:5076
../singular_texi/reference.tex(,7379) @end smallexample
../singular_texi/reference.tex(,7380) @end table
../singular_texi/reference.tex(,7381) @c inserted refs from reference.doc:5088
../singular_texi/reference.tex(,7392) See
../singular_texi/reference.tex(,7393) @ref{ideal};
../singular_texi/reference.tex(,7394) @ref{module};
../singular_texi/reference.tex(,7395) @ref{std};
../singular_texi/reference.tex(,7396) @ref{vector}.
../singular_texi/reference.tex(,7398) @c end inserted refs from reference.doc:5088
../singular_texi/reference.tex(,7399) @c ---------------------------------------
../singular_texi/reference.tex(,7400) @node regularity, repart, reduce, Functions
../singular_texi/reference.tex(,7401) @subsection regularity
../singular_texi/reference.tex(,7402) @cindex regularity
../singular_texi/reference.tex(,7403) @table @code
../singular_texi/reference.tex(,7404) @item @strong{Syntax:}
../singular_texi/reference.tex(,7405) @code{regularity (} list_expression @code{)}
../singular_texi/reference.tex(,7406) @*@code{regularity (} resolution_expression @code{)}
../singular_texi/reference.tex(,7407) @item @strong{Type:}
../singular_texi/reference.tex(,7408) int
../singular_texi/reference.tex(,7409) @item @strong{Purpose:}
../singular_texi/reference.tex(,7410) computes the regularity of a homogeneous ideal, resp.@: module, from a
../singular_texi/reference.tex(,7411) minimal resolution given by the list expression.
../singular_texi/reference.tex(,7412) @*
../singular_texi/reference.tex(,7422) @tex
../singular_texi/reference.tex(,7423) \noindent
../singular_texi/reference.tex(,7424) Let $0 \rightarrow\ \bigoplus_a K[x]e_{a,n}\ \rightarrow\ \dots
../singular_texi/reference.tex(,7425)   \rightarrow\ \bigoplus_a K[x]e_{a,0}\ \rightarrow\
../singular_texi/reference.tex(,7426)   I\ \rightarrow\ 0$
../singular_texi/reference.tex(,7427) be a minimal resolution of I considered with homogeneous maps of degree 0.
../singular_texi/reference.tex(,7428) The regularity is the smallest number $s$ with the property deg($e_{a,i})
../singular_texi/reference.tex(,7429)  \leq s+i$ for all $i$.
../singular_texi/reference.tex(,7430) @end tex
../singular_texi/reference.tex(,7431) @item @strong{Note:}
../singular_texi/reference.tex(,7432) If applied to a non minimal resolution only an upper bound is returned.
../singular_texi/reference.tex(,7433) @*If the input to the commands @code{res} and @code{mres} is homogeneous
../singular_texi/reference.tex(,7434) the regularity is computed and used as a degree bound during
../singular_texi/reference.tex(,7435) the computation unless @code{option(notRegularity);} is given.
../singular_texi/reference.tex(,7436) @item @strong{Example:}
../singular_texi/reference.tex(,7437) @smallexample
../singular_texi/reference.tex(,7438) @c reused example regularity reference.doc:5134 
../singular_texi/reference.tex(,7439)   ring rh3=32003,(w,x,y,z),(dp,C);
../singular_texi/reference.tex(,7440)   poly f=x11+y10+z9+x5y2+x2y2z3+xy3*(y2+x)^2;
../singular_texi/reference.tex(,7441)   ideal j=homog(jacob(f),w);
../singular_texi/reference.tex(,7442)   def jr=res(j,0);
../singular_texi/reference.tex(,7443)   regularity(jr);
../singular_texi/reference.tex(,7444) @expansion{} 25
../singular_texi/reference.tex(,7445)   // example for upper bound behavior:
../singular_texi/reference.tex(,7446)   list jj=jr;
../singular_texi/reference.tex(,7447)   regularity(jj);
../singular_texi/reference.tex(,7448) @expansion{} 25
../singular_texi/reference.tex(,7449)   jj=nres(j,0);
../singular_texi/reference.tex(,7450)   regularity(jj);
../singular_texi/reference.tex(,7451) @expansion{} 27
../singular_texi/reference.tex(,7452)   jj=minres(jj);
../singular_texi/reference.tex(,7453)   regularity(jj);
../singular_texi/reference.tex(,7454) @expansion{} 25
../singular_texi/reference.tex(,7455) @c end example regularity reference.doc:5134
../singular_texi/reference.tex(,7456) @end smallexample
../singular_texi/reference.tex(,7457) @end table
../singular_texi/reference.tex(,7458) @c inserted refs from reference.doc:5150
../singular_texi/reference.tex(,7472) See
../singular_texi/reference.tex(,7473) @ref{list};
../singular_texi/reference.tex(,7474) @ref{minres};
../singular_texi/reference.tex(,7475) @ref{mres};
../singular_texi/reference.tex(,7476) @ref{option};
../singular_texi/reference.tex(,7477) @ref{res};
../singular_texi/reference.tex(,7478) @ref{resolution};
../singular_texi/reference.tex(,7479) @ref{sres}.
../singular_texi/reference.tex(,7481) @c end inserted refs from reference.doc:5150
../singular_texi/reference.tex(,7482) @c ---------------------------------------
../singular_texi/reference.tex(,7483) @node repart, res, regularity, Functions
../singular_texi/reference.tex(,7484) @subsection repart
../singular_texi/reference.tex(,7485) @cindex repart
../singular_texi/reference.tex(,7486) 
../singular_texi/reference.tex(,7487) @table @code
../singular_texi/reference.tex(,7488) @item @strong{Syntax:}
../singular_texi/reference.tex(,7489) @code{repart (} number_expression @code{)}
../singular_texi/reference.tex(,7490) @item @strong{Type:}
../singular_texi/reference.tex(,7491) number
../singular_texi/reference.tex(,7492) @item @strong{Purpose:}
../singular_texi/reference.tex(,7493) returns the real part of a number from a complex ground field,
../singular_texi/reference.tex(,7494) @*returns its argument otherwise.
../singular_texi/reference.tex(,7495) @item @strong{Example:}
../singular_texi/reference.tex(,7496) @smallexample
../singular_texi/reference.tex(,7497) @c reused example repart reference.doc:5175 
../singular_texi/reference.tex(,7498)   ring r=(complex,i),x,dp;
../singular_texi/reference.tex(,7499)   repart(1+2*i);
../singular_texi/reference.tex(,7500) @expansion{} 1
../singular_texi/reference.tex(,7501) @c end example repart reference.doc:5175
../singular_texi/reference.tex(,7502) @end smallexample
../singular_texi/reference.tex(,7503) @end table
../singular_texi/reference.tex(,7504) @c inserted refs from reference.doc:5181
../singular_texi/reference.tex(,7512) See
../singular_texi/reference.tex(,7513) @ref{impart}.
../singular_texi/reference.tex(,7515) @c end inserted refs from reference.doc:5181
../singular_texi/reference.tex(,7516) @c ---------------------------------------
../singular_texi/reference.tex(,7517) @node  res, reservedName, repart, Functions
../singular_texi/reference.tex(,7518) @subsection res
../singular_texi/reference.tex(,7519) @cindex res
../singular_texi/reference.tex(,7520) @c start include of docu for standard.lib:res
../singular_texi/reference.tex(,7521) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,7522) @c ---content res---
../singular_texi/reference.tex(,7523) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,7524) 
../singular_texi/reference.tex(,7525) @c we do texinfo here:
../singular_texi/reference.tex(,7526) @cindex resolution, computation of
../singular_texi/reference.tex(,7527) @table @code
../singular_texi/reference.tex(,7528) @item @strong{Syntax:}
../singular_texi/reference.tex(,7529) @code{res (} ideal_expression@code{,} int_expression @code{[,} any_expression @code{])}
../singular_texi/reference.tex(,7530) @*@code{res (} module_expression@code{,} int_expression @code{[,} any_expression @code{])}
../singular_texi/reference.tex(,7531) @item @strong{Type:}
../singular_texi/reference.tex(,7532) resolution
../singular_texi/reference.tex(,7533) @item @strong{Purpose:}
../singular_texi/reference.tex(,7534) computes a (possibly minimal) free resolution of an ideal or module using
../singular_texi/reference.tex(,7535) a heuristically chosen method.
../singular_texi/reference.tex(,7536) @* The second (int) argument (say, @code{k}) specifies the length of
../singular_texi/reference.tex(,7537) the resolution. If it is not positive then @code{k} is assumed to be the
../singular_texi/reference.tex(,7538) number of variables of the basering.
../singular_texi/reference.tex(,7539) @* If a third argument is given, the returned resolution is minimized.
../singular_texi/reference.tex(,7540) 
../singular_texi/reference.tex(,7541) Depending on the input, the returned resolution is computed using the
../singular_texi/reference.tex(,7542) following methods:
../singular_texi/reference.tex(,7543) @table @asis
../singular_texi/reference.tex(,7544) @item @strong{quotient rings:}
../singular_texi/reference.tex(,7545) @code{nres} (classical method using syzygies) , see @ref{nres}.
../singular_texi/reference.tex(,7546) 
../singular_texi/reference.tex(,7547) @item @strong{homogeneous ideals and k=0:}
../singular_texi/reference.tex(,7548) @code{lres} (La'Scala's method), see @ref{lres}.
../singular_texi/reference.tex(,7549) 
../singular_texi/reference.tex(,7550) @item @strong{not minimized resolution and (homogeneous input with k not 0, or local rings):}
../singular_texi/reference.tex(,7551) @code{sres} (Schreyer's method), see @ref{sres}.
../singular_texi/reference.tex(,7552) 
../singular_texi/reference.tex(,7553) @item @strong{all other inputs:}
../singular_texi/reference.tex(,7554) @code{mres} (classical method), see @ref{mres}.
../singular_texi/reference.tex(,7555) @end table
../singular_texi/reference.tex(,7556) @item @strong{Note:}
../singular_texi/reference.tex(,7557) Accessing single elements of a resolution may require that some partial
../singular_texi/reference.tex(,7558) computations have to be finished and may therefore take some time.
../singular_texi/reference.tex(,7559) @end table
../singular_texi/reference.tex(,7560) @c inserted refs from d2t_singular/standard_lib.doc:263
../singular_texi/reference.tex(,7577) See also
../singular_texi/reference.tex(,7578) @ref{betti};
../singular_texi/reference.tex(,7579) @ref{hres};
../singular_texi/reference.tex(,7580) @ref{ideal};
../singular_texi/reference.tex(,7581) @ref{lres};
../singular_texi/reference.tex(,7582) @ref{minres};
../singular_texi/reference.tex(,7583) @ref{module};
../singular_texi/reference.tex(,7584) @ref{mres};
../singular_texi/reference.tex(,7585) @ref{nres};
../singular_texi/reference.tex(,7586) @ref{resolution};
../singular_texi/reference.tex(,7587) @ref{sres}.
../singular_texi/reference.tex(,7589) @c end inserted refs from d2t_singular/standard_lib.doc:263
../singular_texi/reference.tex(,7590) 
../singular_texi/reference.tex(,7591) @strong{Example:}
../singular_texi/reference.tex(,7592) @smallexample
../singular_texi/reference.tex(,7593) @c reused example res d2t_singular/standard_lib.doc:279 
../singular_texi/reference.tex(,7594)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,7595) ideal i=xz,yz,x3-y3;
../singular_texi/reference.tex(,7596) def l=res(i,0); // homogeneous ideal: uses lres
../singular_texi/reference.tex(,7597) l;
../singular_texi/reference.tex(,7598) @expansion{}  1      3      2      
../singular_texi/reference.tex(,7599) @expansion{} r <--  r <--  r
../singular_texi/reference.tex(,7600) @expansion{} 
../singular_texi/reference.tex(,7601) @expansion{} 0      1      2      
../singular_texi/reference.tex(,7602) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,7603) @expansion{} 
../singular_texi/reference.tex(,7604) print(betti(l), "betti"); // input to betti may be of type resolution
../singular_texi/reference.tex(,7605) @expansion{}            0     1     2
../singular_texi/reference.tex(,7606) @expansion{} ------------------------
../singular_texi/reference.tex(,7607) @expansion{}     0:     1     -     -
../singular_texi/reference.tex(,7608) @expansion{}     1:     -     2     1
../singular_texi/reference.tex(,7609) @expansion{}     2:     -     1     1
../singular_texi/reference.tex(,7610) @expansion{} ------------------------
../singular_texi/reference.tex(,7611) @expansion{} total:     1     3     2
../singular_texi/reference.tex(,7612) l[2];         // element access may take some time
../singular_texi/reference.tex(,7613) @expansion{} _[1]=-x*gen(1)+y*gen(2)
../singular_texi/reference.tex(,7614) @expansion{} _[2]=-x2*gen(2)+y2*gen(1)+z*gen(3)
../singular_texi/reference.tex(,7615) i=i,x+1;
../singular_texi/reference.tex(,7616) l=res(i,0);   // inhomogeneous ideal: uses mres
../singular_texi/reference.tex(,7617) l;
../singular_texi/reference.tex(,7618) @expansion{}  1      3      3      1      
../singular_texi/reference.tex(,7619) @expansion{} r <--  r <--  r <--  r
../singular_texi/reference.tex(,7620) @expansion{} 
../singular_texi/reference.tex(,7621) @expansion{} 0      1      2      3      
../singular_texi/reference.tex(,7622) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,7623) @expansion{} 
../singular_texi/reference.tex(,7624) ring rs=0,(x,y,z),ds;
../singular_texi/reference.tex(,7625) ideal i=imap(r,i);
../singular_texi/reference.tex(,7626) def l=res(i,0); // local ring not minimized: uses sres
../singular_texi/reference.tex(,7627) l;
../singular_texi/reference.tex(,7628) @expansion{}   1       1       
../singular_texi/reference.tex(,7629) @expansion{} rs <--  rs
../singular_texi/reference.tex(,7630) @expansion{} 
../singular_texi/reference.tex(,7631) @expansion{} 0       1       
../singular_texi/reference.tex(,7632) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,7633) @expansion{} 
../singular_texi/reference.tex(,7634) res(i,0,0);     // local ring and minimized: uses mres
../singular_texi/reference.tex(,7635) @expansion{}   1       1       
../singular_texi/reference.tex(,7636) @expansion{} rs <--  rs
../singular_texi/reference.tex(,7637) @expansion{} 
../singular_texi/reference.tex(,7638) @expansion{} 0       1       
../singular_texi/reference.tex(,7639) @expansion{} 
../singular_texi/reference.tex(,7640) @c end example res d2t_singular/standard_lib.doc:279
../singular_texi/reference.tex(,7641) @end smallexample
../singular_texi/reference.tex(,7642) @c ---end content res---
../singular_texi/reference.tex(,7643) @c generated lib proc docu for standard.lib:res reference.doc:5189 
../singular_texi/reference.tex(,7644) @c end include of docu for standard.lib:res
../singular_texi/reference.tex(,7645) 
../singular_texi/reference.tex(,7646) @c ---------------------------------------
../singular_texi/reference.tex(,7647) @node reservedName, resultant, res, Functions
../singular_texi/reference.tex(,7648) @subsection reservedName
../singular_texi/reference.tex(,7649) @cindex reservedName
../singular_texi/reference.tex(,7650) @table @code
../singular_texi/reference.tex(,7651) @item @strong{Syntax:}
../singular_texi/reference.tex(,7652) @code{reservedName ()}
../singular_texi/reference.tex(,7653) @item @strong{Type:}
../singular_texi/reference.tex(,7654) none
../singular_texi/reference.tex(,7655) @item @strong{Syntax:}
../singular_texi/reference.tex(,7656) @code{reservedName (} string_expression @code{)}
../singular_texi/reference.tex(,7657) @item @strong{Type:}
../singular_texi/reference.tex(,7658) int
../singular_texi/reference.tex(,7659) @item @strong{Purpose:}
../singular_texi/reference.tex(,7660) prints a list of all reserved identifiers (first form) or tests
../singular_texi/reference.tex(,7661) whether the string is a reserved identifier (second form).
../singular_texi/reference.tex(,7662) @item @strong{Example:}
../singular_texi/reference.tex(,7663) @smallexample
../singular_texi/reference.tex(,7664) reservedName();
../singular_texi/reference.tex(,7665) @expansion{} ... // output skipped
../singular_texi/reference.tex(,7666) @c reused example reservedName reference.doc:5211 
../singular_texi/reference.tex(,7667)   reservedName("ring");
../singular_texi/reference.tex(,7668) @expansion{} 1
../singular_texi/reference.tex(,7669)   reservedName("xyz");
../singular_texi/reference.tex(,7670) @expansion{} 0
../singular_texi/reference.tex(,7671) @c end example reservedName reference.doc:5211
../singular_texi/reference.tex(,7672) @end smallexample
../singular_texi/reference.tex(,7673) @end table
../singular_texi/reference.tex(,7674) @c inserted refs from reference.doc:5217
../singular_texi/reference.tex(,7683) See
../singular_texi/reference.tex(,7684) @ref{names};
../singular_texi/reference.tex(,7685) @ref{string}.
../singular_texi/reference.tex(,7687) @c end inserted refs from reference.doc:5217
../singular_texi/reference.tex(,7688) @c ---------------------------------------
../singular_texi/reference.tex(,7689) @node  resultant, rvar, reservedName, Functions
../singular_texi/reference.tex(,7690) @subsection resultant
../singular_texi/reference.tex(,7691) @cindex resultant
../singular_texi/reference.tex(,7692) @table @code
../singular_texi/reference.tex(,7693) @item @strong{Syntax:}
../singular_texi/reference.tex(,7694) @code{resultant (} poly_expression@code{,} poly_expression@code{,} ring_variable @code{)}
../singular_texi/reference.tex(,7695) @item @strong{Type:}
../singular_texi/reference.tex(,7696) poly
../singular_texi/reference.tex(,7697) @item @strong{Purpose:}
../singular_texi/reference.tex(,7698) computes the resultant of the first and second argument with respect
../singular_texi/reference.tex(,7699) to the variable given as the third argument.
../singular_texi/reference.tex(,7700) @item @strong{Example:}
../singular_texi/reference.tex(,7701) @smallexample
../singular_texi/reference.tex(,7702) @c reused example resultant reference.doc:5236 
../singular_texi/reference.tex(,7703)   ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,7704)   poly f=3*(x+2)^3+y;
../singular_texi/reference.tex(,7705)   poly g=x+y+z;
../singular_texi/reference.tex(,7706)   resultant(f,g,x);
../singular_texi/reference.tex(,7707) @expansion{} 3y3+9y2z+9yz2+3z3-18y2-36yz-18z2+35y+36z-24
../singular_texi/reference.tex(,7708) @c end example resultant reference.doc:5236
../singular_texi/reference.tex(,7709) @end smallexample
../singular_texi/reference.tex(,7710) @end table
../singular_texi/reference.tex(,7711) @c inserted refs from reference.doc:5244
../singular_texi/reference.tex(,7720) See
../singular_texi/reference.tex(,7721) @ref{poly};
../singular_texi/reference.tex(,7722) @ref{ring}.
../singular_texi/reference.tex(,7724) @c end inserted refs from reference.doc:5244
../singular_texi/reference.tex(,7725) @c ---------------------------------------
../singular_texi/reference.tex(,7726) @node rvar, setring, resultant, Functions
../singular_texi/reference.tex(,7727) @subsection rvar
../singular_texi/reference.tex(,7728) @cindex rvar
../singular_texi/reference.tex(,7729) @table @code
../singular_texi/reference.tex(,7730) @item @strong{Syntax:}
../singular_texi/reference.tex(,7731) @code{rvar (} name @code{)}
../singular_texi/reference.tex(,7732) @*@code{rvar (} poly_expression @code{)}
../singular_texi/reference.tex(,7733) @*@code{rvar (} string_expression @code{)}
../singular_texi/reference.tex(,7734) @item @strong{Type:}
../singular_texi/reference.tex(,7735) int
../singular_texi/reference.tex(,7736) @item @strong{Purpose:}
../singular_texi/reference.tex(,7737) returns the number of the variable if the name is a ring variable of the
../singular_texi/reference.tex(,7738) basering or if the string is the name of a ring variable of the
../singular_texi/reference.tex(,7739) basering; returns 0 if not. Hence the return value of @code{rvar} can
../singular_texi/reference.tex(,7740) also be used in a boolean context to check whether the variable exists.
../singular_texi/reference.tex(,7741) @item @strong{Example:}
../singular_texi/reference.tex(,7742) @smallexample
../singular_texi/reference.tex(,7743) @c reused example rvar reference.doc:5267 
../singular_texi/reference.tex(,7744)   ring r=29,(x,y,z),lp;
../singular_texi/reference.tex(,7745)   rvar(x);
../singular_texi/reference.tex(,7746) @expansion{} 1
../singular_texi/reference.tex(,7747)   rvar(r);
../singular_texi/reference.tex(,7748) @expansion{} 0
../singular_texi/reference.tex(,7749)   rvar(y);
../singular_texi/reference.tex(,7750) @expansion{} 2
../singular_texi/reference.tex(,7751)   rvar(var(3));
../singular_texi/reference.tex(,7752) @expansion{} 3
../singular_texi/reference.tex(,7753)   rvar("x");
../singular_texi/reference.tex(,7754) @expansion{} 1
../singular_texi/reference.tex(,7755) @c end example rvar reference.doc:5267
../singular_texi/reference.tex(,7756) @end smallexample
../singular_texi/reference.tex(,7757) @end table
../singular_texi/reference.tex(,7758) @c inserted refs from reference.doc:5277
../singular_texi/reference.tex(,7769) See
../singular_texi/reference.tex(,7770) @ref{defined};
../singular_texi/reference.tex(,7771) @ref{ring};
../singular_texi/reference.tex(,7772) @ref{var};
../singular_texi/reference.tex(,7773) @ref{varstr}.
../singular_texi/reference.tex(,7775) @c end inserted refs from reference.doc:5277
../singular_texi/reference.tex(,7776) @c ---------------------------------------
../singular_texi/reference.tex(,7777) @node setring, simplex, rvar, Functions
../singular_texi/reference.tex(,7778) @subsection setring
../singular_texi/reference.tex(,7779) @cindex setring
../singular_texi/reference.tex(,7780) @table @code
../singular_texi/reference.tex(,7781) @item @strong{Syntax:}
../singular_texi/reference.tex(,7782) @code{setring} ring_name
../singular_texi/reference.tex(,7783) @item @strong{Type:}
../singular_texi/reference.tex(,7784) none
../singular_texi/reference.tex(,7785) @item @strong{Purpose:}
../singular_texi/reference.tex(,7786) changes the basering to another (already defined) ring.
../singular_texi/reference.tex(,7787) @item @strong{Example:}
../singular_texi/reference.tex(,7788) @smallexample
../singular_texi/reference.tex(,7789) @c reused example setring reference.doc:5297 
../singular_texi/reference.tex(,7790)   ring r1=0,(x,y),lp;
../singular_texi/reference.tex(,7791)   // the basering is r1
../singular_texi/reference.tex(,7792)   ring r2=32003,(a(1..8)),ds;
../singular_texi/reference.tex(,7793)   // the basering is r2
../singular_texi/reference.tex(,7794)   setring r1;
../singular_texi/reference.tex(,7795)   // the basering is again r1
../singular_texi/reference.tex(,7796)   nameof(basering);
../singular_texi/reference.tex(,7797) @expansion{} r1
../singular_texi/reference.tex(,7798)   listvar();
../singular_texi/reference.tex(,7799) @expansion{} // r2                   [0]  ring
../singular_texi/reference.tex(,7800) @expansion{} // r1                   [0]  *ring
../singular_texi/reference.tex(,7801) @expansion{} // LIB                  [0]  string standard.lib
../singular_texi/reference.tex(,7802) @c end example setring reference.doc:5297
../singular_texi/reference.tex(,7803) @end smallexample
../singular_texi/reference.tex(,7804) @item @strong{Use in procedures:}
../singular_texi/reference.tex(,7805) All changes of the basering by a definition of a new ring or a
../singular_texi/reference.tex(,7806) @code{setring} command in a procedure are local to this procedure.  Use
../singular_texi/reference.tex(,7807) @code{keepring} to move a ring, which is local to a procedure, up by one
../singular_texi/reference.tex(,7808) nesting level.
../singular_texi/reference.tex(,7809) 
../singular_texi/reference.tex(,7810) @end table
../singular_texi/reference.tex(,7811) @c inserted refs from reference.doc:5315
../singular_texi/reference.tex(,7821) See
../singular_texi/reference.tex(,7822) @ref{keepring};
../singular_texi/reference.tex(,7823) @ref{qring};
../singular_texi/reference.tex(,7824) @ref{ring}.
../singular_texi/reference.tex(,7826) @c end inserted refs from reference.doc:5315
../singular_texi/reference.tex(,7827) @c ---------------------------------------
../singular_texi/reference.tex(,7828) @node simplex, simplify, setring, Functions
../singular_texi/reference.tex(,7829) @subsection simplex
../singular_texi/reference.tex(,7830) @cindex simplex
../singular_texi/reference.tex(,7831) @table @code
../singular_texi/reference.tex(,7832) @item @strong{Syntax:}
../singular_texi/reference.tex(,7833) @code{simplex (} matrix_expression@code{,} int_expression@code{,} 
../singular_texi/reference.tex(,7834) int_expression@code{,} int_expression@code{,} int_expression@code{,} 
../singular_texi/reference.tex(,7835) int_expression@code{)}
../singular_texi/reference.tex(,7836) @item @strong{Type:}
../singular_texi/reference.tex(,7837) list
../singular_texi/reference.tex(,7838) @item @strong{Purpose:}
../singular_texi/reference.tex(,7839) perform the simplex algorithm for the tableau given by the input, e.g.
../singular_texi/reference.tex(,7840) M,m,n,m1,m2,m3: 
../singular_texi/reference.tex(,7841) 
../singular_texi/reference.tex(,7842) @table @asis
../singular_texi/reference.tex(,7843) @item  M matrix of numbers : 
../singular_texi/reference.tex(,7844)      first row describing the objective function (maximize problem), 
../singular_texi/reference.tex(,7845)      the remaining rows describing constraints; 
../singular_texi/reference.tex(,7846) @item  m,n,m1,m2,m3 int :
../singular_texi/reference.tex(,7847)      n = number of variables; 
../singular_texi/reference.tex(,7848)      m = total number of constraints; 
../singular_texi/reference.tex(,7849)      m1 = number of <=constraints (rows 2 ... m1+1 of M); 
../singular_texi/reference.tex(,7850)      m2 = number of >=constraints (rows m1+2 ... m1+m2+1 of M); 
../singular_texi/reference.tex(,7851)      m3 = number of == constraints.
../singular_texi/reference.tex(,7852) @end table 
../singular_texi/reference.tex(,7853) 
../singular_texi/reference.tex(,7854) The following assumptions are made: 
../singular_texi/reference.tex(,7855) @table @asis
../singular_texi/reference.tex(,7856) @item   * ground field is of type @code{(real,N)}, N>=4; 
../singular_texi/reference.tex(,7857) @item   * the matrix M is of size m x n; 
../singular_texi/reference.tex(,7858) @item   * m=m1+m2+m3;
../singular_texi/reference.tex(,7859) @item   * the entries M[2,1] ,..., M[m+1,1] are non-negative;
../singular_texi/reference.tex(,7860) @item   * the variables x(i) are non-negative;
../singular_texi/reference.tex(,7861) @item   * a row  b, a(1) ,..., a(n)  corresponds to  b+a(1)x(1)+...+a(n)x(n);
../singular_texi/reference.tex(,7862) @item   * for a <=, >=, or == constraint: add "in mind" >=0, <=0, or ==0.
../singular_texi/reference.tex(,7863) @end table   
../singular_texi/reference.tex(,7864) 
../singular_texi/reference.tex(,7865) The output is a list L with 
../singular_texi/reference.tex(,7866) @table @asis
../singular_texi/reference.tex(,7867) @item * L[1] = matrix
../singular_texi/reference.tex(,7868) @item * L[2] = int: 
../singular_texi/reference.tex(,7869)     0 = finite solution found;  1 = unbounded;  -1 = no solution;  
../singular_texi/reference.tex(,7870)    -2 = error occured;
../singular_texi/reference.tex(,7871) @item * L[3] = intvec :  
../singular_texi/reference.tex(,7872)    L[3][k] = number of variable which corresponds to row k+1 of L[1];             
../singular_texi/reference.tex(,7873) @item * L[4] = intvec :  
../singular_texi/reference.tex(,7874)    L[4][j] = number of variable which is represented by column j+1 of L[1] 
../singular_texi/reference.tex(,7875)    ("non-basis variable");
../singular_texi/reference.tex(,7876) @item * L[5] = int :  
../singular_texi/reference.tex(,7877)    number of constraints (= m);
../singular_texi/reference.tex(,7878) @item * L[6] = int :  
../singular_texi/reference.tex(,7879)    number of variables (= n).
../singular_texi/reference.tex(,7880) @end table
../singular_texi/reference.tex(,7881) 
../singular_texi/reference.tex(,7882) The solution can be read from the first column of L[1] as is done by the 
../singular_texi/reference.tex(,7883) procedure @ref{simplexOut} in @code{solve.lib}. 
../singular_texi/reference.tex(,7884) 
../singular_texi/reference.tex(,7885) @item @strong{Example:}
../singular_texi/reference.tex(,7886) @smallexample
../singular_texi/reference.tex(,7887) @c reused example simplex reference.doc:5381 
../singular_texi/reference.tex(,7888)     ring r = (real,10),(x),lp;
../singular_texi/reference.tex(,7889) 
../singular_texi/reference.tex(,7890)     // consider the max. problem:
../singular_texi/reference.tex(,7891)     //
../singular_texi/reference.tex(,7892)     //    maximize  x(1) + x(2) + 3*x(3) - 0.5*x(4)
../singular_texi/reference.tex(,7893)     //
../singular_texi/reference.tex(,7894)     //  with constraints:   x(1) +          2*x(3)          <= 740
../singular_texi/reference.tex(,7895)     //                             2*x(2)          - 7*x(4) <=   0
../singular_texi/reference.tex(,7896)     //                               x(2) -   x(3) + 2*x(4) >=   0.5
../singular_texi/reference.tex(,7897)     //                      x(1) +   x(2) +   x(3) +   x(4)  =   9
../singular_texi/reference.tex(,7898)     //
../singular_texi/reference.tex(,7899)     matrix sm[5][5]=(  0, 1, 1, 3,-0.5,
../singular_texi/reference.tex(,7900)                      740,-1, 0,-2, 0,
../singular_texi/reference.tex(,7901)                        0, 0,-2, 0, 7,
../singular_texi/reference.tex(,7902)                      0.5, 0,-1, 1,-2,
../singular_texi/reference.tex(,7903)                        9,-1,-1,-1,-1);
../singular_texi/reference.tex(,7904) 
../singular_texi/reference.tex(,7905)     int n = 4;  // number of constraints
../singular_texi/reference.tex(,7906)     int m = 4;  // number of variables
../singular_texi/reference.tex(,7907)     int m1= 2;  // number of <= constraints
../singular_texi/reference.tex(,7908)     int m2= 1;  // number of >= constraints
../singular_texi/reference.tex(,7909)     int m3= 1;  // number of == constraints
../singular_texi/reference.tex(,7910)     simplex(sm, n, m, m1, m2, m3);
../singular_texi/reference.tex(,7911) @expansion{} [1]:
../singular_texi/reference.tex(,7912) @expansion{}    _[1,1]=17.025
../singular_texi/reference.tex(,7913) @expansion{}    _[1,2]=-0.95
../singular_texi/reference.tex(,7914) @expansion{}    _[1,3]=-0.05
../singular_texi/reference.tex(,7915) @expansion{}    _[1,4]=1.95
../singular_texi/reference.tex(,7916) @expansion{}    _[1,5]=-1.05
../singular_texi/reference.tex(,7917) @expansion{}    _[2,1]=730.55
../singular_texi/reference.tex(,7918) @expansion{}    _[2,2]=0.1
../singular_texi/reference.tex(,7919) @expansion{}    _[2,3]=-0.1
../singular_texi/reference.tex(,7920) @expansion{}    _[2,4]=-1.1
../singular_texi/reference.tex(,7921) @expansion{}    _[2,5]=0.9
../singular_texi/reference.tex(,7922) @expansion{}    _[3,1]=3.325
../singular_texi/reference.tex(,7923) @expansion{}    _[3,2]=-0.35
../singular_texi/reference.tex(,7924) @expansion{}    _[3,3]=-0.15
../singular_texi/reference.tex(,7925) @expansion{}    _[3,4]=0.35
../singular_texi/reference.tex(,7926) @expansion{}    _[3,5]=0.35
../singular_texi/reference.tex(,7927) @expansion{}    _[4,1]=0.95
../singular_texi/reference.tex(,7928) @expansion{}    _[4,2]=-0.1
../singular_texi/reference.tex(,7929) @expansion{}    _[4,3]=0.1
../singular_texi/reference.tex(,7930) @expansion{}    _[4,4]=0.1
../singular_texi/reference.tex(,7931) @expansion{}    _[4,5]=0.1
../singular_texi/reference.tex(,7932) @expansion{}    _[5,1]=4.725
../singular_texi/reference.tex(,7933) @expansion{}    _[5,2]=-0.55
../singular_texi/reference.tex(,7934) @expansion{}    _[5,3]=0.05
../singular_texi/reference.tex(,7935) @expansion{}    _[5,4]=0.55
../singular_texi/reference.tex(,7936) @expansion{}    _[5,5]=-0.45
../singular_texi/reference.tex(,7937) @expansion{} [2]:
../singular_texi/reference.tex(,7938) @expansion{}    0
../singular_texi/reference.tex(,7939) @expansion{} [3]:
../singular_texi/reference.tex(,7940) @expansion{}    5,2,4,3
../singular_texi/reference.tex(,7941) @expansion{} [4]:
../singular_texi/reference.tex(,7942) @expansion{}    1,6,8,7
../singular_texi/reference.tex(,7943) @expansion{} [5]:
../singular_texi/reference.tex(,7944) @expansion{}    4
../singular_texi/reference.tex(,7945) @expansion{} [6]:
../singular_texi/reference.tex(,7946) @expansion{}    4
../singular_texi/reference.tex(,7947) @c end example simplex reference.doc:5381
../singular_texi/reference.tex(,7948) @end smallexample
../singular_texi/reference.tex(,7949) @end table
../singular_texi/reference.tex(,7950) @c inserted refs from reference.doc:5408
../singular_texi/reference.tex(,7958) See
../singular_texi/reference.tex(,7959) @ref{simplexOut}.
../singular_texi/reference.tex(,7961) @c end inserted refs from reference.doc:5408
../singular_texi/reference.tex(,7962) @c ---------------------------------------
../singular_texi/reference.tex(,7963) @node simplify, size, simplex, Functions
../singular_texi/reference.tex(,7964) @subsection simplify
../singular_texi/reference.tex(,7965) @cindex simplify
../singular_texi/reference.tex(,7966) @table @code
../singular_texi/reference.tex(,7967) @item @strong{Syntax:}
../singular_texi/reference.tex(,7968) @code{simplify (} poly_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7969) @*@code{simplify (} vector_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7970) @*@code{simplify (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7971) @*@code{simplify (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,7972) @item @strong{Type:}
../singular_texi/reference.tex(,7973) the type of the first argument
../singular_texi/reference.tex(,7974) @item @strong{Purpose:}
../singular_texi/reference.tex(,7975) returns the "simplified" first argument depending on the simplification rule
../singular_texi/reference.tex(,7976) given as the second argument.
../singular_texi/reference.tex(,7977) The simplification rules are the sum of the following
../singular_texi/reference.tex(,7978) functions:
../singular_texi/reference.tex(,7979) @table @code
../singular_texi/reference.tex(,7980) @item 1
../singular_texi/reference.tex(,7981) normalize (make leading coefficients 1).
../singular_texi/reference.tex(,7982) @item 2
../singular_texi/reference.tex(,7983) erase zero generators/columns.
../singular_texi/reference.tex(,7984) @item 4
../singular_texi/reference.tex(,7985) keep only the first one of identical generators/columns.
../singular_texi/reference.tex(,7986) @item 8
../singular_texi/reference.tex(,7987) keep only the first one of generators/columns which differ only by a factor
../singular_texi/reference.tex(,7988) in the ground field.
../singular_texi/reference.tex(,7989) @item 16
../singular_texi/reference.tex(,7990) keep only those generators/columns whose leading monomials
../singular_texi/reference.tex(,7991) differ.
../singular_texi/reference.tex(,7992) @item 32
../singular_texi/reference.tex(,7993) keep only those generators/columns whose leading monomials are
../singular_texi/reference.tex(,7994) not divisible by other ones.
../singular_texi/reference.tex(,7995) @end table
../singular_texi/reference.tex(,7996) @item @strong{Example:}
../singular_texi/reference.tex(,7997) @smallexample
../singular_texi/reference.tex(,7998) @c reused example simplify reference.doc:5448 
../singular_texi/reference.tex(,7999) ring r=0,(x,y,z),(c,dp);
../singular_texi/reference.tex(,8000) ideal i=0,2x,2x,4x,3x+y,5x2;
../singular_texi/reference.tex(,8001) simplify(i,1);
../singular_texi/reference.tex(,8002) @expansion{} _[1]=0
../singular_texi/reference.tex(,8003) @expansion{} _[2]=x
../singular_texi/reference.tex(,8004) @expansion{} _[3]=x
../singular_texi/reference.tex(,8005) @expansion{} _[4]=x
../singular_texi/reference.tex(,8006) @expansion{} _[5]=x+1/3y
../singular_texi/reference.tex(,8007) @expansion{} _[6]=x2
../singular_texi/reference.tex(,8008) simplify(i,2);
../singular_texi/reference.tex(,8009) @expansion{} _[1]=2x
../singular_texi/reference.tex(,8010) @expansion{} _[2]=2x
../singular_texi/reference.tex(,8011) @expansion{} _[3]=4x
../singular_texi/reference.tex(,8012) @expansion{} _[4]=3x+y
../singular_texi/reference.tex(,8013) @expansion{} _[5]=5x2
../singular_texi/reference.tex(,8014) simplify(i,4);
../singular_texi/reference.tex(,8015) @expansion{} _[1]=0
../singular_texi/reference.tex(,8016) @expansion{} _[2]=2x
../singular_texi/reference.tex(,8017) @expansion{} _[3]=4x
../singular_texi/reference.tex(,8018) @expansion{} _[4]=3x+y
../singular_texi/reference.tex(,8019) @expansion{} _[5]=5x2
../singular_texi/reference.tex(,8020) simplify(i,8);
../singular_texi/reference.tex(,8021) @expansion{} _[1]=0
../singular_texi/reference.tex(,8022) @expansion{} _[2]=2x
../singular_texi/reference.tex(,8023) @expansion{} _[3]=3x+y
../singular_texi/reference.tex(,8024) @expansion{} _[4]=5x2
../singular_texi/reference.tex(,8025) simplify(i,16);
../singular_texi/reference.tex(,8026) @expansion{} _[1]=0
../singular_texi/reference.tex(,8027) @expansion{} _[2]=2x
../singular_texi/reference.tex(,8028) @expansion{} _[3]=5x2
../singular_texi/reference.tex(,8029) simplify(i,32);
../singular_texi/reference.tex(,8030) @expansion{} _[1]=0
../singular_texi/reference.tex(,8031) @expansion{} _[2]=2x
../singular_texi/reference.tex(,8032) simplify(i,32+2+1);
../singular_texi/reference.tex(,8033) @expansion{} _[1]=x
../singular_texi/reference.tex(,8034) matrix A[2][3]=x,0,2x,y,0,2y;
../singular_texi/reference.tex(,8035) simplify(A,2+8); // by automatic conversion to module
../singular_texi/reference.tex(,8036) @expansion{} _[1]=[x,y]
../singular_texi/reference.tex(,8037) @c end example simplify reference.doc:5448
../singular_texi/reference.tex(,8038) @end smallexample
../singular_texi/reference.tex(,8039) @end table
../singular_texi/reference.tex(,8040) @c inserted refs from reference.doc:5463
../singular_texi/reference.tex(,8051) See
../singular_texi/reference.tex(,8052) @ref{ideal};
../singular_texi/reference.tex(,8053) @ref{module};
../singular_texi/reference.tex(,8054) @ref{poly};
../singular_texi/reference.tex(,8055) @ref{vector}.
../singular_texi/reference.tex(,8057) @c end inserted refs from reference.doc:5463
../singular_texi/reference.tex(,8058) @c ---------------------------------------
../singular_texi/reference.tex(,8059) @node size, sortvec, simplify, Functions
../singular_texi/reference.tex(,8060) @subsection size
../singular_texi/reference.tex(,8061) @cindex size
../singular_texi/reference.tex(,8062) @table @code
../singular_texi/reference.tex(,8063) @item @strong{Syntax:}
../singular_texi/reference.tex(,8064) @code{size (} string_expression @code{)}
../singular_texi/reference.tex(,8065) @*@code{size (} intvec_expression @code{)}
../singular_texi/reference.tex(,8066) @*@code{size (} intmat_expression @code{)}
../singular_texi/reference.tex(,8067) @*@code{size (} poly_expression @code{)}
../singular_texi/reference.tex(,8068) @*@code{size (} vector_expression @code{)}
../singular_texi/reference.tex(,8069) @*@code{size (} ideal_expression @code{)}
../singular_texi/reference.tex(,8070) @*@code{size (} module_expression @code{)}
../singular_texi/reference.tex(,8071) @*@code{size (} matrix_expression @code{)}
../singular_texi/reference.tex(,8072) @*@code{size (} list_expression @code{)}
../singular_texi/reference.tex(,8073) @*@code{size (} resolution_expression @code{)}
../singular_texi/reference.tex(,8074) @*@code{size (} ring_expression @code{)}
../singular_texi/reference.tex(,8075) @item @strong{Type:}
../singular_texi/reference.tex(,8076) int
../singular_texi/reference.tex(,8077) @item @strong{Purpose:}
../singular_texi/reference.tex(,8078) depends on the type of argument:
../singular_texi/reference.tex(,8079) @table @asis
../singular_texi/reference.tex(,8080) @item ideal or module
../singular_texi/reference.tex(,8081) returns the number of (non-zero) generators.
../singular_texi/reference.tex(,8082) @item string, intvec, list or resolution
../singular_texi/reference.tex(,8083) returns the length, i.e., the number of characters, entries or elements.
../singular_texi/reference.tex(,8084) @item poly or vector
../singular_texi/reference.tex(,8085) returns the number of monomials.
../singular_texi/reference.tex(,8086) @item matrix or intmat
../singular_texi/reference.tex(,8087) returns the number of entries (rows*columns).
../singular_texi/reference.tex(,8088) @item ring
../singular_texi/reference.tex(,8089) returns the number of elements in the ground field
../singular_texi/reference.tex(,8090) (for Z/p and algebraic extensions) or -1
../singular_texi/reference.tex(,8091) @end table
../singular_texi/reference.tex(,8092) @item @strong{Example:}
../singular_texi/reference.tex(,8093) @smallexample
../singular_texi/reference.tex(,8094) @c reused example size reference.doc:5506 
../singular_texi/reference.tex(,8095)   string s="hello";
../singular_texi/reference.tex(,8096)   size(s);
../singular_texi/reference.tex(,8097) @expansion{} 5
../singular_texi/reference.tex(,8098)   intvec iv=1,2;
../singular_texi/reference.tex(,8099)   size(iv);
../singular_texi/reference.tex(,8100) @expansion{} 2
../singular_texi/reference.tex(,8101)   ring r=0,(x,y,z),lp;
../singular_texi/reference.tex(,8102)   poly f=x+y+z;
../singular_texi/reference.tex(,8103)   size(f);
../singular_texi/reference.tex(,8104) @expansion{} 3
../singular_texi/reference.tex(,8105)   vector v=[x+y,0,0,1];
../singular_texi/reference.tex(,8106)   size(v);
../singular_texi/reference.tex(,8107) @expansion{} 3
../singular_texi/reference.tex(,8108)   ideal i=f,y;
../singular_texi/reference.tex(,8109)   size(i);
../singular_texi/reference.tex(,8110) @expansion{} 2
../singular_texi/reference.tex(,8111)   module m=v,[0,1],[0,0,1],2*v;
../singular_texi/reference.tex(,8112)   size(m);
../singular_texi/reference.tex(,8113) @expansion{} 4
../singular_texi/reference.tex(,8114)   matrix mm[2][2];
../singular_texi/reference.tex(,8115)   size(mm);
../singular_texi/reference.tex(,8116) @expansion{} 4
../singular_texi/reference.tex(,8117)   ring r1=(2,a),x,dp;
../singular_texi/reference.tex(,8118)   minpoly=a4+a+1;
../singular_texi/reference.tex(,8119)   size(r1);
../singular_texi/reference.tex(,8120) @expansion{} 8
../singular_texi/reference.tex(,8121) @c end example size reference.doc:5506
../singular_texi/reference.tex(,8122) @end smallexample
../singular_texi/reference.tex(,8123) @end table
../singular_texi/reference.tex(,8124) @c inserted refs from reference.doc:5528
../singular_texi/reference.tex(,8140) See
../singular_texi/reference.tex(,8141) @ref{ideal};
../singular_texi/reference.tex(,8142) @ref{intmat};
../singular_texi/reference.tex(,8143) @ref{intvec};
../singular_texi/reference.tex(,8144) @ref{module};
../singular_texi/reference.tex(,8145) @ref{ncols};
../singular_texi/reference.tex(,8146) @ref{nrows};
../singular_texi/reference.tex(,8147) @ref{poly};
../singular_texi/reference.tex(,8148) @ref{string};
../singular_texi/reference.tex(,8149) @ref{vector}.
../singular_texi/reference.tex(,8151) @c end inserted refs from reference.doc:5528
../singular_texi/reference.tex(,8152) @c ---------------------------------------
../singular_texi/reference.tex(,8153) @node sortvec, sprintf, size, Functions
../singular_texi/reference.tex(,8154) @subsection sortvec
../singular_texi/reference.tex(,8155) @cindex sortvec
../singular_texi/reference.tex(,8156) @table @code
../singular_texi/reference.tex(,8157) @item @strong{Syntax:}
../singular_texi/reference.tex(,8158) @code{sortvec (} ideal_expression @code{)}
../singular_texi/reference.tex(,8159) @*@code{sortvec (} module_expression @code{)}
../singular_texi/reference.tex(,8160) @item @strong{Type:}
../singular_texi/reference.tex(,8161) intvec
../singular_texi/reference.tex(,8162) @item @strong{Purpose:}
../singular_texi/reference.tex(,8163) @tex
../singular_texi/reference.tex(,8164) computes the permutation {\tt v}
../singular_texi/reference.tex(,8165) which orders the ideal, resp.\ module, {\tt I} by its initial terms,
../singular_texi/reference.tex(,8166) starting with the smallest, that is, {\tt I(v[i]) < I(v[i+1])} for all
../singular_texi/reference.tex(,8167) {\tt i}.
../singular_texi/reference.tex(,8168) @end tex
../singular_texi/reference.tex(,8175) @item @strong{Example:}
../singular_texi/reference.tex(,8176) @smallexample
../singular_texi/reference.tex(,8177) @c reused example sortvec reference.doc:5565 
../singular_texi/reference.tex(,8178)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,8179)   ideal I=y,z,x,x3,xz;
../singular_texi/reference.tex(,8180)   sortvec(I);
../singular_texi/reference.tex(,8181) @expansion{} 2,1,3,5,4
../singular_texi/reference.tex(,8182) @c end example sortvec reference.doc:5565
../singular_texi/reference.tex(,8183) @end smallexample
../singular_texi/reference.tex(,8184) @end table
../singular_texi/reference.tex(,8185) @c inserted refs from reference.doc:5572
../singular_texi/reference.tex(,8193) See
../singular_texi/reference.tex(,8194) @ref{general_lib}.
../singular_texi/reference.tex(,8196) @c end inserted refs from reference.doc:5572
../singular_texi/reference.tex(,8197) @c ---------------------------------------
../singular_texi/reference.tex(,8198) @node sprintf, sres, sortvec, Functions
../singular_texi/reference.tex(,8199) @subsection sprintf
../singular_texi/reference.tex(,8200) @cindex sprintf
../singular_texi/reference.tex(,8201) @c start include of docu for standard.lib:sprintf
../singular_texi/reference.tex(,8202) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,8203) @c ---content sprintf---
../singular_texi/reference.tex(,8204) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,8205) 
../singular_texi/reference.tex(,8206) @table @asis
../singular_texi/reference.tex(,8207) @item @strong{Syntax:}
../singular_texi/reference.tex(,8208) @code{sprintf (} string_expression @code{[,} any_expressions
../singular_texi/reference.tex(,8209) @code{] )}
../singular_texi/reference.tex(,8210) 
../singular_texi/reference.tex(,8211) @item @strong{Return:}
../singular_texi/reference.tex(,8212) string
../singular_texi/reference.tex(,8213) 
../singular_texi/reference.tex(,8214) @item @strong{Purpose:}
../singular_texi/reference.tex(,8215) @code{sprintf(fmt,...);} performs output formatting. The first
../singular_texi/reference.tex(,8216) argument is a format control string. Additional arguments may be
../singular_texi/reference.tex(,8217) required, depending on the content of the control string. A series
../singular_texi/reference.tex(,8218) of output characters is generated as directed by the control string;
../singular_texi/reference.tex(,8219) these characters are returned as a string. @*
../singular_texi/reference.tex(,8220) The control string @code{fmt} is simply text to be copied,
../singular_texi/reference.tex(,8221) except that the string may contain conversion specifications.@*
../singular_texi/reference.tex(,8222) Do @code{help print;} for a listing of valid conversion
../singular_texi/reference.tex(,8223) specifications. As an addition to the conversions of @code{print},
../singular_texi/reference.tex(,8224) the @code{%n} and @code{%2} conversion specification does not
../singular_texi/reference.tex(,8225) consume an additional argument, but simply generates a newline
../singular_texi/reference.tex(,8226) character.
../singular_texi/reference.tex(,8227) 
../singular_texi/reference.tex(,8228) @item @strong{Note:}
../singular_texi/reference.tex(,8229) If one of the additional arguments is a list, then it should be
../singular_texi/reference.tex(,8230) enclosed once more into a @code{list()} command, since passing a list
../singular_texi/reference.tex(,8231) as an argument flattens the list by one level.
../singular_texi/reference.tex(,8232) 
../singular_texi/reference.tex(,8233) @end table
../singular_texi/reference.tex(,8234) @strong{Example:}
../singular_texi/reference.tex(,8235) @smallexample
../singular_texi/reference.tex(,8236) @c reused example sprintf d2t_singular/standard_lib.doc:335 
../singular_texi/reference.tex(,8237)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,8238) module m=[1,y],[0,x+z];
../singular_texi/reference.tex(,8239) intmat M=betti(mres(m,0));
../singular_texi/reference.tex(,8240) list l = r, m, M;
../singular_texi/reference.tex(,8241) string s = sprintf("s:%s,%n l:%l", 1, 2); s;
../singular_texi/reference.tex(,8242) @expansion{} s:1,
../singular_texi/reference.tex(,8243) @expansion{}  l:int(2)
../singular_texi/reference.tex(,8244) s = sprintf("s:%n%s", l); s;
../singular_texi/reference.tex(,8245) @expansion{} s:
../singular_texi/reference.tex(,8246) @expansion{} (0),(x,y,z),(dp(3),C)
../singular_texi/reference.tex(,8247) s = sprintf("s:%2%s", list(l)); s;
../singular_texi/reference.tex(,8248) @expansion{} s:
../singular_texi/reference.tex(,8249) @expansion{} (0),(x,y,z),(dp(3),C),y*gen(2)+gen(1),x*gen(2)+z*gen(2),1,1 
../singular_texi/reference.tex(,8250) s = sprintf("2l:%n%2l", list(l)); s;
../singular_texi/reference.tex(,8251) @expansion{} 2l:
../singular_texi/reference.tex(,8252) @expansion{} list("(0),(x,y,z),(dp(3),C)",
../singular_texi/reference.tex(,8253) @expansion{} module(y*gen(2)+gen(1),
../singular_texi/reference.tex(,8254) @expansion{} x*gen(2)+z*gen(2)),
../singular_texi/reference.tex(,8255) @expansion{} intmat(intvec(1,1 ),1,2))
../singular_texi/reference.tex(,8256) @expansion{} 
../singular_texi/reference.tex(,8257) s = sprintf("%p", list(l)); s;
../singular_texi/reference.tex(,8258) @expansion{} [1]:
../singular_texi/reference.tex(,8259) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,8260) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,8261) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,8262) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,8263) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,8264) @expansion{} [2]:
../singular_texi/reference.tex(,8265) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,8266) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,8267) @expansion{} [3]:
../singular_texi/reference.tex(,8268) @expansion{}    1,1 
../singular_texi/reference.tex(,8269) @expansion{} 
../singular_texi/reference.tex(,8270) s = sprintf("%;", list(l)); s;
../singular_texi/reference.tex(,8271) @expansion{} [1]:
../singular_texi/reference.tex(,8272) @expansion{}    //   characteristic : 0
../singular_texi/reference.tex(,8273) @expansion{} //   number of vars : 3
../singular_texi/reference.tex(,8274) @expansion{} //        block   1 : ordering dp
../singular_texi/reference.tex(,8275) @expansion{} //                  : names    x y z 
../singular_texi/reference.tex(,8276) @expansion{} //        block   2 : ordering C
../singular_texi/reference.tex(,8277) @expansion{} [2]:
../singular_texi/reference.tex(,8278) @expansion{}    _[1]=y*gen(2)+gen(1)
../singular_texi/reference.tex(,8279) @expansion{}    _[2]=x*gen(2)+z*gen(2)
../singular_texi/reference.tex(,8280) @expansion{} [3]:
../singular_texi/reference.tex(,8281) @expansion{}    1,1 
../singular_texi/reference.tex(,8282) @expansion{} 
../singular_texi/reference.tex(,8283) s = sprintf("%b", M); s;
../singular_texi/reference.tex(,8284) @expansion{}            0     1
../singular_texi/reference.tex(,8285) @expansion{} ------------------
../singular_texi/reference.tex(,8286) @expansion{}     0:     1     1
../singular_texi/reference.tex(,8287) @expansion{} ------------------
../singular_texi/reference.tex(,8288) @expansion{} total:     1     1
../singular_texi/reference.tex(,8289) @expansion{} 
../singular_texi/reference.tex(,8290) @c end example sprintf d2t_singular/standard_lib.doc:335
../singular_texi/reference.tex(,8291) @end smallexample
../singular_texi/reference.tex(,8292) @c inserted refs from d2t_singular/standard_lib.doc:349
../singular_texi/reference.tex(,8303) @strong{See also:}
../singular_texi/reference.tex(,8304) @ref{fprintf};
../singular_texi/reference.tex(,8305) @ref{print};
../singular_texi/reference.tex(,8306) @ref{printf};
../singular_texi/reference.tex(,8307) @ref{string}.
../singular_texi/reference.tex(,8309) @c end inserted refs from d2t_singular/standard_lib.doc:349
../singular_texi/reference.tex(,8310) 
../singular_texi/reference.tex(,8311) @c ---end content sprintf---
../singular_texi/reference.tex(,8312) @c generated lib proc docu for standard.lib:sprintf reference.doc:5580 
../singular_texi/reference.tex(,8313) @c end include of docu for standard.lib:sprintf
../singular_texi/reference.tex(,8314) 
../singular_texi/reference.tex(,8315) @c ---------------------------------------
../singular_texi/reference.tex(,8316) @node sres, status, sprintf, Functions
../singular_texi/reference.tex(,8317) @subsection sres
../singular_texi/reference.tex(,8318) @cindex sres
../singular_texi/reference.tex(,8319) @table @code
../singular_texi/reference.tex(,8320) @item @strong{Syntax:}
../singular_texi/reference.tex(,8321) @code{sres (} ideal_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,8322) @*@code{sres (} module_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,8323) @item @strong{Type:}
../singular_texi/reference.tex(,8324) resolution
../singular_texi/reference.tex(,8325) @item @strong{Purpose:}
../singular_texi/reference.tex(,8326) computes a free resolution of an ideal or module with Schreyer's
../singular_texi/reference.tex(,8327) method. The ideal, resp.@: module, has to be a standard basis.
../singular_texi/reference.tex(,8328) More precisely, let M be given by a standard basis and
../singular_texi/reference.tex(,8329) @tex
../singular_texi/reference.tex(,8330) $A_1={\tt matrix}(M)$.
../singular_texi/reference.tex(,8331) @end tex
../singular_texi/reference.tex(,8335) Then @code{sres}
../singular_texi/reference.tex(,8336) computes a free resolution of
../singular_texi/reference.tex(,8344) @tex
../singular_texi/reference.tex(,8345) $coker(A_1)=F_0/M$
../singular_texi/reference.tex(,8346) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1 \buildrel{A_1}\over{\longrightarrow} F_0\longrightarrow F_0/M\longrightarrow 0.$$
../singular_texi/reference.tex(,8347) @end tex
../singular_texi/reference.tex(,8348) If the int expression k is not zero then the computation stops after k steps
../singular_texi/reference.tex(,8349) and returns a list of modules (given by standard bases)
../singular_texi/reference.tex(,8350) @tex
../singular_texi/reference.tex(,8351) $M_i={\tt module}(A_i)$, i=1..k.
../singular_texi/reference.tex(,8352) @end tex
../singular_texi/reference.tex(,8356) @*@code{sres(M,0)}
../singular_texi/reference.tex(,8357) returns a list of n modules where n is the number of variables of the basering.
../singular_texi/reference.tex(,8358) 
../singular_texi/reference.tex(,8359) Even if @code{sres} does not compute a minimal resolution, the @code{betti}
../singular_texi/reference.tex(,8360) command gives the true betti numbers! In many cases of interest
../singular_texi/reference.tex(,8361) @code{sres} is much faster than any other known method.
../singular_texi/reference.tex(,8362) Let @code{list L=sres(M,0);} then @code{L[1]=M} is identical to the input,
../singular_texi/reference.tex(,8363) @code{L[2]} is a standard basis with respect to the Schreyer ordering of
../singular_texi/reference.tex(,8364) the first syzygy
../singular_texi/reference.tex(,8365) module of @code{L[1]}, etc.
../singular_texi/reference.tex(,8369) @tex
../singular_texi/reference.tex(,8370) (${\tt L[i]}=M_i$
../singular_texi/reference.tex(,8371) @end tex
../singular_texi/reference.tex(,8372)  in the notations from above.)
../singular_texi/reference.tex(,8373) @item @strong{Note:}
../singular_texi/reference.tex(,8374) Accessing single elements of a resolution may require that some partial
../singular_texi/reference.tex(,8375) computations have to be finished and may therefore take some time.
../singular_texi/reference.tex(,8376) @item @strong{Example:}
../singular_texi/reference.tex(,8377) @smallexample
../singular_texi/reference.tex(,8378) @c reused example sres reference.doc:5645 
../singular_texi/reference.tex(,8379)   ring r=31991,(t,x,y,z,w),ls;
../singular_texi/reference.tex(,8380)   ideal M=t2x2+tx2y+x2yz,t2y2+ty2z+y2zw,
../singular_texi/reference.tex(,8381)           t2z2+tz2w+xz2w,t2w2+txw2+xyw2;
../singular_texi/reference.tex(,8382)   M=std(M);
../singular_texi/reference.tex(,8383)   resolution L=sres(M,0);
../singular_texi/reference.tex(,8384)   L;
../singular_texi/reference.tex(,8385) @expansion{}  1      35      141      209      141      43      4      
../singular_texi/reference.tex(,8386) @expansion{} r <--  r <--   r <--    r <--    r <--    r <--   r
../singular_texi/reference.tex(,8387) @expansion{} 
../singular_texi/reference.tex(,8388) @expansion{} 0      1       2        3        4        5       6      
../singular_texi/reference.tex(,8389) @expansion{} resolution not minimized yet
../singular_texi/reference.tex(,8390) @expansion{} 
../singular_texi/reference.tex(,8391)   print(betti(L),"betti");
../singular_texi/reference.tex(,8392) @expansion{}            0     1     2     3     4     5
../singular_texi/reference.tex(,8393) @expansion{} ------------------------------------------
../singular_texi/reference.tex(,8394) @expansion{}     0:     1     -     -     -     -     -
../singular_texi/reference.tex(,8395) @expansion{}     1:     -     -     -     -     -     -
../singular_texi/reference.tex(,8396) @expansion{}     2:     -     -     -     -     -     -
../singular_texi/reference.tex(,8397) @expansion{}     3:     -     4     -     -     -     -
../singular_texi/reference.tex(,8398) @expansion{}     4:     -     -     -     -     -     -
../singular_texi/reference.tex(,8399) @expansion{}     5:     -     -     -     -     -     -
../singular_texi/reference.tex(,8400) @expansion{}     6:     -     -     6     -     -     -
../singular_texi/reference.tex(,8401) @expansion{}     7:     -     -     9    16     2     -
../singular_texi/reference.tex(,8402) @expansion{}     8:     -     -     -     2     5     1
../singular_texi/reference.tex(,8403) @expansion{} ------------------------------------------
../singular_texi/reference.tex(,8404) @expansion{} total:     1     4    15    18     7     1
../singular_texi/reference.tex(,8405) @c end example sres reference.doc:5645
../singular_texi/reference.tex(,8406) @end smallexample
../singular_texi/reference.tex(,8407) @end table
../singular_texi/reference.tex(,8408) @c inserted refs from reference.doc:5656
../singular_texi/reference.tex(,8425) See
../singular_texi/reference.tex(,8426) @ref{betti};
../singular_texi/reference.tex(,8427) @ref{hres};
../singular_texi/reference.tex(,8428) @ref{ideal};
../singular_texi/reference.tex(,8429) @ref{int};
../singular_texi/reference.tex(,8430) @ref{lres};
../singular_texi/reference.tex(,8431) @ref{minres};
../singular_texi/reference.tex(,8432) @ref{module};
../singular_texi/reference.tex(,8433) @ref{mres};
../singular_texi/reference.tex(,8434) @ref{res};
../singular_texi/reference.tex(,8435) @ref{syz}.
../singular_texi/reference.tex(,8437) @c end inserted refs from reference.doc:5656
../singular_texi/reference.tex(,8438) @c ---------------------------------------
../singular_texi/reference.tex(,8439) @node status, std, sres, Functions
../singular_texi/reference.tex(,8440) @subsection status
../singular_texi/reference.tex(,8441) @cindex status
../singular_texi/reference.tex(,8442) @cindex sleep
../singular_texi/reference.tex(,8443) @cindex suspend
../singular_texi/reference.tex(,8444) @table @code
../singular_texi/reference.tex(,8445) @item @strong{Syntax:}
../singular_texi/reference.tex(,8446) @code{status (} link_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,8447) @item @strong{Type:}
../singular_texi/reference.tex(,8448) string
../singular_texi/reference.tex(,8449) @item @strong{Syntax:}
../singular_texi/reference.tex(,8450) @code{status (} link_expression@code{,} string_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,8451) @*@code{status (} link_expression@code{,} string_expression@code{,} string_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,8452) @item @strong{Type:}
../singular_texi/reference.tex(,8453) int
../singular_texi/reference.tex(,8454) @item @strong{Purpose:}
../singular_texi/reference.tex(,8455) returns the status of the link as asked for by the second argument.  If
../singular_texi/reference.tex(,8456) a third argument is given, the result of the comparison to the status
../singular_texi/reference.tex(,8457) string is returned: @code{(status(l,s1)==s2)} is equivalent to
../singular_texi/reference.tex(,8458) @code{status(l,s1,s2)}.  If a fourth integer argument (say, @code{i}) is
../singular_texi/reference.tex(,8459) given and if @code{status(l,s1,s2)} yields @code{0}, then the execution
../singular_texi/reference.tex(,8460) of the current process is suspended (the process is put to ``sleep'')
../singular_texi/reference.tex(,8461) for approximately@: @code{i} microseconds, and afterwards the result of another
../singular_texi/reference.tex(,8462) call to @code{status(l,s1,s2)} is returned. The latter is useful for
../singular_texi/reference.tex(,8463) ``polling'' the @code{read} status of MPtcp links such that busy
../singular_texi/reference.tex(,8464) loops are avoided (see @ref{Parallelization with MPtcp links} for an
../singular_texi/reference.tex(,8465) example).  Note that on some systems, the minimum time for a process to
../singular_texi/reference.tex(,8466) be put to sleep is one second.
../singular_texi/reference.tex(,8467) @*The following string expressions are allowed:
../singular_texi/reference.tex(,8468) @table @code
../singular_texi/reference.tex(,8469) @item @code{"name"}
../singular_texi/reference.tex(,8470) the name string given by the definition of the link (usually the filename)
../singular_texi/reference.tex(,8471) @item @code{"type"}
../singular_texi/reference.tex(,8472) returns @code{"ASCII"}, @code{"MPfile"}, @code{"MPtcp"} or @code{"DBM"}
../singular_texi/reference.tex(,8473) @item @code{"open"}
../singular_texi/reference.tex(,8474) returns @code{"yes"} or @code{"no"}
../singular_texi/reference.tex(,8475) @item @code{"openread"}
../singular_texi/reference.tex(,8476) returns @code{"yes"} or @code{"no"}
../singular_texi/reference.tex(,8477) @item @code{"openwrite"}
../singular_texi/reference.tex(,8478) returns @code{"yes"} or @code{"no"}
../singular_texi/reference.tex(,8479) @item @code{"read"}
../singular_texi/reference.tex(,8480) returns @code{"ready"} or @code{"not ready"}
../singular_texi/reference.tex(,8481) @item @code{"write"}
../singular_texi/reference.tex(,8482) returns @code{"ready"} or @code{"not ready"}
../singular_texi/reference.tex(,8483) @item @code{"mode"}
../singular_texi/reference.tex(,8484) returns (depending on the type of the link and its status)
../singular_texi/reference.tex(,8485) @code{"","w","a","r"} or @code{"rw"}
../singular_texi/reference.tex(,8486) @end table
../singular_texi/reference.tex(,8487) @item @strong{Example:}
../singular_texi/reference.tex(,8488) @smallexample
../singular_texi/reference.tex(,8489) @c reused example status reference.doc:5720 
../singular_texi/reference.tex(,8490)   link l=":w example.txt";
../singular_texi/reference.tex(,8491)   status(l,"write");
../singular_texi/reference.tex(,8492) @expansion{} not ready
../singular_texi/reference.tex(,8493)   open(l);
../singular_texi/reference.tex(,8494)   status(l,"write","ready");
../singular_texi/reference.tex(,8495) @expansion{} 1
../singular_texi/reference.tex(,8496)   close(l);
../singular_texi/reference.tex(,8497) @c end example status reference.doc:5720
../singular_texi/reference.tex(,8498) @end smallexample
../singular_texi/reference.tex(,8499) @end table
../singular_texi/reference.tex(,8500) @c inserted refs from reference.doc:5729
../singular_texi/reference.tex(,8511) See
../singular_texi/reference.tex(,8512) @ref{link};
../singular_texi/reference.tex(,8513) @ref{open};
../singular_texi/reference.tex(,8514) @ref{read};
../singular_texi/reference.tex(,8515) @ref{write}.
../singular_texi/reference.tex(,8517) @c end inserted refs from reference.doc:5729
../singular_texi/reference.tex(,8518) @c ---------------------------------------
../singular_texi/reference.tex(,8519) @node std, stdfglm, status, Functions
../singular_texi/reference.tex(,8520) @subsection std
../singular_texi/reference.tex(,8521) @cindex std
../singular_texi/reference.tex(,8522) @table @code
../singular_texi/reference.tex(,8523) @item @strong{Syntax:}
../singular_texi/reference.tex(,8524) @code{std (} ideal_expression@code{)}
../singular_texi/reference.tex(,8525) @*@code{std (} module_expression@code{)}
../singular_texi/reference.tex(,8526) @*@code{std (} ideal_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,8527) @*@code{std (} module_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,8528) @*@code{std (} ideal_expression@code{,} intvec_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,8529) @*@code{std (} module_expression@code{,} intvec_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,8530) @*@code{std (} ideal_expression@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,8531) @*@code{std (} module_expression@code{,} vector_expression @code{)}
../singular_texi/reference.tex(,8532) @item @strong{Type:}
../singular_texi/reference.tex(,8533) ideal or module
../singular_texi/reference.tex(,8534) @item @strong{Purpose:}
../singular_texi/reference.tex(,8535) returns a standard basis of an ideal or module with respect to the
../singular_texi/reference.tex(,8536) monomial ordering of the basering.
../singular_texi/reference.tex(,8537) A standard basis is a set of generators such that
../singular_texi/reference.tex(,8538) the leading terms generate the leading ideal, resp.@: module.
../singular_texi/reference.tex(,8539) @*Use an optional
../singular_texi/reference.tex(,8540) second argument of type intvec as Hilbert series
../singular_texi/reference.tex(,8541) (result of @code{hilb(i,1)}, see @ref{hilb}),
../singular_texi/reference.tex(,8542) if the ideal, resp.@: module, is homogeneous
../singular_texi/reference.tex(,8543) (Hilbert driven standard basis computation, @ref{stdhilb}).
../singular_texi/reference.tex(,8544) If the ideal is quasihomogeneous with some weights w and if the Hilbert series
../singular_texi/reference.tex(,8545) is computed w.r.t.@: to these weights, then use w as third argument.
../singular_texi/reference.tex(,8546) @*Use an optional second argument of type poly, resp.@: vector,
../singular_texi/reference.tex(,8547) to construct the standard basis from an already computed one (given as the
../singular_texi/reference.tex(,8548) first argument) and one additional generator (the second argument).
../singular_texi/reference.tex(,8549) @item @strong{Note:}
../singular_texi/reference.tex(,8550) The
../singular_texi/reference.tex(,8551) standard basis is computed with a (more or less) straight-forward
../singular_texi/reference.tex(,8552) implementation of the classical
../singular_texi/reference.tex(,8553) Buchberger (resp.@: Mora) algorithm. For global orderings, use the
../singular_texi/reference.tex(,8554) @code{groebner} command instead (@pxref{groebner}), which heuristically
../singular_texi/reference.tex(,8555) chooses the "best" algorithm to compute a Groebner basis.
../singular_texi/reference.tex(,8556) @*To view the progress of long running computations, use
../singular_texi/reference.tex(,8557) @code{option(prot)} (see @ref{option(prot)}).
../singular_texi/reference.tex(,8558) 
../singular_texi/reference.tex(,8559) @item @strong{Example:}
../singular_texi/reference.tex(,8560) @smallexample
../singular_texi/reference.tex(,8561) @c reused example std reference.doc:5779 
../singular_texi/reference.tex(,8562)   // local computation
../singular_texi/reference.tex(,8563)   ring r=32003,(x,y,z),ds;
../singular_texi/reference.tex(,8564)   poly s1=1x2y+151xyz10+169y21;
../singular_texi/reference.tex(,8565)   poly s2=1xz14+6x2y4+3z24;
../singular_texi/reference.tex(,8566)   poly s3=5y10z10x+2y20z10+y10z20+11x3;
../singular_texi/reference.tex(,8567)   ideal i=s1,s2,s3;
../singular_texi/reference.tex(,8568)   ideal j=std(i);
../singular_texi/reference.tex(,8569)   degree(j);
../singular_texi/reference.tex(,8570) @expansion{} 0
../singular_texi/reference.tex(,8571)   // Hilbert driven elimination (standard)
../singular_texi/reference.tex(,8572)   ring rhom=32003,(x,y,z,h),dp;
../singular_texi/reference.tex(,8573)   ideal i=homog(imap(r,i),h);
../singular_texi/reference.tex(,8574)   ideal j=std(i);
../singular_texi/reference.tex(,8575)   intvec iv=hilb(j,1);
../singular_texi/reference.tex(,8576)   ring rlex=32003,(x,y,z,h),lp;
../singular_texi/reference.tex(,8577)   ideal i=fetch(rhom,i);
../singular_texi/reference.tex(,8578)   ideal j=std(i,iv);
../singular_texi/reference.tex(,8579)   j=subst(j,h,1);
../singular_texi/reference.tex(,8580)   j[1];
../singular_texi/reference.tex(,8581) @expansion{} z64
../singular_texi/reference.tex(,8582)   // Hilbert driven elimination (ideal is quasihomogeneous)
../singular_texi/reference.tex(,8583)   intvec w=10,1,1;
../singular_texi/reference.tex(,8584)   ring whom=32003,(x,y,z),wp(w);
../singular_texi/reference.tex(,8585)   ideal i=fetch(r,i);
../singular_texi/reference.tex(,8586)   ideal j=std(i);
../singular_texi/reference.tex(,8587)   intvec iw=hilb(j,1,w);
../singular_texi/reference.tex(,8588)   ring wlex=32003,(x,y,z),lp;
../singular_texi/reference.tex(,8589)   ideal i=fetch(whom,i);
../singular_texi/reference.tex(,8590)   ideal j=std(i,iw,w);
../singular_texi/reference.tex(,8591)   j[1];
../singular_texi/reference.tex(,8592) @expansion{} z64
../singular_texi/reference.tex(,8593) @c end example std reference.doc:5779
../singular_texi/reference.tex(,8594) @end smallexample
../singular_texi/reference.tex(,8595) @end table
../singular_texi/reference.tex(,8596) @c inserted refs from reference.doc:5811
../singular_texi/reference.tex(,8612) See
../singular_texi/reference.tex(,8613) @ref{facstd};
../singular_texi/reference.tex(,8614) @ref{fglm};
../singular_texi/reference.tex(,8615) @ref{groebner};
../singular_texi/reference.tex(,8616) @ref{ideal};
../singular_texi/reference.tex(,8617) @ref{mstd};
../singular_texi/reference.tex(,8618) @ref{option};
../singular_texi/reference.tex(,8619) @ref{ring};
../singular_texi/reference.tex(,8620) @ref{stdfglm};
../singular_texi/reference.tex(,8621) @ref{stdhilb}.
../singular_texi/reference.tex(,8623) @c end inserted refs from reference.doc:5811
../singular_texi/reference.tex(,8624) 
../singular_texi/reference.tex(,8625) @c ---------------------------------------
../singular_texi/reference.tex(,8626) @node stdfglm, stdhilb, std, Functions
../singular_texi/reference.tex(,8627) @subsection stdfglm
../singular_texi/reference.tex(,8628) @cindex stdfglm
../singular_texi/reference.tex(,8629) @c start include of docu for standard.lib:stdfglm
../singular_texi/reference.tex(,8630) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,8631) @c ---content stdfglm---
../singular_texi/reference.tex(,8632) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,8633) 
../singular_texi/reference.tex(,8634) @table @asis
../singular_texi/reference.tex(,8635) @item @strong{Syntax:}
../singular_texi/reference.tex(,8636) @code{stdfglm (} ideal_expression @code{)} @*
../singular_texi/reference.tex(,8637) @code{stdfglm (} ideal_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,8638) 
../singular_texi/reference.tex(,8639) @item @strong{Type:}
../singular_texi/reference.tex(,8640) ideal
../singular_texi/reference.tex(,8641) 
../singular_texi/reference.tex(,8642) @item @strong{Purpose:}
../singular_texi/reference.tex(,8643) computes the standard basis of the ideal in the basering
../singular_texi/reference.tex(,8644) via @code{fglm} (from the ordering given as the second argument
../singular_texi/reference.tex(,8645) to the ordering of the basering).@*
../singular_texi/reference.tex(,8646) If no second argument is given, "dp" is used.
../singular_texi/reference.tex(,8647) 
../singular_texi/reference.tex(,8648) @cindex fglm
../singular_texi/reference.tex(,8649) @end table
../singular_texi/reference.tex(,8650) @strong{Example:}
../singular_texi/reference.tex(,8651) @smallexample
../singular_texi/reference.tex(,8652) @c reused example stdfglm d2t_singular/standard_lib.doc:52 
../singular_texi/reference.tex(,8653)    ring r=0,(x,y,z),lp;
../singular_texi/reference.tex(,8654) ideal i=y3+x2,x2y+x2,x3-x2,z4-x2-y;
../singular_texi/reference.tex(,8655) ideal i1=stdfglm(i);         //uses fglm from "dp" to "lp"
../singular_texi/reference.tex(,8656) i1;
../singular_texi/reference.tex(,8657) @expansion{} i1[1]=z12
../singular_texi/reference.tex(,8658) @expansion{} i1[2]=yz4-z8
../singular_texi/reference.tex(,8659) @expansion{} i1[3]=y2+y-z8-z4
../singular_texi/reference.tex(,8660) @expansion{} i1[4]=xy-xz4-y+z4
../singular_texi/reference.tex(,8661) @expansion{} i1[5]=x2+y-z4
../singular_texi/reference.tex(,8662) ideal i2=stdfglm(i,"Dp");    //uses fglm from "Dp" to "lp"
../singular_texi/reference.tex(,8663) i2;
../singular_texi/reference.tex(,8664) @expansion{} i2[1]=z12
../singular_texi/reference.tex(,8665) @expansion{} i2[2]=yz4-z8
../singular_texi/reference.tex(,8666) @expansion{} i2[3]=y2+y-z8-z4
../singular_texi/reference.tex(,8667) @expansion{} i2[4]=xy-xz4-y+z4
../singular_texi/reference.tex(,8668) @expansion{} i2[5]=x2+y-z4
../singular_texi/reference.tex(,8669) @c end example stdfglm d2t_singular/standard_lib.doc:52
../singular_texi/reference.tex(,8670) @end smallexample
../singular_texi/reference.tex(,8671) @c inserted refs from d2t_singular/standard_lib.doc:61
../singular_texi/reference.tex(,8682) @strong{See also:}
../singular_texi/reference.tex(,8683) @ref{fglm};
../singular_texi/reference.tex(,8684) @ref{groebner};
../singular_texi/reference.tex(,8685) @ref{std};
../singular_texi/reference.tex(,8686) @ref{stdhilb}.
../singular_texi/reference.tex(,8688) @c end inserted refs from d2t_singular/standard_lib.doc:61
../singular_texi/reference.tex(,8689) 
../singular_texi/reference.tex(,8690) @c ---end content stdfglm---
../singular_texi/reference.tex(,8691) @c generated lib proc docu for standard.lib:stdfglm reference.doc:5828 
../singular_texi/reference.tex(,8692) @c end include of docu for standard.lib:stdfglm
../singular_texi/reference.tex(,8693) 
../singular_texi/reference.tex(,8694) @c ---------------------------------------
../singular_texi/reference.tex(,8695) @node stdhilb, subst, stdfglm, Functions
../singular_texi/reference.tex(,8696) @subsection stdhilb
../singular_texi/reference.tex(,8697) @cindex stdhilb
../singular_texi/reference.tex(,8698) @c start include of docu for standard.lib:stdhilb
../singular_texi/reference.tex(,8699) @c replaced @subsubsection by @sub
../singular_texi/reference.tex(,8700) @c ---content stdhilb---
../singular_texi/reference.tex(,8701) Procedure from library @code{standard.lib} (@pxref{standard_lib}).
../singular_texi/reference.tex(,8702) 
../singular_texi/reference.tex(,8703) @table @asis
../singular_texi/reference.tex(,8704) @item @strong{Syntax:}
../singular_texi/reference.tex(,8705) @code{stdhilb (} ideal_expression @code{)} @*
../singular_texi/reference.tex(,8706) @code{stdhilb (} ideal_expression@code{,} intvec_expression @code{)}
../singular_texi/reference.tex(,8707) 
../singular_texi/reference.tex(,8708) @item @strong{Type:}
../singular_texi/reference.tex(,8709) ideal
../singular_texi/reference.tex(,8710) 
../singular_texi/reference.tex(,8711) @item @strong{Purpose:}
../singular_texi/reference.tex(,8712) computes the standard basis of the homogeneous ideal in the basering,
../singular_texi/reference.tex(,8713) via a Hilbert driven standard basis computation.@*
../singular_texi/reference.tex(,8714) An optional second argument will be used as 1st Hilbert function.
../singular_texi/reference.tex(,8715) 
../singular_texi/reference.tex(,8716) @item @strong{Assume:}
../singular_texi/reference.tex(,8717) The optional second argument is the first Hilbert series as computed
../singular_texi/reference.tex(,8718) by @code{hilb}.
../singular_texi/reference.tex(,8719) 
../singular_texi/reference.tex(,8720) @cindex Hilbert function
../singular_texi/reference.tex(,8721) @end table
../singular_texi/reference.tex(,8722) @strong{Example:}
../singular_texi/reference.tex(,8723) @smallexample
../singular_texi/reference.tex(,8724) @c reused example stdhilb d2t_singular/standard_lib.doc:95 
../singular_texi/reference.tex(,8725)    ring  r=0,(x,y,z),dp;
../singular_texi/reference.tex(,8726) ideal i=y3+x2,x2y+x2,x3-x2,z4-x2-y;
../singular_texi/reference.tex(,8727) ideal i1=stdhilb(i); i1;
../singular_texi/reference.tex(,8728) @expansion{} i1[1]=y3+x2
../singular_texi/reference.tex(,8729) @expansion{} i1[2]=x2y+x2
../singular_texi/reference.tex(,8730) @expansion{} i1[3]=x3-x2
../singular_texi/reference.tex(,8731) @expansion{} i1[4]=z4-x2-y
../singular_texi/reference.tex(,8732) // the latter computation is equivalent to:
../singular_texi/reference.tex(,8733) intvec v=hilb(i,1);
../singular_texi/reference.tex(,8734) @expansion{} // ** i is no standardbasis
../singular_texi/reference.tex(,8735) ideal i2=stdhilb(i,v); i2;
../singular_texi/reference.tex(,8736) @expansion{} i2[1]=y3+x2
../singular_texi/reference.tex(,8737) @expansion{} i2[2]=x2y+x2
../singular_texi/reference.tex(,8738) @expansion{} i2[3]=x3-x2
../singular_texi/reference.tex(,8739) @expansion{} i2[4]=z4-x2-y
../singular_texi/reference.tex(,8740) @c end example stdhilb d2t_singular/standard_lib.doc:95
../singular_texi/reference.tex(,8741) @end smallexample
../singular_texi/reference.tex(,8742) @c inserted refs from d2t_singular/standard_lib.doc:104
../singular_texi/reference.tex(,8752) @strong{See also:}
../singular_texi/reference.tex(,8753) @ref{groebner};
../singular_texi/reference.tex(,8754) @ref{std};
../singular_texi/reference.tex(,8755) @ref{stdfglm}.
../singular_texi/reference.tex(,8757) @c end inserted refs from d2t_singular/standard_lib.doc:104
../singular_texi/reference.tex(,8758) 
../singular_texi/reference.tex(,8759) @c ---end content stdhilb---
../singular_texi/reference.tex(,8760) @c generated lib proc docu for standard.lib:stdhilb reference.doc:5834 
../singular_texi/reference.tex(,8761) @c end include of docu for standard.lib:stdhilb
../singular_texi/reference.tex(,8762) 
../singular_texi/reference.tex(,8763) @c ---------------------------------------
../singular_texi/reference.tex(,8764) @node subst, system, stdhilb, Functions
../singular_texi/reference.tex(,8765) @subsection subst
../singular_texi/reference.tex(,8766) @cindex subst
../singular_texi/reference.tex(,8767) @table @code
../singular_texi/reference.tex(,8768) @item @strong{Syntax:}
../singular_texi/reference.tex(,8769) @code{subst (} poly_expression@code{,} ring_variable@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,8770) @*@code{subst (} vector_expression@code{,} ring_variable@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,8771) @*@code{subst (} ideal_expression@code{,} ring_variable@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,8772) @*@code{subst (} module_expression@code{,} ring_variable@code{,} poly_expression @code{)}
../singular_texi/reference.tex(,8773) @item @strong{Type:}
../singular_texi/reference.tex(,8774) poly, vector, ideal or module (corresponding to the first argument)
../singular_texi/reference.tex(,8775) @item @strong{Purpose:}
../singular_texi/reference.tex(,8776) substitutes a ring variable by a polynomial.
../singular_texi/reference.tex(,8777) @item @strong{Example:}
../singular_texi/reference.tex(,8778) @smallexample
../singular_texi/reference.tex(,8779) @c reused example subst reference.doc:5852 
../singular_texi/reference.tex(,8780)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,8781)   poly f=x2+y2+z2+x+y+z;
../singular_texi/reference.tex(,8782)   subst(f,x,3/2);
../singular_texi/reference.tex(,8783) @expansion{} y2+z2+y+z+15/4
../singular_texi/reference.tex(,8784)   int a=1;
../singular_texi/reference.tex(,8785)   subst(f,y,a);
../singular_texi/reference.tex(,8786) @expansion{} x2+z2+x+z+2
../singular_texi/reference.tex(,8787)   subst(f,y,z);
../singular_texi/reference.tex(,8788) @expansion{} x2+2z2+x+2z
../singular_texi/reference.tex(,8789)   subst(f,y,z+1);
../singular_texi/reference.tex(,8790) @expansion{} x2+2z2+x+4z+2
../singular_texi/reference.tex(,8791) @c end example subst reference.doc:5852
../singular_texi/reference.tex(,8792) @end smallexample
../singular_texi/reference.tex(,8793) @end table
../singular_texi/reference.tex(,8794) @c inserted refs from reference.doc:5863
../singular_texi/reference.tex(,8806) See
../singular_texi/reference.tex(,8807) @ref{ideal};
../singular_texi/reference.tex(,8808) @ref{map};
../singular_texi/reference.tex(,8809) @ref{module};
../singular_texi/reference.tex(,8810) @ref{poly};
../singular_texi/reference.tex(,8811) @ref{vector}.
../singular_texi/reference.tex(,8813) @c end inserted refs from reference.doc:5863
../singular_texi/reference.tex(,8814) @c ---------------------------------------
../singular_texi/reference.tex(,8815) @node  system, syz, subst, Functions
../singular_texi/reference.tex(,8816) @subsection system
../singular_texi/reference.tex(,8817) @cindex system
../singular_texi/reference.tex(,8818) @table @code
../singular_texi/reference.tex(,8819) @item @strong{Syntax:}
../singular_texi/reference.tex(,8820) @code{system (} string_expression @code{)}
../singular_texi/reference.tex(,8821) @*@code{system (} string_expression@code{,} expression @code{)}
../singular_texi/reference.tex(,8822) @item @strong{Type:}
../singular_texi/reference.tex(,8823) depends on the desired function, may be none
../singular_texi/reference.tex(,8824) @item @strong{Purpose:}
../singular_texi/reference.tex(,8825) interface to internal data and the operating system. The
../singular_texi/reference.tex(,8826) string_expression determines the command to execute. Some commands
../singular_texi/reference.tex(,8827) require an additional argument (second form) where the type of the
../singular_texi/reference.tex(,8828) argument depends on the command. See below for a list of all possible
../singular_texi/reference.tex(,8829) commands.
../singular_texi/reference.tex(,8830) @item @strong{Note:}
../singular_texi/reference.tex(,8831) Not all functions work on every platform.
../singular_texi/reference.tex(,8832) @item @strong{Functions:}
../singular_texi/reference.tex(,8833) @table @asis
../singular_texi/reference.tex(,8834) @item @code{system("sh"}, string_expression @code{)}
../singular_texi/reference.tex(,8835) @cindex sh
../singular_texi/reference.tex(,8836) @cindex system, sh
../singular_texi/reference.tex(,8837) shell escape, returns the return code of the shell as int. The string is
../singular_texi/reference.tex(,8838) sent literally to the shell.
../singular_texi/reference.tex(,8839) @item @code{system("pid")}
../singular_texi/reference.tex(,8840) @cindex pid
../singular_texi/reference.tex(,8841) @cindex system, pid
../singular_texi/reference.tex(,8842) returns the process number as int (for creating unique names).
../singular_texi/reference.tex(,8843) @item @code{system("uname")}
../singular_texi/reference.tex(,8844) @cindex uname
../singular_texi/reference.tex(,8845) @cindex system, uname
../singular_texi/reference.tex(,8846) @cindex hardware platform
../singular_texi/reference.tex(,8847) returns a string identifying the architecture for which @sc{Singular}
../singular_texi/reference.tex(,8848) was compiled.
../singular_texi/reference.tex(,8849) @item @code{system("getenv",} string_expression@code{)}
../singular_texi/reference.tex(,8850) @cindex getenv
../singular_texi/reference.tex(,8851) @cindex system, getenv
../singular_texi/reference.tex(,8852) returns the value of the shell environment variable given as the second
../singular_texi/reference.tex(,8853) argument. The return type is string.
../singular_texi/reference.tex(,8854) @item @code{system("setenv",}string_expression, string_expression@code{)}
../singular_texi/reference.tex(,8855) @cindex setenv
../singular_texi/reference.tex(,8856) @cindex system, setenv
../singular_texi/reference.tex(,8857) sets the shell environment variable given as the second argument to the
../singular_texi/reference.tex(,8858) value given as the third argument. Returns the third argument. Might not
../singular_texi/reference.tex(,8859) be available on all platforms.
../singular_texi/reference.tex(,8860) @item @code{system("tty")}
../singular_texi/reference.tex(,8861) @cindex tty
../singular_texi/reference.tex(,8862) @cindex system, tty
../singular_texi/reference.tex(,8863) resets the terminal.
../singular_texi/reference.tex(,8864) @item @code{system("version")}
../singular_texi/reference.tex(,8865) @cindex version
../singular_texi/reference.tex(,8866) @cindex system, version
../singular_texi/reference.tex(,8867) returns the version number of  @sc{Singular} as int.
../singular_texi/reference.tex(,8868) @item @code{system("contributors")}
../singular_texi/reference.tex(,8869) @cindex contributors
../singular_texi/reference.tex(,8870) @cindex system, contributors
../singular_texi/reference.tex(,8871) returns names of people who contributed to the @sc{Singular} kernel as string.
../singular_texi/reference.tex(,8872) @item @code{system("gen")}
../singular_texi/reference.tex(,8873) @c gen is reserved id: @cindex gen
../singular_texi/reference.tex(,8874) @cindex system, gen
../singular_texi/reference.tex(,8875) returns the generating element of the multiplicative
../singular_texi/reference.tex(,8876) group of (Z/p)\@{0@} (as int) where p is the characteristic of the
../singular_texi/reference.tex(,8877) basering.
../singular_texi/reference.tex(,8878) @item @code{system("nblocks")}
../singular_texi/reference.tex(,8879) @item @code{system("nblocks",} ring_name @code{)}
../singular_texi/reference.tex(,8880) @cindex nblocks
../singular_texi/reference.tex(,8881) @cindex system, nblocks
../singular_texi/reference.tex(,8882) returns the number of blocks of the given ring, or the number of parameters
../singular_texi/reference.tex(,8883) of the current basering, if no second argument is given. The return type
../singular_texi/reference.tex(,8884) is int.
../singular_texi/reference.tex(,8885) @item @code{system("Singular")}
../singular_texi/reference.tex(,8886) @cindex Singular
../singular_texi/reference.tex(,8887) @cindex system, Singular
../singular_texi/reference.tex(,8888) returns the absolute (path) name of the running @sc{Singular} as string.
../singular_texi/reference.tex(,8889) @item @code{system("}--@code{")}
../singular_texi/reference.tex(,8890) @cindex system, --
../singular_texi/reference.tex(,8891) @cindex command-line options, print all values of
../singular_texi/reference.tex(,8892) prints the values of all options.
../singular_texi/reference.tex(,8893) @item @code{system("}--long_option_name@code{")}
../singular_texi/reference.tex(,8894) @cindex command-line option, value of
../singular_texi/reference.tex(,8895) @cindex system, --long_option_name
../singular_texi/reference.tex(,8896) returns the value of the (command-line) option long_option_name. The
../singular_texi/reference.tex(,8897) type of the returned value is either string or int.
../singular_texi/reference.tex(,8898) @xref{Command line options}, for more info.
../singular_texi/reference.tex(,8899) @item @code{system("}--long_option_name@code{",} expression@code{)}
../singular_texi/reference.tex(,8900) @cindex command-line option, setting value of
../singular_texi/reference.tex(,8901) @cindex system, --long_option_name=value
../singular_texi/reference.tex(,8902) @cindex random number generator, seed
../singular_texi/reference.tex(,8903) @cindex browsers, setting the
../singular_texi/reference.tex(,8904) @cindex browser, setting the
../singular_texi/reference.tex(,8905) @cindex help browsers, setting the
../singular_texi/reference.tex(,8906) @cindex timer resolution, setting the
../singular_texi/reference.tex(,8907) @cindex minimal display time, setting the
../singular_texi/reference.tex(,8908) sets the value of the (command-line) option long_option_name to the
../singular_texi/reference.tex(,8909) value given by the expression. Type of the expression must be string, or
../singular_texi/reference.tex(,8910) int.  @xref{Command line options}, for more info. Among others,
../singular_texi/reference.tex(,8911) this can be used for setting the seed of the random number generator,
../singular_texi/reference.tex(,8912) the used help browser, the minimal display time, or the timer
../singular_texi/reference.tex(,8913) resolution.
../singular_texi/reference.tex(,8914) @item @code{system("browsers");}
../singular_texi/reference.tex(,8915) @cindex system, browsers
../singular_texi/reference.tex(,8916) returns a string about available help browsers.
../singular_texi/reference.tex(,8917) @xref{The online help system}.
../singular_texi/reference.tex(,8918) @end table
../singular_texi/reference.tex(,8919) @item @strong{Example:}
../singular_texi/reference.tex(,8920) @smallexample
../singular_texi/reference.tex(,8921) // a listing of the current directory:
../singular_texi/reference.tex(,8922) system("sh","ls");
../singular_texi/reference.tex(,8923) // execute a shell, return to SINGULAR with exit:
../singular_texi/reference.tex(,8924) system("sh","sh");
../singular_texi/reference.tex(,8925) string unique_name="/tmp/xx"+string(system("pid"));
../singular_texi/reference.tex(,8926) unique_name;
../singular_texi/reference.tex(,8927) @expansion{} /tmp/xx4711
../singular_texi/reference.tex(,8928) system("uname")
../singular_texi/reference.tex(,8929) @expansion{} ix86-Linux
../singular_texi/reference.tex(,8930) system("getenv","PATH");
../singular_texi/reference.tex(,8931) @expansion{} /bin:/usr/bin:/usr/local/bin
../singular_texi/reference.tex(,8932) system("Singular");
../singular_texi/reference.tex(,8933) @expansion{} /usr/local/bin/Singular
../singular_texi/reference.tex(,8934) // report value of all options
../singular_texi/reference.tex(,8935) system("--");
../singular_texi/reference.tex(,8936) @expansion{} // --batch           0
../singular_texi/reference.tex(,8937) @expansion{} // --execute
../singular_texi/reference.tex(,8938) @expansion{} // --sdb             0
../singular_texi/reference.tex(,8939) @expansion{} // --echo            0
../singular_texi/reference.tex(,8940) @expansion{} // --help            0
../singular_texi/reference.tex(,8941) @expansion{} // --quiet           0
../singular_texi/reference.tex(,8942) @expansion{} // --random          937848971
../singular_texi/reference.tex(,8943) @expansion{} // --no-tty          0
../singular_texi/reference.tex(,8944) @expansion{} // --user-option
../singular_texi/reference.tex(,8945) @expansion{} // --version         0
../singular_texi/reference.tex(,8946) @expansion{} // --allow-net       0
../singular_texi/reference.tex(,8947) @expansion{} // --browser
../singular_texi/reference.tex(,8948) @expansion{} // --emacs           0
../singular_texi/reference.tex(,8949) @expansion{} // --no-stdlib       0
../singular_texi/reference.tex(,8950) @expansion{} // --no-rc           0
../singular_texi/reference.tex(,8951) @expansion{} // --no-warn         0
../singular_texi/reference.tex(,8952) @expansion{} // --no-out          0
../singular_texi/reference.tex(,8953) @expansion{} // --min-time        "0.5"
../singular_texi/reference.tex(,8954) @expansion{} // --mp-port
../singular_texi/reference.tex(,8955) @expansion{} // --mp-host
../singular_texi/reference.tex(,8956) @expansion{} // --ticks-per-sec   1
../singular_texi/reference.tex(,8957) @expansion{} // --mp-transp
../singular_texi/reference.tex(,8958) @expansion{} // --mp-mode
../singular_texi/reference.tex(,8959) // set minimal display time to 0.02 seconds
../singular_texi/reference.tex(,8960) system("--min-time", "0.02");
../singular_texi/reference.tex(,8961) // set timer resolution to 0.01 seconds
../singular_texi/reference.tex(,8962) system("--ticks-per-sec", 100);
../singular_texi/reference.tex(,8963) // re-seed random number generator
../singular_texi/reference.tex(,8964) system("--random", 12345678);
../singular_texi/reference.tex(,8965) // allow netscape to access HTML pages from the net
../singular_texi/reference.tex(,8966) system("--allow-net", 1);
../singular_texi/reference.tex(,8967) // and set help browser to netscape
../singular_texi/reference.tex(,8968) system("--browser", "netscape");
../singular_texi/reference.tex(,8969) @end smallexample
../singular_texi/reference.tex(,8970) @end table
../singular_texi/reference.tex(,8971) @c -------------------------------------------------
../singular_texi/reference.tex(,8972) @node syz, trace, system, Functions
../singular_texi/reference.tex(,8973) @subsection syz
../singular_texi/reference.tex(,8974) @cindex syz
../singular_texi/reference.tex(,8975) @table @code
../singular_texi/reference.tex(,8976) @item @strong{Syntax:}
../singular_texi/reference.tex(,8977) @code{syz (} ideal_expression @code{)}
../singular_texi/reference.tex(,8978) @*@code{syz (} module_expression @code{)}
../singular_texi/reference.tex(,8979) @item @strong{Type:}
../singular_texi/reference.tex(,8980) module
../singular_texi/reference.tex(,8981) @item @strong{Purpose:}
../singular_texi/reference.tex(,8982) computes the first syzygy (i.e., the module of relations of the given
../singular_texi/reference.tex(,8983) generators) of the ideal, resp.@: module.
../singular_texi/reference.tex(,8984) @item @strong{Example:}
../singular_texi/reference.tex(,8985) @smallexample
../singular_texi/reference.tex(,8986) @c reused example syz reference.doc:6043 
../singular_texi/reference.tex(,8987)   ring R=0,(x,y),(c,dp);
../singular_texi/reference.tex(,8988)   ideal i=x,y;
../singular_texi/reference.tex(,8989)   syz(i);
../singular_texi/reference.tex(,8990) @expansion{} _[1]=[y,-x]
../singular_texi/reference.tex(,8991) @c end example syz reference.doc:6043
../singular_texi/reference.tex(,8992) @end smallexample
../singular_texi/reference.tex(,8993) @end table
../singular_texi/reference.tex(,8994) @c inserted refs from reference.doc:6050
../singular_texi/reference.tex(,9009) See
../singular_texi/reference.tex(,9010) @ref{hres};
../singular_texi/reference.tex(,9011) @ref{ideal};
../singular_texi/reference.tex(,9012) @ref{lres};
../singular_texi/reference.tex(,9013) @ref{module};
../singular_texi/reference.tex(,9014) @ref{mres};
../singular_texi/reference.tex(,9015) @ref{nres};
../singular_texi/reference.tex(,9016) @ref{res};
../singular_texi/reference.tex(,9017) @ref{sres}.
../singular_texi/reference.tex(,9019) @c end inserted refs from reference.doc:6050
../singular_texi/reference.tex(,9020) @c ---------------------------------------
../singular_texi/reference.tex(,9021) @node trace, transpose, syz, Functions
../singular_texi/reference.tex(,9022) @subsection trace
../singular_texi/reference.tex(,9023) @cindex trace
../singular_texi/reference.tex(,9024) @table @code
../singular_texi/reference.tex(,9025) @item @strong{Syntax:}
../singular_texi/reference.tex(,9026) @code{trace (} intmat_expression @code{)}
../singular_texi/reference.tex(,9027) @*@code{trace (} matrix_expression @code{)}
../singular_texi/reference.tex(,9028) @item @strong{Type:}
../singular_texi/reference.tex(,9029) int, if the argument is an intmat, resp.@: @*
../singular_texi/reference.tex(,9030) poly, if the argument is a matrix
../singular_texi/reference.tex(,9031) @item @strong{Purpose:}
../singular_texi/reference.tex(,9032) returns the trace of an intmat, resp.@: matrix.
../singular_texi/reference.tex(,9033) @item @strong{Example:}
../singular_texi/reference.tex(,9034) @smallexample
../singular_texi/reference.tex(,9035) @c reused example trace reference.doc:6076 
../singular_texi/reference.tex(,9036)   intmat m[2][2]=1,2,3,4;
../singular_texi/reference.tex(,9037)   print(m);
../singular_texi/reference.tex(,9038) @expansion{}      1     2
../singular_texi/reference.tex(,9039) @expansion{}      3     4
../singular_texi/reference.tex(,9040)   trace(m);
../singular_texi/reference.tex(,9041) @expansion{} 5
../singular_texi/reference.tex(,9042) @c end example trace reference.doc:6076
../singular_texi/reference.tex(,9043) @end smallexample
../singular_texi/reference.tex(,9044) @end table
../singular_texi/reference.tex(,9045) @c inserted refs from reference.doc:6083
../singular_texi/reference.tex(,9054) See
../singular_texi/reference.tex(,9055) @ref{intmat};
../singular_texi/reference.tex(,9056) @ref{matrix}.
../singular_texi/reference.tex(,9058) @c end inserted refs from reference.doc:6083
../singular_texi/reference.tex(,9059) @c ---------------------------------------
../singular_texi/reference.tex(,9060) @node transpose, type, trace, Functions
../singular_texi/reference.tex(,9061) @subsection transpose
../singular_texi/reference.tex(,9062) @cindex transpose
../singular_texi/reference.tex(,9063) @table @code
../singular_texi/reference.tex(,9064) @item @strong{Syntax:}
../singular_texi/reference.tex(,9065) @code{transpose (} intmat_expression @code{)}
../singular_texi/reference.tex(,9066) @*@code{transpose (} matrix_expression @code{)}
../singular_texi/reference.tex(,9067) @*@code{transpose (} module_expression @code{)}
../singular_texi/reference.tex(,9068) @item @strong{Type:}
../singular_texi/reference.tex(,9069) intmat, matrix, or module, corresponding to the argument
../singular_texi/reference.tex(,9070) @item @strong{Purpose:}
../singular_texi/reference.tex(,9071) transposes a matrix.
../singular_texi/reference.tex(,9072) @item @strong{Example:}
../singular_texi/reference.tex(,9073) @smallexample
../singular_texi/reference.tex(,9074) @c reused example transpose reference.doc:6103 
../singular_texi/reference.tex(,9075)   ring R=0,x,dp;
../singular_texi/reference.tex(,9076)   matrix m[2][3]=1,2,3,4,5,6;
../singular_texi/reference.tex(,9077)   print(m);
../singular_texi/reference.tex(,9078) @expansion{} 1,2,3,
../singular_texi/reference.tex(,9079) @expansion{} 4,5,6 
../singular_texi/reference.tex(,9080)   print(transpose(m));
../singular_texi/reference.tex(,9081) @expansion{} 1,4,
../singular_texi/reference.tex(,9082) @expansion{} 2,5,
../singular_texi/reference.tex(,9083) @expansion{} 3,6 
../singular_texi/reference.tex(,9084) @c end example transpose reference.doc:6103
../singular_texi/reference.tex(,9085) @end smallexample
../singular_texi/reference.tex(,9086) @end table
../singular_texi/reference.tex(,9087) @c inserted refs from reference.doc:6111
../singular_texi/reference.tex(,9097) See
../singular_texi/reference.tex(,9098) @ref{intmat};
../singular_texi/reference.tex(,9099) @ref{matrix};
../singular_texi/reference.tex(,9100) @ref{module}.
../singular_texi/reference.tex(,9102) @c end inserted refs from reference.doc:6111
../singular_texi/reference.tex(,9103) @c ---------------------------------------
../singular_texi/reference.tex(,9104) @node type, typeof, transpose, Functions
../singular_texi/reference.tex(,9105) @subsection type
../singular_texi/reference.tex(,9106) @cindex type
../singular_texi/reference.tex(,9107) @table @code
../singular_texi/reference.tex(,9108) @item @strong{Syntax:}
../singular_texi/reference.tex(,9109) @code{type } name @code{;} @*
../singular_texi/reference.tex(,9110) @code{type (} name @code{);}
../singular_texi/reference.tex(,9111) @item @strong{Type:}
../singular_texi/reference.tex(,9112) none
../singular_texi/reference.tex(,9113) @item @strong{Purpose:}
../singular_texi/reference.tex(,9114) prints the name, level, type and value of a variable. To display the
../singular_texi/reference.tex(,9115) value of an expression, it is sufficient to type the expression followed
../singular_texi/reference.tex(,9116) by @code{;}.
../singular_texi/reference.tex(,9117) @item @strong{Example:}
../singular_texi/reference.tex(,9118) @smallexample
../singular_texi/reference.tex(,9119) @c reused example type reference.doc:6133 
../singular_texi/reference.tex(,9120)   int i=3;
../singular_texi/reference.tex(,9121)   i;
../singular_texi/reference.tex(,9122) @expansion{} 3
../singular_texi/reference.tex(,9123)   type(i);
../singular_texi/reference.tex(,9124) @expansion{} // i                    [0]  int 3
../singular_texi/reference.tex(,9125) @c end example type reference.doc:6133
../singular_texi/reference.tex(,9126) @end smallexample
../singular_texi/reference.tex(,9127) @end table
../singular_texi/reference.tex(,9128) @c inserted refs from reference.doc:6140
../singular_texi/reference.tex(,9138) See
../singular_texi/reference.tex(,9139) @ref{Data types};
../singular_texi/reference.tex(,9140) @ref{listvar};
../singular_texi/reference.tex(,9141) @ref{print}.
../singular_texi/reference.tex(,9143) @c end inserted refs from reference.doc:6140
../singular_texi/reference.tex(,9144) @c ---------------------------------------
../singular_texi/reference.tex(,9145) @node typeof, uressolve, type, Functions
../singular_texi/reference.tex(,9146) @subsection typeof
../singular_texi/reference.tex(,9147) @cindex typeof
../singular_texi/reference.tex(,9148) @table @code
../singular_texi/reference.tex(,9149) @item @strong{Syntax:}
../singular_texi/reference.tex(,9150) @code{typeof (} expression @code{)}
../singular_texi/reference.tex(,9151) @item @strong{Type:}
../singular_texi/reference.tex(,9152) string
../singular_texi/reference.tex(,9153) @item @strong{Purpose:}
../singular_texi/reference.tex(,9154) returns the type of an expression as string.
../singular_texi/reference.tex(,9155) 
../singular_texi/reference.tex(,9156) Returns the type of the first list element if the expression is an
../singular_texi/reference.tex(,9157) expression list.
../singular_texi/reference.tex(,9158) 
../singular_texi/reference.tex(,9159) Possible types are:
../singular_texi/reference.tex(,9160) @code{"ideal"},
../singular_texi/reference.tex(,9161) @code{"int"},
../singular_texi/reference.tex(,9162) @code{"intmat"},
../singular_texi/reference.tex(,9163) @code{"intvec"},
../singular_texi/reference.tex(,9164) @code{"list"},
../singular_texi/reference.tex(,9165) @code{"map"},
../singular_texi/reference.tex(,9166) @code{"matrix"},
../singular_texi/reference.tex(,9167) @code{"module"},
../singular_texi/reference.tex(,9168) @code{"number"},
../singular_texi/reference.tex(,9169) @code{"none"},
../singular_texi/reference.tex(,9170) @code{"poly"},
../singular_texi/reference.tex(,9171) @code{"proc"},
../singular_texi/reference.tex(,9172) @code{"qring"},
../singular_texi/reference.tex(,9173) @code{"resolution"},
../singular_texi/reference.tex(,9174) @code{"ring"},
../singular_texi/reference.tex(,9175) @code{"string"},
../singular_texi/reference.tex(,9176) @code{"vector"}.
../singular_texi/reference.tex(,9177) 
../singular_texi/reference.tex(,9178) For internal use only is the type
../singular_texi/reference.tex(,9179) @c @code{"package"},
../singular_texi/reference.tex(,9180) @code{"?unknown type?"}.
../singular_texi/reference.tex(,9181) @item @strong{Example:}
../singular_texi/reference.tex(,9182) @smallexample
../singular_texi/reference.tex(,9183) @c reused example typeof reference.doc:6185 
../singular_texi/reference.tex(,9184)   int i=9; i;
../singular_texi/reference.tex(,9185) @expansion{} 9
../singular_texi/reference.tex(,9186)   typeof(_);
../singular_texi/reference.tex(,9187) @expansion{} int
../singular_texi/reference.tex(,9188)   print(i);
../singular_texi/reference.tex(,9189) @expansion{} 9
../singular_texi/reference.tex(,9190)   typeof(_);
../singular_texi/reference.tex(,9191) @expansion{} none
../singular_texi/reference.tex(,9192)   type i;
../singular_texi/reference.tex(,9193) @expansion{} // i                    [0]  int 9
../singular_texi/reference.tex(,9194)   typeof(_);
../singular_texi/reference.tex(,9195) @expansion{} string
../singular_texi/reference.tex(,9196)   string s=typeof(i);
../singular_texi/reference.tex(,9197)   s;
../singular_texi/reference.tex(,9198) @expansion{} int
../singular_texi/reference.tex(,9199)   typeof(s);
../singular_texi/reference.tex(,9200) @expansion{} string
../singular_texi/reference.tex(,9201)   proc p() @{  "hello"; return();@}
../singular_texi/reference.tex(,9202)   p();
../singular_texi/reference.tex(,9203) @expansion{} hello
../singular_texi/reference.tex(,9204)   typeof(_);
../singular_texi/reference.tex(,9205) @expansion{} none
../singular_texi/reference.tex(,9206) @c end example typeof reference.doc:6185
../singular_texi/reference.tex(,9207) @end smallexample
../singular_texi/reference.tex(,9208) @end table
../singular_texi/reference.tex(,9209) @c inserted refs from reference.doc:6201
../singular_texi/reference.tex(,9218) See
../singular_texi/reference.tex(,9219) @ref{Data types};
../singular_texi/reference.tex(,9220) @ref{type}.
../singular_texi/reference.tex(,9222) @c end inserted refs from reference.doc:6201
../singular_texi/reference.tex(,9223) @c ---------------------------------------
../singular_texi/reference.tex(,9224) @node uressolve, vandermonde, typeof, Functions
../singular_texi/reference.tex(,9225) @subsection uressolve
../singular_texi/reference.tex(,9226) @cindex uressolve
../singular_texi/reference.tex(,9227) @table @code
../singular_texi/reference.tex(,9228) @item @strong{Syntax:}
../singular_texi/reference.tex(,9229) @code{uressolve (} ideal_expression@code{,} int_expression@code{,} int_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,9230) @item @strong{Type:}
../singular_texi/reference.tex(,9231) list
../singular_texi/reference.tex(,9232) @item @strong{Purpose:}
../singular_texi/reference.tex(,9233) computes all complex roots of a zerodimensional ideal. @*
../singular_texi/reference.tex(,9234) Makes either use of the multipolynomial resultant of Macaulay (second argument
../singular_texi/reference.tex(,9235) = 1), which works only for homogeneous ideals, or uses the sparse resultant
../singular_texi/reference.tex(,9236) of Gelfand, Kapranov and Zelevinsky (second argument = 0). @*
../singular_texi/reference.tex(,9237) The sparse resultant algorithm uses a mixed polyhedral subdivision of the
../singular_texi/reference.tex(,9238) Minkowsky sum of the Newton polytopes in order to construct the sparse
../singular_texi/reference.tex(,9239) resultant matrix. Its determinant is a nonzero multiple of the sparse
../singular_texi/reference.tex(,9240) resultant. The u-resultant of B.L.@: van der Waerden and Laguerre's algorithm
../singular_texi/reference.tex(,9241) are used to determine the complex roots. @*
../singular_texi/reference.tex(,9242) The third argument defines the precision of the fractional part if the ground
../singular_texi/reference.tex(,9243) field is the field of rational numbers, otherwise it will be ignored. @*
../singular_texi/reference.tex(,9244) The fourth argument (can be 0, 1 or 2) gives the number of extra runs of
../singular_texi/reference.tex(,9245) Laguerre's algorithm (with corrupted roots), leading to better results.
../singular_texi/reference.tex(,9246) @item @strong{Note:}
../singular_texi/reference.tex(,9247) If the ground field is the field of complex numbers, the elements of the list
../singular_texi/reference.tex(,9248) are of type number, otherwise of type string.
../singular_texi/reference.tex(,9249) @item @strong{Example:}
../singular_texi/reference.tex(,9250) @smallexample
../singular_texi/reference.tex(,9251) @c reused example uressolve reference.doc:6234 
../singular_texi/reference.tex(,9252) ring rsc=(real,20,I),(x,y),lp;
../singular_texi/reference.tex(,9253) ideal i=(2+3*I)*x2+(0.35+I*45.0e-2)*y2-8,x2+xy+(42.7)*y2;
../singular_texi/reference.tex(,9254) list l=uressolve(i,0,0,2);
../singular_texi/reference.tex(,9255) l[1];
../singular_texi/reference.tex(,9256) @expansion{} [1]:
../singular_texi/reference.tex(,9257) @expansion{}    (-1.315392899374542198+I*0.70468233142752928117)
../singular_texi/reference.tex(,9258) @expansion{} [2]:
../singular_texi/reference.tex(,9259) @expansion{}    (0.12292646536251281054+I*0.19245727404407015049)
../singular_texi/reference.tex(,9260) subst(subst(i[1],x,l[1][1]),y,l[1][2]);
../singular_texi/reference.tex(,9261) @expansion{} 0
../singular_texi/reference.tex(,9262) @c end example uressolve reference.doc:6234
../singular_texi/reference.tex(,9263) @end smallexample
../singular_texi/reference.tex(,9264) @end table
../singular_texi/reference.tex(,9265) @c inserted refs from reference.doc:6243
../singular_texi/reference.tex(,9274) See
../singular_texi/reference.tex(,9275) @ref{laguerre};
../singular_texi/reference.tex(,9276) @ref{mpresmat}.
../singular_texi/reference.tex(,9278) @c end inserted refs from reference.doc:6243
../singular_texi/reference.tex(,9279) @c ---------------------------------------
../singular_texi/reference.tex(,9280) @node vandermonde, var, uressolve, Functions
../singular_texi/reference.tex(,9281) @subsection vandermonde
../singular_texi/reference.tex(,9282) @cindex vandermonde
../singular_texi/reference.tex(,9283) @table @code
../singular_texi/reference.tex(,9284) @item @strong{Syntax:}
../singular_texi/reference.tex(,9285) @code{vandermonde (} ideal_expression@code{,} ideal_expression@code{,}
../singular_texi/reference.tex(,9286) int_expression @code{)}
../singular_texi/reference.tex(,9287) @item @strong{Type:}
../singular_texi/reference.tex(,9288) poly
../singular_texi/reference.tex(,9289) @item @strong{Purpose:}
../singular_texi/reference.tex(,9303) @tex
../singular_texi/reference.tex(,9304) {\tt vandermonde(p,v,d)} computes the (unique) polynomial of degree
../singular_texi/reference.tex(,9305) @code{d} with prescribed values {\tt v[1],...,v[N]} at the points
../singular_texi/reference.tex(,9306) {\tt p}$^0,\dots,$ {\tt p}$^{N-1}$, {\tt N=(d+1)}$^n$, $n$ the
../singular_texi/reference.tex(,9307) number of ring variables.
../singular_texi/reference.tex(,9308) 
../singular_texi/reference.tex(,9309) The returned polynomial is $\sum
../singular_texi/reference.tex(,9310) c_{\alpha_1\ldots\alpha_n}\cdot x_1^{\alpha_1} \cdot \dots \cdot
../singular_texi/reference.tex(,9311) x_n^{\alpha_n}$, where the coefficients
../singular_texi/reference.tex(,9312) $c_{\alpha_1\ldots\alpha_n}$ are the solution of the (transposed)
../singular_texi/reference.tex(,9313) Vandermonde system of linear equations
../singular_texi/reference.tex(,9314) $$ \sum_{\alpha_1+\ldots+\alpha_n\leq d} c_{\alpha_1\ldots\alpha_n} \cdot
../singular_texi/reference.tex(,9315) {\tt p}_1^{(k-1)\alpha_1}\cdot\dots\cdot {\tt p}_n^{(k-1)\alpha_n} =
../singular_texi/reference.tex(,9316) {\tt v}[k], \quad  k=1,\dots,{\tt N}.$$
../singular_texi/reference.tex(,9317) @end tex
../singular_texi/reference.tex(,9318) @item @strong{Note:}
../singular_texi/reference.tex(,9326) @tex
../singular_texi/reference.tex(,9327) the ground field has to be the field of rational
../singular_texi/reference.tex(,9328) numbers. Moreover, {\tt ncols(p)==}$n$, the number of variables in the
../singular_texi/reference.tex(,9329) basering, and all the given generators have to be numbers different from
../singular_texi/reference.tex(,9330) 0,1 or -1. Finally, {\tt ncols(v)==(d+1)$^n$}, and all given generators have
../singular_texi/reference.tex(,9331) to be numbers.
../singular_texi/reference.tex(,9332) @end tex
../singular_texi/reference.tex(,9333) @item @strong{Example:}
../singular_texi/reference.tex(,9334) @smallexample
../singular_texi/reference.tex(,9335) @c reused example vandermonde reference.doc:6304 
../singular_texi/reference.tex(,9336) ring r=0,(x,y),dp;
../singular_texi/reference.tex(,9337) // determine f with deg(f)=2 and with given values v of f
../singular_texi/reference.tex(,9338) // at 9 points: (2,3)^0=(1,1),...,(2,3)^8=(2^8,3^8)
../singular_texi/reference.tex(,9339) // valuation point: (2,3)
../singular_texi/reference.tex(,9340) ideal p=2,3;
../singular_texi/reference.tex(,9341) ideal v=1,2,3,4,5,6,7,8,9;
../singular_texi/reference.tex(,9342) poly ip=vandermonde(p,v,2);
../singular_texi/reference.tex(,9343) ip[1..5];  //  the 5 first terms of ip:
../singular_texi/reference.tex(,9344) @expansion{} -1/9797760x2y2-595/85536x2y+55/396576xy2+935/384x2-1309/3240xy
../singular_texi/reference.tex(,9345) // compute value of ip at the point 2^8,3^8, result must be 9
../singular_texi/reference.tex(,9346) subst(subst(ip,x,2^8),y,3^8);
../singular_texi/reference.tex(,9347) @expansion{} 9
../singular_texi/reference.tex(,9348) @c end example vandermonde reference.doc:6304
../singular_texi/reference.tex(,9349) @end smallexample
../singular_texi/reference.tex(,9350) @end table
../singular_texi/reference.tex(,9351) @c inserted refs from reference.doc:6318
../singular_texi/reference.tex(,9358) 
../singular_texi/reference.tex(,9360) @c end inserted refs from reference.doc:6318
../singular_texi/reference.tex(,9361) @c ---------------------------------------
../singular_texi/reference.tex(,9362) @node var, varstr, vandermonde, Functions
../singular_texi/reference.tex(,9363) @subsection var
../singular_texi/reference.tex(,9364) @cindex var
../singular_texi/reference.tex(,9365) @table @code
../singular_texi/reference.tex(,9366) @item @strong{Syntax:}
../singular_texi/reference.tex(,9367) @code{var (} int_expression @code{)}
../singular_texi/reference.tex(,9368) @item @strong{Type:}
../singular_texi/reference.tex(,9369) poly
../singular_texi/reference.tex(,9370) @item @strong{Purpose:}
../singular_texi/reference.tex(,9371) @code{var(n)} returns the n-th ring variable.
../singular_texi/reference.tex(,9372) @item @strong{Example:}
../singular_texi/reference.tex(,9373) @smallexample
../singular_texi/reference.tex(,9374) @c reused example var reference.doc:6333 
../singular_texi/reference.tex(,9375)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,9376)   var(2);
../singular_texi/reference.tex(,9377) @expansion{} y
../singular_texi/reference.tex(,9378) @c end example var reference.doc:6333
../singular_texi/reference.tex(,9379) @end smallexample
../singular_texi/reference.tex(,9380) @end table
../singular_texi/reference.tex(,9381) @c inserted refs from reference.doc:6339
../singular_texi/reference.tex(,9392) See
../singular_texi/reference.tex(,9393) @ref{int};
../singular_texi/reference.tex(,9394) @ref{nvars};
../singular_texi/reference.tex(,9395) @ref{ring};
../singular_texi/reference.tex(,9396) @ref{varstr}.
../singular_texi/reference.tex(,9398) @c end inserted refs from reference.doc:6339
../singular_texi/reference.tex(,9399) @c ---------------------------------------
../singular_texi/reference.tex(,9400) @node varstr, vdim, var, Functions
../singular_texi/reference.tex(,9401) @subsection varstr
../singular_texi/reference.tex(,9402) @cindex varstr
../singular_texi/reference.tex(,9403) @table @code
../singular_texi/reference.tex(,9404) @item @strong{Syntax:}
../singular_texi/reference.tex(,9405) @code{varstr (} ring_name @code{)}
../singular_texi/reference.tex(,9406) @*@code{varstr (} int_expression @code{)}
../singular_texi/reference.tex(,9407) @*@code{varstr (} ring_name@code{,} int_expression @code{)}
../singular_texi/reference.tex(,9408) @item @strong{Type:}
../singular_texi/reference.tex(,9409) string
../singular_texi/reference.tex(,9410) @item @strong{Purpose:}
../singular_texi/reference.tex(,9411) returns the list of the names of the ring variables as a string
../singular_texi/reference.tex(,9412) or the name of the n-th ring variable, where n is given by the
../singular_texi/reference.tex(,9413) int_expression.
../singular_texi/reference.tex(,9414) @*If the ring name is omitted, the basering is used, thus
../singular_texi/reference.tex(,9415) @code{varstr(n)} is equivalent to @code{varstr(basering,n)}.
../singular_texi/reference.tex(,9416) @item @strong{Example:}
../singular_texi/reference.tex(,9417) @smallexample
../singular_texi/reference.tex(,9418) @c reused example varstr reference.doc:6365 
../singular_texi/reference.tex(,9419)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,9420)   varstr(r);
../singular_texi/reference.tex(,9421) @expansion{} x,y,z
../singular_texi/reference.tex(,9422)   varstr(r,1);
../singular_texi/reference.tex(,9423) @expansion{} x
../singular_texi/reference.tex(,9424)   varstr(2);
../singular_texi/reference.tex(,9425) @expansion{} y
../singular_texi/reference.tex(,9426) @c end example varstr reference.doc:6365
../singular_texi/reference.tex(,9427) @end smallexample
../singular_texi/reference.tex(,9428) @end table
../singular_texi/reference.tex(,9429) @c inserted refs from reference.doc:6373
../singular_texi/reference.tex(,9443) See
../singular_texi/reference.tex(,9444) @ref{charstr};
../singular_texi/reference.tex(,9445) @ref{int};
../singular_texi/reference.tex(,9446) @ref{nvars};
../singular_texi/reference.tex(,9447) @ref{ordstr};
../singular_texi/reference.tex(,9448) @ref{parstr};
../singular_texi/reference.tex(,9449) @ref{ring};
../singular_texi/reference.tex(,9450) @ref{var}.
../singular_texi/reference.tex(,9452) @c end inserted refs from reference.doc:6373
../singular_texi/reference.tex(,9453) @c ---------------------------------------
../singular_texi/reference.tex(,9454) @node vdim, wedge, varstr, Functions
../singular_texi/reference.tex(,9455) @subsection vdim
../singular_texi/reference.tex(,9456) @cindex vdim
../singular_texi/reference.tex(,9457) @table @code
../singular_texi/reference.tex(,9458) @item @strong{Syntax:}
../singular_texi/reference.tex(,9459) @code{vdim (} ideal_expression @code{)}
../singular_texi/reference.tex(,9460) @*@code{vdim (} module_expression @code{)}
../singular_texi/reference.tex(,9461) @item @strong{Type:}
../singular_texi/reference.tex(,9462) int
../singular_texi/reference.tex(,9463) @item @strong{Purpose:}
../singular_texi/reference.tex(,9464) computes the vector space dimension of the ring, resp.@: free module,
../singular_texi/reference.tex(,9465) modulo the ideal, resp.@: module,
../singular_texi/reference.tex(,9466) generated by the initial terms of the given generators.
../singular_texi/reference.tex(,9467) If the generators form a standard basis,
../singular_texi/reference.tex(,9468) this is the same as the vector space dimension of the ring, resp.@:
../singular_texi/reference.tex(,9469) free module, modulo the ideal, resp.@: module.
../singular_texi/reference.tex(,9470) @*If the ideal, resp.@: module, is not zero-dimensional, -1 is returned.
../singular_texi/reference.tex(,9471) @item @strong{Example:}
../singular_texi/reference.tex(,9472) @smallexample
../singular_texi/reference.tex(,9473) @c reused example vdim reference.doc:6403 
../singular_texi/reference.tex(,9474)   ring r=0,(x,y),ds;
../singular_texi/reference.tex(,9475)   ideal i=x2+y2,x2-y2;
../singular_texi/reference.tex(,9476)   ideal j=std(i);
../singular_texi/reference.tex(,9477)   vdim(j);
../singular_texi/reference.tex(,9478) @expansion{} 4
../singular_texi/reference.tex(,9479) @c end example vdim reference.doc:6403
../singular_texi/reference.tex(,9480) @end smallexample
../singular_texi/reference.tex(,9481) @end table
../singular_texi/reference.tex(,9482) @c inserted refs from reference.doc:6411
../singular_texi/reference.tex(,9495) See
../singular_texi/reference.tex(,9496) @ref{degree};
../singular_texi/reference.tex(,9497) @ref{dim};
../singular_texi/reference.tex(,9498) @ref{ideal};
../singular_texi/reference.tex(,9499) @ref{kbase};
../singular_texi/reference.tex(,9500) @ref{mult};
../singular_texi/reference.tex(,9501) @ref{std}.
../singular_texi/reference.tex(,9503) @c end inserted refs from reference.doc:6411
../singular_texi/reference.tex(,9504) @c ---------------------------------------
../singular_texi/reference.tex(,9505) @node wedge, weight, vdim, Functions
../singular_texi/reference.tex(,9506) @subsection wedge
../singular_texi/reference.tex(,9507) @cindex wedge
../singular_texi/reference.tex(,9508) @table @code
../singular_texi/reference.tex(,9509) @item @strong{Syntax:}
../singular_texi/reference.tex(,9510) @code{wedge (} matrix_expression@code{,} int_expression @code{)}
../singular_texi/reference.tex(,9511) @item @strong{Type:}
../singular_texi/reference.tex(,9512) matrix
../singular_texi/reference.tex(,9513) @item @strong{Purpose:}
../singular_texi/reference.tex(,9514) @code{wedge(M,n)} computes the @code{n}-th exterior power of the matrix
../singular_texi/reference.tex(,9515) @code{M}.
../singular_texi/reference.tex(,9516) @item @strong{Example:}
../singular_texi/reference.tex(,9517) @smallexample
../singular_texi/reference.tex(,9518) @c reused example wedge reference.doc:6434 
../singular_texi/reference.tex(,9519)   ring r;
../singular_texi/reference.tex(,9520)   matrix m[2][3]=x,y,y,z,z,x;
../singular_texi/reference.tex(,9521)   print(m);
../singular_texi/reference.tex(,9522) @expansion{} x,y,y,
../singular_texi/reference.tex(,9523) @expansion{} z,z,x 
../singular_texi/reference.tex(,9524)   print(wedge(m,2));
../singular_texi/reference.tex(,9525) @expansion{} xz-yz,-x2+yz,xy-yz
../singular_texi/reference.tex(,9526) @c end example wedge reference.doc:6434
../singular_texi/reference.tex(,9527) @end smallexample
../singular_texi/reference.tex(,9528) @end table
../singular_texi/reference.tex(,9529) @c inserted refs from reference.doc:6442
../singular_texi/reference.tex(,9539) See
../singular_texi/reference.tex(,9540) @ref{int};
../singular_texi/reference.tex(,9541) @ref{matrix};
../singular_texi/reference.tex(,9542) @ref{minor}.
../singular_texi/reference.tex(,9544) @c end inserted refs from reference.doc:6442
../singular_texi/reference.tex(,9545) @c ---------------------------------------
../singular_texi/reference.tex(,9546) @node weight, write, wedge, Functions
../singular_texi/reference.tex(,9547) @subsection weight
../singular_texi/reference.tex(,9548) @cindex weight
../singular_texi/reference.tex(,9549) @table @code
../singular_texi/reference.tex(,9550) @item @strong{Syntax:}
../singular_texi/reference.tex(,9551) @code{weight (} ideal_expression @code{)}
../singular_texi/reference.tex(,9552) @*@code{weight (} module_expression @code{)}
../singular_texi/reference.tex(,9553) @item @strong{Type:}
../singular_texi/reference.tex(,9554) intvec
../singular_texi/reference.tex(,9555) @item @strong{Purpose:}
../singular_texi/reference.tex(,9556) computes an "optimal" weight vector for an ideal, resp.@: module,
../singular_texi/reference.tex(,9557) which may be used as weight vector for the variables in order to speed
../singular_texi/reference.tex(,9558) up the standard basis algorithm. If the input is weighted homogeneous,
../singular_texi/reference.tex(,9559) a weight vector for which the input is weighted homogeneous is found.
../singular_texi/reference.tex(,9560) @item @strong{Example:}
../singular_texi/reference.tex(,9561) @smallexample
../singular_texi/reference.tex(,9562) @c reused example weight reference.doc:6465 
../singular_texi/reference.tex(,9563)   ring h1=32003,(t,x,y,z),dp;
../singular_texi/reference.tex(,9564)   ideal i=
../singular_texi/reference.tex(,9565)   9x8+y7t3z4+5x4y2t2+2xy2z3t2,
../singular_texi/reference.tex(,9566)   9y8+7xy6t+2x5y4t2+2x2yz3t2,
../singular_texi/reference.tex(,9567)   9z8+3x2y3z2t4;
../singular_texi/reference.tex(,9568)   intvec e=weight(i);
../singular_texi/reference.tex(,9569)   e;
../singular_texi/reference.tex(,9570) @expansion{} 5,7,5,7
../singular_texi/reference.tex(,9571)   ring r=32003,(a,b,c,d),wp(e);
../singular_texi/reference.tex(,9572)   map f=h1,a,b,c,d;
../singular_texi/reference.tex(,9573)   ideal i0=std(f(i));
../singular_texi/reference.tex(,9574) @c end example weight reference.doc:6465
../singular_texi/reference.tex(,9575) @end smallexample
../singular_texi/reference.tex(,9576) @end table
../singular_texi/reference.tex(,9577) @c inserted refs from reference.doc:6479
../singular_texi/reference.tex(,9587) See
../singular_texi/reference.tex(,9588) @ref{ideal};
../singular_texi/reference.tex(,9589) @ref{intvec};
../singular_texi/reference.tex(,9590) @ref{qhweight}.
../singular_texi/reference.tex(,9592) @c end inserted refs from reference.doc:6479
../singular_texi/reference.tex(,9593) @c ---------------------------------------
../singular_texi/reference.tex(,9594) @node  write,  , weight, Functions
../singular_texi/reference.tex(,9595) @subsection write
../singular_texi/reference.tex(,9596) @cindex write
../singular_texi/reference.tex(,9597) @table @code
../singular_texi/reference.tex(,9598) @item @strong{Syntax:}
../singular_texi/reference.tex(,9599) @code{write (} link_expression@code{,} expression_list @code{)}
../singular_texi/reference.tex(,9600) @*for DBM links:
../singular_texi/reference.tex(,9601) @*@code{write (} link@code{,} string_expression@code{,} string_expression @code{)}
../singular_texi/reference.tex(,9602) @*@code{write (} link@code{,} string_expression @code{)}
../singular_texi/reference.tex(,9603) @item @strong{Type:}
../singular_texi/reference.tex(,9604) none
../singular_texi/reference.tex(,9605) @item @strong{Purpose:}
../singular_texi/reference.tex(,9606) writes data to a link.
../singular_texi/reference.tex(,9607) @*If the link is of type @code{ASCII}, all expressions are converted to
../singular_texi/reference.tex(,9608) strings  (and separated by a newline character) before they are
../singular_texi/reference.tex(,9609) written. As a consequence, only such values which can be converted to a
../singular_texi/reference.tex(,9610) string can be written to an  @code{ASCII} link.
../singular_texi/reference.tex(,9611) @*For MP links,
../singular_texi/reference.tex(,9612) ring-dependent expressions are written together with a ring
../singular_texi/reference.tex(,9613) description. To prevent an evaluation of the expression before it is
../singular_texi/reference.tex(,9614) written, the @code{quote} command (possibly together with @code{eval})
../singular_texi/reference.tex(,9615) can be used. A @code{write} blocks (i.e., does not return to the prompt),
../singular_texi/reference.tex(,9616) as long as a MPtcp link is not ready for writing.
../singular_texi/reference.tex(,9617) @*For DBM links, @code{write} with three arguments inserts the first
../singular_texi/reference.tex(,9618) string as key and the second string as value into the dbm data
../singular_texi/reference.tex(,9619) base.
../singular_texi/reference.tex(,9620) @*Called with two arguments, it deletes the entry with the key
../singular_texi/reference.tex(,9621) specified by the string from the data base.
../singular_texi/reference.tex(,9622) @item @strong{Example:}
../singular_texi/reference.tex(,9623) @smallexample
../singular_texi/reference.tex(,9624) // write the values of the variables f and i as strings into
../singular_texi/reference.tex(,9625) // the file "outfile" (overwrite it, if it exists)
../singular_texi/reference.tex(,9626) write(":w outfile",f,i);
../singular_texi/reference.tex(,9627) 
../singular_texi/reference.tex(,9628) // now append the string "that was f,i" (without the quotes)
../singular_texi/reference.tex(,9629) // at the end of the file "outfile"
../singular_texi/reference.tex(,9630) write(":a outfile","that was f,i");
../singular_texi/reference.tex(,9631) // alternatively, links could be used:
../singular_texi/reference.tex(,9632) link l=":a outfile"; l;
../singular_texi/reference.tex(,9633) // type : ASCII
../singular_texi/reference.tex(,9634) // mode : a
../singular_texi/reference.tex(,9635) // name : outfile
../singular_texi/reference.tex(,9636) // open : no
../singular_texi/reference.tex(,9637) // read : not ready
../singular_texi/reference.tex(,9638) // write: not ready
../singular_texi/reference.tex(,9639) write(l," that was f,i");
../singular_texi/reference.tex(,9640) // saving and retrieving data (ASCII format):
../singular_texi/reference.tex(,9641) ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,9642) ideal i=x+y,z3+22y;
../singular_texi/reference.tex(,9643) write(":w save_i",i);// this writes x+y,z3+22y to the file save_i
../singular_texi/reference.tex(,9644) ring r=32003,(x,y,z),dp;
../singular_texi/reference.tex(,9645) string s=read("save_i");   //creates the string x+y,z3+22y
../singular_texi/reference.tex(,9646) execute("ideal k="+s+";"); // this defines an ideal k which
../singular_texi/reference.tex(,9647)                            // is equal to i.
../singular_texi/reference.tex(,9648) // for large objects, the MP format and MPfile links are better:
../singular_texi/reference.tex(,9649) write("MPfile:w save_i.mp",i);
../singular_texi/reference.tex(,9650) def j=read("MPfile:r save_i.mp");
../singular_texi/reference.tex(,9651) @end smallexample
../singular_texi/reference.tex(,9652) @end table
../singular_texi/reference.tex(,9653) @c inserted refs from reference.doc:6545
../singular_texi/reference.tex(,9669) See
../singular_texi/reference.tex(,9670) @ref{Data types};
../singular_texi/reference.tex(,9671) @ref{dump};
../singular_texi/reference.tex(,9672) @ref{eval};
../singular_texi/reference.tex(,9673) @ref{link};
../singular_texi/reference.tex(,9674) @ref{print};
../singular_texi/reference.tex(,9675) @ref{printf};
../singular_texi/reference.tex(,9676) @ref{quote};
../singular_texi/reference.tex(,9677) @ref{read};
../singular_texi/reference.tex(,9678) @ref{short}.
../singular_texi/reference.tex(,9680) @c end inserted refs from reference.doc:6545
../singular_texi/reference.tex(,9681) 
../singular_texi/reference.tex(,9682) 
../singular_texi/reference.tex(,9683) @c ---------------------------------------
../singular_texi/reference.tex(,9684) @node Control structures, System variables, Functions, Functions and system variables
../singular_texi/reference.tex(,9685) @section Control structures
../singular_texi/reference.tex(,9686) @cindex Control structures
../singular_texi/reference.tex(,9687) @cindex block
../singular_texi/reference.tex(,9691) @menu
../singular_texi/reference.tex(,9692) * break::
../singular_texi/reference.tex(,9693) * breakpoint::
../singular_texi/reference.tex(,9694) * continue::
../singular_texi/reference.tex(,9695) * else::
../singular_texi/reference.tex(,9696) * export::
../singular_texi/reference.tex(,9697) * for::
../singular_texi/reference.tex(,9698) * if::
../singular_texi/reference.tex(,9699) * keepring::
../singular_texi/reference.tex(,9700) * quit::
../singular_texi/reference.tex(,9701) * return::
../singular_texi/reference.tex(,9702) * while::
../singular_texi/reference.tex(,9703) * ~::
../singular_texi/reference.tex(,9710) @end menu
../singular_texi/reference.tex(,9711) 
../singular_texi/reference.tex(,9712) A sequence of commands surrounded by curly brackets (@code{@{} and
../singular_texi/reference.tex(,9713) @code{@}}) is a so called block. Blocks are used in @sc{Singular} in
../singular_texi/reference.tex(,9714) order to define procedures and to collect commands belonging to
../singular_texi/reference.tex(,9715) @code{if}, @code{else}, @code{for} and @code{while} statements and to the
../singular_texi/reference.tex(,9716) @code{example} part in libraries. Even if
../singular_texi/reference.tex(,9717) the sequence of statements consists of only a single command it has to be
../singular_texi/reference.tex(,9718) surrounded by curly brackets!
../singular_texi/reference.tex(,9719) Variables which are defined inside a block
../singular_texi/reference.tex(,9720) are not local to that block. Note that there is no ending semicolon at
../singular_texi/reference.tex(,9721) the end of the block.
../singular_texi/reference.tex(,9722) @table @code
../singular_texi/reference.tex(,9723) @item @strong{Example:}
../singular_texi/reference.tex(,9724) @smallexample
../singular_texi/reference.tex(,9725) if ( i>j )
../singular_texi/reference.tex(,9726) @{
../singular_texi/reference.tex(,9727)   // This is the block
../singular_texi/reference.tex(,9728)   int temp;
../singular_texi/reference.tex(,9729)   temp=i;
../singular_texi/reference.tex(,9730)   i=j;
../singular_texi/reference.tex(,9731)   j=temp;
../singular_texi/reference.tex(,9732)   kill temp;
../singular_texi/reference.tex(,9733) @}
../singular_texi/reference.tex(,9734) @end smallexample
../singular_texi/reference.tex(,9735) @end table
../singular_texi/reference.tex(,9736) 
../singular_texi/reference.tex(,9737) @c ---------------------------------------
../singular_texi/reference.tex(,9738) @node break, breakpoint, Control structures, Control structures
../singular_texi/reference.tex(,9739) @subsection break
../singular_texi/reference.tex(,9740) @cindex break
../singular_texi/reference.tex(,9741) @table @code
../singular_texi/reference.tex(,9742) @item @strong{Syntax:}
../singular_texi/reference.tex(,9743) @code{break;}
../singular_texi/reference.tex(,9744) @item @strong{Purpose:}
../singular_texi/reference.tex(,9745) leaves the innermost @code{for} or @code{while} block.
../singular_texi/reference.tex(,9746) @item @strong{Example:}
../singular_texi/reference.tex(,9747) @smallexample
../singular_texi/reference.tex(,9748) while (1)
../singular_texi/reference.tex(,9749) @{
../singular_texi/reference.tex(,9750)   @dots{}
../singular_texi/reference.tex(,9751)   if ( @dots{} )
../singular_texi/reference.tex(,9752)   @{
../singular_texi/reference.tex(,9753)     break; // leave the while block
../singular_texi/reference.tex(,9754)   @}
../singular_texi/reference.tex(,9755) @}
../singular_texi/reference.tex(,9756) @end smallexample
../singular_texi/reference.tex(,9757) @end table
../singular_texi/reference.tex(,9758) @c inserted refs from reference.doc:6634
../singular_texi/reference.tex(,9768) See
../singular_texi/reference.tex(,9769) @ref{Control structures};
../singular_texi/reference.tex(,9770) @ref{for};
../singular_texi/reference.tex(,9771) @ref{while}.
../singular_texi/reference.tex(,9773) @c end inserted refs from reference.doc:6634
../singular_texi/reference.tex(,9774) @c ---------------------------------------
../singular_texi/reference.tex(,9775) @node breakpoint, continue, break, Control structures
../singular_texi/reference.tex(,9776) @subsection breakpoint
../singular_texi/reference.tex(,9777) @cindex breakpoint
../singular_texi/reference.tex(,9778) @table @code
../singular_texi/reference.tex(,9779) @item @strong{Syntax:}
../singular_texi/reference.tex(,9780) @code{breakpoint(} proc_name @code{);}
../singular_texi/reference.tex(,9781) @*@code{breakpoint(} proc_name@code{,} line_no @code{);}
../singular_texi/reference.tex(,9782) @item @strong{Purpose:}
../singular_texi/reference.tex(,9783) sets a breakpoint at the beginning of the specified procedure or
../singular_texi/reference.tex(,9784) at the given line.
../singular_texi/reference.tex(,9785) @strong{Note:} Line number 1 is the first line of a library (for
../singular_texi/reference.tex(,9786) procedures from libraries), resp.@: the line with the @code{@{}.
../singular_texi/reference.tex(,9787) @*A line number of -1 removes all breakpoint from that procedure.
../singular_texi/reference.tex(,9788) @item @strong{Example:}
../singular_texi/reference.tex(,9789) @smallexample
../singular_texi/reference.tex(,9790) @c reused example breakpoint reference.doc:6656 
../singular_texi/reference.tex(,9791) breakpoint(groebner);
../singular_texi/reference.tex(,9792) @expansion{} breakpoint 1, at line 163 in groebner
../singular_texi/reference.tex(,9793) breakpoint(groebner, 176);
../singular_texi/reference.tex(,9794) @expansion{} breakpoint 2, at line 176 in groebner
../singular_texi/reference.tex(,9795) breakpoint(groebner, -1);
../singular_texi/reference.tex(,9796) @expansion{} breakpoints in groebner deleted(0x6)
../singular_texi/reference.tex(,9797) @c end example breakpoint reference.doc:6656
../singular_texi/reference.tex(,9798) @end smallexample
../singular_texi/reference.tex(,9799) @end table
../singular_texi/reference.tex(,9800) @c inserted refs from reference.doc:6663
../singular_texi/reference.tex(,9809) See
../singular_texi/reference.tex(,9810) @ref{Source code debugger};
../singular_texi/reference.tex(,9811) @ref{~}.
../singular_texi/reference.tex(,9813) @c end inserted refs from reference.doc:6663
../singular_texi/reference.tex(,9814) @c ---------------------------------------
../singular_texi/reference.tex(,9815) @node continue, else, breakpoint, Control structures
../singular_texi/reference.tex(,9816) @subsection continue
../singular_texi/reference.tex(,9817) @cindex continue
../singular_texi/reference.tex(,9818) @table @code
../singular_texi/reference.tex(,9819) @item @strong{Syntax:}
../singular_texi/reference.tex(,9820) @code{continue;}
../singular_texi/reference.tex(,9821) @item @strong{Purpose:}
../singular_texi/reference.tex(,9822) skips the rest of the innermost @code{for} or @code{while} loop und jumps
../singular_texi/reference.tex(,9823) to the beginning of the block. This command is only valid inside a
../singular_texi/reference.tex(,9824) @code{for} or a @code{while} construction.
../singular_texi/reference.tex(,9825) @item @strong{Note:}
../singular_texi/reference.tex(,9826) Unlike the C-construct it @strong{does not execute the increment statement}.
../singular_texi/reference.tex(,9827) The command @code{continue} is mainly for internal use.
../singular_texi/reference.tex(,9828) @item @strong{Example:}
../singular_texi/reference.tex(,9829) @smallexample
../singular_texi/reference.tex(,9830) for (int i = 1 ; i<=10; i=i+1)
../singular_texi/reference.tex(,9831) @{
../singular_texi/reference.tex(,9832)    @dots{}
../singular_texi/reference.tex(,9833)    if (i==3) @{ i=8;continue; @}
../singular_texi/reference.tex(,9834)      // skip the rest if i is 3 and
../singular_texi/reference.tex(,9835)      // continue with the next i: 8
../singular_texi/reference.tex(,9836)    i;
../singular_texi/reference.tex(,9837) @}
../singular_texi/reference.tex(,9838) @expansion{} 1
../singular_texi/reference.tex(,9839) @expansion{} 2
../singular_texi/reference.tex(,9840) @expansion{} 8
../singular_texi/reference.tex(,9841) @expansion{} 9
../singular_texi/reference.tex(,9842) @expansion{} 10
../singular_texi/reference.tex(,9843) @end smallexample
../singular_texi/reference.tex(,9844) @end table
../singular_texi/reference.tex(,9845) @c inserted refs from reference.doc:6699
../singular_texi/reference.tex(,9855) See
../singular_texi/reference.tex(,9856) @ref{Control structures};
../singular_texi/reference.tex(,9857) @ref{for};
../singular_texi/reference.tex(,9858) @ref{while}.
../singular_texi/reference.tex(,9860) @c end inserted refs from reference.doc:6699
../singular_texi/reference.tex(,9861) @c ---------------------------------------
../singular_texi/reference.tex(,9862) @node else, export, continue, Control structures
../singular_texi/reference.tex(,9863) @subsection else
../singular_texi/reference.tex(,9864) @table @code
../singular_texi/reference.tex(,9865) @item @strong{Syntax:}
../singular_texi/reference.tex(,9866) @code{if (} boolean_expression @code{)} true_block @code{else} false_block
../singular_texi/reference.tex(,9867) @item @strong{Purpose:}
../singular_texi/reference.tex(,9868) executes false_block if the boolean_expression of the @code{if} statement
../singular_texi/reference.tex(,9869) is false. This command is only valid in combination with an @code{if}
../singular_texi/reference.tex(,9870) command.
../singular_texi/reference.tex(,9871) @item @strong{Example:}
../singular_texi/reference.tex(,9872) @smallexample
../singular_texi/reference.tex(,9873) int i=3;
../singular_texi/reference.tex(,9874) if (i > 5)
../singular_texi/reference.tex(,9875) @{
../singular_texi/reference.tex(,9876)   "i is bigger than 5";
../singular_texi/reference.tex(,9877) @}
../singular_texi/reference.tex(,9878) else
../singular_texi/reference.tex(,9879) @{
../singular_texi/reference.tex(,9880)   "i is smaller than 6";
../singular_texi/reference.tex(,9881) @}
../singular_texi/reference.tex(,9882) @expansion{} i is smaller than 6
../singular_texi/reference.tex(,9883) @end smallexample
../singular_texi/reference.tex(,9884) @end table
../singular_texi/reference.tex(,9885) @c inserted refs from reference.doc:6729
../singular_texi/reference.tex(,9895) See
../singular_texi/reference.tex(,9896) @ref{Control structures};
../singular_texi/reference.tex(,9897) @ref{boolean expressions};
../singular_texi/reference.tex(,9898) @ref{if}.
../singular_texi/reference.tex(,9900) @c end inserted refs from reference.doc:6729
../singular_texi/reference.tex(,9901) @c ---------------------------------------
../singular_texi/reference.tex(,9906) @node export, for, else, Control structures
../singular_texi/reference.tex(,9908) @subsection export
../singular_texi/reference.tex(,9909) @cindex export
../singular_texi/reference.tex(,9910) @table @code
../singular_texi/reference.tex(,9911) @item @strong{Syntax:}
../singular_texi/reference.tex(,9912) @code{export} name @code{;}
../singular_texi/reference.tex(,9913) @*@code{export} list_of_names @code{;}
../singular_texi/reference.tex(,9914) @item @strong{Purpose:}
../singular_texi/reference.tex(,9915) converts a local variable of a procedure to a global one.
../singular_texi/reference.tex(,9916) @item @strong{Note:}
../singular_texi/reference.tex(,9917) Objects defined in a ring are not automatically exported
../singular_texi/reference.tex(,9918) when exporting the ring (use @code{keepring} instead).
../singular_texi/reference.tex(,9919) @item @strong{Example:}
../singular_texi/reference.tex(,9920) @smallexample
../singular_texi/reference.tex(,9921) proc p1
../singular_texi/reference.tex(,9922) @{
../singular_texi/reference.tex(,9923)   int i,j;
../singular_texi/reference.tex(,9924)   export(i);
../singular_texi/reference.tex(,9925)   intmat m;
../singular_texi/reference.tex(,9926)   listvar();
../singular_texi/reference.tex(,9927)   export(m);
../singular_texi/reference.tex(,9928) @}
../singular_texi/reference.tex(,9929) p1();
../singular_texi/reference.tex(,9930) @expansion{} // m                    [1]  intmat 1 x 1
../singular_texi/reference.tex(,9931) @expansion{} // j                    [1]  int 0
../singular_texi/reference.tex(,9932) @expansion{} // i                    [0]  int 0
../singular_texi/reference.tex(,9933) listvar();
../singular_texi/reference.tex(,9934) @expansion{} // m                    [0]  intmat 1 x 1
../singular_texi/reference.tex(,9935) @expansion{} // i                    [0]  int 0
../singular_texi/reference.tex(,9936) @end smallexample
../singular_texi/reference.tex(,9937) @end table
../singular_texi/reference.tex(,9938) 
../singular_texi/reference.tex(,9956) @c inserted refs from reference.doc:6780
../singular_texi/reference.tex(,9964) See
../singular_texi/reference.tex(,9965) @ref{keepring}.
../singular_texi/reference.tex(,9967) @c end inserted refs from reference.doc:6780
../singular_texi/reference.tex(,9969) @c ---------------------------------------
../singular_texi/reference.tex(,10198) @c ---------------------------------------
../singular_texi/reference.tex(,10203) @node for, if, export, Control structures
../singular_texi/reference.tex(,10205) @subsection for
../singular_texi/reference.tex(,10206) @cindex for
../singular_texi/reference.tex(,10207) @table @code
../singular_texi/reference.tex(,10208) @item @strong{Syntax:}
../singular_texi/reference.tex(,10209) @code{for (} init_command@code{;}
../singular_texi/reference.tex(,10210) boolean_expression@code{;}
../singular_texi/reference.tex(,10211) iterate_commands@code{)} block
../singular_texi/reference.tex(,10212) @item @strong{Purpose:}
../singular_texi/reference.tex(,10213) repetitive, conditional execution of a command block.
../singular_texi/reference.tex(,10214) @*The command init_command is executed first. Then boolean_expression is
../singular_texi/reference.tex(,10215) evaluated. If its value is TRUE the block is executed, otherwise the
../singular_texi/reference.tex(,10216) @code{for} statement is complete. After each execution of the block, the
../singular_texi/reference.tex(,10217) command iterate_command is executed and boolean_expression is
../singular_texi/reference.tex(,10218) evaluated. This is repeated until boolean_expression evaluates to FALSE.
../singular_texi/reference.tex(,10219) @*The command @code{break;} leaves the innermost @code{for} construct.
../singular_texi/reference.tex(,10220) @item @strong{Example:}
../singular_texi/reference.tex(,10221) @smallexample
../singular_texi/reference.tex(,10222) // sum of 1 to 10:
../singular_texi/reference.tex(,10223) int s=0;
../singular_texi/reference.tex(,10224) for (int i=1; i<=10; i=i+1)
../singular_texi/reference.tex(,10225) @{
../singular_texi/reference.tex(,10226)    s=s+i;
../singular_texi/reference.tex(,10227) @}
../singular_texi/reference.tex(,10228) s;
../singular_texi/reference.tex(,10229) @expansion{} 55
../singular_texi/reference.tex(,10230) @end smallexample
../singular_texi/reference.tex(,10231) @end table
../singular_texi/reference.tex(,10232) @c inserted refs from reference.doc:7004
../singular_texi/reference.tex(,10245) See
../singular_texi/reference.tex(,10246) @ref{Control structures};
../singular_texi/reference.tex(,10247) @ref{boolean expressions};
../singular_texi/reference.tex(,10248) @ref{break};
../singular_texi/reference.tex(,10249) @ref{continue};
../singular_texi/reference.tex(,10250) @ref{if};
../singular_texi/reference.tex(,10251) @ref{while}.
../singular_texi/reference.tex(,10253) @c end inserted refs from reference.doc:7004
../singular_texi/reference.tex(,10254) @c ---------------------------------------
../singular_texi/reference.tex(,10255) @node if, keepring, for, Control structures
../singular_texi/reference.tex(,10256) @subsection if
../singular_texi/reference.tex(,10257) @cindex if
../singular_texi/reference.tex(,10258) @cindex else
../singular_texi/reference.tex(,10259) @table @code
../singular_texi/reference.tex(,10260) @item @strong{Syntax:}
../singular_texi/reference.tex(,10261) @code{if (} boolean_expression @code{)} true_block
../singular_texi/reference.tex(,10262) @*@code{if (} boolean_expression @code{)} true_block @code{else} false_block
../singular_texi/reference.tex(,10263) @item @strong{Purpose:}
../singular_texi/reference.tex(,10264) executes true_block if the boolean condition is true. If the @code{if}
../singular_texi/reference.tex(,10265) statement is followed by an @code{else} statement and the boolean
../singular_texi/reference.tex(,10266) condition is false, then false_block is executed.
../singular_texi/reference.tex(,10267) @item @strong{Example:}
../singular_texi/reference.tex(,10268) @smallexample
../singular_texi/reference.tex(,10269) int i = 9;
../singular_texi/reference.tex(,10270) matrix m[i][i];
../singular_texi/reference.tex(,10271) if (i > 5 and typeof(m) == "matrix")
../singular_texi/reference.tex(,10272) @{
../singular_texi/reference.tex(,10273)   m[i][i] = i;
../singular_texi/reference.tex(,10274) @}
../singular_texi/reference.tex(,10275) @end smallexample
../singular_texi/reference.tex(,10276) @end table
../singular_texi/reference.tex(,10277) @c inserted refs from reference.doc:7036
../singular_texi/reference.tex(,10288) See
../singular_texi/reference.tex(,10289) @ref{Control structures};
../singular_texi/reference.tex(,10290) @ref{boolean expressions};
../singular_texi/reference.tex(,10291) @ref{break};
../singular_texi/reference.tex(,10292) @ref{else}.
../singular_texi/reference.tex(,10294) @c end inserted refs from reference.doc:7036
../singular_texi/reference.tex(,10295) @c ---------------------------------------
../singular_texi/reference.tex(,10296) @node keepring, quit, if, Control structures
../singular_texi/reference.tex(,10297) @subsection keepring
../singular_texi/reference.tex(,10298) @cindex keepring
../singular_texi/reference.tex(,10299) @table @code
../singular_texi/reference.tex(,10300) @item @strong{Syntax:}
../singular_texi/reference.tex(,10301) @code{keepring} name @code{;}
../singular_texi/reference.tex(,10302) @item @strong{Purpose:}
../singular_texi/reference.tex(,10303) moves the specified ring to the next (upper) level. This command can only
../singular_texi/reference.tex(,10304) be used inside of procedures and it should be the last command before the
../singular_texi/reference.tex(,10305) @code{return} statement. There it provides the possibility to keep
../singular_texi/reference.tex(,10306) a ring which is local to the procedure (and its objects) accessible after
../singular_texi/reference.tex(,10307) the procedure ended without making the ring global.
../singular_texi/reference.tex(,10308) @item @strong{Example:}
../singular_texi/reference.tex(,10309) @smallexample
../singular_texi/reference.tex(,10310) proc P1
../singular_texi/reference.tex(,10311) @{
../singular_texi/reference.tex(,10312)   ring r=0,x,dp;
../singular_texi/reference.tex(,10313)   keepring r;
../singular_texi/reference.tex(,10314) @}
../singular_texi/reference.tex(,10315) proc P2
../singular_texi/reference.tex(,10316) @{
../singular_texi/reference.tex(,10317)   "inside P2: " + nameof(basering);
../singular_texi/reference.tex(,10318)   P1();
../singular_texi/reference.tex(,10319)   "inside P2, after call of P1: " + nameof(basering);
../singular_texi/reference.tex(,10320) @}
../singular_texi/reference.tex(,10321) ring r1= 0,y,dp;
../singular_texi/reference.tex(,10322) P2();
../singular_texi/reference.tex(,10323) @expansion{} inside P2: r1
../singular_texi/reference.tex(,10324) @expansion{} inside P2, after call of P1: r
../singular_texi/reference.tex(,10325) "at top level: " + nameof(basering);
../singular_texi/reference.tex(,10326) @expansion{} at top level: r1
../singular_texi/reference.tex(,10327) @end smallexample
../singular_texi/reference.tex(,10328) @end table
../singular_texi/reference.tex(,10329) @c inserted refs from reference.doc:7077
../singular_texi/reference.tex(,10337) See
../singular_texi/reference.tex(,10338) @ref{ring}.
../singular_texi/reference.tex(,10340) @c end inserted refs from reference.doc:7077
../singular_texi/reference.tex(,10341) @c ---------------------------------------
../singular_texi/reference.tex(,10342) @node quit, return, keepring, Control structures
../singular_texi/reference.tex(,10343) @subsection quit
../singular_texi/reference.tex(,10344) @cindex quit
../singular_texi/reference.tex(,10345) @cindex exit
../singular_texi/reference.tex(,10346) @table @code
../singular_texi/reference.tex(,10347) @item @strong{Syntax:}
../singular_texi/reference.tex(,10348) @code{quit;}
../singular_texi/reference.tex(,10349) @item @strong{Purpose:}
../singular_texi/reference.tex(,10350) quits @sc{Singular};
../singular_texi/reference.tex(,10351) works also from inside a procedure. The commands @code{quit} and
../singular_texi/reference.tex(,10352) @code{exit} are synonymous.
../singular_texi/reference.tex(,10353) @item @strong{Example:}
../singular_texi/reference.tex(,10354) @smallexample
../singular_texi/reference.tex(,10355)   quit;
../singular_texi/reference.tex(,10356) @end smallexample
../singular_texi/reference.tex(,10357) @end table
../singular_texi/reference.tex(,10358) @c ---------------------------------------
../singular_texi/reference.tex(,10359) @node return, while, quit, Control structures
../singular_texi/reference.tex(,10360) @subsection return
../singular_texi/reference.tex(,10361) @cindex return
../singular_texi/reference.tex(,10362) @table @code
../singular_texi/reference.tex(,10363) @item @strong{Syntax:}
../singular_texi/reference.tex(,10364) @code{return (} expression_list @code{);}
../singular_texi/reference.tex(,10365) @*@code{return ();}
../singular_texi/reference.tex(,10366) @item @strong{Type:}
../singular_texi/reference.tex(,10367) any
../singular_texi/reference.tex(,10368) @item @strong{Purpose:}
../singular_texi/reference.tex(,10369) returns the result(s) of a procedure and can only be used inside a
../singular_texi/reference.tex(,10370) procedure. Note that the brackets are required even if no return value
../singular_texi/reference.tex(,10371) is given.
../singular_texi/reference.tex(,10372) @item @strong{Example:}
../singular_texi/reference.tex(,10373) @smallexample
../singular_texi/reference.tex(,10374) proc p2
../singular_texi/reference.tex(,10375) @{
../singular_texi/reference.tex(,10376)   int i,j;
../singular_texi/reference.tex(,10377)   for(i=1;i<=10;i++)
../singular_texi/reference.tex(,10378)   @{
../singular_texi/reference.tex(,10379)     j=j+i;
../singular_texi/reference.tex(,10380)   @}
../singular_texi/reference.tex(,10381)   return(j);
../singular_texi/reference.tex(,10382) @}
../singular_texi/reference.tex(,10383) // can also return an expression list, i.e., more than one value
../singular_texi/reference.tex(,10384) proc tworeturn ()
../singular_texi/reference.tex(,10385) @{ return (1,2); @}
../singular_texi/reference.tex(,10386) int i,j = tworeturn();
../singular_texi/reference.tex(,10387) // return type may even depend on the input
../singular_texi/reference.tex(,10388) proc type_return (int i)
../singular_texi/reference.tex(,10389) @{
../singular_texi/reference.tex(,10390)   if (i > 0) @{return (i);@}
../singular_texi/reference.tex(,10391)   else @{return (list(i));@}
../singular_texi/reference.tex(,10392) @}
../singular_texi/reference.tex(,10393) // then we need def type (or list) to collect value
../singular_texi/reference.tex(,10394) def t1 = type_return(1);
../singular_texi/reference.tex(,10395) def t2 = type_return(-1);
../singular_texi/reference.tex(,10396) @end smallexample
../singular_texi/reference.tex(,10397) @end table
../singular_texi/reference.tex(,10398) @c inserted refs from reference.doc:7138
../singular_texi/reference.tex(,10407) See
../singular_texi/reference.tex(,10408) @ref{Data types};
../singular_texi/reference.tex(,10409) @ref{proc}.
../singular_texi/reference.tex(,10411) @c end inserted refs from reference.doc:7138
../singular_texi/reference.tex(,10412) @c ---------------------------------------
../singular_texi/reference.tex(,10413) @node while, ~ , return, Control structures
../singular_texi/reference.tex(,10414) @subsection while
../singular_texi/reference.tex(,10415) @cindex while
../singular_texi/reference.tex(,10416) @table @code
../singular_texi/reference.tex(,10417) @item @strong{Syntax:}
../singular_texi/reference.tex(,10418) @code{while (}boolean_expression@code{)} block
../singular_texi/reference.tex(,10419) @item @strong{Purpose:}
../singular_texi/reference.tex(,10420) repetitive, conditional execution of block.
../singular_texi/reference.tex(,10421) @*The boolean_expression is evaluated and if its value is TRUE, the
../singular_texi/reference.tex(,10422) block gets executed. This is repeated until boolean_expression evaluates
../singular_texi/reference.tex(,10423) to FALSE.  The command @code{break} leaves the innermost @code{while}
../singular_texi/reference.tex(,10424) construction.
../singular_texi/reference.tex(,10425) @item @strong{Example:}
../singular_texi/reference.tex(,10426) @smallexample
../singular_texi/reference.tex(,10427) int i = 9;
../singular_texi/reference.tex(,10428) while (i>0)
../singular_texi/reference.tex(,10429) @{
../singular_texi/reference.tex(,10430)    // @dots{} // do something for i=9, 8, ..., 1
../singular_texi/reference.tex(,10431)    i = i - 1;
../singular_texi/reference.tex(,10432) @}
../singular_texi/reference.tex(,10433) while (1)
../singular_texi/reference.tex(,10434) @{
../singular_texi/reference.tex(,10435)    // @dots{}   // do something forever
../singular_texi/reference.tex(,10436)    if (i == -5) // but leave the loop if i is -5
../singular_texi/reference.tex(,10437)    @{
../singular_texi/reference.tex(,10438)      break;
../singular_texi/reference.tex(,10439)    @}
../singular_texi/reference.tex(,10440) @}
../singular_texi/reference.tex(,10441) @end smallexample
../singular_texi/reference.tex(,10442) @end table
../singular_texi/reference.tex(,10443) @c inserted refs from reference.doc:7174
../singular_texi/reference.tex(,10453) See
../singular_texi/reference.tex(,10454) @ref{Control structures};
../singular_texi/reference.tex(,10455) @ref{boolean expressions};
../singular_texi/reference.tex(,10456) @ref{break}.
../singular_texi/reference.tex(,10458) @c end inserted refs from reference.doc:7174
../singular_texi/reference.tex(,10459) 
../singular_texi/reference.tex(,10460) @c ---------------------------------------
../singular_texi/reference.tex(,10461) @node ~, , while, Control structures
../singular_texi/reference.tex(,10462) @subsection ~ (break point)
../singular_texi/reference.tex(,10463) @cindex ~
../singular_texi/reference.tex(,10464) @cindex break point
../singular_texi/reference.tex(,10465) @table @code
../singular_texi/reference.tex(,10466) @item @strong{Syntax:}
../singular_texi/reference.tex(,10467) @code{~;}
../singular_texi/reference.tex(,10468) @item @strong{Purpose:}
../singular_texi/reference.tex(,10469) sets a break point. Whenever @sc{Singular} reaches the command @code{~;}
../singular_texi/reference.tex(,10470) in a sequence of commands it prompts for input. The user may now input
../singular_texi/reference.tex(,10471) lines of @sc{Singular} commands. The line length cannot exceed 80
../singular_texi/reference.tex(,10472) characters.
../singular_texi/reference.tex(,10473) @sc{Singular} proceeds with the execution of the command following @code{~;}
../singular_texi/reference.tex(,10474) as soon as it receives an empty line.
../singular_texi/reference.tex(,10475) @item @strong{Example:}
../singular_texi/reference.tex(,10476) @smallexample
../singular_texi/reference.tex(,10477) proc t
../singular_texi/reference.tex(,10478) @{
../singular_texi/reference.tex(,10479)   int i=2;
../singular_texi/reference.tex(,10480)   ~;
../singular_texi/reference.tex(,10481)   return(i+1);
../singular_texi/reference.tex(,10482) @}
../singular_texi/reference.tex(,10483) t();
../singular_texi/reference.tex(,10484) @expansion{} -- break point in t --
../singular_texi/reference.tex(,10485) @expansion{} -- 0: called    from STDIN --
../singular_texi/reference.tex(,10486) // here local variables of the procedure can be accessed
../singular_texi/reference.tex(,10487) i;
../singular_texi/reference.tex(,10488) @expansion{} 2
../singular_texi/reference.tex(,10489) @expansion{} -- break point in t --
../singular_texi/reference.tex(,10490) 
../singular_texi/reference.tex(,10491) @expansion{} 3
../singular_texi/reference.tex(,10492) @end smallexample
../singular_texi/reference.tex(,10493) @end table
../singular_texi/reference.tex(,10494) @c inserted refs from reference.doc:7215
../singular_texi/reference.tex(,10502) See
../singular_texi/reference.tex(,10503) @ref{Break points}.
../singular_texi/reference.tex(,10505) @c end inserted refs from reference.doc:7215
../singular_texi/reference.tex(,10506) 
../singular_texi/reference.tex(,10507) @c ---------------------------------------
../singular_texi/reference.tex(,10508) @node System variables,  , Control structures, Functions and system variables
../singular_texi/reference.tex(,10509) @section System variables
../singular_texi/reference.tex(,10510) @cindex System variables
../singular_texi/reference.tex(,10514) @menu
../singular_texi/reference.tex(,10515) * degBound::
../singular_texi/reference.tex(,10516) * echo::
../singular_texi/reference.tex(,10517) * minpoly::
../singular_texi/reference.tex(,10518) * multBound::
../singular_texi/reference.tex(,10519) * noether::
../singular_texi/reference.tex(,10520) * printlevel::
../singular_texi/reference.tex(,10521) * short::
../singular_texi/reference.tex(,10522) * timer::
../singular_texi/reference.tex(,10523) * TRACE var::
../singular_texi/reference.tex(,10524) * rtimer::
../singular_texi/reference.tex(,10525) * voice::
../singular_texi/reference.tex(,10526) @end menu
../singular_texi/reference.tex(,10527) @c ---------------------------------------
../singular_texi/reference.tex(,10528) @c @node alternating, degBound, System variables, System variables
../singular_texi/reference.tex(,10529) @c @subsection alternating
../singular_texi/reference.tex(,10530) @c @cindex alternating
../singular_texi/reference.tex(,10531) @c @table @code
../singular_texi/reference.tex(,10532) @c @item @strong{Syntax:}
../singular_texi/reference.tex(,10533) @c @code{alternating =} int_expression@code{;}
../singular_texi/reference.tex(,10534) @c @*int_variable @code{= alternating;}
../singular_texi/reference.tex(,10535) @c @item @strong{Purpose:}
../singular_texi/reference.tex(,10536) @c describes the position of the first alternating variable in the current
../singular_texi/reference.tex(,10537) @c basering, thus creating the tensor
../singular_texi/reference.tex(,10538) @c product of a polynomial ring with an exterior algebra.
../singular_texi/reference.tex(,10539) @c @*Remark: Setting @code{alternating=1;} defines the exterior algebra.
../singular_texi/reference.tex(,10540) @c @item @strong{Note:}
../singular_texi/reference.tex(,10541) @c These algebras are only available in those versions of
../singular_texi/reference.tex(,10542) @c @sc{Singular} which are compiled with the SRING option.
../singular_texi/reference.tex(,10543) @c The SRING version is
../singular_texi/reference.tex(,10544) @c significantly slower for usual (commutative) ring operations.
../singular_texi/reference.tex(,10545) @c @item @strong{Example:}
../singular_texi/reference.tex(,10546) @c @example
../singular_texi/reference.tex(,10547) @c   // define the exterior algebra in 3 variables x, y, z
../singular_texi/reference.tex(,10548) @c   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,10549) @c   alternating=1;
../singular_texi/reference.tex(,10550) @c   y*x;
../singular_texi/reference.tex(,10551) @c   @expansion{} -1*xy
../singular_texi/reference.tex(,10552) @c @end example
../singular_texi/reference.tex(,10553) @c @end table
../singular_texi/reference.tex(,10554) @c @c ref
../singular_texi/reference.tex(,10555) @c See
../singular_texi/reference.tex(,10556) @c @ref{ring};
../singular_texi/reference.tex(,10557) @c @ref{int expressions}.
../singular_texi/reference.tex(,10558) @c @c ref
../singular_texi/reference.tex(,10559) @c @c -----------------------------------------------------
../singular_texi/reference.tex(,10560) @node degBound, echo, System variables, System variables
../singular_texi/reference.tex(,10561) @subsection degBound
../singular_texi/reference.tex(,10562) @cindex degBound
../singular_texi/reference.tex(,10563) @table @code
../singular_texi/reference.tex(,10564) @item @strong{Type:}
../singular_texi/reference.tex(,10565) int
../singular_texi/reference.tex(,10566) @item @strong{Purpose:}
../singular_texi/reference.tex(,10567) The standard basis computation is stopped if the total
../singular_texi/reference.tex(,10568) (weighted) degree
../singular_texi/reference.tex(,10569) exceeds @code{degBound}.
../singular_texi/reference.tex(,10570) @* @code{degBound} should not be used for a global ordering with inhomogeneous
../singular_texi/reference.tex(,10571) input.
../singular_texi/reference.tex(,10572) @*Reset this bound by setting @code{degBound} to 0.
../singular_texi/reference.tex(,10573) @item @strong{Example:}
../singular_texi/reference.tex(,10574) @smallexample
../singular_texi/reference.tex(,10575) degBound = 7;
../singular_texi/reference.tex(,10576) option();
../singular_texi/reference.tex(,10577) @expansion{} //options for 'std'-command: degBound
../singular_texi/reference.tex(,10578) ideal j=std(i);
../singular_texi/reference.tex(,10579) degBound;
../singular_texi/reference.tex(,10580) @expansion{} 7
../singular_texi/reference.tex(,10581) degBound = 0; //resets degree bound to infinity
../singular_texi/reference.tex(,10582) @end smallexample
../singular_texi/reference.tex(,10583) @end table
../singular_texi/reference.tex(,10584) @c inserted refs from reference.doc:7297
../singular_texi/reference.tex(,10595) See
../singular_texi/reference.tex(,10596) @ref{deg};
../singular_texi/reference.tex(,10597) @ref{int};
../singular_texi/reference.tex(,10598) @ref{option};
../singular_texi/reference.tex(,10599) @ref{std}.
../singular_texi/reference.tex(,10601) @c end inserted refs from reference.doc:7297
../singular_texi/reference.tex(,10602) @c -----------------------------------------------------
../singular_texi/reference.tex(,10603) @node echo, minpoly, degBound, System variables
../singular_texi/reference.tex(,10604) @subsection echo
../singular_texi/reference.tex(,10605) @cindex echo
../singular_texi/reference.tex(,10606) @table @code
../singular_texi/reference.tex(,10607) @item @strong{Type:}
../singular_texi/reference.tex(,10608) int
../singular_texi/reference.tex(,10609) @item @strong{Purpose:}
../singular_texi/reference.tex(,10610) input is echoed if @code{echo} >= @code{voice}.
../singular_texi/reference.tex(,10611) @*@code{echo} is a local setting for a procedure and defaulted to 0.
../singular_texi/reference.tex(,10612) @*@code{echo} does not affect the output of commands.
../singular_texi/reference.tex(,10613) @item @strong{Example:}
../singular_texi/reference.tex(,10614) @c this example cannot be a computed one - echo interferes with -e
../singular_texi/reference.tex(,10615) @smallexample
../singular_texi/reference.tex(,10616) echo = 1;
../singular_texi/reference.tex(,10617) int i = echo;
../singular_texi/reference.tex(,10618) @expansion{} int i = echo;
../singular_texi/reference.tex(,10619) @end smallexample
../singular_texi/reference.tex(,10620) @end table
../singular_texi/reference.tex(,10621) @c inserted refs from reference.doc:7323
../singular_texi/reference.tex(,10630) See
../singular_texi/reference.tex(,10631) @ref{int};
../singular_texi/reference.tex(,10632) @ref{voice}.
../singular_texi/reference.tex(,10634) @c end inserted refs from reference.doc:7323
../singular_texi/reference.tex(,10635) @c -----------------------------------------------------
../singular_texi/reference.tex(,10636) @node minpoly, multBound, echo, System variables
../singular_texi/reference.tex(,10637) @subsection minpoly
../singular_texi/reference.tex(,10638) @cindex minpoly
../singular_texi/reference.tex(,10639) @table @code
../singular_texi/reference.tex(,10640) @item @strong{Type:}
../singular_texi/reference.tex(,10641) number
../singular_texi/reference.tex(,10642) @item @strong{Purpose:}
../singular_texi/reference.tex(,10643) describes the coefficient field of the current basering as
../singular_texi/reference.tex(,10644) an algebraic extension with the minimal polynomial equal to @code{minpoly}.
../singular_texi/reference.tex(,10645) Setting the @code{minpoly} should be the first command after
../singular_texi/reference.tex(,10646) defining the ring.
../singular_texi/reference.tex(,10647) @item @strong{Note:}
../singular_texi/reference.tex(,10648) The minimal polynomial has to be specified in the syntax of a polynomial.
../singular_texi/reference.tex(,10649) Its variable is not one of the ring variables, but the algebraic element
../singular_texi/reference.tex(,10650) which is being adjoined to the field.
../singular_texi/reference.tex(,10651) Algebraic extensions in @sc{singular} are only possible over the rational
../singular_texi/reference.tex(,10652) numbers or over Z/p, p a prime number.
../singular_texi/reference.tex(,10653) @c @*@strong{Warning:}
../singular_texi/reference.tex(,10654) @*@sc{Singular} does not check whether the given
../singular_texi/reference.tex(,10655) polynomial is irreducible! It can be checked in advance with the
../singular_texi/reference.tex(,10656) function @code{factorize} (@pxref{factorize}).
../singular_texi/reference.tex(,10657) @item @strong{Example:}
../singular_texi/reference.tex(,10658) @smallexample
../singular_texi/reference.tex(,10659) @c reused example minpoly reference.doc:7352 
../singular_texi/reference.tex(,10660)   //(Q[i]/(i^2+1))[x,y,z]:
../singular_texi/reference.tex(,10661)   ring Cxyz=(0,i),(x,y,z),dp;
../singular_texi/reference.tex(,10662)   minpoly=i^2+1;
../singular_texi/reference.tex(,10663)   i2;  //this is a number, not a poly
../singular_texi/reference.tex(,10664) @expansion{} -1
../singular_texi/reference.tex(,10665) @c end example minpoly reference.doc:7352
../singular_texi/reference.tex(,10666) @end smallexample
../singular_texi/reference.tex(,10667) @end table
../singular_texi/reference.tex(,10668) @c inserted refs from reference.doc:7360
../singular_texi/reference.tex(,10677) See
../singular_texi/reference.tex(,10678) @ref{factorize};
../singular_texi/reference.tex(,10679) @ref{ring}.
../singular_texi/reference.tex(,10681) @c end inserted refs from reference.doc:7360
../singular_texi/reference.tex(,10682) @c -----------------------------------------------------
../singular_texi/reference.tex(,10683) @node multBound, noether, minpoly, System variables
../singular_texi/reference.tex(,10684) @subsection multBound
../singular_texi/reference.tex(,10685) @cindex multBound
../singular_texi/reference.tex(,10686) @table @code
../singular_texi/reference.tex(,10687) @item @strong{Type:}
../singular_texi/reference.tex(,10688) int
../singular_texi/reference.tex(,10689) @item @strong{Purpose:}
../singular_texi/reference.tex(,10690) The standard basis computation is stopped if the ideal is
../singular_texi/reference.tex(,10691) zero-dimensional in a ring with local ordering
../singular_texi/reference.tex(,10692) and its multiplicity (@code{mult}) is lower than @code{multBound}.
../singular_texi/reference.tex(,10693) @*Reset this bound by setting @code{multBound} to 0.
../singular_texi/reference.tex(,10694) @item @strong{Example:}
../singular_texi/reference.tex(,10695) @smallexample
../singular_texi/reference.tex(,10696) multBound = 20;
../singular_texi/reference.tex(,10697) option();
../singular_texi/reference.tex(,10698) @expansion{}    //options for 'std'-command: multBound
../singular_texi/reference.tex(,10699) ideal j=std(i);
../singular_texi/reference.tex(,10700) multBound;
../singular_texi/reference.tex(,10701) @expansion{} 20
../singular_texi/reference.tex(,10702) multBound = 0;  //disables multBound
../singular_texi/reference.tex(,10703) @end smallexample
../singular_texi/reference.tex(,10704) @end table
../singular_texi/reference.tex(,10705) @c inserted refs from reference.doc:7388
../singular_texi/reference.tex(,10716) See
../singular_texi/reference.tex(,10717) @ref{int};
../singular_texi/reference.tex(,10718) @ref{mult};
../singular_texi/reference.tex(,10719) @ref{option};
../singular_texi/reference.tex(,10720) @ref{std}.
../singular_texi/reference.tex(,10722) @c end inserted refs from reference.doc:7388
../singular_texi/reference.tex(,10723) @c -----------------------------------------------------
../singular_texi/reference.tex(,10724) @node noether, printlevel, multBound, System variables
../singular_texi/reference.tex(,10725) @subsection noether
../singular_texi/reference.tex(,10726) @cindex noether
../singular_texi/reference.tex(,10727) @table @code
../singular_texi/reference.tex(,10728) @item @strong{Type:}
../singular_texi/reference.tex(,10729) poly
../singular_texi/reference.tex(,10730) @item @strong{Purpose:}
../singular_texi/reference.tex(,10731) The standard basis computation in local rings
../singular_texi/reference.tex(,10732) cuts off  all monomials above
../singular_texi/reference.tex(,10733) (in the sense of the monomial ordering)
../singular_texi/reference.tex(,10734) the monomial @code{noether} during the computation.
../singular_texi/reference.tex(,10735) @*Reset @code{noether} by setting @code{noether} to 0.
../singular_texi/reference.tex(,10736) @item @strong{Example:}
../singular_texi/reference.tex(,10737) @smallexample
../singular_texi/reference.tex(,10738) @c reused example noether reference.doc:7410 
../singular_texi/reference.tex(,10739)   ring R=32003,(x,y,z),ds;
../singular_texi/reference.tex(,10740)   ideal i=x2+y12,y13;
../singular_texi/reference.tex(,10741)   std(i);
../singular_texi/reference.tex(,10742) @expansion{} _[1]=x2+y12
../singular_texi/reference.tex(,10743) @expansion{} _[2]=y13
../singular_texi/reference.tex(,10744)   noether=x11;
../singular_texi/reference.tex(,10745)   std(i);
../singular_texi/reference.tex(,10746) @expansion{} _[1]=x2
../singular_texi/reference.tex(,10747)   noether=0; //disables noether
../singular_texi/reference.tex(,10748) @c end example noether reference.doc:7410
../singular_texi/reference.tex(,10749) @end smallexample
../singular_texi/reference.tex(,10750) @end table
../singular_texi/reference.tex(,10751) @c inserted refs from reference.doc:7420
../singular_texi/reference.tex(,10760) See
../singular_texi/reference.tex(,10761) @ref{poly};
../singular_texi/reference.tex(,10762) @ref{std}.
../singular_texi/reference.tex(,10764) @c end inserted refs from reference.doc:7420
../singular_texi/reference.tex(,10765) @c -----------------------------------------------------
../singular_texi/reference.tex(,10766) @node printlevel, short, noether, System variables
../singular_texi/reference.tex(,10767) @subsection printlevel
../singular_texi/reference.tex(,10768) @cindex printlevel
../singular_texi/reference.tex(,10769) @table @code
../singular_texi/reference.tex(,10770) @item @strong{Type:}
../singular_texi/reference.tex(,10771) int
../singular_texi/reference.tex(,10772) @item @strong{Purpose:}
../singular_texi/reference.tex(,10773) sets the debug level for @code{dbprint}.
../singular_texi/reference.tex(,10774) If @code{printlevel} >= @code{voice} then @code{dbprint} is equivalent to
../singular_texi/reference.tex(,10775) @code{print}, otherwise nothing is printed.
../singular_texi/reference.tex(,10776) @item @strong{Note:}
../singular_texi/reference.tex(,10777) @xref{Procedures in a library}, for a small example about how this
../singular_texi/reference.tex(,10778) is used for the display of comments while procedures are executed.
../singular_texi/reference.tex(,10779) @item @strong{Example:}
../singular_texi/reference.tex(,10780) @smallexample
../singular_texi/reference.tex(,10781) @c reused example printlevel reference.doc:7441 
../singular_texi/reference.tex(,10782)   voice;
../singular_texi/reference.tex(,10783) @expansion{} 1
../singular_texi/reference.tex(,10784)   printlevel=0;
../singular_texi/reference.tex(,10785)   dbprint(1);
../singular_texi/reference.tex(,10786)   printlevel=voice;
../singular_texi/reference.tex(,10787)   dbprint(1);
../singular_texi/reference.tex(,10788) @expansion{} 1
../singular_texi/reference.tex(,10789) @c end example printlevel reference.doc:7441
../singular_texi/reference.tex(,10790) @end smallexample
../singular_texi/reference.tex(,10791) @end table
../singular_texi/reference.tex(,10792) @c inserted refs from reference.doc:7450
../singular_texi/reference.tex(,10802) See
../singular_texi/reference.tex(,10803) @ref{dbprint};
../singular_texi/reference.tex(,10804) @ref{int};
../singular_texi/reference.tex(,10805) @ref{voice}.
../singular_texi/reference.tex(,10807) @c end inserted refs from reference.doc:7450
../singular_texi/reference.tex(,10808) @c -----------------------------------------------------
../singular_texi/reference.tex(,10809) @node short, timer, printlevel, System variables
../singular_texi/reference.tex(,10810) @subsection short
../singular_texi/reference.tex(,10811) @cindex short
../singular_texi/reference.tex(,10812) @table @code
../singular_texi/reference.tex(,10813) @item @strong{Type:}
../singular_texi/reference.tex(,10814) int
../singular_texi/reference.tex(,10815) @item @strong{Purpose:}
../singular_texi/reference.tex(,10816) the output of monomials is done in the short manner,
../singular_texi/reference.tex(,10817) if @code{short} is non-zero. A C-like notion is used, if short is zero.
../singular_texi/reference.tex(,10818) Both notations may be used as input.
../singular_texi/reference.tex(,10819) @*The default depends on the names of the ring variables
../singular_texi/reference.tex(,10820) (0 if there are names of variables longer than 1 character, 1 otherwise). Every
../singular_texi/reference.tex(,10821) change of the basering sets @code{short} to the previous value for
../singular_texi/reference.tex(,10822) that ring. In other words, the value of the variable @code{short} is
../singular_texi/reference.tex(,10823) "ring-local".
../singular_texi/reference.tex(,10824) @item @strong{Example:}
../singular_texi/reference.tex(,10825) @smallexample
../singular_texi/reference.tex(,10826) @c reused example short reference.doc:7474 
../singular_texi/reference.tex(,10827)   ring r=23,x,dp;
../singular_texi/reference.tex(,10828)   int save=short;
../singular_texi/reference.tex(,10829)   short=1;
../singular_texi/reference.tex(,10830)   2x2,x2;
../singular_texi/reference.tex(,10831) @expansion{} 2x2 x2
../singular_texi/reference.tex(,10832)   short=0;
../singular_texi/reference.tex(,10833)   2x2,x2;
../singular_texi/reference.tex(,10834) @expansion{} 2*x^2 x^2
../singular_texi/reference.tex(,10835)   short=save;  //resets short to the previous value
../singular_texi/reference.tex(,10836) @c end example short reference.doc:7474
../singular_texi/reference.tex(,10837) @end smallexample
../singular_texi/reference.tex(,10838) @end table
../singular_texi/reference.tex(,10839) @c inserted refs from reference.doc:7485
../singular_texi/reference.tex(,10847) See
../singular_texi/reference.tex(,10848) @ref{int}.
../singular_texi/reference.tex(,10850) @c end inserted refs from reference.doc:7485
../singular_texi/reference.tex(,10851) @c -----------------------------------------------------
../singular_texi/reference.tex(,10852) @node timer, TRACE var, short, System variables
../singular_texi/reference.tex(,10853) @subsection timer
../singular_texi/reference.tex(,10854) @cindex timer
../singular_texi/reference.tex(,10855) @table @code
../singular_texi/reference.tex(,10856) @item @strong{Type:}
../singular_texi/reference.tex(,10857) int
../singular_texi/reference.tex(,10858) @item @strong{Purpose:}
../singular_texi/reference.tex(,10859) @enumerate
../singular_texi/reference.tex(,10860) @item
../singular_texi/reference.tex(,10861) the CPU time (i.e, user and system time) used for each command is
../singular_texi/reference.tex(,10862) printed if timer >0 , if this
../singular_texi/reference.tex(,10863) time is bigger than a (customizable) minimal time and
../singular_texi/reference.tex(,10864) if @code{printlevel+1 >= voice} (which is by default true on the
../singular_texi/reference.tex(,10865) @sc{Singular} top level, but not true while procedures are executed).
../singular_texi/reference.tex(,10866) 
../singular_texi/reference.tex(,10867) @item
../singular_texi/reference.tex(,10868) yields the used CPU time since the start-up of @sc{Singular} in a
../singular_texi/reference.tex(,10869) (customizable) resolution.
../singular_texi/reference.tex(,10870) @end enumerate
../singular_texi/reference.tex(,10871) 
../singular_texi/reference.tex(,10872) The default setting of @code{timer} is 0, the default minimal time is
../singular_texi/reference.tex(,10873) 0.5 seconds, and the default timer resolution is 1 (i.e., the default unit
../singular_texi/reference.tex(,10874) of time is one second). The minimal time and timer resolution
../singular_texi/reference.tex(,10875) can be set using the command line options @code{--min-time} and
../singular_texi/reference.tex(,10876) @code{--ticks-per-sec} and can be checked using
../singular_texi/reference.tex(,10877) @code{system("--min-time")} and @code{system("--ticks-per-sec")}.
../singular_texi/reference.tex(,10878) 
../singular_texi/reference.tex(,10879) How to use @code{timer} in order to measure the time for a sequence of
../singular_texi/reference.tex(,10880) commands, see example below.
../singular_texi/reference.tex(,10881) 
../singular_texi/reference.tex(,10882) @item @strong{Note for Windows95/98:}
../singular_texi/reference.tex(,10883) The value of the @code{timer} cannot be used (resp.@: trusted) when
../singular_texi/reference.tex(,10884) @sc{Singular} is run under Windows95/98 (this is due to the shortcomings
../singular_texi/reference.tex(,10885) of the Windows95/98 operating system). Use @ref{rtimer}, instead.
../singular_texi/reference.tex(,10886) 
../singular_texi/reference.tex(,10887) @item @strong{Example:}
../singular_texi/reference.tex(,10888) @smallexample
../singular_texi/reference.tex(,10889) @c reused example timer reference.doc:7527 
../singular_texi/reference.tex(,10890)   timer=1; // The time of each command is printed
../singular_texi/reference.tex(,10891)   int t=timer; // initialize t by timer
../singular_texi/reference.tex(,10892)   ring r=0,(x,y,z),dp;
../singular_texi/reference.tex(,10893)   poly p=(x+2y+3z+4xy+5xz+6yz)^20;
../singular_texi/reference.tex(,10894)   // timer as int_expression:
../singular_texi/reference.tex(,10895)   t=timer-t;
../singular_texi/reference.tex(,10896)   t;  // yields the time in ticks-per-sec (default 1)
../singular_texi/reference.tex(,10897) @expansion{} 0
../singular_texi/reference.tex(,10898)       // since t was initialized by timer
../singular_texi/reference.tex(,10899)   int tps=system("--ticks-per-sec");
../singular_texi/reference.tex(,10900)   t/tps; // yields the time in seconds truncated to int
../singular_texi/reference.tex(,10901) @expansion{} 0
../singular_texi/reference.tex(,10902) @c end example timer reference.doc:7527
../singular_texi/reference.tex(,10903) @end smallexample
../singular_texi/reference.tex(,10904) @end table
../singular_texi/reference.tex(,10905) @c inserted refs from reference.doc:7541
../singular_texi/reference.tex(,10917) See
../singular_texi/reference.tex(,10918) @ref{Command line options};
../singular_texi/reference.tex(,10919) @ref{printlevel};
../singular_texi/reference.tex(,10920) @ref{rtimer};
../singular_texi/reference.tex(,10921) @ref{system};
../singular_texi/reference.tex(,10922) @ref{voice}.
../singular_texi/reference.tex(,10924) @c end inserted refs from reference.doc:7541
../singular_texi/reference.tex(,10925) @c ---------------------------------------
../singular_texi/reference.tex(,10926) @node TRACE var, rtimer, timer, System variables
../singular_texi/reference.tex(,10927) @subsection TRACE
../singular_texi/reference.tex(,10928) @cindex TRACE
../singular_texi/reference.tex(,10929) 
../singular_texi/reference.tex(,10930) @table @code
../singular_texi/reference.tex(,10931) @item @strong{Type:}
../singular_texi/reference.tex(,10932) int
../singular_texi/reference.tex(,10933) @item @strong{Purpose:}
../singular_texi/reference.tex(,10934) sets level of debugging.
../singular_texi/reference.tex(,10935) @table @asis
../singular_texi/reference.tex(,10936) @item @code{TRACE=0}
../singular_texi/reference.tex(,10937) no debugging messages are printed.
../singular_texi/reference.tex(,10938) @item @code{TRACE=1}
../singular_texi/reference.tex(,10939) messages about entering and leaving of procedures are displayed.
../singular_texi/reference.tex(,10940) @item @code{TRACE=3}
../singular_texi/reference.tex(,10941) messages about entering and leaving of procedures together with
../singular_texi/reference.tex(,10942) line numbers are displayed.
../singular_texi/reference.tex(,10943) @item @code{TRACE=4}
../singular_texi/reference.tex(,10944) each line is echoed and the interpretation of commands
../singular_texi/reference.tex(,10945) in this line is suspended until the user presses @code{RETURN}.
../singular_texi/reference.tex(,10946) @end table
../singular_texi/reference.tex(,10947) @*@code{TRACE} is defaulted to 0.
../singular_texi/reference.tex(,10948) @*@code{TRACE} does not affect the output of commands.
../singular_texi/reference.tex(,10949) @item @strong{Example:}
../singular_texi/reference.tex(,10950) @smallexample
../singular_texi/reference.tex(,10951) @c reused example TRACE reference.doc:7575 
../singular_texi/reference.tex(,10952)   TRACE=1;
../singular_texi/reference.tex(,10953)   LIB "general.lib";
../singular_texi/reference.tex(,10954)   sum(1..100);
../singular_texi/reference.tex(,10955) @expansion{} entering sum (level 0)
../singular_texi/reference.tex(,10956) @expansion{} leaving  sum (level 0)
../singular_texi/reference.tex(,10957) @expansion{} 5050
../singular_texi/reference.tex(,10958) @c end example TRACE reference.doc:7575
../singular_texi/reference.tex(,10959) @end smallexample
../singular_texi/reference.tex(,10960) @end table
../singular_texi/reference.tex(,10961) @c inserted refs from reference.doc:7582
../singular_texi/reference.tex(,10969) See
../singular_texi/reference.tex(,10970) @ref{int}.
../singular_texi/reference.tex(,10972) @c end inserted refs from reference.doc:7582
../singular_texi/reference.tex(,10973) @c ---------------------------------------
../singular_texi/reference.tex(,10974) @node rtimer, voice, TRACE var, System variables
../singular_texi/reference.tex(,10975) @subsection rtimer
../singular_texi/reference.tex(,10976) @cindex timer
../singular_texi/reference.tex(,10977) @table @code
../singular_texi/reference.tex(,10978) @item @strong{Type:}
../singular_texi/reference.tex(,10979) int
../singular_texi/reference.tex(,10980) @item @strong{Purpose:}
../singular_texi/reference.tex(,10981) identical to @code{timer} (@pxref{timer}), except that real times (i.e.,
../singular_texi/reference.tex(,10982) wall-clock) times are reported, instead of CPU times. This can be
../singular_texi/reference.tex(,10983) trusted on all operating systems (including Windows95/98).
../singular_texi/reference.tex(,10984) 
../singular_texi/reference.tex(,10985) @end table
../singular_texi/reference.tex(,10986) @c ---------------------------------------
../singular_texi/reference.tex(,10987) @node voice,, rtimer, System variables
../singular_texi/reference.tex(,10988) @subsection voice
../singular_texi/reference.tex(,10989) @cindex voice
../singular_texi/reference.tex(,10990) 
../singular_texi/reference.tex(,10991) @table @code
../singular_texi/reference.tex(,10992) @item @strong{Type:}
../singular_texi/reference.tex(,10993) int
../singular_texi/reference.tex(,10994) @item @strong{Purpose:}
../singular_texi/reference.tex(,10995) shows the nesting level of procedures.
../singular_texi/reference.tex(,10996) @item @strong{Note:}
../singular_texi/reference.tex(,10997) @xref{Guidelines for writing a library}, for an small example how this is used
../singular_texi/reference.tex(,10998) for the display of comments while procedures are executed.
../singular_texi/reference.tex(,10999) @item @strong{Example:}
../singular_texi/reference.tex(,11000) @smallexample
../singular_texi/reference.tex(,11001) @c reused example voice reference.doc:7614 
../singular_texi/reference.tex(,11002)   voice;
../singular_texi/reference.tex(,11003) @expansion{} 1
../singular_texi/reference.tex(,11004) @c end example voice reference.doc:7614
../singular_texi/reference.tex(,11005) proc p
../singular_texi/reference.tex(,11006) @{
../singular_texi/reference.tex(,11007)   voice;
../singular_texi/reference.tex(,11008) @};
../singular_texi/reference.tex(,11009) p();
../singular_texi/reference.tex(,11010) @expansion{} 2
../singular_texi/reference.tex(,11011) @end smallexample
../singular_texi/reference.tex(,11012) @end table
../singular_texi/reference.tex(,11013) @c inserted refs from reference.doc:7625
../singular_texi/reference.tex(,11023) See
../singular_texi/reference.tex(,11024) @ref{dbprint};
../singular_texi/reference.tex(,11025) @ref{listvar};
../singular_texi/reference.tex(,11026) @ref{printlevel}.
../singular_texi/reference.tex(,11028) @c end inserted refs from reference.doc:7625
../singular_texi/reference.tex(,11029) @c ---------------------------------------
../singular_texi/singular.tex(,145) 
../singular_texi/singular.tex(,146) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,147) @node Tricks and pitfalls, Examples, Functions and system variables, Top
../singular_texi/singular.tex(,148) @chapter Tricks and pitfalls
../singular_texi/singular.tex(,149) @cindex Tricks and pitfalls
../singular_texi/tricks.tex(,1) @comment -*-texinfo-*-
../singular_texi/tricks.tex(,2) @comment This file was generated by doc2tex.pl from tricks.doc
../singular_texi/tricks.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT tricks.doc INSTEAD
../singular_texi/tricks.tex(,4) @comment Id: tricks.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/tricks.tex(,5) @comment this file contains the "Tricks and pittfals" sections
../singular_texi/tricks.tex(,6) 
../singular_texi/tricks.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/tricks.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/tricks.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/tricks.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/tricks.tex(,11) @c ignores the `@ignore').
../singular_texi/tricks.tex(,24) 
../singular_texi/tricks.tex(,25) @menu
../singular_texi/tricks.tex(,26) * Limitations::
../singular_texi/tricks.tex(,27) * Major differences to the C programming language::
../singular_texi/tricks.tex(,28) * Miscellaneous oddities::
../singular_texi/tricks.tex(,29) * Identifier resolution::
../singular_texi/tricks.tex(,30) @end menu
../singular_texi/tricks.tex(,31) 
../singular_texi/tricks.tex(,32) @c -------------------------------------------------------------------------
../singular_texi/tricks.tex(,33) @node Limitations,Major differences to the C programming language,,Tricks and pitfalls
../singular_texi/tricks.tex(,34) @section Limitations
../singular_texi/tricks.tex(,35) @cindex Limitations
../singular_texi/tricks.tex(,36) 
../singular_texi/tricks.tex(,37) @sc{Singular} has the following limitations:
../singular_texi/tricks.tex(,38) @itemize @bullet
../singular_texi/tricks.tex(,39) @item
../singular_texi/tricks.tex(,40) the characteristic of a prime field must be less than 2147483629 
../singular_texi/tricks.tex(,41) @item
../singular_texi/tricks.tex(,42) the (weighted) degree of a monomial must be smaller than the largest @code{long},
../singular_texi/tricks.tex(,43) usually 2147483648
../singular_texi/tricks.tex(,44) @item
../singular_texi/tricks.tex(,45) the exponent of a ring variable must be smaller than 32768
../singular_texi/tricks.tex(,46) unless the ring ordering start with the pseudo ordering 
../singular_texi/tricks.tex(,47) @code{L(} max_exponent @code{)}
../singular_texi/tricks.tex(,48) @item
../singular_texi/tricks.tex(,49) the rank of any free module must be smaller than the largest @code{long},
../singular_texi/tricks.tex(,50) usually 2147483648
../singular_texi/tricks.tex(,51) @item
../singular_texi/tricks.tex(,52) the number of parameters must be smaller than 32768
../singular_texi/tricks.tex(,53) @item
../singular_texi/tricks.tex(,54) the number of ring variables must be smaller than 32768
../singular_texi/tricks.tex(,55) @item
../singular_texi/tricks.tex(,56) the precision of long floating point numbers (for ground field @code{real})
../singular_texi/tricks.tex(,57) must be smaller than 32768
../singular_texi/tricks.tex(,58) @item
../singular_texi/tricks.tex(,59) integers (of type @code{int}) have the limited range
../singular_texi/tricks.tex(,60) from -2147483647 to 2147483647
../singular_texi/tricks.tex(,61) @item
../singular_texi/tricks.tex(,62) floating point numbers (type @code{number} from field @code{real}) have
../singular_texi/tricks.tex(,63) a limited range which is machine dependent. A typical range is -1.0e-38
../singular_texi/tricks.tex(,64) to 1.0e+38.  The string representation of overflow and underflow is
../singular_texi/tricks.tex(,65) machine dependent, as well. For example "@code{Inf}" on Linux, or 
../singular_texi/tricks.tex(,66) "@code{+.+00e+00}" on HPUX.
../singular_texi/tricks.tex(,67) @c @item
../singular_texi/tricks.tex(,68) @c a token (in the input) must have 16383 characters or less.
../singular_texi/tricks.tex(,69) @c @*(Tokens are strings, blocks of statements, numbers)
../singular_texi/tricks.tex(,70) @c @*This does not apply to proc in libraries but to blocks
../singular_texi/tricks.tex(,71) @c within a procedure
../singular_texi/tricks.tex(,72) @item
../singular_texi/tricks.tex(,73) the length of an identifier is unlimited but @code{listvar}
../singular_texi/tricks.tex(,74) displays only the first 20 characters
../singular_texi/tricks.tex(,75) @c @item
../singular_texi/tricks.tex(,76) @c the interpretation of text between a closing @code{@}} and the end of
../singular_texi/tricks.tex(,77) @c the line is undefined. (Therefore do not put anything but spaces between
../singular_texi/tricks.tex(,78) @c @code{@}} and the end of the line.)
../singular_texi/tricks.tex(,79) @item
../singular_texi/tricks.tex(,80) statements may not contain more than 10000 tokens
../singular_texi/tricks.tex(,81) @item
../singular_texi/tricks.tex(,82) @cindex German Umlaute
../singular_texi/tricks.tex(,83) @cindex non-english special characters
../singular_texi/tricks.tex(,84) @cindex special characters, non-english
../singular_texi/tricks.tex(,85) All input to Singular must be 7-bit clean, i.e. special characters like the
../singular_texi/tricks.tex(,86) the German Umlaute (@"a, @"o, etc.), or the French accent characters may 
../singular_texi/tricks.tex(,87) neither appear as input to @sc{Singular}, nor in libraries or procedure
../singular_texi/tricks.tex(,88) definitions.
../singular_texi/tricks.tex(,89) @end itemize
../singular_texi/tricks.tex(,90) 
../singular_texi/tricks.tex(,91) @c -------------------------------------------------------------------------
../singular_texi/tricks.tex(,92) @node Major differences to the C programming language,Miscellaneous oddities,Limitations,Tricks and pitfalls
../singular_texi/tricks.tex(,93) @section Major differences to the C programming language
../singular_texi/tricks.tex(,94) @cindex C programming language
../singular_texi/tricks.tex(,95) 
../singular_texi/tricks.tex(,96) Although many constructs from @sc{Singular}'s programming language are similar
../singular_texi/tricks.tex(,97) to those from the C programming language, there are some subtle
../singular_texi/tricks.tex(,98) differences. Most notably:
../singular_texi/tricks.tex(,99) 
../singular_texi/tricks.tex(,100) @menu
../singular_texi/tricks.tex(,101) * No rvalue of increments and assignments::
../singular_texi/tricks.tex(,102) * Evaluation of logical expressions::
../singular_texi/tricks.tex(,103) * No case or switch statement::
../singular_texi/tricks.tex(,104) * Usage of commas::
../singular_texi/tricks.tex(,105) * Usage of brackets::
../singular_texi/tricks.tex(,106) * Behavior of continue::
../singular_texi/tricks.tex(,107) * Return type of procedures::
../singular_texi/tricks.tex(,108) @end menu
../singular_texi/tricks.tex(,109) @c ---------------------------------------
../singular_texi/tricks.tex(,110) @node No rvalue of increments and assignments, Evaluation of logical expressions,,Major differences to the C programming language
../singular_texi/tricks.tex(,111) @subsection No rvalue of increments and assignments
../singular_texi/tricks.tex(,112) @cindex rvalue
../singular_texi/tricks.tex(,113) 
../singular_texi/tricks.tex(,114) The increment operator @code{++} (resp.@: decrement operator @code{--})
../singular_texi/tricks.tex(,115) has no rvalue, i.e., cannot be used on the right-hand sides of
../singular_texi/tricks.tex(,116) assignments.  So, instead of
../singular_texi/tricks.tex(,117) 
../singular_texi/tricks.tex(,118) @smallexample
../singular_texi/tricks.tex(,119) j = i++;  // WRONG!!!
../singular_texi/tricks.tex(,120) @end smallexample
../singular_texi/tricks.tex(,121) 
../singular_texi/tricks.tex(,122) @noindent (which results in an error), it must be written
../singular_texi/tricks.tex(,123) 
../singular_texi/tricks.tex(,124) @smallexample
../singular_texi/tricks.tex(,125) i++; j = i;
../singular_texi/tricks.tex(,126) @end smallexample
../singular_texi/tricks.tex(,127) 
../singular_texi/tricks.tex(,128) Likewise, an assignment expression does not have a result.  Therefore,
../singular_texi/tricks.tex(,129) compound assignments like @code{i = j = k;} are not allowed and result
../singular_texi/tricks.tex(,130) in an error.
../singular_texi/tricks.tex(,131) 
../singular_texi/tricks.tex(,132) @c ---------------------------------------
../singular_texi/tricks.tex(,133) @node Evaluation of logical expressions, No case or switch statement, No rvalue of increments and assignments, Major differences to the C programming language
../singular_texi/tricks.tex(,134) @subsection Evaluation of logical expressions
../singular_texi/tricks.tex(,135) @cindex Evaluation of logical expressions
../singular_texi/tricks.tex(,136) @cindex and
../singular_texi/tricks.tex(,137) @cindex or
../singular_texi/tricks.tex(,138) 
../singular_texi/tricks.tex(,139) @c ------------------------------------------------------------
../singular_texi/tricks.tex(,140) @c   This piece of text partially exists also in the file types.doc,
../singular_texi/tricks.tex(,141) @c   chapter "boolean expressions".
../singular_texi/tricks.tex(,142) @c   If you change something here, change it there, too!
../singular_texi/tricks.tex(,143) @c ------------------------------------------------------------
../singular_texi/tricks.tex(,144) @strong{All} arguments of a logical expression are first evaluated and
../singular_texi/tricks.tex(,145) then the value of the logical expression is determined. For example, the
../singular_texi/tricks.tex(,146) logical expressions @code{(a || b)} is evaluated by first evaluating
../singular_texi/tricks.tex(,147) @code{a} @emph{and} @code{b}, even though the value of @code{b} has no
../singular_texi/tricks.tex(,148) influence on the value of @code{(a || b)}, if @code{a} evaluates to
../singular_texi/tricks.tex(,149) true. 
../singular_texi/tricks.tex(,150) 
../singular_texi/tricks.tex(,151) Note, that this evaluation is different from the left-to-right,
../singular_texi/tricks.tex(,152) conditional evaluation of logical expressions (as found in most
../singular_texi/tricks.tex(,153) programming languages). For example, in these other languages, the value
../singular_texi/tricks.tex(,154) of @code{(1 || b)} is determined without ever evaluating @code{b}.  This
../singular_texi/tricks.tex(,155) causes some problems with boolean tests on variables, which might not be
../singular_texi/tricks.tex(,156) defined at evaluation time. For example, the following results in an
../singular_texi/tricks.tex(,157) error, if the variable @code{i} is undefined:
../singular_texi/tricks.tex(,158) 
../singular_texi/tricks.tex(,159) @smallexample
../singular_texi/tricks.tex(,160) if (defined(i) && i > 0) @{@} // WRONG!!!
../singular_texi/tricks.tex(,161) @end smallexample
../singular_texi/tricks.tex(,162) 
../singular_texi/tricks.tex(,163) This must be written instead as:
../singular_texi/tricks.tex(,164) 
../singular_texi/tricks.tex(,165) @smallexample
../singular_texi/tricks.tex(,166) if (defined(i))
../singular_texi/tricks.tex(,167) @{
../singular_texi/tricks.tex(,168)   if (i > 0) @{@}
../singular_texi/tricks.tex(,169) @}
../singular_texi/tricks.tex(,170) @end smallexample
../singular_texi/tricks.tex(,171) @c ------------------------------------------------------------
../singular_texi/tricks.tex(,172) @c end of duplicate text
../singular_texi/tricks.tex(,173) @c ------------------------------------------------------------
../singular_texi/tricks.tex(,174) 
../singular_texi/tricks.tex(,175) However, there are several short work-arounds for this problem:
../singular_texi/tricks.tex(,176) @enumerate
../singular_texi/tricks.tex(,177) @item
../singular_texi/tricks.tex(,178) If a variable (say, @code{i}) is only to be used as a boolean flag, then
../singular_texi/tricks.tex(,179) define (value is TRUE) and undefine (value is FALSE) @code{i} instead of
../singular_texi/tricks.tex(,180) assigning a value. Using this scheme, it is sufficient to simply write
../singular_texi/tricks.tex(,181) 
../singular_texi/tricks.tex(,182) @smallexample
../singular_texi/tricks.tex(,183) if (defined(i))
../singular_texi/tricks.tex(,184) @end smallexample
../singular_texi/tricks.tex(,185) 
../singular_texi/tricks.tex(,186) in order to check whether @code{i} is TRUE. Use the command @code{kill}
../singular_texi/tricks.tex(,187) to undefine a variable, i.e.@: to assign it a FALSE value (@pxref{kill}).
../singular_texi/tricks.tex(,188) @item
../singular_texi/tricks.tex(,189) If a variable  can have more than two values, then
../singular_texi/tricks.tex(,190) define it, if necessary, before it is used for the first time.
../singular_texi/tricks.tex(,191) For example, if the following is used within a procedure
../singular_texi/tricks.tex(,192) 
../singular_texi/tricks.tex(,193) @smallexample
../singular_texi/tricks.tex(,194) if (! defined(DEBUG)) @{ int DEBUG = 1;@}
../singular_texi/tricks.tex(,195) @dots{}
../singular_texi/tricks.tex(,196) if (DEBUG == 3)  @{@dots{}@}
../singular_texi/tricks.tex(,197) if (DEBUG == 2)  @{@dots{}@}
../singular_texi/tricks.tex(,198) @dots{}
../singular_texi/tricks.tex(,199) @end smallexample
../singular_texi/tricks.tex(,200) 
../singular_texi/tricks.tex(,201) then a user of this procedure does not need to care about the existence
../singular_texi/tricks.tex(,202) of the @code{DEBUG} variable -- this remains hidden from the
../singular_texi/tricks.tex(,203) user. However, if @code{DEBUG} exists globally, then its local default
../singular_texi/tricks.tex(,204) value is overwritten by its global one.
../singular_texi/tricks.tex(,205) @end enumerate
../singular_texi/tricks.tex(,206) 
../singular_texi/tricks.tex(,207) @c ---------------------------------------
../singular_texi/tricks.tex(,208) @node No case or switch statement,  Usage of commas, Evaluation of logical expressions, Major differences to the C programming language
../singular_texi/tricks.tex(,209) @subsection No case or switch statement
../singular_texi/tricks.tex(,210) @cindex case
../singular_texi/tricks.tex(,211) @cindex switch
../singular_texi/tricks.tex(,212) 
../singular_texi/tricks.tex(,213) @sc{Singular} does not offer a @code{case} (or @code{switch})
../singular_texi/tricks.tex(,214) statement. However, it can be imitated in the following way:
../singular_texi/tricks.tex(,215) 
../singular_texi/tricks.tex(,216) @smallexample
../singular_texi/tricks.tex(,217) while (1)
../singular_texi/tricks.tex(,218) @{
../singular_texi/tricks.tex(,219)    if (choice == choice_1) @{ @dots{}; break;@}
../singular_texi/tricks.tex(,220)    @dots{}
../singular_texi/tricks.tex(,221)    if (choice == choice_n) @{ @dots{}; break;@}
../singular_texi/tricks.tex(,222)    // default case
../singular_texi/tricks.tex(,223)    @dots{}; break;
../singular_texi/tricks.tex(,224) @}
../singular_texi/tricks.tex(,225) @end smallexample
../singular_texi/tricks.tex(,226) 
../singular_texi/tricks.tex(,227) @c ---------------------------------------
../singular_texi/tricks.tex(,228) @node Usage of commas, Usage of brackets, No case or switch statement, Major differences to the C programming language
../singular_texi/tricks.tex(,229) @subsection Usage of commas
../singular_texi/tricks.tex(,230) @cindex comma
../singular_texi/tricks.tex(,231) 
../singular_texi/tricks.tex(,232) In @sc{Singular}, a comma separates list elements and the value of a comma
../singular_texi/tricks.tex(,233) expression is a list.
../singular_texi/tricks.tex(,234) Hence, commas can not be used to combine several expressions into
../singular_texi/tricks.tex(,235) a single expression. For example, instead of writing
../singular_texi/tricks.tex(,236) 
../singular_texi/tricks.tex(,237) @smallexample
../singular_texi/tricks.tex(,238) for (i=1, j=5; i<5 || j<10; i++, j++) @{@dots{}@} // WRONG!!!!!!
../singular_texi/tricks.tex(,239) @end smallexample
../singular_texi/tricks.tex(,240) 
../singular_texi/tricks.tex(,241) @noindent one has to write
../singular_texi/tricks.tex(,242) 
../singular_texi/tricks.tex(,243) @smallexample
../singular_texi/tricks.tex(,244) for (i,j = 1,5; i<5 || j<10; i++, j++) @{@dots{}@}
../singular_texi/tricks.tex(,245) @end smallexample
../singular_texi/tricks.tex(,246) 
../singular_texi/tricks.tex(,247) @c ---------------------------------------
../singular_texi/tricks.tex(,248) @node Usage of brackets, Behavior of continue, Usage of commas, Major differences to the C programming language
../singular_texi/tricks.tex(,249) @subsection Usage of brackets
../singular_texi/tricks.tex(,250) @cindex bracket
../singular_texi/tricks.tex(,251) 
../singular_texi/tricks.tex(,252) In @sc{Singular}, curly brackets (@code{@{} @code{@}}) @strong{must
../singular_texi/tricks.tex(,253) always} be used to enclose the statement body following such constructs
../singular_texi/tricks.tex(,254) like @code{if}, @code{else}, @code{for}, or @code{while}, even if this
../singular_texi/tricks.tex(,255) block consists of only a single statement. Similarly, in the return
../singular_texi/tricks.tex(,256) statement of a procedure, parentheses (@code{(} @code{)}) @strong{must
../singular_texi/tricks.tex(,257) always} be used to enclose the return value.  Even if there is no value
../singular_texi/tricks.tex(,258) to return, parentheses have to be used after a return statement
../singular_texi/tricks.tex(,259) (i.e., @code{return();}).  For example,
../singular_texi/tricks.tex(,260) 
../singular_texi/tricks.tex(,261) @smallexample
../singular_texi/tricks.tex(,262) if (i == 1) return i;    // WRONG!!!!!
../singular_texi/tricks.tex(,263) @end smallexample
../singular_texi/tricks.tex(,264) 
../singular_texi/tricks.tex(,265) @noindent results in an error. Instead, it must be written as
../singular_texi/tricks.tex(,266) 
../singular_texi/tricks.tex(,267) @smallexample
../singular_texi/tricks.tex(,268) if (i == 1) @{ return (i); @}
../singular_texi/tricks.tex(,269) @end smallexample
../singular_texi/tricks.tex(,270) 
../singular_texi/tricks.tex(,271) @c ---------------------------------------
../singular_texi/tricks.tex(,272) @node  Behavior of continue, Return type of procedures, Usage of brackets, Major differences to the C programming language
../singular_texi/tricks.tex(,273) @subsection Behavior of continue
../singular_texi/tricks.tex(,274) @cindex continue
../singular_texi/tricks.tex(,275) @sc{Singular}'s @code{continue} construct is only valid inside the body
../singular_texi/tricks.tex(,276) of a @code{for} or @code{while} construct. It skips the rest of the
../singular_texi/tricks.tex(,277) loop-body and jumps to the beginning of the block. Unlike the
../singular_texi/tricks.tex(,278) C-construct @sc{Singular}'s @code{continue} @strong{does not execute the
../singular_texi/tricks.tex(,279) increment statement}. For example,
../singular_texi/tricks.tex(,280) 
../singular_texi/tricks.tex(,281) @smallexample
../singular_texi/tricks.tex(,282) for (int i = 1 ; i<=10; i=i+1)
../singular_texi/tricks.tex(,283) @{
../singular_texi/tricks.tex(,284)    @dots{}
../singular_texi/tricks.tex(,285)    if (i==3) @{ i=8;continue; @}
../singular_texi/tricks.tex(,286)      // skip the rest if i is 3 and
../singular_texi/tricks.tex(,287)      // continue with the next i: 8
../singular_texi/tricks.tex(,288)    i;
../singular_texi/tricks.tex(,289) @}
../singular_texi/tricks.tex(,290) @expansion{} 1
../singular_texi/tricks.tex(,291) @expansion{} 2
../singular_texi/tricks.tex(,292) @expansion{} 8
../singular_texi/tricks.tex(,293) @expansion{} 9
../singular_texi/tricks.tex(,294) @expansion{} 10
../singular_texi/tricks.tex(,295) @end smallexample
../singular_texi/tricks.tex(,296) @c ---------------------------------------
../singular_texi/tricks.tex(,297) @node Return type of procedures,,Behavior of continue, Major differences to the C programming language
../singular_texi/tricks.tex(,298) @subsection Return type of procedures
../singular_texi/tricks.tex(,299) @cindex return type of procedures
../singular_texi/tricks.tex(,300) 
../singular_texi/tricks.tex(,301) Although the @sc{Singular} language is a strongly typed programming
../singular_texi/tricks.tex(,302) language, the type of the
../singular_texi/tricks.tex(,303) return value of a procedure does not need to be specified. As a
../singular_texi/tricks.tex(,304) consequence, the return type of a procedure may vary, i.e., may, for
../singular_texi/tricks.tex(,305) example, depend on the input. However, the return value
../singular_texi/tricks.tex(,306) of such a procedure may then only be assigned to a variable of type
../singular_texi/tricks.tex(,307) @code{def}.
../singular_texi/tricks.tex(,308) 
../singular_texi/tricks.tex(,309) @smallexample
../singular_texi/tricks.tex(,310) @c reused example Return_type_of_procedures tricks.doc:308 
../singular_texi/tricks.tex(,311) proc type_return (int i)
../singular_texi/tricks.tex(,312) @{
../singular_texi/tricks.tex(,313)   if (i > 0) @{return (i);@}
../singular_texi/tricks.tex(,314)   else @{return (list(i));@}
../singular_texi/tricks.tex(,315) @}
../singular_texi/tricks.tex(,316) def t1 = type_return(1);
../singular_texi/tricks.tex(,317) def t2 = type_return(-1);
../singular_texi/tricks.tex(,318) typeof(t1); typeof(t2);
../singular_texi/tricks.tex(,319) @expansion{} int
../singular_texi/tricks.tex(,320) @expansion{} list
../singular_texi/tricks.tex(,321) @c end example Return_type_of_procedures tricks.doc:308
../singular_texi/tricks.tex(,322) @end smallexample
../singular_texi/tricks.tex(,323) 
../singular_texi/tricks.tex(,324) Furthermore, it is mandatory to assign the return value of a procedure
../singular_texi/tricks.tex(,325) to a variable of type @code{def}, if a procedure changes the current
../singular_texi/tricks.tex(,326) ring using the @code{keepring} command (@pxref{keepring}) and returns a
../singular_texi/tricks.tex(,327) ring-dependent value (like a polynomial or module).
../singular_texi/tricks.tex(,328) 
../singular_texi/tricks.tex(,329) @smallexample
../singular_texi/tricks.tex(,330) @c reused example Return_type_of_procedures_1 tricks.doc:326 
../singular_texi/tricks.tex(,331) proc def_return
../singular_texi/tricks.tex(,332) @{
../singular_texi/tricks.tex(,333)   ring r=0,(x,y),dp;
../singular_texi/tricks.tex(,334)   poly p = x;
../singular_texi/tricks.tex(,335)   keepring r;
../singular_texi/tricks.tex(,336)   return (x);
../singular_texi/tricks.tex(,337) @}
../singular_texi/tricks.tex(,338) def p = def_return();
../singular_texi/tricks.tex(,339) // poly p = def_return(); would be WRONG!!!
../singular_texi/tricks.tex(,340) typeof(p);
../singular_texi/tricks.tex(,341) @expansion{} poly
../singular_texi/tricks.tex(,342) @c end example Return_type_of_procedures_1 tricks.doc:326
../singular_texi/tricks.tex(,343) @end smallexample
../singular_texi/tricks.tex(,344) 
../singular_texi/tricks.tex(,345) On the other hand, more than one value can be returned by a single
../singular_texi/tricks.tex(,346) @code{return} statement. For example,
../singular_texi/tricks.tex(,347) 
../singular_texi/tricks.tex(,348) @smallexample
../singular_texi/tricks.tex(,349) proc tworeturn () @{ return (1,2); @}
../singular_texi/tricks.tex(,350) int i,j = tworeturn();
../singular_texi/tricks.tex(,351) @end smallexample
../singular_texi/tricks.tex(,352) 
../singular_texi/tricks.tex(,353) 
../singular_texi/tricks.tex(,354) @c -------------------------------------------------------------------------
../singular_texi/tricks.tex(,355) @node Miscellaneous oddities, Identifier resolution, Major differences to the C programming language, Tricks and pitfalls
../singular_texi/tricks.tex(,356) @section Miscellaneous oddities
../singular_texi/tricks.tex(,357) 
../singular_texi/tricks.tex(,358) @enumerate
../singular_texi/tricks.tex(,359) @item integer division
../singular_texi/tricks.tex(,360) @cindex integer division
../singular_texi/tricks.tex(,361) @cindex div
../singular_texi/tricks.tex(,362) 
../singular_texi/tricks.tex(,363) If two numerical constants (i.e., two sequences of digits) are divided
../singular_texi/tricks.tex(,364) using the @code{/} operator, the surrounding whitespace determines
../singular_texi/tricks.tex(,365) which division to use: if there is no space between the constants and
../singular_texi/tricks.tex(,366) the @code{/} operator (e.g., "3/2"), both numerical constants are
../singular_texi/tricks.tex(,367) treated as of type @code{number} and the current ring division is
../singular_texi/tricks.tex(,368) used. If there is at least one space surrounding the @code{/} operator
../singular_texi/tricks.tex(,369) (e.g., "3 / 2"), both numerical constants are treated as of type
../singular_texi/tricks.tex(,370) @code{int} and an integer division is performed. To avoid confusion, use
../singular_texi/tricks.tex(,371) the @code{div} operator instead of @code{/} for integer division and an
../singular_texi/tricks.tex(,372) explicit type cast to @code{number} for ring division. Note, that this
../singular_texi/tricks.tex(,373) problem does only occur for divisions of numerical constants.
../singular_texi/tricks.tex(,374) @smallexample
../singular_texi/tricks.tex(,375) @c reused example Miscellaneous_oddities tricks.doc:370 
../singular_texi/tricks.tex(,376)   ring r=32002,x,dp;
../singular_texi/tricks.tex(,377)   3/2;    // ring division
../singular_texi/tricks.tex(,378) @expansion{} -15994
../singular_texi/tricks.tex(,379)   3 / 2;  // integer division
../singular_texi/tricks.tex(,380) @expansion{} 1
../singular_texi/tricks.tex(,381)   3 div 2;
../singular_texi/tricks.tex(,382) @expansion{} 1
../singular_texi/tricks.tex(,383)   number(3) / number(2);
../singular_texi/tricks.tex(,384) @expansion{} -15994
../singular_texi/tricks.tex(,385)   number a=3;
../singular_texi/tricks.tex(,386)   number b=2;
../singular_texi/tricks.tex(,387)   a/b;
../singular_texi/tricks.tex(,388) @expansion{} -15994
../singular_texi/tricks.tex(,389)   int c=3;
../singular_texi/tricks.tex(,390)   int d=2;
../singular_texi/tricks.tex(,391)   c / d;
../singular_texi/tricks.tex(,392) @expansion{} 1
../singular_texi/tricks.tex(,393) @c end example Miscellaneous_oddities tricks.doc:370
../singular_texi/tricks.tex(,394) @end smallexample
../singular_texi/tricks.tex(,395) 
../singular_texi/tricks.tex(,396) 
../singular_texi/tricks.tex(,397) @item monomials and precedence
../singular_texi/tricks.tex(,398) @cindex monomials and precedence
../singular_texi/tricks.tex(,399) 
../singular_texi/tricks.tex(,400) The computation of a monomial has precedence over all operators:
../singular_texi/tricks.tex(,401) @smallexample
../singular_texi/tricks.tex(,402) @c reused example Miscellaneous_oddities_1 tricks.doc:391 
../singular_texi/tricks.tex(,403)   ring r=0,(x,y),dp;
../singular_texi/tricks.tex(,404)   2xy^2 == (2*x*y)^2;
../singular_texi/tricks.tex(,405) @expansion{} 1
../singular_texi/tricks.tex(,406)   2xy^2 == 2x*y^2;
../singular_texi/tricks.tex(,407) @expansion{} 0
../singular_texi/tricks.tex(,408)   2x*y^2 == 2*x * (y^2);
../singular_texi/tricks.tex(,409) @expansion{} 1
../singular_texi/tricks.tex(,410) @c end example Miscellaneous_oddities_1 tricks.doc:391
../singular_texi/tricks.tex(,411) @end smallexample
../singular_texi/tricks.tex(,412) 
../singular_texi/tricks.tex(,413) @item meaning of @code{mult}
../singular_texi/tricks.tex(,414) @cindex mult
../singular_texi/tricks.tex(,415) @cindex degree
../singular_texi/tricks.tex(,416) 
../singular_texi/tricks.tex(,417) For an arbitrary ideal or module @code{i}, @code{mult(i)} returns the
../singular_texi/tricks.tex(,418) multiplicity of the ideal generated by the leading monomials of the
../singular_texi/tricks.tex(,419) given generators of @code{i}, hence depends on the monomial ordering!
../singular_texi/tricks.tex(,420) 
../singular_texi/tricks.tex(,421) A standard mistake is to interpret @code{degree(i)} or @code{mult(i)}
../singular_texi/tricks.tex(,422) for an inhomogeneous ideal @code{i} as the degree of the homogenization
../singular_texi/tricks.tex(,423) or as something like the 'degree of the affine part'. For the ordering
../singular_texi/tricks.tex(,424) @code{dp} (degree reverse lexicographical) the converse is true: if
../singular_texi/tricks.tex(,425) @code{i} is given by a standard basis, @code{mult(i)} is the degree of
../singular_texi/tricks.tex(,426) the homogeneous ideal obtained by homogenization of @code{i} and then
../singular_texi/tricks.tex(,427) putting the homogenizing variable to 0, hence it is the degree of the
../singular_texi/tricks.tex(,428) part at infinity (this can also be checked by looking at the initial
../singular_texi/tricks.tex(,429) ideal).
../singular_texi/tricks.tex(,430) 
../singular_texi/tricks.tex(,431) @item size of ideals
../singular_texi/tricks.tex(,432) @cindex ideals
../singular_texi/tricks.tex(,433) @cindex size
../singular_texi/tricks.tex(,434) 
../singular_texi/tricks.tex(,435) @code{size} counts the non-zero entries of an ideal or module. Use
../singular_texi/tricks.tex(,436) @code{ncols} to determine the actual number of entries in the ideal or module.
../singular_texi/tricks.tex(,437) 
../singular_texi/tricks.tex(,438) @item computations in @code{qring}
../singular_texi/tricks.tex(,439) @cindex qring
../singular_texi/tricks.tex(,440) 
../singular_texi/tricks.tex(,441) In order to speed up computations in quotient rings, @sc{Singular}
../singular_texi/tricks.tex(,442) usually does not reduce polynomials w.r.t.@: the quotient ideal; rather
../singular_texi/tricks.tex(,443) the given representative is used as long as possible during
../singular_texi/tricks.tex(,444) computations. If it is necessary, reduction is done during standard base
../singular_texi/tricks.tex(,445) computations. To reduce a polynomial @code{f} by hand w.r.t.@: the
../singular_texi/tricks.tex(,446) current quotient ideal use the command @code{reduce(f,std(0))}
../singular_texi/tricks.tex(,447) (@pxref{reduce}).
../singular_texi/tricks.tex(,448) 
../singular_texi/tricks.tex(,449) @item substring selection
../singular_texi/tricks.tex(,450) @cindex string
../singular_texi/tricks.tex(,451) 
../singular_texi/tricks.tex(,452) To extract substrings from a @code{string}, square brackets are used,
../singular_texi/tricks.tex(,453) enclosing either two comma-separated @code{int}s or an
../singular_texi/tricks.tex(,454) @code{intvec}. Although two comma-separated @code{int}s represent an
../singular_texi/tricks.tex(,455) @code{intvec}, they mean different things in substring access. Square
../singular_texi/tricks.tex(,456) brackets enclosing two @code{int}s (e.g.@: @code{s[2,6]}) return a
../singular_texi/tricks.tex(,457) substring where the first integer denotes the starting position and the
../singular_texi/tricks.tex(,458) second integer denotes the length of the substring. The result is
../singular_texi/tricks.tex(,459) returned as a @code{string}. Square brackets enclosing an @code{intvec}
../singular_texi/tricks.tex(,460) (e.g.@: @code{s[intvec(2,6)]}) return the characters of the string at the
../singular_texi/tricks.tex(,461) position given by the values of the @code{intvec}. The result is
../singular_texi/tricks.tex(,462) returned as an expression list of strings. 
../singular_texi/tricks.tex(,463) @c  Note, that this problem does
../singular_texi/tricks.tex(,464) @c  not occur for square brackets enclosing a single @code{int} or more than
../singular_texi/tricks.tex(,465) @c  two @code{int}s. Those always return an expression list of strings.
../singular_texi/tricks.tex(,466) 
../singular_texi/tricks.tex(,467) @smallexample
../singular_texi/tricks.tex(,468) @c reused example Miscellaneous_oddities_2 tricks.doc:454 
../singular_texi/tricks.tex(,469)   string s = "one-word";
../singular_texi/tricks.tex(,470)   s[2,6];     // a substring starting at the second char
../singular_texi/tricks.tex(,471) @expansion{} ne-wor
../singular_texi/tricks.tex(,472)   size(_);
../singular_texi/tricks.tex(,473) @expansion{} 6
../singular_texi/tricks.tex(,474)   intvec v = 2,6;
../singular_texi/tricks.tex(,475)   s[v];      // the second and the sixth char
../singular_texi/tricks.tex(,476) @expansion{} n o
../singular_texi/tricks.tex(,477)   string st = s[v];  // stick together by an assignment
../singular_texi/tricks.tex(,478)   st;
../singular_texi/tricks.tex(,479) @expansion{} no
../singular_texi/tricks.tex(,480)   size(_);
../singular_texi/tricks.tex(,481) @expansion{} 2
../singular_texi/tricks.tex(,482)   v = 2,6,8;
../singular_texi/tricks.tex(,483)   s[v];
../singular_texi/tricks.tex(,484) @expansion{} n o d
../singular_texi/tricks.tex(,485) @c end example Miscellaneous_oddities_2 tricks.doc:454
../singular_texi/tricks.tex(,486) @end smallexample
../singular_texi/tricks.tex(,487) 
../singular_texi/tricks.tex(,518) 
../singular_texi/tricks.tex(,519) @end enumerate
../singular_texi/tricks.tex(,520) 
../singular_texi/tricks.tex(,521) @c ----------------------------------------------
../singular_texi/tricks.tex(,522) @node Identifier resolution,, Miscellaneous oddities, Tricks and pitfalls
../singular_texi/tricks.tex(,523) @section Identifier resolution
../singular_texi/tricks.tex(,524) @cindex identifier
../singular_texi/tricks.tex(,525) 
../singular_texi/tricks.tex(,526) In @sc{Singular}, an identifier (i.e., a "word") is resolved in the
../singular_texi/tricks.tex(,527) following way and order: It is checked for
../singular_texi/tricks.tex(,528) @enumerate
../singular_texi/tricks.tex(,529) @item
../singular_texi/tricks.tex(,530) a reserved name (like @code{ring}, @code{std}, @dots{}),
../singular_texi/tricks.tex(,531) @item
../singular_texi/tricks.tex(,532) a local  variable (w.r.t. a procedure),
../singular_texi/tricks.tex(,533) @item
../singular_texi/tricks.tex(,534) a local ring variable (w.r.t. the current basering locally set in a procedure),
../singular_texi/tricks.tex(,535) @item
../singular_texi/tricks.tex(,536) a global variable,
../singular_texi/tricks.tex(,537) @item
../singular_texi/tricks.tex(,538) a global ring variable (w.r.t. the current basering)
../singular_texi/tricks.tex(,539) @item
../singular_texi/tricks.tex(,540) a monomial consisting of local ring variables written without operators,
../singular_texi/tricks.tex(,541) @item
../singular_texi/tricks.tex(,542) a monomial consisting of global ring variables written without operators.
../singular_texi/tricks.tex(,543) @end enumerate
../singular_texi/tricks.tex(,544) 
../singular_texi/tricks.tex(,545) Consequently, it is allowed to have general variables with the same name
../singular_texi/tricks.tex(,546) as ring  variables. However, the above identifier resolution order must
../singular_texi/tricks.tex(,547) be kept in mind. Otherwise, surprising results may come up.
../singular_texi/tricks.tex(,548) 
../singular_texi/tricks.tex(,549) @smallexample
../singular_texi/tricks.tex(,550) @c reused example Identifier_resolution tricks.doc:517 
../singular_texi/tricks.tex(,551) ring r=0,(x,y),dp;
../singular_texi/tricks.tex(,552) int x;
../singular_texi/tricks.tex(,553) x*y; // resolved product int*poly, i.e., 0*y
../singular_texi/tricks.tex(,554) @expansion{} 0
../singular_texi/tricks.tex(,555) xy; // "xy" is one identifier and resolved to monomial xy
../singular_texi/tricks.tex(,556) @expansion{} xy
../singular_texi/tricks.tex(,557) @c end example Identifier_resolution tricks.doc:517
../singular_texi/tricks.tex(,558) @end smallexample
../singular_texi/tricks.tex(,559) 
../singular_texi/tricks.tex(,560) For these reasons, we strongly recommend not to use variables which
../singular_texi/tricks.tex(,561) have the same name(s) as ring variables.
../singular_texi/tricks.tex(,562) 
../singular_texi/tricks.tex(,563) Moreover, we strongly recommend not to use ring variables whose name is
../singular_texi/tricks.tex(,564) fully contained in (i.e., is a substring of) another name of a ring
../singular_texi/tricks.tex(,565) variable. Otherwise, effects like the following might occur:
../singular_texi/tricks.tex(,566) 
../singular_texi/tricks.tex(,567) 
../singular_texi/tricks.tex(,568) @smallexample
../singular_texi/tricks.tex(,569) @c reused example Identifier_resolution_1 tricks.doc:534 
../singular_texi/tricks.tex(,570) ring r=0,(x, x1),dp; // name x is substring of name x1 !!!!!!!!!
../singular_texi/tricks.tex(,571) x;x1;   // resolved poly x
../singular_texi/tricks.tex(,572) @expansion{} x
../singular_texi/tricks.tex(,573) @expansion{} x1
../singular_texi/tricks.tex(,574) short=0; 2x1; // resolved to monomial 2*x^1 !!!!!!
../singular_texi/tricks.tex(,575) @expansion{} 2*x
../singular_texi/tricks.tex(,576) 2*x1; // resolved to product 2 times x1
../singular_texi/tricks.tex(,577) @expansion{} 2*x1
../singular_texi/tricks.tex(,578) @c end example Identifier_resolution_1 tricks.doc:534
../singular_texi/tricks.tex(,579) @end smallexample
../singular_texi/singular.tex(,151) 
../singular_texi/singular.tex(,152) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,153) @node Examples, Polynomial data, Tricks and pitfalls, Top
../singular_texi/singular.tex(,154) @appendix Examples
../singular_texi/singular.tex(,155) @cindex Examples
../singular_texi/examples.tex(,1) @comment -*-texinfo-*-
../singular_texi/examples.tex(,2) @comment This file was generated by doc2tex.pl from examples.doc
../singular_texi/examples.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT examples.doc INSTEAD
../singular_texi/examples.tex(,4) @comment Id: examples.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/examples.tex(,5) @comment this file contains the examples
../singular_texi/examples.tex(,6) 
../singular_texi/examples.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/examples.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/examples.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/examples.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/examples.tex(,11) @c ignores the `@ignore').
../singular_texi/examples.tex(,24) 
../singular_texi/examples.tex(,28) 
../singular_texi/examples.tex(,30) @menu
../singular_texi/examples.tex(,31) * Milnor and Tjurina::
../singular_texi/examples.tex(,32) * Procedures and LIB::
../singular_texi/examples.tex(,33) * Critical points::
../singular_texi/examples.tex(,34) * Saturation::
../singular_texi/examples.tex(,35) * Long coefficients::
../singular_texi/examples.tex(,36) * Parameters::
../singular_texi/examples.tex(,37) * T1 and T2::
../singular_texi/examples.tex(,38) * Deformations::
../singular_texi/examples.tex(,39) * Finite fields::
../singular_texi/examples.tex(,40) * Elimination::
../singular_texi/examples.tex(,41) * Free resolution::
../singular_texi/examples.tex(,42) * Computation of Ext::
../singular_texi/examples.tex(,43) * Polar curves::
../singular_texi/examples.tex(,44) * Depth::
../singular_texi/examples.tex(,45) * Formatting output::
../singular_texi/examples.tex(,46) * Cyclic roots::
../singular_texi/examples.tex(,47) * G_a -Invariants::
../singular_texi/examples.tex(,48) * Invariants of a finite group::
../singular_texi/examples.tex(,49) * Factorization::
../singular_texi/examples.tex(,50) * Puiseux pairs::
../singular_texi/examples.tex(,51) * Primary decomposition::
../singular_texi/examples.tex(,52) * Normalization::
../singular_texi/examples.tex(,53) * Branches of an Isolated Space Curve Singularity::
../singular_texi/examples.tex(,54) * Kernel of module homomorphisms::
../singular_texi/examples.tex(,55) * Algebraic dependence::
../singular_texi/examples.tex(,56) * Classification::
../singular_texi/examples.tex(,57) * Fast lexicographical GB::
../singular_texi/examples.tex(,58) * Parallelization with MPtcp links::
../singular_texi/examples.tex(,59) @end menu
../singular_texi/examples.tex(,61) 
../singular_texi/examples.tex(,78) 
../singular_texi/examples.tex(,79) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,80) @c @node Start SINGULAR, Milnor and Tjurina,Examples, Examples
../singular_texi/examples.tex(,81) @c @section Start SINGULAR
../singular_texi/examples.tex(,82) @c @cindex Start SINGULAR
../singular_texi/examples.tex(,83) 
../singular_texi/examples.tex(,84) @c Call @sc{Singular} by typing @code{Singular} [return]
../singular_texi/examples.tex(,85) 
../singular_texi/examples.tex(,86) @c To use the online help type for instance:
../singular_texi/examples.tex(,87) @c    @code{help;} @code{help command;} @code{help General syntax;} @code{help ring;}...
../singular_texi/examples.tex(,88) @c Please note:  EVERY COMMAND MUST END WITH A SEMICOLON ";"
../singular_texi/examples.tex(,89) 
../singular_texi/examples.tex(,90) @c To leave @sc{Singular}, type one of the:
../singular_texi/examples.tex(,91) @c    @code{quit;} @code{exit;} @code{$}
../singular_texi/examples.tex(,92) 
../singular_texi/examples.tex(,93) @c The two characters @code{//} make the rest of the line a comment.
../singular_texi/examples.tex(,94) 
../singular_texi/examples.tex(,95) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,96) @node Milnor and Tjurina, Procedures and LIB, Examples, Examples
../singular_texi/examples.tex(,97) @section Milnor and Tjurina
../singular_texi/examples.tex(,98) @cindex Milnor
../singular_texi/examples.tex(,99) @cindex Tjurina
../singular_texi/examples.tex(,100) 
../singular_texi/examples.tex(,101) The Milnor number, resp.@: the Tjurina number, of a power
../singular_texi/examples.tex(,102) series f in
../singular_texi/examples.tex(,103) @tex
../singular_texi/examples.tex(,104) $K[[x_1,\ldots,x_n]]$
../singular_texi/examples.tex(,105) @end tex
../singular_texi/examples.tex(,109) is
../singular_texi/examples.tex(,116) @tex
../singular_texi/examples.tex(,117) $$
../singular_texi/examples.tex(,118) \hbox{milnor}(f) = \hbox{dim}_K(K[[x_1,\ldots,x_n]]/\hbox{jacob}(f)),
../singular_texi/examples.tex(,119) $$
../singular_texi/examples.tex(,120) respectively
../singular_texi/examples.tex(,121) $$
../singular_texi/examples.tex(,122) \hbox{tjurina}(f) = \hbox{dim}_K(K[[x_1,\ldots,x_n]]/((f)+\hbox{jacob}(f)))
../singular_texi/examples.tex(,123) $$
../singular_texi/examples.tex(,124) where
../singular_texi/examples.tex(,125) @end tex
../singular_texi/examples.tex(,126) @code{jacob(f)} is the ideal generated by the partials
../singular_texi/examples.tex(,127) of @code{f}. @code{tjurina(f)} is finite, if and only if @code{f} has an
../singular_texi/examples.tex(,128) isolated singularity. The same holds for @code{milnor(f)} if
../singular_texi/examples.tex(,129) K has characteristic 0.
../singular_texi/examples.tex(,130) @sc{Singular} displays -1 if the dimension is infinite.
../singular_texi/examples.tex(,131) 
../singular_texi/examples.tex(,132) @sc{Singular} cannot compute with infinite power series. But it can
../singular_texi/examples.tex(,133) work in
../singular_texi/examples.tex(,134) @tex
../singular_texi/examples.tex(,135) $\hbox{Loc}_{(x)}K[x_1,\ldots,x_n]$,
../singular_texi/examples.tex(,136) @end tex
../singular_texi/examples.tex(,140) the localization of
../singular_texi/examples.tex(,141) @tex
../singular_texi/examples.tex(,142) $K[x_1,\ldots,x_n]$
../singular_texi/examples.tex(,143) @end tex
../singular_texi/examples.tex(,147) at the maximal ideal
../singular_texi/examples.tex(,148) @tex
../singular_texi/examples.tex(,149) $(x_1,\ldots,x_n)$.
../singular_texi/examples.tex(,150) @end tex
../singular_texi/examples.tex(,154) To do this one has to define an
../singular_texi/examples.tex(,155) s-ordering like ds, Ds, ls, ws, Ws or an appropriate matrix
../singular_texi/examples.tex(,156) ordering (look at the manual to get information about the possible
../singular_texi/examples.tex(,157) monomial orderings in @sc{Singular}, or type @code{help Monomial orderings;}
../singular_texi/examples.tex(,158) to get a menu of possible orderings. For further help type, e.g.,
../singular_texi/examples.tex(,159) @code{help local orderings;}).
../singular_texi/examples.tex(,161) See @ref{Monomial orderings}.
../singular_texi/examples.tex(,163) 
../singular_texi/examples.tex(,164) We shall show in the example below how to realize the following:
../singular_texi/examples.tex(,165) @itemize @bullet
../singular_texi/examples.tex(,166) @item
../singular_texi/examples.tex(,167) set option @code{prot} to have a short protocol during standard basis
../singular_texi/examples.tex(,168) computation
../singular_texi/examples.tex(,169) @item
../singular_texi/examples.tex(,170) define the ring @code{r1} with char 32003, variables @code{x,y,z}, monomial
../singular_texi/examples.tex(,171)   ordering @code{ds}, series ring (i.e., K[x,y,z] localized at (x,y,z))
../singular_texi/examples.tex(,172) @item
../singular_texi/examples.tex(,173) list the information about @code{r1} by typing its name
../singular_texi/examples.tex(,174) @item
../singular_texi/examples.tex(,175) define the integers @code{a,b,c,t}
../singular_texi/examples.tex(,176) @item
../singular_texi/examples.tex(,177) define a polynomial @code{f} (depending on @code{a,b,c,t}) and display it
../singular_texi/examples.tex(,178) @item
../singular_texi/examples.tex(,179) define the jacobian ideal @code{i} of @code{f}
../singular_texi/examples.tex(,180) @item
../singular_texi/examples.tex(,181) compute a standard basis of @code{i}
../singular_texi/examples.tex(,182) @item
../singular_texi/examples.tex(,183) compute the Milnor number (=250) with @code{vdim} and create and display
../singular_texi/examples.tex(,184)   a string in order to comment the result
../singular_texi/examples.tex(,185)   (text between quotes "  "; is a 'string')
../singular_texi/examples.tex(,186) @item
../singular_texi/examples.tex(,187) compute a standard basis of @code{i+(f)}
../singular_texi/examples.tex(,188) @item
../singular_texi/examples.tex(,189) compute the Tjurina number (=195) with @code{vdim}
../singular_texi/examples.tex(,190) @item
../singular_texi/examples.tex(,191) then compute the Milnor number (=248) and the Tjurina number
../singular_texi/examples.tex(,192) (=195) for @code{t}=1
../singular_texi/examples.tex(,193) @item
../singular_texi/examples.tex(,194) reset the option to @code{noprot}
../singular_texi/examples.tex(,195) @end itemize
../singular_texi/examples.tex(,196) 
../singular_texi/examples.tex(,197) @smallexample
../singular_texi/examples.tex(,198) @c computed example Milnor_and_Tjurina examples.doc:196 
../singular_texi/examples.tex(,199)   option(prot);
../singular_texi/examples.tex(,200)   ring r1 = 32003,(x,y,z),ds;
../singular_texi/examples.tex(,201)   r1;
../singular_texi/examples.tex(,202) @expansion{} //   characteristic : 32003
../singular_texi/examples.tex(,203) @expansion{} //   number of vars : 3
../singular_texi/examples.tex(,204) @expansion{} //        block   1 : ordering ds
../singular_texi/examples.tex(,205) @expansion{} //                  : names    x y z 
../singular_texi/examples.tex(,206) @expansion{} //        block   2 : ordering C
../singular_texi/examples.tex(,207)   int a,b,c,t=11,5,3,0;
../singular_texi/examples.tex(,208)   poly f = x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3+
../singular_texi/examples.tex(,209)            x^(c-2)*y^c*(y^2+t*x)^2;
../singular_texi/examples.tex(,210)   f;
../singular_texi/examples.tex(,211) @expansion{} y5+x5y2+x2y2z3+xy7+z9+x11
../singular_texi/examples.tex(,212)   ideal i=jacob(f);
../singular_texi/examples.tex(,213)   i;
../singular_texi/examples.tex(,214) @expansion{} i[1]=5x4y2+2xy2z3+y7+11x10
../singular_texi/examples.tex(,215) @expansion{} i[2]=5y4+2x5y+2x2yz3+7xy6
../singular_texi/examples.tex(,216) @expansion{} i[3]=3x2y2z2+9z8
../singular_texi/examples.tex(,217)   ideal j=std(i);
../singular_texi/examples.tex(,218) @expansion{} [1023:2]7(2)s8s10s11s12s(3)s13(4)s(5)s14(6)s(7)15--.s(6)-16.-.s(5)17.s(7)\
../singular_texi/examples.tex(,219)    s--s18(6).--19-..sH(24)20(3)...21....22....23.--24-
../singular_texi/examples.tex(,220) @expansion{} product criterion:10 chain criterion:69
../singular_texi/examples.tex(,221)   "The Milnor number of f(11,5,3) for t=0 is", vdim(j);
../singular_texi/examples.tex(,222) @expansion{} The Milnor number of f(11,5,3) for t=0 is 250
../singular_texi/examples.tex(,223)   j=i+f;    // overwrite j
../singular_texi/examples.tex(,224)   j=std(j);
../singular_texi/examples.tex(,225) @expansion{} [1023:2]7(3)s8(2)s10s11(3)ss12(4)s(5)s13(6)s(8)s14(9).s(10).15--sH(23)(8)\
../singular_texi/examples.tex(,226)    ...16......17.......sH(21)(9)sH(20)16(10).17...........18.......19..----.\
../singular_texi/examples.tex(,227)    .sH(19)
../singular_texi/examples.tex(,228) @expansion{} product criterion:10 chain criterion:53
../singular_texi/examples.tex(,229)   vdim(j);  // compute the Tjurina number for t=0
../singular_texi/examples.tex(,230) @expansion{} 195
../singular_texi/examples.tex(,231)   t=1;
../singular_texi/examples.tex(,232)   f=x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3
../singular_texi/examples.tex(,233)     +x^(c-2)*y^c*(y^2+t*x)^2;
../singular_texi/examples.tex(,234)   ideal i1=jacob(f);
../singular_texi/examples.tex(,235)   ideal j1=std(i1);
../singular_texi/examples.tex(,236) @expansion{} [1023:2]7(2)s8s10s11s12s13(3)ss(4)s14(5)s(6)s15(7).....s(8)16.s...s(9)..1\
../singular_texi/examples.tex(,237)    7............s18(10).....s(11)..-.19.......sH(24)(10).....20...........21\
../singular_texi/examples.tex(,238)    ..........22.............................23..............................\
../singular_texi/examples.tex(,239)    .24.----------.25.26
../singular_texi/examples.tex(,240) @expansion{} product criterion:11 chain criterion:83
../singular_texi/examples.tex(,241)   "The Milnor number of f(11,5,3) for t=1:",vdim(j1);
../singular_texi/examples.tex(,242) @expansion{} The Milnor number of f(11,5,3) for t=1: 248
../singular_texi/examples.tex(,243)   vdim(std(j1+f));   // compute the Tjurina number for t=1
../singular_texi/examples.tex(,244) @expansion{} [1023:2]7(16)s8(15)s10s11ss(16)-12.s-s13s(17)s(18)s(19)-s(18).-14-s(17)-s\
../singular_texi/examples.tex(,245)    (16)ss(17)s15(18)..-s...--.16....-.......s(16).sH(23)s(18)...17..........\
../singular_texi/examples.tex(,246)    18.........sH(20)17(17)....................18..........19..---....-.-....\
../singular_texi/examples.tex(,247)    .....20.-----...s17(9).........18..............19..-.......20.-......21..\
../singular_texi/examples.tex(,248)    .......sH(19)16(5).....18......19.-----
../singular_texi/examples.tex(,249) @expansion{} product criterion:15 chain criterion:174
../singular_texi/examples.tex(,250) @expansion{} 195
../singular_texi/examples.tex(,251)   option(noprot);
../singular_texi/examples.tex(,252) @c end example Milnor_and_Tjurina examples.doc:196
../singular_texi/examples.tex(,253) @end smallexample
../singular_texi/examples.tex(,254) 
../singular_texi/examples.tex(,255) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,256) @node Procedures and LIB, Critical points, Milnor and Tjurina, Examples
../singular_texi/examples.tex(,257) @section Procedures and LIB
../singular_texi/examples.tex(,258) @cindex Procedures and LIB
../singular_texi/examples.tex(,259) 
../singular_texi/examples.tex(,260) The computation of the Milnor number (for an arbitrary isolated complete
../singular_texi/examples.tex(,261) intersection singularity ICIS) and the Tjurina number (for an arbitrary
../singular_texi/examples.tex(,262) isolated singularity) can be done by using procedures from the library
../singular_texi/examples.tex(,263) @code{sing.lib}. For a hypersurface singularity it is very easy to write a
../singular_texi/examples.tex(,264) procedure which computes the Milnor number and the Tjurina number.
../singular_texi/examples.tex(,265) 
../singular_texi/examples.tex(,266) We shall demonstrate:
../singular_texi/examples.tex(,267) @itemize @bullet
../singular_texi/examples.tex(,268) @item
../singular_texi/examples.tex(,269) load the library @code{sing.lib}
../singular_texi/examples.tex(,270) @c item
../singular_texi/examples.tex(,271) @c disable the protocol option
../singular_texi/examples.tex(,272) @item
../singular_texi/examples.tex(,273) define a local ring in 2 variables and characteristic 0
../singular_texi/examples.tex(,274) @item
../singular_texi/examples.tex(,275) define a plane curve singularity
../singular_texi/examples.tex(,276) @item
../singular_texi/examples.tex(,277) compute Milnor number and Tjurina number by using the procedures
../singular_texi/examples.tex(,278) @code{milnor} and @code{tjurina}
../singular_texi/examples.tex(,279) @item
../singular_texi/examples.tex(,280) write your own procedures:
../singular_texi/examples.tex(,281) (A procedure has a list of input parameters and of return values, both
../singular_texi/examples.tex(,282) lists may be empty.)
../singular_texi/examples.tex(,283)   @itemize @minus
../singular_texi/examples.tex(,284)   @item
../singular_texi/examples.tex(,285)   the procedure @code{mil} which must be called with one parameter, a
../singular_texi/examples.tex(,286)   polynomial.
../singular_texi/examples.tex(,287)   The name g is local to the procedure and is killed automatically.
../singular_texi/examples.tex(,288)   @code{mil} returns the Milnor number (and displays a comment).
../singular_texi/examples.tex(,289)   @item
../singular_texi/examples.tex(,290)   the procedure @code{tjur} where the parameters are not specified. They
../singular_texi/examples.tex(,291)   are referred
../singular_texi/examples.tex(,292)   to by @code{#[1]} for the 1st, @code{#[2]} for the 2nd parameter, etc.
../singular_texi/examples.tex(,293)   @code{tjur} returns the Tjurina number (and displays a comment).
../singular_texi/examples.tex(,294)   @item
../singular_texi/examples.tex(,295)   the procedure @code{milrina} which returns a list consisting of two
../singular_texi/examples.tex(,296)   integers,
../singular_texi/examples.tex(,297)   the Milnor and the Tjurina number.
../singular_texi/examples.tex(,298)   @end itemize
../singular_texi/examples.tex(,299) @end itemize
../singular_texi/examples.tex(,300) 
../singular_texi/examples.tex(,301) @smallexample
../singular_texi/examples.tex(,302) LIB "sing.lib";
../singular_texi/examples.tex(,303) // you should get the information that sing.lib has been loaded
../singular_texi/examples.tex(,304) // together with some other libraries which are needed by sing.lib
../singular_texi/examples.tex(,305) ring r = 0,(x,y),ds;
../singular_texi/examples.tex(,306) poly f = x7+y7+(x-y)^2*x2y2;
../singular_texi/examples.tex(,307) milnor(f);
../singular_texi/examples.tex(,308) @expansion{} 28
../singular_texi/examples.tex(,309) tjurina(f);
../singular_texi/examples.tex(,310) @expansion{} 24
../singular_texi/examples.tex(,311) 
../singular_texi/examples.tex(,312) proc mil (poly g)
../singular_texi/examples.tex(,313) @{
../singular_texi/examples.tex(,314)    "Milnor number:";
../singular_texi/examples.tex(,315)    return(vdim(std(jacob(g))));
../singular_texi/examples.tex(,316) @}
../singular_texi/examples.tex(,317) mil(f);
../singular_texi/examples.tex(,318) @expansion{} Milnor number:
../singular_texi/examples.tex(,319) @expansion{} 28
../singular_texi/examples.tex(,320) 
../singular_texi/examples.tex(,321) proc tjur
../singular_texi/examples.tex(,322) @{
../singular_texi/examples.tex(,323)    "Tjurina number:";
../singular_texi/examples.tex(,324)    return(vdim(std(jacob(#[1])+#[1])));
../singular_texi/examples.tex(,325) @}
../singular_texi/examples.tex(,326) tjur(f);
../singular_texi/examples.tex(,327) @expansion{} Tjurina number:
../singular_texi/examples.tex(,328) @expansion{} 24
../singular_texi/examples.tex(,329) 
../singular_texi/examples.tex(,330) proc milrina (poly f)
../singular_texi/examples.tex(,331) @{
../singular_texi/examples.tex(,332)    ideal j=jacob(f);
../singular_texi/examples.tex(,333)    list L=vdim(std(j)),vdim(std(j+f));
../singular_texi/examples.tex(,334)    return(L);
../singular_texi/examples.tex(,335) @}
../singular_texi/examples.tex(,336) milrina(f);     // a list containing Milnor and Tjurina number
../singular_texi/examples.tex(,337) @expansion{} [1]:
../singular_texi/examples.tex(,338) @expansion{}    28
../singular_texi/examples.tex(,339) @expansion{} [2]:
../singular_texi/examples.tex(,340) @expansion{}    24
../singular_texi/examples.tex(,341) milrina(f)[2];  // the second element of the list
../singular_texi/examples.tex(,342) @expansion{} 24
../singular_texi/examples.tex(,343) @end smallexample
../singular_texi/examples.tex(,344) 
../singular_texi/examples.tex(,345) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,346) @node Critical points, Saturation, Procedures and LIB, Examples
../singular_texi/examples.tex(,347) @section Critical points
../singular_texi/examples.tex(,348) @cindex Critical points
../singular_texi/examples.tex(,349) 
../singular_texi/examples.tex(,350) The same computation which computes the Milnor, resp.@: the Tjurina,
../singular_texi/examples.tex(,351) number, but with ordering @code{dp} instead of @code{ds} (i.e., in
../singular_texi/examples.tex(,352) @tex
../singular_texi/examples.tex(,353) $K[x_1,\ldots,x_n]$
../singular_texi/examples.tex(,354) @end tex
../singular_texi/examples.tex(,358) instead of
../singular_texi/examples.tex(,359) @tex
../singular_texi/examples.tex(,360) $\hbox{Loc}_{(x)}K[x_1,\ldots,x_n])$
../singular_texi/examples.tex(,361) @end tex
../singular_texi/examples.tex(,365) gives:
../singular_texi/examples.tex(,366) @itemize @bullet
../singular_texi/examples.tex(,367) @item
../singular_texi/examples.tex(,368) the number of critical points of @code{f} in the affine plane
../singular_texi/examples.tex(,369) (counted with multiplicities)
../singular_texi/examples.tex(,370) @item
../singular_texi/examples.tex(,371) the number of singular points of @code{f} on the affine plane curve @code{f}=0
../singular_texi/examples.tex(,372) (counted with multiplicities).
../singular_texi/examples.tex(,373) @end itemize
../singular_texi/examples.tex(,374) 
../singular_texi/examples.tex(,375) We start with the ring @code{r1} from section @ref{Milnor and Tjurina} and its elements.
../singular_texi/examples.tex(,376) 
../singular_texi/examples.tex(,377) The following will be realized below:
../singular_texi/examples.tex(,378) @itemize @bullet
../singular_texi/examples.tex(,379) @item
../singular_texi/examples.tex(,380) reset the protocol option and activate the timer
../singular_texi/examples.tex(,381) @item
../singular_texi/examples.tex(,382) define the ring @code{r2} with char 32003, variables @code{x,y,z} and monomial
../singular_texi/examples.tex(,383)   ordering @code{dp} (= degrevlex) (i.e., the polynomial ring = K[x,y,z]).
../singular_texi/examples.tex(,384) @item
../singular_texi/examples.tex(,385) Note that polynomials, ideals, matrices (of polys), vectors,
../singular_texi/examples.tex(,386)   modules belong to a ring, hence we have to define @code{f} and @code{jacob(f)}
../singular_texi/examples.tex(,387)   again in @code{r2}. Since these objects are local to a ring, we may use
../singular_texi/examples.tex(,388)   the same names.
../singular_texi/examples.tex(,389)   Instead of defining @code{f} again we map it from ring @code{r1} to @code{r2}
../singular_texi/examples.tex(,390)   by using the @code{imap} command
../singular_texi/examples.tex(,391)   (@code{imap} is a convenient way to map variables
../singular_texi/examples.tex(,392)   from some ring identically to variables with the same name in the
../singular_texi/examples.tex(,393)   basering, even if the ground field is different. Compare with @code{fetch}
../singular_texi/examples.tex(,394)   which works for almost identical rings,
../singular_texi/examples.tex(,395)   e.g., if the rings differ only by the ordering or by the names of the
../singular_texi/examples.tex(,396)   variables and which may be used to rename variables).
../singular_texi/examples.tex(,397)   Integers and strings, however, do not belong to any ring. Once
../singular_texi/examples.tex(,398)   defined they are globally known.
../singular_texi/examples.tex(,399) @item
../singular_texi/examples.tex(,400) The result of the computation here (together with the previous one in
../singular_texi/examples.tex(,401)  @ref{Milnor and Tjurina}) shows that (for @code{t}=0)
../singular_texi/examples.tex(,402) @tex
../singular_texi/examples.tex(,403) $\hbox{dim}_K(\hbox{Loc}_{(x,y,z)}K[x,y,z]/\hbox{jacob}(f))$
../singular_texi/examples.tex(,404) @end tex
../singular_texi/examples.tex(,408) = 250 (previously computed) while
../singular_texi/examples.tex(,409) @tex
../singular_texi/examples.tex(,410) $\hbox{dim}_K(K[x,y,z]/\hbox{jacob}(f))$
../singular_texi/examples.tex(,411) @end tex
../singular_texi/examples.tex(,415) = 536. Hence @code{f} has 286 critical points,
../singular_texi/examples.tex(,416)   counted with multiplicity, outside the origin.
../singular_texi/examples.tex(,417)   Moreover, since
../singular_texi/examples.tex(,418) @tex
../singular_texi/examples.tex(,419) $\hbox{dim}_K(\hbox{Loc}_{(x,y,z)}K[x,y,z]/(\hbox{jacob}(f)+(f)))$
../singular_texi/examples.tex(,420) @end tex
../singular_texi/examples.tex(,424) = 195 =
../singular_texi/examples.tex(,425) @tex
../singular_texi/examples.tex(,426) $\hbox{dim}_K(K[x,y,z]/(\hbox{jacob}(f)+(f)))$,
../singular_texi/examples.tex(,427) @end tex
../singular_texi/examples.tex(,431) the affine surface @code{f}=0 is smooth outside the origin.
../singular_texi/examples.tex(,432) @end itemize
../singular_texi/examples.tex(,433) 
../singular_texi/examples.tex(,434) @smallexample
../singular_texi/examples.tex(,435) @c computed example Critical_points examples.doc:402 
../singular_texi/examples.tex(,436)   ring r1 = 32003,(x,y,z),ds;
../singular_texi/examples.tex(,437)   int a,b,c,t=11,5,3,0;
../singular_texi/examples.tex(,438)   poly f = x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3+
../singular_texi/examples.tex(,439)            x^(c-2)*y^c*(y^2+t*x)^2;
../singular_texi/examples.tex(,440)   option(noprot);
../singular_texi/examples.tex(,441)   timer=1;
../singular_texi/examples.tex(,442)   ring r2 = 32003,(x,y,z),dp;
../singular_texi/examples.tex(,443)   poly f=imap(r1,f);
../singular_texi/examples.tex(,444)   ideal j=jacob(f);
../singular_texi/examples.tex(,445)   vdim(std(j));
../singular_texi/examples.tex(,446) @expansion{} 536
../singular_texi/examples.tex(,447)   vdim(std(j+f));
../singular_texi/examples.tex(,448) @expansion{} 195
../singular_texi/examples.tex(,449)   timer=0;  // reset timer
../singular_texi/examples.tex(,450) @c end example Critical_points examples.doc:402
../singular_texi/examples.tex(,451) @end smallexample
../singular_texi/examples.tex(,452) 
../singular_texi/examples.tex(,453) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,455) @node Saturation, Long coefficients, Critical points, Examples
../singular_texi/examples.tex(,460) @section Saturation
../singular_texi/examples.tex(,461) @cindex Saturation
../singular_texi/examples.tex(,462) 
../singular_texi/examples.tex(,463) Since in the example above, the ideal 
../singular_texi/examples.tex(,467) @tex
../singular_texi/examples.tex(,468) $j+(f)$
../singular_texi/examples.tex(,469) @end tex
../singular_texi/examples.tex(,470)  has the same @code{vdim}
../singular_texi/examples.tex(,471) in the polynomial ring and in the localization at 0 (each 195),
../singular_texi/examples.tex(,472) 
../singular_texi/examples.tex(,476) @tex
../singular_texi/examples.tex(,477) $f=0$
../singular_texi/examples.tex(,478) @end tex
../singular_texi/examples.tex(,479)  is smooth outside 0.
../singular_texi/examples.tex(,480) Hence 
../singular_texi/examples.tex(,484) @tex
../singular_texi/examples.tex(,485) $j+(f)$
../singular_texi/examples.tex(,486) @end tex
../singular_texi/examples.tex(,487)  contains some power of the maximal ideal 
../singular_texi/examples.tex(,491) @tex
../singular_texi/examples.tex(,492) $m$
../singular_texi/examples.tex(,493) @end tex
../singular_texi/examples.tex(,494) . We shall
../singular_texi/examples.tex(,495) check this in a different manner:
../singular_texi/examples.tex(,496) For any two ideals 
../singular_texi/examples.tex(,500) @tex
../singular_texi/examples.tex(,501) $i, j$
../singular_texi/examples.tex(,502) @end tex
../singular_texi/examples.tex(,503)  in the basering 
../singular_texi/examples.tex(,507) @tex
../singular_texi/examples.tex(,508) $R$
../singular_texi/examples.tex(,509) @end tex
../singular_texi/examples.tex(,510)  let
../singular_texi/examples.tex(,511) @tex
../singular_texi/examples.tex(,512) $$
../singular_texi/examples.tex(,513) \hbox{sat}(i,j)=\{x\in R\;|\; \exists\;n\hbox{ s.t. }
../singular_texi/examples.tex(,514) x\cdot(j^n)\subseteq i\}
../singular_texi/examples.tex(,515) = \bigcup_{n=1}^\infty i:j^n$$
../singular_texi/examples.tex(,516) @end tex
../singular_texi/examples.tex(,521) @*denote the saturation of 
../singular_texi/examples.tex(,525) @tex
../singular_texi/examples.tex(,526) $i$
../singular_texi/examples.tex(,527) @end tex
../singular_texi/examples.tex(,528)  with respect to 
../singular_texi/examples.tex(,532) @tex
../singular_texi/examples.tex(,533) $j$
../singular_texi/examples.tex(,534) @end tex
../singular_texi/examples.tex(,535) . This defines,
../singular_texi/examples.tex(,536) geometrically, the closure of the complement of V(
../singular_texi/examples.tex(,540) @tex
../singular_texi/examples.tex(,541) $j$
../singular_texi/examples.tex(,542) @end tex
../singular_texi/examples.tex(,543) ) in V(
../singular_texi/examples.tex(,547) @tex
../singular_texi/examples.tex(,548) $i$
../singular_texi/examples.tex(,549) @end tex
../singular_texi/examples.tex(,550) )
../singular_texi/examples.tex(,551) (V(
../singular_texi/examples.tex(,555) @tex
../singular_texi/examples.tex(,556) $i$
../singular_texi/examples.tex(,557) @end tex
../singular_texi/examples.tex(,558) ) denotes the variety defined by 
../singular_texi/examples.tex(,562) @tex
../singular_texi/examples.tex(,563) $i$
../singular_texi/examples.tex(,564) @end tex
../singular_texi/examples.tex(,565) ).
../singular_texi/examples.tex(,566) In our case, 
../singular_texi/examples.tex(,570) @tex
../singular_texi/examples.tex(,571) $sat(j+(f),m)$
../singular_texi/examples.tex(,572) @end tex
../singular_texi/examples.tex(,573)  must be the whole ring, hence
../singular_texi/examples.tex(,574) generated by 1.
../singular_texi/examples.tex(,575) 
../singular_texi/examples.tex(,576) The saturation is computed by the procedure @code{sat} in
../singular_texi/examples.tex(,577) @code{elim.lib} by computing iterated ideal quotients with the maximal
../singular_texi/examples.tex(,578) ideal.  @code{sat} returns a list of two elements: the saturated ideal
../singular_texi/examples.tex(,579) and the number of iterations.  (Note that @code{maxideal(n)} denotes the
../singular_texi/examples.tex(,580) n-th power of the maximal ideal).
../singular_texi/examples.tex(,581) 
../singular_texi/examples.tex(,582) @smallexample
../singular_texi/examples.tex(,583) @c computed example Saturation examples.doc:457 
../singular_texi/examples.tex(,584)   LIB "elim.lib";         // loading library elim.lib
../singular_texi/examples.tex(,585)   // you should get the information that elim.lib has been loaded
../singular_texi/examples.tex(,586)   // together with some other libraries which are needed by it
../singular_texi/examples.tex(,587)   option(noprot);         // no protocol
../singular_texi/examples.tex(,588)   ring r2 = 32003,(x,y,z),dp;
../singular_texi/examples.tex(,589)   poly f = x^11+y^5+z^(3*3)+x^(3+2)*y^(3-1)+x^(3-1)*y^(3-1)*z3+
../singular_texi/examples.tex(,590)     x^(3-2)*y^3*(y^2)^2;
../singular_texi/examples.tex(,591)   ideal j=jacob(f);
../singular_texi/examples.tex(,592)   sat(j+f,maxideal(1));
../singular_texi/examples.tex(,593) @expansion{} [1]:
../singular_texi/examples.tex(,594) @expansion{}    _[1]=1
../singular_texi/examples.tex(,595) @expansion{} [2]:
../singular_texi/examples.tex(,596) @expansion{}    17
../singular_texi/examples.tex(,597)   // list the variables defined so far:
../singular_texi/examples.tex(,598)   listvar();
../singular_texi/examples.tex(,599) @expansion{} // r2                   [0]  *ring
../singular_texi/examples.tex(,600) @expansion{} //      j                    [0]  ideal, 3 generator(s)
../singular_texi/examples.tex(,601) @expansion{} //      f                    [0]  poly
../singular_texi/examples.tex(,602) @expansion{} // LIB                  [0]  string standard.lib,elim.li..., 83 char(s)
../singular_texi/examples.tex(,603) @c end example Saturation examples.doc:457
../singular_texi/examples.tex(,604) @end smallexample
../singular_texi/examples.tex(,605) 
../singular_texi/examples.tex(,606) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,608) @node Long coefficients, Parameters, Saturation, Examples
../singular_texi/examples.tex(,609) @section Long coefficients
../singular_texi/examples.tex(,610) @cindex Long coefficients
../singular_texi/examples.tex(,611) 
../singular_texi/examples.tex(,612) The following innocent example produces in its standard basis
../singular_texi/examples.tex(,613) extremely long coefficients in char 0 for the lexicographical
../singular_texi/examples.tex(,614) ordering.
../singular_texi/examples.tex(,615) But a very small deformation does not (the undeformed
../singular_texi/examples.tex(,616) example is degenerate with respect to the Newton boundary).
../singular_texi/examples.tex(,617) This example demonstrates that it might be wise, for complicated
../singular_texi/examples.tex(,618) examples, to do the calculation first in positive char (e.g., 32003).
../singular_texi/examples.tex(,619) It has been shown, that in complicated examples, more than 95 percent of
../singular_texi/examples.tex(,620) the time needed for a standard basis computation is used in the
../singular_texi/examples.tex(,621) computation of the coefficients (in char 0).
../singular_texi/examples.tex(,622) The representation of long integers with real is demonstrated.
../singular_texi/examples.tex(,623) 
../singular_texi/examples.tex(,624) @smallexample
../singular_texi/examples.tex(,625) @c computed example Long_coefficients examples.doc:491 
../singular_texi/examples.tex(,626) timer = 1;                              // activate the timer
../singular_texi/examples.tex(,627) option(prot);
../singular_texi/examples.tex(,628) ring R0 = 0,(x,y),lp;
../singular_texi/examples.tex(,629) poly f = x5+y11+xy9+x3y9;
../singular_texi/examples.tex(,630) ideal i = jacob(f);
../singular_texi/examples.tex(,631) ideal i1 = i,i[1]*i[2];                 // undeformed ideal
../singular_texi/examples.tex(,632) ideal i2 = i,i[1]*i[2]+1/1000000*x5y8;  // deformation of i1
../singular_texi/examples.tex(,633) i1; i2;
../singular_texi/examples.tex(,634) @expansion{} i1[1]=5x4+3x2y9+y9
../singular_texi/examples.tex(,635) @expansion{} i1[2]=9x3y8+9xy8+11y10
../singular_texi/examples.tex(,636) @expansion{} i1[3]=45x7y8+27x5y17+45x5y8+55x4y10+36x3y17+33x2y19+9xy17+11y19
../singular_texi/examples.tex(,637) @expansion{} i2[1]=5x4+3x2y9+y9
../singular_texi/examples.tex(,638) @expansion{} i2[2]=9x3y8+9xy8+11y10
../singular_texi/examples.tex(,639) @expansion{} i2[3]=45x7y8+27x5y17+45000001/1000000x5y8+55x4y10+36x3y17+33x2y19+9xy17+1\
../singular_texi/examples.tex(,640)    1y19
../singular_texi/examples.tex(,641) ideal j = std(i1);
../singular_texi/examples.tex(,642) @expansion{} [65535:1]11(2)ss19s20s21s22(3)-23-s27s28s29s30s31s32s33s34s35s36s37s38s39\
../singular_texi/examples.tex(,643)    s40s70-
../singular_texi/examples.tex(,644) @expansion{} product criterion:1 chain criterion:30
../singular_texi/examples.tex(,645) j;
../singular_texi/examples.tex(,646) @expansion{} j[1]=264627y39+26244y35-1323135y30-131220y26+1715175y21+164025y17+1830125\
../singular_texi/examples.tex(,647)    y16
../singular_texi/examples.tex(,648) @expansion{} j[2]=12103947791971846719838321886393392913750065060875xy8-28639152114168\
../singular_texi/examples.tex(,649)    3198701331939250003266767738632875y38-31954402206909026926764622877573565\
../singular_texi/examples.tex(,650)    78554430672591y37+57436621420822663849721381265738895282846320y36+1657764\
../singular_texi/examples.tex(,651)    214948799497573918210031067353932439400y35+213018481589308191195677223898\
../singular_texi/examples.tex(,652)    98682697001205500y34+1822194158663066565585991976961565719648069806148y33\
../singular_texi/examples.tex(,653)    -4701709279892816135156972313196394005220175y32-1351872269688192267600786\
../singular_texi/examples.tex(,654)    97600850686824231975y31-3873063305929810816961516976025038053001141375y30\
../singular_texi/examples.tex(,655)    +1325886675843874047990382005421144061861290080000y29+1597720195476063141\
../singular_texi/examples.tex(,656)    9467945895542406089526966887310y28-26270181336309092660633348002625330426\
../singular_texi/examples.tex(,657)    7126525y27-7586082690893335269027136248944859544727953125y26-867853074106\
../singular_texi/examples.tex(,658)    49464602285843351672148965395945625y25-5545808143273594102173252331151835\
../singular_texi/examples.tex(,659)    700278863924745y24+19075563013460437364679153779038394895638325y23+548562\
../singular_texi/examples.tex(,660)    322715501761058348996776922561074021125y22+157465452677648386073957464715\
../singular_texi/examples.tex(,661)    68100780933983125y21-1414279129721176222978654235817359505555191156250y20\
../singular_texi/examples.tex(,662)    -20711190069445893615213399650035715378169943423125y19+272942733337472665\
../singular_texi/examples.tex(,663)    573418092977905322984009750y18+789065115845334505801847294677413365720955\
../singular_texi/examples.tex(,664)    3750y17+63554897038491686787729656061044724651089803125y16-22099251729923\
../singular_texi/examples.tex(,665)    906699732244761028266074350255961625y14+147937139679655904353579489722585\
../singular_texi/examples.tex(,666)    91339027857296625y10
../singular_texi/examples.tex(,667) @expansion{} j[3]=5x4+3x2y9+y9
../singular_texi/examples.tex(,668) // Compute average coefficient length (=51) by
../singular_texi/examples.tex(,669) //   - converting j[2] to a string in order to compute the number
../singular_texi/examples.tex(,670) //   of characters
../singular_texi/examples.tex(,671) //   - divide this by the number of monomials:
../singular_texi/examples.tex(,672) size(string(j[2]))/size(j[2]);
../singular_texi/examples.tex(,673) @expansion{} 51
../singular_texi/examples.tex(,674) vdim(j);
../singular_texi/examples.tex(,675) @expansion{} 63
../singular_texi/examples.tex(,676) // For a better representation normalize the long coefficients
../singular_texi/examples.tex(,677) // of the polynomial j[2] and map it  to real:
../singular_texi/examples.tex(,678) poly p=(1/12103947791971846719838321886393392913750065060875)*j[2];
../singular_texi/examples.tex(,679) ring R1=real,(x,y),lp;
../singular_texi/examples.tex(,680) short=0; // force the long output format
../singular_texi/examples.tex(,681) poly p=imap(R0,p);
../singular_texi/examples.tex(,682) p;
../singular_texi/examples.tex(,683) @expansion{} x*y^8-2.366e-02*y^38-2.640e-01*y^37+4.745e-06*y^36+1.370e-04*y^35+1.760e-\
../singular_texi/examples.tex(,684)    03*y^34+1.505e-01*y^33+3.884e-07*y^32-1.117e-05*y^31-3.200e-04*y^30+1.095\
../singular_texi/examples.tex(,685)    e-01*y^29+1.320e+00*y^28-2.170e-05*y^27-6.267e-04*y^26-7.170e-03*y^25-4.5\
../singular_texi/examples.tex(,686)    82e-01*y^24+1.576e-06*y^23+4.532e-05*y^22+1.301e-03*y^21-1.168e-01*y^20-1\
../singular_texi/examples.tex(,687)    .711e+00*y^19+2.255e-05*y^18+6.519e-04*y^17+5.251e-03*y^16-1.826e+00*y^14\
../singular_texi/examples.tex(,688)    +1.222e+00*y^10
../singular_texi/examples.tex(,689) // Compute a standard basis for the deformed ideal:
../singular_texi/examples.tex(,690) setring R0;
../singular_texi/examples.tex(,691) j = std(i2);
../singular_texi/examples.tex(,692) @expansion{} [65535:1]11(2)ss19s20s21s22(3)-s23(2)s27.28.s29(3)s30.s31ss32sss33sss34ss\
../singular_texi/examples.tex(,693)    35--38-
../singular_texi/examples.tex(,694) @expansion{} product criterion:11 chain criterion:21
../singular_texi/examples.tex(,695) j;
../singular_texi/examples.tex(,696) @expansion{} j[1]=y16
../singular_texi/examples.tex(,697) @expansion{} j[2]=65610xy8+17393508y27+7223337y23+545292y19+6442040y18-119790y14+80190\
../singular_texi/examples.tex(,698)    y10
../singular_texi/examples.tex(,699) @expansion{} j[3]=5x4+3x2y9+y9
../singular_texi/examples.tex(,700) vdim(j);
../singular_texi/examples.tex(,701) @expansion{} 40
../singular_texi/examples.tex(,702) @c end example Long_coefficients examples.doc:491
../singular_texi/examples.tex(,703) @end smallexample
../singular_texi/examples.tex(,705) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,707) @node Parameters, T1 and T2, Long coefficients, Examples
../singular_texi/examples.tex(,712) @section Parameters
../singular_texi/examples.tex(,713) @cindex Parameters
../singular_texi/examples.tex(,714) 
../singular_texi/examples.tex(,716) Let us deform the above ideal now by introducing a parameter t
../singular_texi/examples.tex(,717) and compute over the ground field Q(t).
../singular_texi/examples.tex(,718) We compute the dimension at the generic point,
../singular_texi/examples.tex(,725) i.e.,
../singular_texi/examples.tex(,726) @tex
../singular_texi/examples.tex(,727) $dim_{Q(t)}Q(t)[x,y]/j$.
../singular_texi/examples.tex(,728) @end tex
../singular_texi/examples.tex(,733) (This gives the
../singular_texi/examples.tex(,734) same result as for the deformed ideal above. Hence, the above small
../singular_texi/examples.tex(,735) deformation was "generic".)
../singular_texi/examples.tex(,737) 
../singular_texi/examples.tex(,738) For almost all
../singular_texi/examples.tex(,739) @tex
../singular_texi/examples.tex(,740) $a \in Q$
../singular_texi/examples.tex(,741) @end tex
../singular_texi/examples.tex(,745) this is the same as
../singular_texi/examples.tex(,746) @tex
../singular_texi/examples.tex(,747) $dim_Q Q[x,y]/j_0$,
../singular_texi/examples.tex(,748) @end tex
../singular_texi/examples.tex(,752) where
../singular_texi/examples.tex(,753) @tex
../singular_texi/examples.tex(,754) $j_0=j|_{t=a}$.
../singular_texi/examples.tex(,755) @end tex
../singular_texi/examples.tex(,759) 
../singular_texi/examples.tex(,760) @smallexample
../singular_texi/examples.tex(,761) @c computed example Parameters examples.doc:579 
../singular_texi/examples.tex(,762)   ring Rt = (0,t),(x,y),lp;
../singular_texi/examples.tex(,763)   Rt;
../singular_texi/examples.tex(,764) @expansion{} //   characteristic : 0
../singular_texi/examples.tex(,765) @expansion{} //   1 parameter    : t 
../singular_texi/examples.tex(,766) @expansion{} //   minpoly        : 0
../singular_texi/examples.tex(,767) @expansion{} //   number of vars : 2
../singular_texi/examples.tex(,768) @expansion{} //        block   1 : ordering lp
../singular_texi/examples.tex(,769) @expansion{} //                  : names    x y 
../singular_texi/examples.tex(,770) @expansion{} //        block   2 : ordering C
../singular_texi/examples.tex(,771)   poly f = x5+y11+xy9+x3y9;
../singular_texi/examples.tex(,772)   ideal i = jacob(f);
../singular_texi/examples.tex(,773)   ideal j = i,i[1]*i[2]+t*x5y8;  // deformed ideal, parameter t
../singular_texi/examples.tex(,774)   vdim(std(j));
../singular_texi/examples.tex(,775) @expansion{} 40
../singular_texi/examples.tex(,776)   ring R=0,(x,y),lp;
../singular_texi/examples.tex(,777)   ideal i=imap(Rt,i);
../singular_texi/examples.tex(,778)   int a=random(1,30000);
../singular_texi/examples.tex(,779)   ideal j=i,i[1]*i[2]+a*x5y8;  // deformed ideal, fixed integer a
../singular_texi/examples.tex(,780)   vdim(std(j));
../singular_texi/examples.tex(,781) @expansion{} 40
../singular_texi/examples.tex(,782) @c end example Parameters examples.doc:579
../singular_texi/examples.tex(,783) @end smallexample
../singular_texi/examples.tex(,784) 
../singular_texi/examples.tex(,785) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,787) @node T1 and T2, Deformations, Parameters, Examples
../singular_texi/examples.tex(,788) @section T1 and T2
../singular_texi/examples.tex(,789) @cindex T1
../singular_texi/examples.tex(,790) @cindex T2
../singular_texi/examples.tex(,791) 
../singular_texi/examples.tex(,792) 
../singular_texi/examples.tex(,796) @tex
../singular_texi/examples.tex(,797) $T^1$
../singular_texi/examples.tex(,798) @end tex
../singular_texi/examples.tex(,799) , resp.@: 
../singular_texi/examples.tex(,803) @tex
../singular_texi/examples.tex(,804) $T^2$
../singular_texi/examples.tex(,805) @end tex
../singular_texi/examples.tex(,806) , of an ideal 
../singular_texi/examples.tex(,810) @tex
../singular_texi/examples.tex(,811) $j$
../singular_texi/examples.tex(,812) @end tex
../singular_texi/examples.tex(,813)  usually denote the modules of
../singular_texi/examples.tex(,814) infinitesimal deformations, resp.@: of obstructions.
../singular_texi/examples.tex(,815) In @sc{Singular} there are procedures @code{T_1} and @code{T_2} in
../singular_texi/examples.tex(,816) @code{sing.lib} such that
../singular_texi/examples.tex(,817) @code{T_1(j)} and @code{T_2(j)} compute a standard basis of
../singular_texi/examples.tex(,818) a presentation of these modules.
../singular_texi/examples.tex(,819) If T_1 and T_2 are finite dimensional K-vector spaces (e.g., for isolated
../singular_texi/examples.tex(,820) singularities), a basis can be computed by applying
../singular_texi/examples.tex(,821) @code{kbase(T_1(j));}, resp.@: @code{kbase(T_2(j));}, the dimensions by
../singular_texi/examples.tex(,822) applying @code{vdim}.
../singular_texi/examples.tex(,823) For a complete intersection j the procedure @code{Tjurina} also
../singular_texi/examples.tex(,824) computes T_1, but faster (T_2=0 in this case).
../singular_texi/examples.tex(,825) For a non complete intersection, it is faster to use the procedure @code{T_12}
../singular_texi/examples.tex(,826) instead of @code{T_1} and @code{T_2}.
../singular_texi/examples.tex(,827) Type @code{help T_1;} (or @code{help T_2;} or @code{help T_12;}) to obtain
../singular_texi/examples.tex(,828) more detailed information about these procedures.
../singular_texi/examples.tex(,829) 
../singular_texi/examples.tex(,830) We give three examples, the first being a hypersurface, the second a complete
../singular_texi/examples.tex(,831) intersection, the third no complete intersection:
../singular_texi/examples.tex(,832) @itemize @bullet
../singular_texi/examples.tex(,833) @item
../singular_texi/examples.tex(,834) load @code{sing.lib}
../singular_texi/examples.tex(,835) @item
../singular_texi/examples.tex(,836) check whether the ideal j is a complete intersection. It is, if
../singular_texi/examples.tex(,837)      number of variables = dimension + minimal number of generators
../singular_texi/examples.tex(,838) @item
../singular_texi/examples.tex(,839) compute the Tjurina number
../singular_texi/examples.tex(,840) @item
../singular_texi/examples.tex(,841) compute a vector space basis (kbase) of T_1
../singular_texi/examples.tex(,842) @item
../singular_texi/examples.tex(,843) compute the Hilbert function of T_1
../singular_texi/examples.tex(,844) @item
../singular_texi/examples.tex(,845) create a polynomial encoding the Hilbert series
../singular_texi/examples.tex(,846) @item
../singular_texi/examples.tex(,847) compute the dimension of T_2
../singular_texi/examples.tex(,848) @end itemize
../singular_texi/examples.tex(,849) 
../singular_texi/examples.tex(,850) @smallexample
../singular_texi/examples.tex(,851) @c computed example T1_and_T2 examples.doc:639 
../singular_texi/examples.tex(,852)   LIB "sing.lib";
../singular_texi/examples.tex(,853)   ring R=32003,(x,y,z),ds;
../singular_texi/examples.tex(,854)   // ---------------------------------------
../singular_texi/examples.tex(,855)   // hypersurface case (from series T[p,q,r]):
../singular_texi/examples.tex(,856)   int p,q,r = 3,3,4;
../singular_texi/examples.tex(,857)   poly f = x^p+y^q+z^r+xyz;
../singular_texi/examples.tex(,858)   tjurina(f);
../singular_texi/examples.tex(,859) @expansion{} 8
../singular_texi/examples.tex(,860)   // Tjurina number = 8
../singular_texi/examples.tex(,861)   kbase(Tjurina(f));
../singular_texi/examples.tex(,862) @expansion{} // Tjurina number = 8
../singular_texi/examples.tex(,863) @expansion{} _[1]=z3
../singular_texi/examples.tex(,864) @expansion{} _[2]=z2
../singular_texi/examples.tex(,865) @expansion{} _[3]=yz
../singular_texi/examples.tex(,866) @expansion{} _[4]=xz
../singular_texi/examples.tex(,867) @expansion{} _[5]=z
../singular_texi/examples.tex(,868) @expansion{} _[6]=y
../singular_texi/examples.tex(,869) @expansion{} _[7]=x
../singular_texi/examples.tex(,870) @expansion{} _[8]=1
../singular_texi/examples.tex(,871)   // ---------------------------------------
../singular_texi/examples.tex(,872)   // complete intersection case (from series P[k,l]):
../singular_texi/examples.tex(,873)   int k,l =3,2;
../singular_texi/examples.tex(,874)   ideal j=xy,x^k+y^l+z2;
../singular_texi/examples.tex(,875)   dim(std(j));          // Krull dimension
../singular_texi/examples.tex(,876) @expansion{} 1
../singular_texi/examples.tex(,877)   size(minbase(j));     // minimal number of generators
../singular_texi/examples.tex(,878) @expansion{} 2
../singular_texi/examples.tex(,879)   tjurina(j);           // Tjurina number
../singular_texi/examples.tex(,880) @expansion{} 6
../singular_texi/examples.tex(,881)   module T=Tjurina(j);
../singular_texi/examples.tex(,882) @expansion{} // Tjurina number = 6
../singular_texi/examples.tex(,883)   kbase(T);             // a sparse output of the k-basis of T_1
../singular_texi/examples.tex(,884) @expansion{} _[1]=z*gen(1)
../singular_texi/examples.tex(,885) @expansion{} _[2]=gen(1)
../singular_texi/examples.tex(,886) @expansion{} _[3]=y*gen(2)
../singular_texi/examples.tex(,887) @expansion{} _[4]=x2*gen(2)
../singular_texi/examples.tex(,888) @expansion{} _[5]=x*gen(2)
../singular_texi/examples.tex(,889) @expansion{} _[6]=gen(2)
../singular_texi/examples.tex(,890)   print(kbase(T));      // columns of matrix are a k-basis of T_1
../singular_texi/examples.tex(,891) @expansion{} z,1,0,0, 0,0,
../singular_texi/examples.tex(,892) @expansion{} 0,0,y,x2,x,1 
../singular_texi/examples.tex(,893)   // ---------------------------------------
../singular_texi/examples.tex(,894)   // general case (cone over rational normal curve of degree 4):
../singular_texi/examples.tex(,895)   ring r1=0,(x,y,z,u,v),ds;
../singular_texi/examples.tex(,896)   matrix m[2][4]=x,y,z,u,y,z,u,v;
../singular_texi/examples.tex(,897)   ideal i=minor(m,2);   // 2x2 minors of matrix m
../singular_texi/examples.tex(,898)   module M=T_1(i);       // a presentation matrix of T_1
../singular_texi/examples.tex(,899) @expansion{} // dim T_1 = 4
../singular_texi/examples.tex(,900)   vdim(M);              // Tjurina number
../singular_texi/examples.tex(,901) @expansion{} 4
../singular_texi/examples.tex(,902)   hilb(M);              // display of both Hilbert series
../singular_texi/examples.tex(,903) @expansion{} //         4 t^0
../singular_texi/examples.tex(,904) @expansion{} //       -20 t^1
../singular_texi/examples.tex(,905) @expansion{} //        40 t^2
../singular_texi/examples.tex(,906) @expansion{} //       -40 t^3
../singular_texi/examples.tex(,907) @expansion{} //        20 t^4
../singular_texi/examples.tex(,908) @expansion{} //        -4 t^5
../singular_texi/examples.tex(,909) @expansion{} 
../singular_texi/examples.tex(,910) @expansion{} //         4 t^0
../singular_texi/examples.tex(,911) @expansion{} // dimension (local)   = 0
../singular_texi/examples.tex(,912) @expansion{} // multiplicity = 4
../singular_texi/examples.tex(,913)   intvec v1=hilb(M,1);  // first Hilbert series as intvec
../singular_texi/examples.tex(,914)   intvec v2=hilb(M,2);  // second Hilbert series as intvec
../singular_texi/examples.tex(,915)   v1;
../singular_texi/examples.tex(,916) @expansion{} 4,-20,40,-40,20,-4,0
../singular_texi/examples.tex(,917)   v2;
../singular_texi/examples.tex(,918) @expansion{} 4,0
../singular_texi/examples.tex(,919)   v1[3];                // 3rd coefficient of the 1st Hilbert series
../singular_texi/examples.tex(,920) @expansion{} 40
../singular_texi/examples.tex(,921)   module N=T_2(i);
../singular_texi/examples.tex(,922) @expansion{} // dim T_2 = 3
../singular_texi/examples.tex(,923) @c end example T1_and_T2 examples.doc:639
../singular_texi/examples.tex(,924) @end smallexample
../singular_texi/examples.tex(,925) @smallexample
../singular_texi/examples.tex(,926) // In some cases it might be useful to have a polynomial in some ring
../singular_texi/examples.tex(,927) // encoding the Hilbert series. This polynomial can then be
../singular_texi/examples.tex(,928) // differentiated, evaluated etc. It can be done as follows:
../singular_texi/examples.tex(,929) ring H = 0,t,ls;
../singular_texi/examples.tex(,930) poly h1;
../singular_texi/examples.tex(,931) int ii;
../singular_texi/examples.tex(,932) for (ii=1; ii<=size(v1); ii=ii+1)
../singular_texi/examples.tex(,933) @{
../singular_texi/examples.tex(,934)    h1=h1+v1[ii]*t^(ii-1);
../singular_texi/examples.tex(,935) @}
../singular_texi/examples.tex(,936) h1;                   // 1st Hilbert series
../singular_texi/examples.tex(,937) @expansion{} 4-20t+40t2-40t3+20t4-4t5
../singular_texi/examples.tex(,938) diff(h1,t);           // differentiate  h1
../singular_texi/examples.tex(,939) @expansion{} -20+80t-120t2+80t3-20t4
../singular_texi/examples.tex(,940) subst(h1,t,1);        // substitute t by 1
../singular_texi/examples.tex(,941) @expansion{} 0
../singular_texi/examples.tex(,942) 
../singular_texi/examples.tex(,943) // The procedures T_1, T_2, T_12 may be called with two arguments and then
../singular_texi/examples.tex(,944) // they return a list with more information (type help T_1; etc.)
../singular_texi/examples.tex(,945) // e.g., T_12(i,<any>); returns a list with 9 nonempty objects where
../singular_texi/examples.tex(,946) // _[1] = std basis of T_1-module, _[2] = std basis of T_2-module,
../singular_texi/examples.tex(,947) // _[3]= vdim of T_1, _[4]= vdim of T_2
../singular_texi/examples.tex(,948) setring r1;           // make r1 again the basering
../singular_texi/examples.tex(,949) list L = T_12(i,1);
../singular_texi/examples.tex(,950) @expansion{} // dim T_1  =  4
../singular_texi/examples.tex(,951) @expansion{} // dim T_2  =  3
../singular_texi/examples.tex(,952) kbase(L[1]);          // kbase of T_1
../singular_texi/examples.tex(,953) @expansion{} _[1]=1*gen(2)
../singular_texi/examples.tex(,954) @expansion{} _[2]=1*gen(3)
../singular_texi/examples.tex(,955) @expansion{} _[3]=1*gen(6)
../singular_texi/examples.tex(,956) @expansion{} _[4]=1*gen(7)
../singular_texi/examples.tex(,957) kbase(L[2]);          // kbase of T_2
../singular_texi/examples.tex(,958) @expansion{} _[1]=1*gen(6)
../singular_texi/examples.tex(,959) @expansion{} _[2]=1*gen(8)
../singular_texi/examples.tex(,960) @expansion{} _[3]=1*gen(9)
../singular_texi/examples.tex(,961) L[3];                 // vdim of T_1
../singular_texi/examples.tex(,962) @expansion{} 4
../singular_texi/examples.tex(,963) L[4];                 // vdim of T_2
../singular_texi/examples.tex(,964) @expansion{} 3
../singular_texi/examples.tex(,965) @end smallexample
../singular_texi/examples.tex(,966) @c killall();            // a procedure from general.lib
../singular_texi/examples.tex(,967) @c @expansion{} // ** killing the basering for level 0
../singular_texi/examples.tex(,969) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,971) @node Deformations, Finite fields, T1 and T2, Examples
../singular_texi/examples.tex(,976) @section Deformations
../singular_texi/examples.tex(,977) @cindex Deformations
../singular_texi/examples.tex(,978) 
../singular_texi/examples.tex(,979) @itemize @bullet
../singular_texi/examples.tex(,980) @item
../singular_texi/examples.tex(,981) The libraries @code{sing.lib}, resp.@: @code{deform.lib}, contain procedures
../singular_texi/examples.tex(,982) to compute total and base space of the
../singular_texi/examples.tex(,983) miniversal (= semiuniversal) deformation of an
../singular_texi/examples.tex(,984) isolated complete intersection singularity, resp.@: arbitrary isolated
../singular_texi/examples.tex(,985) singularity.
../singular_texi/examples.tex(,986) @item
../singular_texi/examples.tex(,987) The procedure @code{deform} in @code{sing.lib} returns a matrix whose columns
../singular_texi/examples.tex(,991) @tex
../singular_texi/examples.tex(,992) $h_1,\ldots,h_r$
../singular_texi/examples.tex(,993) @end tex
../singular_texi/examples.tex(,994) represent all 1st order deformations. More precisely, if
../singular_texi/examples.tex(,1000) @tex
../singular_texi/examples.tex(,1001) $I \subset R$ is the ideal generated by $f_1,...,f_s$, then any infinitesimal
../singular_texi/examples.tex(,1002) deformation of $R/I$ over $K[\varepsilon]/(\varepsilon^2)$ is given
../singular_texi/examples.tex(,1003) by $f+\varepsilon g$,
../singular_texi/examples.tex(,1004) where $f=(f_1,...,f_s)$, $g$ a $K$-linear combination of the $h_i$.
../singular_texi/examples.tex(,1005) @end tex
../singular_texi/examples.tex(,1006) 
../singular_texi/examples.tex(,1007) @item
../singular_texi/examples.tex(,1008) The procedure @code{versal} in @code{deform.lib} computes a formal
../singular_texi/examples.tex(,1009) miniversal deformation up to a certain order which can be
../singular_texi/examples.tex(,1010) prescribed by the user. For a complete intersection the 1st order
../singular_texi/examples.tex(,1011) part is already miniversal.
../singular_texi/examples.tex(,1012) @item
../singular_texi/examples.tex(,1013) The procedure @code{versal} extends the basering to a new ring with
../singular_texi/examples.tex(,1014) additional deformation parameters which contains the equations for the
../singular_texi/examples.tex(,1015) miniversal base space and the miniversal total space.
../singular_texi/examples.tex(,1016) @item
../singular_texi/examples.tex(,1017) There are default names for the objects created, but the user may also
../singular_texi/examples.tex(,1018) choose his own names.
../singular_texi/examples.tex(,1019) @item
../singular_texi/examples.tex(,1020) If the user sets @code{printlevel=2;} before running @code{versal}, some
../singular_texi/examples.tex(,1021) intermediate results are shown. This is useful since @code{versal}
../singular_texi/examples.tex(,1022) is already complicated and might run for some time on more
../singular_texi/examples.tex(,1023) complicated examples. (type @code{help versal;})
../singular_texi/examples.tex(,1024) @end itemize
../singular_texi/examples.tex(,1025) 
../singular_texi/examples.tex(,1027) We compute for the same examples as in the preceding section
../singular_texi/examples.tex(,1028) the miniversal deformations:
../singular_texi/examples.tex(,1035) 
../singular_texi/examples.tex(,1036) @smallexample
../singular_texi/examples.tex(,1037) @c computed example Deformations examples.doc:787 
../singular_texi/examples.tex(,1038)   LIB "deform.lib";
../singular_texi/examples.tex(,1039)   ring R=32003,(x,y,z),ds;
../singular_texi/examples.tex(,1040)   //----------------------------------------------------
../singular_texi/examples.tex(,1041)   // hypersurface case (from series T[p,q,r]):
../singular_texi/examples.tex(,1042)   int p,q,r = 3,3,4;
../singular_texi/examples.tex(,1043)   poly f = x^p+y^q+z^r+xyz;
../singular_texi/examples.tex(,1044)   print(deform(f));
../singular_texi/examples.tex(,1045) @expansion{} z3,z2,yz,xz,z,y,x,1
../singular_texi/examples.tex(,1046)   // the miniversal deformation of f=0 is the projection from the
../singular_texi/examples.tex(,1047)   // miniversal total space to the miniversal base space:
../singular_texi/examples.tex(,1048)   // @{ (A,B,C,D,E,F,G,H,x,y,z) | x3+y3+xyz+z4+A+Bx+Cxz+Dy+Eyz+Fz+Gz2+Hz3 =0 @}
../singular_texi/examples.tex(,1049)   //  --> @{ (A,B,C,D,E,F,G,H) @}
../singular_texi/examples.tex(,1050)   //----------------------------------------------------
../singular_texi/examples.tex(,1051)   // complete intersection case (from series P[k,l]):
../singular_texi/examples.tex(,1052)   int k,l =3,2;
../singular_texi/examples.tex(,1053)   ideal j=xy,x^k+y^l+z2;
../singular_texi/examples.tex(,1054)   print(deform(j));
../singular_texi/examples.tex(,1055) @expansion{} 0,0, 0,0,z,1,
../singular_texi/examples.tex(,1056) @expansion{} y,x2,x,1,0,0 
../singular_texi/examples.tex(,1057)   versal(j);                  // using default names
../singular_texi/examples.tex(,1058) @expansion{} // smooth base space
../singular_texi/examples.tex(,1059) @expansion{} // ready: T_1 and T_2
../singular_texi/examples.tex(,1060) @expansion{} 
../singular_texi/examples.tex(,1061) @expansion{} // Result belongs to ring Px.
../singular_texi/examples.tex(,1062) @expansion{} // Equations of total space of miniversal deformation are 
../singular_texi/examples.tex(,1063) @expansion{} // given by Fs, equations of miniversal base space by Js.
../singular_texi/examples.tex(,1064) @expansion{} // Make Px the basering and list objects defined in Px by typing:
../singular_texi/examples.tex(,1065) @expansion{}    setring Px; show(Px);
../singular_texi/examples.tex(,1066) @expansion{}    listvar(matrix);
../singular_texi/examples.tex(,1067) @expansion{} // NOTE: rings Qx, Px, So are alive!
../singular_texi/examples.tex(,1068) @expansion{} // (use 'kill_rings("");' to remove)
../singular_texi/examples.tex(,1069)   setring Px;
../singular_texi/examples.tex(,1070)   show(Px);                   // show is a procedure from inout.lib
../singular_texi/examples.tex(,1071) @expansion{} // ring: (32003),(A,B,C,D,E,F,x,y,z),(ds(6),ds(3),C);
../singular_texi/examples.tex(,1072) @expansion{} // minpoly = 0
../singular_texi/examples.tex(,1073) @expansion{} // objects belonging to this ring:
../singular_texi/examples.tex(,1074) @expansion{} // Rs                   [0]  matrix 2 x 1
../singular_texi/examples.tex(,1075) @expansion{} // Fs                   [0]  matrix 1 x 2
../singular_texi/examples.tex(,1076) @expansion{} // Js                   [0]  matrix 1 x 0
../singular_texi/examples.tex(,1077)   listvar(matrix);
../singular_texi/examples.tex(,1078) @expansion{} // Rs                   [0]  matrix 2 x 1
../singular_texi/examples.tex(,1079) @expansion{} // Fs                   [0]  matrix 1 x 2
../singular_texi/examples.tex(,1080) @expansion{} // Js                   [0]  matrix 1 x 0
../singular_texi/examples.tex(,1081)   // ___ Equations of miniversal base space ___:
../singular_texi/examples.tex(,1082)   Js;
../singular_texi/examples.tex(,1083) @expansion{} 
../singular_texi/examples.tex(,1084)   // ___ Equations of miniversal total space ___:
../singular_texi/examples.tex(,1085)   Fs;
../singular_texi/examples.tex(,1086) @expansion{} Fs[1,1]=xy+Ez+F
../singular_texi/examples.tex(,1087) @expansion{} Fs[1,2]=y2+z2+x3+Ay+Bx2+Cx+D
../singular_texi/examples.tex(,1088)   // the miniversal deformation of V(j) is the projection from the
../singular_texi/examples.tex(,1089)   // miniversal total space to the miniversal base space:
../singular_texi/examples.tex(,1090)   // @{ (A,B,C,D,E,F,x,y,z) | xy+F+Ez=0, y2+z2+x3+D+Cx+Bx2+Ay=0 @}
../singular_texi/examples.tex(,1091)   //  --> @{ (A,B,C,D,E,F) @}
../singular_texi/examples.tex(,1092)   //----------------------------------------------------
../singular_texi/examples.tex(,1093)   // general case (cone over rational normal curve of degree 4):
../singular_texi/examples.tex(,1094)   ring r1=0,(x,y,z,u,v),ds;
../singular_texi/examples.tex(,1095)   matrix m[2][4]=x,y,z,u,y,z,u,v;
../singular_texi/examples.tex(,1096)   ideal i=minor(m,2);                 // 2x2 minors of matrix m
../singular_texi/examples.tex(,1097)   int time=timer;
../singular_texi/examples.tex(,1098)   // Def_r is the name of the miniversal base space with
../singular_texi/examples.tex(,1099)   // parameters A(1),...,A(4)
../singular_texi/examples.tex(,1100)   versal(i,0,"Def_r","A(");
../singular_texi/examples.tex(,1101) @expansion{} // ready: T_1 and T_2
../singular_texi/examples.tex(,1102) @expansion{} 
../singular_texi/examples.tex(,1103) @expansion{} // Result belongs to ring Def_rPx.
../singular_texi/examples.tex(,1104) @expansion{} // Equations of total space of miniversal deformation are 
../singular_texi/examples.tex(,1105) @expansion{} // given by Fs, equations of miniversal base space by Js.
../singular_texi/examples.tex(,1106) @expansion{} // Make Def_rPx the basering and list objects defined in Def_rPx by typin\
../singular_texi/examples.tex(,1107)    g:
../singular_texi/examples.tex(,1108) @expansion{}    setring Def_rPx; show(Def_rPx);
../singular_texi/examples.tex(,1109) @expansion{}    listvar(matrix);
../singular_texi/examples.tex(,1110) @expansion{} // NOTE: rings Def_rQx, Def_rPx, Def_rSo are alive!
../singular_texi/examples.tex(,1111) @expansion{} // (use 'kill_rings("Def_r");' to remove)
../singular_texi/examples.tex(,1112)   "// used time:",timer-time,"sec";   // time of last command
../singular_texi/examples.tex(,1113) @expansion{} // used time: 1 sec
../singular_texi/examples.tex(,1114)   // the miniversal deformation of V(i) is the projection from the
../singular_texi/examples.tex(,1115)   // miniversal total space to the miniversal base space:
../singular_texi/examples.tex(,1116)   // @{ (A(1..4),x,y,z,u,v) |
../singular_texi/examples.tex(,1117)   //         -y^2+x*z+A(2)*x-A(3)*y=0, -y*z+x*u-A(1)*x-A(3)*z=0,
../singular_texi/examples.tex(,1118)   //         -y*u+x*v-A(3)*u-A(4)*z=0, -z^2+y*u-A(1)*y-A(2)*z=0,
../singular_texi/examples.tex(,1119)   //         -z*u+y*v-A(2)*u-A(4)*u=0, -u^2+z*v+A(1)*u-A(4)*v=0 @}
../singular_texi/examples.tex(,1120)   //  --> @{ A(1..4) |
../singular_texi/examples.tex(,1121)   //         -A(1)*A(4) = A(3)*A(4) = -A(2)*A(4)-A(4)^2 = 0 @}
../singular_texi/examples.tex(,1122)   //----------------------------------------------------
../singular_texi/examples.tex(,1123) @c end example Deformations examples.doc:787
../singular_texi/examples.tex(,1124) @end smallexample
../singular_texi/examples.tex(,1125) 
../singular_texi/examples.tex(,1126) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,1128) @node Finite fields, Elimination, Deformations, Examples
../singular_texi/examples.tex(,1129) @section Finite fields
../singular_texi/examples.tex(,1130) @cindex Finite fields
../singular_texi/examples.tex(,1131) 
../singular_texi/examples.tex(,1132) We define a variety in 
../singular_texi/examples.tex(,1136) @tex
../singular_texi/examples.tex(,1137) $n$
../singular_texi/examples.tex(,1138) @end tex
../singular_texi/examples.tex(,1139) -space of codimension 2 defined by
../singular_texi/examples.tex(,1140) polynomials of degree 
../singular_texi/examples.tex(,1144) @tex
../singular_texi/examples.tex(,1145) $d$
../singular_texi/examples.tex(,1146) @end tex
../singular_texi/examples.tex(,1147)  with generic coefficients over the prime
../singular_texi/examples.tex(,1148) field 
../singular_texi/examples.tex(,1152) @tex
../singular_texi/examples.tex(,1153) $Z/p$
../singular_texi/examples.tex(,1154) @end tex
../singular_texi/examples.tex(,1155)  and look for zeros on the torus. First over the prime
../singular_texi/examples.tex(,1156) field and then in the finite extension field with
../singular_texi/examples.tex(,1157) @tex
../singular_texi/examples.tex(,1158) $p^k$
../singular_texi/examples.tex(,1159) @end tex
../singular_texi/examples.tex(,1163) elements.
../singular_texi/examples.tex(,1164) In general there will be many more solutions in the second case.
../singular_texi/examples.tex(,1165) (Since the @sc{Singular} language is interpreted, the evaluation of many
../singular_texi/examples.tex(,1166) @code{for}-loops is not very fast):
../singular_texi/examples.tex(,1167) 
../singular_texi/examples.tex(,1168) @smallexample
../singular_texi/examples.tex(,1169) @c computed example Finite_fields examples.doc:860 
../singular_texi/examples.tex(,1170)   int p=3;  int n=3;  int d=5; int k=2;
../singular_texi/examples.tex(,1171)   ring rp = p,(x(1..n)),dp;
../singular_texi/examples.tex(,1172)   int s = size(maxideal(d));
../singular_texi/examples.tex(,1173)   s;
../singular_texi/examples.tex(,1174) @expansion{} 21
../singular_texi/examples.tex(,1175)   // create a dense homogeneous ideal m, all generators of degree d, with
../singular_texi/examples.tex(,1176)   // generic (random) coefficients:
../singular_texi/examples.tex(,1177)   ideal m = maxideal(d)*random(p,s,n-2);
../singular_texi/examples.tex(,1178)   m;
../singular_texi/examples.tex(,1179) @expansion{} m[1]=x(1)^3*x(2)^2-x(1)*x(2)^4+x(1)^4*x(3)-x(1)^3*x(2)*x(3)+x(1)*x(2)^3*x\
../singular_texi/examples.tex(,1180)    (3)+x(2)^4*x(3)+x(2)^3*x(3)^2+x(1)*x(2)*x(3)^3+x(1)*x(3)^4-x(3)^5
../singular_texi/examples.tex(,1181)   // look for zeros on the torus by checking all points (with no component 0)
../singular_texi/examples.tex(,1182)   // of the affine n-space over the field with p elements :
../singular_texi/examples.tex(,1183)   ideal mt;
../singular_texi/examples.tex(,1184)   int i(1..n);                    // initialize integers i(1),...,i(n)
../singular_texi/examples.tex(,1185)   int l;
../singular_texi/examples.tex(,1186)   s=0;
../singular_texi/examples.tex(,1187)   for (i(1)=1;i(1)<p;i(1)=i(1)+1)
../singular_texi/examples.tex(,1188)   @{
../singular_texi/examples.tex(,1189)     for (i(2)=1;i(2)<p;i(2)=i(2)+1)
../singular_texi/examples.tex(,1190)     @{
../singular_texi/examples.tex(,1191)       for (i(3)=1;i(3)<p;i(3)=i(3)+1)
../singular_texi/examples.tex(,1192)       @{
../singular_texi/examples.tex(,1193)         mt=m;
../singular_texi/examples.tex(,1194)         for (l=1;l<=n;l=l+1)
../singular_texi/examples.tex(,1195)         @{
../singular_texi/examples.tex(,1196)           mt=subst(mt,x(l),i(l));
../singular_texi/examples.tex(,1197)         @}
../singular_texi/examples.tex(,1198)         if (size(mt)==0)
../singular_texi/examples.tex(,1199)         @{
../singular_texi/examples.tex(,1200)           "solution:",i(1..n);
../singular_texi/examples.tex(,1201)           s=s+1;
../singular_texi/examples.tex(,1202)         @}
../singular_texi/examples.tex(,1203)       @}
../singular_texi/examples.tex(,1204)     @}
../singular_texi/examples.tex(,1205)   @}
../singular_texi/examples.tex(,1206) @expansion{} solution: 1 1 2
../singular_texi/examples.tex(,1207) @expansion{} solution: 1 2 1
../singular_texi/examples.tex(,1208) @expansion{} solution: 1 2 2
../singular_texi/examples.tex(,1209) @expansion{} solution: 2 1 1
../singular_texi/examples.tex(,1210) @expansion{} solution: 2 1 2
../singular_texi/examples.tex(,1211) @expansion{} solution: 2 2 1
../singular_texi/examples.tex(,1212)   "//",s,"solutions over GF("+string(p)+")";
../singular_texi/examples.tex(,1213) @expansion{} // 6 solutions over GF(3)
../singular_texi/examples.tex(,1214)   // Now go to the field with p^3 elements:
../singular_texi/examples.tex(,1215)   // As long as there is no map from Z/p to the field with p^3 elements
../singular_texi/examples.tex(,1216)   // implemented, use the following trick: convert the ideal to be mapped
../singular_texi/examples.tex(,1217)   // to the new ring to a string and then execute this string in the
../singular_texi/examples.tex(,1218)   // new ring
../singular_texi/examples.tex(,1219)   string ms="ideal m="+string(m)+";";
../singular_texi/examples.tex(,1220)   ms;
../singular_texi/examples.tex(,1221) @expansion{} ideal m=x(1)^3*x(2)^2-x(1)*x(2)^4+x(1)^4*x(3)-x(1)^3*x(2)*x(3)+x(1)*x(2)^\
../singular_texi/examples.tex(,1222)    3*x(3)+x(2)^4*x(3)+x(2)^3*x(3)^2+x(1)*x(2)*x(3)^3+x(1)*x(3)^4-x(3)^5;
../singular_texi/examples.tex(,1223)   // define a ring rpk with p^k elements, call the primitive element z. Hence
../singular_texi/examples.tex(,1224)   // 'solution exponent: 0 1 5' means that (z^0,z^1,z^5) is a solution
../singular_texi/examples.tex(,1225)   ring rpk=(p^k,z),(x(1..n)),dp;
../singular_texi/examples.tex(,1226)   rpk;
../singular_texi/examples.tex(,1227) @expansion{} //   # ground field : 9
../singular_texi/examples.tex(,1228) @expansion{} //   primitive element : z
../singular_texi/examples.tex(,1229) @expansion{} //   minpoly        : 1*z^2+1*z^1+2*z^0
../singular_texi/examples.tex(,1230) @expansion{} //   number of vars : 3
../singular_texi/examples.tex(,1231) @expansion{} //        block   1 : ordering dp
../singular_texi/examples.tex(,1232) @expansion{} //                  : names    x(1) x(2) x(3) 
../singular_texi/examples.tex(,1233) @expansion{} //        block   2 : ordering C
../singular_texi/examples.tex(,1234)   execute(ms);
../singular_texi/examples.tex(,1235)   s=0;
../singular_texi/examples.tex(,1236)   ideal mt;
../singular_texi/examples.tex(,1237)   for (i(1)=0;i(1)<p^k-1;i(1)=i(1)+1)
../singular_texi/examples.tex(,1238)   @{
../singular_texi/examples.tex(,1239)     for (i(2)=0;i(2)<p^k-1;i(2)=i(2)+1)
../singular_texi/examples.tex(,1240)     @{
../singular_texi/examples.tex(,1241)       for (i(3)=0;i(3)<p^k-1;i(3)=i(3)+1)
../singular_texi/examples.tex(,1242)       @{
../singular_texi/examples.tex(,1243)         mt=m;
../singular_texi/examples.tex(,1244)         for (l=1;l<=n;l=l+1)
../singular_texi/examples.tex(,1245)         @{
../singular_texi/examples.tex(,1246)           mt=subst(mt,x(l),z^i(l));
../singular_texi/examples.tex(,1247)         @}
../singular_texi/examples.tex(,1248)         if (size(mt)==0)
../singular_texi/examples.tex(,1249)         @{
../singular_texi/examples.tex(,1250)           "solution exponent:",i(1..n);
../singular_texi/examples.tex(,1251)           s=s+1;
../singular_texi/examples.tex(,1252)         @}
../singular_texi/examples.tex(,1253)       @}
../singular_texi/examples.tex(,1254)     @}
../singular_texi/examples.tex(,1255)   @}
../singular_texi/examples.tex(,1256) @expansion{} solution exponent: 0 0 2
../singular_texi/examples.tex(,1257) @expansion{} solution exponent: 0 0 4
../singular_texi/examples.tex(,1258) @expansion{} solution exponent: 0 0 6
../singular_texi/examples.tex(,1259) @expansion{} solution exponent: 0 1 0
../singular_texi/examples.tex(,1260) @expansion{} solution exponent: 0 3 0
../singular_texi/examples.tex(,1261) @expansion{} solution exponent: 0 4 0
../singular_texi/examples.tex(,1262) @expansion{} solution exponent: 0 4 4
../singular_texi/examples.tex(,1263) @expansion{} solution exponent: 0 4 5
../singular_texi/examples.tex(,1264) @expansion{} solution exponent: 0 4 7
../singular_texi/examples.tex(,1265) @expansion{} solution exponent: 1 1 3
../singular_texi/examples.tex(,1266) @expansion{} solution exponent: 1 1 5
../singular_texi/examples.tex(,1267) @expansion{} solution exponent: 1 1 7
../singular_texi/examples.tex(,1268) @expansion{} solution exponent: 1 2 1
../singular_texi/examples.tex(,1269) @expansion{} solution exponent: 1 4 1
../singular_texi/examples.tex(,1270) @expansion{} solution exponent: 1 5 0
../singular_texi/examples.tex(,1271) @expansion{} solution exponent: 1 5 1
../singular_texi/examples.tex(,1272) @expansion{} solution exponent: 1 5 5
../singular_texi/examples.tex(,1273) @expansion{} solution exponent: 1 5 6
../singular_texi/examples.tex(,1274) @expansion{} solution exponent: 2 2 0
../singular_texi/examples.tex(,1275) @expansion{} solution exponent: 2 2 4
../singular_texi/examples.tex(,1276) @expansion{} solution exponent: 2 2 6
../singular_texi/examples.tex(,1277) @expansion{} solution exponent: 2 3 2
../singular_texi/examples.tex(,1278) @expansion{} solution exponent: 2 5 2
../singular_texi/examples.tex(,1279) @expansion{} solution exponent: 2 6 1
../singular_texi/examples.tex(,1280) @expansion{} solution exponent: 2 6 2
../singular_texi/examples.tex(,1281) @expansion{} solution exponent: 2 6 6
../singular_texi/examples.tex(,1282) @expansion{} solution exponent: 2 6 7
../singular_texi/examples.tex(,1283) @expansion{} solution exponent: 3 3 1
../singular_texi/examples.tex(,1284) @expansion{} solution exponent: 3 3 5
../singular_texi/examples.tex(,1285) @expansion{} solution exponent: 3 3 7
../singular_texi/examples.tex(,1286) @expansion{} solution exponent: 3 4 3
../singular_texi/examples.tex(,1287) @expansion{} solution exponent: 3 6 3
../singular_texi/examples.tex(,1288) @expansion{} solution exponent: 3 7 0
../singular_texi/examples.tex(,1289) @expansion{} solution exponent: 3 7 2
../singular_texi/examples.tex(,1290) @expansion{} solution exponent: 3 7 3
../singular_texi/examples.tex(,1291) @expansion{} solution exponent: 3 7 7
../singular_texi/examples.tex(,1292) @expansion{} solution exponent: 4 0 0
../singular_texi/examples.tex(,1293) @expansion{} solution exponent: 4 0 1
../singular_texi/examples.tex(,1294) @expansion{} solution exponent: 4 0 3
../singular_texi/examples.tex(,1295) @expansion{} solution exponent: 4 0 4
../singular_texi/examples.tex(,1296) @expansion{} solution exponent: 4 4 0
../singular_texi/examples.tex(,1297) @expansion{} solution exponent: 4 4 2
../singular_texi/examples.tex(,1298) @expansion{} solution exponent: 4 4 6
../singular_texi/examples.tex(,1299) @expansion{} solution exponent: 4 5 4
../singular_texi/examples.tex(,1300) @expansion{} solution exponent: 4 7 4
../singular_texi/examples.tex(,1301) @expansion{} solution exponent: 5 0 5
../singular_texi/examples.tex(,1302) @expansion{} solution exponent: 5 1 1
../singular_texi/examples.tex(,1303) @expansion{} solution exponent: 5 1 2
../singular_texi/examples.tex(,1304) @expansion{} solution exponent: 5 1 4
../singular_texi/examples.tex(,1305) @expansion{} solution exponent: 5 1 5
../singular_texi/examples.tex(,1306) @expansion{} solution exponent: 5 5 1
../singular_texi/examples.tex(,1307) @expansion{} solution exponent: 5 5 3
../singular_texi/examples.tex(,1308) @expansion{} solution exponent: 5 5 7
../singular_texi/examples.tex(,1309) @expansion{} solution exponent: 5 6 5
../singular_texi/examples.tex(,1310) @expansion{} solution exponent: 6 1 6
../singular_texi/examples.tex(,1311) @expansion{} solution exponent: 6 2 2
../singular_texi/examples.tex(,1312) @expansion{} solution exponent: 6 2 3
../singular_texi/examples.tex(,1313) @expansion{} solution exponent: 6 2 5
../singular_texi/examples.tex(,1314) @expansion{} solution exponent: 6 2 6
../singular_texi/examples.tex(,1315) @expansion{} solution exponent: 6 6 0
../singular_texi/examples.tex(,1316) @expansion{} solution exponent: 6 6 2
../singular_texi/examples.tex(,1317) @expansion{} solution exponent: 6 6 4
../singular_texi/examples.tex(,1318) @expansion{} solution exponent: 6 7 6
../singular_texi/examples.tex(,1319) @expansion{} solution exponent: 7 0 7
../singular_texi/examples.tex(,1320) @expansion{} solution exponent: 7 2 7
../singular_texi/examples.tex(,1321) @expansion{} solution exponent: 7 3 3
../singular_texi/examples.tex(,1322) @expansion{} solution exponent: 7 3 4
../singular_texi/examples.tex(,1323) @expansion{} solution exponent: 7 3 6
../singular_texi/examples.tex(,1324) @expansion{} solution exponent: 7 3 7
../singular_texi/examples.tex(,1325) @expansion{} solution exponent: 7 7 1
../singular_texi/examples.tex(,1326) @expansion{} solution exponent: 7 7 3
../singular_texi/examples.tex(,1327) @expansion{} solution exponent: 7 7 5
../singular_texi/examples.tex(,1328)   "//",s,"solutions over GF("+string(p^k)+")";
../singular_texi/examples.tex(,1329) @expansion{} // 72 solutions over GF(9)
../singular_texi/examples.tex(,1330) @c end example Finite_fields examples.doc:860
../singular_texi/examples.tex(,1331) @end smallexample
../singular_texi/examples.tex(,1333) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,1335) @node Elimination, Free resolution, Finite fields, Examples
../singular_texi/examples.tex(,1340) @section Elimination
../singular_texi/examples.tex(,1341) @cindex Elimination
../singular_texi/examples.tex(,1342) 
../singular_texi/examples.tex(,1343) Elimination is the algebraic counterpart of the geometric concept of
../singular_texi/examples.tex(,1344) projection. If
../singular_texi/examples.tex(,1345) @tex
../singular_texi/examples.tex(,1346) $f=(f_1,\ldots,f_n):k^r\rightarrow k^n$
../singular_texi/examples.tex(,1347) @end tex
../singular_texi/examples.tex(,1351) is a polynomial map,
../singular_texi/examples.tex(,1352) the Zariski-closure of the image is the zero-set of the ideal
../singular_texi/examples.tex(,1353) @tex
../singular_texi/examples.tex(,1354) $$
../singular_texi/examples.tex(,1355) \displaylines{
../singular_texi/examples.tex(,1356) j=J \cap k[x_1,\ldots,x_n], \;\quad\hbox{\rm where}\cr
../singular_texi/examples.tex(,1357) J=(x_1-f_1(t_1,\ldots,t_r),\ldots,x_n-f_n(t_1,\ldots,t_r))\subseteq
../singular_texi/examples.tex(,1358) k[t_1,\ldots,t_r,x_1,\ldots,x_n]
../singular_texi/examples.tex(,1359) }
../singular_texi/examples.tex(,1360) $$
../singular_texi/examples.tex(,1361) @end tex
../singular_texi/examples.tex(,1370) i.e, of the ideal j obtained from J by eliminating the variables
../singular_texi/examples.tex(,1371) @tex
../singular_texi/examples.tex(,1372) $t_1,\ldots,t_r$.
../singular_texi/examples.tex(,1373) @end tex
../singular_texi/examples.tex(,1377) This can be done by computing a standard basis of J with respect to a product
../singular_texi/examples.tex(,1378) ordering where the block of t-variables precedes the block of
../singular_texi/examples.tex(,1379) x-variables and then selecting those polynomials which do not contain
../singular_texi/examples.tex(,1380) any t. In @sc{Singular} the most convenient way is to use the
../singular_texi/examples.tex(,1381) @code{eliminate} command.
../singular_texi/examples.tex(,1382) In contrast to the first method, with @code{eliminate} the result needs not be a
../singular_texi/examples.tex(,1383) standard basis in the given ordering.
../singular_texi/examples.tex(,1384) Hence, there may be cases where the first method is the preferred one.
../singular_texi/examples.tex(,1385) 
../singular_texi/examples.tex(,1386) @strong{WARNING:} In the case of a local or a mixed ordering, elimination needs special
../singular_texi/examples.tex(,1387) care. f may be considered as a map of germs
../singular_texi/examples.tex(,1388) @tex
../singular_texi/examples.tex(,1389) $f:(k^r,0)\rightarrow(k^n,0)$,
../singular_texi/examples.tex(,1390) @end tex
../singular_texi/examples.tex(,1394) but even
../singular_texi/examples.tex(,1395) if this map germ is finite, we are in general not able to compute the image
../singular_texi/examples.tex(,1396) germ because for this we would need an implementation of the Weierstrass
../singular_texi/examples.tex(,1397) preparation theorem. What we can compute, and what @code{eliminate} actually does,
../singular_texi/examples.tex(,1398) is the following: let V(J) be the zero-set of J in
../singular_texi/examples.tex(,1399) @tex
../singular_texi/examples.tex(,1400) $k^r\times(k^n,0)$,
../singular_texi/examples.tex(,1401) @end tex
../singular_texi/examples.tex(,1405) then the
../singular_texi/examples.tex(,1406) closure of the image of V(J) under the projection
../singular_texi/examples.tex(,1407) @tex
../singular_texi/examples.tex(,1408) $$\hbox{pr}:k^r\times(k^n,0)\rightarrow(k^n,0)$$
../singular_texi/examples.tex(,1409) can be computed.
../singular_texi/examples.tex(,1410) @end tex
../singular_texi/examples.tex(,1415) Note that this germ contains also those components
../singular_texi/examples.tex(,1416) of V(J) which meet the fiber of pr outside the origin.
../singular_texi/examples.tex(,1417) This is achieved by an ordering with the block of t-variables having a
../singular_texi/examples.tex(,1418) global ordering (and preceding the x-variables) and the x-variables having
../singular_texi/examples.tex(,1419) a local ordering. In a local situation we propose @code{eliminate} with
../singular_texi/examples.tex(,1420) ordering ls.
../singular_texi/examples.tex(,1421) 
../singular_texi/examples.tex(,1422) In any case, if the input is weighted homogeneous (=quasihomogeneous),
../singular_texi/examples.tex(,1423) the weights given to the variables should be chosen accordingly.
../singular_texi/examples.tex(,1424) @sc{Singular} offers a function @code{weight} which proposes,
../singular_texi/examples.tex(,1425) given an ideal or module, integer weights for the variables, such that
../singular_texi/examples.tex(,1426) the ideal, resp.@: module, is as homogeneous as possible with respect to these weights.
../singular_texi/examples.tex(,1427) The function finds correct weights, if the input is weighted homogeneous
../singular_texi/examples.tex(,1428) (but is rather slow for many variables). In order to check, whether the
../singular_texi/examples.tex(,1429) input is quasihomogeneous, use the function @code{qhweight}, which returns
../singular_texi/examples.tex(,1430) an intvec of correct weights if the input is quasihomogeneous and an intvec
../singular_texi/examples.tex(,1431) of zeros otherwise.
../singular_texi/examples.tex(,1432) 
../singular_texi/examples.tex(,1433) Let us give two examples:
../singular_texi/examples.tex(,1434) @enumerate
../singular_texi/examples.tex(,1435) @item
../singular_texi/examples.tex(,1436) First we compute the equations of the simple space curve
../singular_texi/examples.tex(,1437) @tex
../singular_texi/examples.tex(,1438) $\hbox{T}[7]^\prime$
../singular_texi/examples.tex(,1439) @end tex
../singular_texi/examples.tex(,1443)    consisting of two tangential cusps given in parametric form.
../singular_texi/examples.tex(,1444) @item
../singular_texi/examples.tex(,1445) We compute weights for the equations such that the
../singular_texi/examples.tex(,1446)    equations are quasihomogeneous w.r.t. these weights.
../singular_texi/examples.tex(,1447) @item
../singular_texi/examples.tex(,1448) Then we compute the tangent developable of the rational
../singular_texi/examples.tex(,1449)    normal curve in
../singular_texi/examples.tex(,1450) @tex
../singular_texi/examples.tex(,1451) $P^4$.
../singular_texi/examples.tex(,1452) @end tex
../singular_texi/examples.tex(,1456) @end enumerate
../singular_texi/examples.tex(,1457) 
../singular_texi/examples.tex(,1458) @smallexample
../singular_texi/examples.tex(,1459) @c computed example Elimination examples.doc:1058 
../singular_texi/examples.tex(,1460)   // 1. Compute equations of curve given in parametric form:
../singular_texi/examples.tex(,1461)   // Two transversal cusps in (k^3,0):
../singular_texi/examples.tex(,1462)   ring r1 = 0,(t,x,y,z),ls;
../singular_texi/examples.tex(,1463)   ideal i1 = x-t2,y-t3,z;        // parametrization of the first branch
../singular_texi/examples.tex(,1464)   ideal i2 = y-t2,z-t3,x;        // parametrization of the second branch
../singular_texi/examples.tex(,1465)   ideal j1 = eliminate(i1,t);
../singular_texi/examples.tex(,1466)   j1;                            // equations of the first branch
../singular_texi/examples.tex(,1467) @expansion{} j1[1]=z
../singular_texi/examples.tex(,1468) @expansion{} j1[2]=y2-x3
../singular_texi/examples.tex(,1469)   ideal j2 = eliminate(i2,t);
../singular_texi/examples.tex(,1470)   j2;                            // equations of the second branch
../singular_texi/examples.tex(,1471) @expansion{} j2[1]=x
../singular_texi/examples.tex(,1472) @expansion{} j2[2]=z2-y3
../singular_texi/examples.tex(,1473)   // Now map to a ring with only x,y,z as variables and compute the
../singular_texi/examples.tex(,1474)   // intersection of j1 and j2 there:
../singular_texi/examples.tex(,1475)   ring r2 = 0,(x,y,z),ds;
../singular_texi/examples.tex(,1476)   ideal j1= imap(r1,j1);         // imap is a convenient ringmap for
../singular_texi/examples.tex(,1477)   ideal j2= imap(r1,j2);         // inclusions and projections of rings
../singular_texi/examples.tex(,1478)   ideal i = intersect(j1,j2);
../singular_texi/examples.tex(,1479)   i;                             // equations of both branches
../singular_texi/examples.tex(,1480) @expansion{} i[1]=z2-y3+x3y
../singular_texi/examples.tex(,1481) @expansion{} i[2]=xz
../singular_texi/examples.tex(,1482) @expansion{} i[3]=xy2-x4
../singular_texi/examples.tex(,1483) @expansion{} i[4]=x3z
../singular_texi/examples.tex(,1484)   //
../singular_texi/examples.tex(,1485)   // 2. Compute the weights:
../singular_texi/examples.tex(,1486)   intvec v= qhweight(i);         // compute weights
../singular_texi/examples.tex(,1487)   v;
../singular_texi/examples.tex(,1488) @expansion{} 4,6,9
../singular_texi/examples.tex(,1489)   //
../singular_texi/examples.tex(,1490)   // 3. Compute the tangent developable
../singular_texi/examples.tex(,1491)   // The tangent developable of a projective variety given parametrically
../singular_texi/examples.tex(,1492)   // by F=(f1,...,fn) : P^r --> P^n is the union of all tangent spaces
../singular_texi/examples.tex(,1493)   // of the image. The tangent space at a smooth point F(t1,...,tr)
../singular_texi/examples.tex(,1494)   // is given as the image of the tangent space at (t1,...,tr) under
../singular_texi/examples.tex(,1495)   // the tangent map (affine coordinates)
../singular_texi/examples.tex(,1496)   //   T(t1,...,tr): (y1,...,yr) --> jacob(f)*transpose((y1,...,yr))
../singular_texi/examples.tex(,1497)   // where jacob(f) denotes the jacobian matrix of f with respect to the
../singular_texi/examples.tex(,1498)   // t's evaluated at the point (t1,...,tr).
../singular_texi/examples.tex(,1499)   // Hence we have to create the graph of this map and then to eliminate
../singular_texi/examples.tex(,1500)   // the t's and y's.
../singular_texi/examples.tex(,1501)   // The rational normal curve in P^4 is given as the image of
../singular_texi/examples.tex(,1502)   //        F(s,t) = (s4,s3t,s2t2,st3,t4)
../singular_texi/examples.tex(,1503)   // each component being homogeneous of degree 4.
../singular_texi/examples.tex(,1504)   ring P = 0,(s,t,x,y,a,b,c,d,e),dp;
../singular_texi/examples.tex(,1505)   ideal M = maxideal(1);
../singular_texi/examples.tex(,1506)   ideal F = M[1..2];     // take the 1st two generators of M
../singular_texi/examples.tex(,1507)   F=F^4;
../singular_texi/examples.tex(,1508)   // simplify(...,2); deletes 0-columns
../singular_texi/examples.tex(,1509)   matrix jac = simplify(jacob(F),2);
../singular_texi/examples.tex(,1510)   ideal T = x,y;
../singular_texi/examples.tex(,1511)   ideal J = jac*transpose(T);
../singular_texi/examples.tex(,1512)   ideal H = M[5..9];
../singular_texi/examples.tex(,1513)   ideal i = H-J;         // this is tricky: difference between two
../singular_texi/examples.tex(,1514)                          // ideals is not defined, but between two
../singular_texi/examples.tex(,1515)                          // matrices. By automatic type conversion
../singular_texi/examples.tex(,1516)                          // the ideals are converted to matrices,
../singular_texi/examples.tex(,1517)                          // subtracted and afterwards converted
../singular_texi/examples.tex(,1518)                          // to an ideal. Note that '+' is defined
../singular_texi/examples.tex(,1519)                          // and adds (concatenates) two ideals
../singular_texi/examples.tex(,1520)   i;
../singular_texi/examples.tex(,1521) @expansion{} i[1]=-4s3x+a
../singular_texi/examples.tex(,1522) @expansion{} i[2]=-3s2tx-s3y+b
../singular_texi/examples.tex(,1523) @expansion{} i[3]=-2st2x-2s2ty+c
../singular_texi/examples.tex(,1524) @expansion{} i[4]=-t3x-3st2y+d
../singular_texi/examples.tex(,1525) @expansion{} i[5]=-4t3y+e
../singular_texi/examples.tex(,1526)   // Now we define a ring with product ordering and weights 4
../singular_texi/examples.tex(,1527)   // for the variables a,...,e.
../singular_texi/examples.tex(,1528)   // Then we map i from P to P1 and eliminate s,t,x,y from i.
../singular_texi/examples.tex(,1529)   ring P1 = 0,(s,t,x,y,a,b,c,d,e),(dp(4),wp(4,4,4,4,4));
../singular_texi/examples.tex(,1530)   ideal i = fetch(P,i);
../singular_texi/examples.tex(,1531)   ideal j= eliminate(i,stxy);    // equations of tangent developable
../singular_texi/examples.tex(,1532)   j;
../singular_texi/examples.tex(,1533) @expansion{} j[1]=3c2-4bd+ae
../singular_texi/examples.tex(,1534) @expansion{} j[2]=2bcd-3ad2-3b2e+4ace
../singular_texi/examples.tex(,1535) @expansion{} j[3]=8b2d2-9acd2-9b2ce+12ac2e-2abde
../singular_texi/examples.tex(,1536)   // We can use the product ordering to eliminate s,t,x,y from i
../singular_texi/examples.tex(,1537)   // by a std-basis computation.
../singular_texi/examples.tex(,1538)   // We need proc 'nselect' from elim.lib.
../singular_texi/examples.tex(,1539)   LIB "elim.lib";
../singular_texi/examples.tex(,1540)   j = std(i);                    // compute a std basis j
../singular_texi/examples.tex(,1541)   j = nselect(j,1,4);            // select generators from j not
../singular_texi/examples.tex(,1542)   j;                             // containing variable 1,...,4
../singular_texi/examples.tex(,1543) @expansion{} j[1]=3c2-4bd+ae
../singular_texi/examples.tex(,1544) @expansion{} j[2]=2bcd-3ad2-3b2e+4ace
../singular_texi/examples.tex(,1545) @expansion{} j[3]=8b2d2-9acd2-9b2ce+12ac2e-2abde
../singular_texi/examples.tex(,1546) @c end example Elimination examples.doc:1058
../singular_texi/examples.tex(,1547) @end smallexample
../singular_texi/examples.tex(,1548) @c  killall();
../singular_texi/examples.tex(,1549) 
../singular_texi/examples.tex(,1550) 
../singular_texi/examples.tex(,1551) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,1553) @node Free resolution, Computation of Ext, Elimination, Examples
../singular_texi/examples.tex(,1558) @section  Free resolution
../singular_texi/examples.tex(,1559) @cindex  Free resolution
../singular_texi/examples.tex(,1560) 
../singular_texi/examples.tex(,1561) In @sc{Singular} a free resolution of a module or ideal has its own type:
../singular_texi/examples.tex(,1562) @code{resolution}. It is a structure that stores all information related to
../singular_texi/examples.tex(,1563) free resolutions. This allows partial computations of resolutions via
../singular_texi/examples.tex(,1564) the command @code{res}. After applying @code{res}, only a pre-format of the
../singular_texi/examples.tex(,1565) resolution is computed which allows to determine invariants like
../singular_texi/examples.tex(,1566) Betti-numbers or homological dimension. To see the differentials
../singular_texi/examples.tex(,1567) of the complex, a resolution must be converted into the type list which
../singular_texi/examples.tex(,1568) yields a list of modules: the k-th module in this
../singular_texi/examples.tex(,1569) list is the first syzygy-module (module of relations) of the (k-1)st module.
../singular_texi/examples.tex(,1570) There are the following commands to compute a resolution:
../singular_texi/examples.tex(,1571) @table @code
../singular_texi/examples.tex(,1572) @item res
../singular_texi/examples.tex(,1574) @ref{res}@*
../singular_texi/examples.tex(,1576) computes a free resolution of an ideal or module using a heuristically
../singular_texi/examples.tex(,1577) chosen method.
../singular_texi/examples.tex(,1578) This is the preferred method to compute free resolutions of ideals or
../singular_texi/examples.tex(,1579) modules.
../singular_texi/examples.tex(,1580) @item lres
../singular_texi/examples.tex(,1582) @ref{lres}@*
../singular_texi/examples.tex(,1584) computes a free resolution of an ideal or module with La Scala's
../singular_texi/examples.tex(,1585) method. The input needs to be homogeneous.
../singular_texi/examples.tex(,1586) @item mres
../singular_texi/examples.tex(,1588) @ref{mres}@*
../singular_texi/examples.tex(,1590) computes a minimal free resolution of an ideal or module with the syzygy
../singular_texi/examples.tex(,1591) method.
../singular_texi/examples.tex(,1592) @item sres
../singular_texi/examples.tex(,1594) @ref{sres}@*
../singular_texi/examples.tex(,1596) computes a free resolution of an ideal or module with Schreyer's
../singular_texi/examples.tex(,1597) method. The input has to be a standard basis.
../singular_texi/examples.tex(,1598) @item nres
../singular_texi/examples.tex(,1600) @ref{nres}@*
../singular_texi/examples.tex(,1602) computes a free resolution of an ideal or module with the standard basis
../singular_texi/examples.tex(,1603) method.
../singular_texi/examples.tex(,1604) @item minres
../singular_texi/examples.tex(,1606) @ref{minres}@*
../singular_texi/examples.tex(,1608) minimizes a free resolution of an ideal or module.
../singular_texi/examples.tex(,1609) @item syz
../singular_texi/examples.tex(,1611) @ref{syz}@*
../singular_texi/examples.tex(,1613) computes the first syzygy module.
../singular_texi/examples.tex(,1614) @end table
../singular_texi/examples.tex(,1615) @code{res(i,r)}, @code{lres(i,r)}, @code{sres(i,r)}, @code{mres(i,r)},
../singular_texi/examples.tex(,1616) @code{nres(i,r)} compute the first r modules of the resolution
../singular_texi/examples.tex(,1617) of i, resp.@: the full resolution if r=0 and the basering is not a qring.
../singular_texi/examples.tex(,1618) See the manual for a precise description of these commands.
../singular_texi/examples.tex(,1619) @*Note: The command @code{betti} does not require a minimal
../singular_texi/examples.tex(,1620) resolution for the minimal betti numbers.
../singular_texi/examples.tex(,1621) 
../singular_texi/examples.tex(,1622) Now let's look at an example which uses resolutions: The Hilbert-Burch
../singular_texi/examples.tex(,1623) theorem says that the ideal i of a reduced curve in
../singular_texi/examples.tex(,1624) @tex
../singular_texi/examples.tex(,1625) $K^3$
../singular_texi/examples.tex(,1626) @end tex
../singular_texi/examples.tex(,1630) has a free resolution of length 2 and that i is given by the 2x2 minors
../singular_texi/examples.tex(,1631) of the 2nd matrix in the resolution.
../singular_texi/examples.tex(,1632) We test this for two transversal cusps in
../singular_texi/examples.tex(,1633) @tex
../singular_texi/examples.tex(,1634) $K^3$.
../singular_texi/examples.tex(,1635) @end tex
../singular_texi/examples.tex(,1639) Afterwards we compute the resolution of the ideal j of the tangent developable
../singular_texi/examples.tex(,1640) of the rational normal curve in
../singular_texi/examples.tex(,1641) @tex
../singular_texi/examples.tex(,1642) $P^4$
../singular_texi/examples.tex(,1643) @end tex
../singular_texi/examples.tex(,1647) from above.
../singular_texi/examples.tex(,1648) Finally we demonstrate the use of the type @code{resolution} in connection with
../singular_texi/examples.tex(,1649) the @code{lres} command.
../singular_texi/examples.tex(,1650) 
../singular_texi/examples.tex(,1651) @smallexample
../singular_texi/examples.tex(,1652) @c computed example Free_resolution examples.doc:1231 
../singular_texi/examples.tex(,1653)   // Two transversal cusps in (k^3,0):
../singular_texi/examples.tex(,1654)   ring r2 =0,(x,y,z),ds;
../singular_texi/examples.tex(,1655)   ideal i =z2-1y3+x3y,xz,-1xy2+x4,x3z;
../singular_texi/examples.tex(,1656)   resolution rs=mres(i,0);   // computes a minimal resolution
../singular_texi/examples.tex(,1657)   rs;                        // the standard representation of complexes
../singular_texi/examples.tex(,1658) @expansion{}   1       3       2       
../singular_texi/examples.tex(,1659) @expansion{} r2 <--  r2 <--  r2
../singular_texi/examples.tex(,1660) @expansion{} 
../singular_texi/examples.tex(,1661) @expansion{} 0       1       2       
../singular_texi/examples.tex(,1662) @expansion{} 
../singular_texi/examples.tex(,1663)     list resi=rs;            // convertion to a list
../singular_texi/examples.tex(,1664)   print(resi[1]);            // the 1st module is i minimized
../singular_texi/examples.tex(,1665) @expansion{} xz,
../singular_texi/examples.tex(,1666) @expansion{} z2-y3+x3y,
../singular_texi/examples.tex(,1667) @expansion{} xy2-x4
../singular_texi/examples.tex(,1668)   print(resi[2]);            // the 1st syzygy module of i
../singular_texi/examples.tex(,1669) @expansion{} -z,-y2+x3,
../singular_texi/examples.tex(,1670) @expansion{} x, 0,     
../singular_texi/examples.tex(,1671) @expansion{} y, z      
../singular_texi/examples.tex(,1672)   resi[3];                   // the 2nd syzygy module of i
../singular_texi/examples.tex(,1673) @expansion{} _[1]=0
../singular_texi/examples.tex(,1674)   ideal j=minor(resi[2],2);
../singular_texi/examples.tex(,1675)   reduce(j,std(i));          // check whether j is contained in i
../singular_texi/examples.tex(,1676) @expansion{} _[1]=0
../singular_texi/examples.tex(,1677) @expansion{} _[2]=0
../singular_texi/examples.tex(,1678) @expansion{} _[3]=0
../singular_texi/examples.tex(,1679)   size(reduce(i,std(j)));    // check whether i is contained in j
../singular_texi/examples.tex(,1680) @expansion{} 0
../singular_texi/examples.tex(,1681)   // size(<ideal>) counts the non-zero generators
../singular_texi/examples.tex(,1682)   // ---------------------------------------------
../singular_texi/examples.tex(,1683)   // The tangent developable of the rational normal curve in P^4:
../singular_texi/examples.tex(,1684)   ring P = 0,(a,b,c,d,e),dp;
../singular_texi/examples.tex(,1685)   ideal j= 3c2-4bd+ae, -2bcd+3ad2+3b2e-4ace,
../singular_texi/examples.tex(,1686)            8b2d2-9acd2-9b2ce+9ac2e+2abde-1a2e2;
../singular_texi/examples.tex(,1687)   resolution rs=mres(j,0);
../singular_texi/examples.tex(,1688)   rs;
../singular_texi/examples.tex(,1689) @expansion{}  1      2      1      
../singular_texi/examples.tex(,1690) @expansion{} P <--  P <--  P
../singular_texi/examples.tex(,1691) @expansion{} 
../singular_texi/examples.tex(,1692) @expansion{} 0      1      2      
../singular_texi/examples.tex(,1693) @expansion{} 
../singular_texi/examples.tex(,1694)   list L=rs;
../singular_texi/examples.tex(,1695)   print(L[2]);
../singular_texi/examples.tex(,1696) @expansion{} 2bcd-3ad2-3b2e+4ace,
../singular_texi/examples.tex(,1697) @expansion{} -3c2+4bd-ae         
../singular_texi/examples.tex(,1698)   // create an intmat with graded betti numbers
../singular_texi/examples.tex(,1699)   intmat B=betti(rs);
../singular_texi/examples.tex(,1700)   // this gives a nice output of betti numbers
../singular_texi/examples.tex(,1701)   print(B,"betti");
../singular_texi/examples.tex(,1702) @expansion{}            0     1     2
../singular_texi/examples.tex(,1703) @expansion{} ------------------------
../singular_texi/examples.tex(,1704) @expansion{}     0:     1     -     -
../singular_texi/examples.tex(,1705) @expansion{}     1:     -     1     -
../singular_texi/examples.tex(,1706) @expansion{}     2:     -     1     -
../singular_texi/examples.tex(,1707) @expansion{}     3:     -     -     1
../singular_texi/examples.tex(,1708) @expansion{} ------------------------
../singular_texi/examples.tex(,1709) @expansion{} total:     1     2     1
../singular_texi/examples.tex(,1710)   // the user has access to all betti numbers
../singular_texi/examples.tex(,1711)   // the 2-nd column of B:
../singular_texi/examples.tex(,1712)   B[1..4,2];
../singular_texi/examples.tex(,1713) @expansion{} 0 1 1 0
../singular_texi/examples.tex(,1714)   ring cyc5=32003,(a,b,c,d,e,h),dp;
../singular_texi/examples.tex(,1715)   ideal i=
../singular_texi/examples.tex(,1716)   a+b+c+d+e,
../singular_texi/examples.tex(,1717)   ab+bc+cd+de+ea,
../singular_texi/examples.tex(,1718)   abc+bcd+cde+dea+eab,
../singular_texi/examples.tex(,1719)   abcd+bcde+cdea+deab+eabc,
../singular_texi/examples.tex(,1720)   h5-abcde;
../singular_texi/examples.tex(,1721)   resolution rs=lres(i,0);   //computes the resolution according La Scala
../singular_texi/examples.tex(,1722)   rs;                        //the shape of the minimal resolution
../singular_texi/examples.tex(,1723) @expansion{}     1         5         10         10         5         1         
../singular_texi/examples.tex(,1724) @expansion{} cyc5 <--  cyc5 <--  cyc5 <--   cyc5 <--   cyc5 <--  cyc5
../singular_texi/examples.tex(,1725) @expansion{} 
../singular_texi/examples.tex(,1726) @expansion{} 0         1         2          3          4         5         
../singular_texi/examples.tex(,1727) @expansion{} resolution not minimized yet
../singular_texi/examples.tex(,1728) @expansion{} 
../singular_texi/examples.tex(,1729)   print(betti(rs),"betti");  //shows the Betti-numbers of cyclic 5
../singular_texi/examples.tex(,1730) @expansion{}            0     1     2     3     4     5
../singular_texi/examples.tex(,1731) @expansion{} ------------------------------------------
../singular_texi/examples.tex(,1732) @expansion{}     0:     1     1     -     -     -     -
../singular_texi/examples.tex(,1733) @expansion{}     1:     -     1     1     -     -     -
../singular_texi/examples.tex(,1734) @expansion{}     2:     -     1     1     -     -     -
../singular_texi/examples.tex(,1735) @expansion{}     3:     -     1     2     1     -     -
../singular_texi/examples.tex(,1736) @expansion{}     4:     -     1     2     1     -     -
../singular_texi/examples.tex(,1737) @expansion{}     5:     -     -     2     2     -     -
../singular_texi/examples.tex(,1738) @expansion{}     6:     -     -     1     2     1     -
../singular_texi/examples.tex(,1739) @expansion{}     7:     -     -     1     2     1     -
../singular_texi/examples.tex(,1740) @expansion{}     8:     -     -     -     1     1     -
../singular_texi/examples.tex(,1741) @expansion{}     9:     -     -     -     1     1     -
../singular_texi/examples.tex(,1742) @expansion{}    10:     -     -     -     -     1     1
../singular_texi/examples.tex(,1743) @expansion{} ------------------------------------------
../singular_texi/examples.tex(,1744) @expansion{} total:     1     5    10    10     5     1
../singular_texi/examples.tex(,1745)   dim(rs);                   //the homological dimension
../singular_texi/examples.tex(,1746) @expansion{} 4
../singular_texi/examples.tex(,1747)   size(list(rs));            //gets the full (non-reduced) resolution
../singular_texi/examples.tex(,1748) @expansion{} 6
../singular_texi/examples.tex(,1749)   minres(rs);                //minimizes the resolution
../singular_texi/examples.tex(,1750) @expansion{}     1         5         10         10         5         1         
../singular_texi/examples.tex(,1751) @expansion{} cyc5 <--  cyc5 <--  cyc5 <--   cyc5 <--   cyc5 <--  cyc5
../singular_texi/examples.tex(,1752) @expansion{} 
../singular_texi/examples.tex(,1753) @expansion{} 0         1         2          3          4         5         
../singular_texi/examples.tex(,1754) @expansion{} 
../singular_texi/examples.tex(,1755)   size(list(rs));            //gets the minimized resolution
../singular_texi/examples.tex(,1756) @expansion{} 6
../singular_texi/examples.tex(,1757) @c end example Free_resolution examples.doc:1231
../singular_texi/examples.tex(,1758) @end smallexample
../singular_texi/examples.tex(,1759) 
../singular_texi/examples.tex(,1760) 
../singular_texi/examples.tex(,1761) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,1763) @node Computation of Ext, Polar curves, Free resolution, Examples
../singular_texi/examples.tex(,1764) @section  Computation of Ext
../singular_texi/examples.tex(,1765) @cindex  Ext
../singular_texi/examples.tex(,1766) 
../singular_texi/examples.tex(,1767) We start by showing how to calculate the 
../singular_texi/examples.tex(,1771) @tex
../singular_texi/examples.tex(,1772) $n$
../singular_texi/examples.tex(,1773) @end tex
../singular_texi/examples.tex(,1774) -th Ext group of an
../singular_texi/examples.tex(,1775) ideal. The ingredients to do this are by the definition of Ext the
../singular_texi/examples.tex(,1776) following: calculate a (minimal) resolution at least up to length
../singular_texi/examples.tex(,1777) 
../singular_texi/examples.tex(,1781) @tex
../singular_texi/examples.tex(,1782) $n$
../singular_texi/examples.tex(,1783) @end tex
../singular_texi/examples.tex(,1784) , apply the Hom-functor, and calculate the 
../singular_texi/examples.tex(,1788) @tex
../singular_texi/examples.tex(,1789) $n$
../singular_texi/examples.tex(,1790) @end tex
../singular_texi/examples.tex(,1791) -th homology
../singular_texi/examples.tex(,1792) group, that is form the quotient
../singular_texi/examples.tex(,1793) @tex
../singular_texi/examples.tex(,1794) $\hbox{\rm ker} / \hbox{\rm Im}$
../singular_texi/examples.tex(,1795) @end tex
../singular_texi/examples.tex(,1799) in the resolution sequence.
../singular_texi/examples.tex(,1800) 
../singular_texi/examples.tex(,1801) The Hom functor is given simply by transposing (hence dualizing) the
../singular_texi/examples.tex(,1802) module or the corresponding matrix with the command @code{transpose}.
../singular_texi/examples.tex(,1803) The image of the 
../singular_texi/examples.tex(,1807) @tex
../singular_texi/examples.tex(,1808) $(n-1)$
../singular_texi/examples.tex(,1809) @end tex
../singular_texi/examples.tex(,1810) -st map is generated by the columns of the
../singular_texi/examples.tex(,1811) corresponding matrix. To calculate the kernel apply the command
../singular_texi/examples.tex(,1812) @code{syz} at the 
../singular_texi/examples.tex(,1816) @tex
../singular_texi/examples.tex(,1817) $(n-1)$
../singular_texi/examples.tex(,1818) @end tex
../singular_texi/examples.tex(,1819) -st transposed entry of the resolution.
../singular_texi/examples.tex(,1820) Finally, the quotient is obtained by the command @code{modulo}, which
../singular_texi/examples.tex(,1821) gives for two modules A = ker, B = Im the module of relations of
../singular_texi/examples.tex(,1822) @tex
../singular_texi/examples.tex(,1823) $A/(A \cap B)$
../singular_texi/examples.tex(,1824) @end tex
../singular_texi/examples.tex(,1828) in the usual way. As we have a chain complex this is obviously the same
../singular_texi/examples.tex(,1829) as ker/Im.
../singular_texi/examples.tex(,1830) 
../singular_texi/examples.tex(,1831) We collect these statements in the following short procedure:
../singular_texi/examples.tex(,1832) 
../singular_texi/examples.tex(,1833) @smallexample
../singular_texi/examples.tex(,1834) proc ext(int n, ideal I)
../singular_texi/examples.tex(,1835) @{
../singular_texi/examples.tex(,1836)   resolution rs = mres(I,n+1);
../singular_texi/examples.tex(,1837)   module tAn    = transpose(rs[n+1]);
../singular_texi/examples.tex(,1838)   module tAn_1  = transpose(rs[n]);
../singular_texi/examples.tex(,1839)   module ext_n  = modulo(syz(tAn),tAn_1);
../singular_texi/examples.tex(,1840)   return(ext_n);
../singular_texi/examples.tex(,1841) @}
../singular_texi/examples.tex(,1842) @end smallexample
../singular_texi/examples.tex(,1843) 
../singular_texi/examples.tex(,1844) Now consider the following example:
../singular_texi/examples.tex(,1845) 
../singular_texi/examples.tex(,1846) @smallexample
../singular_texi/examples.tex(,1847) ring r5 = 32003,(a,b,c,d,e),dp;
../singular_texi/examples.tex(,1848) ideal I = a2b2+ab2c+b2cd, a2c2+ac2d+c2de,a2d2+ad2e+bd2e,a2e2+abe2+bce2;
../singular_texi/examples.tex(,1849) print(ext(2,I));
../singular_texi/examples.tex(,1850) @expansion{} 1,0,0,0,0,0,0,
../singular_texi/examples.tex(,1851) @expansion{} 0,1,0,0,0,0,0,
../singular_texi/examples.tex(,1852) @expansion{} 0,0,1,0,0,0,0,
../singular_texi/examples.tex(,1853) @expansion{} 0,0,0,1,0,0,0,
../singular_texi/examples.tex(,1854) @expansion{} 0,0,0,0,1,0,0,
../singular_texi/examples.tex(,1855) @expansion{} 0,0,0,0,0,1,0,
../singular_texi/examples.tex(,1856) @expansion{} 0,0,0,0,0,0,1
../singular_texi/examples.tex(,1857) ext(3,I);   // too big to be displayed here
../singular_texi/examples.tex(,1858) @end smallexample
../singular_texi/examples.tex(,1859) 
../singular_texi/examples.tex(,1860) The library @code{homolog.lib} contains several procedures for computing
../singular_texi/examples.tex(,1861) Ext-modules and related modules, which are much more general and
../singular_texi/examples.tex(,1862) sophisticated then the above one. They are used in the following
../singular_texi/examples.tex(,1863) example.
../singular_texi/examples.tex(,1864) 
../singular_texi/examples.tex(,1865) If 
../singular_texi/examples.tex(,1869) @tex
../singular_texi/examples.tex(,1870) $M$
../singular_texi/examples.tex(,1871) @end tex
../singular_texi/examples.tex(,1872)  is a module, then
../singular_texi/examples.tex(,1873) @tex
../singular_texi/examples.tex(,1874) $\hbox{Ext}^1(M,M)$, resp.\ $\hbox{Ext}^2(M,M)$,
../singular_texi/examples.tex(,1875) @end tex
../singular_texi/examples.tex(,1879) are the modules of infinitesimal deformations, resp.@: of obstructions, of
../singular_texi/examples.tex(,1880) 
../singular_texi/examples.tex(,1884) @tex
../singular_texi/examples.tex(,1885) $M$
../singular_texi/examples.tex(,1886) @end tex
../singular_texi/examples.tex(,1887)  (like T1 and T2 for a singularity).  Similar to the treatment
../singular_texi/examples.tex(,1888) for singularities, the semiuniversal deformation of 
../singular_texi/examples.tex(,1892) @tex
../singular_texi/examples.tex(,1893) $M$
../singular_texi/examples.tex(,1894) @end tex
../singular_texi/examples.tex(,1895)  can be
../singular_texi/examples.tex(,1896) computed (if
../singular_texi/examples.tex(,1897) @tex
../singular_texi/examples.tex(,1898) $\hbox{Ext}^1$
../singular_texi/examples.tex(,1899) @end tex
../singular_texi/examples.tex(,1903) is finite dimensional) with the help of
../singular_texi/examples.tex(,1904) @tex
../singular_texi/examples.tex(,1905) $\hbox{Ext}^1$, $\hbox{Ext}^2$
../singular_texi/examples.tex(,1906) @end tex
../singular_texi/examples.tex(,1910) and the cup product. There is an extra procedure for
../singular_texi/examples.tex(,1911) @tex
../singular_texi/examples.tex(,1912) $\hbox{Ext}^k(R/J,R)$
../singular_texi/examples.tex(,1913) @end tex
../singular_texi/examples.tex(,1917) if 
../singular_texi/examples.tex(,1921) @tex
../singular_texi/examples.tex(,1922) $J$
../singular_texi/examples.tex(,1923) @end tex
../singular_texi/examples.tex(,1924)  is an ideal in 
../singular_texi/examples.tex(,1928) @tex
../singular_texi/examples.tex(,1929) $R$
../singular_texi/examples.tex(,1930) @end tex
../singular_texi/examples.tex(,1931)  since this is faster than the
../singular_texi/examples.tex(,1932) general Ext.
../singular_texi/examples.tex(,1933) 
../singular_texi/examples.tex(,1934) We compute
../singular_texi/examples.tex(,1935) @itemize @bullet
../singular_texi/examples.tex(,1936) @item
../singular_texi/examples.tex(,1937) the infinitesimal deformations
../singular_texi/examples.tex(,1938) @tex
../singular_texi/examples.tex(,1939) ($=\hbox{Ext}^1(K,K)$)
../singular_texi/examples.tex(,1940) @end tex
../singular_texi/examples.tex(,1944) and obstructions
../singular_texi/examples.tex(,1945) @tex
../singular_texi/examples.tex(,1946) ($=\hbox{Ext}^2(K,K)$)
../singular_texi/examples.tex(,1947) @end tex
../singular_texi/examples.tex(,1951) of the residue field 
../singular_texi/examples.tex(,1955) @tex
../singular_texi/examples.tex(,1956) $K=R/m$
../singular_texi/examples.tex(,1957) @end tex
../singular_texi/examples.tex(,1958)  of an ordinary cusp,
../singular_texi/examples.tex(,1959) @tex
../singular_texi/examples.tex(,1960) $R=Loc_m K[x,y]/(x^2-y^3)$, $m=(x,y)$.
../singular_texi/examples.tex(,1961) @end tex
../singular_texi/examples.tex(,1965) To compute
../singular_texi/examples.tex(,1966) @tex
../singular_texi/examples.tex(,1967) $\hbox{Ext}^1(m,m)$
../singular_texi/examples.tex(,1968) @end tex
../singular_texi/examples.tex(,1972) we have to apply @code{Ext(1,syz(m),syz(m))} with
../singular_texi/examples.tex(,1973) @code{syz(m)} the first syzygy module of 
../singular_texi/examples.tex(,1977) @tex
../singular_texi/examples.tex(,1978) $m$
../singular_texi/examples.tex(,1979) @end tex
../singular_texi/examples.tex(,1980) , which is isomorphic to
../singular_texi/examples.tex(,1981) @tex
../singular_texi/examples.tex(,1982) $\hbox{Ext}^2(K,K)$.
../singular_texi/examples.tex(,1983) @end tex
../singular_texi/examples.tex(,1987) @item
../singular_texi/examples.tex(,1988) @tex
../singular_texi/examples.tex(,1989) $\hbox{Ext}^k(R/i,R)$
../singular_texi/examples.tex(,1990) @end tex
../singular_texi/examples.tex(,1994) for some ideal 
../singular_texi/examples.tex(,1998) @tex
../singular_texi/examples.tex(,1999) $i$
../singular_texi/examples.tex(,2000) @end tex
../singular_texi/examples.tex(,2001)  and with an extra option.
../singular_texi/examples.tex(,2002) @end itemize
../singular_texi/examples.tex(,2003) 
../singular_texi/examples.tex(,2004) @smallexample
../singular_texi/examples.tex(,2005) @c computed example Computation_of_Ext examples.doc:1432 
../singular_texi/examples.tex(,2006)   LIB "homolog.lib";
../singular_texi/examples.tex(,2007)   ring R=0,(x,y),ds;
../singular_texi/examples.tex(,2008)   ideal i=x2-y3;
../singular_texi/examples.tex(,2009)   qring q = std(i);      // defines the quotient ring Loc_m k[x,y]/(x2-y3)
../singular_texi/examples.tex(,2010)   ideal m = maxideal(1);
../singular_texi/examples.tex(,2011)   module T1K = Ext(1,m,m);  // computes Ext^1(R/m,R/m)
../singular_texi/examples.tex(,2012) @expansion{} // dimension of Ext^1:  0
../singular_texi/examples.tex(,2013) @expansion{} // vdim of Ext^1:       2
../singular_texi/examples.tex(,2014) @expansion{} 
../singular_texi/examples.tex(,2015)   print(T1K);
../singular_texi/examples.tex(,2016) @expansion{} 0,  0,y,x,0,y,0,    x2-y3,
../singular_texi/examples.tex(,2017) @expansion{} -y2,x,x,0,y,0,x2-y3,0,    
../singular_texi/examples.tex(,2018) @expansion{} 1,  0,0,0,0,0,0,    0     
../singular_texi/examples.tex(,2019)   printlevel=2;             // gives more explanation
../singular_texi/examples.tex(,2020)   module T2K=Ext(2,m,m);    // computes Ext^2(R/m,R/m)
../singular_texi/examples.tex(,2021) @expansion{} // Computing Ext^2 (help Ext; gives an explanation):
../singular_texi/examples.tex(,2022) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/examples.tex(,2023) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/examples.tex(,2024) @expansion{} // then Hom(F2,G0)-->Hom(F3,G0) is given by:
../singular_texi/examples.tex(,2025) @expansion{} y2,x,
../singular_texi/examples.tex(,2026) @expansion{} x, y 
../singular_texi/examples.tex(,2027) @expansion{} // and Hom(F1,G0) + Hom(F2,G1)-->Hom(F2,G0) is given by:
../singular_texi/examples.tex(,2028) @expansion{} -y,x,  x,0,y,0,
../singular_texi/examples.tex(,2029) @expansion{} x, -y2,0,x,0,y 
../singular_texi/examples.tex(,2030) @expansion{} 
../singular_texi/examples.tex(,2031) @expansion{} // dimension of Ext^2:  0
../singular_texi/examples.tex(,2032) @expansion{} // vdim of Ext^2:       2
../singular_texi/examples.tex(,2033) @expansion{} 
../singular_texi/examples.tex(,2034)   print(std(T2K));
../singular_texi/examples.tex(,2035) @expansion{} -y2,0,x,0,y,
../singular_texi/examples.tex(,2036) @expansion{} 0,  x,0,y,0,
../singular_texi/examples.tex(,2037) @expansion{} 1,  0,0,0,0 
../singular_texi/examples.tex(,2038)   printlevel=0;
../singular_texi/examples.tex(,2039)   module E = Ext(1,syz(m),syz(m));
../singular_texi/examples.tex(,2040) @expansion{} // dimension of Ext^1:  0
../singular_texi/examples.tex(,2041) @expansion{} // vdim of Ext^1:       2
../singular_texi/examples.tex(,2042) @expansion{} 
../singular_texi/examples.tex(,2043)   print(std(E));
../singular_texi/examples.tex(,2044) @expansion{} -y,x, 0, 0,0,x,0,y,
../singular_texi/examples.tex(,2045) @expansion{} 0, -y,-y,0,x,0,y,0,
../singular_texi/examples.tex(,2046) @expansion{} 0, 0, 0, 1,0,0,0,0,
../singular_texi/examples.tex(,2047) @expansion{} 0, 0, 1, 0,0,0,0,0,
../singular_texi/examples.tex(,2048) @expansion{} 0, 1, 0, 0,0,0,0,0,
../singular_texi/examples.tex(,2049) @expansion{} 1, 0, 0, 0,0,0,0,0 
../singular_texi/examples.tex(,2050)   //The matrices which we have just computed are presentation matrices
../singular_texi/examples.tex(,2051)   //of the modules T2K and E. Hence we may ignore those columns
../singular_texi/examples.tex(,2052)   //containing 1 as an entry and see that T2K and E are isomorphic
../singular_texi/examples.tex(,2053)   //as expected, but differently presented.
../singular_texi/examples.tex(,2054)   //-------------------------------------------
../singular_texi/examples.tex(,2055)   ring S=0,(x,y,z),dp;
../singular_texi/examples.tex(,2056)   ideal  i = x2y,y2z,z3x;
../singular_texi/examples.tex(,2057)   module E = Ext_R(2,i);
../singular_texi/examples.tex(,2058) @expansion{} // dimension of Ext^2:  1
../singular_texi/examples.tex(,2059) @expansion{} 
../singular_texi/examples.tex(,2060)   print(E);
../singular_texi/examples.tex(,2061) @expansion{} 0,y,0,z2,
../singular_texi/examples.tex(,2062) @expansion{} z,0,0,-x,
../singular_texi/examples.tex(,2063) @expansion{} 0,0,x,-y 
../singular_texi/examples.tex(,2064)   // if a 3-rd argument is given (of any type)
../singular_texi/examples.tex(,2065)   // a list of Ext^k(R/i,R), a SB of Ext^k(R/i,R) and a vector space basis
../singular_texi/examples.tex(,2066)   // is returned:
../singular_texi/examples.tex(,2067)   list LE = Ext_R(3,i,"");
../singular_texi/examples.tex(,2068) @expansion{} // dimension of Ext^3:  0
../singular_texi/examples.tex(,2069) @expansion{} // vdim of Ext^3:       2
../singular_texi/examples.tex(,2070) @expansion{} 
../singular_texi/examples.tex(,2071)   LE;
../singular_texi/examples.tex(,2072) @expansion{} [1]:
../singular_texi/examples.tex(,2073) @expansion{}    _[1]=y*gen(1)
../singular_texi/examples.tex(,2074) @expansion{}    _[2]=x*gen(1)
../singular_texi/examples.tex(,2075) @expansion{}    _[3]=z2*gen(1)
../singular_texi/examples.tex(,2076) @expansion{} [2]:
../singular_texi/examples.tex(,2077) @expansion{}    _[1]=y*gen(1)
../singular_texi/examples.tex(,2078) @expansion{}    _[2]=x*gen(1)
../singular_texi/examples.tex(,2079) @expansion{}    _[3]=z2*gen(1)
../singular_texi/examples.tex(,2080) @expansion{} [3]:
../singular_texi/examples.tex(,2081) @expansion{}    _[1,1]=z
../singular_texi/examples.tex(,2082) @expansion{}    _[1,2]=1
../singular_texi/examples.tex(,2083)   print(LE[2]);
../singular_texi/examples.tex(,2084) @expansion{} y,x,z2
../singular_texi/examples.tex(,2085)   print(kbase(LE[2]));
../singular_texi/examples.tex(,2086) @expansion{} z,1
../singular_texi/examples.tex(,2087) @c end example Computation_of_Ext examples.doc:1432
../singular_texi/examples.tex(,2088) @end smallexample
../singular_texi/examples.tex(,2089) @c  killall();
../singular_texi/examples.tex(,2091) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2093) @node Polar curves, Depth, Computation of Ext, Examples
../singular_texi/examples.tex(,2094) @section   Polar curves
../singular_texi/examples.tex(,2095) @cindex Polar curves
../singular_texi/examples.tex(,2096) 
../singular_texi/examples.tex(,2097) The polar curve of a hypersurface given by a polynomial
../singular_texi/examples.tex(,2098) @tex
../singular_texi/examples.tex(,2099) $f\in k[x_1,\ldots,x_n,t]$
../singular_texi/examples.tex(,2100) @end tex
../singular_texi/examples.tex(,2104) with respect to 
../singular_texi/examples.tex(,2108) @tex
../singular_texi/examples.tex(,2109) $t$
../singular_texi/examples.tex(,2110) @end tex
../singular_texi/examples.tex(,2111)  (we may consider 
../singular_texi/examples.tex(,2115) @tex
../singular_texi/examples.tex(,2116) $f=0$
../singular_texi/examples.tex(,2117) @end tex
../singular_texi/examples.tex(,2118)  as a family of
../singular_texi/examples.tex(,2119) hypersurfaces parametrized by 
../singular_texi/examples.tex(,2123) @tex
../singular_texi/examples.tex(,2124) $t$
../singular_texi/examples.tex(,2125) @end tex
../singular_texi/examples.tex(,2126) ) is defined as the Zariski
../singular_texi/examples.tex(,2127) closure of
../singular_texi/examples.tex(,2128) @tex
../singular_texi/examples.tex(,2129) $V(\partial f/\partial x_1,\ldots,\partial f/\partial x_n) \setminus V(f)$
../singular_texi/examples.tex(,2130) @end tex
../singular_texi/examples.tex(,2134) if this happens to be a curve.  Some authors consider
../singular_texi/examples.tex(,2135) @tex
../singular_texi/examples.tex(,2136) $V(\partial f/\partial x_1,\ldots,\partial f/\partial x_n)$
../singular_texi/examples.tex(,2137) @end tex
../singular_texi/examples.tex(,2141) itself as polar curve.
../singular_texi/examples.tex(,2142) 
../singular_texi/examples.tex(,2143) We may consider projective hypersurfaces
../singular_texi/examples.tex(,2144) @tex
../singular_texi/examples.tex(,2145) (in $P^n$),
../singular_texi/examples.tex(,2146) @end tex
../singular_texi/examples.tex(,2150) affine hypersurfaces
../singular_texi/examples.tex(,2151) @tex
../singular_texi/examples.tex(,2152) (in $k^n$)
../singular_texi/examples.tex(,2153) @end tex
../singular_texi/examples.tex(,2157) or germs of hypersurfaces
../singular_texi/examples.tex(,2158) @tex
../singular_texi/examples.tex(,2159) (in $(k^n,0)$),
../singular_texi/examples.tex(,2160) @end tex
../singular_texi/examples.tex(,2164) getting in this way
../singular_texi/examples.tex(,2165) projective, affine or local polar curves.
../singular_texi/examples.tex(,2166) 
../singular_texi/examples.tex(,2167) Now let us compute this for a family of curves.  We need the library
../singular_texi/examples.tex(,2168) @code{elim.lib} for saturation and @code{sing.lib} for the singular
../singular_texi/examples.tex(,2169) locus.
../singular_texi/examples.tex(,2170) 
../singular_texi/examples.tex(,2171) @smallexample
../singular_texi/examples.tex(,2172) @c computed example Polar_curves examples.doc:1526 
../singular_texi/examples.tex(,2173)   LIB "elim.lib";
../singular_texi/examples.tex(,2174)   LIB "sing.lib";
../singular_texi/examples.tex(,2175)   // Affine polar curve:
../singular_texi/examples.tex(,2176)   ring R = 0,(x,z,t),dp;              // global ordering dp
../singular_texi/examples.tex(,2177)   poly f = z5+xz3+x2-tz6;
../singular_texi/examples.tex(,2178)   dim_slocus(f);                      // dimension of singular locus
../singular_texi/examples.tex(,2179) @expansion{} 1
../singular_texi/examples.tex(,2180)   ideal j = diff(f,x),diff(f,z);
../singular_texi/examples.tex(,2181)   dim(std(j));                        // dim V(j)
../singular_texi/examples.tex(,2182) @expansion{} 1
../singular_texi/examples.tex(,2183)   dim(std(j+ideal(f)));               // V(j,f) also 1-dimensional
../singular_texi/examples.tex(,2184) @expansion{} 1
../singular_texi/examples.tex(,2185)   // j defines a curve, but to get the polar curve we must remove the
../singular_texi/examples.tex(,2186)   // branches contained in f=0 (they exist since dim V(j,f) = 1). This
../singular_texi/examples.tex(,2187)   // gives the polar curve set theoretically. But for the structure we
../singular_texi/examples.tex(,2188)   // may take either j:f or j:f^k for k sufficiently large. The first is
../singular_texi/examples.tex(,2189)   // just the ideal quotient, the second the iterated ideal quotient
../singular_texi/examples.tex(,2190)   // or saturation. In our case both coincide.
../singular_texi/examples.tex(,2191)   ideal q = quotient(j,ideal(f));     // ideal quotient
../singular_texi/examples.tex(,2192)   ideal qsat = sat(j,f)[1];           // saturation, proc from elim.lib
../singular_texi/examples.tex(,2193)   ideal sq = std(q);
../singular_texi/examples.tex(,2194)   dim(sq);
../singular_texi/examples.tex(,2195) @expansion{} 1
../singular_texi/examples.tex(,2196)   // 1-dimensional, hence q defines the affine polar curve
../singular_texi/examples.tex(,2197)   //
../singular_texi/examples.tex(,2198)   // to check that q and qsat are the same, we show both inclusions, i.e.,
../singular_texi/examples.tex(,2199)   // both reductions must give the 0-ideal
../singular_texi/examples.tex(,2200)   size(reduce(qsat,sq));
../singular_texi/examples.tex(,2201) @expansion{} 0
../singular_texi/examples.tex(,2202)   size(reduce(q,std(qsat)));
../singular_texi/examples.tex(,2203) @expansion{} 0
../singular_texi/examples.tex(,2204)   qsat;
../singular_texi/examples.tex(,2205) @expansion{} qsat[1]=12zt+3z-10
../singular_texi/examples.tex(,2206) @expansion{} qsat[2]=5z2+12xt+3x
../singular_texi/examples.tex(,2207) @expansion{} qsat[3]=144xt2+72xt+9x+50z
../singular_texi/examples.tex(,2208)   // We see that the affine polar curve does not pass through the origin,
../singular_texi/examples.tex(,2209)   // hence we expect the local polar "curve" to be empty
../singular_texi/examples.tex(,2210)   // ------------------------------------------------
../singular_texi/examples.tex(,2211)   // Local polar curve:
../singular_texi/examples.tex(,2212)   ring r = 0,(x,z,t),ds;              // local ordering ds
../singular_texi/examples.tex(,2213)   poly f = z5+xz3+x2-tz6;
../singular_texi/examples.tex(,2214)   ideal j = diff(f,x),diff(f,z);
../singular_texi/examples.tex(,2215)   dim(std(j));                        // V(j) 1-dimensional
../singular_texi/examples.tex(,2216) @expansion{} 1
../singular_texi/examples.tex(,2217)   dim(std(j+ideal(f)));               // V(j,f) also 1-dimensional
../singular_texi/examples.tex(,2218) @expansion{} 1
../singular_texi/examples.tex(,2219)   ideal q = quotient(j,ideal(f));     // ideal quotient
../singular_texi/examples.tex(,2220)   q;
../singular_texi/examples.tex(,2221) @expansion{} q[1]=1
../singular_texi/examples.tex(,2222)   // The local polar "curve" is empty, i.e., V(j) is contained in V(f)
../singular_texi/examples.tex(,2223)   // ------------------------------------------------
../singular_texi/examples.tex(,2224)   // Projective polar curve: (we need "sing.lib" and "elim.lib")
../singular_texi/examples.tex(,2225)   ring P = 0,(x,z,t,y),dp;            // global ordering dp
../singular_texi/examples.tex(,2226)   poly f = z5y+xz3y2+x2y4-tz6;
../singular_texi/examples.tex(,2227)                                       // but consider t as parameter
../singular_texi/examples.tex(,2228)   dim_slocus(f);              // projective 1-dimensional singular locus
../singular_texi/examples.tex(,2229) @expansion{} 2
../singular_texi/examples.tex(,2230)   ideal j = diff(f,x),diff(f,z);
../singular_texi/examples.tex(,2231)   dim(std(j));                        // V(j), projective 1-dimensional
../singular_texi/examples.tex(,2232) @expansion{} 2
../singular_texi/examples.tex(,2233)   dim(std(j+ideal(f)));               // V(j,f) also projective 1-dimensional
../singular_texi/examples.tex(,2234) @expansion{} 2
../singular_texi/examples.tex(,2235)   ideal q = quotient(j,ideal(f));
../singular_texi/examples.tex(,2236)   ideal qsat = sat(j,f)[1];           // saturation, proc from elim.lib
../singular_texi/examples.tex(,2237)   dim(std(qsat));
../singular_texi/examples.tex(,2238) @expansion{} 2
../singular_texi/examples.tex(,2239)   // projective 1-dimensional, hence q and/or qsat define the projective
../singular_texi/examples.tex(,2240)   // polar curve. In this case, q and qsat are not the same, we needed
../singular_texi/examples.tex(,2241)   // 2 quotients.
../singular_texi/examples.tex(,2242)   // Let us check both reductions:
../singular_texi/examples.tex(,2243)   size(reduce(qsat,std(q)));
../singular_texi/examples.tex(,2244) @expansion{} 4
../singular_texi/examples.tex(,2245)   size(reduce(q,std(qsat)));
../singular_texi/examples.tex(,2246) @expansion{} 0
../singular_texi/examples.tex(,2247)   // Hence q is contained in qsat but not conversely
../singular_texi/examples.tex(,2248)   q;
../singular_texi/examples.tex(,2249) @expansion{} q[1]=12zty+3zy-10y2
../singular_texi/examples.tex(,2250) @expansion{} q[2]=60z2t-36xty-9xy-50zy
../singular_texi/examples.tex(,2251)   qsat;
../singular_texi/examples.tex(,2252) @expansion{} qsat[1]=12zt+3z-10y
../singular_texi/examples.tex(,2253) @expansion{} qsat[2]=12xty+5z2+3xy
../singular_texi/examples.tex(,2254) @expansion{} qsat[3]=144xt2+72xt+9x+50z
../singular_texi/examples.tex(,2255) @expansion{} qsat[4]=z3+2xy2
../singular_texi/examples.tex(,2256)   //
../singular_texi/examples.tex(,2257)   // Now consider again the affine polar curve,
../singular_texi/examples.tex(,2258)   // homogenize it with respect to y (deg t=0) and compare:
../singular_texi/examples.tex(,2259)   // affine polar curve:
../singular_texi/examples.tex(,2260)   ideal qa = 12zt+3z-10,5z2+12xt+3x,-144xt2-72xt-9x-50z;
../singular_texi/examples.tex(,2261)   // homogenized:
../singular_texi/examples.tex(,2262)   ideal qh = 12zt+3z-10y,5z2+12xyt+3xy,-144xt2-72xt-9x-50z;
../singular_texi/examples.tex(,2263)   size(reduce(qh,std(qsat)));
../singular_texi/examples.tex(,2264) @expansion{} 0
../singular_texi/examples.tex(,2265)   size(reduce(qsat,std(qh)));
../singular_texi/examples.tex(,2266) @expansion{} 0
../singular_texi/examples.tex(,2267)   // both ideals coincide
../singular_texi/examples.tex(,2268) @c end example Polar_curves examples.doc:1526
../singular_texi/examples.tex(,2269) @end smallexample
../singular_texi/examples.tex(,2271) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2273) @node Depth, Formatting output, Polar curves, Examples
../singular_texi/examples.tex(,2274) @section Depth
../singular_texi/examples.tex(,2275) @cindex Depth
../singular_texi/examples.tex(,2276) 
../singular_texi/examples.tex(,2277) We compute the depth of the module of Kaehler differentials
../singular_texi/examples.tex(,2278) @tex
../singular_texi/examples.tex(,2279) D$_k$(R)
../singular_texi/examples.tex(,2280) @end tex
../singular_texi/examples.tex(,2284) of the variety defined by the 
../singular_texi/examples.tex(,2288) @tex
../singular_texi/examples.tex(,2289) $(m+1)$
../singular_texi/examples.tex(,2290) @end tex
../singular_texi/examples.tex(,2291) -minors of a generic symmetric
../singular_texi/examples.tex(,2292) @tex
../singular_texi/examples.tex(,2293) $(n \times n)$-matrix.
../singular_texi/examples.tex(,2294) @end tex
../singular_texi/examples.tex(,2298) We do this by computing the resolution over the polynomial
../singular_texi/examples.tex(,2299) ring.  Then, by the Auslander-Buchsbaum formula, the depth is equal to
../singular_texi/examples.tex(,2300) the number of variables minus the length of a minimal resolution.  This
../singular_texi/examples.tex(,2301) example was suggested by U.@: Vetter in order to check whether his bound
../singular_texi/examples.tex(,2302) @tex
../singular_texi/examples.tex(,2303) $\hbox{depth}(\hbox{D}_k(R))\geq m(m+1)/2 + m-1$
../singular_texi/examples.tex(,2304) @end tex
../singular_texi/examples.tex(,2308) could be improved.
../singular_texi/examples.tex(,2309) 
../singular_texi/examples.tex(,2310) @smallexample
../singular_texi/examples.tex(,2311) @c computed example Depth examples.doc:1632 
../singular_texi/examples.tex(,2312)   LIB "matrix.lib"; LIB "sing.lib";
../singular_texi/examples.tex(,2313)   int n = 4;
../singular_texi/examples.tex(,2314)   int m = 3;
../singular_texi/examples.tex(,2315)   int N = n*(n+1)/2;           // will become number of variables
../singular_texi/examples.tex(,2316)   ring R = 32003,x(1..N),dp;
../singular_texi/examples.tex(,2317)   matrix X = symmat(n);        // proc from matrix.lib
../singular_texi/examples.tex(,2318)                                // creates the symmetric generic nxn matrix
../singular_texi/examples.tex(,2319)   print(X);
../singular_texi/examples.tex(,2320) @expansion{} x(1),x(2),x(3),x(4),
../singular_texi/examples.tex(,2321) @expansion{} x(2),x(5),x(6),x(7),
../singular_texi/examples.tex(,2322) @expansion{} x(3),x(6),x(8),x(9),
../singular_texi/examples.tex(,2323) @expansion{} x(4),x(7),x(9),x(10)
../singular_texi/examples.tex(,2324)   ideal J = minor(X,m);
../singular_texi/examples.tex(,2325)   J=std(J);
../singular_texi/examples.tex(,2326)   // Kaehler differentials D_k(R)
../singular_texi/examples.tex(,2327)   // of R=k[x1..xn]/J:
../singular_texi/examples.tex(,2328)   module D = J*freemodule(N)+transpose(jacob(J));
../singular_texi/examples.tex(,2329)   ncols(D);
../singular_texi/examples.tex(,2330) @expansion{} 110
../singular_texi/examples.tex(,2331)   nrows(D);
../singular_texi/examples.tex(,2332) @expansion{} 10
../singular_texi/examples.tex(,2333)   //
../singular_texi/examples.tex(,2334)   // Note: D is a submodule with 110 generators of a free module
../singular_texi/examples.tex(,2335)   // of rank 10 over a polynomial ring in 10 variables.
../singular_texi/examples.tex(,2336)   // Compute a full resolution of D with sres.
../singular_texi/examples.tex(,2337)   // This takes about 17 sec on a Mac PB 520c and 2 sec an a HP 735
../singular_texi/examples.tex(,2338)   int time = timer;
../singular_texi/examples.tex(,2339)   module sD = std(D);
../singular_texi/examples.tex(,2340)   list Dres = sres(sD,0);                // the full resolution
../singular_texi/examples.tex(,2341)   timer-time;                            // time used for std + sres
../singular_texi/examples.tex(,2342) @expansion{} 0
../singular_texi/examples.tex(,2343)   intmat B = betti(Dres);
../singular_texi/examples.tex(,2344)   print(B,"betti");
../singular_texi/examples.tex(,2345) @expansion{}            0     1     2     3     4     5     6
../singular_texi/examples.tex(,2346) @expansion{} ------------------------------------------------
../singular_texi/examples.tex(,2347) @expansion{}     0:    10     -     -     -     -     -     -
../singular_texi/examples.tex(,2348) @expansion{}     1:     -    10     -     -     -     -     -
../singular_texi/examples.tex(,2349) @expansion{}     2:     -    84   144    60     -     -     -
../singular_texi/examples.tex(,2350) @expansion{}     3:     -     -    35    80    60    16     1
../singular_texi/examples.tex(,2351) @expansion{} ------------------------------------------------
../singular_texi/examples.tex(,2352) @expansion{} total:    10    94   179   140    60    16     1
../singular_texi/examples.tex(,2353)   N-ncols(B)+1;                          // the desired depth
../singular_texi/examples.tex(,2354) @expansion{} 4
../singular_texi/examples.tex(,2355) @c end example Depth examples.doc:1632
../singular_texi/examples.tex(,2356) @end smallexample
../singular_texi/examples.tex(,2357) @c  killall();
../singular_texi/examples.tex(,2359) 
../singular_texi/examples.tex(,2360) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2362) @node Formatting output, Cyclic roots, Depth, Examples
../singular_texi/examples.tex(,2367) @section Formatting output
../singular_texi/examples.tex(,2368) @cindex Formatting output
../singular_texi/examples.tex(,2369) 
../singular_texi/examples.tex(,2370) We show how to insert the result of a computation inside a text
../singular_texi/examples.tex(,2371) by using strings.
../singular_texi/examples.tex(,2372) First we compute the powers of 2 and comment the result with some text.
../singular_texi/examples.tex(,2373) Then we do the same and give the output a nice format by computing and
../singular_texi/examples.tex(,2374) adding appropriate space.
../singular_texi/examples.tex(,2375) 
../singular_texi/examples.tex(,2376) @smallexample
../singular_texi/examples.tex(,2377) @c computed example Formatting_output examples.doc:1682 
../singular_texi/examples.tex(,2378)   // The powers of 2:
../singular_texi/examples.tex(,2379)   int  n;
../singular_texi/examples.tex(,2380)   for (n = 2; n <= 128; n = n * 2)
../singular_texi/examples.tex(,2381)   @{"n = " + string (n);@}
../singular_texi/examples.tex(,2382) @expansion{} n = 2
../singular_texi/examples.tex(,2383) @expansion{} n = 4
../singular_texi/examples.tex(,2384) @expansion{} n = 8
../singular_texi/examples.tex(,2385) @expansion{} n = 16
../singular_texi/examples.tex(,2386) @expansion{} n = 32
../singular_texi/examples.tex(,2387) @expansion{} n = 64
../singular_texi/examples.tex(,2388) @expansion{} n = 128
../singular_texi/examples.tex(,2389)   // The powers of 2 in a nice format
../singular_texi/examples.tex(,2390)   int j;
../singular_texi/examples.tex(,2391)   string space = "";
../singular_texi/examples.tex(,2392)   for (n = 2; n <= 128; n = n * 2)
../singular_texi/examples.tex(,2393)   @{
../singular_texi/examples.tex(,2394)     space = "";
../singular_texi/examples.tex(,2395)     for (j = 1; j <= 5 - size (string (n)); j = j+1)
../singular_texi/examples.tex(,2396)     @{ space = space + " "; @}
../singular_texi/examples.tex(,2397)     "n =" + space + string (n);
../singular_texi/examples.tex(,2398)   @}
../singular_texi/examples.tex(,2399) @expansion{} n =    2
../singular_texi/examples.tex(,2400) @expansion{} n =    4
../singular_texi/examples.tex(,2401) @expansion{} n =    8
../singular_texi/examples.tex(,2402) @expansion{} n =   16
../singular_texi/examples.tex(,2403) @expansion{} n =   32
../singular_texi/examples.tex(,2404) @expansion{} n =   64
../singular_texi/examples.tex(,2405) @expansion{} n =  128
../singular_texi/examples.tex(,2406) @c end example Formatting_output examples.doc:1682
../singular_texi/examples.tex(,2407) @end smallexample
../singular_texi/examples.tex(,2408) 
../singular_texi/examples.tex(,2409) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2411) @node Cyclic roots, G_a -Invariants, Formatting output, Examples
../singular_texi/examples.tex(,2412) @section Cyclic roots
../singular_texi/examples.tex(,2413) @cindex Cyclic roots
../singular_texi/examples.tex(,2414) 
../singular_texi/examples.tex(,2415) We write a procedure returning a string that enables us to create
../singular_texi/examples.tex(,2416) automatically the ideal of cyclic roots over the basering with n
../singular_texi/examples.tex(,2417) variables. The procedure assumes that the variables consist of a single
../singular_texi/examples.tex(,2418) letter each (hence no indexed variables are allowed; the procedure
../singular_texi/examples.tex(,2419) @code{cyclic} in @code{poly.lib} does not have this restriction). Then
../singular_texi/examples.tex(,2420) we compute a standard basis of this ideal and some numerical
../singular_texi/examples.tex(,2421) information.  (This ideal is used as a classical benchmark for standard
../singular_texi/examples.tex(,2422) basis computations).
../singular_texi/examples.tex(,2423) 
../singular_texi/examples.tex(,2424) @smallexample
../singular_texi/examples.tex(,2425) // We call the procedure 'cyclic':
../singular_texi/examples.tex(,2426) proc cyclic (int n)
../singular_texi/examples.tex(,2427) @{
../singular_texi/examples.tex(,2428)    string vs = varstr(basering)+varstr(basering);
../singular_texi/examples.tex(,2429)    int c=find(vs,",");
../singular_texi/examples.tex(,2430)    while ( c!=0 )
../singular_texi/examples.tex(,2431)    @{
../singular_texi/examples.tex(,2432)       vs=vs[1,c-1]+vs[c+1,size(vs)];
../singular_texi/examples.tex(,2433)       c=find(vs,",");
../singular_texi/examples.tex(,2434)    @}
../singular_texi/examples.tex(,2435)    string t,s;
../singular_texi/examples.tex(,2436)    int i,j;
../singular_texi/examples.tex(,2437)    for ( j=1; j<=n-1; j=j+1 )
../singular_texi/examples.tex(,2438)    @{
../singular_texi/examples.tex(,2439)       t="";
../singular_texi/examples.tex(,2440)       for ( i=1; i <=n; i=i+1 )
../singular_texi/examples.tex(,2441)       @{
../singular_texi/examples.tex(,2442)          t = t + vs[i,j] + "+";
../singular_texi/examples.tex(,2443)       @}
../singular_texi/examples.tex(,2444)       t = t[1,size(t)-1] + ","+newline;
../singular_texi/examples.tex(,2445)       s=s+t;
../singular_texi/examples.tex(,2446)    @}
../singular_texi/examples.tex(,2447)    s=s+vs[1,n]+"-1";
../singular_texi/examples.tex(,2448)    return (s);
../singular_texi/examples.tex(,2449) @}
../singular_texi/examples.tex(,2450) 
../singular_texi/examples.tex(,2451) ring r=0,(a,b,c,d,e),lp;         // basering, char 0, lex ordering
../singular_texi/examples.tex(,2452) string sc=cyclic(nvars(basering));
../singular_texi/examples.tex(,2453) sc;                              // the string of the ideal
../singular_texi/examples.tex(,2454) @expansion{} a+b+c+d+e,
../singular_texi/examples.tex(,2455) @expansion{} ab+bc+cd+de+ea,
../singular_texi/examples.tex(,2456) @expansion{} abc+bcd+cde+dea+eab,
../singular_texi/examples.tex(,2457) @expansion{} abcd+bcde+cdea+deab+eabc,
../singular_texi/examples.tex(,2458) @expansion{} abcde-1
../singular_texi/examples.tex(,2459) execute("ideal i="+sc+";");      // this defines the ideal of cyclic roots
../singular_texi/examples.tex(,2460) i;
../singular_texi/examples.tex(,2461) @expansion{} i[1]=a+b+c+d+e
../singular_texi/examples.tex(,2462) @expansion{} i[2]=ab+bc+cd+ae+de
../singular_texi/examples.tex(,2463) @expansion{} i[3]=abc+bcd+abe+ade+cde
../singular_texi/examples.tex(,2464) @expansion{} i[4]=abcd+abce+abde+acde+bcde
../singular_texi/examples.tex(,2465) @expansion{} i[5]=abcde-1
../singular_texi/examples.tex(,2466) timer=1;
../singular_texi/examples.tex(,2467) ideal j=std(i);
../singular_texi/examples.tex(,2468) @expansion{} //used time: 7.5 sec
../singular_texi/examples.tex(,2469) size(j);                         // number of elements in the std basis
../singular_texi/examples.tex(,2470) @expansion{} 11
../singular_texi/examples.tex(,2471) degree(j);
../singular_texi/examples.tex(,2472) @expansion{} // codimension = 5
../singular_texi/examples.tex(,2473) @expansion{} // dimension   = 0
../singular_texi/examples.tex(,2474) @expansion{} // degree      = 70
../singular_texi/examples.tex(,2475) @end smallexample
../singular_texi/examples.tex(,2477) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2479) @node G_a -Invariants, Invariants of a finite group, Cyclic roots, Examples
../singular_texi/examples.tex(,2480) @section G_a -Invariants
../singular_texi/examples.tex(,2481) @cindex G_a -Invariants
../singular_texi/examples.tex(,2482) 
../singular_texi/examples.tex(,2483) We work in characteristic 0 and use the Lie algebra generated by one
../singular_texi/examples.tex(,2484) vector field of the form
../singular_texi/examples.tex(,2485) @tex
../singular_texi/examples.tex(,2486) $\sum x_i \partial /\partial x_{i+1}$.
../singular_texi/examples.tex(,2487) @end tex
../singular_texi/examples.tex(,2491) @smallexample
../singular_texi/examples.tex(,2492) @c computed example G_a_-Invariants examples.doc:1783 
../singular_texi/examples.tex(,2493)   LIB "ainvar.lib";
../singular_texi/examples.tex(,2494)   int n=5;
../singular_texi/examples.tex(,2495)   int i;
../singular_texi/examples.tex(,2496)   ring s=32003,(x(1..n)),wp(1,2,3,4,5);
../singular_texi/examples.tex(,2497)   // definition of the vector field m=sum m[i,1]*d/dx(i)
../singular_texi/examples.tex(,2498)   matrix m[n][1];
../singular_texi/examples.tex(,2499)   for (i=1;i<=n-1;i=i+1)
../singular_texi/examples.tex(,2500)   @{
../singular_texi/examples.tex(,2501)      m[i+1,1]=x(i);
../singular_texi/examples.tex(,2502)   @}
../singular_texi/examples.tex(,2503)   // computation of the ring of invariants
../singular_texi/examples.tex(,2504)   ideal in=invariantRing(m,x(2),x(1),0);
../singular_texi/examples.tex(,2505)   in;   //invariant ring is generated by 5 invariants
../singular_texi/examples.tex(,2506) @expansion{} in[1]=x(1)
../singular_texi/examples.tex(,2507) @expansion{} in[2]=x(2)^2-2*x(1)*x(3)
../singular_texi/examples.tex(,2508) @expansion{} in[3]=x(3)^2-2*x(2)*x(4)+2*x(1)*x(5)
../singular_texi/examples.tex(,2509) @expansion{} in[4]=x(2)^3-3*x(1)*x(2)*x(3)+3*x(1)^2*x(4)
../singular_texi/examples.tex(,2510) @expansion{} in[5]=x(3)^3-3*x(2)*x(3)*x(4)-15997*x(1)*x(4)^2+3*x(2)^2*x(5)-6*x(1)*x(3)\
../singular_texi/examples.tex(,2511)    *x(5)
../singular_texi/examples.tex(,2512)   ring q=32003,(x,y,z,u,v,w),dp;
../singular_texi/examples.tex(,2513)   matrix m[6][1];
../singular_texi/examples.tex(,2514)   m[2,1]=x;
../singular_texi/examples.tex(,2515)   m[3,1]=y;
../singular_texi/examples.tex(,2516)   m[5,1]=u;
../singular_texi/examples.tex(,2517)   m[6,1]=v;
../singular_texi/examples.tex(,2518)   // the vector field is: xd/dy+yd/dz+ud/dv+vd/dw
../singular_texi/examples.tex(,2519)   ideal in=invariantRing(m,y,x,0);
../singular_texi/examples.tex(,2520)   in; //invariant ring is generated by 6 invariants
../singular_texi/examples.tex(,2521) @expansion{} in[1]=x
../singular_texi/examples.tex(,2522) @expansion{} in[2]=u
../singular_texi/examples.tex(,2523) @expansion{} in[3]=v2-2uw
../singular_texi/examples.tex(,2524) @expansion{} in[4]=zu-yv+xw
../singular_texi/examples.tex(,2525) @expansion{} in[5]=yu-xv
../singular_texi/examples.tex(,2526) @expansion{} in[6]=y2-2xz
../singular_texi/examples.tex(,2527) @c end example G_a_-Invariants examples.doc:1783
../singular_texi/examples.tex(,2528) @end smallexample
../singular_texi/examples.tex(,2529) @c kill n,i,s,q;
../singular_texi/examples.tex(,2531) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2533) @node Invariants of a finite group, Factorization, G_a -Invariants, Examples
../singular_texi/examples.tex(,2534) @section Invariants of a finite group
../singular_texi/examples.tex(,2535) @cindex Invariants of a finite group
../singular_texi/examples.tex(,2536) 
../singular_texi/examples.tex(,2537) Two algorithms to compute the invariant ring are implemented in
../singular_texi/examples.tex(,2538) @sc{Singular}, @code{invariant_ring} and @code{invariant_ring_random},
../singular_texi/examples.tex(,2539) both by Agnes E. Heydtmann (@code{agnes@@math.uni-sb.de}).
../singular_texi/examples.tex(,2540) 
../singular_texi/examples.tex(,2541) Bases of homogeneous invariants are generated successively and those are
../singular_texi/examples.tex(,2542) chosen as primary invariants that lower the dimension of the ideal
../singular_texi/examples.tex(,2543) generated by the previously found invariants (see paper "Generating a
../singular_texi/examples.tex(,2544) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/examples.tex(,2545) Decker, Heydtmann, Schreyer (1997) to appear in JSC).  In the
../singular_texi/examples.tex(,2546) non-modular case secondary invariants are calculated by finding a basis
../singular_texi/examples.tex(,2547) (in terms of monomials) of the basering modulo the primary invariants,
../singular_texi/examples.tex(,2548) mapping to invariants with the Reynolds operator and using those or
../singular_texi/examples.tex(,2549) their power products such that they are linearly independent modulo the
../singular_texi/examples.tex(,2550) primary invariants (see paper "Some Algorithms in Invariant Theory of
../singular_texi/examples.tex(,2551) Finite Groups" by Kemper and Steel (1997)).  In the modular case they
../singular_texi/examples.tex(,2552) are generated according to "Generating Invariant Rings of Finite Groups
../singular_texi/examples.tex(,2553) over Arbitrary Fields" by Kemper (1996, to appear in JSC).
../singular_texi/examples.tex(,2554) 
../singular_texi/examples.tex(,2555) We calculate now an example from Sturmfels: "Algorithms in Invariant
../singular_texi/examples.tex(,2556) Theory 2.3.7":
../singular_texi/examples.tex(,2557) 
../singular_texi/examples.tex(,2558) @smallexample
../singular_texi/examples.tex(,2559) @c computed example Invariants_of_a_finite_group examples.doc:1838 
../singular_texi/examples.tex(,2560)   LIB "finvar.lib";
../singular_texi/examples.tex(,2561)   ring R=0,(x,y,z),dp;
../singular_texi/examples.tex(,2562)   matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/examples.tex(,2563)   // the group G is generated by A in Gl(3,Q);
../singular_texi/examples.tex(,2564)   print(A);
../singular_texi/examples.tex(,2565) @expansion{} 0, 1,0,
../singular_texi/examples.tex(,2566) @expansion{} -1,0,0,
../singular_texi/examples.tex(,2567) @expansion{} 0, 0,-1
../singular_texi/examples.tex(,2568)   print(A*A*A*A); // the fourth power of A is 1
../singular_texi/examples.tex(,2569) @expansion{} 1,0,0,
../singular_texi/examples.tex(,2570) @expansion{} 0,1,0,
../singular_texi/examples.tex(,2571) @expansion{} 0,0,1 
../singular_texi/examples.tex(,2572)   // Use the first method to compute the invariants of G:
../singular_texi/examples.tex(,2573)   matrix B(1..3);
../singular_texi/examples.tex(,2574)   B(1..3)=invariant_ring(A);
../singular_texi/examples.tex(,2575)   // SINGULAR returns 2 matrices, the first containing
../singular_texi/examples.tex(,2576)   // primary invariants and the second secondary
../singular_texi/examples.tex(,2577)   // invariants, i.e., module generators over a Noetherian
../singular_texi/examples.tex(,2578)   // normalization
../singular_texi/examples.tex(,2579)   // the third result are the irreducible secondary invariants
../singular_texi/examples.tex(,2580)   // if the Molien series was available
../singular_texi/examples.tex(,2581)   print(B(1));
../singular_texi/examples.tex(,2582) @expansion{} z2,x2+y2,x2y2
../singular_texi/examples.tex(,2583)   print(B(2));
../singular_texi/examples.tex(,2584) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/examples.tex(,2585)   print(B(3));
../singular_texi/examples.tex(,2586) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/examples.tex(,2587)   // Use the second method,
../singular_texi/examples.tex(,2588)   // with random numbers between -1 and 1:
../singular_texi/examples.tex(,2589)   B(1..3)=invariant_ring_random(A,1);
../singular_texi/examples.tex(,2590)   print(B(1..3));
../singular_texi/examples.tex(,2591) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/examples.tex(,2592) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/examples.tex(,2593) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/examples.tex(,2594) @c end example Invariants_of_a_finite_group examples.doc:1838
../singular_texi/examples.tex(,2595) @end smallexample
../singular_texi/examples.tex(,2597) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2599) @node Factorization, Puiseux pairs, Invariants of a finite group, Examples
../singular_texi/examples.tex(,2604) @section Factorization
../singular_texi/examples.tex(,2605) @cindex Factorization
../singular_texi/examples.tex(,2606) 
../singular_texi/examples.tex(,2607) The factorization of polynomials is implemented in the C++ libraries
../singular_texi/examples.tex(,2608) Factory (written mainly by Ruediger Stobbe) and libfac (written by
../singular_texi/examples.tex(,2609) Michael Messollen) which are part of the @sc{Singular} system.
../singular_texi/examples.tex(,2610) 
../singular_texi/examples.tex(,2611) @smallexample
../singular_texi/examples.tex(,2612) @c computed example Factorization examples.doc:1879 
../singular_texi/examples.tex(,2613)   ring r = 0,(x,y),dp;
../singular_texi/examples.tex(,2614)   poly f = 9x16-18x13y2-9x12y3+9x10y4-18x11y2+36x8y4
../singular_texi/examples.tex(,2615)          +18x7y5-18x5y6+9x6y4-18x3y6-9x2y7+9y8;
../singular_texi/examples.tex(,2616)   // = 9 * (x5-1y2)^2 * (x6-2x3y2-1x2y3+y4)
../singular_texi/examples.tex(,2617)   factorize(f);
../singular_texi/examples.tex(,2618) @expansion{} [1]:
../singular_texi/examples.tex(,2619) @expansion{}    _[1]=9
../singular_texi/examples.tex(,2620) @expansion{}    _[2]=x6-2x3y2-x2y3+y4
../singular_texi/examples.tex(,2621) @expansion{}    _[3]=-x5+y2
../singular_texi/examples.tex(,2622) @expansion{} [2]:
../singular_texi/examples.tex(,2623) @expansion{}    1,1,2
../singular_texi/examples.tex(,2624)   // returns factors and multiplicities,
../singular_texi/examples.tex(,2625)   // first factor is a constant.
../singular_texi/examples.tex(,2626)   poly g = (y4+x8)*(x2+y2);
../singular_texi/examples.tex(,2627)   factorize(g);
../singular_texi/examples.tex(,2628) @expansion{} [1]:
../singular_texi/examples.tex(,2629) @expansion{}    _[1]=1
../singular_texi/examples.tex(,2630) @expansion{}    _[2]=x8+y4
../singular_texi/examples.tex(,2631) @expansion{}    _[3]=x2+y2
../singular_texi/examples.tex(,2632) @expansion{} [2]:
../singular_texi/examples.tex(,2633) @expansion{}    1,1,1
../singular_texi/examples.tex(,2634)   // The same in characteristic 2:
../singular_texi/examples.tex(,2635)   ring s =2,(x,y),dp;
../singular_texi/examples.tex(,2636)   poly g = (y4+x8)*(x2+y2);
../singular_texi/examples.tex(,2637)   factorize(g);
../singular_texi/examples.tex(,2638) @expansion{} [1]:
../singular_texi/examples.tex(,2639) @expansion{}    _[1]=1
../singular_texi/examples.tex(,2640) @expansion{}    _[2]=x+y
../singular_texi/examples.tex(,2641) @expansion{}    _[3]=x2+y
../singular_texi/examples.tex(,2642) @expansion{} [2]:
../singular_texi/examples.tex(,2643) @expansion{}    1,2,4
../singular_texi/examples.tex(,2644) @c end example Factorization examples.doc:1879
../singular_texi/examples.tex(,2645) @end smallexample
../singular_texi/examples.tex(,2646) 
../singular_texi/examples.tex(,2647) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2649) @node Puiseux pairs, Primary decomposition, Factorization, Examples
../singular_texi/examples.tex(,2650) @section Puiseux pairs
../singular_texi/examples.tex(,2651) @cindex Puiseux pairs
../singular_texi/examples.tex(,2652) 
../singular_texi/examples.tex(,2653) The Puiseux pairs of an irreducible and reduced curve singularity are
../singular_texi/examples.tex(,2654) its most important invariants.  They can be computed from its
../singular_texi/examples.tex(,2655) Hamburger-Noether expansion.  The library @code{hnoether.lib} written by
../singular_texi/examples.tex(,2656) Martin Lamm uses the algorithm of Antonio Campillo "Algebroid curves in
../singular_texi/examples.tex(,2657) positive characteristic" SLN 813, 1980.  This algorithm has the
../singular_texi/examples.tex(,2658) advantage that it needs least possible field extensions and, moreover,
../singular_texi/examples.tex(,2659) works in any characteristic. This fact can be used to compute the
../singular_texi/examples.tex(,2660) invariants over a field of finite characteristic, say 32003, which will
../singular_texi/examples.tex(,2661) then most probably be the same in characteristic 0.
../singular_texi/examples.tex(,2662) 
../singular_texi/examples.tex(,2663) We compute the Hamburger-Noether expansion of a plane curve
../singular_texi/examples.tex(,2664) singularity given by a polynomial 
../singular_texi/examples.tex(,2668) @tex
../singular_texi/examples.tex(,2669) $f$
../singular_texi/examples.tex(,2670) @end tex
../singular_texi/examples.tex(,2671)  in two variables. This is a
../singular_texi/examples.tex(,2672) matrix which allows to compute the parametrization (up to a given order)
../singular_texi/examples.tex(,2673) and all numerical invariants like the
../singular_texi/examples.tex(,2674) @itemize @bullet
../singular_texi/examples.tex(,2675) @item
../singular_texi/examples.tex(,2676)     characteristic exponents,
../singular_texi/examples.tex(,2677) @item
../singular_texi/examples.tex(,2678)     Puiseux pairs (of a complex model),
../singular_texi/examples.tex(,2679) @item
../singular_texi/examples.tex(,2680)     degree of the conductor,
../singular_texi/examples.tex(,2681) @item
../singular_texi/examples.tex(,2682)     delta invariant,
../singular_texi/examples.tex(,2683) @item
../singular_texi/examples.tex(,2684)     generators of the semigroup.
../singular_texi/examples.tex(,2685) @end itemize
../singular_texi/examples.tex(,2686) Besides this, the library contains procedures to compute the Newton
../singular_texi/examples.tex(,2687) polygon of 
../singular_texi/examples.tex(,2691) @tex
../singular_texi/examples.tex(,2692) $f$
../singular_texi/examples.tex(,2693) @end tex
../singular_texi/examples.tex(,2694) , the squarefree part of 
../singular_texi/examples.tex(,2698) @tex
../singular_texi/examples.tex(,2699) $f$
../singular_texi/examples.tex(,2700) @end tex
../singular_texi/examples.tex(,2701)  and a procedure to
../singular_texi/examples.tex(,2702) convert one set of invariants to another.
../singular_texi/examples.tex(,2703) 
../singular_texi/examples.tex(,2704) 
../singular_texi/examples.tex(,2705) @smallexample
../singular_texi/examples.tex(,2706) @c computed example Puiseux_pairs examples.doc:1934 
../singular_texi/examples.tex(,2707)   LIB "hnoether.lib";
../singular_texi/examples.tex(,2708)   // ======== The irreducible case ========
../singular_texi/examples.tex(,2709)   ring s = 0,(x,y),ds;
../singular_texi/examples.tex(,2710)   poly f = y4-2x3y2-4x5y+x6-x7;
../singular_texi/examples.tex(,2711)   list hn = develop(f);
../singular_texi/examples.tex(,2712)   show(hn[1]);     // Hamburger-Noether matrix
../singular_texi/examples.tex(,2713) @expansion{} // matrix, 3x3
../singular_texi/examples.tex(,2714) @expansion{} 0,x,  0,  
../singular_texi/examples.tex(,2715) @expansion{} 0,1,  x,  
../singular_texi/examples.tex(,2716) @expansion{} 0,1/4,-1/2
../singular_texi/examples.tex(,2717)   displayHNE(hn);  // Hamburger-Noether development
../singular_texi/examples.tex(,2718) @expansion{} HNE[1]=-y+z(0)*z(1)
../singular_texi/examples.tex(,2719) @expansion{} HNE[2]=-x+z(1)^2+z(1)^2*z(2)
../singular_texi/examples.tex(,2720) @expansion{} HNE[3]=1/4*z(2)^2-1/2*z(2)^3
../singular_texi/examples.tex(,2721)   setring s;
../singular_texi/examples.tex(,2722)   displayInvariants(hn);
../singular_texi/examples.tex(,2723) @expansion{}  characteristic exponents  : 4,6,7
../singular_texi/examples.tex(,2724) @expansion{}  generators of semigroup   : 4,6,13
../singular_texi/examples.tex(,2725) @expansion{}  Puiseux pairs             : (3,2)(7,2)
../singular_texi/examples.tex(,2726) @expansion{}  degree of the conductor   : 16
../singular_texi/examples.tex(,2727) @expansion{}  delta invariant           : 8
../singular_texi/examples.tex(,2728) @expansion{}  sequence of multiplicities: 4,2,2,1,1
../singular_texi/examples.tex(,2729)   // invariants(hn);  returns the invariants as list
../singular_texi/examples.tex(,2730)   // partial parametrization of f: param takes the first variable
../singular_texi/examples.tex(,2731)   // as infinite except the ring has more than 2 variables. Then
../singular_texi/examples.tex(,2732)   // the 3rd variable is chosen.
../singular_texi/examples.tex(,2733)   param(hn);
../singular_texi/examples.tex(,2734) @expansion{} // ** Warning: result is exact up to order 5 in x and 7 in y !
../singular_texi/examples.tex(,2735) @expansion{} _[1]=1/16x4-3/16x5+1/4x7
../singular_texi/examples.tex(,2736) @expansion{} _[2]=1/64x6-5/64x7+3/32x8+1/16x9-1/8x10
../singular_texi/examples.tex(,2737)   ring extring=0,(x,y,t),ds;
../singular_texi/examples.tex(,2738)   poly f=x3+2xy2+y2;
../singular_texi/examples.tex(,2739)   list hn=develop(f,-1);
../singular_texi/examples.tex(,2740)   param(hn);       // partial parametrization of f
../singular_texi/examples.tex(,2741) @expansion{} // ** Warning: result is exact up to order 2 in x and 3 in y !
../singular_texi/examples.tex(,2742) @expansion{} _[1]=-t2
../singular_texi/examples.tex(,2743) @expansion{} _[2]=-t3
../singular_texi/examples.tex(,2744)   list hn1=develop(f,6);
../singular_texi/examples.tex(,2745)   param(hn1);     // a better parametrization
../singular_texi/examples.tex(,2746) @expansion{} // ** Warning: result is exact up to order 6 in x and 7 in y !
../singular_texi/examples.tex(,2747) @expansion{} _[1]=-t2+2t4-4t6
../singular_texi/examples.tex(,2748) @expansion{} _[2]=-t3+2t5-4t7
../singular_texi/examples.tex(,2749)   // instead of recomputing you may extend the development:
../singular_texi/examples.tex(,2750)   list hn2=extdevelop(hn,12);
../singular_texi/examples.tex(,2751)   param(hn2);     // a still better parametrization
../singular_texi/examples.tex(,2752) @expansion{} // ** Warning: result is exact up to order 12 in x and 13 in y !
../singular_texi/examples.tex(,2753) @expansion{} _[1]=-t2+2t4-4t6+8t8-16t10+32t12
../singular_texi/examples.tex(,2754) @expansion{} _[2]=-t3+2t5-4t7+8t9-16t11+32t13
../singular_texi/examples.tex(,2755)   //
../singular_texi/examples.tex(,2756)   // ======== The reducible case ========
../singular_texi/examples.tex(,2757)   ring r = 0,(x,y),dp;
../singular_texi/examples.tex(,2758)   poly f=x11-2y2x8-y3x7-y2x6+y4x5+2y4x3+y5x2-y6;
../singular_texi/examples.tex(,2759)   // = (x5-1y2) * (x6-2x3y2-1x2y3+y4)
../singular_texi/examples.tex(,2760)   list hn=reddevelop(f);
../singular_texi/examples.tex(,2761)   show(hn[1][1]);     // Hamburger-Noether matrix of 1st branch
../singular_texi/examples.tex(,2762) @expansion{} // matrix, 3x3
../singular_texi/examples.tex(,2763) @expansion{} 0,x,0,
../singular_texi/examples.tex(,2764) @expansion{} 0,1,x,
../singular_texi/examples.tex(,2765) @expansion{} 0,1,-1
../singular_texi/examples.tex(,2766)   displayInvariants(hn);
../singular_texi/examples.tex(,2767) @expansion{}  --- invariants of branch number 1 : ---
../singular_texi/examples.tex(,2768) @expansion{}  characteristic exponents  : 4,6,7
../singular_texi/examples.tex(,2769) @expansion{}  generators of semigroup   : 4,6,13
../singular_texi/examples.tex(,2770) @expansion{}  Puiseux pairs             : (3,2)(7,2)
../singular_texi/examples.tex(,2771) @expansion{}  degree of the conductor   : 16
../singular_texi/examples.tex(,2772) @expansion{}  delta invariant           : 8
../singular_texi/examples.tex(,2773) @expansion{}  sequence of multiplicities: 4,2,2,1,1
../singular_texi/examples.tex(,2774) @expansion{} 
../singular_texi/examples.tex(,2775) @expansion{}  --- invariants of branch number 2 : ---
../singular_texi/examples.tex(,2776) @expansion{}  characteristic exponents  : 2,5
../singular_texi/examples.tex(,2777) @expansion{}  generators of semigroup   : 2,5
../singular_texi/examples.tex(,2778) @expansion{}  Puiseux pairs             : (5,2)
../singular_texi/examples.tex(,2779) @expansion{}  degree of the conductor   : 4
../singular_texi/examples.tex(,2780) @expansion{}  delta invariant           : 2
../singular_texi/examples.tex(,2781) @expansion{}  sequence of multiplicities: 2,2,1,1
../singular_texi/examples.tex(,2782) @expansion{} 
../singular_texi/examples.tex(,2783) @expansion{}  -------------- contact numbers : -------------- 
../singular_texi/examples.tex(,2784) @expansion{} 
../singular_texi/examples.tex(,2785) @expansion{} branch |    2    
../singular_texi/examples.tex(,2786) @expansion{} -------+-----
../singular_texi/examples.tex(,2787) @expansion{}     1  |    2
../singular_texi/examples.tex(,2788) @expansion{} 
../singular_texi/examples.tex(,2789) @expansion{}  -------------- intersection multiplicities : -------------- 
../singular_texi/examples.tex(,2790) @expansion{} 
../singular_texi/examples.tex(,2791) @expansion{} branch |    2    
../singular_texi/examples.tex(,2792) @expansion{} -------+-----
../singular_texi/examples.tex(,2793) @expansion{}     1  |   12
../singular_texi/examples.tex(,2794) @expansion{} 
../singular_texi/examples.tex(,2795) @expansion{}  -------------- delta invariant of the curve :  22
../singular_texi/examples.tex(,2796)   param(hn[2]);      // parametrization of 2nd branch
../singular_texi/examples.tex(,2797) @expansion{} _[1]=x2
../singular_texi/examples.tex(,2798) @expansion{} _[2]=x5
../singular_texi/examples.tex(,2799) @c end example Puiseux_pairs examples.doc:1934
../singular_texi/examples.tex(,2800) @end smallexample
../singular_texi/examples.tex(,2802) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2804) @node Primary decomposition, Normalization, Puiseux pairs, Examples
../singular_texi/examples.tex(,2805) @section Primary decomposition
../singular_texi/examples.tex(,2806) @cindex Primary decomposition
../singular_texi/examples.tex(,2807) 
../singular_texi/examples.tex(,2808) There are two algorithms implemented in @sc{Singular} which provide
../singular_texi/examples.tex(,2809) primary decomposition: @code{primdecGTZ}, based on
../singular_texi/examples.tex(,2810) Gianni/Trager/Zacharias (written by Gerhard Pfister) and
../singular_texi/examples.tex(,2811) @code{primdecSY}, based on Shimoyama/Yokoyama (written by Wolfram Decker
../singular_texi/examples.tex(,2812) and Hans Schoenemann).
../singular_texi/examples.tex(,2813) 
../singular_texi/examples.tex(,2814) The result of @code{primdecGTZ} and @code{primdecSY} is returned as
../singular_texi/examples.tex(,2815) a list of pairs of ideals,
../singular_texi/examples.tex(,2816) where the second ideal form the prime ideal and the first
../singular_texi/examples.tex(,2817) ideal form the corresponding primary ideal.
../singular_texi/examples.tex(,2818) 
../singular_texi/examples.tex(,2819) @smallexample
../singular_texi/examples.tex(,2820) @c computed example Primary_decomposition examples.doc:1988 
../singular_texi/examples.tex(,2821)   LIB "primdec.lib";
../singular_texi/examples.tex(,2822)   ring r = 0,(a,b,c,d,e,f),dp;
../singular_texi/examples.tex(,2823)   ideal i= f3, ef2, e2f, bcf-adf, de+cf, be+af, e3;
../singular_texi/examples.tex(,2824)   primdecGTZ(i);
../singular_texi/examples.tex(,2825) @expansion{} [1]:
../singular_texi/examples.tex(,2826) @expansion{}    [1]:
../singular_texi/examples.tex(,2827) @expansion{}       _[1]=f
../singular_texi/examples.tex(,2828) @expansion{}       _[2]=e
../singular_texi/examples.tex(,2829) @expansion{}    [2]:
../singular_texi/examples.tex(,2830) @expansion{}       _[1]=f
../singular_texi/examples.tex(,2831) @expansion{}       _[2]=e
../singular_texi/examples.tex(,2832) @expansion{} [2]:
../singular_texi/examples.tex(,2833) @expansion{}    [1]:
../singular_texi/examples.tex(,2834) @expansion{}       _[1]=f3
../singular_texi/examples.tex(,2835) @expansion{}       _[2]=ef2
../singular_texi/examples.tex(,2836) @expansion{}       _[3]=e2f
../singular_texi/examples.tex(,2837) @expansion{}       _[4]=e3
../singular_texi/examples.tex(,2838) @expansion{}       _[5]=de+cf
../singular_texi/examples.tex(,2839) @expansion{}       _[6]=be+af
../singular_texi/examples.tex(,2840) @expansion{}       _[7]=-bc+ad
../singular_texi/examples.tex(,2841) @expansion{}    [2]:
../singular_texi/examples.tex(,2842) @expansion{}       _[1]=f
../singular_texi/examples.tex(,2843) @expansion{}       _[2]=e
../singular_texi/examples.tex(,2844) @expansion{}       _[3]=-bc+ad
../singular_texi/examples.tex(,2845)   // We consider now the ideal J of the base space of the
../singular_texi/examples.tex(,2846)   // miniversal deformation of the cone over the rational
../singular_texi/examples.tex(,2847)   // normal curve computed in section *8* and compute
../singular_texi/examples.tex(,2848)   // its primary decomposition.
../singular_texi/examples.tex(,2849)   ring R = 0,(A,B,C,D),dp;
../singular_texi/examples.tex(,2850)   ideal J = CD, BD+D2, AD;
../singular_texi/examples.tex(,2851)   primdecGTZ(J);
../singular_texi/examples.tex(,2852) @expansion{} [1]:
../singular_texi/examples.tex(,2853) @expansion{}    [1]:
../singular_texi/examples.tex(,2854) @expansion{}       _[1]=D
../singular_texi/examples.tex(,2855) @expansion{}    [2]:
../singular_texi/examples.tex(,2856) @expansion{}       _[1]=D
../singular_texi/examples.tex(,2857) @expansion{} [2]:
../singular_texi/examples.tex(,2858) @expansion{}    [1]:
../singular_texi/examples.tex(,2859) @expansion{}       _[1]=C
../singular_texi/examples.tex(,2860) @expansion{}       _[2]=B+D
../singular_texi/examples.tex(,2861) @expansion{}       _[3]=A
../singular_texi/examples.tex(,2862) @expansion{}    [2]:
../singular_texi/examples.tex(,2863) @expansion{}       _[1]=C
../singular_texi/examples.tex(,2864) @expansion{}       _[2]=B+D
../singular_texi/examples.tex(,2865) @expansion{}       _[3]=A
../singular_texi/examples.tex(,2866)   // We see that there are two components which are both
../singular_texi/examples.tex(,2867)   // prime, even linear subspaces, one 3-dimensional,
../singular_texi/examples.tex(,2868)   // the other 1-dimensional.
../singular_texi/examples.tex(,2869)   // (This is Pinkhams example and was the first known
../singular_texi/examples.tex(,2870)   // surface singularity with two components of
../singular_texi/examples.tex(,2871)   // different dimensions)
../singular_texi/examples.tex(,2872)   //
../singular_texi/examples.tex(,2873)   // Let us now produce an embedded component in the last
../singular_texi/examples.tex(,2874)   // example, compute the minimal associated primes and
../singular_texi/examples.tex(,2875)   // the radical. We use the Characteristic set methods
../singular_texi/examples.tex(,2876)   // from prim_dec.lib.
../singular_texi/examples.tex(,2877)   J = intersect(J,maxideal(3));
../singular_texi/examples.tex(,2878)   // The following shows that the maximal ideal defines an embedded
../singular_texi/examples.tex(,2879)   // (prime) component.
../singular_texi/examples.tex(,2880)   primdecSY(J);
../singular_texi/examples.tex(,2881) @expansion{} [1]:
../singular_texi/examples.tex(,2882) @expansion{}    [1]:
../singular_texi/examples.tex(,2883) @expansion{}       _[1]=D
../singular_texi/examples.tex(,2884) @expansion{}    [2]:
../singular_texi/examples.tex(,2885) @expansion{}       _[1]=D
../singular_texi/examples.tex(,2886) @expansion{} [2]:
../singular_texi/examples.tex(,2887) @expansion{}    [1]:
../singular_texi/examples.tex(,2888) @expansion{}       _[1]=C
../singular_texi/examples.tex(,2889) @expansion{}       _[2]=B+D
../singular_texi/examples.tex(,2890) @expansion{}       _[3]=A
../singular_texi/examples.tex(,2891) @expansion{}    [2]:
../singular_texi/examples.tex(,2892) @expansion{}       _[1]=C
../singular_texi/examples.tex(,2893) @expansion{}       _[2]=B+D
../singular_texi/examples.tex(,2894) @expansion{}       _[3]=A
../singular_texi/examples.tex(,2895) @expansion{} [3]:
../singular_texi/examples.tex(,2896) @expansion{}    [1]:
../singular_texi/examples.tex(,2897) @expansion{}       _[1]=D2
../singular_texi/examples.tex(,2898) @expansion{}       _[2]=C2
../singular_texi/examples.tex(,2899) @expansion{}       _[3]=B2
../singular_texi/examples.tex(,2900) @expansion{}       _[4]=AB
../singular_texi/examples.tex(,2901) @expansion{}       _[5]=A2
../singular_texi/examples.tex(,2902) @expansion{}       _[6]=BCD
../singular_texi/examples.tex(,2903) @expansion{}       _[7]=ACD
../singular_texi/examples.tex(,2904) @expansion{}    [2]:
../singular_texi/examples.tex(,2905) @expansion{}       _[1]=D
../singular_texi/examples.tex(,2906) @expansion{}       _[2]=C
../singular_texi/examples.tex(,2907) @expansion{}       _[3]=B
../singular_texi/examples.tex(,2908) @expansion{}       _[4]=A
../singular_texi/examples.tex(,2909)   minAssChar(J);
../singular_texi/examples.tex(,2910) @expansion{} [1]:
../singular_texi/examples.tex(,2911) @expansion{}    _[1]=C
../singular_texi/examples.tex(,2912) @expansion{}    _[2]=B+D
../singular_texi/examples.tex(,2913) @expansion{}    _[3]=A
../singular_texi/examples.tex(,2914) @expansion{} [2]:
../singular_texi/examples.tex(,2915) @expansion{}    _[1]=D
../singular_texi/examples.tex(,2916)   radical(J);
../singular_texi/examples.tex(,2917) @expansion{} _[1]=CD
../singular_texi/examples.tex(,2918) @expansion{} _[2]=BD+D2
../singular_texi/examples.tex(,2919) @expansion{} _[3]=AD
../singular_texi/examples.tex(,2920) @c end example Primary_decomposition examples.doc:1988
../singular_texi/examples.tex(,2921) @end smallexample
../singular_texi/examples.tex(,2923) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2925) @node Normalization, Branches of an Isolated Space Curve Singularity, Primary decomposition, Examples
../singular_texi/examples.tex(,2926) @section Normalization
../singular_texi/examples.tex(,2927) @cindex Normalization
../singular_texi/examples.tex(,2928) The normalization will be computed for a reduced ring 
../singular_texi/examples.tex(,2932) @tex
../singular_texi/examples.tex(,2933) $R/I$
../singular_texi/examples.tex(,2934) @end tex
../singular_texi/examples.tex(,2935) . The
../singular_texi/examples.tex(,2936) result is a list of rings; ideals are always called @code{norid} in the
../singular_texi/examples.tex(,2937) rings of this list. The normalization of 
../singular_texi/examples.tex(,2941) @tex
../singular_texi/examples.tex(,2942) $R/I$
../singular_texi/examples.tex(,2943) @end tex
../singular_texi/examples.tex(,2944)  is the product of
../singular_texi/examples.tex(,2945) the factor rings of the rings in the list divided out by the ideals
../singular_texi/examples.tex(,2946) @code{norid}.
../singular_texi/examples.tex(,2947) 
../singular_texi/examples.tex(,2948) @smallexample
../singular_texi/examples.tex(,2949) @c computed example Normalization examples.doc:2032 
../singular_texi/examples.tex(,2950)   LIB "normal.lib";
../singular_texi/examples.tex(,2951)   // ----- first example: rational quadruple point -----
../singular_texi/examples.tex(,2952)   ring R=32003,(x,y,z),wp(3,5,15);
../singular_texi/examples.tex(,2953)   ideal I=z*(y3-x5)+x10;
../singular_texi/examples.tex(,2954)   list pr=normal(I);
../singular_texi/examples.tex(,2955) @expansion{} 
../singular_texi/examples.tex(,2956) @expansion{} // 'normal' created a list of 1 ring(s).
../singular_texi/examples.tex(,2957) @expansion{} // nor[1+1] is the delta-invariant in case of choose=wd.
../singular_texi/examples.tex(,2958) @expansion{} // To see the rings, type (if the name of your list is nor):
../singular_texi/examples.tex(,2959) @expansion{}      show( nor);
../singular_texi/examples.tex(,2960) @expansion{} // To access the 1-st ring and map (similar for the others), type:
../singular_texi/examples.tex(,2961) @expansion{}      def R = nor[1]; setring R;  norid; normap;
../singular_texi/examples.tex(,2962) @expansion{} // R/norid is the 1-st ring of the normalization and
../singular_texi/examples.tex(,2963) @expansion{} // normap the map from the original basering to R/norid
../singular_texi/examples.tex(,2964)   def S=pr[1];
../singular_texi/examples.tex(,2965)   setring S;
../singular_texi/examples.tex(,2966)   norid;
../singular_texi/examples.tex(,2967) @expansion{} norid[1]=T(2)*T(3)-T(1)*T(4)
../singular_texi/examples.tex(,2968) @expansion{} norid[2]=T(1)^7-T(1)^2*T(3)+T(2)*T(5)
../singular_texi/examples.tex(,2969) @expansion{} norid[3]=T(1)^2*T(5)-T(2)*T(4)
../singular_texi/examples.tex(,2970) @expansion{} norid[4]=T(1)^5*T(4)-T(3)*T(4)+T(5)^2
../singular_texi/examples.tex(,2971) @expansion{} norid[5]=T(1)^6*T(3)-T(1)*T(3)^2+T(4)*T(5)
../singular_texi/examples.tex(,2972) @expansion{} norid[6]=T(1)*T(3)*T(5)-T(4)^2
../singular_texi/examples.tex(,2973)   // ----- second example: union of straight lines -----
../singular_texi/examples.tex(,2974)   ring R1=0,(x,y,z),dp;
../singular_texi/examples.tex(,2975)   ideal I=(x-y)*(x-z)*(y-z);
../singular_texi/examples.tex(,2976)   list qr=normal(I);
../singular_texi/examples.tex(,2977) @expansion{} 
../singular_texi/examples.tex(,2978) @expansion{} // 'normal' created a list of 3 ring(s).
../singular_texi/examples.tex(,2979) @expansion{} // nor[3+1] is the delta-invariant in case of choose=wd.
../singular_texi/examples.tex(,2980) @expansion{} // To see the rings, type (if the name of your list is nor):
../singular_texi/examples.tex(,2981) @expansion{}      show( nor);
../singular_texi/examples.tex(,2982) @expansion{} // To access the 1-st ring and map (similar for the others), type:
../singular_texi/examples.tex(,2983) @expansion{}      def R = nor[1]; setring R;  norid; normap;
../singular_texi/examples.tex(,2984) @expansion{} // R/norid is the 1-st ring of the normalization and
../singular_texi/examples.tex(,2985) @expansion{} // normap the map from the original basering to R/norid
../singular_texi/examples.tex(,2986)   def S1=qr[1]; def S2=qr[2];
../singular_texi/examples.tex(,2987)   setring S1; norid;
../singular_texi/examples.tex(,2988) @expansion{} norid[1]=0
../singular_texi/examples.tex(,2989)   setring S2; norid;
../singular_texi/examples.tex(,2990) @expansion{} norid[1]=0
../singular_texi/examples.tex(,2991) @c end example Normalization examples.doc:2032
../singular_texi/examples.tex(,2992) @end smallexample
../singular_texi/examples.tex(,2994) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,2996) @node Branches of an Isolated Space Curve Singularity, Kernel of module homomorphisms, Normalization,Examples
../singular_texi/examples.tex(,2997) @section Branches of an Isolated Space Curve Singularity
../singular_texi/examples.tex(,2998) @cindex Branches of an Isolated Space Curve Singularity
../singular_texi/examples.tex(,2999) 
../singular_texi/examples.tex(,3000) In this example, the number of branches of a given quasihomogeneous isolated
../singular_texi/examples.tex(,3001) space curve singularity will be computed as an example of the pitfalls
../singular_texi/examples.tex(,3002) appearing in the use of primary decomposition. When dealing with singularities,
../singular_texi/examples.tex(,3003) two situations are possible in which the primary decomposition algorithm
../singular_texi/examples.tex(,3004) might not lead to a complete decomposition: first of all, one of the computed
../singular_texi/examples.tex(,3005) components could be globally irreducible, but analytically reducible
../singular_texi/examples.tex(,3006) (this is impossible for quasihomogeneous singularities) and,
../singular_texi/examples.tex(,3007) as a second possibility, a component might be irreducible over the rational
../singular_texi/examples.tex(,3008) numbers, but reducible over the complex numbers.
../singular_texi/examples.tex(,3009) @smallexample
../singular_texi/examples.tex(,3010) @c computed example Branches_of_an_Isolated_Space_Curve_Singularity examples.doc:2067 
../singular_texi/examples.tex(,3011)   ring r=0,(x,y,z),ds;
../singular_texi/examples.tex(,3012)   ideal i=x^4-y*z^2,x*y-z^3,y^2-x^3*z;  // the space curve singularity
../singular_texi/examples.tex(,3013)   qhweight(i);
../singular_texi/examples.tex(,3014) @expansion{} 1,2,1
../singular_texi/examples.tex(,3015)   // The given space curve singularity is quasihomogeneous. Hence we can pass
../singular_texi/examples.tex(,3016)   // to the polynomial ring.
../singular_texi/examples.tex(,3017)   ring rr=0,(x,y,z),dp;
../singular_texi/examples.tex(,3018)   ideal i=imap(r,i);
../singular_texi/examples.tex(,3019)   resolution ires=mres(i,0);
../singular_texi/examples.tex(,3020)   ires;
../singular_texi/examples.tex(,3021) @expansion{}   1       3       2       
../singular_texi/examples.tex(,3022) @expansion{} rr <--  rr <--  rr
../singular_texi/examples.tex(,3023) @expansion{} 
../singular_texi/examples.tex(,3024) @expansion{} 0       1       2       
../singular_texi/examples.tex(,3025) @expansion{} 
../singular_texi/examples.tex(,3026)   // From the structure of the resolution, we see that the Cohen-Macaulay
../singular_texi/examples.tex(,3027)   // type of the given singularity is 2
../singular_texi/examples.tex(,3028)   //
../singular_texi/examples.tex(,3029)   // Let us now look for the branches using the primdec library.
../singular_texi/examples.tex(,3030)   LIB "primdec.lib";
../singular_texi/examples.tex(,3031)   primdecSY(i);
../singular_texi/examples.tex(,3032) @expansion{} [1]:
../singular_texi/examples.tex(,3033) @expansion{}    [1]:
../singular_texi/examples.tex(,3034) @expansion{}       _[1]=z3-xy
../singular_texi/examples.tex(,3035) @expansion{}       _[2]=x3+x2z+xz2+xy+yz
../singular_texi/examples.tex(,3036) @expansion{}       _[3]=x2z2+x2y+xyz+yz2+y2
../singular_texi/examples.tex(,3037) @expansion{}    [2]:
../singular_texi/examples.tex(,3038) @expansion{}       _[1]=z3-xy
../singular_texi/examples.tex(,3039) @expansion{}       _[2]=x3+x2z+xz2+xy+yz
../singular_texi/examples.tex(,3040) @expansion{}       _[3]=x2z2+x2y+xyz+yz2+y2
../singular_texi/examples.tex(,3041) @expansion{} [2]:
../singular_texi/examples.tex(,3042) @expansion{}    [1]:
../singular_texi/examples.tex(,3043) @expansion{}       _[1]=x-z
../singular_texi/examples.tex(,3044) @expansion{}       _[2]=z2-y
../singular_texi/examples.tex(,3045) @expansion{}    [2]:
../singular_texi/examples.tex(,3046) @expansion{}       _[1]=x-z
../singular_texi/examples.tex(,3047) @expansion{}       _[2]=z2-y
../singular_texi/examples.tex(,3048)   def li=_[2];
../singular_texi/examples.tex(,3049)   ideal i2=li[2];       // call the second ideal i2
../singular_texi/examples.tex(,3050)   // The curve seems to have 2 branches by what we computed using the
../singular_texi/examples.tex(,3051)   // algorithm of Shimoyama-Yokoyama.
../singular_texi/examples.tex(,3052)   // Now the same computation by the Gianni-Trager-Zacharias algorithm:
../singular_texi/examples.tex(,3053)   primdecGTZ(i);
../singular_texi/examples.tex(,3054) @expansion{} [1]:
../singular_texi/examples.tex(,3055) @expansion{}    [1]:
../singular_texi/examples.tex(,3056) @expansion{}       _[1]=z8+yz6+y2z4+y3z2+y4
../singular_texi/examples.tex(,3057) @expansion{}       _[2]=xz5+z6+yz4+y2z2+y3
../singular_texi/examples.tex(,3058) @expansion{}       _[3]=-z3+xy
../singular_texi/examples.tex(,3059) @expansion{}       _[4]=x2z2+xz3+xyz+yz2+y2
../singular_texi/examples.tex(,3060) @expansion{}       _[5]=x3+x2z+xz2+xy+yz
../singular_texi/examples.tex(,3061) @expansion{}    [2]:
../singular_texi/examples.tex(,3062) @expansion{}       _[1]=z8+yz6+y2z4+y3z2+y4
../singular_texi/examples.tex(,3063) @expansion{}       _[2]=xz5+z6+yz4+y2z2+y3
../singular_texi/examples.tex(,3064) @expansion{}       _[3]=-z3+xy
../singular_texi/examples.tex(,3065) @expansion{}       _[4]=x2z2+xz3+xyz+yz2+y2
../singular_texi/examples.tex(,3066) @expansion{}       _[5]=x3+x2z+xz2+xy+yz
../singular_texi/examples.tex(,3067) @expansion{} [2]:
../singular_texi/examples.tex(,3068) @expansion{}    [1]:
../singular_texi/examples.tex(,3069) @expansion{}       _[1]=-z2+y
../singular_texi/examples.tex(,3070) @expansion{}       _[2]=x-z
../singular_texi/examples.tex(,3071) @expansion{}    [2]:
../singular_texi/examples.tex(,3072) @expansion{}       _[1]=-z2+y
../singular_texi/examples.tex(,3073) @expansion{}       _[2]=x-z
../singular_texi/examples.tex(,3074)   // Having computed the primary decomposition in 2 different ways and
../singular_texi/examples.tex(,3075)   // having obtained the same number of branches, we might expect that the
../singular_texi/examples.tex(,3076)   // number of branches is really 2, but we can check this by formulae
../singular_texi/examples.tex(,3077)   // for the invariants of space curve singularities:
../singular_texi/examples.tex(,3078)   //
../singular_texi/examples.tex(,3079)   // mu = tau - t + 1 (for quasihomogeneous curve singularities)
../singular_texi/examples.tex(,3080)   // where mu denotes the Milnor number, tau the Tjurina number and
../singular_texi/examples.tex(,3081)   // t the Cohen-Macaulay type
../singular_texi/examples.tex(,3082)   //
../singular_texi/examples.tex(,3083)   // mu = 2 delta - r + 1
../singular_texi/examples.tex(,3084)   // where delta denotes the delta-Invariant and r the number of branches
../singular_texi/examples.tex(,3085)   //
../singular_texi/examples.tex(,3086)   // tau can be computed by using the corresponding procedure T1 from
../singular_texi/examples.tex(,3087)   // sing.lib.
../singular_texi/examples.tex(,3088)   setring r;
../singular_texi/examples.tex(,3089)   LIB "sing.lib";
../singular_texi/examples.tex(,3090)   T_1(i);
../singular_texi/examples.tex(,3091) @expansion{} // dim T_1 = 13
../singular_texi/examples.tex(,3092) @expansion{} _[1]=gen(6)+2z*gen(5)
../singular_texi/examples.tex(,3093) @expansion{} _[2]=gen(4)+3x2*gen(2)
../singular_texi/examples.tex(,3094) @expansion{} _[3]=gen(3)+gen(1)
../singular_texi/examples.tex(,3095) @expansion{} _[4]=x*gen(5)-y*gen(2)-z*gen(1)
../singular_texi/examples.tex(,3096) @expansion{} _[5]=x*gen(1)-z2*gen(2)
../singular_texi/examples.tex(,3097) @expansion{} _[6]=y*gen(5)+3x2z*gen(2)
../singular_texi/examples.tex(,3098) @expansion{} _[7]=y*gen(2)-z*gen(1)
../singular_texi/examples.tex(,3099) @expansion{} _[8]=2y*gen(1)-z2*gen(5)
../singular_texi/examples.tex(,3100) @expansion{} _[9]=z2*gen(5)
../singular_texi/examples.tex(,3101) @expansion{} _[10]=z2*gen(1)
../singular_texi/examples.tex(,3102) @expansion{} _[11]=x3*gen(2)
../singular_texi/examples.tex(,3103) @expansion{} _[12]=x2z2*gen(2)
../singular_texi/examples.tex(,3104) @expansion{} _[13]=xz3*gen(2)
../singular_texi/examples.tex(,3105) @expansion{} _[14]=z4*gen(2)
../singular_texi/examples.tex(,3106)   setring rr;
../singular_texi/examples.tex(,3107)   // Hence tau is 13 and therefore mu is 12. But then it is impossible that
../singular_texi/examples.tex(,3108)   // the singularity has two branches, since mu is even and delta is an
../singular_texi/examples.tex(,3109)   // integer!
../singular_texi/examples.tex(,3110)   // So obviously, we did not decompose completely. Because the first branch
../singular_texi/examples.tex(,3111)   // is smooth, only the second ideal can be the one which can be decomposed
../singular_texi/examples.tex(,3112)   // further.
../singular_texi/examples.tex(,3113)   // Let us now consider the normalization of this second ideal i2.
../singular_texi/examples.tex(,3114)   LIB "normal.lib";
../singular_texi/examples.tex(,3115)   normal(i2);
../singular_texi/examples.tex(,3116) @expansion{} 
../singular_texi/examples.tex(,3117) @expansion{} // 'normal' created a list of 1 ring(s).
../singular_texi/examples.tex(,3118) @expansion{} // nor[1+1] is the delta-invariant in case of choose=wd.
../singular_texi/examples.tex(,3119) @expansion{} // To see the rings, type (if the name of your list is nor):
../singular_texi/examples.tex(,3120) @expansion{}      show( nor);
../singular_texi/examples.tex(,3121) @expansion{} // To access the 1-st ring and map (similar for the others), type:
../singular_texi/examples.tex(,3122) @expansion{}      def R = nor[1]; setring R;  norid; normap;
../singular_texi/examples.tex(,3123) @expansion{} // R/norid is the 1-st ring of the normalization and
../singular_texi/examples.tex(,3124) @expansion{} // normap the map from the original basering to R/norid
../singular_texi/examples.tex(,3125) @expansion{} [1]:
../singular_texi/examples.tex(,3126) @expansion{}    //   characteristic : 0
../singular_texi/examples.tex(,3127) @expansion{} //   number of vars : 1
../singular_texi/examples.tex(,3128) @expansion{} //        block   1 : ordering dp
../singular_texi/examples.tex(,3129) @expansion{} //                  : names    T(1) 
../singular_texi/examples.tex(,3130) @expansion{} //        block   2 : ordering C
../singular_texi/examples.tex(,3131)   def rno=_[1];
../singular_texi/examples.tex(,3132)   setring rno;
../singular_texi/examples.tex(,3133)   norid;
../singular_texi/examples.tex(,3134) @expansion{} norid[1]=0
../singular_texi/examples.tex(,3135)   // The ideal is generated by a polynomial in one variable of degree 4 which
../singular_texi/examples.tex(,3136)   // factors completely into 4 polynomials of type T(2)+a.
../singular_texi/examples.tex(,3137)   // From this, we know that the ring of the normalization is the direct sum of 
../singular_texi/examples.tex(,3138)   // 4 polynomial rings in one variable.
../singular_texi/examples.tex(,3139)   // Hence our original curve has these 4 branches plus a smooth one
../singular_texi/examples.tex(,3140)   // which we already determined by primary decomposition.
../singular_texi/examples.tex(,3141)   // Our final result is therefore: 5 branches.
../singular_texi/examples.tex(,3142) @c end example Branches_of_an_Isolated_Space_Curve_Singularity examples.doc:2067
../singular_texi/examples.tex(,3143) @end smallexample
../singular_texi/examples.tex(,3145) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,3147) @node Kernel of module homomorphisms, Algebraic dependence, Branches of an Isolated Space Curve Singularity, Examples
../singular_texi/examples.tex(,3152) @section Kernel of module homomorphisms
../singular_texi/examples.tex(,3153) @cindex Kernel of module homomorphisms
../singular_texi/examples.tex(,3154) Let 
../singular_texi/examples.tex(,3158) @tex
../singular_texi/examples.tex(,3159) $A$
../singular_texi/examples.tex(,3160) @end tex
../singular_texi/examples.tex(,3161) , 
../singular_texi/examples.tex(,3165) @tex
../singular_texi/examples.tex(,3166) $B$
../singular_texi/examples.tex(,3167) @end tex
../singular_texi/examples.tex(,3168)  be two matrices of size
../singular_texi/examples.tex(,3169) @tex
../singular_texi/examples.tex(,3170) $m\times r$ and $m\times s$
../singular_texi/examples.tex(,3171) @end tex
../singular_texi/examples.tex(,3175) over the ring 
../singular_texi/examples.tex(,3179) @tex
../singular_texi/examples.tex(,3180) $R$
../singular_texi/examples.tex(,3181) @end tex
../singular_texi/examples.tex(,3182)  and consider the corresponding maps
../singular_texi/examples.tex(,3183) @tex
../singular_texi/examples.tex(,3184) $$
../singular_texi/examples.tex(,3185) R^r \buildrel{A}\over{\longrightarrow}
../singular_texi/examples.tex(,3186) R^m \buildrel{B}\over{\longleftarrow} R^s\;.
../singular_texi/examples.tex(,3187) $$
../singular_texi/examples.tex(,3188) @end tex
../singular_texi/examples.tex(,3202) We want to compute the kernel of the map
../singular_texi/examples.tex(,3203) @tex
../singular_texi/examples.tex(,3204) $R^r \buildrel{A}\over{\longrightarrow}
../singular_texi/examples.tex(,3205) R^m\longrightarrow
../singular_texi/examples.tex(,3206) R^m/\hbox{Im}(B) \;.$
../singular_texi/examples.tex(,3207) @end tex
../singular_texi/examples.tex(,3216) This can be done using the @code{modulo} command:
../singular_texi/examples.tex(,3217) @tex
../singular_texi/examples.tex(,3218) $$
../singular_texi/examples.tex(,3219) \hbox{\tt modulo}(A,B)=\hbox{ker}(R^r
../singular_texi/examples.tex(,3220) \buildrel{A}\over{\longrightarrow}R^m/\hbox{Im}(B)) \; .
../singular_texi/examples.tex(,3221) $$
../singular_texi/examples.tex(,3222) @end tex
../singular_texi/examples.tex(,3231) 
../singular_texi/examples.tex(,3232) @smallexample
../singular_texi/examples.tex(,3233) @c computed example Kernel_of_module_homomorphisms examples.doc:2196 
../singular_texi/examples.tex(,3234)   ring r=0,(x,y,z),(c,dp);
../singular_texi/examples.tex(,3235)   matrix A[2][2]=x,y,z,1;
../singular_texi/examples.tex(,3236)   matrix B[2][2]=x2,y2,z2,xz;
../singular_texi/examples.tex(,3237)   print(modulo(A,B));
../singular_texi/examples.tex(,3238) @expansion{} yz2-x2, xyz-y2,  x2z-xy, x3-y2z,
../singular_texi/examples.tex(,3239) @expansion{} x2z-xz2,-x2z+y2z,xyz-yz2,0      
../singular_texi/examples.tex(,3240) @c end example Kernel_of_module_homomorphisms examples.doc:2196
../singular_texi/examples.tex(,3241) @end smallexample
../singular_texi/examples.tex(,3242) 
../singular_texi/examples.tex(,3243) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,3245) @node Algebraic dependence, Classification, Kernel of module homomorphisms, Examples
../singular_texi/examples.tex(,3250) @section Algebraic dependence
../singular_texi/examples.tex(,3251) @cindex Algebraic dependence
../singular_texi/examples.tex(,3252) Let
../singular_texi/examples.tex(,3253) @tex
../singular_texi/examples.tex(,3254) $g$, $f_1$, \dots, $f_r\in K[x_1,\ldots,x_n]$.
../singular_texi/examples.tex(,3255) @end tex
../singular_texi/examples.tex(,3259) We want to check whether
../singular_texi/examples.tex(,3260) @enumerate
../singular_texi/examples.tex(,3261) @item
../singular_texi/examples.tex(,3262) @tex
../singular_texi/examples.tex(,3263) $f_1$, \dots, $f_r$
../singular_texi/examples.tex(,3264) @end tex
../singular_texi/examples.tex(,3268) are algebraically dependent.
../singular_texi/examples.tex(,3269) 
../singular_texi/examples.tex(,3270) Let
../singular_texi/examples.tex(,3271) @tex
../singular_texi/examples.tex(,3272) $I=\langle Y_1-f_1,\ldots,Y_r-f_r \rangle \subseteq
../singular_texi/examples.tex(,3273) K[x_1,\ldots,x_n,Y_1,\ldots,Y_r]$.
../singular_texi/examples.tex(,3274) @end tex
../singular_texi/examples.tex(,3282) Then
../singular_texi/examples.tex(,3283) @tex
../singular_texi/examples.tex(,3284) $I \cap K[Y_1,\ldots,Y_r]$
../singular_texi/examples.tex(,3285) @end tex
../singular_texi/examples.tex(,3289) are the algebraic relations between
../singular_texi/examples.tex(,3290) @tex
../singular_texi/examples.tex(,3291) $f_1$, \dots, $f_r$.
../singular_texi/examples.tex(,3292) @end tex
../singular_texi/examples.tex(,3296) 
../singular_texi/examples.tex(,3297) @item
../singular_texi/examples.tex(,3298) @tex
../singular_texi/examples.tex(,3299) $g \in K [f_1,\ldots,f_r]$.
../singular_texi/examples.tex(,3300) @end tex
../singular_texi/examples.tex(,3304) 
../singular_texi/examples.tex(,3305) @tex
../singular_texi/examples.tex(,3306) $g \in K[f_1,\ldots,f_r]$
../singular_texi/examples.tex(,3307) @end tex
../singular_texi/examples.tex(,3311) if and only if the normal form of 
../singular_texi/examples.tex(,3315) @tex
../singular_texi/examples.tex(,3316) $g$
../singular_texi/examples.tex(,3317) @end tex
../singular_texi/examples.tex(,3318)  with respect to 
../singular_texi/examples.tex(,3322) @tex
../singular_texi/examples.tex(,3323) $I$
../singular_texi/examples.tex(,3324) @end tex
../singular_texi/examples.tex(,3325)  and a
../singular_texi/examples.tex(,3326) block ordering with respect to
../singular_texi/examples.tex(,3327) @tex
../singular_texi/examples.tex(,3328) $X=(x_1,\ldots,x_n)$ and $Y=(Y_1,\ldots,Y_r)$ with $X>Y$
../singular_texi/examples.tex(,3329) @end tex
../singular_texi/examples.tex(,3333) is in 
../singular_texi/examples.tex(,3337) @tex
../singular_texi/examples.tex(,3338) $K[Y]$
../singular_texi/examples.tex(,3339) @end tex
../singular_texi/examples.tex(,3340) .
../singular_texi/examples.tex(,3341) @end enumerate
../singular_texi/examples.tex(,3342) 
../singular_texi/examples.tex(,3343) Both questions can be answered using the following procedure. If the
../singular_texi/examples.tex(,3344) second argument is zero, it checks for algebraic dependence and returns
../singular_texi/examples.tex(,3345) the ideal of relations between the generators of the given ideal.
../singular_texi/examples.tex(,3346) Otherwise it checks for subring membership and returns the normal form
../singular_texi/examples.tex(,3347) of the second argument with respect to the ideal I.
../singular_texi/examples.tex(,3348) 
../singular_texi/examples.tex(,3349) @smallexample
../singular_texi/examples.tex(,3350) @c computed example Algebraic_dependence examples.doc:2290 
../singular_texi/examples.tex(,3351)   proc algebraicDep(ideal J, poly g)
../singular_texi/examples.tex(,3352)   @{
../singular_texi/examples.tex(,3353)     def R=basering;         // give a name to the basering
../singular_texi/examples.tex(,3354)     int n=size(J);
../singular_texi/examples.tex(,3355)     int k=nvars(R);
../singular_texi/examples.tex(,3356)     int i;
../singular_texi/examples.tex(,3357)     intvec v;
../singular_texi/examples.tex(,3358) 
../singular_texi/examples.tex(,3359)     // construction of the new ring:
../singular_texi/examples.tex(,3360) 
../singular_texi/examples.tex(,3361)     // construct a weight vector
../singular_texi/examples.tex(,3362)     v[n+k]=0;         // gives a zero vector of length n+k
../singular_texi/examples.tex(,3363)     for(i=1;i<=k;i++)
../singular_texi/examples.tex(,3364)     @{
../singular_texi/examples.tex(,3365)       v[i]=1;
../singular_texi/examples.tex(,3366)     @}
../singular_texi/examples.tex(,3367)     string orde="(a("+string(v)+"),dp);";
../singular_texi/examples.tex(,3368)     string ri="ring Rhelp=("+charstr(R)+"),
../singular_texi/examples.tex(,3369)                           ("+varstr(R)+",Y(1.."+string(n)+")),"+orde;
../singular_texi/examples.tex(,3370)                             // ring definition as a string
../singular_texi/examples.tex(,3371)     execute(ri);            // execution of the string
../singular_texi/examples.tex(,3372) 
../singular_texi/examples.tex(,3373)     // construction of the new ideal I=(J[1]-Y(1),...,J[n]-Y(n))
../singular_texi/examples.tex(,3374)     ideal I=imap(R,J);
../singular_texi/examples.tex(,3375)     for(i=1;i<=n;i++)
../singular_texi/examples.tex(,3376)     @{
../singular_texi/examples.tex(,3377)       I[i]=I[i]-var(k+i);
../singular_texi/examples.tex(,3378)     @}
../singular_texi/examples.tex(,3379)     poly g=imap(R,g);
../singular_texi/examples.tex(,3380)     if(g==0)
../singular_texi/examples.tex(,3381)     @{
../singular_texi/examples.tex(,3382)       // construction of the ideal of relations by elimination
../singular_texi/examples.tex(,3383)       poly el=var(1);
../singular_texi/examples.tex(,3384)       for(i=2;i<=k;i++)
../singular_texi/examples.tex(,3385)       @{
../singular_texi/examples.tex(,3386)         el=el*var(i);
../singular_texi/examples.tex(,3387)       @}
../singular_texi/examples.tex(,3388)       ideal KK=eliminate(I,el);
../singular_texi/examples.tex(,3389)       keepring(Rhelp);
../singular_texi/examples.tex(,3390)       return(KK);
../singular_texi/examples.tex(,3391)     @}
../singular_texi/examples.tex(,3392)     // reduction of g with respect to I
../singular_texi/examples.tex(,3393)     ideal KK=reduce(g,std(I));
../singular_texi/examples.tex(,3394)     keepring(Rhelp);
../singular_texi/examples.tex(,3395)     return(KK);
../singular_texi/examples.tex(,3396)   @}
../singular_texi/examples.tex(,3397) 
../singular_texi/examples.tex(,3398)   // applications of the procedure
../singular_texi/examples.tex(,3399)   ring r=0,(x,y,z),dp;
../singular_texi/examples.tex(,3400)   ideal i=xz,yz;
../singular_texi/examples.tex(,3401)   algebraicDep(i,0);
../singular_texi/examples.tex(,3402) @expansion{} _[1]=0
../singular_texi/examples.tex(,3403)   // Note: after call of algebraicDep(), the basering is Rhelp.
../singular_texi/examples.tex(,3404)   setring r; kill Rhelp;
../singular_texi/examples.tex(,3405)   ideal j=xy+z2,z2+y2,x2y2-2xy3+y4;
../singular_texi/examples.tex(,3406)   algebraicDep(j,0);
../singular_texi/examples.tex(,3407) @expansion{} _[1]=Y(1)^2-2*Y(1)*Y(2)+Y(2)^2-Y(3)
../singular_texi/examples.tex(,3408)   setring r; kill Rhelp;
../singular_texi/examples.tex(,3409)   poly g=y2z2-xz;
../singular_texi/examples.tex(,3410)   algebraicDep(i,g);
../singular_texi/examples.tex(,3411) @expansion{} _[1]=Y(2)^2-Y(1)
../singular_texi/examples.tex(,3412)   // this shows that g is contained in i.
../singular_texi/examples.tex(,3413)   setring r; kill Rhelp;
../singular_texi/examples.tex(,3414)   algebraicDep(j,g);
../singular_texi/examples.tex(,3415) @expansion{} _[1]=-z^4+z^2*Y(2)-x*z
../singular_texi/examples.tex(,3416)   // this shows that g is contained in j.
../singular_texi/examples.tex(,3417) @c end example Algebraic_dependence examples.doc:2290
../singular_texi/examples.tex(,3418) @end smallexample
../singular_texi/examples.tex(,3419) 
../singular_texi/examples.tex(,3420) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,3422) @node Classification, Fast lexicographical GB, Algebraic dependence, Examples
../singular_texi/examples.tex(,3423) @section Classification
../singular_texi/examples.tex(,3424) @cindex Classification
../singular_texi/examples.tex(,3425) 
../singular_texi/examples.tex(,3426) Classification of isolated hypersurface singularities with respect to
../singular_texi/examples.tex(,3427) right equivalence is provided by the command @code{classify} of the
../singular_texi/examples.tex(,3428) library @code{classify.lib}. The classification is done using the
../singular_texi/examples.tex(,3429) algorithm of Arnold. Before entering this algorithm, a first guess based
../singular_texi/examples.tex(,3430) on the Hilbert polynomial of the Milnor algebra is made.
../singular_texi/examples.tex(,3431) 
../singular_texi/examples.tex(,3432) @smallexample
../singular_texi/examples.tex(,3433) @c computed example Classification examples.doc:2369 
../singular_texi/examples.tex(,3434)   LIB "classify.lib";
../singular_texi/examples.tex(,3435)   ring r=0,(x,y,z),ds;
../singular_texi/examples.tex(,3436)   poly p=singularity("E[6k+2]",2)[1];
../singular_texi/examples.tex(,3437)   p=p+z^2;
../singular_texi/examples.tex(,3438)   p;
../singular_texi/examples.tex(,3439) @expansion{} z2+x3+xy6+y8
../singular_texi/examples.tex(,3440)   // We received an E_14 singularity in normal form
../singular_texi/examples.tex(,3441)   // from the database of normal forms. Since only the residual
../singular_texi/examples.tex(,3442)   // part is saved in the database, we added z^2 to get an E_14
../singular_texi/examples.tex(,3443)   // of embedding dimension 3.
../singular_texi/examples.tex(,3444)   //
../singular_texi/examples.tex(,3445)   // Now we apply a coordinate change in order to deal with a
../singular_texi/examples.tex(,3446)   // singularity which is not in normal form:
../singular_texi/examples.tex(,3447)   map phi=r,x+y,y+z,x;
../singular_texi/examples.tex(,3448)   poly q=phi(p);
../singular_texi/examples.tex(,3449)   // Yes, q really looks ugly, now:
../singular_texi/examples.tex(,3450)   q;
../singular_texi/examples.tex(,3451) @expansion{} x2+x3+3x2y+3xy2+y3+xy6+y7+6xy5z+6y6z+15xy4z2+15y5z2+20xy3z3+20y4z3+15xy2z\
../singular_texi/examples.tex(,3452)    4+15y3z4+6xyz5+6y2z5+xz6+yz6+y8+8y7z+28y6z2+56y5z3+70y4z4+56y3z5+28y2z6+8\
../singular_texi/examples.tex(,3453)    yz7+z8
../singular_texi/examples.tex(,3454)   // Classification
../singular_texi/examples.tex(,3455)   classify(q);
../singular_texi/examples.tex(,3456) @expansion{} About the singularity :
../singular_texi/examples.tex(,3457) @expansion{}           Milnor number(f)   = 14
../singular_texi/examples.tex(,3458) @expansion{}           Corank(f)          = 2
../singular_texi/examples.tex(,3459) @expansion{}           Determinacy       <= 12
../singular_texi/examples.tex(,3460) @expansion{} Guessing type via Milnorcode:   E[6k+2]=E[14]
../singular_texi/examples.tex(,3461) @expansion{} 
../singular_texi/examples.tex(,3462) @expansion{} Computing normal form ...
../singular_texi/examples.tex(,3463) @expansion{} I have to apply the splitting lemma. This will take some time....:-)
../singular_texi/examples.tex(,3464) @expansion{}    Arnold step number 9
../singular_texi/examples.tex(,3465) @expansion{} The singularity
../singular_texi/examples.tex(,3466) @expansion{}    x3-9/4x4+27/4x5-189/8x6+737/8x7+6x6y+15x5y2+20x4y3+15x3y4+6x2y5+xy6-24\
../singular_texi/examples.tex(,3467)    089/64x8-x7y+11/2x6y2+26x5y3+95/2x4y4+47x3y5+53/2x2y6+8xy7+y8+104535/64x9\
../singular_texi/examples.tex(,3468)    +27x8y+135/2x7y2+90x6y3+135/2x5y4+27x4y5+9/2x3y6-940383/128x10-405/4x9y-2\
../singular_texi/examples.tex(,3469)    025/8x8y2-675/2x7y3-2025/8x6y4-405/4x5y5-135/8x4y6+4359015/128x11+1701/4x\
../singular_texi/examples.tex(,3470)    10y+8505/8x9y2+2835/2x8y3+8505/8x7y4+1701/4x6y5+567/8x5y6-82812341/512x12\
../singular_texi/examples.tex(,3471)    -15333/8x11y-76809/16x10y2-25735/4x9y3-78525/16x8y4-16893/8x7y5-8799/16x6\
../singular_texi/examples.tex(,3472)    y6-198x5y7-495/4x4y8-55x3y9-33/2x2y10-3xy11-1/4y12
../singular_texi/examples.tex(,3473) @expansion{} is R-equivalent to E[14].
../singular_texi/examples.tex(,3474) @expansion{}    Milnor number = 14
../singular_texi/examples.tex(,3475) @expansion{}    modality      = 1
../singular_texi/examples.tex(,3476) @expansion{} 2z2+x3+xy6+y8
../singular_texi/examples.tex(,3477)   // The library also provides routines to determine the corank of q
../singular_texi/examples.tex(,3478)   // and its residual part without going through the whole
../singular_texi/examples.tex(,3479)   // classification algorithm.
../singular_texi/examples.tex(,3480)   corank(q);
../singular_texi/examples.tex(,3481) @expansion{} 2
../singular_texi/examples.tex(,3482)   morsesplit(q);
../singular_texi/examples.tex(,3483) @expansion{} y3-9/4y4+27/4y5-189/8y6+737/8y7+6y6z+15y5z2+20y4z3+15y3z4+6y2z5+yz6-24089\
../singular_texi/examples.tex(,3484)    /64y8-y7z+11/2y6z2+26y5z3+95/2y4z4+47y3z5+53/2y2z6+8yz7+z8+104535/64y9+27\
../singular_texi/examples.tex(,3485)    y8z+135/2y7z2+90y6z3+135/2y5z4+27y4z5+9/2y3z6-940383/128y10-405/4y9z-2025\
../singular_texi/examples.tex(,3486)    /8y8z2-675/2y7z3-2025/8y6z4-405/4y5z5-135/8y4z6+4359015/128y11+1701/4y10z\
../singular_texi/examples.tex(,3487)    +8505/8y9z2+2835/2y8z3+8505/8y7z4+1701/4y6z5+567/8y5z6-82812341/512y12-15\
../singular_texi/examples.tex(,3488)    333/8y11z-76809/16y10z2-25735/4y9z3-78525/16y8z4-16893/8y7z5-8799/16y6z6-\
../singular_texi/examples.tex(,3489)    198y5z7-495/4y4z8-55y3z9-33/2y2z10-3yz11-1/4z12
../singular_texi/examples.tex(,3490) @c end example Classification examples.doc:2369
../singular_texi/examples.tex(,3491) @end smallexample
../singular_texi/examples.tex(,3493) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,3495) @node Fast lexicographical GB, Parallelization with MPtcp links, Classification, Examples
../singular_texi/examples.tex(,3496) @section Fast lexicographical GB
../singular_texi/examples.tex(,3497) @cindex Fast lexicographical GB
../singular_texi/examples.tex(,3498) 
../singular_texi/examples.tex(,3499) Compute Groebner basis in lexicographical ordering
../singular_texi/examples.tex(,3500) by using the FGLM algorithm (@code{stdfglm})
../singular_texi/examples.tex(,3501) and Hilbert driven Groebner (@code{stdhilb}).
../singular_texi/examples.tex(,3502) 
../singular_texi/examples.tex(,3503) The command @code{stdfglm} applies only for zero-dimensional ideals and
../singular_texi/examples.tex(,3504) returns a reduced Groebner basis.
../singular_texi/examples.tex(,3505) 
../singular_texi/examples.tex(,3506) For the ideal below, @code{stdfglm} is more than 100 times
../singular_texi/examples.tex(,3507) and @code{stdhilb} about 10 times faster than @code{std}.
../singular_texi/examples.tex(,3508) 
../singular_texi/examples.tex(,3509) @smallexample
../singular_texi/examples.tex(,3510) @c computed example Fast_lexicographical_GB examples.doc:2413 
../singular_texi/examples.tex(,3511)   ring r =32003,(a,b,c,d,e),lp;
../singular_texi/examples.tex(,3512)   ideal i=a+b+c+d, ab+bc+cd+ae+de, abc+bcd+abe+ade+cde,
../singular_texi/examples.tex(,3513)           abc+abce+abde+acde+bcde, abcde-1;
../singular_texi/examples.tex(,3514)   int t=timer;
../singular_texi/examples.tex(,3515)   ideal j1=stdfglm(i);
../singular_texi/examples.tex(,3516)   timer-t;
../singular_texi/examples.tex(,3517) @expansion{} 0
../singular_texi/examples.tex(,3518)   size(j1);   // size (no. of polys) in computed GB
../singular_texi/examples.tex(,3519) @expansion{} 5
../singular_texi/examples.tex(,3520)   t=timer;
../singular_texi/examples.tex(,3521)   ideal j2=stdhilb(i);
../singular_texi/examples.tex(,3522)   timer-t;
../singular_texi/examples.tex(,3523) @expansion{} 0
../singular_texi/examples.tex(,3524)   size(j2);   // size (no. of polys) in computed GB
../singular_texi/examples.tex(,3525) @expansion{} 158
../singular_texi/examples.tex(,3526)   // usual Groebner basis computation for lex ordering
../singular_texi/examples.tex(,3527)   t=timer;
../singular_texi/examples.tex(,3528)   ideal j0 =std(i);
../singular_texi/examples.tex(,3529)   timer-t;
../singular_texi/examples.tex(,3530) @expansion{} 1
../singular_texi/examples.tex(,3531) @c end example Fast_lexicographical_GB examples.doc:2413
../singular_texi/examples.tex(,3532) @end smallexample
../singular_texi/examples.tex(,3534) @c ----------------------------------------------------------------------------
../singular_texi/examples.tex(,3536) @node  Parallelization with MPtcp links,  , Fast lexicographical GB, Examples
../singular_texi/examples.tex(,3537) @section Parallelization with MPtcp links
../singular_texi/examples.tex(,3538) @cindex Parallelization
../singular_texi/examples.tex(,3539) @cindex MPtcp
../singular_texi/examples.tex(,3540) @cindex link
../singular_texi/examples.tex(,3541) In this example, we demonstrate how MPtcp links can be used to
../singular_texi/examples.tex(,3542) parallelize computations.
../singular_texi/examples.tex(,3543) 
../singular_texi/examples.tex(,3544) To compute a standard basis for a zero-dimensional ideal in the
../singular_texi/examples.tex(,3545) lexicographical ordering, one of the two powerful routines
../singular_texi/examples.tex(,3546) @code{stdhilb}
../singular_texi/examples.tex(,3548) (see @ref{stdhilb})
../singular_texi/examples.tex(,3550) and @code{stdfglm}
../singular_texi/examples.tex(,3552) (see @ref{stdfglm})
../singular_texi/examples.tex(,3554) should be used. However, a priory one can not predict
../singular_texi/examples.tex(,3555) which one of the two commands is faster. This very much depends on the
../singular_texi/examples.tex(,3556) (input) example. Therefore, we use MPtcp links to let both commands
../singular_texi/examples.tex(,3557) work on the problem independently and in parallel, so that the one which
../singular_texi/examples.tex(,3558) finishes first delivers the result.
../singular_texi/examples.tex(,3559) 
../singular_texi/examples.tex(,3560) The example we use is the so-called "omdi example". See @i{Tim
../singular_texi/examples.tex(,3561) Wichmann; Der FGLM-Algorithmus: verallgemeinert und implementiert in
../singular_texi/examples.tex(,3562) Singular; Diplomarbeit Fachbereich Mathematik, Universitaet
../singular_texi/examples.tex(,3563) Kaiserslautern; 1997} for more details.
../singular_texi/examples.tex(,3564) 
../singular_texi/examples.tex(,3565) @smallexample
../singular_texi/examples.tex(,3566) @c computed example Parallelization_with_MPtcp_links examples.doc:2464 
../singular_texi/examples.tex(,3567) ring r=0,(a,b,c,u,v,w,x,y,z),lp;
../singular_texi/examples.tex(,3568) ideal i=a+c+v+2x-1, ab+cu+2vw+2xy+2xz-2/3,  ab2+cu2+2vw2+2xy2+2xz2-2/5,
../singular_texi/examples.tex(,3569) ab3+cu3+2vw3+2xy3+2xz3-2/7, ab4+cu4+2vw4+2xy4+2xz4-2/9, vw2+2xyz-1/9,
../singular_texi/examples.tex(,3570) vw4+2xy2z2-1/25, vw3+xyz2+xy2z-1/15, vw4+xyz3+xy3z-1/21;
../singular_texi/examples.tex(,3571) 
../singular_texi/examples.tex(,3572) link l_hilb,l_fglm = "MPtcp:fork","MPtcp:fork";         // 1.
../singular_texi/examples.tex(,3573) 
../singular_texi/examples.tex(,3574) open(l_fglm); open(l_hilb);
../singular_texi/examples.tex(,3575) 
../singular_texi/examples.tex(,3576) write(l_hilb, quote(system("pid")));                    // 2.
../singular_texi/examples.tex(,3577) write(l_fglm, quote(system("pid")));
../singular_texi/examples.tex(,3578) int pid_hilb,pid_fglm = read(l_hilb),read(l_fglm);
../singular_texi/examples.tex(,3579) 
../singular_texi/examples.tex(,3580) write(l_hilb, quote(stdhilb(i)));                       // 3.
../singular_texi/examples.tex(,3581) write(l_fglm, quote(stdfglm(eval(i))));
../singular_texi/examples.tex(,3582) 
../singular_texi/examples.tex(,3583) while ((! status(l_hilb, "read", "ready", 1)) &&        // 4.
../singular_texi/examples.tex(,3584)        (! status(l_fglm, "read", "ready", 1))) @{@}
../singular_texi/examples.tex(,3585) 
../singular_texi/examples.tex(,3586) if (status(l_hilb, "read", "ready"))
../singular_texi/examples.tex(,3587) @{
../singular_texi/examples.tex(,3588)   "stdhilb won !!!!"; size(read(l_hilb));
../singular_texi/examples.tex(,3589)   close(l_hilb); pid_fglm = system("sh","kill "+string(pid_fglm));
../singular_texi/examples.tex(,3590) @}
../singular_texi/examples.tex(,3591) else                                                    // 5.
../singular_texi/examples.tex(,3592) @{
../singular_texi/examples.tex(,3593)   "stdfglm won !!!!"; size(read(l_fglm));
../singular_texi/examples.tex(,3594)   close(l_fglm); pid_hilb = system("sh","kill "+string(pid_hilb));
../singular_texi/examples.tex(,3595) @}
../singular_texi/examples.tex(,3596) @expansion{} stdfglm won !!!!
../singular_texi/examples.tex(,3597) @expansion{} 9
../singular_texi/examples.tex(,3598) @c end example Parallelization_with_MPtcp_links examples.doc:2464
../singular_texi/examples.tex(,3599) @end smallexample
../singular_texi/examples.tex(,3600) Some explanatory remarks are in order:
../singular_texi/examples.tex(,3601) @enumerate
../singular_texi/examples.tex(,3602) @item
../singular_texi/examples.tex(,3603) Instead of using links of the type @code{MPtcp:fork}, we alternatively
../singular_texi/examples.tex(,3604) could use @code{MPtcp:launch} links such that the two "competing"
../singular_texi/examples.tex(,3605) @sc{Singular} processes run on different machines. This has the
../singular_texi/examples.tex(,3606) advantage of "true" parallel computing since no resource sharing is
../singular_texi/examples.tex(,3607) involved (as it usually is with forked processes).
../singular_texi/examples.tex(,3608) 
../singular_texi/examples.tex(,3609) @item
../singular_texi/examples.tex(,3610) Unfortunately, MPtcp links do not offer means to (asynchronously)
../singular_texi/examples.tex(,3611) interrupt or kill an attached (i.e., launched or forked)
../singular_texi/examples.tex(,3612) process. Therefore, we explicitly need to get the process id numbers of
../singular_texi/examples.tex(,3613) the competing @sc{Singular} processes, so that we can "kill" the
../singular_texi/examples.tex(,3614) looser later.
../singular_texi/examples.tex(,3615) 
../singular_texi/examples.tex(,3616) @item
../singular_texi/examples.tex(,3617) Notice how quoting is used in order to prevent local evaluation
../singular_texi/examples.tex(,3618) (i.e., local computation of results). Since we "forked" the two
../singular_texi/examples.tex(,3619) competing processes, the identifier @code{i} is defined and has
../singular_texi/examples.tex(,3620) identical values in both child processes. Therefore, the innermost
../singular_texi/examples.tex(,3621) @code{eval} can be omitted (as is done for the @code{l_hilb} link),
../singular_texi/examples.tex(,3622) and only the identifier @code{i} needs to be communicated to the
../singular_texi/examples.tex(,3623) children. However, when @code{MPtcp:launch} links are used, the inner
../singular_texi/examples.tex(,3624) evaluation must be applied so that actual values, and not the
../singular_texi/examples.tex(,3625) identifiers are communicated (as is done for the @code{l_fglm} link).
../singular_texi/examples.tex(,3626) 
../singular_texi/examples.tex(,3627) @item
../singular_texi/examples.tex(,3628) We go into a "sleepy" loop and wait until one of the two children
../singular_texi/examples.tex(,3629) finished the computation. That is, the current process checks approximately
../singular_texi/examples.tex(,3630) once per second the status of one of the connecting links, and sleeps
../singular_texi/examples.tex(,3631) (i.e., suspends its execution) in the intermediate time.
../singular_texi/examples.tex(,3632) 
../singular_texi/examples.tex(,3633) @item
../singular_texi/examples.tex(,3634) The child which has won delivers the result and is terminated with the usual
../singular_texi/examples.tex(,3635) @code{close} command. The other child which is still computing needs to
../singular_texi/examples.tex(,3636) be terminated by an explicit (i.e., system) kill command, since it can
../singular_texi/examples.tex(,3637) not be terminated through the link while it is still computing.
../singular_texi/examples.tex(,3638) @end enumerate
../singular_texi/examples.tex(,3640) 
../singular_texi/examples.tex(,3641) @c --------------------------------------------------------------------
../singular_texi/singular.tex(,157) 
../singular_texi/singular.tex(,158) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,159) @node Polynomial data,Mathematical background, Examples, Top
../singular_texi/singular.tex(,160) @appendix Polynomial data
../singular_texi/singular.tex(,161) @cindex Polynomial data
../singular_texi/pdata.tex(,1) @comment -*-texinfo-*-
../singular_texi/pdata.tex(,2) @comment This file was generated by doc2tex.pl from pdata.doc
../singular_texi/pdata.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT pdata.doc INSTEAD
../singular_texi/pdata.tex(,4) @comment Id: pdata.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/pdata.tex(,5) @comment this file contains the "Polynomial data" appendix.
../singular_texi/pdata.tex(,6) 
../singular_texi/pdata.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/pdata.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/pdata.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/pdata.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/pdata.tex(,11) @c ignores the `@ignore').
../singular_texi/pdata.tex(,24) 
../singular_texi/pdata.tex(,25) @menu
../singular_texi/pdata.tex(,26) * Representation of mathematical objects::
../singular_texi/pdata.tex(,27) * Monomial orderings::
../singular_texi/pdata.tex(,28) @end menu
../singular_texi/pdata.tex(,29) 
../singular_texi/pdata.tex(,30) @c -----------------------------------------------------------------
../singular_texi/pdata.tex(,31) @node Representation of mathematical objects,Monomial orderings,,Polynomial data
../singular_texi/pdata.tex(,32) @section Representation of mathematical objects
../singular_texi/pdata.tex(,33) @cindex mathematical objects
../singular_texi/pdata.tex(,34) @cindex representation, math objects
../singular_texi/pdata.tex(,35) 
../singular_texi/pdata.tex(,36) @sc{Singular} distinguishes between objects which do not belong to a ring
../singular_texi/pdata.tex(,37) and those which belong to a specific ring (see @ref{Rings and orderings}).
../singular_texi/pdata.tex(,38) We comment only on the latter ones.
../singular_texi/pdata.tex(,39) 
../singular_texi/pdata.tex(,40) Internally all ring-dependent objects are polynomials or structures built from
../singular_texi/pdata.tex(,41) polynomials (and some additional information).
../singular_texi/pdata.tex(,42) Note that @sc{Singular} stores (and hence prints) a polynomial automatically
../singular_texi/pdata.tex(,43) w.r.t@:. the monomial ordering.
../singular_texi/pdata.tex(,44) 
../singular_texi/pdata.tex(,45) Hence, in order to define such an object in @sc{Singular},
../singular_texi/pdata.tex(,46) one has to give a list of polynomials in a specific format.
../singular_texi/pdata.tex(,47) 
../singular_texi/pdata.tex(,48) For ideals, resp.@: matrices, this is straight forward:
../singular_texi/pdata.tex(,49) The user gives a list of polynomials
../singular_texi/pdata.tex(,50) which generate the ideal, resp.@: which are the entries of the matrix.
../singular_texi/pdata.tex(,51) (The number of rows and columns has to be given when creating the matrix.)
../singular_texi/pdata.tex(,52) 
../singular_texi/pdata.tex(,53) A vector  in @sc{Singular} is always an element of a free module over the
../singular_texi/pdata.tex(,54) basering. It is given as a list of polynomials in one of the following
../singular_texi/pdata.tex(,55) formats
../singular_texi/pdata.tex(,56) @tex
../singular_texi/pdata.tex(,57) $[f_1,...,f_n]$ or $f_1*gen(1)+...+f_n*gen(n)$, where $gen(i)$
../singular_texi/pdata.tex(,58) @end tex
../singular_texi/pdata.tex(,62) denotes the i-th canonical generator of a free module (with 1 at place i and
../singular_texi/pdata.tex(,63) 0 everywhere else).
../singular_texi/pdata.tex(,64) Both forms are equivalent. A vector is internally represented in
../singular_texi/pdata.tex(,65) the second form with the
../singular_texi/pdata.tex(,66) @tex
../singular_texi/pdata.tex(,67) $gen(i)$
../singular_texi/pdata.tex(,68) @end tex
../singular_texi/pdata.tex(,72) being "special" ring variables, ordered accordingly to the monomial ordering.
../singular_texi/pdata.tex(,73) Therefore, the form
../singular_texi/pdata.tex(,74) @tex
../singular_texi/pdata.tex(,75) $[f_1,...,f_n]$
../singular_texi/pdata.tex(,76) @end tex
../singular_texi/pdata.tex(,80) is given as output only if the monomial ordering gives priority to the
../singular_texi/pdata.tex(,81) component, i.e@:., is of the form @code{(c,...)} (see @ref{Module
../singular_texi/pdata.tex(,82) orderings}).  However, in any case the procedure @code{show} from the
../singular_texi/pdata.tex(,83) library @code{inout.lib} displays the bracket format.
../singular_texi/pdata.tex(,84) 
../singular_texi/pdata.tex(,85) A vector
../singular_texi/pdata.tex(,86) @tex
../singular_texi/pdata.tex(,87) $v=[f_1,...,f_n]$
../singular_texi/pdata.tex(,88) @end tex
../singular_texi/pdata.tex(,92) should always be considered as a column vector in a free module
../singular_texi/pdata.tex(,93) of rank equal to
../singular_texi/pdata.tex(,94) @tex
../singular_texi/pdata.tex(,95) nrows($v$)
../singular_texi/pdata.tex(,96) @end tex
../singular_texi/pdata.tex(,100) where 
../singular_texi/pdata.tex(,101) @tex
../singular_texi/pdata.tex(,102) nrows($v$)
../singular_texi/pdata.tex(,103) @end tex
../singular_texi/pdata.tex(,107) is equal to the maximal index 
../singular_texi/pdata.tex(,108) @tex
../singular_texi/pdata.tex(,109) $r$
../singular_texi/pdata.tex(,110) @end tex
../singular_texi/pdata.tex(,114) such that
../singular_texi/pdata.tex(,115) @tex
../singular_texi/pdata.tex(,116) $f_r \not= 0$.
../singular_texi/pdata.tex(,117) @end tex
../singular_texi/pdata.tex(,121) This is due to the fact, that internally 
../singular_texi/pdata.tex(,122) @tex
../singular_texi/pdata.tex(,123) $v$
../singular_texi/pdata.tex(,124) @end tex
../singular_texi/pdata.tex(,128) is a polynomial in a sparse representation, i.e.,
../singular_texi/pdata.tex(,129) @tex
../singular_texi/pdata.tex(,130) $f_i*gen(i)$
../singular_texi/pdata.tex(,131) @end tex
../singular_texi/pdata.tex(,135) is not stored if
../singular_texi/pdata.tex(,136) @tex
../singular_texi/pdata.tex(,137) $f_i=0$
../singular_texi/pdata.tex(,138) @end tex
../singular_texi/pdata.tex(,142) (for reasons of efficiency), hence the last 0-entries of 
../singular_texi/pdata.tex(,143) @tex
../singular_texi/pdata.tex(,144) $v$
../singular_texi/pdata.tex(,145) @end tex
../singular_texi/pdata.tex(,149) are lost.
../singular_texi/pdata.tex(,150) Only more complex structures are able to keep the rank.
../singular_texi/pdata.tex(,151) 
../singular_texi/pdata.tex(,152) A module 
../singular_texi/pdata.tex(,153) @tex
../singular_texi/pdata.tex(,154) $M$
../singular_texi/pdata.tex(,155) @end tex
../singular_texi/pdata.tex(,159) in @sc{Singular} is given by a list of vectors
../singular_texi/pdata.tex(,160) @tex
../singular_texi/pdata.tex(,161) $v_1,...,v_k$
../singular_texi/pdata.tex(,162) @end tex
../singular_texi/pdata.tex(,166) which generate the module as a submodule of the free module of rank
../singular_texi/pdata.tex(,167) equal to 
../singular_texi/pdata.tex(,168) @tex
../singular_texi/pdata.tex(,169) nrows($M$)
../singular_texi/pdata.tex(,170) @end tex
../singular_texi/pdata.tex(,174) which is the maximum of
../singular_texi/pdata.tex(,175) @tex
../singular_texi/pdata.tex(,176) nrows($v_i$).
../singular_texi/pdata.tex(,177) @end tex
../singular_texi/pdata.tex(,181) 
../singular_texi/pdata.tex(,182) If one wants to create a module with a larger rank than given by its
../singular_texi/pdata.tex(,183) generators, one has to use the command @code{attrib(M,"rank",r)} (see
../singular_texi/pdata.tex(,184) @ref{attrib}, @ref{nrows}) or to define a matrix first, then converting it
../singular_texi/pdata.tex(,185) into a module.  Modules in @sc{Singular} are almost the same as
../singular_texi/pdata.tex(,186) matrices, they may be considered as sparse representations of matrices.
../singular_texi/pdata.tex(,187) A module of a matrix is generated by the columns of the matrix and a
../singular_texi/pdata.tex(,188) matrix of a module has as columns the generators of the module.  These
../singular_texi/pdata.tex(,189) conversions preserve the rank and the number of generators, resp@:. the
../singular_texi/pdata.tex(,190) number of rows and columns.
../singular_texi/pdata.tex(,191) 
../singular_texi/pdata.tex(,192) By the above remarks it might appear that @sc{Singular} is only able to handle
../singular_texi/pdata.tex(,193) submodules of a free module. However, this is not true. @sc{Singular}
../singular_texi/pdata.tex(,194) can compute with any finitely generated module over the basering 
../singular_texi/pdata.tex(,195) @tex
../singular_texi/pdata.tex(,196) $R$.
../singular_texi/pdata.tex(,197) @end tex 
../singular_texi/pdata.tex(,201) Such a module, say 
../singular_texi/pdata.tex(,202) @tex
../singular_texi/pdata.tex(,203) $N$,
../singular_texi/pdata.tex(,204) @end tex
../singular_texi/pdata.tex(,208) is not represented by its generators but by its
../singular_texi/pdata.tex(,209) (generators and) relations. This means that
../singular_texi/pdata.tex(,210) @tex
../singular_texi/pdata.tex(,211) $N = R^n/M$ where $n$ 
../singular_texi/pdata.tex(,212) @end tex
../singular_texi/pdata.tex(,216) is the number of generators of 
../singular_texi/pdata.tex(,217) @tex
../singular_texi/pdata.tex(,218) $N$ and $M \subseteq R^n$
../singular_texi/pdata.tex(,219) @end tex
../singular_texi/pdata.tex(,223) is the module of relations.
../singular_texi/pdata.tex(,224) In other words, defining  a module 
../singular_texi/pdata.tex(,225) @tex
../singular_texi/pdata.tex(,226) $M$
../singular_texi/pdata.tex(,227) @end tex
../singular_texi/pdata.tex(,231) as a submodule of a free module
../singular_texi/pdata.tex(,232) @tex
../singular_texi/pdata.tex(,233) $R^n$
../singular_texi/pdata.tex(,234) @end tex
../singular_texi/pdata.tex(,238) can also be considered as the definition of
../singular_texi/pdata.tex(,239) @tex
../singular_texi/pdata.tex(,240) $N = R^n/M$.
../singular_texi/pdata.tex(,241) @end tex
../singular_texi/pdata.tex(,245) 
../singular_texi/pdata.tex(,246) Note that most functions, when applied to a module 
../singular_texi/pdata.tex(,247) @tex
../singular_texi/pdata.tex(,248) $M$,
../singular_texi/pdata.tex(,249) @end tex
../singular_texi/pdata.tex(,253) really deal with
../singular_texi/pdata.tex(,254) @tex
../singular_texi/pdata.tex(,255) $M$.
../singular_texi/pdata.tex(,256) @end tex
../singular_texi/pdata.tex(,260) However, there are some functions which deal with 
../singular_texi/pdata.tex(,261) @tex
../singular_texi/pdata.tex(,262) $N = R^n/M$ instead of $M$.
../singular_texi/pdata.tex(,263) @end tex
../singular_texi/pdata.tex(,267) 
../singular_texi/pdata.tex(,268) For example, @code{std(M)} computes a standard basis of 
../singular_texi/pdata.tex(,269) @tex
../singular_texi/pdata.tex(,270) $M$
../singular_texi/pdata.tex(,271) @end tex
../singular_texi/pdata.tex(,275) (and thus gives another representation of 
../singular_texi/pdata.tex(,276) @tex
../singular_texi/pdata.tex(,277) $N$ as $N = R^n/$std($M$)).
../singular_texi/pdata.tex(,278) @end tex
../singular_texi/pdata.tex(,282) However, @code{dim(M)}, resp.@: @code{vdim(M)}, returns
../singular_texi/pdata.tex(,283) @tex
../singular_texi/pdata.tex(,284) dim$(R^n/M)$, resp.@: dim$_k(R^n/M)$
../singular_texi/pdata.tex(,285) @end tex
../singular_texi/pdata.tex(,289) (if M is given by a standard basis).
../singular_texi/pdata.tex(,290) 
../singular_texi/pdata.tex(,291) The function @code{syz(M)}  returns the first syzygy module of 
../singular_texi/pdata.tex(,292) @tex
../singular_texi/pdata.tex(,293) $M$,
../singular_texi/pdata.tex(,294) @end tex
../singular_texi/pdata.tex(,298) i.e@:., the module 
../singular_texi/pdata.tex(,299) of relations of the given generators of 
../singular_texi/pdata.tex(,300) @tex
../singular_texi/pdata.tex(,301) $M$
../singular_texi/pdata.tex(,302) @end tex
../singular_texi/pdata.tex(,306) which is equal to the second syzygy module of 
../singular_texi/pdata.tex(,307) @tex
../singular_texi/pdata.tex(,308) $N$.
../singular_texi/pdata.tex(,309) @end tex
../singular_texi/pdata.tex(,313) Refer to the description of each function in
../singular_texi/pdata.tex(,314) @ref{Functions} to get information which module the function deals with.
../singular_texi/pdata.tex(,315) 
../singular_texi/pdata.tex(,316) The numbering in @code{res} and other commands for computing resolutions
../singular_texi/pdata.tex(,317) refers to a resolution of
../singular_texi/pdata.tex(,318) @tex
../singular_texi/pdata.tex(,319) $N = R^n/M$
../singular_texi/pdata.tex(,320) @end tex
../singular_texi/pdata.tex(,324) (see @ref{res}; @ref{Syzygies and resolutions}).
../singular_texi/pdata.tex(,325) 
../singular_texi/pdata.tex(,326) It is possible to compute in any field which is a valid ground field in
../singular_texi/pdata.tex(,327) @sc{Singular}.  For doing so, one has to define a ring with the desired
../singular_texi/pdata.tex(,328) ground field and at least one variable. The elements of the field are of
../singular_texi/pdata.tex(,329) type number, but may also be considered as polynomials (of degree
../singular_texi/pdata.tex(,330) 0). Large computations should be faster if the elements of the field are
../singular_texi/pdata.tex(,331) defined as numbers.
../singular_texi/pdata.tex(,332) 
../singular_texi/pdata.tex(,333) The above remarks do also apply to quotient rings. Polynomial data are
../singular_texi/pdata.tex(,334) stored internally in the same manner, the only difference is that this
../singular_texi/pdata.tex(,335) polynomial representation is in general not unique. @code{reduce(f,std(0))}
../singular_texi/pdata.tex(,336) computes a normal form of a polynomial f in a quotient ring (cf.@:
../singular_texi/pdata.tex(,337) @ref{reduce}).
../singular_texi/pdata.tex(,338) 
../singular_texi/pdata.tex(,339) @c -----------------------------------------------------------------
../singular_texi/pdata.tex(,340) @node Monomial orderings,,Representation of mathematical objects,Polynomial data
../singular_texi/pdata.tex(,341) @section Monomial orderings
../singular_texi/pdata.tex(,342) @cindex Monomial orderings
../singular_texi/pdata.tex(,343) 
../singular_texi/pdata.tex(,344) @menu
../singular_texi/pdata.tex(,345) * Introduction to orderings::
../singular_texi/pdata.tex(,346) * General definitions for orderings::
../singular_texi/pdata.tex(,347) * Global orderings::
../singular_texi/pdata.tex(,348) * Local orderings::
../singular_texi/pdata.tex(,349) * Module orderings::
../singular_texi/pdata.tex(,350) * Matrix orderings::
../singular_texi/pdata.tex(,351) * Product orderings::
../singular_texi/pdata.tex(,352) * Extra weight vector::
../singular_texi/pdata.tex(,353) @end menu
../singular_texi/pdata.tex(,354) 
../singular_texi/pdata.tex(,355) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,356) @node Introduction to orderings, General definitions for orderings, , Monomial orderings
../singular_texi/pdata.tex(,357) @subsection Introduction to orderings
../singular_texi/pdata.tex(,358) @cindex orderings introduction
../singular_texi/pdata.tex(,359) @cindex term orderings introduction
../singular_texi/pdata.tex(,360) @cindex monomial orderings introduction
../singular_texi/pdata.tex(,361) 
../singular_texi/pdata.tex(,362) @sc{Singular} offers a great variety of monomial orderings which provide
../singular_texi/pdata.tex(,363) an enormous functionality, if used diligently. However, this
../singular_texi/pdata.tex(,364) flexibility might also be confusing for the novice user.  Therefore, we
../singular_texi/pdata.tex(,365) recommend to those not familiar with monomial orderings to generally use
../singular_texi/pdata.tex(,366) the ordering @code{dp} for computations in the polynomial ring
../singular_texi/pdata.tex(,367) @tex
../singular_texi/pdata.tex(,368) $K[x_1,\ldots,x_n]$, 
../singular_texi/pdata.tex(,369) @end tex
../singular_texi/pdata.tex(,373) resp.@:  @code{ds} for computations in the localization 
../singular_texi/pdata.tex(,374) @tex
../singular_texi/pdata.tex(,375) $\hbox{Loc}_{(x)}K[x_1,\ldots,x_n]$.
../singular_texi/pdata.tex(,376) @end tex
../singular_texi/pdata.tex(,380) 
../singular_texi/pdata.tex(,381) For inhomogeneous input ideals,  standard (resp.@: groebner) bases
../singular_texi/pdata.tex(,382) computations are generally faster 
../singular_texi/pdata.tex(,383) with the orderings 
../singular_texi/pdata.tex(,384) @tex
../singular_texi/pdata.tex(,385) $\hbox{Wp}(w_1, \ldots, w_n)$
../singular_texi/pdata.tex(,386) @end tex
../singular_texi/pdata.tex(,390) (resp.@: 
../singular_texi/pdata.tex(,391) @tex
../singular_texi/pdata.tex(,392) $\hbox{Ws}(w_1, \ldots, w_n)$)
../singular_texi/pdata.tex(,393) @end tex
../singular_texi/pdata.tex(,397) if the input is quasihomogeneous w.r.t. the weights 
../singular_texi/pdata.tex(,398) @tex
../singular_texi/pdata.tex(,399) $w_1$, $\ldots$, $w_n$ of $x_1$, $\ldots$, $x_n$. 
../singular_texi/pdata.tex(,400) @end tex
../singular_texi/pdata.tex(,404) 
../singular_texi/pdata.tex(,405) If the output needs to be "triangular" (resp.@: "block-triangular"), the
../singular_texi/pdata.tex(,406) lexicographical ordering @code{lp} (resp.@: lexicographical
../singular_texi/pdata.tex(,407) block-orderings) need to be used. However, these orderings usually
../singular_texi/pdata.tex(,408) result in much less efficient computations.
../singular_texi/pdata.tex(,409) 
../singular_texi/pdata.tex(,410) 
../singular_texi/pdata.tex(,411) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,412) @node General definitions for orderings, Global orderings, Introduction to orderings, Monomial orderings
../singular_texi/pdata.tex(,413) @subsection General definitions for orderings
../singular_texi/pdata.tex(,414) @cindex orderings
../singular_texi/pdata.tex(,415) @cindex term orderings
../singular_texi/pdata.tex(,416) @cindex monomial orderings
../singular_texi/pdata.tex(,417) 
../singular_texi/pdata.tex(,418) @tex
../singular_texi/pdata.tex(,419) A monomial ordering (term ordering) on $K[x_1, \ldots, x_n]$ is
../singular_texi/pdata.tex(,420) a total ordering $<$ on the
../singular_texi/pdata.tex(,421) set of monomials (power products) $\{x^\alpha \mid \alpha \in \bf{N}^n\}$
../singular_texi/pdata.tex(,422) which is compatible with the
../singular_texi/pdata.tex(,423) natural semigroup structure, i.e., $x^\alpha < x^\beta$ implies $x^\gamma
../singular_texi/pdata.tex(,424) x^\alpha < x^\gamma x^\beta$ for any $\gamma \in \bf{N}^n$.
../singular_texi/pdata.tex(,425) We do not require
../singular_texi/pdata.tex(,426) $<$ to be  a well ordering.
../singular_texi/pdata.tex(,427) @end tex
../singular_texi/pdata.tex(,439)  See the literature cited in @ref{References}.
../singular_texi/pdata.tex(,441) 
../singular_texi/pdata.tex(,442) It is known that any monomial ordering can be represented by a matrix 
../singular_texi/pdata.tex(,443) @tex
../singular_texi/pdata.tex(,444) $M$ in $GL(n,R)$,
../singular_texi/pdata.tex(,445) @end tex
../singular_texi/pdata.tex(,449) but, of course, only integer coefficients are of relevance in
../singular_texi/pdata.tex(,450) practice.
../singular_texi/pdata.tex(,451) 
../singular_texi/pdata.tex(,452) @tex
../singular_texi/pdata.tex(,453) Global orderings are well orderings (i.e.,  \hbox{$1 < x_i$} for each variable
../singular_texi/pdata.tex(,454) $x_i$), local orderings satisfy $1 > x_i$ for each variable.   If some variables are ordered globally and others locally we
../singular_texi/pdata.tex(,455) call it a mixed ordering.   Local or mixed orderings are not well orderings.
../singular_texi/pdata.tex(,456) 
../singular_texi/pdata.tex(,457) Let $K$ be the ground field, \hbox{$x = (x_1, \ldots, x_n)$} the
../singular_texi/pdata.tex(,458) variables and $<$ a monomial ordering, then Loc $K[x]$ denotes the
../singular_texi/pdata.tex(,459) localization of $K[x]$ with respect to the multiplicatively closed set $$\{1 +
../singular_texi/pdata.tex(,460) g \mid g = 0 \hbox{ or } g \in K[x]\backslash \{0\} \hbox{ and }L(g) <
../singular_texi/pdata.tex(,461) 1\}.$$   Here, $L(g)$ 
../singular_texi/pdata.tex(,462) denotes the leading monomial of $g$, i.e., the biggest monomial of $g$ with
../singular_texi/pdata.tex(,463) respect to $<$.   The result of any computation which uses standard basis
../singular_texi/pdata.tex(,464) computations has to be interpreted in Loc $K[x]$.
../singular_texi/pdata.tex(,465) @end tex
../singular_texi/pdata.tex(,480) 
../singular_texi/pdata.tex(,481) Note that the definition of a ring includes the definition of its
../singular_texi/pdata.tex(,482) monomial ordering (see 
../singular_texi/pdata.tex(,483) @ref{Rings and orderings}). @sc{Singular} offers the monomial orderings
../singular_texi/pdata.tex(,484) described in the following sections. 
../singular_texi/pdata.tex(,485) 
../singular_texi/pdata.tex(,486) 
../singular_texi/pdata.tex(,487) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,488) @node Global orderings, Local orderings, General definitions for orderings, Monomial orderings
../singular_texi/pdata.tex(,489) @subsection Global orderings
../singular_texi/pdata.tex(,490) @cindex Global orderings
../singular_texi/pdata.tex(,491) @cindex orderings, global
../singular_texi/pdata.tex(,492) 
../singular_texi/pdata.tex(,493) @tex
../singular_texi/pdata.tex(,494) For all these orderings: Loc $K[x]$ = $K[x]$
../singular_texi/pdata.tex(,495) @end tex
../singular_texi/pdata.tex(,499) 
../singular_texi/pdata.tex(,500) @table @asis
../singular_texi/pdata.tex(,501) @item lp:
../singular_texi/pdata.tex(,502) lexicographical ordering:
../singular_texi/pdata.tex(,503) @cindex lp, global ordering
../singular_texi/pdata.tex(,504) @cindex lexicographical ordering
../singular_texi/pdata.tex(,505) @*
../singular_texi/pdata.tex(,510) @tex
../singular_texi/pdata.tex(,511) $x^\alpha < x^\beta  \Leftrightarrow  \exists\; 1 \le i \le n :
../singular_texi/pdata.tex(,512) \alpha_1 = \beta_1, \ldots, \alpha_{i-1} = \beta_{i-1}, \alpha_i <
../singular_texi/pdata.tex(,513) \beta_i$.
../singular_texi/pdata.tex(,514) @end tex
../singular_texi/pdata.tex(,515) @item rp:
../singular_texi/pdata.tex(,516) reverse lexicographical ordering:
../singular_texi/pdata.tex(,517) @cindex rp, global ordering
../singular_texi/pdata.tex(,518) @cindex reverse lexicographical ordering
../singular_texi/pdata.tex(,519) @*
../singular_texi/pdata.tex(,524) @tex
../singular_texi/pdata.tex(,525) $x^\alpha < x^\beta  \Leftrightarrow  \exists\; 1 \le i \le n :
../singular_texi/pdata.tex(,526) \alpha_n = \beta_n,
../singular_texi/pdata.tex(,527)     \ldots, \alpha_{i+1} = \beta_{i+1}, \alpha_i > \beta_i.$
../singular_texi/pdata.tex(,528) @end tex
../singular_texi/pdata.tex(,529) @item dp:
../singular_texi/pdata.tex(,530) degree reverse lexicographical ordering:
../singular_texi/pdata.tex(,531) @cindex degree reverse lexicographical ordering
../singular_texi/pdata.tex(,532) @cindex dp, global ordering
../singular_texi/pdata.tex(,533) @*
../singular_texi/pdata.tex(,537) @tex
../singular_texi/pdata.tex(,538) let $\deg(x^\alpha) = \alpha_1 + \cdots + \alpha_n,$ then
../singular_texi/pdata.tex(,539) @end tex
../singular_texi/pdata.tex(,547) @tex
../singular_texi/pdata.tex(,548)     $x^\alpha < x^\beta \Leftrightarrow \deg(x^\alpha) < \deg(x^\beta)$ or
../singular_texi/pdata.tex(,549) @end tex
../singular_texi/pdata.tex(,551) @*
../singular_texi/pdata.tex(,553) @tex
../singular_texi/pdata.tex(,554)     \phantom{$x^\alpha < x^\beta \Leftrightarrow $}$ \deg(x^\alpha) =
../singular_texi/pdata.tex(,555)     \deg(x^\beta)$ and $\exists\ 1 \le i \le n: \alpha_n = \beta_n,
../singular_texi/pdata.tex(,556)     \ldots, \alpha_{i+1} = \beta_{i+1}, \alpha_i > \beta_i.$
../singular_texi/pdata.tex(,557) @end tex
../singular_texi/pdata.tex(,558) @item Dp:
../singular_texi/pdata.tex(,559) degree lexicographical ordering:
../singular_texi/pdata.tex(,560) @cindex degree lexicographical ordering
../singular_texi/pdata.tex(,561) @cindex Dp, global ordering
../singular_texi/pdata.tex(,562) @*
../singular_texi/pdata.tex(,566) @tex
../singular_texi/pdata.tex(,567) let $\deg(x^\alpha) = \alpha_1 + \cdots + \alpha_n,$ then
../singular_texi/pdata.tex(,568) @end tex
../singular_texi/pdata.tex(,576) @tex
../singular_texi/pdata.tex(,577)     $x^\alpha < x^\beta \Leftrightarrow \deg(x^\alpha) < \deg(x^\beta)$ or
../singular_texi/pdata.tex(,578) @end tex
../singular_texi/pdata.tex(,580) @*
../singular_texi/pdata.tex(,582) @tex
../singular_texi/pdata.tex(,583)     \phantom{ $x^\alpha < x^\beta \Leftrightarrow $} $\deg(x^\alpha) =
../singular_texi/pdata.tex(,584)     \deg(x^\beta)$ and $\exists\ 1 \le i \le n:\alpha_1 = \beta_1,
../singular_texi/pdata.tex(,585)     \ldots, \alpha_{i-1} = \beta_{i-1}, \alpha_i < \beta_i.$
../singular_texi/pdata.tex(,586) @end tex
../singular_texi/pdata.tex(,587) @item wp:
../singular_texi/pdata.tex(,588) weighted reverse lexicographical ordering:
../singular_texi/pdata.tex(,589) @cindex weighted reverse lexicographical ordering
../singular_texi/pdata.tex(,590) @cindex wp, global ordering
../singular_texi/pdata.tex(,591) @*
../singular_texi/pdata.tex(,595) @tex
../singular_texi/pdata.tex(,596) let $w_1, \ldots, w_n$ be positive integers. Then ${\tt wp}(w_1, \ldots,
../singular_texi/pdata.tex(,597) w_n)$ 
../singular_texi/pdata.tex(,598) @end tex
../singular_texi/pdata.tex(,599)  is defined as @code{dp}
../singular_texi/pdata.tex(,600)  but with
../singular_texi/pdata.tex(,604) @tex
../singular_texi/pdata.tex(,605) $\deg(x^\alpha) = w_1 \alpha_1 + \cdots + w_n\alpha_n.$
../singular_texi/pdata.tex(,606) @end tex
../singular_texi/pdata.tex(,607) @item Wp:
../singular_texi/pdata.tex(,608) weighted lexicographical ordering:
../singular_texi/pdata.tex(,609) @cindex weighted lexicographical ordering
../singular_texi/pdata.tex(,610) @cindex WP, global ordering
../singular_texi/pdata.tex(,611) @*
../singular_texi/pdata.tex(,615) @tex
../singular_texi/pdata.tex(,616) let $w_1, \ldots, w_n$ be positive integers. Then ${\tt Wp}(w_1, \ldots,
../singular_texi/pdata.tex(,617) w_n)$ 
../singular_texi/pdata.tex(,618) @end tex
../singular_texi/pdata.tex(,619)  is defined as @code{Dp}
../singular_texi/pdata.tex(,620)  but with
../singular_texi/pdata.tex(,624) @tex
../singular_texi/pdata.tex(,625) $\deg(x^\alpha) = w_1 \alpha_1 + \cdots + w_n\alpha_n.$
../singular_texi/pdata.tex(,626) @end tex
../singular_texi/pdata.tex(,627) @end table
../singular_texi/pdata.tex(,628) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,629) @node Local orderings, Module orderings, Global orderings, Monomial orderings
../singular_texi/pdata.tex(,630) @subsection Local orderings
../singular_texi/pdata.tex(,631) @cindex Local orderings
../singular_texi/pdata.tex(,632) @cindex orderings, local
../singular_texi/pdata.tex(,633) 
../singular_texi/pdata.tex(,634) For ls, ds, Ds and, if the weights are positive integers, also for ws and
../singular_texi/pdata.tex(,635) Ws,  we have
../singular_texi/pdata.tex(,639) @tex
../singular_texi/pdata.tex(,640) Loc $K[x]$ = $K[x]_{(x)}$,
../singular_texi/pdata.tex(,641) @end tex
../singular_texi/pdata.tex(,642)  the localization of 
../singular_texi/pdata.tex(,643) @tex
../singular_texi/pdata.tex(,644) $K[x]$
../singular_texi/pdata.tex(,645) @end tex
../singular_texi/pdata.tex(,649) at the maximal ideal
../singular_texi/pdata.tex(,653) @tex
../singular_texi/pdata.tex(,654) \ $(x_1, ..., x_n)$.
../singular_texi/pdata.tex(,655) @end tex
../singular_texi/pdata.tex(,656) 
../singular_texi/pdata.tex(,657) @table @asis
../singular_texi/pdata.tex(,658) @item ls:
../singular_texi/pdata.tex(,659) negative lexicographical ordering:
../singular_texi/pdata.tex(,660) @cindex negative lexicographical ordering
../singular_texi/pdata.tex(,661) @cindex ls, local ordering
../singular_texi/pdata.tex(,662) @*
../singular_texi/pdata.tex(,667) @tex
../singular_texi/pdata.tex(,668) $x^\alpha < x^\beta  \Leftrightarrow  \exists\; 1 \le i \le n :
../singular_texi/pdata.tex(,669) \alpha_1 = \beta_1, \ldots, \alpha_{i-1} = \beta_{i-1}, \alpha_i >
../singular_texi/pdata.tex(,670) \beta_i$.
../singular_texi/pdata.tex(,671) @end tex
../singular_texi/pdata.tex(,672) @item ds:
../singular_texi/pdata.tex(,673) negative degree reverse lexicographical ordering:
../singular_texi/pdata.tex(,674) @cindex negative degree reverse lexicographical ordering
../singular_texi/pdata.tex(,675) @cindex ds, local ordering
../singular_texi/pdata.tex(,676) @*
../singular_texi/pdata.tex(,680) @tex
../singular_texi/pdata.tex(,681) let $\deg(x^\alpha) = \alpha_1 + \cdots + \alpha_n,$ then
../singular_texi/pdata.tex(,682) @end tex
../singular_texi/pdata.tex(,690) @tex
../singular_texi/pdata.tex(,691)     $x^\alpha < x^\beta \Leftrightarrow \deg(x^\alpha) > \deg(x^\beta)$ or
../singular_texi/pdata.tex(,692) @end tex
../singular_texi/pdata.tex(,694) @*
../singular_texi/pdata.tex(,696) @tex
../singular_texi/pdata.tex(,697)     \phantom{ $x^\alpha < x^\beta \Leftrightarrow$}$ \deg(x^\alpha) =
../singular_texi/pdata.tex(,698)     \deg(x^\beta)$ and $\exists\ 1 \le i \le n: \alpha_n = \beta_n,
../singular_texi/pdata.tex(,699)     \ldots, \alpha_{i+1} = \beta_{i+1}, \alpha_i > \beta_i.$
../singular_texi/pdata.tex(,700) @end tex
../singular_texi/pdata.tex(,701) @item Ds:
../singular_texi/pdata.tex(,702) negative degree lexicographical ordering:
../singular_texi/pdata.tex(,703) @cindex negative degree lexicographical ordering
../singular_texi/pdata.tex(,704) @cindex Ds, local ordering
../singular_texi/pdata.tex(,705) @*
../singular_texi/pdata.tex(,709) @tex
../singular_texi/pdata.tex(,710) let $\deg(x^\alpha) = \alpha_1 + \cdots + \alpha_n,$ then
../singular_texi/pdata.tex(,711) @end tex
../singular_texi/pdata.tex(,719) @tex
../singular_texi/pdata.tex(,720)     $x^\alpha < x^\beta \Leftrightarrow \deg(x^\alpha) > \deg(x^\beta)$ or 
../singular_texi/pdata.tex(,721) @end tex
../singular_texi/pdata.tex(,723) @*
../singular_texi/pdata.tex(,725) @tex
../singular_texi/pdata.tex(,726)     \phantom{ $ x^\alpha < x^\beta \Leftrightarrow$}$ \deg(x^\alpha) =
../singular_texi/pdata.tex(,727)     \deg(x^\beta)$ and $\exists\ 1 \le i \le n:\alpha_1 = \beta_1,
../singular_texi/pdata.tex(,728)     \ldots, \alpha_{i-1} = \beta_{i-1}, \alpha_i < \beta_i.$
../singular_texi/pdata.tex(,729) @end tex
../singular_texi/pdata.tex(,730) @item ws:
../singular_texi/pdata.tex(,731) (general) weighted reverse lexicographical ordering:
../singular_texi/pdata.tex(,732) @cindex general weighted reverse lexicographical ordering
../singular_texi/pdata.tex(,733) @cindex local weighted reverse lexicographical ordering
../singular_texi/pdata.tex(,734) @cindex ws, local ordering
../singular_texi/pdata.tex(,735) @*
../singular_texi/pdata.tex(,739) @tex
../singular_texi/pdata.tex(,740) ${\tt ws}(w_1, \ldots, w_n),\; w_1$
../singular_texi/pdata.tex(,741) @end tex
../singular_texi/pdata.tex(,742)  a nonzero integer,
../singular_texi/pdata.tex(,746) @tex
../singular_texi/pdata.tex(,747) $w_2,\ldots,w_n$
../singular_texi/pdata.tex(,748) @end tex
../singular_texi/pdata.tex(,749)  any integer (including 0),
../singular_texi/pdata.tex(,750)  is defined as @code{ds}
../singular_texi/pdata.tex(,751)  but with
../singular_texi/pdata.tex(,755) @tex
../singular_texi/pdata.tex(,756) $\deg(x^\alpha) = w_1 \alpha_1 + \cdots + w_n\alpha_n.$
../singular_texi/pdata.tex(,757) @end tex
../singular_texi/pdata.tex(,758) @item Ws:
../singular_texi/pdata.tex(,759) (general) weighted lexicographical ordering:
../singular_texi/pdata.tex(,760) @cindex general weighted lexicographical ordering
../singular_texi/pdata.tex(,761) @cindex local weighted lexicographical ordering
../singular_texi/pdata.tex(,762) @cindex Ws, local ordering
../singular_texi/pdata.tex(,763) @*
../singular_texi/pdata.tex(,767) @tex
../singular_texi/pdata.tex(,768) ${\tt Ws}(w_1, \ldots, w_n),\; w_1$
../singular_texi/pdata.tex(,769) @end tex
../singular_texi/pdata.tex(,770)  a nonzero integer,
../singular_texi/pdata.tex(,774) @tex
../singular_texi/pdata.tex(,775) $w_2,\ldots,w_n$
../singular_texi/pdata.tex(,776) @end tex
../singular_texi/pdata.tex(,777)  any integer (including 0),
../singular_texi/pdata.tex(,778)  is defined as @code{Ds}
../singular_texi/pdata.tex(,779)  but with
../singular_texi/pdata.tex(,783) @tex
../singular_texi/pdata.tex(,784) $\deg(x^\alpha) = w_1 \alpha_1 + \cdots + w_n\alpha_n.$
../singular_texi/pdata.tex(,785) @end tex
../singular_texi/pdata.tex(,786) @end table
../singular_texi/pdata.tex(,787) 
../singular_texi/pdata.tex(,788) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,789) @node Module orderings, Matrix orderings, Local orderings, Monomial orderings
../singular_texi/pdata.tex(,790) @subsection Module orderings
../singular_texi/pdata.tex(,791) @cindex Module orderings
../singular_texi/pdata.tex(,792) 
../singular_texi/pdata.tex(,793) @sc{Singular} offers also orderings on the set of ``monomials''
../singular_texi/pdata.tex(,799) @tex
../singular_texi/pdata.tex(,800) $\{ x^a e_i  \mid  a \in N^n, 1 \leq i \leq r \}$ in Loc $K[x]^r$ = Loc
../singular_texi/pdata.tex(,801) $K[x]e_1 
../singular_texi/pdata.tex(,802) + \ldots +$Loc $K[x]e_r$, where $e_1, \ldots, e_r$ denote the canonical
../singular_texi/pdata.tex(,803) generators of Loc $K[x]^r$, the r-fold direct sum of Loc $K[x]$.
../singular_texi/pdata.tex(,804) (The function {\tt gen(i)} yields $e_i$).
../singular_texi/pdata.tex(,805) @end tex
../singular_texi/pdata.tex(,806) 
../singular_texi/pdata.tex(,807) We have two possibilities: either to give priority to the component of a
../singular_texi/pdata.tex(,808) vector in 
../singular_texi/pdata.tex(,812) @tex
../singular_texi/pdata.tex(,813)  Loc $K[x]^r$
../singular_texi/pdata.tex(,814) @end tex
../singular_texi/pdata.tex(,815) or (which is the default in @sc{Singular}) to give priority
../singular_texi/pdata.tex(,816) to the coefficients.
../singular_texi/pdata.tex(,817) The orderings @code{(<,c)} and @code{(<,C)} give priority to the
../singular_texi/pdata.tex(,818) coefficients; whereas
../singular_texi/pdata.tex(,819) @code{(c,<)} and @code{(C,<)} give priority to the components.
../singular_texi/pdata.tex(,820) @*Let < be any of the monomial orderings of 
../singular_texi/pdata.tex(,821) @tex
../singular_texi/pdata.tex(,822) Loc $K[x]$
../singular_texi/pdata.tex(,823) @end tex
../singular_texi/pdata.tex(,827) as above.
../singular_texi/pdata.tex(,828) 
../singular_texi/pdata.tex(,829) @table @asis
../singular_texi/pdata.tex(,830) @item (<,C):
../singular_texi/pdata.tex(,831) @cindex C, module ordering
../singular_texi/pdata.tex(,832) @cindex module ordering C
../singular_texi/pdata.tex(,840) @tex
../singular_texi/pdata.tex(,841) $<_m = (<,C)$ denotes the module ordering (giving priority to the coefficients):
../singular_texi/pdata.tex(,842) @end tex
../singular_texi/pdata.tex(,843) @*
../singular_texi/pdata.tex(,844) @tex
../singular_texi/pdata.tex(,845) \quad  \quad  $x^\alpha e_i <_m x^\beta e_j \Leftrightarrow x^\alpha <
../singular_texi/pdata.tex(,846) x^\beta$ or ($x^\alpha = x^\beta $ and $ i < j$).
../singular_texi/pdata.tex(,847) @end tex
../singular_texi/pdata.tex(,848) 
../singular_texi/pdata.tex(,849) @strong{Example:}
../singular_texi/pdata.tex(,850) @smallexample
../singular_texi/pdata.tex(,851) @c computed example Module_orderings pdata.doc:849 
../singular_texi/pdata.tex(,852)   ring r = 0, (x,y,z), ds;
../singular_texi/pdata.tex(,853)   // the same as ring r = 0, (x,y,z), (ds, C);
../singular_texi/pdata.tex(,854)   [x+y2,z3+xy];
../singular_texi/pdata.tex(,855) @expansion{} x*gen(1)+xy*gen(2)+y2*gen(1)+z3*gen(2)
../singular_texi/pdata.tex(,856)   [x,x,x];
../singular_texi/pdata.tex(,857) @expansion{} x*gen(3)+x*gen(2)+x*gen(1)
../singular_texi/pdata.tex(,858) @c end example Module_orderings pdata.doc:849
../singular_texi/pdata.tex(,859) @end smallexample
../singular_texi/pdata.tex(,860) 
../singular_texi/pdata.tex(,861) @item (C,<):
../singular_texi/pdata.tex(,870) @tex
../singular_texi/pdata.tex(,871) $<_m = (C, <)$ denotes the module ordering (giving priority to the component):
../singular_texi/pdata.tex(,872) @end tex
../singular_texi/pdata.tex(,874) @*
../singular_texi/pdata.tex(,876) @tex
../singular_texi/pdata.tex(,877) \quad \quad   $x^\alpha e_i <_m x^\beta e_j \Leftrightarrow i < j$ or ($
../singular_texi/pdata.tex(,878) i = j $ and $ x^\alpha < x^\beta $). 
../singular_texi/pdata.tex(,879) @end tex
../singular_texi/pdata.tex(,880) 
../singular_texi/pdata.tex(,881) @strong{Example:}
../singular_texi/pdata.tex(,882) @smallexample
../singular_texi/pdata.tex(,883) @c computed example Module_orderings_1 pdata.doc:879 
../singular_texi/pdata.tex(,884)   ring r = 0, (x,y,z), (C,lp);
../singular_texi/pdata.tex(,885)   [x+y2,z3+xy];
../singular_texi/pdata.tex(,886) @expansion{} xy*gen(2)+z3*gen(2)+x*gen(1)+y2*gen(1)
../singular_texi/pdata.tex(,887)   [x,x,x];
../singular_texi/pdata.tex(,888) @expansion{} x*gen(3)+x*gen(2)+x*gen(1)
../singular_texi/pdata.tex(,889) @c end example Module_orderings_1 pdata.doc:879
../singular_texi/pdata.tex(,890) @end smallexample
../singular_texi/pdata.tex(,891) 
../singular_texi/pdata.tex(,892) @item (<,c):
../singular_texi/pdata.tex(,893) @cindex c, module ordering
../singular_texi/pdata.tex(,894) @cindex module ordering c
../singular_texi/pdata.tex(,902) @tex
../singular_texi/pdata.tex(,903) $<_m = (<,c)$ denotes the module ordering (giving priority to the coefficients):
../singular_texi/pdata.tex(,904) @end tex
../singular_texi/pdata.tex(,906) @*
../singular_texi/pdata.tex(,908) @tex
../singular_texi/pdata.tex(,909) \quad \quad $x^\alpha e_i <_m x^\beta e_j \Leftrightarrow x^\alpha <
../singular_texi/pdata.tex(,910) x^\beta$ or ($x^\alpha = x^\beta $ and $ i > j$).
../singular_texi/pdata.tex(,911) @end tex
../singular_texi/pdata.tex(,912) 
../singular_texi/pdata.tex(,913) @strong{Example:}
../singular_texi/pdata.tex(,914) @smallexample
../singular_texi/pdata.tex(,915) @c computed example Module_orderings_2 pdata.doc:909 
../singular_texi/pdata.tex(,916)   ring r = 0, (x,y,z), (lp,c);
../singular_texi/pdata.tex(,917)   [x+y2,z3+xy];
../singular_texi/pdata.tex(,918) @expansion{} xy*gen(2)+x*gen(1)+y2*gen(1)+z3*gen(2)
../singular_texi/pdata.tex(,919)   [x,x,x];
../singular_texi/pdata.tex(,920) @expansion{} x*gen(1)+x*gen(2)+x*gen(3)
../singular_texi/pdata.tex(,921) @c end example Module_orderings_2 pdata.doc:909
../singular_texi/pdata.tex(,922) @end smallexample
../singular_texi/pdata.tex(,923) 
../singular_texi/pdata.tex(,924) @item (c,<):
../singular_texi/pdata.tex(,933) @tex
../singular_texi/pdata.tex(,934) $<_m = (c, <)$ denotes the module ordering (giving priority to the component):
../singular_texi/pdata.tex(,935) @end tex
../singular_texi/pdata.tex(,937) @*
../singular_texi/pdata.tex(,939) @tex
../singular_texi/pdata.tex(,940) \quad \quad   $x^\alpha e_i <_m x^\beta e_j \Leftrightarrow i > j$ or ($
../singular_texi/pdata.tex(,941) i = j $ and $ x^\alpha < x^\beta $). 
../singular_texi/pdata.tex(,942) @end tex
../singular_texi/pdata.tex(,943) 
../singular_texi/pdata.tex(,944) @strong{Example:}
../singular_texi/pdata.tex(,945) @smallexample
../singular_texi/pdata.tex(,946) @c computed example Module_orderings_3 pdata.doc:938 
../singular_texi/pdata.tex(,947)   ring r = 0, (x,y,z), (c,lp);
../singular_texi/pdata.tex(,948)   [x+y2,z3+xy];
../singular_texi/pdata.tex(,949) @expansion{} [x+y2,xy+z3]
../singular_texi/pdata.tex(,950)   [x,x,x];
../singular_texi/pdata.tex(,951) @expansion{} [x,x,x]
../singular_texi/pdata.tex(,952) @c end example Module_orderings_3 pdata.doc:938
../singular_texi/pdata.tex(,953) @end smallexample
../singular_texi/pdata.tex(,954) @end table
../singular_texi/pdata.tex(,955) 
../singular_texi/pdata.tex(,960) @tex
../singular_texi/pdata.tex(,961) The output of a vector $v$ in $K[x]^r$ with components $v_1,
../singular_texi/pdata.tex(,962) \ldots, v_r$ has the format $v_1 * gen(1) + \ldots + v_r * gen(r)$
../singular_texi/pdata.tex(,963) @end tex
../singular_texi/pdata.tex(,964) (up to permutation) unless the ordering starts with @code{c}.
../singular_texi/pdata.tex(,968) @tex
../singular_texi/pdata.tex(,969) In this case a vector is written as $[v_1, \ldots, v_r]$.
../singular_texi/pdata.tex(,970) @end tex
../singular_texi/pdata.tex(,971) In all cases @sc{Singular} can read input in both formats.
../singular_texi/pdata.tex(,972) 
../singular_texi/pdata.tex(,973) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,974) @node Matrix orderings, Product orderings, Module orderings, Monomial orderings
../singular_texi/pdata.tex(,975) @subsection Matrix orderings
../singular_texi/pdata.tex(,976) @cindex Matrix orderings
../singular_texi/pdata.tex(,977) @cindex orderings, M
../singular_texi/pdata.tex(,978) @cindex M, ordering
../singular_texi/pdata.tex(,979) 
../singular_texi/pdata.tex(,980) Let 
../singular_texi/pdata.tex(,981) @tex
../singular_texi/pdata.tex(,982) $M$
../singular_texi/pdata.tex(,983) @end tex
../singular_texi/pdata.tex(,987) be an invertible 
../singular_texi/pdata.tex(,988) @tex
../singular_texi/pdata.tex(,989) $(n \times n)$-matrix
../singular_texi/pdata.tex(,990) @end tex
../singular_texi/pdata.tex(,994)  with integer coefficients and
../singular_texi/pdata.tex(,998) @tex
../singular_texi/pdata.tex(,999) $M_1, \ldots, M_n$ the rows of $M$.
../singular_texi/pdata.tex(,1000) @end tex
../singular_texi/pdata.tex(,1001) 
../singular_texi/pdata.tex(,1002) The M-ordering < is defined as follows:
../singular_texi/pdata.tex(,1003) @*
../singular_texi/pdata.tex(,1008) @tex
../singular_texi/pdata.tex(,1009) \quad \quad $x^a < x^b \Leftrightarrow \exists\  1 \leq i \leq n :
../singular_texi/pdata.tex(,1010) M_1 a = \; M_1 b, \ldots, M_{i-1} a = \; M_{i-1} b$ and $M_i a < \; M_i b$.
../singular_texi/pdata.tex(,1011) @end tex
../singular_texi/pdata.tex(,1012) 
../singular_texi/pdata.tex(,1013) Thus,
../singular_texi/pdata.tex(,1018) @tex
../singular_texi/pdata.tex(,1019) $x^a < x^b$
../singular_texi/pdata.tex(,1020) if and only if $M a$ is smaller than $M b$
../singular_texi/pdata.tex(,1021) @end tex
../singular_texi/pdata.tex(,1022) with respect to the lexicographical ordering.
../singular_texi/pdata.tex(,1023) 
../singular_texi/pdata.tex(,1024) The following matrices represent (for 3 variables) the global and
../singular_texi/pdata.tex(,1025) local orderings defined above (note that the matrix is not uniquely determined
../singular_texi/pdata.tex(,1026) by the ordering):
../singular_texi/pdata.tex(,1027) 
../singular_texi/pdata.tex(,1072) @tex
../singular_texi/pdata.tex(,1073) 
../singular_texi/pdata.tex(,1074) $\quad$ lp:
../singular_texi/pdata.tex(,1075) $\left(\matrix{
../singular_texi/pdata.tex(,1076)  1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1077)  0 & 1 & 0 \cr
../singular_texi/pdata.tex(,1078)  0 & 0 & 1 \cr
../singular_texi/pdata.tex(,1079)  }\right)$
../singular_texi/pdata.tex(,1080) \quad dp:
../singular_texi/pdata.tex(,1081) $\left(\matrix{
../singular_texi/pdata.tex(,1082)  1 & 1 & 1 \cr
../singular_texi/pdata.tex(,1083)  0 & 0 &-1 \cr
../singular_texi/pdata.tex(,1084)  0 &-1 & 0 \cr
../singular_texi/pdata.tex(,1085)  }\right)$
../singular_texi/pdata.tex(,1086) \quad Dp:
../singular_texi/pdata.tex(,1087) $\left(\matrix{
../singular_texi/pdata.tex(,1088)  1 & 1 & 1 \cr
../singular_texi/pdata.tex(,1089)  1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1090)  0 & 1 & 0 \cr
../singular_texi/pdata.tex(,1091)  }\right)$
../singular_texi/pdata.tex(,1092) 
../singular_texi/pdata.tex(,1093) $\quad$ wp(1,2,3):
../singular_texi/pdata.tex(,1094) $\left(\matrix{
../singular_texi/pdata.tex(,1095)  1 & 2 & 3 \cr
../singular_texi/pdata.tex(,1096)  0 & 0 &-1 \cr
../singular_texi/pdata.tex(,1097)  0 &-1 & 0 \cr
../singular_texi/pdata.tex(,1098)  }\right)$
../singular_texi/pdata.tex(,1099) \quad Wp(1,2,3):
../singular_texi/pdata.tex(,1100) $\left(\matrix{
../singular_texi/pdata.tex(,1101)  1 & 2 & 3 \cr
../singular_texi/pdata.tex(,1102)  1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1103)  0 & 1 & 0 \cr
../singular_texi/pdata.tex(,1104)  }\right)$
../singular_texi/pdata.tex(,1105) 
../singular_texi/pdata.tex(,1106) $\quad$ ls:
../singular_texi/pdata.tex(,1107) $\left(\matrix{
../singular_texi/pdata.tex(,1108) -1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1109)  0 &-1 & 0 \cr
../singular_texi/pdata.tex(,1110)  0 & 0 &-1 \cr
../singular_texi/pdata.tex(,1111)  }\right)$
../singular_texi/pdata.tex(,1112) \quad ds:
../singular_texi/pdata.tex(,1113) $\left(\matrix{
../singular_texi/pdata.tex(,1114) -1 &-1 &-1 \cr
../singular_texi/pdata.tex(,1115)  0 & 0 &-1 \cr
../singular_texi/pdata.tex(,1116)  0 &-1 & 0 \cr
../singular_texi/pdata.tex(,1117)  }\right)$
../singular_texi/pdata.tex(,1118) \quad Ds:
../singular_texi/pdata.tex(,1119) $\left(\matrix{
../singular_texi/pdata.tex(,1120) -1 &-1 &-1 \cr
../singular_texi/pdata.tex(,1121)  1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1122)  0 & 1 & 0 \cr
../singular_texi/pdata.tex(,1123)  }\right)$
../singular_texi/pdata.tex(,1124) 
../singular_texi/pdata.tex(,1125) $\quad$ ws(1,2,3):
../singular_texi/pdata.tex(,1126) $\left(\matrix{
../singular_texi/pdata.tex(,1127) -1 &-2 &-3 \cr
../singular_texi/pdata.tex(,1128)  0 & 0 &-1 \cr
../singular_texi/pdata.tex(,1129)  0 &-1 & 0 \cr
../singular_texi/pdata.tex(,1130)  }\right)$
../singular_texi/pdata.tex(,1131) \quad Ws(1,2,3):
../singular_texi/pdata.tex(,1132) $\left(\matrix{
../singular_texi/pdata.tex(,1133) -1 &-2 &-3 \cr
../singular_texi/pdata.tex(,1134)  1 & 0 & 0 \cr
../singular_texi/pdata.tex(,1135)  0 & 1 & 0 \cr
../singular_texi/pdata.tex(,1136)  }\right)$
../singular_texi/pdata.tex(,1137) @end tex
../singular_texi/pdata.tex(,1138) 
../singular_texi/pdata.tex(,1139) Product orderings (see next section) represented by  a matrix:
../singular_texi/pdata.tex(,1140) 
../singular_texi/pdata.tex(,1159) @tex
../singular_texi/pdata.tex(,1160) $\quad$ (dp(3), wp(1,2,3)):
../singular_texi/pdata.tex(,1161) $\left(\matrix{
../singular_texi/pdata.tex(,1162) 1&  1&  1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1163) 0&  0&  -1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1164) 0&  -1&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1165) 0&  0&  0&  1&  2&  3 \cr
../singular_texi/pdata.tex(,1166) 0&  0&  0&  0&  0&  -1 \cr
../singular_texi/pdata.tex(,1167) 0&  0&  0&  0&  -1&  0 \cr
../singular_texi/pdata.tex(,1168)  }\right)$
../singular_texi/pdata.tex(,1169) 
../singular_texi/pdata.tex(,1170) $\quad$ (Dp(3), ds(3)):
../singular_texi/pdata.tex(,1171) $\left(\matrix{
../singular_texi/pdata.tex(,1172) 1&  1&  1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1173) 1&  0&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1174) 0&  1&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1175) 0&  0&  0&  -1&  -1&  -1 \cr
../singular_texi/pdata.tex(,1176) 0&  0&  0&  0&  0&  -1 \cr
../singular_texi/pdata.tex(,1177) 0&  0&  0&  0&  -1&  0 \cr
../singular_texi/pdata.tex(,1178)  }\right)$
../singular_texi/pdata.tex(,1179) @end tex
../singular_texi/pdata.tex(,1180) 
../singular_texi/pdata.tex(,1181) Orderings with extra weight vector (see below) represented by  a matrix:
../singular_texi/pdata.tex(,1182) 
../singular_texi/pdata.tex(,1203) @tex
../singular_texi/pdata.tex(,1204) $\quad$ (dp(3), a(1,2,3),dp(3)):
../singular_texi/pdata.tex(,1205) $\left(\matrix{
../singular_texi/pdata.tex(,1206) 1&  1&  1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1207) 0&  0&  -1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1208) 0&  -1&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1209) 0&  0&  0&  1&  2&  3 \cr
../singular_texi/pdata.tex(,1210) 0&  0&  0&  1&  1&  1 \cr
../singular_texi/pdata.tex(,1211) 0&  0&  0&  0&  0&  -1 \cr
../singular_texi/pdata.tex(,1212) 0&  0&  0&  0&  -1&  0 \cr
../singular_texi/pdata.tex(,1213)  }\right)$
../singular_texi/pdata.tex(,1214) 
../singular_texi/pdata.tex(,1215) $\quad$ (a(1,2,3,4,5),Dp(3), ds(3)):
../singular_texi/pdata.tex(,1216) $\left(\matrix{
../singular_texi/pdata.tex(,1217) 1&  2&  3&  4&  5&  0 \cr
../singular_texi/pdata.tex(,1218) 1&  1&  1&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1219) 1&  0&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1220) 0&  1&  0&  0&  0&  0 \cr
../singular_texi/pdata.tex(,1221) 0&  0&  0&  -1&  -1&  -1 \cr
../singular_texi/pdata.tex(,1222) 0&  0&  0&  0&  0 & -1 \cr
../singular_texi/pdata.tex(,1223) 0&  0&  0&  0&  -1&  0 \cr
../singular_texi/pdata.tex(,1224)  }\right)$
../singular_texi/pdata.tex(,1225) @end tex
../singular_texi/pdata.tex(,1226) 
../singular_texi/pdata.tex(,1227) @*@strong{Example}:
../singular_texi/pdata.tex(,1228) @smallexample
../singular_texi/pdata.tex(,1229) @c computed example Matrix_orderings pdata.doc:1219 
../singular_texi/pdata.tex(,1230)   ring r = 0, (x,y,z), M(1, 0, 0,   0, 1, 0,   0, 0, 1);
../singular_texi/pdata.tex(,1231) @c end example Matrix_orderings pdata.doc:1219
../singular_texi/pdata.tex(,1232) @end smallexample
../singular_texi/pdata.tex(,1233) @*which may also be written as:
../singular_texi/pdata.tex(,1234) @smallexample
../singular_texi/pdata.tex(,1235) @c computed example Matrix_orderings_1 pdata.doc:1225 
../singular_texi/pdata.tex(,1236)   intmat m[3][3]=1, 0, 0, 0, 1, 0, 0, 0, 1;
../singular_texi/pdata.tex(,1237)   m;
../singular_texi/pdata.tex(,1238) @expansion{} 1,0,0,
../singular_texi/pdata.tex(,1239) @expansion{} 0,1,0,
../singular_texi/pdata.tex(,1240) @expansion{} 0,0,1 
../singular_texi/pdata.tex(,1241)   ring r = 0, (x,y,z), M(m);
../singular_texi/pdata.tex(,1242)   r;
../singular_texi/pdata.tex(,1243) @expansion{} //   characteristic : 0
../singular_texi/pdata.tex(,1244) @expansion{} //   number of vars : 3
../singular_texi/pdata.tex(,1245) @expansion{} //        block   1 : ordering M
../singular_texi/pdata.tex(,1246) @expansion{} //                  : names    x y z 
../singular_texi/pdata.tex(,1247) @expansion{} //                  : weights  1 0 0 
../singular_texi/pdata.tex(,1248) @expansion{} //                  : weights  0 1 0 
../singular_texi/pdata.tex(,1249) @expansion{} //                  : weights  0 0 1 
../singular_texi/pdata.tex(,1250) @expansion{} //        block   2 : ordering C
../singular_texi/pdata.tex(,1251) @c end example Matrix_orderings_1 pdata.doc:1225
../singular_texi/pdata.tex(,1252) @end smallexample
../singular_texi/pdata.tex(,1253) 
../singular_texi/pdata.tex(,1254) If the ring has 
../singular_texi/pdata.tex(,1255) @tex
../singular_texi/pdata.tex(,1256) $n$
../singular_texi/pdata.tex(,1257) @end tex
../singular_texi/pdata.tex(,1261) variables and the matrix contains less than 
../singular_texi/pdata.tex(,1262) @tex
../singular_texi/pdata.tex(,1263) $n \times n$
../singular_texi/pdata.tex(,1264) @end tex
../singular_texi/pdata.tex(,1268) entries an error message is given, if there are more entries,
../singular_texi/pdata.tex(,1269) the last ones are ignored.
../singular_texi/pdata.tex(,1270) 
../singular_texi/pdata.tex(,1271) @strong{WARNING:} @sc{Singular}
../singular_texi/pdata.tex(,1272) does not check whether the matrix has full rank.   In such a case some
../singular_texi/pdata.tex(,1273) computations might not terminate, others might give a nonsense result.
../singular_texi/pdata.tex(,1274) 
../singular_texi/pdata.tex(,1275) Having these matrix orderings @sc{Singular} can compute standard bases for
../singular_texi/pdata.tex(,1276) any monomial ordering which is compatible with the natural semigroup structure.
../singular_texi/pdata.tex(,1277) In practice the global and local orderings together with block orderings should be
../singular_texi/pdata.tex(,1278) sufficient in most cases. These orderings are faster than the corresponding
../singular_texi/pdata.tex(,1279) matrix orderings, since evaluating a matrix product is time consuming.
../singular_texi/pdata.tex(,1280) 
../singular_texi/pdata.tex(,1281) @c --------------------------------------------------------------------------
../singular_texi/pdata.tex(,1282) @node Product orderings, Extra weight vector, Matrix orderings, Monomial orderings
../singular_texi/pdata.tex(,1283) @subsection Product orderings
../singular_texi/pdata.tex(,1284) @cindex Product orderings
../singular_texi/pdata.tex(,1285) @cindex orderings, product
../singular_texi/pdata.tex(,1286) 
../singular_texi/pdata.tex(,1287) Let
../singular_texi/pdata.tex(,1292) @tex
../singular_texi/pdata.tex(,1293) $x = (x_1, \ldots, x_n)$ and $y = (y_1, \ldots, y_m)$
../singular_texi/pdata.tex(,1294) @end tex
../singular_texi/pdata.tex(,1295) be two ordered sets of variables,
../singular_texi/pdata.tex(,1306) @tex
../singular_texi/pdata.tex(,1307) $<_1$ a monomial
../singular_texi/pdata.tex(,1308) ordering on $K[x]$ and $<_2$ a monomial ordering on $K[y]$.   The product
../singular_texi/pdata.tex(,1309) ordering (or block ordering) $<\ := (<_1,<_2)$ on $K[x,y]$ is the following:
../singular_texi/pdata.tex(,1310) @end tex
../singular_texi/pdata.tex(,1311) @*
../singular_texi/pdata.tex(,1312) @tex
../singular_texi/pdata.tex(,1313) \quad \quad $x^a y^b < x^A y^B \Leftrightarrow x^a <_1 x^A $ or ($x^a =
../singular_texi/pdata.tex(,1314) x^A$ and $y^b <_2 y^B$). 
../singular_texi/pdata.tex(,1315) @end tex
../singular_texi/pdata.tex(,1317) 
../singular_texi/pdata.tex(,1318) Inductively one defines the product ordering of more than two monomial
../singular_texi/pdata.tex(,1319) orderings.
../singular_texi/pdata.tex(,1320) 
../singular_texi/pdata.tex(,1321) In @sc{Singular}, any of the above global orderings, local orderings or matrix
../singular_texi/pdata.tex(,1322) orderings may be combined (in an arbitrary manner and length) to a product
../singular_texi/pdata.tex(,1323) ordering.   E.g., @code{(lp(3), M(1, 2, 3, 1, 1, 1, 1, 0, 0), ds(4),
../singular_texi/pdata.tex(,1324) ws(1,2,3))} 
../singular_texi/pdata.tex(,1325) defines: @code{lp} on the first 3 variables, the matrix ordering
../singular_texi/pdata.tex(,1326) @code{M(1, 2, 3, 1, 1, 1, 1, 0, 0)} on the next 3 variables,
../singular_texi/pdata.tex(,1327) @code{ds} on the next 4 variables and
../singular_texi/pdata.tex(,1328) @code{ws(1,2,3)} on the last 3 variables.
../singular_texi/pdata.tex(,1329) 
../singular_texi/pdata.tex(,1330) @c --------------------------------------------------------------
../singular_texi/pdata.tex(,1331) @node Extra weight vector,  , Product orderings, Monomial orderings
../singular_texi/pdata.tex(,1332) @subsection Extra weight vector
../singular_texi/pdata.tex(,1333) @cindex Extra weight vector
../singular_texi/pdata.tex(,1334) @cindex a, ordering
../singular_texi/pdata.tex(,1335) @cindex orderings, a 
../singular_texi/pdata.tex(,1336) 
../singular_texi/pdata.tex(,1340) @tex
../singular_texi/pdata.tex(,1341) ${\tt a}(w_1, \ldots, w_n),\; $
../singular_texi/pdata.tex(,1342) @end tex
../singular_texi/pdata.tex(,1346) @tex
../singular_texi/pdata.tex(,1347) $w_1,\ldots,w_n$
../singular_texi/pdata.tex(,1348) @end tex
../singular_texi/pdata.tex(,1349) any integers (including 0), defines
../singular_texi/pdata.tex(,1353) @tex
../singular_texi/pdata.tex(,1354) $\deg(x^\alpha) = w_1 \alpha_1 + \cdots + w_n\alpha_n$
../singular_texi/pdata.tex(,1355) @end tex
../singular_texi/pdata.tex(,1356) and
../singular_texi/pdata.tex(,1357) @*
../singular_texi/pdata.tex(,1361) @tex
../singular_texi/pdata.tex(,1362)     $$\deg(x^\alpha) < \deg(x^\beta) \Rightarrow x^\alpha < x^\beta,$$
../singular_texi/pdata.tex(,1363) @end tex
../singular_texi/pdata.tex(,1368) @tex
../singular_texi/pdata.tex(,1369)     $$\deg(x^\alpha) > \deg(x^\beta) \Rightarrow x^\alpha > x^\beta. $$
../singular_texi/pdata.tex(,1370) @end tex
../singular_texi/pdata.tex(,1371) @*An extra weight vector does not define a monomial ordering by itself:
../singular_texi/pdata.tex(,1372) it can only be used in combination with other orderings
../singular_texi/pdata.tex(,1373) to insert an extra line of weights into the ordering
../singular_texi/pdata.tex(,1374) matrix.
../singular_texi/pdata.tex(,1375) 
../singular_texi/pdata.tex(,1376) @*@strong{Example}:
../singular_texi/pdata.tex(,1377) @smallexample
../singular_texi/pdata.tex(,1378) ring r = 0, (x,y,z),  (a(1,2,3),wp(4,5,2));
../singular_texi/pdata.tex(,1379) ring s = 0, (x,y,z),  (a(1,2,3),dp);
../singular_texi/pdata.tex(,1380) ring q = 0, (a,b,c,d),(lp(1),a(1,2,3),ds);
../singular_texi/pdata.tex(,1381) @end smallexample
../singular_texi/singular.tex(,163) 
../singular_texi/singular.tex(,164) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,165) @node Mathematical background, SINGULAR libraries, Polynomial data, Top
../singular_texi/singular.tex(,166) @appendix Mathematical background
../singular_texi/singular.tex(,167) @cindex Mathematical background
../singular_texi/math.tex(,1) @comment -*-texinfo-*-
../singular_texi/math.tex(,2) @comment This file was generated by doc2tex.pl from math.doc
../singular_texi/math.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT math.doc INSTEAD
../singular_texi/math.tex(,4) @comment Id: math.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/math.tex(,5) @comment this file contains the mathematical background of Singular
../singular_texi/math.tex(,6) 
../singular_texi/math.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/math.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/math.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/math.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/math.tex(,11) @c ignores the `@ignore').
../singular_texi/math.tex(,24) 
../singular_texi/math.tex(,25) This chapter introduces some of the mathematical notions and definitions used
../singular_texi/math.tex(,26) throughout the manual. It is mostly a collection of the
../singular_texi/math.tex(,27) most prominent definitions and properties. For details, please, refer to
../singular_texi/math.tex(,28) some articles or text books (see @ref{References}).
../singular_texi/math.tex(,29) 
../singular_texi/math.tex(,30) @menu
../singular_texi/math.tex(,31) * Standard bases::
../singular_texi/math.tex(,32) * Hilbert function::
../singular_texi/math.tex(,33) * Syzygies and resolutions::
../singular_texi/math.tex(,34) * Characteristic sets::
../singular_texi/math.tex(,35) * Gauss-Manin connection::
../singular_texi/math.tex(,36) * Toric ideals and integer programming::
../singular_texi/math.tex(,37) * References::
../singular_texi/math.tex(,38) @end menu
../singular_texi/math.tex(,39) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,40) @node Standard bases, Hilbert function, ,Mathematical background
../singular_texi/math.tex(,41) @section Standard bases
../singular_texi/math.tex(,42) @cindex Standard bases
../singular_texi/math.tex(,43) 
../singular_texi/math.tex(,44) @subheading Definition
../singular_texi/math.tex(,45) @tex
../singular_texi/math.tex(,46) Let $R = \hbox{Loc}_< K[\underline{x}]$ and let $I$ be a submodule of $R^r$.
../singular_texi/math.tex(,47) Note that for r=1 this means that $I$ is an ideal in $R$.
../singular_texi/math.tex(,48) Denote by $L(I)$ the submodule of $R^r$ generated by the leading terms 
../singular_texi/math.tex(,49) of elements of $I$, i.e. by $\left\{L(f) \mid f \in I\right\}$.
../singular_texi/math.tex(,50) Then $f_1, \ldots, f_s \in I$ is called a {\bf standard basis} of $I$ 
../singular_texi/math.tex(,51) if $L(f_1), \ldots, L(f_s)$ generate $L(I)$.
../singular_texi/math.tex(,52) @end tex
../singular_texi/math.tex(,60) 
../singular_texi/math.tex(,61) @subheading Properties
../singular_texi/math.tex(,62) @table @asis
../singular_texi/math.tex(,63) @item normal form:
../singular_texi/math.tex(,64) @cindex Normal form
../singular_texi/math.tex(,65) @tex
../singular_texi/math.tex(,66) A function $\hbox{NF} : R^r \times \{G \mid G\ \hbox{ a standard
../singular_texi/math.tex(,67) basis}\} \to R^r, (p,G) \mapsto \hbox{NF}(p|G)$, is called a {\bf normal
../singular_texi/math.tex(,68) form} if for any $p \in R^r$ and any standard basis $G$ the following
../singular_texi/math.tex(,69) holds: if $\hbox{NF}(p|G) \not= 0$ then $L(g)$ does not divide
../singular_texi/math.tex(,70) $L(\hbox{NF}(p|G))$ for all $g \in G$.
../singular_texi/math.tex(,71) 
../singular_texi/math.tex(,72) \noindent
../singular_texi/math.tex(,73) $\hbox{NF}(p|G)$ is called a {\bf normal form of} $p$ {\bf with
../singular_texi/math.tex(,74) respect to} $G$ (note that such a function is not unique).
../singular_texi/math.tex(,75) @end tex
../singular_texi/math.tex(,84) @item ideal membership:
../singular_texi/math.tex(,85) @cindex Ideal membership
../singular_texi/math.tex(,86) @tex
../singular_texi/math.tex(,87) For a standard basis $G$ of $I$ the following holds: 
../singular_texi/math.tex(,88) $f \in I$ if and only if $\hbox{NF}(f,G) = 0$.
../singular_texi/math.tex(,89) @end tex
../singular_texi/math.tex(,94) @item Hilbert function:
../singular_texi/math.tex(,95) @tex
../singular_texi/math.tex(,96) Let \hbox{$I \subseteq K[\underline{x}]^r$} be a homogeneous module, then the Hilbert function
../singular_texi/math.tex(,97) $H_I$ of $I$ (see below)
../singular_texi/math.tex(,98) and the Hilbert function $H_{L(I)}$ of the leading module $L(I)$
../singular_texi/math.tex(,99) coincide, i.e.,
../singular_texi/math.tex(,100) $H_I=H_{L(I)}$.
../singular_texi/math.tex(,101) @end tex
../singular_texi/math.tex(,106) @end table
../singular_texi/math.tex(,107) 
../singular_texi/math.tex(,108) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,109) @node Hilbert function, Syzygies and resolutions, Standard bases, Mathematical background
../singular_texi/math.tex(,110) @section Hilbert function
../singular_texi/math.tex(,111) @cindex Hilbert function
../singular_texi/math.tex(,112) @cindex Hilbert series
../singular_texi/math.tex(,113) @tex
../singular_texi/math.tex(,114) Let M $=\bigoplus_i M_i$ be a graded module over $K[x_1,..,x_n]$ with 
../singular_texi/math.tex(,115) respect to weights $(w_1,..w_n)$.
../singular_texi/math.tex(,116) The {\bf Hilbert function} of $M$, $H_M$, is defined (on the integers) by
../singular_texi/math.tex(,117) $$H_M(k) :=dim_K M_k.$$
../singular_texi/math.tex(,118) The {\bf Hilbert-Poincare series}  of $M$ is the power series
../singular_texi/math.tex(,119) $$\hbox{HP}_M(t) :=\sum_{i=-\infty}^\infty
../singular_texi/math.tex(,120) H_M(i)t^i=\sum_{i=-\infty}^\infty dim_K M_i \cdot t^i.$$
../singular_texi/math.tex(,121) It turns out that $\hbox{HP}_M(t)$ can be written in two useful ways
../singular_texi/math.tex(,122) for weights $(1,..,1)$:
../singular_texi/math.tex(,123) $$\hbox{HP}_M(t)={Q(t)\over (1-t)^n}={P(t)\over (1-t)^{dim(M)}}$$
../singular_texi/math.tex(,124) where $Q(t)$ and $P(t)$ are polynomials in ${\bf Z}[t]$.
../singular_texi/math.tex(,125) $Q(t)$ is called the {\bf first Hilbert series},
../singular_texi/math.tex(,126) and $P(t)$ the {\bf second Hilbert series}.
../singular_texi/math.tex(,127) If \hbox{$P(t)=\sum_{k=0}^N a_k t^k$}, and \hbox{$d = dim(M)$},
../singular_texi/math.tex(,128) then \hbox{$H_M(s)=\sum_{k=0}^N a_k$ ${d+s-k-1}\choose{d-1}$}
../singular_texi/math.tex(,129) (the {\bf Hilbert polynomial}) for $s \ge N$.
../singular_texi/math.tex(,130) @end tex
../singular_texi/math.tex(,156) @*
../singular_texi/math.tex(,157) @*
../singular_texi/math.tex(,158) @tex
../singular_texi/math.tex(,159) Generalizing these to quasihomogeneous modules we get
../singular_texi/math.tex(,160) $$\hbox{HP}_M(t)={Q(t)\over {\Pi_{i=1}^n(1-t^{w_i})}}$$
../singular_texi/math.tex(,161) where $Q(t)$ is a polynomial in ${\bf Z}[t]$.
../singular_texi/math.tex(,162) $Q(t)$ is called the {\bf first (weighted) Hilbert series} of M.
../singular_texi/math.tex(,163) @end tex
../singular_texi/math.tex(,172) 
../singular_texi/math.tex(,173) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,174) @node Syzygies and resolutions, Characteristic sets, Hilbert function, Mathematical background
../singular_texi/math.tex(,175) @section Syzygies and resolutions
../singular_texi/math.tex(,176) @cindex Syzygies and resolutions
../singular_texi/math.tex(,177) 
../singular_texi/math.tex(,178) @subheading Syzygies
../singular_texi/math.tex(,179) @tex
../singular_texi/math.tex(,180) Let $R$ be a quotient of $\hbox{Loc}_< K[\underline{x}]$ and let \hbox{$I=(g_1, ..., g_s)$} be a submodule of $R^r$.
../singular_texi/math.tex(,181) Then the {\bf module of syzygies} (or {\bf 1st syzygy module}, {\bf module of relations}) of $I$, syz($I$), is defined to be the kernel of the map \hbox{$R^s \rightarrow R^r,\; \sum_{i=1}^s w_ie_i \mapsto \sum_{i=1}^s w_ig_i$.}
../singular_texi/math.tex(,182) @end tex
../singular_texi/math.tex(,192) 
../singular_texi/math.tex(,193) The @strong{k-th syzygy module} is defined inductively to be the module
../singular_texi/math.tex(,194) of syzygies of the
../singular_texi/math.tex(,195) @tex
../singular_texi/math.tex(,196) $(k-1)$-st 
../singular_texi/math.tex(,197) @end tex
../singular_texi/math.tex(,201)  syzygy module.
../singular_texi/math.tex(,202) 
../singular_texi/math.tex(,203) @tex
../singular_texi/math.tex(,204) Note, that the syzygy modules of $I$ depend on a choice of generators $g_1, ..., g_s$.
../singular_texi/math.tex(,205) But one can show that they depend on $I$ uniquely up to direct summands.
../singular_texi/math.tex(,206) @end tex
../singular_texi/math.tex(,211) 
../singular_texi/math.tex(,212) @table @code
../singular_texi/math.tex(,213) @item @strong{Example:}
../singular_texi/math.tex(,214) @smallexample
../singular_texi/math.tex(,215) @c reused example Syzygies math.doc:213 
../singular_texi/math.tex(,216)   ring R= 0,(u,v,x,y,z),dp;
../singular_texi/math.tex(,217)   ideal i=ux, vx, uy, vy;
../singular_texi/math.tex(,218)   print(syz(i));
../singular_texi/math.tex(,219) @expansion{} -y,0, -v,0, 
../singular_texi/math.tex(,220) @expansion{} 0, -y,u, 0, 
../singular_texi/math.tex(,221) @expansion{} x, 0, 0, -v,
../singular_texi/math.tex(,222) @expansion{} 0, x, 0, u  
../singular_texi/math.tex(,223) @c end example Syzygies math.doc:213
../singular_texi/math.tex(,224) @end smallexample
../singular_texi/math.tex(,225) @end table
../singular_texi/math.tex(,226) 
../singular_texi/math.tex(,227) @subheading Free resolutions
../singular_texi/math.tex(,228) @tex
../singular_texi/math.tex(,229) Let $I=(g_1,...,g_s)\subseteq R^r$ and $M= R^r/I$.
../singular_texi/math.tex(,230) A {\bf free resolution of $M$} is a long exact sequence
../singular_texi/math.tex(,231) $$...\longrightarrow F_2 \buildrel{A_2}\over{\longrightarrow} F_1
../singular_texi/math.tex(,232) \buildrel{A_1}\over{\longrightarrow} F_0\longrightarrow M\longrightarrow
../singular_texi/math.tex(,233) 0,$$
../singular_texi/math.tex(,234) @end tex
../singular_texi/math.tex(,242) @*where the columns of the matrix
../singular_texi/math.tex(,243) @tex
../singular_texi/math.tex(,244) $A_1$
../singular_texi/math.tex(,245) @end tex
../singular_texi/math.tex(,249) generate 
../singular_texi/math.tex(,253) @tex
../singular_texi/math.tex(,254) $I$
../singular_texi/math.tex(,255) @end tex
../singular_texi/math.tex(,256) . Note, that resolutions need not to be finite (i.e., of
../singular_texi/math.tex(,257) finite length). The Hilbert Syzygy Theorem states, that for 
../singular_texi/math.tex(,258) @tex
../singular_texi/math.tex(,259) $R=\hbox{Loc}_< K[\underline{x}]$
../singular_texi/math.tex(,260) @end tex
../singular_texi/math.tex(,264) there exists a ("minimal") resolution of length not exceeding the number of
../singular_texi/math.tex(,265) variables.
../singular_texi/math.tex(,266) 
../singular_texi/math.tex(,267) @table @code
../singular_texi/math.tex(,268) @item @strong{Example:}
../singular_texi/math.tex(,269) @smallexample
../singular_texi/math.tex(,270) @c reused example Free_resolutions math.doc:257 
../singular_texi/math.tex(,271)   ring R= 0,(u,v,x,y,z),dp;
../singular_texi/math.tex(,272)   ideal I = ux, vx, uy, vy;
../singular_texi/math.tex(,273)   resolution resI = mres(I,0); resI;
../singular_texi/math.tex(,274) @expansion{}  1      4      4      1      
../singular_texi/math.tex(,275) @expansion{} R <--  R <--  R <--  R
../singular_texi/math.tex(,276) @expansion{} 
../singular_texi/math.tex(,277) @expansion{} 0      1      2      3      
../singular_texi/math.tex(,278) @expansion{} 
../singular_texi/math.tex(,279)   // The matrix A_1 is given by
../singular_texi/math.tex(,280)   print(matrix(resI[1]));
../singular_texi/math.tex(,281) @expansion{} vy,uy,vx,ux
../singular_texi/math.tex(,282)   // We see that the columns of A_1 generate I.
../singular_texi/math.tex(,283)   // The matrix A_2 is given by
../singular_texi/math.tex(,284)   print(matrix(resI[3]));
../singular_texi/math.tex(,285) @expansion{} u, 
../singular_texi/math.tex(,286) @expansion{} -v,
../singular_texi/math.tex(,287) @expansion{} -x,
../singular_texi/math.tex(,288) @expansion{} y  
../singular_texi/math.tex(,289) @c end example Free_resolutions math.doc:257
../singular_texi/math.tex(,290) @end smallexample
../singular_texi/math.tex(,291) @end table
../singular_texi/math.tex(,292) 
../singular_texi/math.tex(,293) @subheading Betti numbers and regularity
../singular_texi/math.tex(,294) @cindex Betti number
../singular_texi/math.tex(,295) @cindex regularity
../singular_texi/math.tex(,296) @tex
../singular_texi/math.tex(,297) Let $R$ be a graded ring (e.g., $R = \hbox{Loc}_< K[\underline{x}]$) and
../singular_texi/math.tex(,298) let $I \subset R^r$ be a graded submodule. Let
../singular_texi/math.tex(,299) $$
../singular_texi/math.tex(,300)   R^r = \bigoplus_a R\cdot e_{a,0} \buildrel A_1 \over \longleftarrow
../singular_texi/math.tex(,301)         \bigoplus_a R\cdot e_{a,1} \longleftarrow \ldots \longleftarrow
../singular_texi/math.tex(,302)         \bigoplus_a R\cdot e_{a,n} \longleftarrow 0
../singular_texi/math.tex(,303) $$
../singular_texi/math.tex(,304) be a minimal free resolution of $R^n/I$ considered with homogeneous maps
../singular_texi/math.tex(,305) of degree 0. Then the {\bf graded Betti number} $b_{i,j}$ of $R^r/I$ is
../singular_texi/math.tex(,306) the minimal number of generators $e_{a,j}$ in degree $i+j$ of the $j$-th
../singular_texi/math.tex(,307) syzygy module of $R^r/I$ (i.e., the $(j-1)$-st syzygy module of
../singular_texi/math.tex(,308) $I$). Note, that by definition the $0$-th syzygy module of $R^r/I$ is $R^r$
../singular_texi/math.tex(,309) and the 1st syzygy module of $R^r/I$ is $I$.
../singular_texi/math.tex(,310) @end tex
../singular_texi/math.tex(,325) 
../singular_texi/math.tex(,326) The @strong{regularity} of 
../singular_texi/math.tex(,330) @tex
../singular_texi/math.tex(,331) $I$
../singular_texi/math.tex(,332) @end tex
../singular_texi/math.tex(,333)  is the smallest integer 
../singular_texi/math.tex(,337) @tex
../singular_texi/math.tex(,338) $s$
../singular_texi/math.tex(,339) @end tex
../singular_texi/math.tex(,340) 
../singular_texi/math.tex(,341) such that
../singular_texi/math.tex(,342) @tex
../singular_texi/math.tex(,343) $$
../singular_texi/math.tex(,344)     \hbox{deg}(e_{a,j}) \le s+j-1 \quad \hbox{for all $j$.}
../singular_texi/math.tex(,345) $$
../singular_texi/math.tex(,346) @end tex
../singular_texi/math.tex(,352) 
../singular_texi/math.tex(,353) @table @code
../singular_texi/math.tex(,354) @item @strong{Example:}
../singular_texi/math.tex(,355) @smallexample
../singular_texi/math.tex(,356) @c reused example Betti_numbers_and_regularity math.doc:319 
../singular_texi/math.tex(,357)   ring R= 0,(u,v,x,y,z),dp;
../singular_texi/math.tex(,358)   ideal I = ux, vx, uy, vy;
../singular_texi/math.tex(,359)   resolution resI = mres(I,0); resI;
../singular_texi/math.tex(,360) @expansion{}  1      4      4      1      
../singular_texi/math.tex(,361) @expansion{} R <--  R <--  R <--  R
../singular_texi/math.tex(,362) @expansion{} 
../singular_texi/math.tex(,363) @expansion{} 0      1      2      3      
../singular_texi/math.tex(,364) @expansion{} 
../singular_texi/math.tex(,365)   // the betti number:
../singular_texi/math.tex(,366)   print(betti(resI), "betti");
../singular_texi/math.tex(,367) @expansion{}            0     1     2     3
../singular_texi/math.tex(,368) @expansion{} ------------------------------
../singular_texi/math.tex(,369) @expansion{}     0:     1     -     -     -
../singular_texi/math.tex(,370) @expansion{}     1:     -     4     4     1
../singular_texi/math.tex(,371) @expansion{} ------------------------------
../singular_texi/math.tex(,372) @expansion{} total:     1     4     4     1
../singular_texi/math.tex(,373)   // the regularity:
../singular_texi/math.tex(,374)   regularity(resI);
../singular_texi/math.tex(,375) @expansion{} 2
../singular_texi/math.tex(,376) @c end example Betti_numbers_and_regularity math.doc:319
../singular_texi/math.tex(,377) @end smallexample
../singular_texi/math.tex(,378) @end table
../singular_texi/math.tex(,379) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,380) @node Characteristic sets, Gauss-Manin connection, Syzygies and resolutions, Mathematical background
../singular_texi/math.tex(,381) @section Characteristic sets
../singular_texi/math.tex(,382) @cindex Characteristic sets
../singular_texi/math.tex(,383) 
../singular_texi/math.tex(,384) @tex
../singular_texi/math.tex(,385) Let $<$ be the lexicographical ordering on $R=K[x_1,...,x_n]$ with $x_1
../singular_texi/math.tex(,386) < ... < x_n$.
../singular_texi/math.tex(,387) For $f \in R$ let lvar($f$) (the leading variable of $f$) be the largest
../singular_texi/math.tex(,388) variable in $f$,
../singular_texi/math.tex(,389) i.e., if $f=a_s(x_1,...,x_{k-1})x_k^s+...+a_0(x_1,...,x_{k-1})$ for some
../singular_texi/math.tex(,390) $k \leq n$ then lvar$(f)=x_k$.
../singular_texi/math.tex(,391) 
../singular_texi/math.tex(,392) Moreover, let
../singular_texi/math.tex(,393) \hbox{ini}$(f):=a_s(x_1,...,x_{k-1})$. The pseudo remainder
../singular_texi/math.tex(,394) $r=\hbox{prem}(g,f)$ of $g$ with respect to $f$ is
../singular_texi/math.tex(,395) defined by the equality $\hbox{ini}(f)^a\cdot g = qf+r$ with
../singular_texi/math.tex(,396) $\hbox{deg}_{lvar(f)}(r)<\hbox{deg}_{lvar(f)}(f)$ and $a$
../singular_texi/math.tex(,397) minimal.
../singular_texi/math.tex(,398) 
../singular_texi/math.tex(,399) A set $T=\{f_1,...,f_r\} \subset R$ is called triangular if
../singular_texi/math.tex(,400) $\hbox{lvar}(f_1)<...<\hbox{lvar}(f_r)$. Moreover, let $ U \subset T $,
../singular_texi/math.tex(,401) then $(T,U)$ is called a triangular system, if $T$ is a triangular set
../singular_texi/math.tex(,402) such that $\hbox{ini}(T)$ does not vanish on $V(T) \setminus V(U)
../singular_texi/math.tex(,403) (=:V(T\setminus U))$.
../singular_texi/math.tex(,404) 
../singular_texi/math.tex(,405) $T$ is called irreducible if for every $i$ there are no
../singular_texi/math.tex(,406) $d_i$,$f_i'$,$f_i''$ such that
../singular_texi/math.tex(,407) $$   \hbox{lvar}(d_i)<\hbox{lvar}(f_i) =
../singular_texi/math.tex(,408) \hbox{lvar}(f_i')=\hbox{lvar}(f_i''),$$
../singular_texi/math.tex(,409) $$   0 \not\in \hbox{prem}(\{ d_i, \hbox{ini}(f_i'),
../singular_texi/math.tex(,410) \hbox{ini}(f_i'')\},\{ f_1,...,f_{i-1}\}),$$
../singular_texi/math.tex(,411) $$\hbox{prem}(d_if_i-f_i'f_i'',\{f_1,...,f_{i-1}\})=0.$$
../singular_texi/math.tex(,412) Furthermore, $(T,U)$ is called irreducible if $T$ is irreducible.
../singular_texi/math.tex(,413) 
../singular_texi/math.tex(,414) The main result on triangular sets is the following:
../singular_texi/math.tex(,415) let $G=\{g_1,...,g_s\} \subset R$ then there are irreducible triangular sets $T_1,...,T_l$
../singular_texi/math.tex(,416) such that $V(G)=\bigcup_{i=1}^{l}(V(T_i\setminus I_i))$
../singular_texi/math.tex(,417) where $I_i=\{\hbox{ini}(f) \mid f \in T_i \}$. Such a set
../singular_texi/math.tex(,418) $\{T_1,...,T_l\}$ is called an {\bf irreducible characteristic series} of
../singular_texi/math.tex(,419) the ideal $(G)$.
../singular_texi/math.tex(,420) @end tex
../singular_texi/math.tex(,456) 
../singular_texi/math.tex(,457) @table @code
../singular_texi/math.tex(,458) @item @strong{Example:}
../singular_texi/math.tex(,459) @smallexample
../singular_texi/math.tex(,460) @c reused example Characteristic_sets math.doc:411 
../singular_texi/math.tex(,461)   ring R= 0,(x,y,z,u),dp;
../singular_texi/math.tex(,462)   ideal i=-3zu+y2-2x+2,
../singular_texi/math.tex(,463)           -3x2u-4yz-6xz+2y2+3xy,
../singular_texi/math.tex(,464)           -3z2u-xu+y2z+y;
../singular_texi/math.tex(,465)   print(char_series(i));
../singular_texi/math.tex(,466) @expansion{} _[1,1],3x2z-y2+2yz,3x2u-3xy-2y2+2yu,
../singular_texi/math.tex(,467) @expansion{} x,     -y+2z,      -2y2+3yu-4       
../singular_texi/math.tex(,468) @c end example Characteristic_sets math.doc:411
../singular_texi/math.tex(,469) @end smallexample
../singular_texi/math.tex(,470) @end table
../singular_texi/math.tex(,471) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,472) @node Gauss-Manin connection, Toric ideals and integer programming, Characteristic sets, Mathematical background
../singular_texi/math.tex(,473) @section Gauss-Manin connection
../singular_texi/math.tex(,474) @cindex Gauss-Manin connection
../singular_texi/math.tex(,475) 
../singular_texi/math.tex(,476) @c the following text contain too much math code, so there are
../singular_texi/math.tex(,477) @c tex and info versions of it. It end just before the introducing text
../singular_texi/math.tex(,478) @c to the first example.
../singular_texi/math.tex(,479) 
../singular_texi/math.tex(,480) @tex
../singular_texi/math.tex(,481) Let $f\colon(C^{n+1},0)\rightarrow(C,0)$ be a complex isolated hypersurface singularity given by a polynomial with algebraic coefficients which we also denote by $f$.
../singular_texi/math.tex(,482) Let $O=C[x_0,\ldots,x_n]_{(x_0,\ldots,x_n)}$ be the local ring at the origin and $J_f$ the Jacobian ideal of $f$.
../singular_texi/math.tex(,483) 
../singular_texi/math.tex(,484) A {\bf Milnor representative} of $f$ defines a differentiable fibre bundle over the punctured disc with fibres of homotopy type of $\mu$ $n$-spheres.
../singular_texi/math.tex(,485) The $n$-th cohomology bundle is a flat vector bundle of dimension $n$ and carries a natural flat connection with covariant derivative $\partial_t$.
../singular_texi/math.tex(,486) The {\bf monodromy operator} is the action of a positively oriented generator of the fundamental group of the puctured disc on the Milnor fibre.
../singular_texi/math.tex(,487) Sections in the cohomology bundle of {\bf moderate growth} at $0$ form a regular $D=C\{t\}[\partial_t]$-module $G$, the {\bf Gauss-Manin connection}.
../singular_texi/math.tex(,488) 
../singular_texi/math.tex(,489) By integrating along flat multivalued families of cycles, one can consider fibrewise global holomorphic differential forms as elements of $G$.
../singular_texi/math.tex(,490) This factors through an inclusion of the {\bf Brieskorn lattice} $H'':=\Omega^{n+1}_{C^{n+1},0}/df\wedge d\Omega^{n-1}_{C^{n+1},0}$ in $G$.
../singular_texi/math.tex(,491) 
../singular_texi/math.tex(,492) The $D$-module structure defines the {\bf V-filtration} $V$ on $G$ by $V^\alpha:=\sum_{\beta\ge\alpha}C\{t\}ker(t\partial_t-\beta)^{n+1}$.
../singular_texi/math.tex(,493) The Brieskorn lattice defines the {\bf Hodge filtration} $F$ on $G$ by $F_k=\partial_t^kH''$ which comes from the {\bf mixed Hodge structure} on the Milnor fibre.
../singular_texi/math.tex(,494) Note that $F_{-1}=H'$.
../singular_texi/math.tex(,495) 
../singular_texi/math.tex(,496) The induced V-filtration on the Brieskorn lattice determines the {\bf singularity spectrum} $Sp$ by $Sp(\alpha):=\dim_CGr_V^\alpha Gr^F_0G$.
../singular_texi/math.tex(,497) The spectrum consists of $\mu$ rational numbers $\alpha_1,\dots,\alpha_\mu$ such that $e^{2\pi i\alpha_1},\dots,e^{2\pi i\alpha_\mu}$ are the eigenvalues of the monodromy.
../singular_texi/math.tex(,498) These {\bf spectral numbers} lie in the open interval $(-1,n)$, symmetric about the midpoint $(n-1)/2$.
../singular_texi/math.tex(,499) 
../singular_texi/math.tex(,500) The spectrum is constant under $\mu$-constant deformations and has the following semicontinuity property:
../singular_texi/math.tex(,501) The number of spectral numbers in an interval $(a,a+1]$ of all singularities of a small deformation of $f$ is greater or equal to that of f in this interval.
../singular_texi/math.tex(,502) For semiquasihomogeneous singularities, this also holds for intervals of the form $(a,a+1)$.
../singular_texi/math.tex(,503) 
../singular_texi/math.tex(,504) Two given isolated singularities $f$ and $g$ determine two spectra and from these spectra we get an integer.
../singular_texi/math.tex(,505) This integer is the maximal positive integer $k$ such that the semicontinuity holds for the spectrum of $f$ and $k$ times the spectrum of $g$.
../singular_texi/math.tex(,506) These numbers give bounds for the maximal number of isolated singularities of a specific type on a hypersurface $X\subset{P}^n$ of degree $d$: 
../singular_texi/math.tex(,507) such a hypersurface has a smooth hyperplane section, and the complement is a small deformation of a cone over this hyperplane section.
../singular_texi/math.tex(,508) The cone itself being a $\mu$-constant deformation of $x_0^d+\dots+x_n^d=0$, the singularities are bounded by the spectrum of $x_0^d+\dots+x_n^d$.
../singular_texi/math.tex(,509) 
../singular_texi/math.tex(,510) Using the library {\tt gaussman.lib} one can compute the {\bf monodromy}, the V-filtration on $H''/H'$, and the spectrum.
../singular_texi/math.tex(,511) @end tex
../singular_texi/math.tex(,512) 
../singular_texi/math.tex(,545) 
../singular_texi/math.tex(,546) Let us consider as an example 
../singular_texi/math.tex(,550) @tex
../singular_texi/math.tex(,551) $f=x^5+x^2y^2+y^5$
../singular_texi/math.tex(,552) @end tex
../singular_texi/math.tex(,553) .
../singular_texi/math.tex(,554) First, we compute a matrix 
../singular_texi/math.tex(,558) @tex
../singular_texi/math.tex(,559) $M$
../singular_texi/math.tex(,560) @end tex
../singular_texi/math.tex(,561)  such that
../singular_texi/math.tex(,562) @tex
../singular_texi/math.tex(,563) $\exp(2\pi iM)$
../singular_texi/math.tex(,564) @end tex
../singular_texi/math.tex(,568) is a monodromy matrix of 
../singular_texi/math.tex(,572) @tex
../singular_texi/math.tex(,573) $f$
../singular_texi/math.tex(,574) @end tex
../singular_texi/math.tex(,575)  and the Jordan normal form of 
../singular_texi/math.tex(,579) @tex
../singular_texi/math.tex(,580) $M$
../singular_texi/math.tex(,581) @end tex
../singular_texi/math.tex(,582) :
../singular_texi/math.tex(,583) @smallexample
../singular_texi/math.tex(,584) @c reused example Gauss-Manin_connection math.doc:505 
../singular_texi/math.tex(,585)   LIB "gaussman.lib";
../singular_texi/math.tex(,586)   ring R=0,(x,y),ds;
../singular_texi/math.tex(,587)   poly f=x5+x2y2+y5;
../singular_texi/math.tex(,588)   list l=monodromy(f);
../singular_texi/math.tex(,589)   matrix M=jordanmatrix(l[1],l[2],l[3]);
../singular_texi/math.tex(,590)   print(M);
../singular_texi/math.tex(,591) @expansion{} 1/2,0,  0,   0,   0,   0,   0,0,    0,    0,    0,   
../singular_texi/math.tex(,592) @expansion{} 1,  1/2,0,   0,   0,   0,   0,0,    0,    0,    0,   
../singular_texi/math.tex(,593) @expansion{} 0,  0,  7/10,0,   0,   0,   0,0,    0,    0,    0,   
../singular_texi/math.tex(,594) @expansion{} 0,  0,  0,   7/10,0,   0,   0,0,    0,    0,    0,   
../singular_texi/math.tex(,595) @expansion{} 0,  0,  0,   0,   9/10,0,   0,0,    0,    0,    0,   
../singular_texi/math.tex(,596) @expansion{} 0,  0,  0,   0,   0,   9/10,0,0,    0,    0,    0,   
../singular_texi/math.tex(,597) @expansion{} 0,  0,  0,   0,   0,   0,   1,0,    0,    0,    0,   
../singular_texi/math.tex(,598) @expansion{} 0,  0,  0,   0,   0,   0,   0,11/10,0,    0,    0,   
../singular_texi/math.tex(,599) @expansion{} 0,  0,  0,   0,   0,   0,   0,0,    11/10,0,    0,   
../singular_texi/math.tex(,600) @expansion{} 0,  0,  0,   0,   0,   0,   0,0,    0,    13/10,0,   
../singular_texi/math.tex(,601) @expansion{} 0,  0,  0,   0,   0,   0,   0,0,    0,    0,    13/10
../singular_texi/math.tex(,602) @c end example Gauss-Manin_connection math.doc:505
../singular_texi/math.tex(,603) @end smallexample
../singular_texi/math.tex(,604) 
../singular_texi/math.tex(,605) Now, we compute the V-filtration on 
../singular_texi/math.tex(,609) @tex
../singular_texi/math.tex(,610) $H''/H'$
../singular_texi/math.tex(,611) @end tex
../singular_texi/math.tex(,612)  and the spectrum:
../singular_texi/math.tex(,613) @smallexample
../singular_texi/math.tex(,614) @c reused example Gauss-Manin_connection_1 math.doc:517 
../singular_texi/math.tex(,615)   LIB "gaussman.lib";
../singular_texi/math.tex(,616)   ring R=0,(x,y),ds;
../singular_texi/math.tex(,617)   poly f=x5+x2y2+y5;
../singular_texi/math.tex(,618)   list l=vfilt(f);
../singular_texi/math.tex(,619)   print(l[1]);
../singular_texi/math.tex(,620) @expansion{} -1/2,
../singular_texi/math.tex(,621) @expansion{} -3/10,
../singular_texi/math.tex(,622) @expansion{} -1/10,
../singular_texi/math.tex(,623) @expansion{} 0,
../singular_texi/math.tex(,624) @expansion{} 1/10,
../singular_texi/math.tex(,625) @expansion{} 3/10,
../singular_texi/math.tex(,626) @expansion{} 1/2
../singular_texi/math.tex(,627)   print(l[2]);
../singular_texi/math.tex(,628) @expansion{} 1,2,2,1,2,2,1
../singular_texi/math.tex(,629)   print(l[3]);
../singular_texi/math.tex(,630) @expansion{} [1]:
../singular_texi/math.tex(,631) @expansion{}    _[1]=gen(11)
../singular_texi/math.tex(,632) @expansion{} [2]:
../singular_texi/math.tex(,633) @expansion{}    _[1]=gen(10)
../singular_texi/math.tex(,634) @expansion{}    _[2]=gen(6)
../singular_texi/math.tex(,635) @expansion{} [3]:
../singular_texi/math.tex(,636) @expansion{}    _[1]=gen(9)
../singular_texi/math.tex(,637) @expansion{}    _[2]=gen(4)
../singular_texi/math.tex(,638) @expansion{} [4]:
../singular_texi/math.tex(,639) @expansion{}    _[1]=gen(5)
../singular_texi/math.tex(,640) @expansion{} [5]:
../singular_texi/math.tex(,641) @expansion{}    _[1]=gen(3)
../singular_texi/math.tex(,642) @expansion{}    _[2]=gen(8)
../singular_texi/math.tex(,643) @expansion{} [6]:
../singular_texi/math.tex(,644) @expansion{}    _[1]=gen(2)
../singular_texi/math.tex(,645) @expansion{}    _[2]=gen(7)
../singular_texi/math.tex(,646) @expansion{} [7]:
../singular_texi/math.tex(,647) @expansion{}    _[1]=gen(1)
../singular_texi/math.tex(,648)   print(l[4]);
../singular_texi/math.tex(,649) @expansion{} y5,
../singular_texi/math.tex(,650) @expansion{} y4,
../singular_texi/math.tex(,651) @expansion{} y3,
../singular_texi/math.tex(,652) @expansion{} y2,
../singular_texi/math.tex(,653) @expansion{} xy,
../singular_texi/math.tex(,654) @expansion{} y,
../singular_texi/math.tex(,655) @expansion{} x4,
../singular_texi/math.tex(,656) @expansion{} x3,
../singular_texi/math.tex(,657) @expansion{} x2,
../singular_texi/math.tex(,658) @expansion{} x,
../singular_texi/math.tex(,659) @expansion{} 1
../singular_texi/math.tex(,660) @c end example Gauss-Manin_connection_1 math.doc:517
../singular_texi/math.tex(,661) @end smallexample
../singular_texi/math.tex(,662) Here @code{l[1]} contains the spectral numbers, @code{l[2]} the corresponding multiplicities, @code{l[3]} a 
../singular_texi/math.tex(,666) @tex
../singular_texi/math.tex(,667) $C$
../singular_texi/math.tex(,668) @end tex
../singular_texi/math.tex(,669) -basis of the V-filtration on 
../singular_texi/math.tex(,673) @tex
../singular_texi/math.tex(,674) $H''/H'$
../singular_texi/math.tex(,675) @end tex
../singular_texi/math.tex(,676)  in terms of the monomial basis of
../singular_texi/math.tex(,677) @tex
../singular_texi/math.tex(,678) $O/J_f\cong H''/H'$
../singular_texi/math.tex(,679) @end tex
../singular_texi/math.tex(,683) in @code{l[4]}.
../singular_texi/math.tex(,684) 
../singular_texi/math.tex(,685) @tex
../singular_texi/math.tex(,686) If the principal part of $f$ is $C$-nondegenerate, one can compute the spectrum using the library {\tt spectrum.lib}.
../singular_texi/math.tex(,687) In this case, the V-filtration on $H''$ coincides with the Newton-filtration on $H''$ which allows to compute the spectrum more efficiently.
../singular_texi/math.tex(,688) @end tex
../singular_texi/math.tex(,689) 
../singular_texi/math.tex(,694) 
../singular_texi/math.tex(,695) Let us calculate one specific example, the maximal number 
../singular_texi/math.tex(,696) of triple points of type
../singular_texi/math.tex(,697) @tex
../singular_texi/math.tex(,698) $\tilde{E}_6$ on a surface $X\subset{P}^3$
../singular_texi/math.tex(,699) @end tex
../singular_texi/math.tex(,703) of degree seven.
../singular_texi/math.tex(,704) This calculation can be done over the rationals.
../singular_texi/math.tex(,705) So choose a local ordering on 
../singular_texi/math.tex(,709) @tex
../singular_texi/math.tex(,710) $Q[x,y,z]$
../singular_texi/math.tex(,711) @end tex
../singular_texi/math.tex(,712) . Here we take the
../singular_texi/math.tex(,713) negative degree lexicographical ordering which is denoted
../singular_texi/math.tex(,714) @code{ds} in @sc{Singular}:
../singular_texi/math.tex(,715) 
../singular_texi/math.tex(,716) @smallexample
../singular_texi/math.tex(,717) @c reused example Gauss-Manin_connection_2 math.doc:562 
../singular_texi/math.tex(,718) ring r=0,(x,y,z),ds;
../singular_texi/math.tex(,719) LIB "spectrum.lib";
../singular_texi/math.tex(,720) poly f=x^7+y^7+z^7;
../singular_texi/math.tex(,721) list s1=spectrumnd( f );
../singular_texi/math.tex(,722) s1;
../singular_texi/math.tex(,723) @expansion{} [1]:
../singular_texi/math.tex(,724) @expansion{}    _[1]=-4/7
../singular_texi/math.tex(,725) @expansion{}    _[2]=-3/7
../singular_texi/math.tex(,726) @expansion{}    _[3]=-2/7
../singular_texi/math.tex(,727) @expansion{}    _[4]=-1/7
../singular_texi/math.tex(,728) @expansion{}    _[5]=0
../singular_texi/math.tex(,729) @expansion{}    _[6]=1/7
../singular_texi/math.tex(,730) @expansion{}    _[7]=2/7
../singular_texi/math.tex(,731) @expansion{}    _[8]=3/7
../singular_texi/math.tex(,732) @expansion{}    _[9]=4/7
../singular_texi/math.tex(,733) @expansion{}    _[10]=5/7
../singular_texi/math.tex(,734) @expansion{}    _[11]=6/7
../singular_texi/math.tex(,735) @expansion{}    _[12]=1
../singular_texi/math.tex(,736) @expansion{}    _[13]=8/7
../singular_texi/math.tex(,737) @expansion{}    _[14]=9/7
../singular_texi/math.tex(,738) @expansion{}    _[15]=10/7
../singular_texi/math.tex(,739) @expansion{}    _[16]=11/7
../singular_texi/math.tex(,740) @expansion{} [2]:
../singular_texi/math.tex(,741) @expansion{}    1,3,6,10,15,21,25,27,27,25,21,15,10,6,3,1
../singular_texi/math.tex(,742) @c end example Gauss-Manin_connection_2 math.doc:562
../singular_texi/math.tex(,743) @end smallexample
../singular_texi/math.tex(,744) 
../singular_texi/math.tex(,745) The command @code{spectrumnd(f)} computes the spectrum of 
../singular_texi/math.tex(,749) @tex
../singular_texi/math.tex(,750) $f$
../singular_texi/math.tex(,751) @end tex
../singular_texi/math.tex(,752)  and
../singular_texi/math.tex(,753) returns a list with six entries:
../singular_texi/math.tex(,754) The Milnor number
../singular_texi/math.tex(,755) @tex
../singular_texi/math.tex(,756) $\mu(f)$, the geometric genus $p_g(f)$
../singular_texi/math.tex(,757) @end tex
../singular_texi/math.tex(,761) and the number of different spectrum numbers.
../singular_texi/math.tex(,762) The other three entries are of type @code{intvec}.
../singular_texi/math.tex(,763) They contain the numerators, denominators and
../singular_texi/math.tex(,764) multiplicities of the spectrum numbers. So
../singular_texi/math.tex(,765) @tex
../singular_texi/math.tex(,766) $x^7+y^7+z^7=0$
../singular_texi/math.tex(,767) @end tex
../singular_texi/math.tex(,771) has Milnor number 216 and geometrical
../singular_texi/math.tex(,772) genus 35. Its spectrum consists of the 16 different rationals
../singular_texi/math.tex(,773) @*
../singular_texi/math.tex(,774) @tex
../singular_texi/math.tex(,775) ${3 \over 7}, {4 \over 7}, {5 \over 7}, {6 \over 7}, {1 \over 1},
../singular_texi/math.tex(,776) {8 \over 7}, {9 \over 7}, {10 \over 7}, {11 \over 7}, {12 \over 7},
../singular_texi/math.tex(,777) {13 \over 7}, {2 \over 1}, {15 \over 7}, {16 \over 7}, {17 \over 7},
../singular_texi/math.tex(,778) {18 \over 7}$
../singular_texi/math.tex(,779) @end tex
../singular_texi/math.tex(,784) @*appearing with multiplicities
../singular_texi/math.tex(,785) @*1,3,6,10,15,21,25,27,27,25,21,15,10,6,3,1.
../singular_texi/math.tex(,786) 
../singular_texi/math.tex(,787) @tex
../singular_texi/math.tex(,788) The singularities of type $\tilde{E}_6$ form a
../singular_texi/math.tex(,789) $\mu$-constant one parameter family given by
../singular_texi/math.tex(,790) $x^3+y^3+z^3+\lambda xyz=0,\quad \lambda^3\neq-27$.
../singular_texi/math.tex(,791) @end tex
../singular_texi/math.tex(,797) Therefore they have all the same spectrum, which we compute
../singular_texi/math.tex(,798) for 
../singular_texi/math.tex(,799) @tex
../singular_texi/math.tex(,800) $x^3+y^3+z^3$.
../singular_texi/math.tex(,801) @end tex
../singular_texi/math.tex(,805) 
../singular_texi/math.tex(,806) @smallexample
../singular_texi/math.tex(,807) poly g=x^3+y^3+z^3;
../singular_texi/math.tex(,808) list s2=spectrumnd(g);
../singular_texi/math.tex(,809) s2;
../singular_texi/math.tex(,810) @expansion{} [1]:
../singular_texi/math.tex(,811) @expansion{}    8
../singular_texi/math.tex(,812) @expansion{} [2]:
../singular_texi/math.tex(,813) @expansion{}    1
../singular_texi/math.tex(,814) @expansion{} [3]:
../singular_texi/math.tex(,815) @expansion{}    4
../singular_texi/math.tex(,816) @expansion{} [4]:
../singular_texi/math.tex(,817) @expansion{}    1,4,5,2
../singular_texi/math.tex(,818) @expansion{} [5]:
../singular_texi/math.tex(,819) @expansion{}    1,3,3,1
../singular_texi/math.tex(,820) @expansion{} [6]:
../singular_texi/math.tex(,821) @expansion{}    1,3,3,1
../singular_texi/math.tex(,822) @end smallexample
../singular_texi/math.tex(,823) Evaluating semicontinuity is very easy:
../singular_texi/math.tex(,824) @smallexample
../singular_texi/math.tex(,825) semicont(s1,s2);
../singular_texi/math.tex(,826) @expansion{} 18
../singular_texi/math.tex(,827) @end smallexample
../singular_texi/math.tex(,828) 
../singular_texi/math.tex(,829) This tells us that there are at most 18 singularities of type
../singular_texi/math.tex(,830) @tex
../singular_texi/math.tex(,831) $\tilde{E}_6$ on a septic in $P^3$. But $x^7+y^7+z^7$
../singular_texi/math.tex(,832) @end tex
../singular_texi/math.tex(,836) is semiquasihomogeneous (sqh), so we can also apply the stronger
../singular_texi/math.tex(,837) form of semicontinuity:
../singular_texi/math.tex(,838) 
../singular_texi/math.tex(,839) @smallexample
../singular_texi/math.tex(,840) semicontsqh(s1,s2);
../singular_texi/math.tex(,841) @expansion{} 17
../singular_texi/math.tex(,842) @end smallexample
../singular_texi/math.tex(,843) 
../singular_texi/math.tex(,844) So in fact a septic has at most 17 triple points of type
../singular_texi/math.tex(,845) @tex
../singular_texi/math.tex(,846) $\tilde{E}_6$.
../singular_texi/math.tex(,847) @end tex
../singular_texi/math.tex(,851) 
../singular_texi/math.tex(,852) Note that @code{spectrumnd(f)} works only if 
../singular_texi/math.tex(,856) @tex
../singular_texi/math.tex(,857) $f$
../singular_texi/math.tex(,858) @end tex
../singular_texi/math.tex(,859)  has nondegenerate
../singular_texi/math.tex(,860) principal part. In fact @code{spectrumnd} will detect a degenerate
../singular_texi/math.tex(,861) principal part in many cases and print out an error message.
../singular_texi/math.tex(,862) However if it is known in advance that 
../singular_texi/math.tex(,866) @tex
../singular_texi/math.tex(,867) $f$
../singular_texi/math.tex(,868) @end tex
../singular_texi/math.tex(,869)  has nondegenerate
../singular_texi/math.tex(,870) principal part, then the spectrum may be computed much faster
../singular_texi/math.tex(,871) using @code{spectrumnd(f,1)}.
../singular_texi/math.tex(,872) 
../singular_texi/math.tex(,873) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,874) @node Toric ideals and integer programming, References, Gauss-Manin connection, Mathematical background
../singular_texi/math.tex(,875) @section Toric ideals and integer programming
../singular_texi/math.tex(,876) @cindex Toric ideals and integer programming
../singular_texi/math.tex(,877) 
../singular_texi/ti_ip.tex(,1) @menu
../singular_texi/ti_ip.tex(,2) * Toric ideals::                Definition and computation.
../singular_texi/ti_ip.tex(,3) * Integer programming::         An algorithm using toric ideals.
../singular_texi/ti_ip.tex(,4) * Relevant References::
../singular_texi/ti_ip.tex(,5) @end menu
../singular_texi/ti_ip.tex(,6) 
../singular_texi/ti_ip.tex(,7) @node Toric ideals, Integer programming, , Toric ideals and integer programming
../singular_texi/ti_ip.tex(,8) 
../singular_texi/ti_ip.tex(,9) @subsection Toric ideals
../singular_texi/ti_ip.tex(,10) @cindex toric ideals
../singular_texi/ti_ip.tex(,11) @comment This file was generated by doc2tex.pl from ti_ip.doc
../singular_texi/ti_ip.tex(,12) @comment DO NOT EDIT DIRECTLY, BUT EDIT ti_ip.doc INSTEAD
../singular_texi/ti_ip.tex(,13) @cindex ideal, toric
../singular_texi/ti_ip.tex(,14) 
../singular_texi/ti_ip.tex(,15) @tex
../singular_texi/ti_ip.tex(,16) Let $A$ denote an $m\times n$ matrix with integral coefficients. For $u
../singular_texi/ti_ip.tex(,17) \in Z\!\!\! Z^n$, we define $u^+,u^-$ to be the uniquely determined
../singular_texi/ti_ip.tex(,18) vectors with nonnegative coefficients and disjoint support (i.e.,
../singular_texi/ti_ip.tex(,19) $u_i^+=0$ or $u_i^-=0$ for each component $i$) such that
../singular_texi/ti_ip.tex(,20) $u=u^+-u^-$. For $u\geq 0$ component-wise, let $x^u$ denote the monomial
../singular_texi/ti_ip.tex(,21) $x_1^{u_1}\cdot\ldots\cdot x_n^{u_n}\in K[x_1,\ldots,x_n]$.
../singular_texi/ti_ip.tex(,22) 
../singular_texi/ti_ip.tex(,23) The ideal
../singular_texi/ti_ip.tex(,24) $$ I_A:=<x^{u^+}-x^{u^-} | u\in\ker(A)\cap Z\!\!\! Z^n>\ \subset
../singular_texi/ti_ip.tex(,25) K[x_1,\ldots,x_n] $$
../singular_texi/ti_ip.tex(,26) is called a \bf toric ideal. \rm
../singular_texi/ti_ip.tex(,27) 
../singular_texi/ti_ip.tex(,28) The first problem in computing toric ideals is to find a finite
../singular_texi/ti_ip.tex(,29) generating set: Let $v_1,\ldots,v_r$ be a lattice basis of $\ker(A)\cap
../singular_texi/ti_ip.tex(,30) Z\!\!\! Z^n$ (i.e, a basis of the $Z\!\!\! Z$-module). Then
../singular_texi/ti_ip.tex(,31) $$ I_A:=I:(x_1\cdot\ldots\cdot x_n)^\infty $$
../singular_texi/ti_ip.tex(,32) where
../singular_texi/ti_ip.tex(,33) $$ I=<x^{v_i^+}-x^{v_i^-}|i=1,\ldots,r> $$
../singular_texi/ti_ip.tex(,34) @end tex
../singular_texi/ti_ip.tex(,35) 
../singular_texi/ti_ip.tex(,61) 
../singular_texi/ti_ip.tex(,62) The required lattice basis can be computed using the LLL-algorithm (@pxref{[Coh93]}). For the computation of the saturation, there are various
../singular_texi/ti_ip.tex(,63) possibilities described in the
../singular_texi/ti_ip.tex(,64) @tex
../singular_texi/ti_ip.tex(,65) section Algorithms.
../singular_texi/ti_ip.tex(,66) @end tex
../singular_texi/ti_ip.tex(,70) 
../singular_texi/ti_ip.tex(,71) @menu
../singular_texi/ti_ip.tex(,72) * Algorithms::             Various algorithms for computing toric ideals.
../singular_texi/ti_ip.tex(,73) * Buchberger algorithm::   Specializing it for toric ideals.
../singular_texi/ti_ip.tex(,74) @end menu
../singular_texi/ti_ip.tex(,75) 
../singular_texi/ti_ip.tex(,76) @node Algorithms, Buchberger algorithm, , Toric ideals
../singular_texi/ti_ip.tex(,77) @subsection Algorithms
../singular_texi/ti_ip.tex(,78) 
../singular_texi/ti_ip.tex(,79) The following algorithms are implemented in @ref{toric_lib}.
../singular_texi/ti_ip.tex(,80) 
../singular_texi/ti_ip.tex(,81) @menu
../singular_texi/ti_ip.tex(,82) * Conti and Traverso::
../singular_texi/ti_ip.tex(,83) * Pottier::
../singular_texi/ti_ip.tex(,84) * Hosten and Sturmfels::
../singular_texi/ti_ip.tex(,85) * Di Biase and Urbanke::
../singular_texi/ti_ip.tex(,86) * Bigatti and La Scala and Robbiano::
../singular_texi/ti_ip.tex(,87) @end menu
../singular_texi/ti_ip.tex(,88) 
../singular_texi/ti_ip.tex(,89) @node Conti and Traverso, Pottier, , Algorithms
../singular_texi/ti_ip.tex(,90) 
../singular_texi/ti_ip.tex(,91) @subsubsection The algorithm of Conti and Traverso
../singular_texi/ti_ip.tex(,92) @cindex Conti-Traverso algorithm
../singular_texi/ti_ip.tex(,93) @cindex algorithm of Conti and Traverso
../singular_texi/ti_ip.tex(,94) 
../singular_texi/ti_ip.tex(,95) 
../singular_texi/ti_ip.tex(,96) The algorithm of Conti and Traverso (@pxref{[CoTr91]})
../singular_texi/ti_ip.tex(,97) @tex
../singular_texi/ti_ip.tex(,98) computes $I_A$ via the
../singular_texi/ti_ip.tex(,99) extended matrix $B=(I_m|A)$,
../singular_texi/ti_ip.tex(,100) where $I_m$ is the $m\times m$ unity matrix. A lattice basis of $B$ is
../singular_texi/ti_ip.tex(,101) given by the set of vectors $(a^j,-e_j)\in Z\!\!\! Z^{m+n}$, where $a^j$
../singular_texi/ti_ip.tex(,102) is the $j$-th row of $A$ and $e_j$ the $j$-th coordinate vector. We
../singular_texi/ti_ip.tex(,103) look at the ideal in $K[y_1,\ldots,y_m,x_1,\ldots,x_n]$ corresponding to
../singular_texi/ti_ip.tex(,104) these vectors, namely
../singular_texi/ti_ip.tex(,105) $$ I_1=<y^{a_j^+}- x_j y^{a_j^-} | j=1,\ldots, n>.$$
../singular_texi/ti_ip.tex(,106) We introduce a further variable $t$ and adjoin the binomial $t\cdot
../singular_texi/ti_ip.tex(,107) y_1\cdot\ldots\cdot y_m -1$ to the generating set of $I_1$, obtaining
../singular_texi/ti_ip.tex(,108) an ideal $I_2$ in the polynomial ring $K[t,
../singular_texi/ti_ip.tex(,109) y_1,\ldots,y_m,x_1,\ldots,x_n]$. $I_2$ is saturated w.r.t. all
../singular_texi/ti_ip.tex(,110) variables because all variables are invertible modulo $I_2$. Now $I_A$
../singular_texi/ti_ip.tex(,111) can be computed from $I_2$ by eliminating the variables
../singular_texi/ti_ip.tex(,112) $t,y_1,\ldots,y_m$.
../singular_texi/ti_ip.tex(,113) @end tex
../singular_texi/ti_ip.tex(,131) 
../singular_texi/ti_ip.tex(,132) Because of the big number of auxiliary variables needed to compute a
../singular_texi/ti_ip.tex(,133) toric ideal, this algorithm is rather slow in practice. However, it has
../singular_texi/ti_ip.tex(,134) a special importance in the application to integer programming
../singular_texi/ti_ip.tex(,135) (@pxref{Integer programming}).
../singular_texi/ti_ip.tex(,136) 
../singular_texi/ti_ip.tex(,137) @node Pottier, Hosten and Sturmfels, Conti and Traverso, Algorithms
../singular_texi/ti_ip.tex(,138) 
../singular_texi/ti_ip.tex(,139) @subsubsection The algorithm of Pottier
../singular_texi/ti_ip.tex(,140) @cindex Pottier algorithm
../singular_texi/ti_ip.tex(,141) @cindex algorithm of Pottier
../singular_texi/ti_ip.tex(,142) 
../singular_texi/ti_ip.tex(,143) 
../singular_texi/ti_ip.tex(,144) The algorithm of Pottier (@pxref{[Pot94]}) starts by computing a lattice
../singular_texi/ti_ip.tex(,145) @tex
../singular_texi/ti_ip.tex(,146) basis $v_1,\ldots,v_r$ for the integer kernel of $A$ using the
../singular_texi/ti_ip.tex(,147) LLL-algorithm. The ideal corresponding to the lattice basis vectors
../singular_texi/ti_ip.tex(,148) $$ I_1=<x^{v_i^+}-x^{v_i^-}|i=1,\ldots,r> $$
../singular_texi/ti_ip.tex(,149) is saturated -- as in the algorithm of Conti and Traverso -- by
../singular_texi/ti_ip.tex(,150) inversion of all variables: One adds an auxiliary variable $t$ and the
../singular_texi/ti_ip.tex(,151) generator $t\cdot x_1\cdot\ldots\cdot x_n -1$ to obtain an ideal $I_2$
../singular_texi/ti_ip.tex(,152) in $K[t,x_1,\ldots,x_n]$ from which one computes $I_A$ by elimination of
../singular_texi/ti_ip.tex(,153) $t$.
../singular_texi/ti_ip.tex(,154) @end tex
../singular_texi/ti_ip.tex(,167) 
../singular_texi/ti_ip.tex(,168) 
../singular_texi/ti_ip.tex(,169) @node Hosten and Sturmfels, Di Biase and Urbanke, Pottier, Algorithms
../singular_texi/ti_ip.tex(,170) 
../singular_texi/ti_ip.tex(,171) @subsubsection The algorithm of Hosten and Sturmfels
../singular_texi/ti_ip.tex(,172) @cindex Hosten-Sturmfels algorithm
../singular_texi/ti_ip.tex(,173) @cindex algorithm of Hosten and Sturmfels
../singular_texi/ti_ip.tex(,174) 
../singular_texi/ti_ip.tex(,175) 
../singular_texi/ti_ip.tex(,176) The algorithm of Hosten and Sturmfels (@pxref{[HoSt95]}) allows to
../singular_texi/ti_ip.tex(,177) @tex
../singular_texi/ti_ip.tex(,178) compute $I_A$ without any auxiliary variables, provided that $A$ contains a vector $w$
../singular_texi/ti_ip.tex(,179) with positive coefficients in its row space. This is a real restriction,
../singular_texi/ti_ip.tex(,180) i.e., the algorithm will not necessarily work in the general case.
../singular_texi/ti_ip.tex(,181) 
../singular_texi/ti_ip.tex(,182) A lattice basis $v_1,\ldots,v_r$ is again computed via the
../singular_texi/ti_ip.tex(,183) LLL-algorithm. The saturation step is performed in the following way:
../singular_texi/ti_ip.tex(,184) First note that $w$ induces a positive grading w.r.t. which the ideal
../singular_texi/ti_ip.tex(,185) $$ I=<x^{v_i^+}-x^{v_i^-}|i=1,\ldots,r> $$
../singular_texi/ti_ip.tex(,186) corresponding to our lattice basis is homogeneous. We use the following
../singular_texi/ti_ip.tex(,187) lemma:
../singular_texi/ti_ip.tex(,188) 
../singular_texi/ti_ip.tex(,189) Let $I$ be a homogeneous ideal w.r.t. the weighted reverse
../singular_texi/ti_ip.tex(,190) lexicographical ordering with weight vector $w$ and variable order $x_1
../singular_texi/ti_ip.tex(,191) > x_2 > \ldots > x_n$. Let $G$ denote a Groebner basis of $I$ w.r.t. to
../singular_texi/ti_ip.tex(,192) this ordering.  Then a Groebner basis of $(I:x_n^\infty)$ is obtained by
../singular_texi/ti_ip.tex(,193) dividing each element of $G$ by the highest possible power of $x_n$.
../singular_texi/ti_ip.tex(,194) 
../singular_texi/ti_ip.tex(,195) From this fact, we can successively compute
../singular_texi/ti_ip.tex(,196) $$ I_A= I:(x_1\cdot\ldots\cdot x_n)^\infty
../singular_texi/ti_ip.tex(,197) =(((I:x_1^\infty):x_2^\infty):\ldots :x_n^\infty); $$
../singular_texi/ti_ip.tex(,198) in the $i$-th step we take $x_i$ as the cheapest variable and apply the
../singular_texi/ti_ip.tex(,199) lemma with $x_i$ instead of $x_n$.
../singular_texi/ti_ip.tex(,200) 
../singular_texi/ti_ip.tex(,201) This procedure involves $n$ Groebner basis computations. Actually, this
../singular_texi/ti_ip.tex(,202) number can be reduced to at most $n/2$
../singular_texi/ti_ip.tex(,203) @end tex
../singular_texi/ti_ip.tex(,235) (@pxref{[HoSh98]}), and the single
../singular_texi/ti_ip.tex(,236) computations -- except from the first one -- show to be easy and fast in
../singular_texi/ti_ip.tex(,237) practice.
../singular_texi/ti_ip.tex(,238) 
../singular_texi/ti_ip.tex(,239) @node Di Biase and Urbanke, Bigatti and La Scala and Robbiano, Hosten and Sturmfels, Algorithms
../singular_texi/ti_ip.tex(,240) 
../singular_texi/ti_ip.tex(,241) @subsubsection The algorithm of Di Biase and Urbanke
../singular_texi/ti_ip.tex(,242) @cindex Di Biase-Urbanke algorithm
../singular_texi/ti_ip.tex(,243) @cindex algorithm of Di Biase and Urbanke
../singular_texi/ti_ip.tex(,244) 
../singular_texi/ti_ip.tex(,245) Like the algorithm of Hosten and Sturmfels, the algorithm of Di Biase
../singular_texi/ti_ip.tex(,246) and Urbanke (@pxref{[DBUr95]}) performs up
../singular_texi/ti_ip.tex(,247) @tex
../singular_texi/ti_ip.tex(,248) to $n/2$ Groebner basis
../singular_texi/ti_ip.tex(,249) computations. It needs no auxiliary variables, but a supplementary
../singular_texi/ti_ip.tex(,250) precondition; namely, the existence of a vector without zero components
../singular_texi/ti_ip.tex(,251) in the kernel of $A$.
../singular_texi/ti_ip.tex(,252) 
../singular_texi/ti_ip.tex(,253) The main idea comes from the following observation:
../singular_texi/ti_ip.tex(,254) 
../singular_texi/ti_ip.tex(,255) Let $B$ be an integer matrix, $u_1,\ldots,u_r$ a lattice basis of the
../singular_texi/ti_ip.tex(,256) integer kernel of $B$. Assume that all components of $u_1$ are
../singular_texi/ti_ip.tex(,257) positive. Then
../singular_texi/ti_ip.tex(,258) $$ I_B=<x^{u_i^+}-x^{u_i^-}|i=1,\ldots,r>, $$
../singular_texi/ti_ip.tex(,259) i.e., the ideal on the right is already saturated w.r.t. all variables.
../singular_texi/ti_ip.tex(,260) 
../singular_texi/ti_ip.tex(,261) The algorithm starts by finding a lattice basis $v_1,\ldots,v_r$ of the
../singular_texi/ti_ip.tex(,262) kernel of $A$ such that $v_1$ has no zero component. Let
../singular_texi/ti_ip.tex(,263) $\{i_1,\ldots,i_l\}$ be the set of indices $i$ with
../singular_texi/ti_ip.tex(,264) $v_{1,i}<0$. Multiplying the components $i_1,\ldots,i_l$ of
../singular_texi/ti_ip.tex(,265) $v_1,\ldots,v_r$ and the columns $i_1,\ldots,i_l$ of $A$ by $-1$ yields
../singular_texi/ti_ip.tex(,266) a matrix $B$ and a lattice basis $u_1,\ldots,u_r$ of the kernel of $B$
../singular_texi/ti_ip.tex(,267) that fulfill the assumption of the observation above. We are then able
../singular_texi/ti_ip.tex(,268) to compute a generating set of $I_A$ by applying the following
../singular_texi/ti_ip.tex(,269) ``variable flip'' successively to $i=i_1,\ldots,i_l$:
../singular_texi/ti_ip.tex(,270) 
../singular_texi/ti_ip.tex(,271) Let $>$ be an elimination ordering for $x_i$. Let $A_i$ be the matrix
../singular_texi/ti_ip.tex(,272) obtained by multiplying the $i$-th column of $A$ with $-1$. Let
../singular_texi/ti_ip.tex(,273) $$\{x_i^{r_j} x^{a_j} - x^{b_j} | j\in J \}$$
../singular_texi/ti_ip.tex(,274) be a Groebner basis of $I_{A_i}$ w.r.t. $>$ (where $x_i$ is neither
../singular_texi/ti_ip.tex(,275) involved in $x^{a_j}$ nor in $x^{b_j}$). Then
../singular_texi/ti_ip.tex(,276) $$\{x^{a_j} - x_i^{r_j} x^{b_j} | j\in J \}$$
../singular_texi/ti_ip.tex(,277) is a generating set for $I_A$.
../singular_texi/ti_ip.tex(,278) @end tex
../singular_texi/ti_ip.tex(,316) 
../singular_texi/ti_ip.tex(,317) @node Bigatti and La Scala and Robbiano, , Di Biase and Urbanke, Algorithms
../singular_texi/ti_ip.tex(,318) 
../singular_texi/ti_ip.tex(,319) @subsubsection The algorithm of Bigatti, La Scala and Robbiano
../singular_texi/ti_ip.tex(,320) @cindex Bigatti-La Scala-Robbiano algorithm
../singular_texi/ti_ip.tex(,321) @cindex algorithm of Bigatti, La Scala and Robbiano
../singular_texi/ti_ip.tex(,322) 
../singular_texi/ti_ip.tex(,323) The algorithm of Bigatti, La Scala and Robbiano (@pxref{[BLR98]}) combines the ideas of
../singular_texi/ti_ip.tex(,324) the algorithms of Pottier and of Hosten and Sturmfels. The
../singular_texi/ti_ip.tex(,325) computations are performed on a graded ideal with one auxiliary
../singular_texi/ti_ip.tex(,326) @tex
../singular_texi/ti_ip.tex(,327) variable $u$ and one supplementary generator $x_1\cdot\ldots\cdot x_n -
../singular_texi/ti_ip.tex(,328) u$ (instead of the generator $t\cdot x_1\cdot\ldots\cdot x_n -1$ in
../singular_texi/ti_ip.tex(,329) the algorithm of Pottier). The algorithm uses a quite unusual technique to
../singular_texi/ti_ip.tex(,330) get rid of the variable $u$ again.
../singular_texi/ti_ip.tex(,331) @end tex
../singular_texi/ti_ip.tex(,338) 
../singular_texi/ti_ip.tex(,339) There is another algorithm of the authors which tries to parallelize
../singular_texi/ti_ip.tex(,340) the computations (but which is not implemented in this library).
../singular_texi/ti_ip.tex(,341) 
../singular_texi/ti_ip.tex(,342) @node Buchberger algorithm, , Algorithms, Toric ideals
../singular_texi/ti_ip.tex(,343) 
../singular_texi/ti_ip.tex(,344) @subsection The Buchberger algorithm for toric ideals
../singular_texi/ti_ip.tex(,345) @cindex Buchberger algorithm for toric ideals
../singular_texi/ti_ip.tex(,346) 
../singular_texi/ti_ip.tex(,347) Toric ideals have a very special structure that allows us to improve
../singular_texi/ti_ip.tex(,348) the Buchberger algorithm in many respects: They are prime ideals and
../singular_texi/ti_ip.tex(,349) generated by binomials. Pottier used this fact to describe all
../singular_texi/ti_ip.tex(,350) operations of the Buchberger algorithm on the ideal generators in terms
../singular_texi/ti_ip.tex(,351) of vector additions and subtractions. Some other strategies like
../singular_texi/ti_ip.tex(,352) multiple reduction (@pxref{[CoTr91]}) or the use of bit
../singular_texi/ti_ip.tex(,353) vectors to represent the support of a monomial (@pxref{[Big97]}) may be
../singular_texi/ti_ip.tex(,354) applied to more general ideals, but show to
../singular_texi/ti_ip.tex(,355) be especially useful in the toric case.
../singular_texi/ti_ip.tex(,356) 
../singular_texi/ti_ip.tex(,357) @node Integer programming, Relevant References, Toric ideals, Toric ideals and integer programming
../singular_texi/ti_ip.tex(,358) 
../singular_texi/ti_ip.tex(,359) @subsection Integer programming
../singular_texi/ti_ip.tex(,360) @cindex integer programming
../singular_texi/ti_ip.tex(,361) 
../singular_texi/ti_ip.tex(,362) @tex
../singular_texi/ti_ip.tex(,363) Let $A$ be an $m\times n$ matrix with integral coefficients, $b\in
../singular_texi/ti_ip.tex(,364) Z\!\!\! Z^m$ and $c\in Z\!\!\! Z^n$. The problem
../singular_texi/ti_ip.tex(,365) $$ \min\{c^T x | x\in Z\!\!\! Z^n, Ax=b, x\geq 0\hbox{
../singular_texi/ti_ip.tex(,366) component-wise}\} $$
../singular_texi/ti_ip.tex(,367) is called an instance of the \bf integer programming problem \rm or
../singular_texi/ti_ip.tex(,368) \bf IP problem. \rm
../singular_texi/ti_ip.tex(,369) 
../singular_texi/ti_ip.tex(,370) The IP problem is very hard; namely, it is NP-complete.
../singular_texi/ti_ip.tex(,371) 
../singular_texi/ti_ip.tex(,372) For the following discussion let $c\geq 0$ (component-wise). We
../singular_texi/ti_ip.tex(,373) consider $c$ as a weight vector; because of its non-negativity, $c$ can
../singular_texi/ti_ip.tex(,374) be refined into a monomial ordering $>_c$. It turns out that we can
../singular_texi/ti_ip.tex(,375) solve such an IP instance with the help of toric ideals:
../singular_texi/ti_ip.tex(,376) 
../singular_texi/ti_ip.tex(,377) First we assume that an initial solution $v$ (i.e., $v\in Z\!\!\!
../singular_texi/ti_ip.tex(,378) Z^n, v\geq 0, Av=b$) is already known. We obtain the optimal solution
../singular_texi/ti_ip.tex(,379) $v_0$ (i.e., with $c^T v_0$ minimal) by the following procedure:
../singular_texi/ti_ip.tex(,380) @end tex
../singular_texi/ti_ip.tex(,381) @c \begin{itemize}
../singular_texi/ti_ip.tex(,382) @c \item (1) Compute the toric ideal $I_A$ using one of the algorithms in the
../singular_texi/ti_ip.tex(,383) @c       previous section.
../singular_texi/ti_ip.tex(,384) @c \item (2) Compute the reduced Groebner basis $G_c$ of $I_A$ w.r.t.
../singular_texi/ti_ip.tex(,385) @c       $>_c$.
../singular_texi/ti_ip.tex(,386) @c \item (3) Reduce $x^v$ modulo $G_c$ using the Hironaka division algorithm.
../singular_texi/ti_ip.tex(,387) @c       If the result of this reduction is $x^{v_0}$, then $v_0$ is an
../singular_texi/ti_ip.tex(,388) @c       optimal solution of the given instance.
../singular_texi/ti_ip.tex(,389) @c \end{itemize}
../singular_texi/ti_ip.tex(,390) 
../singular_texi/ti_ip.tex(,411) 
../singular_texi/ti_ip.tex(,412) @itemize @bullet
../singular_texi/ti_ip.tex(,413) @item (1) Compute the toric ideal I(A) using one of the algorithms in the previous section.
../singular_texi/ti_ip.tex(,414) @item (2) Compute the reduced Groebner basis G(c) of I(A) w.r.t.@: 
../singular_texi/ti_ip.tex(,418) @tex
../singular_texi/ti_ip.tex(,419) $>_c$
../singular_texi/ti_ip.tex(,420) @end tex
../singular_texi/ti_ip.tex(,421) .
../singular_texi/ti_ip.tex(,422) @item (3) Reduce 
../singular_texi/ti_ip.tex(,426) @tex
../singular_texi/ti_ip.tex(,427) $x^v$
../singular_texi/ti_ip.tex(,428) @end tex
../singular_texi/ti_ip.tex(,429)  modulo G(c) using the Hironaka division algorithm.
../singular_texi/ti_ip.tex(,430) If the result of this reduction is 
../singular_texi/ti_ip.tex(,434) @tex
../singular_texi/ti_ip.tex(,435) $x^(v_0)$
../singular_texi/ti_ip.tex(,436) @end tex
../singular_texi/ti_ip.tex(,437) , then 
../singular_texi/ti_ip.tex(,441) @tex
../singular_texi/ti_ip.tex(,442) $v_0$
../singular_texi/ti_ip.tex(,443) @end tex
../singular_texi/ti_ip.tex(,444)  is an optimal
../singular_texi/ti_ip.tex(,445) solution of the given instance.
../singular_texi/ti_ip.tex(,446) @end itemize
../singular_texi/ti_ip.tex(,447) 
../singular_texi/ti_ip.tex(,448) If no initial solution is known, we are nevertheless able to solve the
../singular_texi/ti_ip.tex(,449) problem with similar techniques. For this purpose we replace our
../singular_texi/ti_ip.tex(,450) instance by an extended instance with the matrix used
../singular_texi/ti_ip.tex(,451) in the Conti-Traverso algorithm. Indeed, the Conti-Traverso
../singular_texi/ti_ip.tex(,452) algorithm offers the possibility to verify solvability of a given
../singular_texi/ti_ip.tex(,453) instance and to find an initial solution in the case of existence (but
../singular_texi/ti_ip.tex(,454) none of the other algorithms does!). Details can be found in [CoTr91]
../singular_texi/ti_ip.tex(,455) and [The99].
../singular_texi/ti_ip.tex(,456) 
../singular_texi/ti_ip.tex(,457) An implementation of the above algorithm and some examples can be found in @ref{intprog_lib}.
../singular_texi/ti_ip.tex(,458) 
../singular_texi/ti_ip.tex(,459) Classical methods for solving IP instances like Branch-and-Bound
../singular_texi/ti_ip.tex(,460) methods seem to be faster in general than the methods using toric
../singular_texi/ti_ip.tex(,461) ideals. But the latter have one great advantage: If one wants to solve
../singular_texi/ti_ip.tex(,462) various instances that differ only by the vector 
../singular_texi/ti_ip.tex(,466) @tex
../singular_texi/ti_ip.tex(,467) $b$
../singular_texi/ti_ip.tex(,468) @end tex
../singular_texi/ti_ip.tex(,469) , one has to
../singular_texi/ti_ip.tex(,470) perform steps (1) and (2) above only once. As the running time of step (3)
../singular_texi/ti_ip.tex(,471) is very short, solving all the instances is not much harder than
../singular_texi/ti_ip.tex(,472) solving one single instance.
../singular_texi/ti_ip.tex(,473) 
../singular_texi/ti_ip.tex(,474) For a detailed discussion see [The99].
../singular_texi/ti_ip.tex(,475) 
../singular_texi/ti_ip.tex(,476) @node Relevant References, , Integer programming, Toric ideals and integer programming
../singular_texi/ti_ip.tex(,477) @subsection Relevant References
../singular_texi/ti_ip.tex(,478) 
../singular_texi/ti_ip.tex(,479) @itemize @bullet
../singular_texi/ti_ip.tex(,480) @item [Big97]  Bigatti, A.M.: @anchor{[Big97]}
../singular_texi/ti_ip.tex(,481)    Computation of Hilbert-Poincare series.
../singular_texi/ti_ip.tex(,482)    Journal of Pure and Applied Algebra (1997) 199, 237-253
../singular_texi/ti_ip.tex(,483) 
../singular_texi/ti_ip.tex(,484) @item [BLR98]  Bigatti, A.M.; La Scala, R.; Robbiano, L.: @anchor{[BLR98]}
../singular_texi/ti_ip.tex(,485)    Computing toric ideals.
../singular_texi/ti_ip.tex(,486)    Journal of Symbolic Computation (to appear)
../singular_texi/ti_ip.tex(,487) 
../singular_texi/ti_ip.tex(,488) @item [Coh93]  Cohen, H.: @anchor{[Coh93]}
../singular_texi/ti_ip.tex(,489)    A Course in Computational Algebraic Number Theory.
../singular_texi/ti_ip.tex(,490)    Springer (1997)
../singular_texi/ti_ip.tex(,491) 
../singular_texi/ti_ip.tex(,492) @item [CoTr91]  Conti, P.; Traverso, C.: @anchor{[CoTr91]}
../singular_texi/ti_ip.tex(,493)    Buchberger algorithm and integer programming.
../singular_texi/ti_ip.tex(,494)    Proceedings AAECC-9 (new Orleans), Springer LNCS (1991) 539,
../singular_texi/ti_ip.tex(,495)    130-139
../singular_texi/ti_ip.tex(,496) 
../singular_texi/ti_ip.tex(,497) @item [DBUr95]  Di Biase, F.; Urbanke, R.: @anchor{[DBUr95]}
../singular_texi/ti_ip.tex(,498)    An algorithm to calculate the kernel of certain polynomial ring
../singular_texi/ti_ip.tex(,499)    homomorphisms.
../singular_texi/ti_ip.tex(,500)    Experimental Mathematics (1995) 4, 227-234
../singular_texi/ti_ip.tex(,501) 
../singular_texi/ti_ip.tex(,502) @item [HoSh98]  Hosten, S.; Shapiro, J.: @anchor{[HoSh98]}
../singular_texi/ti_ip.tex(,503)    Primary decomposition of lattice basis ideals.
../singular_texi/ti_ip.tex(,504)    (to appear)
../singular_texi/ti_ip.tex(,505) 
../singular_texi/ti_ip.tex(,506) @item [HoSt95]  Hosten, S.; Sturmfels, B.: @anchor{[HoSt95]}
../singular_texi/ti_ip.tex(,507)    GRIN: An implementation of Groebner bases for integer programming.
../singular_texi/ti_ip.tex(,508)    in Balas, E.; Clausen, J. (editors): Integer Programming and
../singular_texi/ti_ip.tex(,509)    Combinatorial Optimization.
../singular_texi/ti_ip.tex(,510)    Springer LNCS (1995) 920, 267-276
../singular_texi/ti_ip.tex(,511) 
../singular_texi/ti_ip.tex(,512) @item [Pot94]  Pottier, L.: @anchor{[Pot94]}
../singular_texi/ti_ip.tex(,513)    Groebner bases of toric ideals.
../singular_texi/ti_ip.tex(,514)    Rapport de recherche 2224 (1997), INRIA Sophia Antipolis
../singular_texi/ti_ip.tex(,515) 
../singular_texi/ti_ip.tex(,516) @item [Stu96]  Sturmfels, B.: @anchor{[Stu96]}
../singular_texi/ti_ip.tex(,517)    Groebner Bases and Convex Polytopes.
../singular_texi/ti_ip.tex(,518)    University Lecture Series, Volume 8 (1996), American Mathematical
../singular_texi/ti_ip.tex(,519)    Society
../singular_texi/ti_ip.tex(,520) 
../singular_texi/ti_ip.tex(,521) @item [The99]  Theis, C.: @anchor{[The99]}
../singular_texi/ti_ip.tex(,522)    Der Buchberger-Algorithmus fuer torische Ideale und seine Anwendung
../singular_texi/ti_ip.tex(,523)    in der ganzzahligen Optimierung.
../singular_texi/ti_ip.tex(,524)    Diplomarbeit, Universitaet des Saarlandes (1999), Saarbruecken
../singular_texi/ti_ip.tex(,525)    (Germany)
../singular_texi/ti_ip.tex(,526) 
../singular_texi/ti_ip.tex(,527) @end itemize
../singular_texi/math.tex(,879) 
../singular_texi/math.tex(,880) @c ---------------------------------------------------------------------------
../singular_texi/math.tex(,881) @node References, , Toric ideals and integer programming, Mathematical background
../singular_texi/math.tex(,882) @section References
../singular_texi/math.tex(,883) @cindex References
../singular_texi/math.tex(,884) 
../singular_texi/math.tex(,885) The Centre for Computer Algebra Kaiserslautern publishes a series of preprints
../singular_texi/math.tex(,886) which are electronically available at
../singular_texi/math.tex(,887) @code{http://www.mathematik.uni-kl.de/~zca/Reports_on_ca}.
../singular_texi/math.tex(,888) Other sources to check are @code{http://symbolicnet.mcs.kent.edu/},
../singular_texi/math.tex(,889) @code{http://www.can.nl/},... and the following list of books:
../singular_texi/math.tex(,890) 
../singular_texi/math.tex(,891) @subheading Text books on computational algebraic geometry
../singular_texi/math.tex(,892) @itemize @bullet
../singular_texi/math.tex(,893) 
../singular_texi/math.tex(,894) @item
../singular_texi/math.tex(,895) Adams, W.; Loustaunau, P.: An Introduction to Gr@"obner Bases. Providence, RI,
../singular_texi/math.tex(,896) AMS, 1996
../singular_texi/math.tex(,897) 
../singular_texi/math.tex(,898) @item
../singular_texi/math.tex(,899) Becker, T.; Weisspfenning, V.:
../singular_texi/math.tex(,900) Gr@"obner Bases - A Computational Approach to Commutative Algebra. Springer, 1993
../singular_texi/math.tex(,901) 
../singular_texi/math.tex(,902) @item
../singular_texi/math.tex(,903) Cohen, H.:
../singular_texi/math.tex(,904) A Course in Computational Algebraic Number Theory,
../singular_texi/math.tex(,905) Springer, 1995
../singular_texi/math.tex(,906) 
../singular_texi/math.tex(,907) @item
../singular_texi/math.tex(,908) Cox, D.; Little, J.; O'Shea, D.:
../singular_texi/math.tex(,909) Ideals, Varieties and Algorithms. Springer, 1996
../singular_texi/math.tex(,910) 
../singular_texi/math.tex(,911) @item
../singular_texi/math.tex(,912) Eisenbud, D.: Commutative Algebra with a View Toward Algebraic Geometry.
../singular_texi/math.tex(,913) Springer, 1995
../singular_texi/math.tex(,914) 
../singular_texi/math.tex(,915) @item
../singular_texi/math.tex(,916) Greuel, G.-M.; Pfister, G.: A SINGULAR Introduction to Commuative Algebra, Springer, 2002
../singular_texi/math.tex(,917) 
../singular_texi/math.tex(,918) @item
../singular_texi/math.tex(,919) Mishra, B.: Algorithmic Algebra, Texts and Monographs in Computer Science.
../singular_texi/math.tex(,920) Springer, 1993
../singular_texi/math.tex(,921) @item
../singular_texi/math.tex(,922) Sturmfels, B.: Algorithms in Invariant Theory. Springer 1993
../singular_texi/math.tex(,923) 
../singular_texi/math.tex(,924) @item
../singular_texi/math.tex(,925) Vasconcelos, W.: Computational Methods in Commutative Algebra and Algebraic
../singular_texi/math.tex(,926) Geometry. Springer, 1998
../singular_texi/math.tex(,927) @end itemize
../singular_texi/math.tex(,928) 
../singular_texi/math.tex(,929) @subheading Descriptions of algorithms
../singular_texi/math.tex(,930) @itemize @bullet
../singular_texi/math.tex(,931) @item
../singular_texi/math.tex(,932) Bareiss, E.:
../singular_texi/math.tex(,933) Sylvester's identity and multistep integer-preserving Gaussian elimination.
../singular_texi/math.tex(,934) Math. Comp. 22 (1968), 565-578
../singular_texi/math.tex(,935) 
../singular_texi/math.tex(,936) @item
../singular_texi/math.tex(,937) Campillo, A.: Algebroid curves in positive characteristic. SLN 813, 1980
../singular_texi/math.tex(,938) 
../singular_texi/math.tex(,939) @item
../singular_texi/math.tex(,940) Chou, S.:
../singular_texi/math.tex(,941) Mechanical Geometry Theorem Proving.
../singular_texi/math.tex(,942) D.Reidel Publishing Company, 1988
../singular_texi/math.tex(,943) 
../singular_texi/math.tex(,944) @item
../singular_texi/math.tex(,945) Decker, W.; Greuel, G.-M.; Pfister, G.:
../singular_texi/math.tex(,946) Primary decomposition: algorithms and
../singular_texi/math.tex(,947) comparisons.  Preprint, Univ. Kaiserslautern, 1998.
../singular_texi/math.tex(,948) To appear in: Greuel, G.-M.; Matzat, B. H.; Hiss, G. (Eds.),
../singular_texi/math.tex(,949) Algorithmic Algebra and Number Theory. Springer Verlag, Heidelberg, 1998
../singular_texi/math.tex(,950) 
../singular_texi/math.tex(,951) @item
../singular_texi/math.tex(,952) Decker, W.; Greuel, G.-M.; de Jong, T.; Pfister, G.:
../singular_texi/math.tex(,953) The normalization: a new algorithm,
../singular_texi/math.tex(,954) implementation and comparisons. Preprint, Univ. Kaiserslautern, 1998
../singular_texi/math.tex(,955) 
../singular_texi/math.tex(,956) @item
../singular_texi/math.tex(,957) Decker, W.; Heydtmann, A.; Schreyer, F. O.: Generating a Noetherian Normalization of
../singular_texi/math.tex(,958) the Invariant Ring of a Finite Group, 1997, to appear in Journal of
../singular_texi/math.tex(,959) Symbolic Computation
../singular_texi/math.tex(,960) 
../singular_texi/math.tex(,961) @item
../singular_texi/math.tex(,962) @tex
../singular_texi/math.tex(,963) Faug\`ere,
../singular_texi/math.tex(,964) @end tex
../singular_texi/math.tex(,968) J. C.; Gianni, P.; Lazard, D.; Mora, T.: Efficient computation
../singular_texi/math.tex(,969) of zero-dimensional
../singular_texi/math.tex(,970) Gr@"obner bases by change of ordering. Journal of Symbolic Computation, 1989
../singular_texi/math.tex(,971) 
../singular_texi/math.tex(,972) @item
../singular_texi/math.tex(,973) Gr@"abe, H.-G.: On factorized Gr@"obner bases, Univ. Leipzig, Inst. f@"ur
../singular_texi/math.tex(,974) Informatik, 1994
../singular_texi/math.tex(,975) 
../singular_texi/math.tex(,976) @item
../singular_texi/math.tex(,977) Grassmann, H.; Greuel, G.-M.; Martin, B.; Neumann,
../singular_texi/math.tex(,978) W.; Pfister, G.; Pohl, W.; Sch@"onemann, H.; Siebert, T.:  On an
../singular_texi/math.tex(,979) implementation of standard bases and syzygies in  @sc{Singular}.
../singular_texi/math.tex(,980) Proceedings of the Workshop  Computational Methods in Lie theory in AAECC (1995)
../singular_texi/math.tex(,981) 
../singular_texi/math.tex(,982) @item
../singular_texi/math.tex(,983) Greuel, G.-M.; Pfister, G.:
../singular_texi/math.tex(,984) Advances and improvements in the theory of standard bases and
../singular_texi/math.tex(,985) syzygies. Arch. d. Math. 63(1995)
../singular_texi/math.tex(,986) 
../singular_texi/math.tex(,987) @item
../singular_texi/math.tex(,988) Kemper; Generating Invariant Rings of Finite Groups over Arbitrary
../singular_texi/math.tex(,989) Fields. 1996, to appear in Journal of Symbolic Computation
../singular_texi/math.tex(,990) 
../singular_texi/math.tex(,991) @item
../singular_texi/math.tex(,992) Kemper and Steel: Some Algorithms in Invariant Theory of Finite Groups. 1997
../singular_texi/math.tex(,993) 
../singular_texi/math.tex(,994) @item
../singular_texi/math.tex(,995) Lee, H.R.; Saunders, B.D.: Fraction Free Gaussian Elimination for
../singular_texi/math.tex(,996) Sparse Matrices. Journal of Symbolic Computation (1995) 19, 393-402
../singular_texi/math.tex(,997) 
../singular_texi/math.tex(,998) @item
../singular_texi/math.tex(,999) Sch@"onemann, H.:
../singular_texi/math.tex(,1000) Algorithms in @sc{Singular},
../singular_texi/math.tex(,1001) Reports on Computer Algebra 2(1996), Kaiserslautern
../singular_texi/math.tex(,1002) 
../singular_texi/math.tex(,1003) @item
../singular_texi/math.tex(,1004) Siebert, T.:
../singular_texi/math.tex(,1005) On strategies and implementations for computations of free resolutions.
../singular_texi/math.tex(,1006) Reports on Computer Algebra 8(1996), Kaiserslautern
../singular_texi/math.tex(,1007) 
../singular_texi/math.tex(,1008) @item
../singular_texi/math.tex(,1009) Wang, D.:
../singular_texi/math.tex(,1010) Characteristic Sets and Zero Structure of Polynomial Sets.
../singular_texi/math.tex(,1011) Lecture Notes, RISC Linz, 1989
../singular_texi/math.tex(,1012) @end itemize
../singular_texi/math.tex(,1013) 
../singular_texi/singular.tex(,169) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,170) @node SINGULAR libraries, Release Notes, Mathematical background, Top
../singular_texi/singular.tex(,171) @appendix SINGULAR libraries
../singular_texi/singular.tex(,172) @cindex SINGULAR libraries
../singular_texi/singular.tex(,173) @cindex LIBs
../singular_texi/singular.tex(,174) 
../singular_texi/singular.tex(,175) @sc{Singular} comes with a set of standard libraries. Their content is
../singular_texi/singular.tex(,176) described in the following subsections.
../singular_texi/singular.tex(,177) 
../singular_texi/singular.tex(,178) Use the @ref{LIB} command for loading of single libraries, and the
../singular_texi/singular.tex(,179) command @code{LIB "all.lib";} for loading all libraries.
../singular_texi/singular.tex(,180) 
../singular_texi/singular.tex(,181) @menu
../singular_texi/singular.tex(,182) * standard_lib:: extensions of Singular kernel
../singular_texi/singular.tex(,183) * General purpose::
../singular_texi/singular.tex(,184) * Linear algebra::
../singular_texi/singular.tex(,185) * Commutative algebra::
../singular_texi/singular.tex(,186) * Singularities::
../singular_texi/singular.tex(,187) * Invariant theory::
../singular_texi/singular.tex(,188) * Symbolic-numerical solving::
../singular_texi/singular.tex(,189) * Visualization::
../singular_texi/singular.tex(,190) * Coding theory::
../singular_texi/singular.tex(,191) @end menu
../singular_texi/singular.tex(,192) @c ----------------------------------------------------------
../singular_texi/singular.tex(,193) @node standard_lib, General purpose, SINGULAR libraries, SINGULAR libraries
../singular_texi/singular.tex(,194) @section standard_lib
../singular_texi/singular.tex(,195) 
../singular_texi/singular.tex(,196) The library @code{standard.lib} provides extensions to the
../singular_texi/singular.tex(,197) set of built-in commands and is automatically loaded
../singular_texi/singular.tex(,198) during the start of @sc{Singular}, unless @sc{Singular} is started up
../singular_texi/singular.tex(,199) with the @code{--no-stdlib} command line option (see
../singular_texi/singular.tex(,200) @ref{Command line options}).
../singular_texi/singular.tex(,201) 
../singular_texi/singular.tex(,202) @c start include of docu for standard.lib:LibInfo
../singular_texi/singular.tex(,203) @c ---content LibInfo---
../singular_texi/singular.tex(,204) @comment This file was generated by doc2tex.pl from d2t_singular/standard_lib.doc
../singular_texi/singular.tex(,205) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/standard_lib.doc INSTEAD
../singular_texi/singular.tex(,206) @c library version: (1.58.2.9,2003/06/16)
../singular_texi/singular.tex(,207) @c library file: ../Singular/LIB/standard.lib
../singular_texi/singular.tex(,208) @cindex standard.lib
../singular_texi/singular.tex(,209) @cindex standard_lib
../singular_texi/singular.tex(,210) @table @asis
../singular_texi/singular.tex(,211) @item @strong{Library:}
../singular_texi/singular.tex(,212) standard.lib
../singular_texi/singular.tex(,213) @item @strong{Purpose:}
../singular_texi/singular.tex(,214)    Procedures which are always loaded at Start-up
../singular_texi/singular.tex(,215) 
../singular_texi/singular.tex(,216) @end table
../singular_texi/singular.tex(,217) 
../singular_texi/singular.tex(,218) @strong{Procedures:}
../singular_texi/singular.tex(,219) @menu
../singular_texi/singular.tex(,220) * stdfglm:: standard basis of ideal via fglm [and ordering ord]
../singular_texi/singular.tex(,221) * stdhilb:: standard basis of ideal using the Hilbert function
../singular_texi/singular.tex(,222) * groebner:: standard basis using a heuristically chosen method
../singular_texi/singular.tex(,223) * quot:: quotient using heuristically chosen method
../singular_texi/singular.tex(,224) * res:: free resolution of ideal or module
../singular_texi/singular.tex(,225) * sprintf:: returns formatted string
../singular_texi/singular.tex(,226) * fprintf:: writes formatted string to link
../singular_texi/singular.tex(,227) * printf:: displays formatted string
../singular_texi/singular.tex(,228) @end menu
../singular_texi/singular.tex(,229) @c ---end content LibInfo---
../singular_texi/singular.tex(,230) @c generated lib proc docu for standard.lib:LibInfo singular.doc:200 
../singular_texi/singular.tex(,231) @c end include of docu for standard.lib:LibInfo
../singular_texi/singular.tex(,232) 
../singular_texi/singular.tex(,233) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,234) @node General purpose, Linear algebra, standard_lib, SINGULAR libraries
../singular_texi/singular.tex(,235) @section General purpose
../singular_texi/singular.tex(,236) @cindex General purpose
../singular_texi/singular.tex(,237) 
../singular_texi/singular.tex(,238) @menu
../singular_texi/singular.tex(,239) * all_lib:: load all other libraries
../singular_texi/singular.tex(,240) * general_lib:: procedures of general type
../singular_texi/singular.tex(,241) * inout_lib:: procedures for manipulating in- and output
../singular_texi/singular.tex(,242) * poly_lib:: procedures for manipulating polynomials and ideals
../singular_texi/singular.tex(,243) * random_lib:: procedures of random/sparse  matrix and poly operations
../singular_texi/singular.tex(,244) * ring_lib:: procedures for manipulating rings and maps
../singular_texi/singular.tex(,245) @end menu
../singular_texi/singular.tex(,246) 
../singular_texi/singular.tex(,247) @c ----------------------------------------------------------
../singular_texi/singular.tex(,248) @node all_lib, general_lib, General purpose, General purpose
../singular_texi/singular.tex(,249) @subsection all_lib
../singular_texi/singular.tex(,250) @cindex all_lib
../singular_texi/singular.tex(,251) @cindex all.lib
../singular_texi/singular.tex(,252) 
../singular_texi/singular.tex(,253) The library @code{all.lib} provides a convenient way to load all
../singular_texi/singular.tex(,254) libraries of the @sc{Singular} distribution.
../singular_texi/singular.tex(,255) 
../singular_texi/singular.tex(,256) @strong{Example:}
../singular_texi/singular.tex(,257) @smallexample
../singular_texi/singular.tex(,258) @c reused example all_lib singular.doc:227 
../singular_texi/singular.tex(,259) option(loadLib);
../singular_texi/singular.tex(,260) LIB "all.lib";
../singular_texi/singular.tex(,261) @expansion{} // ** loaded all.lib (1.35.2.4,2003/02/25)
../singular_texi/singular.tex(,262) @expansion{} // ** loaded makedbm.lib (1.11,2000/12/22)
../singular_texi/singular.tex(,263) @expansion{} // ** loaded brnoeth.lib (1.11.2.5,2002/10/18)
../singular_texi/singular.tex(,264) @expansion{} // ** loaded paramet.lib (1.11.2.1,2002/10/21)
../singular_texi/singular.tex(,265) @expansion{} // ** loaded surf.lib (1.19.2.6,2002/07/17)
../singular_texi/singular.tex(,266) @expansion{} // ** loaded latex.lib (1.19.2.1,2002/02/20)
../singular_texi/singular.tex(,267) @expansion{} // ** loaded graphics.lib (1.10,2001/02/19)
../singular_texi/singular.tex(,268) @expansion{} // ** loaded zeroset.lib (1.7.2.2,2002/02/20)
../singular_texi/singular.tex(,269) @expansion{} // ** loaded ntsolve.lib (1.12.2.1,2002/04/12)
../singular_texi/singular.tex(,270) @expansion{} // ** loaded triang.lib (1.7,2001/02/19)
../singular_texi/singular.tex(,271) @expansion{} // ** loaded solve.lib (1.21.2.13,2002/10/21)
../singular_texi/singular.tex(,272) @expansion{} // ** loaded presolve.lib (1.17.2.6,2003/03/26)
../singular_texi/singular.tex(,273) @expansion{} // ** loaded stratify.lib (1.7.2.4,2002/04/11)
../singular_texi/singular.tex(,274) @expansion{} // ** loaded rinvar.lib (1.7.2.3,2002/02/20)
../singular_texi/singular.tex(,275) @expansion{} // ** loaded finvar.lib (1.32.2.2,2002/08/13)
../singular_texi/singular.tex(,276) @expansion{} // ** loaded ainvar.lib (1.6.2.2,2002/04/12)
../singular_texi/singular.tex(,277) @expansion{} // ** loaded spectrum.lib (1.12.2.3,2002/03/06)
../singular_texi/singular.tex(,278) @expansion{} // ** loaded spcurve.lib (1.15.2.1,2002/02/20)
../singular_texi/singular.tex(,279) @expansion{} // ** loaded sing.lib (1.24.2.5,2003/04/15)
../singular_texi/singular.tex(,280) @expansion{} // ** loaded qhmoduli.lib (1.0,2000/12/12)
../singular_texi/singular.tex(,281) @expansion{} // ** loaded mondromy.lib (1.22.2.2,2002/02/20)
../singular_texi/singular.tex(,282) @expansion{} // ** loaded hnoether.lib (1.29.2.14,2002/10/21)
../singular_texi/singular.tex(,283) @expansion{} // ** loaded gaussman.lib (1.33.2.26,2003/02/10)
../singular_texi/singular.tex(,284) @expansion{} // ** loaded equising.lib (1.7.2.5,2003/02/25)
../singular_texi/singular.tex(,285) @expansion{} // ** loaded deform.lib (1.25.2.2,2003/02/24)
../singular_texi/singular.tex(,286) @expansion{} // ** loaded classify.lib (1.48.2.4,2002/04/11)
../singular_texi/singular.tex(,287) @expansion{} // ** loaded toric.lib (1.11,2001/02/06)
../singular_texi/singular.tex(,288) @expansion{} // ** loaded intprog.lib (1.5,2001/02/06)
../singular_texi/singular.tex(,289) @expansion{} // ** loaded reesclos.lib (1.50,2001/08/06)
../singular_texi/singular.tex(,290) @expansion{} // ** loaded primitiv.lib (1.15,2001/02/05)
../singular_texi/singular.tex(,291) @expansion{} // ** loaded primdec.lib (1.98.2.14,2003/04/07)
../singular_texi/singular.tex(,292) @expansion{} // ** loaded normal.lib (1.34.2.17,2002/10/21)
../singular_texi/singular.tex(,293) @expansion{} // ** loaded mregular.lib (1.6.2.1,2002/02/20)
../singular_texi/singular.tex(,294) @expansion{} // ** loaded mprimdec.lib (1.1.2.3,2002/03/19)
../singular_texi/singular.tex(,295) @expansion{} // ** loaded homolog.lib (1.15.2.2,2002/10/07)
../singular_texi/singular.tex(,296) @expansion{} // ** loaded elim.lib (1.14.2.4,2003/04/16)
../singular_texi/singular.tex(,297) @expansion{} // ** loaded algebra.lib (1.9.2.3,2002/04/11)
../singular_texi/singular.tex(,298) @expansion{} // ** loaded linalg.lib (1.10.2.15,2003/04/04)
../singular_texi/singular.tex(,299) @expansion{} // ** loaded matrix.lib (1.26.2.2,2002/10/07)
../singular_texi/singular.tex(,300) @expansion{} // ** loaded ring.lib (1.17.2.1,2002/02/20)
../singular_texi/singular.tex(,301) @expansion{} // ** loaded random.lib (1.16.2.1,2002/02/20)
../singular_texi/singular.tex(,302) @expansion{} // ** loaded poly.lib (1.33.2.6,2003/02/10)
../singular_texi/singular.tex(,303) @expansion{} // ** loaded inout.lib (1.21.2.5,2002/06/12)
../singular_texi/singular.tex(,304) @expansion{} // ** loaded general.lib (1.38.2.9,2003/04/04)
../singular_texi/singular.tex(,305) @c end example all_lib singular.doc:227
../singular_texi/singular.tex(,306) @end smallexample
../singular_texi/singular.tex(,307) @c ----------------------------------------------------------
../singular_texi/singular.tex(,308) @node general_lib, inout_lib, all_lib, General purpose
../singular_texi/singular.tex(,309) @subsection general_lib
../singular_texi/singular.tex(,310) @c include of docu for general.lib
../singular_texi/./d2t_singular/general_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/general_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/general_lib.doc
../singular_texi/./d2t_singular/general_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/general_lib.doc INSTEAD
../singular_texi/./d2t_singular/general_lib.tex(,4) @c library version: (1.38.2.9,2003/04/04)
../singular_texi/./d2t_singular/general_lib.tex(,5) @c library file: ../Singular/LIB/general.lib
../singular_texi/./d2t_singular/general_lib.tex(,6) @cindex general.lib
../singular_texi/./d2t_singular/general_lib.tex(,7) @cindex general_lib
../singular_texi/./d2t_singular/general_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/general_lib.tex(,10) general.lib
../singular_texi/./d2t_singular/general_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/general_lib.tex(,12)    Elementary Computations of General Type
../singular_texi/./d2t_singular/general_lib.tex(,13) 
../singular_texi/./d2t_singular/general_lib.tex(,14) @end table
../singular_texi/./d2t_singular/general_lib.tex(,15) 
../singular_texi/./d2t_singular/general_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/general_lib.tex(,17) @menu
../singular_texi/./d2t_singular/general_lib.tex(,18) * A_Z:: string a,b,... of n comma separated letters
../singular_texi/./d2t_singular/general_lib.tex(,19) * ASCII:: string of printable ASCII characters (number n to m)
../singular_texi/./d2t_singular/general_lib.tex(,20) * absValue:: absolute value of c
../singular_texi/./d2t_singular/general_lib.tex(,21) * binomial:: n choose m (type int), [type string/type number]
../singular_texi/./d2t_singular/general_lib.tex(,22) * deleteSublist:: delete entries given by iv from list l
../singular_texi/./d2t_singular/general_lib.tex(,23) * factorial:: n factorial (=n!) (type int), [type string/number]
../singular_texi/./d2t_singular/general_lib.tex(,24) * fibonacci:: nth Fibonacci number [char p]
../singular_texi/./d2t_singular/general_lib.tex(,25) * kmemory:: active [allocated] memory in kilobyte
../singular_texi/./d2t_singular/general_lib.tex(,26) * killall:: kill all user-defined variables
../singular_texi/./d2t_singular/general_lib.tex(,27) * number_e:: compute exp(1) up to n decimal digits
../singular_texi/./d2t_singular/general_lib.tex(,28) * number_pi:: compute pi (area of unit circle) up to n digits
../singular_texi/./d2t_singular/general_lib.tex(,29) * primes:: intvec of primes p, n<=p<=m
../singular_texi/./d2t_singular/general_lib.tex(,30) * product:: multiply components of vector/ideal/...[indices v]
../singular_texi/./d2t_singular/general_lib.tex(,31) * sort:: sort generators according to monomial ordering
../singular_texi/./d2t_singular/general_lib.tex(,32) * sum:: add components of vector/ideal/...[with indices v]
../singular_texi/./d2t_singular/general_lib.tex(,33) * watchdog:: only wait for result of command cmd for i seconds
../singular_texi/./d2t_singular/general_lib.tex(,34) * which:: search for command and return absolute path, if found
../singular_texi/./d2t_singular/general_lib.tex(,35) * primecoeffs:: primefactors <= min(p,32003) of coeffs of J
../singular_texi/./d2t_singular/general_lib.tex(,36) * primefactors:: primefactors <= min(p,32003) of n
../singular_texi/./d2t_singular/general_lib.tex(,37) * timeStd:: std(i) if computation finished after d seconds else i
../singular_texi/./d2t_singular/general_lib.tex(,38) * timeFactorize:: works as timeStd with factorization
../singular_texi/./d2t_singular/general_lib.tex(,39) * factorH:: factorizes with good choice of principal variable
../singular_texi/./d2t_singular/general_lib.tex(,40) @end menu
../singular_texi/./d2t_singular/general_lib.tex(,41) @c ---end content LibInfo---
../singular_texi/./d2t_singular/general_lib.tex(,42) 
../singular_texi/./d2t_singular/general_lib.tex(,43) @c ------------------- A_Z -------------
../singular_texi/./d2t_singular/general_lib.tex(,44) @node A_Z, ASCII,, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,45) @subsubsection A_Z
../singular_texi/./d2t_singular/general_lib.tex(,46) @cindex A_Z
../singular_texi/./d2t_singular/general_lib.tex(,47) @c ---content A_Z---
../singular_texi/./d2t_singular/general_lib.tex(,48) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,49) 
../singular_texi/./d2t_singular/general_lib.tex(,50) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,51) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,52) A_Z("a",n); a any letter, n integer (-26<= n <=26, !=0)
../singular_texi/./d2t_singular/general_lib.tex(,53) 
../singular_texi/./d2t_singular/general_lib.tex(,54) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,55) string of n small (if a is small) or capital (if a is capital)
../singular_texi/./d2t_singular/general_lib.tex(,56) letters, comma separated, beginning with a, in alphabetical
../singular_texi/./d2t_singular/general_lib.tex(,57) order (or revers alphabetical order if n<0)
../singular_texi/./d2t_singular/general_lib.tex(,58) 
../singular_texi/./d2t_singular/general_lib.tex(,59) @end table
../singular_texi/./d2t_singular/general_lib.tex(,60) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,61) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,62) @c computed example A_Z d2t_singular/general_lib.doc:60 
../singular_texi/./d2t_singular/general_lib.tex(,63) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,64) A_Z("c",5);
../singular_texi/./d2t_singular/general_lib.tex(,65) @expansion{} c,d,e,f,g
../singular_texi/./d2t_singular/general_lib.tex(,66) A_Z("Z",-5);
../singular_texi/./d2t_singular/general_lib.tex(,67) @expansion{} Z,Y,X,W,V
../singular_texi/./d2t_singular/general_lib.tex(,68) string sR = "ring R = (0,"+A_Z("A",6)+"),("+A_Z("a",10)+"),dp;";
../singular_texi/./d2t_singular/general_lib.tex(,69) sR;
../singular_texi/./d2t_singular/general_lib.tex(,70) @expansion{} ring R = (0,A,B,C,D,E,F),(a,b,c,d,e,f,g,h,i,j),dp;
../singular_texi/./d2t_singular/general_lib.tex(,71) execute(sR);
../singular_texi/./d2t_singular/general_lib.tex(,72) R;
../singular_texi/./d2t_singular/general_lib.tex(,73) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/general_lib.tex(,74) @expansion{} //   6 parameter    : A B C D E F 
../singular_texi/./d2t_singular/general_lib.tex(,75) @expansion{} //   minpoly        : 0
../singular_texi/./d2t_singular/general_lib.tex(,76) @expansion{} //   number of vars : 10
../singular_texi/./d2t_singular/general_lib.tex(,77) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/general_lib.tex(,78) @expansion{} //                  : names    a b c d e f g h i j 
../singular_texi/./d2t_singular/general_lib.tex(,79) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/general_lib.tex(,80) @c end example A_Z d2t_singular/general_lib.doc:60
../singular_texi/./d2t_singular/general_lib.tex(,81) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,82) @c ---end content A_Z---
../singular_texi/./d2t_singular/general_lib.tex(,83) 
../singular_texi/./d2t_singular/general_lib.tex(,84) @c ------------------- ASCII -------------
../singular_texi/./d2t_singular/general_lib.tex(,85) @node ASCII, absValue, A_Z, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,86) @subsubsection ASCII
../singular_texi/./d2t_singular/general_lib.tex(,87) @cindex ASCII
../singular_texi/./d2t_singular/general_lib.tex(,88) @c ---content ASCII---
../singular_texi/./d2t_singular/general_lib.tex(,89) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,90) 
../singular_texi/./d2t_singular/general_lib.tex(,91) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,92) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,93) ASCII([n,m]); n,m= integers (32 <= n <= m <= 126)
../singular_texi/./d2t_singular/general_lib.tex(,94) 
../singular_texi/./d2t_singular/general_lib.tex(,95) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,96) string of printable ASCII characters (no native language support)
../singular_texi/./d2t_singular/general_lib.tex(,97) ASCII(): string of all ASCII characters with its numbers,
../singular_texi/./d2t_singular/general_lib.tex(,98) ASCII(n): n-th ASCII character
../singular_texi/./d2t_singular/general_lib.tex(,99) @*ASCII(n,m): n-th up to m-th ASCII character (inclusive)
../singular_texi/./d2t_singular/general_lib.tex(,100) 
../singular_texi/./d2t_singular/general_lib.tex(,101) @end table
../singular_texi/./d2t_singular/general_lib.tex(,102) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,103) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,104) @c computed example ASCII d2t_singular/general_lib.doc:92 
../singular_texi/./d2t_singular/general_lib.tex(,105) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,106) ASCII();"";
../singular_texi/./d2t_singular/general_lib.tex(,107) @expansion{}      !    "    #    $    %    &    '    (    )    *    +    ,    -    .
../singular_texi/./d2t_singular/general_lib.tex(,108) @expansion{} 32   33   34   35   36   37   38   39   40   41   42   43   44   45   46
../singular_texi/./d2t_singular/general_lib.tex(,109) @expansion{} /    0    1    2    3    4    5    6    7    8    9    :    ;    <    =
../singular_texi/./d2t_singular/general_lib.tex(,110) @expansion{} 47   48   49   50   51   52   53   54   55   56   57   58   59   60   61
../singular_texi/./d2t_singular/general_lib.tex(,111) @expansion{} >    ?    @@    A    B    C    D    E    F    G    H    I    J    K    L
../singular_texi/./d2t_singular/general_lib.tex(,112) @expansion{} 62   63   64   65   66   67   68   69   70   71   72   73   74   75   76
../singular_texi/./d2t_singular/general_lib.tex(,113) @expansion{} M    N    O    P    Q    R    S    T    U    V    W    X    Y    Z    [
../singular_texi/./d2t_singular/general_lib.tex(,114) @expansion{} 77   78   79   80   81   82   83   84   85   86   87   88   89   90   91
../singular_texi/./d2t_singular/general_lib.tex(,115) @expansion{} \    ]    ^    _    `    a    b    c    d    e    f    g    h    i    j
../singular_texi/./d2t_singular/general_lib.tex(,116) @expansion{} 92   93   94   95   96   97   98   99  100  101  102  103  104  105  10
../singular_texi/./d2t_singular/general_lib.tex(,117) @expansion{} k    l    m    n    o    p    q    r    s    t    u    v    w    x    y
../singular_texi/./d2t_singular/general_lib.tex(,118) @expansion{} 107  108  109  110  111  112  113  114  115  116  117  118  119  120  121
../singular_texi/./d2t_singular/general_lib.tex(,119) @expansion{} z    @{    |    @}    ~
../singular_texi/./d2t_singular/general_lib.tex(,120) @expansion{} 122  123  124  125  126 
../singular_texi/./d2t_singular/general_lib.tex(,121) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,122) ASCII(42);
../singular_texi/./d2t_singular/general_lib.tex(,123) @expansion{} *
../singular_texi/./d2t_singular/general_lib.tex(,124) ASCII(32,126);
../singular_texi/./d2t_singular/general_lib.tex(,125) @expansion{}  !"#$%&'()*+,-./0123456789:;<=>?@@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefgh\
../singular_texi/./d2t_singular/general_lib.tex(,126)    ijklmnopqrstuvwxyz@{|@}~
../singular_texi/./d2t_singular/general_lib.tex(,127) @c end example ASCII d2t_singular/general_lib.doc:92
../singular_texi/./d2t_singular/general_lib.tex(,128) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,129) @c ---end content ASCII---
../singular_texi/./d2t_singular/general_lib.tex(,130) 
../singular_texi/./d2t_singular/general_lib.tex(,131) @c ------------------- absValue -------------
../singular_texi/./d2t_singular/general_lib.tex(,132) @node absValue, binomial, ASCII, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,133) @subsubsection absValue
../singular_texi/./d2t_singular/general_lib.tex(,134) @cindex absValue
../singular_texi/./d2t_singular/general_lib.tex(,135) @c ---content absValue---
../singular_texi/./d2t_singular/general_lib.tex(,136) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,137) 
../singular_texi/./d2t_singular/general_lib.tex(,138) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,139) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,140) absValue(c); c int, number or poly
../singular_texi/./d2t_singular/general_lib.tex(,141) 
../singular_texi/./d2t_singular/general_lib.tex(,142) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,143) absValue(c); the absolute value of c
../singular_texi/./d2t_singular/general_lib.tex(,144) 
../singular_texi/./d2t_singular/general_lib.tex(,145) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,146) absValue(c)=c if c>=0; absValue=-c if c<=0.
../singular_texi/./d2t_singular/general_lib.tex(,147) @* So the function can be applied to any type, for which comparison
../singular_texi/./d2t_singular/general_lib.tex(,148) @* operators are defined.
../singular_texi/./d2t_singular/general_lib.tex(,149) 
../singular_texi/./d2t_singular/general_lib.tex(,150) @end table
../singular_texi/./d2t_singular/general_lib.tex(,151) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,152) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,153) @c computed example absValue d2t_singular/general_lib.doc:123 
../singular_texi/./d2t_singular/general_lib.tex(,154) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,155) ring r1 = 0,x,dp;
../singular_texi/./d2t_singular/general_lib.tex(,156) absValue(-2002);
../singular_texi/./d2t_singular/general_lib.tex(,157) @expansion{} 2002
../singular_texi/./d2t_singular/general_lib.tex(,158) poly f=-4;
../singular_texi/./d2t_singular/general_lib.tex(,159) absValue(f);
../singular_texi/./d2t_singular/general_lib.tex(,160) @expansion{} 4
../singular_texi/./d2t_singular/general_lib.tex(,161) @c end example absValue d2t_singular/general_lib.doc:123
../singular_texi/./d2t_singular/general_lib.tex(,162) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,163) @c inserted refs from d2t_singular/general_lib.doc:131
../singular_texi/./d2t_singular/general_lib.tex(,171) @strong{See also:}
../singular_texi/./d2t_singular/general_lib.tex(,172) @ref{boolean expressions}.
../singular_texi/./d2t_singular/general_lib.tex(,174) @c end inserted refs from d2t_singular/general_lib.doc:131
../singular_texi/./d2t_singular/general_lib.tex(,175) 
../singular_texi/./d2t_singular/general_lib.tex(,176) @c ---end content absValue---
../singular_texi/./d2t_singular/general_lib.tex(,177) 
../singular_texi/./d2t_singular/general_lib.tex(,178) @c ------------------- binomial -------------
../singular_texi/./d2t_singular/general_lib.tex(,179) @node binomial, deleteSublist, absValue, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,180) @subsubsection binomial
../singular_texi/./d2t_singular/general_lib.tex(,181) @cindex binomial
../singular_texi/./d2t_singular/general_lib.tex(,182) @c ---content binomial---
../singular_texi/./d2t_singular/general_lib.tex(,183) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,184) 
../singular_texi/./d2t_singular/general_lib.tex(,185) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,186) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,187) binomial(n,k[,p]); n,k,p integers
../singular_texi/./d2t_singular/general_lib.tex(,188) 
../singular_texi/./d2t_singular/general_lib.tex(,189) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,190) binomial(n,k); binomial coefficient n choose k
../singular_texi/./d2t_singular/general_lib.tex(,191) @* - of type string (computed in characteristic 0)
../singular_texi/./d2t_singular/general_lib.tex(,192) @* binomial(n,k,p); n choose k, computed in characteristic 0 or prime(p)
../singular_texi/./d2t_singular/general_lib.tex(,193) @* - of type number if a basering, say R, is present and p=0=char(R)
../singular_texi/./d2t_singular/general_lib.tex(,194) or if prime(p)=char(R)
../singular_texi/./d2t_singular/general_lib.tex(,195) @* - of type string else
../singular_texi/./d2t_singular/general_lib.tex(,196) 
../singular_texi/./d2t_singular/general_lib.tex(,197) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,198) In any characteristic, binomial(n,k) = coefficient of x^k in (1+x)^n
../singular_texi/./d2t_singular/general_lib.tex(,199) 
../singular_texi/./d2t_singular/general_lib.tex(,200) @end table
../singular_texi/./d2t_singular/general_lib.tex(,201) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,202) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,203) @c computed example binomial d2t_singular/general_lib.doc:162 
../singular_texi/./d2t_singular/general_lib.tex(,204) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,205) binomial(200,100);"";                   //type string, computed in char 0
../singular_texi/./d2t_singular/general_lib.tex(,206) @expansion{} 90548514656103281165404177077484163874504589675413336841320
../singular_texi/./d2t_singular/general_lib.tex(,207) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,208) binomial(200,100,3);"";                 //type string, computed in char 3
../singular_texi/./d2t_singular/general_lib.tex(,209) @expansion{} 0
../singular_texi/./d2t_singular/general_lib.tex(,210) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,211) int n,k = 200,100;
../singular_texi/./d2t_singular/general_lib.tex(,212) ring r = 0,x,dp;
../singular_texi/./d2t_singular/general_lib.tex(,213) number b1 = binomial(n,k,0);            //type number, computed in ring r
../singular_texi/./d2t_singular/general_lib.tex(,214) poly b2 = coeffs((x+1)^n,x)[k+1,1];     //coefficient of x^k in (x+1)^n
../singular_texi/./d2t_singular/general_lib.tex(,215) b1-b2;                                  //b1 and b2 should coincide
../singular_texi/./d2t_singular/general_lib.tex(,216) @expansion{} 0
../singular_texi/./d2t_singular/general_lib.tex(,217) @c end example binomial d2t_singular/general_lib.doc:162
../singular_texi/./d2t_singular/general_lib.tex(,218) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,219) @c inserted refs from d2t_singular/general_lib.doc:173
../singular_texi/./d2t_singular/general_lib.tex(,227) @strong{See also:}
../singular_texi/./d2t_singular/general_lib.tex(,228) @ref{prime}.
../singular_texi/./d2t_singular/general_lib.tex(,230) @c end inserted refs from d2t_singular/general_lib.doc:173
../singular_texi/./d2t_singular/general_lib.tex(,231) 
../singular_texi/./d2t_singular/general_lib.tex(,232) @c ---end content binomial---
../singular_texi/./d2t_singular/general_lib.tex(,233) 
../singular_texi/./d2t_singular/general_lib.tex(,234) @c ------------------- deleteSublist -------------
../singular_texi/./d2t_singular/general_lib.tex(,235) @node deleteSublist, factorial, binomial, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,236) @subsubsection deleteSublist
../singular_texi/./d2t_singular/general_lib.tex(,237) @cindex deleteSublist
../singular_texi/./d2t_singular/general_lib.tex(,238) @c ---content deleteSublist---
../singular_texi/./d2t_singular/general_lib.tex(,239) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,240) 
../singular_texi/./d2t_singular/general_lib.tex(,241) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,242) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,243) deleteSublist(v,l); intvec v; list l
../singular_texi/./d2t_singular/general_lib.tex(,244) @*where the entries of the integer vector v correspond to the
../singular_texi/./d2t_singular/general_lib.tex(,245) positions of the elements to be deleted
../singular_texi/./d2t_singular/general_lib.tex(,246) 
../singular_texi/./d2t_singular/general_lib.tex(,247) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,248) list without the deleted elements
../singular_texi/./d2t_singular/general_lib.tex(,249) 
../singular_texi/./d2t_singular/general_lib.tex(,250) @end table
../singular_texi/./d2t_singular/general_lib.tex(,251) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,252) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,253) @c computed example deleteSublist d2t_singular/general_lib.doc:198 
../singular_texi/./d2t_singular/general_lib.tex(,254) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,255) list l=1,2,3,4,5;
../singular_texi/./d2t_singular/general_lib.tex(,256) intvec v=1,3,4;
../singular_texi/./d2t_singular/general_lib.tex(,257) l=deleteSublist(v,l);
../singular_texi/./d2t_singular/general_lib.tex(,258) l;
../singular_texi/./d2t_singular/general_lib.tex(,259) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,260) @expansion{}    2
../singular_texi/./d2t_singular/general_lib.tex(,261) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,262) @expansion{}    5
../singular_texi/./d2t_singular/general_lib.tex(,263) @c end example deleteSublist d2t_singular/general_lib.doc:198
../singular_texi/./d2t_singular/general_lib.tex(,264) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,265) @c ---end content deleteSublist---
../singular_texi/./d2t_singular/general_lib.tex(,266) 
../singular_texi/./d2t_singular/general_lib.tex(,267) @c ------------------- factorial -------------
../singular_texi/./d2t_singular/general_lib.tex(,268) @node factorial, fibonacci, deleteSublist, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,269) @subsubsection factorial
../singular_texi/./d2t_singular/general_lib.tex(,270) @cindex factorial
../singular_texi/./d2t_singular/general_lib.tex(,271) @c ---content factorial---
../singular_texi/./d2t_singular/general_lib.tex(,272) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,273) 
../singular_texi/./d2t_singular/general_lib.tex(,274) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,275) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,276) factorial(n[,p]); n,p integers
../singular_texi/./d2t_singular/general_lib.tex(,277) 
../singular_texi/./d2t_singular/general_lib.tex(,278) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,279) factorial(n): n! (computed in characteristic 0), of type string.
../singular_texi/./d2t_singular/general_lib.tex(,280) @* factorial(n,p): n! computed in characteristic 0 or prime(p)
../singular_texi/./d2t_singular/general_lib.tex(,281) @* - of type number if a basering is present and 0=p=char(basering)
../singular_texi/./d2t_singular/general_lib.tex(,282) or if prime(p)=char(basering)
../singular_texi/./d2t_singular/general_lib.tex(,283) @* - of type string else
../singular_texi/./d2t_singular/general_lib.tex(,284) 
../singular_texi/./d2t_singular/general_lib.tex(,285) @end table
../singular_texi/./d2t_singular/general_lib.tex(,286) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,287) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,288) @c computed example factorial d2t_singular/general_lib.doc:229 
../singular_texi/./d2t_singular/general_lib.tex(,289) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,290) factorial(37);"";                 //37! of type string (as long integer)
../singular_texi/./d2t_singular/general_lib.tex(,291) @expansion{} 13763753091226345046315979581580902400000000
../singular_texi/./d2t_singular/general_lib.tex(,292) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,293) ring r1 = 0,x,dp;
../singular_texi/./d2t_singular/general_lib.tex(,294) number p = factorial(37,0);       //37! of type number, computed in r
../singular_texi/./d2t_singular/general_lib.tex(,295) p;
../singular_texi/./d2t_singular/general_lib.tex(,296) @expansion{} 13763753091226345046315979581580902400000000
../singular_texi/./d2t_singular/general_lib.tex(,297) @c end example factorial d2t_singular/general_lib.doc:229
../singular_texi/./d2t_singular/general_lib.tex(,298) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,299) @c inserted refs from d2t_singular/general_lib.doc:237
../singular_texi/./d2t_singular/general_lib.tex(,307) @strong{See also:}
../singular_texi/./d2t_singular/general_lib.tex(,308) @ref{prime}.
../singular_texi/./d2t_singular/general_lib.tex(,310) @c end inserted refs from d2t_singular/general_lib.doc:237
../singular_texi/./d2t_singular/general_lib.tex(,311) 
../singular_texi/./d2t_singular/general_lib.tex(,312) @c ---end content factorial---
../singular_texi/./d2t_singular/general_lib.tex(,313) 
../singular_texi/./d2t_singular/general_lib.tex(,314) @c ------------------- fibonacci -------------
../singular_texi/./d2t_singular/general_lib.tex(,315) @node fibonacci, kmemory, factorial, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,316) @subsubsection fibonacci
../singular_texi/./d2t_singular/general_lib.tex(,317) @cindex fibonacci
../singular_texi/./d2t_singular/general_lib.tex(,318) @c ---content fibonacci---
../singular_texi/./d2t_singular/general_lib.tex(,319) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,320) 
../singular_texi/./d2t_singular/general_lib.tex(,321) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,322) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,323) fibonacci(n); n,p integers
../singular_texi/./d2t_singular/general_lib.tex(,324) 
../singular_texi/./d2t_singular/general_lib.tex(,325) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,326) fibonacci(n): nth Fibonacci number, f(0)=f(1)=1, f(i+1)=f(i-1)+f(i)
../singular_texi/./d2t_singular/general_lib.tex(,327) @* - computed in characteristic 0, of type string
../singular_texi/./d2t_singular/general_lib.tex(,328) @* fibonacci(n,p): f(n) computed in characteristic 0 or prime(p)
../singular_texi/./d2t_singular/general_lib.tex(,329) @* - of type number if a basering is present and p=0=char(basering)
../singular_texi/./d2t_singular/general_lib.tex(,330) or if prime(p)=char(basering)
../singular_texi/./d2t_singular/general_lib.tex(,331) @* - of type string else
../singular_texi/./d2t_singular/general_lib.tex(,332) 
../singular_texi/./d2t_singular/general_lib.tex(,333) @end table
../singular_texi/./d2t_singular/general_lib.tex(,334) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,335) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,336) @c computed example fibonacci d2t_singular/general_lib.doc:265 
../singular_texi/./d2t_singular/general_lib.tex(,337) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,338) fibonacci(42); "";             //f(42) of type string (as long integer)
../singular_texi/./d2t_singular/general_lib.tex(,339) @expansion{} 267914296
../singular_texi/./d2t_singular/general_lib.tex(,340) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,341) ring r = 2,x,dp;
../singular_texi/./d2t_singular/general_lib.tex(,342) number b = fibonacci(42,2);    //f(42) of type number, computed in r
../singular_texi/./d2t_singular/general_lib.tex(,343) b;
../singular_texi/./d2t_singular/general_lib.tex(,344) @expansion{} 0
../singular_texi/./d2t_singular/general_lib.tex(,345) @c end example fibonacci d2t_singular/general_lib.doc:265
../singular_texi/./d2t_singular/general_lib.tex(,346) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,347) @c inserted refs from d2t_singular/general_lib.doc:273
../singular_texi/./d2t_singular/general_lib.tex(,355) @strong{See also:}
../singular_texi/./d2t_singular/general_lib.tex(,356) @ref{prime}.
../singular_texi/./d2t_singular/general_lib.tex(,358) @c end inserted refs from d2t_singular/general_lib.doc:273
../singular_texi/./d2t_singular/general_lib.tex(,359) 
../singular_texi/./d2t_singular/general_lib.tex(,360) @c ---end content fibonacci---
../singular_texi/./d2t_singular/general_lib.tex(,361) 
../singular_texi/./d2t_singular/general_lib.tex(,362) @c ------------------- kmemory -------------
../singular_texi/./d2t_singular/general_lib.tex(,363) @node kmemory, killall, fibonacci, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,364) @subsubsection kmemory
../singular_texi/./d2t_singular/general_lib.tex(,365) @cindex kmemory
../singular_texi/./d2t_singular/general_lib.tex(,366) @c ---content kmemory---
../singular_texi/./d2t_singular/general_lib.tex(,367) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,368) 
../singular_texi/./d2t_singular/general_lib.tex(,369) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,370) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,371) kmemory([n,[v]]); n,v integers
../singular_texi/./d2t_singular/general_lib.tex(,372) 
../singular_texi/./d2t_singular/general_lib.tex(,373) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,374) memory in kilobyte of type int
../singular_texi/./d2t_singular/general_lib.tex(,375) @* n=0: memory used by active variables (same as no parameters)
../singular_texi/./d2t_singular/general_lib.tex(,376) @* n=1: total memory allocated by Singular
../singular_texi/./d2t_singular/general_lib.tex(,377) @* n=2: difference between top and init memory address (sbrk memory)
../singular_texi/./d2t_singular/general_lib.tex(,378) @* n!=0,1,2: 0
../singular_texi/./d2t_singular/general_lib.tex(,379) 
../singular_texi/./d2t_singular/general_lib.tex(,380) @item @strong{Display:}
../singular_texi/./d2t_singular/general_lib.tex(,381) detailed information about allocated and used memory if v!=0
../singular_texi/./d2t_singular/general_lib.tex(,382) 
../singular_texi/./d2t_singular/general_lib.tex(,383) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,384) kmemory uses internal function 'memory' to compute kilobyte, and
../singular_texi/./d2t_singular/general_lib.tex(,385) is the same as 'memory' for n!=0,1,2
../singular_texi/./d2t_singular/general_lib.tex(,386) 
../singular_texi/./d2t_singular/general_lib.tex(,387) @end table
../singular_texi/./d2t_singular/general_lib.tex(,388) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,389) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,390) @c computed example kmemory d2t_singular/general_lib.doc:307 
../singular_texi/./d2t_singular/general_lib.tex(,391) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,392) kmemory();
../singular_texi/./d2t_singular/general_lib.tex(,393) @expansion{} 152
../singular_texi/./d2t_singular/general_lib.tex(,394) kmemory(1,1);
../singular_texi/./d2t_singular/general_lib.tex(,395) @expansion{} // total memory allocated, at the moment, by SINGULAR (kilobyte):
../singular_texi/./d2t_singular/general_lib.tex(,396) @expansion{} 650
../singular_texi/./d2t_singular/general_lib.tex(,397) @c end example kmemory d2t_singular/general_lib.doc:307
../singular_texi/./d2t_singular/general_lib.tex(,398) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,399) @c ---end content kmemory---
../singular_texi/./d2t_singular/general_lib.tex(,400) 
../singular_texi/./d2t_singular/general_lib.tex(,401) @c ------------------- killall -------------
../singular_texi/./d2t_singular/general_lib.tex(,402) @node killall, number_e, kmemory, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,403) @subsubsection killall
../singular_texi/./d2t_singular/general_lib.tex(,404) @cindex killall
../singular_texi/./d2t_singular/general_lib.tex(,405) @c ---content killall---
../singular_texi/./d2t_singular/general_lib.tex(,406) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,407) 
../singular_texi/./d2t_singular/general_lib.tex(,408) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,409) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,410) killall(); (no parameter)
../singular_texi/./d2t_singular/general_lib.tex(,411) @*killall("type_name");
../singular_texi/./d2t_singular/general_lib.tex(,412) @*killall("not", "type_name");
../singular_texi/./d2t_singular/general_lib.tex(,413) 
../singular_texi/./d2t_singular/general_lib.tex(,414) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,415) killall(); kills all user-defined variables except loaded procedures,
../singular_texi/./d2t_singular/general_lib.tex(,416) no return value.
../singular_texi/./d2t_singular/general_lib.tex(,417) @* - killall("type_name"); kills all user-defined variables,
../singular_texi/./d2t_singular/general_lib.tex(,418) of type "type_name"
../singular_texi/./d2t_singular/general_lib.tex(,419) @* - killall("not", "type_name"); kills all user-defined variables,
../singular_texi/./d2t_singular/general_lib.tex(,420) except those of type "type_name" and except loaded procedures
../singular_texi/./d2t_singular/general_lib.tex(,421) @* - killall("not", "name_1", "name_2", ...);
../singular_texi/./d2t_singular/general_lib.tex(,422) kills all user-defined variables, except those of name "name_i"
../singular_texi/./d2t_singular/general_lib.tex(,423) and except loaded procedures
../singular_texi/./d2t_singular/general_lib.tex(,424) 
../singular_texi/./d2t_singular/general_lib.tex(,425) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,426) killall should never be used inside a procedure
../singular_texi/./d2t_singular/general_lib.tex(,427) 
../singular_texi/./d2t_singular/general_lib.tex(,428) @end table
../singular_texi/./d2t_singular/general_lib.tex(,429) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,430) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,431) @c computed example killall d2t_singular/general_lib.doc:345 
../singular_texi/./d2t_singular/general_lib.tex(,432) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,433) ring rtest; ideal i=x,y,z; string str="hi"; int j = 3;
../singular_texi/./d2t_singular/general_lib.tex(,434) export rtest,i,str,j;       //this makes the local variables global
../singular_texi/./d2t_singular/general_lib.tex(,435) @expansion{} // ** `rtest` is already global
../singular_texi/./d2t_singular/general_lib.tex(,436) @expansion{} // ** `i` is already global
../singular_texi/./d2t_singular/general_lib.tex(,437) @expansion{} // ** `str` is already global
../singular_texi/./d2t_singular/general_lib.tex(,438) @expansion{} // ** `j` is already global
../singular_texi/./d2t_singular/general_lib.tex(,439) listvar();
../singular_texi/./d2t_singular/general_lib.tex(,440) @expansion{} // j                    [0]  int 3
../singular_texi/./d2t_singular/general_lib.tex(,441) @expansion{} // str                  [0]  string hi
../singular_texi/./d2t_singular/general_lib.tex(,442) @expansion{} // rtest                [0]  *ring
../singular_texi/./d2t_singular/general_lib.tex(,443) @expansion{} //      i                    [0]  ideal, 3 generator(s)
../singular_texi/./d2t_singular/general_lib.tex(,444) @expansion{} // LIB                  [0]  string standard.lib,general..., 74 char(s)
../singular_texi/./d2t_singular/general_lib.tex(,445) killall("ring");            // kills all rings
../singular_texi/./d2t_singular/general_lib.tex(,446) @expansion{} // ** killing the basering for level 0
../singular_texi/./d2t_singular/general_lib.tex(,447) listvar();
../singular_texi/./d2t_singular/general_lib.tex(,448) @expansion{} // j                    [0]  int 3
../singular_texi/./d2t_singular/general_lib.tex(,449) @expansion{} // str                  [0]  string hi
../singular_texi/./d2t_singular/general_lib.tex(,450) @expansion{} // LIB                  [0]  string standard.lib,general..., 74 char(s)
../singular_texi/./d2t_singular/general_lib.tex(,451) killall("not", "int");      // kills all variables except int's (and procs)
../singular_texi/./d2t_singular/general_lib.tex(,452) listvar();
../singular_texi/./d2t_singular/general_lib.tex(,453) @expansion{} // j                    [0]  int 3
../singular_texi/./d2t_singular/general_lib.tex(,454) @expansion{} // LIB                  [0]  string standard.lib,general..., 74 char(s)
../singular_texi/./d2t_singular/general_lib.tex(,455) killall();                  // kills all vars except loaded procs
../singular_texi/./d2t_singular/general_lib.tex(,456) listvar();
../singular_texi/./d2t_singular/general_lib.tex(,457) @expansion{} // j                    [0]  int 3
../singular_texi/./d2t_singular/general_lib.tex(,458) @expansion{} // LIB                  [0]  string standard.lib,general..., 74 char(s)
../singular_texi/./d2t_singular/general_lib.tex(,459) @c end example killall d2t_singular/general_lib.doc:345
../singular_texi/./d2t_singular/general_lib.tex(,460) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,461) @c ---end content killall---
../singular_texi/./d2t_singular/general_lib.tex(,462) 
../singular_texi/./d2t_singular/general_lib.tex(,463) @c ------------------- number_e -------------
../singular_texi/./d2t_singular/general_lib.tex(,464) @node number_e, number_pi, killall, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,465) @subsubsection number_e
../singular_texi/./d2t_singular/general_lib.tex(,466) @cindex number_e
../singular_texi/./d2t_singular/general_lib.tex(,467) @c ---content number_e---
../singular_texi/./d2t_singular/general_lib.tex(,468) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,469) 
../singular_texi/./d2t_singular/general_lib.tex(,470) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,471) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,472) number_e(n); n integer
../singular_texi/./d2t_singular/general_lib.tex(,473) 
../singular_texi/./d2t_singular/general_lib.tex(,474) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,475) Euler number e=exp(1) up to n decimal digits (no rounding)
../singular_texi/./d2t_singular/general_lib.tex(,476) @* - of type string if no basering of char 0 is defined
../singular_texi/./d2t_singular/general_lib.tex(,477) @* - of type number if a basering of char 0 is defined
../singular_texi/./d2t_singular/general_lib.tex(,478) 
../singular_texi/./d2t_singular/general_lib.tex(,479) @item @strong{Display:}
../singular_texi/./d2t_singular/general_lib.tex(,480) decimal format of e if printlevel > 0 (default:printlevel=0 )
../singular_texi/./d2t_singular/general_lib.tex(,481) 
../singular_texi/./d2t_singular/general_lib.tex(,482) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,483) procedure uses algorithm of A.H.J. Sale
../singular_texi/./d2t_singular/general_lib.tex(,484) 
../singular_texi/./d2t_singular/general_lib.tex(,485) @end table
../singular_texi/./d2t_singular/general_lib.tex(,486) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,487) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,488) @c computed example number_e d2t_singular/general_lib.doc:385 
../singular_texi/./d2t_singular/general_lib.tex(,489) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,490) number_e(30);"";
../singular_texi/./d2t_singular/general_lib.tex(,491) @expansion{} 2.71828182845904523536028747135
../singular_texi/./d2t_singular/general_lib.tex(,492) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,493) ring R = 0,t,lp;
../singular_texi/./d2t_singular/general_lib.tex(,494) number e = number_e(30);
../singular_texi/./d2t_singular/general_lib.tex(,495) e;
../singular_texi/./d2t_singular/general_lib.tex(,496) @expansion{} 13591409142295226176801437356763/5000000000000000000000000000000
../singular_texi/./d2t_singular/general_lib.tex(,497) @c end example number_e d2t_singular/general_lib.doc:385
../singular_texi/./d2t_singular/general_lib.tex(,498) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,499) @c ---end content number_e---
../singular_texi/./d2t_singular/general_lib.tex(,500) 
../singular_texi/./d2t_singular/general_lib.tex(,501) @c ------------------- number_pi -------------
../singular_texi/./d2t_singular/general_lib.tex(,502) @node number_pi, primes, number_e, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,503) @subsubsection number_pi
../singular_texi/./d2t_singular/general_lib.tex(,504) @cindex number_pi
../singular_texi/./d2t_singular/general_lib.tex(,505) @c ---content number_pi---
../singular_texi/./d2t_singular/general_lib.tex(,506) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,507) 
../singular_texi/./d2t_singular/general_lib.tex(,508) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,509) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,510) number_pi(n); n positive integer
../singular_texi/./d2t_singular/general_lib.tex(,511) 
../singular_texi/./d2t_singular/general_lib.tex(,512) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,513) pi (area of unit circle) up to n decimal digits (no rounding)
../singular_texi/./d2t_singular/general_lib.tex(,514) @* - of type string if no basering of char 0 is defined,
../singular_texi/./d2t_singular/general_lib.tex(,515) @* - of type number, if a basering of char 0 is defined
../singular_texi/./d2t_singular/general_lib.tex(,516) 
../singular_texi/./d2t_singular/general_lib.tex(,517) @item @strong{Display:}
../singular_texi/./d2t_singular/general_lib.tex(,518) decimal format of pi if printlevel > 0 (default:printlevel=0 )
../singular_texi/./d2t_singular/general_lib.tex(,519) 
../singular_texi/./d2t_singular/general_lib.tex(,520) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,521) procedure uses algorithm of S. Rabinowitz
../singular_texi/./d2t_singular/general_lib.tex(,522) 
../singular_texi/./d2t_singular/general_lib.tex(,523) @end table
../singular_texi/./d2t_singular/general_lib.tex(,524) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,525) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,526) @c computed example number_pi d2t_singular/general_lib.doc:420 
../singular_texi/./d2t_singular/general_lib.tex(,527) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,528) number_pi(11);"";
../singular_texi/./d2t_singular/general_lib.tex(,529) @expansion{} 3.1415926535
../singular_texi/./d2t_singular/general_lib.tex(,530) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,531) ring r = (real,10),t,dp;
../singular_texi/./d2t_singular/general_lib.tex(,532) number pi = number_pi(11); pi;
../singular_texi/./d2t_singular/general_lib.tex(,533) @expansion{} 3.1415926536
../singular_texi/./d2t_singular/general_lib.tex(,534) @c end example number_pi d2t_singular/general_lib.doc:420
../singular_texi/./d2t_singular/general_lib.tex(,535) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,536) @c ---end content number_pi---
../singular_texi/./d2t_singular/general_lib.tex(,537) 
../singular_texi/./d2t_singular/general_lib.tex(,538) @c ------------------- primes -------------
../singular_texi/./d2t_singular/general_lib.tex(,539) @node primes, product, number_pi, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,540) @subsubsection primes
../singular_texi/./d2t_singular/general_lib.tex(,541) @cindex primes
../singular_texi/./d2t_singular/general_lib.tex(,542) @c ---content primes---
../singular_texi/./d2t_singular/general_lib.tex(,543) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,544) 
../singular_texi/./d2t_singular/general_lib.tex(,545) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,546) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,547) primes(n,m); n,m integers
../singular_texi/./d2t_singular/general_lib.tex(,548) 
../singular_texi/./d2t_singular/general_lib.tex(,549) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,550) intvec, consisting of all primes p, prime(n)<=p<=m, in increasing
../singular_texi/./d2t_singular/general_lib.tex(,551) order if n<=m, resp. prime(m)<=p<=n, in decreasing order if m<n.
../singular_texi/./d2t_singular/general_lib.tex(,552) 
../singular_texi/./d2t_singular/general_lib.tex(,553) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,554) prime(n); returns the biggest prime number <= min(n,32003)
../singular_texi/./d2t_singular/general_lib.tex(,555) if n>=2, else 2
../singular_texi/./d2t_singular/general_lib.tex(,556) 
../singular_texi/./d2t_singular/general_lib.tex(,557) @end table
../singular_texi/./d2t_singular/general_lib.tex(,558) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,559) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,560) @c computed example primes d2t_singular/general_lib.doc:451 
../singular_texi/./d2t_singular/general_lib.tex(,561) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,562) primes(50,100);"";
../singular_texi/./d2t_singular/general_lib.tex(,563) @expansion{} 47,53,59,61,67,71,73,79,83,89,97
../singular_texi/./d2t_singular/general_lib.tex(,564) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,565) intvec v = primes(37,1); v;
../singular_texi/./d2t_singular/general_lib.tex(,566) @expansion{} 37,31,29,23,19,17,13,11,7,5,3,2
../singular_texi/./d2t_singular/general_lib.tex(,567) @c end example primes d2t_singular/general_lib.doc:451
../singular_texi/./d2t_singular/general_lib.tex(,568) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,569) @c ---end content primes---
../singular_texi/./d2t_singular/general_lib.tex(,570) 
../singular_texi/./d2t_singular/general_lib.tex(,571) @c ------------------- product -------------
../singular_texi/./d2t_singular/general_lib.tex(,572) @node product, sort, primes, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,573) @subsubsection product
../singular_texi/./d2t_singular/general_lib.tex(,574) @cindex product
../singular_texi/./d2t_singular/general_lib.tex(,575) @c ---content product---
../singular_texi/./d2t_singular/general_lib.tex(,576) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,577) 
../singular_texi/./d2t_singular/general_lib.tex(,578) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,579) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,580) product(id[,v]); id ideal/vector/module/matrix/intvec/intmat/list,
../singular_texi/./d2t_singular/general_lib.tex(,581) v intvec (default: v=1..number of entries of id)
../singular_texi/./d2t_singular/general_lib.tex(,582) 
../singular_texi/./d2t_singular/general_lib.tex(,583) @item @strong{Assume:}
../singular_texi/./d2t_singular/general_lib.tex(,584) list members can be multiplied.
../singular_texi/./d2t_singular/general_lib.tex(,585) 
../singular_texi/./d2t_singular/general_lib.tex(,586) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,587) The product of all entries of id [with index given by v] of type
../singular_texi/./d2t_singular/general_lib.tex(,588) depending on the entries of id.
../singular_texi/./d2t_singular/general_lib.tex(,589) 
../singular_texi/./d2t_singular/general_lib.tex(,590) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,591) If id is not a list, id is treated as a list of polys resp. integers.
../singular_texi/./d2t_singular/general_lib.tex(,592) A module m is identified with the corresponding matrix M (columns
../singular_texi/./d2t_singular/general_lib.tex(,593) of M generate m).
../singular_texi/./d2t_singular/general_lib.tex(,594) @* If v is outside the range of id, we have the empty product and the
../singular_texi/./d2t_singular/general_lib.tex(,595) result will be 1 (of type int).
../singular_texi/./d2t_singular/general_lib.tex(,596) 
../singular_texi/./d2t_singular/general_lib.tex(,597) @end table
../singular_texi/./d2t_singular/general_lib.tex(,598) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,599) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,600) @c computed example product d2t_singular/general_lib.doc:488 
../singular_texi/./d2t_singular/general_lib.tex(,601) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,602) ring r= 0,(x,y,z),dp;
../singular_texi/./d2t_singular/general_lib.tex(,603) ideal m = maxideal(1);
../singular_texi/./d2t_singular/general_lib.tex(,604) product(m);
../singular_texi/./d2t_singular/general_lib.tex(,605) @expansion{} xyz
../singular_texi/./d2t_singular/general_lib.tex(,606) product(m[2..3]);
../singular_texi/./d2t_singular/general_lib.tex(,607) @expansion{} yz
../singular_texi/./d2t_singular/general_lib.tex(,608) matrix M[2][3] = 1,x,2,y,3,z;
../singular_texi/./d2t_singular/general_lib.tex(,609) product(M);
../singular_texi/./d2t_singular/general_lib.tex(,610) @expansion{} 6xyz
../singular_texi/./d2t_singular/general_lib.tex(,611) intvec v=2,4,6;
../singular_texi/./d2t_singular/general_lib.tex(,612) product(M,v);
../singular_texi/./d2t_singular/general_lib.tex(,613) @expansion{} xyz
../singular_texi/./d2t_singular/general_lib.tex(,614) intvec iv = 1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/general_lib.tex(,615) v=1..5,7,9;
../singular_texi/./d2t_singular/general_lib.tex(,616) product(iv,v);
../singular_texi/./d2t_singular/general_lib.tex(,617) @expansion{} 7560
../singular_texi/./d2t_singular/general_lib.tex(,618) intmat A[2][3] = 1,1,1,2,2,2;
../singular_texi/./d2t_singular/general_lib.tex(,619) product(A,3..5);
../singular_texi/./d2t_singular/general_lib.tex(,620) @expansion{} 4
../singular_texi/./d2t_singular/general_lib.tex(,621) @c end example product d2t_singular/general_lib.doc:488
../singular_texi/./d2t_singular/general_lib.tex(,622) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,623) @c ---end content product---
../singular_texi/./d2t_singular/general_lib.tex(,624) 
../singular_texi/./d2t_singular/general_lib.tex(,625) @c ------------------- sort -------------
../singular_texi/./d2t_singular/general_lib.tex(,626) @node sort, sum, product, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,627) @subsubsection sort
../singular_texi/./d2t_singular/general_lib.tex(,628) @cindex sort
../singular_texi/./d2t_singular/general_lib.tex(,629) @c ---content sort---
../singular_texi/./d2t_singular/general_lib.tex(,630) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,631) 
../singular_texi/./d2t_singular/general_lib.tex(,632) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,633) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,634) sort(id[v,o,n]); id = ideal/module/intvec/list(of intvec's or int's)
../singular_texi/./d2t_singular/general_lib.tex(,635) @* sort may be called with 1, 2 or 3 arguments in the following way:
../singular_texi/./d2t_singular/general_lib.tex(,636) @* sort(id[v,n]); v=intvec of positive integers, n=integer,
../singular_texi/./d2t_singular/general_lib.tex(,637) @* sort(id[o,n]); o=string (any allowed ordstr of a ring), n=integer
../singular_texi/./d2t_singular/general_lib.tex(,638) 
../singular_texi/./d2t_singular/general_lib.tex(,639) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,640) a list l of two elements:
../singular_texi/./d2t_singular/general_lib.tex(,641) @format
../singular_texi/./d2t_singular/general_lib.tex(,642)         l[1]: object of same type as input but sorted in the following way:
../singular_texi/./d2t_singular/general_lib.tex(,643)            - if id=ideal/module: generators of id are sorted w.r.t. intvec v
../singular_texi/./d2t_singular/general_lib.tex(,644)              (id[v[1]] becomes 1-st, id[v[2]]  2-nd element, etc.). If no v is
../singular_texi/./d2t_singular/general_lib.tex(,645)              present, id is sorted w.r.t. ordering o (if o is given) or w.r.t.
../singular_texi/./d2t_singular/general_lib.tex(,646)              actual monomial ordering (if no o is given):
../singular_texi/./d2t_singular/general_lib.tex(,647)              NOTE: generators with SMALLER(!) leading term come FIRST
../singular_texi/./d2t_singular/general_lib.tex(,648)              (e.g. sort(id); sorts backwards to actual monomial ordering)
../singular_texi/./d2t_singular/general_lib.tex(,649)            - if id=list of intvec's or int's: consider a list element, say
../singular_texi/./d2t_singular/general_lib.tex(,650)              id[1]=3,2,5, as exponent vector of the monomial x^3*y^2*z^5;
../singular_texi/./d2t_singular/general_lib.tex(,651)              the corresponding monomials are ordered w.r.t. intvec v (s.a.).
../singular_texi/./d2t_singular/general_lib.tex(,652)              If no v is present, the monomials are sorted w.r.t. ordering o
../singular_texi/./d2t_singular/general_lib.tex(,653)              (if o is given) or w.r.t. lexicographical ordering (if no o is
../singular_texi/./d2t_singular/general_lib.tex(,654)              given). The corresponding ordered list of exponent vectors is
../singular_texi/./d2t_singular/general_lib.tex(,655)              returned.
../singular_texi/./d2t_singular/general_lib.tex(,656)              (e.g. sort(id); sorts lexicographically, smaller int's come first)
../singular_texi/./d2t_singular/general_lib.tex(,657)              WARNING: Since negative exponents create the 0 polynomial in
../singular_texi/./d2t_singular/general_lib.tex(,658)              Singular, id should not contain negative integers: the result
../singular_texi/./d2t_singular/general_lib.tex(,659)              might not be as expected
../singular_texi/./d2t_singular/general_lib.tex(,660)            - if id=intvec: id is treated as list of integers
../singular_texi/./d2t_singular/general_lib.tex(,661)            - if n!=0 the ordering is inverse, i.e. w.r.t. v(size(v)..1)
../singular_texi/./d2t_singular/general_lib.tex(,662)              default: n=0
../singular_texi/./d2t_singular/general_lib.tex(,663)          l[2]: intvec, describing the permutation of the input (hence l[2]=v
../singular_texi/./d2t_singular/general_lib.tex(,664)              if v is given (with positive integers))
../singular_texi/./d2t_singular/general_lib.tex(,665) @end format
../singular_texi/./d2t_singular/general_lib.tex(,666) 
../singular_texi/./d2t_singular/general_lib.tex(,667) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,668) If v is given id may be any simply indexed object (e.g. any list or
../singular_texi/./d2t_singular/general_lib.tex(,669) string); if v[i]<0 and i<=size(id) v[i] is set internally to i;
../singular_texi/./d2t_singular/general_lib.tex(,670) entries of v must be pairwise distinct to get a permutation if id.
../singular_texi/./d2t_singular/general_lib.tex(,671) Zero generators of ideal/module are deleted
../singular_texi/./d2t_singular/general_lib.tex(,672) 
../singular_texi/./d2t_singular/general_lib.tex(,673) @end table
../singular_texi/./d2t_singular/general_lib.tex(,674) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,675) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,676) @c computed example sort d2t_singular/general_lib.doc:558 
../singular_texi/./d2t_singular/general_lib.tex(,677) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,678) ring r0 = 0,(x,y,z,t),lp;
../singular_texi/./d2t_singular/general_lib.tex(,679) ideal i = x3,z3,xyz;
../singular_texi/./d2t_singular/general_lib.tex(,680) sort(i);            //sorts using lex ordering, smaller polys come first
../singular_texi/./d2t_singular/general_lib.tex(,681) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,682) @expansion{}    _[1]=z3
../singular_texi/./d2t_singular/general_lib.tex(,683) @expansion{}    _[2]=xyz
../singular_texi/./d2t_singular/general_lib.tex(,684) @expansion{}    _[3]=x3
../singular_texi/./d2t_singular/general_lib.tex(,685) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,686) @expansion{}    2,3,1
../singular_texi/./d2t_singular/general_lib.tex(,687) sort(i,3..1);
../singular_texi/./d2t_singular/general_lib.tex(,688) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,689) @expansion{}    _[1]=xyz
../singular_texi/./d2t_singular/general_lib.tex(,690) @expansion{}    _[2]=z3
../singular_texi/./d2t_singular/general_lib.tex(,691) @expansion{}    _[3]=x3
../singular_texi/./d2t_singular/general_lib.tex(,692) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,693) @expansion{}    3,2,1
../singular_texi/./d2t_singular/general_lib.tex(,694) sort(i,"ls")[1];     //sort w.r.t. negative lex ordering
../singular_texi/./d2t_singular/general_lib.tex(,695) @expansion{} _[1]=x3
../singular_texi/./d2t_singular/general_lib.tex(,696) @expansion{} _[2]=xyz
../singular_texi/./d2t_singular/general_lib.tex(,697) @expansion{} _[3]=z3
../singular_texi/./d2t_singular/general_lib.tex(,698) intvec v =1,10..5,2..4;v;
../singular_texi/./d2t_singular/general_lib.tex(,699) @expansion{} 1,10,9,8,7,6,5,2,3,4
../singular_texi/./d2t_singular/general_lib.tex(,700) sort(v)[1];          // sort v lexicographically
../singular_texi/./d2t_singular/general_lib.tex(,701) @expansion{} 1,2,3,4,5,6,7,8,9,10
../singular_texi/./d2t_singular/general_lib.tex(,702) sort(v,"Dp",1)[1];   // sort v w.r.t (total sum, reverse lex)
../singular_texi/./d2t_singular/general_lib.tex(,703) @expansion{} 10,9,8,7,6,5,4,3,2,1
../singular_texi/./d2t_singular/general_lib.tex(,704) @c end example sort d2t_singular/general_lib.doc:558
../singular_texi/./d2t_singular/general_lib.tex(,705) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,706) @c ---end content sort---
../singular_texi/./d2t_singular/general_lib.tex(,707) 
../singular_texi/./d2t_singular/general_lib.tex(,708) @c ------------------- sum -------------
../singular_texi/./d2t_singular/general_lib.tex(,709) @node sum, watchdog, sort, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,710) @subsubsection sum
../singular_texi/./d2t_singular/general_lib.tex(,711) @cindex sum
../singular_texi/./d2t_singular/general_lib.tex(,712) @c ---content sum---
../singular_texi/./d2t_singular/general_lib.tex(,713) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,714) 
../singular_texi/./d2t_singular/general_lib.tex(,715) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,716) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,717) sum(id[,v]); id ideal/vector/module/matrix/intvec/intmat/list,
../singular_texi/./d2t_singular/general_lib.tex(,718) v intvec (default: v=1..number of entries of id)
../singular_texi/./d2t_singular/general_lib.tex(,719) 
../singular_texi/./d2t_singular/general_lib.tex(,720) @item @strong{Assume:}
../singular_texi/./d2t_singular/general_lib.tex(,721) list members can be added.
../singular_texi/./d2t_singular/general_lib.tex(,722) 
../singular_texi/./d2t_singular/general_lib.tex(,723) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,724) The sum of all entries of id [with index given by v] of type
../singular_texi/./d2t_singular/general_lib.tex(,725) depending on the entries of id.
../singular_texi/./d2t_singular/general_lib.tex(,726) 
../singular_texi/./d2t_singular/general_lib.tex(,727) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,728) If id is not a list, id is treated as a list of polys resp. integers.
../singular_texi/./d2t_singular/general_lib.tex(,729) A module m is identified with the corresponding matrix M (columns
../singular_texi/./d2t_singular/general_lib.tex(,730) of M generate m).
../singular_texi/./d2t_singular/general_lib.tex(,731) @* If v is outside the range of id, we have the empty sum and the
../singular_texi/./d2t_singular/general_lib.tex(,732) result will be 0 (of type int).
../singular_texi/./d2t_singular/general_lib.tex(,733) 
../singular_texi/./d2t_singular/general_lib.tex(,734) @end table
../singular_texi/./d2t_singular/general_lib.tex(,735) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,736) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,737) @c computed example sum d2t_singular/general_lib.doc:601 
../singular_texi/./d2t_singular/general_lib.tex(,738) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,739) ring r= 0,(x,y,z),dp;
../singular_texi/./d2t_singular/general_lib.tex(,740) vector pv = [xy,xz,yz,x2,y2,z2];
../singular_texi/./d2t_singular/general_lib.tex(,741) sum(pv);
../singular_texi/./d2t_singular/general_lib.tex(,742) @expansion{} x2+xy+y2+xz+yz+z2
../singular_texi/./d2t_singular/general_lib.tex(,743) sum(pv,2..5);
../singular_texi/./d2t_singular/general_lib.tex(,744) @expansion{} x2+y2+xz+yz
../singular_texi/./d2t_singular/general_lib.tex(,745) matrix M[2][3] = 1,x,2,y,3,z;
../singular_texi/./d2t_singular/general_lib.tex(,746) intvec w=2,4,6;
../singular_texi/./d2t_singular/general_lib.tex(,747) sum(M,w);
../singular_texi/./d2t_singular/general_lib.tex(,748) @expansion{} x+y+z
../singular_texi/./d2t_singular/general_lib.tex(,749) intvec iv = 1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/general_lib.tex(,750) sum(iv,2..4);
../singular_texi/./d2t_singular/general_lib.tex(,751) @expansion{} 9
../singular_texi/./d2t_singular/general_lib.tex(,752) @c end example sum d2t_singular/general_lib.doc:601
../singular_texi/./d2t_singular/general_lib.tex(,753) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,754) @c ---end content sum---
../singular_texi/./d2t_singular/general_lib.tex(,755) 
../singular_texi/./d2t_singular/general_lib.tex(,756) @c ------------------- watchdog -------------
../singular_texi/./d2t_singular/general_lib.tex(,757) @node watchdog, which, sum, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,758) @subsubsection watchdog
../singular_texi/./d2t_singular/general_lib.tex(,759) @cindex watchdog
../singular_texi/./d2t_singular/general_lib.tex(,760) @c ---content watchdog---
../singular_texi/./d2t_singular/general_lib.tex(,761) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,762) 
../singular_texi/./d2t_singular/general_lib.tex(,763) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,764) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,765) Result of cmd, if the result can be computed in i seconds.
../singular_texi/./d2t_singular/general_lib.tex(,766) Otherwise the computation is interrupted after i seconds,
../singular_texi/./d2t_singular/general_lib.tex(,767) the string "Killed" is returned and the global variable
../singular_texi/./d2t_singular/general_lib.tex(,768) 'watchdog_interrupt' is defined.
../singular_texi/./d2t_singular/general_lib.tex(,769) 
../singular_texi/./d2t_singular/general_lib.tex(,770) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,771) * the MP package must be enabled
../singular_texi/./d2t_singular/general_lib.tex(,772) @** the current basering should not be watchdog_rneu, since
../singular_texi/./d2t_singular/general_lib.tex(,773) watchdog_rneu will be killed
../singular_texi/./d2t_singular/general_lib.tex(,774) @** if there are variable names of the structure x(i) all
../singular_texi/./d2t_singular/general_lib.tex(,775) polynomials have to be put into eval(...) in order to be
../singular_texi/./d2t_singular/general_lib.tex(,776) interpreted correctly
../singular_texi/./d2t_singular/general_lib.tex(,777) @** a second Singular process is started by this procedure
../singular_texi/./d2t_singular/general_lib.tex(,778) 
../singular_texi/./d2t_singular/general_lib.tex(,779) @end table
../singular_texi/./d2t_singular/general_lib.tex(,780) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,781) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,782) @c computed example watchdog d2t_singular/general_lib.doc:642 
../singular_texi/./d2t_singular/general_lib.tex(,783) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,784) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/general_lib.tex(,785) poly f=x^30+y^30;
../singular_texi/./d2t_singular/general_lib.tex(,786) watchdog(1,"factorize(eval("+string(f)+"))");
../singular_texi/./d2t_singular/general_lib.tex(,787) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,788) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/general_lib.tex(,789) @expansion{}    _[2]=x16+x14y2-x10y6-x8y8-x6y10+x2y14+y16
../singular_texi/./d2t_singular/general_lib.tex(,790) @expansion{}    _[3]=x8-x6y2+x4y4-x2y6+y8
../singular_texi/./d2t_singular/general_lib.tex(,791) @expansion{}    _[4]=x4-x2y2+y4
../singular_texi/./d2t_singular/general_lib.tex(,792) @expansion{}    _[5]=x2+y2
../singular_texi/./d2t_singular/general_lib.tex(,793) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,794) @expansion{}    1,1,1,1,1
../singular_texi/./d2t_singular/general_lib.tex(,795) watchdog(100,"factorize(eval("+string(f)+"))");
../singular_texi/./d2t_singular/general_lib.tex(,796) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,797) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/general_lib.tex(,798) @expansion{}    _[2]=x16+x14y2-x10y6-x8y8-x6y10+x2y14+y16
../singular_texi/./d2t_singular/general_lib.tex(,799) @expansion{}    _[3]=x8-x6y2+x4y4-x2y6+y8
../singular_texi/./d2t_singular/general_lib.tex(,800) @expansion{}    _[4]=x4-x2y2+y4
../singular_texi/./d2t_singular/general_lib.tex(,801) @expansion{}    _[5]=x2+y2
../singular_texi/./d2t_singular/general_lib.tex(,802) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,803) @expansion{}    1,1,1,1,1
../singular_texi/./d2t_singular/general_lib.tex(,804) @c end example watchdog d2t_singular/general_lib.doc:642
../singular_texi/./d2t_singular/general_lib.tex(,805) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,806) @c ---end content watchdog---
../singular_texi/./d2t_singular/general_lib.tex(,807) 
../singular_texi/./d2t_singular/general_lib.tex(,808) @c ------------------- which -------------
../singular_texi/./d2t_singular/general_lib.tex(,809) @node which, primecoeffs, watchdog, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,810) @subsubsection which
../singular_texi/./d2t_singular/general_lib.tex(,811) @cindex which
../singular_texi/./d2t_singular/general_lib.tex(,812) @c ---content which---
../singular_texi/./d2t_singular/general_lib.tex(,813) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,814) 
../singular_texi/./d2t_singular/general_lib.tex(,815) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,816) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,817) which(command); command = string expression
../singular_texi/./d2t_singular/general_lib.tex(,818) 
../singular_texi/./d2t_singular/general_lib.tex(,819) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,820) Absolute pathname of command, if found in search path.
../singular_texi/./d2t_singular/general_lib.tex(,821) Empty string, otherwise.
../singular_texi/./d2t_singular/general_lib.tex(,822) 
../singular_texi/./d2t_singular/general_lib.tex(,823) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,824) Based on the Unix command 'which'.
../singular_texi/./d2t_singular/general_lib.tex(,825) 
../singular_texi/./d2t_singular/general_lib.tex(,826) @end table
../singular_texi/./d2t_singular/general_lib.tex(,827) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,828) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,829) @c computed example which d2t_singular/general_lib.doc:673 
../singular_texi/./d2t_singular/general_lib.tex(,830) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,831) which("sh");
../singular_texi/./d2t_singular/general_lib.tex(,832) @expansion{} /bin/sh
../singular_texi/./d2t_singular/general_lib.tex(,833) @c end example which d2t_singular/general_lib.doc:673
../singular_texi/./d2t_singular/general_lib.tex(,834) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,835) @c ---end content which---
../singular_texi/./d2t_singular/general_lib.tex(,836) 
../singular_texi/./d2t_singular/general_lib.tex(,837) @c ------------------- primecoeffs -------------
../singular_texi/./d2t_singular/general_lib.tex(,838) @node primecoeffs, primefactors, which, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,839) @subsubsection primecoeffs
../singular_texi/./d2t_singular/general_lib.tex(,840) @cindex primecoeffs
../singular_texi/./d2t_singular/general_lib.tex(,841) @c ---content primecoeffs---
../singular_texi/./d2t_singular/general_lib.tex(,842) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,843) 
../singular_texi/./d2t_singular/general_lib.tex(,844) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,845) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,846) primecoeffs(J[,q]); J any type which can be converted to a matrix
../singular_texi/./d2t_singular/general_lib.tex(,847) e.g. ideal, matrix, vector, module, int, intvec
../singular_texi/./d2t_singular/general_lib.tex(,848) @*q = intger
../singular_texi/./d2t_singular/general_lib.tex(,849) 
../singular_texi/./d2t_singular/general_lib.tex(,850) @item @strong{Compute:}
../singular_texi/./d2t_singular/general_lib.tex(,851) primefactors <= min(p,32003) of coeffs of J (default p = 32003)
../singular_texi/./d2t_singular/general_lib.tex(,852) 
../singular_texi/./d2t_singular/general_lib.tex(,853) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,854) a list, say l, of two intvectors:
../singular_texi/./d2t_singular/general_lib.tex(,855) @*l[1] : the different primefactors of all coefficients of J
../singular_texi/./d2t_singular/general_lib.tex(,856) l[2] : the different remaining factors
../singular_texi/./d2t_singular/general_lib.tex(,857) 
../singular_texi/./d2t_singular/general_lib.tex(,858) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,859) the procedure works for small integers only, just by testing all
../singular_texi/./d2t_singular/general_lib.tex(,860) primes (not to be considerd as serious prime factorization!)
../singular_texi/./d2t_singular/general_lib.tex(,861) 
../singular_texi/./d2t_singular/general_lib.tex(,862) @end table
../singular_texi/./d2t_singular/general_lib.tex(,863) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,864) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,865) @c computed example primecoeffs d2t_singular/general_lib.doc:708 
../singular_texi/./d2t_singular/general_lib.tex(,866) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,867) primecoeffs(intvec(7*8*121,7*8));"";
../singular_texi/./d2t_singular/general_lib.tex(,868) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,869) @expansion{}    2,7,11
../singular_texi/./d2t_singular/general_lib.tex(,870) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,871) @expansion{}    1
../singular_texi/./d2t_singular/general_lib.tex(,872) @expansion{} 
../singular_texi/./d2t_singular/general_lib.tex(,873) ring r = 0,(b,c,t),dp;
../singular_texi/./d2t_singular/general_lib.tex(,874) ideal I = -13b6c3t+4b5c4t,-10b4c2t-5b4ct2;
../singular_texi/./d2t_singular/general_lib.tex(,875) primecoeffs(I);
../singular_texi/./d2t_singular/general_lib.tex(,876) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,877) @expansion{}    2,5,13
../singular_texi/./d2t_singular/general_lib.tex(,878) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,879) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/general_lib.tex(,880) @c end example primecoeffs d2t_singular/general_lib.doc:708
../singular_texi/./d2t_singular/general_lib.tex(,881) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,882) @c ---end content primecoeffs---
../singular_texi/./d2t_singular/general_lib.tex(,883) 
../singular_texi/./d2t_singular/general_lib.tex(,884) @c ------------------- primefactors -------------
../singular_texi/./d2t_singular/general_lib.tex(,885) @node primefactors, timeStd, primecoeffs, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,886) @subsubsection primefactors
../singular_texi/./d2t_singular/general_lib.tex(,887) @cindex primefactors
../singular_texi/./d2t_singular/general_lib.tex(,888) @c ---content primefactors---
../singular_texi/./d2t_singular/general_lib.tex(,889) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,890) 
../singular_texi/./d2t_singular/general_lib.tex(,891) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,892) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,893) primefactors(n [,p]); n = int or number, p = integer
../singular_texi/./d2t_singular/general_lib.tex(,894) 
../singular_texi/./d2t_singular/general_lib.tex(,895) @item @strong{Compute:}
../singular_texi/./d2t_singular/general_lib.tex(,896) primefactors <= min(p,32003) of n (default p = 32003)
../singular_texi/./d2t_singular/general_lib.tex(,897) 
../singular_texi/./d2t_singular/general_lib.tex(,898) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,899) a list, say l,
../singular_texi/./d2t_singular/general_lib.tex(,900) @*l[1] : primefactors <= min(p,32003) of n
../singular_texi/./d2t_singular/general_lib.tex(,901) @*l[2] : l[2][i] = multiplicity of l[1][i]
../singular_texi/./d2t_singular/general_lib.tex(,902) @*l[3] : remaining factor ( n=product@{ (l[1][i]^l[2][i])*l[3]@} )
../singular_texi/./d2t_singular/general_lib.tex(,903) type(l[3])=typeof(n)
../singular_texi/./d2t_singular/general_lib.tex(,904) 
../singular_texi/./d2t_singular/general_lib.tex(,905) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,906) If n is a long integer (of type number) then the procedure
../singular_texi/./d2t_singular/general_lib.tex(,907) finds primefactors <= min(p,32003) but n may be larger as
../singular_texi/./d2t_singular/general_lib.tex(,908) 2147483647 (max. integer representation)
../singular_texi/./d2t_singular/general_lib.tex(,909) 
../singular_texi/./d2t_singular/general_lib.tex(,910) @item @strong{Warning:}
../singular_texi/./d2t_singular/general_lib.tex(,911) the procedure works for small integers only, just by testing all
../singular_texi/./d2t_singular/general_lib.tex(,912) primes (not to be considerd as serious prime factorization!)
../singular_texi/./d2t_singular/general_lib.tex(,913) 
../singular_texi/./d2t_singular/general_lib.tex(,914) @end table
../singular_texi/./d2t_singular/general_lib.tex(,915) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,916) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,917) @c computed example primefactors d2t_singular/general_lib.doc:751 
../singular_texi/./d2t_singular/general_lib.tex(,918) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,919) primefactors(7*8*121);
../singular_texi/./d2t_singular/general_lib.tex(,920) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,921) @expansion{}    2,7,11
../singular_texi/./d2t_singular/general_lib.tex(,922) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,923) @expansion{}    3,1,2
../singular_texi/./d2t_singular/general_lib.tex(,924) @expansion{} [3]:
../singular_texi/./d2t_singular/general_lib.tex(,925) @expansion{}    1
../singular_texi/./d2t_singular/general_lib.tex(,926) ring r = 0,x,dp;
../singular_texi/./d2t_singular/general_lib.tex(,927) primefactors(123456789100);
../singular_texi/./d2t_singular/general_lib.tex(,928) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,929) @expansion{}    2,5
../singular_texi/./d2t_singular/general_lib.tex(,930) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,931) @expansion{}    2,2
../singular_texi/./d2t_singular/general_lib.tex(,932) @expansion{} [3]:
../singular_texi/./d2t_singular/general_lib.tex(,933) @expansion{}    1234567891
../singular_texi/./d2t_singular/general_lib.tex(,934) @c end example primefactors d2t_singular/general_lib.doc:751
../singular_texi/./d2t_singular/general_lib.tex(,935) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,936) @c ---end content primefactors---
../singular_texi/./d2t_singular/general_lib.tex(,937) 
../singular_texi/./d2t_singular/general_lib.tex(,938) @c ------------------- timeStd -------------
../singular_texi/./d2t_singular/general_lib.tex(,939) @node timeStd, timeFactorize, primefactors, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,940) @subsubsection timeStd
../singular_texi/./d2t_singular/general_lib.tex(,941) @cindex timeStd
../singular_texi/./d2t_singular/general_lib.tex(,942) @c ---content timeStd---
../singular_texi/./d2t_singular/general_lib.tex(,943) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,944) 
../singular_texi/./d2t_singular/general_lib.tex(,945) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,946) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,947) timeStd(i,d), i ideal, d integer
../singular_texi/./d2t_singular/general_lib.tex(,948) 
../singular_texi/./d2t_singular/general_lib.tex(,949) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,950) std(i) if the standard basis computation finished after
../singular_texi/./d2t_singular/general_lib.tex(,951) d-1 seconds and i otherwise
../singular_texi/./d2t_singular/general_lib.tex(,952) 
../singular_texi/./d2t_singular/general_lib.tex(,953) @end table
../singular_texi/./d2t_singular/general_lib.tex(,954) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,955) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,956) @c computed example timeStd d2t_singular/general_lib.doc:778 
../singular_texi/./d2t_singular/general_lib.tex(,957) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,958) ring r=32003,(a,b,c,d,e),dp;
../singular_texi/./d2t_singular/general_lib.tex(,959) int n=6;
../singular_texi/./d2t_singular/general_lib.tex(,960) ideal i=
../singular_texi/./d2t_singular/general_lib.tex(,961) a^n-b^n,
../singular_texi/./d2t_singular/general_lib.tex(,962) b^n-c^n,
../singular_texi/./d2t_singular/general_lib.tex(,963) c^n-d^n,
../singular_texi/./d2t_singular/general_lib.tex(,964) d^n-e^n,
../singular_texi/./d2t_singular/general_lib.tex(,965) a^(n-1)*b+b^(n-1)*c+c^(n-1)*d+d^(n-1)*e+e^(n-1)*a;
../singular_texi/./d2t_singular/general_lib.tex(,966) ideal j=timeStd(i,2);
../singular_texi/./d2t_singular/general_lib.tex(,967) j;
../singular_texi/./d2t_singular/general_lib.tex(,968) @expansion{} j[1]=a6-b6
../singular_texi/./d2t_singular/general_lib.tex(,969) @expansion{} j[2]=b6-c6
../singular_texi/./d2t_singular/general_lib.tex(,970) @expansion{} j[3]=c6-d6
../singular_texi/./d2t_singular/general_lib.tex(,971) @expansion{} j[4]=d6-e6
../singular_texi/./d2t_singular/general_lib.tex(,972) @expansion{} j[5]=a5b+b5c+c5d+d5e+ae5
../singular_texi/./d2t_singular/general_lib.tex(,973) @c end example timeStd d2t_singular/general_lib.doc:778
../singular_texi/./d2t_singular/general_lib.tex(,974) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,975) @c ---end content timeStd---
../singular_texi/./d2t_singular/general_lib.tex(,976) 
../singular_texi/./d2t_singular/general_lib.tex(,977) @c ------------------- timeFactorize -------------
../singular_texi/./d2t_singular/general_lib.tex(,978) @node timeFactorize, factorH, timeStd, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,979) @subsubsection timeFactorize
../singular_texi/./d2t_singular/general_lib.tex(,980) @cindex timeFactorize
../singular_texi/./d2t_singular/general_lib.tex(,981) @c ---content timeFactorize---
../singular_texi/./d2t_singular/general_lib.tex(,982) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,983) 
../singular_texi/./d2t_singular/general_lib.tex(,984) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,985) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,986) timeFactorize(p,d) poly p , integer d
../singular_texi/./d2t_singular/general_lib.tex(,987) 
../singular_texi/./d2t_singular/general_lib.tex(,988) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,989) factorize(p) if the factorization finished after d-1
../singular_texi/./d2t_singular/general_lib.tex(,990) @*seconds otherwise f is considered to be irreducible
../singular_texi/./d2t_singular/general_lib.tex(,991) 
../singular_texi/./d2t_singular/general_lib.tex(,992) @end table
../singular_texi/./d2t_singular/general_lib.tex(,993) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,994) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,995) @c computed example timeFactorize d2t_singular/general_lib.doc:812 
../singular_texi/./d2t_singular/general_lib.tex(,996) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,997) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/general_lib.tex(,998) poly p=((x2+y3)^2+xy6)*((x3+y2)^2+x10y);
../singular_texi/./d2t_singular/general_lib.tex(,999) p=p^2;
../singular_texi/./d2t_singular/general_lib.tex(,1000) list l=timeFactorize(p,2);
../singular_texi/./d2t_singular/general_lib.tex(,1001) l;
../singular_texi/./d2t_singular/general_lib.tex(,1002) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,1003) @expansion{}    [1]:
../singular_texi/./d2t_singular/general_lib.tex(,1004) @expansion{}       1
../singular_texi/./d2t_singular/general_lib.tex(,1005) @expansion{}    [2]:
../singular_texi/./d2t_singular/general_lib.tex(,1006) @expansion{}       x22y14+2x21y14+4x23y11+x20y14+2x25y8+4x22y11+6x24y8+4x26y5+2x18y13+\
../singular_texi/./d2t_singular/general_lib.tex(,1007)    x28y2+4x17y13+4x15y15+8x19y10+2x16y13+8x14y15+2x12y17+4x21y7+8x18y10+16x1\
../singular_texi/./d2t_singular/general_lib.tex(,1008)    6y12+4x13y15+4x11y17+12x20y7+8x18y9+16x15y12+8x13y14+2x10y17+8x22y4+24x17\
../singular_texi/./d2t_singular/general_lib.tex(,1009)    y9+4x15y11+x14y12+8x12y14+2x24y+16x19y6+12x14y11+2x13y12+4x11y14+4x21y3+8\
../singular_texi/./d2t_singular/general_lib.tex(,1010)    x16y8+4x15y9+x12y12+8x10y14+6x8y16+2x18y5+2x17y6+4x14y9+16x12y11+4x9y14+1\
../singular_texi/./d2t_singular/general_lib.tex(,1011)    2x7y16+4x5y18+6x16y6+8x14y8+16x11y11+24x9y13+6x6y16+8x4y18+x2y20+4x18y3+2\
../singular_texi/./d2t_singular/general_lib.tex(,1012)    4x13y8+12x11y10+24x8y13+16x6y15+4x3y18+2xy20+x20+16x15y5+36x10y10+8x8y12+\
../singular_texi/./d2t_singular/general_lib.tex(,1013)    16x5y15+4x3y17+y20+4x17y2+24x12y7+24x7y12+2x5y14+4x2y17+6x14y4+16x9y9+6x4\
../singular_texi/./d2t_singular/general_lib.tex(,1014)    y14+4x11y6+4x6y11+x8y8
../singular_texi/./d2t_singular/general_lib.tex(,1015) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,1016) @expansion{}    1,1
../singular_texi/./d2t_singular/general_lib.tex(,1017) @c end example timeFactorize d2t_singular/general_lib.doc:812
../singular_texi/./d2t_singular/general_lib.tex(,1018) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,1019) @c ---end content timeFactorize---
../singular_texi/./d2t_singular/general_lib.tex(,1020) 
../singular_texi/./d2t_singular/general_lib.tex(,1021) @c ------------------- factorH -------------
../singular_texi/./d2t_singular/general_lib.tex(,1022) @node factorH,, timeFactorize, general_lib
../singular_texi/./d2t_singular/general_lib.tex(,1023) @subsubsection factorH
../singular_texi/./d2t_singular/general_lib.tex(,1024) @cindex factorH
../singular_texi/./d2t_singular/general_lib.tex(,1025) @c ---content factorH---
../singular_texi/./d2t_singular/general_lib.tex(,1026) Procedure from library @code{general.lib} (@pxref{general_lib}).
../singular_texi/./d2t_singular/general_lib.tex(,1027) 
../singular_texi/./d2t_singular/general_lib.tex(,1028) @table @asis
../singular_texi/./d2t_singular/general_lib.tex(,1029) @item @strong{Usage:}
../singular_texi/./d2t_singular/general_lib.tex(,1030) factorH(p) p poly
../singular_texi/./d2t_singular/general_lib.tex(,1031) 
../singular_texi/./d2t_singular/general_lib.tex(,1032) @item @strong{Return:}
../singular_texi/./d2t_singular/general_lib.tex(,1033) factorize(p)
../singular_texi/./d2t_singular/general_lib.tex(,1034) 
../singular_texi/./d2t_singular/general_lib.tex(,1035) @item @strong{Note:}
../singular_texi/./d2t_singular/general_lib.tex(,1036) changes variables to become the last variable the principal
../singular_texi/./d2t_singular/general_lib.tex(,1037) one in the multivariate factorization and factorizes then
../singular_texi/./d2t_singular/general_lib.tex(,1038) the polynomial
../singular_texi/./d2t_singular/general_lib.tex(,1039) 
../singular_texi/./d2t_singular/general_lib.tex(,1040) @end table
../singular_texi/./d2t_singular/general_lib.tex(,1041) @strong{Example:}
../singular_texi/./d2t_singular/general_lib.tex(,1042) @smallexample
../singular_texi/./d2t_singular/general_lib.tex(,1043) @c computed example factorH d2t_singular/general_lib.doc:845 
../singular_texi/./d2t_singular/general_lib.tex(,1044) LIB "general.lib";
../singular_texi/./d2t_singular/general_lib.tex(,1045) system("random",992851144);
../singular_texi/./d2t_singular/general_lib.tex(,1046) ring r=32003,(x,y,z,w,t),lp;
../singular_texi/./d2t_singular/general_lib.tex(,1047) poly p=y2w9+yz7t-yz5w4-z2w4t4-w8t3;
../singular_texi/./d2t_singular/general_lib.tex(,1048) //factorize(p);  //fast
../singular_texi/./d2t_singular/general_lib.tex(,1049) //system("random",992851262);
../singular_texi/./d2t_singular/general_lib.tex(,1050) //factorize(p);  //slow
../singular_texi/./d2t_singular/general_lib.tex(,1051) //system("random",992851262);
../singular_texi/./d2t_singular/general_lib.tex(,1052) factorH(p);
../singular_texi/./d2t_singular/general_lib.tex(,1053) @expansion{} [1]:
../singular_texi/./d2t_singular/general_lib.tex(,1054) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/general_lib.tex(,1055) @expansion{}    _[2]=y2w9+yz7t-yz5w4-z2w4t4-w8t3
../singular_texi/./d2t_singular/general_lib.tex(,1056) @expansion{} [2]:
../singular_texi/./d2t_singular/general_lib.tex(,1057) @expansion{}    1,1
../singular_texi/./d2t_singular/general_lib.tex(,1058) @c end example factorH d2t_singular/general_lib.doc:845
../singular_texi/./d2t_singular/general_lib.tex(,1059) @end smallexample
../singular_texi/./d2t_singular/general_lib.tex(,1060) @c ---end content factorH---
../singular_texi/singular.tex(,312) @c ----------------------------------------------------------
../singular_texi/singular.tex(,313) @node inout_lib, poly_lib, general_lib, General purpose
../singular_texi/singular.tex(,314) @subsection inout_lib
../singular_texi/singular.tex(,315) @c include of docu for inout.lib
../singular_texi/./d2t_singular/inout_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/inout_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/inout_lib.doc
../singular_texi/./d2t_singular/inout_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/inout_lib.doc INSTEAD
../singular_texi/./d2t_singular/inout_lib.tex(,4) @c library version: (1.21.2.5,2002/06/12)
../singular_texi/./d2t_singular/inout_lib.tex(,5) @c library file: ../Singular/LIB/inout.lib
../singular_texi/./d2t_singular/inout_lib.tex(,6) @cindex inout.lib
../singular_texi/./d2t_singular/inout_lib.tex(,7) @cindex inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/inout_lib.tex(,10) inout.lib
../singular_texi/./d2t_singular/inout_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/inout_lib.tex(,12)      Printing and Manipulating In- and Output
../singular_texi/./d2t_singular/inout_lib.tex(,13) 
../singular_texi/./d2t_singular/inout_lib.tex(,14) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,15) 
../singular_texi/./d2t_singular/inout_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/inout_lib.tex(,17) @menu
../singular_texi/./d2t_singular/inout_lib.tex(,18) * allprint:: print list if ALLprint is defined, with pause if >0
../singular_texi/./d2t_singular/inout_lib.tex(,19) * lprint:: display poly/... fitting to pagewidth [size n]
../singular_texi/./d2t_singular/inout_lib.tex(,20) * pmat:: print form-matrix [first n chars of each column]
../singular_texi/./d2t_singular/inout_lib.tex(,21) * rMacaulay:: read Macaulay_1 output and return its Singular format
../singular_texi/./d2t_singular/inout_lib.tex(,22) * show:: display any object in a compact format
../singular_texi/./d2t_singular/inout_lib.tex(,23) * showrecursive:: display id recursively with respect to variables in p
../singular_texi/./d2t_singular/inout_lib.tex(,24) * split:: split given string into lines of length n
../singular_texi/./d2t_singular/inout_lib.tex(,25) * tab:: string of n space tabs
../singular_texi/./d2t_singular/inout_lib.tex(,26) * writelist:: write a list into a file and keep the list structure
../singular_texi/./d2t_singular/inout_lib.tex(,27) * pause:: stop the computation until user input
../singular_texi/./d2t_singular/inout_lib.tex(,28) @end menu
../singular_texi/./d2t_singular/inout_lib.tex(,29) @c ---end content LibInfo---
../singular_texi/./d2t_singular/inout_lib.tex(,30) 
../singular_texi/./d2t_singular/inout_lib.tex(,31) @c ------------------- allprint -------------
../singular_texi/./d2t_singular/inout_lib.tex(,32) @node allprint, lprint,, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,33) @subsubsection allprint
../singular_texi/./d2t_singular/inout_lib.tex(,34) @cindex allprint
../singular_texi/./d2t_singular/inout_lib.tex(,35) @c ---content allprint---
../singular_texi/./d2t_singular/inout_lib.tex(,36) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,37) 
../singular_texi/./d2t_singular/inout_lib.tex(,38) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,39) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,40) allprint(L); L list
../singular_texi/./d2t_singular/inout_lib.tex(,41) 
../singular_texi/./d2t_singular/inout_lib.tex(,42) @item @strong{Display:}
../singular_texi/./d2t_singular/inout_lib.tex(,43) prints L[1], L[2], ... if an integer with name ALLprint is defined.
../singular_texi/./d2t_singular/inout_lib.tex(,44) @* makes "pause", if ALLprint > 0
../singular_texi/./d2t_singular/inout_lib.tex(,45) @* listvar(matrix), if ALLprint = 2
../singular_texi/./d2t_singular/inout_lib.tex(,46) 
../singular_texi/./d2t_singular/inout_lib.tex(,47) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,48) no return value
../singular_texi/./d2t_singular/inout_lib.tex(,49) 
../singular_texi/./d2t_singular/inout_lib.tex(,50) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,51) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,52) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,53) @c computed example allprint d2t_singular/inout_lib.doc:51 
../singular_texi/./d2t_singular/inout_lib.tex(,54) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,55) ring S;
../singular_texi/./d2t_singular/inout_lib.tex(,56) matrix M=matrix(freemodule(2),3,3);
../singular_texi/./d2t_singular/inout_lib.tex(,57) int ALLprint; export ALLprint;
../singular_texi/./d2t_singular/inout_lib.tex(,58) @expansion{} // ** `ALLprint` is already global
../singular_texi/./d2t_singular/inout_lib.tex(,59) allprint("M =",M);
../singular_texi/./d2t_singular/inout_lib.tex(,60) @expansion{} M =
../singular_texi/./d2t_singular/inout_lib.tex(,61) @expansion{} 1,0,0,
../singular_texi/./d2t_singular/inout_lib.tex(,62) @expansion{} 0,1,0,
../singular_texi/./d2t_singular/inout_lib.tex(,63) @expansion{} 0,0,0 
../singular_texi/./d2t_singular/inout_lib.tex(,64) kill ALLprint;
../singular_texi/./d2t_singular/inout_lib.tex(,65) @c end example allprint d2t_singular/inout_lib.doc:51
../singular_texi/./d2t_singular/inout_lib.tex(,66) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,67) @c ---end content allprint---
../singular_texi/./d2t_singular/inout_lib.tex(,68) 
../singular_texi/./d2t_singular/inout_lib.tex(,69) @c ------------------- lprint -------------
../singular_texi/./d2t_singular/inout_lib.tex(,70) @node lprint, pmat, allprint, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,71) @subsubsection lprint
../singular_texi/./d2t_singular/inout_lib.tex(,72) @cindex lprint
../singular_texi/./d2t_singular/inout_lib.tex(,73) @c ---content lprint---
../singular_texi/./d2t_singular/inout_lib.tex(,74) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,75) 
../singular_texi/./d2t_singular/inout_lib.tex(,76) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,77) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,78) lprint(id[,n]); id poly/ideal/vector/module/matrix, n integer
../singular_texi/./d2t_singular/inout_lib.tex(,79) 
../singular_texi/./d2t_singular/inout_lib.tex(,80) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,81) string of id in a format fitting into lines of size n, such that no
../singular_texi/./d2t_singular/inout_lib.tex(,82) monomial is destroyed, i.e. the new line starts with + or -;
../singular_texi/./d2t_singular/inout_lib.tex(,83) (default: n = pagewidth).
../singular_texi/./d2t_singular/inout_lib.tex(,84) 
../singular_texi/./d2t_singular/inout_lib.tex(,85) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,86) id is printed columnwise, each column separated by a blank line;
../singular_texi/./d2t_singular/inout_lib.tex(,87) hence lprint(transpose(id)); displays a matrix id in a format which
../singular_texi/./d2t_singular/inout_lib.tex(,88) can be used as input.
../singular_texi/./d2t_singular/inout_lib.tex(,89) 
../singular_texi/./d2t_singular/inout_lib.tex(,90) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,91) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,92) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,93) @c computed example lprint d2t_singular/inout_lib.doc:86 
../singular_texi/./d2t_singular/inout_lib.tex(,94) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,95) ring r= 0,(x,y,z),ds;
../singular_texi/./d2t_singular/inout_lib.tex(,96) poly f=((x+y)*(x-y)*(x+z)*(y+z)^2);
../singular_texi/./d2t_singular/inout_lib.tex(,97) lprint(f,40);
../singular_texi/./d2t_singular/inout_lib.tex(,98) @expansion{}   x3y2-xy4+2x3yz+x2y2z-2xy3z-y4z+x3z2
../singular_texi/./d2t_singular/inout_lib.tex(,99) @expansion{} +2x2yz2-xy2z2-2y3z2+x2z3-y2z3
../singular_texi/./d2t_singular/inout_lib.tex(,100) module m = [f*(x-y)],[0,f*(x-y)];
../singular_texi/./d2t_singular/inout_lib.tex(,101) string s=lprint(m); s;"";
../singular_texi/./d2t_singular/inout_lib.tex(,102) @expansion{}   x4y2-x3y3-x2y4+xy5+2x4yz-x3y2z-3x2y3z+xy4z+y5z+x4z2+x3yz2-3x2y2z2-xy3z2
../singular_texi/./d2t_singular/inout_lib.tex(,103) @expansion{} +2y4z2+x3z3-x2yz3-xy2z3+y3z3,
../singular_texi/./d2t_singular/inout_lib.tex(,104) @expansion{}   0,
../singular_texi/./d2t_singular/inout_lib.tex(,105) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,106) @expansion{}   0,
../singular_texi/./d2t_singular/inout_lib.tex(,107) @expansion{}   x4y2-x3y3-x2y4+xy5+2x4yz-x3y2z-3x2y3z+xy4z+y5z+x4z2+x3yz2-3x2y2z2-xy3z2
../singular_texi/./d2t_singular/inout_lib.tex(,108) @expansion{} +2y4z2+x3z3-x2yz3-xy2z3+y3z3
../singular_texi/./d2t_singular/inout_lib.tex(,109) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,110) execute("matrix M[2][2]="+s+";");      //use the string s as input
../singular_texi/./d2t_singular/inout_lib.tex(,111) module m1 = transpose(M);	          //should be the same as m
../singular_texi/./d2t_singular/inout_lib.tex(,112) print(m-m1);
../singular_texi/./d2t_singular/inout_lib.tex(,113) @expansion{} 0,0,
../singular_texi/./d2t_singular/inout_lib.tex(,114) @expansion{} 0,0 
../singular_texi/./d2t_singular/inout_lib.tex(,115) @c end example lprint d2t_singular/inout_lib.doc:86
../singular_texi/./d2t_singular/inout_lib.tex(,116) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,117) @c ---end content lprint---
../singular_texi/./d2t_singular/inout_lib.tex(,118) 
../singular_texi/./d2t_singular/inout_lib.tex(,119) @c ------------------- pmat -------------
../singular_texi/./d2t_singular/inout_lib.tex(,120) @node pmat, rMacaulay, lprint, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,121) @subsubsection pmat
../singular_texi/./d2t_singular/inout_lib.tex(,122) @cindex pmat
../singular_texi/./d2t_singular/inout_lib.tex(,123) @c ---content pmat---
../singular_texi/./d2t_singular/inout_lib.tex(,124) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,125) 
../singular_texi/./d2t_singular/inout_lib.tex(,126) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,127) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,128) pmat(M,[n]); M matrix, n integer
../singular_texi/./d2t_singular/inout_lib.tex(,129) 
../singular_texi/./d2t_singular/inout_lib.tex(,130) @item @strong{Display:}
../singular_texi/./d2t_singular/inout_lib.tex(,131) display M in array format if it fits into pagewidth; if n is given,
../singular_texi/./d2t_singular/inout_lib.tex(,132) only the first n characters of each column are shown
../singular_texi/./d2t_singular/inout_lib.tex(,133) 
../singular_texi/./d2t_singular/inout_lib.tex(,134) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,135) no return value
../singular_texi/./d2t_singular/inout_lib.tex(,136) 
../singular_texi/./d2t_singular/inout_lib.tex(,137) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,138) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,139) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,140) @c computed example pmat d2t_singular/inout_lib.doc:121 
../singular_texi/./d2t_singular/inout_lib.tex(,141) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,142) ring r=0,(x,y,z),ls;
../singular_texi/./d2t_singular/inout_lib.tex(,143) ideal i= x,z+3y,x+y,z;
../singular_texi/./d2t_singular/inout_lib.tex(,144) matrix m[3][3]=i^2;
../singular_texi/./d2t_singular/inout_lib.tex(,145) pmat(m);
../singular_texi/./d2t_singular/inout_lib.tex(,146) @expansion{} x2,     xz+3xy,     xy+x2,         
../singular_texi/./d2t_singular/inout_lib.tex(,147) @expansion{} xz,     z2+6yz+9y2, yz+3y2+xz+3xy, 
../singular_texi/./d2t_singular/inout_lib.tex(,148) @expansion{} z2+3yz, y2+2xy+x2,  yz+xz
../singular_texi/./d2t_singular/inout_lib.tex(,149) pmat(m,3);
../singular_texi/./d2t_singular/inout_lib.tex(,150) @expansion{} x2  xz+ xy+ 
../singular_texi/./d2t_singular/inout_lib.tex(,151) @expansion{} xz  z2+ yz+ 
../singular_texi/./d2t_singular/inout_lib.tex(,152) @expansion{} z2+ y2+ yz+ 
../singular_texi/./d2t_singular/inout_lib.tex(,153) @c end example pmat d2t_singular/inout_lib.doc:121
../singular_texi/./d2t_singular/inout_lib.tex(,154) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,155) @c ---end content pmat---
../singular_texi/./d2t_singular/inout_lib.tex(,156) 
../singular_texi/./d2t_singular/inout_lib.tex(,157) @c ------------------- rMacaulay -------------
../singular_texi/./d2t_singular/inout_lib.tex(,158) @node rMacaulay, show, pmat, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,159) @subsubsection rMacaulay
../singular_texi/./d2t_singular/inout_lib.tex(,160) @cindex rMacaulay
../singular_texi/./d2t_singular/inout_lib.tex(,161) @c ---content rMacaulay---
../singular_texi/./d2t_singular/inout_lib.tex(,162) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,163) 
../singular_texi/./d2t_singular/inout_lib.tex(,164) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,165) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,166) rMacaulay(s[,n]); s string, n integer
../singular_texi/./d2t_singular/inout_lib.tex(,167) 
../singular_texi/./d2t_singular/inout_lib.tex(,168) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,169) A string which should be readable by Singular if s is a string which
../singular_texi/./d2t_singular/inout_lib.tex(,170) was produced by Macaulay. If a second argument is present the first
../singular_texi/./d2t_singular/inout_lib.tex(,171) n lines of the file are deleted (which is useful if the file was
../singular_texi/./d2t_singular/inout_lib.tex(,172) produced e.g. by the putstd command of Macaulay).
../singular_texi/./d2t_singular/inout_lib.tex(,173) 
../singular_texi/./d2t_singular/inout_lib.tex(,174) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,175) This does not always work with 'cut and paste' since the character
../singular_texi/./d2t_singular/inout_lib.tex(,176) \ is treated differently
../singular_texi/./d2t_singular/inout_lib.tex(,177) 
../singular_texi/./d2t_singular/inout_lib.tex(,178) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,179) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,180) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,181) @c computed example rMacaulay d2t_singular/inout_lib.doc:156 
../singular_texi/./d2t_singular/inout_lib.tex(,182) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,183) // Assume there exists a file 'Macid' with the following ideal in
../singular_texi/./d2t_singular/inout_lib.tex(,184) // Macaulay format:"
../singular_texi/./d2t_singular/inout_lib.tex(,185) // x[0]3-101/74x[0]2x[1]+7371x[0]x[1]2-13/83x[1]3-x[0]2x[2] \
../singular_texi/./d2t_singular/inout_lib.tex(,186) //     -4/71x[0]x[1]x[2]
../singular_texi/./d2t_singular/inout_lib.tex(,187) // Read this file into Singular and assign it to the string s1 by:
../singular_texi/./d2t_singular/inout_lib.tex(,188) // string s1 = read("Macid");
../singular_texi/./d2t_singular/inout_lib.tex(,189) // This is equivalent to";
../singular_texi/./d2t_singular/inout_lib.tex(,190) string s1 =
../singular_texi/./d2t_singular/inout_lib.tex(,191) "x[0]3-101/74x[0]2x[1]+7371x[0]x[1]2-13/83x[1]3-x[0]2x[2]-4/71x[0]x[1]x[2]";
../singular_texi/./d2t_singular/inout_lib.tex(,192) rMacaulay(s1);
../singular_texi/./d2t_singular/inout_lib.tex(,193) @expansion{} x(0)^3-101/74*x(0)^2*x(1)+7371*x(0)*x(1)^2-13/83*x(1)^3-x(0)^2*x(2)-4/71*\
../singular_texi/./d2t_singular/inout_lib.tex(,194)    x(0)*x(1)*x(2)
../singular_texi/./d2t_singular/inout_lib.tex(,195) // You may wish to assign s1 to a Singular ideal id:
../singular_texi/./d2t_singular/inout_lib.tex(,196) string sid = "ideal id =",rMacaulay(s1),";";
../singular_texi/./d2t_singular/inout_lib.tex(,197) ring r = 0,x(0..3),dp;
../singular_texi/./d2t_singular/inout_lib.tex(,198) execute(sid);
../singular_texi/./d2t_singular/inout_lib.tex(,199) id; "";
../singular_texi/./d2t_singular/inout_lib.tex(,200) @expansion{} id[1]=x(0)^3-101/74*x(0)^2*x(1)+7371*x(0)*x(1)^2-13/83*x(1)^3-x(0)^2*x(2)\
../singular_texi/./d2t_singular/inout_lib.tex(,201)    -4/71*x(0)*x(1)*x(2)
../singular_texi/./d2t_singular/inout_lib.tex(,202) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,203) // Now treat a matrix in Macaulay format. Using the execute
../singular_texi/./d2t_singular/inout_lib.tex(,204) // command, this could be assinged to a Singular matrix as above.
../singular_texi/./d2t_singular/inout_lib.tex(,205) string s2 = "
../singular_texi/./d2t_singular/inout_lib.tex(,206) 0  0  0  0  0
../singular_texi/./d2t_singular/inout_lib.tex(,207) a3 0  0  0  0
../singular_texi/./d2t_singular/inout_lib.tex(,208) 0  b3 0  0  0
../singular_texi/./d2t_singular/inout_lib.tex(,209) 0  0  c3 0  0
../singular_texi/./d2t_singular/inout_lib.tex(,210) 0  0  0  d3 0
../singular_texi/./d2t_singular/inout_lib.tex(,211) 0  0  0  0  e3 ";
../singular_texi/./d2t_singular/inout_lib.tex(,212) rMacaulay(s2);
../singular_texi/./d2t_singular/inout_lib.tex(,213) @expansion{} 0, 0, 0, 0, 0,
../singular_texi/./d2t_singular/inout_lib.tex(,214) @expansion{} a3,0, 0, 0, 0,
../singular_texi/./d2t_singular/inout_lib.tex(,215) @expansion{} 0, b3,0, 0, 0,
../singular_texi/./d2t_singular/inout_lib.tex(,216) @expansion{} 0, 0, c3,0, 0,
../singular_texi/./d2t_singular/inout_lib.tex(,217) @expansion{} 0, 0, 0, d3,0,
../singular_texi/./d2t_singular/inout_lib.tex(,218) @expansion{} 0, 0, 0, 0, e3
../singular_texi/./d2t_singular/inout_lib.tex(,219) @c end example rMacaulay d2t_singular/inout_lib.doc:156
../singular_texi/./d2t_singular/inout_lib.tex(,220) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,221) @c ---end content rMacaulay---
../singular_texi/./d2t_singular/inout_lib.tex(,222) 
../singular_texi/./d2t_singular/inout_lib.tex(,223) @c ------------------- show -------------
../singular_texi/./d2t_singular/inout_lib.tex(,224) @node show, showrecursive, rMacaulay, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,225) @subsubsection show
../singular_texi/./d2t_singular/inout_lib.tex(,226) @cindex show
../singular_texi/./d2t_singular/inout_lib.tex(,227) @c ---content show---
../singular_texi/./d2t_singular/inout_lib.tex(,228) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,229) 
../singular_texi/./d2t_singular/inout_lib.tex(,230) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,231) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,232) show(id); id any object of basering or of type ring/qring
../singular_texi/./d2t_singular/inout_lib.tex(,233) @* show(R,s); R=ring, s=string (s = name of an object belonging to R)
../singular_texi/./d2t_singular/inout_lib.tex(,234) 
../singular_texi/./d2t_singular/inout_lib.tex(,235) @item @strong{Display:}
../singular_texi/./d2t_singular/inout_lib.tex(,236) display id/s in a compact format together with some information
../singular_texi/./d2t_singular/inout_lib.tex(,237) 
../singular_texi/./d2t_singular/inout_lib.tex(,238) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,239) no return value
../singular_texi/./d2t_singular/inout_lib.tex(,240) 
../singular_texi/./d2t_singular/inout_lib.tex(,241) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,242) objects of type string, int, intvec, intmat belong to any ring.
../singular_texi/./d2t_singular/inout_lib.tex(,243) id may be a ring or a qring. In this case the minimal polynomial is
../singular_texi/./d2t_singular/inout_lib.tex(,244) displayed, and, for a qring, also the defining ideal.
../singular_texi/./d2t_singular/inout_lib.tex(,245) @*id may be of type list but the list must not contain a ring.
../singular_texi/./d2t_singular/inout_lib.tex(,246) @* show(R,s) does not work inside a procedure!
../singular_texi/./d2t_singular/inout_lib.tex(,247) 
../singular_texi/./d2t_singular/inout_lib.tex(,248) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,249) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,250) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,251) @c computed example show d2t_singular/inout_lib.doc:215 
../singular_texi/./d2t_singular/inout_lib.tex(,252) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,253) ring r;
../singular_texi/./d2t_singular/inout_lib.tex(,254) show(r);
../singular_texi/./d2t_singular/inout_lib.tex(,255) @expansion{} // ring: (32003),(x,y,z),(dp(3),C);
../singular_texi/./d2t_singular/inout_lib.tex(,256) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/inout_lib.tex(,257) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/inout_lib.tex(,258) ideal i=x^3+y^5-6*z^3,xy,x3-y2;
../singular_texi/./d2t_singular/inout_lib.tex(,259) show(i,3);            // introduce 3 space tabs before information
../singular_texi/./d2t_singular/inout_lib.tex(,260) @expansion{}    // ideal, 3 generator(s)
../singular_texi/./d2t_singular/inout_lib.tex(,261) @expansion{} y5+x3-6z3,
../singular_texi/./d2t_singular/inout_lib.tex(,262) @expansion{} xy,
../singular_texi/./d2t_singular/inout_lib.tex(,263) @expansion{} x3-y2
../singular_texi/./d2t_singular/inout_lib.tex(,264) vector v=x*gen(1)+y*gen(3);
../singular_texi/./d2t_singular/inout_lib.tex(,265) module m=v,2*v+gen(4);
../singular_texi/./d2t_singular/inout_lib.tex(,266) list L = i,v,m;
../singular_texi/./d2t_singular/inout_lib.tex(,267) show(L);
../singular_texi/./d2t_singular/inout_lib.tex(,268) @expansion{} // list, 3 element(s):
../singular_texi/./d2t_singular/inout_lib.tex(,269) @expansion{} [1]:
../singular_texi/./d2t_singular/inout_lib.tex(,270) @expansion{}    // ideal, 3 generator(s)
../singular_texi/./d2t_singular/inout_lib.tex(,271) @expansion{} y5+x3-6z3,
../singular_texi/./d2t_singular/inout_lib.tex(,272) @expansion{} xy,
../singular_texi/./d2t_singular/inout_lib.tex(,273) @expansion{} x3-y2
../singular_texi/./d2t_singular/inout_lib.tex(,274) @expansion{} [2]:
../singular_texi/./d2t_singular/inout_lib.tex(,275) @expansion{}    // vector
../singular_texi/./d2t_singular/inout_lib.tex(,276) @expansion{} [x,0,y]
../singular_texi/./d2t_singular/inout_lib.tex(,277) @expansion{} [3]:
../singular_texi/./d2t_singular/inout_lib.tex(,278) @expansion{}    // module, 2 generator(s)
../singular_texi/./d2t_singular/inout_lib.tex(,279) @expansion{} [x,0,y]
../singular_texi/./d2t_singular/inout_lib.tex(,280) @expansion{} [2x,0,2y,1]
../singular_texi/./d2t_singular/inout_lib.tex(,281) ring S=(0,T),(a,b,c,d),ws(1,2,3,4);
../singular_texi/./d2t_singular/inout_lib.tex(,282) minpoly = T^2+1;
../singular_texi/./d2t_singular/inout_lib.tex(,283) ideal i=a2+b,c2+T^2*d2; i=std(i);
../singular_texi/./d2t_singular/inout_lib.tex(,284) qring Q=i;
../singular_texi/./d2t_singular/inout_lib.tex(,285) show(Q);
../singular_texi/./d2t_singular/inout_lib.tex(,286) @expansion{} // qring: (0,T),(a,b,c,d),(ws(1,2,3,4),C);
../singular_texi/./d2t_singular/inout_lib.tex(,287) @expansion{} // minpoly = (T2+1)
../singular_texi/./d2t_singular/inout_lib.tex(,288) @expansion{} // quotient ring from ideal:
../singular_texi/./d2t_singular/inout_lib.tex(,289) @expansion{} _[1]=a2+b
../singular_texi/./d2t_singular/inout_lib.tex(,290) @expansion{} _[2]=c2-d2
../singular_texi/./d2t_singular/inout_lib.tex(,291) map F=r,a2,b^2,3*c3;
../singular_texi/./d2t_singular/inout_lib.tex(,292) show(F);
../singular_texi/./d2t_singular/inout_lib.tex(,293) @expansion{} // i-th variable of preimage ring is mapped to @@map[i]
../singular_texi/./d2t_singular/inout_lib.tex(,294) @expansion{} // @@map                 [1]  map from r
../singular_texi/./d2t_singular/inout_lib.tex(,295) @expansion{} @@map[1]=a2
../singular_texi/./d2t_singular/inout_lib.tex(,296) @expansion{} @@map[2]=b2
../singular_texi/./d2t_singular/inout_lib.tex(,297) @expansion{} @@map[3]=3*c3
../singular_texi/./d2t_singular/inout_lib.tex(,298) // Apply 'show' to i (which does not belong to the basering) by typing
../singular_texi/./d2t_singular/inout_lib.tex(,299) // ring r; ideal i=xy,x3-y2; ring Q; show(r,"i");
../singular_texi/./d2t_singular/inout_lib.tex(,300) @c end example show d2t_singular/inout_lib.doc:215
../singular_texi/./d2t_singular/inout_lib.tex(,301) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,302) @c ---end content show---
../singular_texi/./d2t_singular/inout_lib.tex(,303) 
../singular_texi/./d2t_singular/inout_lib.tex(,304) @c ------------------- showrecursive -------------
../singular_texi/./d2t_singular/inout_lib.tex(,305) @node showrecursive, split, show, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,306) @subsubsection showrecursive
../singular_texi/./d2t_singular/inout_lib.tex(,307) @cindex showrecursive
../singular_texi/./d2t_singular/inout_lib.tex(,308) @c ---content showrecursive---
../singular_texi/./d2t_singular/inout_lib.tex(,309) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,310) 
../singular_texi/./d2t_singular/inout_lib.tex(,311) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,312) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,313) showrecursive(id,p[ord]); id= any object of basering, p= product of
../singular_texi/./d2t_singular/inout_lib.tex(,314) variables and ord=string (any allowed ordstr)
../singular_texi/./d2t_singular/inout_lib.tex(,315) 
../singular_texi/./d2t_singular/inout_lib.tex(,316) @item @strong{Display:}
../singular_texi/./d2t_singular/inout_lib.tex(,317) display 'id' in a recursive format as a polynomial in the variables
../singular_texi/./d2t_singular/inout_lib.tex(,318) occurring in p with coefficients in the remaining variables. This is
../singular_texi/./d2t_singular/inout_lib.tex(,319) done by mapping to a ring with parameters [and ordering 'ord',
../singular_texi/./d2t_singular/inout_lib.tex(,320) if a 3rd argument is present (default: ord="dp")] and applying
../singular_texi/./d2t_singular/inout_lib.tex(,321) procedure 'show'
../singular_texi/./d2t_singular/inout_lib.tex(,322) 
../singular_texi/./d2t_singular/inout_lib.tex(,323) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,324) no return value
../singular_texi/./d2t_singular/inout_lib.tex(,325) 
../singular_texi/./d2t_singular/inout_lib.tex(,326) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,327) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,328) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,329) @c computed example showrecursive d2t_singular/inout_lib.doc:263 
../singular_texi/./d2t_singular/inout_lib.tex(,330) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,331) ring r=2,(a,b,c,d,x,y),ds;
../singular_texi/./d2t_singular/inout_lib.tex(,332) poly f=y+ax2+bx3+cx2y2+dxy3;
../singular_texi/./d2t_singular/inout_lib.tex(,333) showrecursive(f,x);
../singular_texi/./d2t_singular/inout_lib.tex(,334) @expansion{} // poly, 4 monomial(s)
../singular_texi/./d2t_singular/inout_lib.tex(,335) @expansion{} (b)*x3+(a+cy2)*x2+(dy3)*x+(y)
../singular_texi/./d2t_singular/inout_lib.tex(,336) showrecursive(f,xy,"lp");
../singular_texi/./d2t_singular/inout_lib.tex(,337) @expansion{} // poly, 5 monomial(s)
../singular_texi/./d2t_singular/inout_lib.tex(,338) @expansion{} (b)*x3+(c)*x2y2+(a)*x2+(d)*xy3+y
../singular_texi/./d2t_singular/inout_lib.tex(,339) @c end example showrecursive d2t_singular/inout_lib.doc:263
../singular_texi/./d2t_singular/inout_lib.tex(,340) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,341) @c ---end content showrecursive---
../singular_texi/./d2t_singular/inout_lib.tex(,342) 
../singular_texi/./d2t_singular/inout_lib.tex(,343) @c ------------------- split -------------
../singular_texi/./d2t_singular/inout_lib.tex(,344) @node split, tab, showrecursive, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,345) @subsubsection split
../singular_texi/./d2t_singular/inout_lib.tex(,346) @cindex split
../singular_texi/./d2t_singular/inout_lib.tex(,347) @c ---content split---
../singular_texi/./d2t_singular/inout_lib.tex(,348) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,349) 
../singular_texi/./d2t_singular/inout_lib.tex(,350) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,351) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,352) split(s[,n]); s string, n integer
../singular_texi/./d2t_singular/inout_lib.tex(,353) 
../singular_texi/./d2t_singular/inout_lib.tex(,354) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,355) same string, split into lines of length n separated by \
../singular_texi/./d2t_singular/inout_lib.tex(,356) (default: n=pagewidth)
../singular_texi/./d2t_singular/inout_lib.tex(,357) 
../singular_texi/./d2t_singular/inout_lib.tex(,358) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,359) may be used in connection with lprint
../singular_texi/./d2t_singular/inout_lib.tex(,360) 
../singular_texi/./d2t_singular/inout_lib.tex(,361) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,362) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,363) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,364) @c computed example split d2t_singular/inout_lib.doc:294 
../singular_texi/./d2t_singular/inout_lib.tex(,365) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,366) ring r= 0,(x,y,z),ds;
../singular_texi/./d2t_singular/inout_lib.tex(,367) poly f = (x+y+z)^4;
../singular_texi/./d2t_singular/inout_lib.tex(,368) split(string(f),50);
../singular_texi/./d2t_singular/inout_lib.tex(,369) @expansion{} x4+4x3y+6x2y2+4xy3+y4+4x3z+12x2yz+12xy2z+4y3z+6x\
../singular_texi/./d2t_singular/inout_lib.tex(,370) @expansion{} 2z2+12xyz2+6y2z2+4xz3+4yz3+z4
../singular_texi/./d2t_singular/inout_lib.tex(,371) split(lprint(f));
../singular_texi/./d2t_singular/inout_lib.tex(,372) @expansion{}   x4+4x3y+6x2y2+4xy3+y4+4x3z+12x2yz+12xy2z+4y3z+6x2z2+12xyz2+6y2z2+4xz3+4\
../singular_texi/./d2t_singular/inout_lib.tex(,373)    yz3\
../singular_texi/./d2t_singular/inout_lib.tex(,374) @expansion{} +z4
../singular_texi/./d2t_singular/inout_lib.tex(,375) @c end example split d2t_singular/inout_lib.doc:294
../singular_texi/./d2t_singular/inout_lib.tex(,376) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,377) @c ---end content split---
../singular_texi/./d2t_singular/inout_lib.tex(,378) 
../singular_texi/./d2t_singular/inout_lib.tex(,379) @c ------------------- tab -------------
../singular_texi/./d2t_singular/inout_lib.tex(,380) @node tab, writelist, split, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,381) @subsubsection tab
../singular_texi/./d2t_singular/inout_lib.tex(,382) @cindex tab
../singular_texi/./d2t_singular/inout_lib.tex(,383) @c ---content tab---
../singular_texi/./d2t_singular/inout_lib.tex(,384) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,385) 
../singular_texi/./d2t_singular/inout_lib.tex(,386) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,387) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,388) tab(n); n integer
../singular_texi/./d2t_singular/inout_lib.tex(,389) 
../singular_texi/./d2t_singular/inout_lib.tex(,390) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,391) string of n space tabs
../singular_texi/./d2t_singular/inout_lib.tex(,392) 
../singular_texi/./d2t_singular/inout_lib.tex(,393) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,394) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,395) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,396) @c computed example tab d2t_singular/inout_lib.doc:321 
../singular_texi/./d2t_singular/inout_lib.tex(,397) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,398) for(int n=0; n<=5; n=n+1)
../singular_texi/./d2t_singular/inout_lib.tex(,399) @{ tab(5-n)+"*"+tab(n)+"+"+tab(n)+"*"; @}
../singular_texi/./d2t_singular/inout_lib.tex(,400) @expansion{}      *+*
../singular_texi/./d2t_singular/inout_lib.tex(,401) @expansion{}     * + *
../singular_texi/./d2t_singular/inout_lib.tex(,402) @expansion{}    *  +  *
../singular_texi/./d2t_singular/inout_lib.tex(,403) @expansion{}   *   +   *
../singular_texi/./d2t_singular/inout_lib.tex(,404) @expansion{}  *    +    *
../singular_texi/./d2t_singular/inout_lib.tex(,405) @expansion{} *     +     *
../singular_texi/./d2t_singular/inout_lib.tex(,406) @c end example tab d2t_singular/inout_lib.doc:321
../singular_texi/./d2t_singular/inout_lib.tex(,407) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,408) @c ---end content tab---
../singular_texi/./d2t_singular/inout_lib.tex(,409) 
../singular_texi/./d2t_singular/inout_lib.tex(,410) @c ------------------- writelist -------------
../singular_texi/./d2t_singular/inout_lib.tex(,411) @node writelist, pause, tab, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,412) @subsubsection writelist
../singular_texi/./d2t_singular/inout_lib.tex(,413) @cindex writelist
../singular_texi/./d2t_singular/inout_lib.tex(,414) @c ---content writelist---
../singular_texi/./d2t_singular/inout_lib.tex(,415) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,416) 
../singular_texi/./d2t_singular/inout_lib.tex(,417) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,418) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,419) writelist(file,name,L); file,name strings (file-name, list-name),
../singular_texi/./d2t_singular/inout_lib.tex(,420) L a list.
../singular_texi/./d2t_singular/inout_lib.tex(,421) 
../singular_texi/./d2t_singular/inout_lib.tex(,422) @item @strong{Create:}
../singular_texi/./d2t_singular/inout_lib.tex(,423) a file with name `file`, write the content of the list L into it and
../singular_texi/./d2t_singular/inout_lib.tex(,424) call the list `name`, keeping the list structure
../singular_texi/./d2t_singular/inout_lib.tex(,425) 
../singular_texi/./d2t_singular/inout_lib.tex(,426) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,427) no return value
../singular_texi/./d2t_singular/inout_lib.tex(,428) 
../singular_texi/./d2t_singular/inout_lib.tex(,429) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,430) The syntax of writelist uses and is similar to the syntax of the
../singular_texi/./d2t_singular/inout_lib.tex(,431) write command of Singular which does not manage lists properly.
../singular_texi/./d2t_singular/inout_lib.tex(,432) If (file,name) = ("listfile","L1"), writelist creates (resp.
../singular_texi/./d2t_singular/inout_lib.tex(,433) appends if listfile exists) a file with name listfile and stores
../singular_texi/./d2t_singular/inout_lib.tex(,434) there the list L under the name L1. The Singular command
../singular_texi/./d2t_singular/inout_lib.tex(,435) execute(read("listfile")); assigns the content of L (stored in
../singular_texi/./d2t_singular/inout_lib.tex(,436) listfile) to a list L1.
../singular_texi/./d2t_singular/inout_lib.tex(,437) @* On a UNIX system, write(">file",...) overwrites an existing file
../singular_texi/./d2t_singular/inout_lib.tex(,438) `file` while write("file",...) and write(">>file",...) append.
../singular_texi/./d2t_singular/inout_lib.tex(,439) 
../singular_texi/./d2t_singular/inout_lib.tex(,440) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,441) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,442) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,443) @c computed example writelist d2t_singular/inout_lib.doc:362 
../singular_texi/./d2t_singular/inout_lib.tex(,444) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,445) ring r;
../singular_texi/./d2t_singular/inout_lib.tex(,446) ideal i=x,y,z;
../singular_texi/./d2t_singular/inout_lib.tex(,447) list k="Hi",nameof(basering),i,37;
../singular_texi/./d2t_singular/inout_lib.tex(,448) writelist("zumSpass","lustig",k);
../singular_texi/./d2t_singular/inout_lib.tex(,449) read("zumSpass");
../singular_texi/./d2t_singular/inout_lib.tex(,450) @expansion{} list lustig;
../singular_texi/./d2t_singular/inout_lib.tex(,451) @expansion{}    lustig[1]=
../singular_texi/./d2t_singular/inout_lib.tex(,452) @expansion{} Hi;
../singular_texi/./d2t_singular/inout_lib.tex(,453) @expansion{}    lustig[2]=
../singular_texi/./d2t_singular/inout_lib.tex(,454) @expansion{} r;
../singular_texi/./d2t_singular/inout_lib.tex(,455) @expansion{}    lustig[3]=
../singular_texi/./d2t_singular/inout_lib.tex(,456) @expansion{} x,y,z;
../singular_texi/./d2t_singular/inout_lib.tex(,457) @expansion{}    lustig[4]=
../singular_texi/./d2t_singular/inout_lib.tex(,458) @expansion{} 37;
../singular_texi/./d2t_singular/inout_lib.tex(,459) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,460) list L=res(i,0);                    //resolution of the ideal i
../singular_texi/./d2t_singular/inout_lib.tex(,461) writelist("res_list","res-name",L); "";
../singular_texi/./d2t_singular/inout_lib.tex(,462) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,463) read("res_list");
../singular_texi/./d2t_singular/inout_lib.tex(,464) @expansion{} list res-name;
../singular_texi/./d2t_singular/inout_lib.tex(,465) @expansion{}    res-name[1]=
../singular_texi/./d2t_singular/inout_lib.tex(,466) @expansion{} z,y,x;
../singular_texi/./d2t_singular/inout_lib.tex(,467) @expansion{}    res-name[2]=
../singular_texi/./d2t_singular/inout_lib.tex(,468) @expansion{} -y*gen(1)+z*gen(2),-x*gen(1)+z*gen(3),-x*gen(2)+y*gen(3);
../singular_texi/./d2t_singular/inout_lib.tex(,469) @expansion{}    res-name[3]=
../singular_texi/./d2t_singular/inout_lib.tex(,470) @expansion{} x*gen(1)-y*gen(2)+z*gen(3);
../singular_texi/./d2t_singular/inout_lib.tex(,471) @expansion{} 
../singular_texi/./d2t_singular/inout_lib.tex(,472) // execute(read("res_list")); would create a list with name res-name,
../singular_texi/./d2t_singular/inout_lib.tex(,473) // which is the resolution of i (the same content as L)
../singular_texi/./d2t_singular/inout_lib.tex(,474) system("sh","/bin/rm res_list zumSpass");
../singular_texi/./d2t_singular/inout_lib.tex(,475) @expansion{} 0
../singular_texi/./d2t_singular/inout_lib.tex(,476) // Under UNIX, this removes the files 'res_list' and 'zumSpass'
../singular_texi/./d2t_singular/inout_lib.tex(,477) // Type help system; to get more information about the shell escape
../singular_texi/./d2t_singular/inout_lib.tex(,478) // If your operating system does not accept the shell escape, you
../singular_texi/./d2t_singular/inout_lib.tex(,479) // must remove the just created files 'zumSpass' and 'res_list' directly
../singular_texi/./d2t_singular/inout_lib.tex(,480) @c end example writelist d2t_singular/inout_lib.doc:362
../singular_texi/./d2t_singular/inout_lib.tex(,481) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,482) @c ---end content writelist---
../singular_texi/./d2t_singular/inout_lib.tex(,483) 
../singular_texi/./d2t_singular/inout_lib.tex(,484) @c ------------------- pause -------------
../singular_texi/./d2t_singular/inout_lib.tex(,485) @node pause,, writelist, inout_lib
../singular_texi/./d2t_singular/inout_lib.tex(,486) @subsubsection pause
../singular_texi/./d2t_singular/inout_lib.tex(,487) @cindex pause
../singular_texi/./d2t_singular/inout_lib.tex(,488) @c ---content pause---
../singular_texi/./d2t_singular/inout_lib.tex(,489) Procedure from library @code{inout.lib} (@pxref{inout_lib}).
../singular_texi/./d2t_singular/inout_lib.tex(,490) 
../singular_texi/./d2t_singular/inout_lib.tex(,491) @table @asis
../singular_texi/./d2t_singular/inout_lib.tex(,492) @item @strong{Usage:}
../singular_texi/./d2t_singular/inout_lib.tex(,493) pause([ prompt ]) prompt string
../singular_texi/./d2t_singular/inout_lib.tex(,494) 
../singular_texi/./d2t_singular/inout_lib.tex(,495) @item @strong{Return:}
../singular_texi/./d2t_singular/inout_lib.tex(,496) none
../singular_texi/./d2t_singular/inout_lib.tex(,497) 
../singular_texi/./d2t_singular/inout_lib.tex(,498) @item @strong{Purpose:}
../singular_texi/./d2t_singular/inout_lib.tex(,499) interrupt the execution of commands until user input
../singular_texi/./d2t_singular/inout_lib.tex(,500) 
../singular_texi/./d2t_singular/inout_lib.tex(,501) @item @strong{Note:}
../singular_texi/./d2t_singular/inout_lib.tex(,502) pause is useful in procedures in connection with printlevel to
../singular_texi/./d2t_singular/inout_lib.tex(,503) interrupt the computation and to display intermediate results.
../singular_texi/./d2t_singular/inout_lib.tex(,504) 
../singular_texi/./d2t_singular/inout_lib.tex(,505) @end table
../singular_texi/./d2t_singular/inout_lib.tex(,506) @strong{Example:}
../singular_texi/./d2t_singular/inout_lib.tex(,507) @smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,508) @c computed example pause d2t_singular/inout_lib.doc:407 
../singular_texi/./d2t_singular/inout_lib.tex(,509) LIB "inout.lib";
../singular_texi/./d2t_singular/inout_lib.tex(,510) // can only be shown interactively, try the following commands:
../singular_texi/./d2t_singular/inout_lib.tex(,511) // pause("press <return> to continue");
../singular_texi/./d2t_singular/inout_lib.tex(,512) // pause();
../singular_texi/./d2t_singular/inout_lib.tex(,513) // In the following pocedure TTT, xxx is printed and the execution of
../singular_texi/./d2t_singular/inout_lib.tex(,514) // TTT is stopped until the return-key is pressed, if printlevel>0.
../singular_texi/./d2t_singular/inout_lib.tex(,515) // xxx may be any result of a previous computation or a comment, etc:
../singular_texi/./d2t_singular/inout_lib.tex(,516) //
../singular_texi/./d2t_singular/inout_lib.tex(,517) // proc TTT
../singular_texi/./d2t_singular/inout_lib.tex(,518) // @{ int pp = printlevel-voice+2;  //pp=0 if printlevel=0 and if TTT is
../singular_texi/./d2t_singular/inout_lib.tex(,519) //    ....                         //not called from another procedure
../singular_texi/./d2t_singular/inout_lib.tex(,520) //    if( pp>0 )
../singular_texi/./d2t_singular/inout_lib.tex(,521) //    @{
../singular_texi/./d2t_singular/inout_lib.tex(,522) //       print( xxx );
../singular_texi/./d2t_singular/inout_lib.tex(,523) //       pause("press <return> to continue");
../singular_texi/./d2t_singular/inout_lib.tex(,524) //    @}
../singular_texi/./d2t_singular/inout_lib.tex(,525) //     ....
../singular_texi/./d2t_singular/inout_lib.tex(,526) // @}
../singular_texi/./d2t_singular/inout_lib.tex(,527) @c end example pause d2t_singular/inout_lib.doc:407
../singular_texi/./d2t_singular/inout_lib.tex(,528) @end smallexample
../singular_texi/./d2t_singular/inout_lib.tex(,529) @c inserted refs from d2t_singular/inout_lib.doc:428
../singular_texi/./d2t_singular/inout_lib.tex(,538) @strong{See also:}
../singular_texi/./d2t_singular/inout_lib.tex(,539) @ref{printlevel};
../singular_texi/./d2t_singular/inout_lib.tex(,540) @ref{read}.
../singular_texi/./d2t_singular/inout_lib.tex(,542) @c end inserted refs from d2t_singular/inout_lib.doc:428
../singular_texi/./d2t_singular/inout_lib.tex(,543) 
../singular_texi/./d2t_singular/inout_lib.tex(,544) @c ---end content pause---
../singular_texi/singular.tex(,317) @c ----------------------------------------------------------
../singular_texi/singular.tex(,318) @node poly_lib, random_lib, inout_lib, General purpose
../singular_texi/singular.tex(,319) @subsection poly_lib
../singular_texi/singular.tex(,320) @c include of docu for poly.lib
../singular_texi/./d2t_singular/poly_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/poly_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/poly_lib.doc
../singular_texi/./d2t_singular/poly_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/poly_lib.doc INSTEAD
../singular_texi/./d2t_singular/poly_lib.tex(,4) @c library version: (1.33.2.6,2003/02/10)
../singular_texi/./d2t_singular/poly_lib.tex(,5) @c library file: ../Singular/LIB/poly.lib
../singular_texi/./d2t_singular/poly_lib.tex(,6) @cindex poly.lib
../singular_texi/./d2t_singular/poly_lib.tex(,7) @cindex poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/poly_lib.tex(,10) poly.lib
../singular_texi/./d2t_singular/poly_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/poly_lib.tex(,12)       Procedures for Manipulating Polys, Ideals, Modules
../singular_texi/./d2t_singular/poly_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/poly_lib.tex(,14) O. Bachmann, G.-M: Greuel, A. Fruehbis
../singular_texi/./d2t_singular/poly_lib.tex(,15) 
../singular_texi/./d2t_singular/poly_lib.tex(,16) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,17) 
../singular_texi/./d2t_singular/poly_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/poly_lib.tex(,19) @menu
../singular_texi/./d2t_singular/poly_lib.tex(,20) * cyclic:: ideal of cyclic n-roots
../singular_texi/./d2t_singular/poly_lib.tex(,21) * katsura:: katsura [i] ideal
../singular_texi/./d2t_singular/poly_lib.tex(,22) * freerank:: rank of coker(input) if coker is free else -1
../singular_texi/./d2t_singular/poly_lib.tex(,23) * is_homog:: int, =1 resp. =0 if input is homogeneous resp. not
../singular_texi/./d2t_singular/poly_lib.tex(,24) * is_zero:: int, =1 resp. =0 if coker(input) is 0 resp. not
../singular_texi/./d2t_singular/poly_lib.tex(,25) * lcm:: lcm of given generators of ideal
../singular_texi/./d2t_singular/poly_lib.tex(,26) * maxcoef:: maximal length of coefficient occurring in poly/...
../singular_texi/./d2t_singular/poly_lib.tex(,27) * maxdeg:: int/intmat = degree/s of terms of maximal order
../singular_texi/./d2t_singular/poly_lib.tex(,28) * maxdeg1:: int = [weighted] maximal degree of input
../singular_texi/./d2t_singular/poly_lib.tex(,29) * mindeg:: int/intmat = degree/s of terms of minimal order
../singular_texi/./d2t_singular/poly_lib.tex(,30) * mindeg1:: int = [weighted] minimal degree of input
../singular_texi/./d2t_singular/poly_lib.tex(,31) * normalize:: normalize poly/... such that leading coefficient is 1
../singular_texi/./d2t_singular/poly_lib.tex(,32) * rad_con:: check radical containment of poly p in ideal I
../singular_texi/./d2t_singular/poly_lib.tex(,33) * content:: content of polynomial/vector f
../singular_texi/./d2t_singular/poly_lib.tex(,34) * numerator:: numerator of number n
../singular_texi/./d2t_singular/poly_lib.tex(,35) * denominator:: denominator of number n
../singular_texi/./d2t_singular/poly_lib.tex(,36) * mod2id:: conversion of a module M to an ideal
../singular_texi/./d2t_singular/poly_lib.tex(,37) * id2mod:: conversion inverse to mod2id
../singular_texi/./d2t_singular/poly_lib.tex(,38) * substitute:: substitute in I variables by polynomials
../singular_texi/./d2t_singular/poly_lib.tex(,39) * subrInterred:: interred w.r.t. a subset of variables
../singular_texi/./d2t_singular/poly_lib.tex(,40) * hilbPoly:: Hilbert polynomial of basering/I
../singular_texi/./d2t_singular/poly_lib.tex(,41) @end menu
../singular_texi/./d2t_singular/poly_lib.tex(,42) @c ---end content LibInfo---
../singular_texi/./d2t_singular/poly_lib.tex(,43) 
../singular_texi/./d2t_singular/poly_lib.tex(,44) @c ------------------- cyclic -------------
../singular_texi/./d2t_singular/poly_lib.tex(,45) @node cyclic, katsura,, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,46) @subsubsection cyclic
../singular_texi/./d2t_singular/poly_lib.tex(,47) @cindex cyclic
../singular_texi/./d2t_singular/poly_lib.tex(,48) @c ---content cyclic---
../singular_texi/./d2t_singular/poly_lib.tex(,49) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,50) 
../singular_texi/./d2t_singular/poly_lib.tex(,51) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,52) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,53) cyclic(n); n integer
../singular_texi/./d2t_singular/poly_lib.tex(,54) 
../singular_texi/./d2t_singular/poly_lib.tex(,55) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,56) ideal of cyclic n-roots from 1-st n variables of basering
../singular_texi/./d2t_singular/poly_lib.tex(,57) 
../singular_texi/./d2t_singular/poly_lib.tex(,58) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,59) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,60) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,61) @c computed example cyclic d2t_singular/poly_lib.doc:59 
../singular_texi/./d2t_singular/poly_lib.tex(,62) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,63) ring r=0,(u,v,w,x,y,z),lp;
../singular_texi/./d2t_singular/poly_lib.tex(,64) cyclic(nvars(basering));
../singular_texi/./d2t_singular/poly_lib.tex(,65) @expansion{} _[1]=u+v+w+x+y+z
../singular_texi/./d2t_singular/poly_lib.tex(,66) @expansion{} _[2]=uv+uz+vw+wx+xy+yz
../singular_texi/./d2t_singular/poly_lib.tex(,67) @expansion{} _[3]=uvw+uvz+uyz+vwx+wxy+xyz
../singular_texi/./d2t_singular/poly_lib.tex(,68) @expansion{} _[4]=uvwx+uvwz+uvyz+uxyz+vwxy+wxyz
../singular_texi/./d2t_singular/poly_lib.tex(,69) @expansion{} _[5]=uvwxy+uvwxz+uvwyz+uvxyz+uwxyz+vwxyz
../singular_texi/./d2t_singular/poly_lib.tex(,70) @expansion{} _[6]=uvwxyz-1
../singular_texi/./d2t_singular/poly_lib.tex(,71) homog(cyclic(5),z);
../singular_texi/./d2t_singular/poly_lib.tex(,72) @expansion{} _[1]=u+v+w+x+y
../singular_texi/./d2t_singular/poly_lib.tex(,73) @expansion{} _[2]=uv+uy+vw+wx+xy
../singular_texi/./d2t_singular/poly_lib.tex(,74) @expansion{} _[3]=uvw+uvy+uxy+vwx+wxy
../singular_texi/./d2t_singular/poly_lib.tex(,75) @expansion{} _[4]=uvwx+uvwy+uvxy+uwxy+vwxy
../singular_texi/./d2t_singular/poly_lib.tex(,76) @expansion{} _[5]=uvwxy-z5
../singular_texi/./d2t_singular/poly_lib.tex(,77) @c end example cyclic d2t_singular/poly_lib.doc:59
../singular_texi/./d2t_singular/poly_lib.tex(,78) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,79) @c ---end content cyclic---
../singular_texi/./d2t_singular/poly_lib.tex(,80) 
../singular_texi/./d2t_singular/poly_lib.tex(,81) @c ------------------- katsura -------------
../singular_texi/./d2t_singular/poly_lib.tex(,82) @node katsura, freerank, cyclic, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,83) @subsubsection katsura
../singular_texi/./d2t_singular/poly_lib.tex(,84) @cindex katsura
../singular_texi/./d2t_singular/poly_lib.tex(,85) @c ---content katsura---
../singular_texi/./d2t_singular/poly_lib.tex(,86) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,87) 
../singular_texi/./d2t_singular/poly_lib.tex(,88) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,89) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,90) katsura([n]): n integer
../singular_texi/./d2t_singular/poly_lib.tex(,91) 
../singular_texi/./d2t_singular/poly_lib.tex(,92) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,93) katsura(n) : n-th katsura ideal of
../singular_texi/./d2t_singular/poly_lib.tex(,94) @*(1) newly created and set ring (32003, x(0..n), dp), if
../singular_texi/./d2t_singular/poly_lib.tex(,95) nvars(basering) < n
../singular_texi/./d2t_singular/poly_lib.tex(,96) @*(2) basering, if nvars(basering) >= n
../singular_texi/./d2t_singular/poly_lib.tex(,97) @*katsura() : katsura ideal of basering
../singular_texi/./d2t_singular/poly_lib.tex(,98) 
../singular_texi/./d2t_singular/poly_lib.tex(,99) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,100) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,101) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,102) @c computed example katsura d2t_singular/poly_lib.doc:89 
../singular_texi/./d2t_singular/poly_lib.tex(,103) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,104) ring r; basering;
../singular_texi/./d2t_singular/poly_lib.tex(,105) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/poly_lib.tex(,106) @expansion{} //   number of vars : 3
../singular_texi/./d2t_singular/poly_lib.tex(,107) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/poly_lib.tex(,108) @expansion{} //                  : names    x y z 
../singular_texi/./d2t_singular/poly_lib.tex(,109) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/poly_lib.tex(,110) katsura();
../singular_texi/./d2t_singular/poly_lib.tex(,111) @expansion{} _[1]=x+2y+2z-1
../singular_texi/./d2t_singular/poly_lib.tex(,112) @expansion{} _[2]=x2+2y2+2z2-x
../singular_texi/./d2t_singular/poly_lib.tex(,113) @expansion{} _[3]=2xy+2yz-y
../singular_texi/./d2t_singular/poly_lib.tex(,114) katsura(4); basering;
../singular_texi/./d2t_singular/poly_lib.tex(,115) @expansion{} _[1]=x(0)+2*x(1)+2*x(2)+2*x(3)-1
../singular_texi/./d2t_singular/poly_lib.tex(,116) @expansion{} _[2]=x(0)^2+2*x(1)^2+2*x(2)^2+2*x(3)^2-x(0)
../singular_texi/./d2t_singular/poly_lib.tex(,117) @expansion{} _[3]=2*x(0)*x(1)+2*x(1)*x(2)+2*x(2)*x(3)-x(1)
../singular_texi/./d2t_singular/poly_lib.tex(,118) @expansion{} _[4]=x(1)^2+2*x(0)*x(2)+2*x(1)*x(3)-x(2)
../singular_texi/./d2t_singular/poly_lib.tex(,119) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/poly_lib.tex(,120) @expansion{} //   number of vars : 5
../singular_texi/./d2t_singular/poly_lib.tex(,121) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/poly_lib.tex(,122) @expansion{} //                  : names    x(0) x(1) x(2) x(3) x(4) 
../singular_texi/./d2t_singular/poly_lib.tex(,123) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/poly_lib.tex(,124) @c end example katsura d2t_singular/poly_lib.doc:89
../singular_texi/./d2t_singular/poly_lib.tex(,125) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,126) @c ---end content katsura---
../singular_texi/./d2t_singular/poly_lib.tex(,127) 
../singular_texi/./d2t_singular/poly_lib.tex(,128) @c ------------------- freerank -------------
../singular_texi/./d2t_singular/poly_lib.tex(,129) @node freerank, is_homog, katsura, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,130) @subsubsection freerank
../singular_texi/./d2t_singular/poly_lib.tex(,131) @cindex freerank
../singular_texi/./d2t_singular/poly_lib.tex(,132) @c ---content freerank---
../singular_texi/./d2t_singular/poly_lib.tex(,133) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,134) 
../singular_texi/./d2t_singular/poly_lib.tex(,135) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,136) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,137) freerank(M[,any]); M=poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,138) 
../singular_texi/./d2t_singular/poly_lib.tex(,139) @item @strong{Compute:}
../singular_texi/./d2t_singular/poly_lib.tex(,140) rank of module presented by M in case it is free.
../singular_texi/./d2t_singular/poly_lib.tex(,141) @*By definition this is vdim(coker(M)/m*coker(M)) if coker(M)
../singular_texi/./d2t_singular/poly_lib.tex(,142) is free, where m = maximal ideal of the variables of the
../singular_texi/./d2t_singular/poly_lib.tex(,143) basering and M is considered as matrix.
../singular_texi/./d2t_singular/poly_lib.tex(,144) @*(the 0-module is free of rank 0)
../singular_texi/./d2t_singular/poly_lib.tex(,145) 
../singular_texi/./d2t_singular/poly_lib.tex(,146) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,147) rank of coker(M) if coker(M) is free and -1 else;
../singular_texi/./d2t_singular/poly_lib.tex(,148) @*in case of a second argument return a list:
../singular_texi/./d2t_singular/poly_lib.tex(,149) @*L[1] = rank of coker(M) or -1
../singular_texi/./d2t_singular/poly_lib.tex(,150) @*L[2] = minbase(M)
../singular_texi/./d2t_singular/poly_lib.tex(,151) 
../singular_texi/./d2t_singular/poly_lib.tex(,152) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,153) freerank(syz(M)); computes the rank of M if M is free (and -1 else)
../singular_texi/./d2t_singular/poly_lib.tex(,154) 
../singular_texi/./d2t_singular/poly_lib.tex(,155) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,156) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,157) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,158) @c computed example freerank d2t_singular/poly_lib.doc:128 
../singular_texi/./d2t_singular/poly_lib.tex(,159) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,160) ring r;
../singular_texi/./d2t_singular/poly_lib.tex(,161) ideal i=x;
../singular_texi/./d2t_singular/poly_lib.tex(,162) module M=[x,0,1],[-x,0,-1];
../singular_texi/./d2t_singular/poly_lib.tex(,163) freerank(M);          // should be 2, coker(M) is not free
../singular_texi/./d2t_singular/poly_lib.tex(,164) @expansion{} 2
../singular_texi/./d2t_singular/poly_lib.tex(,165) freerank(syz (M),"");
../singular_texi/./d2t_singular/poly_lib.tex(,166) @expansion{} [1]:
../singular_texi/./d2t_singular/poly_lib.tex(,167) @expansion{}    1
../singular_texi/./d2t_singular/poly_lib.tex(,168) @expansion{} [2]:
../singular_texi/./d2t_singular/poly_lib.tex(,169) @expansion{}    _[1]=gen(2)+gen(1)
../singular_texi/./d2t_singular/poly_lib.tex(,170) // [1] should be 1, coker(syz(M))=M is free of rank 1
../singular_texi/./d2t_singular/poly_lib.tex(,171) // [2] should be gen(2)+gen(1) (minimal relation of M)
../singular_texi/./d2t_singular/poly_lib.tex(,172) freerank(i);
../singular_texi/./d2t_singular/poly_lib.tex(,173) @expansion{} -1
../singular_texi/./d2t_singular/poly_lib.tex(,174) freerank(syz(i));     // should be 1, coker(syz(i))=i is free of rank 1
../singular_texi/./d2t_singular/poly_lib.tex(,175) @expansion{} 1
../singular_texi/./d2t_singular/poly_lib.tex(,176) @c end example freerank d2t_singular/poly_lib.doc:128
../singular_texi/./d2t_singular/poly_lib.tex(,177) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,178) @c ---end content freerank---
../singular_texi/./d2t_singular/poly_lib.tex(,179) 
../singular_texi/./d2t_singular/poly_lib.tex(,180) @c ------------------- is_homog -------------
../singular_texi/./d2t_singular/poly_lib.tex(,181) @node is_homog, is_zero, freerank, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,182) @subsubsection is_homog
../singular_texi/./d2t_singular/poly_lib.tex(,183) @cindex is_homog
../singular_texi/./d2t_singular/poly_lib.tex(,184) @c ---content is_homog---
../singular_texi/./d2t_singular/poly_lib.tex(,185) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,186) 
../singular_texi/./d2t_singular/poly_lib.tex(,187) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,188) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,189) is_homog(id); id poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,190) 
../singular_texi/./d2t_singular/poly_lib.tex(,191) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,192) integer which is 1 if input is homogeneous (resp. weighted homogeneous
../singular_texi/./d2t_singular/poly_lib.tex(,193) if the monomial ordering consists of one block of type ws,Ws,wp or Wp,
../singular_texi/./d2t_singular/poly_lib.tex(,194) assuming that all weights are positive) and 0 otherwise
../singular_texi/./d2t_singular/poly_lib.tex(,195) 
../singular_texi/./d2t_singular/poly_lib.tex(,196) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,197) A vector is homogeneous, if the components are homogeneous of same
../singular_texi/./d2t_singular/poly_lib.tex(,198) degree, a module/matrix is homogeneous if all column vectors are
../singular_texi/./d2t_singular/poly_lib.tex(,199) homogeneous
../singular_texi/./d2t_singular/poly_lib.tex(,200) @*//*** ergaenzen, wenn Matrizen-Spalten Gewichte haben
../singular_texi/./d2t_singular/poly_lib.tex(,201) 
../singular_texi/./d2t_singular/poly_lib.tex(,202) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,203) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,204) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,205) @c computed example is_homog d2t_singular/poly_lib.doc:168 
../singular_texi/./d2t_singular/poly_lib.tex(,206) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,207) ring r = 0,(x,y,z),wp(1,2,3);
../singular_texi/./d2t_singular/poly_lib.tex(,208) is_homog(x5-yz+y3);
../singular_texi/./d2t_singular/poly_lib.tex(,209) @expansion{} 0
../singular_texi/./d2t_singular/poly_lib.tex(,210) ideal i = x6+y3+z2, x9-z3;
../singular_texi/./d2t_singular/poly_lib.tex(,211) is_homog(i);
../singular_texi/./d2t_singular/poly_lib.tex(,212) @expansion{} 1
../singular_texi/./d2t_singular/poly_lib.tex(,213) ring s = 0,(a,b,c),ds;
../singular_texi/./d2t_singular/poly_lib.tex(,214) vector v = [a2,0,ac+bc];
../singular_texi/./d2t_singular/poly_lib.tex(,215) vector w = [a3,b3,c4];
../singular_texi/./d2t_singular/poly_lib.tex(,216) is_homog(v);
../singular_texi/./d2t_singular/poly_lib.tex(,217) @expansion{} 1
../singular_texi/./d2t_singular/poly_lib.tex(,218) is_homog(w);
../singular_texi/./d2t_singular/poly_lib.tex(,219) @expansion{} 0
../singular_texi/./d2t_singular/poly_lib.tex(,220) @c end example is_homog d2t_singular/poly_lib.doc:168
../singular_texi/./d2t_singular/poly_lib.tex(,221) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,222) @c ---end content is_homog---
../singular_texi/./d2t_singular/poly_lib.tex(,223) 
../singular_texi/./d2t_singular/poly_lib.tex(,224) @c ------------------- is_zero -------------
../singular_texi/./d2t_singular/poly_lib.tex(,225) @node is_zero, lcm, is_homog, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,226) @subsubsection is_zero
../singular_texi/./d2t_singular/poly_lib.tex(,227) @cindex is_zero
../singular_texi/./d2t_singular/poly_lib.tex(,228) @c ---content is_zero---
../singular_texi/./d2t_singular/poly_lib.tex(,229) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,230) 
../singular_texi/./d2t_singular/poly_lib.tex(,231) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,232) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,233) is_zero(M[,any]); M=poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,234) 
../singular_texi/./d2t_singular/poly_lib.tex(,235) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,236) integer, 1 if coker(M)=0 resp. 0 if coker(M)!=0, where M is
../singular_texi/./d2t_singular/poly_lib.tex(,237) considered as matrix.
../singular_texi/./d2t_singular/poly_lib.tex(,238) @*If a second argument is given, return a list:
../singular_texi/./d2t_singular/poly_lib.tex(,239) @*L[1] = 1 if coker(M)=0 resp. 0 if coker(M)!=0
../singular_texi/./d2t_singular/poly_lib.tex(,240) @*L[2] = dim(M)
../singular_texi/./d2t_singular/poly_lib.tex(,241) 
../singular_texi/./d2t_singular/poly_lib.tex(,242) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,243) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,244) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,245) @c computed example is_zero d2t_singular/poly_lib.doc:204 
../singular_texi/./d2t_singular/poly_lib.tex(,246) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,247) ring r;
../singular_texi/./d2t_singular/poly_lib.tex(,248) module m = [x],[y],[1,z];
../singular_texi/./d2t_singular/poly_lib.tex(,249) is_zero(m,1);
../singular_texi/./d2t_singular/poly_lib.tex(,250) @expansion{} [1]:
../singular_texi/./d2t_singular/poly_lib.tex(,251) @expansion{}    0
../singular_texi/./d2t_singular/poly_lib.tex(,252) @expansion{} [2]:
../singular_texi/./d2t_singular/poly_lib.tex(,253) @expansion{}    2
../singular_texi/./d2t_singular/poly_lib.tex(,254) qring q = std(ideal(x2+y3+z2));
../singular_texi/./d2t_singular/poly_lib.tex(,255) ideal j = x2+y3+z2-37;
../singular_texi/./d2t_singular/poly_lib.tex(,256) is_zero(j);
../singular_texi/./d2t_singular/poly_lib.tex(,257) @expansion{} 1
../singular_texi/./d2t_singular/poly_lib.tex(,258) @c end example is_zero d2t_singular/poly_lib.doc:204
../singular_texi/./d2t_singular/poly_lib.tex(,259) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,260) @c ---end content is_zero---
../singular_texi/./d2t_singular/poly_lib.tex(,261) 
../singular_texi/./d2t_singular/poly_lib.tex(,262) @c ------------------- lcm -------------
../singular_texi/./d2t_singular/poly_lib.tex(,263) @node lcm, maxcoef, is_zero, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,264) @subsubsection lcm
../singular_texi/./d2t_singular/poly_lib.tex(,265) @cindex lcm
../singular_texi/./d2t_singular/poly_lib.tex(,266) @c ---content lcm---
../singular_texi/./d2t_singular/poly_lib.tex(,267) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,268) 
../singular_texi/./d2t_singular/poly_lib.tex(,269) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,270) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,271) lcm(p[,q]); p int/intvec q a list of integers or
../singular_texi/./d2t_singular/poly_lib.tex(,272) @*p poly/ideal q a list of polynomials
../singular_texi/./d2t_singular/poly_lib.tex(,273) 
../singular_texi/./d2t_singular/poly_lib.tex(,274) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,275) the least common multiple of the common entries of p and q:
../singular_texi/./d2t_singular/poly_lib.tex(,276) @* - of type int if p is an int/intvec
../singular_texi/./d2t_singular/poly_lib.tex(,277) @* - of type poly if p is a poly/ideal
../singular_texi/./d2t_singular/poly_lib.tex(,278) 
../singular_texi/./d2t_singular/poly_lib.tex(,279) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,280) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,281) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,282) @c computed example lcm d2t_singular/poly_lib.doc:236 
../singular_texi/./d2t_singular/poly_lib.tex(,283) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,284) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/poly_lib.tex(,285) poly  p = (x+y)*(y+z);
../singular_texi/./d2t_singular/poly_lib.tex(,286) poly  q = (z4+2)*(y+z);
../singular_texi/./d2t_singular/poly_lib.tex(,287) lcm(p,q);
../singular_texi/./d2t_singular/poly_lib.tex(,288) @expansion{} xyz4+2xy+xz5+2xz+y2z4+2y2+yz5+2yz
../singular_texi/./d2t_singular/poly_lib.tex(,289) ideal i=p,q,y+z;
../singular_texi/./d2t_singular/poly_lib.tex(,290) lcm(i,p);
../singular_texi/./d2t_singular/poly_lib.tex(,291) @expansion{} xyz4+2xy+xz5+2xz+y2z4+2y2+yz5+2yz
../singular_texi/./d2t_singular/poly_lib.tex(,292) lcm(2,3,6);
../singular_texi/./d2t_singular/poly_lib.tex(,293) @expansion{} 6
../singular_texi/./d2t_singular/poly_lib.tex(,294) lcm(2..6);
../singular_texi/./d2t_singular/poly_lib.tex(,295) @expansion{} 60
../singular_texi/./d2t_singular/poly_lib.tex(,296) @c end example lcm d2t_singular/poly_lib.doc:236
../singular_texi/./d2t_singular/poly_lib.tex(,297) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,298) @c ---end content lcm---
../singular_texi/./d2t_singular/poly_lib.tex(,299) 
../singular_texi/./d2t_singular/poly_lib.tex(,300) @c ------------------- maxcoef -------------
../singular_texi/./d2t_singular/poly_lib.tex(,301) @node maxcoef, maxdeg, lcm, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,302) @subsubsection maxcoef
../singular_texi/./d2t_singular/poly_lib.tex(,303) @cindex maxcoef
../singular_texi/./d2t_singular/poly_lib.tex(,304) @c ---content maxcoef---
../singular_texi/./d2t_singular/poly_lib.tex(,305) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,306) 
../singular_texi/./d2t_singular/poly_lib.tex(,307) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,308) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,309) maxcoef(f); f poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,310) 
../singular_texi/./d2t_singular/poly_lib.tex(,311) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,312) maximal length of coefficient of f of type int (by counting the
../singular_texi/./d2t_singular/poly_lib.tex(,313) length of the string of each coefficient)
../singular_texi/./d2t_singular/poly_lib.tex(,314) 
../singular_texi/./d2t_singular/poly_lib.tex(,315) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,316) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,317) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,318) @c computed example maxcoef d2t_singular/poly_lib.doc:268 
../singular_texi/./d2t_singular/poly_lib.tex(,319) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,320) ring r= 0,(x,y,z),ds;
../singular_texi/./d2t_singular/poly_lib.tex(,321) poly g = 345x2-1234567890y+7/4z;
../singular_texi/./d2t_singular/poly_lib.tex(,322) maxcoef(g);
../singular_texi/./d2t_singular/poly_lib.tex(,323) @expansion{} 10
../singular_texi/./d2t_singular/poly_lib.tex(,324) ideal i = g,10/1234567890;
../singular_texi/./d2t_singular/poly_lib.tex(,325) maxcoef(i);
../singular_texi/./d2t_singular/poly_lib.tex(,326) @expansion{} 11
../singular_texi/./d2t_singular/poly_lib.tex(,327) // since i[2]=1/123456789
../singular_texi/./d2t_singular/poly_lib.tex(,328) @c end example maxcoef d2t_singular/poly_lib.doc:268
../singular_texi/./d2t_singular/poly_lib.tex(,329) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,330) @c ---end content maxcoef---
../singular_texi/./d2t_singular/poly_lib.tex(,331) 
../singular_texi/./d2t_singular/poly_lib.tex(,332) @c ------------------- maxdeg -------------
../singular_texi/./d2t_singular/poly_lib.tex(,333) @node maxdeg, maxdeg1, maxcoef, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,334) @subsubsection maxdeg
../singular_texi/./d2t_singular/poly_lib.tex(,335) @cindex maxdeg
../singular_texi/./d2t_singular/poly_lib.tex(,336) @c ---content maxdeg---
../singular_texi/./d2t_singular/poly_lib.tex(,337) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,338) 
../singular_texi/./d2t_singular/poly_lib.tex(,339) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,340) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,341) maxdeg(id); id poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,342) 
../singular_texi/./d2t_singular/poly_lib.tex(,343) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,344) int/intmat, each component equals maximal degree of monomials in the
../singular_texi/./d2t_singular/poly_lib.tex(,345) corresponding component of id, independent of ring ordering
../singular_texi/./d2t_singular/poly_lib.tex(,346) (maxdeg of each var is 1).
../singular_texi/./d2t_singular/poly_lib.tex(,347) @*Of type int if id is of type poly, of type intmat else
../singular_texi/./d2t_singular/poly_lib.tex(,348) 
../singular_texi/./d2t_singular/poly_lib.tex(,349) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,350) proc maxdeg1 returns 1 integer, the absolute maximum; moreover, it has
../singular_texi/./d2t_singular/poly_lib.tex(,351) an option for computing weighted degrees
../singular_texi/./d2t_singular/poly_lib.tex(,352) 
../singular_texi/./d2t_singular/poly_lib.tex(,353) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,354) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,355) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,356) @c computed example maxdeg d2t_singular/poly_lib.doc:304 
../singular_texi/./d2t_singular/poly_lib.tex(,357) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,358) ring r = 0,(x,y,z),wp(1,2,3);
../singular_texi/./d2t_singular/poly_lib.tex(,359) poly f = x+y2+z3;
../singular_texi/./d2t_singular/poly_lib.tex(,360) deg(f);             //deg; returns weighted degree (in case of 1 block)!
../singular_texi/./d2t_singular/poly_lib.tex(,361) @expansion{} 9
../singular_texi/./d2t_singular/poly_lib.tex(,362) maxdeg(f);
../singular_texi/./d2t_singular/poly_lib.tex(,363) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,364) matrix m[2][2]=f+x10,1,0,f^2;
../singular_texi/./d2t_singular/poly_lib.tex(,365) maxdeg(m);
../singular_texi/./d2t_singular/poly_lib.tex(,366) @expansion{} 10,0,
../singular_texi/./d2t_singular/poly_lib.tex(,367) @expansion{} -1,6 
../singular_texi/./d2t_singular/poly_lib.tex(,368) @c end example maxdeg d2t_singular/poly_lib.doc:304
../singular_texi/./d2t_singular/poly_lib.tex(,369) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,370) @c ---end content maxdeg---
../singular_texi/./d2t_singular/poly_lib.tex(,371) 
../singular_texi/./d2t_singular/poly_lib.tex(,372) @c ------------------- maxdeg1 -------------
../singular_texi/./d2t_singular/poly_lib.tex(,373) @node maxdeg1, mindeg, maxdeg, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,374) @subsubsection maxdeg1
../singular_texi/./d2t_singular/poly_lib.tex(,375) @cindex maxdeg1
../singular_texi/./d2t_singular/poly_lib.tex(,376) @c ---content maxdeg1---
../singular_texi/./d2t_singular/poly_lib.tex(,377) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,378) 
../singular_texi/./d2t_singular/poly_lib.tex(,379) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,380) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,381) maxdeg1(id[,v]); id=poly/ideal/vector/module/matrix, v=intvec
../singular_texi/./d2t_singular/poly_lib.tex(,382) 
../singular_texi/./d2t_singular/poly_lib.tex(,383) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,384) integer, maximal [weighted] degree of monomials of id independent of
../singular_texi/./d2t_singular/poly_lib.tex(,385) ring ordering, maxdeg1 of i-th variable is v[i] (default: v=1..1).
../singular_texi/./d2t_singular/poly_lib.tex(,386) 
../singular_texi/./d2t_singular/poly_lib.tex(,387) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,388) This proc returns one integer while maxdeg returns, in general,
../singular_texi/./d2t_singular/poly_lib.tex(,389) a matrix of integers. For one polynomial and if no intvec v is given
../singular_texi/./d2t_singular/poly_lib.tex(,390) maxdeg is faster
../singular_texi/./d2t_singular/poly_lib.tex(,391) 
../singular_texi/./d2t_singular/poly_lib.tex(,392) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,393) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,394) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,395) @c computed example maxdeg1 d2t_singular/poly_lib.doc:339 
../singular_texi/./d2t_singular/poly_lib.tex(,396) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,397) ring r = 0,(x,y,z),wp(1,2,3);
../singular_texi/./d2t_singular/poly_lib.tex(,398) poly f = x+y2+z3;
../singular_texi/./d2t_singular/poly_lib.tex(,399) deg(f);            //deg returns weighted degree (in case of 1 block)!
../singular_texi/./d2t_singular/poly_lib.tex(,400) @expansion{} 9
../singular_texi/./d2t_singular/poly_lib.tex(,401) maxdeg1(f);
../singular_texi/./d2t_singular/poly_lib.tex(,402) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,403) intvec v = ringweights(r);
../singular_texi/./d2t_singular/poly_lib.tex(,404) maxdeg1(f,v);                        //weighted maximal degree
../singular_texi/./d2t_singular/poly_lib.tex(,405) @expansion{} 9
../singular_texi/./d2t_singular/poly_lib.tex(,406) matrix m[2][2]=f+x10,1,0,f^2;
../singular_texi/./d2t_singular/poly_lib.tex(,407) maxdeg1(m,v);                        //absolute weighted maximal degree
../singular_texi/./d2t_singular/poly_lib.tex(,408) @expansion{} 18
../singular_texi/./d2t_singular/poly_lib.tex(,409) @c end example maxdeg1 d2t_singular/poly_lib.doc:339
../singular_texi/./d2t_singular/poly_lib.tex(,410) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,411) @c ---end content maxdeg1---
../singular_texi/./d2t_singular/poly_lib.tex(,412) 
../singular_texi/./d2t_singular/poly_lib.tex(,413) @c ------------------- mindeg -------------
../singular_texi/./d2t_singular/poly_lib.tex(,414) @node mindeg, mindeg1, maxdeg1, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,415) @subsubsection mindeg
../singular_texi/./d2t_singular/poly_lib.tex(,416) @cindex mindeg
../singular_texi/./d2t_singular/poly_lib.tex(,417) @c ---content mindeg---
../singular_texi/./d2t_singular/poly_lib.tex(,418) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,419) 
../singular_texi/./d2t_singular/poly_lib.tex(,420) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,421) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,422) mindeg(id); id poly/ideal/vector/module/matrix
../singular_texi/./d2t_singular/poly_lib.tex(,423) 
../singular_texi/./d2t_singular/poly_lib.tex(,424) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,425) minimal degree/s of monomials of id, independent of ring ordering
../singular_texi/./d2t_singular/poly_lib.tex(,426) (mindeg of each variable is 1) of type int if id of type poly, else
../singular_texi/./d2t_singular/poly_lib.tex(,427) of type intmat.
../singular_texi/./d2t_singular/poly_lib.tex(,428) 
../singular_texi/./d2t_singular/poly_lib.tex(,429) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,430) proc mindeg1 returns one integer, the absolute minimum; moreover it
../singular_texi/./d2t_singular/poly_lib.tex(,431) has an option for computing weighted degrees.
../singular_texi/./d2t_singular/poly_lib.tex(,432) 
../singular_texi/./d2t_singular/poly_lib.tex(,433) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,434) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,435) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,436) @c computed example mindeg d2t_singular/poly_lib.doc:376 
../singular_texi/./d2t_singular/poly_lib.tex(,437) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,438) ring r = 0,(x,y,z),ls;
../singular_texi/./d2t_singular/poly_lib.tex(,439) poly f = x5+y2+z3;
../singular_texi/./d2t_singular/poly_lib.tex(,440) ord(f);                  // ord returns weighted order of leading term!
../singular_texi/./d2t_singular/poly_lib.tex(,441) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,442) mindeg(f);               // computes minimal degree
../singular_texi/./d2t_singular/poly_lib.tex(,443) @expansion{} 2
../singular_texi/./d2t_singular/poly_lib.tex(,444) matrix m[2][2]=x10,1,0,f^2;
../singular_texi/./d2t_singular/poly_lib.tex(,445) mindeg(m);               // computes matrix of minimum degrees
../singular_texi/./d2t_singular/poly_lib.tex(,446) @expansion{} 10,0,
../singular_texi/./d2t_singular/poly_lib.tex(,447) @expansion{} -1,4 
../singular_texi/./d2t_singular/poly_lib.tex(,448) @c end example mindeg d2t_singular/poly_lib.doc:376
../singular_texi/./d2t_singular/poly_lib.tex(,449) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,450) @c ---end content mindeg---
../singular_texi/./d2t_singular/poly_lib.tex(,451) 
../singular_texi/./d2t_singular/poly_lib.tex(,452) @c ------------------- mindeg1 -------------
../singular_texi/./d2t_singular/poly_lib.tex(,453) @node mindeg1, normalize, mindeg, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,454) @subsubsection mindeg1
../singular_texi/./d2t_singular/poly_lib.tex(,455) @cindex mindeg1
../singular_texi/./d2t_singular/poly_lib.tex(,456) @c ---content mindeg1---
../singular_texi/./d2t_singular/poly_lib.tex(,457) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,458) 
../singular_texi/./d2t_singular/poly_lib.tex(,459) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,460) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,461) mindeg1(id[,v]); id=poly/ideal/vector/module/matrix, v=intvec
../singular_texi/./d2t_singular/poly_lib.tex(,462) 
../singular_texi/./d2t_singular/poly_lib.tex(,463) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,464) integer, minimal [weighted] degree of monomials of id independent of
../singular_texi/./d2t_singular/poly_lib.tex(,465) ring ordering, mindeg1 of i-th variable is v[i] (default v=1..1).
../singular_texi/./d2t_singular/poly_lib.tex(,466) 
../singular_texi/./d2t_singular/poly_lib.tex(,467) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,468) This proc returns one integer while mindeg returns, in general,
../singular_texi/./d2t_singular/poly_lib.tex(,469) a matrix of integers. For one polynomial and if no intvec v is given
../singular_texi/./d2t_singular/poly_lib.tex(,470) mindeg is faster.
../singular_texi/./d2t_singular/poly_lib.tex(,471) 
../singular_texi/./d2t_singular/poly_lib.tex(,472) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,473) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,474) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,475) @c computed example mindeg1 d2t_singular/poly_lib.doc:411 
../singular_texi/./d2t_singular/poly_lib.tex(,476) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,477) ring r = 0,(x,y,z),ls;
../singular_texi/./d2t_singular/poly_lib.tex(,478) poly f = x5+y2+z3;
../singular_texi/./d2t_singular/poly_lib.tex(,479) ord(f);                  // ord returns weighted order of leading term!
../singular_texi/./d2t_singular/poly_lib.tex(,480) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,481) intvec v = 1,-3,2;
../singular_texi/./d2t_singular/poly_lib.tex(,482) mindeg1(f,v);            // computes minimal weighted degree
../singular_texi/./d2t_singular/poly_lib.tex(,483) @expansion{} -6
../singular_texi/./d2t_singular/poly_lib.tex(,484) matrix m[2][2]=x10,1,0,f^2;
../singular_texi/./d2t_singular/poly_lib.tex(,485) mindeg1(m,1..3);         // computes absolute minimum of weighted degrees
../singular_texi/./d2t_singular/poly_lib.tex(,486) @expansion{} -1
../singular_texi/./d2t_singular/poly_lib.tex(,487) @c end example mindeg1 d2t_singular/poly_lib.doc:411
../singular_texi/./d2t_singular/poly_lib.tex(,488) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,489) @c ---end content mindeg1---
../singular_texi/./d2t_singular/poly_lib.tex(,490) 
../singular_texi/./d2t_singular/poly_lib.tex(,491) @c ------------------- normalize -------------
../singular_texi/./d2t_singular/poly_lib.tex(,492) @node normalize, rad_con, mindeg1, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,493) @subsubsection normalize
../singular_texi/./d2t_singular/poly_lib.tex(,494) @cindex normalize
../singular_texi/./d2t_singular/poly_lib.tex(,495) @c ---content normalize---
../singular_texi/./d2t_singular/poly_lib.tex(,496) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,497) 
../singular_texi/./d2t_singular/poly_lib.tex(,498) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,499) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,500) normalize(id); id=poly/vector/ideal/module
../singular_texi/./d2t_singular/poly_lib.tex(,501) 
../singular_texi/./d2t_singular/poly_lib.tex(,502) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,503) object of same type with leading coefficient equal to 1
../singular_texi/./d2t_singular/poly_lib.tex(,504) 
../singular_texi/./d2t_singular/poly_lib.tex(,505) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,506) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,507) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,508) @c computed example normalize d2t_singular/poly_lib.doc:441 
../singular_texi/./d2t_singular/poly_lib.tex(,509) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,510) ring r = 0,(x,y,z),ls;
../singular_texi/./d2t_singular/poly_lib.tex(,511) poly f = 2x5+3y2+4z3;
../singular_texi/./d2t_singular/poly_lib.tex(,512) normalize(f);
../singular_texi/./d2t_singular/poly_lib.tex(,513) @expansion{} z3+3/4y2+1/2x5
../singular_texi/./d2t_singular/poly_lib.tex(,514) module m=[9xy,0,3z3],[4z,6y,2x];
../singular_texi/./d2t_singular/poly_lib.tex(,515) normalize(m);
../singular_texi/./d2t_singular/poly_lib.tex(,516) @expansion{} _[1]=z3*gen(3)+3xy*gen(1)
../singular_texi/./d2t_singular/poly_lib.tex(,517) @expansion{} _[2]=z*gen(1)+3/2y*gen(2)+1/2x*gen(3)
../singular_texi/./d2t_singular/poly_lib.tex(,518) ring s = 0,(x,y,z),(c,ls);
../singular_texi/./d2t_singular/poly_lib.tex(,519) module m=[9xy,0,3z3],[4z,6y,2x];
../singular_texi/./d2t_singular/poly_lib.tex(,520) normalize(m);
../singular_texi/./d2t_singular/poly_lib.tex(,521) @expansion{} _[1]=[xy,0,1/3z3]
../singular_texi/./d2t_singular/poly_lib.tex(,522) @expansion{} _[2]=[z,3/2y,1/2x]
../singular_texi/./d2t_singular/poly_lib.tex(,523) @c end example normalize d2t_singular/poly_lib.doc:441
../singular_texi/./d2t_singular/poly_lib.tex(,524) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,525) @c ---end content normalize---
../singular_texi/./d2t_singular/poly_lib.tex(,526) 
../singular_texi/./d2t_singular/poly_lib.tex(,527) @c ------------------- rad_con -------------
../singular_texi/./d2t_singular/poly_lib.tex(,528) @node rad_con, content, normalize, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,529) @subsubsection rad_con
../singular_texi/./d2t_singular/poly_lib.tex(,530) @cindex rad_con
../singular_texi/./d2t_singular/poly_lib.tex(,531) @c ---content rad_con---
../singular_texi/./d2t_singular/poly_lib.tex(,532) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,533) 
../singular_texi/./d2t_singular/poly_lib.tex(,534) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,535) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,536) rad_con(g,I); g polynomial, I ideal
../singular_texi/./d2t_singular/poly_lib.tex(,537) 
../singular_texi/./d2t_singular/poly_lib.tex(,538) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,539) 1 (TRUE) (type int) if g is contained in the radical of I
../singular_texi/./d2t_singular/poly_lib.tex(,540) @* 0 (FALSE) (type int) otherwise
../singular_texi/./d2t_singular/poly_lib.tex(,541) 
../singular_texi/./d2t_singular/poly_lib.tex(,542) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,543) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,544) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,545) @c computed example rad_con d2t_singular/poly_lib.doc:473 
../singular_texi/./d2t_singular/poly_lib.tex(,546) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,547) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/poly_lib.tex(,548) ideal I=x2+y2,z2;
../singular_texi/./d2t_singular/poly_lib.tex(,549) poly f=x4+y4;
../singular_texi/./d2t_singular/poly_lib.tex(,550) rad_con(f,I);
../singular_texi/./d2t_singular/poly_lib.tex(,551) @expansion{} 0
../singular_texi/./d2t_singular/poly_lib.tex(,552) ideal J=x2+y2,z2,x4+y4;
../singular_texi/./d2t_singular/poly_lib.tex(,553) poly g=z;
../singular_texi/./d2t_singular/poly_lib.tex(,554) rad_con(g,I);
../singular_texi/./d2t_singular/poly_lib.tex(,555) @expansion{} 1
../singular_texi/./d2t_singular/poly_lib.tex(,556) @c end example rad_con d2t_singular/poly_lib.doc:473
../singular_texi/./d2t_singular/poly_lib.tex(,557) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,558) @c ---end content rad_con---
../singular_texi/./d2t_singular/poly_lib.tex(,559) 
../singular_texi/./d2t_singular/poly_lib.tex(,560) @c ------------------- content -------------
../singular_texi/./d2t_singular/poly_lib.tex(,561) @node content, numerator, rad_con, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,562) @subsubsection content
../singular_texi/./d2t_singular/poly_lib.tex(,563) @cindex content
../singular_texi/./d2t_singular/poly_lib.tex(,564) @c ---content content---
../singular_texi/./d2t_singular/poly_lib.tex(,565) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,566) 
../singular_texi/./d2t_singular/poly_lib.tex(,567) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,568) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,569) content(f); f polynomial/vector
../singular_texi/./d2t_singular/poly_lib.tex(,570) 
../singular_texi/./d2t_singular/poly_lib.tex(,571) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,572) number, the content (greatest common factor of coefficients)
../singular_texi/./d2t_singular/poly_lib.tex(,573) of the polynomial/vector f
../singular_texi/./d2t_singular/poly_lib.tex(,574) 
../singular_texi/./d2t_singular/poly_lib.tex(,575) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,576) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,577) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,578) @c computed example content d2t_singular/poly_lib.doc:504 
../singular_texi/./d2t_singular/poly_lib.tex(,579) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,580) ring r=0,(x,y,z),(c,lp);
../singular_texi/./d2t_singular/poly_lib.tex(,581) content(3x2+18xy-27xyz);
../singular_texi/./d2t_singular/poly_lib.tex(,582) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,583) vector v=[3x2+18xy-27xyz,15x2+12y4,3];
../singular_texi/./d2t_singular/poly_lib.tex(,584) content(v);
../singular_texi/./d2t_singular/poly_lib.tex(,585) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,586) @c end example content d2t_singular/poly_lib.doc:504
../singular_texi/./d2t_singular/poly_lib.tex(,587) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,588) @c ---end content content---
../singular_texi/./d2t_singular/poly_lib.tex(,589) 
../singular_texi/./d2t_singular/poly_lib.tex(,590) @c ------------------- numerator -------------
../singular_texi/./d2t_singular/poly_lib.tex(,591) @node numerator, denominator, content, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,592) @subsubsection numerator
../singular_texi/./d2t_singular/poly_lib.tex(,593) @cindex numerator
../singular_texi/./d2t_singular/poly_lib.tex(,594) @c ---content numerator---
../singular_texi/./d2t_singular/poly_lib.tex(,595) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,596) 
../singular_texi/./d2t_singular/poly_lib.tex(,597) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,598) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,599) numerator(n); n number
../singular_texi/./d2t_singular/poly_lib.tex(,600) 
../singular_texi/./d2t_singular/poly_lib.tex(,601) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,602) number, the numerator of n
../singular_texi/./d2t_singular/poly_lib.tex(,603) 
../singular_texi/./d2t_singular/poly_lib.tex(,604) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,605) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,606) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,607) @c computed example numerator d2t_singular/poly_lib.doc:531 
../singular_texi/./d2t_singular/poly_lib.tex(,608) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,609) ring r = 0,x, dp;
../singular_texi/./d2t_singular/poly_lib.tex(,610) number n = 3/2;
../singular_texi/./d2t_singular/poly_lib.tex(,611) numerator(n);
../singular_texi/./d2t_singular/poly_lib.tex(,612) @expansion{} 3
../singular_texi/./d2t_singular/poly_lib.tex(,613) @c end example numerator d2t_singular/poly_lib.doc:531
../singular_texi/./d2t_singular/poly_lib.tex(,614) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,615) @c inserted refs from d2t_singular/poly_lib.doc:538
../singular_texi/./d2t_singular/poly_lib.tex(,625) @strong{See also:}
../singular_texi/./d2t_singular/poly_lib.tex(,626) @ref{cleardenom};
../singular_texi/./d2t_singular/poly_lib.tex(,627) @ref{content};
../singular_texi/./d2t_singular/poly_lib.tex(,628) @ref{denominator}.
../singular_texi/./d2t_singular/poly_lib.tex(,630) @c end inserted refs from d2t_singular/poly_lib.doc:538
../singular_texi/./d2t_singular/poly_lib.tex(,631) 
../singular_texi/./d2t_singular/poly_lib.tex(,632) @c ---end content numerator---
../singular_texi/./d2t_singular/poly_lib.tex(,633) 
../singular_texi/./d2t_singular/poly_lib.tex(,634) @c ------------------- denominator -------------
../singular_texi/./d2t_singular/poly_lib.tex(,635) @node denominator, mod2id, numerator, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,636) @subsubsection denominator
../singular_texi/./d2t_singular/poly_lib.tex(,637) @cindex denominator
../singular_texi/./d2t_singular/poly_lib.tex(,638) @c ---content denominator---
../singular_texi/./d2t_singular/poly_lib.tex(,639) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,640) 
../singular_texi/./d2t_singular/poly_lib.tex(,641) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,642) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,643) denominator(n); n number
../singular_texi/./d2t_singular/poly_lib.tex(,644) 
../singular_texi/./d2t_singular/poly_lib.tex(,645) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,646) number, the denominator of n
../singular_texi/./d2t_singular/poly_lib.tex(,647) 
../singular_texi/./d2t_singular/poly_lib.tex(,648) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,649) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,650) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,651) @c computed example denominator d2t_singular/poly_lib.doc:561 
../singular_texi/./d2t_singular/poly_lib.tex(,652) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,653) ring r = 0,x, dp;
../singular_texi/./d2t_singular/poly_lib.tex(,654) number n = 3/2;
../singular_texi/./d2t_singular/poly_lib.tex(,655) denominator(n);
../singular_texi/./d2t_singular/poly_lib.tex(,656) @expansion{} 2
../singular_texi/./d2t_singular/poly_lib.tex(,657) @c end example denominator d2t_singular/poly_lib.doc:561
../singular_texi/./d2t_singular/poly_lib.tex(,658) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,659) @c inserted refs from d2t_singular/poly_lib.doc:568
../singular_texi/./d2t_singular/poly_lib.tex(,669) @strong{See also:}
../singular_texi/./d2t_singular/poly_lib.tex(,670) @ref{cleardenom};
../singular_texi/./d2t_singular/poly_lib.tex(,671) @ref{content};
../singular_texi/./d2t_singular/poly_lib.tex(,672) @ref{denominator}.
../singular_texi/./d2t_singular/poly_lib.tex(,674) @c end inserted refs from d2t_singular/poly_lib.doc:568
../singular_texi/./d2t_singular/poly_lib.tex(,675) 
../singular_texi/./d2t_singular/poly_lib.tex(,676) @c ---end content denominator---
../singular_texi/./d2t_singular/poly_lib.tex(,677) 
../singular_texi/./d2t_singular/poly_lib.tex(,678) @c ------------------- mod2id -------------
../singular_texi/./d2t_singular/poly_lib.tex(,679) @node mod2id, id2mod, denominator, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,680) @subsubsection mod2id
../singular_texi/./d2t_singular/poly_lib.tex(,681) @cindex mod2id
../singular_texi/./d2t_singular/poly_lib.tex(,682) @c ---content mod2id---
../singular_texi/./d2t_singular/poly_lib.tex(,683) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,684) 
../singular_texi/./d2t_singular/poly_lib.tex(,685) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,686) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,687) mod2id(M,vpos); M matrix, vpos intvec
../singular_texi/./d2t_singular/poly_lib.tex(,688) 
../singular_texi/./d2t_singular/poly_lib.tex(,689) @item @strong{Assume:}
../singular_texi/./d2t_singular/poly_lib.tex(,690) vpos is an integer vector such that gen(i) corresponds
../singular_texi/./d2t_singular/poly_lib.tex(,691) to var(vpos[i]).
../singular_texi/./d2t_singular/poly_lib.tex(,692) @*The basering contains variables var(vpos[i]) which do not occur
../singular_texi/./d2t_singular/poly_lib.tex(,693) in M.
../singular_texi/./d2t_singular/poly_lib.tex(,694) 
../singular_texi/./d2t_singular/poly_lib.tex(,695) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,696) ideal I in which each gen(i) from the module is replaced by
../singular_texi/./d2t_singular/poly_lib.tex(,697) var(vpos[i]) and all monomials var(vpos[i])*var(vpos[j]) have
../singular_texi/./d2t_singular/poly_lib.tex(,698) been added to the generating set of I.
../singular_texi/./d2t_singular/poly_lib.tex(,699) 
../singular_texi/./d2t_singular/poly_lib.tex(,700) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,701) This procedure should be used in the following situation:
../singular_texi/./d2t_singular/poly_lib.tex(,702) one wants to pass to a ring with new variables, say e(1),..,e(s),
../singular_texi/./d2t_singular/poly_lib.tex(,703) which correspond to the components gen(1),..,gen(s) of the
../singular_texi/./d2t_singular/poly_lib.tex(,704) module M such that e(i)*e(j)=0 for all i,j.
../singular_texi/./d2t_singular/poly_lib.tex(,705) @*The new ring should already exist and be the current ring
../singular_texi/./d2t_singular/poly_lib.tex(,706) 
../singular_texi/./d2t_singular/poly_lib.tex(,707) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,708) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,709) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,710) @c computed example mod2id d2t_singular/poly_lib.doc:606 
../singular_texi/./d2t_singular/poly_lib.tex(,711) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,712) ring r=0,(e(1),e(2),x,y,z),(dp(2),ds(3));
../singular_texi/./d2t_singular/poly_lib.tex(,713) module mo=x*gen(1)+y*gen(2);
../singular_texi/./d2t_singular/poly_lib.tex(,714) intvec iv=2,1;
../singular_texi/./d2t_singular/poly_lib.tex(,715) mod2id(mo,iv);
../singular_texi/./d2t_singular/poly_lib.tex(,716) @expansion{} _[1]=e(2)^2
../singular_texi/./d2t_singular/poly_lib.tex(,717) @expansion{} _[2]=e(1)*e(2)
../singular_texi/./d2t_singular/poly_lib.tex(,718) @expansion{} _[3]=e(1)^2
../singular_texi/./d2t_singular/poly_lib.tex(,719) @expansion{} _[4]=e(1)*y+e(2)*x
../singular_texi/./d2t_singular/poly_lib.tex(,720) @c end example mod2id d2t_singular/poly_lib.doc:606
../singular_texi/./d2t_singular/poly_lib.tex(,721) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,722) @c ---end content mod2id---
../singular_texi/./d2t_singular/poly_lib.tex(,723) 
../singular_texi/./d2t_singular/poly_lib.tex(,724) @c ------------------- id2mod -------------
../singular_texi/./d2t_singular/poly_lib.tex(,725) @node id2mod, substitute, mod2id, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,726) @subsubsection id2mod
../singular_texi/./d2t_singular/poly_lib.tex(,727) @cindex id2mod
../singular_texi/./d2t_singular/poly_lib.tex(,728) @c ---content id2mod---
../singular_texi/./d2t_singular/poly_lib.tex(,729) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,730) 
../singular_texi/./d2t_singular/poly_lib.tex(,731) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,732) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,733) id2mod(I,vpos); I ideal, vpos intvec
../singular_texi/./d2t_singular/poly_lib.tex(,734) 
../singular_texi/./d2t_singular/poly_lib.tex(,735) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,736) module corresponding to the ideal by replacing var(vpos[i]) by
../singular_texi/./d2t_singular/poly_lib.tex(,737) gen(i) and omitting all generators var(vpos[i])*var(vpos[j])
../singular_texi/./d2t_singular/poly_lib.tex(,738) 
../singular_texi/./d2t_singular/poly_lib.tex(,739) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,740) * This procedure only makes sense if the ideal contains
../singular_texi/./d2t_singular/poly_lib.tex(,741) all var(vpos[i])*var(vpos[j]) as monomial generators and
../singular_texi/./d2t_singular/poly_lib.tex(,742) all other generators of I are linear combinations of the
../singular_texi/./d2t_singular/poly_lib.tex(,743) var(vpos[i]) over the ring in the other variables.
../singular_texi/./d2t_singular/poly_lib.tex(,744) @** This is the inverse procedure to mod2id and should be applied
../singular_texi/./d2t_singular/poly_lib.tex(,745) only to ideals created by mod2id using the same intvec vpos
../singular_texi/./d2t_singular/poly_lib.tex(,746) (possibly after a standard basis computation)
../singular_texi/./d2t_singular/poly_lib.tex(,747) 
../singular_texi/./d2t_singular/poly_lib.tex(,748) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,749) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,750) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,751) @c computed example id2mod d2t_singular/poly_lib.doc:643 
../singular_texi/./d2t_singular/poly_lib.tex(,752) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,753) ring r=0,(e(1),e(2),x,y,z),(dp(2),ds(3));
../singular_texi/./d2t_singular/poly_lib.tex(,754) ideal i=e(2)^2,e(1)*e(2),e(1)^2,e(1)*y+e(2)*x;
../singular_texi/./d2t_singular/poly_lib.tex(,755) intvec iv=2,1;
../singular_texi/./d2t_singular/poly_lib.tex(,756) id2mod(i,iv);
../singular_texi/./d2t_singular/poly_lib.tex(,757) @expansion{} _[1]=x*gen(1)+y*gen(2)
../singular_texi/./d2t_singular/poly_lib.tex(,758) @c end example id2mod d2t_singular/poly_lib.doc:643
../singular_texi/./d2t_singular/poly_lib.tex(,759) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,760) @c ---end content id2mod---
../singular_texi/./d2t_singular/poly_lib.tex(,761) 
../singular_texi/./d2t_singular/poly_lib.tex(,762) @c ------------------- substitute -------------
../singular_texi/./d2t_singular/poly_lib.tex(,763) @node substitute, subrInterred, id2mod, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,764) @subsubsection substitute
../singular_texi/./d2t_singular/poly_lib.tex(,765) @cindex substitute
../singular_texi/./d2t_singular/poly_lib.tex(,766) @c ---content substitute---
../singular_texi/./d2t_singular/poly_lib.tex(,767) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,768) 
../singular_texi/./d2t_singular/poly_lib.tex(,769) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,770) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,771) - case 1: typeof(#[1])==poly:
../singular_texi/./d2t_singular/poly_lib.tex(,772) @*substitute (I,v,f[,v1,f1,v2,f2,...]); I object of basering which
../singular_texi/./d2t_singular/poly_lib.tex(,773) can be mapped, v,v1,v2,.. ring variables, f,f1,f2,... poly
../singular_texi/./d2t_singular/poly_lib.tex(,774) @* - case 2: typeof(#[1])==ideal:
../singular_texi/./d2t_singular/poly_lib.tex(,775) substitute1 (I,v,f); I object of basering which can be mapped,
../singular_texi/./d2t_singular/poly_lib.tex(,776) v ideal of ring variables, f ideal
../singular_texi/./d2t_singular/poly_lib.tex(,777) 
../singular_texi/./d2t_singular/poly_lib.tex(,778) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,779) object of same type as I,
../singular_texi/./d2t_singular/poly_lib.tex(,780) @* - case 1: ring variable v,v1,v2,... substituted by polynomials
../singular_texi/./d2t_singular/poly_lib.tex(,781) f,f1,f2,..., in this order
../singular_texi/./d2t_singular/poly_lib.tex(,782) @* - case 2: ring variables in v substituted by polynomials in f:
../singular_texi/./d2t_singular/poly_lib.tex(,783) v[i] is substituted by f[i], i=1,...,i=min(size(v),ncols(f))
../singular_texi/./d2t_singular/poly_lib.tex(,784) 
../singular_texi/./d2t_singular/poly_lib.tex(,785) @item @strong{Note:}
../singular_texi/./d2t_singular/poly_lib.tex(,786) this procedure extends the built-in command subst which substitutes
../singular_texi/./d2t_singular/poly_lib.tex(,787) ring variables only by monomials
../singular_texi/./d2t_singular/poly_lib.tex(,788) 
../singular_texi/./d2t_singular/poly_lib.tex(,789) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,790) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,791) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,792) @c computed example substitute d2t_singular/poly_lib.doc:683 
../singular_texi/./d2t_singular/poly_lib.tex(,793) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,794) ring r = 0,(b,c,t),dp;
../singular_texi/./d2t_singular/poly_lib.tex(,795) ideal I = -bc+4b2c2t,bc2t-5b2c;
../singular_texi/./d2t_singular/poly_lib.tex(,796) substitute(I,c,b+c,t,0,b,b-1);
../singular_texi/./d2t_singular/poly_lib.tex(,797) @expansion{} _[1]=-b2-bc+2b+c-1
../singular_texi/./d2t_singular/poly_lib.tex(,798) @expansion{} _[2]=-5b3-5b2c+15b2+10bc-15b-5c+5
../singular_texi/./d2t_singular/poly_lib.tex(,799) ideal v = c,t,b;
../singular_texi/./d2t_singular/poly_lib.tex(,800) ideal f = b+c,0,b-1;
../singular_texi/./d2t_singular/poly_lib.tex(,801) substitute(I,v,f);
../singular_texi/./d2t_singular/poly_lib.tex(,802) @expansion{} _[1]=-b2-bc+2b+c-1
../singular_texi/./d2t_singular/poly_lib.tex(,803) @expansion{} _[2]=-5b3-5b2c+15b2+10bc-15b-5c+5
../singular_texi/./d2t_singular/poly_lib.tex(,804) @c end example substitute d2t_singular/poly_lib.doc:683
../singular_texi/./d2t_singular/poly_lib.tex(,805) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,806) @c ---end content substitute---
../singular_texi/./d2t_singular/poly_lib.tex(,807) 
../singular_texi/./d2t_singular/poly_lib.tex(,808) @c ------------------- subrInterred -------------
../singular_texi/./d2t_singular/poly_lib.tex(,809) @node subrInterred, hilbPoly, substitute, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,810) @subsubsection subrInterred
../singular_texi/./d2t_singular/poly_lib.tex(,811) @cindex subrInterred
../singular_texi/./d2t_singular/poly_lib.tex(,812) @c ---content subrInterred---
../singular_texi/./d2t_singular/poly_lib.tex(,813) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,814) 
../singular_texi/./d2t_singular/poly_lib.tex(,815) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,816) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,817) subrInterred(mon,sm,iv);
../singular_texi/./d2t_singular/poly_lib.tex(,818) @*sm: ideal in a ring r with n + s variables,
../singular_texi/./d2t_singular/poly_lib.tex(,819) @*e.g. x_1,..,x_n and t_1,..,t_s
../singular_texi/./d2t_singular/poly_lib.tex(,820) @*mon: ideal with monomial generators (not divisible by
../singular_texi/./d2t_singular/poly_lib.tex(,821) any of the t_i) such that sm is contained in the module
../singular_texi/./d2t_singular/poly_lib.tex(,822) k[t_1,..,t_s]*mon[1]+..+k[t_1,..,t_s]*mon[size(mon)]
../singular_texi/./d2t_singular/poly_lib.tex(,823) @*iv: intvec listing the variables which are supposed to be used
../singular_texi/./d2t_singular/poly_lib.tex(,824) as x_i
../singular_texi/./d2t_singular/poly_lib.tex(,825) 
../singular_texi/./d2t_singular/poly_lib.tex(,826) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,827) list l:
../singular_texi/./d2t_singular/poly_lib.tex(,828) @*l[1]=the monomials from mon in the order used
../singular_texi/./d2t_singular/poly_lib.tex(,829) @*l[2]=their coefficients after interreduction
../singular_texi/./d2t_singular/poly_lib.tex(,830) @*l[3]=l[1]*l[2]
../singular_texi/./d2t_singular/poly_lib.tex(,831) 
../singular_texi/./d2t_singular/poly_lib.tex(,832) @item @strong{Purpose:}
../singular_texi/./d2t_singular/poly_lib.tex(,833) Do interred only w.r.t. a subset of variables.
../singular_texi/./d2t_singular/poly_lib.tex(,834) @*The procedure returns an interreduced system of generators of
../singular_texi/./d2t_singular/poly_lib.tex(,835) sm considered as a k[t_1,..,t_s]-submodule of the free module
../singular_texi/./d2t_singular/poly_lib.tex(,836) k[t_1,..,t_s]*mon[1]+..+k[t_1,..,t_s]*mon[size(mon)]).
../singular_texi/./d2t_singular/poly_lib.tex(,837) 
../singular_texi/./d2t_singular/poly_lib.tex(,838) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,839) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,840) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,841) @c computed example subrInterred d2t_singular/poly_lib.doc:728 
../singular_texi/./d2t_singular/poly_lib.tex(,842) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,843) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/poly_lib.tex(,844) ideal i=x^2+x*y^2,x*y+x^2*y,z;
../singular_texi/./d2t_singular/poly_lib.tex(,845) ideal j=x^2+x*y^2,x*y,z;
../singular_texi/./d2t_singular/poly_lib.tex(,846) ideal mon=x^2,z,x*y;
../singular_texi/./d2t_singular/poly_lib.tex(,847) intvec iv=1,3;
../singular_texi/./d2t_singular/poly_lib.tex(,848) subrInterred(mon,i,iv);
../singular_texi/./d2t_singular/poly_lib.tex(,849) @expansion{} [1]:
../singular_texi/./d2t_singular/poly_lib.tex(,850) @expansion{}    _[1,1]=z
../singular_texi/./d2t_singular/poly_lib.tex(,851) @expansion{}    _[1,2]=xy
../singular_texi/./d2t_singular/poly_lib.tex(,852) @expansion{}    _[1,3]=x2
../singular_texi/./d2t_singular/poly_lib.tex(,853) @expansion{} [2]:
../singular_texi/./d2t_singular/poly_lib.tex(,854) @expansion{}    _[1]=gen(1)
../singular_texi/./d2t_singular/poly_lib.tex(,855) @expansion{}    _[2]=y2*gen(2)-gen(2)
../singular_texi/./d2t_singular/poly_lib.tex(,856) @expansion{}    _[3]=y*gen(2)+gen(3)
../singular_texi/./d2t_singular/poly_lib.tex(,857) @expansion{} [3]:
../singular_texi/./d2t_singular/poly_lib.tex(,858) @expansion{}    _[1,1]=z
../singular_texi/./d2t_singular/poly_lib.tex(,859) @expansion{}    _[1,2]=xy3-xy
../singular_texi/./d2t_singular/poly_lib.tex(,860) @expansion{}    _[1,3]=xy2+x2
../singular_texi/./d2t_singular/poly_lib.tex(,861) subrInterred(mon,j,iv);
../singular_texi/./d2t_singular/poly_lib.tex(,862) @expansion{} [1]:
../singular_texi/./d2t_singular/poly_lib.tex(,863) @expansion{}    _[1,1]=z
../singular_texi/./d2t_singular/poly_lib.tex(,864) @expansion{}    _[1,2]=xy
../singular_texi/./d2t_singular/poly_lib.tex(,865) @expansion{}    _[1,3]=x2
../singular_texi/./d2t_singular/poly_lib.tex(,866) @expansion{} [2]:
../singular_texi/./d2t_singular/poly_lib.tex(,867) @expansion{}    _[1]=gen(1)
../singular_texi/./d2t_singular/poly_lib.tex(,868) @expansion{}    _[2]=gen(2)
../singular_texi/./d2t_singular/poly_lib.tex(,869) @expansion{}    _[3]=gen(3)
../singular_texi/./d2t_singular/poly_lib.tex(,870) @expansion{} [3]:
../singular_texi/./d2t_singular/poly_lib.tex(,871) @expansion{}    _[1,1]=z
../singular_texi/./d2t_singular/poly_lib.tex(,872) @expansion{}    _[1,2]=xy
../singular_texi/./d2t_singular/poly_lib.tex(,873) @expansion{}    _[1,3]=x2
../singular_texi/./d2t_singular/poly_lib.tex(,874) @c end example subrInterred d2t_singular/poly_lib.doc:728
../singular_texi/./d2t_singular/poly_lib.tex(,875) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,876) @c ---end content subrInterred---
../singular_texi/./d2t_singular/poly_lib.tex(,877) 
../singular_texi/./d2t_singular/poly_lib.tex(,878) @c ------------------- hilbPoly -------------
../singular_texi/./d2t_singular/poly_lib.tex(,879) @node hilbPoly,, subrInterred, poly_lib
../singular_texi/./d2t_singular/poly_lib.tex(,880) @subsubsection hilbPoly
../singular_texi/./d2t_singular/poly_lib.tex(,881) @cindex hilbPoly
../singular_texi/./d2t_singular/poly_lib.tex(,882) @c ---content hilbPoly---
../singular_texi/./d2t_singular/poly_lib.tex(,883) Procedure from library @code{poly.lib} (@pxref{poly_lib}).
../singular_texi/./d2t_singular/poly_lib.tex(,884) 
../singular_texi/./d2t_singular/poly_lib.tex(,885) @table @asis
../singular_texi/./d2t_singular/poly_lib.tex(,886) @item @strong{Usage:}
../singular_texi/./d2t_singular/poly_lib.tex(,887) hilbPoly(I) I a homogeneous ideal
../singular_texi/./d2t_singular/poly_lib.tex(,888) 
../singular_texi/./d2t_singular/poly_lib.tex(,889) @item @strong{Return:}
../singular_texi/./d2t_singular/poly_lib.tex(,890) the Hilbert polynomial of basering/I as an intvec v=v_0,...,v_r
../singular_texi/./d2t_singular/poly_lib.tex(,891) such that the Hilbert polynomial is (v_0+v_1*t+...v_r*t^r)/r!
../singular_texi/./d2t_singular/poly_lib.tex(,892) 
../singular_texi/./d2t_singular/poly_lib.tex(,893) @end table
../singular_texi/./d2t_singular/poly_lib.tex(,894) @strong{Example:}
../singular_texi/./d2t_singular/poly_lib.tex(,895) @smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,896) @c computed example hilbPoly d2t_singular/poly_lib.doc:759 
../singular_texi/./d2t_singular/poly_lib.tex(,897) LIB "poly.lib";
../singular_texi/./d2t_singular/poly_lib.tex(,898) ring r = 0,(b,c,t,h),dp;
../singular_texi/./d2t_singular/poly_lib.tex(,899) ideal I=
../singular_texi/./d2t_singular/poly_lib.tex(,900) bct-t2h+2th2+h3,
../singular_texi/./d2t_singular/poly_lib.tex(,901) bt3-ct3-t4+b2th+c2th-2bt2h+2ct2h+2t3h-bch2-2bth2+2cth2+2th3,
../singular_texi/./d2t_singular/poly_lib.tex(,902) b2c2+bt2h-ct2h-t3h+b2h2+2bch2+c2h2-2bth2+2cth2+t2h2-2bh3+2ch3+2th3+3h4,
../singular_texi/./d2t_singular/poly_lib.tex(,903) c2t3+ct4-c3th-2c2t2h-2ct3h-t4h+bc2h2-2c2th2-bt2h2+4t3h2+2bth3-2cth3-t2h3
../singular_texi/./d2t_singular/poly_lib.tex(,904) +bh4-6th4-2h5;
../singular_texi/./d2t_singular/poly_lib.tex(,905) hilbPoly(I);
../singular_texi/./d2t_singular/poly_lib.tex(,906) @expansion{} -11,10
../singular_texi/./d2t_singular/poly_lib.tex(,907) @c end example hilbPoly d2t_singular/poly_lib.doc:759
../singular_texi/./d2t_singular/poly_lib.tex(,908) @end smallexample
../singular_texi/./d2t_singular/poly_lib.tex(,909) @c ---end content hilbPoly---
../singular_texi/singular.tex(,322) @c ----------------------------------------------------------
../singular_texi/singular.tex(,323) @node random_lib, ring_lib, poly_lib, General purpose
../singular_texi/singular.tex(,324) @subsection random_lib
../singular_texi/singular.tex(,325) @c include of docu for random.lib
../singular_texi/./d2t_singular/random_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/random_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/random_lib.doc
../singular_texi/./d2t_singular/random_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/random_lib.doc INSTEAD
../singular_texi/./d2t_singular/random_lib.tex(,4) @c library version: (1.16.2.1,2002/02/20)
../singular_texi/./d2t_singular/random_lib.tex(,5) @c library file: ../Singular/LIB/random.lib
../singular_texi/./d2t_singular/random_lib.tex(,6) @cindex random.lib
../singular_texi/./d2t_singular/random_lib.tex(,7) @cindex random_lib
../singular_texi/./d2t_singular/random_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/random_lib.tex(,10) random.lib
../singular_texi/./d2t_singular/random_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/random_lib.tex(,12)     Creating Random and Sparse Matrices, Ideals, Polys
../singular_texi/./d2t_singular/random_lib.tex(,13) 
../singular_texi/./d2t_singular/random_lib.tex(,14) @end table
../singular_texi/./d2t_singular/random_lib.tex(,15) 
../singular_texi/./d2t_singular/random_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/random_lib.tex(,17) @menu
../singular_texi/./d2t_singular/random_lib.tex(,18) * genericid:: generic sparse linear combinations of generators of i
../singular_texi/./d2t_singular/random_lib.tex(,19) * randomid:: random linear combinations of generators of id
../singular_texi/./d2t_singular/random_lib.tex(,20) * randommat:: nxm matrix of random linear combinations of id
../singular_texi/./d2t_singular/random_lib.tex(,21) * sparseid:: ideal of k random sparse poly's of degree d [u<=d<=o]
../singular_texi/./d2t_singular/random_lib.tex(,22) * sparsematrix:: nxm sparse matrix of polynomials of degree<=o
../singular_texi/./d2t_singular/random_lib.tex(,23) * sparsemat:: nxm sparse integer matrix with random coefficients
../singular_texi/./d2t_singular/random_lib.tex(,24) * sparsepoly:: random sparse polynomial with terms of degree in [u,o]
../singular_texi/./d2t_singular/random_lib.tex(,25) * sparsetriag:: nxm sparse lower-triag intmat with random coefficients
../singular_texi/./d2t_singular/random_lib.tex(,26) * triagmatrix:: nxm sparse lower-triag matrix of poly's of degree<=o
../singular_texi/./d2t_singular/random_lib.tex(,27) * randomLast:: random transformation of the last variable
../singular_texi/./d2t_singular/random_lib.tex(,28) * randomBinomial:: binomial ideal, k random generators of degree >=u
../singular_texi/./d2t_singular/random_lib.tex(,29) @end menu
../singular_texi/./d2t_singular/random_lib.tex(,30) @c ---end content LibInfo---
../singular_texi/./d2t_singular/random_lib.tex(,31) 
../singular_texi/./d2t_singular/random_lib.tex(,32) @c ------------------- genericid -------------
../singular_texi/./d2t_singular/random_lib.tex(,33) @node genericid, randomid,, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,34) @subsubsection genericid
../singular_texi/./d2t_singular/random_lib.tex(,35) @cindex genericid
../singular_texi/./d2t_singular/random_lib.tex(,36) @c ---content genericid---
../singular_texi/./d2t_singular/random_lib.tex(,37) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,38) 
../singular_texi/./d2t_singular/random_lib.tex(,39) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,40) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,41) genericid(id,[,p,b]); id ideal/module, k,p,b integers
../singular_texi/./d2t_singular/random_lib.tex(,42) 
../singular_texi/./d2t_singular/random_lib.tex(,43) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,44) system of generators of id which are generic, sparse, triagonal linear
../singular_texi/./d2t_singular/random_lib.tex(,45) combinations of given generators with coefficients in [1,b] and
../singular_texi/./d2t_singular/random_lib.tex(,46) sparseness p percent, bigger p being sparser (default: p=75, b=30000)
../singular_texi/./d2t_singular/random_lib.tex(,47) 
../singular_texi/./d2t_singular/random_lib.tex(,48) @item @strong{Note:}
../singular_texi/./d2t_singular/random_lib.tex(,49) For performance reasons try small bound b in characteristic 0
../singular_texi/./d2t_singular/random_lib.tex(,50) 
../singular_texi/./d2t_singular/random_lib.tex(,51) @end table
../singular_texi/./d2t_singular/random_lib.tex(,52) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,53) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,54) @c computed example genericid d2t_singular/random_lib.doc:52 
../singular_texi/./d2t_singular/random_lib.tex(,55) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,56) ring r=0,(t,x,y,z),ds;
../singular_texi/./d2t_singular/random_lib.tex(,57) ideal i= x3+y4,z4+yx,t+x+y+z;
../singular_texi/./d2t_singular/random_lib.tex(,58) genericid(i,0,10);
../singular_texi/./d2t_singular/random_lib.tex(,59) @expansion{} _[1]=3t+3x+3y+3z+2xy+x3+y4+2z4
../singular_texi/./d2t_singular/random_lib.tex(,60) @expansion{} _[2]=4t+4x+4y+4z+xy+z4
../singular_texi/./d2t_singular/random_lib.tex(,61) @expansion{} _[3]=t+x+y+z
../singular_texi/./d2t_singular/random_lib.tex(,62) module m=[x,0,0,0],[0,y2,0,0],[0,0,z3,0],[0,0,0,t4];
../singular_texi/./d2t_singular/random_lib.tex(,63) print(genericid(m));
../singular_texi/./d2t_singular/random_lib.tex(,64) @expansion{} x,      0,      0, 0,
../singular_texi/./d2t_singular/random_lib.tex(,65) @expansion{} 17904y2,y2,     0, 0,
../singular_texi/./d2t_singular/random_lib.tex(,66) @expansion{} 0,      24170z3,z3,0,
../singular_texi/./d2t_singular/random_lib.tex(,67) @expansion{} 0,      0,      0, t4
../singular_texi/./d2t_singular/random_lib.tex(,68) @c end example genericid d2t_singular/random_lib.doc:52
../singular_texi/./d2t_singular/random_lib.tex(,69) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,70) @c ---end content genericid---
../singular_texi/./d2t_singular/random_lib.tex(,71) 
../singular_texi/./d2t_singular/random_lib.tex(,72) @c ------------------- randomid -------------
../singular_texi/./d2t_singular/random_lib.tex(,73) @node randomid, randommat, genericid, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,74) @subsubsection randomid
../singular_texi/./d2t_singular/random_lib.tex(,75) @cindex randomid
../singular_texi/./d2t_singular/random_lib.tex(,76) @c ---content randomid---
../singular_texi/./d2t_singular/random_lib.tex(,77) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,78) 
../singular_texi/./d2t_singular/random_lib.tex(,79) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,80) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,81) randomid(id,[k,b]); id ideal/module, b,k integers
../singular_texi/./d2t_singular/random_lib.tex(,82) 
../singular_texi/./d2t_singular/random_lib.tex(,83) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,84) ideal/module having k generators which are random linear combinations
../singular_texi/./d2t_singular/random_lib.tex(,85) of generators of id with coefficients in the interval [-b,b]
../singular_texi/./d2t_singular/random_lib.tex(,86) (default: b=30000, k=size(id))
../singular_texi/./d2t_singular/random_lib.tex(,87) 
../singular_texi/./d2t_singular/random_lib.tex(,88) @item @strong{Note:}
../singular_texi/./d2t_singular/random_lib.tex(,89) For performance reasons try small bound b in characteristic 0
../singular_texi/./d2t_singular/random_lib.tex(,90) 
../singular_texi/./d2t_singular/random_lib.tex(,91) @end table
../singular_texi/./d2t_singular/random_lib.tex(,92) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,93) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,94) @c computed example randomid d2t_singular/random_lib.doc:85 
../singular_texi/./d2t_singular/random_lib.tex(,95) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,96) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/random_lib.tex(,97) randomid(maxideal(2),2,9);
../singular_texi/./d2t_singular/random_lib.tex(,98) @expansion{} _[1]=-5x2-9xy+6y2-8xz-8yz+4z2
../singular_texi/./d2t_singular/random_lib.tex(,99) @expansion{} _[2]=-9xy+2y2+xz+yz-z2
../singular_texi/./d2t_singular/random_lib.tex(,100) module m=[x,0,1],[0,y2,0],[y,0,z3];
../singular_texi/./d2t_singular/random_lib.tex(,101) show(randomid(m));
../singular_texi/./d2t_singular/random_lib.tex(,102) @expansion{} // module, 3 generator(s)
../singular_texi/./d2t_singular/random_lib.tex(,103) @expansion{} [1369x-11685y,-4481y2,-11685z3+1369]
../singular_texi/./d2t_singular/random_lib.tex(,104) @expansion{} [-642x-13756y,25342y2,-13756z3-642]
../singular_texi/./d2t_singular/random_lib.tex(,105) @expansion{} [2536x-6355y,8285y2,-6355z3+2536]
../singular_texi/./d2t_singular/random_lib.tex(,106) @c end example randomid d2t_singular/random_lib.doc:85
../singular_texi/./d2t_singular/random_lib.tex(,107) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,108) @c ---end content randomid---
../singular_texi/./d2t_singular/random_lib.tex(,109) 
../singular_texi/./d2t_singular/random_lib.tex(,110) @c ------------------- randommat -------------
../singular_texi/./d2t_singular/random_lib.tex(,111) @node randommat, sparseid, randomid, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,112) @subsubsection randommat
../singular_texi/./d2t_singular/random_lib.tex(,113) @cindex randommat
../singular_texi/./d2t_singular/random_lib.tex(,114) @c ---content randommat---
../singular_texi/./d2t_singular/random_lib.tex(,115) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,116) 
../singular_texi/./d2t_singular/random_lib.tex(,117) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,118) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,119) randommat(n,m[,id,b]); n,m,b integers, id ideal
../singular_texi/./d2t_singular/random_lib.tex(,120) 
../singular_texi/./d2t_singular/random_lib.tex(,121) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,122) nxm matrix, entries are random linear combinations of elements
../singular_texi/./d2t_singular/random_lib.tex(,123) of id and coefficients in [-b,b]
../singular_texi/./d2t_singular/random_lib.tex(,124) @*[default: (id,b) = (maxideal(1),30000)]
../singular_texi/./d2t_singular/random_lib.tex(,125) 
../singular_texi/./d2t_singular/random_lib.tex(,126) @item @strong{Note:}
../singular_texi/./d2t_singular/random_lib.tex(,127) For performance reasons try small bound b in char 0
../singular_texi/./d2t_singular/random_lib.tex(,128) 
../singular_texi/./d2t_singular/random_lib.tex(,129) @end table
../singular_texi/./d2t_singular/random_lib.tex(,130) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,131) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,132) @c computed example randommat d2t_singular/random_lib.doc:117 
../singular_texi/./d2t_singular/random_lib.tex(,133) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,134) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/random_lib.tex(,135) matrix A=randommat(3,3,maxideal(2),9);
../singular_texi/./d2t_singular/random_lib.tex(,136) print(A);
../singular_texi/./d2t_singular/random_lib.tex(,137) @expansion{} 9x2-2xy-8y2-9xz+yz+4z2, 9x2-4xy+y2-5xz+6yz-z2,   8x2+xy-9y2+2yz-8z2,    
../singular_texi/./d2t_singular/random_lib.tex(,138) @expansion{} -x2+5xy-8y2-7xz+4yz-3z2,x2+xy-4y2-xz+5z2,        5x2-8xy+8y2+6xz+yz+7z2,
../singular_texi/./d2t_singular/random_lib.tex(,139) @expansion{} 4x2-5xy-6y2-4yz-5z2,    -4x2-6xy-4y2-8xz+3yz+5z2,2x2+3xy+y2+4xz-3yz+2z2 
../singular_texi/./d2t_singular/random_lib.tex(,140) A=randommat(2,3);
../singular_texi/./d2t_singular/random_lib.tex(,141) print(A);
../singular_texi/./d2t_singular/random_lib.tex(,142) @expansion{} 15276x+9897y+7526z,  6495x-24178y+11295z,-5745x-14754y+15979z,
../singular_texi/./d2t_singular/random_lib.tex(,143) @expansion{} 20788x-28366y-20283z,24911x-10978y+3341z,12412x+11216y+15344z 
../singular_texi/./d2t_singular/random_lib.tex(,144) @c end example randommat d2t_singular/random_lib.doc:117
../singular_texi/./d2t_singular/random_lib.tex(,145) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,146) @c ---end content randommat---
../singular_texi/./d2t_singular/random_lib.tex(,147) 
../singular_texi/./d2t_singular/random_lib.tex(,148) @c ------------------- sparseid -------------
../singular_texi/./d2t_singular/random_lib.tex(,149) @node sparseid, sparsematrix, randommat, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,150) @subsubsection sparseid
../singular_texi/./d2t_singular/random_lib.tex(,151) @cindex sparseid
../singular_texi/./d2t_singular/random_lib.tex(,152) @c ---content sparseid---
../singular_texi/./d2t_singular/random_lib.tex(,153) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,154) 
../singular_texi/./d2t_singular/random_lib.tex(,155) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,156) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,157) sparseid(k,u[,o,p,b]); k,u,o,p,b integers
../singular_texi/./d2t_singular/random_lib.tex(,158) 
../singular_texi/./d2t_singular/random_lib.tex(,159) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,160) ideal having k generators, each of degree d, u<=d<=o, p percent of
../singular_texi/./d2t_singular/random_lib.tex(,161) terms in degree d are 0, the remaining have random coefficients
../singular_texi/./d2t_singular/random_lib.tex(,162) in the interval [1,b], (default: o=u=d, p=75, b=30000)
../singular_texi/./d2t_singular/random_lib.tex(,163) 
../singular_texi/./d2t_singular/random_lib.tex(,164) @end table
../singular_texi/./d2t_singular/random_lib.tex(,165) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,166) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,167) @c computed example sparseid d2t_singular/random_lib.doc:147 
../singular_texi/./d2t_singular/random_lib.tex(,168) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,169) ring r = 0,(a,b,c,d),ds;
../singular_texi/./d2t_singular/random_lib.tex(,170) sparseid(2,3);"";
../singular_texi/./d2t_singular/random_lib.tex(,171) @expansion{} _[1]=12773a3+24263a2c+20030abc+17904b2c+26359c3
../singular_texi/./d2t_singular/random_lib.tex(,172) @expansion{} _[2]=24004a3+6204b2c+24170bc2+19505c2d+21962bd2
../singular_texi/./d2t_singular/random_lib.tex(,173) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,174) sparseid(3,0,4,90,9);
../singular_texi/./d2t_singular/random_lib.tex(,175) @expansion{} _[1]=1+4a2+8b2c+3c3+4a3b+4a2b2+5abc2+3ac3
../singular_texi/./d2t_singular/random_lib.tex(,176) @expansion{} _[2]=a+a2+7ab2+6a2c+3c3+5a3b+9ab3+2c4+3c3d+8ad3
../singular_texi/./d2t_singular/random_lib.tex(,177) @expansion{} _[3]=5a+ab+2ac2+2b3c+8abcd
../singular_texi/./d2t_singular/random_lib.tex(,178) @c end example sparseid d2t_singular/random_lib.doc:147
../singular_texi/./d2t_singular/random_lib.tex(,179) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,180) @c ---end content sparseid---
../singular_texi/./d2t_singular/random_lib.tex(,181) 
../singular_texi/./d2t_singular/random_lib.tex(,182) @c ------------------- sparsematrix -------------
../singular_texi/./d2t_singular/random_lib.tex(,183) @node sparsematrix, sparsemat, sparseid, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,184) @subsubsection sparsematrix
../singular_texi/./d2t_singular/random_lib.tex(,185) @cindex sparsematrix
../singular_texi/./d2t_singular/random_lib.tex(,186) @c ---content sparsematrix---
../singular_texi/./d2t_singular/random_lib.tex(,187) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,188) 
../singular_texi/./d2t_singular/random_lib.tex(,189) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,190) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,191) sparsematrix(n,m,o[,u,pe,pp,b]); n,m,o,u,pe,pp,b integers
../singular_texi/./d2t_singular/random_lib.tex(,192) 
../singular_texi/./d2t_singular/random_lib.tex(,193) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,194) nxm matrix, about pe percent of the entries are 0, the remaining
../singular_texi/./d2t_singular/random_lib.tex(,195) are random polynomials of degree d, u<=d<=o, with pp percent of
../singular_texi/./d2t_singular/random_lib.tex(,196) the terms being 0, the remaining have random coefficients
../singular_texi/./d2t_singular/random_lib.tex(,197) in the interval [1,b] [default: (pe,u,pp,b) = (0,50,75,100)]
../singular_texi/./d2t_singular/random_lib.tex(,198) 
../singular_texi/./d2t_singular/random_lib.tex(,199) @end table
../singular_texi/./d2t_singular/random_lib.tex(,200) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,201) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,202) @c computed example sparsematrix d2t_singular/random_lib.doc:176 
../singular_texi/./d2t_singular/random_lib.tex(,203) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,204) ring r = 0,(a,b,c,d),dp;
../singular_texi/./d2t_singular/random_lib.tex(,205) // sparse matrix of sparse polys of degree <=2:
../singular_texi/./d2t_singular/random_lib.tex(,206) print(sparsematrix(3,4,2));"";
../singular_texi/./d2t_singular/random_lib.tex(,207) @expansion{} 14ab+20bc+79cd+30b,    32a2+97bc+5b,      0,             0,
../singular_texi/./d2t_singular/random_lib.tex(,208) @expansion{} 0,                     0,                 6c2+16b+64c+76,0,
../singular_texi/./d2t_singular/random_lib.tex(,209) @expansion{} 17a2+30ab+94bc+19b+45d,88a2+44bc+13d2+31a,59ac,          0 
../singular_texi/./d2t_singular/random_lib.tex(,210) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,211) // dense matrix of sparse linear forms:
../singular_texi/./d2t_singular/random_lib.tex(,212) print(sparsematrix(3,3,1,1,0,55,9));
../singular_texi/./d2t_singular/random_lib.tex(,213) @expansion{} 9b+7c+8d,9b+9d,5a,   
../singular_texi/./d2t_singular/random_lib.tex(,214) @expansion{} 7c+d,    a+6b, 2b+2d,
../singular_texi/./d2t_singular/random_lib.tex(,215) @expansion{} 9a+5b+9c,2a+9d,2d    
../singular_texi/./d2t_singular/random_lib.tex(,216) @c end example sparsematrix d2t_singular/random_lib.doc:176
../singular_texi/./d2t_singular/random_lib.tex(,217) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,218) @c ---end content sparsematrix---
../singular_texi/./d2t_singular/random_lib.tex(,219) 
../singular_texi/./d2t_singular/random_lib.tex(,220) @c ------------------- sparsemat -------------
../singular_texi/./d2t_singular/random_lib.tex(,221) @node sparsemat, sparsepoly, sparsematrix, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,222) @subsubsection sparsemat
../singular_texi/./d2t_singular/random_lib.tex(,223) @cindex sparsemat
../singular_texi/./d2t_singular/random_lib.tex(,224) @c ---content sparsemat---
../singular_texi/./d2t_singular/random_lib.tex(,225) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,226) 
../singular_texi/./d2t_singular/random_lib.tex(,227) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,228) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,229) sparsemat(n,m[,p,b]); n,m,p,b integers
../singular_texi/./d2t_singular/random_lib.tex(,230) 
../singular_texi/./d2t_singular/random_lib.tex(,231) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,232) nxm integer matrix, p percent of the entries are 0, the remaining
../singular_texi/./d2t_singular/random_lib.tex(,233) are random coefficients >=1 and <= b; [defaults: (p,b) = (75,1)]
../singular_texi/./d2t_singular/random_lib.tex(,234) 
../singular_texi/./d2t_singular/random_lib.tex(,235) @end table
../singular_texi/./d2t_singular/random_lib.tex(,236) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,237) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,238) @c computed example sparsemat d2t_singular/random_lib.doc:205 
../singular_texi/./d2t_singular/random_lib.tex(,239) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,240) sparsemat(5,5);"";
../singular_texi/./d2t_singular/random_lib.tex(,241) @expansion{} 0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,242) @expansion{} 0,1,0,0,1,
../singular_texi/./d2t_singular/random_lib.tex(,243) @expansion{} 0,0,0,1,0,
../singular_texi/./d2t_singular/random_lib.tex(,244) @expansion{} 0,1,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,245) @expansion{} 0,1,0,1,1 
../singular_texi/./d2t_singular/random_lib.tex(,246) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,247) sparsemat(5,5,95);"";
../singular_texi/./d2t_singular/random_lib.tex(,248) @expansion{} 1,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,249) @expansion{} 0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,250) @expansion{} 0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,251) @expansion{} 0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,252) @expansion{} 0,0,0,1,0 
../singular_texi/./d2t_singular/random_lib.tex(,253) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,254) sparsemat(5,5,5);"";
../singular_texi/./d2t_singular/random_lib.tex(,255) @expansion{} 1,1,1,1,1,
../singular_texi/./d2t_singular/random_lib.tex(,256) @expansion{} 1,1,1,1,1,
../singular_texi/./d2t_singular/random_lib.tex(,257) @expansion{} 1,1,1,1,1,
../singular_texi/./d2t_singular/random_lib.tex(,258) @expansion{} 1,0,1,1,1,
../singular_texi/./d2t_singular/random_lib.tex(,259) @expansion{} 1,1,1,1,0 
../singular_texi/./d2t_singular/random_lib.tex(,260) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,261) sparsemat(5,5,50,100);
../singular_texi/./d2t_singular/random_lib.tex(,262) @expansion{} 0,17,24,80,0,
../singular_texi/./d2t_singular/random_lib.tex(,263) @expansion{} 0,13,30,45,0,
../singular_texi/./d2t_singular/random_lib.tex(,264) @expansion{} 19,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,265) @expansion{} 93,0,23,0,69,
../singular_texi/./d2t_singular/random_lib.tex(,266) @expansion{} 0,88,44,31,0 
../singular_texi/./d2t_singular/random_lib.tex(,267) @c end example sparsemat d2t_singular/random_lib.doc:205
../singular_texi/./d2t_singular/random_lib.tex(,268) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,269) @c ---end content sparsemat---
../singular_texi/./d2t_singular/random_lib.tex(,270) 
../singular_texi/./d2t_singular/random_lib.tex(,271) @c ------------------- sparsepoly -------------
../singular_texi/./d2t_singular/random_lib.tex(,272) @node sparsepoly, sparsetriag, sparsemat, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,273) @subsubsection sparsepoly
../singular_texi/./d2t_singular/random_lib.tex(,274) @cindex sparsepoly
../singular_texi/./d2t_singular/random_lib.tex(,275) @c ---content sparsepoly---
../singular_texi/./d2t_singular/random_lib.tex(,276) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,277) 
../singular_texi/./d2t_singular/random_lib.tex(,278) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,279) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,280) sparsepoly(u[,o,p,b]); u,o,p,b integers
../singular_texi/./d2t_singular/random_lib.tex(,281) 
../singular_texi/./d2t_singular/random_lib.tex(,282) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,283) poly having only terms in degree d, u<=d<=o, p percent of the terms
../singular_texi/./d2t_singular/random_lib.tex(,284) in degree d are 0, the remaining have random coefficients in [1,b),
../singular_texi/./d2t_singular/random_lib.tex(,285) (defaults: o=u=d, p=75, b=30000)
../singular_texi/./d2t_singular/random_lib.tex(,286) 
../singular_texi/./d2t_singular/random_lib.tex(,287) @end table
../singular_texi/./d2t_singular/random_lib.tex(,288) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,289) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,290) @c computed example sparsepoly d2t_singular/random_lib.doc:234 
../singular_texi/./d2t_singular/random_lib.tex(,291) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,292) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/random_lib.tex(,293) sparsepoly(5);"";
../singular_texi/./d2t_singular/random_lib.tex(,294) @expansion{} 24263xy4+24170x4z+21962x3yz+26642xy3z+5664xy2z2+17904xz4
../singular_texi/./d2t_singular/random_lib.tex(,295) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,296) sparsepoly(3,5,90,9);
../singular_texi/./d2t_singular/random_lib.tex(,297) @expansion{} 8x3z2+2y3z2+3xyz3+2xy3+yz3+xy2
../singular_texi/./d2t_singular/random_lib.tex(,298) @c end example sparsepoly d2t_singular/random_lib.doc:234
../singular_texi/./d2t_singular/random_lib.tex(,299) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,300) @c ---end content sparsepoly---
../singular_texi/./d2t_singular/random_lib.tex(,301) 
../singular_texi/./d2t_singular/random_lib.tex(,302) @c ------------------- sparsetriag -------------
../singular_texi/./d2t_singular/random_lib.tex(,303) @node sparsetriag, triagmatrix, sparsepoly, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,304) @subsubsection sparsetriag
../singular_texi/./d2t_singular/random_lib.tex(,305) @cindex sparsetriag
../singular_texi/./d2t_singular/random_lib.tex(,306) @c ---content sparsetriag---
../singular_texi/./d2t_singular/random_lib.tex(,307) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,308) 
../singular_texi/./d2t_singular/random_lib.tex(,309) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,310) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,311) sparsetriag(n,m[,p,b]); n,m,p,b integers
../singular_texi/./d2t_singular/random_lib.tex(,312) 
../singular_texi/./d2t_singular/random_lib.tex(,313) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,314) nxm lower triagonal integer matrix, diagonal entries equal to 1, about
../singular_texi/./d2t_singular/random_lib.tex(,315) p percent of lower diagonal entries are 0, the remaining are random
../singular_texi/./d2t_singular/random_lib.tex(,316) integers >=1 and <= b; [defaults: (p,b) = (75,1)]
../singular_texi/./d2t_singular/random_lib.tex(,317) 
../singular_texi/./d2t_singular/random_lib.tex(,318) @end table
../singular_texi/./d2t_singular/random_lib.tex(,319) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,320) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,321) @c computed example sparsetriag d2t_singular/random_lib.doc:262 
../singular_texi/./d2t_singular/random_lib.tex(,322) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,323) sparsetriag(5,7);"";
../singular_texi/./d2t_singular/random_lib.tex(,324) @expansion{} 1,0,0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,325) @expansion{} 0,1,0,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,326) @expansion{} 0,1,1,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,327) @expansion{} 0,0,0,1,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,328) @expansion{} 1,1,0,0,1,0,0 
../singular_texi/./d2t_singular/random_lib.tex(,329) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,330) sparsetriag(7,5,90);"";
../singular_texi/./d2t_singular/random_lib.tex(,331) @expansion{} 1,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,332) @expansion{} 0,1,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,333) @expansion{} 0,1,1,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,334) @expansion{} 0,0,0,1,0,
../singular_texi/./d2t_singular/random_lib.tex(,335) @expansion{} 0,0,0,0,1,
../singular_texi/./d2t_singular/random_lib.tex(,336) @expansion{} 0,0,0,1,0,
../singular_texi/./d2t_singular/random_lib.tex(,337) @expansion{} 0,1,0,0,0 
../singular_texi/./d2t_singular/random_lib.tex(,338) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,339) sparsetriag(5,5,0);"";
../singular_texi/./d2t_singular/random_lib.tex(,340) @expansion{} 1,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,341) @expansion{} 1,1,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,342) @expansion{} 1,1,1,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,343) @expansion{} 1,1,1,1,0,
../singular_texi/./d2t_singular/random_lib.tex(,344) @expansion{} 1,1,1,1,1 
../singular_texi/./d2t_singular/random_lib.tex(,345) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,346) sparsetriag(5,5,50,100);
../singular_texi/./d2t_singular/random_lib.tex(,347) @expansion{} 1,0,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,348) @expansion{} 73,1,0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,349) @expansion{} 0,79,1,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,350) @expansion{} 14,0,0,1,0,
../singular_texi/./d2t_singular/random_lib.tex(,351) @expansion{} 0,48,23,0,1 
../singular_texi/./d2t_singular/random_lib.tex(,352) @c end example sparsetriag d2t_singular/random_lib.doc:262
../singular_texi/./d2t_singular/random_lib.tex(,353) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,354) @c ---end content sparsetriag---
../singular_texi/./d2t_singular/random_lib.tex(,355) 
../singular_texi/./d2t_singular/random_lib.tex(,356) @c ------------------- triagmatrix -------------
../singular_texi/./d2t_singular/random_lib.tex(,357) @node triagmatrix, randomLast, sparsetriag, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,358) @subsubsection triagmatrix
../singular_texi/./d2t_singular/random_lib.tex(,359) @cindex triagmatrix
../singular_texi/./d2t_singular/random_lib.tex(,360) @c ---content triagmatrix---
../singular_texi/./d2t_singular/random_lib.tex(,361) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,362) 
../singular_texi/./d2t_singular/random_lib.tex(,363) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,364) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,365) triagmatrix(n,m,o[,u,pe,pp,b]); n,m,o,u,pe,pp,b integers
../singular_texi/./d2t_singular/random_lib.tex(,366) 
../singular_texi/./d2t_singular/random_lib.tex(,367) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,368) nxm lower triagonal matrix, diagonal entries equal to 1, about
../singular_texi/./d2t_singular/random_lib.tex(,369) p percent of lower diagonal entries are 0, the remaining
../singular_texi/./d2t_singular/random_lib.tex(,370) are random polynomials of degree d, u<=d<=o, with pp percent of
../singular_texi/./d2t_singular/random_lib.tex(,371) the terms being 0, the remaining have random coefficients
../singular_texi/./d2t_singular/random_lib.tex(,372) in the interval [1,b] [default: (pe,u,pp,b) = (0,50,75,100)]
../singular_texi/./d2t_singular/random_lib.tex(,373) 
../singular_texi/./d2t_singular/random_lib.tex(,374) @end table
../singular_texi/./d2t_singular/random_lib.tex(,375) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,376) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,377) @c computed example triagmatrix d2t_singular/random_lib.doc:293 
../singular_texi/./d2t_singular/random_lib.tex(,378) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,379) ring r = 0,(a,b,c,d),dp;
../singular_texi/./d2t_singular/random_lib.tex(,380) // sparse triagonal matrix of sparse polys of degree <=2:
../singular_texi/./d2t_singular/random_lib.tex(,381) print(triagmatrix(3,4,2));"";
../singular_texi/./d2t_singular/random_lib.tex(,382) @expansion{} 1,                                 0,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,383) @expansion{} 52ac+54cd+14c,                     1,0,0,
../singular_texi/./d2t_singular/random_lib.tex(,384) @expansion{} 17a2+19b2+45ac+94bc+50b+87c+54d+21,0,1,0 
../singular_texi/./d2t_singular/random_lib.tex(,385) @expansion{} 
../singular_texi/./d2t_singular/random_lib.tex(,386) // dense triagonal matrix of sparse linear forms:
../singular_texi/./d2t_singular/random_lib.tex(,387) print(triagmatrix(3,3,1,1,0,55,9));
../singular_texi/./d2t_singular/random_lib.tex(,388) @expansion{} 1,       0,    0,
../singular_texi/./d2t_singular/random_lib.tex(,389) @expansion{} 7a+8d,   1,    0,
../singular_texi/./d2t_singular/random_lib.tex(,390) @expansion{} 9b+7c+4d,7b+9d,1 
../singular_texi/./d2t_singular/random_lib.tex(,391) @c end example triagmatrix d2t_singular/random_lib.doc:293
../singular_texi/./d2t_singular/random_lib.tex(,392) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,393) @c ---end content triagmatrix---
../singular_texi/./d2t_singular/random_lib.tex(,394) 
../singular_texi/./d2t_singular/random_lib.tex(,395) @c ------------------- randomLast -------------
../singular_texi/./d2t_singular/random_lib.tex(,396) @node randomLast, randomBinomial, triagmatrix, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,397) @subsubsection randomLast
../singular_texi/./d2t_singular/random_lib.tex(,398) @cindex randomLast
../singular_texi/./d2t_singular/random_lib.tex(,399) @c ---content randomLast---
../singular_texi/./d2t_singular/random_lib.tex(,400) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,401) 
../singular_texi/./d2t_singular/random_lib.tex(,402) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,403) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,404) randomLast(b); b int
../singular_texi/./d2t_singular/random_lib.tex(,405) 
../singular_texi/./d2t_singular/random_lib.tex(,406) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,407) ideal = maxideal(1), but the last variable is exchanged by a random
../singular_texi/./d2t_singular/random_lib.tex(,408) linear combination of all variables, with coefficients in the
../singular_texi/./d2t_singular/random_lib.tex(,409) interval [-b,b].
../singular_texi/./d2t_singular/random_lib.tex(,410) 
../singular_texi/./d2t_singular/random_lib.tex(,411) @end table
../singular_texi/./d2t_singular/random_lib.tex(,412) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,413) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,414) @c computed example randomLast d2t_singular/random_lib.doc:323 
../singular_texi/./d2t_singular/random_lib.tex(,415) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,416) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/random_lib.tex(,417) ideal i = randomLast(10);
../singular_texi/./d2t_singular/random_lib.tex(,418) i;
../singular_texi/./d2t_singular/random_lib.tex(,419) @expansion{} i[1]=x
../singular_texi/./d2t_singular/random_lib.tex(,420) @expansion{} i[2]=y
../singular_texi/./d2t_singular/random_lib.tex(,421) @expansion{} i[3]=-x+z
../singular_texi/./d2t_singular/random_lib.tex(,422) @c end example randomLast d2t_singular/random_lib.doc:323
../singular_texi/./d2t_singular/random_lib.tex(,423) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,424) @c ---end content randomLast---
../singular_texi/./d2t_singular/random_lib.tex(,425) 
../singular_texi/./d2t_singular/random_lib.tex(,426) @c ------------------- randomBinomial -------------
../singular_texi/./d2t_singular/random_lib.tex(,427) @node randomBinomial,, randomLast, random_lib
../singular_texi/./d2t_singular/random_lib.tex(,428) @subsubsection randomBinomial
../singular_texi/./d2t_singular/random_lib.tex(,429) @cindex randomBinomial
../singular_texi/./d2t_singular/random_lib.tex(,430) @c ---content randomBinomial---
../singular_texi/./d2t_singular/random_lib.tex(,431) Procedure from library @code{random.lib} (@pxref{random_lib}).
../singular_texi/./d2t_singular/random_lib.tex(,432) 
../singular_texi/./d2t_singular/random_lib.tex(,433) @table @asis
../singular_texi/./d2t_singular/random_lib.tex(,434) @item @strong{Usage:}
../singular_texi/./d2t_singular/random_lib.tex(,435) randomBinomial(k,u[,o,b]); k,u,o,b integers
../singular_texi/./d2t_singular/random_lib.tex(,436) 
../singular_texi/./d2t_singular/random_lib.tex(,437) @item @strong{Return:}
../singular_texi/./d2t_singular/random_lib.tex(,438) binomial ideal, k homogeneous generators of degree d, u<=d<=o, with
../singular_texi/./d2t_singular/random_lib.tex(,439) randomly chosen monomials and coefficients in the interval [-b,b]
../singular_texi/./d2t_singular/random_lib.tex(,440) (default: u=o, b=10).
../singular_texi/./d2t_singular/random_lib.tex(,441) 
../singular_texi/./d2t_singular/random_lib.tex(,442) @end table
../singular_texi/./d2t_singular/random_lib.tex(,443) @strong{Example:}
../singular_texi/./d2t_singular/random_lib.tex(,444) @smallexample
../singular_texi/./d2t_singular/random_lib.tex(,445) @c computed example randomBinomial d2t_singular/random_lib.doc:351 
../singular_texi/./d2t_singular/random_lib.tex(,446) LIB "random.lib";
../singular_texi/./d2t_singular/random_lib.tex(,447) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/random_lib.tex(,448) ideal i = randomBinomial(4,5,6);
../singular_texi/./d2t_singular/random_lib.tex(,449) i;
../singular_texi/./d2t_singular/random_lib.tex(,450) @expansion{} i[1]=-x4z-xz4
../singular_texi/./d2t_singular/random_lib.tex(,451) @expansion{} i[2]=8x2y3+8xy3z
../singular_texi/./d2t_singular/random_lib.tex(,452) @expansion{} i[3]=-4x2y2z2-4xy5
../singular_texi/./d2t_singular/random_lib.tex(,453) @expansion{} i[4]=5x3yz2+5xz5
../singular_texi/./d2t_singular/random_lib.tex(,454) @c end example randomBinomial d2t_singular/random_lib.doc:351
../singular_texi/./d2t_singular/random_lib.tex(,455) @end smallexample
../singular_texi/./d2t_singular/random_lib.tex(,456) @c ---end content randomBinomial---
../singular_texi/singular.tex(,327) @c ----------------------------------------------------------
../singular_texi/singular.tex(,328) @node ring_lib, , random_lib, General purpose
../singular_texi/singular.tex(,329) @subsection ring_lib
../singular_texi/singular.tex(,330) @c include of docu for ring.lib
../singular_texi/./d2t_singular/ring_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/ring_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/ring_lib.doc
../singular_texi/./d2t_singular/ring_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/ring_lib.doc INSTEAD
../singular_texi/./d2t_singular/ring_lib.tex(,4) @c library version: (1.17.2.1,2002/02/20)
../singular_texi/./d2t_singular/ring_lib.tex(,5) @c library file: ../Singular/LIB/ring.lib
../singular_texi/./d2t_singular/ring_lib.tex(,6) @cindex ring.lib
../singular_texi/./d2t_singular/ring_lib.tex(,7) @cindex ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/ring_lib.tex(,10) ring.lib
../singular_texi/./d2t_singular/ring_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/ring_lib.tex(,12)       Manipulating Rings and Maps
../singular_texi/./d2t_singular/ring_lib.tex(,13) 
../singular_texi/./d2t_singular/ring_lib.tex(,14) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,15) 
../singular_texi/./d2t_singular/ring_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/ring_lib.tex(,17) @menu
../singular_texi/./d2t_singular/ring_lib.tex(,18) * changechar:: make a copy R of basering [ring r] with new char c
../singular_texi/./d2t_singular/ring_lib.tex(,19) * changeord:: make a copy R of basering [ring r] with new ord o
../singular_texi/./d2t_singular/ring_lib.tex(,20) * changevar:: make a copy R of basering [ring r] with new vars v
../singular_texi/./d2t_singular/ring_lib.tex(,21) * defring:: define a ring R in specified char c, n vars v, ord o
../singular_texi/./d2t_singular/ring_lib.tex(,22) * defrings:: define ring Sn in n vars, char 32003 [p], ord ds
../singular_texi/./d2t_singular/ring_lib.tex(,23) * defringp:: define ring Pn in n vars, char 32003 [p], ord dp
../singular_texi/./d2t_singular/ring_lib.tex(,24) * extendring:: extend given ring by n vars v, ord o and name it R
../singular_texi/./d2t_singular/ring_lib.tex(,25) * fetchall:: fetch all objects of ring R to basering
../singular_texi/./d2t_singular/ring_lib.tex(,26) * imapall:: imap all objects of ring R to basering
../singular_texi/./d2t_singular/ring_lib.tex(,27) * mapall:: map all objects of ring R via ideal i to basering
../singular_texi/./d2t_singular/ring_lib.tex(,28) * ord_test:: test whether ordering of R is global, local or mixed
../singular_texi/./d2t_singular/ring_lib.tex(,29) * ringtensor:: create ring R, tensor product of rings s,t,...
../singular_texi/./d2t_singular/ring_lib.tex(,30) * ringweights:: intvec of weights of ring variables of ring r
../singular_texi/./d2t_singular/ring_lib.tex(,31) @end menu
../singular_texi/./d2t_singular/ring_lib.tex(,32) @c ---end content LibInfo---
../singular_texi/./d2t_singular/ring_lib.tex(,33) 
../singular_texi/./d2t_singular/ring_lib.tex(,34) @c ------------------- changechar -------------
../singular_texi/./d2t_singular/ring_lib.tex(,35) @node changechar, changeord,, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,36) @subsubsection changechar
../singular_texi/./d2t_singular/ring_lib.tex(,37) @cindex changechar
../singular_texi/./d2t_singular/ring_lib.tex(,38) @c ---content changechar---
../singular_texi/./d2t_singular/ring_lib.tex(,39) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,40) 
../singular_texi/./d2t_singular/ring_lib.tex(,41) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,42) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,43) changechar(newr,c[,r]); newr,c=strings, r=ring
../singular_texi/./d2t_singular/ring_lib.tex(,44) 
../singular_texi/./d2t_singular/ring_lib.tex(,45) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,46) create a new ring with name `newr` and make it the basering if r is
../singular_texi/./d2t_singular/ring_lib.tex(,47) an existing ring [default: r=basering].
../singular_texi/./d2t_singular/ring_lib.tex(,48) @*The new ring differs from the old ring only in the characteristic.
../singular_texi/./d2t_singular/ring_lib.tex(,49) If, say, (newr,c) = ("R","0,A") and the ring r exists, the new
../singular_texi/./d2t_singular/ring_lib.tex(,50) basering will have name R, characteristic 0 and one parameter A.
../singular_texi/./d2t_singular/ring_lib.tex(,51) 
../singular_texi/./d2t_singular/ring_lib.tex(,52) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,53) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,54) 
../singular_texi/./d2t_singular/ring_lib.tex(,55) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,56) Works for qrings if map from old_char to new_char is implemented
../singular_texi/./d2t_singular/ring_lib.tex(,57) This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,58) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,59) start with @@.
../singular_texi/./d2t_singular/ring_lib.tex(,60) 
../singular_texi/./d2t_singular/ring_lib.tex(,61) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,62) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,63) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,64) @c computed example changechar d2t_singular/ring_lib.doc:62 
../singular_texi/./d2t_singular/ring_lib.tex(,65) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,66) ring r=0,(x,y,u,v),(dp(2),ds);
../singular_texi/./d2t_singular/ring_lib.tex(,67) changechar("R","2,A"); R;"";
../singular_texi/./d2t_singular/ring_lib.tex(,68) @expansion{} // basering is now R
../singular_texi/./d2t_singular/ring_lib.tex(,69) @expansion{} //   characteristic : 2
../singular_texi/./d2t_singular/ring_lib.tex(,70) @expansion{} //   1 parameter    : A 
../singular_texi/./d2t_singular/ring_lib.tex(,71) @expansion{} //   minpoly        : 0
../singular_texi/./d2t_singular/ring_lib.tex(,72) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,73) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,74) @expansion{} //                  : names    x y 
../singular_texi/./d2t_singular/ring_lib.tex(,75) @expansion{} //        block   2 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,76) @expansion{} //                  : names    u v 
../singular_texi/./d2t_singular/ring_lib.tex(,77) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,78) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,79) changechar("R1","32003",R); R1;
../singular_texi/./d2t_singular/ring_lib.tex(,80) @expansion{} // basering is now R1
../singular_texi/./d2t_singular/ring_lib.tex(,81) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/ring_lib.tex(,82) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,83) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,84) @expansion{} //                  : names    x y 
../singular_texi/./d2t_singular/ring_lib.tex(,85) @expansion{} //        block   2 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,86) @expansion{} //                  : names    u v 
../singular_texi/./d2t_singular/ring_lib.tex(,87) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,88) kill R,R1;
../singular_texi/./d2t_singular/ring_lib.tex(,89) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,90) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,91) kill Top::R,Top::R1;
../singular_texi/./d2t_singular/ring_lib.tex(,92) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,93) kill Ring::R,Ring::R1;
../singular_texi/./d2t_singular/ring_lib.tex(,94) @}
../singular_texi/./d2t_singular/ring_lib.tex(,95) @}
../singular_texi/./d2t_singular/ring_lib.tex(,96) @c end example changechar d2t_singular/ring_lib.doc:62
../singular_texi/./d2t_singular/ring_lib.tex(,97) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,98) @c ---end content changechar---
../singular_texi/./d2t_singular/ring_lib.tex(,99) 
../singular_texi/./d2t_singular/ring_lib.tex(,100) @c ------------------- changeord -------------
../singular_texi/./d2t_singular/ring_lib.tex(,101) @node changeord, changevar, changechar, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,102) @subsubsection changeord
../singular_texi/./d2t_singular/ring_lib.tex(,103) @cindex changeord
../singular_texi/./d2t_singular/ring_lib.tex(,104) @c ---content changeord---
../singular_texi/./d2t_singular/ring_lib.tex(,105) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,106) 
../singular_texi/./d2t_singular/ring_lib.tex(,107) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,108) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,109) changeord(newr,o[,r]); newr,o=strings, r=ring/qring
../singular_texi/./d2t_singular/ring_lib.tex(,110) 
../singular_texi/./d2t_singular/ring_lib.tex(,111) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,112) create a new ring with name `newr` and make it the basering if r is
../singular_texi/./d2t_singular/ring_lib.tex(,113) an existing ring/qring [default: r=basering].
../singular_texi/./d2t_singular/ring_lib.tex(,114) @*The new ring differs from the old ring only in the ordering. If, say,
../singular_texi/./d2t_singular/ring_lib.tex(,115) (newr,o) = ("R","wp(2,3),dp") and the ring r exists and has >=3
../singular_texi/./d2t_singular/ring_lib.tex(,116) variables, the new basering will have name R and ordering wp(2,3),dp.
../singular_texi/./d2t_singular/ring_lib.tex(,117) 
../singular_texi/./d2t_singular/ring_lib.tex(,118) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,119) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,120) 
../singular_texi/./d2t_singular/ring_lib.tex(,121) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,122) This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,123) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,124) start with @@.
../singular_texi/./d2t_singular/ring_lib.tex(,125) 
../singular_texi/./d2t_singular/ring_lib.tex(,126) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,127) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,128) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,129) @c computed example changeord d2t_singular/ring_lib.doc:108 
../singular_texi/./d2t_singular/ring_lib.tex(,130) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,131) ring r=0,(x,y,u,v),(dp(2),ds);
../singular_texi/./d2t_singular/ring_lib.tex(,132) changeord("R","wp(2,3),dp"); R; "";
../singular_texi/./d2t_singular/ring_lib.tex(,133) @expansion{} // basering is now R
../singular_texi/./d2t_singular/ring_lib.tex(,134) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,135) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,136) @expansion{} //        block   1 : ordering wp
../singular_texi/./d2t_singular/ring_lib.tex(,137) @expansion{} //                  : names    x y 
../singular_texi/./d2t_singular/ring_lib.tex(,138) @expansion{} //                  : weights  2 3 
../singular_texi/./d2t_singular/ring_lib.tex(,139) @expansion{} //        block   2 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,140) @expansion{} //                  : names    u v 
../singular_texi/./d2t_singular/ring_lib.tex(,141) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,142) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,143) ideal i = x^2,y^2-u^3,v;
../singular_texi/./d2t_singular/ring_lib.tex(,144) qring Q = std(i);
../singular_texi/./d2t_singular/ring_lib.tex(,145) changeord("Q'","lp",Q); Q';
../singular_texi/./d2t_singular/ring_lib.tex(,146) @expansion{} // basering is now Q'
../singular_texi/./d2t_singular/ring_lib.tex(,147) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,148) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,149) @expansion{} //        block   1 : ordering lp
../singular_texi/./d2t_singular/ring_lib.tex(,150) @expansion{} //                  : names    x y u v 
../singular_texi/./d2t_singular/ring_lib.tex(,151) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,152) @expansion{} // quotient ring from ideal
../singular_texi/./d2t_singular/ring_lib.tex(,153) @expansion{} _[1]=v
../singular_texi/./d2t_singular/ring_lib.tex(,154) @expansion{} _[2]=x2
../singular_texi/./d2t_singular/ring_lib.tex(,155) @expansion{} _[3]=y2-u3
../singular_texi/./d2t_singular/ring_lib.tex(,156) kill R,Q,Q';
../singular_texi/./d2t_singular/ring_lib.tex(,157) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,158) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,159) kill Top::R,Top::Q';
../singular_texi/./d2t_singular/ring_lib.tex(,160) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,161) kill Ring::R,Ring::Q';
../singular_texi/./d2t_singular/ring_lib.tex(,162) @}
../singular_texi/./d2t_singular/ring_lib.tex(,163) @}
../singular_texi/./d2t_singular/ring_lib.tex(,164) @c end example changeord d2t_singular/ring_lib.doc:108
../singular_texi/./d2t_singular/ring_lib.tex(,165) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,166) @c ---end content changeord---
../singular_texi/./d2t_singular/ring_lib.tex(,167) 
../singular_texi/./d2t_singular/ring_lib.tex(,168) @c ------------------- changevar -------------
../singular_texi/./d2t_singular/ring_lib.tex(,169) @node changevar, defring, changeord, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,170) @subsubsection changevar
../singular_texi/./d2t_singular/ring_lib.tex(,171) @cindex changevar
../singular_texi/./d2t_singular/ring_lib.tex(,172) @c ---content changevar---
../singular_texi/./d2t_singular/ring_lib.tex(,173) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,174) 
../singular_texi/./d2t_singular/ring_lib.tex(,175) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,176) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,177) changevar(newr,vars[,r]); newr,vars=strings, r=ring/qring
../singular_texi/./d2t_singular/ring_lib.tex(,178) 
../singular_texi/./d2t_singular/ring_lib.tex(,179) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,180) creates a new ring with name `newr` and makes it the basering if r
../singular_texi/./d2t_singular/ring_lib.tex(,181) is an existing ring/qring [default: r=basering].
../singular_texi/./d2t_singular/ring_lib.tex(,182) @*The new ring differs from the old ring only in the variables. If,
../singular_texi/./d2t_singular/ring_lib.tex(,183) say, (newr,vars) = ("R","t()") and the ring r exists and has n
../singular_texi/./d2t_singular/ring_lib.tex(,184) variables, the new basering will have name R and variables
../singular_texi/./d2t_singular/ring_lib.tex(,185) t(1),...,t(n).
../singular_texi/./d2t_singular/ring_lib.tex(,186) @*If vars = "a,b,c,d", the new ring will have the variables a,b,c,d.
../singular_texi/./d2t_singular/ring_lib.tex(,187) 
../singular_texi/./d2t_singular/ring_lib.tex(,188) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,189) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,190) 
../singular_texi/./d2t_singular/ring_lib.tex(,191) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,192) This procedure is useful in connection with the procedure ringtensor,
../singular_texi/./d2t_singular/ring_lib.tex(,193) when a conflict between variable names must be avoided.
../singular_texi/./d2t_singular/ring_lib.tex(,194) This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,195) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,196) start with @@.
../singular_texi/./d2t_singular/ring_lib.tex(,197) 
../singular_texi/./d2t_singular/ring_lib.tex(,198) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,199) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,200) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,201) @c computed example changevar d2t_singular/ring_lib.doc:160 
../singular_texi/./d2t_singular/ring_lib.tex(,202) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,203) ring r=0,(x,y,u,v),(dp(2),ds);
../singular_texi/./d2t_singular/ring_lib.tex(,204) ideal i = x^2,y^2-u^3,v;
../singular_texi/./d2t_singular/ring_lib.tex(,205) qring Q = std(i);
../singular_texi/./d2t_singular/ring_lib.tex(,206) setring(r);
../singular_texi/./d2t_singular/ring_lib.tex(,207) changevar("R","A()"); R; "";
../singular_texi/./d2t_singular/ring_lib.tex(,208) @expansion{} // basering is now R
../singular_texi/./d2t_singular/ring_lib.tex(,209) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,210) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,211) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,212) @expansion{} //                  : names    A(1) A(2) 
../singular_texi/./d2t_singular/ring_lib.tex(,213) @expansion{} //        block   2 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,214) @expansion{} //                  : names    A(3) A(4) 
../singular_texi/./d2t_singular/ring_lib.tex(,215) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,216) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,217) changevar("Q'","a,b,c,d",Q); Q';
../singular_texi/./d2t_singular/ring_lib.tex(,218) @expansion{} // basering is now Q'
../singular_texi/./d2t_singular/ring_lib.tex(,219) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,220) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/ring_lib.tex(,221) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,222) @expansion{} //                  : names    a b 
../singular_texi/./d2t_singular/ring_lib.tex(,223) @expansion{} //        block   2 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,224) @expansion{} //                  : names    c d 
../singular_texi/./d2t_singular/ring_lib.tex(,225) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,226) @expansion{} // quotient ring from ideal
../singular_texi/./d2t_singular/ring_lib.tex(,227) @expansion{} _[1]=d
../singular_texi/./d2t_singular/ring_lib.tex(,228) @expansion{} _[2]=a2
../singular_texi/./d2t_singular/ring_lib.tex(,229) @expansion{} _[3]=b2-c3
../singular_texi/./d2t_singular/ring_lib.tex(,230) kill R,Q,Q';
../singular_texi/./d2t_singular/ring_lib.tex(,231) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,232) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,233) kill Top::R,Top::Q';
../singular_texi/./d2t_singular/ring_lib.tex(,234) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,235) kill Ring::R,Ring::Q';
../singular_texi/./d2t_singular/ring_lib.tex(,236) @}
../singular_texi/./d2t_singular/ring_lib.tex(,237) @}
../singular_texi/./d2t_singular/ring_lib.tex(,238) @c end example changevar d2t_singular/ring_lib.doc:160
../singular_texi/./d2t_singular/ring_lib.tex(,239) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,240) @c ---end content changevar---
../singular_texi/./d2t_singular/ring_lib.tex(,241) 
../singular_texi/./d2t_singular/ring_lib.tex(,242) @c ------------------- defring -------------
../singular_texi/./d2t_singular/ring_lib.tex(,243) @node defring, defrings, changevar, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,244) @subsubsection defring
../singular_texi/./d2t_singular/ring_lib.tex(,245) @cindex defring
../singular_texi/./d2t_singular/ring_lib.tex(,246) @c ---content defring---
../singular_texi/./d2t_singular/ring_lib.tex(,247) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,248) 
../singular_texi/./d2t_singular/ring_lib.tex(,249) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,250) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,251) defring(s1,s2,n,s3,s4); s1..s4=strings, n=integer
../singular_texi/./d2t_singular/ring_lib.tex(,252) 
../singular_texi/./d2t_singular/ring_lib.tex(,253) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,254) Define a ring with name 's1', characteristic 's2', ordering 's4' and
../singular_texi/./d2t_singular/ring_lib.tex(,255) n variables with names derived from s3 and make it the basering.
../singular_texi/./d2t_singular/ring_lib.tex(,256) If s3 is a single letter, say s3="a", and if n<=26 then a and the
../singular_texi/./d2t_singular/ring_lib.tex(,257) following n-1 letters from the alphabet (cyclic order) are taken as
../singular_texi/./d2t_singular/ring_lib.tex(,258) variables. If n>26 or if s3 is a single letter followed by (, say
../singular_texi/./d2t_singular/ring_lib.tex(,259) s3="T(", the variables are T(1),...,T(n).
../singular_texi/./d2t_singular/ring_lib.tex(,260) 
../singular_texi/./d2t_singular/ring_lib.tex(,261) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,262) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,263) 
../singular_texi/./d2t_singular/ring_lib.tex(,264) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,265) This proc is useful for defining a ring in a procedure.
../singular_texi/./d2t_singular/ring_lib.tex(,266) This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,267) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,268) start with @@.
../singular_texi/./d2t_singular/ring_lib.tex(,269) 
../singular_texi/./d2t_singular/ring_lib.tex(,270) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,271) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,272) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,273) @c computed example defring d2t_singular/ring_lib.doc:211 
../singular_texi/./d2t_singular/ring_lib.tex(,274) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,275) defring("r","0",5,"u","ls"); r; "";
../singular_texi/./d2t_singular/ring_lib.tex(,276) @expansion{} // basering is now: r
../singular_texi/./d2t_singular/ring_lib.tex(,277) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,278) @expansion{} //   number of vars : 5
../singular_texi/./d2t_singular/ring_lib.tex(,279) @expansion{} //        block   1 : ordering ls
../singular_texi/./d2t_singular/ring_lib.tex(,280) @expansion{} //                  : names    u v w x y 
../singular_texi/./d2t_singular/ring_lib.tex(,281) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,282) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,283) defring("R","2,A",10,"x(","dp(3),ws(1,2,3),ds"); R;
../singular_texi/./d2t_singular/ring_lib.tex(,284) @expansion{} // basering is now: R
../singular_texi/./d2t_singular/ring_lib.tex(,285) @expansion{} //   characteristic : 2
../singular_texi/./d2t_singular/ring_lib.tex(,286) @expansion{} //   1 parameter    : A 
../singular_texi/./d2t_singular/ring_lib.tex(,287) @expansion{} //   minpoly        : 0
../singular_texi/./d2t_singular/ring_lib.tex(,288) @expansion{} //   number of vars : 10
../singular_texi/./d2t_singular/ring_lib.tex(,289) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,290) @expansion{} //                  : names    x(1) x(2) x(3) 
../singular_texi/./d2t_singular/ring_lib.tex(,291) @expansion{} //        block   2 : ordering ws
../singular_texi/./d2t_singular/ring_lib.tex(,292) @expansion{} //                  : names    x(4) x(5) x(6) 
../singular_texi/./d2t_singular/ring_lib.tex(,293) @expansion{} //                  : weights     1    2    3 
../singular_texi/./d2t_singular/ring_lib.tex(,294) @expansion{} //        block   3 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,295) @expansion{} //                  : names    x(7) x(8) x(9) x(10) 
../singular_texi/./d2t_singular/ring_lib.tex(,296) @expansion{} //        block   4 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,297) kill r,R;
../singular_texi/./d2t_singular/ring_lib.tex(,298) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,299) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,300) kill Top::r,Top::R;
../singular_texi/./d2t_singular/ring_lib.tex(,301) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,302) kill Ring::r,Ring::R;
../singular_texi/./d2t_singular/ring_lib.tex(,303) @}
../singular_texi/./d2t_singular/ring_lib.tex(,304) @}
../singular_texi/./d2t_singular/ring_lib.tex(,305) @c end example defring d2t_singular/ring_lib.doc:211
../singular_texi/./d2t_singular/ring_lib.tex(,306) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,307) @c ---end content defring---
../singular_texi/./d2t_singular/ring_lib.tex(,308) 
../singular_texi/./d2t_singular/ring_lib.tex(,309) @c ------------------- defrings -------------
../singular_texi/./d2t_singular/ring_lib.tex(,310) @node defrings, defringp, defring, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,311) @subsubsection defrings
../singular_texi/./d2t_singular/ring_lib.tex(,312) @cindex defrings
../singular_texi/./d2t_singular/ring_lib.tex(,313) @c ---content defrings---
../singular_texi/./d2t_singular/ring_lib.tex(,314) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,315) 
../singular_texi/./d2t_singular/ring_lib.tex(,316) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,317) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,318) defrings(n,[p]); n,p integers
../singular_texi/./d2t_singular/ring_lib.tex(,319) 
../singular_texi/./d2t_singular/ring_lib.tex(,320) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,321) Defines a ring with name Sn, characteristic p, ordering ds and n
../singular_texi/./d2t_singular/ring_lib.tex(,322) variables x,y,z,a,b,...if n<=26 (resp. x(1..n) if n>26) and makes it
../singular_texi/./d2t_singular/ring_lib.tex(,323) the basering (default: p=32003)
../singular_texi/./d2t_singular/ring_lib.tex(,324) 
../singular_texi/./d2t_singular/ring_lib.tex(,325) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,326) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,327) 
../singular_texi/./d2t_singular/ring_lib.tex(,328) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,329) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,330) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,331) @c computed example defrings d2t_singular/ring_lib.doc:249 
../singular_texi/./d2t_singular/ring_lib.tex(,332) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,333) defrings(5,0); S5; "";
../singular_texi/./d2t_singular/ring_lib.tex(,334) @expansion{} // basering is now: ring S5=0,(x,y,z,a,b),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,335) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,336) @expansion{} //   number of vars : 5
../singular_texi/./d2t_singular/ring_lib.tex(,337) @expansion{} //        block   1 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,338) @expansion{} //                  : names    x y z a b 
../singular_texi/./d2t_singular/ring_lib.tex(,339) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,340) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,341) defrings(30); S30;
../singular_texi/./d2t_singular/ring_lib.tex(,342) @expansion{} // basering is now: ring S30=32003,x(1..30),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,343) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/ring_lib.tex(,344) @expansion{} //   number of vars : 30
../singular_texi/./d2t_singular/ring_lib.tex(,345) @expansion{} //        block   1 : ordering ds
../singular_texi/./d2t_singular/ring_lib.tex(,346) @expansion{} //                  : names    x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(\
../singular_texi/./d2t_singular/ring_lib.tex(,347)    9) x(10) x(11) x(12) x(13) x(14) x(15) x(16) x(17) x(18) x(19) x(20) x(21\
../singular_texi/./d2t_singular/ring_lib.tex(,348)    ) x(22) x(23) x(24) x(25) x(26) x(27) x(28) x(29) x(30) 
../singular_texi/./d2t_singular/ring_lib.tex(,349) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,350) kill S5, S30;
../singular_texi/./d2t_singular/ring_lib.tex(,351) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,352) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,353) kill Top::S5,Top::S30;
../singular_texi/./d2t_singular/ring_lib.tex(,354) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,355) kill Ring::S5,Ring::S30;
../singular_texi/./d2t_singular/ring_lib.tex(,356) @}
../singular_texi/./d2t_singular/ring_lib.tex(,357) @}
../singular_texi/./d2t_singular/ring_lib.tex(,358) @c end example defrings d2t_singular/ring_lib.doc:249
../singular_texi/./d2t_singular/ring_lib.tex(,359) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,360) @c ---end content defrings---
../singular_texi/./d2t_singular/ring_lib.tex(,361) 
../singular_texi/./d2t_singular/ring_lib.tex(,362) @c ------------------- defringp -------------
../singular_texi/./d2t_singular/ring_lib.tex(,363) @node defringp, extendring, defrings, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,364) @subsubsection defringp
../singular_texi/./d2t_singular/ring_lib.tex(,365) @cindex defringp
../singular_texi/./d2t_singular/ring_lib.tex(,366) @c ---content defringp---
../singular_texi/./d2t_singular/ring_lib.tex(,367) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,368) 
../singular_texi/./d2t_singular/ring_lib.tex(,369) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,370) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,371) defringp(n,[p]); n,p=integers
../singular_texi/./d2t_singular/ring_lib.tex(,372) 
../singular_texi/./d2t_singular/ring_lib.tex(,373) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,374) defines a ring with name Pn, characteristic p, ordering dp and n
../singular_texi/./d2t_singular/ring_lib.tex(,375) variables x,y,z,a,b,...if n<=26 (resp. x(1..n) if n>26) and makes it
../singular_texi/./d2t_singular/ring_lib.tex(,376) the basering (default: p=32003)
../singular_texi/./d2t_singular/ring_lib.tex(,377) 
../singular_texi/./d2t_singular/ring_lib.tex(,378) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,379) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,380) 
../singular_texi/./d2t_singular/ring_lib.tex(,381) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,382) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,383) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,384) @c computed example defringp d2t_singular/ring_lib.doc:287 
../singular_texi/./d2t_singular/ring_lib.tex(,385) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,386) defringp(5,0); P5; "";
../singular_texi/./d2t_singular/ring_lib.tex(,387) @expansion{} // basering is now: ring P5=0,(x,y,z,a,b),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,388) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,389) @expansion{} //   number of vars : 5
../singular_texi/./d2t_singular/ring_lib.tex(,390) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,391) @expansion{} //                  : names    x y z a b 
../singular_texi/./d2t_singular/ring_lib.tex(,392) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,393) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,394) defringp(30); P30;
../singular_texi/./d2t_singular/ring_lib.tex(,395) @expansion{} // basering is now: ring P30=32003,x(1..30),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,396) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/ring_lib.tex(,397) @expansion{} //   number of vars : 30
../singular_texi/./d2t_singular/ring_lib.tex(,398) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,399) @expansion{} //                  : names    x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(\
../singular_texi/./d2t_singular/ring_lib.tex(,400)    9) x(10) x(11) x(12) x(13) x(14) x(15) x(16) x(17) x(18) x(19) x(20) x(21\
../singular_texi/./d2t_singular/ring_lib.tex(,401)    ) x(22) x(23) x(24) x(25) x(26) x(27) x(28) x(29) x(30) 
../singular_texi/./d2t_singular/ring_lib.tex(,402) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,403) kill P5, P30;
../singular_texi/./d2t_singular/ring_lib.tex(,404) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,405) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,406) kill Top::P5,Top::P30;
../singular_texi/./d2t_singular/ring_lib.tex(,407) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,408) kill Ring::P5,Ring::P30;
../singular_texi/./d2t_singular/ring_lib.tex(,409) @}
../singular_texi/./d2t_singular/ring_lib.tex(,410) @}
../singular_texi/./d2t_singular/ring_lib.tex(,411) @c end example defringp d2t_singular/ring_lib.doc:287
../singular_texi/./d2t_singular/ring_lib.tex(,412) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,413) @c ---end content defringp---
../singular_texi/./d2t_singular/ring_lib.tex(,414) 
../singular_texi/./d2t_singular/ring_lib.tex(,415) @c ------------------- extendring -------------
../singular_texi/./d2t_singular/ring_lib.tex(,416) @node extendring, fetchall, defringp, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,417) @subsubsection extendring
../singular_texi/./d2t_singular/ring_lib.tex(,418) @cindex extendring
../singular_texi/./d2t_singular/ring_lib.tex(,419) @c ---content extendring---
../singular_texi/./d2t_singular/ring_lib.tex(,420) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,421) 
../singular_texi/./d2t_singular/ring_lib.tex(,422) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,423) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,424) extendring(na,n,va,o[iv,i,r]); na,va,o=strings,
../singular_texi/./d2t_singular/ring_lib.tex(,425) @*n,i=integers, r=ring, iv=intvec of positive integers or iv=0
../singular_texi/./d2t_singular/ring_lib.tex(,426) 
../singular_texi/./d2t_singular/ring_lib.tex(,427) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,428) Define a ring with name `na` which extends the ring r by adding n new
../singular_texi/./d2t_singular/ring_lib.tex(,429) variables in front of [after, if i!=0] the old variables and make it
../singular_texi/./d2t_singular/ring_lib.tex(,430) the basering [default: (i,r)=(0,basering)].
../singular_texi/./d2t_singular/ring_lib.tex(,431) @* -- The characteristic is the characteristic of r.
../singular_texi/./d2t_singular/ring_lib.tex(,432) @* -- The new vars are derived from va. If va is a single letter, say
../singular_texi/./d2t_singular/ring_lib.tex(,433) va="T", and if n<=26 then T and the following n-1 letters from
../singular_texi/./d2t_singular/ring_lib.tex(,434) T..Z..T (resp. T(1..n) if n>26) are taken as additional variables.
../singular_texi/./d2t_singular/ring_lib.tex(,435) If va is a single letter followed by (, say va="x(", the new
../singular_texi/./d2t_singular/ring_lib.tex(,436) variables are x(1),...,x(n).
../singular_texi/./d2t_singular/ring_lib.tex(,437) @* -- The ordering is the product ordering between the ordering of r and
../singular_texi/./d2t_singular/ring_lib.tex(,438) an ordering derived from `o` [and iv].
../singular_texi/./d2t_singular/ring_lib.tex(,439) @* - If o contains a 'c' or a 'C' in front resp. at the end this is
../singular_texi/./d2t_singular/ring_lib.tex(,440) taken for the whole ordering in front resp. at the end. If o does
../singular_texi/./d2t_singular/ring_lib.tex(,441) not contain a 'c' or a 'C' the same rule applies to ordstr(r).
../singular_texi/./d2t_singular/ring_lib.tex(,442) @* - If no intvec iv is given, or if iv=0, o may be any allowed ordstr,
../singular_texi/./d2t_singular/ring_lib.tex(,443) like "ds" or "dp(2),wp(1,2,3),Ds(2)" or "ds(a),dp(b),ls" if
../singular_texi/./d2t_singular/ring_lib.tex(,444) a and b are globally (!) defined integers and if a+b+1<=n.
../singular_texi/./d2t_singular/ring_lib.tex(,445) If, however, a and b are local to a proc calling extendring, the
../singular_texi/./d2t_singular/ring_lib.tex(,446) intvec iv must be used to let extendring know the values of a and b
../singular_texi/./d2t_singular/ring_lib.tex(,447) @* - If an intvec iv !=0 is given, iv[1],iv[2],... is taken for the
../singular_texi/./d2t_singular/ring_lib.tex(,448) 1st, 2nd,... block of o, if o contains no substring "w" or "W"
../singular_texi/./d2t_singular/ring_lib.tex(,449) i.e. no weighted ordering (in the above case o="ds,dp,ls"
../singular_texi/./d2t_singular/ring_lib.tex(,450) and iv=a,b).
../singular_texi/./d2t_singular/ring_lib.tex(,451) @*If o contains a weighted ordering (only one (!) weighted block is
../singular_texi/./d2t_singular/ring_lib.tex(,452) allowed) iv[1] is taken as size for the weight-vector, the next
../singular_texi/./d2t_singular/ring_lib.tex(,453) iv[1] values of iv are taken as weights and the remaining values of
../singular_texi/./d2t_singular/ring_lib.tex(,454) iv as block-size for the remaining non-weighted blocks.
../singular_texi/./d2t_singular/ring_lib.tex(,455) e.g. o="dp,ws,Dp,ds", iv=3,2,3,4,2,5 creates the ordering
../singular_texi/./d2t_singular/ring_lib.tex(,456) dp(2),ws(2,3,4),Dp(5),ds
../singular_texi/./d2t_singular/ring_lib.tex(,457) 
../singular_texi/./d2t_singular/ring_lib.tex(,458) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,459) No return value
../singular_texi/./d2t_singular/ring_lib.tex(,460) 
../singular_texi/./d2t_singular/ring_lib.tex(,461) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,462) This proc is useful for adding deformation parameters.
../singular_texi/./d2t_singular/ring_lib.tex(,463) @*This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,464) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,465) start with @@ (see the file HelpForProc)
../singular_texi/./d2t_singular/ring_lib.tex(,466) 
../singular_texi/./d2t_singular/ring_lib.tex(,467) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,468) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,469) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,470) @c computed example extendring d2t_singular/ring_lib.doc:358 
../singular_texi/./d2t_singular/ring_lib.tex(,471) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,472) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,473) show(r);"";
../singular_texi/./d2t_singular/ring_lib.tex(,474) @expansion{} // ring: (0),(x,y,z),(ds(3),C);
../singular_texi/./d2t_singular/ring_lib.tex(,475) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/ring_lib.tex(,476) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/ring_lib.tex(,477) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,478) //blocksize is derived from no of vars:
../singular_texi/./d2t_singular/ring_lib.tex(,479) int t=5;
../singular_texi/./d2t_singular/ring_lib.tex(,480) extendring("R1",t,"a","dp");         //t global: "dp" -> "dp(5)"
../singular_texi/./d2t_singular/ring_lib.tex(,481) @expansion{} // basering is now R1
../singular_texi/./d2t_singular/ring_lib.tex(,482) show(R1); "";
../singular_texi/./d2t_singular/ring_lib.tex(,483) @expansion{} // ring: (0),(a,b,c,d,e,x,y,z),(dp(5),ds(3),C);
../singular_texi/./d2t_singular/ring_lib.tex(,484) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/ring_lib.tex(,485) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/ring_lib.tex(,486) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,487) extendring("R2",4,"T(","c,dp",1,r);    //"dp" -> "c,..,dp(4)"
../singular_texi/./d2t_singular/ring_lib.tex(,488) @expansion{} // basering is now R2
../singular_texi/./d2t_singular/ring_lib.tex(,489) show(R2);"";
../singular_texi/./d2t_singular/ring_lib.tex(,490) @expansion{} // ring: (0),(x,y,z,T(1),T(2),T(3),T(4)),(c,ds(3),dp(4));
../singular_texi/./d2t_singular/ring_lib.tex(,491) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/ring_lib.tex(,492) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/ring_lib.tex(,493) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,494) //no intvec given, blocksize given: given blocksize is used:
../singular_texi/./d2t_singular/ring_lib.tex(,495) extendring("R3",4,"T(","dp(2)",0,r);   // "dp(2)" -> "dp(2)"
../singular_texi/./d2t_singular/ring_lib.tex(,496) @expansion{} // basering is now R3
../singular_texi/./d2t_singular/ring_lib.tex(,497) show(R3);"";
../singular_texi/./d2t_singular/ring_lib.tex(,498) @expansion{} // ring: (0),(T(1),T(2),T(3),T(4),x,y,z),(dp(2),ds(5),C);
../singular_texi/./d2t_singular/ring_lib.tex(,499) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/ring_lib.tex(,500) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/ring_lib.tex(,501) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,502) //intvec given: weights and blocksize is derived from given intvec
../singular_texi/./d2t_singular/ring_lib.tex(,503) //(no specification of a blocksize in the given ordstr is allowed!)
../singular_texi/./d2t_singular/ring_lib.tex(,504) //if intvec does not cover all given blocks, the last block is used
../singular_texi/./d2t_singular/ring_lib.tex(,505) //for the remaining variables, if intvec has too many components,
../singular_texi/./d2t_singular/ring_lib.tex(,506) //the last ones are ignored
../singular_texi/./d2t_singular/ring_lib.tex(,507) intvec v=3,2,3,4,1,3;
../singular_texi/./d2t_singular/ring_lib.tex(,508) extendring("R4",10,"A","ds,ws,Dp,dp",v,0,r);
../singular_texi/./d2t_singular/ring_lib.tex(,509) @expansion{} // basering is now R4
../singular_texi/./d2t_singular/ring_lib.tex(,510) //v covers 3 blocks: v[1] (=3) : no of components of ws
../singular_texi/./d2t_singular/ring_lib.tex(,511) //next v[1] values (=v[2..4]) give weights
../singular_texi/./d2t_singular/ring_lib.tex(,512) //remaining components of v are used for the remaining blocks
../singular_texi/./d2t_singular/ring_lib.tex(,513) show(R4);
../singular_texi/./d2t_singular/ring_lib.tex(,514) @expansion{} // ring: (0),(A,B,C,D,E,F,G,H,I,J,x,y,z),(ds(1),ws(2,3,4),Dp(3),dp(3),ds(\
../singular_texi/./d2t_singular/ring_lib.tex(,515)    3),C);
../singular_texi/./d2t_singular/ring_lib.tex(,516) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/ring_lib.tex(,517) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/ring_lib.tex(,518) kill r,R1,R2,R3,R4;
../singular_texi/./d2t_singular/ring_lib.tex(,519) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,520) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,521) kill Top::R1,Top::R2,Top::R3,Top::R4;
../singular_texi/./d2t_singular/ring_lib.tex(,522) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,523) kill Ring::R1,Ring::R2,Ring::R3,Ring::R4;
../singular_texi/./d2t_singular/ring_lib.tex(,524) @}
../singular_texi/./d2t_singular/ring_lib.tex(,525) @}
../singular_texi/./d2t_singular/ring_lib.tex(,526) @c end example extendring d2t_singular/ring_lib.doc:358
../singular_texi/./d2t_singular/ring_lib.tex(,527) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,528) @c ---end content extendring---
../singular_texi/./d2t_singular/ring_lib.tex(,529) 
../singular_texi/./d2t_singular/ring_lib.tex(,530) @c ------------------- fetchall -------------
../singular_texi/./d2t_singular/ring_lib.tex(,531) @node fetchall, imapall, extendring, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,532) @subsubsection fetchall
../singular_texi/./d2t_singular/ring_lib.tex(,533) @cindex fetchall
../singular_texi/./d2t_singular/ring_lib.tex(,534) @c ---content fetchall---
../singular_texi/./d2t_singular/ring_lib.tex(,535) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,536) 
../singular_texi/./d2t_singular/ring_lib.tex(,537) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,538) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,539) fetchall(R[,s]); R=ring/qring, s=string
../singular_texi/./d2t_singular/ring_lib.tex(,540) 
../singular_texi/./d2t_singular/ring_lib.tex(,541) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,542) fetch all objects of ring R (of type poly/ideal/vector/module/number/
../singular_texi/./d2t_singular/ring_lib.tex(,543) matrix) into the basering.
../singular_texi/./d2t_singular/ring_lib.tex(,544) @*If no 3rd argument is present, the names are the same as in R. If,
../singular_texi/./d2t_singular/ring_lib.tex(,545) say, f is a poly in R and the 3rd argument is the string "R", then f
../singular_texi/./d2t_singular/ring_lib.tex(,546) is mapped to f_R etc.
../singular_texi/./d2t_singular/ring_lib.tex(,547) 
../singular_texi/./d2t_singular/ring_lib.tex(,548) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,549) no return value
../singular_texi/./d2t_singular/ring_lib.tex(,550) 
../singular_texi/./d2t_singular/ring_lib.tex(,551) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,552) As fetch, this procedure maps the 1st, 2nd, ... variable of R to the
../singular_texi/./d2t_singular/ring_lib.tex(,553) 1st, 2nd, ... variable of the basering.
../singular_texi/./d2t_singular/ring_lib.tex(,554) @*The 3rd argument is useful in order to avoid conflicts of names, the
../singular_texi/./d2t_singular/ring_lib.tex(,555) empty string is allowed
../singular_texi/./d2t_singular/ring_lib.tex(,556) 
../singular_texi/./d2t_singular/ring_lib.tex(,557) @item @strong{Caution:}
../singular_texi/./d2t_singular/ring_lib.tex(,558) fetchall does not work inside a procedure.
../singular_texi/./d2t_singular/ring_lib.tex(,559) @*It does not work if R contains a map.
../singular_texi/./d2t_singular/ring_lib.tex(,560) 
../singular_texi/./d2t_singular/ring_lib.tex(,561) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,562) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,563) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,564) @c computed example fetchall d2t_singular/ring_lib.doc:428 
../singular_texi/./d2t_singular/ring_lib.tex(,565) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,566) // The example is not shown since fetchall does not work in a procedure;
../singular_texi/./d2t_singular/ring_lib.tex(,567) // (and hence not in the example procedure). Try the following commands:
../singular_texi/./d2t_singular/ring_lib.tex(,568) //   ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,569) //   ideal j=x,y2,z2;
../singular_texi/./d2t_singular/ring_lib.tex(,570) //   matrix M[2][3]=1,2,3,x,y,z;
../singular_texi/./d2t_singular/ring_lib.tex(,571) //   j; print(M);
../singular_texi/./d2t_singular/ring_lib.tex(,572) //   ring S=0,(a,b,c),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,573) //   fetchall(R);       //map from R to S: x->a, y->b, z->c;
../singular_texi/./d2t_singular/ring_lib.tex(,574) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,575) //   j; print(M);
../singular_texi/./d2t_singular/ring_lib.tex(,576) //   fetchall(S,"1");   //identity map of S: copy objects, change names
../singular_texi/./d2t_singular/ring_lib.tex(,577) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,578) //   kill R,S;
../singular_texi/./d2t_singular/ring_lib.tex(,579) @c end example fetchall d2t_singular/ring_lib.doc:428
../singular_texi/./d2t_singular/ring_lib.tex(,580) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,581) @c ---end content fetchall---
../singular_texi/./d2t_singular/ring_lib.tex(,582) 
../singular_texi/./d2t_singular/ring_lib.tex(,583) @c ------------------- imapall -------------
../singular_texi/./d2t_singular/ring_lib.tex(,584) @node imapall, mapall, fetchall, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,585) @subsubsection imapall
../singular_texi/./d2t_singular/ring_lib.tex(,586) @cindex imapall
../singular_texi/./d2t_singular/ring_lib.tex(,587) @c ---content imapall---
../singular_texi/./d2t_singular/ring_lib.tex(,588) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,589) 
../singular_texi/./d2t_singular/ring_lib.tex(,590) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,591) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,592) imapall(R[,s]); R=ring/qring, s=string
../singular_texi/./d2t_singular/ring_lib.tex(,593) 
../singular_texi/./d2t_singular/ring_lib.tex(,594) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,595) map all objects of ring R (of type poly/ideal/vector/module/number/
../singular_texi/./d2t_singular/ring_lib.tex(,596) matrix) into the basering, by applying imap to all objects of R.
../singular_texi/./d2t_singular/ring_lib.tex(,597) If no 3rd argument is present, the names are the same as in R. If,
../singular_texi/./d2t_singular/ring_lib.tex(,598) say, f is a poly in R and the 3rd argument is the string "R", then f
../singular_texi/./d2t_singular/ring_lib.tex(,599) is mapped to f_R etc.
../singular_texi/./d2t_singular/ring_lib.tex(,600) 
../singular_texi/./d2t_singular/ring_lib.tex(,601) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,602) no return value
../singular_texi/./d2t_singular/ring_lib.tex(,603) 
../singular_texi/./d2t_singular/ring_lib.tex(,604) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,605) As imap, this procedure maps the variables of R to the variables with
../singular_texi/./d2t_singular/ring_lib.tex(,606) the same name in the basering, the other variables are mapped to 0.
../singular_texi/./d2t_singular/ring_lib.tex(,607) The 3rd argument is useful in order to avoid conflicts of names, the
../singular_texi/./d2t_singular/ring_lib.tex(,608) empty string is allowed
../singular_texi/./d2t_singular/ring_lib.tex(,609) 
../singular_texi/./d2t_singular/ring_lib.tex(,610) @item @strong{Caution:}
../singular_texi/./d2t_singular/ring_lib.tex(,611) imapall does not work inside a procedure
../singular_texi/./d2t_singular/ring_lib.tex(,612) @*It does not work if R contains a map
../singular_texi/./d2t_singular/ring_lib.tex(,613) 
../singular_texi/./d2t_singular/ring_lib.tex(,614) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,615) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,616) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,617) @c computed example imapall d2t_singular/ring_lib.doc:481 
../singular_texi/./d2t_singular/ring_lib.tex(,618) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,619) // The example is not shown since imapall does not work in a procedure
../singular_texi/./d2t_singular/ring_lib.tex(,620) // (and hence not in the example procedure). Try the following commands:
../singular_texi/./d2t_singular/ring_lib.tex(,621) //   ring R=0,(x,y,z,u),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,622) //   ideal j=x,y,z,u2+ux+z;
../singular_texi/./d2t_singular/ring_lib.tex(,623) //   matrix M[2][3]=1,2,3,x,y,uz;
../singular_texi/./d2t_singular/ring_lib.tex(,624) //   j; print(M);
../singular_texi/./d2t_singular/ring_lib.tex(,625) //   ring S=0,(a,b,c,x,z,y),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,626) //   imapall(R);         //map from R to S: x->x, y->y, z->z, u->0
../singular_texi/./d2t_singular/ring_lib.tex(,627) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,628) //   j; print(M);
../singular_texi/./d2t_singular/ring_lib.tex(,629) //   imapall(S,"1");     //identity map of S: copy objects, change names
../singular_texi/./d2t_singular/ring_lib.tex(,630) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,631) //   kill R,S;
../singular_texi/./d2t_singular/ring_lib.tex(,632) @c end example imapall d2t_singular/ring_lib.doc:481
../singular_texi/./d2t_singular/ring_lib.tex(,633) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,634) @c ---end content imapall---
../singular_texi/./d2t_singular/ring_lib.tex(,635) 
../singular_texi/./d2t_singular/ring_lib.tex(,636) @c ------------------- mapall -------------
../singular_texi/./d2t_singular/ring_lib.tex(,637) @node mapall, ord_test, imapall, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,638) @subsubsection mapall
../singular_texi/./d2t_singular/ring_lib.tex(,639) @cindex mapall
../singular_texi/./d2t_singular/ring_lib.tex(,640) @c ---content mapall---
../singular_texi/./d2t_singular/ring_lib.tex(,641) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,642) 
../singular_texi/./d2t_singular/ring_lib.tex(,643) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,644) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,645) mapall(R,i[,s]); R=ring/qring, i=ideal of basering, s=string
../singular_texi/./d2t_singular/ring_lib.tex(,646) 
../singular_texi/./d2t_singular/ring_lib.tex(,647) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,648) map all objects of ring R (of type poly/ideal/vector/module/number/
../singular_texi/./d2t_singular/ring_lib.tex(,649) matrix, map) into the basering, by mapping the j-th variable of R to
../singular_texi/./d2t_singular/ring_lib.tex(,650) the j-th generator of the ideal i. If no 3rd argument is present, the
../singular_texi/./d2t_singular/ring_lib.tex(,651) names are the same as in R. If, say, f is a poly in R and the 3rd
../singular_texi/./d2t_singular/ring_lib.tex(,652) argument is the string "R", then f is mapped to f_R etc.
../singular_texi/./d2t_singular/ring_lib.tex(,653) 
../singular_texi/./d2t_singular/ring_lib.tex(,654) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,655) no return value.
../singular_texi/./d2t_singular/ring_lib.tex(,656) 
../singular_texi/./d2t_singular/ring_lib.tex(,657) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,658) This procedure has the same effect as defining a map, say psi, by
../singular_texi/./d2t_singular/ring_lib.tex(,659) map psi=R,i; and then applying psi to all objects of R. In particular,
../singular_texi/./d2t_singular/ring_lib.tex(,660) maps from R to some ring S are composed with psi, creating thus a map
../singular_texi/./d2t_singular/ring_lib.tex(,661) from the basering to S.
../singular_texi/./d2t_singular/ring_lib.tex(,662) @*mapall may be combined with copyring to change vars for all objects.
../singular_texi/./d2t_singular/ring_lib.tex(,663) The 3rd argument is useful in order to avoid conflicts of names, the
../singular_texi/./d2t_singular/ring_lib.tex(,664) empty string is allowed.
../singular_texi/./d2t_singular/ring_lib.tex(,665) 
../singular_texi/./d2t_singular/ring_lib.tex(,666) @item @strong{Caution:}
../singular_texi/./d2t_singular/ring_lib.tex(,667) mapall does not work inside a procedure.
../singular_texi/./d2t_singular/ring_lib.tex(,668) 
../singular_texi/./d2t_singular/ring_lib.tex(,669) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,670) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,671) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,672) @c computed example mapall d2t_singular/ring_lib.doc:536 
../singular_texi/./d2t_singular/ring_lib.tex(,673) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,674) // The example is not shown since mapall does not work in a procedure
../singular_texi/./d2t_singular/ring_lib.tex(,675) // (and hence not in the example procedure). Try the following commands:
../singular_texi/./d2t_singular/ring_lib.tex(,676) //   ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,677) //   ideal j=x,y,z;
../singular_texi/./d2t_singular/ring_lib.tex(,678) //   matrix M[2][3]=1,2,3,x,y,z;
../singular_texi/./d2t_singular/ring_lib.tex(,679) //   map phi=R,x2,y2,z2;
../singular_texi/./d2t_singular/ring_lib.tex(,680) //   ring S=0,(a,b,c),ds;
../singular_texi/./d2t_singular/ring_lib.tex(,681) //   ideal i=c,a,b;
../singular_texi/./d2t_singular/ring_lib.tex(,682) //   mapall(R,i);         //map from R to S: x->c, y->a, z->b
../singular_texi/./d2t_singular/ring_lib.tex(,683) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,684) //   j; print(M); phi;    //phi maps R to S: x->c2, y->a2, z->b2
../singular_texi/./d2t_singular/ring_lib.tex(,685) //   ideal i1=a2,a+b,1;
../singular_texi/./d2t_singular/ring_lib.tex(,686) //   mapall(R,i1,"");   //map from R to S: x->a2, y->a+b, z->1
../singular_texi/./d2t_singular/ring_lib.tex(,687) //   names(S);
../singular_texi/./d2t_singular/ring_lib.tex(,688) //   j_; print(M_); phi_;
../singular_texi/./d2t_singular/ring_lib.tex(,689) //   changevar("T","x()",R);  //change vars in R and call result T
../singular_texi/./d2t_singular/ring_lib.tex(,690) //   mapall(R,maxideal(1));       //identity map from R to T
../singular_texi/./d2t_singular/ring_lib.tex(,691) //   names(T);
../singular_texi/./d2t_singular/ring_lib.tex(,692) //   j; print(M); phi;
../singular_texi/./d2t_singular/ring_lib.tex(,693) //   kill R,S,T;
../singular_texi/./d2t_singular/ring_lib.tex(,694) @c end example mapall d2t_singular/ring_lib.doc:536
../singular_texi/./d2t_singular/ring_lib.tex(,695) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,696) @c ---end content mapall---
../singular_texi/./d2t_singular/ring_lib.tex(,697) 
../singular_texi/./d2t_singular/ring_lib.tex(,698) @c ------------------- ord_test -------------
../singular_texi/./d2t_singular/ring_lib.tex(,699) @node ord_test, ringtensor, mapall, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,700) @subsubsection ord_test
../singular_texi/./d2t_singular/ring_lib.tex(,701) @cindex ord_test
../singular_texi/./d2t_singular/ring_lib.tex(,702) @c ---content ord_test---
../singular_texi/./d2t_singular/ring_lib.tex(,703) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,704) 
../singular_texi/./d2t_singular/ring_lib.tex(,705) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,706) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,707) ord_test(r); r ring
../singular_texi/./d2t_singular/ring_lib.tex(,708) 
../singular_texi/./d2t_singular/ring_lib.tex(,709) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,710) int 1 (resp. -1, resp. 0) if ordering of r is global (resp. local,
../singular_texi/./d2t_singular/ring_lib.tex(,711) resp. mixed)
../singular_texi/./d2t_singular/ring_lib.tex(,712) 
../singular_texi/./d2t_singular/ring_lib.tex(,713) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,714) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,715) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,716) @c computed example ord_test d2t_singular/ring_lib.doc:580 
../singular_texi/./d2t_singular/ring_lib.tex(,717) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,718) ring R = 0,(x,y),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,719) ring S = 0,(u,v),ls;
../singular_texi/./d2t_singular/ring_lib.tex(,720) ord_test(R);
../singular_texi/./d2t_singular/ring_lib.tex(,721) @expansion{} 1
../singular_texi/./d2t_singular/ring_lib.tex(,722) ord_test(S);
../singular_texi/./d2t_singular/ring_lib.tex(,723) @expansion{} -1
../singular_texi/./d2t_singular/ring_lib.tex(,724) ord_test(R+S);
../singular_texi/./d2t_singular/ring_lib.tex(,725) @expansion{} 0
../singular_texi/./d2t_singular/ring_lib.tex(,726) @c end example ord_test d2t_singular/ring_lib.doc:580
../singular_texi/./d2t_singular/ring_lib.tex(,727) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,728) @c ---end content ord_test---
../singular_texi/./d2t_singular/ring_lib.tex(,729) 
../singular_texi/./d2t_singular/ring_lib.tex(,730) @c ------------------- ringtensor -------------
../singular_texi/./d2t_singular/ring_lib.tex(,731) @node ringtensor, ringweights, ord_test, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,732) @subsubsection ringtensor
../singular_texi/./d2t_singular/ring_lib.tex(,733) @cindex ringtensor
../singular_texi/./d2t_singular/ring_lib.tex(,734) @c ---content ringtensor---
../singular_texi/./d2t_singular/ring_lib.tex(,735) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,736) 
../singular_texi/./d2t_singular/ring_lib.tex(,737) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,738) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,739) ringtensor(s,r1,r2,...); s=string, r1,r2,...=rings
../singular_texi/./d2t_singular/ring_lib.tex(,740) 
../singular_texi/./d2t_singular/ring_lib.tex(,741) @item @strong{Create:}
../singular_texi/./d2t_singular/ring_lib.tex(,742) A new base ring with name `s` if r1,r2,... are existing rings.
../singular_texi/./d2t_singular/ring_lib.tex(,743) If, say, s = "R" and the rings r1,r2,... exist, the new ring will
../singular_texi/./d2t_singular/ring_lib.tex(,744) have name R, variables from all rings r1,r2,... and as monomial
../singular_texi/./d2t_singular/ring_lib.tex(,745) ordering the block (product) ordering of r1,r2,... . Hence, R
../singular_texi/./d2t_singular/ring_lib.tex(,746) is the tensor product of the rings r1,r2,... with ordering matrix
../singular_texi/./d2t_singular/ring_lib.tex(,747) equal to the direct sum of the ordering matrices of r1,r2,...
../singular_texi/./d2t_singular/ring_lib.tex(,748) 
../singular_texi/./d2t_singular/ring_lib.tex(,749) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,750) no return value
../singular_texi/./d2t_singular/ring_lib.tex(,751) 
../singular_texi/./d2t_singular/ring_lib.tex(,752) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,753) The characteristic of the new ring will be that of r1. The names of
../singular_texi/./d2t_singular/ring_lib.tex(,754) variables in the rings r1,r2,... should differ (if a name, say x,
../singular_texi/./d2t_singular/ring_lib.tex(,755) occurs in r1 and r2, then, in the new ring r, x always refers to the
../singular_texi/./d2t_singular/ring_lib.tex(,756) variable with name x in r1, there is no access to x in r2).
../singular_texi/./d2t_singular/ring_lib.tex(,757) The procedure works also for quotient rings ri, if the characteristic
../singular_texi/./d2t_singular/ring_lib.tex(,758) of ri is compatible with the characteristic of r1 (i.e. if imap from
../singular_texi/./d2t_singular/ring_lib.tex(,759) ri to r1 is implemented)
../singular_texi/./d2t_singular/ring_lib.tex(,760) @*This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/ring_lib.tex(,761) If you use it in your own proc, let the local names of your proc
../singular_texi/./d2t_singular/ring_lib.tex(,762) start with @@ (see the file HelpForProc)
../singular_texi/./d2t_singular/ring_lib.tex(,763) 
../singular_texi/./d2t_singular/ring_lib.tex(,764) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,765) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,766) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,767) @c computed example ringtensor d2t_singular/ring_lib.doc:628 
../singular_texi/./d2t_singular/ring_lib.tex(,768) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,769) ring r=32003,(x,y,u,v),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,770) ring s=0,(a,b,c),wp(1,2,3);
../singular_texi/./d2t_singular/ring_lib.tex(,771) ring t=0,x(1..5),(c,ls);
../singular_texi/./d2t_singular/ring_lib.tex(,772) ringtensor("R",r,s,t);
../singular_texi/./d2t_singular/ring_lib.tex(,773) @expansion{} // basering is now R
../singular_texi/./d2t_singular/ring_lib.tex(,774) type R;
../singular_texi/./d2t_singular/ring_lib.tex(,775) @expansion{} // R                    [0]  *ring
../singular_texi/./d2t_singular/ring_lib.tex(,776) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/ring_lib.tex(,777) @expansion{} //   number of vars : 12
../singular_texi/./d2t_singular/ring_lib.tex(,778) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/ring_lib.tex(,779) @expansion{} //                  : names    x y u v 
../singular_texi/./d2t_singular/ring_lib.tex(,780) @expansion{} //        block   2 : ordering wp
../singular_texi/./d2t_singular/ring_lib.tex(,781) @expansion{} //                  : names    a b c 
../singular_texi/./d2t_singular/ring_lib.tex(,782) @expansion{} //                  : weights  1 2 3 
../singular_texi/./d2t_singular/ring_lib.tex(,783) @expansion{} //        block   3 : ordering ls
../singular_texi/./d2t_singular/ring_lib.tex(,784) @expansion{} //                  : names    x(1) x(2) x(3) x(4) x(5) 
../singular_texi/./d2t_singular/ring_lib.tex(,785) @expansion{} //        block   4 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,786) setring s;
../singular_texi/./d2t_singular/ring_lib.tex(,787) ideal i = a2+b3+c5;
../singular_texi/./d2t_singular/ring_lib.tex(,788) changevar("S","x,y,z");       //change vars of sand make S the basering
../singular_texi/./d2t_singular/ring_lib.tex(,789) @expansion{} // basering is now S
../singular_texi/./d2t_singular/ring_lib.tex(,790) qring qS =std(fetch(s,i));    //create qring of S mod i (mapped to S)
../singular_texi/./d2t_singular/ring_lib.tex(,791) changevar("T","d,e,f,g,h",t); //change vars of t and make T the basering
../singular_texi/./d2t_singular/ring_lib.tex(,792) @expansion{} // basering is now T
../singular_texi/./d2t_singular/ring_lib.tex(,793) qring qT=std(d2+e2-f3);       //create qring of T mod d2+e2-f3
../singular_texi/./d2t_singular/ring_lib.tex(,794) ringtensor("Q",s,qS,t,qT);
../singular_texi/./d2t_singular/ring_lib.tex(,795) @expansion{} // basering is now Q
../singular_texi/./d2t_singular/ring_lib.tex(,796) type Q;
../singular_texi/./d2t_singular/ring_lib.tex(,797) @expansion{} // Q                    [0]  *qring
../singular_texi/./d2t_singular/ring_lib.tex(,798) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/ring_lib.tex(,799) @expansion{} //   number of vars : 16
../singular_texi/./d2t_singular/ring_lib.tex(,800) @expansion{} //        block   1 : ordering wp
../singular_texi/./d2t_singular/ring_lib.tex(,801) @expansion{} //                  : names    a b c 
../singular_texi/./d2t_singular/ring_lib.tex(,802) @expansion{} //                  : weights  1 2 3 
../singular_texi/./d2t_singular/ring_lib.tex(,803) @expansion{} //        block   2 : ordering wp
../singular_texi/./d2t_singular/ring_lib.tex(,804) @expansion{} //                  : names    x y z 
../singular_texi/./d2t_singular/ring_lib.tex(,805) @expansion{} //                  : weights  1 2 3 
../singular_texi/./d2t_singular/ring_lib.tex(,806) @expansion{} //        block   3 : ordering ls
../singular_texi/./d2t_singular/ring_lib.tex(,807) @expansion{} //                  : names    x(1) x(2) x(3) x(4) x(5) 
../singular_texi/./d2t_singular/ring_lib.tex(,808) @expansion{} //        block   4 : ordering ls
../singular_texi/./d2t_singular/ring_lib.tex(,809) @expansion{} //                  : names    d e f g h 
../singular_texi/./d2t_singular/ring_lib.tex(,810) @expansion{} //        block   5 : ordering C
../singular_texi/./d2t_singular/ring_lib.tex(,811) @expansion{} // quotient ring from ideal
../singular_texi/./d2t_singular/ring_lib.tex(,812) @expansion{} _[1]=f3-e2-d2
../singular_texi/./d2t_singular/ring_lib.tex(,813) @expansion{} _[2]=z5+y3+x2
../singular_texi/./d2t_singular/ring_lib.tex(,814) kill R,Q,S,T;
../singular_texi/./d2t_singular/ring_lib.tex(,815) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/ring_lib.tex(,816) if( nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/ring_lib.tex(,817) kill Top::R,Top::Q,Top::S,Top::T;
../singular_texi/./d2t_singular/ring_lib.tex(,818) @} else @{
../singular_texi/./d2t_singular/ring_lib.tex(,819) kill Ring::R,Ring::Q,Ring::S,Ring::T;
../singular_texi/./d2t_singular/ring_lib.tex(,820) @}
../singular_texi/./d2t_singular/ring_lib.tex(,821) @}
../singular_texi/./d2t_singular/ring_lib.tex(,822) @c end example ringtensor d2t_singular/ring_lib.doc:628
../singular_texi/./d2t_singular/ring_lib.tex(,823) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,824) @c ---end content ringtensor---
../singular_texi/./d2t_singular/ring_lib.tex(,825) 
../singular_texi/./d2t_singular/ring_lib.tex(,826) @c ------------------- ringweights -------------
../singular_texi/./d2t_singular/ring_lib.tex(,827) @node ringweights,, ringtensor, ring_lib
../singular_texi/./d2t_singular/ring_lib.tex(,828) @subsubsection ringweights
../singular_texi/./d2t_singular/ring_lib.tex(,829) @cindex ringweights
../singular_texi/./d2t_singular/ring_lib.tex(,830) @c ---content ringweights---
../singular_texi/./d2t_singular/ring_lib.tex(,831) Procedure from library @code{ring.lib} (@pxref{ring_lib}).
../singular_texi/./d2t_singular/ring_lib.tex(,832) 
../singular_texi/./d2t_singular/ring_lib.tex(,833) @table @asis
../singular_texi/./d2t_singular/ring_lib.tex(,834) @item @strong{Usage:}
../singular_texi/./d2t_singular/ring_lib.tex(,835) ringweights(P); P=name of an existing ring (true name, not a string)
../singular_texi/./d2t_singular/ring_lib.tex(,836) 
../singular_texi/./d2t_singular/ring_lib.tex(,837) @item @strong{Return:}
../singular_texi/./d2t_singular/ring_lib.tex(,838) intvec consisting of the weights of the variables of P, as they
../singular_texi/./d2t_singular/ring_lib.tex(,839) appear when typing P;.
../singular_texi/./d2t_singular/ring_lib.tex(,840) 
../singular_texi/./d2t_singular/ring_lib.tex(,841) @item @strong{Note:}
../singular_texi/./d2t_singular/ring_lib.tex(,842) This is useful when enlarging P but keeping the weights of the old
../singular_texi/./d2t_singular/ring_lib.tex(,843) variables.
../singular_texi/./d2t_singular/ring_lib.tex(,844) 
../singular_texi/./d2t_singular/ring_lib.tex(,845) @end table
../singular_texi/./d2t_singular/ring_lib.tex(,846) @strong{Example:}
../singular_texi/./d2t_singular/ring_lib.tex(,847) @smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,848) @c computed example ringweights d2t_singular/ring_lib.doc:677 
../singular_texi/./d2t_singular/ring_lib.tex(,849) LIB "ring.lib";
../singular_texi/./d2t_singular/ring_lib.tex(,850) ring r0 = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/ring_lib.tex(,851) ringweights(r0);
../singular_texi/./d2t_singular/ring_lib.tex(,852) @expansion{} 1,1,1
../singular_texi/./d2t_singular/ring_lib.tex(,853) ring r1 = 0,x(1..5),(ds(3),wp(2,3));
../singular_texi/./d2t_singular/ring_lib.tex(,854) ringweights(r1);"";
../singular_texi/./d2t_singular/ring_lib.tex(,855) @expansion{} 1,1,1,2,3
../singular_texi/./d2t_singular/ring_lib.tex(,856) @expansion{} 
../singular_texi/./d2t_singular/ring_lib.tex(,857) // an example for enlarging the ring, keeping the first weights:
../singular_texi/./d2t_singular/ring_lib.tex(,858) intvec v = ringweights(r1),6,2,3,4,5;
../singular_texi/./d2t_singular/ring_lib.tex(,859) ring R = 0,x(1..10),(a(v),dp);
../singular_texi/./d2t_singular/ring_lib.tex(,860) ordstr(R);
../singular_texi/./d2t_singular/ring_lib.tex(,861) @expansion{} a(1,1,1,2,3,6,2,3,4,5),dp(10),C
../singular_texi/./d2t_singular/ring_lib.tex(,862) @c end example ringweights d2t_singular/ring_lib.doc:677
../singular_texi/./d2t_singular/ring_lib.tex(,863) @end smallexample
../singular_texi/./d2t_singular/ring_lib.tex(,864) @c ---end content ringweights---
../singular_texi/singular.tex(,332) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,333) @node Linear algebra, Commutative algebra, General purpose, SINGULAR libraries
../singular_texi/singular.tex(,334) @section Linear algebra
../singular_texi/singular.tex(,335) @cindex Linear algebra
../singular_texi/singular.tex(,336) 
../singular_texi/singular.tex(,337) @menu
../singular_texi/singular.tex(,338) * matrix_lib:: procedures for matrix operations
../singular_texi/singular.tex(,339) * linalg_lib:: procedures for algorithmic linear algebra
../singular_texi/singular.tex(,340) @end menu
../singular_texi/singular.tex(,341) 
../singular_texi/singular.tex(,342) @c ----------------------------------------------------------
../singular_texi/singular.tex(,343) @node matrix_lib, linalg_lib,  Linear algebra, Linear algebra
../singular_texi/singular.tex(,344) @subsection matrix_lib
../singular_texi/singular.tex(,345) @c include of docu for matrix.lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/matrix_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/matrix_lib.doc
../singular_texi/./d2t_singular/matrix_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/matrix_lib.doc INSTEAD
../singular_texi/./d2t_singular/matrix_lib.tex(,4) @c library version: (1.26.2.3,2003/05/14)
../singular_texi/./d2t_singular/matrix_lib.tex(,5) @c library file: ../Singular/LIB/matrix.lib
../singular_texi/./d2t_singular/matrix_lib.tex(,6) @cindex matrix.lib
../singular_texi/./d2t_singular/matrix_lib.tex(,7) @cindex matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/matrix_lib.tex(,10) matrix.lib
../singular_texi/./d2t_singular/matrix_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/matrix_lib.tex(,12)     Elementary Matrix Operations
../singular_texi/./d2t_singular/matrix_lib.tex(,13) 
../singular_texi/./d2t_singular/matrix_lib.tex(,14) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,15) 
../singular_texi/./d2t_singular/matrix_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/matrix_lib.tex(,17) @menu
../singular_texi/./d2t_singular/matrix_lib.tex(,18) * compress:: matrix, zero columns from A deleted
../singular_texi/./d2t_singular/matrix_lib.tex(,19) * concat:: matrix, concatenation of matrices A1,A2,...
../singular_texi/./d2t_singular/matrix_lib.tex(,20) * diag:: matrix, nxn diagonal matrix with entries poly p
../singular_texi/./d2t_singular/matrix_lib.tex(,21) * dsum:: matrix, direct sum of matrices A1,A2,...
../singular_texi/./d2t_singular/matrix_lib.tex(,22) * flatten:: ideal, generated by entries of matrix A
../singular_texi/./d2t_singular/matrix_lib.tex(,23) * genericmat:: generic nxm matrix [entries from id]
../singular_texi/./d2t_singular/matrix_lib.tex(,24) * is_complex:: 1 if list c is a complex, 0 if not
../singular_texi/./d2t_singular/matrix_lib.tex(,25) * outer:: matrix, outer product of matrices A and B
../singular_texi/./d2t_singular/matrix_lib.tex(,26) * power:: matrix/intmat, n-th power of matrix/intmat A
../singular_texi/./d2t_singular/matrix_lib.tex(,27) * skewmat:: generic skew-symmetric nxn matrix [entries from id]
../singular_texi/./d2t_singular/matrix_lib.tex(,28) * submat:: submatrix of A with rows/cols specified by intvec r/c
../singular_texi/./d2t_singular/matrix_lib.tex(,29) * symmat:: generic symmetric nxn matrix [entries from id]
../singular_texi/./d2t_singular/matrix_lib.tex(,30) * tensor:: matrix, tensor product of matrices A nd B
../singular_texi/./d2t_singular/matrix_lib.tex(,31) * unitmat:: unit square matrix of size n
../singular_texi/./d2t_singular/matrix_lib.tex(,32) * gauss_col:: transform a matrix into col-reduced Gauss normal form
../singular_texi/./d2t_singular/matrix_lib.tex(,33) * gauss_row:: transform a matrix into row-reduced Gauss normal form
../singular_texi/./d2t_singular/matrix_lib.tex(,34) * addcol:: add p*(c1-th col) to c2-th column of matrix A, p poly
../singular_texi/./d2t_singular/matrix_lib.tex(,35) * addrow:: add p*(r1-th row) to r2-th row of matrix A, p poly
../singular_texi/./d2t_singular/matrix_lib.tex(,36) * multcol:: multiply c-th column of A with poly p
../singular_texi/./d2t_singular/matrix_lib.tex(,37) * multrow:: multiply r-th row of A with poly p
../singular_texi/./d2t_singular/matrix_lib.tex(,38) * permcol:: permute i-th and j-th columns
../singular_texi/./d2t_singular/matrix_lib.tex(,39) * permrow:: permute i-th and j-th rows
../singular_texi/./d2t_singular/matrix_lib.tex(,40) * rowred:: reduction of matrix A with elementary row-operations
../singular_texi/./d2t_singular/matrix_lib.tex(,41) * colred:: reduction of matrix A with elementary col-operations
../singular_texi/./d2t_singular/matrix_lib.tex(,42) * rm_unitrow:: remove unit rows and associated columns of A
../singular_texi/./d2t_singular/matrix_lib.tex(,43) * rm_unitcol:: remove unit columns and associated rows of A
../singular_texi/./d2t_singular/matrix_lib.tex(,44) * headStand:: A[n-i+1,m-j+1]=headStand(A[i,j])
../singular_texi/./d2t_singular/matrix_lib.tex(,45) @end menu
../singular_texi/./d2t_singular/matrix_lib.tex(,46) @c ---end content LibInfo---
../singular_texi/./d2t_singular/matrix_lib.tex(,47) 
../singular_texi/./d2t_singular/matrix_lib.tex(,48) @c ------------------- compress -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,49) @node compress, concat,, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,50) @subsubsection compress
../singular_texi/./d2t_singular/matrix_lib.tex(,51) @cindex compress
../singular_texi/./d2t_singular/matrix_lib.tex(,52) @c ---content compress---
../singular_texi/./d2t_singular/matrix_lib.tex(,53) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,54) 
../singular_texi/./d2t_singular/matrix_lib.tex(,55) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,56) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,57) compress(A); A matrix/ideal/module/intmat/intvec
../singular_texi/./d2t_singular/matrix_lib.tex(,58) 
../singular_texi/./d2t_singular/matrix_lib.tex(,59) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,60) same type, zero columns/generators from A deleted
../singular_texi/./d2t_singular/matrix_lib.tex(,61) @*(if A=intvec, zero elements are deleted)
../singular_texi/./d2t_singular/matrix_lib.tex(,62) 
../singular_texi/./d2t_singular/matrix_lib.tex(,63) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,64) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,65) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,66) @c reused example compress d2t_singular/matrix_lib.doc:64 
../singular_texi/./d2t_singular/matrix_lib.tex(,67) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,68) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,69) matrix A[3][4]=1,0,3,0,x,0,z,0,x2,0,z2,0;
../singular_texi/./d2t_singular/matrix_lib.tex(,70) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,71) @expansion{} 1, 0,3, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,72) @expansion{} x, 0,z, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,73) @expansion{} x2,0,z2,0 
../singular_texi/./d2t_singular/matrix_lib.tex(,74) print(compress(A));
../singular_texi/./d2t_singular/matrix_lib.tex(,75) @expansion{} 1, 3,
../singular_texi/./d2t_singular/matrix_lib.tex(,76) @expansion{} x, z,
../singular_texi/./d2t_singular/matrix_lib.tex(,77) @expansion{} x2,z2
../singular_texi/./d2t_singular/matrix_lib.tex(,78) module m=module(A); show(m);
../singular_texi/./d2t_singular/matrix_lib.tex(,79) @expansion{} // module, 4 generator(s)
../singular_texi/./d2t_singular/matrix_lib.tex(,80) @expansion{} [1,x,x2]
../singular_texi/./d2t_singular/matrix_lib.tex(,81) @expansion{} [0]
../singular_texi/./d2t_singular/matrix_lib.tex(,82) @expansion{} [3,z,z2]
../singular_texi/./d2t_singular/matrix_lib.tex(,83) @expansion{} [0]
../singular_texi/./d2t_singular/matrix_lib.tex(,84) show(compress(m));
../singular_texi/./d2t_singular/matrix_lib.tex(,85) @expansion{} // module, 2 generator(s)
../singular_texi/./d2t_singular/matrix_lib.tex(,86) @expansion{} [1,x,x2]
../singular_texi/./d2t_singular/matrix_lib.tex(,87) @expansion{} [3,z,z2]
../singular_texi/./d2t_singular/matrix_lib.tex(,88) intmat B[3][4]=1,0,3,0,4,0,5,0,6,0,7,0;
../singular_texi/./d2t_singular/matrix_lib.tex(,89) compress(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,90) @expansion{} 1,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,91) @expansion{} 4,5,
../singular_texi/./d2t_singular/matrix_lib.tex(,92) @expansion{} 6,7 
../singular_texi/./d2t_singular/matrix_lib.tex(,93) intvec C=0,0,1,2,0,3;
../singular_texi/./d2t_singular/matrix_lib.tex(,94) compress(C);
../singular_texi/./d2t_singular/matrix_lib.tex(,95) @expansion{} 1,2,3
../singular_texi/./d2t_singular/matrix_lib.tex(,96) @c end example compress d2t_singular/matrix_lib.doc:64
../singular_texi/./d2t_singular/matrix_lib.tex(,97) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,98) @c ---end content compress---
../singular_texi/./d2t_singular/matrix_lib.tex(,99) 
../singular_texi/./d2t_singular/matrix_lib.tex(,100) @c ------------------- concat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,101) @node concat, diag, compress, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,102) @subsubsection concat
../singular_texi/./d2t_singular/matrix_lib.tex(,103) @cindex concat
../singular_texi/./d2t_singular/matrix_lib.tex(,104) @c ---content concat---
../singular_texi/./d2t_singular/matrix_lib.tex(,105) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,106) 
../singular_texi/./d2t_singular/matrix_lib.tex(,107) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,108) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,109) concat(A1,A2,..); A1,A2,... matrices
../singular_texi/./d2t_singular/matrix_lib.tex(,110) 
../singular_texi/./d2t_singular/matrix_lib.tex(,111) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,112) matrix, concatenation of A1,A2,.... Number of rows of result matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,113) is max(nrows(A1),nrows(A2),...)
../singular_texi/./d2t_singular/matrix_lib.tex(,114) 
../singular_texi/./d2t_singular/matrix_lib.tex(,115) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,116) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,117) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,118) @c reused example concat d2t_singular/matrix_lib.doc:98 
../singular_texi/./d2t_singular/matrix_lib.tex(,119) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,120) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,121) matrix A[3][3]=1,2,3,x,y,z,x2,y2,z2;
../singular_texi/./d2t_singular/matrix_lib.tex(,122) matrix B[2][2]=1,0,2,0; matrix C[1][4]=4,5,x,y;
../singular_texi/./d2t_singular/matrix_lib.tex(,123) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,124) @expansion{} 1, 2, 3,
../singular_texi/./d2t_singular/matrix_lib.tex(,125) @expansion{} x, y, z,
../singular_texi/./d2t_singular/matrix_lib.tex(,126) @expansion{} x2,y2,z2
../singular_texi/./d2t_singular/matrix_lib.tex(,127) print(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,128) @expansion{} 1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,129) @expansion{} 2,0 
../singular_texi/./d2t_singular/matrix_lib.tex(,130) print(C);
../singular_texi/./d2t_singular/matrix_lib.tex(,131) @expansion{} 4,5,x,y
../singular_texi/./d2t_singular/matrix_lib.tex(,132) print(concat(A,B,C));
../singular_texi/./d2t_singular/matrix_lib.tex(,133) @expansion{} 1, 2, 3, 1,0,4,5,x,y,
../singular_texi/./d2t_singular/matrix_lib.tex(,134) @expansion{} x, y, z, 2,0,0,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,135) @expansion{} x2,y2,z2,0,0,0,0,0,0 
../singular_texi/./d2t_singular/matrix_lib.tex(,136) @c end example concat d2t_singular/matrix_lib.doc:98
../singular_texi/./d2t_singular/matrix_lib.tex(,137) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,138) @c ---end content concat---
../singular_texi/./d2t_singular/matrix_lib.tex(,139) 
../singular_texi/./d2t_singular/matrix_lib.tex(,140) @c ------------------- diag -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,141) @node diag, dsum, concat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,142) @subsubsection diag
../singular_texi/./d2t_singular/matrix_lib.tex(,143) @cindex diag
../singular_texi/./d2t_singular/matrix_lib.tex(,144) @c ---content diag---
../singular_texi/./d2t_singular/matrix_lib.tex(,145) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,146) 
../singular_texi/./d2t_singular/matrix_lib.tex(,147) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,148) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,149) diag(p,n); p poly, n integer
../singular_texi/./d2t_singular/matrix_lib.tex(,150) @*diag(A); A matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,151) 
../singular_texi/./d2t_singular/matrix_lib.tex(,152) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,153) diag(p,n): diagonal matrix, p times unit matrix of size n.
../singular_texi/./d2t_singular/matrix_lib.tex(,154) @* diag(A) : n*m x n*m diagonal matrix with entries all the entries of
../singular_texi/./d2t_singular/matrix_lib.tex(,155) the nxm matrix A, taken from the 1st row, 2nd row etc of A
../singular_texi/./d2t_singular/matrix_lib.tex(,156) 
../singular_texi/./d2t_singular/matrix_lib.tex(,157) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,158) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,159) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,160) @c reused example diag d2t_singular/matrix_lib.doc:131 
../singular_texi/./d2t_singular/matrix_lib.tex(,161) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,162) ring r = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,163) print(diag(xy,4));
../singular_texi/./d2t_singular/matrix_lib.tex(,164) @expansion{} xy,0, 0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,165) @expansion{} 0, xy,0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,166) @expansion{} 0, 0, xy,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,167) @expansion{} 0, 0, 0, xy
../singular_texi/./d2t_singular/matrix_lib.tex(,168) matrix A[3][2] = 1,2,3,4,5,6;
../singular_texi/./d2t_singular/matrix_lib.tex(,169) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,170) @expansion{} 1,2,
../singular_texi/./d2t_singular/matrix_lib.tex(,171) @expansion{} 3,4,
../singular_texi/./d2t_singular/matrix_lib.tex(,172) @expansion{} 5,6 
../singular_texi/./d2t_singular/matrix_lib.tex(,173) print(diag(A));
../singular_texi/./d2t_singular/matrix_lib.tex(,174) @expansion{} 1,0,0,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,175) @expansion{} 0,2,0,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,176) @expansion{} 0,0,3,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,177) @expansion{} 0,0,0,4,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,178) @expansion{} 0,0,0,0,5,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,179) @expansion{} 0,0,0,0,0,6 
../singular_texi/./d2t_singular/matrix_lib.tex(,180) @c end example diag d2t_singular/matrix_lib.doc:131
../singular_texi/./d2t_singular/matrix_lib.tex(,181) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,182) @c ---end content diag---
../singular_texi/./d2t_singular/matrix_lib.tex(,183) 
../singular_texi/./d2t_singular/matrix_lib.tex(,184) @c ------------------- dsum -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,185) @node dsum, flatten, diag, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,186) @subsubsection dsum
../singular_texi/./d2t_singular/matrix_lib.tex(,187) @cindex dsum
../singular_texi/./d2t_singular/matrix_lib.tex(,188) @c ---content dsum---
../singular_texi/./d2t_singular/matrix_lib.tex(,189) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,190) 
../singular_texi/./d2t_singular/matrix_lib.tex(,191) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,192) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,193) dsum(A1,A2,..); A1,A2,... matrices
../singular_texi/./d2t_singular/matrix_lib.tex(,194) 
../singular_texi/./d2t_singular/matrix_lib.tex(,195) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,196) matrix, direct sum of A1,A2,...
../singular_texi/./d2t_singular/matrix_lib.tex(,197) 
../singular_texi/./d2t_singular/matrix_lib.tex(,198) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,199) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,200) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,201) @c reused example dsum d2t_singular/matrix_lib.doc:159 
../singular_texi/./d2t_singular/matrix_lib.tex(,202) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,203) ring r = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,204) matrix A[3][3] = 1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,205) matrix B[2][2] = 1,x,y,z;
../singular_texi/./d2t_singular/matrix_lib.tex(,206) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,207) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,208) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,209) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,210) print(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,211) @expansion{} 1,x,
../singular_texi/./d2t_singular/matrix_lib.tex(,212) @expansion{} y,z 
../singular_texi/./d2t_singular/matrix_lib.tex(,213) print(dsum(A,B));
../singular_texi/./d2t_singular/matrix_lib.tex(,214) @expansion{} 1,2,3,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,215) @expansion{} 4,5,6,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,216) @expansion{} 7,8,9,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,217) @expansion{} 0,0,0,1,x,
../singular_texi/./d2t_singular/matrix_lib.tex(,218) @expansion{} 0,0,0,y,z 
../singular_texi/./d2t_singular/matrix_lib.tex(,219) @c end example dsum d2t_singular/matrix_lib.doc:159
../singular_texi/./d2t_singular/matrix_lib.tex(,220) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,221) @c ---end content dsum---
../singular_texi/./d2t_singular/matrix_lib.tex(,222) 
../singular_texi/./d2t_singular/matrix_lib.tex(,223) @c ------------------- flatten -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,224) @node flatten, genericmat, dsum, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,225) @subsubsection flatten
../singular_texi/./d2t_singular/matrix_lib.tex(,226) @cindex flatten
../singular_texi/./d2t_singular/matrix_lib.tex(,227) @c ---content flatten---
../singular_texi/./d2t_singular/matrix_lib.tex(,228) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,229) 
../singular_texi/./d2t_singular/matrix_lib.tex(,230) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,231) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,232) flatten(A); A matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,233) 
../singular_texi/./d2t_singular/matrix_lib.tex(,234) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,235) ideal, generated by all entries from A
../singular_texi/./d2t_singular/matrix_lib.tex(,236) 
../singular_texi/./d2t_singular/matrix_lib.tex(,237) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,238) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,239) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,240) @c reused example flatten d2t_singular/matrix_lib.doc:188 
../singular_texi/./d2t_singular/matrix_lib.tex(,241) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,242) ring r = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,243) matrix A[2][3] = 1,2,x,y,z,7;
../singular_texi/./d2t_singular/matrix_lib.tex(,244) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,245) @expansion{} 1,2,x,
../singular_texi/./d2t_singular/matrix_lib.tex(,246) @expansion{} y,z,7 
../singular_texi/./d2t_singular/matrix_lib.tex(,247) flatten(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,248) @expansion{} _[1]=1
../singular_texi/./d2t_singular/matrix_lib.tex(,249) @expansion{} _[2]=2
../singular_texi/./d2t_singular/matrix_lib.tex(,250) @expansion{} _[3]=x
../singular_texi/./d2t_singular/matrix_lib.tex(,251) @expansion{} _[4]=y
../singular_texi/./d2t_singular/matrix_lib.tex(,252) @expansion{} _[5]=z
../singular_texi/./d2t_singular/matrix_lib.tex(,253) @expansion{} _[6]=7
../singular_texi/./d2t_singular/matrix_lib.tex(,254) @c end example flatten d2t_singular/matrix_lib.doc:188
../singular_texi/./d2t_singular/matrix_lib.tex(,255) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,256) @c ---end content flatten---
../singular_texi/./d2t_singular/matrix_lib.tex(,257) 
../singular_texi/./d2t_singular/matrix_lib.tex(,258) @c ------------------- genericmat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,259) @node genericmat, is_complex, flatten, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,260) @subsubsection genericmat
../singular_texi/./d2t_singular/matrix_lib.tex(,261) @cindex genericmat
../singular_texi/./d2t_singular/matrix_lib.tex(,262) @c ---content genericmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,263) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,264) 
../singular_texi/./d2t_singular/matrix_lib.tex(,265) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,266) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,267) genericmat(n,m[,id]); n,m=integers, id=ideal
../singular_texi/./d2t_singular/matrix_lib.tex(,268) 
../singular_texi/./d2t_singular/matrix_lib.tex(,269) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,270) nxm matrix, with entries from id.
../singular_texi/./d2t_singular/matrix_lib.tex(,271) 
../singular_texi/./d2t_singular/matrix_lib.tex(,272) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,273) if id has less than nxm elements, the matrix is filled with 0's,
../singular_texi/./d2t_singular/matrix_lib.tex(,274) (default: id=maxideal(1)).
../singular_texi/./d2t_singular/matrix_lib.tex(,275) @*genericmat(n,m); creates the generic nxm matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,276) 
../singular_texi/./d2t_singular/matrix_lib.tex(,277) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,278) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,279) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,280) @c reused example genericmat d2t_singular/matrix_lib.doc:220 
../singular_texi/./d2t_singular/matrix_lib.tex(,281) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,282) ring R = 0,x(1..16),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,283) print(genericmat(3,3));      // the generic 3x3 matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,284) @expansion{} x(1),x(2),x(3),
../singular_texi/./d2t_singular/matrix_lib.tex(,285) @expansion{} x(4),x(5),x(6),
../singular_texi/./d2t_singular/matrix_lib.tex(,286) @expansion{} x(7),x(8),x(9) 
../singular_texi/./d2t_singular/matrix_lib.tex(,287) ring R1 = 0,(a,b,c,d),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,288) matrix A = genericmat(3,4,maxideal(1)^3);
../singular_texi/./d2t_singular/matrix_lib.tex(,289) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,290) @expansion{} a3, a2b,a2c,a2d,
../singular_texi/./d2t_singular/matrix_lib.tex(,291) @expansion{} ab2,abc,abd,ac2,
../singular_texi/./d2t_singular/matrix_lib.tex(,292) @expansion{} acd,ad2,b3, b2c 
../singular_texi/./d2t_singular/matrix_lib.tex(,293) int n,m = 3,2;
../singular_texi/./d2t_singular/matrix_lib.tex(,294) ideal i = ideal(randommat(1,n*m,maxideal(1),9));
../singular_texi/./d2t_singular/matrix_lib.tex(,295) print(genericmat(n,m,i));    // matrix of generic linear forms
../singular_texi/./d2t_singular/matrix_lib.tex(,296) @expansion{} 4a-8b-2c-3d,-a+b-4c+5d,
../singular_texi/./d2t_singular/matrix_lib.tex(,297) @expansion{} -8a-9b+c+7d,a-9b+9c+4d,
../singular_texi/./d2t_singular/matrix_lib.tex(,298) @expansion{} 6a-5b+9c,   2a+8c+d    
../singular_texi/./d2t_singular/matrix_lib.tex(,299) @c end example genericmat d2t_singular/matrix_lib.doc:220
../singular_texi/./d2t_singular/matrix_lib.tex(,300) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,301) @c ---end content genericmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,302) 
../singular_texi/./d2t_singular/matrix_lib.tex(,303) @c ------------------- is_complex -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,304) @node is_complex, outer, genericmat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,305) @subsubsection is_complex
../singular_texi/./d2t_singular/matrix_lib.tex(,306) @cindex is_complex
../singular_texi/./d2t_singular/matrix_lib.tex(,307) @c ---content is_complex---
../singular_texi/./d2t_singular/matrix_lib.tex(,308) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,309) 
../singular_texi/./d2t_singular/matrix_lib.tex(,310) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,311) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,312) is_complex(c); c = list of size-compatible modules or matrices
../singular_texi/./d2t_singular/matrix_lib.tex(,313) 
../singular_texi/./d2t_singular/matrix_lib.tex(,314) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,315) 1 if c[i]*c[i+1]=0 for all i, 0 if not, hence checking whether the
../singular_texi/./d2t_singular/matrix_lib.tex(,316) list of matrices forms a complex.
../singular_texi/./d2t_singular/matrix_lib.tex(,317) 
../singular_texi/./d2t_singular/matrix_lib.tex(,318) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,319) Ideals are treated internally as 1-line matrices.
../singular_texi/./d2t_singular/matrix_lib.tex(,320) @*If printlevel > 0, the position where c is not a complex is shown.
../singular_texi/./d2t_singular/matrix_lib.tex(,321) 
../singular_texi/./d2t_singular/matrix_lib.tex(,322) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,323) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,324) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,325) @c reused example is_complex d2t_singular/matrix_lib.doc:256 
../singular_texi/./d2t_singular/matrix_lib.tex(,326) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,327) ring r  = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,328) ideal i = x4+y5+z6,xyz,yx2+xz2+zy7;
../singular_texi/./d2t_singular/matrix_lib.tex(,329) list L  = nres(i,0);
../singular_texi/./d2t_singular/matrix_lib.tex(,330) is_complex(L);
../singular_texi/./d2t_singular/matrix_lib.tex(,331) @expansion{} 1
../singular_texi/./d2t_singular/matrix_lib.tex(,332) L[4]    = matrix(i);
../singular_texi/./d2t_singular/matrix_lib.tex(,333) is_complex(L);
../singular_texi/./d2t_singular/matrix_lib.tex(,334) @expansion{} 0
../singular_texi/./d2t_singular/matrix_lib.tex(,335) @c end example is_complex d2t_singular/matrix_lib.doc:256
../singular_texi/./d2t_singular/matrix_lib.tex(,336) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,337) @c ---end content is_complex---
../singular_texi/./d2t_singular/matrix_lib.tex(,338) 
../singular_texi/./d2t_singular/matrix_lib.tex(,339) @c ------------------- outer -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,340) @node outer, power, is_complex, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,341) @subsubsection outer
../singular_texi/./d2t_singular/matrix_lib.tex(,342) @cindex outer
../singular_texi/./d2t_singular/matrix_lib.tex(,343) @c ---content outer---
../singular_texi/./d2t_singular/matrix_lib.tex(,344) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,345) 
../singular_texi/./d2t_singular/matrix_lib.tex(,346) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,347) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,348) outer(A,B); A,B matrices
../singular_texi/./d2t_singular/matrix_lib.tex(,349) 
../singular_texi/./d2t_singular/matrix_lib.tex(,350) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,351) matrix, outer (tensor) product of A and B
../singular_texi/./d2t_singular/matrix_lib.tex(,352) 
../singular_texi/./d2t_singular/matrix_lib.tex(,353) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,354) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,355) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,356) @c reused example outer d2t_singular/matrix_lib.doc:285 
../singular_texi/./d2t_singular/matrix_lib.tex(,357) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,358) ring r=32003,(x,y,z),ds;
../singular_texi/./d2t_singular/matrix_lib.tex(,359) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,360) matrix B[2][2]=x,y,0,z;
../singular_texi/./d2t_singular/matrix_lib.tex(,361) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,362) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,363) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,364) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,365) print(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,366) @expansion{} x,y,
../singular_texi/./d2t_singular/matrix_lib.tex(,367) @expansion{} 0,z 
../singular_texi/./d2t_singular/matrix_lib.tex(,368) print(outer(A,B));
../singular_texi/./d2t_singular/matrix_lib.tex(,369) @expansion{} x, y, 2x,2y,3x,3y,
../singular_texi/./d2t_singular/matrix_lib.tex(,370) @expansion{} 0, z, 0, 2z,0, 3z,
../singular_texi/./d2t_singular/matrix_lib.tex(,371) @expansion{} 4x,4y,5x,5y,6x,6y,
../singular_texi/./d2t_singular/matrix_lib.tex(,372) @expansion{} 0, 4z,0, 5z,0, 6z,
../singular_texi/./d2t_singular/matrix_lib.tex(,373) @expansion{} 7x,7y,8x,8y,9x,9y,
../singular_texi/./d2t_singular/matrix_lib.tex(,374) @expansion{} 0, 7z,0, 8z,0, 9z 
../singular_texi/./d2t_singular/matrix_lib.tex(,375) @c end example outer d2t_singular/matrix_lib.doc:285
../singular_texi/./d2t_singular/matrix_lib.tex(,376) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,377) @c ---end content outer---
../singular_texi/./d2t_singular/matrix_lib.tex(,378) 
../singular_texi/./d2t_singular/matrix_lib.tex(,379) @c ------------------- power -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,380) @node power, skewmat, outer, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,381) @subsubsection power
../singular_texi/./d2t_singular/matrix_lib.tex(,382) @cindex power
../singular_texi/./d2t_singular/matrix_lib.tex(,383) @c ---content power---
../singular_texi/./d2t_singular/matrix_lib.tex(,384) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,385) 
../singular_texi/./d2t_singular/matrix_lib.tex(,386) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,387) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,388) power(A,n); A a square-matrix of type intmat or matrix, n=integer
../singular_texi/./d2t_singular/matrix_lib.tex(,389) 
../singular_texi/./d2t_singular/matrix_lib.tex(,390) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,391) intmat resp. matrix, the n-th power of A
../singular_texi/./d2t_singular/matrix_lib.tex(,392) 
../singular_texi/./d2t_singular/matrix_lib.tex(,393) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,394) for A=intmat and big n the result may be wrong because of int overflow
../singular_texi/./d2t_singular/matrix_lib.tex(,395) 
../singular_texi/./d2t_singular/matrix_lib.tex(,396) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,397) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,398) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,399) @c reused example power d2t_singular/matrix_lib.doc:317 
../singular_texi/./d2t_singular/matrix_lib.tex(,400) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,401) intmat A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,402) print(power(A,3));"";
../singular_texi/./d2t_singular/matrix_lib.tex(,403) @expansion{}    468   576   684
../singular_texi/./d2t_singular/matrix_lib.tex(,404) @expansion{}   1062  1305  1548
../singular_texi/./d2t_singular/matrix_lib.tex(,405) @expansion{}   1656  2034  2412
../singular_texi/./d2t_singular/matrix_lib.tex(,406) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,407) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,408) matrix B[3][3]=0,x,y,z,0,0,y,z,0;
../singular_texi/./d2t_singular/matrix_lib.tex(,409) print(power(B,3));"";
../singular_texi/./d2t_singular/matrix_lib.tex(,410) @expansion{} yz2,    xy2+x2z,y3+xyz,
../singular_texi/./d2t_singular/matrix_lib.tex(,411) @expansion{} y2z+xz2,yz2,    0,     
../singular_texi/./d2t_singular/matrix_lib.tex(,412) @expansion{} y3+xyz, y2z+xz2,yz2    
../singular_texi/./d2t_singular/matrix_lib.tex(,413) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,414) @c end example power d2t_singular/matrix_lib.doc:317
../singular_texi/./d2t_singular/matrix_lib.tex(,415) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,416) @c ---end content power---
../singular_texi/./d2t_singular/matrix_lib.tex(,417) 
../singular_texi/./d2t_singular/matrix_lib.tex(,418) @c ------------------- skewmat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,419) @node skewmat, submat, power, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,420) @subsubsection skewmat
../singular_texi/./d2t_singular/matrix_lib.tex(,421) @cindex skewmat
../singular_texi/./d2t_singular/matrix_lib.tex(,422) @c ---content skewmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,423) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,424) 
../singular_texi/./d2t_singular/matrix_lib.tex(,425) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,426) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,427) skewmat(n[,id]); n integer, id ideal
../singular_texi/./d2t_singular/matrix_lib.tex(,428) 
../singular_texi/./d2t_singular/matrix_lib.tex(,429) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,430) skew-symmetric nxn matrix, with entries from id
../singular_texi/./d2t_singular/matrix_lib.tex(,431) @*(default: id=maxideal(1))
../singular_texi/./d2t_singular/matrix_lib.tex(,432) @*skewmat(n); creates the generic skew-symmetric matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,433) 
../singular_texi/./d2t_singular/matrix_lib.tex(,434) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,435) if id has less than n*(n-1)/2 elements, the matrix is
../singular_texi/./d2t_singular/matrix_lib.tex(,436) @*filled with 0's,
../singular_texi/./d2t_singular/matrix_lib.tex(,437) 
../singular_texi/./d2t_singular/matrix_lib.tex(,438) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,439) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,440) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,441) @c reused example skewmat d2t_singular/matrix_lib.doc:351 
../singular_texi/./d2t_singular/matrix_lib.tex(,442) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,443) ring R=0,x(1..5),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,444) print(skewmat(4));    // the generic skew-symmetric matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,445) @expansion{} 0,    x(1), x(2),x(3),
../singular_texi/./d2t_singular/matrix_lib.tex(,446) @expansion{} -x(1),0,    x(4),x(5),
../singular_texi/./d2t_singular/matrix_lib.tex(,447) @expansion{} -x(2),-x(4),0,   0,   
../singular_texi/./d2t_singular/matrix_lib.tex(,448) @expansion{} -x(3),-x(5),0,   0    
../singular_texi/./d2t_singular/matrix_lib.tex(,449) ring R1 = 0,(a,b,c),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,450) matrix A=skewmat(4,maxideal(1)^2);
../singular_texi/./d2t_singular/matrix_lib.tex(,451) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,452) @expansion{} 0,  a2, ab, ac,
../singular_texi/./d2t_singular/matrix_lib.tex(,453) @expansion{} -a2,0,  b2, bc,
../singular_texi/./d2t_singular/matrix_lib.tex(,454) @expansion{} -ab,-b2,0,  c2,
../singular_texi/./d2t_singular/matrix_lib.tex(,455) @expansion{} -ac,-bc,-c2,0  
../singular_texi/./d2t_singular/matrix_lib.tex(,456) int n=3;
../singular_texi/./d2t_singular/matrix_lib.tex(,457) ideal i = ideal(randommat(1,n*(n-1) div 2,maxideal(1),9));
../singular_texi/./d2t_singular/matrix_lib.tex(,458) print(skewmat(n,i));  // skew matrix of generic linear forms
../singular_texi/./d2t_singular/matrix_lib.tex(,459) @expansion{} 0,       4a+b-8c, -a+6b+c,  
../singular_texi/./d2t_singular/matrix_lib.tex(,460) @expansion{} -4a-b+8c,0,       -8a+2b-9c,
../singular_texi/./d2t_singular/matrix_lib.tex(,461) @expansion{} a-6b-c,  8a-2b+9c,0         
../singular_texi/./d2t_singular/matrix_lib.tex(,462) kill R1;
../singular_texi/./d2t_singular/matrix_lib.tex(,463) @c end example skewmat d2t_singular/matrix_lib.doc:351
../singular_texi/./d2t_singular/matrix_lib.tex(,464) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,465) @c ---end content skewmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,466) 
../singular_texi/./d2t_singular/matrix_lib.tex(,467) @c ------------------- submat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,468) @node submat, symmat, skewmat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,469) @subsubsection submat
../singular_texi/./d2t_singular/matrix_lib.tex(,470) @cindex submat
../singular_texi/./d2t_singular/matrix_lib.tex(,471) @c ---content submat---
../singular_texi/./d2t_singular/matrix_lib.tex(,472) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,473) 
../singular_texi/./d2t_singular/matrix_lib.tex(,474) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,475) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,476) submat(A,r,c); A=matrix, r,c=intvec
../singular_texi/./d2t_singular/matrix_lib.tex(,477) 
../singular_texi/./d2t_singular/matrix_lib.tex(,478) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,479) matrix, submatrix of A with rows specified by intvec r
../singular_texi/./d2t_singular/matrix_lib.tex(,480) and columns specified by intvec c.
../singular_texi/./d2t_singular/matrix_lib.tex(,481) 
../singular_texi/./d2t_singular/matrix_lib.tex(,482) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,483) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,484) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,485) @c reused example submat d2t_singular/matrix_lib.doc:384 
../singular_texi/./d2t_singular/matrix_lib.tex(,486) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,487) ring R=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,488) matrix A[4][4]=x,y,z,0,1,2,3,4,5,6,7,8,9,x2,y2,z2;
../singular_texi/./d2t_singular/matrix_lib.tex(,489) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,490) @expansion{} x,y, z, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,491) @expansion{} 1,2, 3, 4,
../singular_texi/./d2t_singular/matrix_lib.tex(,492) @expansion{} 5,6, 7, 8,
../singular_texi/./d2t_singular/matrix_lib.tex(,493) @expansion{} 9,x2,y2,z2
../singular_texi/./d2t_singular/matrix_lib.tex(,494) intvec v=1,3,4;
../singular_texi/./d2t_singular/matrix_lib.tex(,495) matrix B=submat(A,v,1..3);
../singular_texi/./d2t_singular/matrix_lib.tex(,496) print(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,497) @expansion{} x,y, z,
../singular_texi/./d2t_singular/matrix_lib.tex(,498) @expansion{} 5,6, 7,
../singular_texi/./d2t_singular/matrix_lib.tex(,499) @expansion{} 9,x2,y2
../singular_texi/./d2t_singular/matrix_lib.tex(,500) @c end example submat d2t_singular/matrix_lib.doc:384
../singular_texi/./d2t_singular/matrix_lib.tex(,501) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,502) @c ---end content submat---
../singular_texi/./d2t_singular/matrix_lib.tex(,503) 
../singular_texi/./d2t_singular/matrix_lib.tex(,504) @c ------------------- symmat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,505) @node symmat, tensor, submat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,506) @subsubsection symmat
../singular_texi/./d2t_singular/matrix_lib.tex(,507) @cindex symmat
../singular_texi/./d2t_singular/matrix_lib.tex(,508) @c ---content symmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,509) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,510) 
../singular_texi/./d2t_singular/matrix_lib.tex(,511) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,512) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,513) symmat(n[,id]); n integer, id ideal
../singular_texi/./d2t_singular/matrix_lib.tex(,514) 
../singular_texi/./d2t_singular/matrix_lib.tex(,515) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,516) symmetric nxn matrix, with entries from id (default: id=maxideal(1))
../singular_texi/./d2t_singular/matrix_lib.tex(,517) 
../singular_texi/./d2t_singular/matrix_lib.tex(,518) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,519) if id has less than n*(n+1)/2 elements, the matrix is filled with 0's,
../singular_texi/./d2t_singular/matrix_lib.tex(,520) symmat(n); creates the generic symmetric matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,521) 
../singular_texi/./d2t_singular/matrix_lib.tex(,522) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,523) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,524) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,525) @c reused example symmat d2t_singular/matrix_lib.doc:417 
../singular_texi/./d2t_singular/matrix_lib.tex(,526) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,527) ring R=0,x(1..10),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,528) print(symmat(4));    // the generic symmetric matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,529) @expansion{} x(1),x(2),x(3),x(4),
../singular_texi/./d2t_singular/matrix_lib.tex(,530) @expansion{} x(2),x(5),x(6),x(7),
../singular_texi/./d2t_singular/matrix_lib.tex(,531) @expansion{} x(3),x(6),x(8),x(9),
../singular_texi/./d2t_singular/matrix_lib.tex(,532) @expansion{} x(4),x(7),x(9),x(10)
../singular_texi/./d2t_singular/matrix_lib.tex(,533) ring R1 = 0,(a,b,c),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,534) matrix A=symmat(4,maxideal(1)^3);
../singular_texi/./d2t_singular/matrix_lib.tex(,535) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,536) @expansion{} a3, a2b,a2c,ab2,
../singular_texi/./d2t_singular/matrix_lib.tex(,537) @expansion{} a2b,abc,ac2,b3, 
../singular_texi/./d2t_singular/matrix_lib.tex(,538) @expansion{} a2c,ac2,b2c,bc2,
../singular_texi/./d2t_singular/matrix_lib.tex(,539) @expansion{} ab2,b3, bc2,c3  
../singular_texi/./d2t_singular/matrix_lib.tex(,540) int n=3;
../singular_texi/./d2t_singular/matrix_lib.tex(,541) ideal i = ideal(randommat(1,n*(n+1) div 2,maxideal(1),9));
../singular_texi/./d2t_singular/matrix_lib.tex(,542) print(symmat(n,i));  // symmetric matrix of generic linear forms
../singular_texi/./d2t_singular/matrix_lib.tex(,543) @expansion{} 4a-8b-2c,-a+b-4c, -8a-9b+c,
../singular_texi/./d2t_singular/matrix_lib.tex(,544) @expansion{} -a+b-4c, a-9b+9c, 6a-5b+9c,
../singular_texi/./d2t_singular/matrix_lib.tex(,545) @expansion{} -8a-9b+c,6a-5b+9c,2a+8c    
../singular_texi/./d2t_singular/matrix_lib.tex(,546) kill R1;
../singular_texi/./d2t_singular/matrix_lib.tex(,547) @c end example symmat d2t_singular/matrix_lib.doc:417
../singular_texi/./d2t_singular/matrix_lib.tex(,548) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,549) @c ---end content symmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,550) 
../singular_texi/./d2t_singular/matrix_lib.tex(,551) @c ------------------- tensor -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,552) @node tensor, unitmat, symmat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,553) @subsubsection tensor
../singular_texi/./d2t_singular/matrix_lib.tex(,554) @cindex tensor
../singular_texi/./d2t_singular/matrix_lib.tex(,555) @c ---content tensor---
../singular_texi/./d2t_singular/matrix_lib.tex(,556) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,557) 
../singular_texi/./d2t_singular/matrix_lib.tex(,558) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,559) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,560) tensor(A,B); A,B matrices
../singular_texi/./d2t_singular/matrix_lib.tex(,561) 
../singular_texi/./d2t_singular/matrix_lib.tex(,562) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,563) matrix, tensor product of A and B
../singular_texi/./d2t_singular/matrix_lib.tex(,564) 
../singular_texi/./d2t_singular/matrix_lib.tex(,565) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,566) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,567) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,568) @c reused example tensor d2t_singular/matrix_lib.doc:449 
../singular_texi/./d2t_singular/matrix_lib.tex(,569) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,570) ring r=32003,(x,y,z),(c,ds);
../singular_texi/./d2t_singular/matrix_lib.tex(,571) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,572) matrix B[2][2]=x,y,0,z;
../singular_texi/./d2t_singular/matrix_lib.tex(,573) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,574) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,575) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,576) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,577) print(B);
../singular_texi/./d2t_singular/matrix_lib.tex(,578) @expansion{} x,y,
../singular_texi/./d2t_singular/matrix_lib.tex(,579) @expansion{} 0,z 
../singular_texi/./d2t_singular/matrix_lib.tex(,580) print(tensor(A,B));
../singular_texi/./d2t_singular/matrix_lib.tex(,581) @expansion{} x, y, 2x,2y,3x,3y,
../singular_texi/./d2t_singular/matrix_lib.tex(,582) @expansion{} 0, z, 0, 2z,0, 3z,
../singular_texi/./d2t_singular/matrix_lib.tex(,583) @expansion{} 4x,4y,5x,5y,6x,6y,
../singular_texi/./d2t_singular/matrix_lib.tex(,584) @expansion{} 0, 4z,0, 5z,0, 6z,
../singular_texi/./d2t_singular/matrix_lib.tex(,585) @expansion{} 7x,7y,8x,8y,9x,9y,
../singular_texi/./d2t_singular/matrix_lib.tex(,586) @expansion{} 0, 7z,0, 8z,0, 9z 
../singular_texi/./d2t_singular/matrix_lib.tex(,587) @c end example tensor d2t_singular/matrix_lib.doc:449
../singular_texi/./d2t_singular/matrix_lib.tex(,588) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,589) @c ---end content tensor---
../singular_texi/./d2t_singular/matrix_lib.tex(,590) 
../singular_texi/./d2t_singular/matrix_lib.tex(,591) @c ------------------- unitmat -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,592) @node unitmat, gauss_col, tensor, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,593) @subsubsection unitmat
../singular_texi/./d2t_singular/matrix_lib.tex(,594) @cindex unitmat
../singular_texi/./d2t_singular/matrix_lib.tex(,595) @c ---content unitmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,596) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,597) 
../singular_texi/./d2t_singular/matrix_lib.tex(,598) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,599) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,600) unitmat(n); n integer >= 0
../singular_texi/./d2t_singular/matrix_lib.tex(,601) 
../singular_texi/./d2t_singular/matrix_lib.tex(,602) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,603) nxn unit matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,604) 
../singular_texi/./d2t_singular/matrix_lib.tex(,605) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,606) needs a basering, diagonal entries are numbers (=1) in the basering
../singular_texi/./d2t_singular/matrix_lib.tex(,607) 
../singular_texi/./d2t_singular/matrix_lib.tex(,608) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,609) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,610) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,611) @c reused example unitmat d2t_singular/matrix_lib.doc:481 
../singular_texi/./d2t_singular/matrix_lib.tex(,612) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,613) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,614) print(xyz*unitmat(4));
../singular_texi/./d2t_singular/matrix_lib.tex(,615) @expansion{} xyz,0,  0,  0, 
../singular_texi/./d2t_singular/matrix_lib.tex(,616) @expansion{} 0,  xyz,0,  0, 
../singular_texi/./d2t_singular/matrix_lib.tex(,617) @expansion{} 0,  0,  xyz,0, 
../singular_texi/./d2t_singular/matrix_lib.tex(,618) @expansion{} 0,  0,  0,  xyz
../singular_texi/./d2t_singular/matrix_lib.tex(,619) print(unitmat(5));
../singular_texi/./d2t_singular/matrix_lib.tex(,620) @expansion{} 1,0,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,621) @expansion{} 0,1,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,622) @expansion{} 0,0,1,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,623) @expansion{} 0,0,0,1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,624) @expansion{} 0,0,0,0,1 
../singular_texi/./d2t_singular/matrix_lib.tex(,625) @c end example unitmat d2t_singular/matrix_lib.doc:481
../singular_texi/./d2t_singular/matrix_lib.tex(,626) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,627) @c ---end content unitmat---
../singular_texi/./d2t_singular/matrix_lib.tex(,628) 
../singular_texi/./d2t_singular/matrix_lib.tex(,629) @c ------------------- gauss_col -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,630) @node gauss_col, gauss_row, unitmat, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,631) @subsubsection gauss_col
../singular_texi/./d2t_singular/matrix_lib.tex(,632) @cindex gauss_col
../singular_texi/./d2t_singular/matrix_lib.tex(,633) @c ---content gauss_col---
../singular_texi/./d2t_singular/matrix_lib.tex(,634) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,635) 
../singular_texi/./d2t_singular/matrix_lib.tex(,636) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,637) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,638) gauss_col(A[,e]); A a matrix, e any type
../singular_texi/./d2t_singular/matrix_lib.tex(,639) 
../singular_texi/./d2t_singular/matrix_lib.tex(,640) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,641) - a matrix B, if called with one argument; B is the complete column-
../singular_texi/./d2t_singular/matrix_lib.tex(,642) reduced upper-triangular normal form of A if A is constant,
../singular_texi/./d2t_singular/matrix_lib.tex(,643) (resp. as far as this is possible if A is a polynomial matrix;
../singular_texi/./d2t_singular/matrix_lib.tex(,644) no division by polynomials).
../singular_texi/./d2t_singular/matrix_lib.tex(,645) @* - a list L of two matrices, if called with two arguments;
../singular_texi/./d2t_singular/matrix_lib.tex(,646) L satisfies L[1] = A * L[2] with L[1] the column-reduced form of A
../singular_texi/./d2t_singular/matrix_lib.tex(,647) and L[2] the transformation matrix.
../singular_texi/./d2t_singular/matrix_lib.tex(,648) 
../singular_texi/./d2t_singular/matrix_lib.tex(,649) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,650) * The procedure just applies interred to A with ordering (C,dp).
../singular_texi/./d2t_singular/matrix_lib.tex(,651) The transformation matrix is obtained by applying 'lift'.
../singular_texi/./d2t_singular/matrix_lib.tex(,652) This should be faster than the procedure colred.
../singular_texi/./d2t_singular/matrix_lib.tex(,653) @* * It should only be used with exact coefficient field (there is no
../singular_texi/./d2t_singular/matrix_lib.tex(,654) pivoting and rounding error treatment).
../singular_texi/./d2t_singular/matrix_lib.tex(,655) @* * Parameters are allowed. Hence, if the entries of A are parameters,
../singular_texi/./d2t_singular/matrix_lib.tex(,656) B is the column-reduced form of A over the rational function field.
../singular_texi/./d2t_singular/matrix_lib.tex(,657) 
../singular_texi/./d2t_singular/matrix_lib.tex(,658) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,659) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,660) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,661) @c reused example gauss_col d2t_singular/matrix_lib.doc:522 
../singular_texi/./d2t_singular/matrix_lib.tex(,662) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,663) ring r=(0,a,b),(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,664) matrix m[8][6]=
../singular_texi/./d2t_singular/matrix_lib.tex(,665) 0,    2*C, 0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,666) 0,    -4*C,a*A,  0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,667) b*B,  -A,  0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,668) -A,   B,   0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,669) -4*C, 0,   B,    2,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,670) 2*A,  B,   0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,671) 0,    3*B, 0,    0,  2b,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,672) 0,    AB,  0,    2*A,A,   2a;"";
../singular_texi/./d2t_singular/matrix_lib.tex(,673) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,674) list L=gauss_col(m,1);
../singular_texi/./d2t_singular/matrix_lib.tex(,675) print(L[1]);
../singular_texi/./d2t_singular/matrix_lib.tex(,676) @expansion{} 0,0,2*C, 0,       0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,677) @expansion{} A,0,-4*C,0,       0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,678) @expansion{} 0,0,-A,  (1/2b)*B,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,679) @expansion{} 0,0,B,   -1/2*A,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,680) @expansion{} 0,1,0,   0,       0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,681) @expansion{} 0,0,B,   A,       0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,682) @expansion{} 0,0,0,   0,       1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,683) @expansion{} 0,0,0,   0,       0,1 
../singular_texi/./d2t_singular/matrix_lib.tex(,684) print(L[2]);
../singular_texi/./d2t_singular/matrix_lib.tex(,685) @expansion{} 0,         0,        0,               1/2,      0,         0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,686) @expansion{} 0,         0,        1,               0,        0,         0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,687) @expansion{} 1/(a),     0,        0,               0,        0,         0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,688) @expansion{} -1/(2a)*B, 1/2,      0,               C,        0,         0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,689) @expansion{} 0,         0,        -3/(2b)*B,       0,        1/(2b),    0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,690) @expansion{} 1/(2a2)*AB,-1/(2a)*A,(-2b+3)/(4ab)*AB,-1/(a)*AC,-1/(4ab)*A,1/(2a)
../singular_texi/./d2t_singular/matrix_lib.tex(,691) ring S=0,x,(c,dp);
../singular_texi/./d2t_singular/matrix_lib.tex(,692) matrix A[5][4] =
../singular_texi/./d2t_singular/matrix_lib.tex(,693) 3, 1, 1, 1,
../singular_texi/./d2t_singular/matrix_lib.tex(,694) 13, 8, 6,-7,
../singular_texi/./d2t_singular/matrix_lib.tex(,695) 14,10, 6,-7,
../singular_texi/./d2t_singular/matrix_lib.tex(,696) 7, 4, 3,-3,
../singular_texi/./d2t_singular/matrix_lib.tex(,697) 2, 1, 0, 3;
../singular_texi/./d2t_singular/matrix_lib.tex(,698) print(gauss_col(A));
../singular_texi/./d2t_singular/matrix_lib.tex(,699) @expansion{} 8/9,-5/9,-1/3,7/9,
../singular_texi/./d2t_singular/matrix_lib.tex(,700) @expansion{} 1,  0,   0,   0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,701) @expansion{} 0,  1,   0,   0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,702) @expansion{} 0,  0,   1,   0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,703) @expansion{} 0,  0,   0,   1   
../singular_texi/./d2t_singular/matrix_lib.tex(,704) @c end example gauss_col d2t_singular/matrix_lib.doc:522
../singular_texi/./d2t_singular/matrix_lib.tex(,705) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,706) @c inserted refs from d2t_singular/matrix_lib.doc:547
../singular_texi/./d2t_singular/matrix_lib.tex(,714) @strong{See also:}
../singular_texi/./d2t_singular/matrix_lib.tex(,715) @ref{colred}.
../singular_texi/./d2t_singular/matrix_lib.tex(,717) @c end inserted refs from d2t_singular/matrix_lib.doc:547
../singular_texi/./d2t_singular/matrix_lib.tex(,718) 
../singular_texi/./d2t_singular/matrix_lib.tex(,719) @c ---end content gauss_col---
../singular_texi/./d2t_singular/matrix_lib.tex(,720) 
../singular_texi/./d2t_singular/matrix_lib.tex(,721) @c ------------------- gauss_row -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,722) @node gauss_row, addcol, gauss_col, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,723) @subsubsection gauss_row
../singular_texi/./d2t_singular/matrix_lib.tex(,724) @cindex gauss_row
../singular_texi/./d2t_singular/matrix_lib.tex(,725) @c ---content gauss_row---
../singular_texi/./d2t_singular/matrix_lib.tex(,726) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,727) 
../singular_texi/./d2t_singular/matrix_lib.tex(,728) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,729) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,730) gauss_row(A [,e]); A matrix, e any type
../singular_texi/./d2t_singular/matrix_lib.tex(,731) 
../singular_texi/./d2t_singular/matrix_lib.tex(,732) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,733) - a matrix B, if called with one argument; B is the complete row-
../singular_texi/./d2t_singular/matrix_lib.tex(,734) reduced lower-triangular normal form of A if A is constant,
../singular_texi/./d2t_singular/matrix_lib.tex(,735) (resp. as far as this is possible if A is a polynomial matrix;
../singular_texi/./d2t_singular/matrix_lib.tex(,736) no division by polynomials).
../singular_texi/./d2t_singular/matrix_lib.tex(,737) @* - a list L of two matrices, if called with two arguments;
../singular_texi/./d2t_singular/matrix_lib.tex(,738) L satisfies L[1] = L[2] * A with L[1] the row-reduced form of A
../singular_texi/./d2t_singular/matrix_lib.tex(,739) and L[2] the transformation matrix.
../singular_texi/./d2t_singular/matrix_lib.tex(,740) 
../singular_texi/./d2t_singular/matrix_lib.tex(,741) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,742) * This procedure just applies gauss_col to the transposed matrix.
../singular_texi/./d2t_singular/matrix_lib.tex(,743) The transformation matrix is obtained by applying lift.
../singular_texi/./d2t_singular/matrix_lib.tex(,744) This should be faster than the procedure rowred.
../singular_texi/./d2t_singular/matrix_lib.tex(,745) @* * It should only be used with exact coefficient field (there is no
../singular_texi/./d2t_singular/matrix_lib.tex(,746) pivoting and rounding error treatment).
../singular_texi/./d2t_singular/matrix_lib.tex(,747) @* * Parameters are allowed. Hence, if the entries of A are parameters,
../singular_texi/./d2t_singular/matrix_lib.tex(,748) B is the row-reduced form of A over the rational function field.
../singular_texi/./d2t_singular/matrix_lib.tex(,749) 
../singular_texi/./d2t_singular/matrix_lib.tex(,750) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,751) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,752) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,753) @c reused example gauss_row d2t_singular/matrix_lib.doc:585 
../singular_texi/./d2t_singular/matrix_lib.tex(,754) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,755) ring r=(0,a,b),(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,756) matrix m[6][8]=
../singular_texi/./d2t_singular/matrix_lib.tex(,757) 0, 0,  b*B, -A,-4C,2A,0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,758) 2C,-4C,-A,B, 0,  B, 3B,AB,
../singular_texi/./d2t_singular/matrix_lib.tex(,759) 0,a*A,  0, 0, B,  0, 0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,760) 0, 0,  0, 0, 2,  0, 0, 2A,
../singular_texi/./d2t_singular/matrix_lib.tex(,761) 0, 0,  0, 0, 0,  0, 2b, A,
../singular_texi/./d2t_singular/matrix_lib.tex(,762) 0, 0,  0, 0, 0,  0, 0, 2a;"";
../singular_texi/./d2t_singular/matrix_lib.tex(,763) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,764) print(gauss_row(m));"";
../singular_texi/./d2t_singular/matrix_lib.tex(,765) @expansion{} 0,  A,   0,       0,     0,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,766) @expansion{} 0,  0,   0,       0,     1,0,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,767) @expansion{} 2*C,-4*C,-A,      B,     0,B,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,768) @expansion{} 0,  0,   (1/2b)*B,-1/2*A,0,A,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,769) @expansion{} 0,  0,   0,       0,     0,0,1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,770) @expansion{} 0,  0,   0,       0,     0,0,0,1 
../singular_texi/./d2t_singular/matrix_lib.tex(,771) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,772) ring S=0,x,dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,773) matrix A[4][5] =  3, 1,1,-1,2,
../singular_texi/./d2t_singular/matrix_lib.tex(,774) 13, 8,6,-7,1,
../singular_texi/./d2t_singular/matrix_lib.tex(,775) 14,10,6,-7,1,
../singular_texi/./d2t_singular/matrix_lib.tex(,776) 7, 4,3,-3,3;
../singular_texi/./d2t_singular/matrix_lib.tex(,777) list L=gauss_row(A,1);
../singular_texi/./d2t_singular/matrix_lib.tex(,778) print(L[1]);
../singular_texi/./d2t_singular/matrix_lib.tex(,779) @expansion{} 1/2,-7/3,-19/6,5/6,
../singular_texi/./d2t_singular/matrix_lib.tex(,780) @expansion{} 1,  0,   0,    0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,781) @expansion{} 0,  1,   0,    0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,782) @expansion{} 0,  0,   1,    0,  
../singular_texi/./d2t_singular/matrix_lib.tex(,783) @expansion{} 0,  0,   0,    1   
../singular_texi/./d2t_singular/matrix_lib.tex(,784) print(L[2]);
../singular_texi/./d2t_singular/matrix_lib.tex(,785) @expansion{} 0,   -6,  -5,  1,   
../singular_texi/./d2t_singular/matrix_lib.tex(,786) @expansion{} -1/2,2/3, -1/6,-1/6,
../singular_texi/./d2t_singular/matrix_lib.tex(,787) @expansion{} 1/2, -5/3,-5/6,1/6, 
../singular_texi/./d2t_singular/matrix_lib.tex(,788) @expansion{} 0,   13/3,11/3,-1/3 
../singular_texi/./d2t_singular/matrix_lib.tex(,789) @c end example gauss_row d2t_singular/matrix_lib.doc:585
../singular_texi/./d2t_singular/matrix_lib.tex(,790) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,791) @c inserted refs from d2t_singular/matrix_lib.doc:606
../singular_texi/./d2t_singular/matrix_lib.tex(,799) @strong{See also:}
../singular_texi/./d2t_singular/matrix_lib.tex(,800) @ref{rowred}.
../singular_texi/./d2t_singular/matrix_lib.tex(,802) @c end inserted refs from d2t_singular/matrix_lib.doc:606
../singular_texi/./d2t_singular/matrix_lib.tex(,803) 
../singular_texi/./d2t_singular/matrix_lib.tex(,804) @c ---end content gauss_row---
../singular_texi/./d2t_singular/matrix_lib.tex(,805) 
../singular_texi/./d2t_singular/matrix_lib.tex(,806) @c ------------------- addcol -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,807) @node addcol, addrow, gauss_row, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,808) @subsubsection addcol
../singular_texi/./d2t_singular/matrix_lib.tex(,809) @cindex addcol
../singular_texi/./d2t_singular/matrix_lib.tex(,810) @c ---content addcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,811) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,812) 
../singular_texi/./d2t_singular/matrix_lib.tex(,813) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,814) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,815) addcol(A,c1,p,c2); A matrix, p poly, c1, c2 positive integers
../singular_texi/./d2t_singular/matrix_lib.tex(,816) 
../singular_texi/./d2t_singular/matrix_lib.tex(,817) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,818) matrix, A being modified by adding p times column c1 to column c2
../singular_texi/./d2t_singular/matrix_lib.tex(,819) 
../singular_texi/./d2t_singular/matrix_lib.tex(,820) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,821) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,822) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,823) @c reused example addcol d2t_singular/matrix_lib.doc:629 
../singular_texi/./d2t_singular/matrix_lib.tex(,824) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,825) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,826) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,827) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,828) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,829) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,830) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,831) print(addcol(A,1,xy,2));
../singular_texi/./d2t_singular/matrix_lib.tex(,832) @expansion{} 1,xy+2, 3,
../singular_texi/./d2t_singular/matrix_lib.tex(,833) @expansion{} 4,4xy+5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,834) @expansion{} 7,7xy+8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,835) @c end example addcol d2t_singular/matrix_lib.doc:629
../singular_texi/./d2t_singular/matrix_lib.tex(,836) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,837) @c ---end content addcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,838) 
../singular_texi/./d2t_singular/matrix_lib.tex(,839) @c ------------------- addrow -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,840) @node addrow, multcol, addcol, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,841) @subsubsection addrow
../singular_texi/./d2t_singular/matrix_lib.tex(,842) @cindex addrow
../singular_texi/./d2t_singular/matrix_lib.tex(,843) @c ---content addrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,844) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,845) 
../singular_texi/./d2t_singular/matrix_lib.tex(,846) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,847) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,848) addcol(A,r1,p,r2); A matrix, p poly, r1, r2 positive integers
../singular_texi/./d2t_singular/matrix_lib.tex(,849) 
../singular_texi/./d2t_singular/matrix_lib.tex(,850) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,851) matrix, A being modified by adding p times row r1 to row r2
../singular_texi/./d2t_singular/matrix_lib.tex(,852) 
../singular_texi/./d2t_singular/matrix_lib.tex(,853) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,854) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,855) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,856) @c reused example addrow d2t_singular/matrix_lib.doc:656 
../singular_texi/./d2t_singular/matrix_lib.tex(,857) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,858) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,859) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,860) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,861) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,862) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,863) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,864) print(addrow(A,1,xy,3));
../singular_texi/./d2t_singular/matrix_lib.tex(,865) @expansion{} 1,   2,    3,   
../singular_texi/./d2t_singular/matrix_lib.tex(,866) @expansion{} 4,   5,    6,   
../singular_texi/./d2t_singular/matrix_lib.tex(,867) @expansion{} xy+7,2xy+8,3xy+9
../singular_texi/./d2t_singular/matrix_lib.tex(,868) @c end example addrow d2t_singular/matrix_lib.doc:656
../singular_texi/./d2t_singular/matrix_lib.tex(,869) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,870) @c ---end content addrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,871) 
../singular_texi/./d2t_singular/matrix_lib.tex(,872) @c ------------------- multcol -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,873) @node multcol, multrow, addrow, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,874) @subsubsection multcol
../singular_texi/./d2t_singular/matrix_lib.tex(,875) @cindex multcol
../singular_texi/./d2t_singular/matrix_lib.tex(,876) @c ---content multcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,877) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,878) 
../singular_texi/./d2t_singular/matrix_lib.tex(,879) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,880) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,881) addcol(A,c,p); A matrix, p poly, c positive integer
../singular_texi/./d2t_singular/matrix_lib.tex(,882) 
../singular_texi/./d2t_singular/matrix_lib.tex(,883) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,884) matrix, A being modified by multiplying column c with p
../singular_texi/./d2t_singular/matrix_lib.tex(,885) 
../singular_texi/./d2t_singular/matrix_lib.tex(,886) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,887) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,888) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,889) @c reused example multcol d2t_singular/matrix_lib.doc:683 
../singular_texi/./d2t_singular/matrix_lib.tex(,890) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,891) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,892) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,893) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,894) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,895) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,896) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,897) print(multcol(A,2,xy));
../singular_texi/./d2t_singular/matrix_lib.tex(,898) @expansion{} 1,2xy,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,899) @expansion{} 4,5xy,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,900) @expansion{} 7,8xy,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,901) @c end example multcol d2t_singular/matrix_lib.doc:683
../singular_texi/./d2t_singular/matrix_lib.tex(,902) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,903) @c ---end content multcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,904) 
../singular_texi/./d2t_singular/matrix_lib.tex(,905) @c ------------------- multrow -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,906) @node multrow, permcol, multcol, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,907) @subsubsection multrow
../singular_texi/./d2t_singular/matrix_lib.tex(,908) @cindex multrow
../singular_texi/./d2t_singular/matrix_lib.tex(,909) @c ---content multrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,910) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,911) 
../singular_texi/./d2t_singular/matrix_lib.tex(,912) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,913) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,914) multrow(A,r,p); A matrix, p poly, r positive integer
../singular_texi/./d2t_singular/matrix_lib.tex(,915) 
../singular_texi/./d2t_singular/matrix_lib.tex(,916) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,917) matrix, A being modified by multiplying row r with p
../singular_texi/./d2t_singular/matrix_lib.tex(,918) 
../singular_texi/./d2t_singular/matrix_lib.tex(,919) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,920) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,921) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,922) @c reused example multrow d2t_singular/matrix_lib.doc:710 
../singular_texi/./d2t_singular/matrix_lib.tex(,923) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,924) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,925) matrix A[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,926) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,927) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,928) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,929) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,930) print(multrow(A,2,xy));
../singular_texi/./d2t_singular/matrix_lib.tex(,931) @expansion{} 1,  2,  3,  
../singular_texi/./d2t_singular/matrix_lib.tex(,932) @expansion{} 4xy,5xy,6xy,
../singular_texi/./d2t_singular/matrix_lib.tex(,933) @expansion{} 7,  8,  9   
../singular_texi/./d2t_singular/matrix_lib.tex(,934) @c end example multrow d2t_singular/matrix_lib.doc:710
../singular_texi/./d2t_singular/matrix_lib.tex(,935) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,936) @c ---end content multrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,937) 
../singular_texi/./d2t_singular/matrix_lib.tex(,938) @c ------------------- permcol -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,939) @node permcol, permrow, multrow, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,940) @subsubsection permcol
../singular_texi/./d2t_singular/matrix_lib.tex(,941) @cindex permcol
../singular_texi/./d2t_singular/matrix_lib.tex(,942) @c ---content permcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,943) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,944) 
../singular_texi/./d2t_singular/matrix_lib.tex(,945) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,946) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,947) permcol(A,c1,c2); A matrix, c1,c2 positive integers
../singular_texi/./d2t_singular/matrix_lib.tex(,948) 
../singular_texi/./d2t_singular/matrix_lib.tex(,949) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,950) matrix, A being modified by permuting column c1 and c2
../singular_texi/./d2t_singular/matrix_lib.tex(,951) 
../singular_texi/./d2t_singular/matrix_lib.tex(,952) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,953) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,954) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,955) @c reused example permcol d2t_singular/matrix_lib.doc:737 
../singular_texi/./d2t_singular/matrix_lib.tex(,956) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,957) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,958) matrix A[3][3]=1,x,3,4,y,6,7,z,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,959) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,960) @expansion{} 1,x,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,961) @expansion{} 4,y,6,
../singular_texi/./d2t_singular/matrix_lib.tex(,962) @expansion{} 7,z,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,963) print(permcol(A,2,3));
../singular_texi/./d2t_singular/matrix_lib.tex(,964) @expansion{} 1,3,x,
../singular_texi/./d2t_singular/matrix_lib.tex(,965) @expansion{} 4,6,y,
../singular_texi/./d2t_singular/matrix_lib.tex(,966) @expansion{} 7,9,z 
../singular_texi/./d2t_singular/matrix_lib.tex(,967) @c end example permcol d2t_singular/matrix_lib.doc:737
../singular_texi/./d2t_singular/matrix_lib.tex(,968) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,969) @c ---end content permcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,970) 
../singular_texi/./d2t_singular/matrix_lib.tex(,971) @c ------------------- permrow -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,972) @node permrow, rowred, permcol, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,973) @subsubsection permrow
../singular_texi/./d2t_singular/matrix_lib.tex(,974) @cindex permrow
../singular_texi/./d2t_singular/matrix_lib.tex(,975) @c ---content permrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,976) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,977) 
../singular_texi/./d2t_singular/matrix_lib.tex(,978) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,979) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,980) permrow(A,r1,r2); A matrix, r1,r2 positive integers
../singular_texi/./d2t_singular/matrix_lib.tex(,981) 
../singular_texi/./d2t_singular/matrix_lib.tex(,982) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,983) matrix, A being modified by permuting row r1 and r2
../singular_texi/./d2t_singular/matrix_lib.tex(,984) 
../singular_texi/./d2t_singular/matrix_lib.tex(,985) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,986) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,987) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,988) @c reused example permrow d2t_singular/matrix_lib.doc:764 
../singular_texi/./d2t_singular/matrix_lib.tex(,989) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,990) ring r=32003,(x,y,z),lp;
../singular_texi/./d2t_singular/matrix_lib.tex(,991) matrix A[3][3]=1,2,3,x,y,z,7,8,9;
../singular_texi/./d2t_singular/matrix_lib.tex(,992) print(A);
../singular_texi/./d2t_singular/matrix_lib.tex(,993) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,994) @expansion{} x,y,z,
../singular_texi/./d2t_singular/matrix_lib.tex(,995) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,996) print(permrow(A,2,1));
../singular_texi/./d2t_singular/matrix_lib.tex(,997) @expansion{} x,y,z,
../singular_texi/./d2t_singular/matrix_lib.tex(,998) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/matrix_lib.tex(,999) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/matrix_lib.tex(,1000) @c end example permrow d2t_singular/matrix_lib.doc:764
../singular_texi/./d2t_singular/matrix_lib.tex(,1001) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1002) @c ---end content permrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,1003) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1004) @c ------------------- rowred -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,1005) @node rowred, colred, permrow, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1006) @subsubsection rowred
../singular_texi/./d2t_singular/matrix_lib.tex(,1007) @cindex rowred
../singular_texi/./d2t_singular/matrix_lib.tex(,1008) @c ---content rowred---
../singular_texi/./d2t_singular/matrix_lib.tex(,1009) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,1010) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1011) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,1012) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1013) rowred(A[,e]); A matrix, e any type
../singular_texi/./d2t_singular/matrix_lib.tex(,1014) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1015) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1016) - a matrix B, being the row reduced form of A, if rowred is called
../singular_texi/./d2t_singular/matrix_lib.tex(,1017) with one argument.
../singular_texi/./d2t_singular/matrix_lib.tex(,1018) @*(as far as this is possible over the polynomial ring; no division
../singular_texi/./d2t_singular/matrix_lib.tex(,1019) by polynomials)
../singular_texi/./d2t_singular/matrix_lib.tex(,1020) @* - a list L of two matrices, such that L[1] = L[2] * A with L[1]
../singular_texi/./d2t_singular/matrix_lib.tex(,1021) the row-reduced form of A and L[2] the transformation matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,1022) (if rowred is called with two arguments).
../singular_texi/./d2t_singular/matrix_lib.tex(,1023) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1024) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1025) * This procedure is designed for teaching purposes mainly.
../singular_texi/./d2t_singular/matrix_lib.tex(,1026) @* * The straight forward Gaussian algorithm is implemented in the
../singular_texi/./d2t_singular/matrix_lib.tex(,1027) library (no standard basis computation).
../singular_texi/./d2t_singular/matrix_lib.tex(,1028) @*The transformation matrix is obtained by concatenating a unit
../singular_texi/./d2t_singular/matrix_lib.tex(,1029) matrix to A. proc gauss_row should be faster.
../singular_texi/./d2t_singular/matrix_lib.tex(,1030) @* * It should only be used with exact coefficient field (there is no
../singular_texi/./d2t_singular/matrix_lib.tex(,1031) pivoting) over the polynomial ring (ordering lp or dp).
../singular_texi/./d2t_singular/matrix_lib.tex(,1032) @* * Parameters are allowed. Hence, if the entries of A are parameters
../singular_texi/./d2t_singular/matrix_lib.tex(,1033) the computation takes place over the field of rational functions.
../singular_texi/./d2t_singular/matrix_lib.tex(,1034) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1035) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,1036) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1037) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1038) @c reused example rowred d2t_singular/matrix_lib.doc:808 
../singular_texi/./d2t_singular/matrix_lib.tex(,1039) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,1040) ring r=(0,a,b),(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,1041) matrix m[6][8]=
../singular_texi/./d2t_singular/matrix_lib.tex(,1042) 0, 0,  b*B, -A,-4C,2A,0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1043) 2C,-4C,-A,B, 0,  B, 3B,AB,
../singular_texi/./d2t_singular/matrix_lib.tex(,1044) 0,a*A,  0, 0, B,  0, 0, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1045) 0, 0,  0, 0, 2,  0, 0, 2A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1046) 0, 0,  0, 0, 0,  0, 2b, A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1047) 0, 0,  0, 0, 0,  0, 0, 2a;"";
../singular_texi/./d2t_singular/matrix_lib.tex(,1048) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,1049) print(rowred(m));"";
../singular_texi/./d2t_singular/matrix_lib.tex(,1050) @expansion{} 0,  0,    0,    0, 1,0,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1051) @expansion{} 0,  0,    0,    0, 0,0,  1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1052) @expansion{} 0,  0,    0,    0, 0,0,  0,1,
../singular_texi/./d2t_singular/matrix_lib.tex(,1053) @expansion{} 0,  0,    (b)*B,-A,0,2*A,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1054) @expansion{} 2*C,-4*C, -A,   B, 0,B,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1055) @expansion{} 0,  (a)*A,0,    0, 0,0,  0,0 
../singular_texi/./d2t_singular/matrix_lib.tex(,1056) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,1057) list L=rowred(m,1);
../singular_texi/./d2t_singular/matrix_lib.tex(,1058) print(L[1]);
../singular_texi/./d2t_singular/matrix_lib.tex(,1059) @expansion{} 0,  0,    0,    0, 1,0,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1060) @expansion{} 0,  0,    0,    0, 0,0,  1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1061) @expansion{} 0,  0,    0,    0, 0,0,  0,1,
../singular_texi/./d2t_singular/matrix_lib.tex(,1062) @expansion{} 0,  0,    (b)*B,-A,0,2*A,0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1063) @expansion{} 2*C,-4*C, -A,   B, 0,B,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1064) @expansion{} 0,  (a)*A,0,    0, 0,0,  0,0 
../singular_texi/./d2t_singular/matrix_lib.tex(,1065) print(L[2]);
../singular_texi/./d2t_singular/matrix_lib.tex(,1066) @expansion{} 0,0,0,1/2,   0,        -1/(2a)*A,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1067) @expansion{} 0,0,0,0,     1/(2b),   -1/(4ab)*A,      
../singular_texi/./d2t_singular/matrix_lib.tex(,1068) @expansion{} 0,0,0,0,     0,        1/(2a),          
../singular_texi/./d2t_singular/matrix_lib.tex(,1069) @expansion{} 1,0,0,2*C,   0,        -2/(a)*AC,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1070) @expansion{} 0,1,0,0,     -3/(2b)*B,(-2b+3)/(4ab)*AB,
../singular_texi/./d2t_singular/matrix_lib.tex(,1071) @expansion{} 0,0,1,-1/2*B,0,        1/(2a)*AB        
../singular_texi/./d2t_singular/matrix_lib.tex(,1072) @c end example rowred d2t_singular/matrix_lib.doc:808
../singular_texi/./d2t_singular/matrix_lib.tex(,1073) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1074) @c inserted refs from d2t_singular/matrix_lib.doc:824
../singular_texi/./d2t_singular/matrix_lib.tex(,1082) @strong{See also:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1083) @ref{gauss_row}.
../singular_texi/./d2t_singular/matrix_lib.tex(,1085) @c end inserted refs from d2t_singular/matrix_lib.doc:824
../singular_texi/./d2t_singular/matrix_lib.tex(,1086) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1087) @c ---end content rowred---
../singular_texi/./d2t_singular/matrix_lib.tex(,1088) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1089) @c ------------------- colred -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,1090) @node colred, rm_unitrow, rowred, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1091) @subsubsection colred
../singular_texi/./d2t_singular/matrix_lib.tex(,1092) @cindex colred
../singular_texi/./d2t_singular/matrix_lib.tex(,1093) @c ---content colred---
../singular_texi/./d2t_singular/matrix_lib.tex(,1094) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,1095) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1096) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,1097) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1098) colred(A[,e]); A matrix, e any type
../singular_texi/./d2t_singular/matrix_lib.tex(,1099) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1100) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1101) - a matrix B, being the column reduced form of A, if colred is
../singular_texi/./d2t_singular/matrix_lib.tex(,1102) called with one argument.
../singular_texi/./d2t_singular/matrix_lib.tex(,1103) @*(as far as this is possible over the polynomial ring;
../singular_texi/./d2t_singular/matrix_lib.tex(,1104) no division by polynomials)
../singular_texi/./d2t_singular/matrix_lib.tex(,1105) @* - a list L of two matrices, such that L[1] = A * L[2] with L[1]
../singular_texi/./d2t_singular/matrix_lib.tex(,1106) the column-reduced form of A and L[2] the transformation matrix
../singular_texi/./d2t_singular/matrix_lib.tex(,1107) (if colred is called with two arguments).
../singular_texi/./d2t_singular/matrix_lib.tex(,1108) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1109) @item @strong{Note:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1110) * This procedure is designed for teaching purposes mainly.
../singular_texi/./d2t_singular/matrix_lib.tex(,1111) @* * It applies rowred to the transposed matrix.
../singular_texi/./d2t_singular/matrix_lib.tex(,1112) proc gauss_col should be faster.
../singular_texi/./d2t_singular/matrix_lib.tex(,1113) @* * It should only be used with exact coefficient field (there is no
../singular_texi/./d2t_singular/matrix_lib.tex(,1114) pivoting) over the polynomial ring (ordering lp or dp).
../singular_texi/./d2t_singular/matrix_lib.tex(,1115) @* * Parameters are allowed. Hence, if the entries of A are parameters
../singular_texi/./d2t_singular/matrix_lib.tex(,1116) the computation takes place over the field of rational functions.
../singular_texi/./d2t_singular/matrix_lib.tex(,1117) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1118) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,1119) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1120) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1121) @c reused example colred d2t_singular/matrix_lib.doc:862 
../singular_texi/./d2t_singular/matrix_lib.tex(,1122) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,1123) ring r=(0,a,b),(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,1124) matrix m[8][6]=
../singular_texi/./d2t_singular/matrix_lib.tex(,1125) 0,    2*C, 0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1126) 0,    -4*C,a*A,  0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1127) b*B,  -A,  0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1128) -A,   B,   0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1129) -4*C, 0,   B,    2,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1130) 2*A,  B,   0,    0,  0,   0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1131) 0,    3*B, 0,    0,  2b,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1132) 0,    AB,  0,    2*A,A,   2a;"";
../singular_texi/./d2t_singular/matrix_lib.tex(,1133) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,1134) print(colred(m));"";
../singular_texi/./d2t_singular/matrix_lib.tex(,1135) @expansion{} 0,0,0,0,    2*C, 0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1136) @expansion{} 0,0,0,0,    -4*C,(a)*A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1137) @expansion{} 0,0,0,(b)*B,-A,  0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1138) @expansion{} 0,0,0,-A,   B,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1139) @expansion{} 1,0,0,0,    0,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1140) @expansion{} 0,0,0,2*A,  B,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1141) @expansion{} 0,1,0,0,    0,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1142) @expansion{} 0,0,1,0,    0,   0     
../singular_texi/./d2t_singular/matrix_lib.tex(,1143) @expansion{} 
../singular_texi/./d2t_singular/matrix_lib.tex(,1144) list L=colred(m,1);
../singular_texi/./d2t_singular/matrix_lib.tex(,1145) print(L[1]);
../singular_texi/./d2t_singular/matrix_lib.tex(,1146) @expansion{} 0,0,0,0,    2*C, 0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1147) @expansion{} 0,0,0,0,    -4*C,(a)*A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1148) @expansion{} 0,0,0,(b)*B,-A,  0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1149) @expansion{} 0,0,0,-A,   B,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1150) @expansion{} 1,0,0,0,    0,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1151) @expansion{} 0,0,0,2*A,  B,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1152) @expansion{} 0,1,0,0,    0,   0,    
../singular_texi/./d2t_singular/matrix_lib.tex(,1153) @expansion{} 0,0,1,0,    0,   0     
../singular_texi/./d2t_singular/matrix_lib.tex(,1154) print(L[2]);
../singular_texi/./d2t_singular/matrix_lib.tex(,1155) @expansion{} 0,        0,         0,     1,        0,               0,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1156) @expansion{} 0,        0,         0,     0,        1,               0,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1157) @expansion{} 0,        0,         0,     0,        0,               1,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1158) @expansion{} 1/2,      0,         0,     2*C,      0,               -1/2*B,  
../singular_texi/./d2t_singular/matrix_lib.tex(,1159) @expansion{} 0,        1/(2b),    0,     0,        -3/(2b)*B,       0,       
../singular_texi/./d2t_singular/matrix_lib.tex(,1160) @expansion{} -1/(2a)*A,-1/(4ab)*A,1/(2a),-2/(a)*AC,(-2b+3)/(4ab)*AB,1/(2a)*AB
../singular_texi/./d2t_singular/matrix_lib.tex(,1161) @c end example colred d2t_singular/matrix_lib.doc:862
../singular_texi/./d2t_singular/matrix_lib.tex(,1162) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1163) @c inserted refs from d2t_singular/matrix_lib.doc:880
../singular_texi/./d2t_singular/matrix_lib.tex(,1171) @strong{See also:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1172) @ref{gauss_col}.
../singular_texi/./d2t_singular/matrix_lib.tex(,1174) @c end inserted refs from d2t_singular/matrix_lib.doc:880
../singular_texi/./d2t_singular/matrix_lib.tex(,1175) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1176) @c ---end content colred---
../singular_texi/./d2t_singular/matrix_lib.tex(,1177) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1178) @c ------------------- rm_unitrow -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,1179) @node rm_unitrow, rm_unitcol, colred, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1180) @subsubsection rm_unitrow
../singular_texi/./d2t_singular/matrix_lib.tex(,1181) @cindex rm_unitrow
../singular_texi/./d2t_singular/matrix_lib.tex(,1182) @c ---content rm_unitrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,1183) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,1184) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1185) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,1186) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1187) rm_unitrow(A); A matrix (being col-reduced)
../singular_texi/./d2t_singular/matrix_lib.tex(,1188) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1189) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1190) matrix, obtained from A by deleting unit rows (having just one 1
../singular_texi/./d2t_singular/matrix_lib.tex(,1191) and else 0 as entries) and associated columns
../singular_texi/./d2t_singular/matrix_lib.tex(,1192) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1193) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,1194) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1195) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1196) @c reused example rm_unitrow d2t_singular/matrix_lib.doc:904 
../singular_texi/./d2t_singular/matrix_lib.tex(,1197) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,1198) ring r=0,(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,1199) matrix m[8][6]=
../singular_texi/./d2t_singular/matrix_lib.tex(,1200) 0,0,  0,   0, 2C, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1201) 0,0,  0,   0, -4C,A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1202) A,-C2,0,   B, -A, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1203) 0,0,  1/2B,-A,B,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1204) 1,0,  0,   0, 0,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1205) 0,0,  0,   2A,B,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1206) 0,1,  0,   0, 0,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1207) 0,0,  1,   0, 0,  0;
../singular_texi/./d2t_singular/matrix_lib.tex(,1208) print(rm_unitrow(m));
../singular_texi/./d2t_singular/matrix_lib.tex(,1209) @expansion{} 0, 2C, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1210) @expansion{} 0, -4C,A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1211) @expansion{} B, -A, 0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1212) @expansion{} -A,B,  0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1213) @expansion{} 2A,B,  0 
../singular_texi/./d2t_singular/matrix_lib.tex(,1214) @c end example rm_unitrow d2t_singular/matrix_lib.doc:904
../singular_texi/./d2t_singular/matrix_lib.tex(,1215) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1216) @c ---end content rm_unitrow---
../singular_texi/./d2t_singular/matrix_lib.tex(,1217) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1218) @c ------------------- rm_unitcol -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,1219) @node rm_unitcol, headStand, rm_unitrow, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1220) @subsubsection rm_unitcol
../singular_texi/./d2t_singular/matrix_lib.tex(,1221) @cindex rm_unitcol
../singular_texi/./d2t_singular/matrix_lib.tex(,1222) @c ---content rm_unitcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,1223) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,1224) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1225) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,1226) @item @strong{Usage:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1227) rm_unitcol(A); A matrix (being row-reduced)
../singular_texi/./d2t_singular/matrix_lib.tex(,1228) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1229) @item @strong{Return:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1230) matrix, obtained from A by deleting unit columns (having just one 1
../singular_texi/./d2t_singular/matrix_lib.tex(,1231) and else 0 as entries) and associated rows
../singular_texi/./d2t_singular/matrix_lib.tex(,1232) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1233) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,1234) @strong{Example:}
../singular_texi/./d2t_singular/matrix_lib.tex(,1235) @smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1236) @c reused example rm_unitcol d2t_singular/matrix_lib.doc:939 
../singular_texi/./d2t_singular/matrix_lib.tex(,1237) LIB "matrix.lib";
../singular_texi/./d2t_singular/matrix_lib.tex(,1238) ring r=0,(A,B,C),dp;
../singular_texi/./d2t_singular/matrix_lib.tex(,1239) matrix m[6][8]=
../singular_texi/./d2t_singular/matrix_lib.tex(,1240) 0,  0,    A,   0, 1,0,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1241) 0,  0,  -C2,   0, 0,0,  1,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1242) 0,  0,    0,1/2B, 0,0,  0,1,
../singular_texi/./d2t_singular/matrix_lib.tex(,1243) 0,  0,    B,  -A, 0,2A, 0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1244) 2C,-4C,  -A,   B, 0,B,  0,0,
../singular_texi/./d2t_singular/matrix_lib.tex(,1245) 0,  A,    0,   0, 0,0,  0,0;
../singular_texi/./d2t_singular/matrix_lib.tex(,1246) print(rm_unitcol(m));
../singular_texi/./d2t_singular/matrix_lib.tex(,1247) @expansion{} 0, 0,  B, -A,2A,
../singular_texi/./d2t_singular/matrix_lib.tex(,1248) @expansion{} 2C,-4C,-A,B, B, 
../singular_texi/./d2t_singular/matrix_lib.tex(,1249) @expansion{} 0, A,  0, 0, 0  
../singular_texi/./d2t_singular/matrix_lib.tex(,1250) @c end example rm_unitcol d2t_singular/matrix_lib.doc:939
../singular_texi/./d2t_singular/matrix_lib.tex(,1251) @end smallexample
../singular_texi/./d2t_singular/matrix_lib.tex(,1252) @c ---end content rm_unitcol---
../singular_texi/./d2t_singular/matrix_lib.tex(,1253) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1254) @c ------------------- headStand -------------
../singular_texi/./d2t_singular/matrix_lib.tex(,1255) @node headStand,, rm_unitcol, matrix_lib
../singular_texi/./d2t_singular/matrix_lib.tex(,1256) @subsubsection headStand
../singular_texi/./d2t_singular/matrix_lib.tex(,1257) @cindex headStand
../singular_texi/./d2t_singular/matrix_lib.tex(,1258) @c ---content headStand---
../singular_texi/./d2t_singular/matrix_lib.tex(,1259) Procedure from library @code{matrix.lib} (@pxref{matrix_lib}).
../singular_texi/./d2t_singular/matrix_lib.tex(,1260) 
../singular_texi/./d2t_singular/matrix_lib.tex(,1261) @table @asis
../singular_texi/./d2t_singular/matrix_lib.tex(,1262) @end table
../singular_texi/./d2t_singular/matrix_lib.tex(,1263) @c ---end content headStand---
../singular_texi/singular.tex(,347) @c ---------------------------------------------------------
../singular_texi/singular.tex(,348) @node linalg_lib, , matrix_lib, Linear algebra
../singular_texi/singular.tex(,349) @subsection linalg_lib
../singular_texi/singular.tex(,350) @c include of docu for linalg.lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/linalg_lib.doc
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/linalg_lib.doc INSTEAD
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,4) @c library version: (1.10.2.15,2003/04/04)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,5) @c library file: ../Singular/LIB/linalg.lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,6) @cindex linalg.lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,7) @cindex linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,8) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,10) linalg.lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,12)   Algorithmic Linear Algebra
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,14) Ivor Saynisch (ivs@@math.tu-cottbus.de)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,15) @* Mathias Schulze (mschulze@@mathematik.uni-kl.de)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,16) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,17) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,18) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,19) @strong{Procedures:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,20) @menu
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,21) * inverse:: matrix, the inverse of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,22) * inverse_B:: list(matrix Inv,poly p),Inv*A=p*En ( using busadj(A) )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,23) * inverse_L:: list(matrix Inv,poly p),Inv*A=p*En ( using lift )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,24) * sym_gauss:: symmetric gaussian algorithm
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,25) * orthogonalize:: Gram-Schmidt orthogonalization
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,26) * diag_test:: test whether A can be diagonalized
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,27) * busadj:: coefficients of Adj(E*t-A) and coefficients of det(E*t-A)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,28) * charpoly:: characteristic polynomial of A ( using busadj(A) )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,29) * adjoint:: adjoint of A ( using busadj(A) )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,30) * det_B:: determinant of A ( using busadj(A) )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,31) * gaussred:: gaussian reduction: P*A=U*S, S a row reduced form of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,32) * gaussred_pivot:: gaussian reduction: P*A=U*S, uses row pivoting
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,33) * gauss_nf:: gaussian normal form of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,34) * mat_rk:: rank of constant matrix A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,35) * U_D_O:: P*A=U*D*O, P,D,U,O=permutation,diag,lower-,upper-triang
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,36) * pos_def:: test symmetric matrix for positive definiteness
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,37) * hessenberg:: Hessenberg form of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,38) * evnf:: eigenvalues normal form of (e[,m])
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,39) * eigenvals:: eigenvalues with multiplicities of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,40) * minipoly:: minimal polynomial of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,41) * jordan:: Jordan data of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,42) * jordanbasis:: Jordan basis and weight filtration of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,43) * jordanmatrix:: Jordan matrix with Jordan data (e,s,m)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,44) * jordannf:: Jordan normal form of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,45) @end menu
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,46) @c ---end content LibInfo---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,47) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,48) @c ------------------- inverse -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,49) @node inverse, inverse_B,, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,50) @subsubsection inverse
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,51) @cindex inverse
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,52) @c ---content inverse---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,53) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,54) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,55) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,56) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,57) inverse(A [,opt]); A a square matrix, opt integer
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,58) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,59) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,60) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,61)           a matrix:
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,62)           - the inverse matrix of A, if A is invertible;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,63)           - the 1x1 0-matrix if A is not invertible (in the polynomial ring!).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,64)           There are the following options:
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,65)           - opt=0 or not given: heuristically best option from below
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,66)           - opt=1 : apply std to (transpose(E,A)), ordering (C,dp).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,67)           - opt=2 : apply interred (transpose(E,A)), ordering (C,dp).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,68)           - opt=3 : apply lift(A,E), ordering (C,dp).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,69) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,70) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,71) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,72) parameters and minpoly are allowed; opt=2 is only correct for
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,73) matrices with entries in a field
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,74) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,75) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,76) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,77) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,78) @c skipped computation of example inverse d2t_singular/linalg_lib.doc:76 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,79) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,80) ring r=0,(x,y,z),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,81) matrix A[3][3]=
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,82) 1,4,3,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,83) 1,5,7,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,84) 0,4,17;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,85) print(inverse(A));"";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,86) matrix B[3][3]=
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,87) y+1,  x+y,    y,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,88) z,    z+1,    z,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,89) y+z+2,x+y+z+2,y+z+1;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,90) print(inverse(B));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,91) print(B*inverse(B));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,92) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,93) @c inserted refs from d2t_singular/linalg_lib.doc:92
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,102) @strong{See also:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,103) @ref{inverse_B};
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,104) @ref{inverse_L}.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,106) @c end inserted refs from d2t_singular/linalg_lib.doc:92
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,107) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,108) @c ---end content inverse---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,109) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,110) @c ------------------- inverse_B -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,111) @node inverse_B, inverse_L, inverse, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,112) @subsubsection inverse_B
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,113) @cindex inverse_B
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,114) @c ---content inverse_B---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,115) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,116) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,117) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,118) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,119) inverse_B(A); A = square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,120) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,121) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,122) list Inv with
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,123) @*- Inv[1] = matrix I and
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,124) @*- Inv[2] = poly p
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,125) @*such that I*A = unitmat(n)*p;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,126) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,127) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,128) p=1 if 1/det(A) is computable and p=det(A) if not;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,129) @*the computation uses busadj.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,130) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,131) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,132) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,133) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,134) @c skipped computation of example inverse_B d2t_singular/linalg_lib.doc:122 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,135) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,136) ring r=0,(x,y),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,137) matrix A[3][3]=x,y,1,1,x2,y,x,6,0;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,138) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,139) list Inv=inverse_B(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,140) print(Inv[1]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,141) print(Inv[2]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,142) print(Inv[1]*A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,143) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,144) @c inserted refs from d2t_singular/linalg_lib.doc:133
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,153) @strong{See also:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,154) @ref{inverse};
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,155) @ref{inverse_L}.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,157) @c end inserted refs from d2t_singular/linalg_lib.doc:133
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,158) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,159) @c ---end content inverse_B---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,160) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,161) @c ------------------- inverse_L -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,162) @node inverse_L, sym_gauss, inverse_B, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,163) @subsubsection inverse_L
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,164) @cindex inverse_L
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,165) @c ---content inverse_L---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,166) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,167) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,168) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,169) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,170) inverse_L(A); A = square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,171) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,172) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,173) list Inv representing a left inverse of A, i.e
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,174) @*- Inv[1] = matrix I and
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,175) @*- Inv[2] = poly p
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,176) @*such that I*A = unitmat(n)*p;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,177) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,178) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,179) p=1 if 1/det(A) is computable and p=det(A) if not;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,180) @*the computation computes first det(A) and then uses lift
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,181) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,182) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,183) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,184) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,185) @c skipped computation of example inverse_L d2t_singular/linalg_lib.doc:163 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,186) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,187) ring r=0,(x,y),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,188) matrix A[3][3]=x,y,1,1,x2,y,x,6,0;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,189) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,190) list Inv=inverse_L(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,191) print(Inv[1]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,192) print(Inv[2]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,193) print(Inv[1]*A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,194) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,195) @c inserted refs from d2t_singular/linalg_lib.doc:174
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,204) @strong{See also:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,205) @ref{inverse};
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,206) @ref{inverse_B}.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,208) @c end inserted refs from d2t_singular/linalg_lib.doc:174
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,209) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,210) @c ---end content inverse_L---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,211) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,212) @c ------------------- sym_gauss -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,213) @node sym_gauss, orthogonalize, inverse_L, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,214) @subsubsection sym_gauss
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,215) @cindex sym_gauss
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,216) @c ---content sym_gauss---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,217) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,218) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,219) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,220) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,221) sym_gauss(A); A = symmetric matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,222) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,223) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,224) matrix, diagonalisation with symmetric gauss algorithm
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,225) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,226) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,227) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,228) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,229) @c skipped computation of example sym_gauss d2t_singular/linalg_lib.doc:197 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,230) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,231) ring r=0,(x),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,232) matrix A[2][2]=1,4,4,15;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,233) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,234) print(sym_gauss(A));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,235) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,236) @c ---end content sym_gauss---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,237) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,238) @c ------------------- orthogonalize -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,239) @node orthogonalize, diag_test, sym_gauss, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,240) @subsubsection orthogonalize
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,241) @cindex orthogonalize
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,242) @c ---content orthogonalize---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,243) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,244) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,245) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,246) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,247) orthogonalize(A); A = constant matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,248) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,249) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,250) matrix, orthogonal basis of the column space of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,251) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,252) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,253) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,254) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,255) @c skipped computation of example orthogonalize d2t_singular/linalg_lib.doc:224 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,256) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,257) ring r=0,(x),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,258) matrix A[4][4]=5,6,12,4,7,3,2,6,12,1,1,2,6,4,2,10;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,259) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,260) print(orthogonalize(A));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,261) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,262) @c ---end content orthogonalize---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,263) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,264) @c ------------------- diag_test -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,265) @node diag_test, busadj, orthogonalize, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,266) @subsubsection diag_test
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,267) @cindex diag_test
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,268) @c ---content diag_test---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,269) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,270) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,271) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,272) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,273) diag_test(A); A = const square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,274) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,275) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,276) int, 1 if A is diagonalisable, 0 if not
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,277) @*-1 no statement is possible, since A does not split.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,278) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,279) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,280) The test works only for split matrices, i.e if eigenvalues of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,281) are in the ground field.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,282) @*Does not work with parameters (uses factorize,gcd).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,283) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,284) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,285) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,286) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,287) @c skipped computation of example diag_test d2t_singular/linalg_lib.doc:257 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,288) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,289) ring r=0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,290) matrix A[4][4]=6,0,0,0,0,0,6,0,0,6,0,0,0,0,0,6;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,291) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,292) diag_test(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,293) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,294) @c ---end content diag_test---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,295) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,296) @c ------------------- busadj -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,297) @node busadj, charpoly, diag_test, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,298) @subsubsection busadj
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,299) @cindex busadj
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,300) @c ---content busadj---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,301) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,302) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,303) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,304) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,305) busadj(A); A = square matrix (of size nxn)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,306) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,307) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,308) list L:
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,309) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,310)          L[1] contains the (n+1) coefficients of the characteristic
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,311)               polynomial X of A, i.e.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,312)               X = L[1][1]+..+L[1][k]*t^(k-1)+..+(L[1][n+1])*t^n
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,313)          L[2] contains the n (nxn)-matrices Hk which are the coefficients of
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,314)               the busadjoint bA = adjoint(E*t-A) of A, i.e.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,315)               bA = (Hn-1)*t^(n-1)+...+Hk*t^k+...+H0,  ( Hk=L[2][k+1] )
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,316) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,317) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,318) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,319) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,320) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,321) @c skipped computation of example busadj d2t_singular/linalg_lib.doc:292 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,322) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,323) ring r = 0,(t,x),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,324) matrix A[2][2] = 1,x2,x,x2+3x;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,325) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,326) list L = busadj(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,327) poly X = L[1][1]+L[1][2]*t+L[1][3]*t2; X;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,328) matrix bA[2][2] = L[2][1]+L[2][2]*t;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,329) print(bA);               //the busadjoint of A;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,330) print(bA*(t*unitmat(2)-A));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,331) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,332) @c ---end content busadj---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,333) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,334) @c ------------------- charpoly -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,335) @node charpoly, adjoint, busadj, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,336) @subsubsection charpoly
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,337) @cindex charpoly
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,338) @c ---content charpoly---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,339) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,340) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,341) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,342) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,343) charpoly(A[,v]); A square matrix, v string, name of a variable
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,344) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,345) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,346) poly, the characteristic polynomial det(E*v-A)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,347) @*(default: v=name of last variable)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,348) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,349) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,350) A must be independent of the variable v. The computation uses det.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,351) If printlevel>0, det(E*v-A) is diplayed recursively.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,352) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,353) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,354) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,355) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,356) @c skipped computation of example charpoly d2t_singular/linalg_lib.doc:328 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,357) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,358) ring r=0,(x,t),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,359) matrix A[3][3]=1,x2,x,x2,6,4,x,4,1;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,360) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,361) charpoly(A,"t");
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,362) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,363) @c ---end content charpoly---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,364) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,365) @c ------------------- adjoint -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,366) @node adjoint, det_B, charpoly, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,367) @subsubsection adjoint
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,368) @cindex adjoint
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,369) @c ---content adjoint---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,370) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,371) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,372) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,373) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,374) adjoint(A); A = square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,375) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,376) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,377) adjoint matrix of A, i.e. Adj*A=det(A)*E
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,378) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,379) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,380) computation uses busadj(A)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,381) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,382) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,383) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,384) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,385) @c skipped computation of example adjoint d2t_singular/linalg_lib.doc:358 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,386) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,387) ring r=0,(t,x),lp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,388) matrix A[2][2]=1,x2,x,x2+3x;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,389) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,390) matrix Adj[2][2]=adjoint(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,391) print(Adj);                    //Adj*A=det(A)*E
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,392) print(Adj*A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,393) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,394) @c ---end content adjoint---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,395) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,396) @c ------------------- det_B -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,397) @node det_B, gaussred, adjoint, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,398) @subsubsection det_B
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,399) @cindex det_B
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,400) @c ---content det_B---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,401) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,402) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,403) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,404) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,405) det_B(A); A any matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,406) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,407) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,408) returns the determinant of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,409) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,410) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,411) the computation uses the busadj algorithm
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,412) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,413) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,414) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,415) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,416) @c skipped computation of example det_B d2t_singular/linalg_lib.doc:390 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,417) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,418) ring r=0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,419) matrix A[10][10]=random(2,10,10)+unitmat(10)*x;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,420) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,421) det_B(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,422) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,423) @c ---end content det_B---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,424) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,425) @c ------------------- gaussred -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,426) @node gaussred, gaussred_pivot, det_B, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,427) @subsubsection gaussred
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,428) @cindex gaussred
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,429) @c ---content gaussred---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,430) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,431) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,432) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,433) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,434) gaussred(A); A any constant matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,435) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,436) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,437) list Z: Z[1]=P , Z[2]=U , Z[3]=S , Z[4]=rank(A)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,438) @*gives a row reduced matrix S, a permutation matrix P and a
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,439) normalized lower triangular matrix U, with P*A=U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,440) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,441) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,442) This procedure is designed for teaching purposes mainly.
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,443) The straight forward implementation in the interpreted library
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,444) is not very efficient (no standard basis computation).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,445) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,446) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,447) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,448) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,449) @c skipped computation of example gaussred d2t_singular/linalg_lib.doc:424 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,450) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,451) ring r=0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,452) matrix A[5][4]=1,3,-1,4,2,5,-1,3,1,3,-1,4,0,4,-3,1,-3,1,-5,-2;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,453) print(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,454) list Z=gaussred(A);   //construct P,U,S s.t. P*A=U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,455) print(Z[1]);          //P
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,456) print(Z[2]);          //U
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,457) print(Z[3]);          //S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,458) print(Z[4]);          //rank
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,459) print(Z[1]*A);        //P*A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,460) print(Z[2]*Z[3]);     //U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,461) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,462) @c ---end content gaussred---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,463) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,464) @c ------------------- gaussred_pivot -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,465) @node gaussred_pivot, gauss_nf, gaussred, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,466) @subsubsection gaussred_pivot
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,467) @cindex gaussred_pivot
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,468) @c ---content gaussred_pivot---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,469) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,470) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,471) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,472) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,473) gaussred_pivot(A); A any constant matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,474) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,475) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,476) list Z: Z[1]=P , Z[2]=U , Z[3]=S , Z[4]=rank(A)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,477) @*gives n row reduced matrix S, a permutation matrix P and a
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,478) normalized lower triangular matrix U, with P*A=U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,479) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,480) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,481) with row pivoting
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,482) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,483) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,484) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,485) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,486) @c skipped computation of example gaussred_pivot d2t_singular/linalg_lib.doc:462 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,487) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,488) ring r=0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,489) matrix A[5][4] = 1, 3,-1,4,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,490) 2, 5,-1,3,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,491) 1, 3,-1,4,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,492) 0, 4,-3,1,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,493) -3,1,-5,-2;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,494) list Z=gaussred_pivot(A);  //construct P,U,S s.t. P*A=U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,495) print(Z[1]);               //P
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,496) print(Z[2]);               //U
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,497) print(Z[3]);               //S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,498) print(Z[4]);               //rank
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,499) print(Z[1]*A);             //P*A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,500) print(Z[2]*Z[3]);          //U*S
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,501) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,502) @c ---end content gaussred_pivot---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,503) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,504) @c ------------------- gauss_nf -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,505) @node gauss_nf, mat_rk, gaussred_pivot, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,506) @subsubsection gauss_nf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,507) @cindex gauss_nf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,508) @c ---content gauss_nf---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,509) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,510) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,511) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,512) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,513) gauss_nf(A); A any constant matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,514) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,515) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,516) matrix; gauss normal form of A (uses gaussred)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,517) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,518) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,519) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,520) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,521) @c skipped computation of example gauss_nf d2t_singular/linalg_lib.doc:498 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,522) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,523) ring r = 0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,524) matrix A[4][4] = 1,4,4,7,2,5,5,4,4,1,1,3,0,2,2,7;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,525) print(gauss_nf(A));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,526) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,527) @c ---end content gauss_nf---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,528) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,529) @c ------------------- mat_rk -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,530) @node mat_rk, U_D_O, gauss_nf, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,531) @subsubsection mat_rk
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,532) @cindex mat_rk
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,533) @c ---content mat_rk---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,534) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,535) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,536) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,537) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,538) mat_rk(A); A any constant matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,539) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,540) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,541) int, rank of A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,542) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,543) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,544) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,545) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,546) @c skipped computation of example mat_rk d2t_singular/linalg_lib.doc:524 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,547) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,548) ring r = 0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,549) matrix A[4][4] = 1,4,4,7,2,5,5,4,4,1,1,3,0,2,2,7;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,550) mat_rk(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,551) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,552) @c ---end content mat_rk---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,553) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,554) @c ------------------- U_D_O -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,555) @node U_D_O, pos_def, mat_rk, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,556) @subsubsection U_D_O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,557) @cindex U_D_O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,558) @c ---content U_D_O---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,559) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,560) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,561) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,562) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,563) U_D_O(A); constant invertible matrix A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,564) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,565) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,566) list Z: Z[1]=P , Z[2]=U , Z[3]=D , Z[4]=O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,567) @*gives a permutation matrix P,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,568) @*a normalized lower triangular matrix U ,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,569) @*a diagonal matrix D, and
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,570) @*a normalized upper triangular matrix O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,571) @*with P*A=U*D*O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,572) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,573) @item @strong{Note:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,574) Z[1]=-1 means that A is not regular (proc uses gaussred)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,575) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,576) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,577) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,578) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,579) @c skipped computation of example U_D_O d2t_singular/linalg_lib.doc:558 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,580) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,581) ring r = 0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,582) matrix A[5][5] = 10, 4,  0, -9,  8,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,583) -3, 6, -6, -4,  9,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,584) 0, 3, -1, -9, -8,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,585) -4,-2, -6, -10,10,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,586) -9, 5, -1, -6,  5;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,587) list Z = U_D_O(A);              //construct P,U,D,O s.t. P*A=U*D*O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,588) print(Z[1]);                    //P
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,589) print(Z[2]);                    //U
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,590) print(Z[3]);                    //D
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,591) print(Z[4]);                    //O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,592) print(Z[1]*A);                  //P*A
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,593) print(Z[2]*Z[3]*Z[4]);          //U*D*O
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,594) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,595) @c ---end content U_D_O---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,596) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,597) @c ------------------- pos_def -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,598) @node pos_def, hessenberg, U_D_O, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,599) @subsubsection pos_def
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,600) @cindex pos_def
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,601) @c ---content pos_def---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,602) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,603) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,604) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,605) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,606) pos_def(A); A = constant, symmetric square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,607) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,608) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,609) int:
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,610) @*1 if A is positive definit ,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,611) @*0 if not,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,612) @*-1 if unknown
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,613) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,614) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,615) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,616) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,617) @c skipped computation of example pos_def d2t_singular/linalg_lib.doc:597 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,618) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,619) ring r = 0,(x),dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,620) matrix A[5][5] = 20,  4,  0, -9,   8,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,621) 4, 12, -6, -4,   9,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,622) 0, -6, -2, -9,  -8,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,623) -9, -4, -9, -20, 10,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,624) 8,  9, -8,  10, 10;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,625) pos_def(A);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,626) matrix B[3][3] =  3,  2,  0,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,627) 2, 12,  4,
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,628) 0,  4,  2;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,629) pos_def(B);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,630) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,631) @c ---end content pos_def---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,632) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,633) @c ------------------- hessenberg -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,634) @node hessenberg, evnf, pos_def, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,635) @subsubsection hessenberg
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,636) @cindex hessenberg
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,637) @c ---content hessenberg---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,638) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,639) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,640) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,641) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,642) hessenberg(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,643) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,644) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,645) M constant square matrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,646) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,647) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,648) matrix H; Hessenberg form of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,649) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,650) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,651) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,652) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,653) @c skipped computation of example hessenberg d2t_singular/linalg_lib.doc:634 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,654) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,655) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,656) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,657) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,658) print(hessenberg(M));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,659) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,660) @c ---end content hessenberg---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,661) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,662) @c ------------------- evnf -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,663) @node evnf, eigenvals, hessenberg, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,664) @subsubsection evnf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,665) @cindex evnf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,666) @c ---content evnf---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,667) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,668) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,669) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,670) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,671) evnf(e[,m]); ideal e, intvec m
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,672) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,673) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,674) ncols(e)==size(m)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,675) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,676) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,677) order eigenvalues e with multiplicities m
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,678) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,679) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,680) @c ---end content evnf---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,681) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,682) @c ------------------- eigenvals -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,683) @node eigenvals, minipoly, evnf, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,684) @subsubsection eigenvals
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,685) @cindex eigenvals
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,686) @c ---content eigenvals---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,687) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,688) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,689) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,690) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,691) eigenvals(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,692) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,693) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,694) eigenvalues of M in basefield
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,695) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,696) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,697) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,698) list l; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,699)   ideal l[1];
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,700)     number l[1][i];  i-th eigenvalue of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,701)   intvec l[2]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,702)     int l[2][i];  multiplicity of i-th eigenvalue of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,703) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,704) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,705) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,706) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,707) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,708) @c skipped computation of example eigenvals d2t_singular/linalg_lib.doc:690 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,709) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,710) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,711) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,712) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,713) eigenvals(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,714) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,715) @c ---end content eigenvals---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,716) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,717) @c ------------------- minipoly -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,718) @node minipoly, jordan, eigenvals, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,719) @subsubsection minipoly
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,720) @cindex minipoly
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,721) @c ---content minipoly---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,722) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,723) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,724) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,725) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,726) minpoly(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,727) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,728) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,729) eigenvalues of M in basefield
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,730) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,731) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,732) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,733) list l;  minimal polynomial of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,734)   ideal l[1]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,735)     number l[1][i];  i-th root of minimal polynomial of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,736)   intvec l[2]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,737)     int l[2][i];  multiplicity of i-th root of minimal polynomial of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,738) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,739) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,740) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,741) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,742) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,743) @c skipped computation of example minipoly d2t_singular/linalg_lib.doc:726 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,744) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,745) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,746) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,747) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,748) minipoly(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,749) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,750) @c ---end content minipoly---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,751) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,752) @c ------------------- jordan -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,753) @node jordan, jordanbasis, minipoly, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,754) @subsubsection jordan
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,755) @cindex jordan
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,756) @c ---content jordan---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,757) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,758) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,759) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,760) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,761) jordan(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,762) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,763) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,764) eigenvalues of M in basefield
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,765) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,766) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,767) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,768) list l;  Jordan data of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,769)   ideal l[1]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,770)     number l[1][i];  eigenvalue of i-th Jordan block of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,771)   intvec l[2]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,772)     int l[2][i];  size of i-th Jordan block of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,773)   intvec l[3]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,774)     int l[3][i];  multiplicity of i-th Jordan block of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,775) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,776) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,777) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,778) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,779) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,780) @c skipped computation of example jordan d2t_singular/linalg_lib.doc:764 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,781) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,782) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,783) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,784) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,785) jordan(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,786) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,787) @c ---end content jordan---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,788) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,789) @c ------------------- jordanbasis -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,790) @node jordanbasis, jordanmatrix, jordan, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,791) @subsubsection jordanbasis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,792) @cindex jordanbasis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,793) @c ---content jordanbasis---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,794) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,795) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,796) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,797) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,798) jordanbasis(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,799) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,800) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,801) eigenvalues of M in basefield
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,802) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,803) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,804) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,805) list l:
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,806)   module l[1];  inverse(l[1])*M*l[1] in Jordan normal form
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,807)   intvec l[2]; 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,808)     int l[2][i];  weight filtration index of l[1][i]
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,809) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,810) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,811) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,812) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,813) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,814) @c skipped computation of example jordanbasis d2t_singular/linalg_lib.doc:799 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,815) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,816) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,817) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,818) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,819) list l=jordanbasis(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,820) print(l[1]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,821) print(l[2]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,822) print(inverse(l[1])*M*l[1]);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,823) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,824) @c ---end content jordanbasis---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,825) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,826) @c ------------------- jordanmatrix -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,827) @node jordanmatrix, jordannf, jordanbasis, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,828) @subsubsection jordanmatrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,829) @cindex jordanmatrix
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,830) @c ---content jordanmatrix---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,831) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,832) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,833) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,834) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,835) jordanmatrix(e,s,m); ideal e, intvec s, intvec m
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,836) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,837) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,838) ncols(e)==size(s)==size(m)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,839) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,840) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,841) @format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,842) matrix J;  Jordan matrix with list(e,s,m)==jordan(J)
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,843) @end format
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,844) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,845) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,846) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,847) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,848) @c skipped computation of example jordanmatrix d2t_singular/linalg_lib.doc:834 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,849) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,850) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,851) ideal e=ideal(2,3);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,852) intvec s=1,2;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,853) intvec m=1,1;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,854) print(jordanmatrix(e,s,m));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,855) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,856) @c ---end content jordanmatrix---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,857) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,858) @c ------------------- jordannf -------------
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,859) @node jordannf,, jordanmatrix, linalg_lib
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,860) @subsubsection jordannf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,861) @cindex jordannf
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,862) @c ---content jordannf---
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,863) Procedure from library @code{linalg.lib} (@pxref{linalg_lib}).
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,864) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,865) @table @asis
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,866) @item @strong{Usage:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,867) jordannf(M); matrix M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,868) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,869) @item @strong{Assume:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,870) eigenvalues of M in basefield
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,871) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,872) @item @strong{Return:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,873) matrix J; Jordan normal form of M
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,874) 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,875) @end table
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,876) @strong{Example:}
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,877) @smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,878) @c skipped computation of example jordannf d2t_singular/linalg_lib.doc:865 
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,879) LIB "linalg.lib";
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,880) ring R=0,x,dp;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,881) matrix M[3][3]=3,2,1,0,2,1,0,0,3;
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,882) print(M);
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,883) print(jordannf(M));
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,884) @end smallexample
../singular_texi/./d2t_singular/linalg_lib_noEx.tex(,885) @c ---end content jordannf---
../singular_texi/singular.tex(,352) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,353) @node Commutative algebra, Singularities, Linear algebra, SINGULAR libraries
../singular_texi/singular.tex(,354) @section Commutative algebra
../singular_texi/singular.tex(,355) @cindex Commutative algebra
../singular_texi/singular.tex(,356) 
../singular_texi/singular.tex(,357) @menu
../singular_texi/singular.tex(,358) * algebra_lib:: procedures for computing with algebras and maps
../singular_texi/singular.tex(,359) * elim_lib:: procedures for elimination, saturation and blowing up
../singular_texi/singular.tex(,360) * homolog_lib:: procedures for homological algebra
../singular_texi/singular.tex(,361) * mprimdec_lib:: procedures for primary decomposition of modules
../singular_texi/singular.tex(,362) * mregular_lib:: procedures for Castelnuovo-Mumford regularity
../singular_texi/singular.tex(,363) * normal_lib:: procedure for normalization
../singular_texi/singular.tex(,364) * primdec_lib:: procedures for primary decomposition
../singular_texi/singular.tex(,365) * primitiv_lib:: procedures for finding a primitive element
../singular_texi/singular.tex(,366) * reesclos_lib:: Rees Algebra and integral closure of an ideal
../singular_texi/singular.tex(,367) * intprog_lib:: Integer Programming
../singular_texi/singular.tex(,368) * toric_lib:: toric ideals
../singular_texi/singular.tex(,369) @end menu
../singular_texi/singular.tex(,370) 
../singular_texi/singular.tex(,371) @c ---------------------------------------------------------
../singular_texi/singular.tex(,372) @node algebra_lib, elim_lib, Commutative algebra, Commutative algebra
../singular_texi/singular.tex(,373) @subsection algebra_lib
../singular_texi/singular.tex(,374) @c include of docu for algebra.lib
../singular_texi/./d2t_singular/algebra_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/algebra_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/algebra_lib.doc
../singular_texi/./d2t_singular/algebra_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/algebra_lib.doc INSTEAD
../singular_texi/./d2t_singular/algebra_lib.tex(,4) @c library version: (1.9.2.3,2002/04/11)
../singular_texi/./d2t_singular/algebra_lib.tex(,5) @c library file: ../Singular/LIB/algebra.lib
../singular_texi/./d2t_singular/algebra_lib.tex(,6) @cindex algebra.lib
../singular_texi/./d2t_singular/algebra_lib.tex(,7) @cindex algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/algebra_lib.tex(,10) algebra.lib
../singular_texi/./d2t_singular/algebra_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/algebra_lib.tex(,12)    Compute with Algebras and Algebra Maps
../singular_texi/./d2t_singular/algebra_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/algebra_lib.tex(,14) Gert-Martin Greuel, greuel@@mathematik.uni-kl.de,
../singular_texi/./d2t_singular/algebra_lib.tex(,15) @* Agnes Eileen Heydtmann, agnes@@math.uni-sb.de,
../singular_texi/./d2t_singular/algebra_lib.tex(,16) @* Gerhard Pfister, pfister@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/algebra_lib.tex(,17) 
../singular_texi/./d2t_singular/algebra_lib.tex(,18) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,19) 
../singular_texi/./d2t_singular/algebra_lib.tex(,20) @strong{Procedures:}
../singular_texi/./d2t_singular/algebra_lib.tex(,21) @menu
../singular_texi/./d2t_singular/algebra_lib.tex(,22) * algebra_containment:: query of algebra containment
../singular_texi/./d2t_singular/algebra_lib.tex(,23) * module_containment:: query of module containment over a subalgebra
../singular_texi/./d2t_singular/algebra_lib.tex(,24) * inSubring:: test whether poly p is in subring generated by I
../singular_texi/./d2t_singular/algebra_lib.tex(,25) * algDependent:: computes algebraic relations between generators of I
../singular_texi/./d2t_singular/algebra_lib.tex(,26) * alg_kernel:: computes the kernel of the ring map phi
../singular_texi/./d2t_singular/algebra_lib.tex(,27) * is_injective:: test for injectivity of ring map phi
../singular_texi/./d2t_singular/algebra_lib.tex(,28) * is_surjective:: test for surjectivity of ring map phi
../singular_texi/./d2t_singular/algebra_lib.tex(,29) * is_bijective:: test for bijectivity of ring map phi
../singular_texi/./d2t_singular/algebra_lib.tex(,30) * noetherNormal:: noether normalization of ideal id
../singular_texi/./d2t_singular/algebra_lib.tex(,31) * mapIsFinite:: query for finiteness of map phi:R --> basering/I
../singular_texi/./d2t_singular/algebra_lib.tex(,32) * finitenessTest:: find variables which occur as pure power in lead(i)
../singular_texi/./d2t_singular/algebra_lib.tex(,33) @end menu
../singular_texi/./d2t_singular/algebra_lib.tex(,34) @c ---end content LibInfo---
../singular_texi/./d2t_singular/algebra_lib.tex(,35) 
../singular_texi/./d2t_singular/algebra_lib.tex(,36) @c ------------------- algebra_containment -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,37) @node algebra_containment, module_containment,, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,38) @subsubsection algebra_containment
../singular_texi/./d2t_singular/algebra_lib.tex(,39) @cindex algebra_containment
../singular_texi/./d2t_singular/algebra_lib.tex(,40) @c ---content algebra_containment---
../singular_texi/./d2t_singular/algebra_lib.tex(,41) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,42) 
../singular_texi/./d2t_singular/algebra_lib.tex(,43) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,44) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,45) algebra_containment(p,A[,k]); p poly, A ideal, k integer.
../singular_texi/./d2t_singular/algebra_lib.tex(,46) @* A = A[1],...,A[m] generators of subalgebra of the basering
../singular_texi/./d2t_singular/algebra_lib.tex(,47) 
../singular_texi/./d2t_singular/algebra_lib.tex(,48) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,49) @format
../singular_texi/./d2t_singular/algebra_lib.tex(,50)          - k=0 (or if k is not given) an integer:
../singular_texi/./d2t_singular/algebra_lib.tex(,51)            1  : if p is contained in the subalgebra K[A[1],...,A[m]]
../singular_texi/./d2t_singular/algebra_lib.tex(,52)            0  : if p is not contained in K[A[1],...,A[m]]
../singular_texi/./d2t_singular/algebra_lib.tex(,53)          - k=1 : a list, say l, of size 2, l[1] integer, l[2] ring, satisfying
../singular_texi/./d2t_singular/algebra_lib.tex(,54)            l[1]=1 if p is in the subalgebra K[A[1],...,A[m]] and then the ring
../singular_texi/./d2t_singular/algebra_lib.tex(,55)            l[2] contains poly check = h(y(1),...,y(m)) if p=h(A[1],...,A[m])
../singular_texi/./d2t_singular/algebra_lib.tex(,56)            l[1]=0 if p is in not the subalgebra K[A[1],...,A[m]] and then
../singular_texi/./d2t_singular/algebra_lib.tex(,57)            l[2] contains the poly check = h(x,y(1),...,y(m)) if p satisfies
../singular_texi/./d2t_singular/algebra_lib.tex(,58)            the nonlinear relation p = h(x,A[1],...,A[m]) where
../singular_texi/./d2t_singular/algebra_lib.tex(,59)            x = x(1),...,x(n) denote the variables of the basering
../singular_texi/./d2t_singular/algebra_lib.tex(,60) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,61) 
../singular_texi/./d2t_singular/algebra_lib.tex(,62) @item @strong{Display:}
../singular_texi/./d2t_singular/algebra_lib.tex(,63) if k=0 and printlevel >= voice+1 (default) display the poly check
../singular_texi/./d2t_singular/algebra_lib.tex(,64) 
../singular_texi/./d2t_singular/algebra_lib.tex(,65) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,66) The proc inSubring uses a different algorithm which is sometimes
../singular_texi/./d2t_singular/algebra_lib.tex(,67) faster.
../singular_texi/./d2t_singular/algebra_lib.tex(,68) 
../singular_texi/./d2t_singular/algebra_lib.tex(,69) @item @strong{Theory:}
../singular_texi/./d2t_singular/algebra_lib.tex(,70) The ideal of algebraic relations of the algebra generators A[1],...,
../singular_texi/./d2t_singular/algebra_lib.tex(,71) A[m] is computed introducing new variables y(i) and the product
../singular_texi/./d2t_singular/algebra_lib.tex(,72) order with x(i) >> y(i).
../singular_texi/./d2t_singular/algebra_lib.tex(,73) @*p reduces to a polynomial only in the y(i) <=> p is contained in the
../singular_texi/./d2t_singular/algebra_lib.tex(,74) subring generated by the polynomials A[1],...,A[m].
../singular_texi/./d2t_singular/algebra_lib.tex(,75) 
../singular_texi/./d2t_singular/algebra_lib.tex(,76) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,77) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,78) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,79) @c computed example algebra_containment d2t_singular/algebra_lib.doc:77 
../singular_texi/./d2t_singular/algebra_lib.tex(,80) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,81) int p = printlevel; printlevel = 1;
../singular_texi/./d2t_singular/algebra_lib.tex(,82) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,83) ideal A=x2+y2,z2,x4+y4,1,x2z-1y2z,xyz,x3y-1xy3;
../singular_texi/./d2t_singular/algebra_lib.tex(,84) poly p1=z;
../singular_texi/./d2t_singular/algebra_lib.tex(,85) poly p2=
../singular_texi/./d2t_singular/algebra_lib.tex(,86) x10z3-x8y2z3+2x6y4z3-2x4y6z3+x2y8z3-y10z3+x6z4+3x4y2z4+3x2y4z4+y6z4;
../singular_texi/./d2t_singular/algebra_lib.tex(,87) algebra_containment(p1,A);
../singular_texi/./d2t_singular/algebra_lib.tex(,88) @expansion{} // x(3)
../singular_texi/./d2t_singular/algebra_lib.tex(,89) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,90) algebra_containment(p2,A);
../singular_texi/./d2t_singular/algebra_lib.tex(,91) @expansion{} // y(1)*y(2)*y(5)^2+y(3)*y(5)^3+4*y(1)*y(2)*y(6)^2+4*y(6)^3*y(7)+2*y(2)*y\
../singular_texi/./d2t_singular/algebra_lib.tex(,92)    (5)*y(7)^2
../singular_texi/./d2t_singular/algebra_lib.tex(,93) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,94) list L = algebra_containment(p2,A,1);
../singular_texi/./d2t_singular/algebra_lib.tex(,95) @expansion{} 
../singular_texi/./d2t_singular/algebra_lib.tex(,96) @expansion{} // 'algebra_containment' created a ring as 2nd element of the list.
../singular_texi/./d2t_singular/algebra_lib.tex(,97) @expansion{} // The ring contains the poly check which defines the algebraic relation.
../singular_texi/./d2t_singular/algebra_lib.tex(,98) @expansion{} // To access to the ring and see check you must give the ring a name,
../singular_texi/./d2t_singular/algebra_lib.tex(,99) @expansion{} // e.g.:
../singular_texi/./d2t_singular/algebra_lib.tex(,100) @expansion{}                def S = l[2]; setring S; check;
../singular_texi/./d2t_singular/algebra_lib.tex(,101) @expansion{} 	
../singular_texi/./d2t_singular/algebra_lib.tex(,102) L[1];
../singular_texi/./d2t_singular/algebra_lib.tex(,103) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,104) def S = L[2]; setring S;
../singular_texi/./d2t_singular/algebra_lib.tex(,105) check;
../singular_texi/./d2t_singular/algebra_lib.tex(,106) @expansion{} y(1)*y(2)*y(5)^2+y(3)*y(5)^3+4*y(1)*y(2)*y(6)^2+4*y(6)^3*y(7)+2*y(2)*y(5)\
../singular_texi/./d2t_singular/algebra_lib.tex(,107)    *y(7)^2
../singular_texi/./d2t_singular/algebra_lib.tex(,108) printlevel = p;
../singular_texi/./d2t_singular/algebra_lib.tex(,109) @c end example algebra_containment d2t_singular/algebra_lib.doc:77
../singular_texi/./d2t_singular/algebra_lib.tex(,110) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,111) @c ---end content algebra_containment---
../singular_texi/./d2t_singular/algebra_lib.tex(,112) 
../singular_texi/./d2t_singular/algebra_lib.tex(,113) @c ------------------- module_containment -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,114) @node module_containment, inSubring, algebra_containment, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,115) @subsubsection module_containment
../singular_texi/./d2t_singular/algebra_lib.tex(,116) @cindex module_containment
../singular_texi/./d2t_singular/algebra_lib.tex(,117) @c ---content module_containment---
../singular_texi/./d2t_singular/algebra_lib.tex(,118) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,119) 
../singular_texi/./d2t_singular/algebra_lib.tex(,120) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,121) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,122) module_containment(p,P,M[,k]); p poly, P ideal, M ideal, k int
../singular_texi/./d2t_singular/algebra_lib.tex(,123) @* P = P[1],...,P[n] generators of a subalgebra of the basering,
../singular_texi/./d2t_singular/algebra_lib.tex(,124) @* M = M[1],...,M[m] generators of a module over the subalgebra K[P]
../singular_texi/./d2t_singular/algebra_lib.tex(,125) 
../singular_texi/./d2t_singular/algebra_lib.tex(,126) @item @strong{Assume:}
../singular_texi/./d2t_singular/algebra_lib.tex(,127) ncols(P) = nvars(basering), the P[i] are algebraically independent
../singular_texi/./d2t_singular/algebra_lib.tex(,128) 
../singular_texi/./d2t_singular/algebra_lib.tex(,129) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,130) @format
../singular_texi/./d2t_singular/algebra_lib.tex(,131)          - k=0 (or if k is not given), an integer:
../singular_texi/./d2t_singular/algebra_lib.tex(,132)            1    : if p is contained in the module <M[1],...,M[m]> over K[P]
../singular_texi/./d2t_singular/algebra_lib.tex(,133)            0    : if p is not contained in <M[1],...,M[m]>
../singular_texi/./d2t_singular/algebra_lib.tex(,134)          - k=1, a list, say l, of size 2, l[1] integer, l[2] ring:
../singular_texi/./d2t_singular/algebra_lib.tex(,135)            l[1]=1 : if p is in <M[1],...,M[m]> and then the ring l[2] contains
../singular_texi/./d2t_singular/algebra_lib.tex(,136)              the polynomial check = h(y(1),...,y(m),z(1),...,z(n)) if
../singular_texi/./d2t_singular/algebra_lib.tex(,137)              p = h(M[1],...,M[m],P[1],...,P[n])
../singular_texi/./d2t_singular/algebra_lib.tex(,138)            l[1]=0 : if p is in not in <M[1],...,M[m]>, then l[2] contains the
../singular_texi/./d2t_singular/algebra_lib.tex(,139)              poly check = h(x,y(1),...,y(m),z(1),...,z(n)) if p satisfies
../singular_texi/./d2t_singular/algebra_lib.tex(,140)              the nonlinear relation p = h(x,M[1],...,M[m],P[1],...,P[n]) where
../singular_texi/./d2t_singular/algebra_lib.tex(,141)              x = x(1),...,x(n) denote the variables of the basering
../singular_texi/./d2t_singular/algebra_lib.tex(,142) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,143) 
../singular_texi/./d2t_singular/algebra_lib.tex(,144) @item @strong{Display:}
../singular_texi/./d2t_singular/algebra_lib.tex(,145) the polynomial h(y(1),...,y(m),z(1),...,z(n)) if k=0, resp.
../singular_texi/./d2t_singular/algebra_lib.tex(,146) a comment how to access the relation check if k=1, provided
../singular_texi/./d2t_singular/algebra_lib.tex(,147) printlevel >= voice+1 (default).
../singular_texi/./d2t_singular/algebra_lib.tex(,148) 
../singular_texi/./d2t_singular/algebra_lib.tex(,149) @item @strong{Theory:}
../singular_texi/./d2t_singular/algebra_lib.tex(,150) The ideal of algebraic relations of all the generators p1,...,pn,
../singular_texi/./d2t_singular/algebra_lib.tex(,151) s1,...,st given by P and S is computed introducing new variables y(j),
../singular_texi/./d2t_singular/algebra_lib.tex(,152) z(i) and the product order: x^a*y^b*z^c > x^d*y^e*z^f if x^a > x^d
../singular_texi/./d2t_singular/algebra_lib.tex(,153) with respect to the lp ordering or else if z^c > z^f with respect to
../singular_texi/./d2t_singular/algebra_lib.tex(,154) the dp ordering or else if y^b > y^e with respect to the lp ordering
../singular_texi/./d2t_singular/algebra_lib.tex(,155) again. p reduces to a polynomial only in the y(j) and z(i), linear in
../singular_texi/./d2t_singular/algebra_lib.tex(,156) the z(i) <=> p is contained in the module.
../singular_texi/./d2t_singular/algebra_lib.tex(,157) 
../singular_texi/./d2t_singular/algebra_lib.tex(,158) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,159) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,160) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,161) @c computed example module_containment d2t_singular/algebra_lib.doc:144 
../singular_texi/./d2t_singular/algebra_lib.tex(,162) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,163) int p = printlevel; printlevel = 1;
../singular_texi/./d2t_singular/algebra_lib.tex(,164) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,165) ideal P = x2+y2,z2,x4+y4;           //algebra generators
../singular_texi/./d2t_singular/algebra_lib.tex(,166) ideal M = 1,x2z-1y2z,xyz,x3y-1xy3;  //module generators
../singular_texi/./d2t_singular/algebra_lib.tex(,167) poly p1=
../singular_texi/./d2t_singular/algebra_lib.tex(,168) x10z3-x8y2z3+2x6y4z3-2x4y6z3+x2y8z3-y10z3+x6z4+3x4y2z4+3x2y4z4+y6z4;
../singular_texi/./d2t_singular/algebra_lib.tex(,169) module_containment(p1,P,M);
../singular_texi/./d2t_singular/algebra_lib.tex(,170) @expansion{} // y(2)*z(2)*z(3)^2+z(1)^3*z(2)^2
../singular_texi/./d2t_singular/algebra_lib.tex(,171) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,172) poly p2=z;
../singular_texi/./d2t_singular/algebra_lib.tex(,173) list l = module_containment(p2,P,M,1);
../singular_texi/./d2t_singular/algebra_lib.tex(,174) @expansion{} 
../singular_texi/./d2t_singular/algebra_lib.tex(,175) @expansion{} // 'module_containment' created a ring as 2nd element of the list. The
../singular_texi/./d2t_singular/algebra_lib.tex(,176) @expansion{} // ring contains the poly check which defines the algebraic relation
../singular_texi/./d2t_singular/algebra_lib.tex(,177) @expansion{} // for p. To access to the ring and see check you must give the ring
../singular_texi/./d2t_singular/algebra_lib.tex(,178) @expansion{} // a name, e.g.:
../singular_texi/./d2t_singular/algebra_lib.tex(,179) @expansion{}      def S = l[2]; setring S; check;
../singular_texi/./d2t_singular/algebra_lib.tex(,180) @expansion{}       
../singular_texi/./d2t_singular/algebra_lib.tex(,181) l[1];
../singular_texi/./d2t_singular/algebra_lib.tex(,182) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,183) def S = l[2]; setring S; check;
../singular_texi/./d2t_singular/algebra_lib.tex(,184) @expansion{} x(3)
../singular_texi/./d2t_singular/algebra_lib.tex(,185) printlevel=p;
../singular_texi/./d2t_singular/algebra_lib.tex(,186) @c end example module_containment d2t_singular/algebra_lib.doc:144
../singular_texi/./d2t_singular/algebra_lib.tex(,187) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,188) @c ---end content module_containment---
../singular_texi/./d2t_singular/algebra_lib.tex(,189) 
../singular_texi/./d2t_singular/algebra_lib.tex(,190) @c ------------------- inSubring -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,191) @node inSubring, algDependent, module_containment, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,192) @subsubsection inSubring
../singular_texi/./d2t_singular/algebra_lib.tex(,193) @cindex inSubring
../singular_texi/./d2t_singular/algebra_lib.tex(,194) @c ---content inSubring---
../singular_texi/./d2t_singular/algebra_lib.tex(,195) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,196) 
../singular_texi/./d2t_singular/algebra_lib.tex(,197) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,198) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,199) inSubring(p,i); p poly, i ideal
../singular_texi/./d2t_singular/algebra_lib.tex(,200) 
../singular_texi/./d2t_singular/algebra_lib.tex(,201) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,202) @format
../singular_texi/./d2t_singular/algebra_lib.tex(,203)          a list l of size 2, l[1] integer, l[2] string
../singular_texi/./d2t_singular/algebra_lib.tex(,204)          l[1]=1 iff p is in the subring generated by i=i[1],...,i[k],
../singular_texi/./d2t_singular/algebra_lib.tex(,205)                 and then l[2] = y(0)-h(y(1),...,y(k)) if p = h(i[1],...,i[k])
../singular_texi/./d2t_singular/algebra_lib.tex(,206)          l[1]=0 iff p is in not the subring generated by i,
../singular_texi/./d2t_singular/algebra_lib.tex(,207)                 and then l[2] = h(y(0),y(1),...,y(k) where p satisfies the
../singular_texi/./d2t_singular/algebra_lib.tex(,208)                 nonlinear relation h(p,i[1],...,i[k])=0.
../singular_texi/./d2t_singular/algebra_lib.tex(,209) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,210) 
../singular_texi/./d2t_singular/algebra_lib.tex(,211) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,212) the proc algebra_containment tests the same with a different
../singular_texi/./d2t_singular/algebra_lib.tex(,213) algorithm, which is often faster
../singular_texi/./d2t_singular/algebra_lib.tex(,214) 
../singular_texi/./d2t_singular/algebra_lib.tex(,215) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,216) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,217) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,218) @c computed example inSubring d2t_singular/algebra_lib.doc:190 
../singular_texi/./d2t_singular/algebra_lib.tex(,219) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,220) ring q=0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,221) poly p=xyzu2w-1yzu2w2+u4w2-1xu2vw+u2vw2+xyz-1yzw+2u2w-1xv+vw+2;
../singular_texi/./d2t_singular/algebra_lib.tex(,222) ideal I =x-w,u2w+1,yz-v;
../singular_texi/./d2t_singular/algebra_lib.tex(,223) inSubring(p,I);
../singular_texi/./d2t_singular/algebra_lib.tex(,224) @expansion{} [1]:
../singular_texi/./d2t_singular/algebra_lib.tex(,225) @expansion{}    1
../singular_texi/./d2t_singular/algebra_lib.tex(,226) @expansion{} [2]:
../singular_texi/./d2t_singular/algebra_lib.tex(,227) @expansion{}    y(1)*y(2)*y(3)+y(2)^2-y(0)+1
../singular_texi/./d2t_singular/algebra_lib.tex(,228) @c end example inSubring d2t_singular/algebra_lib.doc:190
../singular_texi/./d2t_singular/algebra_lib.tex(,229) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,230) @c ---end content inSubring---
../singular_texi/./d2t_singular/algebra_lib.tex(,231) 
../singular_texi/./d2t_singular/algebra_lib.tex(,232) @c ------------------- algDependent -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,233) @node algDependent, alg_kernel, inSubring, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,234) @subsubsection algDependent
../singular_texi/./d2t_singular/algebra_lib.tex(,235) @cindex algDependent
../singular_texi/./d2t_singular/algebra_lib.tex(,236) @c ---content algDependent---
../singular_texi/./d2t_singular/algebra_lib.tex(,237) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,238) 
../singular_texi/./d2t_singular/algebra_lib.tex(,239) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,240) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,241) algDependent(f[,c]); f ideal (say, f = f1,...,fm), c integer
../singular_texi/./d2t_singular/algebra_lib.tex(,242) 
../singular_texi/./d2t_singular/algebra_lib.tex(,243) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,244) @format	
../singular_texi/./d2t_singular/algebra_lib.tex(,245)          a list l  of size 2, l[1] integer, l[2] ring:
../singular_texi/./d2t_singular/algebra_lib.tex(,246)          - l[1] = 1 if f1,...,fm are algebraic dependent, 0 if not
../singular_texi/./d2t_singular/algebra_lib.tex(,247)          - l[2] is a ring with variables x(1),...,x(n),y(1),...,y(m) if the
../singular_texi/./d2t_singular/algebra_lib.tex(,248)            basering has n variables. It contains the ideal 'ker', depending
../singular_texi/./d2t_singular/algebra_lib.tex(,249)            only on the y(i) and generating the algebraic relations between the
../singular_texi/./d2t_singular/algebra_lib.tex(,250)            f[i], i.e. substituting y(i) by fi yields 0. Of course, ker is
../singular_texi/./d2t_singular/algebra_lib.tex(,251)            nothing but the kernel of the ring map
../singular_texi/./d2t_singular/algebra_lib.tex(,252)               K[y(1),...,y(m)] ---> basering,  y(i) --> fi.
../singular_texi/./d2t_singular/algebra_lib.tex(,253) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,254) 
../singular_texi/./d2t_singular/algebra_lib.tex(,255) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,256) Three different algorithms are used depending on c = 1,2,3.
../singular_texi/./d2t_singular/algebra_lib.tex(,257) If c is not given or c=0, a heuristically best method is chosen.
../singular_texi/./d2t_singular/algebra_lib.tex(,258) The basering may be a quotient ring.
../singular_texi/./d2t_singular/algebra_lib.tex(,259) @*To access to the ring l[2] and see ker you must give the ring a name,
../singular_texi/./d2t_singular/algebra_lib.tex(,260) e.g. def S=l[2]; setring S; ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,261) 
../singular_texi/./d2t_singular/algebra_lib.tex(,262) @item @strong{Display:}
../singular_texi/./d2t_singular/algebra_lib.tex(,263) The above comment is displayed if printlevel >= 0 (default).
../singular_texi/./d2t_singular/algebra_lib.tex(,264) 
../singular_texi/./d2t_singular/algebra_lib.tex(,265) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,266) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,267) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,268) @c computed example algDependent d2t_singular/algebra_lib.doc:236 
../singular_texi/./d2t_singular/algebra_lib.tex(,269) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,270) int p = printlevel; printlevel = 1;
../singular_texi/./d2t_singular/algebra_lib.tex(,271) ring R = 0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,272) ideal I = xyzu2w-1yzu2w2+u4w2-1xu2vw+u2vw2+xyz-1yzw+2u2w-1xv+vw+2,
../singular_texi/./d2t_singular/algebra_lib.tex(,273) x-w, u2w+1, yz-v;
../singular_texi/./d2t_singular/algebra_lib.tex(,274) list l = algDependent(I);
../singular_texi/./d2t_singular/algebra_lib.tex(,275) @expansion{} 
../singular_texi/./d2t_singular/algebra_lib.tex(,276) @expansion{} // The 2nd element of the list l is a ring with variables x(1),...,x(n),
../singular_texi/./d2t_singular/algebra_lib.tex(,277) @expansion{} // and y(1),...,y(m) if the basering has n variables and if the ideal
../singular_texi/./d2t_singular/algebra_lib.tex(,278) @expansion{} // is f[1],...,f[m]. The ring contains the ideal ker which depends only
../singular_texi/./d2t_singular/algebra_lib.tex(,279) @expansion{} // on the y(i) and generates the relations between the f[i].
../singular_texi/./d2t_singular/algebra_lib.tex(,280) @expansion{} // I.e. substituting y(i) by f[i] yields 0.
../singular_texi/./d2t_singular/algebra_lib.tex(,281) @expansion{} // To access to the ring and see ker you must give the ring a name,
../singular_texi/./d2t_singular/algebra_lib.tex(,282) @expansion{} // e.g.:
../singular_texi/./d2t_singular/algebra_lib.tex(,283) @expansion{}              def S = l[2]; setring S; ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,284) @expansion{} 	
../singular_texi/./d2t_singular/algebra_lib.tex(,285) l[1];
../singular_texi/./d2t_singular/algebra_lib.tex(,286) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,287) def S = l[2]; setring S;
../singular_texi/./d2t_singular/algebra_lib.tex(,288) ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,289) @expansion{} ker[1]=y(2)*y(3)*y(4)+y(3)^2-y(1)+1
../singular_texi/./d2t_singular/algebra_lib.tex(,290) printlevel = p;
../singular_texi/./d2t_singular/algebra_lib.tex(,291) @c end example algDependent d2t_singular/algebra_lib.doc:236
../singular_texi/./d2t_singular/algebra_lib.tex(,292) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,293) @c ---end content algDependent---
../singular_texi/./d2t_singular/algebra_lib.tex(,294) 
../singular_texi/./d2t_singular/algebra_lib.tex(,295) @c ------------------- alg_kernel -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,296) @node alg_kernel, is_injective, algDependent, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,297) @subsubsection alg_kernel
../singular_texi/./d2t_singular/algebra_lib.tex(,298) @cindex alg_kernel
../singular_texi/./d2t_singular/algebra_lib.tex(,299) @c ---content alg_kernel---
../singular_texi/./d2t_singular/algebra_lib.tex(,300) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,301) 
../singular_texi/./d2t_singular/algebra_lib.tex(,302) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,303) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,304) alg_kernel(phi,pr[,s,c]); phi map to basering, pr preimage ring,
../singular_texi/./d2t_singular/algebra_lib.tex(,305) s string (name of kernel in pr), c integer.
../singular_texi/./d2t_singular/algebra_lib.tex(,306) 
../singular_texi/./d2t_singular/algebra_lib.tex(,307) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,308) a string, the kernel of phi as string.
../singular_texi/./d2t_singular/algebra_lib.tex(,309) @*If, moreover, a string s is given, the algorithm creates, in the
../singular_texi/./d2t_singular/algebra_lib.tex(,310) preimage ring pr the kernel of phi with name s.
../singular_texi/./d2t_singular/algebra_lib.tex(,311) @*Three different algorithms are used depending on c = 1,2,3.
../singular_texi/./d2t_singular/algebra_lib.tex(,312) If c is not given or c=0, a heuristically best method is chosen.
../singular_texi/./d2t_singular/algebra_lib.tex(,313) (algorithm 1 uses the preimage command)
../singular_texi/./d2t_singular/algebra_lib.tex(,314) 
../singular_texi/./d2t_singular/algebra_lib.tex(,315) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,316) Since the kernel of phi lives in pr, it cannot be returned to the
../singular_texi/./d2t_singular/algebra_lib.tex(,317) basering. If s is given, the user has access to it in pr via s.
../singular_texi/./d2t_singular/algebra_lib.tex(,318) The basering may be a quotient ring.
../singular_texi/./d2t_singular/algebra_lib.tex(,319) 
../singular_texi/./d2t_singular/algebra_lib.tex(,320) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,321) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,322) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,323) @c computed example alg_kernel d2t_singular/algebra_lib.doc:279 
../singular_texi/./d2t_singular/algebra_lib.tex(,324) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,325) ring r = 0,(a,b,c),ds;
../singular_texi/./d2t_singular/algebra_lib.tex(,326) ring s = 0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,327) ideal I = x-w,u2w+1,yz-v;
../singular_texi/./d2t_singular/algebra_lib.tex(,328) map phi = r,I;                // a map from r to s:
../singular_texi/./d2t_singular/algebra_lib.tex(,329) alg_kernel(phi,r);            // a,b,c ---> x-w,u2w+1,yz-v
../singular_texi/./d2t_singular/algebra_lib.tex(,330) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,331) ring S = 0,(a,b,c),ds;
../singular_texi/./d2t_singular/algebra_lib.tex(,332) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,333) qring Q = std(x-y);
../singular_texi/./d2t_singular/algebra_lib.tex(,334) ideal i = x, y, x2-y3;
../singular_texi/./d2t_singular/algebra_lib.tex(,335) map phi = S,i;                 // a map to a quotient ring
../singular_texi/./d2t_singular/algebra_lib.tex(,336) alg_kernel(phi,S,"ker",3);     // uses algorithm 3
../singular_texi/./d2t_singular/algebra_lib.tex(,337) @expansion{} a-b,b^3-b^2+c
../singular_texi/./d2t_singular/algebra_lib.tex(,338) setring S;                     // you have access to kernel in preimage
../singular_texi/./d2t_singular/algebra_lib.tex(,339) ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,340) @expansion{} ker[1]=a-b
../singular_texi/./d2t_singular/algebra_lib.tex(,341) @expansion{} ker[2]=c-b2+b3
../singular_texi/./d2t_singular/algebra_lib.tex(,342) @c end example alg_kernel d2t_singular/algebra_lib.doc:279
../singular_texi/./d2t_singular/algebra_lib.tex(,343) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,344) @c ---end content alg_kernel---
../singular_texi/./d2t_singular/algebra_lib.tex(,345) 
../singular_texi/./d2t_singular/algebra_lib.tex(,346) @c ------------------- is_injective -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,347) @node is_injective, is_surjective, alg_kernel, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,348) @subsubsection is_injective
../singular_texi/./d2t_singular/algebra_lib.tex(,349) @cindex is_injective
../singular_texi/./d2t_singular/algebra_lib.tex(,350) @c ---content is_injective---
../singular_texi/./d2t_singular/algebra_lib.tex(,351) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,352) 
../singular_texi/./d2t_singular/algebra_lib.tex(,353) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,354) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,355) is_injective(phi,pr[,c,s]); phi map, pr preimage ring, c int, s string
../singular_texi/./d2t_singular/algebra_lib.tex(,356) 
../singular_texi/./d2t_singular/algebra_lib.tex(,357) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,358) @format	
../singular_texi/./d2t_singular/algebra_lib.tex(,359)          - 1 (type int) if phi is injective, 0 if not (if s is not given).
../singular_texi/./d2t_singular/algebra_lib.tex(,360)          - If s is given, return a list l of size 2, l[1] int, l[2] ring:
../singular_texi/./d2t_singular/algebra_lib.tex(,361)            l[1] is 1 if phi is injective, 0 if not
../singular_texi/./d2t_singular/algebra_lib.tex(,362)            l[2] is a ring with variables x(1),...,x(n),y(1),...,y(m) if the
../singular_texi/./d2t_singular/algebra_lib.tex(,363)            basering has n variables and the map m components, it contains the
../singular_texi/./d2t_singular/algebra_lib.tex(,364)            ideal 'ker', depending only on the y(i), the kernel of the given map
../singular_texi/./d2t_singular/algebra_lib.tex(,365) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,366) 
../singular_texi/./d2t_singular/algebra_lib.tex(,367) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,368) Three different algorithms are used depending on c = 1,2,3.
../singular_texi/./d2t_singular/algebra_lib.tex(,369) If c is not given or c=0, a heuristically best method is chosen.
../singular_texi/./d2t_singular/algebra_lib.tex(,370) The basering may be a quotient ring. However, if the preimage ring is
../singular_texi/./d2t_singular/algebra_lib.tex(,371) a quotient ring, say pr = P/I, consider phi as a map from P and then
../singular_texi/./d2t_singular/algebra_lib.tex(,372) the algorithm returns 1 if the kernel of phi is 0 mod I.
../singular_texi/./d2t_singular/algebra_lib.tex(,373) To access to the ring l[2] and see ker you must give the ring a name,
../singular_texi/./d2t_singular/algebra_lib.tex(,374) e.g. def S=l[2]; setring S; ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,375) 
../singular_texi/./d2t_singular/algebra_lib.tex(,376) @item @strong{Display:}
../singular_texi/./d2t_singular/algebra_lib.tex(,377) The above comment is displayed if printlevel >= 0 (default).
../singular_texi/./d2t_singular/algebra_lib.tex(,378) 
../singular_texi/./d2t_singular/algebra_lib.tex(,379) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,380) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,381) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,382) @c computed example is_injective d2t_singular/algebra_lib.doc:334 
../singular_texi/./d2t_singular/algebra_lib.tex(,383) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,384) int p = printlevel;
../singular_texi/./d2t_singular/algebra_lib.tex(,385) ring r = 0,(a,b,c),ds;
../singular_texi/./d2t_singular/algebra_lib.tex(,386) ring s = 0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,387) ideal I = x-w,u2w+1,yz-v;
../singular_texi/./d2t_singular/algebra_lib.tex(,388) map phi = r,I;                    // a map from r to s:
../singular_texi/./d2t_singular/algebra_lib.tex(,389) is_injective(phi,r);              // a,b,c ---> x-w,u2w+1,yz-v
../singular_texi/./d2t_singular/algebra_lib.tex(,390) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,391) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,392) ideal i = x, y, x2-y3;
../singular_texi/./d2t_singular/algebra_lib.tex(,393) map phi = R,i;                    // a map from R to itself, z --> x2-y3
../singular_texi/./d2t_singular/algebra_lib.tex(,394) list l = is_injective(phi,R,"");
../singular_texi/./d2t_singular/algebra_lib.tex(,395) @expansion{} 
../singular_texi/./d2t_singular/algebra_lib.tex(,396) @expansion{} // The 2nd element of the list is a ring with variables x(1),...,x(n),
../singular_texi/./d2t_singular/algebra_lib.tex(,397) @expansion{} // y(1),...,y(m) if the basering has n variables and the map is
../singular_texi/./d2t_singular/algebra_lib.tex(,398) @expansion{} // F[1],...,F[m].
../singular_texi/./d2t_singular/algebra_lib.tex(,399) @expansion{} // It contains the ideal ker, the kernel of the given map y(i) --> F[i].
../singular_texi/./d2t_singular/algebra_lib.tex(,400) @expansion{} // To access to the ring and see ker you must give the ring a name,
../singular_texi/./d2t_singular/algebra_lib.tex(,401) @expansion{} // e.g.:
../singular_texi/./d2t_singular/algebra_lib.tex(,402) @expansion{}      def S = l[2]; setring S; ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,403) @expansion{} 	
../singular_texi/./d2t_singular/algebra_lib.tex(,404) l[1];
../singular_texi/./d2t_singular/algebra_lib.tex(,405) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,406) def S = l[2]; setring S;
../singular_texi/./d2t_singular/algebra_lib.tex(,407) ker;
../singular_texi/./d2t_singular/algebra_lib.tex(,408) @expansion{} ker[1]=y(2)^3-y(1)^2+y(3)
../singular_texi/./d2t_singular/algebra_lib.tex(,409) @c end example is_injective d2t_singular/algebra_lib.doc:334
../singular_texi/./d2t_singular/algebra_lib.tex(,410) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,411) @c ---end content is_injective---
../singular_texi/./d2t_singular/algebra_lib.tex(,412) 
../singular_texi/./d2t_singular/algebra_lib.tex(,413) @c ------------------- is_surjective -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,414) @node is_surjective, is_bijective, is_injective, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,415) @subsubsection is_surjective
../singular_texi/./d2t_singular/algebra_lib.tex(,416) @cindex is_surjective
../singular_texi/./d2t_singular/algebra_lib.tex(,417) @c ---content is_surjective---
../singular_texi/./d2t_singular/algebra_lib.tex(,418) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,419) 
../singular_texi/./d2t_singular/algebra_lib.tex(,420) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,421) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,422) is_surjective(phi); phi map to basering, or ideal defining it
../singular_texi/./d2t_singular/algebra_lib.tex(,423) 
../singular_texi/./d2t_singular/algebra_lib.tex(,424) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,425) an integer, 1 if phi is surjective, 0 if not
../singular_texi/./d2t_singular/algebra_lib.tex(,426) 
../singular_texi/./d2t_singular/algebra_lib.tex(,427) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,428) The algorithm returns 1 iff all the variables of the basering are
../singular_texi/./d2t_singular/algebra_lib.tex(,429) contained in the polynomial subalgebra generated by the polynomials
../singular_texi/./d2t_singular/algebra_lib.tex(,430) defining phi. Hence, if the basering has local or mixed ordering
../singular_texi/./d2t_singular/algebra_lib.tex(,431) or if the preimage ring is a quotient ring (in which case the map
../singular_texi/./d2t_singular/algebra_lib.tex(,432) may not be well defined) then the return value 1 means
../singular_texi/./d2t_singular/algebra_lib.tex(,433) @*"surjectivity" in this sense.
../singular_texi/./d2t_singular/algebra_lib.tex(,434) 
../singular_texi/./d2t_singular/algebra_lib.tex(,435) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,436) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,437) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,438) @c computed example is_surjective d2t_singular/algebra_lib.doc:378 
../singular_texi/./d2t_singular/algebra_lib.tex(,439) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,440) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,441) ideal i = x, y, x2-y3;
../singular_texi/./d2t_singular/algebra_lib.tex(,442) map phi = R,i;                    // a map from R to itself, z->x2-y3
../singular_texi/./d2t_singular/algebra_lib.tex(,443) is_surjective(phi);
../singular_texi/./d2t_singular/algebra_lib.tex(,444) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,445) qring Q = std(ideal(z-x37));
../singular_texi/./d2t_singular/algebra_lib.tex(,446) map psi = R, x,y,x2-y3;           // the same map to the quotient ring
../singular_texi/./d2t_singular/algebra_lib.tex(,447) is_surjective(psi);
../singular_texi/./d2t_singular/algebra_lib.tex(,448) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,449) ring S = 0,(a,b,c),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,450) map psi = R,ideal(a,a+b,c-a2+b3); // a map from R to S,
../singular_texi/./d2t_singular/algebra_lib.tex(,451) is_surjective(psi);               // x->a, y->a+b, z->c-a2+b3
../singular_texi/./d2t_singular/algebra_lib.tex(,452) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,453) @c end example is_surjective d2t_singular/algebra_lib.doc:378
../singular_texi/./d2t_singular/algebra_lib.tex(,454) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,455) @c ---end content is_surjective---
../singular_texi/./d2t_singular/algebra_lib.tex(,456) 
../singular_texi/./d2t_singular/algebra_lib.tex(,457) @c ------------------- is_bijective -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,458) @node is_bijective, noetherNormal, is_surjective, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,459) @subsubsection is_bijective
../singular_texi/./d2t_singular/algebra_lib.tex(,460) @cindex is_bijective
../singular_texi/./d2t_singular/algebra_lib.tex(,461) @c ---content is_bijective---
../singular_texi/./d2t_singular/algebra_lib.tex(,462) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,463) 
../singular_texi/./d2t_singular/algebra_lib.tex(,464) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,465) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,466) is_bijective(phi,pr); phi map to basering, pr preimage ring
../singular_texi/./d2t_singular/algebra_lib.tex(,467) 
../singular_texi/./d2t_singular/algebra_lib.tex(,468) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,469) an integer, 1 if phi is bijective, 0 if not
../singular_texi/./d2t_singular/algebra_lib.tex(,470) 
../singular_texi/./d2t_singular/algebra_lib.tex(,471) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,472) The algorithm checks first injectivity and then surjectivity
../singular_texi/./d2t_singular/algebra_lib.tex(,473) To interpret this for local/mixed orderings, or for quotient rings
../singular_texi/./d2t_singular/algebra_lib.tex(,474) type help is_surjective; and help is_injective;
../singular_texi/./d2t_singular/algebra_lib.tex(,475) 
../singular_texi/./d2t_singular/algebra_lib.tex(,476) @item @strong{Display:}
../singular_texi/./d2t_singular/algebra_lib.tex(,477) A comment if printlevel >= voice-1 (default)
../singular_texi/./d2t_singular/algebra_lib.tex(,478) 
../singular_texi/./d2t_singular/algebra_lib.tex(,479) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,480) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,481) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,482) @c computed example is_bijective d2t_singular/algebra_lib.doc:419 
../singular_texi/./d2t_singular/algebra_lib.tex(,483) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,484) int p = printlevel;  printlevel = 1;
../singular_texi/./d2t_singular/algebra_lib.tex(,485) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,486) ideal i = x, y, x2-y3;
../singular_texi/./d2t_singular/algebra_lib.tex(,487) map phi = R,i;                      // a map from R to itself, z->x2-y3
../singular_texi/./d2t_singular/algebra_lib.tex(,488) is_bijective(phi,R);
../singular_texi/./d2t_singular/algebra_lib.tex(,489) @expansion{} // map not injective
../singular_texi/./d2t_singular/algebra_lib.tex(,490) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,491) qring Q = std(z-x2+y3);
../singular_texi/./d2t_singular/algebra_lib.tex(,492) is_bijective(ideal(x,y,x2-y3),Q);
../singular_texi/./d2t_singular/algebra_lib.tex(,493) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,494) ring S = 0,(a,b,c,d),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,495) map psi = R,ideal(a,a+b,c-a2+b3,0); // a map from R to S,
../singular_texi/./d2t_singular/algebra_lib.tex(,496) is_bijective(psi,R);                // x->a, y->a+b, z->c-a2+b3
../singular_texi/./d2t_singular/algebra_lib.tex(,497) @expansion{} // map injective, but not surjective
../singular_texi/./d2t_singular/algebra_lib.tex(,498) @expansion{} 0
../singular_texi/./d2t_singular/algebra_lib.tex(,499) qring T = std(d,c-a2+b3);
../singular_texi/./d2t_singular/algebra_lib.tex(,500) @expansion{} // ** _ is no standardbasis
../singular_texi/./d2t_singular/algebra_lib.tex(,501) map chi = Q,a,b,a2-b3;              // amap between two quotient rings
../singular_texi/./d2t_singular/algebra_lib.tex(,502) is_bijective(chi,Q);
../singular_texi/./d2t_singular/algebra_lib.tex(,503) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,504) printlevel = p;
../singular_texi/./d2t_singular/algebra_lib.tex(,505) @c end example is_bijective d2t_singular/algebra_lib.doc:419
../singular_texi/./d2t_singular/algebra_lib.tex(,506) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,507) @c ---end content is_bijective---
../singular_texi/./d2t_singular/algebra_lib.tex(,508) 
../singular_texi/./d2t_singular/algebra_lib.tex(,509) @c ------------------- noetherNormal -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,510) @node noetherNormal, mapIsFinite, is_bijective, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,511) @subsubsection noetherNormal
../singular_texi/./d2t_singular/algebra_lib.tex(,512) @cindex noetherNormal
../singular_texi/./d2t_singular/algebra_lib.tex(,513) @c ---content noetherNormal---
../singular_texi/./d2t_singular/algebra_lib.tex(,514) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,515) 
../singular_texi/./d2t_singular/algebra_lib.tex(,516) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,517) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,518) noetherNormal(id[,p]); id ideal, p integer
../singular_texi/./d2t_singular/algebra_lib.tex(,519) 
../singular_texi/./d2t_singular/algebra_lib.tex(,520) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,521) @format	
../singular_texi/./d2t_singular/algebra_lib.tex(,522)          a list l two ideals, say I,J:
../singular_texi/./d2t_singular/algebra_lib.tex(,523)          - I is generated by a subset of the variables with size(I) = dim(id)
../singular_texi/./d2t_singular/algebra_lib.tex(,524)          - J defines a map (coordinate change in the basering), such that:
../singular_texi/./d2t_singular/algebra_lib.tex(,525)            if we define  map phi=basering,J;
../singular_texi/./d2t_singular/algebra_lib.tex(,526)            then k[var(1),...,var(n)]/phi(id) is finite over k[I].
../singular_texi/./d2t_singular/algebra_lib.tex(,527)          If p is given, 0<=p<=100, a sparse coordinate change with p percent
../singular_texi/./d2t_singular/algebra_lib.tex(,528)          of the matrix entries being 0 (default: p=0 i.e. dense)
../singular_texi/./d2t_singular/algebra_lib.tex(,529) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,530) 
../singular_texi/./d2t_singular/algebra_lib.tex(,531) @item @strong{Note:}
../singular_texi/./d2t_singular/algebra_lib.tex(,532) Designed for characteristic 0.It works also in char k > 0 if it
../singular_texi/./d2t_singular/algebra_lib.tex(,533) terminates,but may result in an infinite loop in small characteristic
../singular_texi/./d2t_singular/algebra_lib.tex(,534) 
../singular_texi/./d2t_singular/algebra_lib.tex(,535) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,536) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,537) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,538) @c computed example noetherNormal d2t_singular/algebra_lib.doc:468 
../singular_texi/./d2t_singular/algebra_lib.tex(,539) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,540) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,541) ideal i= xy,xz;
../singular_texi/./d2t_singular/algebra_lib.tex(,542) noetherNormal(i);
../singular_texi/./d2t_singular/algebra_lib.tex(,543) @expansion{} [1]:
../singular_texi/./d2t_singular/algebra_lib.tex(,544) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/algebra_lib.tex(,545) @expansion{}    _[2]=2x+y
../singular_texi/./d2t_singular/algebra_lib.tex(,546) @expansion{}    _[3]=3x+4y+z
../singular_texi/./d2t_singular/algebra_lib.tex(,547) @expansion{} [2]:
../singular_texi/./d2t_singular/algebra_lib.tex(,548) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/algebra_lib.tex(,549) @expansion{}    _[2]=z
../singular_texi/./d2t_singular/algebra_lib.tex(,550) @c end example noetherNormal d2t_singular/algebra_lib.doc:468
../singular_texi/./d2t_singular/algebra_lib.tex(,551) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,552) @c ---end content noetherNormal---
../singular_texi/./d2t_singular/algebra_lib.tex(,553) 
../singular_texi/./d2t_singular/algebra_lib.tex(,554) @c ------------------- mapIsFinite -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,555) @node mapIsFinite, finitenessTest, noetherNormal, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,556) @subsubsection mapIsFinite
../singular_texi/./d2t_singular/algebra_lib.tex(,557) @cindex mapIsFinite
../singular_texi/./d2t_singular/algebra_lib.tex(,558) @c ---content mapIsFinite---
../singular_texi/./d2t_singular/algebra_lib.tex(,559) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,560) 
../singular_texi/./d2t_singular/algebra_lib.tex(,561) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,562) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,563) mapIsFinite(phi,R[,J]); R a ring, phi: R ---> basering a map
../singular_texi/./d2t_singular/algebra_lib.tex(,564) J an ideal in the basering, J = 0 if not given
../singular_texi/./d2t_singular/algebra_lib.tex(,565) 
../singular_texi/./d2t_singular/algebra_lib.tex(,566) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,567) 1 if R ---> basering/J is finite and 0 else
../singular_texi/./d2t_singular/algebra_lib.tex(,568) 
../singular_texi/./d2t_singular/algebra_lib.tex(,569) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,570) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,571) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,572) @c computed example mapIsFinite d2t_singular/algebra_lib.doc:495 
../singular_texi/./d2t_singular/algebra_lib.tex(,573) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,574) ring r = 0,(a,b,c),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,575) ring s = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/algebra_lib.tex(,576) ideal i= xy;
../singular_texi/./d2t_singular/algebra_lib.tex(,577) map phi= r,(xy)^3+x2+z,y2-1,z3;
../singular_texi/./d2t_singular/algebra_lib.tex(,578) mapIsFinite(phi,r,i);
../singular_texi/./d2t_singular/algebra_lib.tex(,579) @expansion{} 1
../singular_texi/./d2t_singular/algebra_lib.tex(,580) @c end example mapIsFinite d2t_singular/algebra_lib.doc:495
../singular_texi/./d2t_singular/algebra_lib.tex(,581) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,582) @c ---end content mapIsFinite---
../singular_texi/./d2t_singular/algebra_lib.tex(,583) 
../singular_texi/./d2t_singular/algebra_lib.tex(,584) @c ------------------- finitenessTest -------------
../singular_texi/./d2t_singular/algebra_lib.tex(,585) @node finitenessTest,, mapIsFinite, algebra_lib
../singular_texi/./d2t_singular/algebra_lib.tex(,586) @subsubsection finitenessTest
../singular_texi/./d2t_singular/algebra_lib.tex(,587) @cindex finitenessTest
../singular_texi/./d2t_singular/algebra_lib.tex(,588) @c ---content finitenessTest---
../singular_texi/./d2t_singular/algebra_lib.tex(,589) Procedure from library @code{algebra.lib} (@pxref{algebra_lib}).
../singular_texi/./d2t_singular/algebra_lib.tex(,590) 
../singular_texi/./d2t_singular/algebra_lib.tex(,591) @table @asis
../singular_texi/./d2t_singular/algebra_lib.tex(,592) @item @strong{Usage:}
../singular_texi/./d2t_singular/algebra_lib.tex(,593) finitenessTest(J[,v]); J ideal, v intvec (say v1,...,vr with vi>0)
../singular_texi/./d2t_singular/algebra_lib.tex(,594) 
../singular_texi/./d2t_singular/algebra_lib.tex(,595) @item @strong{Return:}
../singular_texi/./d2t_singular/algebra_lib.tex(,596) @format
../singular_texi/./d2t_singular/algebra_lib.tex(,597)          a list l with l[1] integer, l[2], l[3], l[4] ideals
../singular_texi/./d2t_singular/algebra_lib.tex(,598)          - l[1] = 1 if var(v1),...,var(vr) are in l[2] and 0 else
../singular_texi/./d2t_singular/algebra_lib.tex(,599)          - l[2] (resp. l[3]) contains those variables which occur,
../singular_texi/./d2t_singular/algebra_lib.tex(,600)            (resp. occur not) as pure power in the leading term of one of the
../singular_texi/./d2t_singular/algebra_lib.tex(,601)            generators of J,
../singular_texi/./d2t_singular/algebra_lib.tex(,602)          - l[4] contains those J[i] for which the leading term is a pure power
../singular_texi/./d2t_singular/algebra_lib.tex(,603)            of a variable (which is then in l[2])
../singular_texi/./d2t_singular/algebra_lib.tex(,604)          (default: v = [1,2,..,nvars(basering)])
../singular_texi/./d2t_singular/algebra_lib.tex(,605) @end format
../singular_texi/./d2t_singular/algebra_lib.tex(,606) 
../singular_texi/./d2t_singular/algebra_lib.tex(,607) @item @strong{Theory:}
../singular_texi/./d2t_singular/algebra_lib.tex(,608) If J is a standard basis of an ideal generated by x_1 - f_1(y),...,
../singular_texi/./d2t_singular/algebra_lib.tex(,609) x_n - f_n with y_j ordered lexicographically and y_j >> x_i, then,
../singular_texi/./d2t_singular/algebra_lib.tex(,610) if y_i appears as pure power in the leading term of J[k]. J[k] defines
../singular_texi/./d2t_singular/algebra_lib.tex(,611) an integral relation for y_i over the y_(i+1),... and the f's.
../singular_texi/./d2t_singular/algebra_lib.tex(,612) Moreover, in this situation, if l[2] = y_1,...,y_r, then K[y_1,...y_r]
../singular_texi/./d2t_singular/algebra_lib.tex(,613) is finite over K[f_1..f_n]. If J contains furthermore polynomials
../singular_texi/./d2t_singular/algebra_lib.tex(,614) h_j(y), then K[y_1,...y_z]/<h_j> is finite over K[f_1..f_n].
../singular_texi/./d2t_singular/algebra_lib.tex(,615) 
../singular_texi/./d2t_singular/algebra_lib.tex(,616) @end table
../singular_texi/./d2t_singular/algebra_lib.tex(,617) @strong{Example:}
../singular_texi/./d2t_singular/algebra_lib.tex(,618) @smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,619) @c computed example finitenessTest d2t_singular/algebra_lib.doc:541 
../singular_texi/./d2t_singular/algebra_lib.tex(,620) LIB "algebra.lib";
../singular_texi/./d2t_singular/algebra_lib.tex(,621) ring s = 0,(x,y,z,a,b,c),(lp(3),dp);
../singular_texi/./d2t_singular/algebra_lib.tex(,622) ideal i= a -(xy)^3+x2-z, b -y2-1, c -z3;
../singular_texi/./d2t_singular/algebra_lib.tex(,623) ideal j = a -(xy)^3+x2-z, b -y2-1, c -z3, xy;
../singular_texi/./d2t_singular/algebra_lib.tex(,624) finitenessTest(std(i),1..3);
../singular_texi/./d2t_singular/algebra_lib.tex(,625) @expansion{} [1]:
../singular_texi/./d2t_singular/algebra_lib.tex(,626) @expansion{}    0
../singular_texi/./d2t_singular/algebra_lib.tex(,627) @expansion{} [2]:
../singular_texi/./d2t_singular/algebra_lib.tex(,628) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/algebra_lib.tex(,629) @expansion{}    _[2]=z
../singular_texi/./d2t_singular/algebra_lib.tex(,630) @expansion{} [3]:
../singular_texi/./d2t_singular/algebra_lib.tex(,631) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/algebra_lib.tex(,632) @expansion{}    _[2]=a
../singular_texi/./d2t_singular/algebra_lib.tex(,633) @expansion{}    _[3]=b
../singular_texi/./d2t_singular/algebra_lib.tex(,634) @expansion{}    _[4]=c
../singular_texi/./d2t_singular/algebra_lib.tex(,635) @expansion{} [4]:
../singular_texi/./d2t_singular/algebra_lib.tex(,636) @expansion{}    _[1]=z3-c
../singular_texi/./d2t_singular/algebra_lib.tex(,637) @expansion{}    _[2]=y2-b+1
../singular_texi/./d2t_singular/algebra_lib.tex(,638) finitenessTest(std(j),1..3);
../singular_texi/./d2t_singular/algebra_lib.tex(,639) @expansion{} [1]:
../singular_texi/./d2t_singular/algebra_lib.tex(,640) @expansion{}    1
../singular_texi/./d2t_singular/algebra_lib.tex(,641) @expansion{} [2]:
../singular_texi/./d2t_singular/algebra_lib.tex(,642) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/algebra_lib.tex(,643) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/algebra_lib.tex(,644) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/algebra_lib.tex(,645) @expansion{} [3]:
../singular_texi/./d2t_singular/algebra_lib.tex(,646) @expansion{}    _[1]=a
../singular_texi/./d2t_singular/algebra_lib.tex(,647) @expansion{}    _[2]=b
../singular_texi/./d2t_singular/algebra_lib.tex(,648) @expansion{}    _[3]=c
../singular_texi/./d2t_singular/algebra_lib.tex(,649) @expansion{} [4]:
../singular_texi/./d2t_singular/algebra_lib.tex(,650) @expansion{}    _[1]=z3-c
../singular_texi/./d2t_singular/algebra_lib.tex(,651) @expansion{}    _[2]=y2-b+1
../singular_texi/./d2t_singular/algebra_lib.tex(,652) @expansion{}    _[3]=x2-z+a
../singular_texi/./d2t_singular/algebra_lib.tex(,653) @c end example finitenessTest d2t_singular/algebra_lib.doc:541
../singular_texi/./d2t_singular/algebra_lib.tex(,654) @end smallexample
../singular_texi/./d2t_singular/algebra_lib.tex(,655) @c ---end content finitenessTest---
../singular_texi/singular.tex(,376) @c ----------------------------------------------------------
../singular_texi/singular.tex(,377) @node elim_lib, homolog_lib, algebra_lib, Commutative algebra
../singular_texi/singular.tex(,378) @subsection elim_lib
../singular_texi/singular.tex(,379) @c include of docu for elim.lib
../singular_texi/./d2t_singular/elim_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/elim_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/elim_lib.doc
../singular_texi/./d2t_singular/elim_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/elim_lib.doc INSTEAD
../singular_texi/./d2t_singular/elim_lib.tex(,4) @c library version: (1.14.2.4,2003/04/16)
../singular_texi/./d2t_singular/elim_lib.tex(,5) @c library file: ../Singular/LIB/elim.lib
../singular_texi/./d2t_singular/elim_lib.tex(,6) @cindex elim.lib
../singular_texi/./d2t_singular/elim_lib.tex(,7) @cindex elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/elim_lib.tex(,10) elim.lib
../singular_texi/./d2t_singular/elim_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/elim_lib.tex(,12)       Elimination, Saturation and Blowing up
../singular_texi/./d2t_singular/elim_lib.tex(,13) 
../singular_texi/./d2t_singular/elim_lib.tex(,14) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,15) 
../singular_texi/./d2t_singular/elim_lib.tex(,16) @strong{Procedures:}
../singular_texi/./d2t_singular/elim_lib.tex(,17) @menu
../singular_texi/./d2t_singular/elim_lib.tex(,18) * blowup0:: create presentation of blownup ring of ideal j
../singular_texi/./d2t_singular/elim_lib.tex(,19) * elim:: variable n..m eliminated from id (ideal/module)
../singular_texi/./d2t_singular/elim_lib.tex(,20) * elim1:: p=product of vars to be eliminated from id
../singular_texi/./d2t_singular/elim_lib.tex(,21) * nselect:: select generators not containing n-th [..m-th] variable
../singular_texi/./d2t_singular/elim_lib.tex(,22) * sat:: saturated quotient of ideal/module id by ideal j
../singular_texi/./d2t_singular/elim_lib.tex(,23) * select:: select generators containing all variables n...m
../singular_texi/./d2t_singular/elim_lib.tex(,24) * select1:: select generators containing one variable n...m
../singular_texi/./d2t_singular/elim_lib.tex(,25) @end menu
../singular_texi/./d2t_singular/elim_lib.tex(,26) @c ---end content LibInfo---
../singular_texi/./d2t_singular/elim_lib.tex(,27) 
../singular_texi/./d2t_singular/elim_lib.tex(,28) @c ------------------- blowup0 -------------
../singular_texi/./d2t_singular/elim_lib.tex(,29) @node blowup0, elim,, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,30) @subsubsection blowup0
../singular_texi/./d2t_singular/elim_lib.tex(,31) @cindex blowup0
../singular_texi/./d2t_singular/elim_lib.tex(,32) @c ---content blowup0---
../singular_texi/./d2t_singular/elim_lib.tex(,33) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,34) 
../singular_texi/./d2t_singular/elim_lib.tex(,35) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,36) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,37) blowup0(j[,s1,s2]); j ideal, s1,s2 nonempty strings
../singular_texi/./d2t_singular/elim_lib.tex(,38) 
../singular_texi/./d2t_singular/elim_lib.tex(,39) @item @strong{Create:}
../singular_texi/./d2t_singular/elim_lib.tex(,40) Create a presentation of the blowup ring of j
../singular_texi/./d2t_singular/elim_lib.tex(,41) 
../singular_texi/./d2t_singular/elim_lib.tex(,42) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,43) no return value
../singular_texi/./d2t_singular/elim_lib.tex(,44) 
../singular_texi/./d2t_singular/elim_lib.tex(,45) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,46) s1 and s2 are used to give names to the blownup ring and the blownup
../singular_texi/./d2t_singular/elim_lib.tex(,47) ideal (default: s1="j", s2="A")
../singular_texi/./d2t_singular/elim_lib.tex(,48) @*Assume R = char,x(1..n),ord is the basering of j, and s1="j", s2="A"
../singular_texi/./d2t_singular/elim_lib.tex(,49) then the procedure creates a new ring with name Bl_jR
../singular_texi/./d2t_singular/elim_lib.tex(,50) @*(equal to R[A,B,...])
../singular_texi/./d2t_singular/elim_lib.tex(,51) @*Bl_jR = char,(A,B,...,x(1..n)),(dp(k),ord)
../singular_texi/./d2t_singular/elim_lib.tex(,52) @*with k=ncols(j) new variables A,B,... and ordering wp(d1..dk) if j is
../singular_texi/./d2t_singular/elim_lib.tex(,53) homogeneous with deg(j[i])=di resp. dp otherwise for these vars.
../singular_texi/./d2t_singular/elim_lib.tex(,54) If k>26 or size(s2)>1, say s2="A()", the new vars are A(1),...,A(k).
../singular_texi/./d2t_singular/elim_lib.tex(,55) Let j_ be the kernel of the ring map Bl_jR -> R defined by A(i)->j[i],
../singular_texi/./d2t_singular/elim_lib.tex(,56) x(i)->x(i), then the quotient ring Bl_jR/j_ is the blowup ring of j
../singular_texi/./d2t_singular/elim_lib.tex(,57) in R (being isomorphic to R+j+j^2+...). Moreover the procedure creates
../singular_texi/./d2t_singular/elim_lib.tex(,58) a std basis of j_ with name j_ in Bl_jR.
../singular_texi/./d2t_singular/elim_lib.tex(,59) @*This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/elim_lib.tex(,60) 
../singular_texi/./d2t_singular/elim_lib.tex(,61) @item @strong{Display:}
../singular_texi/./d2t_singular/elim_lib.tex(,62) printlevel >=0: explain created objects (default)
../singular_texi/./d2t_singular/elim_lib.tex(,63) 
../singular_texi/./d2t_singular/elim_lib.tex(,64) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,65) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,66) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,67) @c computed example blowup0 d2t_singular/elim_lib.doc:65 
../singular_texi/./d2t_singular/elim_lib.tex(,68) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,69) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/elim_lib.tex(,70) poly f=y2+x3; ideal j=jacob(f);
../singular_texi/./d2t_singular/elim_lib.tex(,71) blowup0(j);
../singular_texi/./d2t_singular/elim_lib.tex(,72) @expansion{} 
../singular_texi/./d2t_singular/elim_lib.tex(,73) @expansion{} // The proc created the ring Bl_jR (equal to R[A,B])
../singular_texi/./d2t_singular/elim_lib.tex(,74) @expansion{} // it contains the ideal j_ , such that
../singular_texi/./d2t_singular/elim_lib.tex(,75) @expansion{} //             Bl_jR/j_ is the blowup ring
../singular_texi/./d2t_singular/elim_lib.tex(,76) @expansion{} // show(Bl_jR); shows this ring.
../singular_texi/./d2t_singular/elim_lib.tex(,77) @expansion{} // Make Bl_jR the basering and see j_ by typing:
../singular_texi/./d2t_singular/elim_lib.tex(,78) @expansion{}    setring Bl_jR;
../singular_texi/./d2t_singular/elim_lib.tex(,79) @expansion{}    j_;
../singular_texi/./d2t_singular/elim_lib.tex(,80) show(Bl_jR);
../singular_texi/./d2t_singular/elim_lib.tex(,81) @expansion{} // ring: (0),(A,B,x,y),(wp(2,1),dp(2),C);
../singular_texi/./d2t_singular/elim_lib.tex(,82) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/elim_lib.tex(,83) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/elim_lib.tex(,84) @expansion{} // j_                   [0]  ideal, 1 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,85) setring Bl_jR;
../singular_texi/./d2t_singular/elim_lib.tex(,86) j_;"";
../singular_texi/./d2t_singular/elim_lib.tex(,87) @expansion{} j_[1]=2Ay-3Bx2
../singular_texi/./d2t_singular/elim_lib.tex(,88) @expansion{} 
../singular_texi/./d2t_singular/elim_lib.tex(,89) ring r=32003,(x,y,z),ds;
../singular_texi/./d2t_singular/elim_lib.tex(,90) blowup0(maxideal(1),"m","T()");
../singular_texi/./d2t_singular/elim_lib.tex(,91) @expansion{} 
../singular_texi/./d2t_singular/elim_lib.tex(,92) @expansion{} // The proc created the ring Bl_mr (equal to r[T(1..3)])
../singular_texi/./d2t_singular/elim_lib.tex(,93) @expansion{} // it contains the ideal m_ , such that
../singular_texi/./d2t_singular/elim_lib.tex(,94) @expansion{} //             Bl_mr/m_ is the blowup ring
../singular_texi/./d2t_singular/elim_lib.tex(,95) @expansion{} // show(Bl_mr); shows this ring.
../singular_texi/./d2t_singular/elim_lib.tex(,96) @expansion{} // Make Bl_mr the basering and see m_ by typing:
../singular_texi/./d2t_singular/elim_lib.tex(,97) @expansion{}    setring Bl_mr;
../singular_texi/./d2t_singular/elim_lib.tex(,98) @expansion{}    m_;
../singular_texi/./d2t_singular/elim_lib.tex(,99) show(Bl_mr);
../singular_texi/./d2t_singular/elim_lib.tex(,100) @expansion{} // ring: (32003),(T(1),T(2),T(3),x,y,z),(wp(1,1,1),ds(3),C);
../singular_texi/./d2t_singular/elim_lib.tex(,101) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/elim_lib.tex(,102) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/elim_lib.tex(,103) @expansion{} // m_                   [0]  ideal, 3 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,104) setring Bl_mr;
../singular_texi/./d2t_singular/elim_lib.tex(,105) m_;
../singular_texi/./d2t_singular/elim_lib.tex(,106) @expansion{} m_[1]=T(1)y-T(2)x
../singular_texi/./d2t_singular/elim_lib.tex(,107) @expansion{} m_[2]=T(1)z-T(3)x
../singular_texi/./d2t_singular/elim_lib.tex(,108) @expansion{} m_[3]=T(2)z-T(3)y
../singular_texi/./d2t_singular/elim_lib.tex(,109) kill Bl_jR, Bl_mr;
../singular_texi/./d2t_singular/elim_lib.tex(,110) @c end example blowup0 d2t_singular/elim_lib.doc:65
../singular_texi/./d2t_singular/elim_lib.tex(,111) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,112) @c ---end content blowup0---
../singular_texi/./d2t_singular/elim_lib.tex(,113) 
../singular_texi/./d2t_singular/elim_lib.tex(,114) @c ------------------- elim -------------
../singular_texi/./d2t_singular/elim_lib.tex(,115) @node elim, elim1, blowup0, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,116) @subsubsection elim
../singular_texi/./d2t_singular/elim_lib.tex(,117) @cindex elim
../singular_texi/./d2t_singular/elim_lib.tex(,118) @c ---content elim---
../singular_texi/./d2t_singular/elim_lib.tex(,119) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,120) 
../singular_texi/./d2t_singular/elim_lib.tex(,121) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,122) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,123) elim(id,n,m); id ideal/module, n,m integers
../singular_texi/./d2t_singular/elim_lib.tex(,124) 
../singular_texi/./d2t_singular/elim_lib.tex(,125) @item @strong{Returns:}
../singular_texi/./d2t_singular/elim_lib.tex(,126) ideal/module obtained from id by eliminating variables n..m
../singular_texi/./d2t_singular/elim_lib.tex(,127) 
../singular_texi/./d2t_singular/elim_lib.tex(,128) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,129) no special monomial ordering is required, result is a SB with
../singular_texi/./d2t_singular/elim_lib.tex(,130) respect to ordering dp (resp. ls) if the first var not to be
../singular_texi/./d2t_singular/elim_lib.tex(,131) eliminated belongs to a -p (resp. -s) block ordering
../singular_texi/./d2t_singular/elim_lib.tex(,132) @*This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/elim_lib.tex(,133) 
../singular_texi/./d2t_singular/elim_lib.tex(,134) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,135) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,136) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,137) @c computed example elim d2t_singular/elim_lib.doc:106 
../singular_texi/./d2t_singular/elim_lib.tex(,138) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,139) ring r=0,(x,y,u,v,w),dp;
../singular_texi/./d2t_singular/elim_lib.tex(,140) ideal i=x-u,y-u2,w-u3,v-x+y3;
../singular_texi/./d2t_singular/elim_lib.tex(,141) elim(i,3,4);
../singular_texi/./d2t_singular/elim_lib.tex(,142) @expansion{} _[1]=y2-xw
../singular_texi/./d2t_singular/elim_lib.tex(,143) @expansion{} _[2]=xy-w
../singular_texi/./d2t_singular/elim_lib.tex(,144) @expansion{} _[3]=x2-y
../singular_texi/./d2t_singular/elim_lib.tex(,145) module m=i*gen(1)+i*gen(2);
../singular_texi/./d2t_singular/elim_lib.tex(,146) m=elim(m,3,4);show(m);
../singular_texi/./d2t_singular/elim_lib.tex(,147) @expansion{} // module, 6 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,148) @expansion{} [y2-xw]
../singular_texi/./d2t_singular/elim_lib.tex(,149) @expansion{} [0,y2-xw]
../singular_texi/./d2t_singular/elim_lib.tex(,150) @expansion{} [xy-w]
../singular_texi/./d2t_singular/elim_lib.tex(,151) @expansion{} [0,xy-w]
../singular_texi/./d2t_singular/elim_lib.tex(,152) @expansion{} [x2-y]
../singular_texi/./d2t_singular/elim_lib.tex(,153) @expansion{} [0,x2-y]
../singular_texi/./d2t_singular/elim_lib.tex(,154) @c end example elim d2t_singular/elim_lib.doc:106
../singular_texi/./d2t_singular/elim_lib.tex(,155) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,156) @c inserted refs from d2t_singular/elim_lib.doc:115
../singular_texi/./d2t_singular/elim_lib.tex(,165) @strong{See also:}
../singular_texi/./d2t_singular/elim_lib.tex(,166) @ref{elim1};
../singular_texi/./d2t_singular/elim_lib.tex(,167) @ref{eliminate}.
../singular_texi/./d2t_singular/elim_lib.tex(,169) @c end inserted refs from d2t_singular/elim_lib.doc:115
../singular_texi/./d2t_singular/elim_lib.tex(,170) 
../singular_texi/./d2t_singular/elim_lib.tex(,171) @c ---end content elim---
../singular_texi/./d2t_singular/elim_lib.tex(,172) 
../singular_texi/./d2t_singular/elim_lib.tex(,173) @c ------------------- elim1 -------------
../singular_texi/./d2t_singular/elim_lib.tex(,174) @node elim1, nselect, elim, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,175) @subsubsection elim1
../singular_texi/./d2t_singular/elim_lib.tex(,176) @cindex elim1
../singular_texi/./d2t_singular/elim_lib.tex(,177) @c ---content elim1---
../singular_texi/./d2t_singular/elim_lib.tex(,178) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,179) 
../singular_texi/./d2t_singular/elim_lib.tex(,180) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,181) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,182) elim1(id,p); id ideal/module, p product of vars to be eliminated
../singular_texi/./d2t_singular/elim_lib.tex(,183) 
../singular_texi/./d2t_singular/elim_lib.tex(,184) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,185) ideal/module obtained from id by eliminating vars occurring in poly
../singular_texi/./d2t_singular/elim_lib.tex(,186) 
../singular_texi/./d2t_singular/elim_lib.tex(,187) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,188) no special monomial ordering is required, result is a SB with
../singular_texi/./d2t_singular/elim_lib.tex(,189) respect to ordering dp (resp. ls) if the first var not to be
../singular_texi/./d2t_singular/elim_lib.tex(,190) eliminated belongs to a -p (resp. -s) block ordering
../singular_texi/./d2t_singular/elim_lib.tex(,191) @*This proc uses 'execute' or calls a procedure using 'execute'.
../singular_texi/./d2t_singular/elim_lib.tex(,192) 
../singular_texi/./d2t_singular/elim_lib.tex(,193) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,194) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,195) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,196) @c computed example elim1 d2t_singular/elim_lib.doc:144 
../singular_texi/./d2t_singular/elim_lib.tex(,197) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,198) ring r=0,(x,y,t,s,z),dp;
../singular_texi/./d2t_singular/elim_lib.tex(,199) ideal i=x-t,y-t2,z-t3,s-x+y3;
../singular_texi/./d2t_singular/elim_lib.tex(,200) elim1(i,ts);
../singular_texi/./d2t_singular/elim_lib.tex(,201) @expansion{} _[1]=y2-xz
../singular_texi/./d2t_singular/elim_lib.tex(,202) @expansion{} _[2]=xy-z
../singular_texi/./d2t_singular/elim_lib.tex(,203) @expansion{} _[3]=x2-y
../singular_texi/./d2t_singular/elim_lib.tex(,204) module m=i*gen(1)+i*gen(2);
../singular_texi/./d2t_singular/elim_lib.tex(,205) m=elim1(m,st); show(m);
../singular_texi/./d2t_singular/elim_lib.tex(,206) @expansion{} // module, 6 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,207) @expansion{} [y2-xz]
../singular_texi/./d2t_singular/elim_lib.tex(,208) @expansion{} [0,y2-xz]
../singular_texi/./d2t_singular/elim_lib.tex(,209) @expansion{} [xy-z]
../singular_texi/./d2t_singular/elim_lib.tex(,210) @expansion{} [0,xy-z]
../singular_texi/./d2t_singular/elim_lib.tex(,211) @expansion{} [x2-y]
../singular_texi/./d2t_singular/elim_lib.tex(,212) @expansion{} [0,x2-y]
../singular_texi/./d2t_singular/elim_lib.tex(,213) @c end example elim1 d2t_singular/elim_lib.doc:144
../singular_texi/./d2t_singular/elim_lib.tex(,214) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,215) @c inserted refs from d2t_singular/elim_lib.doc:153
../singular_texi/./d2t_singular/elim_lib.tex(,224) @strong{See also:}
../singular_texi/./d2t_singular/elim_lib.tex(,225) @ref{elim};
../singular_texi/./d2t_singular/elim_lib.tex(,226) @ref{eliminate}.
../singular_texi/./d2t_singular/elim_lib.tex(,228) @c end inserted refs from d2t_singular/elim_lib.doc:153
../singular_texi/./d2t_singular/elim_lib.tex(,229) 
../singular_texi/./d2t_singular/elim_lib.tex(,230) @c ---end content elim1---
../singular_texi/./d2t_singular/elim_lib.tex(,231) 
../singular_texi/./d2t_singular/elim_lib.tex(,232) @c ------------------- nselect -------------
../singular_texi/./d2t_singular/elim_lib.tex(,233) @node nselect, sat, elim1, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,234) @subsubsection nselect
../singular_texi/./d2t_singular/elim_lib.tex(,235) @cindex nselect
../singular_texi/./d2t_singular/elim_lib.tex(,236) @c ---content nselect---
../singular_texi/./d2t_singular/elim_lib.tex(,237) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,238) 
../singular_texi/./d2t_singular/elim_lib.tex(,239) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,240) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,241) nselect(id,n[,m]); id a module or ideal, n, m integers
../singular_texi/./d2t_singular/elim_lib.tex(,242) 
../singular_texi/./d2t_singular/elim_lib.tex(,243) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,244) generators of id not containing the variable n [up to m]
../singular_texi/./d2t_singular/elim_lib.tex(,245) 
../singular_texi/./d2t_singular/elim_lib.tex(,246) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,247) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,248) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,249) @c computed example nselect d2t_singular/elim_lib.doc:176 
../singular_texi/./d2t_singular/elim_lib.tex(,250) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,251) ring r=0,(x,y,t,s,z),(c,dp);
../singular_texi/./d2t_singular/elim_lib.tex(,252) ideal i=x-y,y-z2,z-t3,s-x+y3;
../singular_texi/./d2t_singular/elim_lib.tex(,253) nselect(i,3);
../singular_texi/./d2t_singular/elim_lib.tex(,254) @expansion{} _[1]=x-y
../singular_texi/./d2t_singular/elim_lib.tex(,255) @expansion{} _[2]=-z2+y
../singular_texi/./d2t_singular/elim_lib.tex(,256) @expansion{} _[3]=y3-x+s
../singular_texi/./d2t_singular/elim_lib.tex(,257) module m=i*(gen(1)+gen(2));
../singular_texi/./d2t_singular/elim_lib.tex(,258) show(m);
../singular_texi/./d2t_singular/elim_lib.tex(,259) @expansion{} // module, 4 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,260) @expansion{} [x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,261) @expansion{} [-z2+y,-z2+y]
../singular_texi/./d2t_singular/elim_lib.tex(,262) @expansion{} [-t3+z,-t3+z]
../singular_texi/./d2t_singular/elim_lib.tex(,263) @expansion{} [y3-x+s,y3-x+s]
../singular_texi/./d2t_singular/elim_lib.tex(,264) show(nselect(m,3,4));
../singular_texi/./d2t_singular/elim_lib.tex(,265) @expansion{} // module, 2 generator(s)
../singular_texi/./d2t_singular/elim_lib.tex(,266) @expansion{} [x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,267) @expansion{} [-z2+y,-z2+y]
../singular_texi/./d2t_singular/elim_lib.tex(,268) @c end example nselect d2t_singular/elim_lib.doc:176
../singular_texi/./d2t_singular/elim_lib.tex(,269) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,270) @c inserted refs from d2t_singular/elim_lib.doc:186
../singular_texi/./d2t_singular/elim_lib.tex(,279) @strong{See also:}
../singular_texi/./d2t_singular/elim_lib.tex(,280) @ref{select};
../singular_texi/./d2t_singular/elim_lib.tex(,281) @ref{select1}.
../singular_texi/./d2t_singular/elim_lib.tex(,283) @c end inserted refs from d2t_singular/elim_lib.doc:186
../singular_texi/./d2t_singular/elim_lib.tex(,284) 
../singular_texi/./d2t_singular/elim_lib.tex(,285) @c ---end content nselect---
../singular_texi/./d2t_singular/elim_lib.tex(,286) 
../singular_texi/./d2t_singular/elim_lib.tex(,287) @c ------------------- sat -------------
../singular_texi/./d2t_singular/elim_lib.tex(,288) @node sat, select, nselect, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,289) @subsubsection sat
../singular_texi/./d2t_singular/elim_lib.tex(,290) @cindex sat
../singular_texi/./d2t_singular/elim_lib.tex(,291) @c ---content sat---
../singular_texi/./d2t_singular/elim_lib.tex(,292) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,293) 
../singular_texi/./d2t_singular/elim_lib.tex(,294) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,295) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,296) sat(id,j); id=ideal/module, j=ideal
../singular_texi/./d2t_singular/elim_lib.tex(,297) 
../singular_texi/./d2t_singular/elim_lib.tex(,298) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,299) list of an ideal/module [1] and an integer [2]:
../singular_texi/./d2t_singular/elim_lib.tex(,300) @*[1] = saturation of id with respect to j (= union_(k=1...) of id:j^k)
../singular_texi/./d2t_singular/elim_lib.tex(,301) [2] = saturation exponent (= min( k | id:j^k = id:j^(k+1) ))
../singular_texi/./d2t_singular/elim_lib.tex(,302) 
../singular_texi/./d2t_singular/elim_lib.tex(,303) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,304) [1] is a standard basis in the basering
../singular_texi/./d2t_singular/elim_lib.tex(,305) 
../singular_texi/./d2t_singular/elim_lib.tex(,306) @item @strong{Display:}
../singular_texi/./d2t_singular/elim_lib.tex(,307) saturation exponent during computation if printlevel >=1
../singular_texi/./d2t_singular/elim_lib.tex(,308) 
../singular_texi/./d2t_singular/elim_lib.tex(,309) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,310) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,311) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,312) @c computed example sat d2t_singular/elim_lib.doc:217 
../singular_texi/./d2t_singular/elim_lib.tex(,313) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,314) int p      = printlevel;
../singular_texi/./d2t_singular/elim_lib.tex(,315) ring r     = 2,(x,y,z),dp;
../singular_texi/./d2t_singular/elim_lib.tex(,316) poly F     = x5+y5+(x-y)^2*xyz;
../singular_texi/./d2t_singular/elim_lib.tex(,317) ideal j    = jacob(F);
../singular_texi/./d2t_singular/elim_lib.tex(,318) sat(j,maxideal(1));
../singular_texi/./d2t_singular/elim_lib.tex(,319) @expansion{} [1]:
../singular_texi/./d2t_singular/elim_lib.tex(,320) @expansion{}    _[1]=x3+x2y+xy2+y3
../singular_texi/./d2t_singular/elim_lib.tex(,321) @expansion{}    _[2]=y4+x2yz+y3z
../singular_texi/./d2t_singular/elim_lib.tex(,322) @expansion{}    _[3]=x2y2+x2yz+y3z
../singular_texi/./d2t_singular/elim_lib.tex(,323) @expansion{} [2]:
../singular_texi/./d2t_singular/elim_lib.tex(,324) @expansion{}    4
../singular_texi/./d2t_singular/elim_lib.tex(,325) printlevel = 2;
../singular_texi/./d2t_singular/elim_lib.tex(,326) sat(j,maxideal(2));
../singular_texi/./d2t_singular/elim_lib.tex(,327) @expansion{} // compute quotient 1
../singular_texi/./d2t_singular/elim_lib.tex(,328) @expansion{} // compute quotient 2
../singular_texi/./d2t_singular/elim_lib.tex(,329) @expansion{} // compute quotient 3
../singular_texi/./d2t_singular/elim_lib.tex(,330) @expansion{} // saturation becomes stable after 2 iteration(s)
../singular_texi/./d2t_singular/elim_lib.tex(,331) @expansion{} 
../singular_texi/./d2t_singular/elim_lib.tex(,332) @expansion{} [1]:
../singular_texi/./d2t_singular/elim_lib.tex(,333) @expansion{}    _[1]=x3+x2y+xy2+y3
../singular_texi/./d2t_singular/elim_lib.tex(,334) @expansion{}    _[2]=y4+x2yz+y3z
../singular_texi/./d2t_singular/elim_lib.tex(,335) @expansion{}    _[3]=x2y2+x2yz+y3z
../singular_texi/./d2t_singular/elim_lib.tex(,336) @expansion{} [2]:
../singular_texi/./d2t_singular/elim_lib.tex(,337) @expansion{}    2
../singular_texi/./d2t_singular/elim_lib.tex(,338) printlevel = p;
../singular_texi/./d2t_singular/elim_lib.tex(,339) @c end example sat d2t_singular/elim_lib.doc:217
../singular_texi/./d2t_singular/elim_lib.tex(,340) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,341) @c ---end content sat---
../singular_texi/./d2t_singular/elim_lib.tex(,342) 
../singular_texi/./d2t_singular/elim_lib.tex(,343) @c ------------------- select -------------
../singular_texi/./d2t_singular/elim_lib.tex(,344) @node select, select1, sat, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,345) @subsubsection select
../singular_texi/./d2t_singular/elim_lib.tex(,346) @cindex select
../singular_texi/./d2t_singular/elim_lib.tex(,347) @c ---content select---
../singular_texi/./d2t_singular/elim_lib.tex(,348) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,349) 
../singular_texi/./d2t_singular/elim_lib.tex(,350) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,351) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,352) select(id,n[,m]); id ideal/module, n, m integers
../singular_texi/./d2t_singular/elim_lib.tex(,353) 
../singular_texi/./d2t_singular/elim_lib.tex(,354) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,355) generators of id containing the variable n [all variables up to m]
../singular_texi/./d2t_singular/elim_lib.tex(,356) 
../singular_texi/./d2t_singular/elim_lib.tex(,357) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,358) use 'select1' for selecting generators containing at least one of the
../singular_texi/./d2t_singular/elim_lib.tex(,359) variables between n and m
../singular_texi/./d2t_singular/elim_lib.tex(,360) 
../singular_texi/./d2t_singular/elim_lib.tex(,361) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,362) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,363) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,364) @c computed example select d2t_singular/elim_lib.doc:252 
../singular_texi/./d2t_singular/elim_lib.tex(,365) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,366) ring r=0,(x,y,t,s,z),(c,dp);
../singular_texi/./d2t_singular/elim_lib.tex(,367) ideal i=x-y,y-z2,z-t3,s-x+y3;
../singular_texi/./d2t_singular/elim_lib.tex(,368) ideal j=select(i,1);
../singular_texi/./d2t_singular/elim_lib.tex(,369) j;
../singular_texi/./d2t_singular/elim_lib.tex(,370) @expansion{} j[1]=x-y
../singular_texi/./d2t_singular/elim_lib.tex(,371) @expansion{} j[2]=y3-x+s
../singular_texi/./d2t_singular/elim_lib.tex(,372) module m=i*(gen(1)+gen(2));
../singular_texi/./d2t_singular/elim_lib.tex(,373) m;
../singular_texi/./d2t_singular/elim_lib.tex(,374) @expansion{} m[1]=[x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,375) @expansion{} m[2]=[-z2+y,-z2+y]
../singular_texi/./d2t_singular/elim_lib.tex(,376) @expansion{} m[3]=[-t3+z,-t3+z]
../singular_texi/./d2t_singular/elim_lib.tex(,377) @expansion{} m[4]=[y3-x+s,y3-x+s]
../singular_texi/./d2t_singular/elim_lib.tex(,378) select(m,1,2);
../singular_texi/./d2t_singular/elim_lib.tex(,379) @expansion{} _[1]=[x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,380) @expansion{} _[2]=[y3-x+s,y3-x+s]
../singular_texi/./d2t_singular/elim_lib.tex(,381) @c end example select d2t_singular/elim_lib.doc:252
../singular_texi/./d2t_singular/elim_lib.tex(,382) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,383) @c inserted refs from d2t_singular/elim_lib.doc:263
../singular_texi/./d2t_singular/elim_lib.tex(,392) @strong{See also:}
../singular_texi/./d2t_singular/elim_lib.tex(,393) @ref{nselect};
../singular_texi/./d2t_singular/elim_lib.tex(,394) @ref{select1}.
../singular_texi/./d2t_singular/elim_lib.tex(,396) @c end inserted refs from d2t_singular/elim_lib.doc:263
../singular_texi/./d2t_singular/elim_lib.tex(,397) 
../singular_texi/./d2t_singular/elim_lib.tex(,398) @c ---end content select---
../singular_texi/./d2t_singular/elim_lib.tex(,399) 
../singular_texi/./d2t_singular/elim_lib.tex(,400) @c ------------------- select1 -------------
../singular_texi/./d2t_singular/elim_lib.tex(,401) @node select1,, select, elim_lib
../singular_texi/./d2t_singular/elim_lib.tex(,402) @subsubsection select1
../singular_texi/./d2t_singular/elim_lib.tex(,403) @cindex select1
../singular_texi/./d2t_singular/elim_lib.tex(,404) @c ---content select1---
../singular_texi/./d2t_singular/elim_lib.tex(,405) Procedure from library @code{elim.lib} (@pxref{elim_lib}).
../singular_texi/./d2t_singular/elim_lib.tex(,406) 
../singular_texi/./d2t_singular/elim_lib.tex(,407) @table @asis
../singular_texi/./d2t_singular/elim_lib.tex(,408) @item @strong{Usage:}
../singular_texi/./d2t_singular/elim_lib.tex(,409) select1(id,n[,m]); id ideal/module, n, m integers
../singular_texi/./d2t_singular/elim_lib.tex(,410) 
../singular_texi/./d2t_singular/elim_lib.tex(,411) @item @strong{Return:}
../singular_texi/./d2t_singular/elim_lib.tex(,412) generators of id containing the variable n
../singular_texi/./d2t_singular/elim_lib.tex(,413) @*[at least one of the variables up to m]
../singular_texi/./d2t_singular/elim_lib.tex(,414) 
../singular_texi/./d2t_singular/elim_lib.tex(,415) @item @strong{Note:}
../singular_texi/./d2t_singular/elim_lib.tex(,416) use 'select' for selecting generators containing all the
../singular_texi/./d2t_singular/elim_lib.tex(,417) variables between n and m
../singular_texi/./d2t_singular/elim_lib.tex(,418) 
../singular_texi/./d2t_singular/elim_lib.tex(,419) @end table
../singular_texi/./d2t_singular/elim_lib.tex(,420) @strong{Example:}
../singular_texi/./d2t_singular/elim_lib.tex(,421) @smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,422) @c computed example select1 d2t_singular/elim_lib.doc:291 
../singular_texi/./d2t_singular/elim_lib.tex(,423) LIB "elim.lib";
../singular_texi/./d2t_singular/elim_lib.tex(,424) ring r=0,(x,y,t,s,z),(c,dp);
../singular_texi/./d2t_singular/elim_lib.tex(,425) ideal i=x-y,y-z2,z-t3,s-x+y3;
../singular_texi/./d2t_singular/elim_lib.tex(,426) ideal j=select1(i,1);
../singular_texi/./d2t_singular/elim_lib.tex(,427) j;
../singular_texi/./d2t_singular/elim_lib.tex(,428) @expansion{} j[1]=x-y
../singular_texi/./d2t_singular/elim_lib.tex(,429) @expansion{} j[2]=y3-x+s
../singular_texi/./d2t_singular/elim_lib.tex(,430) module m=i*(gen(1)+gen(2));
../singular_texi/./d2t_singular/elim_lib.tex(,431) m;
../singular_texi/./d2t_singular/elim_lib.tex(,432) @expansion{} m[1]=[x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,433) @expansion{} m[2]=[-z2+y,-z2+y]
../singular_texi/./d2t_singular/elim_lib.tex(,434) @expansion{} m[3]=[-t3+z,-t3+z]
../singular_texi/./d2t_singular/elim_lib.tex(,435) @expansion{} m[4]=[y3-x+s,y3-x+s]
../singular_texi/./d2t_singular/elim_lib.tex(,436) select1(m,1,2);
../singular_texi/./d2t_singular/elim_lib.tex(,437) @expansion{} _[1]=[x-y,x-y]
../singular_texi/./d2t_singular/elim_lib.tex(,438) @expansion{} _[2]=[-z2+y,-z2+y]
../singular_texi/./d2t_singular/elim_lib.tex(,439) @expansion{} _[3]=[y3-x+s,y3-x+s]
../singular_texi/./d2t_singular/elim_lib.tex(,440) @c end example select1 d2t_singular/elim_lib.doc:291
../singular_texi/./d2t_singular/elim_lib.tex(,441) @end smallexample
../singular_texi/./d2t_singular/elim_lib.tex(,442) @c inserted refs from d2t_singular/elim_lib.doc:302
../singular_texi/./d2t_singular/elim_lib.tex(,451) @strong{See also:}
../singular_texi/./d2t_singular/elim_lib.tex(,452) @ref{nselect};
../singular_texi/./d2t_singular/elim_lib.tex(,453) @ref{select}.
../singular_texi/./d2t_singular/elim_lib.tex(,455) @c end inserted refs from d2t_singular/elim_lib.doc:302
../singular_texi/./d2t_singular/elim_lib.tex(,456) 
../singular_texi/./d2t_singular/elim_lib.tex(,457) @c ---end content select1---
../singular_texi/singular.tex(,381) @c ----------------------------------------------------------
../singular_texi/singular.tex(,382) @node homolog_lib, mprimdec_lib, elim_lib, Commutative algebra
../singular_texi/singular.tex(,383) @subsection homolog_lib
../singular_texi/singular.tex(,384) @c include of docu for homolog.lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/homolog_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/homolog_lib.doc
../singular_texi/./d2t_singular/homolog_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/homolog_lib.doc INSTEAD
../singular_texi/./d2t_singular/homolog_lib.tex(,4) @c library version: (1.15.2.2,2002/10/07)
../singular_texi/./d2t_singular/homolog_lib.tex(,5) @c library file: ../Singular/LIB/homolog.lib
../singular_texi/./d2t_singular/homolog_lib.tex(,6) @cindex homolog.lib
../singular_texi/./d2t_singular/homolog_lib.tex(,7) @cindex homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/homolog_lib.tex(,10) homolog.lib
../singular_texi/./d2t_singular/homolog_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/homolog_lib.tex(,12)    Procedures for Homological Algebra
../singular_texi/./d2t_singular/homolog_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/homolog_lib.tex(,14) Gert-Martin Greuel, greuel@@mathematik.uni-kl.de,
../singular_texi/./d2t_singular/homolog_lib.tex(,15) @* Bernd Martin, martin@@math.tu-cottbus.de
../singular_texi/./d2t_singular/homolog_lib.tex(,16) @* Christoph Lossen, lossen@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/homolog_lib.tex(,17) 
../singular_texi/./d2t_singular/homolog_lib.tex(,18) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,19) 
../singular_texi/./d2t_singular/homolog_lib.tex(,20) @strong{Procedures:}
../singular_texi/./d2t_singular/homolog_lib.tex(,21) @menu
../singular_texi/./d2t_singular/homolog_lib.tex(,22) * cup:: cup: Ext^1(M',M') x Ext^1() --> Ext^2()
../singular_texi/./d2t_singular/homolog_lib.tex(,23) * cupproduct:: cup: Ext^p(M',N') x Ext^q(N',P') --> Ext^p+q(M',P')
../singular_texi/./d2t_singular/homolog_lib.tex(,24) * depth:: depth(I,M'), I ideal, M module, M'=coker(M)
../singular_texi/./d2t_singular/homolog_lib.tex(,25) * Ext_R:: Ext^k(M',R), M module, R basering, M'=coker(M)
../singular_texi/./d2t_singular/homolog_lib.tex(,26) * Ext:: Ext^k(M',N'), M,N modules, M'=coker(M), N'=coker(N)
../singular_texi/./d2t_singular/homolog_lib.tex(,27) * fitting:: n-th Fitting ideal of M'=coker(M), M module, n int
../singular_texi/./d2t_singular/homolog_lib.tex(,28) * flatteningStrat:: Flattening stratification of M'=coker(M), M module
../singular_texi/./d2t_singular/homolog_lib.tex(,29) * Hom:: Hom(M',N'), M,N modules, M'=coker(M), N'=coker(N)
../singular_texi/./d2t_singular/homolog_lib.tex(,30) * homology:: ker(B)/im(A), homology of complex R^k--A->M'--B->N'
../singular_texi/./d2t_singular/homolog_lib.tex(,31) * isCM:: test if coker(M) is Cohen-Macaulay, M module
../singular_texi/./d2t_singular/homolog_lib.tex(,32) * isFlat:: test if coker(M) is flat, M module
../singular_texi/./d2t_singular/homolog_lib.tex(,33) * isLocallyFree:: test if coker(M) is locally free of constant rank r
../singular_texi/./d2t_singular/homolog_lib.tex(,34) * isReg:: test if I is coker(M)-sequence, I ideal, M module
../singular_texi/./d2t_singular/homolog_lib.tex(,35) * kernel:: ker(M'--A->N') M,N modules, A matrix
../singular_texi/./d2t_singular/homolog_lib.tex(,36) * kohom:: Hom(R^k,A), A matrix over basering R
../singular_texi/./d2t_singular/homolog_lib.tex(,37) * kontrahom:: Hom(A,R^k), A matrix over basering R
../singular_texi/./d2t_singular/homolog_lib.tex(,38) * KoszulHomology:: n-th Koszul homology H_n(I,coker(M)), I=ideal
../singular_texi/./d2t_singular/homolog_lib.tex(,39) * tensorMod:: Tensor product of modules M'=coker(M), N'=coker(N)
../singular_texi/./d2t_singular/homolog_lib.tex(,40) * Tor:: Tor_k(M',N'), M,N modules, M'=coker(M), N'=coker(N)
../singular_texi/./d2t_singular/homolog_lib.tex(,41) @end menu
../singular_texi/./d2t_singular/homolog_lib.tex(,42) @c ---end content LibInfo---
../singular_texi/./d2t_singular/homolog_lib.tex(,43) 
../singular_texi/./d2t_singular/homolog_lib.tex(,44) @c ------------------- cup -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,45) @node cup, cupproduct,, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,46) @subsubsection cup
../singular_texi/./d2t_singular/homolog_lib.tex(,47) @cindex cup
../singular_texi/./d2t_singular/homolog_lib.tex(,48) @c ---content cup---
../singular_texi/./d2t_singular/homolog_lib.tex(,49) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,50) 
../singular_texi/./d2t_singular/homolog_lib.tex(,51) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,52) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,53) cup(M,[,any,any]); M=module
../singular_texi/./d2t_singular/homolog_lib.tex(,54) 
../singular_texi/./d2t_singular/homolog_lib.tex(,55) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,56) cup-product Ext^1(M',M') x Ext^1(M',M') ---> Ext^2(M',M'), where
../singular_texi/./d2t_singular/homolog_lib.tex(,57) M':=R^m/M, if M in R^m, R basering (i.e. M':=coker(matrix(M))).
../singular_texi/./d2t_singular/homolog_lib.tex(,58) @* If called with >= 2 arguments: compute symmetrized cup-product
../singular_texi/./d2t_singular/homolog_lib.tex(,59) 
../singular_texi/./d2t_singular/homolog_lib.tex(,60) @item @strong{Assume:}
../singular_texi/./d2t_singular/homolog_lib.tex(,61) all Ext's are finite dimensional
../singular_texi/./d2t_singular/homolog_lib.tex(,62) 
../singular_texi/./d2t_singular/homolog_lib.tex(,63) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,64) - if called with 1 argument: matrix, the columns of the output present
../singular_texi/./d2t_singular/homolog_lib.tex(,65) the coordinates of b_i&b_j with respect to a kbase of Ext^2, where
../singular_texi/./d2t_singular/homolog_lib.tex(,66) b_1,b_2,... is a kbase of Ext^1 and & denotes cup product;@*
../singular_texi/./d2t_singular/homolog_lib.tex(,67) - if called with 2 arguments: matrix, the columns of the output
../singular_texi/./d2t_singular/homolog_lib.tex(,68) present the coordinates of (1/2)(b_i&b_j + b_j&b_i) with respect to
../singular_texi/./d2t_singular/homolog_lib.tex(,69) a kbase of Ext^2;
../singular_texi/./d2t_singular/homolog_lib.tex(,70) @*- if called with 3 arguments: list,
../singular_texi/./d2t_singular/homolog_lib.tex(,71) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,72)       L[1] = matrix see above (symmetric case, for >=2 arguments)
../singular_texi/./d2t_singular/homolog_lib.tex(,73)       L[2] = matrix of kbase of Ext^1
../singular_texi/./d2t_singular/homolog_lib.tex(,74)       L[3] = matrix of kbase of Ext^2
../singular_texi/./d2t_singular/homolog_lib.tex(,75) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,76) 
../singular_texi/./d2t_singular/homolog_lib.tex(,77) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,78) printlevel >=1; shows what is going on.
../singular_texi/./d2t_singular/homolog_lib.tex(,79) @*printlevel >=2; shows result in another representation.
../singular_texi/./d2t_singular/homolog_lib.tex(,80) @* For computing cupproduct of M itself, apply proc to syz(M)!
../singular_texi/./d2t_singular/homolog_lib.tex(,81) 
../singular_texi/./d2t_singular/homolog_lib.tex(,82) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,83) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,84) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,85) @c computed example cup d2t_singular/homolog_lib.doc:83 
../singular_texi/./d2t_singular/homolog_lib.tex(,86) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,87) int p      = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,88) ring  rr   = 32003,(x,y,z),(dp,C);
../singular_texi/./d2t_singular/homolog_lib.tex(,89) ideal  I   = x4+y3+z2;
../singular_texi/./d2t_singular/homolog_lib.tex(,90) qring  o   = std(I);
../singular_texi/./d2t_singular/homolog_lib.tex(,91) module M   = [x,y,0,z],[y2,-x3,z,0],[z,0,-y,-x3],[0,z,x,-y2];
../singular_texi/./d2t_singular/homolog_lib.tex(,92) print(cup(M));
../singular_texi/./d2t_singular/homolog_lib.tex(,93) @expansion{} 0,1,0, 0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,94) @expansion{} 0,0,-1,0, 0,1,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,95) @expansion{} 0,0,0, -1,0,0,0,0,0,1,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,96) @expansion{} 0,0,0, 0, 1,0,0,1,0,0,-1,0,0,1,0,0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,97) print(cup(M,1));
../singular_texi/./d2t_singular/homolog_lib.tex(,98) @expansion{} 0,1,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,99) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,100) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,101) @expansion{} 0,0,0,0,1,0,0,0,0,0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,102) // 2nd EXAMPLE  (shows what is going on)
../singular_texi/./d2t_singular/homolog_lib.tex(,103) printlevel = 3;
../singular_texi/./d2t_singular/homolog_lib.tex(,104) ring   r   = 0,(x,y),(dp,C);
../singular_texi/./d2t_singular/homolog_lib.tex(,105) ideal  i   = x2-y3;
../singular_texi/./d2t_singular/homolog_lib.tex(,106) qring  q   = std(i);
../singular_texi/./d2t_singular/homolog_lib.tex(,107) module M   = [-x,y],[-y2,x];
../singular_texi/./d2t_singular/homolog_lib.tex(,108) print(cup(M));
../singular_texi/./d2t_singular/homolog_lib.tex(,109) @expansion{} // vdim (Ext^1) = 2
../singular_texi/./d2t_singular/homolog_lib.tex(,110) @expansion{} // kbase of Ext^1(M,M)
../singular_texi/./d2t_singular/homolog_lib.tex(,111) @expansion{} //  - the columns present the kbase elements in Hom(F(1),F(0))
../singular_texi/./d2t_singular/homolog_lib.tex(,112) @expansion{} //  - F(*) a free resolution of M
../singular_texi/./d2t_singular/homolog_lib.tex(,113) @expansion{} -1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,114) @expansion{} 0, y,
../singular_texi/./d2t_singular/homolog_lib.tex(,115) @expansion{} 0, 1,
../singular_texi/./d2t_singular/homolog_lib.tex(,116) @expansion{} -1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,117) @expansion{} // lift kbase of Ext^1:
../singular_texi/./d2t_singular/homolog_lib.tex(,118) @expansion{} //  - the columns present liftings of kbase elements into Hom(F(2),F(1))
../singular_texi/./d2t_singular/homolog_lib.tex(,119) @expansion{} //  - F(*) a free resolution of M 
../singular_texi/./d2t_singular/homolog_lib.tex(,120) @expansion{} 1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,121) @expansion{} 0,y,
../singular_texi/./d2t_singular/homolog_lib.tex(,122) @expansion{} 0,1,
../singular_texi/./d2t_singular/homolog_lib.tex(,123) @expansion{} 1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,124) @expansion{} // vdim (Ext^2) = 2
../singular_texi/./d2t_singular/homolog_lib.tex(,125) @expansion{} // kbase of Ext^2(M,M)
../singular_texi/./d2t_singular/homolog_lib.tex(,126) @expansion{} //  - the columns present the kbase elements in Hom(F(2),F(0))
../singular_texi/./d2t_singular/homolog_lib.tex(,127) @expansion{} //  - F(*) is a a free resolution of M 
../singular_texi/./d2t_singular/homolog_lib.tex(,128) @expansion{} -1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,129) @expansion{} 0, y,
../singular_texi/./d2t_singular/homolog_lib.tex(,130) @expansion{} 0, 1,
../singular_texi/./d2t_singular/homolog_lib.tex(,131) @expansion{} -1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,132) @expansion{} // matrix of cup-products (in Ext^2)
../singular_texi/./d2t_singular/homolog_lib.tex(,133) @expansion{} 0,-1,0, 0,y,
../singular_texi/./d2t_singular/homolog_lib.tex(,134) @expansion{} 0,0, -y,y,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,135) @expansion{} 0,0, -1,1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,136) @expansion{} 0,-1,0, 0,y 
../singular_texi/./d2t_singular/homolog_lib.tex(,137) @expansion{} ////// end level 2 //////
../singular_texi/./d2t_singular/homolog_lib.tex(,138) @expansion{} // the associated matrices of the bilinear mapping 'cup' 
../singular_texi/./d2t_singular/homolog_lib.tex(,139) @expansion{} // corresponding to the kbase elements of Ext^2(M,M) are shown,
../singular_texi/./d2t_singular/homolog_lib.tex(,140) @expansion{} //  i.e. the rows of the final matrix are written as matrix of
../singular_texi/./d2t_singular/homolog_lib.tex(,141) @expansion{} //  a bilinear form on Ext^1 x Ext^1
../singular_texi/./d2t_singular/homolog_lib.tex(,142) @expansion{} //-----component 1:
../singular_texi/./d2t_singular/homolog_lib.tex(,143) @expansion{} 0,1,
../singular_texi/./d2t_singular/homolog_lib.tex(,144) @expansion{} 0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,145) @expansion{} //-----component 2:
../singular_texi/./d2t_singular/homolog_lib.tex(,146) @expansion{} 0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,147) @expansion{} -1,1 
../singular_texi/./d2t_singular/homolog_lib.tex(,148) @expansion{} ////// end level 3 //////
../singular_texi/./d2t_singular/homolog_lib.tex(,149) @expansion{} 0,1,0, 0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,150) @expansion{} 0,0,-1,1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,151) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,152) @c end example cup d2t_singular/homolog_lib.doc:83
../singular_texi/./d2t_singular/homolog_lib.tex(,153) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,154) @c ---end content cup---
../singular_texi/./d2t_singular/homolog_lib.tex(,155) 
../singular_texi/./d2t_singular/homolog_lib.tex(,156) @c ------------------- cupproduct -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,157) @node cupproduct, depth, cup, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,158) @subsubsection cupproduct
../singular_texi/./d2t_singular/homolog_lib.tex(,159) @cindex cupproduct
../singular_texi/./d2t_singular/homolog_lib.tex(,160) @c ---content cupproduct---
../singular_texi/./d2t_singular/homolog_lib.tex(,161) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,162) 
../singular_texi/./d2t_singular/homolog_lib.tex(,163) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,164) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,165) cupproduct(M,N,P,p,q[,any]); M,N,P modules, p,q integers
../singular_texi/./d2t_singular/homolog_lib.tex(,166) 
../singular_texi/./d2t_singular/homolog_lib.tex(,167) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,168) cup-product Ext^p(M',N') x Ext^q(N',P') ---> Ext^p+q(M',P'),
../singular_texi/./d2t_singular/homolog_lib.tex(,169) where M':=R^m/M, if M in R^m, R basering (i.e. M':=coker(matrix(M)))
../singular_texi/./d2t_singular/homolog_lib.tex(,170) 
../singular_texi/./d2t_singular/homolog_lib.tex(,171) @item @strong{Assume:}
../singular_texi/./d2t_singular/homolog_lib.tex(,172) all Ext's are of finite dimension
../singular_texi/./d2t_singular/homolog_lib.tex(,173) 
../singular_texi/./d2t_singular/homolog_lib.tex(,174) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,175) - if called with 5 arguments: matrix of the associated linear map
../singular_texi/./d2t_singular/homolog_lib.tex(,176) Ext^p (tensor) Ext^q --> Ext^p+q, i.e. the columns of <matrix>
../singular_texi/./d2t_singular/homolog_lib.tex(,177) present the coordinates of the cup products (b_i & c_j) with respect
../singular_texi/./d2t_singular/homolog_lib.tex(,178) to a kbase of Ext^p+q (b_i resp. c_j are the choosen bases of Ext^p,
../singular_texi/./d2t_singular/homolog_lib.tex(,179) resp. Ext^q).@*
../singular_texi/./d2t_singular/homolog_lib.tex(,180) - if called with 6 arguments: list L,
../singular_texi/./d2t_singular/homolog_lib.tex(,181) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,182)       L[1] = matrix (see above)
../singular_texi/./d2t_singular/homolog_lib.tex(,183)       L[2] = matrix of kbase of Ext^p(M',N')
../singular_texi/./d2t_singular/homolog_lib.tex(,184)       L[3] = matrix of kbase of Ext^q(N',P')
../singular_texi/./d2t_singular/homolog_lib.tex(,185)       L[4] = matrix of kbase of Ext^p+q(N',P')
../singular_texi/./d2t_singular/homolog_lib.tex(,186) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,187) 
../singular_texi/./d2t_singular/homolog_lib.tex(,188) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,189) printlevel >=1; shows what is going on.
../singular_texi/./d2t_singular/homolog_lib.tex(,190) @*printlevel >=2; shows the result in another representation.@*
../singular_texi/./d2t_singular/homolog_lib.tex(,191) For computing the cupproduct of M,N itself, apply proc to syz(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,192) syz(N)!
../singular_texi/./d2t_singular/homolog_lib.tex(,193) 
../singular_texi/./d2t_singular/homolog_lib.tex(,194) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,195) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,196) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,197) @c computed example cupproduct d2t_singular/homolog_lib.doc:145 
../singular_texi/./d2t_singular/homolog_lib.tex(,198) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,199) int p      = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,200) ring  rr   = 32003,(x,y,z),(dp,C);
../singular_texi/./d2t_singular/homolog_lib.tex(,201) ideal  I   = x4+y3+z2;
../singular_texi/./d2t_singular/homolog_lib.tex(,202) qring  o   = std(I);
../singular_texi/./d2t_singular/homolog_lib.tex(,203) module M   = [x,y,0,z],[y2,-x3,z,0],[z,0,-y,-x3],[0,z,x,-y2];
../singular_texi/./d2t_singular/homolog_lib.tex(,204) print(cupproduct(M,M,M,1,3));
../singular_texi/./d2t_singular/homolog_lib.tex(,205) @expansion{} 0,1,0, 0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,206) @expansion{} 0,0,-1,0, 0,1,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,207) @expansion{} 0,0,0, -1,0,0,0,0,0,1,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,208) @expansion{} 0,0,0, 0, 1,0,0,1,0,0,-1,0,0,1,0,0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,209) printlevel = 3;
../singular_texi/./d2t_singular/homolog_lib.tex(,210) list l     = (cupproduct(M,M,M,1,3,"any"));
../singular_texi/./d2t_singular/homolog_lib.tex(,211) @expansion{} // vdim Ext(M,N) = 4
../singular_texi/./d2t_singular/homolog_lib.tex(,212) @expansion{} // kbase of Ext^p(M,N)
../singular_texi/./d2t_singular/homolog_lib.tex(,213) @expansion{} //  - the columns present the kbase elements in Hom(F(p),G(0))
../singular_texi/./d2t_singular/homolog_lib.tex(,214) @expansion{} //  - F(*),G(*) are free resolutions of M and N
../singular_texi/./d2t_singular/homolog_lib.tex(,215) @expansion{} 0, 0, 1, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,216) @expansion{} 0, y, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,217) @expansion{} 1, 0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,218) @expansion{} 0, 0, 0, y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,219) @expansion{} 0, -1,0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,220) @expansion{} 0, 0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,221) @expansion{} 0, 0, 0, -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,222) @expansion{} 1, 0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,223) @expansion{} 0, 0, 0, -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,224) @expansion{} -1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,225) @expansion{} 0, 1, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,226) @expansion{} 0, 0, 1, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,227) @expansion{} -1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,228) @expansion{} 0, 0, 0, x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,229) @expansion{} 0, 0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,230) @expansion{} 0, -y,0, 0   
../singular_texi/./d2t_singular/homolog_lib.tex(,231) @expansion{} // vdim Ext(N,P) = 4
../singular_texi/./d2t_singular/homolog_lib.tex(,232) @expansion{} // kbase of Ext(N,P):
../singular_texi/./d2t_singular/homolog_lib.tex(,233) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,234) @expansion{} 0, 0, 0,  y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,235) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,236) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,237) @expansion{} 0, -1,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,238) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,239) @expansion{} 0, 0, 0,  -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,240) @expansion{} 0, 0, -x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,241) @expansion{} 0, 0, 0,  -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,242) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,243) @expansion{} 0, 1, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,244) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,245) @expansion{} -1,0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,246) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,247) @expansion{} 0, 0, x2, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,248) @expansion{} 0, 0, 0,  -x2y
../singular_texi/./d2t_singular/homolog_lib.tex(,249) @expansion{} // kbase of Ext^q(N,P)
../singular_texi/./d2t_singular/homolog_lib.tex(,250) @expansion{} //  - the columns present the kbase elements in Hom(G(q),H(0))
../singular_texi/./d2t_singular/homolog_lib.tex(,251) @expansion{} //  - G(*),H(*) are free resolutions of N and P
../singular_texi/./d2t_singular/homolog_lib.tex(,252) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,253) @expansion{} 0, 0, 0,  y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,254) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,255) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,256) @expansion{} 0, -1,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,257) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,258) @expansion{} 0, 0, 0,  -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,259) @expansion{} 0, 0, -x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,260) @expansion{} 0, 0, 0,  -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,261) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,262) @expansion{} 0, 1, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,263) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,264) @expansion{} -1,0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,265) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,266) @expansion{} 0, 0, x2, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,267) @expansion{} 0, 0, 0,  -x2y
../singular_texi/./d2t_singular/homolog_lib.tex(,268) @expansion{} // vdim Ext(M,P) = 4
../singular_texi/./d2t_singular/homolog_lib.tex(,269) @expansion{} // kbase of Ext^p+q(M,P)
../singular_texi/./d2t_singular/homolog_lib.tex(,270) @expansion{} //  - the columns present the kbase elements in Hom(F(p+q),H(0))
../singular_texi/./d2t_singular/homolog_lib.tex(,271) @expansion{} //  - F(*),H(*) are free resolutions of M and P
../singular_texi/./d2t_singular/homolog_lib.tex(,272) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,273) @expansion{} 0, 0, 0,  y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,274) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,275) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,276) @expansion{} 0, -1,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,277) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,278) @expansion{} 0, 0, 0,  -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,279) @expansion{} 0, 0, -x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,280) @expansion{} 0, 0, 0,  -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,281) @expansion{} 0, 0, 1,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,282) @expansion{} 0, 1, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,283) @expansion{} 1, 0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,284) @expansion{} -1,0, 0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,285) @expansion{} 0, -y,0,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,286) @expansion{} 0, 0, x2, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,287) @expansion{} 0, 0, 0,  -x2y
../singular_texi/./d2t_singular/homolog_lib.tex(,288) @expansion{} // lifting of kbase of Ext^p(M,N)
../singular_texi/./d2t_singular/homolog_lib.tex(,289) @expansion{} //  - the columns present liftings of kbase elements in Hom(F(p+q),G(q))
../singular_texi/./d2t_singular/homolog_lib.tex(,290) @expansion{} 1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,291) @expansion{} 0,-y,0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,292) @expansion{} 0,0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,293) @expansion{} 0,0, 0, x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,294) @expansion{} 0,1, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,295) @expansion{} 1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,296) @expansion{} 0,0, 0, -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,297) @expansion{} 0,0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,298) @expansion{} 0,0, -1,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,299) @expansion{} 0,0, 0, y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,300) @expansion{} 1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,301) @expansion{} 0,y, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,302) @expansion{} 0,0, 0, -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,303) @expansion{} 0,0, -1,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,304) @expansion{} 0,-1,0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,305) @expansion{} 1,0, 0, 0   
../singular_texi/./d2t_singular/homolog_lib.tex(,306) @expansion{} // matrix of cup-products (in Ext^p+q)
../singular_texi/./d2t_singular/homolog_lib.tex(,307) @expansion{} 0,0, 0, -1, 0,   0, 0, 0,   y,   1,  0,  0,  0,  0,   y,   0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,308) @expansion{} 0,0, 0, 0,  y,   0, 0, y,   0,   0,  -y, 0,  0,  y,   0,   0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,309) @expansion{} 0,1, 0, 0,  0,   0, y, 0,   0,   0,  0,  x2, 0,  0,   0,   0,  -x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,310) @expansion{} 0,0, y, 0,  0,   -y,0, 0,   0,   0,  0,  0,  x2y,0,   0,   x2y,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,311) @expansion{} 0,0, 1, 0,  0,   -1,0, 0,   0,   0,  0,  0,  x2, 0,   0,   x2, 0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,312) @expansion{} 0,1, 0, 0,  0,   0, y, 0,   0,   0,  0,  x2, 0,  0,   0,   0,  -x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,313) @expansion{} 0,0, 0, 0,  -x2, 0, 0, -x2, 0,   0,  x2, 0,  0,  -x2, 0,   0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,314) @expansion{} 0,0, 0, x2, 0,   0, 0, 0,   -x2y,-x2,0,  0,  0,  0,   -x2y,0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,315) @expansion{} 0,0, 0, 0,  -1,  0, 0, -1,  0,   0,  1,  0,  0,  -1,  0,   0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,316) @expansion{} 0,0, 0, -1, 0,   0, 0, 0,   y,   1,  0,  0,  0,  0,   y,   0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,317) @expansion{} 0,0, -1,0,  0,   1, 0, 0,   0,   0,  0,  0,  -x2,0,   0,   -x2,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,318) @expansion{} 0,1, 0, 0,  0,   0, y, 0,   0,   0,  0,  x2, 0,  0,   0,   0,  -x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,319) @expansion{} 0,-1,0, 0,  0,   0, -y,0,   0,   0,  0,  -x2,0,  0,   0,   0,  x2y, 
../singular_texi/./d2t_singular/homolog_lib.tex(,320) @expansion{} 0,0, y, 0,  0,   -y,0, 0,   0,   0,  0,  0,  x2y,0,   0,   x2y,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,321) @expansion{} 0,0, 0, -x2,0,   0, 0, 0,   x2y, x2, 0,  0,  0,  0,   x2y, 0,  0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,322) @expansion{} 0,0, 0, 0,  -x2y,0, 0, -x2y,0,   0,  x2y,0,  0,  -x2y,0,   0,  0    
../singular_texi/./d2t_singular/homolog_lib.tex(,323) @expansion{} ////// end level 2 //////
../singular_texi/./d2t_singular/homolog_lib.tex(,324) @expansion{} // the associated matrices of the bilinear mapping 'cup' 
../singular_texi/./d2t_singular/homolog_lib.tex(,325) @expansion{} // corresponding to the kbase elements of Ext^p+q(M,P) are shown,
../singular_texi/./d2t_singular/homolog_lib.tex(,326) @expansion{} //  i.e. the rows of the final matrix are written as matrix of
../singular_texi/./d2t_singular/homolog_lib.tex(,327) @expansion{} //  a bilinear form on Ext^p x Ext^q
../singular_texi/./d2t_singular/homolog_lib.tex(,328) @expansion{} //----component 1:
../singular_texi/./d2t_singular/homolog_lib.tex(,329) @expansion{} 0,1,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,330) @expansion{} 0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,331) @expansion{} 0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,332) @expansion{} 0,0,0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,333) @expansion{} //----component 2:
../singular_texi/./d2t_singular/homolog_lib.tex(,334) @expansion{} 0,0,-1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,335) @expansion{} 0,1,0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,336) @expansion{} 0,0,0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,337) @expansion{} 0,0,0, 0 
../singular_texi/./d2t_singular/homolog_lib.tex(,338) @expansion{} //----component 3:
../singular_texi/./d2t_singular/homolog_lib.tex(,339) @expansion{} 0,0,0,-1,
../singular_texi/./d2t_singular/homolog_lib.tex(,340) @expansion{} 0,0,0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,341) @expansion{} 0,1,0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,342) @expansion{} 0,0,0,0  
../singular_texi/./d2t_singular/homolog_lib.tex(,343) @expansion{} //----component 4:
../singular_texi/./d2t_singular/homolog_lib.tex(,344) @expansion{} 0,0,0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,345) @expansion{} 1,0,0, 1,
../singular_texi/./d2t_singular/homolog_lib.tex(,346) @expansion{} 0,0,-1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,347) @expansion{} 0,1,0, 0 
../singular_texi/./d2t_singular/homolog_lib.tex(,348) @expansion{} ////// end level 3 //////
../singular_texi/./d2t_singular/homolog_lib.tex(,349) show(l[1]);show(l[2]);
../singular_texi/./d2t_singular/homolog_lib.tex(,350) @expansion{} // matrix, 4x17
../singular_texi/./d2t_singular/homolog_lib.tex(,351) @expansion{} 0,1,0, 0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,352) @expansion{} 0,0,-1,0, 0,1,0,0,0,0,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,353) @expansion{} 0,0,0, -1,0,0,0,0,0,1,0, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,354) @expansion{} 0,0,0, 0, 1,0,0,1,0,0,-1,0,0,1,0,0,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,355) @expansion{} // matrix, 16x4
../singular_texi/./d2t_singular/homolog_lib.tex(,356) @expansion{} 0, 0, 1, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,357) @expansion{} 0, y, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,358) @expansion{} 1, 0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,359) @expansion{} 0, 0, 0, y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,360) @expansion{} 0, -1,0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,361) @expansion{} 0, 0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,362) @expansion{} 0, 0, 0, -x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,363) @expansion{} 1, 0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,364) @expansion{} 0, 0, 0, -1, 
../singular_texi/./d2t_singular/homolog_lib.tex(,365) @expansion{} -1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,366) @expansion{} 0, 1, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,367) @expansion{} 0, 0, 1, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,368) @expansion{} -1,0, 0, 0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,369) @expansion{} 0, 0, 0, x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,370) @expansion{} 0, 0, x2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,371) @expansion{} 0, -y,0, 0   
../singular_texi/./d2t_singular/homolog_lib.tex(,372) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,373) @c end example cupproduct d2t_singular/homolog_lib.doc:145
../singular_texi/./d2t_singular/homolog_lib.tex(,374) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,375) @c ---end content cupproduct---
../singular_texi/./d2t_singular/homolog_lib.tex(,376) 
../singular_texi/./d2t_singular/homolog_lib.tex(,377) @c ------------------- depth -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,378) @node depth, Ext_R, cupproduct, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,379) @subsubsection depth
../singular_texi/./d2t_singular/homolog_lib.tex(,380) @cindex depth
../singular_texi/./d2t_singular/homolog_lib.tex(,381) @c ---content depth---
../singular_texi/./d2t_singular/homolog_lib.tex(,382) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,383) 
../singular_texi/./d2t_singular/homolog_lib.tex(,384) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,385) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,386) depth(M,[I]); M module, I ideal
../singular_texi/./d2t_singular/homolog_lib.tex(,387) 
../singular_texi/./d2t_singular/homolog_lib.tex(,388) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,389) int,
../singular_texi/./d2t_singular/homolog_lib.tex(,390) @*- if called with 1 argument: the depth of M'=coker(M) w.r.t. the
../singular_texi/./d2t_singular/homolog_lib.tex(,391) maxideal in the basering (which is then assumed to be local)@*
../singular_texi/./d2t_singular/homolog_lib.tex(,392) - if called with 2 arguments: the depth of M'=coker(M) w.r.t. the
../singular_texi/./d2t_singular/homolog_lib.tex(,393) ideal I.
../singular_texi/./d2t_singular/homolog_lib.tex(,394) 
../singular_texi/./d2t_singular/homolog_lib.tex(,395) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,396) procedure makes use of KoszulHomology.
../singular_texi/./d2t_singular/homolog_lib.tex(,397) 
../singular_texi/./d2t_singular/homolog_lib.tex(,398) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,399) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,400) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,401) @c computed example depth d2t_singular/homolog_lib.doc:185 
../singular_texi/./d2t_singular/homolog_lib.tex(,402) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,403) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,404) ideal I=x2,xy,yz;
../singular_texi/./d2t_singular/homolog_lib.tex(,405) module M=0;
../singular_texi/./d2t_singular/homolog_lib.tex(,406) depth(M,I);   // depth(<x2,xy,yz>,Q[x,y,z])
../singular_texi/./d2t_singular/homolog_lib.tex(,407) @expansion{} 2
../singular_texi/./d2t_singular/homolog_lib.tex(,408) ring r=0,(x,y,z),ds;  // local ring
../singular_texi/./d2t_singular/homolog_lib.tex(,409) matrix M[2][2]=x,xy,1+yz,0;
../singular_texi/./d2t_singular/homolog_lib.tex(,410) print(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,411) @expansion{} x,   xy,
../singular_texi/./d2t_singular/homolog_lib.tex(,412) @expansion{} 1+yz,0  
../singular_texi/./d2t_singular/homolog_lib.tex(,413) depth(M);     // depth(maxideal,coker(M))
../singular_texi/./d2t_singular/homolog_lib.tex(,414) @expansion{} 2
../singular_texi/./d2t_singular/homolog_lib.tex(,415) ideal I=x;
../singular_texi/./d2t_singular/homolog_lib.tex(,416) depth(M,I);   // depth(<x>,coker(M))
../singular_texi/./d2t_singular/homolog_lib.tex(,417) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,418) I=x+z;
../singular_texi/./d2t_singular/homolog_lib.tex(,419) depth(M,I);   // depth(<x+z>,coker(M))
../singular_texi/./d2t_singular/homolog_lib.tex(,420) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,421) @c end example depth d2t_singular/homolog_lib.doc:185
../singular_texi/./d2t_singular/homolog_lib.tex(,422) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,423) @c ---end content depth---
../singular_texi/./d2t_singular/homolog_lib.tex(,424) 
../singular_texi/./d2t_singular/homolog_lib.tex(,425) @c ------------------- Ext_R -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,426) @node Ext_R, Ext, depth, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,427) @subsubsection Ext_R
../singular_texi/./d2t_singular/homolog_lib.tex(,428) @cindex Ext_R
../singular_texi/./d2t_singular/homolog_lib.tex(,429) @c ---content Ext_R---
../singular_texi/./d2t_singular/homolog_lib.tex(,430) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,431) 
../singular_texi/./d2t_singular/homolog_lib.tex(,432) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,433) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,434) Ext_R(v,M[,p]); v int resp. intvec , M module, p int
../singular_texi/./d2t_singular/homolog_lib.tex(,435) 
../singular_texi/./d2t_singular/homolog_lib.tex(,436) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,437) A presentation of Ext^k(M',R); for k=v[1],v[2],..., M'=coker(M).
../singular_texi/./d2t_singular/homolog_lib.tex(,438) Let
../singular_texi/./d2t_singular/homolog_lib.tex(,439) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,440)   0 <-- M' <-- F0 <-M-- F1 <-- F2 <-- ...
../singular_texi/./d2t_singular/homolog_lib.tex(,441) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,442) be a free resolution of M'. If
../singular_texi/./d2t_singular/homolog_lib.tex(,443) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,444)         0 --> F0* -A1-> F1* -A2-> F2* -A3-> ...
../singular_texi/./d2t_singular/homolog_lib.tex(,445) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,446) is the dual sequence, Fi*=Hom(Fi,R), then Ext^k = ker(Ak+1)/im(Ak)
../singular_texi/./d2t_singular/homolog_lib.tex(,447) is presented as in the following exact sequences:
../singular_texi/./d2t_singular/homolog_lib.tex(,448) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,449)     R^p --syz(Ak+1)-> Fk* ---Ak+1---->  Fk+1* ,
../singular_texi/./d2t_singular/homolog_lib.tex(,450)     R^q ----Ext^k---> R^p --syz(Ak+1)-> Fk*/im(Ak).
../singular_texi/./d2t_singular/homolog_lib.tex(,451) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,452) Hence, Ext^k=modulo(syz(Ak+1),Ak) presents Ext^k(M',R).
../singular_texi/./d2t_singular/homolog_lib.tex(,453) 
../singular_texi/./d2t_singular/homolog_lib.tex(,454) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,455) - module Ext, a presentation of Ext^k(M',R) if v is of type int@*
../singular_texi/./d2t_singular/homolog_lib.tex(,456) - a list of Ext^k (k=v[1],v[2],...) if v is of type intvec.@*
../singular_texi/./d2t_singular/homolog_lib.tex(,457) - In case of a third argument of type int return a list l:
../singular_texi/./d2t_singular/homolog_lib.tex(,458) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,459)      l[1] = module Ext^k resp. list of Ext^k
../singular_texi/./d2t_singular/homolog_lib.tex(,460)      l[2] = SB of Ext^k resp. list of SB of Ext^k
../singular_texi/./d2t_singular/homolog_lib.tex(,461)      l[3] = matrix resp. list of matrices, each representing a kbase of Ext^k 
../singular_texi/./d2t_singular/homolog_lib.tex(,462)               (if finite dimensional)
../singular_texi/./d2t_singular/homolog_lib.tex(,463) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,464) 
../singular_texi/./d2t_singular/homolog_lib.tex(,465) @item @strong{Display:}
../singular_texi/./d2t_singular/homolog_lib.tex(,466) printlevel >=0: (affine) dimension of Ext^k for each k (default)
../singular_texi/./d2t_singular/homolog_lib.tex(,467) printlevel >=1: Ak, Ak+1 and kbase of Ext^k in Fk*
../singular_texi/./d2t_singular/homolog_lib.tex(,468) 
../singular_texi/./d2t_singular/homolog_lib.tex(,469) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,470) In order to compute Ext^k(M,R) use the command Ext_R(k,syz(M));
../singular_texi/./d2t_singular/homolog_lib.tex(,471) or the 2 commands: list L=mres(M,2); Ext_R(k,L[2]);
../singular_texi/./d2t_singular/homolog_lib.tex(,472) 
../singular_texi/./d2t_singular/homolog_lib.tex(,473) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,474) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,475) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,476) @c computed example Ext_R d2t_singular/homolog_lib.doc:254 
../singular_texi/./d2t_singular/homolog_lib.tex(,477) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,478) int p      = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,479) printlevel = 1;
../singular_texi/./d2t_singular/homolog_lib.tex(,480) ring r     = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,481) ideal i    = x2y,y2z,z3x;
../singular_texi/./d2t_singular/homolog_lib.tex(,482) module E   = Ext_R(1,i);    //computes Ext^1(r/i,r)
../singular_texi/./d2t_singular/homolog_lib.tex(,483) @expansion{} // Computing Ext^1:
../singular_texi/./d2t_singular/homolog_lib.tex(,484) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of M,
../singular_texi/./d2t_singular/homolog_lib.tex(,485) @expansion{} // then F1*-->F2* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,486) @expansion{} x2, -yz,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,487) @expansion{} 0,  z3, -xy,
../singular_texi/./d2t_singular/homolog_lib.tex(,488) @expansion{} xz2,0,  -y2 
../singular_texi/./d2t_singular/homolog_lib.tex(,489) @expansion{} // and F0*-->F1* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,490) @expansion{} y2z,
../singular_texi/./d2t_singular/homolog_lib.tex(,491) @expansion{} x2y,
../singular_texi/./d2t_singular/homolog_lib.tex(,492) @expansion{} xz3 
../singular_texi/./d2t_singular/homolog_lib.tex(,493) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,494) @expansion{} // dimension of Ext^1:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,495) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,496) is_zero(E);
../singular_texi/./d2t_singular/homolog_lib.tex(,497) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,498) qring R    = std(x2+yz);
../singular_texi/./d2t_singular/homolog_lib.tex(,499) intvec v   = 0,2;
../singular_texi/./d2t_singular/homolog_lib.tex(,500) printlevel = 2;             //shows what is going on
../singular_texi/./d2t_singular/homolog_lib.tex(,501) ideal i    = x,y,z;         //computes Ext^i(r/(x,y,z),r/(x2+yz)), i=0,2
../singular_texi/./d2t_singular/homolog_lib.tex(,502) list L     = Ext_R(v,i,1);  //over the qring R=r/(x2+yz), std and kbase
../singular_texi/./d2t_singular/homolog_lib.tex(,503) @expansion{} // Computing Ext^0:
../singular_texi/./d2t_singular/homolog_lib.tex(,504) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of M,
../singular_texi/./d2t_singular/homolog_lib.tex(,505) @expansion{} // then F0*-->F1* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,506) @expansion{} z,
../singular_texi/./d2t_singular/homolog_lib.tex(,507) @expansion{} y,
../singular_texi/./d2t_singular/homolog_lib.tex(,508) @expansion{} x 
../singular_texi/./d2t_singular/homolog_lib.tex(,509) @expansion{} // and F-1*-->F0* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,510) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,511) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,512) @expansion{} // dimension of Ext^0:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,513) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,514) @expansion{} // columns of matrix are kbase of Ext^0 in F0*:
../singular_texi/./d2t_singular/homolog_lib.tex(,515) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,516) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,517) @expansion{} // Computing Ext^2:
../singular_texi/./d2t_singular/homolog_lib.tex(,518) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of M,
../singular_texi/./d2t_singular/homolog_lib.tex(,519) @expansion{} // then F2*-->F3* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,520) @expansion{} x,-y,z, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,521) @expansion{} z,x, 0, z,
../singular_texi/./d2t_singular/homolog_lib.tex(,522) @expansion{} 0,0, x, y,
../singular_texi/./d2t_singular/homolog_lib.tex(,523) @expansion{} 0,0, -z,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,524) @expansion{} // and F1*-->F2* is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,525) @expansion{} y,-z,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,526) @expansion{} x,0, -z,
../singular_texi/./d2t_singular/homolog_lib.tex(,527) @expansion{} 0,x, -y,
../singular_texi/./d2t_singular/homolog_lib.tex(,528) @expansion{} 0,z, x  
../singular_texi/./d2t_singular/homolog_lib.tex(,529) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,530) @expansion{} // dimension of Ext^2:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,531) @expansion{} // vdim of Ext^2:       1
../singular_texi/./d2t_singular/homolog_lib.tex(,532) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,533) @expansion{} // columns of matrix are kbase of Ext^2 in F2*:
../singular_texi/./d2t_singular/homolog_lib.tex(,534) @expansion{} x, 
../singular_texi/./d2t_singular/homolog_lib.tex(,535) @expansion{} -z,
../singular_texi/./d2t_singular/homolog_lib.tex(,536) @expansion{} 0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,537) @expansion{} 0  
../singular_texi/./d2t_singular/homolog_lib.tex(,538) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,539) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,540) @c end example Ext_R d2t_singular/homolog_lib.doc:254
../singular_texi/./d2t_singular/homolog_lib.tex(,541) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,542) @c ---end content Ext_R---
../singular_texi/./d2t_singular/homolog_lib.tex(,543) 
../singular_texi/./d2t_singular/homolog_lib.tex(,544) @c ------------------- Ext -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,545) @node Ext, fitting, Ext_R, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,546) @subsubsection Ext
../singular_texi/./d2t_singular/homolog_lib.tex(,547) @cindex Ext
../singular_texi/./d2t_singular/homolog_lib.tex(,548) @c ---content Ext---
../singular_texi/./d2t_singular/homolog_lib.tex(,549) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,550) 
../singular_texi/./d2t_singular/homolog_lib.tex(,551) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,552) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,553) Ext(v,M,N[,any]); v int resp. intvec, M,N modules
../singular_texi/./d2t_singular/homolog_lib.tex(,554) 
../singular_texi/./d2t_singular/homolog_lib.tex(,555) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,556) A presentation of Ext^k(M',N'); for k=v[1],v[2],... where
../singular_texi/./d2t_singular/homolog_lib.tex(,557) M'=coker(M) and N'=coker(N). Let
../singular_texi/./d2t_singular/homolog_lib.tex(,558) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,559)        0 <-- M' <-- F0 <-M-- F1 <-- F2 <--... ,   
../singular_texi/./d2t_singular/homolog_lib.tex(,560)        0 <-- N' <-- G0 <--N- G1
../singular_texi/./d2t_singular/homolog_lib.tex(,561) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,562) be a free resolution of M', resp. a presentation of N'. Consider
../singular_texi/./d2t_singular/homolog_lib.tex(,563) the commutative diagram
../singular_texi/./d2t_singular/homolog_lib.tex(,564) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,565)            0                  0                  0
../singular_texi/./d2t_singular/homolog_lib.tex(,566)            |^                 |^                 |^
../singular_texi/./d2t_singular/homolog_lib.tex(,567)    --> Hom(Fk-1,N') -Ak-> Hom(Fk,N') -Ak+1-> Hom(Fk+1,N')
../singular_texi/./d2t_singular/homolog_lib.tex(,568)            |^                 |^                 |^
../singular_texi/./d2t_singular/homolog_lib.tex(,569)    --> Hom(Fk-1,G0) -Ak-> Hom(Fk,G0) -Ak+1-> Hom(Fk+1,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,570)                               |^                 |^
../singular_texi/./d2t_singular/homolog_lib.tex(,571)                               |C                 |B
../singular_texi/./d2t_singular/homolog_lib.tex(,572)                           Hom(Fk,G1) ------> Hom(Fk+1,G1)
../singular_texi/./d2t_singular/homolog_lib.tex(,573) 
../singular_texi/./d2t_singular/homolog_lib.tex(,574)       (Ak,Ak+1 induced by M and B,C induced by N).
../singular_texi/./d2t_singular/homolog_lib.tex(,575) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,576) Let K=modulo(Ak+1,B), J=module(Ak)+module(C) and Ext=modulo(K,J),
../singular_texi/./d2t_singular/homolog_lib.tex(,577) then we have exact sequences
../singular_texi/./d2t_singular/homolog_lib.tex(,578) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,579)     R^p --K-> Hom(Fk,G0) --Ak+1-> Hom(Fk+1,G0)/im(B),
../singular_texi/./d2t_singular/homolog_lib.tex(,580) 
../singular_texi/./d2t_singular/homolog_lib.tex(,581)     R^q -Ext-> R^p --K-> Hom(Fk,G0)/(im(Ak)+im(C)).
../singular_texi/./d2t_singular/homolog_lib.tex(,582) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,583) Hence, Ext presents Ext^k(M',N').
../singular_texi/./d2t_singular/homolog_lib.tex(,584) 
../singular_texi/./d2t_singular/homolog_lib.tex(,585) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,586) - module Ext, a presentation of Ext^k(M',N') if v is of type int@*
../singular_texi/./d2t_singular/homolog_lib.tex(,587) - a list of Ext^k (k=v[1],v[2],...) if v is of type intvec.@*
../singular_texi/./d2t_singular/homolog_lib.tex(,588) - In case of a third argument of any type return a list l:
../singular_texi/./d2t_singular/homolog_lib.tex(,589) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,590)              l[1] = module Ext/list of Ext^k
../singular_texi/./d2t_singular/homolog_lib.tex(,591)              l[2] = SB of Ext/list of SB of Ext^k
../singular_texi/./d2t_singular/homolog_lib.tex(,592)              l[3] = matrix/list of matrices, each representing a kbase of Ext^k
../singular_texi/./d2t_singular/homolog_lib.tex(,593)                        (if finite dimensional)
../singular_texi/./d2t_singular/homolog_lib.tex(,594) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,595) 
../singular_texi/./d2t_singular/homolog_lib.tex(,596) @item @strong{Display:}
../singular_texi/./d2t_singular/homolog_lib.tex(,597) printlevel >=0: dimension, vdim of Ext^k for each k (default).
../singular_texi/./d2t_singular/homolog_lib.tex(,598) @* printlevel >=1: matrices Ak, Ak+1 and kbase of Ext^k in Hom(Fk,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,599) (if finite dimensional)
../singular_texi/./d2t_singular/homolog_lib.tex(,600) 
../singular_texi/./d2t_singular/homolog_lib.tex(,601) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,602) In order to compute Ext^k(M,N) use the command Ext(k,syz(M),syz(N));
../singular_texi/./d2t_singular/homolog_lib.tex(,603) or: list P=mres(M,2); list Q=mres(N,2); Ext(k,P[2],Q[2]);
../singular_texi/./d2t_singular/homolog_lib.tex(,604) 
../singular_texi/./d2t_singular/homolog_lib.tex(,605) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,606) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,607) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,608) @c computed example Ext d2t_singular/homolog_lib.doc:336 
../singular_texi/./d2t_singular/homolog_lib.tex(,609) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,610) int p      = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,611) printlevel = 1;
../singular_texi/./d2t_singular/homolog_lib.tex(,612) ring r     = 0,(x,y),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,613) ideal i    = x2-y3;
../singular_texi/./d2t_singular/homolog_lib.tex(,614) ideal j    = x2-y5;
../singular_texi/./d2t_singular/homolog_lib.tex(,615) list E     = Ext(0..2,i,j);    // Ext^k(r/i,r/j) for k=0,1,2 over r
../singular_texi/./d2t_singular/homolog_lib.tex(,616) @expansion{} // Computing Ext^0 (help Ext; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,617) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,618) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/./d2t_singular/homolog_lib.tex(,619) @expansion{} // then Hom(F0,G0)-->Hom(F1,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,620) @expansion{} y3-x2
../singular_texi/./d2t_singular/homolog_lib.tex(,621) @expansion{} // and Hom(F-1,G0) + Hom(F0,G1)-->Hom(F0,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,622) @expansion{} 0,-y5+x2
../singular_texi/./d2t_singular/homolog_lib.tex(,623) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,624) @expansion{} // dimension of Ext^0:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,625) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,626) @expansion{} // Computing Ext^1 (help Ext; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,627) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,628) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/./d2t_singular/homolog_lib.tex(,629) @expansion{} // then Hom(F1,G0)-->Hom(F2,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,630) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,631) @expansion{} // and Hom(F0,G0) + Hom(F1,G1)-->Hom(F1,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,632) @expansion{} y3-x2,-y5+x2
../singular_texi/./d2t_singular/homolog_lib.tex(,633) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,634) @expansion{} // dimension of Ext^1:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,635) @expansion{} // vdim of Ext^1:       10
../singular_texi/./d2t_singular/homolog_lib.tex(,636) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,637) @expansion{} // Computing Ext^2 (help Ext; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,638) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,639) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/./d2t_singular/homolog_lib.tex(,640) @expansion{} // then Hom(F2,G0)-->Hom(F3,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,641) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,642) @expansion{} // and Hom(F1,G0) + Hom(F2,G1)-->Hom(F2,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,643) @expansion{} 0,-y5+x2
../singular_texi/./d2t_singular/homolog_lib.tex(,644) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,645) @expansion{} // dimension of Ext^2:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,646) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,647) qring R    = std(i);
../singular_texi/./d2t_singular/homolog_lib.tex(,648) ideal j    = fetch(r,j);
../singular_texi/./d2t_singular/homolog_lib.tex(,649) module M   = [-x,y],[-y2,x];
../singular_texi/./d2t_singular/homolog_lib.tex(,650) printlevel = 2;
../singular_texi/./d2t_singular/homolog_lib.tex(,651) module E1  = Ext(1,M,j);       // Ext^1(R^2/M,R/j) over R=r/i
../singular_texi/./d2t_singular/homolog_lib.tex(,652) @expansion{} // Computing Ext^1 (help Ext; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,653) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,654) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/./d2t_singular/homolog_lib.tex(,655) @expansion{} // then Hom(F1,G0)-->Hom(F2,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,656) @expansion{} x, -y,
../singular_texi/./d2t_singular/homolog_lib.tex(,657) @expansion{} y2,-x 
../singular_texi/./d2t_singular/homolog_lib.tex(,658) @expansion{} // and Hom(F0,G0) + Hom(F1,G1)-->Hom(F1,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,659) @expansion{} x, -y,-y5+x2,0,    
../singular_texi/./d2t_singular/homolog_lib.tex(,660) @expansion{} y2,-x,0,     -y5+x2
../singular_texi/./d2t_singular/homolog_lib.tex(,661) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,662) @expansion{} // dimension of Ext^1:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,663) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,664) list l     = Ext(4,M,M,1);     // Ext^4(R^2/M,R^2/M) over R=r/i
../singular_texi/./d2t_singular/homolog_lib.tex(,665) @expansion{} // Computing Ext^4 (help Ext; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,666) @expansion{} // Let 0<--coker(M)<--F0<--F1<--F2<--... be a resolution of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,667) @expansion{} // and 0<--coker(N)<--G0<--G1 a presentation of coker(N),
../singular_texi/./d2t_singular/homolog_lib.tex(,668) @expansion{} // then Hom(F4,G0)-->Hom(F5,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,669) @expansion{} x, -y,0, 0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,670) @expansion{} y2,-x,0, 0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,671) @expansion{} 0, 0, x, -y,
../singular_texi/./d2t_singular/homolog_lib.tex(,672) @expansion{} 0, 0, y2,-x 
../singular_texi/./d2t_singular/homolog_lib.tex(,673) @expansion{} // and Hom(F3,G0) + Hom(F4,G1)-->Hom(F4,G0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,674) @expansion{} x, -y,0, 0, -x,0, -y2,0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,675) @expansion{} y2,-x,0, 0, 0, -x,0,  -y2,
../singular_texi/./d2t_singular/homolog_lib.tex(,676) @expansion{} 0, 0, x, -y,y, 0, x,  0,  
../singular_texi/./d2t_singular/homolog_lib.tex(,677) @expansion{} 0, 0, y2,-x,0, y, 0,  x   
../singular_texi/./d2t_singular/homolog_lib.tex(,678) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,679) @expansion{} // dimension of Ext^4:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,680) @expansion{} // vdim of Ext^4:       2
../singular_texi/./d2t_singular/homolog_lib.tex(,681) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,682) @expansion{} // columns of matrix are kbase of Ext^4 in Hom(F4,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,683) @expansion{} 1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,684) @expansion{} 0,y,
../singular_texi/./d2t_singular/homolog_lib.tex(,685) @expansion{} 0,1,
../singular_texi/./d2t_singular/homolog_lib.tex(,686) @expansion{} 1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,687) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,688) @expansion{} // element 1 of kbase of Ext^4 in Hom(F4,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,689) @expansion{} // as matrix: F4-->G0
../singular_texi/./d2t_singular/homolog_lib.tex(,690) @expansion{} 1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,691) @expansion{} 0,1 
../singular_texi/./d2t_singular/homolog_lib.tex(,692) @expansion{} // element 2 of kbase of Ext^4 in Hom(F4,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,693) @expansion{} // as matrix: F4-->G0
../singular_texi/./d2t_singular/homolog_lib.tex(,694) @expansion{} 0,y,
../singular_texi/./d2t_singular/homolog_lib.tex(,695) @expansion{} 1,0 
../singular_texi/./d2t_singular/homolog_lib.tex(,696) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,697) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,698) @c end example Ext d2t_singular/homolog_lib.doc:336
../singular_texi/./d2t_singular/homolog_lib.tex(,699) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,700) @c ---end content Ext---
../singular_texi/./d2t_singular/homolog_lib.tex(,701) 
../singular_texi/./d2t_singular/homolog_lib.tex(,702) @c ------------------- fitting -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,703) @node fitting, flatteningStrat, Ext, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,704) @subsubsection fitting
../singular_texi/./d2t_singular/homolog_lib.tex(,705) @cindex fitting
../singular_texi/./d2t_singular/homolog_lib.tex(,706) @c ---content fitting---
../singular_texi/./d2t_singular/homolog_lib.tex(,707) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,708) 
../singular_texi/./d2t_singular/homolog_lib.tex(,709) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,710) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,711) fitting (M,n); M module, n int
../singular_texi/./d2t_singular/homolog_lib.tex(,712) 
../singular_texi/./d2t_singular/homolog_lib.tex(,713) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,714) ideal, (standard basis of) n-th Fitting ideal of M'=coker(M).
../singular_texi/./d2t_singular/homolog_lib.tex(,715) 
../singular_texi/./d2t_singular/homolog_lib.tex(,716) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,717) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,718) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,719) @c computed example fitting d2t_singular/homolog_lib.doc:372 
../singular_texi/./d2t_singular/homolog_lib.tex(,720) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,721) ring R=0,x(0..4),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,722) matrix M[2][4]=x(0),x(1),x(2),x(3),x(1),x(2),x(3),x(4);
../singular_texi/./d2t_singular/homolog_lib.tex(,723) print(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,724) @expansion{} x(0),x(1),x(2),x(3),
../singular_texi/./d2t_singular/homolog_lib.tex(,725) @expansion{} x(1),x(2),x(3),x(4) 
../singular_texi/./d2t_singular/homolog_lib.tex(,726) fitting(M,-1);
../singular_texi/./d2t_singular/homolog_lib.tex(,727) @expansion{} _[1]=0
../singular_texi/./d2t_singular/homolog_lib.tex(,728) fitting(M,0);
../singular_texi/./d2t_singular/homolog_lib.tex(,729) @expansion{} _[1]=x(3)^2-x(2)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,730) @expansion{} _[2]=x(2)*x(3)-x(1)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,731) @expansion{} _[3]=x(1)*x(3)-x(0)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,732) @expansion{} _[4]=x(2)^2-x(0)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,733) @expansion{} _[5]=x(1)*x(2)-x(0)*x(3)
../singular_texi/./d2t_singular/homolog_lib.tex(,734) @expansion{} _[6]=x(1)^2-x(0)*x(2)
../singular_texi/./d2t_singular/homolog_lib.tex(,735) fitting(M,1);
../singular_texi/./d2t_singular/homolog_lib.tex(,736) @expansion{} _[1]=x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,737) @expansion{} _[2]=x(3)
../singular_texi/./d2t_singular/homolog_lib.tex(,738) @expansion{} _[3]=x(2)
../singular_texi/./d2t_singular/homolog_lib.tex(,739) @expansion{} _[4]=x(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,740) @expansion{} _[5]=x(0)
../singular_texi/./d2t_singular/homolog_lib.tex(,741) fitting(M,2);
../singular_texi/./d2t_singular/homolog_lib.tex(,742) @expansion{} _[1]=1
../singular_texi/./d2t_singular/homolog_lib.tex(,743) @c end example fitting d2t_singular/homolog_lib.doc:372
../singular_texi/./d2t_singular/homolog_lib.tex(,744) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,745) @c ---end content fitting---
../singular_texi/./d2t_singular/homolog_lib.tex(,746) 
../singular_texi/./d2t_singular/homolog_lib.tex(,747) @c ------------------- flatteningStrat -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,748) @node flatteningStrat, Hom, fitting, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,749) @subsubsection flatteningStrat
../singular_texi/./d2t_singular/homolog_lib.tex(,750) @cindex flatteningStrat
../singular_texi/./d2t_singular/homolog_lib.tex(,751) @c ---content flatteningStrat---
../singular_texi/./d2t_singular/homolog_lib.tex(,752) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,753) 
../singular_texi/./d2t_singular/homolog_lib.tex(,754) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,755) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,756) flatteningStrat(M); M module
../singular_texi/./d2t_singular/homolog_lib.tex(,757) 
../singular_texi/./d2t_singular/homolog_lib.tex(,758) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,759) list of ideals.
../singular_texi/./d2t_singular/homolog_lib.tex(,760) @*The list entries L[1],...,L[r] describe the flattening stratification
../singular_texi/./d2t_singular/homolog_lib.tex(,761) of M'=coker(M): setting L[0]=0, L[r+1]=1, the flattening
../singular_texi/./d2t_singular/homolog_lib.tex(,762) stratification is given by the open sets Spec(A/V(L[i-1])) \ V(L[i]),
../singular_texi/./d2t_singular/homolog_lib.tex(,763) i=1,...,r+1 (A = basering).
../singular_texi/./d2t_singular/homolog_lib.tex(,764) 
../singular_texi/./d2t_singular/homolog_lib.tex(,765) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,766) for more information see the book 'A Singular Introduction to
../singular_texi/./d2t_singular/homolog_lib.tex(,767) Commutative Algebra' (by Greuel/Pfister, Springer 2002).
../singular_texi/./d2t_singular/homolog_lib.tex(,768) 
../singular_texi/./d2t_singular/homolog_lib.tex(,769) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,770) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,771) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,772) @c computed example flatteningStrat d2t_singular/homolog_lib.doc:410 
../singular_texi/./d2t_singular/homolog_lib.tex(,773) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,774) ring A = 0,x(0..4),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,775) // presentation matrix:
../singular_texi/./d2t_singular/homolog_lib.tex(,776) matrix M[2][4] = x(0),x(1),x(2),x(3),x(1),x(2),x(3),x(4);
../singular_texi/./d2t_singular/homolog_lib.tex(,777) list L = flatteningStrat(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,778) L;
../singular_texi/./d2t_singular/homolog_lib.tex(,779) @expansion{} [1]:
../singular_texi/./d2t_singular/homolog_lib.tex(,780) @expansion{}    _[1]=x(3)^2-x(2)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,781) @expansion{}    _[2]=x(2)*x(3)-x(1)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,782) @expansion{}    _[3]=x(1)*x(3)-x(0)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,783) @expansion{}    _[4]=x(2)^2-x(0)*x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,784) @expansion{}    _[5]=x(1)*x(2)-x(0)*x(3)
../singular_texi/./d2t_singular/homolog_lib.tex(,785) @expansion{}    _[6]=x(1)^2-x(0)*x(2)
../singular_texi/./d2t_singular/homolog_lib.tex(,786) @expansion{} [2]:
../singular_texi/./d2t_singular/homolog_lib.tex(,787) @expansion{}    _[1]=x(4)
../singular_texi/./d2t_singular/homolog_lib.tex(,788) @expansion{}    _[2]=x(3)
../singular_texi/./d2t_singular/homolog_lib.tex(,789) @expansion{}    _[3]=x(2)
../singular_texi/./d2t_singular/homolog_lib.tex(,790) @expansion{}    _[4]=x(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,791) @expansion{}    _[5]=x(0)
../singular_texi/./d2t_singular/homolog_lib.tex(,792) @c end example flatteningStrat d2t_singular/homolog_lib.doc:410
../singular_texi/./d2t_singular/homolog_lib.tex(,793) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,794) @c ---end content flatteningStrat---
../singular_texi/./d2t_singular/homolog_lib.tex(,795) 
../singular_texi/./d2t_singular/homolog_lib.tex(,796) @c ------------------- Hom -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,797) @node Hom, homology, flatteningStrat, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,798) @subsubsection Hom
../singular_texi/./d2t_singular/homolog_lib.tex(,799) @cindex Hom
../singular_texi/./d2t_singular/homolog_lib.tex(,800) @c ---content Hom---
../singular_texi/./d2t_singular/homolog_lib.tex(,801) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,802) 
../singular_texi/./d2t_singular/homolog_lib.tex(,803) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,804) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,805) Hom(M,N,[any]); M,N=modules
../singular_texi/./d2t_singular/homolog_lib.tex(,806) 
../singular_texi/./d2t_singular/homolog_lib.tex(,807) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,808) A presentation of Hom(M',N'), M'=coker(M), N'=coker(N) as follows:
../singular_texi/./d2t_singular/homolog_lib.tex(,809) let
../singular_texi/./d2t_singular/homolog_lib.tex(,810) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,811)    F1 --M-> F0 -->M' --> 0,    G1 --N-> G0 --> N' --> 0  
../singular_texi/./d2t_singular/homolog_lib.tex(,812) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,813) be presentations of M' and N'. Consider
../singular_texi/./d2t_singular/homolog_lib.tex(,814) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,815)                                   0               0
../singular_texi/./d2t_singular/homolog_lib.tex(,816)                                   |^              |^
../singular_texi/./d2t_singular/homolog_lib.tex(,817)        0 --> Hom(M',N') ----> Hom(F0,N') ----> Hom(F1,N')
../singular_texi/./d2t_singular/homolog_lib.tex(,818)                                   |^              |^
../singular_texi/./d2t_singular/homolog_lib.tex(,819)   (A:  induced by M)          Hom(F0,G0) --A-> Hom(F1,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,820)                                   |^              |^
../singular_texi/./d2t_singular/homolog_lib.tex(,821)   (B,C:induced by N)              |C              |B
../singular_texi/./d2t_singular/homolog_lib.tex(,822)                               Hom(F0,G1) ----> Hom(F1,G1)
../singular_texi/./d2t_singular/homolog_lib.tex(,823) 
../singular_texi/./d2t_singular/homolog_lib.tex(,824) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,825) Let D=modulo(A,B) and Hom=modulo(D,C), then we have exact sequences
../singular_texi/./d2t_singular/homolog_lib.tex(,826) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,827)    R^p  --D-> Hom(F0,G0) --A-> Hom(F1,G0)/im(B),
../singular_texi/./d2t_singular/homolog_lib.tex(,828) 
../singular_texi/./d2t_singular/homolog_lib.tex(,829)  R^q -Hom-> R^p --D-> Hom(F0,G0)/im(C) --A-> Hom(F1,G0)/im(B).
../singular_texi/./d2t_singular/homolog_lib.tex(,830) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,831) Hence Hom presents Hom(M',N')
../singular_texi/./d2t_singular/homolog_lib.tex(,832) 
../singular_texi/./d2t_singular/homolog_lib.tex(,833) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,834) module Hom, a presentation of Hom(M',N'), resp., in case of
../singular_texi/./d2t_singular/homolog_lib.tex(,835) 3 arguments, a list l (of size <=3):
../singular_texi/./d2t_singular/homolog_lib.tex(,836) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,837)            - l[1] = Hom
../singular_texi/./d2t_singular/homolog_lib.tex(,838)            - l[2] = SB of Hom
../singular_texi/./d2t_singular/homolog_lib.tex(,839)            - l[3] = kbase of coker(Hom) (if finite dimensional, not 0),
../singular_texi/./d2t_singular/homolog_lib.tex(,840)                     represented by elements in Hom(F0,G0) via mapping D
../singular_texi/./d2t_singular/homolog_lib.tex(,841) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,842) 
../singular_texi/./d2t_singular/homolog_lib.tex(,843) @item @strong{Display:}
../singular_texi/./d2t_singular/homolog_lib.tex(,844) printlevel >=0: (affine) dimension of Hom (default)
../singular_texi/./d2t_singular/homolog_lib.tex(,845) @* printlevel >=1: D and C and kbase of coker(Hom) in Hom(F0,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,846) @* printlevel >=2: elements of kbase of coker(Hom) as matrix :F0-->G0
../singular_texi/./d2t_singular/homolog_lib.tex(,847) 
../singular_texi/./d2t_singular/homolog_lib.tex(,848) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,849) DISPLAY is as described only for a direct call of 'Hom'. Calling 'Hom'
../singular_texi/./d2t_singular/homolog_lib.tex(,850) from another proc has the same effect as decreasing printlevel by 1.
../singular_texi/./d2t_singular/homolog_lib.tex(,851) 
../singular_texi/./d2t_singular/homolog_lib.tex(,852) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,853) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,854) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,855) @c computed example Hom d2t_singular/homolog_lib.doc:480 
../singular_texi/./d2t_singular/homolog_lib.tex(,856) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,857) int p     = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,858) printlevel= 1;   //in 'example proc' printlevel has to be increased by 1
../singular_texi/./d2t_singular/homolog_lib.tex(,859) ring r    = 0,(x,y),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,860) ideal i   = x2-y3,xy;
../singular_texi/./d2t_singular/homolog_lib.tex(,861) qring q   = std(i);
../singular_texi/./d2t_singular/homolog_lib.tex(,862) ideal i   = fetch(r,i);
../singular_texi/./d2t_singular/homolog_lib.tex(,863) module M  = [-x,y],[-y2,x],[x3];
../singular_texi/./d2t_singular/homolog_lib.tex(,864) module H  = Hom(M,i);
../singular_texi/./d2t_singular/homolog_lib.tex(,865) @expansion{} // dimension of Hom:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,866) @expansion{} // vdim of Hom:       5
../singular_texi/./d2t_singular/homolog_lib.tex(,867) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,868) @expansion{} // given  F1 --M-> F0 -->M'--> 0 and  G1 --N-> G0 -->N'--> 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,869) @expansion{} // show D = ker( Hom(F0,G0) --> Hom(F1,G0)/im(Hom(F1,G1)->Hom(F1,G0)) )
../singular_texi/./d2t_singular/homolog_lib.tex(,870) @expansion{} y,x, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,871) @expansion{} x,y2,x2
../singular_texi/./d2t_singular/homolog_lib.tex(,872) @expansion{} // show C = im ( Hom(F0,G1) --> Hom(F0,G0) )
../singular_texi/./d2t_singular/homolog_lib.tex(,873) @expansion{} -y3+x2,0,     xy,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,874) @expansion{} 0,     -y3+x2,0, xy
../singular_texi/./d2t_singular/homolog_lib.tex(,875) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,876) print(H);
../singular_texi/./d2t_singular/homolog_lib.tex(,877) @expansion{} 0, x, 0,y2,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,878) @expansion{} y, 0, 0,-x,x2,
../singular_texi/./d2t_singular/homolog_lib.tex(,879) @expansion{} -1,-1,x,0, 0  
../singular_texi/./d2t_singular/homolog_lib.tex(,880) printlevel= 2;
../singular_texi/./d2t_singular/homolog_lib.tex(,881) list L    = Hom(M,i,1);"";
../singular_texi/./d2t_singular/homolog_lib.tex(,882) @expansion{} // dimension of Hom:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,883) @expansion{} // vdim of Hom:       5
../singular_texi/./d2t_singular/homolog_lib.tex(,884) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,885) @expansion{} // given  F1 --M-> F0 -->M'--> 0 and  G1 --N-> G0 -->N'--> 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,886) @expansion{} // show D = ker( Hom(F0,G0) --> Hom(F1,G0)/im(Hom(F1,G1)->Hom(F1,G0)) )
../singular_texi/./d2t_singular/homolog_lib.tex(,887) @expansion{} y,x, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,888) @expansion{} x,y2,x2
../singular_texi/./d2t_singular/homolog_lib.tex(,889) @expansion{} // show C = im ( Hom(F0,G1) --> Hom(F0,G0) )
../singular_texi/./d2t_singular/homolog_lib.tex(,890) @expansion{} -y3+x2,0,     xy,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,891) @expansion{} 0,     -y3+x2,0, xy
../singular_texi/./d2t_singular/homolog_lib.tex(,892) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,893) @expansion{} // element 1 of kbase of Hom in Hom(F0,G0) as matrix: F0-->G0:
../singular_texi/./d2t_singular/homolog_lib.tex(,894) @expansion{} y2,xy
../singular_texi/./d2t_singular/homolog_lib.tex(,895) @expansion{} // element 2 of kbase of Hom in Hom(F0,G0) as matrix: F0-->G0:
../singular_texi/./d2t_singular/homolog_lib.tex(,896) @expansion{} y,x
../singular_texi/./d2t_singular/homolog_lib.tex(,897) @expansion{} // element 3 of kbase of Hom in Hom(F0,G0) as matrix: F0-->G0:
../singular_texi/./d2t_singular/homolog_lib.tex(,898) @expansion{} x2,xy2
../singular_texi/./d2t_singular/homolog_lib.tex(,899) @expansion{} // element 4 of kbase of Hom in Hom(F0,G0) as matrix: F0-->G0:
../singular_texi/./d2t_singular/homolog_lib.tex(,900) @expansion{} x,y2
../singular_texi/./d2t_singular/homolog_lib.tex(,901) @expansion{} // element 5 of kbase of Hom in Hom(F0,G0) as matrix: F0-->G0:
../singular_texi/./d2t_singular/homolog_lib.tex(,902) @expansion{} 0,x2
../singular_texi/./d2t_singular/homolog_lib.tex(,903) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,904) printlevel=1;
../singular_texi/./d2t_singular/homolog_lib.tex(,905) ring s    = 3,(x,y,z),(c,dp);
../singular_texi/./d2t_singular/homolog_lib.tex(,906) ideal i   = jacob(ideal(x2+y5+z4));
../singular_texi/./d2t_singular/homolog_lib.tex(,907) qring rq=std(i);
../singular_texi/./d2t_singular/homolog_lib.tex(,908) matrix M[2][2]=xy,x3,5y,4z,x2;
../singular_texi/./d2t_singular/homolog_lib.tex(,909) matrix N[3][2]=x2,x,y3,3xz,x2z,z;
../singular_texi/./d2t_singular/homolog_lib.tex(,910) print(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,911) @expansion{} xy,x3,
../singular_texi/./d2t_singular/homolog_lib.tex(,912) @expansion{} -y,z  
../singular_texi/./d2t_singular/homolog_lib.tex(,913) print(N);
../singular_texi/./d2t_singular/homolog_lib.tex(,914) @expansion{} x2, x,
../singular_texi/./d2t_singular/homolog_lib.tex(,915) @expansion{} y3, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,916) @expansion{} x2z,z 
../singular_texi/./d2t_singular/homolog_lib.tex(,917) list l=Hom(M,N,1);
../singular_texi/./d2t_singular/homolog_lib.tex(,918) @expansion{} // dimension of Hom:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,919) @expansion{} // vdim of Hom:       16
../singular_texi/./d2t_singular/homolog_lib.tex(,920) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,921) @expansion{} // given  F1 --M-> F0 -->M'--> 0 and  G1 --N-> G0 -->N'--> 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,922) @expansion{} // show D = ker( Hom(F0,G0) --> Hom(F1,G0)/im(Hom(F1,G1)->Hom(F1,G0)) )
../singular_texi/./d2t_singular/homolog_lib.tex(,923) @expansion{} 0,0, 0,0, 0,   0,0,   1,
../singular_texi/./d2t_singular/homolog_lib.tex(,924) @expansion{} 0,0, 0,0, 0,   0,y3z2,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,925) @expansion{} 0,0, 0,0, 0,   1,0,   0,
../singular_texi/./d2t_singular/homolog_lib.tex(,926) @expansion{} 0,0, 0,y3,y2z2,0,0,   0,
../singular_texi/./d2t_singular/homolog_lib.tex(,927) @expansion{} 0,0, 1,0, 0,   0,0,   0,
../singular_texi/./d2t_singular/homolog_lib.tex(,928) @expansion{} z,y3,0,0, 0,   0,0,   0 
../singular_texi/./d2t_singular/homolog_lib.tex(,929) @expansion{} // show C = im ( Hom(F0,G1) --> Hom(F0,G0) )
../singular_texi/./d2t_singular/homolog_lib.tex(,930) @expansion{} x2, 0,  x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,931) @expansion{} 0,  x2, 0,x,
../singular_texi/./d2t_singular/homolog_lib.tex(,932) @expansion{} y3, 0,  0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,933) @expansion{} 0,  y3, 0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,934) @expansion{} x2z,0,  z,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,935) @expansion{} 0,  x2z,0,z 
../singular_texi/./d2t_singular/homolog_lib.tex(,936) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,937) @expansion{} // columns of matrix are kbase of Hom in Hom(F0,G0)
../singular_texi/./d2t_singular/homolog_lib.tex(,938) @expansion{} 0, 0, 0, 0,0,0,   0,   0,  0, 0,  0, 0,0, 0,0,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,939) @expansion{} 0, 0, 0, 0,0,0,   0,   0,  0, 0,  0, 0,0, 0,0,y3z2,
../singular_texi/./d2t_singular/homolog_lib.tex(,940) @expansion{} 0, 0, 0, 0,0,0,   y2z2,yz2,z2,y2z,yz,z,y2,y,1,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,941) @expansion{} 0, 0, 0, 0,0,y2z2,0,   0,  0, 0,  0, 0,0, 0,0,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,942) @expansion{} 0, y3,y2,y,1,0,   0,   0,  0, 0,  0, 0,0, 0,0,0,   
../singular_texi/./d2t_singular/homolog_lib.tex(,943) @expansion{} y3,0, 0, 0,0,0,   0,   0,  0, 0,  0, 0,0, 0,0,0    
../singular_texi/./d2t_singular/homolog_lib.tex(,944) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,945) @c end example Hom d2t_singular/homolog_lib.doc:480
../singular_texi/./d2t_singular/homolog_lib.tex(,946) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,947) @c ---end content Hom---
../singular_texi/./d2t_singular/homolog_lib.tex(,948) 
../singular_texi/./d2t_singular/homolog_lib.tex(,949) @c ------------------- homology -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,950) @node homology, isCM, Hom, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,951) @subsubsection homology
../singular_texi/./d2t_singular/homolog_lib.tex(,952) @cindex homology
../singular_texi/./d2t_singular/homolog_lib.tex(,953) @c ---content homology---
../singular_texi/./d2t_singular/homolog_lib.tex(,954) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,955) 
../singular_texi/./d2t_singular/homolog_lib.tex(,956) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,957) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,958) homology(A,B,M,N);
../singular_texi/./d2t_singular/homolog_lib.tex(,959) 
../singular_texi/./d2t_singular/homolog_lib.tex(,960) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,961) Let M and N be submodules of R^m and R^n presenting M'=R^m/M, N'=R^n/N
../singular_texi/./d2t_singular/homolog_lib.tex(,962) (R=basering) and let A,B matrices inducing maps
../singular_texi/./d2t_singular/homolog_lib.tex(,963) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,964)     R^k --A--> R^m --B--> R^n.
../singular_texi/./d2t_singular/homolog_lib.tex(,965) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,966) Compute a presentation of the module
../singular_texi/./d2t_singular/homolog_lib.tex(,967) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,968)     ker(B)/im(A) := ker(M'/im(A) --B--> N'/im(BM)+im(BA)).
../singular_texi/./d2t_singular/homolog_lib.tex(,969) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,970) If B induces a map M'-->N' (i.e BM=0) and if im(A) is contained in
../singular_texi/./d2t_singular/homolog_lib.tex(,971) ker(B) (that is, BA=0) then ker(B)/im(A) is the homology of the
../singular_texi/./d2t_singular/homolog_lib.tex(,972) complex
../singular_texi/./d2t_singular/homolog_lib.tex(,973) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,974)     R^k--A-->M'--B-->N'. 
../singular_texi/./d2t_singular/homolog_lib.tex(,975) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,976) 
../singular_texi/./d2t_singular/homolog_lib.tex(,977) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,978) module H, a presentation of ker(B)/im(A).
../singular_texi/./d2t_singular/homolog_lib.tex(,979) 
../singular_texi/./d2t_singular/homolog_lib.tex(,980) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,981) homology returns a free module of rank m if ker(B)=im(A).
../singular_texi/./d2t_singular/homolog_lib.tex(,982) 
../singular_texi/./d2t_singular/homolog_lib.tex(,983) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,984) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,985) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,986) @c computed example homology d2t_singular/homolog_lib.doc:544 
../singular_texi/./d2t_singular/homolog_lib.tex(,987) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,988) ring r;
../singular_texi/./d2t_singular/homolog_lib.tex(,989) ideal id=maxideal(4);
../singular_texi/./d2t_singular/homolog_lib.tex(,990) qring qr=std(id);
../singular_texi/./d2t_singular/homolog_lib.tex(,991) module N=maxideal(3)*freemodule(2);
../singular_texi/./d2t_singular/homolog_lib.tex(,992) module M=maxideal(2)*freemodule(2);
../singular_texi/./d2t_singular/homolog_lib.tex(,993) module B=[2x,0],[x,y],[z2,y];
../singular_texi/./d2t_singular/homolog_lib.tex(,994) module A=M;
../singular_texi/./d2t_singular/homolog_lib.tex(,995) module H=homology(A,B,M,N);
../singular_texi/./d2t_singular/homolog_lib.tex(,996) H=std(H);
../singular_texi/./d2t_singular/homolog_lib.tex(,997) // dimension of homology:
../singular_texi/./d2t_singular/homolog_lib.tex(,998) dim(H);
../singular_texi/./d2t_singular/homolog_lib.tex(,999) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1000) // vector space dimension: 
../singular_texi/./d2t_singular/homolog_lib.tex(,1001) vdim(H);
../singular_texi/./d2t_singular/homolog_lib.tex(,1002) @expansion{} 19
../singular_texi/./d2t_singular/homolog_lib.tex(,1003) ring s=0,x,ds;
../singular_texi/./d2t_singular/homolog_lib.tex(,1004) qring qs=std(x4);
../singular_texi/./d2t_singular/homolog_lib.tex(,1005) module A=[x];
../singular_texi/./d2t_singular/homolog_lib.tex(,1006) module B=A;
../singular_texi/./d2t_singular/homolog_lib.tex(,1007) module M=[x3];
../singular_texi/./d2t_singular/homolog_lib.tex(,1008) module N=M;
../singular_texi/./d2t_singular/homolog_lib.tex(,1009) homology(A,B,M,N);
../singular_texi/./d2t_singular/homolog_lib.tex(,1010) @expansion{} _[1]=gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1011) @c end example homology d2t_singular/homolog_lib.doc:544
../singular_texi/./d2t_singular/homolog_lib.tex(,1012) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1013) @c ---end content homology---
../singular_texi/./d2t_singular/homolog_lib.tex(,1014) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1015) @c ------------------- isCM -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1016) @node isCM, isFlat, homology, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1017) @subsubsection isCM
../singular_texi/./d2t_singular/homolog_lib.tex(,1018) @cindex isCM
../singular_texi/./d2t_singular/homolog_lib.tex(,1019) @c ---content isCM---
../singular_texi/./d2t_singular/homolog_lib.tex(,1020) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1021) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1022) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1023) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1024) isCM(M); M module
../singular_texi/./d2t_singular/homolog_lib.tex(,1025) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1026) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1027) 1 if M'=coker(M) is Cohen-Macaulay;@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1028) 0 if this is not the case.
../singular_texi/./d2t_singular/homolog_lib.tex(,1029) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1030) @item @strong{Assume:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1031) basering is local.
../singular_texi/./d2t_singular/homolog_lib.tex(,1032) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1033) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1034) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1035) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1036) @c computed example isCM d2t_singular/homolog_lib.doc:591 
../singular_texi/./d2t_singular/homolog_lib.tex(,1037) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1038) ring R=0,(x,y,z),ds;  // local ring R = Q[x,y,z]_<x,y,z>
../singular_texi/./d2t_singular/homolog_lib.tex(,1039) module M=xz,yz,z2;   
../singular_texi/./d2t_singular/homolog_lib.tex(,1040) isCM(M);             // test if R/<xz,yz,z2> is Cohen-Macaulay
../singular_texi/./d2t_singular/homolog_lib.tex(,1041) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1042) M=x2+y2,z7;          // test if R/<x2+y2,z7> is Cohen-Macaulay
../singular_texi/./d2t_singular/homolog_lib.tex(,1043) isCM(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1044) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1045) @c end example isCM d2t_singular/homolog_lib.doc:591
../singular_texi/./d2t_singular/homolog_lib.tex(,1046) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1047) @c ---end content isCM---
../singular_texi/./d2t_singular/homolog_lib.tex(,1048) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1049) @c ------------------- isFlat -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1050) @node isFlat, isLocallyFree, isCM, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1051) @subsubsection isFlat
../singular_texi/./d2t_singular/homolog_lib.tex(,1052) @cindex isFlat
../singular_texi/./d2t_singular/homolog_lib.tex(,1053) @c ---content isFlat---
../singular_texi/./d2t_singular/homolog_lib.tex(,1054) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1055) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1056) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1057) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1058) isFlat(M); M module
../singular_texi/./d2t_singular/homolog_lib.tex(,1059) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1060) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1061) 1 if M'=coker(M) is flat;@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1062) 0 if this is not the case.
../singular_texi/./d2t_singular/homolog_lib.tex(,1063) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1064) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1065) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1066) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1067) @c computed example isFlat d2t_singular/homolog_lib.doc:620 
../singular_texi/./d2t_singular/homolog_lib.tex(,1068) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1069) ring A = 0,(x,y),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1070) matrix M[3][3] = x-1,y,x,x,x+1,y,x2,xy+x+1,x2+y;
../singular_texi/./d2t_singular/homolog_lib.tex(,1071) print(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1072) @expansion{} x-1,y,     x,  
../singular_texi/./d2t_singular/homolog_lib.tex(,1073) @expansion{} x,  x+1,   y,  
../singular_texi/./d2t_singular/homolog_lib.tex(,1074) @expansion{} x2, xy+x+1,x2+y
../singular_texi/./d2t_singular/homolog_lib.tex(,1075) isFlat(M);             // coker(M) is not flat over A=Q[x,y]
../singular_texi/./d2t_singular/homolog_lib.tex(,1076) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1077) qring B = std(x2+x-y);   // the ring B=Q[x,y]/<x2+x-y>
../singular_texi/./d2t_singular/homolog_lib.tex(,1078) matrix M = fetch(A,M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1079) isFlat(M);             // coker(M) is flat over B
../singular_texi/./d2t_singular/homolog_lib.tex(,1080) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1081) setring A;
../singular_texi/./d2t_singular/homolog_lib.tex(,1082) qring C = std(x2+x+y);   // the ring C=Q[x,y]/<x2+x+y>
../singular_texi/./d2t_singular/homolog_lib.tex(,1083) matrix M = fetch(A,M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1084) isFlat(M);             // coker(M) is not flat over C
../singular_texi/./d2t_singular/homolog_lib.tex(,1085) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1086) @c end example isFlat d2t_singular/homolog_lib.doc:620
../singular_texi/./d2t_singular/homolog_lib.tex(,1087) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1088) @c ---end content isFlat---
../singular_texi/./d2t_singular/homolog_lib.tex(,1089) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1090) @c ------------------- isLocallyFree -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1091) @node isLocallyFree, isReg, isFlat, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1092) @subsubsection isLocallyFree
../singular_texi/./d2t_singular/homolog_lib.tex(,1093) @cindex isLocallyFree
../singular_texi/./d2t_singular/homolog_lib.tex(,1094) @c ---content isLocallyFree---
../singular_texi/./d2t_singular/homolog_lib.tex(,1095) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1096) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1097) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1098) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1099) isLocallyFree(M,r); M module, r int
../singular_texi/./d2t_singular/homolog_lib.tex(,1100) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1101) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1102) 1 if M'=coker(M) is locally free of constant rank r;@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1103) 0 if this is not the case.
../singular_texi/./d2t_singular/homolog_lib.tex(,1104) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1105) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1106) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1107) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1108) @c computed example isLocallyFree d2t_singular/homolog_lib.doc:655 
../singular_texi/./d2t_singular/homolog_lib.tex(,1109) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1110) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1111) matrix M[2][3];     // the presentation matrix
../singular_texi/./d2t_singular/homolog_lib.tex(,1112) M=x-1,y-1,z,y-1,x-2,x;
../singular_texi/./d2t_singular/homolog_lib.tex(,1113) ideal I=fitting(M,0); // 0-th Fitting ideal of coker(M)
../singular_texi/./d2t_singular/homolog_lib.tex(,1114) qring Q=I;
../singular_texi/./d2t_singular/homolog_lib.tex(,1115) matrix M=fetch(R,M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1116) isLocallyFree(M,1); // as R/I-module, coker(M) is locally free of rk 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1117) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1118) isLocallyFree(M,0);
../singular_texi/./d2t_singular/homolog_lib.tex(,1119) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1120) @c end example isLocallyFree d2t_singular/homolog_lib.doc:655
../singular_texi/./d2t_singular/homolog_lib.tex(,1121) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1122) @c ---end content isLocallyFree---
../singular_texi/./d2t_singular/homolog_lib.tex(,1123) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1124) @c ------------------- isReg -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1125) @node isReg, kernel, isLocallyFree, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1126) @subsubsection isReg
../singular_texi/./d2t_singular/homolog_lib.tex(,1127) @cindex isReg
../singular_texi/./d2t_singular/homolog_lib.tex(,1128) @c ---content isReg---
../singular_texi/./d2t_singular/homolog_lib.tex(,1129) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1130) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1131) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1132) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1133) isReg(I,M); I ideal, M module
../singular_texi/./d2t_singular/homolog_lib.tex(,1134) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1135) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1136) 1 if given (ordered) list of generators for I is coker(M)-sequence;@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1137) 0 if this is not the case.
../singular_texi/./d2t_singular/homolog_lib.tex(,1138) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1139) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1140) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1141) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1142) @c computed example isReg d2t_singular/homolog_lib.doc:687 
../singular_texi/./d2t_singular/homolog_lib.tex(,1143) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1144) ring R = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1145) ideal I = x*(y-1),y,z*(y-1);
../singular_texi/./d2t_singular/homolog_lib.tex(,1146) isReg(I,0);             // given list of generators is Q[x,y,z]-sequence
../singular_texi/./d2t_singular/homolog_lib.tex(,1147) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1148) I = x*(y-1),z*(y-1),y;  // change sorting of generators 
../singular_texi/./d2t_singular/homolog_lib.tex(,1149) isReg(I,0);
../singular_texi/./d2t_singular/homolog_lib.tex(,1150) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1151) ring r = 0,(x,y,z),ds;  // local ring
../singular_texi/./d2t_singular/homolog_lib.tex(,1152) ideal I=fetch(R,I);
../singular_texi/./d2t_singular/homolog_lib.tex(,1153) isReg(I,0);             // result independent of sorting of generators
../singular_texi/./d2t_singular/homolog_lib.tex(,1154) @expansion{} 1
../singular_texi/./d2t_singular/homolog_lib.tex(,1155) @c end example isReg d2t_singular/homolog_lib.doc:687
../singular_texi/./d2t_singular/homolog_lib.tex(,1156) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1157) @c ---end content isReg---
../singular_texi/./d2t_singular/homolog_lib.tex(,1158) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1159) @c ------------------- kernel -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1160) @node kernel, kohom, isReg, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1161) @subsubsection kernel
../singular_texi/./d2t_singular/homolog_lib.tex(,1162) @cindex kernel
../singular_texi/./d2t_singular/homolog_lib.tex(,1163) @c ---content kernel---
../singular_texi/./d2t_singular/homolog_lib.tex(,1164) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1165) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1166) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1167) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1168) kernel(A,M,N);
../singular_texi/./d2t_singular/homolog_lib.tex(,1169) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1170) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1171) Let M and N be submodules of R^m and R^n, presenting M'=R^m/M,
../singular_texi/./d2t_singular/homolog_lib.tex(,1172) N'=R^n/N (R=basering), and let A:R^m-->R^n be a matrix inducing a
../singular_texi/./d2t_singular/homolog_lib.tex(,1173) map A':M'-->N'. Then kernel(A,M,N); computes a presentation K of
../singular_texi/./d2t_singular/homolog_lib.tex(,1174) ker(A') as in the commutative diagram:
../singular_texi/./d2t_singular/homolog_lib.tex(,1175) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1176)           ker(A') --->  M' --A'--> N'
../singular_texi/./d2t_singular/homolog_lib.tex(,1177)              |^         |^         |^
../singular_texi/./d2t_singular/homolog_lib.tex(,1178)              |          |          |
../singular_texi/./d2t_singular/homolog_lib.tex(,1179)              R^r  ---> R^m --A--> R^n
../singular_texi/./d2t_singular/homolog_lib.tex(,1180)              |^         |^         |^
../singular_texi/./d2t_singular/homolog_lib.tex(,1181)              |K         |M         |N
../singular_texi/./d2t_singular/homolog_lib.tex(,1182)              |          |          |
../singular_texi/./d2t_singular/homolog_lib.tex(,1183)              R^s  ---> R^p -----> R^q
../singular_texi/./d2t_singular/homolog_lib.tex(,1184) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1185) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1186) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1187) module K, a presentation of ker(A':coker(M)->coker(N)).
../singular_texi/./d2t_singular/homolog_lib.tex(,1188) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1189) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1190) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1191) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1192) @c computed example kernel d2t_singular/homolog_lib.doc:734 
../singular_texi/./d2t_singular/homolog_lib.tex(,1193) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1194) ring r;
../singular_texi/./d2t_singular/homolog_lib.tex(,1195) module N=[2x,x],[0,y];
../singular_texi/./d2t_singular/homolog_lib.tex(,1196) module M=maxideal(1)*freemodule(2);
../singular_texi/./d2t_singular/homolog_lib.tex(,1197) matrix A[2][2]=2x,0,x,y,z2,y;
../singular_texi/./d2t_singular/homolog_lib.tex(,1198) module K=kernel(A,M,N);
../singular_texi/./d2t_singular/homolog_lib.tex(,1199) // dimension of kernel:  
../singular_texi/./d2t_singular/homolog_lib.tex(,1200) dim(std(K));
../singular_texi/./d2t_singular/homolog_lib.tex(,1201) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1202) // vector space dimension of kernel: 
../singular_texi/./d2t_singular/homolog_lib.tex(,1203) vdim(std(K));
../singular_texi/./d2t_singular/homolog_lib.tex(,1204) @expansion{} 2
../singular_texi/./d2t_singular/homolog_lib.tex(,1205) print(K);
../singular_texi/./d2t_singular/homolog_lib.tex(,1206) @expansion{} z,0,y,0,x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1207) @expansion{} 0,z,0,y,0,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,1208) @c end example kernel d2t_singular/homolog_lib.doc:734
../singular_texi/./d2t_singular/homolog_lib.tex(,1209) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1210) @c ---end content kernel---
../singular_texi/./d2t_singular/homolog_lib.tex(,1211) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1212) @c ------------------- kohom -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1213) @node kohom, kontrahom, kernel, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1214) @subsubsection kohom
../singular_texi/./d2t_singular/homolog_lib.tex(,1215) @cindex kohom
../singular_texi/./d2t_singular/homolog_lib.tex(,1216) @c ---content kohom---
../singular_texi/./d2t_singular/homolog_lib.tex(,1217) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1218) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1219) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1220) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1221) kohom(A,k); A=matrix, k=integer
../singular_texi/./d2t_singular/homolog_lib.tex(,1222) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1223) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1224) matrix Hom(R^k,A), i.e. let A be a matrix defining a map F1-->F2
../singular_texi/./d2t_singular/homolog_lib.tex(,1225) of free R-modules, then the matrix of Hom(R^k,F1)-->Hom(R^k,F2)
../singular_texi/./d2t_singular/homolog_lib.tex(,1226) is computed (R=basering).
../singular_texi/./d2t_singular/homolog_lib.tex(,1227) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1228) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1229) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1230) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1231) @c computed example kohom d2t_singular/homolog_lib.doc:769 
../singular_texi/./d2t_singular/homolog_lib.tex(,1232) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1233) ring r;
../singular_texi/./d2t_singular/homolog_lib.tex(,1234) matrix n[2][3]=x,y,5,z,77,33;
../singular_texi/./d2t_singular/homolog_lib.tex(,1235) print(kohom(n,3));
../singular_texi/./d2t_singular/homolog_lib.tex(,1236) @expansion{} x,0,0,y, 0, 0, 5, 0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1237) @expansion{} 0,x,0,0, y, 0, 0, 5, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1238) @expansion{} 0,0,x,0, 0, y, 0, 0, 5,
../singular_texi/./d2t_singular/homolog_lib.tex(,1239) @expansion{} z,0,0,77,0, 0, 33,0, 0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1240) @expansion{} 0,z,0,0, 77,0, 0, 33,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1241) @expansion{} 0,0,z,0, 0, 77,0, 0, 33
../singular_texi/./d2t_singular/homolog_lib.tex(,1242) @c end example kohom d2t_singular/homolog_lib.doc:769
../singular_texi/./d2t_singular/homolog_lib.tex(,1243) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1244) @c ---end content kohom---
../singular_texi/./d2t_singular/homolog_lib.tex(,1245) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1246) @c ------------------- kontrahom -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1247) @node kontrahom, KoszulHomology, kohom, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1248) @subsubsection kontrahom
../singular_texi/./d2t_singular/homolog_lib.tex(,1249) @cindex kontrahom
../singular_texi/./d2t_singular/homolog_lib.tex(,1250) @c ---content kontrahom---
../singular_texi/./d2t_singular/homolog_lib.tex(,1251) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1252) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1253) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1254) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1255) kontrahom(A,k); A=matrix, k=integer
../singular_texi/./d2t_singular/homolog_lib.tex(,1256) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1257) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1258) matrix Hom(A,R^k), i.e. let A be a matrix defining a map F1-->F2 of
../singular_texi/./d2t_singular/homolog_lib.tex(,1259) free R-modules, then the matrix of Hom(F2,R^k)-->Hom(F1,R^k) is
../singular_texi/./d2t_singular/homolog_lib.tex(,1260) computed (R=basering).
../singular_texi/./d2t_singular/homolog_lib.tex(,1261) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1262) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1263) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1264) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1265) @c computed example kontrahom d2t_singular/homolog_lib.doc:797 
../singular_texi/./d2t_singular/homolog_lib.tex(,1266) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1267) ring r;
../singular_texi/./d2t_singular/homolog_lib.tex(,1268) matrix n[2][3]=x,y,5,z,77,33;
../singular_texi/./d2t_singular/homolog_lib.tex(,1269) print(kontrahom(n,3));
../singular_texi/./d2t_singular/homolog_lib.tex(,1270) @expansion{} x,z, 0,0, 0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1271) @expansion{} y,77,0,0, 0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1272) @expansion{} 5,33,0,0, 0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1273) @expansion{} 0,0, x,z, 0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1274) @expansion{} 0,0, y,77,0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1275) @expansion{} 0,0, 5,33,0,0, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1276) @expansion{} 0,0, 0,0, x,z, 
../singular_texi/./d2t_singular/homolog_lib.tex(,1277) @expansion{} 0,0, 0,0, y,77,
../singular_texi/./d2t_singular/homolog_lib.tex(,1278) @expansion{} 0,0, 0,0, 5,33 
../singular_texi/./d2t_singular/homolog_lib.tex(,1279) @c end example kontrahom d2t_singular/homolog_lib.doc:797
../singular_texi/./d2t_singular/homolog_lib.tex(,1280) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1281) @c ---end content kontrahom---
../singular_texi/./d2t_singular/homolog_lib.tex(,1282) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1283) @c ------------------- KoszulHomology -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1284) @node KoszulHomology, tensorMod, kontrahom, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1285) @subsubsection KoszulHomology
../singular_texi/./d2t_singular/homolog_lib.tex(,1286) @cindex KoszulHomology
../singular_texi/./d2t_singular/homolog_lib.tex(,1287) @c ---content KoszulHomology---
../singular_texi/./d2t_singular/homolog_lib.tex(,1288) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1289) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1290) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1291) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1292) A presentation of the p-th Koszul homology module H_p(f_1,...,f_k;M'),
../singular_texi/./d2t_singular/homolog_lib.tex(,1293) where M'=coker(M) and f_1,...,f_k are the given (ordered list
../singular_texi/./d2t_singular/homolog_lib.tex(,1294) of generators of the) ideal I. The computed presentation is minimized
../singular_texi/./d2t_singular/homolog_lib.tex(,1295) via prune. In particular, if H_p(f_1,...,f_k;M')=0 then the
../singular_texi/./d2t_singular/homolog_lib.tex(,1296) return value is 0.
../singular_texi/./d2t_singular/homolog_lib.tex(,1297) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1298) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1299) module H, s.th. coker(H) = H_p(f_1,...,f_k;M').
../singular_texi/./d2t_singular/homolog_lib.tex(,1300) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1301) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1302) size of input ideal has to be <= 20.
../singular_texi/./d2t_singular/homolog_lib.tex(,1303) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1304) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1305) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1306) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1307) @c computed example KoszulHomology d2t_singular/homolog_lib.doc:830 
../singular_texi/./d2t_singular/homolog_lib.tex(,1308) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1309) ring R=0,x(1..3),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1310) ideal x=maxideal(1);
../singular_texi/./d2t_singular/homolog_lib.tex(,1311) module M=0;
../singular_texi/./d2t_singular/homolog_lib.tex(,1312) KoszulHomology(x,M,0);  // H_0(x,R), x=(x_1,x_2,x_3)
../singular_texi/./d2t_singular/homolog_lib.tex(,1313) @expansion{} _[1]=x(3)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1314) @expansion{} _[2]=x(2)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1315) @expansion{} _[3]=x(1)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1316) KoszulHomology(x,M,1);  // H_1(x,R), x=(x_1,x_2,x_3)
../singular_texi/./d2t_singular/homolog_lib.tex(,1317) @expansion{} _[1]=0
../singular_texi/./d2t_singular/homolog_lib.tex(,1318) qring S=std(x(1)*x(2));
../singular_texi/./d2t_singular/homolog_lib.tex(,1319) module M=0;
../singular_texi/./d2t_singular/homolog_lib.tex(,1320) ideal x=maxideal(1);
../singular_texi/./d2t_singular/homolog_lib.tex(,1321) KoszulHomology(x,M,1);
../singular_texi/./d2t_singular/homolog_lib.tex(,1322) @expansion{} _[1]=-x(3)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1323) @expansion{} _[2]=-x(2)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1324) @expansion{} _[3]=-x(1)*gen(1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1325) KoszulHomology(x,M,2);
../singular_texi/./d2t_singular/homolog_lib.tex(,1326) @expansion{} _[1]=0
../singular_texi/./d2t_singular/homolog_lib.tex(,1327) @c end example KoszulHomology d2t_singular/homolog_lib.doc:830
../singular_texi/./d2t_singular/homolog_lib.tex(,1328) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1329) @c ---end content KoszulHomology---
../singular_texi/./d2t_singular/homolog_lib.tex(,1330) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1331) @c ------------------- tensorMod -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1332) @node tensorMod, Tor, KoszulHomology, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1333) @subsubsection tensorMod
../singular_texi/./d2t_singular/homolog_lib.tex(,1334) @cindex tensorMod
../singular_texi/./d2t_singular/homolog_lib.tex(,1335) @c ---content tensorMod---
../singular_texi/./d2t_singular/homolog_lib.tex(,1336) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1337) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1338) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1339) @item @strong{Usage:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1340) tensorMod(M,N); M,N modules
../singular_texi/./d2t_singular/homolog_lib.tex(,1341) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1342) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1343) presentation matrix A of the tensor product T of the modules
../singular_texi/./d2t_singular/homolog_lib.tex(,1344) M'=coker(M), N'=coker(N): if matrix(M) defines a map M: R^r-->R^s and
../singular_texi/./d2t_singular/homolog_lib.tex(,1345) matrix(N) defines a map N: R^p-->R^q, then A defines a presentation
../singular_texi/./d2t_singular/homolog_lib.tex(,1346) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1347)          R^(sp+rq) --A-> R^(sq)  --> T --> 0 .
../singular_texi/./d2t_singular/homolog_lib.tex(,1348) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1349) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1350) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1351) matrix A satisfying coker(A) = tensorprod(coker(M),coker(N)) .
../singular_texi/./d2t_singular/homolog_lib.tex(,1352) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1353) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1354) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1355) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1356) @c computed example tensorMod d2t_singular/homolog_lib.doc:871 
../singular_texi/./d2t_singular/homolog_lib.tex(,1357) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1358) ring A=0,(x,y,z),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1359) matrix M[3][3]=1,2,3,4,5,6,7,8,9;
../singular_texi/./d2t_singular/homolog_lib.tex(,1360) matrix N[2][2]=x,y,0,z;
../singular_texi/./d2t_singular/homolog_lib.tex(,1361) print(M);
../singular_texi/./d2t_singular/homolog_lib.tex(,1362) @expansion{} 1,2,3,
../singular_texi/./d2t_singular/homolog_lib.tex(,1363) @expansion{} 4,5,6,
../singular_texi/./d2t_singular/homolog_lib.tex(,1364) @expansion{} 7,8,9 
../singular_texi/./d2t_singular/homolog_lib.tex(,1365) print(N);
../singular_texi/./d2t_singular/homolog_lib.tex(,1366) @expansion{} x,y,
../singular_texi/./d2t_singular/homolog_lib.tex(,1367) @expansion{} 0,z 
../singular_texi/./d2t_singular/homolog_lib.tex(,1368) print(tensorMod(M,N));
../singular_texi/./d2t_singular/homolog_lib.tex(,1369) @expansion{} x,y,0,0,0,0,1,0,2,0,3,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1370) @expansion{} 0,z,0,0,0,0,0,1,0,2,0,3,
../singular_texi/./d2t_singular/homolog_lib.tex(,1371) @expansion{} 0,0,x,y,0,0,4,0,5,0,6,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1372) @expansion{} 0,0,0,z,0,0,0,4,0,5,0,6,
../singular_texi/./d2t_singular/homolog_lib.tex(,1373) @expansion{} 0,0,0,0,x,y,7,0,8,0,9,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1374) @expansion{} 0,0,0,0,0,z,0,7,0,8,0,9 
../singular_texi/./d2t_singular/homolog_lib.tex(,1375) @c end example tensorMod d2t_singular/homolog_lib.doc:871
../singular_texi/./d2t_singular/homolog_lib.tex(,1376) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1377) @c ---end content tensorMod---
../singular_texi/./d2t_singular/homolog_lib.tex(,1378) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1379) @c ------------------- Tor -------------
../singular_texi/./d2t_singular/homolog_lib.tex(,1380) @node Tor,, tensorMod, homolog_lib
../singular_texi/./d2t_singular/homolog_lib.tex(,1381) @subsubsection Tor
../singular_texi/./d2t_singular/homolog_lib.tex(,1382) @cindex Tor
../singular_texi/./d2t_singular/homolog_lib.tex(,1383) @c ---content Tor---
../singular_texi/./d2t_singular/homolog_lib.tex(,1384) Procedure from library @code{homolog.lib} (@pxref{homolog_lib}).
../singular_texi/./d2t_singular/homolog_lib.tex(,1385) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1386) @table @asis
../singular_texi/./d2t_singular/homolog_lib.tex(,1387) @item @strong{Compute:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1388) a presentation of Tor_k(M',N'), for k=v[1],v[2],... , where
../singular_texi/./d2t_singular/homolog_lib.tex(,1389) M'=coker(M) and N'=coker(N): let
../singular_texi/./d2t_singular/homolog_lib.tex(,1390) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1391)        0 <-- M' <-- G0 <-M-- G1                
../singular_texi/./d2t_singular/homolog_lib.tex(,1392)        0 <-- N' <-- F0 <--N- F1 <-- F2 <--...  
../singular_texi/./d2t_singular/homolog_lib.tex(,1393) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1394) be a presentation of M', resp. a free resolution of N', and consider
../singular_texi/./d2t_singular/homolog_lib.tex(,1395) the commutative diagram
../singular_texi/./d2t_singular/homolog_lib.tex(,1396) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1397)           0                    0                    0
../singular_texi/./d2t_singular/homolog_lib.tex(,1398)           |^                   |^                   |^
../singular_texi/./d2t_singular/homolog_lib.tex(,1399)   Tensor(M',Fk+1) -Ak+1-> Tensor(M',Fk) -Ak-> Tensor(M',Fk-1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1400)           |^                   |^                   |^
../singular_texi/./d2t_singular/homolog_lib.tex(,1401)   Tensor(G0,Fk+1) -Ak+1-> Tensor(G0,Fk) -Ak-> Tensor(G0,Fk-1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1402)                                |^                   |^
../singular_texi/./d2t_singular/homolog_lib.tex(,1403)                                |C                   |B
../singular_texi/./d2t_singular/homolog_lib.tex(,1404)                           Tensor(G1,Fk) ----> Tensor(G1,Fk-1)
../singular_texi/./d2t_singular/homolog_lib.tex(,1405) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1406)        (Ak,Ak+1 induced by N and B,C induced by M).
../singular_texi/./d2t_singular/homolog_lib.tex(,1407) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1408) Let K=modulo(Ak,B), J=module(C)+module(Ak+1) and Tor=modulo(K,J),
../singular_texi/./d2t_singular/homolog_lib.tex(,1409) then we have exact sequences
../singular_texi/./d2t_singular/homolog_lib.tex(,1410) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1411)     R^p  --K-> Tensor(G0,Fk) --Ak-> Tensor(G0,Fk-1)/im(B),
../singular_texi/./d2t_singular/homolog_lib.tex(,1412) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1413)     R^q -Tor-> R^p --K-> Tensor(G0,Fk)/(im(C)+im(Ak+1)). 
../singular_texi/./d2t_singular/homolog_lib.tex(,1414) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1415) Hence, Tor presents Tor_k(M',N').
../singular_texi/./d2t_singular/homolog_lib.tex(,1416) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1417) @item @strong{Return:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1418) - if v is of type int: module Tor, a presentation of Tor_k(M',N');@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1419) - if v is of type intvec: a list of Tor_k(M',N') (k=v[1],v[2],...);@*
../singular_texi/./d2t_singular/homolog_lib.tex(,1420) - in case of a third argument of any type: list l with
../singular_texi/./d2t_singular/homolog_lib.tex(,1421) @format
../singular_texi/./d2t_singular/homolog_lib.tex(,1422)      l[1] = module Tor/list of Tor_k(M',N'),
../singular_texi/./d2t_singular/homolog_lib.tex(,1423)      l[2] = SB of Tor/list of SB of Tor_k(M',N'),
../singular_texi/./d2t_singular/homolog_lib.tex(,1424)      l[3] = matrix/list of matrices, each representing a kbase of Tor_k(M',N')
../singular_texi/./d2t_singular/homolog_lib.tex(,1425)                 (if finite dimensional), or 0.
../singular_texi/./d2t_singular/homolog_lib.tex(,1426) @end format
../singular_texi/./d2t_singular/homolog_lib.tex(,1427) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1428) @item @strong{Display:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1429) printlevel >=0: (affine) dimension of Tor_k for each k (default).
../singular_texi/./d2t_singular/homolog_lib.tex(,1430) @* printlevel >=1: matrices Ak, Ak+1 and kbase of Tor_k in Tensor(G0,Fk)
../singular_texi/./d2t_singular/homolog_lib.tex(,1431) (if finite dimensional).
../singular_texi/./d2t_singular/homolog_lib.tex(,1432) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1433) @item @strong{Note:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1434) In order to compute Tor_k(M,N) use the command Tor(k,syz(M),syz(N));
../singular_texi/./d2t_singular/homolog_lib.tex(,1435) or: list P=mres(M,2); list Q=mres(N,2); Tor(k,P[2],Q[2]);
../singular_texi/./d2t_singular/homolog_lib.tex(,1436) 
../singular_texi/./d2t_singular/homolog_lib.tex(,1437) @end table
../singular_texi/./d2t_singular/homolog_lib.tex(,1438) @strong{Example:}
../singular_texi/./d2t_singular/homolog_lib.tex(,1439) @smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1440) @c computed example Tor d2t_singular/homolog_lib.doc:944 
../singular_texi/./d2t_singular/homolog_lib.tex(,1441) LIB "homolog.lib";
../singular_texi/./d2t_singular/homolog_lib.tex(,1442) int p      = printlevel;
../singular_texi/./d2t_singular/homolog_lib.tex(,1443) printlevel = 1;
../singular_texi/./d2t_singular/homolog_lib.tex(,1444) ring r     = 0,(x,y),dp;
../singular_texi/./d2t_singular/homolog_lib.tex(,1445) ideal i    = x2,y;
../singular_texi/./d2t_singular/homolog_lib.tex(,1446) ideal j    = x;
../singular_texi/./d2t_singular/homolog_lib.tex(,1447) list E     = Tor(0..2,i,j);    // Tor_k(r/i,r/j) for k=0,1,2 over r
../singular_texi/./d2t_singular/homolog_lib.tex(,1448) @expansion{} // dimension of Tor_0:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,1449) @expansion{} // vdim of Tor_0:       1
../singular_texi/./d2t_singular/homolog_lib.tex(,1450) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1451) @expansion{} // Computing Tor_1 (help Tor; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,1452) @expansion{} // Let 0 <- coker(M) <- G0 <-M- G1 be the present. of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,1453) @expansion{} // and 0 <- coker(N) <- F0 <-N- F1 <- F2 <- ... a resolution of
../singular_texi/./d2t_singular/homolog_lib.tex(,1454) @expansion{} // coker(N), then Tensor(G0,F1)-->Tensor(G0,F0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1455) @expansion{} x
../singular_texi/./d2t_singular/homolog_lib.tex(,1456) @expansion{} // and Tensor(G0,F2) + Tensor(G1,F1)-->Tensor(G0,F1) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1457) @expansion{} 0,x2,y
../singular_texi/./d2t_singular/homolog_lib.tex(,1458) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1459) @expansion{} // dimension of Tor_1:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,1460) @expansion{} // vdim of Tor_1:       1
../singular_texi/./d2t_singular/homolog_lib.tex(,1461) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1462) @expansion{} // Computing Tor_2 (help Tor; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,1463) @expansion{} // Let 0 <- coker(M) <- G0 <-M- G1 be the present. of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,1464) @expansion{} // and 0 <- coker(N) <- F0 <-N- F1 <- F2 <- ... a resolution of
../singular_texi/./d2t_singular/homolog_lib.tex(,1465) @expansion{} // coker(N), then Tensor(G0,F2)-->Tensor(G0,F1) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1466) @expansion{} 0
../singular_texi/./d2t_singular/homolog_lib.tex(,1467) @expansion{} // and Tensor(G0,F3) + Tensor(G1,F2)-->Tensor(G0,F2) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1468) @expansion{} 1,x2,y
../singular_texi/./d2t_singular/homolog_lib.tex(,1469) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1470) @expansion{} // dimension of Tor_2:  -1
../singular_texi/./d2t_singular/homolog_lib.tex(,1471) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1472) qring R    = std(i);
../singular_texi/./d2t_singular/homolog_lib.tex(,1473) ideal j    = fetch(r,j);
../singular_texi/./d2t_singular/homolog_lib.tex(,1474) module M   = [x,0],[0,x];
../singular_texi/./d2t_singular/homolog_lib.tex(,1475) printlevel = 2;
../singular_texi/./d2t_singular/homolog_lib.tex(,1476) module E1  = Tor(1,M,j);       // Tor_1(R^2/M,R/j) over R=r/i
../singular_texi/./d2t_singular/homolog_lib.tex(,1477) @expansion{} // Computing Tor_1 (help Tor; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,1478) @expansion{} // Let 0 <- coker(M) <- G0 <-M- G1 be the present. of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,1479) @expansion{} // and 0 <- coker(N) <- F0 <-N- F1 <- F2 <- ... a resolution of
../singular_texi/./d2t_singular/homolog_lib.tex(,1480) @expansion{} // coker(N), then Tensor(G0,F1)-->Tensor(G0,F0) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1481) @expansion{} x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1482) @expansion{} 0,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,1483) @expansion{} // and Tensor(G0,F2) + Tensor(G1,F1)-->Tensor(G0,F1) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1484) @expansion{} x,0,x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1485) @expansion{} 0,x,0,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,1486) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1487) @expansion{} // dimension of Tor_1:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,1488) @expansion{} // vdim of Tor_1:       2
../singular_texi/./d2t_singular/homolog_lib.tex(,1489) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1490) list l     = Tor(3,M,M,1);     // Tor_3(R^2/M,R^2/M) over R=r/i
../singular_texi/./d2t_singular/homolog_lib.tex(,1491) @expansion{} // Computing Tor_3 (help Tor; gives an explanation):
../singular_texi/./d2t_singular/homolog_lib.tex(,1492) @expansion{} // Let 0 <- coker(M) <- G0 <-M- G1 be the present. of coker(M),
../singular_texi/./d2t_singular/homolog_lib.tex(,1493) @expansion{} // and 0 <- coker(N) <- F0 <-N- F1 <- F2 <- ... a resolution of
../singular_texi/./d2t_singular/homolog_lib.tex(,1494) @expansion{} // coker(N), then Tensor(G0,F3)-->Tensor(G0,F2) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1495) @expansion{} x,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1496) @expansion{} 0,x,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1497) @expansion{} 0,0,x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1498) @expansion{} 0,0,0,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,1499) @expansion{} // and Tensor(G0,F4) + Tensor(G1,F3)-->Tensor(G0,F3) is given by:
../singular_texi/./d2t_singular/homolog_lib.tex(,1500) @expansion{} x,0,0,0,x,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1501) @expansion{} 0,x,0,0,0,x,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1502) @expansion{} 0,0,x,0,0,0,x,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1503) @expansion{} 0,0,0,x,0,0,0,x 
../singular_texi/./d2t_singular/homolog_lib.tex(,1504) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1505) @expansion{} // dimension of Tor_3:  0
../singular_texi/./d2t_singular/homolog_lib.tex(,1506) @expansion{} // vdim of Tor_3:       4
../singular_texi/./d2t_singular/homolog_lib.tex(,1507) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1508) @expansion{} // columns of matrix are kbase of Tor_3 in Tensor(G0,F3)
../singular_texi/./d2t_singular/homolog_lib.tex(,1509) @expansion{} 1,0,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1510) @expansion{} 0,1,0,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1511) @expansion{} 0,0,1,0,
../singular_texi/./d2t_singular/homolog_lib.tex(,1512) @expansion{} 0,0,0,1 
../singular_texi/./d2t_singular/homolog_lib.tex(,1513) @expansion{} 
../singular_texi/./d2t_singular/homolog_lib.tex(,1514) printlevel = p;
../singular_texi/./d2t_singular/homolog_lib.tex(,1515) @c end example Tor d2t_singular/homolog_lib.doc:944
../singular_texi/./d2t_singular/homolog_lib.tex(,1516) @end smallexample
../singular_texi/./d2t_singular/homolog_lib.tex(,1517) @c ---end content Tor---
../singular_texi/singular.tex(,386) @c ----------------------------------------------------------
../singular_texi/singular.tex(,387) @node mprimdec_lib, mregular_lib, homolog_lib, Commutative algebra
../singular_texi/singular.tex(,388) @subsection mprimdec_lib
../singular_texi/singular.tex(,389) @c include of docu for mprimdec.lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/mprimdec_lib.doc
../singular_texi/./d2t_singular/mprimdec_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/mprimdec_lib.doc INSTEAD
../singular_texi/./d2t_singular/mprimdec_lib.tex(,4) @c library version: (1.1.2.3,2002/03/19)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,5) @c library file: ../Singular/LIB/mprimdec.lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,6) @cindex mprimdec.lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,7) @cindex mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,10) mprimdec.lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,12)    procedures for primary decomposition of modules
../singular_texi/./d2t_singular/mprimdec_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,14) Alexander Dreyer, dreyer@@mathematik.uni-kl.de; adreyer@@web.de
../singular_texi/./d2t_singular/mprimdec_lib.tex(,15) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,16) @item @strong{Remark:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,17) These procedures are implemented to be used in characteristic 0.
../singular_texi/./d2t_singular/mprimdec_lib.tex(,18) @*They also work in positive characteristic >> 0.
../singular_texi/./d2t_singular/mprimdec_lib.tex(,19) @*In small characteristic and for algebraic extensions, the
../singular_texi/./d2t_singular/mprimdec_lib.tex(,20) procedures via Gianni, Trager, Zacharias may not terminate.
../singular_texi/./d2t_singular/mprimdec_lib.tex(,21) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,22) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,23) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,24) @strong{Procedures:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,25) @menu
../singular_texi/./d2t_singular/mprimdec_lib.tex(,26) * separator:: computes a list of separators of prime ideals
../singular_texi/./d2t_singular/mprimdec_lib.tex(,27) * PrimdecA:: (not necessarily minimal) primary decomposition via Shimoyama/Yokoyama (suggested by Graebe)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,28) * PrimdecB:: (not necessarily minimal) primary decomposition for pseudo-primary ideals
../singular_texi/./d2t_singular/mprimdec_lib.tex(,29) * modDec:: minimal primary decomposition via Shimoyama/Yokoyama (suggested by Graebe)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,30) * zeroMod:: minimal zero-dimensional primary decomposition via Gianni, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,31) * GTZmod:: minimal primary decomposition via Gianni, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,32) * dec1var:: primary decomposition for one variable
../singular_texi/./d2t_singular/mprimdec_lib.tex(,33) * annil:: the annihilator of M/N in the basering
../singular_texi/./d2t_singular/mprimdec_lib.tex(,34) * splitting:: splitting to simpler modules
../singular_texi/./d2t_singular/mprimdec_lib.tex(,35) * primTest:: tests whether i is prime or homogeneous
../singular_texi/./d2t_singular/mprimdec_lib.tex(,36) * preComp:: enhanced Version of splitting
../singular_texi/./d2t_singular/mprimdec_lib.tex(,37) * indSet:: lists with varstrings of(in)dependent variables
../singular_texi/./d2t_singular/mprimdec_lib.tex(,38) * GTZopt:: a faster version of GTZmod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,39) * zeroOpt:: a faster version of zeroMod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,40) * clrSBmod:: extracts an minimal SB from a SB
../singular_texi/./d2t_singular/mprimdec_lib.tex(,41) * minSatMod:: minimal saturation of N w.r.t. I
../singular_texi/./d2t_singular/mprimdec_lib.tex(,42) * specialModulesEqual:: checks for equality of standard bases of modules if N1 is contained in N2 or vice versa
../singular_texi/./d2t_singular/mprimdec_lib.tex(,43) * stdModulesEqual:: checks for equality of standard bases
../singular_texi/./d2t_singular/mprimdec_lib.tex(,44) * modulesEqual:: checks for equality of modules
../singular_texi/./d2t_singular/mprimdec_lib.tex(,45) * getData:: extracts oldData and computes the remaining data
../singular_texi/./d2t_singular/mprimdec_lib.tex(,46) @end menu
../singular_texi/./d2t_singular/mprimdec_lib.tex(,47) @c ---end content LibInfo---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,48) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,49) @c ------------------- separator -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,50) @node separator, PrimdecA,, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,51) @subsubsection separator
../singular_texi/./d2t_singular/mprimdec_lib.tex(,52) @cindex separator
../singular_texi/./d2t_singular/mprimdec_lib.tex(,53) @c ---content separator---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,54) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,55) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,56) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,57) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,58) separator(l); list l of prime ideals
../singular_texi/./d2t_singular/mprimdec_lib.tex(,59) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,60) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,61) list sepList;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,62) @*a list of separators of the prime ideals in l,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,63) @*i.e. polynomials p_ij, s.th. p_ij is in l[j],
../singular_texi/./d2t_singular/mprimdec_lib.tex(,64) @*for all l[j] not contained in l[i]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,65) @*but p_ij is not in l[i]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,66) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,67) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,68) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,69) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,70) @c computed example separator d2t_singular/mprimdec_lib.doc:68 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,71) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,72) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,73) ideal i=(x2y,xz2,y2z,z3);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,74) list l=minAssGTZ(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,75) list sepL=separator(l);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,76) sepL;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,77) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,78) @expansion{}    x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,79) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,80) @expansion{}    y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,81) @c end example separator d2t_singular/mprimdec_lib.doc:68
../singular_texi/./d2t_singular/mprimdec_lib.tex(,82) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,83) @c ---end content separator---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,84) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,85) @c ------------------- PrimdecA -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,86) @node PrimdecA, PrimdecB, separator, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,87) @subsubsection PrimdecA
../singular_texi/./d2t_singular/mprimdec_lib.tex(,88) @cindex PrimdecA
../singular_texi/./d2t_singular/mprimdec_lib.tex(,89) @c ---content PrimdecA---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,90) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,91) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,92) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,93) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,94) PrimdecA (N[, i]); module N, int i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,95) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,96) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,97) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,98) @*a (not necessarily minimal) primary decomposition of N
../singular_texi/./d2t_singular/mprimdec_lib.tex(,99) computed by a generalized version of
../singular_texi/./d2t_singular/mprimdec_lib.tex(,100) @*the algorithm of Schimoyama/Yokoyama,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,101) @*if i=1 is given, the factorizing Groebner is used
../singular_texi/./d2t_singular/mprimdec_lib.tex(,102) @*to compute the isolated primes.
../singular_texi/./d2t_singular/mprimdec_lib.tex(,103) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,104) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,105) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,106) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,107) @c computed example PrimdecA d2t_singular/mprimdec_lib.doc:101 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,108) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,109) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,110) module N=x*gen(1)+ y*gen(2),
../singular_texi/./d2t_singular/mprimdec_lib.tex(,111) x*gen(1)-x2*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,112) list l=PrimdecA(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,113) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,114) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,115) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,116) @expansion{}       _[1]=x*gen(1)+y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,117) @expansion{}       _[2]=x*gen(2)-gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,118) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,119) @expansion{}       _[1]=x2+y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,120) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,121) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,122) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,123) @expansion{}       _[2]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,124) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,125) @expansion{}       _[1]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,126) @expansion{} [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,127) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,128) @expansion{}       _[1]=y*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,129) @expansion{}       _[2]=y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,130) @expansion{}       _[3]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,131) @expansion{}       _[4]=x*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,132) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,133) @expansion{}       _[1]=y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,134) @expansion{}       _[2]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,135) @c end example PrimdecA d2t_singular/mprimdec_lib.doc:101
../singular_texi/./d2t_singular/mprimdec_lib.tex(,136) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,137) @c ---end content PrimdecA---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,138) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,139) @c ------------------- PrimdecB -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,140) @node PrimdecB, modDec, PrimdecA, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,141) @subsubsection PrimdecB
../singular_texi/./d2t_singular/mprimdec_lib.tex(,142) @cindex PrimdecB
../singular_texi/./d2t_singular/mprimdec_lib.tex(,143) @c ---content PrimdecB---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,144) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,145) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,146) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,147) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,148) PrimdecB (N, p); pseudo-primary module N, isolated prime ideal p
../singular_texi/./d2t_singular/mprimdec_lib.tex(,149) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,150) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,151) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,152) @*a (not necessarily minimal) primary decomposition of N
../singular_texi/./d2t_singular/mprimdec_lib.tex(,153) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,154) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,155) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,156) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,157) @c computed example PrimdecB d2t_singular/mprimdec_lib.doc:130 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,158) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,159) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,160) module N=y*gen(1),y2*gen(2),yz*gen(2),yx*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,161) ideal p=y;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,162) list l=PrimdecB(N,p);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,163) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,164) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,165) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,166) @expansion{}       _[1]=y*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,167) @expansion{}       _[2]=y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,168) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,169) @expansion{}       _[1]=y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,170) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,171) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,172) @expansion{}       _[1]=y*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,173) @expansion{}       _[2]=y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,174) @expansion{}       _[3]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,175) @expansion{}       _[4]=x*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,176) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,177) @expansion{}       _[1]=y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,178) @expansion{}       _[2]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,179) @expansion{} [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,180) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,181) @expansion{}       _[1]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,182) @expansion{}       _[2]=z*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,183) @expansion{}       _[3]=y*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,184) @expansion{}       _[4]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,185) @expansion{}       _[5]=x*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,186) @expansion{}       _[6]=y2*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,187) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,188) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,189) @expansion{}       _[2]=y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,190) @expansion{}       _[3]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,191) @c end example PrimdecB d2t_singular/mprimdec_lib.doc:130
../singular_texi/./d2t_singular/mprimdec_lib.tex(,192) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,193) @c ---end content PrimdecB---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,194) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,195) @c ------------------- modDec -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,196) @node modDec, zeroMod, PrimdecB, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,197) @subsubsection modDec
../singular_texi/./d2t_singular/mprimdec_lib.tex(,198) @cindex modDec
../singular_texi/./d2t_singular/mprimdec_lib.tex(,199) @c ---content modDec---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,200) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,201) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,202) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,203) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,204) modDec (N[, i]); module N, int i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,205) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,206) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,207) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,208) @*a minimal primary decomposition of N
../singular_texi/./d2t_singular/mprimdec_lib.tex(,209) @*computed by an generalized version of
../singular_texi/./d2t_singular/mprimdec_lib.tex(,210) @*the algorithm of Schimoyama/Yokoyama,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,211) @*if i=1 is given, the factorizing Groebner is used
../singular_texi/./d2t_singular/mprimdec_lib.tex(,212) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,213) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,214) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,215) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,216) @c computed example modDec d2t_singular/mprimdec_lib.doc:162 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,217) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,218) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,219) module N=x*gen(1)+ y*gen(2),
../singular_texi/./d2t_singular/mprimdec_lib.tex(,220) x*gen(1)-x2*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,221) list l=modDec(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,222) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,223) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,224) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,225) @expansion{}       _[1]=x*gen(1)+y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,226) @expansion{}       _[2]=x*gen(2)-gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,227) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,228) @expansion{}       _[1]=x2+y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,229) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,230) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,231) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,232) @expansion{}       _[2]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,233) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,234) @expansion{}       _[1]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,235) @c end example modDec d2t_singular/mprimdec_lib.doc:162
../singular_texi/./d2t_singular/mprimdec_lib.tex(,236) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,237) @c ---end content modDec---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,238) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,239) @c ------------------- zeroMod -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,240) @node zeroMod, GTZmod, modDec, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,241) @subsubsection zeroMod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,242) @cindex zeroMod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,243) @c ---content zeroMod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,244) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,245) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,246) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,247) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,248) zeroMod (N[, check]); zero-dimensional module N[, module check]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,249) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,250) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,251) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,252) @*the minimal primary decomposition of a zero-dimensional module N,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,253) computed by a generalized version of the algorithm
../singular_texi/./d2t_singular/mprimdec_lib.tex(,254) @*of Gianni, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,255) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,256) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,257) if the parameter check is given, only components
../singular_texi/./d2t_singular/mprimdec_lib.tex(,258) @*not containing check are computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,259) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,260) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,261) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,262) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,263) @c computed example zeroMod d2t_singular/mprimdec_lib.doc:197 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,264) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,265) ring r=0,z,dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,266) module N=z*gen(1),(z-1)*gen(2),(z+1)*gen(3);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,267) list l=zeroMod(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,268) @expansion{} 2
../singular_texi/./d2t_singular/mprimdec_lib.tex(,269) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,270) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,271) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,272) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,273) @expansion{}       _[2]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,274) @expansion{}       _[3]=z*gen(2)-gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,275) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,276) @expansion{}       _[1]=z-1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,277) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,278) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,279) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,280) @expansion{}       _[2]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,281) @expansion{}       _[3]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,282) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,283) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,284) @expansion{} [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,285) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,286) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,287) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,288) @expansion{}       _[3]=z*gen(3)+gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,289) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,290) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,291) @c end example zeroMod d2t_singular/mprimdec_lib.doc:197
../singular_texi/./d2t_singular/mprimdec_lib.tex(,292) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,293) @c ---end content zeroMod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,294) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,295) @c ------------------- GTZmod -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,296) @node GTZmod, dec1var, zeroMod, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,297) @subsubsection GTZmod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,298) @cindex GTZmod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,299) @c ---content GTZmod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,300) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,301) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,302) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,303) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,304) GTZmod (N[, check]); module N[, module check]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,305) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,306) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,307) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,308) @*the minimal primary decomposition of the module N,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,309) @*computed by a generalized version of the algorithm
../singular_texi/./d2t_singular/mprimdec_lib.tex(,310) @*of Gianny, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,311) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,312) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,313) if the parameter check is given, only components
../singular_texi/./d2t_singular/mprimdec_lib.tex(,314) @*not containing check are computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,315) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,316) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,317) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,318) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,319) @c computed example GTZmod d2t_singular/mprimdec_lib.doc:231 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,320) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,321) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,322) module N=x*gen(1)+ y*gen(2),
../singular_texi/./d2t_singular/mprimdec_lib.tex(,323) x*gen(1)-x2*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,324) list l=GTZmod(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,325) @expansion{} 2
../singular_texi/./d2t_singular/mprimdec_lib.tex(,326) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,327) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,328) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,329) @expansion{}       _[1]=x*gen(1)+y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,330) @expansion{}       _[2]=x*gen(2)-gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,331) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,332) @expansion{}       _[1]=x2+y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,333) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,334) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,335) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,336) @expansion{}       _[2]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,337) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,338) @expansion{}       _[1]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,339) @c end example GTZmod d2t_singular/mprimdec_lib.doc:231
../singular_texi/./d2t_singular/mprimdec_lib.tex(,340) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,341) @c ---end content GTZmod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,342) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,343) @c ------------------- dec1var -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,344) @node dec1var, annil, GTZmod, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,345) @subsubsection dec1var
../singular_texi/./d2t_singular/mprimdec_lib.tex(,346) @cindex dec1var
../singular_texi/./d2t_singular/mprimdec_lib.tex(,347) @c ---content dec1var---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,348) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,349) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,350) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,351) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,352) dec1var (N); zero-dimensional module N[, module check]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,353) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,354) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,355) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,356) @*the minimal primary decomposition of a submodule N of R^s
../singular_texi/./d2t_singular/mprimdec_lib.tex(,357) if nvars(R)=1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,358) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,359) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,360) if the parameter check is given, only components
../singular_texi/./d2t_singular/mprimdec_lib.tex(,361) @*not containing check are computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,362) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,363) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,364) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,365) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,366) @c computed example dec1var d2t_singular/mprimdec_lib.doc:265 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,367) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,368) ring r=0,z,dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,369) module N=z*gen(1),(z-1)*gen(2),(z+1)*gen(3);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,370) list l=dec1var(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,371) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,372) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,373) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,374) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,375) @expansion{}       _[2]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,376) @expansion{}       _[3]=z*gen(2)-gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,377) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,378) @expansion{}       _[1]=z-1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,379) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,380) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,381) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,382) @expansion{}       _[2]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,383) @expansion{}       _[3]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,384) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,385) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,386) @expansion{} [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,387) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,388) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,389) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,390) @expansion{}       _[3]=z*gen(3)+gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,391) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,392) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,393) @c end example dec1var d2t_singular/mprimdec_lib.doc:265
../singular_texi/./d2t_singular/mprimdec_lib.tex(,394) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,395) @c ---end content dec1var---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,396) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,397) @c ------------------- annil -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,398) @node annil, splitting, dec1var, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,399) @subsubsection annil
../singular_texi/./d2t_singular/mprimdec_lib.tex(,400) @cindex annil
../singular_texi/./d2t_singular/mprimdec_lib.tex(,401) @c ---content annil---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,402) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,403) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,404) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,405) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,406) annil(N); module N
../singular_texi/./d2t_singular/mprimdec_lib.tex(,407) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,408) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,409) ideal ann=std(quotient(N,freemodule(nrows(N))));
../singular_texi/./d2t_singular/mprimdec_lib.tex(,410) @*the annihilator of M/N in the basering
../singular_texi/./d2t_singular/mprimdec_lib.tex(,411) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,412) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,413) ann is a std basis in the basering
../singular_texi/./d2t_singular/mprimdec_lib.tex(,414) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,415) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,416) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,417) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,418) @c computed example annil d2t_singular/mprimdec_lib.doc:296 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,419) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,420) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,421) module N=x*gen(1), y*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,422) ideal ann=annil(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,423) ann;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,424) @expansion{} ann[1]=xy
../singular_texi/./d2t_singular/mprimdec_lib.tex(,425) @c end example annil d2t_singular/mprimdec_lib.doc:296
../singular_texi/./d2t_singular/mprimdec_lib.tex(,426) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,427) @c ---end content annil---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,428) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,429) @c ------------------- splitting -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,430) @node splitting, primTest, annil, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,431) @subsubsection splitting
../singular_texi/./d2t_singular/mprimdec_lib.tex(,432) @cindex splitting
../singular_texi/./d2t_singular/mprimdec_lib.tex(,433) @c ---content splitting---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,434) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,435) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,436) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,437) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,438) splitting(N[,check[, ann]]); module N, module check, ideal ann
../singular_texi/./d2t_singular/mprimdec_lib.tex(,439) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,440) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,441) (l, check) list l, module check
../singular_texi/./d2t_singular/mprimdec_lib.tex(,442) @*the elements of l consists of a triple with
../singular_texi/./d2t_singular/mprimdec_lib.tex(,443) @*[1] of type module [2] and [3] of type ideal
../singular_texi/./d2t_singular/mprimdec_lib.tex(,444) @*s.th. the intersection of the modules is equal to the
../singular_texi/./d2t_singular/mprimdec_lib.tex(,445) zero-dimensional module N, furthermore l[j][3]=annil(l[j][1])
../singular_texi/./d2t_singular/mprimdec_lib.tex(,446) if l[j][2]!=0 then the module l[j][1] is primary
../singular_texi/./d2t_singular/mprimdec_lib.tex(,447) @*with associated prime l[j][2],
../singular_texi/./d2t_singular/mprimdec_lib.tex(,448) @*and check=intersect(check, l[j][1]) is computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,449) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,450) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,451) if the parameter check is given, only components not containing
../singular_texi/./d2t_singular/mprimdec_lib.tex(,452) check are computed; if ann is given, ann is used instead of annil(N)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,453) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,454) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,455) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,456) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,457) @c computed example splitting d2t_singular/mprimdec_lib.doc:334 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,458) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,459) ring r=0,z,lp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,460) module N=z*gen(1), (z+1)*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,461) N=std(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,462) list l; module check;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,463) (l, check)=splitting(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,464) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,465) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,466) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,467) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,468) @expansion{}       _[2]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,469) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,470) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,471) @expansion{}    [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,472) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,473) @expansion{}    [4]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,474) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,475) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,476) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,477) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,478) @expansion{}       _[2]=z*gen(2)+gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,479) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,480) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,481) @expansion{}    [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,482) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,483) @expansion{}    [4]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,484) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,485) check;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,486) @expansion{} check[1]=z*gen(2)+gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,487) @expansion{} check[2]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,488) @c end example splitting d2t_singular/mprimdec_lib.doc:334
../singular_texi/./d2t_singular/mprimdec_lib.tex(,489) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,490) @c ---end content splitting---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,491) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,492) @c ------------------- primTest -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,493) @node primTest, preComp, splitting, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,494) @subsubsection primTest
../singular_texi/./d2t_singular/mprimdec_lib.tex(,495) @cindex primTest
../singular_texi/./d2t_singular/mprimdec_lib.tex(,496) @c ---content primTest---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,497) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,498) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,499) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,500) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,501) primTest(i[, p]); a zero-dimensional ideal i, irreducible poly p in i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,502) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,503) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,504) if i neither is prime nor is homogeneous then ideal(0) is returned,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,505) else radical(i)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,506) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,507) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,508) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,509) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,510) @c computed example primTest d2t_singular/mprimdec_lib.doc:365 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,511) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,512) ring r=0,(x,y,z),lp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,513) ideal i=x+1,y-1,z;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,514) i=std(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,515) ideal primId=primTest(i,z);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,516) primId;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,517) @expansion{} primId[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,518) @expansion{} primId[2]=y-1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,519) @expansion{} primId[3]=x+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,520) i=x,z2,yz,y2;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,521) i=std(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,522) primId=primTest(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,523) primId;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,524) @expansion{} primId[1]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,525) @expansion{} primId[2]=y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,526) @expansion{} primId[3]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,527) @c end example primTest d2t_singular/mprimdec_lib.doc:365
../singular_texi/./d2t_singular/mprimdec_lib.tex(,528) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,529) @c ---end content primTest---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,530) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,531) @c ------------------- preComp -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,532) @node preComp, indSet, primTest, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,533) @subsubsection preComp
../singular_texi/./d2t_singular/mprimdec_lib.tex(,534) @cindex preComp
../singular_texi/./d2t_singular/mprimdec_lib.tex(,535) @c ---content preComp---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,536) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,537) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,538) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,539) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,540) preComp(N,check[, ann]); module N, module check, ideal ann
../singular_texi/./d2t_singular/mprimdec_lib.tex(,541) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,542) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,543) (l, check) list l, module check
../singular_texi/./d2t_singular/mprimdec_lib.tex(,544) @*the elements of l consists of a triple with
../singular_texi/./d2t_singular/mprimdec_lib.tex(,545) @*[1] of type module [2] and [3] of type ideal
../singular_texi/./d2t_singular/mprimdec_lib.tex(,546) @*s.th. the intersection of the modules is equal to the
../singular_texi/./d2t_singular/mprimdec_lib.tex(,547) zero-dimensional module N, furthermore l[j][3]=annil(l[j][1])
../singular_texi/./d2t_singular/mprimdec_lib.tex(,548) if l[j][2]!=0 then the module l[j][1] is primary
../singular_texi/./d2t_singular/mprimdec_lib.tex(,549) @*with associated prime l[j][2],
../singular_texi/./d2t_singular/mprimdec_lib.tex(,550) @*and check=intersect(check, l[j][1]) is computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,551) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,552) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,553) only components not containing check are computed;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,554) @*if ann is given, ann is used instead of annil(N)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,555) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,556) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,557) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,558) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,559) @c computed example preComp d2t_singular/mprimdec_lib.doc:408 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,560) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,561) ring r=0,z,lp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,562) module N=z*gen(1), (z+1)*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,563) N=std(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,564) list l; module check;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,565) (l, check)=preComp(N,freemodule(2));
../singular_texi/./d2t_singular/mprimdec_lib.tex(,566) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,567) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,568) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,569) @expansion{}       _[1]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,570) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,571) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,572) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,573) @expansion{}    [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,574) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,575) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,576) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,577) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,578) @expansion{}       _[2]=z*gen(2)+gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,579) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,580) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,581) @expansion{}    [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,582) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,583) check;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,584) @expansion{} check[1]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,585) @expansion{} check[2]=z*gen(2)+gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,586) @c end example preComp d2t_singular/mprimdec_lib.doc:408
../singular_texi/./d2t_singular/mprimdec_lib.tex(,587) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,588) @c ---end content preComp---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,589) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,590) @c ------------------- indSet -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,591) @node indSet, GTZopt, preComp, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,592) @subsubsection indSet
../singular_texi/./d2t_singular/mprimdec_lib.tex(,593) @cindex indSet
../singular_texi/./d2t_singular/mprimdec_lib.tex(,594) @c ---content indSet---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,595) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,596) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,597) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,598) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,599) indSet(i); i ideal
../singular_texi/./d2t_singular/mprimdec_lib.tex(,600) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,601) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,602) list with two entrees
../singular_texi/./d2t_singular/mprimdec_lib.tex(,603) @*both are lists of new varstrings with the dependent variables
../singular_texi/./d2t_singular/mprimdec_lib.tex(,604) the independent set, the ordstring with the corresp. block ordering,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,605) and the integer where the independent set starts in the varstring
../singular_texi/./d2t_singular/mprimdec_lib.tex(,606) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,607) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,608) the first entry gives the strings for all maximal independent sets
../singular_texi/./d2t_singular/mprimdec_lib.tex(,609) the second gives the strings for the independent sets,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,610) @*which cannot be enhanced
../singular_texi/./d2t_singular/mprimdec_lib.tex(,611) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,612) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,613) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,614) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,615) @c computed example indSet d2t_singular/mprimdec_lib.doc:446 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,616) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,617) ring s1=(0,x,y),(a,b,c,d,e,f,g),lp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,618) ideal i=ea-fbg,fa+be,ec-fdg,fc+de;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,619) i=std(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,620) list  l=indSet(i);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,621) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,622) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,623) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,624) @expansion{}       [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,625) @expansion{}          e,f
../singular_texi/./d2t_singular/mprimdec_lib.tex(,626) @expansion{}       [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,627) @expansion{}          a,b,c,d,g
../singular_texi/./d2t_singular/mprimdec_lib.tex(,628) @expansion{}       [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,629) @expansion{}          (C,dp(2),dp)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,630) @expansion{}       [4]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,631) @expansion{}          5
../singular_texi/./d2t_singular/mprimdec_lib.tex(,632) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,633) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,634) @expansion{}       [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,635) @expansion{}          a,b,c,d
../singular_texi/./d2t_singular/mprimdec_lib.tex(,636) @expansion{}       [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,637) @expansion{}          e,f,g
../singular_texi/./d2t_singular/mprimdec_lib.tex(,638) @expansion{}       [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,639) @expansion{}          (C,dp(4),dp)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,640) @expansion{}       [4]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,641) @expansion{}          3
../singular_texi/./d2t_singular/mprimdec_lib.tex(,642) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,643) @expansion{}       [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,644) @expansion{}          a,c,e
../singular_texi/./d2t_singular/mprimdec_lib.tex(,645) @expansion{}       [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,646) @expansion{}          b,d,f,g
../singular_texi/./d2t_singular/mprimdec_lib.tex(,647) @expansion{}       [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,648) @expansion{}          (C,dp(3),dp)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,649) @expansion{}       [4]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,650) @expansion{}          4
../singular_texi/./d2t_singular/mprimdec_lib.tex(,651) @c end example indSet d2t_singular/mprimdec_lib.doc:446
../singular_texi/./d2t_singular/mprimdec_lib.tex(,652) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,653) @c ---end content indSet---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,654) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,655) @c ------------------- GTZopt -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,656) @node GTZopt, zeroOpt, indSet, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,657) @subsubsection GTZopt
../singular_texi/./d2t_singular/mprimdec_lib.tex(,658) @cindex GTZopt
../singular_texi/./d2t_singular/mprimdec_lib.tex(,659) @c ---content GTZopt---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,660) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,661) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,662) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,663) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,664) GTZopt (N[, check]); module N[, module check]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,665) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,666) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,667) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,668) @*the minimal primary decomposition of the module N,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,669) @*computed by a generalized and optimized version of
../singular_texi/./d2t_singular/mprimdec_lib.tex(,670) @*the algorithm of Gianny, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,671) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,672) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,673) if the parameter check is given, only components
../singular_texi/./d2t_singular/mprimdec_lib.tex(,674) @*not containing check are computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,675) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,676) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,677) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,678) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,679) @c computed example GTZopt d2t_singular/mprimdec_lib.doc:481 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,680) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,681) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,682) module N=x*gen(1)+ y*gen(2),
../singular_texi/./d2t_singular/mprimdec_lib.tex(,683) x*gen(1)-x2*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,684) list l=GTZopt(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,685) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,686) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,687) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,688) @expansion{}       _[1]=x*gen(1)+y*gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,689) @expansion{}       _[2]=x*gen(2)-gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,690) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,691) @expansion{}       _[1]=x2+y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,692) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,693) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,694) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,695) @expansion{}       _[2]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,696) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,697) @expansion{}       _[1]=x
../singular_texi/./d2t_singular/mprimdec_lib.tex(,698) @c end example GTZopt d2t_singular/mprimdec_lib.doc:481
../singular_texi/./d2t_singular/mprimdec_lib.tex(,699) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,700) @c ---end content GTZopt---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,701) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,702) @c ------------------- zeroOpt -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,703) @node zeroOpt, clrSBmod, GTZopt, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,704) @subsubsection zeroOpt
../singular_texi/./d2t_singular/mprimdec_lib.tex(,705) @cindex zeroOpt
../singular_texi/./d2t_singular/mprimdec_lib.tex(,706) @c ---content zeroOpt---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,707) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,708) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,709) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,710) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,711) zeroOpt (N[, check]); zero-dimensional module N[, module check]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,712) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,713) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,714) list l
../singular_texi/./d2t_singular/mprimdec_lib.tex(,715) @*the minimal primary decomposition of a zero-dimensional module N,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,716) computed by a generalized and optimized version of the algorithm
../singular_texi/./d2t_singular/mprimdec_lib.tex(,717) of Gianny, Trager and Zacharias
../singular_texi/./d2t_singular/mprimdec_lib.tex(,718) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,719) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,720) if the parameter check is given, only components
../singular_texi/./d2t_singular/mprimdec_lib.tex(,721) @*not containing check are computed
../singular_texi/./d2t_singular/mprimdec_lib.tex(,722) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,723) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,724) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,725) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,726) @c computed example zeroOpt d2t_singular/mprimdec_lib.doc:516 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,727) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,728) ring r=0,z,dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,729) module N=z*gen(1),(z-1)*gen(2),(z+1)*gen(3);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,730) list l=zeroOpt(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,731) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,732) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,733) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,734) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,735) @expansion{}       _[2]=z*gen(2)-gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,736) @expansion{}       _[3]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,737) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,738) @expansion{}       _[1]=z-1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,739) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,740) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,741) @expansion{}       _[1]=z*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,742) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,743) @expansion{}       _[3]=gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,744) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,745) @expansion{}       _[1]=z
../singular_texi/./d2t_singular/mprimdec_lib.tex(,746) @expansion{} [3]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,747) @expansion{}    [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,748) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,749) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,750) @expansion{}       _[3]=z*gen(3)+gen(3)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,751) @expansion{}    [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,752) @expansion{}       _[1]=z+1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,753) @c end example zeroOpt d2t_singular/mprimdec_lib.doc:516
../singular_texi/./d2t_singular/mprimdec_lib.tex(,754) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,755) @c ---end content zeroOpt---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,756) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,757) @c ------------------- clrSBmod -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,758) @node clrSBmod, minSatMod, zeroOpt, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,759) @subsubsection clrSBmod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,760) @cindex clrSBmod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,761) @c ---content clrSBmod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,762) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,763) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,764) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,765) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,766) clrSBmod(N); N module which is SB ordered by monomial ordering
../singular_texi/./d2t_singular/mprimdec_lib.tex(,767) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,768) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,769) module = minimal SB
../singular_texi/./d2t_singular/mprimdec_lib.tex(,770) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,771) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,772) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,773) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,774) @c computed example clrSBmod d2t_singular/mprimdec_lib.doc:543 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,775) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,776) ring  r = (0,a,b),(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,777) module N1=ax2+y,a2x+y,bx;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,778) module N2=clrSBmod(N1);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,779) N2;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,780) @expansion{} N2[1]=(a)*x2*gen(1)+y*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,781) @expansion{} N2[2]=(b)*x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,782) @c end example clrSBmod d2t_singular/mprimdec_lib.doc:543
../singular_texi/./d2t_singular/mprimdec_lib.tex(,783) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,784) @c ---end content clrSBmod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,785) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,786) @c ------------------- minSatMod -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,787) @node minSatMod, specialModulesEqual, clrSBmod, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,788) @subsubsection minSatMod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,789) @cindex minSatMod
../singular_texi/./d2t_singular/mprimdec_lib.tex(,790) @c ---content minSatMod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,791) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,792) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,793) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,794) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,795) minSatMod(N, I); module N, ideal I
../singular_texi/./d2t_singular/mprimdec_lib.tex(,796) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,797) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,798) list with 2 elements:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,799) @*[1]=sat(N,product(I))[1],
../singular_texi/./d2t_singular/mprimdec_lib.tex(,800) @*[2]=p, the polynomial of minimal degree s.th. [1]=quotient(N,p)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,801) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,802) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,803) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,804) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,805) @c computed example minSatMod d2t_singular/mprimdec_lib.doc:572 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,806) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,807) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,808) module N=xy*gen(1);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,809) ideal h=yz,z2;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,810) list l=minSatMod(N,h);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,811) l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,812) @expansion{} [1]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,813) @expansion{}    _[1]=x*gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,814) @expansion{} [2]:
../singular_texi/./d2t_singular/mprimdec_lib.tex(,815) @expansion{}    y
../singular_texi/./d2t_singular/mprimdec_lib.tex(,816) @c end example minSatMod d2t_singular/mprimdec_lib.doc:572
../singular_texi/./d2t_singular/mprimdec_lib.tex(,817) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,818) @c ---end content minSatMod---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,819) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,820) @c ------------------- specialModulesEqual -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,821) @node specialModulesEqual, stdModulesEqual, minSatMod, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,822) @subsubsection specialModulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,823) @cindex specialModulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,824) @c ---content specialModulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,825) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,826) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,827) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,828) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,829) specialModulesEqual(N1, N2) N1, N2 standard bases of modules,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,830) s.th. N1 is contained in N2 or vice versa
../singular_texi/./d2t_singular/mprimdec_lib.tex(,831) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,832) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,833) int i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,834) @*if (N1==N2) then i=1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,835) @*else i=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,836) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,837) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,838) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,839) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,840) @c computed example specialModulesEqual d2t_singular/mprimdec_lib.doc:603 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,841) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,842) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,843) module N1=x*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,844) module N2=xy*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,845) int i=specialModulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,846) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,847) @expansion{} 0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,848) N2=N1;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,849) i=specialModulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,850) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,851) @expansion{} 1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,852) @c end example specialModulesEqual d2t_singular/mprimdec_lib.doc:603
../singular_texi/./d2t_singular/mprimdec_lib.tex(,853) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,854) @c ---end content specialModulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,855) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,856) @c ------------------- stdModulesEqual -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,857) @node stdModulesEqual, modulesEqual, specialModulesEqual, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,858) @subsubsection stdModulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,859) @cindex stdModulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,860) @c ---content stdModulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,861) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,862) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,863) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,864) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,865) stdModulesEqual(N1, N2) N1, N2 standard bases of modules,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,866) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,867) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,868) int i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,869) @*if (N1==N2) then i=1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,870) @*else i=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,871) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,872) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,873) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,874) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,875) @c computed example stdModulesEqual d2t_singular/mprimdec_lib.doc:636 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,876) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,877) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,878) module N1=x*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,879) module N2=xy*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,880) int i=stdModulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,881) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,882) @expansion{} 0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,883) N2=N1;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,884) i=stdModulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,885) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,886) @expansion{} 1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,887) @c end example stdModulesEqual d2t_singular/mprimdec_lib.doc:636
../singular_texi/./d2t_singular/mprimdec_lib.tex(,888) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,889) @c ---end content stdModulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,890) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,891) @c ------------------- modulesEqual -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,892) @node modulesEqual, getData, stdModulesEqual, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,893) @subsubsection modulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,894) @cindex modulesEqual
../singular_texi/./d2t_singular/mprimdec_lib.tex(,895) @c ---content modulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,896) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,897) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,898) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,899) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,900) modulesEqual(N1, N2) N1, N2 modules,
../singular_texi/./d2t_singular/mprimdec_lib.tex(,901) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,902) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,903) int i
../singular_texi/./d2t_singular/mprimdec_lib.tex(,904) @*if (N1==N2) then i=1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,905) @*else i=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,906) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,907) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,908) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,909) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,910) @c computed example modulesEqual d2t_singular/mprimdec_lib.doc:669 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,911) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,912) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,913) module N1=x*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,914) module N2=xy*freemodule(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,915) int i=modulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,916) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,917) @expansion{} 0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,918) N2=N1;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,919) i=modulesEqual(N1,N2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,920) i;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,921) @expansion{} 1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,922) @c end example modulesEqual d2t_singular/mprimdec_lib.doc:669
../singular_texi/./d2t_singular/mprimdec_lib.tex(,923) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,924) @c ---end content modulesEqual---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,925) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,926) @c ------------------- getData -------------
../singular_texi/./d2t_singular/mprimdec_lib.tex(,927) @node getData,, modulesEqual, mprimdec_lib
../singular_texi/./d2t_singular/mprimdec_lib.tex(,928) @subsubsection getData
../singular_texi/./d2t_singular/mprimdec_lib.tex(,929) @cindex getData
../singular_texi/./d2t_singular/mprimdec_lib.tex(,930) @c ---content getData---
../singular_texi/./d2t_singular/mprimdec_lib.tex(,931) Procedure from library @code{mprimdec.lib} (@pxref{mprimdec_lib}).
../singular_texi/./d2t_singular/mprimdec_lib.tex(,932) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,933) @table @asis
../singular_texi/./d2t_singular/mprimdec_lib.tex(,934) @item @strong{Usage:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,935) getData(N, l[, noCheck]); module N, list l[, int noCheck]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,936) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,937) @item @strong{Return:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,938) (ann, check, M, checked)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,939) @*ideal ann, module check, M, int checked
../singular_texi/./d2t_singular/mprimdec_lib.tex(,940) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,941) if l[1] is contained in N [and noCheck is not given]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,942) @*then checked=1, ann=ideal(0), check=0, M=0;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,943) @*else checked=0, M=freemodule(nrows(N)); check=l[1]
../singular_texi/./d2t_singular/mprimdec_lib.tex(,944) @*(resp. check=M if l is an empty list) and
../singular_texi/./d2t_singular/mprimdec_lib.tex(,945) @*if size(l)>1 then ann=l[2] else ann is the annihilator of M/N.
../singular_texi/./d2t_singular/mprimdec_lib.tex(,946) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,947) @item @strong{Note:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,948) ann is a std basis in the basering
../singular_texi/./d2t_singular/mprimdec_lib.tex(,949) 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,950) @end table
../singular_texi/./d2t_singular/mprimdec_lib.tex(,951) @strong{Example:}
../singular_texi/./d2t_singular/mprimdec_lib.tex(,952) @smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,953) @c computed example getData d2t_singular/mprimdec_lib.doc:710 
../singular_texi/./d2t_singular/mprimdec_lib.tex(,954) LIB "mprimdec.lib";
../singular_texi/./d2t_singular/mprimdec_lib.tex(,955) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,956) module N=x*gen(1),y*gen(2);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,957) N=std(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,958) ideal ann; module check, M; int checked; list l;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,959) (ann, check, M, checked)=getData(N,l);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,960) ann; check; M; checked;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,961) @expansion{} ann[1]=xy
../singular_texi/./d2t_singular/mprimdec_lib.tex(,962) @expansion{} check[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,963) @expansion{} check[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,964) @expansion{} M[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,965) @expansion{} M[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,966) @expansion{} 0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,967) l=list(check,ann);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,968) (ann, check, M, checked)=getData(N,l);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,969) ann; check; M; checked;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,970) @expansion{} ann[1]=xy
../singular_texi/./d2t_singular/mprimdec_lib.tex(,971) @expansion{} check[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,972) @expansion{} check[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,973) @expansion{} M[1]=gen(1)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,974) @expansion{} M[2]=gen(2)
../singular_texi/./d2t_singular/mprimdec_lib.tex(,975) @expansion{} 0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,976) l=list(N);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,977) (ann, check, M, checked)=getData(N,l);
../singular_texi/./d2t_singular/mprimdec_lib.tex(,978) ann; check; M; checked;
../singular_texi/./d2t_singular/mprimdec_lib.tex(,979) @expansion{} ann[1]=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,980) @expansion{} check[1]=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,981) @expansion{} M[1]=0
../singular_texi/./d2t_singular/mprimdec_lib.tex(,982) @expansion{} 1
../singular_texi/./d2t_singular/mprimdec_lib.tex(,983) @c end example getData d2t_singular/mprimdec_lib.doc:710
../singular_texi/./d2t_singular/mprimdec_lib.tex(,984) @end smallexample
../singular_texi/./d2t_singular/mprimdec_lib.tex(,985) @c ---end content getData---
../singular_texi/singular.tex(,391) @c ----------------------------------------------------------
../singular_texi/singular.tex(,392) @node mregular_lib, normal_lib, mprimdec_lib, Commutative algebra
../singular_texi/singular.tex(,393) @subsection mregular_lib
../singular_texi/singular.tex(,394) @c include of docu for mregular.lib
../singular_texi/./d2t_singular/mregular_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/mregular_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/mregular_lib.doc
../singular_texi/./d2t_singular/mregular_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/mregular_lib.doc INSTEAD
../singular_texi/./d2t_singular/mregular_lib.tex(,4) @c library version: (1.6.2.1,2002/02/20)
../singular_texi/./d2t_singular/mregular_lib.tex(,5) @c library file: ../Singular/LIB/mregular.lib
../singular_texi/./d2t_singular/mregular_lib.tex(,6) @cindex mregular.lib
../singular_texi/./d2t_singular/mregular_lib.tex(,7) @cindex mregular_lib
../singular_texi/./d2t_singular/mregular_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/mregular_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/mregular_lib.tex(,10) mregular.lib
../singular_texi/./d2t_singular/mregular_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/mregular_lib.tex(,12)    Castelnuovo-Mumford Regularity of CM-Schemes and Curves
../singular_texi/./d2t_singular/mregular_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/mregular_lib.tex(,14) I.Bermejo, ibermejo@@ull.es
../singular_texi/./d2t_singular/mregular_lib.tex(,15) @* Ph.Gimenez, pgimenez@@agt.uva.es
../singular_texi/./d2t_singular/mregular_lib.tex(,16) @* G.-M.Greuel, greuel@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/mregular_lib.tex(,17) 
../singular_texi/./d2t_singular/mregular_lib.tex(,18) @item @strong{Overview:}
../singular_texi/./d2t_singular/mregular_lib.tex(,19) A library for computing the Castelnuovo-Mumford regularity of a subscheme of
../singular_texi/./d2t_singular/mregular_lib.tex(,20) the projective n-space that DOES NOT require the computation of a minimal
../singular_texi/./d2t_singular/mregular_lib.tex(,21) graded free resolution of the saturated ideal defining the subscheme.
../singular_texi/./d2t_singular/mregular_lib.tex(,22) The procedures are based on two papers by Isabel Bermejo and Philippe Gimenez:
../singular_texi/./d2t_singular/mregular_lib.tex(,23) 'On Castelnuovo-Mumford regularity of projective curves' Proc.Amer.Math.Soc.
../singular_texi/./d2t_singular/mregular_lib.tex(,24) 128(5) (2000), and 'Computing the Castelnuovo-Mumford regularity of some
../singular_texi/./d2t_singular/mregular_lib.tex(,25) subschemes of Pn using quotients of monomial ideals', Proceedings of
../singular_texi/./d2t_singular/mregular_lib.tex(,26) MEGA-2000, J. Pure Appl. Algebra (to appear).
../singular_texi/./d2t_singular/mregular_lib.tex(,27) @*The algorithm assumes the variables to be in Noether position.
../singular_texi/./d2t_singular/mregular_lib.tex(,28) 
../singular_texi/./d2t_singular/mregular_lib.tex(,29) @end table
../singular_texi/./d2t_singular/mregular_lib.tex(,30) 
../singular_texi/./d2t_singular/mregular_lib.tex(,31) @strong{Procedures:}
../singular_texi/./d2t_singular/mregular_lib.tex(,32) @menu
../singular_texi/./d2t_singular/mregular_lib.tex(,33) * reg_CM:: regularity of arith. C-M subscheme V(id_sat) of Pn
../singular_texi/./d2t_singular/mregular_lib.tex(,34) * reg_curve:: regularity of projective curve V(id_sat) in Pn
../singular_texi/./d2t_singular/mregular_lib.tex(,35) * reg_moncurve:: regularity of projective monomial curve defined by li
../singular_texi/./d2t_singular/mregular_lib.tex(,36) @end menu
../singular_texi/./d2t_singular/mregular_lib.tex(,37) @c ---end content LibInfo---
../singular_texi/./d2t_singular/mregular_lib.tex(,38) 
../singular_texi/./d2t_singular/mregular_lib.tex(,39) @c ------------------- reg_CM -------------
../singular_texi/./d2t_singular/mregular_lib.tex(,40) @node reg_CM, reg_curve,, mregular_lib
../singular_texi/./d2t_singular/mregular_lib.tex(,41) @subsubsection reg_CM
../singular_texi/./d2t_singular/mregular_lib.tex(,42) @cindex reg_CM
../singular_texi/./d2t_singular/mregular_lib.tex(,43) @c ---content reg_CM---
../singular_texi/./d2t_singular/mregular_lib.tex(,44) Procedure from library @code{mregular.lib} (@pxref{mregular_lib}).
../singular_texi/./d2t_singular/mregular_lib.tex(,45) 
../singular_texi/./d2t_singular/mregular_lib.tex(,46) @table @asis
../singular_texi/./d2t_singular/mregular_lib.tex(,47) @item @strong{Usage:}
../singular_texi/./d2t_singular/mregular_lib.tex(,48) reg_CM (i); i ideal
../singular_texi/./d2t_singular/mregular_lib.tex(,49) 
../singular_texi/./d2t_singular/mregular_lib.tex(,50) @item @strong{Return:}
../singular_texi/./d2t_singular/mregular_lib.tex(,51) an integer, the Castelnuovo-Mumford regularity of i-sat.
../singular_texi/./d2t_singular/mregular_lib.tex(,52) 
../singular_texi/./d2t_singular/mregular_lib.tex(,53) @item @strong{Assume:}
../singular_texi/./d2t_singular/mregular_lib.tex(,54) i is a homogeneous ideal of the basering S=K[x(0)..x(n)] where
../singular_texi/./d2t_singular/mregular_lib.tex(,55) the field K is infinite, and S/i-sat is Cohen-Macaulay.
../singular_texi/./d2t_singular/mregular_lib.tex(,56) Assume that K[x(n-d),...,x(n)] is a Noether normalization of S/i-sat
../singular_texi/./d2t_singular/mregular_lib.tex(,57) where d=dim S/i -1. If this is not the case, compute a Noether
../singular_texi/./d2t_singular/mregular_lib.tex(,58) normalization e.g. by using the proc noetherNormal from algebra.lib.
../singular_texi/./d2t_singular/mregular_lib.tex(,59) 
../singular_texi/./d2t_singular/mregular_lib.tex(,60) @item @strong{Note:}
../singular_texi/./d2t_singular/mregular_lib.tex(,61) The output is reg(X)=reg(i-sat) where X is the arithmetically
../singular_texi/./d2t_singular/mregular_lib.tex(,62) Cohen-Macaulay subscheme of the projective n-space defined by i.
../singular_texi/./d2t_singular/mregular_lib.tex(,63) If printlevel > 0 (default = 0) additional information is displayed.
../singular_texi/./d2t_singular/mregular_lib.tex(,64) In particular, the value of the regularity of the Hilbert function of
../singular_texi/./d2t_singular/mregular_lib.tex(,65) S/i-sat is given.
../singular_texi/./d2t_singular/mregular_lib.tex(,66) 
../singular_texi/./d2t_singular/mregular_lib.tex(,67) @end table
../singular_texi/./d2t_singular/mregular_lib.tex(,68) @strong{Example:}
../singular_texi/./d2t_singular/mregular_lib.tex(,69) @smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,70) @c computed example reg_CM d2t_singular/mregular_lib.doc:68 
../singular_texi/./d2t_singular/mregular_lib.tex(,71) LIB "mregular.lib";
../singular_texi/./d2t_singular/mregular_lib.tex(,72) ring s=0,x(0..5),dp;
../singular_texi/./d2t_singular/mregular_lib.tex(,73) ideal i=x(2)^2-x(4)*x(5),x(1)*x(2)-x(0)*x(5),x(0)*x(2)-x(1)*x(4),
../singular_texi/./d2t_singular/mregular_lib.tex(,74) x(1)^2-x(3)*x(5),x(0)*x(1)-x(2)*x(3),x(0)^2-x(3)*x(4);
../singular_texi/./d2t_singular/mregular_lib.tex(,75) reg_CM(i);
../singular_texi/./d2t_singular/mregular_lib.tex(,76) @expansion{} 2
../singular_texi/./d2t_singular/mregular_lib.tex(,77) // Additional information can be obtained as follows:
../singular_texi/./d2t_singular/mregular_lib.tex(,78) printlevel = 1;
../singular_texi/./d2t_singular/mregular_lib.tex(,79) reg_CM(i);
../singular_texi/./d2t_singular/mregular_lib.tex(,80) @expansion{} // Ideal i of S defining an arithm. Cohen-Macaulay subscheme X of P5:
../singular_texi/./d2t_singular/mregular_lib.tex(,81) @expansion{} //   - dimension of X: 2
../singular_texi/./d2t_singular/mregular_lib.tex(,82) @expansion{} //   - i is saturated: YES
../singular_texi/./d2t_singular/mregular_lib.tex(,83) @expansion{} //   - regularity of the Hilbert function of S/i-sat: -1
../singular_texi/./d2t_singular/mregular_lib.tex(,84) @expansion{} //   - time for computing reg(X): 0 sec.
../singular_texi/./d2t_singular/mregular_lib.tex(,85) @expansion{} // Castelnuovo-Mumford regularity of X:
../singular_texi/./d2t_singular/mregular_lib.tex(,86) @expansion{} 2
../singular_texi/./d2t_singular/mregular_lib.tex(,87) @c end example reg_CM d2t_singular/mregular_lib.doc:68
../singular_texi/./d2t_singular/mregular_lib.tex(,88) @end smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,89) @c ---end content reg_CM---
../singular_texi/./d2t_singular/mregular_lib.tex(,90) 
../singular_texi/./d2t_singular/mregular_lib.tex(,91) @c ------------------- reg_curve -------------
../singular_texi/./d2t_singular/mregular_lib.tex(,92) @node reg_curve, reg_moncurve, reg_CM, mregular_lib
../singular_texi/./d2t_singular/mregular_lib.tex(,93) @subsubsection reg_curve
../singular_texi/./d2t_singular/mregular_lib.tex(,94) @cindex reg_curve
../singular_texi/./d2t_singular/mregular_lib.tex(,95) @c ---content reg_curve---
../singular_texi/./d2t_singular/mregular_lib.tex(,96) Procedure from library @code{mregular.lib} (@pxref{mregular_lib}).
../singular_texi/./d2t_singular/mregular_lib.tex(,97) 
../singular_texi/./d2t_singular/mregular_lib.tex(,98) @table @asis
../singular_texi/./d2t_singular/mregular_lib.tex(,99) @item @strong{Usage:}
../singular_texi/./d2t_singular/mregular_lib.tex(,100) reg_curve (i[,e]); i ideal, e integer
../singular_texi/./d2t_singular/mregular_lib.tex(,101) 
../singular_texi/./d2t_singular/mregular_lib.tex(,102) @item @strong{Return:}
../singular_texi/./d2t_singular/mregular_lib.tex(,103) an integer, the Castelnuovo-Mumford regularity of i-sat.
../singular_texi/./d2t_singular/mregular_lib.tex(,104) 
../singular_texi/./d2t_singular/mregular_lib.tex(,105) @item @strong{Assume:}
../singular_texi/./d2t_singular/mregular_lib.tex(,106) i is a homogeneous ideal of the basering S=K[x(0)..x(n)] where
../singular_texi/./d2t_singular/mregular_lib.tex(,107) the field K is infinite, and it defines a projective curve C in
../singular_texi/./d2t_singular/mregular_lib.tex(,108) the projective n-space (dim(i)=2). We assume that K[x(n-1),x(n)]
../singular_texi/./d2t_singular/mregular_lib.tex(,109) is a Noether normalization of S/i-sat.
../singular_texi/./d2t_singular/mregular_lib.tex(,110) @*e=0: (default)
../singular_texi/./d2t_singular/mregular_lib.tex(,111) @*Uses a random choice of an element of K when it is necessary.
../singular_texi/./d2t_singular/mregular_lib.tex(,112) This is absolutely safe (if the element is bad, another random
../singular_texi/./d2t_singular/mregular_lib.tex(,113) choice will be done until a good element is found).
../singular_texi/./d2t_singular/mregular_lib.tex(,114) @*e=1: Substitutes the random choice of an element of K by a simple
../singular_texi/./d2t_singular/mregular_lib.tex(,115) transcendental field extension of K.
../singular_texi/./d2t_singular/mregular_lib.tex(,116) 
../singular_texi/./d2t_singular/mregular_lib.tex(,117) @item @strong{Note:}
../singular_texi/./d2t_singular/mregular_lib.tex(,118) The output is the integer reg(C)=reg(i-sat).
../singular_texi/./d2t_singular/mregular_lib.tex(,119) @*If printlevel > 0 (default = 0) additional information is displayed.
../singular_texi/./d2t_singular/mregular_lib.tex(,120) In particular, says if C is arithmetically Cohen-Macaulay or not,
../singular_texi/./d2t_singular/mregular_lib.tex(,121) determines in which step of a minimal graded free resolution of i-sat
../singular_texi/./d2t_singular/mregular_lib.tex(,122) the regularity of C is attained, and sometimes gives the value of the
../singular_texi/./d2t_singular/mregular_lib.tex(,123) regularity of the Hilbert function of S/i-sat (otherwise, an upper
../singular_texi/./d2t_singular/mregular_lib.tex(,124) bound is given).
../singular_texi/./d2t_singular/mregular_lib.tex(,125) 
../singular_texi/./d2t_singular/mregular_lib.tex(,126) @end table
../singular_texi/./d2t_singular/mregular_lib.tex(,127) @strong{Example:}
../singular_texi/./d2t_singular/mregular_lib.tex(,128) @smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,129) @c computed example reg_curve d2t_singular/mregular_lib.doc:119 
../singular_texi/./d2t_singular/mregular_lib.tex(,130) LIB "mregular.lib";
../singular_texi/./d2t_singular/mregular_lib.tex(,131) ring s = 0,(x,y,z,t),dp;
../singular_texi/./d2t_singular/mregular_lib.tex(,132) // 1st example is Ex.2.5 in [Bermejo-Gimenez], Proc.Amer.Math.Soc. 128(5):
../singular_texi/./d2t_singular/mregular_lib.tex(,133) ideal i  = x17y14-y31, x20y13, x60-y36z24-x20z20t20;
../singular_texi/./d2t_singular/mregular_lib.tex(,134) reg_curve(i);
../singular_texi/./d2t_singular/mregular_lib.tex(,135) @expansion{} 72
../singular_texi/./d2t_singular/mregular_lib.tex(,136) // 2nd example is Ex.2.9 in [Bermejo-Gimenez], Proc.Amer.Math.Soc. 128(5):
../singular_texi/./d2t_singular/mregular_lib.tex(,137) int k=43;
../singular_texi/./d2t_singular/mregular_lib.tex(,138) ideal j=x17y14-y31,x20y13,x60-y36z24-x20z20t20,y41*z^k-y40*z^(k+1);
../singular_texi/./d2t_singular/mregular_lib.tex(,139) reg_curve(j);
../singular_texi/./d2t_singular/mregular_lib.tex(,140) @expansion{} 93
../singular_texi/./d2t_singular/mregular_lib.tex(,141) // Additional information can be obtained as follows:
../singular_texi/./d2t_singular/mregular_lib.tex(,142) printlevel = 1;
../singular_texi/./d2t_singular/mregular_lib.tex(,143) reg_curve(j);
../singular_texi/./d2t_singular/mregular_lib.tex(,144) @expansion{} // Ideal i of S defining a projective curve C in P3:
../singular_texi/./d2t_singular/mregular_lib.tex(,145) @expansion{} //   - i is saturated: YES
../singular_texi/./d2t_singular/mregular_lib.tex(,146) @expansion{} //   - C is arithm. Cohen-Macaulay: NO
../singular_texi/./d2t_singular/mregular_lib.tex(,147) @expansion{} //   - reg(C) attained at the last step of a m.g.f.r. of i-sat: YES
../singular_texi/./d2t_singular/mregular_lib.tex(,148) @expansion{} //   - regularity of the Hilbert function of S/i-sat: 92
../singular_texi/./d2t_singular/mregular_lib.tex(,149) @expansion{} //   - time for computing reg(C): 0 sec.
../singular_texi/./d2t_singular/mregular_lib.tex(,150) @expansion{} // Castelnuovo-Mumford regularity of C:
../singular_texi/./d2t_singular/mregular_lib.tex(,151) @expansion{} 93
../singular_texi/./d2t_singular/mregular_lib.tex(,152) @c end example reg_curve d2t_singular/mregular_lib.doc:119
../singular_texi/./d2t_singular/mregular_lib.tex(,153) @end smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,154) @c ---end content reg_curve---
../singular_texi/./d2t_singular/mregular_lib.tex(,155) 
../singular_texi/./d2t_singular/mregular_lib.tex(,156) @c ------------------- reg_moncurve -------------
../singular_texi/./d2t_singular/mregular_lib.tex(,157) @node reg_moncurve,, reg_curve, mregular_lib
../singular_texi/./d2t_singular/mregular_lib.tex(,158) @subsubsection reg_moncurve
../singular_texi/./d2t_singular/mregular_lib.tex(,159) @cindex reg_moncurve
../singular_texi/./d2t_singular/mregular_lib.tex(,160) @c ---content reg_moncurve---
../singular_texi/./d2t_singular/mregular_lib.tex(,161) Procedure from library @code{mregular.lib} (@pxref{mregular_lib}).
../singular_texi/./d2t_singular/mregular_lib.tex(,162) 
../singular_texi/./d2t_singular/mregular_lib.tex(,163) @table @asis
../singular_texi/./d2t_singular/mregular_lib.tex(,164) @item @strong{Usage:}
../singular_texi/./d2t_singular/mregular_lib.tex(,165) reg_moncurve (a0,...,an) ; ai integers with a0=0 < a1 < ... < an=:d
../singular_texi/./d2t_singular/mregular_lib.tex(,166) 
../singular_texi/./d2t_singular/mregular_lib.tex(,167) @item @strong{Return:}
../singular_texi/./d2t_singular/mregular_lib.tex(,168) an integer, the Castelnuovo-Mumford regularity of the projective
../singular_texi/./d2t_singular/mregular_lib.tex(,169) monomial curve C in Pn parametrically defined by:
../singular_texi/./d2t_singular/mregular_lib.tex(,170) @*x(0)=t^d , x(1)=s^(a1)t^(d-a1), ... , x(n)=s^d.
../singular_texi/./d2t_singular/mregular_lib.tex(,171) 
../singular_texi/./d2t_singular/mregular_lib.tex(,172) @item @strong{Assume:}
../singular_texi/./d2t_singular/mregular_lib.tex(,173) a0=0 < a1 < ... < an are integers and the base field is infinite.
../singular_texi/./d2t_singular/mregular_lib.tex(,174) 
../singular_texi/./d2t_singular/mregular_lib.tex(,175) @item @strong{Note:}
../singular_texi/./d2t_singular/mregular_lib.tex(,176) The defining ideal I(C) in S is determined using elimination.
../singular_texi/./d2t_singular/mregular_lib.tex(,177) The procedure reg_curve is improved in this case since one
../singular_texi/./d2t_singular/mregular_lib.tex(,178) knows beforehand that the dimension is 2, that the variables are
../singular_texi/./d2t_singular/mregular_lib.tex(,179) in Noether position, that I(C) is prime.
../singular_texi/./d2t_singular/mregular_lib.tex(,180) @*If printlevel > 0 (default = 0) additional information is displayed.
../singular_texi/./d2t_singular/mregular_lib.tex(,181) In particular, says if C is arithmetically Cohen-Macaulay or not,
../singular_texi/./d2t_singular/mregular_lib.tex(,182) determines in which step of a minimal graded free resolution of I(C)
../singular_texi/./d2t_singular/mregular_lib.tex(,183) the regularity is attained, and sometimes gives the value of the
../singular_texi/./d2t_singular/mregular_lib.tex(,184) regularity of the Hilbert function of S/I(C) (otherwise, an upper
../singular_texi/./d2t_singular/mregular_lib.tex(,185) bound is given).
../singular_texi/./d2t_singular/mregular_lib.tex(,186) 
../singular_texi/./d2t_singular/mregular_lib.tex(,187) @end table
../singular_texi/./d2t_singular/mregular_lib.tex(,188) @strong{Example:}
../singular_texi/./d2t_singular/mregular_lib.tex(,189) @smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,190) @c computed example reg_moncurve d2t_singular/mregular_lib.doc:170 
../singular_texi/./d2t_singular/mregular_lib.tex(,191) LIB "mregular.lib";
../singular_texi/./d2t_singular/mregular_lib.tex(,192) // The 1st example is the twisted cubic:
../singular_texi/./d2t_singular/mregular_lib.tex(,193) reg_moncurve(0,1,2,3);
../singular_texi/./d2t_singular/mregular_lib.tex(,194) @expansion{} 2
../singular_texi/./d2t_singular/mregular_lib.tex(,195) // The 2nd. example is the non arithm. Cohen-Macaulay monomial curve in P4
../singular_texi/./d2t_singular/mregular_lib.tex(,196) // parametrized by: x(0)-s6,x(1)-s5t,x(2)-s3t3,x(3)-st5,x(4)-t6:
../singular_texi/./d2t_singular/mregular_lib.tex(,197) reg_moncurve(0,1,3,5,6);
../singular_texi/./d2t_singular/mregular_lib.tex(,198) @expansion{} 3
../singular_texi/./d2t_singular/mregular_lib.tex(,199) // Additional information can be obtained as follows:
../singular_texi/./d2t_singular/mregular_lib.tex(,200) printlevel = 1;
../singular_texi/./d2t_singular/mregular_lib.tex(,201) reg_moncurve(0,1,3,5,6);
../singular_texi/./d2t_singular/mregular_lib.tex(,202) @expansion{} // Sequence of integers defining a monomial curve C in P4:
../singular_texi/./d2t_singular/mregular_lib.tex(,203) @expansion{} //   - time for computing ideal I(C) of S (elimination): 0 sec.
../singular_texi/./d2t_singular/mregular_lib.tex(,204) @expansion{} //   - C is arithm. Cohen-Macaulay: NO
../singular_texi/./d2t_singular/mregular_lib.tex(,205) @expansion{} //   - reg(C) attained at the last step of a m.g.f.r. of I(C): YES
../singular_texi/./d2t_singular/mregular_lib.tex(,206) @expansion{} //   - reg(C) attained at the second last step of a m.g.f.r. of I(C): YES
../singular_texi/./d2t_singular/mregular_lib.tex(,207) @expansion{} //   - regularity of the Hilbert function of S/I(C): 2
../singular_texi/./d2t_singular/mregular_lib.tex(,208) @expansion{} //   - time for computing reg(C): 0 sec.
../singular_texi/./d2t_singular/mregular_lib.tex(,209) @expansion{} // Castelnuovo-Mumford regularity of C:
../singular_texi/./d2t_singular/mregular_lib.tex(,210) @expansion{} 3
../singular_texi/./d2t_singular/mregular_lib.tex(,211) @c end example reg_moncurve d2t_singular/mregular_lib.doc:170
../singular_texi/./d2t_singular/mregular_lib.tex(,212) @end smallexample
../singular_texi/./d2t_singular/mregular_lib.tex(,213) @c ---end content reg_moncurve---
../singular_texi/singular.tex(,396) @c ---------------------------------------------------------
../singular_texi/singular.tex(,397) @node normal_lib, primdec_lib, mregular_lib, Commutative algebra
../singular_texi/singular.tex(,398) @subsection normal_lib
../singular_texi/singular.tex(,399) @c include of docu for normal.lib
../singular_texi/./d2t_singular/normal_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/normal_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/normal_lib.doc
../singular_texi/./d2t_singular/normal_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/normal_lib.doc INSTEAD
../singular_texi/./d2t_singular/normal_lib.tex(,4) @c library version: (1.34.2.17,2002/10/21)
../singular_texi/./d2t_singular/normal_lib.tex(,5) @c library file: ../Singular/LIB/normal.lib
../singular_texi/./d2t_singular/normal_lib.tex(,6) @cindex normal.lib
../singular_texi/./d2t_singular/normal_lib.tex(,7) @cindex normal_lib
../singular_texi/./d2t_singular/normal_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/normal_lib.tex(,10) normal.lib
../singular_texi/./d2t_singular/normal_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/normal_lib.tex(,12)      Normalization of Affine Rings
../singular_texi/./d2t_singular/normal_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/normal_lib.tex(,14) G.-M. Greuel, greuel@@mathematik.uni-kl.de,
../singular_texi/./d2t_singular/normal_lib.tex(,15) @* G. Pfister, pfister@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/normal_lib.tex(,16) 
../singular_texi/./d2t_singular/normal_lib.tex(,17) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,18) 
../singular_texi/./d2t_singular/normal_lib.tex(,19) @strong{Main procedures:}
../singular_texi/./d2t_singular/normal_lib.tex(,20) @menu
../singular_texi/./d2t_singular/normal_lib.tex(,21) * normal:: computes the normalization of basering/I, resp. computes the normalization of basering/I and the delta invariant
../singular_texi/./d2t_singular/normal_lib.tex(,22) * HomJJ:: presentation of End_R(J) as affine ring, L a list
../singular_texi/./d2t_singular/normal_lib.tex(,23) * genus:: computes genus of the projective curve defined by I
../singular_texi/./d2t_singular/normal_lib.tex(,24) @end menu
../singular_texi/./d2t_singular/normal_lib.tex(,25) @strong{Auxiliary procedure:}
../singular_texi/./d2t_singular/normal_lib.tex(,26) @menu
../singular_texi/./d2t_singular/normal_lib.tex(,27) * deltaLoc:: (sum of) delta invariant(s) at conjugated singular points
../singular_texi/./d2t_singular/normal_lib.tex(,28) @end menu
../singular_texi/./d2t_singular/normal_lib.tex(,29) @c ---end content LibInfo---
../singular_texi/./d2t_singular/normal_lib.tex(,30) 
../singular_texi/./d2t_singular/normal_lib.tex(,31) @c ------------------- normal -------------
../singular_texi/./d2t_singular/normal_lib.tex(,32) @node normal, HomJJ,, normal_lib
../singular_texi/./d2t_singular/normal_lib.tex(,33) @subsubsection normal
../singular_texi/./d2t_singular/normal_lib.tex(,34) @cindex normal
../singular_texi/./d2t_singular/normal_lib.tex(,35) @c ---content normal---
../singular_texi/./d2t_singular/normal_lib.tex(,36) Procedure from library @code{normal.lib} (@pxref{normal_lib}).
../singular_texi/./d2t_singular/normal_lib.tex(,37) 
../singular_texi/./d2t_singular/normal_lib.tex(,38) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,39) @item @strong{Usage:}
../singular_texi/./d2t_singular/normal_lib.tex(,40) normal(i [,choose]); i a radical ideal, choose empty, 1 or "wd"
../singular_texi/./d2t_singular/normal_lib.tex(,41) if choose=1 the normalization of the associated primes is computed
../singular_texi/./d2t_singular/normal_lib.tex(,42) (which is sometimes more efficient);
../singular_texi/./d2t_singular/normal_lib.tex(,43) if @code{choose="wd"} the delta invariant is computed
../singular_texi/./d2t_singular/normal_lib.tex(,44) simultaneously; this may take much more time in the reducible case,
../singular_texi/./d2t_singular/normal_lib.tex(,45) since the factorizing standard basis algorithm cannot be used.
../singular_texi/./d2t_singular/normal_lib.tex(,46) 
../singular_texi/./d2t_singular/normal_lib.tex(,47) @item @strong{Assume:}
../singular_texi/./d2t_singular/normal_lib.tex(,48) The ideal must be radical, for non-radical ideals the output may
../singular_texi/./d2t_singular/normal_lib.tex(,49) be wrong (i=radical(i); makes i radical)
../singular_texi/./d2t_singular/normal_lib.tex(,50) 
../singular_texi/./d2t_singular/normal_lib.tex(,51) @item @strong{Return:}
../singular_texi/./d2t_singular/normal_lib.tex(,52) a list of rings, say nor and in case of @code{choose="wd"} an
../singular_texi/./d2t_singular/normal_lib.tex(,53) integer at the end of the list.
../singular_texi/./d2t_singular/normal_lib.tex(,54) Each ring @code{nor[i]} contains two ideals with given names
../singular_texi/./d2t_singular/normal_lib.tex(,55) @code{norid} and @code{normap} such that@*
../singular_texi/./d2t_singular/normal_lib.tex(,56) - the direct sum of the rings @code{nor[i]/norid} is the
../singular_texi/./d2t_singular/normal_lib.tex(,57) normalization of basering/id;@*
../singular_texi/./d2t_singular/normal_lib.tex(,58) - @code{normap} gives the normalization map from basering/id to
../singular_texi/./d2t_singular/normal_lib.tex(,59) @code{nor[i]/norid} (for each i).
../singular_texi/./d2t_singular/normal_lib.tex(,60) 
../singular_texi/./d2t_singular/normal_lib.tex(,61) @item @strong{Note:}
../singular_texi/./d2t_singular/normal_lib.tex(,62) to use the i-th ring type: @code{def R=nor[i]; setring R;}.
../singular_texi/./d2t_singular/normal_lib.tex(,63) @* Increasing printlevel displays more comments (default: printlevel=0).
../singular_texi/./d2t_singular/normal_lib.tex(,64) @* Not implemented for local or mixed orderings.
../singular_texi/./d2t_singular/normal_lib.tex(,65) @* If the input ideal i is weighted homogeneous a weighted ordering may
../singular_texi/./d2t_singular/normal_lib.tex(,66) be used (qhweight(i); computes weights).
../singular_texi/./d2t_singular/normal_lib.tex(,67) 
../singular_texi/./d2t_singular/normal_lib.tex(,68) @cindex normalization
../singular_texi/./d2t_singular/normal_lib.tex(,69) @cindex delta invariant.
../singular_texi/./d2t_singular/normal_lib.tex(,70) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,71) @strong{Example:}
../singular_texi/./d2t_singular/normal_lib.tex(,72) @smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,73) @c computed example normal d2t_singular/normal_lib.doc:71 
../singular_texi/./d2t_singular/normal_lib.tex(,74) LIB "normal.lib";
../singular_texi/./d2t_singular/normal_lib.tex(,75) ring r=32003,(x,y,z),wp(2,1,2);
../singular_texi/./d2t_singular/normal_lib.tex(,76) ideal i=z3-xy4;
../singular_texi/./d2t_singular/normal_lib.tex(,77) list nor=normal(i);
../singular_texi/./d2t_singular/normal_lib.tex(,78) @expansion{} 
../singular_texi/./d2t_singular/normal_lib.tex(,79) @expansion{} // 'normal' created a list of 1 ring(s).
../singular_texi/./d2t_singular/normal_lib.tex(,80) @expansion{} // nor[1+1] is the delta-invariant in case of choose=wd.
../singular_texi/./d2t_singular/normal_lib.tex(,81) @expansion{} // To see the rings, type (if the name of your list is nor):
../singular_texi/./d2t_singular/normal_lib.tex(,82) @expansion{}      show( nor);
../singular_texi/./d2t_singular/normal_lib.tex(,83) @expansion{} // To access the 1-st ring and map (similar for the others), type:
../singular_texi/./d2t_singular/normal_lib.tex(,84) @expansion{}      def R = nor[1]; setring R;  norid; normap;
../singular_texi/./d2t_singular/normal_lib.tex(,85) @expansion{} // R/norid is the 1-st ring of the normalization and
../singular_texi/./d2t_singular/normal_lib.tex(,86) @expansion{} // normap the map from the original basering to R/norid
../singular_texi/./d2t_singular/normal_lib.tex(,87) show(nor);
../singular_texi/./d2t_singular/normal_lib.tex(,88) @expansion{} // list, 1 element(s):
../singular_texi/./d2t_singular/normal_lib.tex(,89) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,90) @expansion{}    // ring: (32003),(T(1),T(2),T(3)),(a(2,1,1),dp(3),C);
../singular_texi/./d2t_singular/normal_lib.tex(,91) @expansion{}    // minpoly = 0
../singular_texi/./d2t_singular/normal_lib.tex(,92) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/normal_lib.tex(,93) @expansion{} // normap               [0]  ideal, 3 generator(s)
../singular_texi/./d2t_singular/normal_lib.tex(,94) @expansion{} // norid                [0]  ideal, 1 generator(s)
../singular_texi/./d2t_singular/normal_lib.tex(,95) def r1=nor[1];
../singular_texi/./d2t_singular/normal_lib.tex(,96) setring r1;
../singular_texi/./d2t_singular/normal_lib.tex(,97) norid;
../singular_texi/./d2t_singular/normal_lib.tex(,98) @expansion{} norid[1]=T(3)3-T(1)T(2)
../singular_texi/./d2t_singular/normal_lib.tex(,99) normap;
../singular_texi/./d2t_singular/normal_lib.tex(,100) @expansion{} normap[1]=T(1)
../singular_texi/./d2t_singular/normal_lib.tex(,101) @expansion{} normap[2]=T(2)
../singular_texi/./d2t_singular/normal_lib.tex(,102) @expansion{} normap[3]=T(2)T(3)
../singular_texi/./d2t_singular/normal_lib.tex(,103) ring s=0,(x,y),dp;
../singular_texi/./d2t_singular/normal_lib.tex(,104) ideal i=(x-y^2)^2 - y*x^3;
../singular_texi/./d2t_singular/normal_lib.tex(,105) nor=normal(i,"wd");
../singular_texi/./d2t_singular/normal_lib.tex(,106) @expansion{} 
../singular_texi/./d2t_singular/normal_lib.tex(,107) @expansion{} // 'normal' created a list of 1 ring(s).
../singular_texi/./d2t_singular/normal_lib.tex(,108) @expansion{} // nor[1+1] is the delta-invariant in case of choose=wd.
../singular_texi/./d2t_singular/normal_lib.tex(,109) @expansion{} // To see the rings, type (if the name of your list is nor):
../singular_texi/./d2t_singular/normal_lib.tex(,110) @expansion{}      show( nor);
../singular_texi/./d2t_singular/normal_lib.tex(,111) @expansion{} // To access the 1-st ring and map (similar for the others), type:
../singular_texi/./d2t_singular/normal_lib.tex(,112) @expansion{}      def R = nor[1]; setring R;  norid; normap;
../singular_texi/./d2t_singular/normal_lib.tex(,113) @expansion{} // R/norid is the 1-st ring of the normalization and
../singular_texi/./d2t_singular/normal_lib.tex(,114) @expansion{} // normap the map from the original basering to R/norid
../singular_texi/./d2t_singular/normal_lib.tex(,115) //the delta-invariant
../singular_texi/./d2t_singular/normal_lib.tex(,116) nor[size(nor)];
../singular_texi/./d2t_singular/normal_lib.tex(,117) @expansion{} 3
../singular_texi/./d2t_singular/normal_lib.tex(,118) @c end example normal d2t_singular/normal_lib.doc:71
../singular_texi/./d2t_singular/normal_lib.tex(,119) @end smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,120) @c ---end content normal---
../singular_texi/./d2t_singular/normal_lib.tex(,121) 
../singular_texi/./d2t_singular/normal_lib.tex(,122) @c ------------------- HomJJ -------------
../singular_texi/./d2t_singular/normal_lib.tex(,123) @node HomJJ, genus, normal, normal_lib
../singular_texi/./d2t_singular/normal_lib.tex(,124) @subsubsection HomJJ
../singular_texi/./d2t_singular/normal_lib.tex(,125) @cindex HomJJ
../singular_texi/./d2t_singular/normal_lib.tex(,126) @c ---content HomJJ---
../singular_texi/./d2t_singular/normal_lib.tex(,127) Procedure from library @code{normal.lib} (@pxref{normal_lib}).
../singular_texi/./d2t_singular/normal_lib.tex(,128) 
../singular_texi/./d2t_singular/normal_lib.tex(,129) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,130) @item @strong{Usage:}
../singular_texi/./d2t_singular/normal_lib.tex(,131) HomJJ (Li); Li = list: ideal SBid, ideal id, ideal J, poly p
../singular_texi/./d2t_singular/normal_lib.tex(,132) 
../singular_texi/./d2t_singular/normal_lib.tex(,133) @item @strong{Assume:}
../singular_texi/./d2t_singular/normal_lib.tex(,134) R = P/id, P = basering, a polynomial ring, id an ideal of P,
../singular_texi/./d2t_singular/normal_lib.tex(,135) @* SBid = standard basis of id,
../singular_texi/./d2t_singular/normal_lib.tex(,136) @* J = ideal of P containing the polynomial p,
../singular_texi/./d2t_singular/normal_lib.tex(,137) @* p = nonzero divisor of R
../singular_texi/./d2t_singular/normal_lib.tex(,138) 
../singular_texi/./d2t_singular/normal_lib.tex(,139) @item @strong{Compute:}
../singular_texi/./d2t_singular/normal_lib.tex(,140) Endomorphism ring End_R(J)=Hom_R(J,J) with its ring structure as
../singular_texi/./d2t_singular/normal_lib.tex(,141) affine ring, together with the canonical map R --> Hom_R(J,J),
../singular_texi/./d2t_singular/normal_lib.tex(,142) where R is the quotient ring of P modulo the standard basis SBid.
../singular_texi/./d2t_singular/normal_lib.tex(,143) 
../singular_texi/./d2t_singular/normal_lib.tex(,144) @item @strong{Return:}
../singular_texi/./d2t_singular/normal_lib.tex(,145) a list l of two objects
../singular_texi/./d2t_singular/normal_lib.tex(,146) @format
../singular_texi/./d2t_singular/normal_lib.tex(,147)          l[1] : a polynomial ring, containing two ideals, 'endid' and 'endphi'
../singular_texi/./d2t_singular/normal_lib.tex(,148)                such that l[1]/endid = Hom_R(J,J) and
../singular_texi/./d2t_singular/normal_lib.tex(,149)                endphi describes the canonical map R -> Hom_R(J,J)
../singular_texi/./d2t_singular/normal_lib.tex(,150)          l[2] : an integer which is 1 if phi is an isomorphism, 0 if not
../singular_texi/./d2t_singular/normal_lib.tex(,151)          l[3] : an integer, the contribution to delta
../singular_texi/./d2t_singular/normal_lib.tex(,152) @end format
../singular_texi/./d2t_singular/normal_lib.tex(,153) 
../singular_texi/./d2t_singular/normal_lib.tex(,154) @item @strong{Note:}
../singular_texi/./d2t_singular/normal_lib.tex(,155) printlevel >=1: display comments (default: printlevel=0)
../singular_texi/./d2t_singular/normal_lib.tex(,156) 
../singular_texi/./d2t_singular/normal_lib.tex(,157) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,158) @strong{Example:}
../singular_texi/./d2t_singular/normal_lib.tex(,159) @smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,160) @c computed example HomJJ d2t_singular/normal_lib.doc:128 
../singular_texi/./d2t_singular/normal_lib.tex(,161) LIB "normal.lib";
../singular_texi/./d2t_singular/normal_lib.tex(,162) ring r   = 0,(x,y),wp(2,3);
../singular_texi/./d2t_singular/normal_lib.tex(,163) ideal id = y^2-x^3;
../singular_texi/./d2t_singular/normal_lib.tex(,164) ideal J  = x,y;
../singular_texi/./d2t_singular/normal_lib.tex(,165) poly p   = x;
../singular_texi/./d2t_singular/normal_lib.tex(,166) list Li = std(id),id,J,p;
../singular_texi/./d2t_singular/normal_lib.tex(,167) list L   = HomJJ(Li);
../singular_texi/./d2t_singular/normal_lib.tex(,168) def end = L[1];    // defines ring L[1], containing ideals endid, endphi
../singular_texi/./d2t_singular/normal_lib.tex(,169) setring end;       // makes end the basering
../singular_texi/./d2t_singular/normal_lib.tex(,170) end;
../singular_texi/./d2t_singular/normal_lib.tex(,171) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/normal_lib.tex(,172) @expansion{} //   number of vars : 1
../singular_texi/./d2t_singular/normal_lib.tex(,173) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/normal_lib.tex(,174) @expansion{} //                  : names    T(1) 
../singular_texi/./d2t_singular/normal_lib.tex(,175) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/normal_lib.tex(,176) endid;             // end/endid is isomorphic to End(r/id) as ring
../singular_texi/./d2t_singular/normal_lib.tex(,177) @expansion{} endid[1]=0
../singular_texi/./d2t_singular/normal_lib.tex(,178) map psi = r,endphi;// defines the canonical map r/id -> End(r/id)
../singular_texi/./d2t_singular/normal_lib.tex(,179) psi;
../singular_texi/./d2t_singular/normal_lib.tex(,180) @expansion{} psi[1]=T(1)^2
../singular_texi/./d2t_singular/normal_lib.tex(,181) @expansion{} psi[2]=T(1)^3
../singular_texi/./d2t_singular/normal_lib.tex(,182) @c end example HomJJ d2t_singular/normal_lib.doc:128
../singular_texi/./d2t_singular/normal_lib.tex(,183) @end smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,184) @c ---end content HomJJ---
../singular_texi/./d2t_singular/normal_lib.tex(,185) 
../singular_texi/./d2t_singular/normal_lib.tex(,186) @c ------------------- genus -------------
../singular_texi/./d2t_singular/normal_lib.tex(,187) @node genus, deltaLoc, HomJJ, normal_lib
../singular_texi/./d2t_singular/normal_lib.tex(,188) @subsubsection genus
../singular_texi/./d2t_singular/normal_lib.tex(,189) @cindex genus
../singular_texi/./d2t_singular/normal_lib.tex(,190) @c ---content genus---
../singular_texi/./d2t_singular/normal_lib.tex(,191) Procedure from library @code{normal.lib} (@pxref{normal_lib}).
../singular_texi/./d2t_singular/normal_lib.tex(,192) 
../singular_texi/./d2t_singular/normal_lib.tex(,193) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,194) @item @strong{Usage:}
../singular_texi/./d2t_singular/normal_lib.tex(,195) genus(I) or genus(i,1); I a 1-dimensional ideal
../singular_texi/./d2t_singular/normal_lib.tex(,196) 
../singular_texi/./d2t_singular/normal_lib.tex(,197) @item @strong{Return:}
../singular_texi/./d2t_singular/normal_lib.tex(,198) an integer, the geometric genus p_g = p_a - delta of the projective
../singular_texi/./d2t_singular/normal_lib.tex(,199) curve defined by I, where p_a is the arithmetic genus.
../singular_texi/./d2t_singular/normal_lib.tex(,200) 
../singular_texi/./d2t_singular/normal_lib.tex(,201) @item @strong{Note:}
../singular_texi/./d2t_singular/normal_lib.tex(,202) delta is the sum of all local delta-invariants of the singularities,
../singular_texi/./d2t_singular/normal_lib.tex(,203) i.e. dim(R'/R), R' the normalization of the local ring R of the
../singular_texi/./d2t_singular/normal_lib.tex(,204) singularity.
../singular_texi/./d2t_singular/normal_lib.tex(,205) @*genus(i,1) uses the normalization to compute delta. Usually this
../singular_texi/./d2t_singular/normal_lib.tex(,206) is slow but sometimes not.
../singular_texi/./d2t_singular/normal_lib.tex(,207) 
../singular_texi/./d2t_singular/normal_lib.tex(,208) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,209) @strong{Example:}
../singular_texi/./d2t_singular/normal_lib.tex(,210) @smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,211) @c computed example genus d2t_singular/normal_lib.doc:171 
../singular_texi/./d2t_singular/normal_lib.tex(,212) LIB "normal.lib";
../singular_texi/./d2t_singular/normal_lib.tex(,213) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/normal_lib.tex(,214) ideal i=y^9 - x^2*(x - 1)^9;
../singular_texi/./d2t_singular/normal_lib.tex(,215) genus(i);
../singular_texi/./d2t_singular/normal_lib.tex(,216) @expansion{} 0
../singular_texi/./d2t_singular/normal_lib.tex(,217) @c end example genus d2t_singular/normal_lib.doc:171
../singular_texi/./d2t_singular/normal_lib.tex(,218) @end smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,219) @c ---end content genus---
../singular_texi/./d2t_singular/normal_lib.tex(,220) 
../singular_texi/./d2t_singular/normal_lib.tex(,221) @c ------------------- deltaLoc -------------
../singular_texi/./d2t_singular/normal_lib.tex(,222) @node deltaLoc,, genus, normal_lib
../singular_texi/./d2t_singular/normal_lib.tex(,223) @subsubsection deltaLoc
../singular_texi/./d2t_singular/normal_lib.tex(,224) @cindex deltaLoc
../singular_texi/./d2t_singular/normal_lib.tex(,225) @c ---content deltaLoc---
../singular_texi/./d2t_singular/normal_lib.tex(,226) Procedure from library @code{normal.lib} (@pxref{normal_lib}).
../singular_texi/./d2t_singular/normal_lib.tex(,227) 
../singular_texi/./d2t_singular/normal_lib.tex(,228) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,229) @item @strong{Usage:}
../singular_texi/./d2t_singular/normal_lib.tex(,230) deltaLoc(f,J); f poly, J ideal
../singular_texi/./d2t_singular/normal_lib.tex(,231) 
../singular_texi/./d2t_singular/normal_lib.tex(,232) @item @strong{Assume:}
../singular_texi/./d2t_singular/normal_lib.tex(,233) f is reduced bivariate polynomial; basering has exactly two variables;
../singular_texi/./d2t_singular/normal_lib.tex(,234) J is irreducible prime component of the singular locus of f (e.g., one
../singular_texi/./d2t_singular/normal_lib.tex(,235) entry of the output of @code{minAssGTZ(I);}, I = <f,jacob(f)>).
../singular_texi/./d2t_singular/normal_lib.tex(,236) 
../singular_texi/./d2t_singular/normal_lib.tex(,237) @item @strong{Return:}
../singular_texi/./d2t_singular/normal_lib.tex(,238) list L:
../singular_texi/./d2t_singular/normal_lib.tex(,239) 
../singular_texi/./d2t_singular/normal_lib.tex(,240) @table @asis
../singular_texi/./d2t_singular/normal_lib.tex(,241) @item @code{L[1]}; int:
../singular_texi/./d2t_singular/normal_lib.tex(,242)          the sum of (local) delta invariants of f at the (conjugated) singular
../singular_texi/./d2t_singular/normal_lib.tex(,243)          points given by J.
../singular_texi/./d2t_singular/normal_lib.tex(,244) @item @code{L[2]}; int:
../singular_texi/./d2t_singular/normal_lib.tex(,245)          the sum of (local) Tjurina numbers of f at the (conjugated) singular
../singular_texi/./d2t_singular/normal_lib.tex(,246)          points given by J.
../singular_texi/./d2t_singular/normal_lib.tex(,247) @item @code{L[3]}; int:
../singular_texi/./d2t_singular/normal_lib.tex(,248)          the sum of (local) number of branches of f at the (conjugated) 
../singular_texi/./d2t_singular/normal_lib.tex(,249)          singular points given by J.
../singular_texi/./d2t_singular/normal_lib.tex(,250) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,251) 
../singular_texi/./d2t_singular/normal_lib.tex(,252) @item @strong{Note:}
../singular_texi/./d2t_singular/normal_lib.tex(,253) procedure makes use of @code{execute}; increasing printlevel displays
../singular_texi/./d2t_singular/normal_lib.tex(,254) more comments (default: printlevel=0).
../singular_texi/./d2t_singular/normal_lib.tex(,255) 
../singular_texi/./d2t_singular/normal_lib.tex(,256) @cindex delta invariant
../singular_texi/./d2t_singular/normal_lib.tex(,257) @cindex Tjurina number
../singular_texi/./d2t_singular/normal_lib.tex(,258) @end table
../singular_texi/./d2t_singular/normal_lib.tex(,259) @strong{Example:}
../singular_texi/./d2t_singular/normal_lib.tex(,260) @smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,261) @c computed example deltaLoc d2t_singular/normal_lib.doc:220 
../singular_texi/./d2t_singular/normal_lib.tex(,262) LIB "normal.lib";
../singular_texi/./d2t_singular/normal_lib.tex(,263) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/normal_lib.tex(,264) poly f=(x2+y^2-1)^3 +27x2y2;
../singular_texi/./d2t_singular/normal_lib.tex(,265) ideal I=f,jacob(f);
../singular_texi/./d2t_singular/normal_lib.tex(,266) I=std(I);
../singular_texi/./d2t_singular/normal_lib.tex(,267) list qr=minAssGTZ(I);
../singular_texi/./d2t_singular/normal_lib.tex(,268) size(qr);
../singular_texi/./d2t_singular/normal_lib.tex(,269) @expansion{} 6
../singular_texi/./d2t_singular/normal_lib.tex(,270) // each component of the singular locus either describes a cusp or a pair
../singular_texi/./d2t_singular/normal_lib.tex(,271) // of conjugated nodes:
../singular_texi/./d2t_singular/normal_lib.tex(,272) deltaLoc(f,qr[1]); 
../singular_texi/./d2t_singular/normal_lib.tex(,273) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,274) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,275) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,276) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,277) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,278) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,279) deltaLoc(f,qr[2]); 
../singular_texi/./d2t_singular/normal_lib.tex(,280) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,281) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,282) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,283) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,284) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,285) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,286) deltaLoc(f,qr[3]); 
../singular_texi/./d2t_singular/normal_lib.tex(,287) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,288) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,289) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,290) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,291) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,292) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,293) deltaLoc(f,qr[4]); 
../singular_texi/./d2t_singular/normal_lib.tex(,294) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,295) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,296) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,297) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,298) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,299) @expansion{}    1
../singular_texi/./d2t_singular/normal_lib.tex(,300) deltaLoc(f,qr[5]); 
../singular_texi/./d2t_singular/normal_lib.tex(,301) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,302) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,303) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,304) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,305) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,306) @expansion{}    4
../singular_texi/./d2t_singular/normal_lib.tex(,307) deltaLoc(f,qr[6]);
../singular_texi/./d2t_singular/normal_lib.tex(,308) @expansion{} [1]:
../singular_texi/./d2t_singular/normal_lib.tex(,309) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,310) @expansion{} [2]:
../singular_texi/./d2t_singular/normal_lib.tex(,311) @expansion{}    2
../singular_texi/./d2t_singular/normal_lib.tex(,312) @expansion{} [3]:
../singular_texi/./d2t_singular/normal_lib.tex(,313) @expansion{}    4
../singular_texi/./d2t_singular/normal_lib.tex(,314) @c end example deltaLoc d2t_singular/normal_lib.doc:220
../singular_texi/./d2t_singular/normal_lib.tex(,315) @end smallexample
../singular_texi/./d2t_singular/normal_lib.tex(,316) @c inserted refs from d2t_singular/normal_lib.doc:238
../singular_texi/./d2t_singular/normal_lib.tex(,325) @strong{See also:}
../singular_texi/./d2t_singular/normal_lib.tex(,326) @ref{delta};
../singular_texi/./d2t_singular/normal_lib.tex(,327) @ref{tjurina}.
../singular_texi/./d2t_singular/normal_lib.tex(,329) @c end inserted refs from d2t_singular/normal_lib.doc:238
../singular_texi/./d2t_singular/normal_lib.tex(,330) 
../singular_texi/./d2t_singular/normal_lib.tex(,331) @c ---end content deltaLoc---
../singular_texi/singular.tex(,401) @c ----------------------------------------------------------
../singular_texi/singular.tex(,402) @node primdec_lib, primitiv_lib, normal_lib, Commutative algebra
../singular_texi/singular.tex(,403) @subsection primdec_lib
../singular_texi/singular.tex(,404) @c include of docu for primdec.lib
../singular_texi/./d2t_singular/primdec_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/primdec_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/primdec_lib.doc
../singular_texi/./d2t_singular/primdec_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/primdec_lib.doc INSTEAD
../singular_texi/./d2t_singular/primdec_lib.tex(,4) @c library version: (1.98.2.16,2003/06/23)
../singular_texi/./d2t_singular/primdec_lib.tex(,5) @c library file: ../Singular/LIB/primdec.lib
../singular_texi/./d2t_singular/primdec_lib.tex(,6) @cindex primdec.lib
../singular_texi/./d2t_singular/primdec_lib.tex(,7) @cindex primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/primdec_lib.tex(,10) primdec.lib
../singular_texi/./d2t_singular/primdec_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/primdec_lib.tex(,12)    Primary Decomposition and Radical of Ideals
../singular_texi/./d2t_singular/primdec_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/primdec_lib.tex(,14) Gerhard Pfister, pfister@@mathematik.uni-kl.de (GTZ)
../singular_texi/./d2t_singular/primdec_lib.tex(,15) @* Wolfram Decker, decker@@math.uni-sb.de (SY)
../singular_texi/./d2t_singular/primdec_lib.tex(,16) @* Hans Schoenemann, hannes@@mathematik.uni-kl.de (SY)
../singular_texi/./d2t_singular/primdec_lib.tex(,17) 
../singular_texi/./d2t_singular/primdec_lib.tex(,18) @item @strong{Overview:}
../singular_texi/./d2t_singular/primdec_lib.tex(,19) Algorithms for primary decomposition based on the ideas of
../singular_texi/./d2t_singular/primdec_lib.tex(,20) Gianni, Trager and Zacharias (implementation by Gerhard Pfister),
../singular_texi/./d2t_singular/primdec_lib.tex(,21) respectively based on the ideas of Shimoyama and Yokoyama (implementation
../singular_texi/./d2t_singular/primdec_lib.tex(,22) by Wolfram Decker and Hans Schoenemann).
../singular_texi/./d2t_singular/primdec_lib.tex(,23) @* The procedures are implemented to be used in characteristic 0.
../singular_texi/./d2t_singular/primdec_lib.tex(,24) @* They also work in positive characteristic >> 0.
../singular_texi/./d2t_singular/primdec_lib.tex(,25) @* In small characteristic and for algebraic extensions, primdecGTZ
../singular_texi/./d2t_singular/primdec_lib.tex(,26) may not terminate.
../singular_texi/./d2t_singular/primdec_lib.tex(,27) @*Algorithms for the computation of the radical based on the ideas of
../singular_texi/./d2t_singular/primdec_lib.tex(,28) Krick, Logar and Kemper (implementation by Gerhard Pfister).
../singular_texi/./d2t_singular/primdec_lib.tex(,29) 
../singular_texi/./d2t_singular/primdec_lib.tex(,30) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,31) 
../singular_texi/./d2t_singular/primdec_lib.tex(,32) @strong{Procedures:}
../singular_texi/./d2t_singular/primdec_lib.tex(,33) @menu
../singular_texi/./d2t_singular/primdec_lib.tex(,34) * Ann:: annihilator of R^n/M, R=basering, M in R^n
../singular_texi/./d2t_singular/primdec_lib.tex(,35) * primdecGTZ:: complete primary decomposition via Gianni,Trager,Zacharias
../singular_texi/./d2t_singular/primdec_lib.tex(,36) * primdecSY:: complete primary decomposition via Shimoyama-Yokoyama
../singular_texi/./d2t_singular/primdec_lib.tex(,37) * minAssGTZ:: the minimal associated primes via Gianni,Trager,Zacharias
../singular_texi/./d2t_singular/primdec_lib.tex(,38) * minAssChar:: the minimal associated primes using characteristic sets
../singular_texi/./d2t_singular/primdec_lib.tex(,39) * testPrimary:: tests the result of the primary decomposition
../singular_texi/./d2t_singular/primdec_lib.tex(,40) * radical:: computes the radical of I via Krick/Logar and Kemper
../singular_texi/./d2t_singular/primdec_lib.tex(,41) * radicalEHV:: computes the radical of I via Eisenbud,Huneke,Vasconcelos
../singular_texi/./d2t_singular/primdec_lib.tex(,42) * equiRadical:: the radical of the equidimensional part of the ideal I
../singular_texi/./d2t_singular/primdec_lib.tex(,43) * prepareAss:: list of radicals of the equidimensional components of I
../singular_texi/./d2t_singular/primdec_lib.tex(,44) * equidim:: weak equidimensional decomposition of I
../singular_texi/./d2t_singular/primdec_lib.tex(,45) * equidimMax:: equidimensional locus of I
../singular_texi/./d2t_singular/primdec_lib.tex(,46) * equidimMaxEHV:: equidimensional locus of I via Eisenbud,Huneke,Vasconcelos
../singular_texi/./d2t_singular/primdec_lib.tex(,47) * zerodec:: zerodimensional decomposition via Monico
../singular_texi/./d2t_singular/primdec_lib.tex(,48) @end menu
../singular_texi/./d2t_singular/primdec_lib.tex(,49) @c ---end content LibInfo---
../singular_texi/./d2t_singular/primdec_lib.tex(,50) 
../singular_texi/./d2t_singular/primdec_lib.tex(,51) @c ------------------- Ann -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,52) @node Ann, primdecGTZ,, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,53) @subsubsection Ann
../singular_texi/./d2t_singular/primdec_lib.tex(,54) @cindex Ann
../singular_texi/./d2t_singular/primdec_lib.tex(,55) @c ---content Ann---
../singular_texi/./d2t_singular/primdec_lib.tex(,56) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,57) 
../singular_texi/./d2t_singular/primdec_lib.tex(,58) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,59) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,60) @c ---end content Ann---
../singular_texi/./d2t_singular/primdec_lib.tex(,61) 
../singular_texi/./d2t_singular/primdec_lib.tex(,62) @c ------------------- primdecGTZ -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,63) @node primdecGTZ, primdecSY, Ann, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,64) @subsubsection primdecGTZ
../singular_texi/./d2t_singular/primdec_lib.tex(,65) @cindex primdecGTZ
../singular_texi/./d2t_singular/primdec_lib.tex(,66) @c ---content primdecGTZ---
../singular_texi/./d2t_singular/primdec_lib.tex(,67) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,68) 
../singular_texi/./d2t_singular/primdec_lib.tex(,69) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,70) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,71) primdecGTZ(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,72) 
../singular_texi/./d2t_singular/primdec_lib.tex(,73) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,74) a list pr of primary ideals and their associated primes:
../singular_texi/./d2t_singular/primdec_lib.tex(,75) @format
../singular_texi/./d2t_singular/primdec_lib.tex(,76)    pr[i][1]   the i-th primary component,
../singular_texi/./d2t_singular/primdec_lib.tex(,77)    pr[i][2]   the i-th prime component.
../singular_texi/./d2t_singular/primdec_lib.tex(,78) @end format
../singular_texi/./d2t_singular/primdec_lib.tex(,79) 
../singular_texi/./d2t_singular/primdec_lib.tex(,80) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,81) Algorithm of Gianni/Trager/Zacharias.
../singular_texi/./d2t_singular/primdec_lib.tex(,82) @*Designed for characteristic 0, works also in char k > 0, if it
../singular_texi/./d2t_singular/primdec_lib.tex(,83) terminates (may result in an infinite loop in small characteristic!)
../singular_texi/./d2t_singular/primdec_lib.tex(,84) 
../singular_texi/./d2t_singular/primdec_lib.tex(,85) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,86) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,87) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,88) @c reused example primdecGTZ d2t_singular/primdec_lib.doc:86 
../singular_texi/./d2t_singular/primdec_lib.tex(,89) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,90) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/primdec_lib.tex(,91) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,92) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,93) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,94) list pr = primdecGTZ(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,95) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,96) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,97) @expansion{}    [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,98) @expansion{}       _[1]=z6+4z3+4
../singular_texi/./d2t_singular/primdec_lib.tex(,99) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,100) @expansion{}    [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,101) @expansion{}       _[1]=z3+2
../singular_texi/./d2t_singular/primdec_lib.tex(,102) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,103) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,104) @expansion{}    [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,105) @expansion{}       _[1]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,106) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,107) @expansion{}    [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,108) @expansion{}       _[1]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,109) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,110) @c end example primdecGTZ d2t_singular/primdec_lib.doc:86
../singular_texi/./d2t_singular/primdec_lib.tex(,111) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,112) @c ---end content primdecGTZ---
../singular_texi/./d2t_singular/primdec_lib.tex(,113) 
../singular_texi/./d2t_singular/primdec_lib.tex(,114) @c ------------------- primdecSY -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,115) @node primdecSY, minAssGTZ, primdecGTZ, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,116) @subsubsection primdecSY
../singular_texi/./d2t_singular/primdec_lib.tex(,117) @cindex primdecSY
../singular_texi/./d2t_singular/primdec_lib.tex(,118) @c ---content primdecSY---
../singular_texi/./d2t_singular/primdec_lib.tex(,119) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,120) 
../singular_texi/./d2t_singular/primdec_lib.tex(,121) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,122) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,123) primdecSY(i); i ideal, c int
../singular_texi/./d2t_singular/primdec_lib.tex(,124) 
../singular_texi/./d2t_singular/primdec_lib.tex(,125) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,126) a list pr of primary ideals and their associated primes:
../singular_texi/./d2t_singular/primdec_lib.tex(,127) @format
../singular_texi/./d2t_singular/primdec_lib.tex(,128)    pr[i][1]   the i-th primary component,
../singular_texi/./d2t_singular/primdec_lib.tex(,129)    pr[i][2]   the i-th prime component.
../singular_texi/./d2t_singular/primdec_lib.tex(,130) @end format
../singular_texi/./d2t_singular/primdec_lib.tex(,131) 
../singular_texi/./d2t_singular/primdec_lib.tex(,132) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,133) Algorithm of Shimoyama/Yokoyama.
../singular_texi/./d2t_singular/primdec_lib.tex(,134) @format
../singular_texi/./d2t_singular/primdec_lib.tex(,135)    if c=0,  the given ordering of the variables is used,
../singular_texi/./d2t_singular/primdec_lib.tex(,136)    if c=1,  minAssChar tries to use an optimal ordering,
../singular_texi/./d2t_singular/primdec_lib.tex(,137)    if c=2,  minAssGTZ is used,
../singular_texi/./d2t_singular/primdec_lib.tex(,138)    if c=3,  minAssGTZ and facstd are used.
../singular_texi/./d2t_singular/primdec_lib.tex(,139) @end format
../singular_texi/./d2t_singular/primdec_lib.tex(,140) 
../singular_texi/./d2t_singular/primdec_lib.tex(,141) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,142) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,143) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,144) @c reused example primdecSY d2t_singular/primdec_lib.doc:128 
../singular_texi/./d2t_singular/primdec_lib.tex(,145) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,146) ring  r = 0,(x,y,z),lp;
../singular_texi/./d2t_singular/primdec_lib.tex(,147) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,148) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,149) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,150) list pr = primdecSY(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,151) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,152) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,153) @expansion{}    [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,154) @expansion{}       _[1]=z6+4z3+4
../singular_texi/./d2t_singular/primdec_lib.tex(,155) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,156) @expansion{}    [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,157) @expansion{}       _[1]=z3+2
../singular_texi/./d2t_singular/primdec_lib.tex(,158) @expansion{}       _[2]=y-z2
../singular_texi/./d2t_singular/primdec_lib.tex(,159) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,160) @expansion{}    [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,161) @expansion{}       _[1]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,162) @expansion{}       _[2]=y+1
../singular_texi/./d2t_singular/primdec_lib.tex(,163) @expansion{}    [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,164) @expansion{}       _[1]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,165) @expansion{}       _[2]=y+1
../singular_texi/./d2t_singular/primdec_lib.tex(,166) @c end example primdecSY d2t_singular/primdec_lib.doc:128
../singular_texi/./d2t_singular/primdec_lib.tex(,167) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,168) @c ---end content primdecSY---
../singular_texi/./d2t_singular/primdec_lib.tex(,169) 
../singular_texi/./d2t_singular/primdec_lib.tex(,170) @c ------------------- minAssGTZ -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,171) @node minAssGTZ, minAssChar, primdecSY, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,172) @subsubsection minAssGTZ
../singular_texi/./d2t_singular/primdec_lib.tex(,173) @cindex minAssGTZ
../singular_texi/./d2t_singular/primdec_lib.tex(,174) @c ---content minAssGTZ---
../singular_texi/./d2t_singular/primdec_lib.tex(,175) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,176) 
../singular_texi/./d2t_singular/primdec_lib.tex(,177) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,178) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,179) minAssGTZ(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,180) @*minAssGTZ(i,1); i ideal does not use the factorizing Groebner
../singular_texi/./d2t_singular/primdec_lib.tex(,181) 
../singular_texi/./d2t_singular/primdec_lib.tex(,182) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,183) a list, the minimal associated prime ideals of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,184) 
../singular_texi/./d2t_singular/primdec_lib.tex(,185) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,186) Designed for characteristic 0, works also in char k > 0 based
../singular_texi/./d2t_singular/primdec_lib.tex(,187) on an algorithm of Yokoyama
../singular_texi/./d2t_singular/primdec_lib.tex(,188) 
../singular_texi/./d2t_singular/primdec_lib.tex(,189) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,190) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,191) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,192) @c reused example minAssGTZ d2t_singular/primdec_lib.doc:162 
../singular_texi/./d2t_singular/primdec_lib.tex(,193) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,194) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,195) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,196) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,197) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,198) list pr = minAssGTZ(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,199) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,200) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,201) @expansion{}    _[1]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,202) @expansion{}    _[2]=-z2+y
../singular_texi/./d2t_singular/primdec_lib.tex(,203) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,204) @expansion{}    _[1]=z3+2
../singular_texi/./d2t_singular/primdec_lib.tex(,205) @expansion{}    _[2]=-z2+y
../singular_texi/./d2t_singular/primdec_lib.tex(,206) @c end example minAssGTZ d2t_singular/primdec_lib.doc:162
../singular_texi/./d2t_singular/primdec_lib.tex(,207) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,208) @c ---end content minAssGTZ---
../singular_texi/./d2t_singular/primdec_lib.tex(,209) 
../singular_texi/./d2t_singular/primdec_lib.tex(,210) @c ------------------- minAssChar -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,211) @node minAssChar, testPrimary, minAssGTZ, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,212) @subsubsection minAssChar
../singular_texi/./d2t_singular/primdec_lib.tex(,213) @cindex minAssChar
../singular_texi/./d2t_singular/primdec_lib.tex(,214) @c ---content minAssChar---
../singular_texi/./d2t_singular/primdec_lib.tex(,215) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,216) 
../singular_texi/./d2t_singular/primdec_lib.tex(,217) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,218) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,219) minAssChar(i[,c]); i ideal, c int.
../singular_texi/./d2t_singular/primdec_lib.tex(,220) 
../singular_texi/./d2t_singular/primdec_lib.tex(,221) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,222) list, the minimal associated prime ideals of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,223) 
../singular_texi/./d2t_singular/primdec_lib.tex(,224) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,225) If c=0, the given ordering of the variables is used. @*
../singular_texi/./d2t_singular/primdec_lib.tex(,226) Otherwise, the system tries to find an optimal ordering,
../singular_texi/./d2t_singular/primdec_lib.tex(,227) which in some cases may considerably speed up the algorithm. @*
../singular_texi/./d2t_singular/primdec_lib.tex(,228) Due to a bug in the factorization, the result may be not completely
../singular_texi/./d2t_singular/primdec_lib.tex(,229) decomposed in small characteristic.
../singular_texi/./d2t_singular/primdec_lib.tex(,230) 
../singular_texi/./d2t_singular/primdec_lib.tex(,231) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,232) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,233) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,234) @c reused example minAssChar d2t_singular/primdec_lib.doc:198 
../singular_texi/./d2t_singular/primdec_lib.tex(,235) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,236) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,237) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,238) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,239) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,240) list pr = minAssChar(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,241) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,242) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,243) @expansion{}    _[1]=y+1
../singular_texi/./d2t_singular/primdec_lib.tex(,244) @expansion{}    _[2]=z2+1
../singular_texi/./d2t_singular/primdec_lib.tex(,245) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,246) @expansion{}    _[1]=z2-y
../singular_texi/./d2t_singular/primdec_lib.tex(,247) @expansion{}    _[2]=yz+2
../singular_texi/./d2t_singular/primdec_lib.tex(,248) @expansion{}    _[3]=y2+2z
../singular_texi/./d2t_singular/primdec_lib.tex(,249) @c end example minAssChar d2t_singular/primdec_lib.doc:198
../singular_texi/./d2t_singular/primdec_lib.tex(,250) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,251) @c ---end content minAssChar---
../singular_texi/./d2t_singular/primdec_lib.tex(,252) 
../singular_texi/./d2t_singular/primdec_lib.tex(,253) @c ------------------- testPrimary -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,254) @node testPrimary, radical, minAssChar, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,255) @subsubsection testPrimary
../singular_texi/./d2t_singular/primdec_lib.tex(,256) @cindex testPrimary
../singular_texi/./d2t_singular/primdec_lib.tex(,257) @c ---content testPrimary---
../singular_texi/./d2t_singular/primdec_lib.tex(,258) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,259) 
../singular_texi/./d2t_singular/primdec_lib.tex(,260) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,261) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,262) testPrimary(pr,k); pr a list, k an ideal.
../singular_texi/./d2t_singular/primdec_lib.tex(,263) 
../singular_texi/./d2t_singular/primdec_lib.tex(,264) @item @strong{Assume:}
../singular_texi/./d2t_singular/primdec_lib.tex(,265) pr is the result of primdecGTZ(k) or primdecSY(k).
../singular_texi/./d2t_singular/primdec_lib.tex(,266) 
../singular_texi/./d2t_singular/primdec_lib.tex(,267) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,268) int, 1 if the intersection of the ideals in pr is k, 0 if not
../singular_texi/./d2t_singular/primdec_lib.tex(,269) 
../singular_texi/./d2t_singular/primdec_lib.tex(,270) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,271) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,272) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,273) @c reused example testPrimary d2t_singular/primdec_lib.doc:230 
../singular_texi/./d2t_singular/primdec_lib.tex(,274) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,275) ring  r = 32003,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,276) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,277) poly  q = z4+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,278) ideal i = p^2*q^3,(y-z3)^3,(x-yz+z4)^4;
../singular_texi/./d2t_singular/primdec_lib.tex(,279) list pr = primdecGTZ(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,280) testPrimary(pr,i);
../singular_texi/./d2t_singular/primdec_lib.tex(,281) @expansion{} 1
../singular_texi/./d2t_singular/primdec_lib.tex(,282) @c end example testPrimary d2t_singular/primdec_lib.doc:230
../singular_texi/./d2t_singular/primdec_lib.tex(,283) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,284) @c ---end content testPrimary---
../singular_texi/./d2t_singular/primdec_lib.tex(,285) 
../singular_texi/./d2t_singular/primdec_lib.tex(,286) @c ------------------- radical -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,287) @node radical, radicalEHV, testPrimary, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,288) @subsubsection radical
../singular_texi/./d2t_singular/primdec_lib.tex(,289) @cindex radical
../singular_texi/./d2t_singular/primdec_lib.tex(,290) @c ---content radical---
../singular_texi/./d2t_singular/primdec_lib.tex(,291) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,292) 
../singular_texi/./d2t_singular/primdec_lib.tex(,293) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,294) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,295) radical(i); i ideal.
../singular_texi/./d2t_singular/primdec_lib.tex(,296) 
../singular_texi/./d2t_singular/primdec_lib.tex(,297) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,298) ideal, the radical of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,299) 
../singular_texi/./d2t_singular/primdec_lib.tex(,300) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,301) A combination of the algorithms of Krick/Logar and Kemper is used.
../singular_texi/./d2t_singular/primdec_lib.tex(,302) Works also in positive characteristic (Kempers algorithm).
../singular_texi/./d2t_singular/primdec_lib.tex(,303) 
../singular_texi/./d2t_singular/primdec_lib.tex(,304) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,305) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,306) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,307) @c reused example radical d2t_singular/primdec_lib.doc:263 
../singular_texi/./d2t_singular/primdec_lib.tex(,308) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,309) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,310) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,311) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,312) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,313) ideal pr= radical(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,314) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,315) @expansion{} pr[1]=z2-y
../singular_texi/./d2t_singular/primdec_lib.tex(,316) @expansion{} pr[2]=y2z+yz+2y+2
../singular_texi/./d2t_singular/primdec_lib.tex(,317) @c end example radical d2t_singular/primdec_lib.doc:263
../singular_texi/./d2t_singular/primdec_lib.tex(,318) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,319) @c ---end content radical---
../singular_texi/./d2t_singular/primdec_lib.tex(,320) 
../singular_texi/./d2t_singular/primdec_lib.tex(,321) @c ------------------- radicalEHV -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,322) @node radicalEHV, equiRadical, radical, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,323) @subsubsection radicalEHV
../singular_texi/./d2t_singular/primdec_lib.tex(,324) @cindex radicalEHV
../singular_texi/./d2t_singular/primdec_lib.tex(,325) @c ---content radicalEHV---
../singular_texi/./d2t_singular/primdec_lib.tex(,326) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,327) 
../singular_texi/./d2t_singular/primdec_lib.tex(,328) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,329) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,330) radicalEHV(i); i ideal.
../singular_texi/./d2t_singular/primdec_lib.tex(,331) 
../singular_texi/./d2t_singular/primdec_lib.tex(,332) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,333) ideal, the radical of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,334) 
../singular_texi/./d2t_singular/primdec_lib.tex(,335) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,336) Uses the algorithm of Eisenbud/Huneke/Vasconcelos, which
../singular_texi/./d2t_singular/primdec_lib.tex(,337) reduces the computation to the complete intersection case,
../singular_texi/./d2t_singular/primdec_lib.tex(,338) by taking, in the general case, a generic linear combination
../singular_texi/./d2t_singular/primdec_lib.tex(,339) of the input.
../singular_texi/./d2t_singular/primdec_lib.tex(,340) @*Works only in characteristic 0 or p large.
../singular_texi/./d2t_singular/primdec_lib.tex(,341) 
../singular_texi/./d2t_singular/primdec_lib.tex(,342) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,343) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,344) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,345) @c reused example radicalEHV d2t_singular/primdec_lib.doc:299 
../singular_texi/./d2t_singular/primdec_lib.tex(,346) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,347) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,348) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,349) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,350) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,351) ideal pr= radicalEHV(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,352) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,353) @expansion{} pr[1]=z2-y
../singular_texi/./d2t_singular/primdec_lib.tex(,354) @expansion{} pr[2]=y2z+yz+2y+2
../singular_texi/./d2t_singular/primdec_lib.tex(,355) @expansion{} pr[3]=y3+y2+2yz+2z
../singular_texi/./d2t_singular/primdec_lib.tex(,356) @c end example radicalEHV d2t_singular/primdec_lib.doc:299
../singular_texi/./d2t_singular/primdec_lib.tex(,357) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,358) @c ---end content radicalEHV---
../singular_texi/./d2t_singular/primdec_lib.tex(,359) 
../singular_texi/./d2t_singular/primdec_lib.tex(,360) @c ------------------- equiRadical -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,361) @node equiRadical, prepareAss, radicalEHV, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,362) @subsubsection equiRadical
../singular_texi/./d2t_singular/primdec_lib.tex(,363) @cindex equiRadical
../singular_texi/./d2t_singular/primdec_lib.tex(,364) @c ---content equiRadical---
../singular_texi/./d2t_singular/primdec_lib.tex(,365) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,366) 
../singular_texi/./d2t_singular/primdec_lib.tex(,367) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,368) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,369) equiRadical(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,370) 
../singular_texi/./d2t_singular/primdec_lib.tex(,371) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,372) ideal, intersection of associated primes of i of maximal dimension.
../singular_texi/./d2t_singular/primdec_lib.tex(,373) 
../singular_texi/./d2t_singular/primdec_lib.tex(,374) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,375) A combination of the algorithms of Krick/Logar and Kemper is used.
../singular_texi/./d2t_singular/primdec_lib.tex(,376) Works also in positive characteristic (Kempers algorithm).
../singular_texi/./d2t_singular/primdec_lib.tex(,377) 
../singular_texi/./d2t_singular/primdec_lib.tex(,378) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,379) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,380) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,381) @c reused example equiRadical d2t_singular/primdec_lib.doc:332 
../singular_texi/./d2t_singular/primdec_lib.tex(,382) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,383) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,384) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,385) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,386) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,387) ideal pr= equiRadical(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,388) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,389) @expansion{} pr[1]=z2-y
../singular_texi/./d2t_singular/primdec_lib.tex(,390) @expansion{} pr[2]=y2z+yz+2y+2
../singular_texi/./d2t_singular/primdec_lib.tex(,391) @c end example equiRadical d2t_singular/primdec_lib.doc:332
../singular_texi/./d2t_singular/primdec_lib.tex(,392) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,393) @c ---end content equiRadical---
../singular_texi/./d2t_singular/primdec_lib.tex(,394) 
../singular_texi/./d2t_singular/primdec_lib.tex(,395) @c ------------------- prepareAss -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,396) @node prepareAss, equidim, equiRadical, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,397) @subsubsection prepareAss
../singular_texi/./d2t_singular/primdec_lib.tex(,398) @cindex prepareAss
../singular_texi/./d2t_singular/primdec_lib.tex(,399) @c ---content prepareAss---
../singular_texi/./d2t_singular/primdec_lib.tex(,400) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,401) 
../singular_texi/./d2t_singular/primdec_lib.tex(,402) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,403) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,404) prepareAss(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,405) 
../singular_texi/./d2t_singular/primdec_lib.tex(,406) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,407) list, the radicals of the maximal dimensional components of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,408) 
../singular_texi/./d2t_singular/primdec_lib.tex(,409) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,410) Uses algorithm of Eisenbud/Huneke/Vasconcelos.
../singular_texi/./d2t_singular/primdec_lib.tex(,411) 
../singular_texi/./d2t_singular/primdec_lib.tex(,412) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,413) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,414) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,415) @c reused example prepareAss d2t_singular/primdec_lib.doc:364 
../singular_texi/./d2t_singular/primdec_lib.tex(,416) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,417) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,418) poly  p = z2+1;
../singular_texi/./d2t_singular/primdec_lib.tex(,419) poly  q = z3+2;
../singular_texi/./d2t_singular/primdec_lib.tex(,420) ideal i = p*q^2,y-z2;
../singular_texi/./d2t_singular/primdec_lib.tex(,421) list pr = prepareAss(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,422) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,423) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,424) @expansion{}    _[1]=z2-y
../singular_texi/./d2t_singular/primdec_lib.tex(,425) @expansion{}    _[2]=y2z+yz+2y+2
../singular_texi/./d2t_singular/primdec_lib.tex(,426) @c end example prepareAss d2t_singular/primdec_lib.doc:364
../singular_texi/./d2t_singular/primdec_lib.tex(,427) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,428) @c ---end content prepareAss---
../singular_texi/./d2t_singular/primdec_lib.tex(,429) 
../singular_texi/./d2t_singular/primdec_lib.tex(,430) @c ------------------- equidim -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,431) @node equidim, equidimMax, prepareAss, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,432) @subsubsection equidim
../singular_texi/./d2t_singular/primdec_lib.tex(,433) @cindex equidim
../singular_texi/./d2t_singular/primdec_lib.tex(,434) @c ---content equidim---
../singular_texi/./d2t_singular/primdec_lib.tex(,435) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,436) 
../singular_texi/./d2t_singular/primdec_lib.tex(,437) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,438) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,439) equidim(i) or equidim(i,1) ; i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,440) 
../singular_texi/./d2t_singular/primdec_lib.tex(,441) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,442) list of equidimensional ideals a[1],...,a[s] with:
../singular_texi/./d2t_singular/primdec_lib.tex(,443) @*- a[s] the equidimensional locus of i, i.e. the intersection
../singular_texi/./d2t_singular/primdec_lib.tex(,444) of the primary ideals of dimension of i
../singular_texi/./d2t_singular/primdec_lib.tex(,445) @*- a[1],...,a[s-1] the lower dimensional equidimensional loci.
../singular_texi/./d2t_singular/primdec_lib.tex(,446) 
../singular_texi/./d2t_singular/primdec_lib.tex(,447) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,448) An embedded component q (primary ideal) of i can be replaced in the
../singular_texi/./d2t_singular/primdec_lib.tex(,449) decomposition by a primary ideal q1 with the same radical as q. @*
../singular_texi/./d2t_singular/primdec_lib.tex(,450) @code{equidim(i,1)} uses the algorithm of Eisenbud/Huneke/Vasconcelos.
../singular_texi/./d2t_singular/primdec_lib.tex(,451) 
../singular_texi/./d2t_singular/primdec_lib.tex(,452) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,453) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,454) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,455) @c reused example equidim d2t_singular/primdec_lib.doc:401 
../singular_texi/./d2t_singular/primdec_lib.tex(,456) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,457) ring  r = 32003,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,458) ideal i = intersect(ideal(z),ideal(x,y),ideal(x2,z2),ideal(x5,y5,z5));
../singular_texi/./d2t_singular/primdec_lib.tex(,459) equidim(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,460) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,461) @expansion{}    _[1]=z4
../singular_texi/./d2t_singular/primdec_lib.tex(,462) @expansion{}    _[2]=y5
../singular_texi/./d2t_singular/primdec_lib.tex(,463) @expansion{}    _[3]=x5
../singular_texi/./d2t_singular/primdec_lib.tex(,464) @expansion{}    _[4]=x3z3
../singular_texi/./d2t_singular/primdec_lib.tex(,465) @expansion{}    _[5]=x4y4
../singular_texi/./d2t_singular/primdec_lib.tex(,466) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,467) @expansion{}    _[1]=yz
../singular_texi/./d2t_singular/primdec_lib.tex(,468) @expansion{}    _[2]=xz
../singular_texi/./d2t_singular/primdec_lib.tex(,469) @expansion{}    _[3]=x2
../singular_texi/./d2t_singular/primdec_lib.tex(,470) @expansion{} [3]:
../singular_texi/./d2t_singular/primdec_lib.tex(,471) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/primdec_lib.tex(,472) @c end example equidim d2t_singular/primdec_lib.doc:401
../singular_texi/./d2t_singular/primdec_lib.tex(,473) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,474) @c ---end content equidim---
../singular_texi/./d2t_singular/primdec_lib.tex(,475) 
../singular_texi/./d2t_singular/primdec_lib.tex(,476) @c ------------------- equidimMax -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,477) @node equidimMax, equidimMaxEHV, equidim, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,478) @subsubsection equidimMax
../singular_texi/./d2t_singular/primdec_lib.tex(,479) @cindex equidimMax
../singular_texi/./d2t_singular/primdec_lib.tex(,480) @c ---content equidimMax---
../singular_texi/./d2t_singular/primdec_lib.tex(,481) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,482) 
../singular_texi/./d2t_singular/primdec_lib.tex(,483) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,484) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,485) equidimMax(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,486) 
../singular_texi/./d2t_singular/primdec_lib.tex(,487) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,488) ideal of equidimensional locus (of maximal dimension) of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,489) 
../singular_texi/./d2t_singular/primdec_lib.tex(,490) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,491) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,492) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,493) @c reused example equidimMax d2t_singular/primdec_lib.doc:427 
../singular_texi/./d2t_singular/primdec_lib.tex(,494) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,495) ring  r = 32003,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,496) ideal i = intersect(ideal(z),ideal(x,y),ideal(x2,z2),ideal(x5,y5,z5));
../singular_texi/./d2t_singular/primdec_lib.tex(,497) equidimMax(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,498) @expansion{} _[1]=z
../singular_texi/./d2t_singular/primdec_lib.tex(,499) @c end example equidimMax d2t_singular/primdec_lib.doc:427
../singular_texi/./d2t_singular/primdec_lib.tex(,500) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,501) @c ---end content equidimMax---
../singular_texi/./d2t_singular/primdec_lib.tex(,502) 
../singular_texi/./d2t_singular/primdec_lib.tex(,503) @c ------------------- equidimMaxEHV -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,504) @node equidimMaxEHV, zerodec, equidimMax, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,505) @subsubsection equidimMaxEHV
../singular_texi/./d2t_singular/primdec_lib.tex(,506) @cindex equidimMaxEHV
../singular_texi/./d2t_singular/primdec_lib.tex(,507) @c ---content equidimMaxEHV---
../singular_texi/./d2t_singular/primdec_lib.tex(,508) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,509) 
../singular_texi/./d2t_singular/primdec_lib.tex(,510) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,511) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,512) equidimMaxEHV(i); i ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,513) 
../singular_texi/./d2t_singular/primdec_lib.tex(,514) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,515) ideal, the equidimensional component (of maximal dimension) of i.
../singular_texi/./d2t_singular/primdec_lib.tex(,516) 
../singular_texi/./d2t_singular/primdec_lib.tex(,517) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,518) Uses algorithm of Eisenbud, Huneke and Vasconcelos.
../singular_texi/./d2t_singular/primdec_lib.tex(,519) 
../singular_texi/./d2t_singular/primdec_lib.tex(,520) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,521) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,522) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,523) @c reused example equidimMaxEHV d2t_singular/primdec_lib.doc:456 
../singular_texi/./d2t_singular/primdec_lib.tex(,524) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,525) ring  r = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,526) ideal i=intersect(ideal(z),ideal(x,y),ideal(x2,z2),ideal(x5,y5,z5));
../singular_texi/./d2t_singular/primdec_lib.tex(,527) equidimMaxEHV(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,528) @expansion{} _[1]=z
../singular_texi/./d2t_singular/primdec_lib.tex(,529) @c end example equidimMaxEHV d2t_singular/primdec_lib.doc:456
../singular_texi/./d2t_singular/primdec_lib.tex(,530) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,531) @c ---end content equidimMaxEHV---
../singular_texi/./d2t_singular/primdec_lib.tex(,532) 
../singular_texi/./d2t_singular/primdec_lib.tex(,533) @c ------------------- zerodec -------------
../singular_texi/./d2t_singular/primdec_lib.tex(,534) @node zerodec,, equidimMaxEHV, primdec_lib
../singular_texi/./d2t_singular/primdec_lib.tex(,535) @subsubsection zerodec
../singular_texi/./d2t_singular/primdec_lib.tex(,536) @cindex zerodec
../singular_texi/./d2t_singular/primdec_lib.tex(,537) @c ---content zerodec---
../singular_texi/./d2t_singular/primdec_lib.tex(,538) Procedure from library @code{primdec.lib} (@pxref{primdec_lib}).
../singular_texi/./d2t_singular/primdec_lib.tex(,539) 
../singular_texi/./d2t_singular/primdec_lib.tex(,540) @table @asis
../singular_texi/./d2t_singular/primdec_lib.tex(,541) @item @strong{Usage:}
../singular_texi/./d2t_singular/primdec_lib.tex(,542) zerodec(I); I ideal
../singular_texi/./d2t_singular/primdec_lib.tex(,543) 
../singular_texi/./d2t_singular/primdec_lib.tex(,544) @item @strong{Assume:}
../singular_texi/./d2t_singular/primdec_lib.tex(,545) I is zero-dimensional, the characteristic of the ground field is 0
../singular_texi/./d2t_singular/primdec_lib.tex(,546) 
../singular_texi/./d2t_singular/primdec_lib.tex(,547) @item @strong{Return:}
../singular_texi/./d2t_singular/primdec_lib.tex(,548) list of primary ideals, the zero-dimensional decomposition of I
../singular_texi/./d2t_singular/primdec_lib.tex(,549) 
../singular_texi/./d2t_singular/primdec_lib.tex(,550) @item @strong{Note:}
../singular_texi/./d2t_singular/primdec_lib.tex(,551) The algorithm (of Monico), works well only for a small total number
../singular_texi/./d2t_singular/primdec_lib.tex(,552) of solutions (@code{vdim(std(I))} should be < 100) and without
../singular_texi/./d2t_singular/primdec_lib.tex(,553) parameters. In practice, it works also in large characteristic p>0
../singular_texi/./d2t_singular/primdec_lib.tex(,554) but may fail for small p.
../singular_texi/./d2t_singular/primdec_lib.tex(,555) @* If printlevel > 0 (default = 0) additional information is displayed.
../singular_texi/./d2t_singular/primdec_lib.tex(,556) 
../singular_texi/./d2t_singular/primdec_lib.tex(,557) @end table
../singular_texi/./d2t_singular/primdec_lib.tex(,558) @strong{Example:}
../singular_texi/./d2t_singular/primdec_lib.tex(,559) @smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,560) @c reused example zerodec d2t_singular/primdec_lib.doc:492 
../singular_texi/./d2t_singular/primdec_lib.tex(,561) LIB "primdec.lib";
../singular_texi/./d2t_singular/primdec_lib.tex(,562) ring r  = 0,(x,y),dp;
../singular_texi/./d2t_singular/primdec_lib.tex(,563) ideal i = x2-2,y2-2;
../singular_texi/./d2t_singular/primdec_lib.tex(,564) list pr = zerodec(i);
../singular_texi/./d2t_singular/primdec_lib.tex(,565) pr;
../singular_texi/./d2t_singular/primdec_lib.tex(,566) @expansion{} [1]:
../singular_texi/./d2t_singular/primdec_lib.tex(,567) @expansion{}    _[1]=y2-2
../singular_texi/./d2t_singular/primdec_lib.tex(,568) @expansion{}    _[2]=xy-2
../singular_texi/./d2t_singular/primdec_lib.tex(,569) @expansion{}    _[3]=x2-2
../singular_texi/./d2t_singular/primdec_lib.tex(,570) @expansion{} [2]:
../singular_texi/./d2t_singular/primdec_lib.tex(,571) @expansion{}    _[1]=y2-2
../singular_texi/./d2t_singular/primdec_lib.tex(,572) @expansion{}    _[2]=xy+2
../singular_texi/./d2t_singular/primdec_lib.tex(,573) @expansion{}    _[3]=x2-2
../singular_texi/./d2t_singular/primdec_lib.tex(,574) @c end example zerodec d2t_singular/primdec_lib.doc:492
../singular_texi/./d2t_singular/primdec_lib.tex(,575) @end smallexample
../singular_texi/./d2t_singular/primdec_lib.tex(,576) @c ---end content zerodec---
../singular_texi/singular.tex(,406) @c ---------------------------------------------------------
../singular_texi/singular.tex(,407) @node primitiv_lib, reesclos_lib, primdec_lib, Commutative algebra
../singular_texi/singular.tex(,408) @subsection primitiv_lib
../singular_texi/singular.tex(,409) @c include of docu for primitiv.lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/primitiv_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/primitiv_lib.doc
../singular_texi/./d2t_singular/primitiv_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/primitiv_lib.doc INSTEAD
../singular_texi/./d2t_singular/primitiv_lib.tex(,4) @c library version: (1.15,2001/02/05)
../singular_texi/./d2t_singular/primitiv_lib.tex(,5) @c library file: ../Singular/LIB/primitiv.lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,6) @cindex primitiv.lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,7) @cindex primitiv_lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/primitiv_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,10) primitiv.lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,12)     Computing a Primitive Element
../singular_texi/./d2t_singular/primitiv_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,14) Martin Lamm, email: lamm@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/primitiv_lib.tex(,15) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,16) @end table
../singular_texi/./d2t_singular/primitiv_lib.tex(,17) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,19) @menu
../singular_texi/./d2t_singular/primitiv_lib.tex(,20) * primitive:: find minimal polynomial for a primitive element
../singular_texi/./d2t_singular/primitiv_lib.tex(,21) * primitive_extra:: find primitive element for two generators
../singular_texi/./d2t_singular/primitiv_lib.tex(,22) * splitring:: define ring extension with name R and switch to it
../singular_texi/./d2t_singular/primitiv_lib.tex(,23) @end menu
../singular_texi/./d2t_singular/primitiv_lib.tex(,24) @c ---end content LibInfo---
../singular_texi/./d2t_singular/primitiv_lib.tex(,25) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,26) @c ------------------- primitive -------------
../singular_texi/./d2t_singular/primitiv_lib.tex(,27) @node primitive, primitive_extra,, primitiv_lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,28) @subsubsection primitive
../singular_texi/./d2t_singular/primitiv_lib.tex(,29) @cindex primitive
../singular_texi/./d2t_singular/primitiv_lib.tex(,30) @c ---content primitive---
../singular_texi/./d2t_singular/primitiv_lib.tex(,31) Procedure from library @code{primitiv.lib} (@pxref{primitiv_lib}).
../singular_texi/./d2t_singular/primitiv_lib.tex(,32) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,33) @table @asis
../singular_texi/./d2t_singular/primitiv_lib.tex(,34) @item @strong{Usage:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,35) primitive(i); i ideal
../singular_texi/./d2t_singular/primitiv_lib.tex(,36) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,37) @item @strong{Assume:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,38) i is given by generators m[1],...,m[n] such that for j=1,...,n @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,39) - m[j] is a polynomial in k[x(1),...,x(j)] @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,40) - m[j](a[1],...,a[j-1],x(j)) is the minimal polynomial for a[j] over
../singular_texi/./d2t_singular/primitiv_lib.tex(,41) k(a[1],...,a[j-1]) @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,42) (k the ground field of the current basering and x(1),...,x(n)
../singular_texi/./d2t_singular/primitiv_lib.tex(,43) the ring variables).
../singular_texi/./d2t_singular/primitiv_lib.tex(,44) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,45) @item @strong{Return:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,46) ideal j in k[x(n)] with
../singular_texi/./d2t_singular/primitiv_lib.tex(,47) @*- j[1] a minimal polynomial for a primitive element b of 
../singular_texi/./d2t_singular/primitiv_lib.tex(,48) k(a[1],...,a[n]) over k,
../singular_texi/./d2t_singular/primitiv_lib.tex(,49) @*- j[2],...,j[n+1] polynomials in k[x(n)] such that j[i+1](b)=a[i]
../singular_texi/./d2t_singular/primitiv_lib.tex(,50) for i=1,...,n.
../singular_texi/./d2t_singular/primitiv_lib.tex(,51) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,52) @item @strong{Note:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,53) the number of variables in the basering has to be exactly n,
../singular_texi/./d2t_singular/primitiv_lib.tex(,54) the number of given generators (i.e., minimal polynomials).@*
../singular_texi/./d2t_singular/primitiv_lib.tex(,55) If the ground field k has only a few elements it may happen that no
../singular_texi/./d2t_singular/primitiv_lib.tex(,56) linear combination of a[1],...,a[n] is a primitive element. In this
../singular_texi/./d2t_singular/primitiv_lib.tex(,57) case @code{primitive(i)} returns the zero ideal, and one should use
../singular_texi/./d2t_singular/primitiv_lib.tex(,58) @code{primitive_extra(i)} instead.
../singular_texi/./d2t_singular/primitiv_lib.tex(,59) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,60) @cindex primitive element
../singular_texi/./d2t_singular/primitiv_lib.tex(,61) @end table
../singular_texi/./d2t_singular/primitiv_lib.tex(,62) @strong{Example:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,63) @smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,64) @c computed example primitive d2t_singular/primitiv_lib.doc:62 
../singular_texi/./d2t_singular/primitiv_lib.tex(,65) LIB "primitiv.lib";
../singular_texi/./d2t_singular/primitiv_lib.tex(,66) ring exring=0,(x,y),dp;
../singular_texi/./d2t_singular/primitiv_lib.tex(,67) ideal i=x2+1,y2-x;                  // compute Q(i,i^(1/2))=:L
../singular_texi/./d2t_singular/primitiv_lib.tex(,68) ideal j=primitive(i);
../singular_texi/./d2t_singular/primitiv_lib.tex(,69) j[1];                               // L=Q(a) with a=(-1)^(1/4)
../singular_texi/./d2t_singular/primitiv_lib.tex(,70) @expansion{} y4+1
../singular_texi/./d2t_singular/primitiv_lib.tex(,71) j[2];                               // i=a^2
../singular_texi/./d2t_singular/primitiv_lib.tex(,72) @expansion{} y2
../singular_texi/./d2t_singular/primitiv_lib.tex(,73) j[3];                               // i^(1/2)=a
../singular_texi/./d2t_singular/primitiv_lib.tex(,74) @expansion{} y
../singular_texi/./d2t_singular/primitiv_lib.tex(,75) // the 2nd element was already primitive!
../singular_texi/./d2t_singular/primitiv_lib.tex(,76) j=primitive(ideal(x2-2,y2-3));      // compute Q(sqrt(2),sqrt(3))
../singular_texi/./d2t_singular/primitiv_lib.tex(,77) j[1];
../singular_texi/./d2t_singular/primitiv_lib.tex(,78) @expansion{} y4-10y2+1
../singular_texi/./d2t_singular/primitiv_lib.tex(,79) j[2];
../singular_texi/./d2t_singular/primitiv_lib.tex(,80) @expansion{} 1/2y3-9/2y
../singular_texi/./d2t_singular/primitiv_lib.tex(,81) j[3];
../singular_texi/./d2t_singular/primitiv_lib.tex(,82) @expansion{} -1/2y3+11/2y
../singular_texi/./d2t_singular/primitiv_lib.tex(,83) // no element was primitive -- the calculation of primitive elements 
../singular_texi/./d2t_singular/primitiv_lib.tex(,84) // is based on a random choice.
../singular_texi/./d2t_singular/primitiv_lib.tex(,85) @c end example primitive d2t_singular/primitiv_lib.doc:62
../singular_texi/./d2t_singular/primitiv_lib.tex(,86) @end smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,87) @c inserted refs from d2t_singular/primitiv_lib.doc:79
../singular_texi/./d2t_singular/primitiv_lib.tex(,95) @strong{See also:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,96) @ref{primitive_extra}.
../singular_texi/./d2t_singular/primitiv_lib.tex(,98) @c end inserted refs from d2t_singular/primitiv_lib.doc:79
../singular_texi/./d2t_singular/primitiv_lib.tex(,99) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,100) @c ---end content primitive---
../singular_texi/./d2t_singular/primitiv_lib.tex(,101) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,102) @c ------------------- primitive_extra -------------
../singular_texi/./d2t_singular/primitiv_lib.tex(,103) @node primitive_extra, splitring, primitive, primitiv_lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,104) @subsubsection primitive_extra
../singular_texi/./d2t_singular/primitiv_lib.tex(,105) @cindex primitive_extra
../singular_texi/./d2t_singular/primitiv_lib.tex(,106) @c ---content primitive_extra---
../singular_texi/./d2t_singular/primitiv_lib.tex(,107) Procedure from library @code{primitiv.lib} (@pxref{primitiv_lib}).
../singular_texi/./d2t_singular/primitiv_lib.tex(,108) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,109) @table @asis
../singular_texi/./d2t_singular/primitiv_lib.tex(,110) @item @strong{Usage:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,111) primitive_extra(i); i ideal
../singular_texi/./d2t_singular/primitiv_lib.tex(,112) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,113) @item @strong{Assume:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,114) The ground field of the basering is k=Q or k=Z/pZ and the ideal
../singular_texi/./d2t_singular/primitiv_lib.tex(,115) i is given by 2 generators f,g with the following properties:
../singular_texi/./d2t_singular/primitiv_lib.tex(,116) @format
../singular_texi/./d2t_singular/primitiv_lib.tex(,117)    f is the minimal polynomial of a in k[x], 
../singular_texi/./d2t_singular/primitiv_lib.tex(,118)    g is a polynomial in k[x,y] s.th. g(a,y) is the minpoly of b in k(a)[y].
../singular_texi/./d2t_singular/primitiv_lib.tex(,119) @end format
../singular_texi/./d2t_singular/primitiv_lib.tex(,120) Here, x is the name of the first ring variable, y the name of the
../singular_texi/./d2t_singular/primitiv_lib.tex(,121) second.
../singular_texi/./d2t_singular/primitiv_lib.tex(,122) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,123) @item @strong{Return:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,124) ideal j in k[y] such that
../singular_texi/./d2t_singular/primitiv_lib.tex(,125) @format
../singular_texi/./d2t_singular/primitiv_lib.tex(,126)    j[1] is the minimal polynomial for a primitive element c of k(a,b) over k,
../singular_texi/./d2t_singular/primitiv_lib.tex(,127)    j[2] is a polynomial s.th. j[2](c)=a.
../singular_texi/./d2t_singular/primitiv_lib.tex(,128) @end format
../singular_texi/./d2t_singular/primitiv_lib.tex(,129) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,130) @item @strong{Note:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,131) While @code{primitive(i)} may fail for finite fields,
../singular_texi/./d2t_singular/primitiv_lib.tex(,132) @code{primitive_extra(i)} tries all elements of k(a,b) and, hence,
../singular_texi/./d2t_singular/primitiv_lib.tex(,133) always finds a primitive element. @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,134) In order to do this (try all elements), field extensions like Z/pZ(a)
../singular_texi/./d2t_singular/primitiv_lib.tex(,135) are not allowed for the ground field k. @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,136) @code{primitive_extra(i)} assumes that the second generator, g, is
../singular_texi/./d2t_singular/primitiv_lib.tex(,137) monic as polynomial in (k[x])[y].
../singular_texi/./d2t_singular/primitiv_lib.tex(,138) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,139) @end table
../singular_texi/./d2t_singular/primitiv_lib.tex(,140) @strong{Example:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,141) @smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,142) @c computed example primitive_extra d2t_singular/primitiv_lib.doc:125 
../singular_texi/./d2t_singular/primitiv_lib.tex(,143) LIB "primitiv.lib";
../singular_texi/./d2t_singular/primitiv_lib.tex(,144) ring exring=3,(x,y),dp;
../singular_texi/./d2t_singular/primitiv_lib.tex(,145) ideal i=x2+1,y3+y2-1;
../singular_texi/./d2t_singular/primitiv_lib.tex(,146) primitive_extra(i);
../singular_texi/./d2t_singular/primitiv_lib.tex(,147) @expansion{} _[1]=y6-y5+y4-y3-y-1
../singular_texi/./d2t_singular/primitiv_lib.tex(,148) @expansion{} _[2]=y5+y4+y2+y+1
../singular_texi/./d2t_singular/primitiv_lib.tex(,149) ring extension=(3,y),x,dp;
../singular_texi/./d2t_singular/primitiv_lib.tex(,150) minpoly=y6-y5+y4-y3-y-1;
../singular_texi/./d2t_singular/primitiv_lib.tex(,151) number a=y5+y4+y2+y+1;
../singular_texi/./d2t_singular/primitiv_lib.tex(,152) a^2;
../singular_texi/./d2t_singular/primitiv_lib.tex(,153) @expansion{} -1
../singular_texi/./d2t_singular/primitiv_lib.tex(,154) factorize(x2+1);
../singular_texi/./d2t_singular/primitiv_lib.tex(,155) @expansion{} [1]:
../singular_texi/./d2t_singular/primitiv_lib.tex(,156) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/primitiv_lib.tex(,157) @expansion{}    _[2]=x+(-y5-y4-y2-y-1)
../singular_texi/./d2t_singular/primitiv_lib.tex(,158) @expansion{}    _[3]=x+(y5+y4+y2+y+1)
../singular_texi/./d2t_singular/primitiv_lib.tex(,159) @expansion{} [2]:
../singular_texi/./d2t_singular/primitiv_lib.tex(,160) @expansion{}    1,1,1
../singular_texi/./d2t_singular/primitiv_lib.tex(,161) factorize(x3+x2-1);
../singular_texi/./d2t_singular/primitiv_lib.tex(,162) @expansion{} [1]:
../singular_texi/./d2t_singular/primitiv_lib.tex(,163) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/primitiv_lib.tex(,164) @expansion{}    _[2]=x+(-y5-y4-y3-y2-y-1)
../singular_texi/./d2t_singular/primitiv_lib.tex(,165) @expansion{}    _[3]=x+(y5+y4+y2+1)
../singular_texi/./d2t_singular/primitiv_lib.tex(,166) @expansion{}    _[4]=x+(y3+y+1)
../singular_texi/./d2t_singular/primitiv_lib.tex(,167) @expansion{} [2]:
../singular_texi/./d2t_singular/primitiv_lib.tex(,168) @expansion{}    1,1,1,1
../singular_texi/./d2t_singular/primitiv_lib.tex(,169) @c end example primitive_extra d2t_singular/primitiv_lib.doc:125
../singular_texi/./d2t_singular/primitiv_lib.tex(,170) @end smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,171) @c ---end content primitive_extra---
../singular_texi/./d2t_singular/primitiv_lib.tex(,172) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,173) @c ------------------- splitring -------------
../singular_texi/./d2t_singular/primitiv_lib.tex(,174) @node splitring,, primitive_extra, primitiv_lib
../singular_texi/./d2t_singular/primitiv_lib.tex(,175) @subsubsection splitring
../singular_texi/./d2t_singular/primitiv_lib.tex(,176) @cindex splitring
../singular_texi/./d2t_singular/primitiv_lib.tex(,177) @c ---content splitring---
../singular_texi/./d2t_singular/primitiv_lib.tex(,178) Procedure from library @code{primitiv.lib} (@pxref{primitiv_lib}).
../singular_texi/./d2t_singular/primitiv_lib.tex(,179) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,180) @table @asis
../singular_texi/./d2t_singular/primitiv_lib.tex(,181) @item @strong{Usage:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,182) splitring(f,R[,L]); f poly, R string, L list of polys and/or ideals
../singular_texi/./d2t_singular/primitiv_lib.tex(,183) (optional)
../singular_texi/./d2t_singular/primitiv_lib.tex(,184) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,185) @item @strong{Assume:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,186) f is univariate and irreducible over the active basering. @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,187) The active ring must allow an algebraic extension (e.g., it cannot
../singular_texi/./d2t_singular/primitiv_lib.tex(,188) be a transcendent ring extension of Q or Z/p).
../singular_texi/./d2t_singular/primitiv_lib.tex(,189) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,190) @item @strong{Create:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,191) a ring with name R, in which f is reducible, and CHANGE to it.
../singular_texi/./d2t_singular/primitiv_lib.tex(,192) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,193) @item @strong{Return:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,194) list L mapped into the new ring R, if L is given; else nothing
../singular_texi/./d2t_singular/primitiv_lib.tex(,195) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,196) @item @strong{Note:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,197) If the old ring has no parameter, the name @code{a} is chosen for the
../singular_texi/./d2t_singular/primitiv_lib.tex(,198) parameter of R (if @code{a} is no ring variable; if it is, @code{b} is
../singular_texi/./d2t_singular/primitiv_lib.tex(,199) chosen, etc.; if @code{a,b,c,o} are ring variables,
../singular_texi/./d2t_singular/primitiv_lib.tex(,200) @code{splitring(f,R[,L])} produces an error message), otherwise the
../singular_texi/./d2t_singular/primitiv_lib.tex(,201) name of the parameter is kept and only the minimal polynomial is
../singular_texi/./d2t_singular/primitiv_lib.tex(,202) changed. @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,203) The names of the ring variables and the orderings are not affected. @*
../singular_texi/./d2t_singular/primitiv_lib.tex(,204) It is also allowed to call @code{splitring} with R="".
../singular_texi/./d2t_singular/primitiv_lib.tex(,205) Then the old basering will be REPLACED by the new ring (with the
../singular_texi/./d2t_singular/primitiv_lib.tex(,206) same name as the old ring).
../singular_texi/./d2t_singular/primitiv_lib.tex(,207) 
../singular_texi/./d2t_singular/primitiv_lib.tex(,208) @cindex algebraic field extension
../singular_texi/./d2t_singular/primitiv_lib.tex(,209) @cindex extension of rings
../singular_texi/./d2t_singular/primitiv_lib.tex(,210) @end table
../singular_texi/./d2t_singular/primitiv_lib.tex(,211) @strong{Example:}
../singular_texi/./d2t_singular/primitiv_lib.tex(,212) @smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,213) @c computed example splitring d2t_singular/primitiv_lib.doc:180 
../singular_texi/./d2t_singular/primitiv_lib.tex(,214) LIB "primitiv.lib";
../singular_texi/./d2t_singular/primitiv_lib.tex(,215) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/primitiv_lib.tex(,216) splitring(x2-2,"r1");   // change to Q(sqrt(2))
../singular_texi/./d2t_singular/primitiv_lib.tex(,217) // change to Q(sqrt(2),sqrt(sqrt(2)))=Q(a) and return the transformed 
../singular_texi/./d2t_singular/primitiv_lib.tex(,218) // old parameter:
../singular_texi/./d2t_singular/primitiv_lib.tex(,219) splitring(x2-a,"r2",a); 
../singular_texi/./d2t_singular/primitiv_lib.tex(,220) @expansion{} // new minimal polynomial: a4-2
../singular_texi/./d2t_singular/primitiv_lib.tex(,221) @expansion{} [1]:
../singular_texi/./d2t_singular/primitiv_lib.tex(,222) @expansion{}    (a2)
../singular_texi/./d2t_singular/primitiv_lib.tex(,223) // the result is (a)^2 = (sqrt(sqrt(2)))^2
../singular_texi/./d2t_singular/primitiv_lib.tex(,224) nameof(basering);
../singular_texi/./d2t_singular/primitiv_lib.tex(,225) @expansion{} r2
../singular_texi/./d2t_singular/primitiv_lib.tex(,226) r2;
../singular_texi/./d2t_singular/primitiv_lib.tex(,227) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/primitiv_lib.tex(,228) @expansion{} //   1 parameter    : a 
../singular_texi/./d2t_singular/primitiv_lib.tex(,229) @expansion{} //   minpoly        : (a4-2)
../singular_texi/./d2t_singular/primitiv_lib.tex(,230) @expansion{} //   number of vars : 2
../singular_texi/./d2t_singular/primitiv_lib.tex(,231) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/primitiv_lib.tex(,232) @expansion{} //                  : names    x y 
../singular_texi/./d2t_singular/primitiv_lib.tex(,233) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/primitiv_lib.tex(,234) kill r1; kill r2;
../singular_texi/./d2t_singular/primitiv_lib.tex(,235) @c end example splitring d2t_singular/primitiv_lib.doc:180
../singular_texi/./d2t_singular/primitiv_lib.tex(,236) @end smallexample
../singular_texi/./d2t_singular/primitiv_lib.tex(,237) @c ---end content splitring---
../singular_texi/singular.tex(,411) @c ---------------------------------------------------------
../singular_texi/singular.tex(,412) @node reesclos_lib, intprog_lib, primitiv_lib, Commutative algebra
../singular_texi/singular.tex(,413) @subsection reesclos_lib
../singular_texi/singular.tex(,414) @c include of docu for reesclos.lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/reesclos_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/reesclos_lib.doc
../singular_texi/./d2t_singular/reesclos_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/reesclos_lib.doc INSTEAD
../singular_texi/./d2t_singular/reesclos_lib.tex(,4) @c library version: (1.50,2001/08/06)
../singular_texi/./d2t_singular/reesclos_lib.tex(,5) @c library file: ../Singular/LIB/reesclos.lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,6) @cindex reesclos.lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,7) @cindex reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,10) reesclos.lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,12)      procedures to compute the int. closure of an ideal
../singular_texi/./d2t_singular/reesclos_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,14) Tobias Hirsch, email: hirsch@@math.tu-cottbus.de
../singular_texi/./d2t_singular/reesclos_lib.tex(,15) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,16) @item @strong{Overview:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,17) A library to compute the integral closure of an ideal I in a polynomial ring
../singular_texi/./d2t_singular/reesclos_lib.tex(,18) R=K[x(1),...,x(n)] using the Rees Algebra R[It] of I. It computes the integral
../singular_texi/./d2t_singular/reesclos_lib.tex(,19) closure of R[It] (in the same manner as done in the library 'normal.lib'),
../singular_texi/./d2t_singular/reesclos_lib.tex(,20) which is a graded subalgebra of R[t]. The degree-k-component is the integral
../singular_texi/./d2t_singular/reesclos_lib.tex(,21) closure of the k-th power of I.
../singular_texi/./d2t_singular/reesclos_lib.tex(,22) @*These procedures can also be used to compute the integral closure R^ of an
../singular_texi/./d2t_singular/reesclos_lib.tex(,23) integral domain R=k[x(1),...,x(n)]/ker, ker a prime ideal, in its quotient
../singular_texi/./d2t_singular/reesclos_lib.tex(,24) field K=Q(R), as an affine ring R^=k[T(1),...,T(s)]]/J and to get
../singular_texi/./d2t_singular/reesclos_lib.tex(,25) representations of elements of R^ as fractions of elements of R.
../singular_texi/./d2t_singular/reesclos_lib.tex(,26) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,27) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,28) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,29) @strong{Procedures:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,30) @menu
../singular_texi/./d2t_singular/reesclos_lib.tex(,31) * ReesAlgebra:: computes the Rees Algebra of an ideal I
../singular_texi/./d2t_singular/reesclos_lib.tex(,32) * normalI:: computes the integral closure of an ideal I using R[It]
../singular_texi/./d2t_singular/reesclos_lib.tex(,33) * primeClosure:: computes the integral closure of the int. domain R
../singular_texi/./d2t_singular/reesclos_lib.tex(,34) * closureRingtower:: defines the rings in the list L as global objects R(i)
../singular_texi/./d2t_singular/reesclos_lib.tex(,35) * closureFrac:: computes fractions representing elements of R^=L[n]
../singular_texi/./d2t_singular/reesclos_lib.tex(,36) @end menu
../singular_texi/./d2t_singular/reesclos_lib.tex(,37) @c ---end content LibInfo---
../singular_texi/./d2t_singular/reesclos_lib.tex(,38) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,39) @c ------------------- ReesAlgebra -------------
../singular_texi/./d2t_singular/reesclos_lib.tex(,40) @node ReesAlgebra, normalI,, reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,41) @subsubsection ReesAlgebra
../singular_texi/./d2t_singular/reesclos_lib.tex(,42) @cindex ReesAlgebra
../singular_texi/./d2t_singular/reesclos_lib.tex(,43) @c ---content ReesAlgebra---
../singular_texi/./d2t_singular/reesclos_lib.tex(,44) Procedure from library @code{reesclos.lib} (@pxref{reesclos_lib}).
../singular_texi/./d2t_singular/reesclos_lib.tex(,45) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,46) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,47) @item @strong{Usage:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,48) ReesAlgebra (I); I = ideal
../singular_texi/./d2t_singular/reesclos_lib.tex(,49) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,50) @item @strong{Return:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,51) The Rees algebra R[It] as an affine ring, where I is an ideal in R.
../singular_texi/./d2t_singular/reesclos_lib.tex(,52) The procedure returns a list containing two rings:
../singular_texi/./d2t_singular/reesclos_lib.tex(,53) @*[1]: a ring, say RR; in the ring an ideal ker such that R[It]=RR/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,54) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,55) [2]: a ring, say Kxt; the basering with additional variable t
../singular_texi/./d2t_singular/reesclos_lib.tex(,56) containing an ideal mapI that defines the map RR-->Kxt
../singular_texi/./d2t_singular/reesclos_lib.tex(,57) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,58) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,59) @strong{Example:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,60) @smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,61) @c computed example ReesAlgebra d2t_singular/reesclos_lib.doc:59 
../singular_texi/./d2t_singular/reesclos_lib.tex(,62) LIB "reesclos.lib";
../singular_texi/./d2t_singular/reesclos_lib.tex(,63) ring R = 0,(x,y),dp;
../singular_texi/./d2t_singular/reesclos_lib.tex(,64) ideal I = x2,xy4,y5;
../singular_texi/./d2t_singular/reesclos_lib.tex(,65) list L = ReesAlgebra(I);
../singular_texi/./d2t_singular/reesclos_lib.tex(,66) def Rees = L[1];       // defines the ring Rees, containing the ideal ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,67) setring Rees;          // passes to the ring Rees
../singular_texi/./d2t_singular/reesclos_lib.tex(,68) Rees;
../singular_texi/./d2t_singular/reesclos_lib.tex(,69) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/reesclos_lib.tex(,70) @expansion{} //   number of vars : 5
../singular_texi/./d2t_singular/reesclos_lib.tex(,71) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/reesclos_lib.tex(,72) @expansion{} //                  : names    x y U(1) U(2) U(3) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,73) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/reesclos_lib.tex(,74) ker;                   // R[It] is isomorphic to Rees/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,75) @expansion{} ker[1]=y*U(2)-x*U(3)
../singular_texi/./d2t_singular/reesclos_lib.tex(,76) @expansion{} ker[2]=y^3*U(1)*U(3)-U(2)^2
../singular_texi/./d2t_singular/reesclos_lib.tex(,77) @expansion{} ker[3]=y^4*U(1)-x*U(2)
../singular_texi/./d2t_singular/reesclos_lib.tex(,78) @expansion{} ker[4]=x*y^2*U(1)*U(3)^2-U(2)^3
../singular_texi/./d2t_singular/reesclos_lib.tex(,79) @expansion{} ker[5]=x^2*y*U(1)*U(3)^3-U(2)^4
../singular_texi/./d2t_singular/reesclos_lib.tex(,80) @expansion{} ker[6]=x^3*U(1)*U(3)^4-U(2)^5
../singular_texi/./d2t_singular/reesclos_lib.tex(,81) @c end example ReesAlgebra d2t_singular/reesclos_lib.doc:59
../singular_texi/./d2t_singular/reesclos_lib.tex(,82) @end smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,83) @c ---end content ReesAlgebra---
../singular_texi/./d2t_singular/reesclos_lib.tex(,84) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,85) @c ------------------- normalI -------------
../singular_texi/./d2t_singular/reesclos_lib.tex(,86) @node normalI, primeClosure, ReesAlgebra, reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,87) @subsubsection normalI
../singular_texi/./d2t_singular/reesclos_lib.tex(,88) @cindex normalI
../singular_texi/./d2t_singular/reesclos_lib.tex(,89) @c ---content normalI---
../singular_texi/./d2t_singular/reesclos_lib.tex(,90) Procedure from library @code{reesclos.lib} (@pxref{reesclos_lib}).
../singular_texi/./d2t_singular/reesclos_lib.tex(,91) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,92) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,93) @item @strong{Usage:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,94) normalI(I [,p[,c]]); I an ideal, p and c optional integers
../singular_texi/./d2t_singular/reesclos_lib.tex(,95) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,96) @item @strong{Return:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,97) the integral closure of I,...,I^p. If p is not given, or p==0,
../singular_texi/./d2t_singular/reesclos_lib.tex(,98) compute the closure of all powers up to the maximum degree in t
../singular_texi/./d2t_singular/reesclos_lib.tex(,99) occurring in the generators of the closure of R[It] (so this is the
../singular_texi/./d2t_singular/reesclos_lib.tex(,100) last one that is not just the sum/product of the above ones).
../singular_texi/./d2t_singular/reesclos_lib.tex(,101) c is transferred to the procedure primeClosure and toggles its
../singular_texi/./d2t_singular/reesclos_lib.tex(,102) behavior in computing the integral closure of R[It].
../singular_texi/./d2t_singular/reesclos_lib.tex(,103) @*The result is a list containing the closure of the desired powers of
../singular_texi/./d2t_singular/reesclos_lib.tex(,104) I as ideals of the basering.
../singular_texi/./d2t_singular/reesclos_lib.tex(,105) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,106) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,107) @strong{Example:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,108) @smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,109) @c computed example normalI d2t_singular/reesclos_lib.doc:96 
../singular_texi/./d2t_singular/reesclos_lib.tex(,110) LIB "reesclos.lib";
../singular_texi/./d2t_singular/reesclos_lib.tex(,111) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/reesclos_lib.tex(,112) ideal I = x2,xy4,y5;
../singular_texi/./d2t_singular/reesclos_lib.tex(,113) list J = normalI(I);
../singular_texi/./d2t_singular/reesclos_lib.tex(,114) I;
../singular_texi/./d2t_singular/reesclos_lib.tex(,115) @expansion{} I[1]=x2
../singular_texi/./d2t_singular/reesclos_lib.tex(,116) @expansion{} I[2]=xy4
../singular_texi/./d2t_singular/reesclos_lib.tex(,117) @expansion{} I[3]=y5
../singular_texi/./d2t_singular/reesclos_lib.tex(,118) J;                             // J[1] is the integral closure of I
../singular_texi/./d2t_singular/reesclos_lib.tex(,119) @expansion{} [1]:
../singular_texi/./d2t_singular/reesclos_lib.tex(,120) @expansion{}    _[1]=x2
../singular_texi/./d2t_singular/reesclos_lib.tex(,121) @expansion{}    _[2]=y5
../singular_texi/./d2t_singular/reesclos_lib.tex(,122) @expansion{}    _[3]=-xy3
../singular_texi/./d2t_singular/reesclos_lib.tex(,123) @c end example normalI d2t_singular/reesclos_lib.doc:96
../singular_texi/./d2t_singular/reesclos_lib.tex(,124) @end smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,125) @c ---end content normalI---
../singular_texi/./d2t_singular/reesclos_lib.tex(,126) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,127) @c ------------------- primeClosure -------------
../singular_texi/./d2t_singular/reesclos_lib.tex(,128) @node primeClosure, closureRingtower, normalI, reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,129) @subsubsection primeClosure
../singular_texi/./d2t_singular/reesclos_lib.tex(,130) @cindex primeClosure
../singular_texi/./d2t_singular/reesclos_lib.tex(,131) @c ---content primeClosure---
../singular_texi/./d2t_singular/reesclos_lib.tex(,132) Procedure from library @code{reesclos.lib} (@pxref{reesclos_lib}).
../singular_texi/./d2t_singular/reesclos_lib.tex(,133) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,134) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,135) @item @strong{Usage:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,136) primeClosure(L [,c]); L a list of a ring containing a prime ideal
../singular_texi/./d2t_singular/reesclos_lib.tex(,137) ker, c an optional integer
../singular_texi/./d2t_singular/reesclos_lib.tex(,138) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,139) @item @strong{Return:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,140) a list L consisting of rings L[1],...,L[n] such that
../singular_texi/./d2t_singular/reesclos_lib.tex(,141) @*- L[1] is a copy of (not a reference to!) the input ring L[1]
../singular_texi/./d2t_singular/reesclos_lib.tex(,142) - all rings L[i] contain ideals ker, L[2],...,L[n] contain ideals phi
../singular_texi/./d2t_singular/reesclos_lib.tex(,143) such that
../singular_texi/./d2t_singular/reesclos_lib.tex(,144) @*L[1]/ker --> ... --> L[n]/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,145) @*are injections given by the corresponding ideals phi, and L[n]/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,146) is the integral closure of L[1]/ker in its quotient field.
../singular_texi/./d2t_singular/reesclos_lib.tex(,147) - all rings L[i] contain a polynomial nzd such that elements of
../singular_texi/./d2t_singular/reesclos_lib.tex(,148) L[i]/ker are quotients of elements of L[i-1]/ker with denominator
../singular_texi/./d2t_singular/reesclos_lib.tex(,149) nzd via the injection phi.
../singular_texi/./d2t_singular/reesclos_lib.tex(,150) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,151) @item @strong{Note:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,152) - L is constructed by recursive calls of primeClosure itself.
../singular_texi/./d2t_singular/reesclos_lib.tex(,153) - c determines the choice of nzd:
../singular_texi/./d2t_singular/reesclos_lib.tex(,154) @*- c not given or equal to 0: first generator of the ideal SL,
../singular_texi/./d2t_singular/reesclos_lib.tex(,155) the singular locus of Spec(L[i]/ker)
../singular_texi/./d2t_singular/reesclos_lib.tex(,156) @*- c<>0: the generator of SL with least number of monomials.
../singular_texi/./d2t_singular/reesclos_lib.tex(,157) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,158) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,159) @strong{Example:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,160) @smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,161) @c computed example primeClosure d2t_singular/reesclos_lib.doc:141 
../singular_texi/./d2t_singular/reesclos_lib.tex(,162) LIB "reesclos.lib";
../singular_texi/./d2t_singular/reesclos_lib.tex(,163) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/reesclos_lib.tex(,164) ideal I=x4,y4;
../singular_texi/./d2t_singular/reesclos_lib.tex(,165) def K=ReesAlgebra(I)[1];        // K contains ker such that K/ker=R[It]
../singular_texi/./d2t_singular/reesclos_lib.tex(,166) list L=primeClosure(K);
../singular_texi/./d2t_singular/reesclos_lib.tex(,167) def R(1)=L[1];                  // L[4] contains ker, L[4]/ker is the
../singular_texi/./d2t_singular/reesclos_lib.tex(,168) def R(4)=L[4];                  // integral closure of L[1]/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,169) setring R(1);
../singular_texi/./d2t_singular/reesclos_lib.tex(,170) R(1);
../singular_texi/./d2t_singular/reesclos_lib.tex(,171) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/reesclos_lib.tex(,172) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/reesclos_lib.tex(,173) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/reesclos_lib.tex(,174) @expansion{} //                  : names    x y U(1) U(2) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,175) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/reesclos_lib.tex(,176) ker;
../singular_texi/./d2t_singular/reesclos_lib.tex(,177) @expansion{} ker[1]=y^4*U(1)-x^4*U(2)
../singular_texi/./d2t_singular/reesclos_lib.tex(,178) setring R(4);
../singular_texi/./d2t_singular/reesclos_lib.tex(,179) R(4);
../singular_texi/./d2t_singular/reesclos_lib.tex(,180) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/reesclos_lib.tex(,181) @expansion{} //   number of vars : 7
../singular_texi/./d2t_singular/reesclos_lib.tex(,182) @expansion{} //        block   1 : ordering a
../singular_texi/./d2t_singular/reesclos_lib.tex(,183) @expansion{} //                  : names    T(1) T(2) T(3) T(4) T(5) T(6) T(7) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,184) @expansion{} //                  : weights     1    1    1    1    1    1    1 
../singular_texi/./d2t_singular/reesclos_lib.tex(,185) @expansion{} //        block   2 : ordering dp
../singular_texi/./d2t_singular/reesclos_lib.tex(,186) @expansion{} //                  : names    T(1) T(2) T(3) T(4) T(5) T(6) T(7) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,187) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/reesclos_lib.tex(,188) ker;
../singular_texi/./d2t_singular/reesclos_lib.tex(,189) @expansion{} ker[1]=T(2)*T(5)-T(1)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,190) @expansion{} ker[2]=T(1)*T(5)-T(2)*T(6)
../singular_texi/./d2t_singular/reesclos_lib.tex(,191) @expansion{} ker[3]=T(5)*T(6)-T(3)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,192) @expansion{} ker[4]=T(4)*T(6)-T(5)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,193) @expansion{} ker[5]=T(5)^2-T(6)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,194) @expansion{} ker[6]=T(4)*T(5)-T(7)^2
../singular_texi/./d2t_singular/reesclos_lib.tex(,195) @expansion{} ker[7]=T(3)*T(5)-T(6)^2
../singular_texi/./d2t_singular/reesclos_lib.tex(,196) @expansion{} ker[8]=T(2)^2*T(6)-T(1)^2*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,197) @expansion{} ker[9]=T(3)*T(4)-T(6)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,198) @expansion{} ker[10]=T(1)*T(4)-T(2)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,199) @expansion{} ker[11]=T(2)*T(3)-T(1)*T(6)
../singular_texi/./d2t_singular/reesclos_lib.tex(,200) @expansion{} ker[12]=T(2)^2*T(6)^2-T(1)^2*T(6)*T(7)
../singular_texi/./d2t_singular/reesclos_lib.tex(,201) @c end example primeClosure d2t_singular/reesclos_lib.doc:141
../singular_texi/./d2t_singular/reesclos_lib.tex(,202) @end smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,203) @c ---end content primeClosure---
../singular_texi/./d2t_singular/reesclos_lib.tex(,204) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,205) @c ------------------- closureRingtower -------------
../singular_texi/./d2t_singular/reesclos_lib.tex(,206) @node closureRingtower, closureFrac, primeClosure, reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,207) @subsubsection closureRingtower
../singular_texi/./d2t_singular/reesclos_lib.tex(,208) @cindex closureRingtower
../singular_texi/./d2t_singular/reesclos_lib.tex(,209) @c ---content closureRingtower---
../singular_texi/./d2t_singular/reesclos_lib.tex(,210) Procedure from library @code{reesclos.lib} (@pxref{reesclos_lib}).
../singular_texi/./d2t_singular/reesclos_lib.tex(,211) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,212) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,213) @item @strong{Usage:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,214) closureRingtower(list L); L a list of rings
../singular_texi/./d2t_singular/reesclos_lib.tex(,215) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,216) @item @strong{Create:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,217) rings R(1),...,R(n) such that R(i)=L[i] for all i
../singular_texi/./d2t_singular/reesclos_lib.tex(,218) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,219) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,220) @strong{Example:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,221) @smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,222) @c computed example closureRingtower d2t_singular/reesclos_lib.doc:176 
../singular_texi/./d2t_singular/reesclos_lib.tex(,223) LIB "reesclos.lib";
../singular_texi/./d2t_singular/reesclos_lib.tex(,224) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/reesclos_lib.tex(,225) ideal I=x4,y4;
../singular_texi/./d2t_singular/reesclos_lib.tex(,226) list L=primeClosure(ReesAlgebra(I)[1]);
../singular_texi/./d2t_singular/reesclos_lib.tex(,227) closureRingtower(L);
../singular_texi/./d2t_singular/reesclos_lib.tex(,228) R(1);
../singular_texi/./d2t_singular/reesclos_lib.tex(,229) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/reesclos_lib.tex(,230) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/reesclos_lib.tex(,231) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/reesclos_lib.tex(,232) @expansion{} //                  : names    x y U(1) U(2) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,233) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/reesclos_lib.tex(,234) R(4);
../singular_texi/./d2t_singular/reesclos_lib.tex(,235) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/reesclos_lib.tex(,236) @expansion{} //   number of vars : 7
../singular_texi/./d2t_singular/reesclos_lib.tex(,237) @expansion{} //        block   1 : ordering a
../singular_texi/./d2t_singular/reesclos_lib.tex(,238) @expansion{} //                  : names    T(1) T(2) T(3) T(4) T(5) T(6) T(7) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,239) @expansion{} //                  : weights     1    1    1    1    1    1    1 
../singular_texi/./d2t_singular/reesclos_lib.tex(,240) @expansion{} //        block   2 : ordering dp
../singular_texi/./d2t_singular/reesclos_lib.tex(,241) @expansion{} //                  : names    T(1) T(2) T(3) T(4) T(5) T(6) T(7) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,242) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/reesclos_lib.tex(,243) @c end example closureRingtower d2t_singular/reesclos_lib.doc:176
../singular_texi/./d2t_singular/reesclos_lib.tex(,244) @end smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,245) @c ---end content closureRingtower---
../singular_texi/./d2t_singular/reesclos_lib.tex(,246) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,247) @c ------------------- closureFrac -------------
../singular_texi/./d2t_singular/reesclos_lib.tex(,248) @node closureFrac,, closureRingtower, reesclos_lib
../singular_texi/./d2t_singular/reesclos_lib.tex(,249) @subsubsection closureFrac
../singular_texi/./d2t_singular/reesclos_lib.tex(,250) @cindex closureFrac
../singular_texi/./d2t_singular/reesclos_lib.tex(,251) @c ---content closureFrac---
../singular_texi/./d2t_singular/reesclos_lib.tex(,252) Procedure from library @code{reesclos.lib} (@pxref{reesclos_lib}).
../singular_texi/./d2t_singular/reesclos_lib.tex(,253) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,254) @table @asis
../singular_texi/./d2t_singular/reesclos_lib.tex(,255) @item @strong{Create:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,256) a list fraction of two elements of L[1], such that
../singular_texi/./d2t_singular/reesclos_lib.tex(,257) @*f=fraction[1]/fraction[2] via the injections phi L[i]-->L[i+1].
../singular_texi/./d2t_singular/reesclos_lib.tex(,258) 
../singular_texi/./d2t_singular/reesclos_lib.tex(,259) @end table
../singular_texi/./d2t_singular/reesclos_lib.tex(,260) @strong{Example:}
../singular_texi/./d2t_singular/reesclos_lib.tex(,261) @smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,262) @c computed example closureFrac d2t_singular/reesclos_lib.doc:203 
../singular_texi/./d2t_singular/reesclos_lib.tex(,263) LIB "reesclos.lib";
../singular_texi/./d2t_singular/reesclos_lib.tex(,264) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/reesclos_lib.tex(,265) ideal ker=x2+y2;
../singular_texi/./d2t_singular/reesclos_lib.tex(,266) export R;
../singular_texi/./d2t_singular/reesclos_lib.tex(,267) @expansion{} // ** `R` is already global
../singular_texi/./d2t_singular/reesclos_lib.tex(,268) list L=primeClosure(R);          // We normalize R/ker
../singular_texi/./d2t_singular/reesclos_lib.tex(,269) closureRingtower(L);             // Now R/ker=R(1) with normalization R(2)
../singular_texi/./d2t_singular/reesclos_lib.tex(,270) setring R(2);
../singular_texi/./d2t_singular/reesclos_lib.tex(,271) kill(R);
../singular_texi/./d2t_singular/reesclos_lib.tex(,272) phi;                             // The map R(1)-->R(2)
../singular_texi/./d2t_singular/reesclos_lib.tex(,273) @expansion{} phi[1]=T(1)*T(2)
../singular_texi/./d2t_singular/reesclos_lib.tex(,274) @expansion{} phi[2]=T(1)
../singular_texi/./d2t_singular/reesclos_lib.tex(,275) poly f=T(1)*T(2);                // We will get a representation of f
../singular_texi/./d2t_singular/reesclos_lib.tex(,276) export R(2);
../singular_texi/./d2t_singular/reesclos_lib.tex(,277) @expansion{} // ** `R(2)` is already global
../singular_texi/./d2t_singular/reesclos_lib.tex(,278) closureFrac(L);
../singular_texi/./d2t_singular/reesclos_lib.tex(,279) setring R(1);
../singular_texi/./d2t_singular/reesclos_lib.tex(,280) kill (R(2));
../singular_texi/./d2t_singular/reesclos_lib.tex(,281) fraction;                        // f=fraction[1]/fraction[2] via phi
../singular_texi/./d2t_singular/reesclos_lib.tex(,282) @expansion{} [1]:
../singular_texi/./d2t_singular/reesclos_lib.tex(,283) @expansion{}    xy
../singular_texi/./d2t_singular/reesclos_lib.tex(,284) @expansion{} [2]:
../singular_texi/./d2t_singular/reesclos_lib.tex(,285) @expansion{}    y
../singular_texi/./d2t_singular/reesclos_lib.tex(,286) @c end example closureFrac d2t_singular/reesclos_lib.doc:203
../singular_texi/./d2t_singular/reesclos_lib.tex(,287) @end smallexample
../singular_texi/./d2t_singular/reesclos_lib.tex(,288) @c ---end content closureFrac---
../singular_texi/singular.tex(,416) @c ---------------------------------------------------------
../singular_texi/singular.tex(,417) @node intprog_lib, toric_lib, reesclos_lib, Commutative algebra
../singular_texi/singular.tex(,418) @subsection intprog_lib
../singular_texi/singular.tex(,419) @c include of docu for intprog.lib
../singular_texi/./d2t_singular/intprog_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/intprog_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/intprog_lib.doc
../singular_texi/./d2t_singular/intprog_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/intprog_lib.doc INSTEAD
../singular_texi/./d2t_singular/intprog_lib.tex(,4) @c library version: (1.5,2001/02/06)
../singular_texi/./d2t_singular/intprog_lib.tex(,5) @c library file: ../Singular/LIB/intprog.lib
../singular_texi/./d2t_singular/intprog_lib.tex(,6) @cindex intprog.lib
../singular_texi/./d2t_singular/intprog_lib.tex(,7) @cindex intprog_lib
../singular_texi/./d2t_singular/intprog_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/intprog_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/intprog_lib.tex(,10) intprog.lib
../singular_texi/./d2t_singular/intprog_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/intprog_lib.tex(,12)       Integer Programming with Groebner Basis Methods
../singular_texi/./d2t_singular/intprog_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/intprog_lib.tex(,14) Christine Theis, email: ctheis@@math.uni-sb.de
../singular_texi/./d2t_singular/intprog_lib.tex(,15) 
../singular_texi/./d2t_singular/intprog_lib.tex(,16) @end table
../singular_texi/./d2t_singular/intprog_lib.tex(,17) 
../singular_texi/./d2t_singular/intprog_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/intprog_lib.tex(,19) @menu
../singular_texi/./d2t_singular/intprog_lib.tex(,20) * solve_IP:: procedures for solving Integer Programming problems
../singular_texi/./d2t_singular/intprog_lib.tex(,21) @end menu
../singular_texi/./d2t_singular/intprog_lib.tex(,22) @c ---end content LibInfo---
../singular_texi/./d2t_singular/intprog_lib.tex(,23) 
../singular_texi/./d2t_singular/intprog_lib.tex(,24) @c ------------------- solve_IP -------------
../singular_texi/./d2t_singular/intprog_lib.tex(,25) @node solve_IP,,, intprog_lib
../singular_texi/./d2t_singular/intprog_lib.tex(,26) @subsubsection solve_IP
../singular_texi/./d2t_singular/intprog_lib.tex(,27) @cindex solve_IP
../singular_texi/./d2t_singular/intprog_lib.tex(,28) @c ---content solve_IP---
../singular_texi/./d2t_singular/intprog_lib.tex(,29) Procedure from library @code{intprog.lib} (@pxref{intprog_lib}).
../singular_texi/./d2t_singular/intprog_lib.tex(,30) 
../singular_texi/./d2t_singular/intprog_lib.tex(,31) @table @asis
../singular_texi/./d2t_singular/intprog_lib.tex(,32) @item @strong{Usage:}
../singular_texi/./d2t_singular/intprog_lib.tex(,33) solve_IP(A,bx,c,alg); A intmat, bx intvec, c intvec, alg string.
../singular_texi/./d2t_singular/intprog_lib.tex(,34) solve_IP(A,bx,c,alg); A intmat, bx list of intvec, c intvec,
../singular_texi/./d2t_singular/intprog_lib.tex(,35) alg string.
../singular_texi/./d2t_singular/intprog_lib.tex(,36) @*solve_IP(A,bx,c,alg,prsv); A intmat, bx intvec, c intvec,
../singular_texi/./d2t_singular/intprog_lib.tex(,37) alg string, prsv intvec.
../singular_texi/./d2t_singular/intprog_lib.tex(,38) @*solve_IP(A,bx,c,alg,prsv); A intmat, bx list of intvec, c intvec,
../singular_texi/./d2t_singular/intprog_lib.tex(,39) alg string, prsv intvec.
../singular_texi/./d2t_singular/intprog_lib.tex(,40) 
../singular_texi/./d2t_singular/intprog_lib.tex(,41) @item @strong{Return:}
../singular_texi/./d2t_singular/intprog_lib.tex(,42) same type as bx: solution of the associated integer programming
../singular_texi/./d2t_singular/intprog_lib.tex(,43) problem(s) as explained in
../singular_texi/./d2t_singular/intprog_lib.tex(,44) 
../singular_texi/./d2t_singular/intprog_lib.tex(,45)    @ref{Toric ideals and integer programming}.
../singular_texi/./d2t_singular/intprog_lib.tex(,46) 
../singular_texi/./d2t_singular/intprog_lib.tex(,47) @item @strong{Note:}
../singular_texi/./d2t_singular/intprog_lib.tex(,48) This procedure returns the solution(s) of the given IP-problem(s)
../singular_texi/./d2t_singular/intprog_lib.tex(,49) or the message `not solvable'.
../singular_texi/./d2t_singular/intprog_lib.tex(,50) @*One may call the procedure with several different algorithms:
../singular_texi/./d2t_singular/intprog_lib.tex(,51) @*- the algorithm of Conti/Traverso (ct),
../singular_texi/./d2t_singular/intprog_lib.tex(,52) @*- the positive variant of the algorithm of Conti/Traverso (pct),
../singular_texi/./d2t_singular/intprog_lib.tex(,53) @*- the algorithm of Conti/Traverso using elimination (ect),
../singular_texi/./d2t_singular/intprog_lib.tex(,54) @*- the algorithm of Pottier (pt),
../singular_texi/./d2t_singular/intprog_lib.tex(,55) @*- an algorithm of Bigatti/La Scala/Robbiano (blr),
../singular_texi/./d2t_singular/intprog_lib.tex(,56) @*- the algorithm of Hosten/Sturmfels (hs),
../singular_texi/./d2t_singular/intprog_lib.tex(,57) @*- the algorithm of DiBiase/Urbanke (du).
../singular_texi/./d2t_singular/intprog_lib.tex(,58) The argument `alg' should be the abbreviation for an algorithm as
../singular_texi/./d2t_singular/intprog_lib.tex(,59) above: ct, pct, ect, pt, blr, hs or du.
../singular_texi/./d2t_singular/intprog_lib.tex(,60) 
../singular_texi/./d2t_singular/intprog_lib.tex(,61) `ct' allows computation of an optimal solution of the IP-problem
../singular_texi/./d2t_singular/intprog_lib.tex(,62) directly from the right-hand vector b.
../singular_texi/./d2t_singular/intprog_lib.tex(,63) @*The same is true for its `positive' variant `pct' which may only be
../singular_texi/./d2t_singular/intprog_lib.tex(,64) applied if A and b have nonnegative entries.
../singular_texi/./d2t_singular/intprog_lib.tex(,65) @*All other algorithms need initial solutions of the IP-problem.
../singular_texi/./d2t_singular/intprog_lib.tex(,66) 
../singular_texi/./d2t_singular/intprog_lib.tex(,67) If `alg' is chosen to be `ct' or `pct', bx is read as the right hand
../singular_texi/./d2t_singular/intprog_lib.tex(,68) vector b of the system Ax=b. b should then be an intvec of size m
../singular_texi/./d2t_singular/intprog_lib.tex(,69) where m is the number of rows of A.
../singular_texi/./d2t_singular/intprog_lib.tex(,70) @*Furthermore, bx and A should be nonnegative if `pct' is used.
../singular_texi/./d2t_singular/intprog_lib.tex(,71) If `alg' is chosen to be `ect',`pt',`blr',`hs' or `du',
../singular_texi/./d2t_singular/intprog_lib.tex(,72) bx is read as an initial solution x of the system Ax=b.
../singular_texi/./d2t_singular/intprog_lib.tex(,73) bx should then be a nonnegative intvec of size n where n is the
../singular_texi/./d2t_singular/intprog_lib.tex(,74) number of columns of A.
../singular_texi/./d2t_singular/intprog_lib.tex(,75) 
../singular_texi/./d2t_singular/intprog_lib.tex(,76) If `alg' is chosen to be `blr' or `hs', the algorithm needs a vector
../singular_texi/./d2t_singular/intprog_lib.tex(,77) with positive coefficients in the row space of A.
../singular_texi/./d2t_singular/intprog_lib.tex(,78) @*If no row of A contains only positive entries, one has to use the
../singular_texi/./d2t_singular/intprog_lib.tex(,79) versions of solve_IP which take such a vector prsv as an argument.
../singular_texi/./d2t_singular/intprog_lib.tex(,80) 
../singular_texi/./d2t_singular/intprog_lib.tex(,81) solve_IP may also be called with a list bx of intvecs instead of a
../singular_texi/./d2t_singular/intprog_lib.tex(,82) single intvec.
../singular_texi/./d2t_singular/intprog_lib.tex(,83) 
../singular_texi/./d2t_singular/intprog_lib.tex(,84) @end table
../singular_texi/./d2t_singular/intprog_lib.tex(,85) @strong{Example:}
../singular_texi/./d2t_singular/intprog_lib.tex(,86) @smallexample
../singular_texi/./d2t_singular/intprog_lib.tex(,87) @c computed example solve_IP d2t_singular/intprog_lib.doc:85 
../singular_texi/./d2t_singular/intprog_lib.tex(,88) LIB "intprog.lib";
../singular_texi/./d2t_singular/intprog_lib.tex(,89) // 1. call with single right-hand vector
../singular_texi/./d2t_singular/intprog_lib.tex(,90) intmat A[2][3]=1,1,0,0,1,1;
../singular_texi/./d2t_singular/intprog_lib.tex(,91) intvec b1=1,1;
../singular_texi/./d2t_singular/intprog_lib.tex(,92) intvec c=2,2,1;
../singular_texi/./d2t_singular/intprog_lib.tex(,93) intvec solution_vector=solve_IP(A,b1,c,"pct");
../singular_texi/./d2t_singular/intprog_lib.tex(,94) solution_vector;"";
../singular_texi/./d2t_singular/intprog_lib.tex(,95) @expansion{} 0,1,0
../singular_texi/./d2t_singular/intprog_lib.tex(,96) @expansion{} 
../singular_texi/./d2t_singular/intprog_lib.tex(,97) // 2. call with list of right-hand vectors
../singular_texi/./d2t_singular/intprog_lib.tex(,98) intvec b2=-1,1;
../singular_texi/./d2t_singular/intprog_lib.tex(,99) list l=b1,b2;
../singular_texi/./d2t_singular/intprog_lib.tex(,100) l;
../singular_texi/./d2t_singular/intprog_lib.tex(,101) @expansion{} [1]:
../singular_texi/./d2t_singular/intprog_lib.tex(,102) @expansion{}    1,1
../singular_texi/./d2t_singular/intprog_lib.tex(,103) @expansion{} [2]:
../singular_texi/./d2t_singular/intprog_lib.tex(,104) @expansion{}    -1,1
../singular_texi/./d2t_singular/intprog_lib.tex(,105) list solution_list=solve_IP(A,l,c,"ct");
../singular_texi/./d2t_singular/intprog_lib.tex(,106) solution_list;"";
../singular_texi/./d2t_singular/intprog_lib.tex(,107) @expansion{} [1]:
../singular_texi/./d2t_singular/intprog_lib.tex(,108) @expansion{}    0,1,0
../singular_texi/./d2t_singular/intprog_lib.tex(,109) @expansion{} [2]:
../singular_texi/./d2t_singular/intprog_lib.tex(,110) @expansion{}    not solvable
../singular_texi/./d2t_singular/intprog_lib.tex(,111) @expansion{} 
../singular_texi/./d2t_singular/intprog_lib.tex(,112) // 3. call with single initial solution vector
../singular_texi/./d2t_singular/intprog_lib.tex(,113) A=2,1,-1,-1,1,2;
../singular_texi/./d2t_singular/intprog_lib.tex(,114) b1=3,4,5;
../singular_texi/./d2t_singular/intprog_lib.tex(,115) solve_IP(A,b1,c,"du");"";
../singular_texi/./d2t_singular/intprog_lib.tex(,116) @expansion{} 0,7,2
../singular_texi/./d2t_singular/intprog_lib.tex(,117) @expansion{} 
../singular_texi/./d2t_singular/intprog_lib.tex(,118) // 4. call with single initial solution vector
../singular_texi/./d2t_singular/intprog_lib.tex(,119) //    and algorithm needing a positive row space vector
../singular_texi/./d2t_singular/intprog_lib.tex(,120) solution_vector=solve_IP(A,b1,c,"hs");"";
../singular_texi/./d2t_singular/intprog_lib.tex(,121) @expansion{} ERROR: The chosen algorithm needs a positive vector in the row space of t\
../singular_texi/./d2t_singular/intprog_lib.tex(,122)    he matrix.
../singular_texi/./d2t_singular/intprog_lib.tex(,123) @expansion{} 0
../singular_texi/./d2t_singular/intprog_lib.tex(,124) @expansion{} 
../singular_texi/./d2t_singular/intprog_lib.tex(,125) // 5. call with single initial solution vector
../singular_texi/./d2t_singular/intprog_lib.tex(,126) //     and positive row space vector
../singular_texi/./d2t_singular/intprog_lib.tex(,127) intvec prsv=1,2,1;
../singular_texi/./d2t_singular/intprog_lib.tex(,128) solution_vector=solve_IP(A,b1,c,"hs",prsv);
../singular_texi/./d2t_singular/intprog_lib.tex(,129) solution_vector;"";
../singular_texi/./d2t_singular/intprog_lib.tex(,130) @expansion{} 0,7,2
../singular_texi/./d2t_singular/intprog_lib.tex(,131) @expansion{} 
../singular_texi/./d2t_singular/intprog_lib.tex(,132) // 6. call with list of initial solution vectors
../singular_texi/./d2t_singular/intprog_lib.tex(,133) //    and positive row space vector
../singular_texi/./d2t_singular/intprog_lib.tex(,134) b2=7,8,0;
../singular_texi/./d2t_singular/intprog_lib.tex(,135) l=b1,b2;
../singular_texi/./d2t_singular/intprog_lib.tex(,136) l;
../singular_texi/./d2t_singular/intprog_lib.tex(,137) @expansion{} [1]:
../singular_texi/./d2t_singular/intprog_lib.tex(,138) @expansion{}    3,4,5
../singular_texi/./d2t_singular/intprog_lib.tex(,139) @expansion{} [2]:
../singular_texi/./d2t_singular/intprog_lib.tex(,140) @expansion{}    7,8,0
../singular_texi/./d2t_singular/intprog_lib.tex(,141) solution_list=solve_IP(A,l,c,"blr",prsv);
../singular_texi/./d2t_singular/intprog_lib.tex(,142) solution_list;
../singular_texi/./d2t_singular/intprog_lib.tex(,143) @expansion{} [1]:
../singular_texi/./d2t_singular/intprog_lib.tex(,144) @expansion{}    0,7,2
../singular_texi/./d2t_singular/intprog_lib.tex(,145) @expansion{} [2]:
../singular_texi/./d2t_singular/intprog_lib.tex(,146) @expansion{}    7,8,0
../singular_texi/./d2t_singular/intprog_lib.tex(,147) @c end example solve_IP d2t_singular/intprog_lib.doc:85
../singular_texi/./d2t_singular/intprog_lib.tex(,148) @end smallexample
../singular_texi/./d2t_singular/intprog_lib.tex(,149) @c inserted refs from d2t_singular/intprog_lib.doc:120
../singular_texi/./d2t_singular/intprog_lib.tex(,159) @strong{See also:}
../singular_texi/./d2t_singular/intprog_lib.tex(,160) @ref{Integer programming};
../singular_texi/./d2t_singular/intprog_lib.tex(,161) @ref{intprog_lib};
../singular_texi/./d2t_singular/intprog_lib.tex(,162) @ref{toric_lib}.
../singular_texi/./d2t_singular/intprog_lib.tex(,164) @c end inserted refs from d2t_singular/intprog_lib.doc:120
../singular_texi/./d2t_singular/intprog_lib.tex(,165) 
../singular_texi/./d2t_singular/intprog_lib.tex(,166) @c ---end content solve_IP---
../singular_texi/singular.tex(,421) @c ---------------------------------------------------------
../singular_texi/singular.tex(,422) @node toric_lib, ,intprog_lib, Commutative algebra
../singular_texi/singular.tex(,423) @subsection toric_lib
../singular_texi/singular.tex(,424) @c include of docu for toric.lib
../singular_texi/./d2t_singular/toric_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/toric_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/toric_lib.doc
../singular_texi/./d2t_singular/toric_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/toric_lib.doc INSTEAD
../singular_texi/./d2t_singular/toric_lib.tex(,4) @c library version: (1.11,2001/02/06)
../singular_texi/./d2t_singular/toric_lib.tex(,5) @c library file: ../Singular/LIB/toric.lib
../singular_texi/./d2t_singular/toric_lib.tex(,6) @cindex toric.lib
../singular_texi/./d2t_singular/toric_lib.tex(,7) @cindex toric_lib
../singular_texi/./d2t_singular/toric_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/toric_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/toric_lib.tex(,10) toric.lib
../singular_texi/./d2t_singular/toric_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/toric_lib.tex(,12)    Standard Basis of Toric Ideals
../singular_texi/./d2t_singular/toric_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/toric_lib.tex(,14) Christine Theis, email: ctheis@@math.uni-sb.de
../singular_texi/./d2t_singular/toric_lib.tex(,15) 
../singular_texi/./d2t_singular/toric_lib.tex(,16) @end table
../singular_texi/./d2t_singular/toric_lib.tex(,17) 
../singular_texi/./d2t_singular/toric_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/toric_lib.tex(,19) @menu
../singular_texi/./d2t_singular/toric_lib.tex(,20) * toric_ideal:: computes the toric ideal of A
../singular_texi/./d2t_singular/toric_lib.tex(,21) * toric_std:: standard basis of I by a specialized Buchberger algorithm
../singular_texi/./d2t_singular/toric_lib.tex(,22) @end menu
../singular_texi/./d2t_singular/toric_lib.tex(,23) @c ---end content LibInfo---
../singular_texi/./d2t_singular/toric_lib.tex(,24) 
../singular_texi/./d2t_singular/toric_lib.tex(,25) @c ------------------- toric_ideal -------------
../singular_texi/./d2t_singular/toric_lib.tex(,26) @node toric_ideal, toric_std,, toric_lib
../singular_texi/./d2t_singular/toric_lib.tex(,27) @subsubsection toric_ideal
../singular_texi/./d2t_singular/toric_lib.tex(,28) @cindex toric_ideal
../singular_texi/./d2t_singular/toric_lib.tex(,29) @c ---content toric_ideal---
../singular_texi/./d2t_singular/toric_lib.tex(,30) Procedure from library @code{toric.lib} (@pxref{toric_lib}).
../singular_texi/./d2t_singular/toric_lib.tex(,31) 
../singular_texi/./d2t_singular/toric_lib.tex(,32) @table @asis
../singular_texi/./d2t_singular/toric_lib.tex(,33) @item @strong{Usage:}
../singular_texi/./d2t_singular/toric_lib.tex(,34) toric_ideal(A,alg); A intmat, alg string
../singular_texi/./d2t_singular/toric_lib.tex(,35) @*toric_ideal(A,alg,prsv); A intmat, alg string, prsv intvec
../singular_texi/./d2t_singular/toric_lib.tex(,36) 
../singular_texi/./d2t_singular/toric_lib.tex(,37) @item @strong{Return:}
../singular_texi/./d2t_singular/toric_lib.tex(,38) ideal: standard basis of the toric ideal of A
../singular_texi/./d2t_singular/toric_lib.tex(,39) 
../singular_texi/./d2t_singular/toric_lib.tex(,40) @item @strong{Note:}
../singular_texi/./d2t_singular/toric_lib.tex(,41) These procedures return the standard basis of the toric ideal of A
../singular_texi/./d2t_singular/toric_lib.tex(,42) with respect to the term ordering in the current basering. Not all
../singular_texi/./d2t_singular/toric_lib.tex(,43) term orderings are supported: The usual global term orderings may be
../singular_texi/./d2t_singular/toric_lib.tex(,44) used, but no block orderings combining them.
../singular_texi/./d2t_singular/toric_lib.tex(,45) @*One may call the procedure with several different algorithms: @*
../singular_texi/./d2t_singular/toric_lib.tex(,46) - the algorithm of Conti/Traverso using elimination (ect), @*
../singular_texi/./d2t_singular/toric_lib.tex(,47) - the algorithm of Pottier (pt),
../singular_texi/./d2t_singular/toric_lib.tex(,48) @*- an algorithm of Bigatti/La Scala/Robbiano (blr),
../singular_texi/./d2t_singular/toric_lib.tex(,49) @*- the algorithm of Hosten/Sturmfels (hs),
../singular_texi/./d2t_singular/toric_lib.tex(,50) @*- the algorithm of DiBiase/Urbanke (du).
../singular_texi/./d2t_singular/toric_lib.tex(,51) @*The argument `alg' should be the abbreviation for an algorithm as
../singular_texi/./d2t_singular/toric_lib.tex(,52) above: ect, pt, blr, hs or du.
../singular_texi/./d2t_singular/toric_lib.tex(,53) 
../singular_texi/./d2t_singular/toric_lib.tex(,54) If `alg' is chosen to be `blr' or `hs', the algorithm needs a vector
../singular_texi/./d2t_singular/toric_lib.tex(,55) with positive coefficients in the row space of A.
../singular_texi/./d2t_singular/toric_lib.tex(,56) @*If no row of A contains only positive entries, one has to use the
../singular_texi/./d2t_singular/toric_lib.tex(,57) second version of toric_ideal which takes such a vector as its third
../singular_texi/./d2t_singular/toric_lib.tex(,58) argument.
../singular_texi/./d2t_singular/toric_lib.tex(,59) @*For the mathematical background, see
../singular_texi/./d2t_singular/toric_lib.tex(,60) 
../singular_texi/./d2t_singular/toric_lib.tex(,61)   @ref{Toric ideals and integer programming}.
../singular_texi/./d2t_singular/toric_lib.tex(,62) 
../singular_texi/./d2t_singular/toric_lib.tex(,63) @end table
../singular_texi/./d2t_singular/toric_lib.tex(,64) @strong{Example:}
../singular_texi/./d2t_singular/toric_lib.tex(,65) @smallexample
../singular_texi/./d2t_singular/toric_lib.tex(,66) @c computed example toric_ideal d2t_singular/toric_lib.doc:64 
../singular_texi/./d2t_singular/toric_lib.tex(,67) LIB "toric.lib";
../singular_texi/./d2t_singular/toric_lib.tex(,68) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/toric_lib.tex(,69) // call with two arguments
../singular_texi/./d2t_singular/toric_lib.tex(,70) intmat A[2][3]=1,1,0,0,1,1;
../singular_texi/./d2t_singular/toric_lib.tex(,71) A;
../singular_texi/./d2t_singular/toric_lib.tex(,72) @expansion{} 1,1,0,
../singular_texi/./d2t_singular/toric_lib.tex(,73) @expansion{} 0,1,1 
../singular_texi/./d2t_singular/toric_lib.tex(,74) ideal I=toric_ideal(A,"du");
../singular_texi/./d2t_singular/toric_lib.tex(,75) I;
../singular_texi/./d2t_singular/toric_lib.tex(,76) @expansion{} I[1]=xz-y
../singular_texi/./d2t_singular/toric_lib.tex(,77) I=toric_ideal(A,"blr");
../singular_texi/./d2t_singular/toric_lib.tex(,78) @expansion{} ERROR: The chosen algorithm needs a positive vector in the row space of t\
../singular_texi/./d2t_singular/toric_lib.tex(,79)    he matrix.
../singular_texi/./d2t_singular/toric_lib.tex(,80) I;
../singular_texi/./d2t_singular/toric_lib.tex(,81) @expansion{} I[1]=0
../singular_texi/./d2t_singular/toric_lib.tex(,82) // call with three arguments
../singular_texi/./d2t_singular/toric_lib.tex(,83) intvec prsv=1,2,1;
../singular_texi/./d2t_singular/toric_lib.tex(,84) I=toric_ideal(A,"blr",prsv);
../singular_texi/./d2t_singular/toric_lib.tex(,85) I;
../singular_texi/./d2t_singular/toric_lib.tex(,86) @expansion{} I[1]=xz-y
../singular_texi/./d2t_singular/toric_lib.tex(,87) @c end example toric_ideal d2t_singular/toric_lib.doc:64
../singular_texi/./d2t_singular/toric_lib.tex(,88) @end smallexample
../singular_texi/./d2t_singular/toric_lib.tex(,89) @c inserted refs from d2t_singular/toric_lib.doc:80
../singular_texi/./d2t_singular/toric_lib.tex(,100) @strong{See also:}
../singular_texi/./d2t_singular/toric_lib.tex(,101) @ref{Toric ideals};
../singular_texi/./d2t_singular/toric_lib.tex(,102) @ref{intprog_lib};
../singular_texi/./d2t_singular/toric_lib.tex(,103) @ref{toric_lib};
../singular_texi/./d2t_singular/toric_lib.tex(,104) @ref{toric_std}.
../singular_texi/./d2t_singular/toric_lib.tex(,106) @c end inserted refs from d2t_singular/toric_lib.doc:80
../singular_texi/./d2t_singular/toric_lib.tex(,107) 
../singular_texi/./d2t_singular/toric_lib.tex(,108) @c ---end content toric_ideal---
../singular_texi/./d2t_singular/toric_lib.tex(,109) 
../singular_texi/./d2t_singular/toric_lib.tex(,110) @c ------------------- toric_std -------------
../singular_texi/./d2t_singular/toric_lib.tex(,111) @node toric_std,, toric_ideal, toric_lib
../singular_texi/./d2t_singular/toric_lib.tex(,112) @subsubsection toric_std
../singular_texi/./d2t_singular/toric_lib.tex(,113) @cindex toric_std
../singular_texi/./d2t_singular/toric_lib.tex(,114) @c ---content toric_std---
../singular_texi/./d2t_singular/toric_lib.tex(,115) Procedure from library @code{toric.lib} (@pxref{toric_lib}).
../singular_texi/./d2t_singular/toric_lib.tex(,116) 
../singular_texi/./d2t_singular/toric_lib.tex(,117) @table @asis
../singular_texi/./d2t_singular/toric_lib.tex(,118) @item @strong{Usage:}
../singular_texi/./d2t_singular/toric_lib.tex(,119) toric_std(I); I ideal
../singular_texi/./d2t_singular/toric_lib.tex(,120) 
../singular_texi/./d2t_singular/toric_lib.tex(,121) @item @strong{Return:}
../singular_texi/./d2t_singular/toric_lib.tex(,122) ideal: standard basis of I
../singular_texi/./d2t_singular/toric_lib.tex(,123) 
../singular_texi/./d2t_singular/toric_lib.tex(,124) @item @strong{Note:}
../singular_texi/./d2t_singular/toric_lib.tex(,125) This procedure computes the standard basis of I using a specialized
../singular_texi/./d2t_singular/toric_lib.tex(,126) Buchberger algorithm. The generating system by which I is given has
../singular_texi/./d2t_singular/toric_lib.tex(,127) to consist of binomials of the form x^u-x^v. There is no real check
../singular_texi/./d2t_singular/toric_lib.tex(,128) if I is toric. If I is generated by binomials of the above form,
../singular_texi/./d2t_singular/toric_lib.tex(,129) but not toric, toric_std computes an ideal `between' I and its
../singular_texi/./d2t_singular/toric_lib.tex(,130) saturation with respect to all variables.
../singular_texi/./d2t_singular/toric_lib.tex(,131) @*For the mathematical background, see
../singular_texi/./d2t_singular/toric_lib.tex(,132) 
../singular_texi/./d2t_singular/toric_lib.tex(,133)    @ref{Toric ideals and integer programming}.
../singular_texi/./d2t_singular/toric_lib.tex(,134) 
../singular_texi/./d2t_singular/toric_lib.tex(,135) @end table
../singular_texi/./d2t_singular/toric_lib.tex(,136) @strong{Example:}
../singular_texi/./d2t_singular/toric_lib.tex(,137) @smallexample
../singular_texi/./d2t_singular/toric_lib.tex(,138) @c computed example toric_std d2t_singular/toric_lib.doc:114 
../singular_texi/./d2t_singular/toric_lib.tex(,139) LIB "toric.lib";
../singular_texi/./d2t_singular/toric_lib.tex(,140) ring r=0,(x,y,z),wp(3,2,1);
../singular_texi/./d2t_singular/toric_lib.tex(,141) // call with toric ideal (of the matrix A=(1,1,1))
../singular_texi/./d2t_singular/toric_lib.tex(,142) ideal I=x-y,x-z;
../singular_texi/./d2t_singular/toric_lib.tex(,143) ideal J=toric_std(I);
../singular_texi/./d2t_singular/toric_lib.tex(,144) J;
../singular_texi/./d2t_singular/toric_lib.tex(,145) @expansion{} J[1]=y-z
../singular_texi/./d2t_singular/toric_lib.tex(,146) @expansion{} J[2]=x-z
../singular_texi/./d2t_singular/toric_lib.tex(,147) // call with the same ideal, but badly chosen generators:
../singular_texi/./d2t_singular/toric_lib.tex(,148) // 1) not only binomials
../singular_texi/./d2t_singular/toric_lib.tex(,149) I=x-y,2x-y-z;
../singular_texi/./d2t_singular/toric_lib.tex(,150) J=toric_std(I);
../singular_texi/./d2t_singular/toric_lib.tex(,151) @expansion{} ERROR: Generator 2 of the input ideal is no difference of monomials.
../singular_texi/./d2t_singular/toric_lib.tex(,152) // 2) binomials whose monomials are not relatively prime
../singular_texi/./d2t_singular/toric_lib.tex(,153) I=x-y,xy-yz,y-z;
../singular_texi/./d2t_singular/toric_lib.tex(,154) J=toric_std(I);
../singular_texi/./d2t_singular/toric_lib.tex(,155) @expansion{} Warning: The monomials of generator 2 of the input ideal are not relative\
../singular_texi/./d2t_singular/toric_lib.tex(,156)    ly prime.
../singular_texi/./d2t_singular/toric_lib.tex(,157) J;
../singular_texi/./d2t_singular/toric_lib.tex(,158) @expansion{} J[1]=y-z
../singular_texi/./d2t_singular/toric_lib.tex(,159) @expansion{} J[2]=x-z
../singular_texi/./d2t_singular/toric_lib.tex(,160) // call with a non-toric ideal that seems to be toric
../singular_texi/./d2t_singular/toric_lib.tex(,161) I=x-yz,xy-z;
../singular_texi/./d2t_singular/toric_lib.tex(,162) J=toric_std(I);
../singular_texi/./d2t_singular/toric_lib.tex(,163) J;
../singular_texi/./d2t_singular/toric_lib.tex(,164) @expansion{} J[1]=y2-1
../singular_texi/./d2t_singular/toric_lib.tex(,165) @expansion{} J[2]=x-yz
../singular_texi/./d2t_singular/toric_lib.tex(,166) // comparison with real standard basis and saturation
../singular_texi/./d2t_singular/toric_lib.tex(,167) ideal H=std(I);
../singular_texi/./d2t_singular/toric_lib.tex(,168) H;
../singular_texi/./d2t_singular/toric_lib.tex(,169) @expansion{} H[1]=x-yz
../singular_texi/./d2t_singular/toric_lib.tex(,170) @expansion{} H[2]=y2z-z
../singular_texi/./d2t_singular/toric_lib.tex(,171) LIB "elim.lib";
../singular_texi/./d2t_singular/toric_lib.tex(,172) sat(H,xyz);
../singular_texi/./d2t_singular/toric_lib.tex(,173) @expansion{} [1]:
../singular_texi/./d2t_singular/toric_lib.tex(,174) @expansion{}    _[1]=x-yz
../singular_texi/./d2t_singular/toric_lib.tex(,175) @expansion{}    _[2]=y2-1
../singular_texi/./d2t_singular/toric_lib.tex(,176) @expansion{} [2]:
../singular_texi/./d2t_singular/toric_lib.tex(,177) @expansion{}    1
../singular_texi/./d2t_singular/toric_lib.tex(,178) @c end example toric_std d2t_singular/toric_lib.doc:114
../singular_texi/./d2t_singular/toric_lib.tex(,179) @end smallexample
../singular_texi/./d2t_singular/toric_lib.tex(,180) @c inserted refs from d2t_singular/toric_lib.doc:140
../singular_texi/./d2t_singular/toric_lib.tex(,191) @strong{See also:}
../singular_texi/./d2t_singular/toric_lib.tex(,192) @ref{Toric ideals};
../singular_texi/./d2t_singular/toric_lib.tex(,193) @ref{intprog_lib};
../singular_texi/./d2t_singular/toric_lib.tex(,194) @ref{toric_ideal};
../singular_texi/./d2t_singular/toric_lib.tex(,195) @ref{toric_lib}.
../singular_texi/./d2t_singular/toric_lib.tex(,197) @c end inserted refs from d2t_singular/toric_lib.doc:140
../singular_texi/./d2t_singular/toric_lib.tex(,198) 
../singular_texi/./d2t_singular/toric_lib.tex(,199) @c ---end content toric_std---
../singular_texi/singular.tex(,426) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,427) @node Singularities, Invariant theory, Commutative algebra, SINGULAR libraries
../singular_texi/singular.tex(,428) @section Singularities
../singular_texi/singular.tex(,429) @cindex Singularities
../singular_texi/singular.tex(,430) 
../singular_texi/singular.tex(,431) @menu
../singular_texi/singular.tex(,432) @c * alexpoly_lib:: Resolution Graph and Alexander Polynomial
../singular_texi/singular.tex(,433) * classify_lib:: procedures for the Arnold-classifier of singularities
../singular_texi/singular.tex(,434) * deform_lib:: procedures for computing miniversal deformation
../singular_texi/singular.tex(,435) * equising_lib:: procedures for equisingularity strata
../singular_texi/singular.tex(,436) * gaussman_lib:: procedures for gauss-manin connection of a singularity
../singular_texi/singular.tex(,437) * hnoether_lib:: procedures for the Hamburger-Noether (Puiseux) development
../singular_texi/singular.tex(,438) * mondromy_lib:: procedures to compute the monodromy of a singularity
../singular_texi/singular.tex(,439) * qhmoduli_lib:: procedures for moduli spaces of sqh-singularities
../singular_texi/singular.tex(,440) * sing_lib:: procedures for computing invariants of singularities
../singular_texi/singular.tex(,441) * spcurve_lib:: procedures for cm codimension 2 singularities
../singular_texi/singular.tex(,442) * spectrum_lib:: procedures for computing singularity spectra
../singular_texi/singular.tex(,443) @end menu
../singular_texi/singular.tex(,444) 
../singular_texi/singular.tex(,445) @c ---------------------------------------------------------
../singular_texi/singular.tex(,446) @c @node alexpoly_lib, classify_lib, Singularities, Singularities
../singular_texi/singular.tex(,447) @c @subsection alexpoly_lib
../singular_texi/singular.tex(,448) @c @c lib alexpoly.lib
../singular_texi/singular.tex(,449) @c ---------------------------------------------------------
../singular_texi/singular.tex(,450) @c @node classify_lib, deform_lib, alexpoly_lib, Singularities
../singular_texi/singular.tex(,451) @node classify_lib, deform_lib, Singularities, Singularities
../singular_texi/singular.tex(,452) @subsection classify_lib
../singular_texi/singular.tex(,453) @c include of docu for classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/classify_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/classify_lib.doc
../singular_texi/./d2t_singular/classify_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/classify_lib.doc INSTEAD
../singular_texi/./d2t_singular/classify_lib.tex(,4) @c library version: (1.48.2.4,2002/04/11)
../singular_texi/./d2t_singular/classify_lib.tex(,5) @c library file: ../Singular/LIB/classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,6) @cindex classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,7) @cindex classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/classify_lib.tex(,10) classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/classify_lib.tex(,12)   Arnold Classifier of Singularities
../singular_texi/./d2t_singular/classify_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/classify_lib.tex(,14) Kai Krueger, krueger@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/classify_lib.tex(,15) @*Corina Baciu, baciu@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/classify_lib.tex(,16) 
../singular_texi/./d2t_singular/classify_lib.tex(,17) @item @strong{Overview:}
../singular_texi/./d2t_singular/classify_lib.tex(,18) A library for classifying isolated hypersurface singularities w.r.t. right
../singular_texi/./d2t_singular/classify_lib.tex(,19) equivalence, based on the determinator of singularities by V.I. Arnold.
../singular_texi/./d2t_singular/classify_lib.tex(,20) 
../singular_texi/./d2t_singular/classify_lib.tex(,21) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,22) 
../singular_texi/./d2t_singular/classify_lib.tex(,23) @strong{Procedures:}
../singular_texi/./d2t_singular/classify_lib.tex(,24) @menu
../singular_texi/./d2t_singular/classify_lib.tex(,25) * basicinvariants:: computes Milnor number, determinacy-bound and corank of
../singular_texi/./d2t_singular/classify_lib.tex(,26) * classify:: normal form of poly f determined with Arnold's method
../singular_texi/./d2t_singular/classify_lib.tex(,27) * corank:: computes the corank of f (i.e. of the Hessian of f)
../singular_texi/./d2t_singular/classify_lib.tex(,28) * Hcode:: coding of intvec v according to the number repetitions
../singular_texi/./d2t_singular/classify_lib.tex(,29) * init_debug:: print trace and debugging information depending on int n
../singular_texi/./d2t_singular/classify_lib.tex(,30) * internalfunctions:: display names of internal procedures of this library
../singular_texi/./d2t_singular/classify_lib.tex(,31) * milnorcode:: Hilbert poly of [e-th] Milnor algebra coded with Hcode
../singular_texi/./d2t_singular/classify_lib.tex(,32) * morsesplit:: residual part of f after applying the splitting lemma
../singular_texi/./d2t_singular/classify_lib.tex(,33) * quickclass:: normal form of f determined by invariants (milnorcode)
../singular_texi/./d2t_singular/classify_lib.tex(,34) * singularity:: normal form of singularity given by its name s and index
../singular_texi/./d2t_singular/classify_lib.tex(,35) * swap:: returns b,a
../singular_texi/./d2t_singular/classify_lib.tex(,36) * A_L:: shortcut for quickclass(f) or normalform(s)
../singular_texi/./d2t_singular/classify_lib.tex(,37) * normalform:: normal form of singularity given by its name s
../singular_texi/./d2t_singular/classify_lib.tex(,38) * debug_log:: print trace and debugging information w.r.t level>@@DeBug
../singular_texi/./d2t_singular/classify_lib.tex(,39) @end menu
../singular_texi/./d2t_singular/classify_lib.tex(,40) @c ---end content LibInfo---
../singular_texi/./d2t_singular/classify_lib.tex(,41) 
../singular_texi/./d2t_singular/classify_lib.tex(,42) @c ------------------- basicinvariants -------------
../singular_texi/./d2t_singular/classify_lib.tex(,43) @node basicinvariants, classify,, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,44) @subsubsection basicinvariants
../singular_texi/./d2t_singular/classify_lib.tex(,45) @cindex basicinvariants
../singular_texi/./d2t_singular/classify_lib.tex(,46) @c ---content basicinvariants---
../singular_texi/./d2t_singular/classify_lib.tex(,47) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,48) 
../singular_texi/./d2t_singular/classify_lib.tex(,49) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,50) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,51) basicinvariants(f); f = poly
../singular_texi/./d2t_singular/classify_lib.tex(,52) 
../singular_texi/./d2t_singular/classify_lib.tex(,53) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,54) Compute basic invariants of f: an upper bound d for the
../singular_texi/./d2t_singular/classify_lib.tex(,55) determinacy, the milnor number mu and the corank c of f
../singular_texi/./d2t_singular/classify_lib.tex(,56) 
../singular_texi/./d2t_singular/classify_lib.tex(,57) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,58) intvec: d, mu, c
../singular_texi/./d2t_singular/classify_lib.tex(,59) 
../singular_texi/./d2t_singular/classify_lib.tex(,60) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,61) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,62) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,63) @c computed example basicinvariants d2t_singular/classify_lib.doc:61 
../singular_texi/./d2t_singular/classify_lib.tex(,64) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,65) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,66) basicinvariants((x2+3y-2z)^2+xyz-(x-y3+x2*z3)^3);
../singular_texi/./d2t_singular/classify_lib.tex(,67) @expansion{} 5,4,2
../singular_texi/./d2t_singular/classify_lib.tex(,68) @c end example basicinvariants d2t_singular/classify_lib.doc:61
../singular_texi/./d2t_singular/classify_lib.tex(,69) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,70) @c ---end content basicinvariants---
../singular_texi/./d2t_singular/classify_lib.tex(,71) 
../singular_texi/./d2t_singular/classify_lib.tex(,72) @c ------------------- classify -------------
../singular_texi/./d2t_singular/classify_lib.tex(,73) @node classify, corank, basicinvariants, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,74) @subsubsection classify
../singular_texi/./d2t_singular/classify_lib.tex(,75) @cindex classify
../singular_texi/./d2t_singular/classify_lib.tex(,76) @c ---content classify---
../singular_texi/./d2t_singular/classify_lib.tex(,77) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,78) 
../singular_texi/./d2t_singular/classify_lib.tex(,79) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,80) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,81) classify(f); f=poly
../singular_texi/./d2t_singular/classify_lib.tex(,82) 
../singular_texi/./d2t_singular/classify_lib.tex(,83) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,84) normal form and singularity type of f with respect to right
../singular_texi/./d2t_singular/classify_lib.tex(,85) equivalence, as given in the book "Singularities of differentiable
../singular_texi/./d2t_singular/classify_lib.tex(,86) maps, Volume I" by V.I. Arnold, S.M. Gusein-Zade, A.N. Varchenko
../singular_texi/./d2t_singular/classify_lib.tex(,87) 
../singular_texi/./d2t_singular/classify_lib.tex(,88) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,89) normal form of f, of type poly
../singular_texi/./d2t_singular/classify_lib.tex(,90) 
../singular_texi/./d2t_singular/classify_lib.tex(,91) @item @strong{Remark:}
../singular_texi/./d2t_singular/classify_lib.tex(,92) This version of classify is only beta. Please send bugs and
../singular_texi/./d2t_singular/classify_lib.tex(,93) comments to: "Kai Krueger" <krueger@@mathematik.uni-kl.de> @*
../singular_texi/./d2t_singular/classify_lib.tex(,94) Be sure to have at least Singular version 1.0.1. Updates can be
../singular_texi/./d2t_singular/classify_lib.tex(,95) found at: @*
../singular_texi/./d2t_singular/classify_lib.tex(,96) URL=http://www.mathematik.uni-kl.de/~krueger/Singular/
../singular_texi/./d2t_singular/classify_lib.tex(,97) 
../singular_texi/./d2t_singular/classify_lib.tex(,98) @item @strong{Note:}
../singular_texi/./d2t_singular/classify_lib.tex(,99) type init_debug(n); (0 <= n <= 10) in order to get intermediate
../singular_texi/./d2t_singular/classify_lib.tex(,100) information, higher values of n give more information.
../singular_texi/./d2t_singular/classify_lib.tex(,101) @*The proc creates several global objects with names all starting
../singular_texi/./d2t_singular/classify_lib.tex(,102) with @@, hence there should be no name conflicts
../singular_texi/./d2t_singular/classify_lib.tex(,103) 
../singular_texi/./d2t_singular/classify_lib.tex(,104) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,105) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,106) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,107) @c computed example classify d2t_singular/classify_lib.doc:104 
../singular_texi/./d2t_singular/classify_lib.tex(,108) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,109) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,110) poly f=(x2+3y-2z)^2+xyz-(x-y3+x2*z3)^3;
../singular_texi/./d2t_singular/classify_lib.tex(,111) classify(f);
../singular_texi/./d2t_singular/classify_lib.tex(,112) @expansion{} About the singularity :
../singular_texi/./d2t_singular/classify_lib.tex(,113) @expansion{}           Milnor number(f)   = 4
../singular_texi/./d2t_singular/classify_lib.tex(,114) @expansion{}           Corank(f)          = 2
../singular_texi/./d2t_singular/classify_lib.tex(,115) @expansion{}           Determinacy       <= 5
../singular_texi/./d2t_singular/classify_lib.tex(,116) @expansion{} Guessing type via Milnorcode:   D[k]=D[4]
../singular_texi/./d2t_singular/classify_lib.tex(,117) @expansion{} 
../singular_texi/./d2t_singular/classify_lib.tex(,118) @expansion{} Computing normal form ...
../singular_texi/./d2t_singular/classify_lib.tex(,119) @expansion{} I have to apply the splitting lemma. This will take some time....:-)
../singular_texi/./d2t_singular/classify_lib.tex(,120) @expansion{}    Arnold step number 4
../singular_texi/./d2t_singular/classify_lib.tex(,121) @expansion{} The singularity
../singular_texi/./d2t_singular/classify_lib.tex(,122) @expansion{}    -x3+3/2xy2+1/2x3y-1/16x2y2+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,123) @expansion{} is R-equivalent to D[4].
../singular_texi/./d2t_singular/classify_lib.tex(,124) @expansion{}    Milnor number = 4
../singular_texi/./d2t_singular/classify_lib.tex(,125) @expansion{}    modality      = 0
../singular_texi/./d2t_singular/classify_lib.tex(,126) @expansion{} 2z2+x2y+y3
../singular_texi/./d2t_singular/classify_lib.tex(,127) init_debug(3);
../singular_texi/./d2t_singular/classify_lib.tex(,128) @expansion{} Debugging level change from  0  to  3
../singular_texi/./d2t_singular/classify_lib.tex(,129) classify(f);
../singular_texi/./d2t_singular/classify_lib.tex(,130) @expansion{} Computing Basicinvariants of f ...
../singular_texi/./d2t_singular/classify_lib.tex(,131) @expansion{} About the singularity :
../singular_texi/./d2t_singular/classify_lib.tex(,132) @expansion{}           Milnor number(f)   = 4
../singular_texi/./d2t_singular/classify_lib.tex(,133) @expansion{}           Corank(f)          = 2
../singular_texi/./d2t_singular/classify_lib.tex(,134) @expansion{}           Determinacy       <= 5
../singular_texi/./d2t_singular/classify_lib.tex(,135) @expansion{} Hcode: 1,2,1,0,0
../singular_texi/./d2t_singular/classify_lib.tex(,136) @expansion{} Milnor code :  1,1,1
../singular_texi/./d2t_singular/classify_lib.tex(,137) @expansion{} Debug:(2):  entering HKclass3_teil_1 1,1,1
../singular_texi/./d2t_singular/classify_lib.tex(,138) @expansion{} Debug:(2):  finishing HKclass3_teil_1
../singular_texi/./d2t_singular/classify_lib.tex(,139) @expansion{} Guessing type via Milnorcode:   D[k]=D[4]
../singular_texi/./d2t_singular/classify_lib.tex(,140) @expansion{} 
../singular_texi/./d2t_singular/classify_lib.tex(,141) @expansion{} Computing normal form ...
../singular_texi/./d2t_singular/classify_lib.tex(,142) @expansion{} I have to apply the splitting lemma. This will take some time....:-)
../singular_texi/./d2t_singular/classify_lib.tex(,143) @expansion{} Debug:(3):  Split the polynomial below using determinacy:  5
../singular_texi/./d2t_singular/classify_lib.tex(,144) @expansion{} Debug:(3):  9y2-12yz+4z2-x3+6x2y-4x2z+xyz+x4+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,145) @expansion{} Debug:(2):  Permutations: 3,2,1
../singular_texi/./d2t_singular/classify_lib.tex(,146) @expansion{} Debug:(2):  Permutations: 3,2,1
../singular_texi/./d2t_singular/classify_lib.tex(,147) @expansion{} Debug:(2):  rank determined with Morse rg= 1
../singular_texi/./d2t_singular/classify_lib.tex(,148) @expansion{} Residual singularity f= -x3+3/2xy2+1/2x3y-1/16x2y2+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,149) @expansion{} Step 3
../singular_texi/./d2t_singular/classify_lib.tex(,150) @expansion{}    Arnold step number 4
../singular_texi/./d2t_singular/classify_lib.tex(,151) @expansion{} The singularity
../singular_texi/./d2t_singular/classify_lib.tex(,152) @expansion{}    -x3+3/2xy2+1/2x3y-1/16x2y2+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,153) @expansion{} is R-equivalent to D[4].
../singular_texi/./d2t_singular/classify_lib.tex(,154) @expansion{}    Milnor number = 4
../singular_texi/./d2t_singular/classify_lib.tex(,155) @expansion{}    modality      = 0
../singular_texi/./d2t_singular/classify_lib.tex(,156) @expansion{} Debug:(2):  Decode:
../singular_texi/./d2t_singular/classify_lib.tex(,157) @expansion{} Debug:(2):  S_in= D[4]   s_in= D[4]                          
../singular_texi/./d2t_singular/classify_lib.tex(,158) @expansion{} Debug:(2):  Looking for Normalform of  D[k] with (k,r,s) = ( 4 , 0 , 0 )
../singular_texi/./d2t_singular/classify_lib.tex(,159) @expansion{} Debug:(2):  Opening Singalarity-database:  
../singular_texi/./d2t_singular/classify_lib.tex(,160) @expansion{}  DBM: NFlist
../singular_texi/./d2t_singular/classify_lib.tex(,161) @expansion{} Debug:(2):  DBMread( D[k] )= x2y+y^(k-1) .
../singular_texi/./d2t_singular/classify_lib.tex(,162) @expansion{} Debug:(2):  S= f = x2y+y^(k-1);  Tp= x2y+y^(k-1) Key= I_D[k]
../singular_texi/./d2t_singular/classify_lib.tex(,163) @expansion{} Polynom f= x2y+y3   crk= 2   Mu= 4  MlnCd= 1,1,1
../singular_texi/./d2t_singular/classify_lib.tex(,164) @expansion{} Debug:(2):  Info= x2y+y3
../singular_texi/./d2t_singular/classify_lib.tex(,165) @expansion{} Debug:(2):  Normal form NF(f)= 2*x(3)^2+x(1)^2*x(2)+x(2)^3
../singular_texi/./d2t_singular/classify_lib.tex(,166) @expansion{} 2z2+x2y+y3
../singular_texi/./d2t_singular/classify_lib.tex(,167) @c end example classify d2t_singular/classify_lib.doc:104
../singular_texi/./d2t_singular/classify_lib.tex(,168) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,169) @c ---end content classify---
../singular_texi/./d2t_singular/classify_lib.tex(,170) 
../singular_texi/./d2t_singular/classify_lib.tex(,171) @c ------------------- corank -------------
../singular_texi/./d2t_singular/classify_lib.tex(,172) @node corank, Hcode, classify, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,173) @subsubsection corank
../singular_texi/./d2t_singular/classify_lib.tex(,174) @cindex corank
../singular_texi/./d2t_singular/classify_lib.tex(,175) @c ---content corank---
../singular_texi/./d2t_singular/classify_lib.tex(,176) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,177) 
../singular_texi/./d2t_singular/classify_lib.tex(,178) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,179) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,180) corank(f); f=poly
../singular_texi/./d2t_singular/classify_lib.tex(,181) 
../singular_texi/./d2t_singular/classify_lib.tex(,182) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,183) the corank of the Hessian matrix of f, of type int
../singular_texi/./d2t_singular/classify_lib.tex(,184) 
../singular_texi/./d2t_singular/classify_lib.tex(,185) @item @strong{Remark:}
../singular_texi/./d2t_singular/classify_lib.tex(,186) corank(f) is the number of variables occurring in the residual
../singular_texi/./d2t_singular/classify_lib.tex(,187) singularity after applying 'morsesplit' to f
../singular_texi/./d2t_singular/classify_lib.tex(,188) 
../singular_texi/./d2t_singular/classify_lib.tex(,189) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,190) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,191) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,192) @c computed example corank d2t_singular/classify_lib.doc:136 
../singular_texi/./d2t_singular/classify_lib.tex(,193) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,194) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,195) poly f=(x2+3y-2z)^2+xyz-(x-y3+x2*z3)^3;
../singular_texi/./d2t_singular/classify_lib.tex(,196) corank(f);
../singular_texi/./d2t_singular/classify_lib.tex(,197) @expansion{} 2
../singular_texi/./d2t_singular/classify_lib.tex(,198) @c end example corank d2t_singular/classify_lib.doc:136
../singular_texi/./d2t_singular/classify_lib.tex(,199) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,200) @c ---end content corank---
../singular_texi/./d2t_singular/classify_lib.tex(,201) 
../singular_texi/./d2t_singular/classify_lib.tex(,202) @c ------------------- Hcode -------------
../singular_texi/./d2t_singular/classify_lib.tex(,203) @node Hcode, init_debug, corank, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,204) @subsubsection Hcode
../singular_texi/./d2t_singular/classify_lib.tex(,205) @cindex Hcode
../singular_texi/./d2t_singular/classify_lib.tex(,206) @c ---content Hcode---
../singular_texi/./d2t_singular/classify_lib.tex(,207) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,208) 
../singular_texi/./d2t_singular/classify_lib.tex(,209) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,210) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,211) Hcode(v); v=intvec
../singular_texi/./d2t_singular/classify_lib.tex(,212) 
../singular_texi/./d2t_singular/classify_lib.tex(,213) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,214) intvec, coding v according to the number of successive
../singular_texi/./d2t_singular/classify_lib.tex(,215) repetitions of an entry
../singular_texi/./d2t_singular/classify_lib.tex(,216) 
../singular_texi/./d2t_singular/classify_lib.tex(,217) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,218) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,219) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,220) @c computed example Hcode d2t_singular/classify_lib.doc:163 
../singular_texi/./d2t_singular/classify_lib.tex(,221) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,222) intvec v1 = 1,3,5,5,2;
../singular_texi/./d2t_singular/classify_lib.tex(,223) Hcode(v1);
../singular_texi/./d2t_singular/classify_lib.tex(,224) @expansion{} 1,0,1,0,2,0,0,1,0
../singular_texi/./d2t_singular/classify_lib.tex(,225) intvec v2 = 1,2,3,4,4,4,4,4,4,4,3,2,1;
../singular_texi/./d2t_singular/classify_lib.tex(,226) Hcode(v2);
../singular_texi/./d2t_singular/classify_lib.tex(,227) @expansion{} 1,1,1,7,1,1,1
../singular_texi/./d2t_singular/classify_lib.tex(,228) @c end example Hcode d2t_singular/classify_lib.doc:163
../singular_texi/./d2t_singular/classify_lib.tex(,229) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,230) @c ---end content Hcode---
../singular_texi/./d2t_singular/classify_lib.tex(,231) 
../singular_texi/./d2t_singular/classify_lib.tex(,232) @c ------------------- init_debug -------------
../singular_texi/./d2t_singular/classify_lib.tex(,233) @node init_debug, internalfunctions, Hcode, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,234) @subsubsection init_debug
../singular_texi/./d2t_singular/classify_lib.tex(,235) @cindex init_debug
../singular_texi/./d2t_singular/classify_lib.tex(,236) @c ---content init_debug---
../singular_texi/./d2t_singular/classify_lib.tex(,237) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,238) 
../singular_texi/./d2t_singular/classify_lib.tex(,239) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,240) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,241) init_debug([level]); level=int
../singular_texi/./d2t_singular/classify_lib.tex(,242) 
../singular_texi/./d2t_singular/classify_lib.tex(,243) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,244) Set the global variable @@DeBug to level. The variable @@DeBug is
../singular_texi/./d2t_singular/classify_lib.tex(,245) used by the function debug_log(level, list of strings) to know
../singular_texi/./d2t_singular/classify_lib.tex(,246) when to print the list of strings. init_debug() reports only
../singular_texi/./d2t_singular/classify_lib.tex(,247) changes of @@DeBug.
../singular_texi/./d2t_singular/classify_lib.tex(,248) 
../singular_texi/./d2t_singular/classify_lib.tex(,249) @item @strong{Note:}
../singular_texi/./d2t_singular/classify_lib.tex(,250) The procedure init_debug(n); is useful as trace-mode. n may
../singular_texi/./d2t_singular/classify_lib.tex(,251) range from 0 to 10, higher values of n give more information.
../singular_texi/./d2t_singular/classify_lib.tex(,252) 
../singular_texi/./d2t_singular/classify_lib.tex(,253) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,254) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,255) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,256) @c computed example init_debug d2t_singular/classify_lib.doc:197 
../singular_texi/./d2t_singular/classify_lib.tex(,257) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,258) init_debug();
../singular_texi/./d2t_singular/classify_lib.tex(,259) debug_log(1,"no trace information printed");
../singular_texi/./d2t_singular/classify_lib.tex(,260) init_debug(1);
../singular_texi/./d2t_singular/classify_lib.tex(,261) @expansion{} Debugging level change from  0  to  1
../singular_texi/./d2t_singular/classify_lib.tex(,262) debug_log(1,"some trace information");
../singular_texi/./d2t_singular/classify_lib.tex(,263) @expansion{} some trace information
../singular_texi/./d2t_singular/classify_lib.tex(,264) init_debug(2);
../singular_texi/./d2t_singular/classify_lib.tex(,265) @expansion{} Debugging level change from  1  to  2
../singular_texi/./d2t_singular/classify_lib.tex(,266) debug_log(2,"nice for debugging scripts");
../singular_texi/./d2t_singular/classify_lib.tex(,267) @expansion{} Debug:(2):  nice for debugging scripts
../singular_texi/./d2t_singular/classify_lib.tex(,268) init_debug(0);
../singular_texi/./d2t_singular/classify_lib.tex(,269) @expansion{} Debugging switched off.
../singular_texi/./d2t_singular/classify_lib.tex(,270) @c end example init_debug d2t_singular/classify_lib.doc:197
../singular_texi/./d2t_singular/classify_lib.tex(,271) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,272) @c ---end content init_debug---
../singular_texi/./d2t_singular/classify_lib.tex(,273) 
../singular_texi/./d2t_singular/classify_lib.tex(,274) @c ------------------- internalfunctions -------------
../singular_texi/./d2t_singular/classify_lib.tex(,275) @node internalfunctions, milnorcode, init_debug, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,276) @subsubsection internalfunctions
../singular_texi/./d2t_singular/classify_lib.tex(,277) @cindex internalfunctions
../singular_texi/./d2t_singular/classify_lib.tex(,278) @c ---content internalfunctions---
../singular_texi/./d2t_singular/classify_lib.tex(,279) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,280) 
../singular_texi/./d2t_singular/classify_lib.tex(,281) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,282) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,283) internalfunctions();
../singular_texi/./d2t_singular/classify_lib.tex(,284) 
../singular_texi/./d2t_singular/classify_lib.tex(,285) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,286) nothing, display names of internal procedures of classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,287) 
../singular_texi/./d2t_singular/classify_lib.tex(,288) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,289) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,290) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,291) @c computed example internalfunctions d2t_singular/classify_lib.doc:227 
../singular_texi/./d2t_singular/classify_lib.tex(,292) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,293) internalfunctions();
../singular_texi/./d2t_singular/classify_lib.tex(,294) @expansion{}    Internal functions for the classification using Arnold's method,
../singular_texi/./d2t_singular/classify_lib.tex(,295) @expansion{}    the function numbers correspond to numbers in Arnold's classifier:
../singular_texi/./d2t_singular/classify_lib.tex(,296) @expansion{} Klassifiziere(poly f);      //determine the type of the singularity f
../singular_texi/./d2t_singular/classify_lib.tex(,297) @expansion{}   Funktion1bis (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,298) @expansion{}   Funktion3 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,299) @expansion{}   Funktion6 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,300) @expansion{}   Funktion13 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,301) @expansion{}   Funktion17 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,302) @expansion{}   Funktion25 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,303) @expansion{}   Funktion40 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,304) @expansion{}   Funktion47 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,305) @expansion{}   Funktion50 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,306) @expansion{}   Funktion58 (poly fin, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,307) @expansion{}   Funktion59 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,308) @expansion{}   Funktion66 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,309) @expansion{}   Funktion82 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,310) @expansion{}   Funktion83 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,311) @expansion{}   Funktion91 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,312) @expansion{}   Funktion92 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,313) @expansion{}   Funktion93 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,314) @expansion{}   Funktion94 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,315) @expansion{}   Funktion95 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,316) @expansion{}   Funktion96 (poly f, list cstn, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,317) @expansion{}   Funktion97 (poly f, list cstn)
../singular_texi/./d2t_singular/classify_lib.tex(,318) @expansion{}   Isomorphie_s82_x (poly f, poly fk, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,319) @expansion{}   Isomorphie_s82_z (poly f, poly fk, int k)
../singular_texi/./d2t_singular/classify_lib.tex(,320) @expansion{}   Isomorphie_s17 (poly f, poly fk, int k, int ct)
../singular_texi/./d2t_singular/classify_lib.tex(,321) @expansion{}   printresult (string f,string typ,int Mu,int m,int corank,int K)
../singular_texi/./d2t_singular/classify_lib.tex(,322) @expansion{}   
../singular_texi/./d2t_singular/classify_lib.tex(,323) @expansion{}    Internal functions for the classifcation by invariants:
../singular_texi/./d2t_singular/classify_lib.tex(,324) @expansion{}   Cubic (poly f)
../singular_texi/./d2t_singular/classify_lib.tex(,325) @expansion{}   parity (int e)             //return the parity of e
../singular_texi/./d2t_singular/classify_lib.tex(,326) @expansion{}   HKclass (intvec i)
../singular_texi/./d2t_singular/classify_lib.tex(,327) @expansion{}   HKclass3( intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,328) @expansion{}   HKclass3_teil_1 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,329) @expansion{}   HKclass5 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,330) @expansion{}   HKclass5_teil_1 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,331) @expansion{}   HKclass5_teil_2 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,332) @expansion{}   HKclass7 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,333) @expansion{}   HKclass7_teil_1 (intvec i, string SG_Typ, int cnt)
../singular_texi/./d2t_singular/classify_lib.tex(,334) @expansion{}   
../singular_texi/./d2t_singular/classify_lib.tex(,335) @expansion{}    Internal functions for the Morse-splitting lemma:
../singular_texi/./d2t_singular/classify_lib.tex(,336) @expansion{}   Morse(poly fi, int K, int corank)  //splitting lemma itself
../singular_texi/./d2t_singular/classify_lib.tex(,337) @expansion{}   Coeffs (list #)
../singular_texi/./d2t_singular/classify_lib.tex(,338) @expansion{}   Coeff
../singular_texi/./d2t_singular/classify_lib.tex(,339) @expansion{}   
../singular_texi/./d2t_singular/classify_lib.tex(,340) @expansion{}    Internal functions providing tools:
../singular_texi/./d2t_singular/classify_lib.tex(,341) @expansion{}   ReOrder(poly f)
../singular_texi/./d2t_singular/classify_lib.tex(,342) @expansion{}   Singularitaet(string typ,int k,int r,int s,poly a,poly b,poly c,poly d)
../singular_texi/./d2t_singular/classify_lib.tex(,343) @expansion{}   RandomPolyK
../singular_texi/./d2t_singular/classify_lib.tex(,344) @expansion{}   Faktorisiere(poly f, poly g, int p, int k)   compute g = (ax+by^k)^p
../singular_texi/./d2t_singular/classify_lib.tex(,345) @expansion{}   Teile(poly f, poly g);             //divides f by g
../singular_texi/./d2t_singular/classify_lib.tex(,346) @expansion{}   GetRf(poly f, int n);
../singular_texi/./d2t_singular/classify_lib.tex(,347) @expansion{}   Show(poly f);
../singular_texi/./d2t_singular/classify_lib.tex(,348) @expansion{}   checkring();
../singular_texi/./d2t_singular/classify_lib.tex(,349) @expansion{}   DecodeNormalFormString(string s);
../singular_texi/./d2t_singular/classify_lib.tex(,350) @expansion{}   Setring(int n, string ringname);
../singular_texi/./d2t_singular/classify_lib.tex(,351) @expansion{}   
../singular_texi/./d2t_singular/classify_lib.tex(,352) @c end example internalfunctions d2t_singular/classify_lib.doc:227
../singular_texi/./d2t_singular/classify_lib.tex(,353) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,354) @c ---end content internalfunctions---
../singular_texi/./d2t_singular/classify_lib.tex(,355) 
../singular_texi/./d2t_singular/classify_lib.tex(,356) @c ------------------- milnorcode -------------
../singular_texi/./d2t_singular/classify_lib.tex(,357) @node milnorcode, morsesplit, internalfunctions, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,358) @subsubsection milnorcode
../singular_texi/./d2t_singular/classify_lib.tex(,359) @cindex milnorcode
../singular_texi/./d2t_singular/classify_lib.tex(,360) @c ---content milnorcode---
../singular_texi/./d2t_singular/classify_lib.tex(,361) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,362) 
../singular_texi/./d2t_singular/classify_lib.tex(,363) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,364) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,365) milnorcode(f[,e]); f=poly, e=int
../singular_texi/./d2t_singular/classify_lib.tex(,366) 
../singular_texi/./d2t_singular/classify_lib.tex(,367) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,368) intvec, coding the Hilbert function of the e-th Milnor algebra
../singular_texi/./d2t_singular/classify_lib.tex(,369) of f, i.e. of basering/(jacob(f)^e) (default e=1), according
../singular_texi/./d2t_singular/classify_lib.tex(,370) to proc Hcode
../singular_texi/./d2t_singular/classify_lib.tex(,371) 
../singular_texi/./d2t_singular/classify_lib.tex(,372) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,373) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,374) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,375) @c computed example milnorcode d2t_singular/classify_lib.doc:253 
../singular_texi/./d2t_singular/classify_lib.tex(,376) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,377) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,378) poly f=x2y+y3+z2;
../singular_texi/./d2t_singular/classify_lib.tex(,379) milnorcode(f);
../singular_texi/./d2t_singular/classify_lib.tex(,380) @expansion{} 1,1,1
../singular_texi/./d2t_singular/classify_lib.tex(,381) milnorcode(f,2);  // a big second argument may result in memory overflow
../singular_texi/./d2t_singular/classify_lib.tex(,382) @expansion{} 1,0,1,0,2,0,0,1,0
../singular_texi/./d2t_singular/classify_lib.tex(,383) @c end example milnorcode d2t_singular/classify_lib.doc:253
../singular_texi/./d2t_singular/classify_lib.tex(,384) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,385) @c ---end content milnorcode---
../singular_texi/./d2t_singular/classify_lib.tex(,386) 
../singular_texi/./d2t_singular/classify_lib.tex(,387) @c ------------------- morsesplit -------------
../singular_texi/./d2t_singular/classify_lib.tex(,388) @node morsesplit, quickclass, milnorcode, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,389) @subsubsection morsesplit
../singular_texi/./d2t_singular/classify_lib.tex(,390) @cindex morsesplit
../singular_texi/./d2t_singular/classify_lib.tex(,391) @c ---content morsesplit---
../singular_texi/./d2t_singular/classify_lib.tex(,392) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,393) 
../singular_texi/./d2t_singular/classify_lib.tex(,394) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,395) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,396) morsesplit(f); f=poly
../singular_texi/./d2t_singular/classify_lib.tex(,397) 
../singular_texi/./d2t_singular/classify_lib.tex(,398) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,399) Normal form of f in M^3 after application of the splitting lemma
../singular_texi/./d2t_singular/classify_lib.tex(,400) 
../singular_texi/./d2t_singular/classify_lib.tex(,401) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,402) apply the splitting lemma (generalized Morse lemma) to f
../singular_texi/./d2t_singular/classify_lib.tex(,403) 
../singular_texi/./d2t_singular/classify_lib.tex(,404) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,405) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,406) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,407) @c computed example morsesplit d2t_singular/classify_lib.doc:283 
../singular_texi/./d2t_singular/classify_lib.tex(,408) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,409) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,410) export r;
../singular_texi/./d2t_singular/classify_lib.tex(,411) @expansion{} // ** `r` is already global
../singular_texi/./d2t_singular/classify_lib.tex(,412) init_debug(1);
../singular_texi/./d2t_singular/classify_lib.tex(,413) @expansion{} Debugging level is set to  1
../singular_texi/./d2t_singular/classify_lib.tex(,414) poly f=(x2+3y-2z)^2+xyz-(x-y3+x2*z3)^3;
../singular_texi/./d2t_singular/classify_lib.tex(,415) poly g=morsesplit(f);
../singular_texi/./d2t_singular/classify_lib.tex(,416) @expansion{} Residual singularity f= -x3+3/2xy2+1/2x3y-1/16x2y2+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,417) g;
../singular_texi/./d2t_singular/classify_lib.tex(,418) @expansion{} -x3+3/2xy2+1/2x3y-1/16x2y2+3x2y3
../singular_texi/./d2t_singular/classify_lib.tex(,419) @c end example morsesplit d2t_singular/classify_lib.doc:283
../singular_texi/./d2t_singular/classify_lib.tex(,420) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,421) @c ---end content morsesplit---
../singular_texi/./d2t_singular/classify_lib.tex(,422) 
../singular_texi/./d2t_singular/classify_lib.tex(,423) @c ------------------- quickclass -------------
../singular_texi/./d2t_singular/classify_lib.tex(,424) @node quickclass, singularity, morsesplit, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,425) @subsubsection quickclass
../singular_texi/./d2t_singular/classify_lib.tex(,426) @cindex quickclass
../singular_texi/./d2t_singular/classify_lib.tex(,427) @c ---content quickclass---
../singular_texi/./d2t_singular/classify_lib.tex(,428) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,429) 
../singular_texi/./d2t_singular/classify_lib.tex(,430) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,431) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,432) quickclass(f); f=poly
../singular_texi/./d2t_singular/classify_lib.tex(,433) 
../singular_texi/./d2t_singular/classify_lib.tex(,434) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,435) Normal form of f in Arnold's list
../singular_texi/./d2t_singular/classify_lib.tex(,436) 
../singular_texi/./d2t_singular/classify_lib.tex(,437) @item @strong{Remark:}
../singular_texi/./d2t_singular/classify_lib.tex(,438) try to determine the normal form of f by invariants, mainly by
../singular_texi/./d2t_singular/classify_lib.tex(,439) computing the Hilbert function of the Milnor algebra,
../singular_texi/./d2t_singular/classify_lib.tex(,440) no coordinate change is needed (see also proc 'milnorcode').
../singular_texi/./d2t_singular/classify_lib.tex(,441) 
../singular_texi/./d2t_singular/classify_lib.tex(,442) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,443) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,444) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,445) @c computed example quickclass d2t_singular/classify_lib.doc:317 
../singular_texi/./d2t_singular/classify_lib.tex(,446) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,447) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,448) poly f=(x2+3y-2z)^2+xyz-(x-y3+x2*z3)^3;
../singular_texi/./d2t_singular/classify_lib.tex(,449) quickclass(f);
../singular_texi/./d2t_singular/classify_lib.tex(,450) @expansion{} Singularity R-equivalent to :  D[k]=D[4]
../singular_texi/./d2t_singular/classify_lib.tex(,451) @expansion{} normal form : z2+x2y+y3
../singular_texi/./d2t_singular/classify_lib.tex(,452) @expansion{} z2+x2y+y3
../singular_texi/./d2t_singular/classify_lib.tex(,453) @c end example quickclass d2t_singular/classify_lib.doc:317
../singular_texi/./d2t_singular/classify_lib.tex(,454) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,455) @c ---end content quickclass---
../singular_texi/./d2t_singular/classify_lib.tex(,456) 
../singular_texi/./d2t_singular/classify_lib.tex(,457) @c ------------------- singularity -------------
../singular_texi/./d2t_singular/classify_lib.tex(,458) @node singularity, swap, quickclass, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,459) @subsubsection singularity
../singular_texi/./d2t_singular/classify_lib.tex(,460) @cindex singularity
../singular_texi/./d2t_singular/classify_lib.tex(,461) @c ---content singularity---
../singular_texi/./d2t_singular/classify_lib.tex(,462) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,463) 
../singular_texi/./d2t_singular/classify_lib.tex(,464) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,465) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,466) singularity(t, l); t=string (name of singularity),
../singular_texi/./d2t_singular/classify_lib.tex(,467) @*l=list of integers/polynomials (indices/parameters of singularity)
../singular_texi/./d2t_singular/classify_lib.tex(,468) 
../singular_texi/./d2t_singular/classify_lib.tex(,469) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,470) get the singularity named by type t from the database.
../singular_texi/./d2t_singular/classify_lib.tex(,471) list l is as follows: @*
../singular_texi/./d2t_singular/classify_lib.tex(,472) l= k [,r [,s [,a [,b [,c [,d]..]: k,r,s=int a,b,c,d=poly. @*
../singular_texi/./d2t_singular/classify_lib.tex(,473) The name of the dbm-database file is: NFlist.[dir,pag].
../singular_texi/./d2t_singular/classify_lib.tex(,474) The file is found in the current directory. If it does not
../singular_texi/./d2t_singular/classify_lib.tex(,475) exist, please run the script MakeDBM first.
../singular_texi/./d2t_singular/classify_lib.tex(,476) 
../singular_texi/./d2t_singular/classify_lib.tex(,477) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,478) Normal form and corank of the singularity named by type t and its
../singular_texi/./d2t_singular/classify_lib.tex(,479) index (indices) l.
../singular_texi/./d2t_singular/classify_lib.tex(,480) 
../singular_texi/./d2t_singular/classify_lib.tex(,481) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,482) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,483) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,484) @c computed example singularity d2t_singular/classify_lib.doc:353 
../singular_texi/./d2t_singular/classify_lib.tex(,485) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,486) ring r=0,(x,y,z),(c,ds);
../singular_texi/./d2t_singular/classify_lib.tex(,487) init_debug(0);
../singular_texi/./d2t_singular/classify_lib.tex(,488) singularity("E[6k]",6);
../singular_texi/./d2t_singular/classify_lib.tex(,489) @expansion{} [1]:
../singular_texi/./d2t_singular/classify_lib.tex(,490) @expansion{}    x3+xy13+y19
../singular_texi/./d2t_singular/classify_lib.tex(,491) @expansion{} [2]:
../singular_texi/./d2t_singular/classify_lib.tex(,492) @expansion{}    2
../singular_texi/./d2t_singular/classify_lib.tex(,493) singularity("T[k,r,s]", 3, 7, 5);
../singular_texi/./d2t_singular/classify_lib.tex(,494) @expansion{} [1]:
../singular_texi/./d2t_singular/classify_lib.tex(,495) @expansion{}    x3+xyz+z5+y7
../singular_texi/./d2t_singular/classify_lib.tex(,496) @expansion{} [2]:
../singular_texi/./d2t_singular/classify_lib.tex(,497) @expansion{}    3
../singular_texi/./d2t_singular/classify_lib.tex(,498) poly f=y;
../singular_texi/./d2t_singular/classify_lib.tex(,499) singularity("J[k,r]", 4, 0, 0, f);
../singular_texi/./d2t_singular/classify_lib.tex(,500) @expansion{} [1]:
../singular_texi/./d2t_singular/classify_lib.tex(,501) @expansion{}    x3+x2y4+y13
../singular_texi/./d2t_singular/classify_lib.tex(,502) @expansion{} [2]:
../singular_texi/./d2t_singular/classify_lib.tex(,503) @expansion{}    2
../singular_texi/./d2t_singular/classify_lib.tex(,504) @c end example singularity d2t_singular/classify_lib.doc:353
../singular_texi/./d2t_singular/classify_lib.tex(,505) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,506) @c ---end content singularity---
../singular_texi/./d2t_singular/classify_lib.tex(,507) 
../singular_texi/./d2t_singular/classify_lib.tex(,508) @c ------------------- swap -------------
../singular_texi/./d2t_singular/classify_lib.tex(,509) @node swap, A_L, singularity, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,510) @subsubsection swap
../singular_texi/./d2t_singular/classify_lib.tex(,511) @cindex swap
../singular_texi/./d2t_singular/classify_lib.tex(,512) @c ---content swap---
../singular_texi/./d2t_singular/classify_lib.tex(,513) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,514) 
../singular_texi/./d2t_singular/classify_lib.tex(,515) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,516) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,517) swap(a,b);
../singular_texi/./d2t_singular/classify_lib.tex(,518) 
../singular_texi/./d2t_singular/classify_lib.tex(,519) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,520) b,a if b,a is the input (any type)
../singular_texi/./d2t_singular/classify_lib.tex(,521) 
../singular_texi/./d2t_singular/classify_lib.tex(,522) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,523) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,524) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,525) @c computed example swap d2t_singular/classify_lib.doc:382 
../singular_texi/./d2t_singular/classify_lib.tex(,526) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,527) swap("variable1","variable2");
../singular_texi/./d2t_singular/classify_lib.tex(,528) @expansion{} variable2 variable1
../singular_texi/./d2t_singular/classify_lib.tex(,529) @c end example swap d2t_singular/classify_lib.doc:382
../singular_texi/./d2t_singular/classify_lib.tex(,530) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,531) @c ---end content swap---
../singular_texi/./d2t_singular/classify_lib.tex(,532) 
../singular_texi/./d2t_singular/classify_lib.tex(,533) @c ------------------- A_L -------------
../singular_texi/./d2t_singular/classify_lib.tex(,534) @node A_L, normalform, swap, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,535) @subsubsection A_L
../singular_texi/./d2t_singular/classify_lib.tex(,536) @cindex A_L
../singular_texi/./d2t_singular/classify_lib.tex(,537) @c ---content A_L---
../singular_texi/./d2t_singular/classify_lib.tex(,538) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,539) 
../singular_texi/./d2t_singular/classify_lib.tex(,540) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,541) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,542) A_L(f); f poly
../singular_texi/./d2t_singular/classify_lib.tex(,543) @*A_L(s); s string, the name of the singularity
../singular_texi/./d2t_singular/classify_lib.tex(,544) 
../singular_texi/./d2t_singular/classify_lib.tex(,545) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,546) the normal form of f in Arnold's list of singularities in case 1,
../singular_texi/./d2t_singular/classify_lib.tex(,547) in case 2 nothing has to be computed.
../singular_texi/./d2t_singular/classify_lib.tex(,548) 
../singular_texi/./d2t_singular/classify_lib.tex(,549) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,550) A_L(f): compute via 'milnorcode' the class of f and return the normal
../singular_texi/./d2t_singular/classify_lib.tex(,551) form of f found in the database.
../singular_texi/./d2t_singular/classify_lib.tex(,552) @*A_L("name"): get the normal form from the database for the
../singular_texi/./d2t_singular/classify_lib.tex(,553) singularity given by its name.
../singular_texi/./d2t_singular/classify_lib.tex(,554) 
../singular_texi/./d2t_singular/classify_lib.tex(,555) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,556) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,557) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,558) @c computed example A_L d2t_singular/classify_lib.doc:414 
../singular_texi/./d2t_singular/classify_lib.tex(,559) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,560) ring r=0,(a,b,c),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,561) poly f=A_L("E[13]");
../singular_texi/./d2t_singular/classify_lib.tex(,562) f;
../singular_texi/./d2t_singular/classify_lib.tex(,563) @expansion{} c2+a3+ab5+b8
../singular_texi/./d2t_singular/classify_lib.tex(,564) A_L(f);
../singular_texi/./d2t_singular/classify_lib.tex(,565) @expansion{} Singularity R-equivalent to :  E[6k+1]=E[13]
../singular_texi/./d2t_singular/classify_lib.tex(,566) @expansion{} normal form : c2+a3+ab5+b8
../singular_texi/./d2t_singular/classify_lib.tex(,567) @expansion{} c2+a3+ab5+b8
../singular_texi/./d2t_singular/classify_lib.tex(,568) @c end example A_L d2t_singular/classify_lib.doc:414
../singular_texi/./d2t_singular/classify_lib.tex(,569) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,570) @c ---end content A_L---
../singular_texi/./d2t_singular/classify_lib.tex(,571) 
../singular_texi/./d2t_singular/classify_lib.tex(,572) @c ------------------- normalform -------------
../singular_texi/./d2t_singular/classify_lib.tex(,573) @node normalform, debug_log, A_L, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,574) @subsubsection normalform
../singular_texi/./d2t_singular/classify_lib.tex(,575) @cindex normalform
../singular_texi/./d2t_singular/classify_lib.tex(,576) @c ---content normalform---
../singular_texi/./d2t_singular/classify_lib.tex(,577) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,578) 
../singular_texi/./d2t_singular/classify_lib.tex(,579) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,580) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,581) normalform(s); s=string
../singular_texi/./d2t_singular/classify_lib.tex(,582) 
../singular_texi/./d2t_singular/classify_lib.tex(,583) @item @strong{Return:}
../singular_texi/./d2t_singular/classify_lib.tex(,584) Arnold's normal form of singularity with name s
../singular_texi/./d2t_singular/classify_lib.tex(,585) 
../singular_texi/./d2t_singular/classify_lib.tex(,586) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,587) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,588) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,589) @c computed example normalform d2t_singular/classify_lib.doc:441 
../singular_texi/./d2t_singular/classify_lib.tex(,590) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,591) ring r=0,(a,b,c),ds;
../singular_texi/./d2t_singular/classify_lib.tex(,592) normalform("E[13]");
../singular_texi/./d2t_singular/classify_lib.tex(,593) @expansion{} c2+a3+ab5+b8
../singular_texi/./d2t_singular/classify_lib.tex(,594) @c end example normalform d2t_singular/classify_lib.doc:441
../singular_texi/./d2t_singular/classify_lib.tex(,595) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,596) @c ---end content normalform---
../singular_texi/./d2t_singular/classify_lib.tex(,597) 
../singular_texi/./d2t_singular/classify_lib.tex(,598) @c ------------------- debug_log -------------
../singular_texi/./d2t_singular/classify_lib.tex(,599) @node debug_log,, normalform, classify_lib
../singular_texi/./d2t_singular/classify_lib.tex(,600) @subsubsection debug_log
../singular_texi/./d2t_singular/classify_lib.tex(,601) @cindex debug_log
../singular_texi/./d2t_singular/classify_lib.tex(,602) @c ---content debug_log---
../singular_texi/./d2t_singular/classify_lib.tex(,603) Procedure from library @code{classify.lib} (@pxref{classify_lib}).
../singular_texi/./d2t_singular/classify_lib.tex(,604) 
../singular_texi/./d2t_singular/classify_lib.tex(,605) @table @asis
../singular_texi/./d2t_singular/classify_lib.tex(,606) @item @strong{Usage:}
../singular_texi/./d2t_singular/classify_lib.tex(,607) debug_log(level,li); level=int, li=comma separated "message" list
../singular_texi/./d2t_singular/classify_lib.tex(,608) 
../singular_texi/./d2t_singular/classify_lib.tex(,609) @item @strong{Compute:}
../singular_texi/./d2t_singular/classify_lib.tex(,610) print "messages" if level>=@@DeBug.
../singular_texi/./d2t_singular/classify_lib.tex(,611) @*useful for user-defined trace messages.
../singular_texi/./d2t_singular/classify_lib.tex(,612) 
../singular_texi/./d2t_singular/classify_lib.tex(,613) @end table
../singular_texi/./d2t_singular/classify_lib.tex(,614) @strong{Example:}
../singular_texi/./d2t_singular/classify_lib.tex(,615) @smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,616) @c computed example debug_log d2t_singular/classify_lib.doc:467 
../singular_texi/./d2t_singular/classify_lib.tex(,617) LIB "classify.lib";
../singular_texi/./d2t_singular/classify_lib.tex(,618) example init_debug;
../singular_texi/./d2t_singular/classify_lib.tex(,619) @expansion{} // proc init_debug from lib classify.lib
../singular_texi/./d2t_singular/classify_lib.tex(,620) @expansion{} EXAMPLE:
../singular_texi/./d2t_singular/classify_lib.tex(,621) @expansion{}   init_debug();
../singular_texi/./d2t_singular/classify_lib.tex(,622) @expansion{}   debug_log(1,"no trace information printed");
../singular_texi/./d2t_singular/classify_lib.tex(,623) @expansion{}   init_debug(1);
../singular_texi/./d2t_singular/classify_lib.tex(,624) @expansion{} Debugging level change from  0  to  1
../singular_texi/./d2t_singular/classify_lib.tex(,625) @expansion{}   debug_log(1,"some trace information");
../singular_texi/./d2t_singular/classify_lib.tex(,626) @expansion{} some trace information
../singular_texi/./d2t_singular/classify_lib.tex(,627) @expansion{}   init_debug(2);
../singular_texi/./d2t_singular/classify_lib.tex(,628) @expansion{} Debugging level change from  1  to  2
../singular_texi/./d2t_singular/classify_lib.tex(,629) @expansion{}   debug_log(2,"nice for debugging scripts");
../singular_texi/./d2t_singular/classify_lib.tex(,630) @expansion{} Debug:(2):  nice for debugging scripts
../singular_texi/./d2t_singular/classify_lib.tex(,631) @expansion{}   init_debug(0);
../singular_texi/./d2t_singular/classify_lib.tex(,632) @expansion{} Debugging switched off.
../singular_texi/./d2t_singular/classify_lib.tex(,633) @expansion{} 
../singular_texi/./d2t_singular/classify_lib.tex(,634) @c end example debug_log d2t_singular/classify_lib.doc:467
../singular_texi/./d2t_singular/classify_lib.tex(,635) @end smallexample
../singular_texi/./d2t_singular/classify_lib.tex(,636) @c inserted refs from d2t_singular/classify_lib.doc:472
../singular_texi/./d2t_singular/classify_lib.tex(,644) @strong{See also:}
../singular_texi/./d2t_singular/classify_lib.tex(,645) @ref{init_debug}.
../singular_texi/./d2t_singular/classify_lib.tex(,647) @c end inserted refs from d2t_singular/classify_lib.doc:472
../singular_texi/./d2t_singular/classify_lib.tex(,648) 
../singular_texi/./d2t_singular/classify_lib.tex(,649) @c ---end content debug_log---
../singular_texi/singular.tex(,455) @c ----------------------------------------------------------
../singular_texi/singular.tex(,456) @node deform_lib, equising_lib, classify_lib, Singularities
../singular_texi/singular.tex(,457) @subsection deform_lib
../singular_texi/singular.tex(,458) @c include of docu for deform.lib
../singular_texi/./d2t_singular/deform_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/deform_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/deform_lib.doc
../singular_texi/./d2t_singular/deform_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/deform_lib.doc INSTEAD
../singular_texi/./d2t_singular/deform_lib.tex(,4) @c library version: (1.25.2.2,2003/02/24)
../singular_texi/./d2t_singular/deform_lib.tex(,5) @c library file: ../Singular/LIB/deform.lib
../singular_texi/./d2t_singular/deform_lib.tex(,6) @cindex deform.lib
../singular_texi/./d2t_singular/deform_lib.tex(,7) @cindex deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/deform_lib.tex(,10) deform.lib
../singular_texi/./d2t_singular/deform_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/deform_lib.tex(,12)     Miniversal Deformation of Singularities and Modules
../singular_texi/./d2t_singular/deform_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/deform_lib.tex(,14) Bernd Martin, email: martin@@math.tu-cottbus.de
../singular_texi/./d2t_singular/deform_lib.tex(,15) 
../singular_texi/./d2t_singular/deform_lib.tex(,16) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,17) 
../singular_texi/./d2t_singular/deform_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/deform_lib.tex(,19) @menu
../singular_texi/./d2t_singular/deform_lib.tex(,20) * versal:: miniversal deformation of isolated singularity Fo
../singular_texi/./d2t_singular/deform_lib.tex(,21) * mod_versal:: miniversal deformation of module Mo modulo ideal I
../singular_texi/./d2t_singular/deform_lib.tex(,22) * lift_kbase:: lifting N into standard kbase of M
../singular_texi/./d2t_singular/deform_lib.tex(,23) * lift_rel_kb:: relative lifting N into a kbase of M
../singular_texi/./d2t_singular/deform_lib.tex(,24) * kill_rings:: kills the exported rings from above
../singular_texi/./d2t_singular/deform_lib.tex(,25) @end menu
../singular_texi/./d2t_singular/deform_lib.tex(,26) @c ---end content LibInfo---
../singular_texi/./d2t_singular/deform_lib.tex(,27) 
../singular_texi/./d2t_singular/deform_lib.tex(,28) @c ------------------- versal -------------
../singular_texi/./d2t_singular/deform_lib.tex(,29) @node versal, mod_versal,, deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,30) @subsubsection versal
../singular_texi/./d2t_singular/deform_lib.tex(,31) @cindex versal
../singular_texi/./d2t_singular/deform_lib.tex(,32) @c ---content versal---
../singular_texi/./d2t_singular/deform_lib.tex(,33) Procedure from library @code{deform.lib} (@pxref{deform_lib}).
../singular_texi/./d2t_singular/deform_lib.tex(,34) 
../singular_texi/./d2t_singular/deform_lib.tex(,35) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,36) @item @strong{Usage:}
../singular_texi/./d2t_singular/deform_lib.tex(,37) versal(Fo[,d,any]); Fo=ideal, d=int, any=list
../singular_texi/./d2t_singular/deform_lib.tex(,38) 
../singular_texi/./d2t_singular/deform_lib.tex(,39) @item @strong{Compute:}
../singular_texi/./d2t_singular/deform_lib.tex(,40) miniversal deformation of Fo up to degree d (default d=100),
../singular_texi/./d2t_singular/deform_lib.tex(,41) 
../singular_texi/./d2t_singular/deform_lib.tex(,42) @item @strong{Create:}
../singular_texi/./d2t_singular/deform_lib.tex(,43) Rings (exported):
../singular_texi/./d2t_singular/deform_lib.tex(,44) @*'my'Px = extending the basering Po by new variables given by
../singular_texi/./d2t_singular/deform_lib.tex(,45) "A,B,.." (deformation parameters), returns as basering; the
../singular_texi/./d2t_singular/deform_lib.tex(,46) new variables precede the old ones, the ordering is the
../singular_texi/./d2t_singular/deform_lib.tex(,47) product between "ls" and "ord(Po)"
../singular_texi/./d2t_singular/deform_lib.tex(,48) @*'my'Qx = Px/Fo extending Qo=Po/Fo,
../singular_texi/./d2t_singular/deform_lib.tex(,49) @*'my'So = the embedding-ring of the versal base space,
../singular_texi/./d2t_singular/deform_lib.tex(,50) @*'my'Ox = Px/Js extending So/Js. (default my="")
../singular_texi/./d2t_singular/deform_lib.tex(,51) 
../singular_texi/./d2t_singular/deform_lib.tex(,52) Matrices (in Px, exported):
../singular_texi/./d2t_singular/deform_lib.tex(,53) @*Js = giving the versal base space (obstructions),
../singular_texi/./d2t_singular/deform_lib.tex(,54) @*Fs = giving the versal family of Fo,
../singular_texi/./d2t_singular/deform_lib.tex(,55) @*Rs = giving the lifting of Ro=syz(Fo).
../singular_texi/./d2t_singular/deform_lib.tex(,56) 
../singular_texi/./d2t_singular/deform_lib.tex(,57) If d is defined (!=0), it computes up to degree d.
../singular_texi/./d2t_singular/deform_lib.tex(,58) @*If 'any' is defined and any[1] is no string, interactive version.
../singular_texi/./d2t_singular/deform_lib.tex(,59) @*Otherwise 'any' gives predefined strings: "my","param","order","out"
../singular_texi/./d2t_singular/deform_lib.tex(,60) ("my" prefix-string, "param" is a letter (e.g. "A") for the name of
../singular_texi/./d2t_singular/deform_lib.tex(,61) first parameter or (e.g. "A(") for index parameter variables, "order"
../singular_texi/./d2t_singular/deform_lib.tex(,62) ordering string for ring extension), "out" name of output-file).
../singular_texi/./d2t_singular/deform_lib.tex(,63) 
../singular_texi/./d2t_singular/deform_lib.tex(,64) @item @strong{Note:}
../singular_texi/./d2t_singular/deform_lib.tex(,65) printlevel < 0 no output at all,
../singular_texi/./d2t_singular/deform_lib.tex(,66) @*printlevel >=0,1,2,.. informs you, what is going on;
../singular_texi/./d2t_singular/deform_lib.tex(,67) @*this proc uses 'execute'.
../singular_texi/./d2t_singular/deform_lib.tex(,68) 
../singular_texi/./d2t_singular/deform_lib.tex(,69) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,70) @strong{Example:}
../singular_texi/./d2t_singular/deform_lib.tex(,71) @smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,72) @c computed example versal d2t_singular/deform_lib.doc:70 
../singular_texi/./d2t_singular/deform_lib.tex(,73) LIB "deform.lib";
../singular_texi/./d2t_singular/deform_lib.tex(,74) int p          = printlevel;
../singular_texi/./d2t_singular/deform_lib.tex(,75) printlevel     = 0;
../singular_texi/./d2t_singular/deform_lib.tex(,76) ring r1        = 0,(x,y,z,u,v),ds;
../singular_texi/./d2t_singular/deform_lib.tex(,77) matrix m[2][4] = x,y,z,u,y,z,u,v;
../singular_texi/./d2t_singular/deform_lib.tex(,78) ideal Fo       = minor(m,2);
../singular_texi/./d2t_singular/deform_lib.tex(,79) // cone over rational normal curve of degree 4
../singular_texi/./d2t_singular/deform_lib.tex(,80) versal(Fo);
../singular_texi/./d2t_singular/deform_lib.tex(,81) @expansion{} // ready: T_1 and T_2
../singular_texi/./d2t_singular/deform_lib.tex(,82) @expansion{} // start computation in degree 2.
../singular_texi/./d2t_singular/deform_lib.tex(,83) @expansion{} 
../singular_texi/./d2t_singular/deform_lib.tex(,84) @expansion{} // Result belongs to ring Px.
../singular_texi/./d2t_singular/deform_lib.tex(,85) @expansion{} // Equations of total space of miniversal deformation are 
../singular_texi/./d2t_singular/deform_lib.tex(,86) @expansion{} // given by Fs, equations of miniversal base space by Js.
../singular_texi/./d2t_singular/deform_lib.tex(,87) @expansion{} // Make Px the basering and list objects defined in Px by typing:
../singular_texi/./d2t_singular/deform_lib.tex(,88) @expansion{}    setring Px; show(Px);
../singular_texi/./d2t_singular/deform_lib.tex(,89) @expansion{}    listvar(matrix);
../singular_texi/./d2t_singular/deform_lib.tex(,90) @expansion{} // NOTE: rings Qx, Px, So are alive!
../singular_texi/./d2t_singular/deform_lib.tex(,91) @expansion{} // (use 'kill_rings("");' to remove)
../singular_texi/./d2t_singular/deform_lib.tex(,92) setring Px;
../singular_texi/./d2t_singular/deform_lib.tex(,93) // ___ Equations of miniversal base space ___:
../singular_texi/./d2t_singular/deform_lib.tex(,94) Js;"";
../singular_texi/./d2t_singular/deform_lib.tex(,95) @expansion{} Js[1,1]=BD
../singular_texi/./d2t_singular/deform_lib.tex(,96) @expansion{} Js[1,2]=-AD+D2
../singular_texi/./d2t_singular/deform_lib.tex(,97) @expansion{} Js[1,3]=-CD
../singular_texi/./d2t_singular/deform_lib.tex(,98) @expansion{} 
../singular_texi/./d2t_singular/deform_lib.tex(,99) // ___ Equations of miniversal total space ___:
../singular_texi/./d2t_singular/deform_lib.tex(,100) Fs;"";
../singular_texi/./d2t_singular/deform_lib.tex(,101) @expansion{} Fs[1,1]=-u2+zv+Bu+Dv
../singular_texi/./d2t_singular/deform_lib.tex(,102) @expansion{} Fs[1,2]=-zu+yv-Au+Du
../singular_texi/./d2t_singular/deform_lib.tex(,103) @expansion{} Fs[1,3]=-yu+xv+Cu+Dz
../singular_texi/./d2t_singular/deform_lib.tex(,104) @expansion{} Fs[1,4]=z2-yu+Az+By
../singular_texi/./d2t_singular/deform_lib.tex(,105) @expansion{} Fs[1,5]=yz-xu+Bx-Cz
../singular_texi/./d2t_singular/deform_lib.tex(,106) @expansion{} Fs[1,6]=-y2+xz+Ax+Cy
../singular_texi/./d2t_singular/deform_lib.tex(,107) @expansion{} 
../singular_texi/./d2t_singular/deform_lib.tex(,108) @c end example versal d2t_singular/deform_lib.doc:70
../singular_texi/./d2t_singular/deform_lib.tex(,109) @end smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,110) @c ---end content versal---
../singular_texi/./d2t_singular/deform_lib.tex(,111) 
../singular_texi/./d2t_singular/deform_lib.tex(,112) @c ------------------- mod_versal -------------
../singular_texi/./d2t_singular/deform_lib.tex(,113) @node mod_versal, lift_kbase, versal, deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,114) @subsubsection mod_versal
../singular_texi/./d2t_singular/deform_lib.tex(,115) @cindex mod_versal
../singular_texi/./d2t_singular/deform_lib.tex(,116) @c ---content mod_versal---
../singular_texi/./d2t_singular/deform_lib.tex(,117) Procedure from library @code{deform.lib} (@pxref{deform_lib}).
../singular_texi/./d2t_singular/deform_lib.tex(,118) 
../singular_texi/./d2t_singular/deform_lib.tex(,119) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,120) @item @strong{Usage:}
../singular_texi/./d2t_singular/deform_lib.tex(,121) mod_versal(Mo,I[,d,any]); I=ideal, M=module, d=int, any =list
../singular_texi/./d2t_singular/deform_lib.tex(,122) 
../singular_texi/./d2t_singular/deform_lib.tex(,123) @item @strong{Compute:}
../singular_texi/./d2t_singular/deform_lib.tex(,124) miniversal deformation of coker(Mo) over Qo=Po/Io, Po=basering;
../singular_texi/./d2t_singular/deform_lib.tex(,125) 
../singular_texi/./d2t_singular/deform_lib.tex(,126) @item @strong{Create:}
../singular_texi/./d2t_singular/deform_lib.tex(,127) Ringsr (exported):
../singular_texi/./d2t_singular/deform_lib.tex(,128) @*'my'Px = extending the basering by new variables (deformation
../singular_texi/./d2t_singular/deform_lib.tex(,129) parameters), the new variables precede the old ones,
../singular_texi/./d2t_singular/deform_lib.tex(,130) @*the ordering is the product between "my_ord"
../singular_texi/./d2t_singular/deform_lib.tex(,131) @*and "ord(Po)"
../singular_texi/./d2t_singular/deform_lib.tex(,132) @*'my'Qx = Px/Io extending Qo (returns as basering),
../singular_texi/./d2t_singular/deform_lib.tex(,133) @*'my'Ox = Px/(Io+Js) ring of the versal deformation of coker(Ms),
../singular_texi/./d2t_singular/deform_lib.tex(,134) @*'my'So = embedding-ring of the versal base space. (default 'my'="")
../singular_texi/./d2t_singular/deform_lib.tex(,135) 
../singular_texi/./d2t_singular/deform_lib.tex(,136) Matrices (in Qx, exported):
../singular_texi/./d2t_singular/deform_lib.tex(,137) @*Js = giving the versal base space (obstructions),
../singular_texi/./d2t_singular/deform_lib.tex(,138) @*Ms = giving the versal family of Mo,
../singular_texi/./d2t_singular/deform_lib.tex(,139) @*Ls = giving the lifting of syzygies Lo=syz(Mo),
../singular_texi/./d2t_singular/deform_lib.tex(,140) 
../singular_texi/./d2t_singular/deform_lib.tex(,141) If d is defined (!=0), it computes up to degree d.
../singular_texi/./d2t_singular/deform_lib.tex(,142) @*If 'any' is defined and any[1] is no string, interactive version.
../singular_texi/./d2t_singular/deform_lib.tex(,143) @*Otherwise 'any' gives predefined strings:"my","param","order","out"
../singular_texi/./d2t_singular/deform_lib.tex(,144) ("my" prefix-string, "param" is a letter (e.g. "A") for the name of
../singular_texi/./d2t_singular/deform_lib.tex(,145) first parameter or (e.g. "A(") for index parameter variables, "ord"
../singular_texi/./d2t_singular/deform_lib.tex(,146) ordering string for ring extension), "out" name of output-file).
../singular_texi/./d2t_singular/deform_lib.tex(,147) 
../singular_texi/./d2t_singular/deform_lib.tex(,148) @item @strong{Note:}
../singular_texi/./d2t_singular/deform_lib.tex(,149) printlevel < 0 no output at all,
../singular_texi/./d2t_singular/deform_lib.tex(,150) @*printlevel >=0,1,2,.. informs you, what is going on,
../singular_texi/./d2t_singular/deform_lib.tex(,151) @*this proc uses 'execute'.
../singular_texi/./d2t_singular/deform_lib.tex(,152) 
../singular_texi/./d2t_singular/deform_lib.tex(,153) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,154) @strong{Example:}
../singular_texi/./d2t_singular/deform_lib.tex(,155) @smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,156) @c computed example mod_versal d2t_singular/deform_lib.doc:132 
../singular_texi/./d2t_singular/deform_lib.tex(,157) LIB "deform.lib";
../singular_texi/./d2t_singular/deform_lib.tex(,158) int p = printlevel;
../singular_texi/./d2t_singular/deform_lib.tex(,159) printlevel = 1;
../singular_texi/./d2t_singular/deform_lib.tex(,160) ring  Ro = 0,(x,y),wp(3,4);
../singular_texi/./d2t_singular/deform_lib.tex(,161) ideal Io = x4+y3;
../singular_texi/./d2t_singular/deform_lib.tex(,162) matrix Mo[2][2] = x2,y,-y2,x2;
../singular_texi/./d2t_singular/deform_lib.tex(,163) mod_versal(Mo,Io);
../singular_texi/./d2t_singular/deform_lib.tex(,164) @expansion{} // vdim (Ext^2) = 4
../singular_texi/./d2t_singular/deform_lib.tex(,165) @expansion{} // vdim (Ext^1) = 4
../singular_texi/./d2t_singular/deform_lib.tex(,166) @expansion{} // ready: Ext1 and Ext2
../singular_texi/./d2t_singular/deform_lib.tex(,167) @expansion{} // Ext1 is quasi-homogeneous represented: 3,6,1,4
../singular_texi/./d2t_singular/deform_lib.tex(,168) @expansion{} // infinitesimal extension
../singular_texi/./d2t_singular/deform_lib.tex(,169) @expansion{} x2-Ax-B,   y+Cx+D,
../singular_texi/./d2t_singular/deform_lib.tex(,170) @expansion{} -y2+Cxy+Dy,x2+Ax+B
../singular_texi/./d2t_singular/deform_lib.tex(,171) @expansion{} // start deg = 2
../singular_texi/./d2t_singular/deform_lib.tex(,172) @expansion{} // start deg = 3
../singular_texi/./d2t_singular/deform_lib.tex(,173) @expansion{} // start deg = 4
../singular_texi/./d2t_singular/deform_lib.tex(,174) @expansion{} // start deg = 5
../singular_texi/./d2t_singular/deform_lib.tex(,175) @expansion{} // finished in degree 
../singular_texi/./d2t_singular/deform_lib.tex(,176) @expansion{} 5
../singular_texi/./d2t_singular/deform_lib.tex(,177) @expansion{} // quasi-homogeneous weights of miniversal base
../singular_texi/./d2t_singular/deform_lib.tex(,178) @expansion{} 3,6,1,4
../singular_texi/./d2t_singular/deform_lib.tex(,179) @expansion{} // Result belongs to qring Qx
../singular_texi/./d2t_singular/deform_lib.tex(,180) @expansion{} // Equations of total space of miniversal deformation are in Js
../singular_texi/./d2t_singular/deform_lib.tex(,181) @expansion{} -2AB+A3+3CD2-BC3-3AC2D+A2C3,
../singular_texi/./d2t_singular/deform_lib.tex(,182) @expansion{} -B2+A2B+D3-3BC2D+ABC3
../singular_texi/./d2t_singular/deform_lib.tex(,183) @expansion{} // Matrix of the deformed module is Ms and lifted syzygies are Ls.
../singular_texi/./d2t_singular/deform_lib.tex(,184) @expansion{} // Make Qx the basering and list objects defined in Qx by typing:
../singular_texi/./d2t_singular/deform_lib.tex(,185) @expansion{}    listvar(ring);setring Qx; show(Qx);listvar(ideal);listvar(matrix);
../singular_texi/./d2t_singular/deform_lib.tex(,186) @expansion{} // NOTE: rings Qx, Ox, So are still alive!
../singular_texi/./d2t_singular/deform_lib.tex(,187) @expansion{} // (use: 'kill_rings();' to remove them)
../singular_texi/./d2t_singular/deform_lib.tex(,188) printlevel = p;
../singular_texi/./d2t_singular/deform_lib.tex(,189) if(system("with","Namespaces")) @{
../singular_texi/./d2t_singular/deform_lib.tex(,190) if(nameof(Current) == "Ring" ) @{
../singular_texi/./d2t_singular/deform_lib.tex(,191) kill Top::Px,Top::Qx,Top::So;
../singular_texi/./d2t_singular/deform_lib.tex(,192) @} else @{
../singular_texi/./d2t_singular/deform_lib.tex(,193) kill Ring::Px,Ring::So;
../singular_texi/./d2t_singular/deform_lib.tex(,194) @}
../singular_texi/./d2t_singular/deform_lib.tex(,195) @}
../singular_texi/./d2t_singular/deform_lib.tex(,196) kill Px,Qx,So;
../singular_texi/./d2t_singular/deform_lib.tex(,197) @c end example mod_versal d2t_singular/deform_lib.doc:132
../singular_texi/./d2t_singular/deform_lib.tex(,198) @end smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,199) @c ---end content mod_versal---
../singular_texi/./d2t_singular/deform_lib.tex(,200) 
../singular_texi/./d2t_singular/deform_lib.tex(,201) @c ------------------- lift_kbase -------------
../singular_texi/./d2t_singular/deform_lib.tex(,202) @node lift_kbase, lift_rel_kb, mod_versal, deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,203) @subsubsection lift_kbase
../singular_texi/./d2t_singular/deform_lib.tex(,204) @cindex lift_kbase
../singular_texi/./d2t_singular/deform_lib.tex(,205) @c ---content lift_kbase---
../singular_texi/./d2t_singular/deform_lib.tex(,206) Procedure from library @code{deform.lib} (@pxref{deform_lib}).
../singular_texi/./d2t_singular/deform_lib.tex(,207) 
../singular_texi/./d2t_singular/deform_lib.tex(,208) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,209) @item @strong{Usage:}
../singular_texi/./d2t_singular/deform_lib.tex(,210) lift_kbase(N,M); N,M=poly/ideal/vector/module
../singular_texi/./d2t_singular/deform_lib.tex(,211) 
../singular_texi/./d2t_singular/deform_lib.tex(,212) @item @strong{Return:}
../singular_texi/./d2t_singular/deform_lib.tex(,213) matrix A, coefficient matrix expressing N as linear combination of
../singular_texi/./d2t_singular/deform_lib.tex(,214) k-basis of M. Let the k-basis have k elements and size(N)=c columns.
../singular_texi/./d2t_singular/deform_lib.tex(,215) Then A satisfies:
../singular_texi/./d2t_singular/deform_lib.tex(,216) @*matrix(reduce(N,std(M)),k,c) = matrix(kbase(std(M)))*A
../singular_texi/./d2t_singular/deform_lib.tex(,217) 
../singular_texi/./d2t_singular/deform_lib.tex(,218) @item @strong{Assume:}
../singular_texi/./d2t_singular/deform_lib.tex(,219) dim(M)=0 and the monomial ordering is a well ordering or the last
../singular_texi/./d2t_singular/deform_lib.tex(,220) block of the ordering is c or C
../singular_texi/./d2t_singular/deform_lib.tex(,221) 
../singular_texi/./d2t_singular/deform_lib.tex(,222) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,223) @strong{Example:}
../singular_texi/./d2t_singular/deform_lib.tex(,224) @smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,225) @c computed example lift_kbase d2t_singular/deform_lib.doc:177 
../singular_texi/./d2t_singular/deform_lib.tex(,226) LIB "deform.lib";
../singular_texi/./d2t_singular/deform_lib.tex(,227) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/deform_lib.tex(,228) module M=[x2,xy],[y2,xy],[0,xx],[0,yy];
../singular_texi/./d2t_singular/deform_lib.tex(,229) module N=[x3+xy,x],[x,x+y2];
../singular_texi/./d2t_singular/deform_lib.tex(,230) print(M);
../singular_texi/./d2t_singular/deform_lib.tex(,231) @expansion{} x2,y2,0, 0,
../singular_texi/./d2t_singular/deform_lib.tex(,232) @expansion{} xy,xy,x2,y2
../singular_texi/./d2t_singular/deform_lib.tex(,233) module kb=kbase(std(M));
../singular_texi/./d2t_singular/deform_lib.tex(,234) print(kb);
../singular_texi/./d2t_singular/deform_lib.tex(,235) @expansion{} y2,xy,y,x,1,0,0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,236) @expansion{} 0, 0, 0,0,0,y,x,1 
../singular_texi/./d2t_singular/deform_lib.tex(,237) print(N);
../singular_texi/./d2t_singular/deform_lib.tex(,238) @expansion{} xy+x3,x,  
../singular_texi/./d2t_singular/deform_lib.tex(,239) @expansion{} x,    x+y2
../singular_texi/./d2t_singular/deform_lib.tex(,240) matrix A=lift_kbase(N,M);
../singular_texi/./d2t_singular/deform_lib.tex(,241) print(A);
../singular_texi/./d2t_singular/deform_lib.tex(,242) @expansion{} 0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,243) @expansion{} 1,0,
../singular_texi/./d2t_singular/deform_lib.tex(,244) @expansion{} 0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,245) @expansion{} 0,1,
../singular_texi/./d2t_singular/deform_lib.tex(,246) @expansion{} 0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,247) @expansion{} 0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,248) @expansion{} 1,1,
../singular_texi/./d2t_singular/deform_lib.tex(,249) @expansion{} 0,0 
../singular_texi/./d2t_singular/deform_lib.tex(,250) matrix(reduce(N,std(M)),nrows(kb),ncols(A)) - matrix(kbase(std(M)))*A;
../singular_texi/./d2t_singular/deform_lib.tex(,251) @expansion{} _[1,1]=0
../singular_texi/./d2t_singular/deform_lib.tex(,252) @expansion{} _[1,2]=0
../singular_texi/./d2t_singular/deform_lib.tex(,253) @expansion{} _[2,1]=0
../singular_texi/./d2t_singular/deform_lib.tex(,254) @expansion{} _[2,2]=0
../singular_texi/./d2t_singular/deform_lib.tex(,255) @c end example lift_kbase d2t_singular/deform_lib.doc:177
../singular_texi/./d2t_singular/deform_lib.tex(,256) @end smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,257) @c ---end content lift_kbase---
../singular_texi/./d2t_singular/deform_lib.tex(,258) 
../singular_texi/./d2t_singular/deform_lib.tex(,259) @c ------------------- lift_rel_kb -------------
../singular_texi/./d2t_singular/deform_lib.tex(,260) @node lift_rel_kb, kill_rings, lift_kbase, deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,261) @subsubsection lift_rel_kb
../singular_texi/./d2t_singular/deform_lib.tex(,262) @cindex lift_rel_kb
../singular_texi/./d2t_singular/deform_lib.tex(,263) @c ---content lift_rel_kb---
../singular_texi/./d2t_singular/deform_lib.tex(,264) Procedure from library @code{deform.lib} (@pxref{deform_lib}).
../singular_texi/./d2t_singular/deform_lib.tex(,265) 
../singular_texi/./d2t_singular/deform_lib.tex(,266) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,267) @item @strong{Usage:}
../singular_texi/./d2t_singular/deform_lib.tex(,268) lift_rel_kb(N,M[,kbaseM,p]);
../singular_texi/./d2t_singular/deform_lib.tex(,269) 
../singular_texi/./d2t_singular/deform_lib.tex(,270) @item @strong{Assume:}
../singular_texi/./d2t_singular/deform_lib.tex(,271) [p a monomial ] or the product of all variables
../singular_texi/./d2t_singular/deform_lib.tex(,272) @*N, M modules of same rank, M depending only on variables not in p
../singular_texi/./d2t_singular/deform_lib.tex(,273) and vdim(M) is finite in this ring,
../singular_texi/./d2t_singular/deform_lib.tex(,274) @*[ kbaseM the kbase of M in the subring given by variables not in p ] @*
../singular_texi/./d2t_singular/deform_lib.tex(,275) warning: these assumptions are not checked by the procedure
../singular_texi/./d2t_singular/deform_lib.tex(,276) 
../singular_texi/./d2t_singular/deform_lib.tex(,277) @item @strong{Return:}
../singular_texi/./d2t_singular/deform_lib.tex(,278) matrix A, whose j-th columns present the coeff's of N[j] in kbaseM,
../singular_texi/./d2t_singular/deform_lib.tex(,279) i.e. kbaseM*A = reduce(N,std(M))
../singular_texi/./d2t_singular/deform_lib.tex(,280) 
../singular_texi/./d2t_singular/deform_lib.tex(,281) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,282) @strong{Example:}
../singular_texi/./d2t_singular/deform_lib.tex(,283) @smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,284) @c computed example lift_rel_kb d2t_singular/deform_lib.doc:218 
../singular_texi/./d2t_singular/deform_lib.tex(,285) LIB "deform.lib";
../singular_texi/./d2t_singular/deform_lib.tex(,286) ring r=0,(A,B,x,y),dp;
../singular_texi/./d2t_singular/deform_lib.tex(,287) module M      = [x2,xy],[xy,y3],[y2],[0,x];
../singular_texi/./d2t_singular/deform_lib.tex(,288) module kbaseM = [1],[x],[xy],[y],[0,1],[0,y],[0,y2];
../singular_texi/./d2t_singular/deform_lib.tex(,289) poly f=xy;
../singular_texi/./d2t_singular/deform_lib.tex(,290) module N = [AB,BBy],[A3xy+x4,AB*(1+y2)];
../singular_texi/./d2t_singular/deform_lib.tex(,291) matrix A = lift_rel_kb(N,M,kbaseM,f);
../singular_texi/./d2t_singular/deform_lib.tex(,292) print(A);
../singular_texi/./d2t_singular/deform_lib.tex(,293) @expansion{} AB,0, 
../singular_texi/./d2t_singular/deform_lib.tex(,294) @expansion{} 0, 0, 
../singular_texi/./d2t_singular/deform_lib.tex(,295) @expansion{} 0, A3,
../singular_texi/./d2t_singular/deform_lib.tex(,296) @expansion{} 0, 0, 
../singular_texi/./d2t_singular/deform_lib.tex(,297) @expansion{} 0, AB,
../singular_texi/./d2t_singular/deform_lib.tex(,298) @expansion{} B2,0, 
../singular_texi/./d2t_singular/deform_lib.tex(,299) @expansion{} 0, AB 
../singular_texi/./d2t_singular/deform_lib.tex(,300) "TEST:";
../singular_texi/./d2t_singular/deform_lib.tex(,301) @expansion{} TEST:
../singular_texi/./d2t_singular/deform_lib.tex(,302) print(matrix(kbaseM)*A-matrix(reduce(N,std(M))));
../singular_texi/./d2t_singular/deform_lib.tex(,303) @expansion{} 0,0,
../singular_texi/./d2t_singular/deform_lib.tex(,304) @expansion{} 0,0 
../singular_texi/./d2t_singular/deform_lib.tex(,305) @c end example lift_rel_kb d2t_singular/deform_lib.doc:218
../singular_texi/./d2t_singular/deform_lib.tex(,306) @end smallexample
../singular_texi/./d2t_singular/deform_lib.tex(,307) @c ---end content lift_rel_kb---
../singular_texi/./d2t_singular/deform_lib.tex(,308) 
../singular_texi/./d2t_singular/deform_lib.tex(,309) @c ------------------- kill_rings -------------
../singular_texi/./d2t_singular/deform_lib.tex(,310) @node kill_rings,, lift_rel_kb, deform_lib
../singular_texi/./d2t_singular/deform_lib.tex(,311) @subsubsection kill_rings
../singular_texi/./d2t_singular/deform_lib.tex(,312) @cindex kill_rings
../singular_texi/./d2t_singular/deform_lib.tex(,313) @c ---content kill_rings---
../singular_texi/./d2t_singular/deform_lib.tex(,314) Procedure from library @code{deform.lib} (@pxref{deform_lib}).
../singular_texi/./d2t_singular/deform_lib.tex(,315) 
../singular_texi/./d2t_singular/deform_lib.tex(,316) @table @asis
../singular_texi/./d2t_singular/deform_lib.tex(,317) @item @strong{Usage:}
../singular_texi/./d2t_singular/deform_lib.tex(,318) kill_rings([string]);
../singular_texi/./d2t_singular/deform_lib.tex(,319) 
../singular_texi/./d2t_singular/deform_lib.tex(,320) @item @strong{Return:}
../singular_texi/./d2t_singular/deform_lib.tex(,321) nothing, but kills exported rings generated by procedures
../singular_texi/./d2t_singular/deform_lib.tex(,322) 'versal' and 'mod_versal' with optional prefix 'string'
../singular_texi/./d2t_singular/deform_lib.tex(,323) 
../singular_texi/./d2t_singular/deform_lib.tex(,324) @end table
../singular_texi/./d2t_singular/deform_lib.tex(,325) @c ---end content kill_rings---
../singular_texi/singular.tex(,460) @c ----------------------------------------------------------
../singular_texi/singular.tex(,461) @node equising_lib, gaussman_lib, deform_lib, Singularities
../singular_texi/singular.tex(,462) @subsection equising_lib
../singular_texi/singular.tex(,463) @c include of docu for equising.lib
../singular_texi/./d2t_singular/equising_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/equising_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/equising_lib.doc
../singular_texi/./d2t_singular/equising_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/equising_lib.doc INSTEAD
../singular_texi/./d2t_singular/equising_lib.tex(,4) @c library version: (1.7.2.6,2003/05/23)
../singular_texi/./d2t_singular/equising_lib.tex(,5) @c library file: ../Singular/LIB/equising.lib
../singular_texi/./d2t_singular/equising_lib.tex(,6) @cindex equising.lib
../singular_texi/./d2t_singular/equising_lib.tex(,7) @cindex equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/equising_lib.tex(,10) equising.lib
../singular_texi/./d2t_singular/equising_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/equising_lib.tex(,12)   Equisingularity Stratum of a Family of Plane Curves
../singular_texi/./d2t_singular/equising_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/equising_lib.tex(,14) Christoph Lossen, lossen@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/equising_lib.tex(,15) @*Andrea Mindnich, mindnich@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/equising_lib.tex(,16) 
../singular_texi/./d2t_singular/equising_lib.tex(,17) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,18) 
../singular_texi/./d2t_singular/equising_lib.tex(,19) @strong{Main procedures:}
../singular_texi/./d2t_singular/equising_lib.tex(,20) @menu
../singular_texi/./d2t_singular/equising_lib.tex(,21) * tau_es:: codim of mu-const stratum in semi-universal def. base
../singular_texi/./d2t_singular/equising_lib.tex(,22) * esIdeal:: (Wahl's) equisingularity ideal of f
../singular_texi/./d2t_singular/equising_lib.tex(,23) * esStratum:: equisingularity stratum of a family F
../singular_texi/./d2t_singular/equising_lib.tex(,24) * isEquising:: tests if a given deformation is equisingular
../singular_texi/./d2t_singular/equising_lib.tex(,25) @end menu
../singular_texi/./d2t_singular/equising_lib.tex(,26) @strong{Auxiliary procedure:}
../singular_texi/./d2t_singular/equising_lib.tex(,27) @menu
../singular_texi/./d2t_singular/equising_lib.tex(,28) * control_Matrix:: computes list of blowing-up data
../singular_texi/./d2t_singular/equising_lib.tex(,29) @end menu
../singular_texi/./d2t_singular/equising_lib.tex(,30) @c ---end content LibInfo---
../singular_texi/./d2t_singular/equising_lib.tex(,31) 
../singular_texi/./d2t_singular/equising_lib.tex(,32) @c ------------------- tau_es -------------
../singular_texi/./d2t_singular/equising_lib.tex(,33) @node tau_es, esIdeal,, equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,34) @subsubsection tau_es
../singular_texi/./d2t_singular/equising_lib.tex(,35) @cindex tau_es
../singular_texi/./d2t_singular/equising_lib.tex(,36) @c ---content tau_es---
../singular_texi/./d2t_singular/equising_lib.tex(,37) Procedure from library @code{equising.lib} (@pxref{equising_lib}).
../singular_texi/./d2t_singular/equising_lib.tex(,38) 
../singular_texi/./d2t_singular/equising_lib.tex(,39) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,40) @item @strong{Usage:}
../singular_texi/./d2t_singular/equising_lib.tex(,41) tau_es(f); f poly
../singular_texi/./d2t_singular/equising_lib.tex(,42) 
../singular_texi/./d2t_singular/equising_lib.tex(,43) @item @strong{Assume:}
../singular_texi/./d2t_singular/equising_lib.tex(,44) f is a reduced bivariate polynomial, the basering has precisely
../singular_texi/./d2t_singular/equising_lib.tex(,45) two variables, is local and no qring.
../singular_texi/./d2t_singular/equising_lib.tex(,46) 
../singular_texi/./d2t_singular/equising_lib.tex(,47) @item @strong{Return:}
../singular_texi/./d2t_singular/equising_lib.tex(,48) int, the codimension of the mu-const stratum in the semi-universal
../singular_texi/./d2t_singular/equising_lib.tex(,49) deformation base.
../singular_texi/./d2t_singular/equising_lib.tex(,50) 
../singular_texi/./d2t_singular/equising_lib.tex(,51) @item @strong{Note:}
../singular_texi/./d2t_singular/equising_lib.tex(,52) printlevel>=1 displays additional information.
../singular_texi/./d2t_singular/equising_lib.tex(,53) @*When called with any additional parameter, the computation of the
../singular_texi/./d2t_singular/equising_lib.tex(,54) Milnor number is avoided (no check for NND).
../singular_texi/./d2t_singular/equising_lib.tex(,55) 
../singular_texi/./d2t_singular/equising_lib.tex(,56) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,57) @strong{Example:}
../singular_texi/./d2t_singular/equising_lib.tex(,58) @smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,59) @c reused example tau_es d2t_singular/equising_lib.doc:57 
../singular_texi/./d2t_singular/equising_lib.tex(,60) LIB "equising.lib";
../singular_texi/./d2t_singular/equising_lib.tex(,61) ring r=32003,(x,y),ds;
../singular_texi/./d2t_singular/equising_lib.tex(,62) poly f=(x4-y4)^2-x10;
../singular_texi/./d2t_singular/equising_lib.tex(,63) tau_es(f);
../singular_texi/./d2t_singular/equising_lib.tex(,64) @expansion{} 42
../singular_texi/./d2t_singular/equising_lib.tex(,65) @c end example tau_es d2t_singular/equising_lib.doc:57
../singular_texi/./d2t_singular/equising_lib.tex(,66) @end smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,67) @c inserted refs from d2t_singular/equising_lib.doc:64
../singular_texi/./d2t_singular/equising_lib.tex(,77) @strong{See also:}
../singular_texi/./d2t_singular/equising_lib.tex(,78) @ref{esIdeal};
../singular_texi/./d2t_singular/equising_lib.tex(,79) @ref{invariants};
../singular_texi/./d2t_singular/equising_lib.tex(,80) @ref{tjurina}.
../singular_texi/./d2t_singular/equising_lib.tex(,82) @c end inserted refs from d2t_singular/equising_lib.doc:64
../singular_texi/./d2t_singular/equising_lib.tex(,83) 
../singular_texi/./d2t_singular/equising_lib.tex(,84) @c ---end content tau_es---
../singular_texi/./d2t_singular/equising_lib.tex(,85) 
../singular_texi/./d2t_singular/equising_lib.tex(,86) @c ------------------- esIdeal -------------
../singular_texi/./d2t_singular/equising_lib.tex(,87) @node esIdeal, esStratum, tau_es, equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,88) @subsubsection esIdeal
../singular_texi/./d2t_singular/equising_lib.tex(,89) @cindex esIdeal
../singular_texi/./d2t_singular/equising_lib.tex(,90) @c ---content esIdeal---
../singular_texi/./d2t_singular/equising_lib.tex(,91) Procedure from library @code{equising.lib} (@pxref{equising_lib}).
../singular_texi/./d2t_singular/equising_lib.tex(,92) 
../singular_texi/./d2t_singular/equising_lib.tex(,93) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,94) @item @strong{Usage:}
../singular_texi/./d2t_singular/equising_lib.tex(,95) esIdeal(f); f poly
../singular_texi/./d2t_singular/equising_lib.tex(,96) 
../singular_texi/./d2t_singular/equising_lib.tex(,97) @item @strong{Assume:}
../singular_texi/./d2t_singular/equising_lib.tex(,98) f is a reduced bivariate polynomial, the basering has precisely
../singular_texi/./d2t_singular/equising_lib.tex(,99) two variables, is local and no qring, and the characteristic of
../singular_texi/./d2t_singular/equising_lib.tex(,100) the ground field does not divide mult(f).
../singular_texi/./d2t_singular/equising_lib.tex(,101) 
../singular_texi/./d2t_singular/equising_lib.tex(,102) @item @strong{Return:}
../singular_texi/./d2t_singular/equising_lib.tex(,103) list of two ideals:
../singular_texi/./d2t_singular/equising_lib.tex(,104) @format
../singular_texi/./d2t_singular/equising_lib.tex(,105)           _[1]:  equisingularity ideal of f (in sense of Wahl)
../singular_texi/./d2t_singular/equising_lib.tex(,106)           _[2]:  equisingularity ideal of f with fixed section
../singular_texi/./d2t_singular/equising_lib.tex(,107) @end format
../singular_texi/./d2t_singular/equising_lib.tex(,108) 
../singular_texi/./d2t_singular/equising_lib.tex(,109) @item @strong{Note:}
../singular_texi/./d2t_singular/equising_lib.tex(,110) if some of the above condition is not satisfied then return
../singular_texi/./d2t_singular/equising_lib.tex(,111) value is list(0,0).
../singular_texi/./d2t_singular/equising_lib.tex(,112) 
../singular_texi/./d2t_singular/equising_lib.tex(,113) @cindex equisingularity ideal
../singular_texi/./d2t_singular/equising_lib.tex(,114) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,115) @strong{Example:}
../singular_texi/./d2t_singular/equising_lib.tex(,116) @smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,117) @c computed example esIdeal d2t_singular/equising_lib.doc:101 
../singular_texi/./d2t_singular/equising_lib.tex(,118) LIB "equising.lib";
../singular_texi/./d2t_singular/equising_lib.tex(,119) ring r=0,(x,y),ds;
../singular_texi/./d2t_singular/equising_lib.tex(,120) poly f=x7+y7+(x-y)^2*x2y2; 
../singular_texi/./d2t_singular/equising_lib.tex(,121) list K=esIdeal(f);
../singular_texi/./d2t_singular/equising_lib.tex(,122) @expansion{} polynomial is Newton degenerated !
../singular_texi/./d2t_singular/equising_lib.tex(,123) @expansion{} 
../singular_texi/./d2t_singular/equising_lib.tex(,124) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,125) @expansion{} // versal deformation with triv. section
../singular_texi/./d2t_singular/equising_lib.tex(,126) @expansion{} // =====================================
../singular_texi/./d2t_singular/equising_lib.tex(,127) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,128) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,129) @expansion{} // Compute equisingular Stratum over Spec(C[t]/t^2)
../singular_texi/./d2t_singular/equising_lib.tex(,130) @expansion{} // ================================================
../singular_texi/./d2t_singular/equising_lib.tex(,131) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,132) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,133) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,134) option(redSB);
../singular_texi/./d2t_singular/equising_lib.tex(,135) // Wahl's equisingularity ideal:
../singular_texi/./d2t_singular/equising_lib.tex(,136) std(K[1]);
../singular_texi/./d2t_singular/equising_lib.tex(,137) @expansion{} _[1]=4x4y-10x2y3+6xy4+21x6+14y6
../singular_texi/./d2t_singular/equising_lib.tex(,138) @expansion{} _[2]=4x3y2-6x2y3+2xy4+7x6
../singular_texi/./d2t_singular/equising_lib.tex(,139) @expansion{} _[3]=x2y4-xy5
../singular_texi/./d2t_singular/equising_lib.tex(,140) @expansion{} _[4]=x7
../singular_texi/./d2t_singular/equising_lib.tex(,141) @expansion{} _[5]=xy6
../singular_texi/./d2t_singular/equising_lib.tex(,142) @expansion{} _[6]=y7
../singular_texi/./d2t_singular/equising_lib.tex(,143) ring rr=0,(x,y),ds;
../singular_texi/./d2t_singular/equising_lib.tex(,144) poly f=x4+4x3y+6x2y2+4xy3+y4+2x2y15+4xy16+2y17+xy23+y24+y30+y31;
../singular_texi/./d2t_singular/equising_lib.tex(,145) list K=esIdeal(f);
../singular_texi/./d2t_singular/equising_lib.tex(,146) @expansion{} polynomial is Newton degenerated !
../singular_texi/./d2t_singular/equising_lib.tex(,147) @expansion{} 
../singular_texi/./d2t_singular/equising_lib.tex(,148) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,149) @expansion{} // versal deformation with triv. section
../singular_texi/./d2t_singular/equising_lib.tex(,150) @expansion{} // =====================================
../singular_texi/./d2t_singular/equising_lib.tex(,151) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,152) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,153) @expansion{} // Compute equisingular Stratum over Spec(C[t]/t^2)
../singular_texi/./d2t_singular/equising_lib.tex(,154) @expansion{} // ================================================
../singular_texi/./d2t_singular/equising_lib.tex(,155) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,156) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,157) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,158) vdim(std(K[1]));
../singular_texi/./d2t_singular/equising_lib.tex(,159) @expansion{} 68
../singular_texi/./d2t_singular/equising_lib.tex(,160) // the latter should be equal to: 
../singular_texi/./d2t_singular/equising_lib.tex(,161) tau_es(f);
../singular_texi/./d2t_singular/equising_lib.tex(,162) @expansion{} 68
../singular_texi/./d2t_singular/equising_lib.tex(,163) @c end example esIdeal d2t_singular/equising_lib.doc:101
../singular_texi/./d2t_singular/equising_lib.tex(,164) @end smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,165) @c inserted refs from d2t_singular/equising_lib.doc:117
../singular_texi/./d2t_singular/equising_lib.tex(,174) @strong{See also:}
../singular_texi/./d2t_singular/equising_lib.tex(,175) @ref{esStratum};
../singular_texi/./d2t_singular/equising_lib.tex(,176) @ref{tau_es}.
../singular_texi/./d2t_singular/equising_lib.tex(,178) @c end inserted refs from d2t_singular/equising_lib.doc:117
../singular_texi/./d2t_singular/equising_lib.tex(,179) 
../singular_texi/./d2t_singular/equising_lib.tex(,180) @c ---end content esIdeal---
../singular_texi/./d2t_singular/equising_lib.tex(,181) 
../singular_texi/./d2t_singular/equising_lib.tex(,182) @c ------------------- esStratum -------------
../singular_texi/./d2t_singular/equising_lib.tex(,183) @node esStratum, isEquising, esIdeal, equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,184) @subsubsection esStratum
../singular_texi/./d2t_singular/equising_lib.tex(,185) @cindex esStratum
../singular_texi/./d2t_singular/equising_lib.tex(,186) @c ---content esStratum---
../singular_texi/./d2t_singular/equising_lib.tex(,187) Procedure from library @code{equising.lib} (@pxref{equising_lib}).
../singular_texi/./d2t_singular/equising_lib.tex(,188) 
../singular_texi/./d2t_singular/equising_lib.tex(,189) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,190) @item @strong{Usage:}
../singular_texi/./d2t_singular/equising_lib.tex(,191) esStratum(F[,m,L]); F poly, m int, L list
../singular_texi/./d2t_singular/equising_lib.tex(,192) 
../singular_texi/./d2t_singular/equising_lib.tex(,193) @item @strong{Assume:}
../singular_texi/./d2t_singular/equising_lib.tex(,194) F defines a deformation of a reduced bivariate polynomial f
../singular_texi/./d2t_singular/equising_lib.tex(,195) and the characteristic of the basering does not divide mult(f). @*
../singular_texi/./d2t_singular/equising_lib.tex(,196) If nv is the number of variables of the basering, then the first
../singular_texi/./d2t_singular/equising_lib.tex(,197) nv-2 variables are the deformation parameters. @*
../singular_texi/./d2t_singular/equising_lib.tex(,198) If the basering is a qring, ideal(basering) must only depend
../singular_texi/./d2t_singular/equising_lib.tex(,199) on the deformation parameters.
../singular_texi/./d2t_singular/equising_lib.tex(,200) 
../singular_texi/./d2t_singular/equising_lib.tex(,201) @item @strong{Compute:}
../singular_texi/./d2t_singular/equising_lib.tex(,202) equations for the stratum of equisingular deformations with 
../singular_texi/./d2t_singular/equising_lib.tex(,203) fixed (trivial) section.
../singular_texi/./d2t_singular/equising_lib.tex(,204) 
../singular_texi/./d2t_singular/equising_lib.tex(,205) @item @strong{Return:}
../singular_texi/./d2t_singular/equising_lib.tex(,206) list l: either consisting of an ideal and an integer, where
../singular_texi/./d2t_singular/equising_lib.tex(,207) @format
../singular_texi/./d2t_singular/equising_lib.tex(,208)   l[1]=ideal defining the equisingular stratum
../singular_texi/./d2t_singular/equising_lib.tex(,209)   l[2]=1 if some error has occured,  l[2]=0 otherwise;
../singular_texi/./d2t_singular/equising_lib.tex(,210) @end format
../singular_texi/./d2t_singular/equising_lib.tex(,211) or consisting of a ring and an integer, where
../singular_texi/./d2t_singular/equising_lib.tex(,212) @format
../singular_texi/./d2t_singular/equising_lib.tex(,213)   l[1]=ESSring is a ring extension of basering containing the ideal ES 
../singular_texi/./d2t_singular/equising_lib.tex(,214)         (describing the ES-stratum) and the poly p_F=F,
../singular_texi/./d2t_singular/equising_lib.tex(,215)   l[2]=1 if some error has occured,  l[2]=0 otherwise.
../singular_texi/./d2t_singular/equising_lib.tex(,216) @end format
../singular_texi/./d2t_singular/equising_lib.tex(,217) 
../singular_texi/./d2t_singular/equising_lib.tex(,218) @item @strong{Note:}
../singular_texi/./d2t_singular/equising_lib.tex(,219) L is supposed to be the output of reddevelop (with the given ordering
../singular_texi/./d2t_singular/equising_lib.tex(,220) of the variables appearing in f). @*
../singular_texi/./d2t_singular/equising_lib.tex(,221) If m is given, the ES Stratum over A/maxideal(m) is computed. @*
../singular_texi/./d2t_singular/equising_lib.tex(,222) This procedure uses @code{execute} or calls a procedure using
../singular_texi/./d2t_singular/equising_lib.tex(,223) @code{execute}.
../singular_texi/./d2t_singular/equising_lib.tex(,224) printlevel>=2 displays additional information.
../singular_texi/./d2t_singular/equising_lib.tex(,225) 
../singular_texi/./d2t_singular/equising_lib.tex(,226) @cindex equisingular stratum
../singular_texi/./d2t_singular/equising_lib.tex(,227) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,228) @strong{Example:}
../singular_texi/./d2t_singular/equising_lib.tex(,229) @smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,230) @c reused example esStratum d2t_singular/equising_lib.doc:171 
../singular_texi/./d2t_singular/equising_lib.tex(,231) LIB "equising.lib";
../singular_texi/./d2t_singular/equising_lib.tex(,232) int p=printlevel; 
../singular_texi/./d2t_singular/equising_lib.tex(,233) printlevel=1;
../singular_texi/./d2t_singular/equising_lib.tex(,234) ring r = 0,(a,b,c,d,e,f,g,x,y),ds;
../singular_texi/./d2t_singular/equising_lib.tex(,235) poly F = (x2+2xy+y2+x5)+ax+by+cx2+dxy+ey2+fx3+gx4;
../singular_texi/./d2t_singular/equising_lib.tex(,236) list M = esStratum(F);
../singular_texi/./d2t_singular/equising_lib.tex(,237) M[1];
../singular_texi/./d2t_singular/equising_lib.tex(,238) @expansion{} _[1]=g
../singular_texi/./d2t_singular/equising_lib.tex(,239) @expansion{} _[2]=f
../singular_texi/./d2t_singular/equising_lib.tex(,240) @expansion{} _[3]=b
../singular_texi/./d2t_singular/equising_lib.tex(,241) @expansion{} _[4]=a
../singular_texi/./d2t_singular/equising_lib.tex(,242) @expansion{} _[5]=-4c+4d-4e+d2-4ce
../singular_texi/./d2t_singular/equising_lib.tex(,243) printlevel=3;    // displays additional information
../singular_texi/./d2t_singular/equising_lib.tex(,244) esStratum(F,2);  // es stratum over Q[a,b,c,d,e,f,g] / <a,b,c,d,e,f,g>^2
../singular_texi/./d2t_singular/equising_lib.tex(,245) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,246) @expansion{} // Compute HN development
../singular_texi/./d2t_singular/equising_lib.tex(,247) @expansion{} // ----------------------
../singular_texi/./d2t_singular/equising_lib.tex(,248) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,249) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,250) @expansion{} // Blowup Step 1 completed
../singular_texi/./d2t_singular/equising_lib.tex(,251) @expansion{} // Blowup Step 2 completed
../singular_texi/./d2t_singular/equising_lib.tex(,252) @expansion{} // Blowup Step 3 completed
../singular_texi/./d2t_singular/equising_lib.tex(,253) @expansion{} // 1 branch finished
../singular_texi/./d2t_singular/equising_lib.tex(,254) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,255) @expansion{} // Elimination starts:
../singular_texi/./d2t_singular/equising_lib.tex(,256) @expansion{} // -------------------
../singular_texi/./d2t_singular/equising_lib.tex(,257) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,258) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,259) @expansion{} // output of 'esStratum' is list consisting of:
../singular_texi/./d2t_singular/equising_lib.tex(,260) @expansion{} //    _[1] = ideal defining equisingular stratum
../singular_texi/./d2t_singular/equising_lib.tex(,261) @expansion{} //    _[2] = 0
../singular_texi/./d2t_singular/equising_lib.tex(,262) @expansion{} [1]:
../singular_texi/./d2t_singular/equising_lib.tex(,263) @expansion{}    _[1]=b
../singular_texi/./d2t_singular/equising_lib.tex(,264) @expansion{}    _[2]=a
../singular_texi/./d2t_singular/equising_lib.tex(,265) @expansion{}    _[3]=c-d+e
../singular_texi/./d2t_singular/equising_lib.tex(,266) @expansion{}    _[4]=g
../singular_texi/./d2t_singular/equising_lib.tex(,267) @expansion{}    _[5]=f
../singular_texi/./d2t_singular/equising_lib.tex(,268) @expansion{} [2]:
../singular_texi/./d2t_singular/equising_lib.tex(,269) @expansion{}    0
../singular_texi/./d2t_singular/equising_lib.tex(,270) ideal I = f-fa,e+b;
../singular_texi/./d2t_singular/equising_lib.tex(,271) qring q = std(I);
../singular_texi/./d2t_singular/equising_lib.tex(,272) poly F = imap(r,F);
../singular_texi/./d2t_singular/equising_lib.tex(,273) esStratum(F);
../singular_texi/./d2t_singular/equising_lib.tex(,274) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,275) @expansion{} // Compute HN development
../singular_texi/./d2t_singular/equising_lib.tex(,276) @expansion{} // ----------------------
../singular_texi/./d2t_singular/equising_lib.tex(,277) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,278) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,279) @expansion{} // Blowup Step 1 completed
../singular_texi/./d2t_singular/equising_lib.tex(,280) @expansion{} // Blowup Step 2 completed
../singular_texi/./d2t_singular/equising_lib.tex(,281) @expansion{} // Blowup Step 3 completed
../singular_texi/./d2t_singular/equising_lib.tex(,282) @expansion{} // 1 branch finished
../singular_texi/./d2t_singular/equising_lib.tex(,283) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,284) @expansion{} // Elimination starts:
../singular_texi/./d2t_singular/equising_lib.tex(,285) @expansion{} // -------------------
../singular_texi/./d2t_singular/equising_lib.tex(,286) @expansion{} // finished
../singular_texi/./d2t_singular/equising_lib.tex(,287) @expansion{} // 
../singular_texi/./d2t_singular/equising_lib.tex(,288) @expansion{} // output of 'esStratum' is list consisting of:
../singular_texi/./d2t_singular/equising_lib.tex(,289) @expansion{} //    _[1] = ideal defining equisingular stratum
../singular_texi/./d2t_singular/equising_lib.tex(,290) @expansion{} //    _[2] = 0
../singular_texi/./d2t_singular/equising_lib.tex(,291) @expansion{} [1]:
../singular_texi/./d2t_singular/equising_lib.tex(,292) @expansion{}    _[1]=e
../singular_texi/./d2t_singular/equising_lib.tex(,293) @expansion{}    _[2]=a
../singular_texi/./d2t_singular/equising_lib.tex(,294) @expansion{}    _[3]=-4c+4d+d2
../singular_texi/./d2t_singular/equising_lib.tex(,295) @expansion{}    _[4]=g
../singular_texi/./d2t_singular/equising_lib.tex(,296) @expansion{} [2]:
../singular_texi/./d2t_singular/equising_lib.tex(,297) @expansion{}    0
../singular_texi/./d2t_singular/equising_lib.tex(,298) printlevel=p;
../singular_texi/./d2t_singular/equising_lib.tex(,299) @c end example esStratum d2t_singular/equising_lib.doc:171
../singular_texi/./d2t_singular/equising_lib.tex(,300) @end smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,301) @c inserted refs from d2t_singular/equising_lib.doc:188
../singular_texi/./d2t_singular/equising_lib.tex(,310) @strong{See also:}
../singular_texi/./d2t_singular/equising_lib.tex(,311) @ref{esIdeal};
../singular_texi/./d2t_singular/equising_lib.tex(,312) @ref{isEquising}.
../singular_texi/./d2t_singular/equising_lib.tex(,314) @c end inserted refs from d2t_singular/equising_lib.doc:188
../singular_texi/./d2t_singular/equising_lib.tex(,315) 
../singular_texi/./d2t_singular/equising_lib.tex(,316) @c ---end content esStratum---
../singular_texi/./d2t_singular/equising_lib.tex(,317) 
../singular_texi/./d2t_singular/equising_lib.tex(,318) @c ------------------- isEquising -------------
../singular_texi/./d2t_singular/equising_lib.tex(,319) @node isEquising, control_Matrix, esStratum, equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,320) @subsubsection isEquising
../singular_texi/./d2t_singular/equising_lib.tex(,321) @cindex isEquising
../singular_texi/./d2t_singular/equising_lib.tex(,322) @c ---content isEquising---
../singular_texi/./d2t_singular/equising_lib.tex(,323) Procedure from library @code{equising.lib} (@pxref{equising_lib}).
../singular_texi/./d2t_singular/equising_lib.tex(,324) 
../singular_texi/./d2t_singular/equising_lib.tex(,325) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,326) @item @strong{Usage:}
../singular_texi/./d2t_singular/equising_lib.tex(,327) isEquising(F[,m,L]); F poly, m int, L list
../singular_texi/./d2t_singular/equising_lib.tex(,328) 
../singular_texi/./d2t_singular/equising_lib.tex(,329) @item @strong{Assume:}
../singular_texi/./d2t_singular/equising_lib.tex(,330) F defines a deformation of a reduced bivariate polynomial f
../singular_texi/./d2t_singular/equising_lib.tex(,331) and the characteristic of the basering does not divide mult(f). @*
../singular_texi/./d2t_singular/equising_lib.tex(,332) If nv is the number of variables of the basering, then the first
../singular_texi/./d2t_singular/equising_lib.tex(,333) nv-2 variables are the deformation parameters. @*
../singular_texi/./d2t_singular/equising_lib.tex(,334) If the basering is a qring, ideal(basering) must only depend
../singular_texi/./d2t_singular/equising_lib.tex(,335) on the deformation parameters.
../singular_texi/./d2t_singular/equising_lib.tex(,336) 
../singular_texi/./d2t_singular/equising_lib.tex(,337) @item @strong{Compute:}
../singular_texi/./d2t_singular/equising_lib.tex(,338) tests if the given family is equisingular along the trivial
../singular_texi/./d2t_singular/equising_lib.tex(,339) section.
../singular_texi/./d2t_singular/equising_lib.tex(,340) 
../singular_texi/./d2t_singular/equising_lib.tex(,341) @item @strong{Return:}
../singular_texi/./d2t_singular/equising_lib.tex(,342) int: 1 if the family is equisingular, 0 otherwise.
../singular_texi/./d2t_singular/equising_lib.tex(,343) 
../singular_texi/./d2t_singular/equising_lib.tex(,344) @item @strong{Note:}
../singular_texi/./d2t_singular/equising_lib.tex(,345) L is supposed to be the output of reddevelop (with the given ordering
../singular_texi/./d2t_singular/equising_lib.tex(,346) of the variables appearing in f). @*
../singular_texi/./d2t_singular/equising_lib.tex(,347) If m is given, the family is considered over A/maxideal(m). @*
../singular_texi/./d2t_singular/equising_lib.tex(,348) This procedure uses @code{execute} or calls a procedure using
../singular_texi/./d2t_singular/equising_lib.tex(,349) @code{execute}.
../singular_texi/./d2t_singular/equising_lib.tex(,350) printlevel>=2 displays additional information.
../singular_texi/./d2t_singular/equising_lib.tex(,351) 
../singular_texi/./d2t_singular/equising_lib.tex(,352) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,353) @strong{Example:}
../singular_texi/./d2t_singular/equising_lib.tex(,354) @smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,355) @c reused example isEquising d2t_singular/equising_lib.doc:231 
../singular_texi/./d2t_singular/equising_lib.tex(,356) LIB "equising.lib";
../singular_texi/./d2t_singular/equising_lib.tex(,357) ring r = 0,(a,b,x,y),ds;
../singular_texi/./d2t_singular/equising_lib.tex(,358) poly F = (x2+2xy+y2+x5)+ay3+bx5;
../singular_texi/./d2t_singular/equising_lib.tex(,359) isEquising(F);
../singular_texi/./d2t_singular/equising_lib.tex(,360) @expansion{} 0
../singular_texi/./d2t_singular/equising_lib.tex(,361) ideal I = ideal(a);
../singular_texi/./d2t_singular/equising_lib.tex(,362) qring q = std(I);
../singular_texi/./d2t_singular/equising_lib.tex(,363) poly F = imap(r,F);
../singular_texi/./d2t_singular/equising_lib.tex(,364) isEquising(F);
../singular_texi/./d2t_singular/equising_lib.tex(,365) @expansion{} 1
../singular_texi/./d2t_singular/equising_lib.tex(,366) ring rr=0,(A,B,C,x,y),ls;
../singular_texi/./d2t_singular/equising_lib.tex(,367) poly f=x7+y7+(x-y)^2*x2y2;
../singular_texi/./d2t_singular/equising_lib.tex(,368) poly F=f+A*y*diff(f,x)+B*x*diff(f,x);
../singular_texi/./d2t_singular/equising_lib.tex(,369) isEquising(F);  
../singular_texi/./d2t_singular/equising_lib.tex(,370) @expansion{} 0
../singular_texi/./d2t_singular/equising_lib.tex(,371) isEquising(F,2);    // computation over  Q[a,b] / <a,b>^2
../singular_texi/./d2t_singular/equising_lib.tex(,372) @expansion{} 1
../singular_texi/./d2t_singular/equising_lib.tex(,373) @c end example isEquising d2t_singular/equising_lib.doc:231
../singular_texi/./d2t_singular/equising_lib.tex(,374) @end smallexample
../singular_texi/./d2t_singular/equising_lib.tex(,375) @c ---end content isEquising---
../singular_texi/./d2t_singular/equising_lib.tex(,376) 
../singular_texi/./d2t_singular/equising_lib.tex(,377) @c ------------------- control_Matrix -------------
../singular_texi/./d2t_singular/equising_lib.tex(,378) @node control_Matrix,, isEquising, equising_lib
../singular_texi/./d2t_singular/equising_lib.tex(,379) @subsubsection control_Matrix
../singular_texi/./d2t_singular/equising_lib.tex(,380) @cindex control_Matrix
../singular_texi/./d2t_singular/equising_lib.tex(,381) @c ---content control_Matrix---
../singular_texi/./d2t_singular/equising_lib.tex(,382) Procedure from library @code{equising.lib} (@pxref{equising_lib}).
../singular_texi/./d2t_singular/equising_lib.tex(,383) 
../singular_texi/./d2t_singular/equising_lib.tex(,384) @table @asis
../singular_texi/./d2t_singular/equising_lib.tex(,385) @item @strong{Assume:}
../singular_texi/./d2t_singular/equising_lib.tex(,386) L is the output of multsequence(reddevelop(f)).
../singular_texi/./d2t_singular/equising_lib.tex(,387) 
../singular_texi/./d2t_singular/equising_lib.tex(,388) @item @strong{Return:}
../singular_texi/./d2t_singular/equising_lib.tex(,389) list M of 4 intmat's:
../singular_texi/./d2t_singular/equising_lib.tex(,390) @format
../singular_texi/./d2t_singular/equising_lib.tex(,391)   M[1] contains the multiplicities at the respective infinitely near points 
../singular_texi/./d2t_singular/equising_lib.tex(,392)        p[i,j] (i=step of blowup+1, j=branch) -- if branches j=k,...,k+m pass 
../singular_texi/./d2t_singular/equising_lib.tex(,393)        through the same p[i,j] then the multiplicity is stored in M[1][k,j], 
../singular_texi/./d2t_singular/equising_lib.tex(,394)        while M[1][k+1]=...=M[1][k+m]=0.   
../singular_texi/./d2t_singular/equising_lib.tex(,395)   M[2] contains the number of branches meeting at p[i,j] (again, the information 
../singular_texi/./d2t_singular/equising_lib.tex(,396)        is stored according to the above rule)   
../singular_texi/./d2t_singular/equising_lib.tex(,397)   M[3] contains the information about the splitting of M[1][i,j] with respect to 
../singular_texi/./d2t_singular/equising_lib.tex(,398)        different tangents of branches at p[i,j] (information is stored only for 
../singular_texi/./d2t_singular/equising_lib.tex(,399)        minimal j>=k corresponding to a new tangent direction). 
../singular_texi/./d2t_singular/equising_lib.tex(,400)        The entries are the sum of multiplicities of all branches with the 
../singular_texi/./d2t_singular/equising_lib.tex(,401)        respective tangent.
../singular_texi/./d2t_singular/equising_lib.tex(,402)   M[4] contains the maximal sum of higher multiplicities for a branch passing 
../singular_texi/./d2t_singular/equising_lib.tex(,403)        through p[i,j] ( = degree Bound for blowing up)  
../singular_texi/./d2t_singular/equising_lib.tex(,404) @end format
../singular_texi/./d2t_singular/equising_lib.tex(,405) 
../singular_texi/./d2t_singular/equising_lib.tex(,406) @item @strong{Note:}
../singular_texi/./d2t_singular/equising_lib.tex(,407) the branches are ordered in such a way that only consecutive branches
../singular_texi/./d2t_singular/equising_lib.tex(,408) can meet at an infinitely near point. @*
../singular_texi/./d2t_singular/equising_lib.tex(,409) the final rows of the matrices M[1],...,M[3] is (1,1,1,...,1), and
../singular_texi/./d2t_singular/equising_lib.tex(,410) correspond to infinitely near points such that the strict transforms
../singular_texi/./d2t_singular/equising_lib.tex(,411) of the branches are smooth and intersect the exceptional divisor
../singular_texi/./d2t_singular/equising_lib.tex(,412) transversally.
../singular_texi/./d2t_singular/equising_lib.tex(,413) 
../singular_texi/./d2t_singular/equising_lib.tex(,414) @end table
../singular_texi/./d2t_singular/equising_lib.tex(,415) @c inserted refs from d2t_singular/equising_lib.doc:287
../singular_texi/./d2t_singular/equising_lib.tex(,423) @strong{See also:}
../singular_texi/./d2t_singular/equising_lib.tex(,424) @ref{multsequence}.
../singular_texi/./d2t_singular/equising_lib.tex(,426) @c end inserted refs from d2t_singular/equising_lib.doc:287
../singular_texi/./d2t_singular/equising_lib.tex(,427) 
../singular_texi/./d2t_singular/equising_lib.tex(,428) @c ---end content control_Matrix---
../singular_texi/singular.tex(,465) @c ----------------------------------------------------------
../singular_texi/singular.tex(,466) @node gaussman_lib, hnoether_lib, equising_lib, Singularities
../singular_texi/singular.tex(,467) @subsection gaussman_lib
../singular_texi/singular.tex(,468) @c include of docu for gaussman.lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/gaussman_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/gaussman_lib.doc
../singular_texi/./d2t_singular/gaussman_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/gaussman_lib.doc INSTEAD
../singular_texi/./d2t_singular/gaussman_lib.tex(,4) @c library version: (1.33.2.26,2003/02/10)
../singular_texi/./d2t_singular/gaussman_lib.tex(,5) @c library file: ../Singular/LIB/gaussman.lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,6) @cindex gaussman.lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,7) @cindex gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,10) gaussman.lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,12)   Algorithmic Gauss-Manin Connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,13) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,14) @item @strong{Author:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,15) Mathias Schulze, email: mschulze@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/gaussman_lib.tex(,16) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,17) @item @strong{Overview:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,18) A library to compute Hodge-theoretic invariants
../singular_texi/./d2t_singular/gaussman_lib.tex(,19) @*of isolated hypersurface singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,20) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,21) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,22) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,23) @strong{Procedures:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,24) @menu
../singular_texi/./d2t_singular/gaussman_lib.tex(,25) * gmsring:: Gauss-Manin system of t with variable s
../singular_texi/./d2t_singular/gaussman_lib.tex(,26) * gmsnf:: Gauss-Manin normal form of p
../singular_texi/./d2t_singular/gaussman_lib.tex(,27) * gmscoeffs:: Gauss-Manin basis representation of p
../singular_texi/./d2t_singular/gaussman_lib.tex(,28) * bernstein:: roots of the Bernstein polynomial of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,29) * monodromy:: Jordan data of complex monodromy of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,30) * spectrum:: singularity spectrum of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,31) * sppairs:: spectral pairs of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,32) * spnf:: spectrum normal form of (a,m,V)
../singular_texi/./d2t_singular/gaussman_lib.tex(,33) * sppnf:: spectral pairs normal form of (a,w,m,V)
../singular_texi/./d2t_singular/gaussman_lib.tex(,34) * vfilt:: V-filtration of t on Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,35) * vwfilt:: weighted V-filtration of t on Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,36) * tmatrix:: C[[s]]-matrix of t on Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,37) * endvfilt:: endomorphism V-filtration on Jacobian algebra
../singular_texi/./d2t_singular/gaussman_lib.tex(,38) * spprint:: print spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,39) * sppprint:: print spectral pairs spp
../singular_texi/./d2t_singular/gaussman_lib.tex(,40) * spadd:: sum of spectra sp1 and sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,41) * spsub:: difference of spectra sp1 and sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,42) * spmul:: linear combination of spectra sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,43) * spissemicont:: semicontinuity test of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,44) * spsemicont:: semicontinuous combinations of spectra sp0 in sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,45) * spmilnor:: Milnor number of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,46) * spgeomgenus:: geometrical genus of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,47) * spgamma:: gamma invariant of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,48) @end menu
../singular_texi/./d2t_singular/gaussman_lib.tex(,49) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,50) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,51) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,52) @cindex monodromy
../singular_texi/./d2t_singular/gaussman_lib.tex(,53) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,54) @cindex spectral pairs
../singular_texi/./d2t_singular/gaussman_lib.tex(,55) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,56) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,57) @cindex weight filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,58) @c inserted refs from d2t_singular/gaussman_lib.doc:56
../singular_texi/./d2t_singular/gaussman_lib.tex(,67) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,68) @ref{mondromy_lib};
../singular_texi/./d2t_singular/gaussman_lib.tex(,69) @ref{spectrum_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,71) @c end inserted refs from d2t_singular/gaussman_lib.doc:56
../singular_texi/./d2t_singular/gaussman_lib.tex(,72) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,73) @c ---end content LibInfo---
../singular_texi/./d2t_singular/gaussman_lib.tex(,74) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,75) @c ------------------- gmsring -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,76) @node gmsring, gmsnf,, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,77) @subsubsection gmsring
../singular_texi/./d2t_singular/gaussman_lib.tex(,78) @cindex gmsring
../singular_texi/./d2t_singular/gaussman_lib.tex(,79) @c ---content gmsring---
../singular_texi/./d2t_singular/gaussman_lib.tex(,80) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,81) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,82) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,83) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,84) gmsring(t,s); poly t, string s
../singular_texi/./d2t_singular/gaussman_lib.tex(,85) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,86) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,87) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,88) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,89) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,90) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,91) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,92) ring G;  Gauss-Manin system of t with variable s
../singular_texi/./d2t_singular/gaussman_lib.tex(,93)   poly gmspoly=t;
../singular_texi/./d2t_singular/gaussman_lib.tex(,94)   ideal gmsjacob;  Jacobian ideal of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,95)   ideal gmsstd;  standard basis of Jacobian ideal
../singular_texi/./d2t_singular/gaussman_lib.tex(,96)   matrix gmsmatrix;  matrix(gmsjacob)*gmsmatrix==matrix(gmsstd)
../singular_texi/./d2t_singular/gaussman_lib.tex(,97)   ideal gmsbasis;  monomial vector space basis of Jacobian algebra
../singular_texi/./d2t_singular/gaussman_lib.tex(,98)   int gmsmaxdeg;  maximal weight of variables
../singular_texi/./d2t_singular/gaussman_lib.tex(,99) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,100) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,101) @item @strong{Note:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,102) gmsbasis is a C[[s]]-basis of H'' and [t,s]=s^2
../singular_texi/./d2t_singular/gaussman_lib.tex(,103) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,104) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,105) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,106) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,107) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,108) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,109) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,110) @c computed example gmsring d2t_singular/gaussman_lib.doc:97 
../singular_texi/./d2t_singular/gaussman_lib.tex(,111) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,112) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,113) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,114) def G=gmsring(t,"s");
../singular_texi/./d2t_singular/gaussman_lib.tex(,115) setring(G);
../singular_texi/./d2t_singular/gaussman_lib.tex(,116) gmspoly;
../singular_texi/./d2t_singular/gaussman_lib.tex(,117) @expansion{} x2y2+x5+y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,118) print(gmsjacob);
../singular_texi/./d2t_singular/gaussman_lib.tex(,119) @expansion{} 2xy2+5x4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,120) @expansion{} 2x2y+5y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,121) print(gmsstd);
../singular_texi/./d2t_singular/gaussman_lib.tex(,122) @expansion{} 2x2y+5y4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,123) @expansion{} 2xy2+5x4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,124) @expansion{} 5x5-5y5,
../singular_texi/./d2t_singular/gaussman_lib.tex(,125) @expansion{} 10y6+25x3y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,126) print(gmsmatrix);
../singular_texi/./d2t_singular/gaussman_lib.tex(,127) @expansion{} 0,1,x, -2xy,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,128) @expansion{} 1,0,-y,2y2+5x3
../singular_texi/./d2t_singular/gaussman_lib.tex(,129) print(gmsbasis);
../singular_texi/./d2t_singular/gaussman_lib.tex(,130) @expansion{} y5,
../singular_texi/./d2t_singular/gaussman_lib.tex(,131) @expansion{} y4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,132) @expansion{} y3,
../singular_texi/./d2t_singular/gaussman_lib.tex(,133) @expansion{} y2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,134) @expansion{} xy,
../singular_texi/./d2t_singular/gaussman_lib.tex(,135) @expansion{} y,
../singular_texi/./d2t_singular/gaussman_lib.tex(,136) @expansion{} x4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,137) @expansion{} x3,
../singular_texi/./d2t_singular/gaussman_lib.tex(,138) @expansion{} x2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,139) @expansion{} x,
../singular_texi/./d2t_singular/gaussman_lib.tex(,140) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,141) gmsmaxdeg;
../singular_texi/./d2t_singular/gaussman_lib.tex(,142) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,143) @c end example gmsring d2t_singular/gaussman_lib.doc:97
../singular_texi/./d2t_singular/gaussman_lib.tex(,144) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,145) @c ---end content gmsring---
../singular_texi/./d2t_singular/gaussman_lib.tex(,146) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,147) @c ------------------- gmsnf -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,148) @node gmsnf, gmscoeffs, gmsring, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,149) @subsubsection gmsnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,150) @cindex gmsnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,151) @c ---content gmsnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,152) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,153) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,154) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,155) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,156) gmsnf(p,K); poly p, int K
../singular_texi/./d2t_singular/gaussman_lib.tex(,157) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,158) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,159) basering returned by gmsring
../singular_texi/./d2t_singular/gaussman_lib.tex(,160) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,161) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,162) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,163) list nf;
../singular_texi/./d2t_singular/gaussman_lib.tex(,164)   ideal nf[1];  projection of p to <gmsbasis>C[[s]] mod s^(K+1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,165)   ideal nf[2];  p==nf[1]+nf[2]
../singular_texi/./d2t_singular/gaussman_lib.tex(,166) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,167) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,168) @item @strong{Note:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,169) computation can be continued by setting p=nf[2]
../singular_texi/./d2t_singular/gaussman_lib.tex(,170) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,171) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,172) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,173) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,174) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,175) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,176) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,177) @c computed example gmsnf d2t_singular/gaussman_lib.doc:143 
../singular_texi/./d2t_singular/gaussman_lib.tex(,178) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,179) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,180) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,181) def G=gmsring(t,"s");
../singular_texi/./d2t_singular/gaussman_lib.tex(,182) setring(G);
../singular_texi/./d2t_singular/gaussman_lib.tex(,183) list l0=gmsnf(gmspoly,0);
../singular_texi/./d2t_singular/gaussman_lib.tex(,184) print(l0[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,185) @expansion{} -1/2y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,186) list l1=gmsnf(gmspoly,1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,187) print(l1[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,188) @expansion{} -1/2y5+1/2s
../singular_texi/./d2t_singular/gaussman_lib.tex(,189) list l=gmsnf(l0[2],1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,190) print(l[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,191) @expansion{} 1/2s
../singular_texi/./d2t_singular/gaussman_lib.tex(,192) @c end example gmsnf d2t_singular/gaussman_lib.doc:143
../singular_texi/./d2t_singular/gaussman_lib.tex(,193) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,194) @c ---end content gmsnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,195) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,196) @c ------------------- gmscoeffs -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,197) @node gmscoeffs, bernstein, gmsnf, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,198) @subsubsection gmscoeffs
../singular_texi/./d2t_singular/gaussman_lib.tex(,199) @cindex gmscoeffs
../singular_texi/./d2t_singular/gaussman_lib.tex(,200) @c ---content gmscoeffs---
../singular_texi/./d2t_singular/gaussman_lib.tex(,201) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,202) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,203) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,204) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,205) gmscoeffs(p,K); poly p, int K
../singular_texi/./d2t_singular/gaussman_lib.tex(,206) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,207) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,208) basering constructed by gmsring
../singular_texi/./d2t_singular/gaussman_lib.tex(,209) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,210) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,211) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,212) list l;
../singular_texi/./d2t_singular/gaussman_lib.tex(,213)   matrix l[1];  C[[s]]-basis representation of p mod s^(K+1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,214)   ideal l[2];  p==matrix(gmsbasis)*l[1]+l[2]
../singular_texi/./d2t_singular/gaussman_lib.tex(,215) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,216) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,217) @item @strong{Note:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,218) computation can be continued by setting p=l[2]
../singular_texi/./d2t_singular/gaussman_lib.tex(,219) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,220) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,221) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,222) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,223) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,224) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,225) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,226) @c computed example gmscoeffs d2t_singular/gaussman_lib.doc:189 
../singular_texi/./d2t_singular/gaussman_lib.tex(,227) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,228) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,229) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,230) def G=gmsring(t,"s");
../singular_texi/./d2t_singular/gaussman_lib.tex(,231) setring(G);
../singular_texi/./d2t_singular/gaussman_lib.tex(,232) list l0=gmscoeffs(gmspoly,0);
../singular_texi/./d2t_singular/gaussman_lib.tex(,233) print(l0[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,234) @expansion{} -1/2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,235) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,236) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,237) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,238) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,239) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,240) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,241) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,242) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,243) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,244) @expansion{} 0    
../singular_texi/./d2t_singular/gaussman_lib.tex(,245) list l1=gmscoeffs(gmspoly,1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,246) print(l1[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,247) @expansion{} -1/2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,248) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,249) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,250) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,251) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,252) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,253) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,254) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,255) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,256) @expansion{} 0,   
../singular_texi/./d2t_singular/gaussman_lib.tex(,257) @expansion{} 1/2s 
../singular_texi/./d2t_singular/gaussman_lib.tex(,258) list l=gmscoeffs(l0[2],1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,259) print(l[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,260) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,261) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,262) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,263) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,264) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,265) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,266) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,267) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,268) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,269) @expansion{} 0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,270) @expansion{} 1/2s
../singular_texi/./d2t_singular/gaussman_lib.tex(,271) @c end example gmscoeffs d2t_singular/gaussman_lib.doc:189
../singular_texi/./d2t_singular/gaussman_lib.tex(,272) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,273) @c ---end content gmscoeffs---
../singular_texi/./d2t_singular/gaussman_lib.tex(,274) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,275) @c ------------------- bernstein -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,276) @node bernstein, monodromy, gmscoeffs, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,277) @subsubsection bernstein
../singular_texi/./d2t_singular/gaussman_lib.tex(,278) @cindex bernstein
../singular_texi/./d2t_singular/gaussman_lib.tex(,279) @c ---content bernstein---
../singular_texi/./d2t_singular/gaussman_lib.tex(,280) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,281) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,282) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,283) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,284) bernstein(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,285) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,286) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,287) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,288) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,289) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,290) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,291) ideal r; roots of the Bernstein polynomial b excluding the root -1
../singular_texi/./d2t_singular/gaussman_lib.tex(,292) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,293) @item @strong{Note:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,294) the roots of b are negative rational numbers and -1 is a root of b
../singular_texi/./d2t_singular/gaussman_lib.tex(,295) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,296) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,297) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,298) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,299) @cindex Bernstein polynomial
../singular_texi/./d2t_singular/gaussman_lib.tex(,300) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,301) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,302) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,303) @c computed example bernstein d2t_singular/gaussman_lib.doc:233 
../singular_texi/./d2t_singular/gaussman_lib.tex(,304) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,305) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,306) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,307) bernstein(t);
../singular_texi/./d2t_singular/gaussman_lib.tex(,308) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,309) @expansion{}    _[1]=-1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,310) @expansion{}    _[2]=-7/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,311) @expansion{}    _[3]=-9/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,312) @expansion{}    _[4]=-1
../singular_texi/./d2t_singular/gaussman_lib.tex(,313) @expansion{}    _[5]=-11/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,314) @expansion{}    _[6]=-13/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,315) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,316) @expansion{}    2,1,1,2,1,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,317) @c end example bernstein d2t_singular/gaussman_lib.doc:233
../singular_texi/./d2t_singular/gaussman_lib.tex(,318) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,319) @c ---end content bernstein---
../singular_texi/./d2t_singular/gaussman_lib.tex(,320) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,321) @c ------------------- monodromy -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,322) @node monodromy, spectrum, bernstein, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,323) @subsubsection monodromy
../singular_texi/./d2t_singular/gaussman_lib.tex(,324) @cindex monodromy
../singular_texi/./d2t_singular/gaussman_lib.tex(,325) @c ---content monodromy---
../singular_texi/./d2t_singular/gaussman_lib.tex(,326) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,327) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,328) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,329) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,330) monodromy(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,331) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,332) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,333) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,334) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,335) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,336) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,337) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,338) list l;  Jordan data jordan(M) of monodromy matrix exp(-2*pi*i*M)
../singular_texi/./d2t_singular/gaussman_lib.tex(,339)   ideal l[1]; 
../singular_texi/./d2t_singular/gaussman_lib.tex(,340)     number l[1][i];  eigenvalue of i-th Jordan block of M
../singular_texi/./d2t_singular/gaussman_lib.tex(,341)   intvec l[2]; 
../singular_texi/./d2t_singular/gaussman_lib.tex(,342)     int l[2][i];  size of i-th Jordan block of M
../singular_texi/./d2t_singular/gaussman_lib.tex(,343)   intvec l[3]; 
../singular_texi/./d2t_singular/gaussman_lib.tex(,344)     int l[3][i];  multiplicity of i-th Jordan block of M
../singular_texi/./d2t_singular/gaussman_lib.tex(,345) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,346) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,347) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,348) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,349) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,350) @cindex monodromy
../singular_texi/./d2t_singular/gaussman_lib.tex(,351) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,352) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,353) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,354) @c computed example monodromy d2t_singular/gaussman_lib.doc:275 
../singular_texi/./d2t_singular/gaussman_lib.tex(,355) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,356) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,357) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,358) monodromy(t);
../singular_texi/./d2t_singular/gaussman_lib.tex(,359) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,360) @expansion{}    _[1]=1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,361) @expansion{}    _[2]=7/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,362) @expansion{}    _[3]=9/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,363) @expansion{}    _[4]=1
../singular_texi/./d2t_singular/gaussman_lib.tex(,364) @expansion{}    _[5]=11/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,365) @expansion{}    _[6]=13/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,366) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,367) @expansion{}    2,1,1,1,1,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,368) @expansion{} [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,369) @expansion{}    1,2,2,1,2,2
../singular_texi/./d2t_singular/gaussman_lib.tex(,370) @c end example monodromy d2t_singular/gaussman_lib.doc:275
../singular_texi/./d2t_singular/gaussman_lib.tex(,371) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,372) @c inserted refs from d2t_singular/gaussman_lib.doc:282
../singular_texi/./d2t_singular/gaussman_lib.tex(,381) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,382) @ref{linalg_lib};
../singular_texi/./d2t_singular/gaussman_lib.tex(,383) @ref{mondromy_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,385) @c end inserted refs from d2t_singular/gaussman_lib.doc:282
../singular_texi/./d2t_singular/gaussman_lib.tex(,386) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,387) @c ---end content monodromy---
../singular_texi/./d2t_singular/gaussman_lib.tex(,388) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,389) @c ------------------- spectrum -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,390) @node spectrum, sppairs, monodromy, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,391) @subsubsection spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,392) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,393) @c ---content spectrum---
../singular_texi/./d2t_singular/gaussman_lib.tex(,394) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,395) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,396) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,397) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,398) spectrum(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,399) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,400) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,401) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,402) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,403) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,404) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,405) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,406) list sp;  singularity spectrum of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,407)   ideal sp[1];
../singular_texi/./d2t_singular/gaussman_lib.tex(,408)     number sp[1][i];  i-th spectral number
../singular_texi/./d2t_singular/gaussman_lib.tex(,409)   intvec sp[2];
../singular_texi/./d2t_singular/gaussman_lib.tex(,410)     int sp[2][i];  multiplicity of i-th spectral number
../singular_texi/./d2t_singular/gaussman_lib.tex(,411) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,412) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,413) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,414) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,415) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,416) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,417) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,418) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,419) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,420) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,421) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,422) @c computed example spectrum d2t_singular/gaussman_lib.doc:321 
../singular_texi/./d2t_singular/gaussman_lib.tex(,423) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,424) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,425) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,426) spprint(spectrum(t));
../singular_texi/./d2t_singular/gaussman_lib.tex(,427) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,428) @c end example spectrum d2t_singular/gaussman_lib.doc:321
../singular_texi/./d2t_singular/gaussman_lib.tex(,429) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,430) @c inserted refs from d2t_singular/gaussman_lib.doc:328
../singular_texi/./d2t_singular/gaussman_lib.tex(,438) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,439) @ref{spectrum_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,441) @c end inserted refs from d2t_singular/gaussman_lib.doc:328
../singular_texi/./d2t_singular/gaussman_lib.tex(,442) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,443) @c ---end content spectrum---
../singular_texi/./d2t_singular/gaussman_lib.tex(,444) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,445) @c ------------------- sppairs -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,446) @node sppairs, spnf, spectrum, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,447) @subsubsection sppairs
../singular_texi/./d2t_singular/gaussman_lib.tex(,448) @cindex sppairs
../singular_texi/./d2t_singular/gaussman_lib.tex(,449) @c ---content sppairs---
../singular_texi/./d2t_singular/gaussman_lib.tex(,450) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,451) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,452) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,453) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,454) sppairs(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,455) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,456) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,457) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,458) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,459) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,460) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,461) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,462) list spp;  spectral pairs of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,463)   ideal spp[1];
../singular_texi/./d2t_singular/gaussman_lib.tex(,464)     number spp[1][i];  V-filtration index of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,465)   intvec spp[2];
../singular_texi/./d2t_singular/gaussman_lib.tex(,466)     int spp[2][i];  weight filtration index of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,467)   intvec spp[3];
../singular_texi/./d2t_singular/gaussman_lib.tex(,468)     int spp[3][i];  multiplicity of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,469) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,470) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,471) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,472) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,473) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,474) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,475) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,476) @cindex weight filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,477) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,478) @cindex spectral pairs
../singular_texi/./d2t_singular/gaussman_lib.tex(,479) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,480) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,481) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,482) @c computed example sppairs d2t_singular/gaussman_lib.doc:371 
../singular_texi/./d2t_singular/gaussman_lib.tex(,483) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,484) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,485) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,486) sppprint(sppairs(t));
../singular_texi/./d2t_singular/gaussman_lib.tex(,487) @expansion{} ((-1/2,2),1),((-3/10,1),2),((-1/10,1),2),((0,1),1),((1/10,1),2),((3/10,1)\
../singular_texi/./d2t_singular/gaussman_lib.tex(,488)    ,2),((1/2,0),1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,489) @c end example sppairs d2t_singular/gaussman_lib.doc:371
../singular_texi/./d2t_singular/gaussman_lib.tex(,490) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,491) @c inserted refs from d2t_singular/gaussman_lib.doc:378
../singular_texi/./d2t_singular/gaussman_lib.tex(,499) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,500) @ref{spectrum_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,502) @c end inserted refs from d2t_singular/gaussman_lib.doc:378
../singular_texi/./d2t_singular/gaussman_lib.tex(,503) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,504) @c ---end content sppairs---
../singular_texi/./d2t_singular/gaussman_lib.tex(,505) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,506) @c ------------------- spnf -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,507) @node spnf, sppnf, sppairs, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,508) @subsubsection spnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,509) @cindex spnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,510) @c ---content spnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,511) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,512) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,513) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,514) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,515) ncols(a)==size(m)==size(V); typeof(V[i])=="int"
../singular_texi/./d2t_singular/gaussman_lib.tex(,516) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,517) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,518) order (a[i][,V[i]]) with multiplicity m[i] lexicographically
../singular_texi/./d2t_singular/gaussman_lib.tex(,519) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,520) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,521) @c ---end content spnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,522) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,523) @c ------------------- sppnf -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,524) @node sppnf, vfilt, spnf, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,525) @subsubsection sppnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,526) @cindex sppnf
../singular_texi/./d2t_singular/gaussman_lib.tex(,527) @c ---content sppnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,528) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,529) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,530) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,531) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,532) ncols(e)=size(w)=size(m)=size(V); typeof(V[i])=="module"
../singular_texi/./d2t_singular/gaussman_lib.tex(,533) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,534) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,535) order (a[i][,w[i]][,V[i]]) with multiplicity m[i] lexicographically
../singular_texi/./d2t_singular/gaussman_lib.tex(,536) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,537) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,538) @c ---end content sppnf---
../singular_texi/./d2t_singular/gaussman_lib.tex(,539) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,540) @c ------------------- vfilt -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,541) @node vfilt, vwfilt, sppnf, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,542) @subsubsection vfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,543) @cindex vfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,544) @c ---content vfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,545) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,546) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,547) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,548) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,549) vfilt(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,550) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,551) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,552) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,553) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,554) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,555) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,556) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,557) list v;  V-filtration on H''/s*H''
../singular_texi/./d2t_singular/gaussman_lib.tex(,558)   ideal v[1];
../singular_texi/./d2t_singular/gaussman_lib.tex(,559)     number v[1][i];  V-filtration index of i-th spectral number
../singular_texi/./d2t_singular/gaussman_lib.tex(,560)   intvec v[2];
../singular_texi/./d2t_singular/gaussman_lib.tex(,561)     int v[2][i];  multiplicity of i-th spectral number
../singular_texi/./d2t_singular/gaussman_lib.tex(,562)   list v[3];
../singular_texi/./d2t_singular/gaussman_lib.tex(,563)     module v[3][i];  vector space of i-th graded part in terms of v[4]
../singular_texi/./d2t_singular/gaussman_lib.tex(,564)   ideal v[4];  monomial vector space basis of H''/s*H''
../singular_texi/./d2t_singular/gaussman_lib.tex(,565)   ideal v[5];  standard basis of Jacobian ideal
../singular_texi/./d2t_singular/gaussman_lib.tex(,566) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,567) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,568) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,569) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,570) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,571) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,572) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,573) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,574) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,575) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,576) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,577) @c computed example vfilt d2t_singular/gaussman_lib.doc:455 
../singular_texi/./d2t_singular/gaussman_lib.tex(,578) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,579) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,580) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,581) vfilt(t);
../singular_texi/./d2t_singular/gaussman_lib.tex(,582) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,583) @expansion{}    _[1]=-1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,584) @expansion{}    _[2]=-3/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,585) @expansion{}    _[3]=-1/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,586) @expansion{}    _[4]=0
../singular_texi/./d2t_singular/gaussman_lib.tex(,587) @expansion{}    _[5]=1/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,588) @expansion{}    _[6]=3/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,589) @expansion{}    _[7]=1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,590) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,591) @expansion{}    1,2,2,1,2,2,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,592) @expansion{} [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,593) @expansion{}    [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,594) @expansion{}       _[1]=gen(11)
../singular_texi/./d2t_singular/gaussman_lib.tex(,595) @expansion{}    [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,596) @expansion{}       _[1]=gen(10)
../singular_texi/./d2t_singular/gaussman_lib.tex(,597) @expansion{}       _[2]=gen(6)
../singular_texi/./d2t_singular/gaussman_lib.tex(,598) @expansion{}    [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,599) @expansion{}       _[1]=gen(9)
../singular_texi/./d2t_singular/gaussman_lib.tex(,600) @expansion{}       _[2]=gen(4)
../singular_texi/./d2t_singular/gaussman_lib.tex(,601) @expansion{}    [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,602) @expansion{}       _[1]=gen(5)
../singular_texi/./d2t_singular/gaussman_lib.tex(,603) @expansion{}    [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,604) @expansion{}       _[1]=gen(3)
../singular_texi/./d2t_singular/gaussman_lib.tex(,605) @expansion{}       _[2]=gen(8)
../singular_texi/./d2t_singular/gaussman_lib.tex(,606) @expansion{}    [6]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,607) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/gaussman_lib.tex(,608) @expansion{}       _[2]=gen(7)
../singular_texi/./d2t_singular/gaussman_lib.tex(,609) @expansion{}    [7]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,610) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,611) @expansion{} [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,612) @expansion{}    _[1]=y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,613) @expansion{}    _[2]=y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,614) @expansion{}    _[3]=y3
../singular_texi/./d2t_singular/gaussman_lib.tex(,615) @expansion{}    _[4]=y2
../singular_texi/./d2t_singular/gaussman_lib.tex(,616) @expansion{}    _[5]=xy
../singular_texi/./d2t_singular/gaussman_lib.tex(,617) @expansion{}    _[6]=y
../singular_texi/./d2t_singular/gaussman_lib.tex(,618) @expansion{}    _[7]=x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,619) @expansion{}    _[8]=x3
../singular_texi/./d2t_singular/gaussman_lib.tex(,620) @expansion{}    _[9]=x2
../singular_texi/./d2t_singular/gaussman_lib.tex(,621) @expansion{}    _[10]=x
../singular_texi/./d2t_singular/gaussman_lib.tex(,622) @expansion{}    _[11]=1
../singular_texi/./d2t_singular/gaussman_lib.tex(,623) @expansion{} [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,624) @expansion{}    _[1]=2x2y+5y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,625) @expansion{}    _[2]=2xy2+5x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,626) @expansion{}    _[3]=5x5-5y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,627) @expansion{}    _[4]=10y6+25x3y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,628) @c end example vfilt d2t_singular/gaussman_lib.doc:455
../singular_texi/./d2t_singular/gaussman_lib.tex(,629) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,630) @c inserted refs from d2t_singular/gaussman_lib.doc:462
../singular_texi/./d2t_singular/gaussman_lib.tex(,638) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,639) @ref{spectrum_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,641) @c end inserted refs from d2t_singular/gaussman_lib.doc:462
../singular_texi/./d2t_singular/gaussman_lib.tex(,642) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,643) @c ---end content vfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,644) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,645) @c ------------------- vwfilt -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,646) @node vwfilt, tmatrix, vfilt, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,647) @subsubsection vwfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,648) @cindex vwfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,649) @c ---content vwfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,650) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,651) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,652) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,653) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,654) vwfilt(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,655) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,656) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,657) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,658) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,659) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,660) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,661) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,662) list vw;  weighted V-filtration on H''/s*H''
../singular_texi/./d2t_singular/gaussman_lib.tex(,663)   ideal vw[1];
../singular_texi/./d2t_singular/gaussman_lib.tex(,664)     number vw[1][i];  V-filtration index of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,665)   intvec vw[2];
../singular_texi/./d2t_singular/gaussman_lib.tex(,666)     int vw[2][i];  weight filtration index of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,667)   intvec vw[3];
../singular_texi/./d2t_singular/gaussman_lib.tex(,668)     int vw[3][i];  multiplicity of i-th spectral pair
../singular_texi/./d2t_singular/gaussman_lib.tex(,669)   list vw[4];
../singular_texi/./d2t_singular/gaussman_lib.tex(,670)     module vw[4][i];  vector space of i-th graded part in terms of vw[5]
../singular_texi/./d2t_singular/gaussman_lib.tex(,671)   ideal vw[5];  monomial vector space basis of H''/s*H''
../singular_texi/./d2t_singular/gaussman_lib.tex(,672)   ideal vw[6];  standard basis of Jacobian ideal
../singular_texi/./d2t_singular/gaussman_lib.tex(,673) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,674) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,675) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,676) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,677) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,678) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,679) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,680) @cindex weight filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,681) @cindex spectrum
../singular_texi/./d2t_singular/gaussman_lib.tex(,682) @cindex spectral pairs
../singular_texi/./d2t_singular/gaussman_lib.tex(,683) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,684) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,685) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,686) @c computed example vwfilt d2t_singular/gaussman_lib.doc:509 
../singular_texi/./d2t_singular/gaussman_lib.tex(,687) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,688) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,689) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,690) vwfilt(t);
../singular_texi/./d2t_singular/gaussman_lib.tex(,691) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,692) @expansion{}    _[1]=-1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,693) @expansion{}    _[2]=-3/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,694) @expansion{}    _[3]=-1/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,695) @expansion{}    _[4]=0
../singular_texi/./d2t_singular/gaussman_lib.tex(,696) @expansion{}    _[5]=1/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,697) @expansion{}    _[6]=3/10
../singular_texi/./d2t_singular/gaussman_lib.tex(,698) @expansion{}    _[7]=1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,699) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,700) @expansion{}    2,1,1,1,1,1,0
../singular_texi/./d2t_singular/gaussman_lib.tex(,701) @expansion{} [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,702) @expansion{}    1,2,2,1,2,2,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,703) @expansion{} [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,704) @expansion{}    [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,705) @expansion{}       _[1]=gen(11)
../singular_texi/./d2t_singular/gaussman_lib.tex(,706) @expansion{}    [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,707) @expansion{}       _[1]=gen(10)
../singular_texi/./d2t_singular/gaussman_lib.tex(,708) @expansion{}       _[2]=gen(6)
../singular_texi/./d2t_singular/gaussman_lib.tex(,709) @expansion{}    [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,710) @expansion{}       _[1]=gen(9)
../singular_texi/./d2t_singular/gaussman_lib.tex(,711) @expansion{}       _[2]=gen(4)
../singular_texi/./d2t_singular/gaussman_lib.tex(,712) @expansion{}    [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,713) @expansion{}       _[1]=gen(5)
../singular_texi/./d2t_singular/gaussman_lib.tex(,714) @expansion{}    [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,715) @expansion{}       _[1]=gen(3)
../singular_texi/./d2t_singular/gaussman_lib.tex(,716) @expansion{}       _[2]=gen(8)
../singular_texi/./d2t_singular/gaussman_lib.tex(,717) @expansion{}    [6]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,718) @expansion{}       _[1]=gen(2)
../singular_texi/./d2t_singular/gaussman_lib.tex(,719) @expansion{}       _[2]=gen(7)
../singular_texi/./d2t_singular/gaussman_lib.tex(,720) @expansion{}    [7]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,721) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,722) @expansion{} [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,723) @expansion{}    _[1]=y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,724) @expansion{}    _[2]=y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,725) @expansion{}    _[3]=y3
../singular_texi/./d2t_singular/gaussman_lib.tex(,726) @expansion{}    _[4]=y2
../singular_texi/./d2t_singular/gaussman_lib.tex(,727) @expansion{}    _[5]=xy
../singular_texi/./d2t_singular/gaussman_lib.tex(,728) @expansion{}    _[6]=y
../singular_texi/./d2t_singular/gaussman_lib.tex(,729) @expansion{}    _[7]=x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,730) @expansion{}    _[8]=x3
../singular_texi/./d2t_singular/gaussman_lib.tex(,731) @expansion{}    _[9]=x2
../singular_texi/./d2t_singular/gaussman_lib.tex(,732) @expansion{}    _[10]=x
../singular_texi/./d2t_singular/gaussman_lib.tex(,733) @expansion{}    _[11]=1
../singular_texi/./d2t_singular/gaussman_lib.tex(,734) @expansion{} [6]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,735) @expansion{}    _[1]=2x2y+5y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,736) @expansion{}    _[2]=2xy2+5x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,737) @expansion{}    _[3]=5x5-5y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,738) @expansion{}    _[4]=10y6+25x3y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,739) @c end example vwfilt d2t_singular/gaussman_lib.doc:509
../singular_texi/./d2t_singular/gaussman_lib.tex(,740) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,741) @c inserted refs from d2t_singular/gaussman_lib.doc:516
../singular_texi/./d2t_singular/gaussman_lib.tex(,749) @strong{See also:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,750) @ref{spectrum_lib}.
../singular_texi/./d2t_singular/gaussman_lib.tex(,752) @c end inserted refs from d2t_singular/gaussman_lib.doc:516
../singular_texi/./d2t_singular/gaussman_lib.tex(,753) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,754) @c ---end content vwfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,755) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,756) @c ------------------- tmatrix -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,757) @node tmatrix, endvfilt, vwfilt, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,758) @subsubsection tmatrix
../singular_texi/./d2t_singular/gaussman_lib.tex(,759) @cindex tmatrix
../singular_texi/./d2t_singular/gaussman_lib.tex(,760) @c ---content tmatrix---
../singular_texi/./d2t_singular/gaussman_lib.tex(,761) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,762) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,763) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,764) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,765) tmatrix(t); poly t
../singular_texi/./d2t_singular/gaussman_lib.tex(,766) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,767) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,768) characteristic 0; local degree ordering;
../singular_texi/./d2t_singular/gaussman_lib.tex(,769) @*isolated critical point 0 of t
../singular_texi/./d2t_singular/gaussman_lib.tex(,770) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,771) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,772) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,773) list l=A0,A1,T,M;
../singular_texi/./d2t_singular/gaussman_lib.tex(,774)   matrix A0,A1;  t=A0+s*A1+s^2*(d/ds) on H'' w.r.t. C[[s]]-basis M*T
../singular_texi/./d2t_singular/gaussman_lib.tex(,775)   module T;  C-basis of C^mu
../singular_texi/./d2t_singular/gaussman_lib.tex(,776)   ideal M;  monomial C-basis of H''/sH''
../singular_texi/./d2t_singular/gaussman_lib.tex(,777) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,778) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,779) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,780) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,781) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,782) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,783) @cindex opposite Hodge filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,784) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,785) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,786) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,787) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,788) @c computed example tmatrix d2t_singular/gaussman_lib.doc:554 
../singular_texi/./d2t_singular/gaussman_lib.tex(,789) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,790) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,791) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,792) list A=tmatrix(t);
../singular_texi/./d2t_singular/gaussman_lib.tex(,793) print(A[1]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,794) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,795) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,796) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,797) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,798) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,799) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,800) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,801) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,802) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,803) @expansion{} 0,0,0,0,0,0,0,0,0,0,0,
../singular_texi/./d2t_singular/gaussman_lib.tex(,804) @expansion{} 1,0,0,0,0,0,0,0,0,0,0 
../singular_texi/./d2t_singular/gaussman_lib.tex(,805) print(A[2]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,806) @expansion{} 1/2,0,   0,   0,   0,   0,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,807) @expansion{} 0,  7/10,0,   0,   0,   0,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,808) @expansion{} 0,  0,   7/10,0,   0,   0,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,809) @expansion{} 0,  0,   0,   9/10,0,   0,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,810) @expansion{} 0,  0,   0,   0,   9/10,0,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,811) @expansion{} 0,  0,   0,   0,   0,   1,0,    0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,812) @expansion{} 0,  0,   0,   0,   0,   0,11/10,0,    0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,813) @expansion{} 0,  0,   0,   0,   0,   0,0,    11/10,0,    0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,814) @expansion{} 0,  0,   0,   0,   0,   0,0,    0,    13/10,0,    0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,815) @expansion{} 0,  0,   0,   0,   0,   0,0,    0,    0,    13/10,0, 
../singular_texi/./d2t_singular/gaussman_lib.tex(,816) @expansion{} 0,  0,   0,   0,   0,   0,0,    0,    0,    0,    3/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,817) print(A[3]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,818) @expansion{} -1445/64,0,  0,  0,0,85/8,0,0,0,0,1/2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,819) @expansion{} 0,       125,0,  0,0,0,   0,0,1,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,820) @expansion{} 0,       0,  0,  5,0,0,   1,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,821) @expansion{} 0,       0,  0,  0,4,0,   0,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,822) @expansion{} 2,       0,  0,  0,0,1,   0,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,823) @expansion{} 0,       0,  16, 0,0,0,   0,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,824) @expansion{} 0,       0,  125,0,0,0,   0,0,0,1,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,825) @expansion{} 0,       0,  0,  0,5,0,   0,1,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,826) @expansion{} 0,       0,  0,  4,0,0,   0,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,827) @expansion{} 0,       16, 0,  0,0,0,   0,0,0,0,0,  
../singular_texi/./d2t_singular/gaussman_lib.tex(,828) @expansion{} -1,      0,  0,  0,0,0,   0,0,0,0,0   
../singular_texi/./d2t_singular/gaussman_lib.tex(,829) print(A[4]);
../singular_texi/./d2t_singular/gaussman_lib.tex(,830) @expansion{} y5,
../singular_texi/./d2t_singular/gaussman_lib.tex(,831) @expansion{} y4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,832) @expansion{} y3,
../singular_texi/./d2t_singular/gaussman_lib.tex(,833) @expansion{} y2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,834) @expansion{} xy,
../singular_texi/./d2t_singular/gaussman_lib.tex(,835) @expansion{} y,
../singular_texi/./d2t_singular/gaussman_lib.tex(,836) @expansion{} x4,
../singular_texi/./d2t_singular/gaussman_lib.tex(,837) @expansion{} x3,
../singular_texi/./d2t_singular/gaussman_lib.tex(,838) @expansion{} x2,
../singular_texi/./d2t_singular/gaussman_lib.tex(,839) @expansion{} x,
../singular_texi/./d2t_singular/gaussman_lib.tex(,840) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,841) @c end example tmatrix d2t_singular/gaussman_lib.doc:554
../singular_texi/./d2t_singular/gaussman_lib.tex(,842) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,843) @c ---end content tmatrix---
../singular_texi/./d2t_singular/gaussman_lib.tex(,844) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,845) @c ------------------- endvfilt -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,846) @node endvfilt, spprint, tmatrix, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,847) @subsubsection endvfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,848) @cindex endvfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,849) @c ---content endvfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,850) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,851) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,852) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,853) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,854) endvfilt(v); list v
../singular_texi/./d2t_singular/gaussman_lib.tex(,855) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,856) @item @strong{Assume:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,857) v returned by vfilt
../singular_texi/./d2t_singular/gaussman_lib.tex(,858) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,859) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,860) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,861) list ev;  V-filtration on Jacobian algebra
../singular_texi/./d2t_singular/gaussman_lib.tex(,862)   ideal ev[1];
../singular_texi/./d2t_singular/gaussman_lib.tex(,863)     number ev[1][i];  i-th V-filtration index
../singular_texi/./d2t_singular/gaussman_lib.tex(,864)   intvec ev[2];
../singular_texi/./d2t_singular/gaussman_lib.tex(,865)     int ev[2][i];  i-th multiplicity
../singular_texi/./d2t_singular/gaussman_lib.tex(,866)   list ev[3];
../singular_texi/./d2t_singular/gaussman_lib.tex(,867)     module ev[3][i];  vector space of i-th graded part in terms of ev[4]
../singular_texi/./d2t_singular/gaussman_lib.tex(,868)   ideal ev[4];  monomial vector space basis of Jacobian algebra
../singular_texi/./d2t_singular/gaussman_lib.tex(,869)   ideal ev[5];  standard basis of Jacobian ideal
../singular_texi/./d2t_singular/gaussman_lib.tex(,870) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,871) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,872) @cindex singularities
../singular_texi/./d2t_singular/gaussman_lib.tex(,873) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/gaussman_lib.tex(,874) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/gaussman_lib.tex(,875) @cindex mixed Hodge structure
../singular_texi/./d2t_singular/gaussman_lib.tex(,876) @cindex V-filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,877) @cindex endomorphism filtration
../singular_texi/./d2t_singular/gaussman_lib.tex(,878) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,879) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,880) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,881) @c computed example endvfilt d2t_singular/gaussman_lib.doc:603 
../singular_texi/./d2t_singular/gaussman_lib.tex(,882) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,883) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,884) poly t=x5+x2y2+y5;
../singular_texi/./d2t_singular/gaussman_lib.tex(,885) endvfilt(vfilt(t));
../singular_texi/./d2t_singular/gaussman_lib.tex(,886) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,887) @expansion{}    _[1]=0
../singular_texi/./d2t_singular/gaussman_lib.tex(,888) @expansion{}    _[2]=1/5
../singular_texi/./d2t_singular/gaussman_lib.tex(,889) @expansion{}    _[3]=2/5
../singular_texi/./d2t_singular/gaussman_lib.tex(,890) @expansion{}    _[4]=1/2
../singular_texi/./d2t_singular/gaussman_lib.tex(,891) @expansion{}    _[5]=3/5
../singular_texi/./d2t_singular/gaussman_lib.tex(,892) @expansion{}    _[6]=4/5
../singular_texi/./d2t_singular/gaussman_lib.tex(,893) @expansion{}    _[7]=1
../singular_texi/./d2t_singular/gaussman_lib.tex(,894) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,895) @expansion{}    1,2,2,1,2,2,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,896) @expansion{} [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,897) @expansion{}    [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,898) @expansion{}       _[1]=gen(11)
../singular_texi/./d2t_singular/gaussman_lib.tex(,899) @expansion{}    [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,900) @expansion{}       _[1]=gen(10)
../singular_texi/./d2t_singular/gaussman_lib.tex(,901) @expansion{}       _[2]=gen(6)
../singular_texi/./d2t_singular/gaussman_lib.tex(,902) @expansion{}    [3]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,903) @expansion{}       _[1]=gen(9)
../singular_texi/./d2t_singular/gaussman_lib.tex(,904) @expansion{}       _[2]=gen(4)
../singular_texi/./d2t_singular/gaussman_lib.tex(,905) @expansion{}    [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,906) @expansion{}       _[1]=gen(5)
../singular_texi/./d2t_singular/gaussman_lib.tex(,907) @expansion{}    [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,908) @expansion{}       _[1]=gen(8)
../singular_texi/./d2t_singular/gaussman_lib.tex(,909) @expansion{}       _[2]=gen(3)
../singular_texi/./d2t_singular/gaussman_lib.tex(,910) @expansion{}    [6]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,911) @expansion{}       _[1]=gen(7)
../singular_texi/./d2t_singular/gaussman_lib.tex(,912) @expansion{}       _[2]=gen(2)
../singular_texi/./d2t_singular/gaussman_lib.tex(,913) @expansion{}    [7]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,914) @expansion{}       _[1]=gen(1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,915) @expansion{} [4]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,916) @expansion{}    _[1]=y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,917) @expansion{}    _[2]=y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,918) @expansion{}    _[3]=y3
../singular_texi/./d2t_singular/gaussman_lib.tex(,919) @expansion{}    _[4]=y2
../singular_texi/./d2t_singular/gaussman_lib.tex(,920) @expansion{}    _[5]=xy
../singular_texi/./d2t_singular/gaussman_lib.tex(,921) @expansion{}    _[6]=y
../singular_texi/./d2t_singular/gaussman_lib.tex(,922) @expansion{}    _[7]=x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,923) @expansion{}    _[8]=x3
../singular_texi/./d2t_singular/gaussman_lib.tex(,924) @expansion{}    _[9]=x2
../singular_texi/./d2t_singular/gaussman_lib.tex(,925) @expansion{}    _[10]=x
../singular_texi/./d2t_singular/gaussman_lib.tex(,926) @expansion{}    _[11]=1
../singular_texi/./d2t_singular/gaussman_lib.tex(,927) @expansion{} [5]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,928) @expansion{}    _[1]=2x2y+5y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,929) @expansion{}    _[2]=2xy2+5x4
../singular_texi/./d2t_singular/gaussman_lib.tex(,930) @expansion{}    _[3]=5x5-5y5
../singular_texi/./d2t_singular/gaussman_lib.tex(,931) @expansion{}    _[4]=10y6+25x3y4
../singular_texi/./d2t_singular/gaussman_lib.tex(,932) @c end example endvfilt d2t_singular/gaussman_lib.doc:603
../singular_texi/./d2t_singular/gaussman_lib.tex(,933) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,934) @c ---end content endvfilt---
../singular_texi/./d2t_singular/gaussman_lib.tex(,935) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,936) @c ------------------- spprint -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,937) @node spprint, sppprint, endvfilt, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,938) @subsubsection spprint
../singular_texi/./d2t_singular/gaussman_lib.tex(,939) @cindex spprint
../singular_texi/./d2t_singular/gaussman_lib.tex(,940) @c ---content spprint---
../singular_texi/./d2t_singular/gaussman_lib.tex(,941) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,942) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,943) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,944) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,945) spprint(sp); list sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,946) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,947) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,948) string s; spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,949) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,950) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,951) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,952) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,953) @c computed example spprint d2t_singular/gaussman_lib.doc:629 
../singular_texi/./d2t_singular/gaussman_lib.tex(,954) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,955) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,956) list sp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,957) spprint(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,958) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,959) @c end example spprint d2t_singular/gaussman_lib.doc:629
../singular_texi/./d2t_singular/gaussman_lib.tex(,960) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,961) @c ---end content spprint---
../singular_texi/./d2t_singular/gaussman_lib.tex(,962) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,963) @c ------------------- sppprint -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,964) @node sppprint, spadd, spprint, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,965) @subsubsection sppprint
../singular_texi/./d2t_singular/gaussman_lib.tex(,966) @cindex sppprint
../singular_texi/./d2t_singular/gaussman_lib.tex(,967) @c ---content sppprint---
../singular_texi/./d2t_singular/gaussman_lib.tex(,968) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,969) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,970) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,971) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,972) sppprint(spp); list spp
../singular_texi/./d2t_singular/gaussman_lib.tex(,973) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,974) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,975) string s; spectral pairs spp
../singular_texi/./d2t_singular/gaussman_lib.tex(,976) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,977) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,978) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,979) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,980) @c computed example sppprint d2t_singular/gaussman_lib.doc:655 
../singular_texi/./d2t_singular/gaussman_lib.tex(,981) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,982) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,983) list spp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(2,1,1,1,1,1,0),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,984) sppprint(spp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,985) @expansion{} ((-1/2,2),1),((-3/10,1),2),((-1/10,1),2),((0,1),1),((1/10,1),2),((3/10,1)\
../singular_texi/./d2t_singular/gaussman_lib.tex(,986)    ,2),((1/2,0),1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,987) @c end example sppprint d2t_singular/gaussman_lib.doc:655
../singular_texi/./d2t_singular/gaussman_lib.tex(,988) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,989) @c ---end content sppprint---
../singular_texi/./d2t_singular/gaussman_lib.tex(,990) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,991) @c ------------------- spadd -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,992) @node spadd, spsub, sppprint, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,993) @subsubsection spadd
../singular_texi/./d2t_singular/gaussman_lib.tex(,994) @cindex spadd
../singular_texi/./d2t_singular/gaussman_lib.tex(,995) @c ---content spadd---
../singular_texi/./d2t_singular/gaussman_lib.tex(,996) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,997) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,998) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,999) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1000) spadd(sp1,sp2); list sp1, list sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,1001) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1002) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1003) list sp; sum of spectra sp1 and sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,1004) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1005) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1006) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1007) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1008) @c computed example spadd d2t_singular/gaussman_lib.doc:681 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1009) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1010) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1011) list sp1=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1012) spprint(sp1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1013) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1014) list sp2=list(ideal(-1/6,1/6),intvec(1,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1015) spprint(sp2);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1016) @expansion{} (-1/6,1),(1/6,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1017) spprint(spadd(sp1,sp2));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1018) @expansion{} (-1/2,1),(-3/10,2),(-1/6,1),(-1/10,2),(0,1),(1/10,2),(1/6,1),(3/10,2),(1/\
../singular_texi/./d2t_singular/gaussman_lib.tex(,1019)    2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1020) @c end example spadd d2t_singular/gaussman_lib.doc:681
../singular_texi/./d2t_singular/gaussman_lib.tex(,1021) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1022) @c ---end content spadd---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1023) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1024) @c ------------------- spsub -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1025) @node spsub, spmul, spadd, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1026) @subsubsection spsub
../singular_texi/./d2t_singular/gaussman_lib.tex(,1027) @cindex spsub
../singular_texi/./d2t_singular/gaussman_lib.tex(,1028) @c ---content spsub---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1029) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1030) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1031) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1032) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1033) spsub(sp1,sp2); list sp1, list sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,1034) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1035) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1036) list sp; difference of spectra sp1 and sp2
../singular_texi/./d2t_singular/gaussman_lib.tex(,1037) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1038) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1039) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1040) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1041) @c computed example spsub d2t_singular/gaussman_lib.doc:710 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1042) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1043) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1044) list sp1=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1045) spprint(sp1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1046) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1047) list sp2=list(ideal(-1/6,1/6),intvec(1,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1048) spprint(sp2);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1049) @expansion{} (-1/6,1),(1/6,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1050) spprint(spsub(sp1,sp2));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1051) @expansion{} (-1/2,1),(-3/10,2),(-1/6,-1),(-1/10,2),(0,1),(1/10,2),(1/6,-1),(3/10,2),(\
../singular_texi/./d2t_singular/gaussman_lib.tex(,1052)    1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1053) @c end example spsub d2t_singular/gaussman_lib.doc:710
../singular_texi/./d2t_singular/gaussman_lib.tex(,1054) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1055) @c ---end content spsub---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1056) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1057) @c ------------------- spmul -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1058) @node spmul, spissemicont, spsub, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1059) @subsubsection spmul
../singular_texi/./d2t_singular/gaussman_lib.tex(,1060) @cindex spmul
../singular_texi/./d2t_singular/gaussman_lib.tex(,1061) @c ---content spmul---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1062) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1063) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1064) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1065) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1066) spmul(sp0,k); list sp0, int[vec] k
../singular_texi/./d2t_singular/gaussman_lib.tex(,1067) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1068) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1069) list sp; linear combination of spectra sp0 with coefficients k
../singular_texi/./d2t_singular/gaussman_lib.tex(,1070) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1071) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1072) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1073) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1074) @c computed example spmul d2t_singular/gaussman_lib.doc:739 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1075) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1076) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1077) list sp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1078) spprint(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1079) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1080) spprint(spmul(sp,2));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1081) @expansion{} (-1/2,2),(-3/10,4),(-1/10,4),(0,2),(1/10,4),(3/10,4),(1/2,2)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1082) list sp1=list(ideal(-1/6,1/6),intvec(1,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1083) spprint(sp1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1084) @expansion{} (-1/6,1),(1/6,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1085) list sp2=list(ideal(-1/3,0,1/3),intvec(1,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1086) spprint(sp2);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1087) @expansion{} (-1/3,1),(0,2),(1/3,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1088) spprint(spmul(list(sp1,sp2),intvec(1,2)));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1089) @expansion{} (-1/3,2),(-1/6,1),(0,4),(1/6,1),(1/3,2)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1090) @c end example spmul d2t_singular/gaussman_lib.doc:739
../singular_texi/./d2t_singular/gaussman_lib.tex(,1091) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1092) @c ---end content spmul---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1093) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1094) @c ------------------- spissemicont -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1095) @node spissemicont, spsemicont, spmul, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1096) @subsubsection spissemicont
../singular_texi/./d2t_singular/gaussman_lib.tex(,1097) @cindex spissemicont
../singular_texi/./d2t_singular/gaussman_lib.tex(,1098) @c ---content spissemicont---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1099) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1100) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1101) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1102) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1103) spissemicont(sp[,1]); list sp, int opt
../singular_texi/./d2t_singular/gaussman_lib.tex(,1104) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1105) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1106) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,1107) int k=
../singular_texi/./d2t_singular/gaussman_lib.tex(,1108)   1;  if sum of sp is positive on all intervals [a,a+1) [and (a,a+1)]
../singular_texi/./d2t_singular/gaussman_lib.tex(,1109)   0;  if sum of sp is negative on some interval [a,a+1) [or (a,a+1)]
../singular_texi/./d2t_singular/gaussman_lib.tex(,1110) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,1111) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1112) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1113) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1114) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1115) @c computed example spissemicont d2t_singular/gaussman_lib.doc:775 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1116) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1117) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1118) list sp1=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1119) spprint(sp1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1120) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1121) list sp2=list(ideal(-1/6,1/6),intvec(1,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1122) spprint(sp2);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1123) @expansion{} (-1/6,1),(1/6,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1124) spissemicont(spsub(sp1,spmul(sp2,3)));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1125) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,1126) spissemicont(spsub(sp1,spmul(sp2,4)));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1127) @expansion{} 0
../singular_texi/./d2t_singular/gaussman_lib.tex(,1128) @c end example spissemicont d2t_singular/gaussman_lib.doc:775
../singular_texi/./d2t_singular/gaussman_lib.tex(,1129) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1130) @c ---end content spissemicont---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1131) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1132) @c ------------------- spsemicont -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1133) @node spsemicont, spmilnor, spissemicont, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1134) @subsubsection spsemicont
../singular_texi/./d2t_singular/gaussman_lib.tex(,1135) @cindex spsemicont
../singular_texi/./d2t_singular/gaussman_lib.tex(,1136) @c ---content spsemicont---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1137) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1138) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1139) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1140) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1141) spsemicont(sp0,sp,k[,1]); list sp0, list sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1142) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1143) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1144) @format
../singular_texi/./d2t_singular/gaussman_lib.tex(,1145) list l;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1146)   intvec l[i];  if the spectra sp0 occur with multiplicities k
../singular_texi/./d2t_singular/gaussman_lib.tex(,1147)                 in a deformation of a [quasihomogeneous] singularity
../singular_texi/./d2t_singular/gaussman_lib.tex(,1148)                 with spectrum sp then k<=l[i]
../singular_texi/./d2t_singular/gaussman_lib.tex(,1149) @end format
../singular_texi/./d2t_singular/gaussman_lib.tex(,1150) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1151) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1152) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1153) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1154) @c computed example spsemicont d2t_singular/gaussman_lib.doc:810 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1155) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1156) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1157) list sp0=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1158) spprint(sp0);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1159) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1160) list sp1=list(ideal(-1/6,1/6),intvec(1,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1161) spprint(sp1);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1162) @expansion{} (-1/6,1),(1/6,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1163) list sp2=list(ideal(-1/3,0,1/3),intvec(1,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1164) spprint(sp2);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1165) @expansion{} (-1/3,1),(0,2),(1/3,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1166) list sp=sp1,sp2;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1167) list l=spsemicont(sp0,sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1168) l;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1169) @expansion{} [1]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,1170) @expansion{}    3
../singular_texi/./d2t_singular/gaussman_lib.tex(,1171) @expansion{} [2]:
../singular_texi/./d2t_singular/gaussman_lib.tex(,1172) @expansion{}    2,1
../singular_texi/./d2t_singular/gaussman_lib.tex(,1173) spissemicont(spsub(sp0,spmul(sp,l[1])));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1174) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,1175) spissemicont(spsub(sp0,spmul(sp,l[1]-1)));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1176) @expansion{} 1
../singular_texi/./d2t_singular/gaussman_lib.tex(,1177) spissemicont(spsub(sp0,spmul(sp,l[1]+1)));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1178) @expansion{} 0
../singular_texi/./d2t_singular/gaussman_lib.tex(,1179) @c end example spsemicont d2t_singular/gaussman_lib.doc:810
../singular_texi/./d2t_singular/gaussman_lib.tex(,1180) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1181) @c ---end content spsemicont---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1182) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1183) @c ------------------- spmilnor -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1184) @node spmilnor, spgeomgenus, spsemicont, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1185) @subsubsection spmilnor
../singular_texi/./d2t_singular/gaussman_lib.tex(,1186) @cindex spmilnor
../singular_texi/./d2t_singular/gaussman_lib.tex(,1187) @c ---content spmilnor---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1188) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1189) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1190) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1191) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1192) spmilnor(sp); list sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1193) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1194) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1195) int mu; Milnor number of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1196) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1197) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1198) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1199) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1200) @c computed example spmilnor d2t_singular/gaussman_lib.doc:846 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1201) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1202) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1203) list sp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1204) spprint(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1205) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1206) spmilnor(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1207) @expansion{} 11
../singular_texi/./d2t_singular/gaussman_lib.tex(,1208) @c end example spmilnor d2t_singular/gaussman_lib.doc:846
../singular_texi/./d2t_singular/gaussman_lib.tex(,1209) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1210) @c ---end content spmilnor---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1211) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1212) @c ------------------- spgeomgenus -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1213) @node spgeomgenus, spgamma, spmilnor, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1214) @subsubsection spgeomgenus
../singular_texi/./d2t_singular/gaussman_lib.tex(,1215) @cindex spgeomgenus
../singular_texi/./d2t_singular/gaussman_lib.tex(,1216) @c ---content spgeomgenus---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1217) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1218) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1219) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1220) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1221) spgeomgenus(sp); list sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1222) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1223) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1224) int g; geometrical genus of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1225) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1226) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1227) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1228) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1229) @c computed example spgeomgenus d2t_singular/gaussman_lib.doc:873 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1230) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1231) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1232) list sp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1233) spprint(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1234) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1235) spgeomgenus(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1236) @expansion{} 6
../singular_texi/./d2t_singular/gaussman_lib.tex(,1237) @c end example spgeomgenus d2t_singular/gaussman_lib.doc:873
../singular_texi/./d2t_singular/gaussman_lib.tex(,1238) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1239) @c ---end content spgeomgenus---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1240) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1241) @c ------------------- spgamma -------------
../singular_texi/./d2t_singular/gaussman_lib.tex(,1242) @node spgamma,, spgeomgenus, gaussman_lib
../singular_texi/./d2t_singular/gaussman_lib.tex(,1243) @subsubsection spgamma
../singular_texi/./d2t_singular/gaussman_lib.tex(,1244) @cindex spgamma
../singular_texi/./d2t_singular/gaussman_lib.tex(,1245) @c ---content spgamma---
../singular_texi/./d2t_singular/gaussman_lib.tex(,1246) Procedure from library @code{gaussman.lib} (@pxref{gaussman_lib}).
../singular_texi/./d2t_singular/gaussman_lib.tex(,1247) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1248) @table @asis
../singular_texi/./d2t_singular/gaussman_lib.tex(,1249) @item @strong{Usage:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1250) spgamma(sp); list sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1251) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1252) @item @strong{Return:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1253) number gamma; gamma invariant of spectrum sp
../singular_texi/./d2t_singular/gaussman_lib.tex(,1254) 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1255) @end table
../singular_texi/./d2t_singular/gaussman_lib.tex(,1256) @strong{Example:}
../singular_texi/./d2t_singular/gaussman_lib.tex(,1257) @smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1258) @c computed example spgamma d2t_singular/gaussman_lib.doc:900 
../singular_texi/./d2t_singular/gaussman_lib.tex(,1259) LIB "gaussman.lib";
../singular_texi/./d2t_singular/gaussman_lib.tex(,1260) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/gaussman_lib.tex(,1261) list sp=list(ideal(-1/2,-3/10,-1/10,0,1/10,3/10,1/2),intvec(1,2,2,1,2,2,1));
../singular_texi/./d2t_singular/gaussman_lib.tex(,1262) spprint(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1263) @expansion{} (-1/2,1),(-3/10,2),(-1/10,2),(0,1),(1/10,2),(3/10,2),(1/2,1)
../singular_texi/./d2t_singular/gaussman_lib.tex(,1264) spgamma(sp);
../singular_texi/./d2t_singular/gaussman_lib.tex(,1265) @expansion{} 1/240
../singular_texi/./d2t_singular/gaussman_lib.tex(,1266) @c end example spgamma d2t_singular/gaussman_lib.doc:900
../singular_texi/./d2t_singular/gaussman_lib.tex(,1267) @end smallexample
../singular_texi/./d2t_singular/gaussman_lib.tex(,1268) @c ---end content spgamma---
../singular_texi/singular.tex(,470) @c ---------------------------------------------------------
../singular_texi/singular.tex(,471) @node hnoether_lib, mondromy_lib, gaussman_lib, Singularities
../singular_texi/singular.tex(,472) @subsection hnoether_lib
../singular_texi/singular.tex(,473) @c include of docu for hnoether.lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/hnoether_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/hnoether_lib.doc
../singular_texi/./d2t_singular/hnoether_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/hnoether_lib.doc INSTEAD
../singular_texi/./d2t_singular/hnoether_lib.tex(,4) @c library version: (1.29.2.14,2002/10/21)
../singular_texi/./d2t_singular/hnoether_lib.tex(,5) @c library file: ../Singular/LIB/hnoether.lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,6) @cindex hnoether.lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,7) @cindex hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,10) hnoether.lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,12)    Hamburger-Noether (Puiseux) Development
../singular_texi/./d2t_singular/hnoether_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,14) Martin Lamm, lamm@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/hnoether_lib.tex(,15) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,16) @item @strong{Overview:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,17) A library for computing the Hamburger-Noether, resp. Puiseux, development
../singular_texi/./d2t_singular/hnoether_lib.tex(,18) of a plane curve singularity following [Campillo, A.: Algebroid curves
../singular_texi/./d2t_singular/hnoether_lib.tex(,19) in positive characteristic, Springer LNM 813 (1980)]. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,20) The library contains also procedures for computing the (topological)
../singular_texi/./d2t_singular/hnoether_lib.tex(,21) numerical invariants of plane curve singularities.
../singular_texi/./d2t_singular/hnoether_lib.tex(,22) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,23) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,24) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,25) @strong{Main procedures:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,26) @menu
../singular_texi/./d2t_singular/hnoether_lib.tex(,27) * hnexpansion:: Hamburger-Noether (H-N) development of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,28) * sethnering:: changes to the hnering created by hnexpansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,29) * develop:: H-N development of irreducible curves
../singular_texi/./d2t_singular/hnoether_lib.tex(,30) * extdevelop:: extension of the H-N development hne of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,31) * parametrisation:: a parametrization of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,32) * displayHNE:: display H-N development as an ideal
../singular_texi/./d2t_singular/hnoether_lib.tex(,33) * invariants:: invariants of f, e.g. the characteristic exponents
../singular_texi/./d2t_singular/hnoether_lib.tex(,34) * displayInvariants:: display invariants of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,35) * multsequence:: sequence of multiplicities
../singular_texi/./d2t_singular/hnoether_lib.tex(,36) * displayMultsequence:: display sequence of multiplicities
../singular_texi/./d2t_singular/hnoether_lib.tex(,37) * intersection:: intersection multiplicity of two curves
../singular_texi/./d2t_singular/hnoether_lib.tex(,38) * stripHNE:: reduce amount of memory consumed by hne
../singular_texi/./d2t_singular/hnoether_lib.tex(,39) * is_irred:: test if f is irreducible
../singular_texi/./d2t_singular/hnoether_lib.tex(,40) * delta:: delta invariant of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,41) * newtonpoly:: (local) Newton polygon of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,42) * is_NND:: test if f is Newton non-degenerate
../singular_texi/./d2t_singular/hnoether_lib.tex(,43) @end menu
../singular_texi/./d2t_singular/hnoether_lib.tex(,44) @strong{Auxiliary procedures:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,45) @menu
../singular_texi/./d2t_singular/hnoether_lib.tex(,46) * puiseux2generators:: convert Puiseux pairs to generators of semigroup
../singular_texi/./d2t_singular/hnoether_lib.tex(,47) * separateHNE:: number of quadratic transf. needed for separation
../singular_texi/./d2t_singular/hnoether_lib.tex(,48) * squarefree:: a squarefree divisor of the poly f
../singular_texi/./d2t_singular/hnoether_lib.tex(,49) * allsquarefree:: the maximal squarefree divisor of the poly f
../singular_texi/./d2t_singular/hnoether_lib.tex(,50) * further_hn_proc:: show further procedures useful for interactive use
../singular_texi/./d2t_singular/hnoether_lib.tex(,51) @end menu
../singular_texi/./d2t_singular/hnoether_lib.tex(,52) @cindex Hamburger-Noether expansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,53) @cindex Puiseux expansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,54) @cindex curve singularities
../singular_texi/./d2t_singular/hnoether_lib.tex(,55) @c ---end content LibInfo---
../singular_texi/./d2t_singular/hnoether_lib.tex(,56) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,57) @c ------------------- hnexpansion -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,58) @node hnexpansion, sethnering,, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,59) @subsubsection hnexpansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,60) @cindex hnexpansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,61) @c ---content hnexpansion---
../singular_texi/./d2t_singular/hnoether_lib.tex(,62) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,63) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,64) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,65) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,66) hnexpansion(f); or hnexpansion(f,"ess"); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,67) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,68) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,69) hnexpansion(f); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,70) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,71) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,72) f is a bivariate polynomial (in the first 2 ring variables)
../singular_texi/./d2t_singular/hnoether_lib.tex(,73) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,74) @item @strong{Create:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,75) ring with variables @code{x,y} and ordering @code{ls} over a
../singular_texi/./d2t_singular/hnoether_lib.tex(,76) field extension of the current basering's ground field, 
../singular_texi/./d2t_singular/hnoether_lib.tex(,77) since the Hamburger-Noether development usually does not exist
../singular_texi/./d2t_singular/hnoether_lib.tex(,78) in the originally given basering. The field extension is chosen
../singular_texi/./d2t_singular/hnoether_lib.tex(,79) minimally.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,80) Moreover, in the ring a list @code{hne} of lists @code{hne[i]} is
../singular_texi/./d2t_singular/hnoether_lib.tex(,81) created (corresponding to the output of @code{develop(f[i])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,82) f[i] a branch of f, but the last entry being omitted).
../singular_texi/./d2t_singular/hnoether_lib.tex(,83) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,84) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,85) @item @code{hne[i][1]}; matrix:
../singular_texi/./d2t_singular/hnoether_lib.tex(,86)          Each row contains the coefficients of the corresponding line of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,87)          Hamburger-Noether expansion (HNE) for f[i]. The end of the line is
../singular_texi/./d2t_singular/hnoether_lib.tex(,88)          marked in the matrix by the first ring variable (usually x).
../singular_texi/./d2t_singular/hnoether_lib.tex(,89) @item @code{hne[i][2]}; intvec:
../singular_texi/./d2t_singular/hnoether_lib.tex(,90)          indicating the length of lines of the HNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,91) @item @code{hne[i][3]}; int:
../singular_texi/./d2t_singular/hnoether_lib.tex(,92)          0  if the 1st ring variable was transversal (with respect to f[i]), @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,93)          1  if the variables were changed at the beginning of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,94)             computation, @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,95)         -1  if an error has occurred.
../singular_texi/./d2t_singular/hnoether_lib.tex(,96) @item @code{hne[i][4]}; poly:
../singular_texi/./d2t_singular/hnoether_lib.tex(,97)          the transformed polynomial of f[i] to make it possible to extend the
../singular_texi/./d2t_singular/hnoether_lib.tex(,98)          Hamburger-Noether development a posteriori without having to do
../singular_texi/./d2t_singular/hnoether_lib.tex(,99)          all the previous calculation once again (0 if not needed)
../singular_texi/./d2t_singular/hnoether_lib.tex(,100) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,101) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,102) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,103) a list, say @code{hn}, containing the created ring
../singular_texi/./d2t_singular/hnoether_lib.tex(,104) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,105) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,106) to use the ring type: @code{def HNEring=hn[i]; setring HNEring;}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,107) @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,108) If f is known to be irreducible as a power series, @code{develop(f)}
../singular_texi/./d2t_singular/hnoether_lib.tex(,109) could be chosen instead to avoid the change of basering. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,110) Increasing @code{printlevel} leads to more and more comments.
../singular_texi/./d2t_singular/hnoether_lib.tex(,111) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,112) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,113) hnexpansion(f,"ess"); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,114) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,115) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,116) f is a bivariate polynomial (in the first 2 ring variables)
../singular_texi/./d2t_singular/hnoether_lib.tex(,117) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,118) @item @strong{Create:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,119) ring with variables @code{x,y} and ordering @code{ls} over a
../singular_texi/./d2t_singular/hnoether_lib.tex(,120) field extension of the current basering's ground field, 
../singular_texi/./d2t_singular/hnoether_lib.tex(,121) since the Hamburger-Noether development usually does not exist
../singular_texi/./d2t_singular/hnoether_lib.tex(,122) in the originally given basering. The field extension is chosen
../singular_texi/./d2t_singular/hnoether_lib.tex(,123) minimally.
../singular_texi/./d2t_singular/hnoether_lib.tex(,124) @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,125) Moreover, in the ring a list @code{hne} of lists @code{hne[i]} is
../singular_texi/./d2t_singular/hnoether_lib.tex(,126) created (corresponding to the output of @code{develop(f[i])}, f[i] an
../singular_texi/./d2t_singular/hnoether_lib.tex(,127) "essential" branch of f, but the last entry being omitted). See
../singular_texi/./d2t_singular/hnoether_lib.tex(,128) @code{hnexpansion} above for more details.
../singular_texi/./d2t_singular/hnoether_lib.tex(,129) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,130) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,131) a list, say @code{hn}, containing the created ring
../singular_texi/./d2t_singular/hnoether_lib.tex(,132) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,133) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,134) to use the ring type: @code{def hnering=hn[i]; setring hnering;}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,135) @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,136) Alternatively you may use the procedure sethnering and type:
../singular_texi/./d2t_singular/hnoether_lib.tex(,137) @code{sethnering(hn);}
../singular_texi/./d2t_singular/hnoether_lib.tex(,138) @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,139) If the HNE needs a field extension, some of the branches will be
../singular_texi/./d2t_singular/hnoether_lib.tex(,140) conjugate. In this case @code{hnexpansion(f,"ess")} reduces the
../singular_texi/./d2t_singular/hnoether_lib.tex(,141) computation to one representative for each group of conjugate
../singular_texi/./d2t_singular/hnoether_lib.tex(,142) branches.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,143) Note that the degree of each branch is in general less than the degree
../singular_texi/./d2t_singular/hnoether_lib.tex(,144) of the field extension in which all HNEs can be put.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,145) Use @code{hnexpansion(f)} to compute a complete HNE, i.e., a HNE for
../singular_texi/./d2t_singular/hnoether_lib.tex(,146) all branches.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,147) Increasing @code{printlevel} leads to more and more comments.
../singular_texi/./d2t_singular/hnoether_lib.tex(,148) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,149) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,150) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,151) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,152) @c computed example hnexpansion d2t_singular/hnoether_lib.doc:150 
../singular_texi/./d2t_singular/hnoether_lib.tex(,153) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,154) ring r=0,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,155) list hn=hnexpansion(x4-y6);
../singular_texi/./d2t_singular/hnoether_lib.tex(,156) show(hn);
../singular_texi/./d2t_singular/hnoether_lib.tex(,157) @expansion{} // list, 1 element(s):
../singular_texi/./d2t_singular/hnoether_lib.tex(,158) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,159) @expansion{}    // ring: (0),(x,y),(ls(2),C);
../singular_texi/./d2t_singular/hnoether_lib.tex(,160) @expansion{}    // minpoly = 0
../singular_texi/./d2t_singular/hnoether_lib.tex(,161) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/hnoether_lib.tex(,162) @expansion{} // hne                  [0]  list, size: 2
../singular_texi/./d2t_singular/hnoether_lib.tex(,163) def hnering=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,164) setring hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,165) size(hne);           // number of branches
../singular_texi/./d2t_singular/hnoether_lib.tex(,166) @expansion{} 2
../singular_texi/./d2t_singular/hnoether_lib.tex(,167) print(hne[1][1]);    // HN-matrix of 1st branch
../singular_texi/./d2t_singular/hnoether_lib.tex(,168) @expansion{} 0,x,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,169) @expansion{} 0,1,x 
../singular_texi/./d2t_singular/hnoether_lib.tex(,170) parametrisation(hne);    // parametrization of the two branches
../singular_texi/./d2t_singular/hnoether_lib.tex(,171) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,172) @expansion{}    _[1]=x3
../singular_texi/./d2t_singular/hnoether_lib.tex(,173) @expansion{}    _[2]=x2
../singular_texi/./d2t_singular/hnoether_lib.tex(,174) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,175) @expansion{}    _[1]=-x3
../singular_texi/./d2t_singular/hnoether_lib.tex(,176) @expansion{}    _[2]=-x2
../singular_texi/./d2t_singular/hnoether_lib.tex(,177) /////////////////////////////////////////////////////////
../singular_texi/./d2t_singular/hnoether_lib.tex(,178) ring s=2,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,179) poly f=(x4+x2y+y2)*(x3+xy2+y3);
../singular_texi/./d2t_singular/hnoether_lib.tex(,180) // --------- compute all branches: ---------
../singular_texi/./d2t_singular/hnoether_lib.tex(,181) hn=hnexpansion(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,182) @expansion{} // new minimal polynomial: a6+a5+a3+a2+1
../singular_texi/./d2t_singular/hnoether_lib.tex(,183) hnering=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,184) setring hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,185) displayHNE(hne[1]);   // HN-matrix of 1st branch
../singular_texi/./d2t_singular/hnoether_lib.tex(,186) @expansion{} HNE[1]=y+(a^4+a+1)*z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,187) @expansion{} HNE[2]=x+z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,188) displayHNE(hne[4]);   // HN-matrix of 4th branch
../singular_texi/./d2t_singular/hnoether_lib.tex(,189) @expansion{} HNE[1]=y+(a^4+a^2+a+1)*z(0)^2
../singular_texi/./d2t_singular/hnoether_lib.tex(,190) @expansion{} HNE[2]=x+z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,191) setring s;
../singular_texi/./d2t_singular/hnoether_lib.tex(,192) // --- compute only one of conjugate branches: ---
../singular_texi/./d2t_singular/hnoether_lib.tex(,193) hn=hnexpansion(f,"ess");
../singular_texi/./d2t_singular/hnoether_lib.tex(,194) @expansion{} // new minimal polynomial: a6+a5+a3+a2+1
../singular_texi/./d2t_singular/hnoether_lib.tex(,195) hnering=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,196) setring hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,197) displayHNE(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,198) @expansion{} // Hamburger-Noether development of branch nr.1:
../singular_texi/./d2t_singular/hnoether_lib.tex(,199) @expansion{} HNE[1]=y+(a^4+a^2)*z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,200) @expansion{} HNE[2]=x+z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,201) @expansion{} 
../singular_texi/./d2t_singular/hnoether_lib.tex(,202) @expansion{} // Hamburger-Noether development of branch nr.2:
../singular_texi/./d2t_singular/hnoether_lib.tex(,203) @expansion{} HNE[1]=y+(a^4+a^2+a)*z(0)^2
../singular_texi/./d2t_singular/hnoether_lib.tex(,204) @expansion{} HNE[2]=x+z(0)
../singular_texi/./d2t_singular/hnoether_lib.tex(,205) @expansion{} 
../singular_texi/./d2t_singular/hnoether_lib.tex(,206) // no. 1 of hnexpansion(f,"ess") represents no. 1 - 3 of hnexpansion(f) and
../singular_texi/./d2t_singular/hnoether_lib.tex(,207) // no. 2 of hnexpansion(f,"ess") represents no. 4 + 5 of hnexpansion(f)
../singular_texi/./d2t_singular/hnoether_lib.tex(,208) @c end example hnexpansion d2t_singular/hnoether_lib.doc:150
../singular_texi/./d2t_singular/hnoether_lib.tex(,209) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,210) @c inserted refs from d2t_singular/hnoether_lib.doc:179
../singular_texi/./d2t_singular/hnoether_lib.tex(,221) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,222) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,223) @ref{displayHNE};
../singular_texi/./d2t_singular/hnoether_lib.tex(,224) @ref{extdevelop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,225) @ref{parametrisation}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,227) @c end inserted refs from d2t_singular/hnoether_lib.doc:179
../singular_texi/./d2t_singular/hnoether_lib.tex(,228) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,229) @c ---end content hnexpansion---
../singular_texi/./d2t_singular/hnoether_lib.tex(,230) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,231) @c ------------------- sethnering -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,232) @node sethnering, develop, hnexpansion, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,233) @subsubsection sethnering
../singular_texi/./d2t_singular/hnoether_lib.tex(,234) @cindex sethnering
../singular_texi/./d2t_singular/hnoether_lib.tex(,235) @c ---content sethnering---
../singular_texi/./d2t_singular/hnoether_lib.tex(,236) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,237) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,238) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,239) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,240) sethnering(L[,s]); L list, s string (optional)
../singular_texi/./d2t_singular/hnoether_lib.tex(,241) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,242) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,243) L is a list containing a ring (e.g. the output of @code{hnexpansion}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,244) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,245) @item @strong{Create:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,246) The procedure creates a ring with name given by the optional parameter
../singular_texi/./d2t_singular/hnoether_lib.tex(,247) s resp. with name hnering, if no optional parameter is given, and
../singular_texi/./d2t_singular/hnoether_lib.tex(,248) changes your ring to this ring. The new ring will be the ring given
../singular_texi/./d2t_singular/hnoether_lib.tex(,249) as the first entry in the list L.
../singular_texi/./d2t_singular/hnoether_lib.tex(,250) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,251) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,252) nothing.
../singular_texi/./d2t_singular/hnoether_lib.tex(,253) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,254) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,255) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,256) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,257) @c computed example sethnering d2t_singular/hnoether_lib.doc:211 
../singular_texi/./d2t_singular/hnoether_lib.tex(,258) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,259) // -------- prepare for example ---------
../singular_texi/./d2t_singular/hnoether_lib.tex(,260) if (defined(hnering))
../singular_texi/./d2t_singular/hnoether_lib.tex(,261) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,262) def rette@@ring=hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,263) if (nameof(basering)=="hnering")
../singular_texi/./d2t_singular/hnoether_lib.tex(,264) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,265) int wechsel=1;
../singular_texi/./d2t_singular/hnoether_lib.tex(,266) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,267) else
../singular_texi/./d2t_singular/hnoether_lib.tex(,268) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,269) int wechsel;
../singular_texi/./d2t_singular/hnoether_lib.tex(,270) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,271) kill hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,272) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,273) // ------ the example starts here -------
../singular_texi/./d2t_singular/hnoether_lib.tex(,274) ring r=0,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,275) nameof(basering);
../singular_texi/./d2t_singular/hnoether_lib.tex(,276) @expansion{} r
../singular_texi/./d2t_singular/hnoether_lib.tex(,277) sethnering(hnexpansion(x4-y6)); // Creates hnering and changes to it!
../singular_texi/./d2t_singular/hnoether_lib.tex(,278) nameof(basering);
../singular_texi/./d2t_singular/hnoether_lib.tex(,279) @expansion{} hnering
../singular_texi/./d2t_singular/hnoether_lib.tex(,280) // --- restore HNEring if previously defined ---
../singular_texi/./d2t_singular/hnoether_lib.tex(,281) kill hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,282) if (defined(rette@@ring)) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,283) def hnering=rette@@ring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,284) export hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,285) if (wechsel==1)
../singular_texi/./d2t_singular/hnoether_lib.tex(,286) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,287) setring hnering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,288) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,289) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,290) @c end example sethnering d2t_singular/hnoether_lib.doc:211
../singular_texi/./d2t_singular/hnoether_lib.tex(,291) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,292) @c inserted refs from d2t_singular/hnoether_lib.doc:244
../singular_texi/./d2t_singular/hnoether_lib.tex(,300) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,301) @ref{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,303) @c end inserted refs from d2t_singular/hnoether_lib.doc:244
../singular_texi/./d2t_singular/hnoether_lib.tex(,304) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,305) @c ---end content sethnering---
../singular_texi/./d2t_singular/hnoether_lib.tex(,306) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,307) @c ------------------- develop -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,308) @node develop, extdevelop, sethnering, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,309) @subsubsection develop
../singular_texi/./d2t_singular/hnoether_lib.tex(,310) @cindex develop
../singular_texi/./d2t_singular/hnoether_lib.tex(,311) @c ---content develop---
../singular_texi/./d2t_singular/hnoether_lib.tex(,312) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,313) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,314) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,315) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,316) develop(f [,n]); f poly, n int
../singular_texi/./d2t_singular/hnoether_lib.tex(,317) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,318) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,319) f is a bivariate polynomial (in the first 2 ring variables) and
../singular_texi/./d2t_singular/hnoether_lib.tex(,320) irreducible as power series (for reducible f use @code{hnexpansion}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,321) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,322) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,323) list @code{L} with:
../singular_texi/./d2t_singular/hnoether_lib.tex(,324) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,325) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,326) @item @code{L[1]}; matrix:
../singular_texi/./d2t_singular/hnoether_lib.tex(,327)          Each row contains the coefficients of the corresponding line of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,328)          Hamburger-Noether expansion (HNE). The end of the line is marked in
../singular_texi/./d2t_singular/hnoether_lib.tex(,329)          the matrix by the first ring variable (usually x).
../singular_texi/./d2t_singular/hnoether_lib.tex(,330) @item @code{L[2]}; intvec:
../singular_texi/./d2t_singular/hnoether_lib.tex(,331)          indicating the length of lines of the HNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,332) @item @code{L[3]}; int:
../singular_texi/./d2t_singular/hnoether_lib.tex(,333)          0  if the 1st ring variable was transversal (with respect to f), @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,334)          1  if the variables were changed at the beginning of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,335)             computation, @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,336)         -1  if an error has occurred.
../singular_texi/./d2t_singular/hnoether_lib.tex(,337) @item @code{L[4]}; poly:
../singular_texi/./d2t_singular/hnoether_lib.tex(,338)          the transformed polynomial of f to make it possible to extend the
../singular_texi/./d2t_singular/hnoether_lib.tex(,339)          Hamburger-Noether development a posteriori without having to do
../singular_texi/./d2t_singular/hnoether_lib.tex(,340)          all the previous calculation once again (0 if not needed)
../singular_texi/./d2t_singular/hnoether_lib.tex(,341) @item @code{L[5]}; int:
../singular_texi/./d2t_singular/hnoether_lib.tex(,342)          1  if the curve has exactly one branch (i.e., is irreducible), @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,343)          0  else (i.e., the curve has more than one HNE, or f is not valid).
../singular_texi/./d2t_singular/hnoether_lib.tex(,344) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,345) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,346) @item @strong{Display:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,347) The (non zero) elements of the HNE (if not called by another proc).
../singular_texi/./d2t_singular/hnoether_lib.tex(,348) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,349) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,350) The optional parameter @code{n} affects only the computation of
../singular_texi/./d2t_singular/hnoether_lib.tex(,351) the LAST line of the HNE. If it is given, the HN-matrix @code{L[1]}
../singular_texi/./d2t_singular/hnoether_lib.tex(,352) will have at least @code{n} columns. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,353) Otherwise, the number of columns will be chosen minimal such that the
../singular_texi/./d2t_singular/hnoether_lib.tex(,354) matrix contains all necessary information (i.e., all lines of the HNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,355) but the last (which is in general infinite) have place). @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,356) If @code{n} is negative, the algorithm is stopped as soon as the
../singular_texi/./d2t_singular/hnoether_lib.tex(,357) computed information is sufficient for @code{invariants(L)}, but the
../singular_texi/./d2t_singular/hnoether_lib.tex(,358) HN-matrix @code{L[1]} may still contain undetermined elements, which
../singular_texi/./d2t_singular/hnoether_lib.tex(,359) are marked with the 2nd variable (of the basering). @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,360) For time critical computations it is recommended to use
../singular_texi/./d2t_singular/hnoether_lib.tex(,361) @code{ring ...,(x,y),ls} as basering - it increases the algorithm's
../singular_texi/./d2t_singular/hnoether_lib.tex(,362) speed. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,363) If @code{printlevel>=0} comments are displayed (default is
../singular_texi/./d2t_singular/hnoether_lib.tex(,364) @code{printlevel=0}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,365) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,366) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,367) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,368) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,369) @c computed example develop d2t_singular/hnoether_lib.doc:312 
../singular_texi/./d2t_singular/hnoether_lib.tex(,370) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,371) ring exring = 7,(x,y),ds;
../singular_texi/./d2t_singular/hnoether_lib.tex(,372) list hne=develop(4x98+2x49y7+x11y14+2y14);
../singular_texi/./d2t_singular/hnoether_lib.tex(,373) print(hne[1]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,374) @expansion{} 0,0, 0,0,0,0,3,x,
../singular_texi/./d2t_singular/hnoether_lib.tex(,375) @expansion{} 0,x, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,376) @expansion{} 0,0, 0,x,0,0,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,377) @expansion{} 0,x, 0,0,0,0,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,378) @expansion{} 0,-1,0,0,0,0,0,0 
../singular_texi/./d2t_singular/hnoether_lib.tex(,379) // therefore the HNE is:
../singular_texi/./d2t_singular/hnoether_lib.tex(,380) // z(-1)= 3*z(0)^7 + z(0)^7*z(1),
../singular_texi/./d2t_singular/hnoether_lib.tex(,381) // z(0) = z(1)*z(2),       (there is 1 zero in the 2nd row before x)
../singular_texi/./d2t_singular/hnoether_lib.tex(,382) // z(1) = z(2)^3*z(3),     (there are 3 zeroes in the 3rd row)
../singular_texi/./d2t_singular/hnoether_lib.tex(,383) // z(2) = z(3)*z(4),
../singular_texi/./d2t_singular/hnoether_lib.tex(,384) // z(3) = -z(4)^2 + 0*z(4)^3 +...+ 0*z(4)^8 + ?*z(4)^9 + ...
../singular_texi/./d2t_singular/hnoether_lib.tex(,385) // (the missing x in the last line indicates that it is not complete.)
../singular_texi/./d2t_singular/hnoether_lib.tex(,386) hne[2];
../singular_texi/./d2t_singular/hnoether_lib.tex(,387) @expansion{} 7,1,3,1,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,388) parametrisation(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,389) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,390) @expansion{}    _[1]=-x14
../singular_texi/./d2t_singular/hnoether_lib.tex(,391) @expansion{}    _[2]=-3x98-x109
../singular_texi/./d2t_singular/hnoether_lib.tex(,392) // parametrization:   x(t)= -t^14+O(t^21),  y(t)= -3t^98+O(t^105)
../singular_texi/./d2t_singular/hnoether_lib.tex(,393) // (the term -t^109 in y may have a wrong coefficient)
../singular_texi/./d2t_singular/hnoether_lib.tex(,394) displayHNE(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,395) @expansion{} HNE[1]=-y+3*z(0)^7+z(0)^7*z(1)
../singular_texi/./d2t_singular/hnoether_lib.tex(,396) @expansion{} HNE[2]=-x+z(1)*z(2)
../singular_texi/./d2t_singular/hnoether_lib.tex(,397) @expansion{} HNE[3]=z(2)^3*z(3)
../singular_texi/./d2t_singular/hnoether_lib.tex(,398) @expansion{} HNE[4]=z(3)*z(4)
../singular_texi/./d2t_singular/hnoether_lib.tex(,399) @expansion{} HNE[5]=-z(4)^2
../singular_texi/./d2t_singular/hnoether_lib.tex(,400) @c end example develop d2t_singular/hnoether_lib.doc:312
../singular_texi/./d2t_singular/hnoether_lib.tex(,401) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,402) @c inserted refs from d2t_singular/hnoether_lib.doc:331
../singular_texi/./d2t_singular/hnoether_lib.tex(,412) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,413) @ref{displayHNE};
../singular_texi/./d2t_singular/hnoether_lib.tex(,414) @ref{extdevelop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,415) @ref{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,417) @c end inserted refs from d2t_singular/hnoether_lib.doc:331
../singular_texi/./d2t_singular/hnoether_lib.tex(,418) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,419) @c ---end content develop---
../singular_texi/./d2t_singular/hnoether_lib.tex(,420) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,421) @c ------------------- extdevelop -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,422) @node extdevelop, parametrisation, develop, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,423) @subsubsection extdevelop
../singular_texi/./d2t_singular/hnoether_lib.tex(,424) @cindex extdevelop
../singular_texi/./d2t_singular/hnoether_lib.tex(,425) @c ---content extdevelop---
../singular_texi/./d2t_singular/hnoether_lib.tex(,426) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,427) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,428) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,429) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,430) extdevelop(L,N); list L, int N
../singular_texi/./d2t_singular/hnoether_lib.tex(,431) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,432) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,433) L is the output of @code{develop(f)}, or of @code{extdevelop(l,n)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,434) or one entry in the list @code{hne} in the ring created by
../singular_texi/./d2t_singular/hnoether_lib.tex(,435) @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,436) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,437) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,438) an extension of the Hamburger-Noether development of f as a list
../singular_texi/./d2t_singular/hnoether_lib.tex(,439) in the same format as L has (up to the last entry in the output
../singular_texi/./d2t_singular/hnoether_lib.tex(,440) of @code{develop(f)}).@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,441) Type @code{help develop;}, resp. @code{help hnexpansion;} for more
../singular_texi/./d2t_singular/hnoether_lib.tex(,442) details.
../singular_texi/./d2t_singular/hnoether_lib.tex(,443) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,444) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,445) The new HN-matrix will have at least N columns (if the HNE is not
../singular_texi/./d2t_singular/hnoether_lib.tex(,446) finite). In particular, if f is irreducible then (in most cases)
../singular_texi/./d2t_singular/hnoether_lib.tex(,447) @code{extdevelop(develop(f),N)} will produce the same result as
../singular_texi/./d2t_singular/hnoether_lib.tex(,448) @code{develop(f,N)}.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,449) If the matrix M of L has n columns then, compared with
../singular_texi/./d2t_singular/hnoether_lib.tex(,450) @code{parametrisation(L)}, @code{paramametrize(extdevelop(L,N))} will increase the
../singular_texi/./d2t_singular/hnoether_lib.tex(,451) exactness by at least (N-n) more significant monomials.
../singular_texi/./d2t_singular/hnoether_lib.tex(,452) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,453) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,454) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,455) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,456) @c computed example extdevelop d2t_singular/hnoether_lib.doc:372 
../singular_texi/./d2t_singular/hnoether_lib.tex(,457) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,458) if (defined(HNEring))
../singular_texi/./d2t_singular/hnoether_lib.tex(,459) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,460) def save_r_i_n_g=HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,461) kill HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,462) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,463) // ------ the example starts here -------
../singular_texi/./d2t_singular/hnoether_lib.tex(,464) ring exring=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,465) list hn=hnexpansion(x14-3y2x11-y3x10-y2x9+3y4x8+y5x7+3y4x6+x5*(-y6+y5)
../singular_texi/./d2t_singular/hnoether_lib.tex(,466) -3y6x3-y7x2+y8);
../singular_texi/./d2t_singular/hnoether_lib.tex(,467) def HNEring=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,468) setring HNEring;  
../singular_texi/./d2t_singular/hnoether_lib.tex(,469) export(HNEring);  
../singular_texi/./d2t_singular/hnoether_lib.tex(,470) @expansion{} // ** `HNEring` is already global
../singular_texi/./d2t_singular/hnoether_lib.tex(,471) print(hne[1][1]);    // HNE of 1st branch is finite
../singular_texi/./d2t_singular/hnoether_lib.tex(,472) @expansion{} 0,x,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,473) @expansion{} 0,1,x 
../singular_texi/./d2t_singular/hnoether_lib.tex(,474) print(extdevelop(hne[1],5)[1]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,475) @expansion{}  No extension is possible
../singular_texi/./d2t_singular/hnoether_lib.tex(,476) @expansion{} 0,x,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,477) @expansion{} 0,1,x 
../singular_texi/./d2t_singular/hnoether_lib.tex(,478) print(hne[2][1]);    // HNE of 2nd branch can be extended
../singular_texi/./d2t_singular/hnoether_lib.tex(,479) @expansion{} 0,x,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,480) @expansion{} 0,1,x,
../singular_texi/./d2t_singular/hnoether_lib.tex(,481) @expansion{} 0,1,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,482) list ehne=extdevelop(hne[2],5);
../singular_texi/./d2t_singular/hnoether_lib.tex(,483) print(ehne[1]);      // new HN-matrix has 5 columns
../singular_texi/./d2t_singular/hnoether_lib.tex(,484) @expansion{} 0,x,0, 0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,485) @expansion{} 0,1,x, 0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,486) @expansion{} 0,1,-1,1,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,487) parametrisation(hne[2]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,488) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,489) @expansion{}    _[1]=x4-x5-x6+x7
../singular_texi/./d2t_singular/hnoether_lib.tex(,490) @expansion{}    _[2]=x6-2x7+2x9-x10
../singular_texi/./d2t_singular/hnoether_lib.tex(,491) parametrisation(ehne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,492) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,493) @expansion{}    _[1]=x4-x5+x6-x7-x8+x9-x10+x11
../singular_texi/./d2t_singular/hnoether_lib.tex(,494) @expansion{}    _[2]=x6-2x7+3x8-4x9+2x10-2x12+4x13-3x14+2x15-x16
../singular_texi/./d2t_singular/hnoether_lib.tex(,495) if (defined(save_r_i_n_g))
../singular_texi/./d2t_singular/hnoether_lib.tex(,496) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,497) kill HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,498) def HNEring=save_r_i_n_g;
../singular_texi/./d2t_singular/hnoether_lib.tex(,499) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,500) @c end example extdevelop d2t_singular/hnoether_lib.doc:372
../singular_texi/./d2t_singular/hnoether_lib.tex(,501) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,502) @c inserted refs from d2t_singular/hnoether_lib.doc:400
../singular_texi/./d2t_singular/hnoether_lib.tex(,512) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,513) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,514) @ref{hnexpansion};
../singular_texi/./d2t_singular/hnoether_lib.tex(,515) @ref{parametrisation}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,517) @c end inserted refs from d2t_singular/hnoether_lib.doc:400
../singular_texi/./d2t_singular/hnoether_lib.tex(,518) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,519) @c ---end content extdevelop---
../singular_texi/./d2t_singular/hnoether_lib.tex(,520) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,521) @c ------------------- parametrisation -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,522) @node parametrisation, displayHNE, extdevelop, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,523) @subsubsection parametrisation
../singular_texi/./d2t_singular/hnoether_lib.tex(,524) @cindex parametrisation
../singular_texi/./d2t_singular/hnoether_lib.tex(,525) @c ---content parametrisation---
../singular_texi/./d2t_singular/hnoether_lib.tex(,526) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,527) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,528) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,529) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,530) parametrisation(INPUT [,x]); INPUT list or poly, x int (optional)
../singular_texi/./d2t_singular/hnoether_lib.tex(,531) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,532) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,533) INPUT is either a bivariate polynomial f defining a plane curve
../singular_texi/./d2t_singular/hnoether_lib.tex(,534) singularity, or it is the output of @code{hnexpansion(f[,"ess"])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,535) or of @code{develop(f)}, or of @code{extdevelop(develop(f),n)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,536) or the list @@@{hne@} in the ring created by @code{hnexpansion(f)}
../singular_texi/./d2t_singular/hnoether_lib.tex(,537) respectively one entry thereof.
../singular_texi/./d2t_singular/hnoether_lib.tex(,538) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,539) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,540) a list L containing a parametrization L[i] for each branch f[i] of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,541) in the following format: @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,542) - if only the list INPUT is given, L[i] is an ideal of two polynomials
../singular_texi/./d2t_singular/hnoether_lib.tex(,543) p[1],p[2]: if the HNE of was finite then f[i](p[1],p[2])=0; if not,
../singular_texi/./d2t_singular/hnoether_lib.tex(,544) the "real" parametrization will be two power series and p[1],p[2] are
../singular_texi/./d2t_singular/hnoether_lib.tex(,545) truncations of these series.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,546) - if the optional parameter x is given, L[i] is itself a list:
../singular_texi/./d2t_singular/hnoether_lib.tex(,547) L[i][1] is the parametrization ideal as above and L[i][2] is an intvec
../singular_texi/./d2t_singular/hnoether_lib.tex(,548) with two entries indicating the highest degree up to which the
../singular_texi/./d2t_singular/hnoether_lib.tex(,549) coefficients of the monomials in L[i][1] are exact (entry -1 means that
../singular_texi/./d2t_singular/hnoether_lib.tex(,550) the corresponding parametrization is exact).
../singular_texi/./d2t_singular/hnoether_lib.tex(,551) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,552) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,553) If the basering has only 2 variables, the first variable is chosen
../singular_texi/./d2t_singular/hnoether_lib.tex(,554) as indefinite. Otherwise, the 3rd variable is chosen. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,555) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,556) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,557) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,558) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,559) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,560) @cindex parametrization
../singular_texi/./d2t_singular/hnoether_lib.tex(,561) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,562) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,563) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,564) @c computed example parametrisation d2t_singular/hnoether_lib.doc:449 
../singular_texi/./d2t_singular/hnoether_lib.tex(,565) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,566) ring exring=0,(x,y,t),ds;
../singular_texi/./d2t_singular/hnoether_lib.tex(,567) // 1st Example: input is a polynomial
../singular_texi/./d2t_singular/hnoether_lib.tex(,568) poly g=(x2-y3)*(x3-y5);
../singular_texi/./d2t_singular/hnoether_lib.tex(,569) parametrisation(g);
../singular_texi/./d2t_singular/hnoether_lib.tex(,570) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,571) @expansion{}    _[1]=t3
../singular_texi/./d2t_singular/hnoether_lib.tex(,572) @expansion{}    _[2]=t2
../singular_texi/./d2t_singular/hnoether_lib.tex(,573) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,574) @expansion{}    _[1]=t5
../singular_texi/./d2t_singular/hnoether_lib.tex(,575) @expansion{}    _[2]=t3
../singular_texi/./d2t_singular/hnoether_lib.tex(,576) // 2nd Example: input is the ring of a Hamburger-Noether expansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,577) poly h=x2-y2-y3;
../singular_texi/./d2t_singular/hnoether_lib.tex(,578) list hn=hnexpansion(h);
../singular_texi/./d2t_singular/hnoether_lib.tex(,579) parametrisation(h,1);
../singular_texi/./d2t_singular/hnoether_lib.tex(,580) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,581) @expansion{}    [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,582) @expansion{}       _[1]=t
../singular_texi/./d2t_singular/hnoether_lib.tex(,583) @expansion{}       _[2]=t-1/2t2
../singular_texi/./d2t_singular/hnoether_lib.tex(,584) @expansion{}    [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,585) @expansion{}       -1,2
../singular_texi/./d2t_singular/hnoether_lib.tex(,586) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,587) @expansion{}    [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,588) @expansion{}       _[1]=t
../singular_texi/./d2t_singular/hnoether_lib.tex(,589) @expansion{}       _[2]=-t-1/2t2
../singular_texi/./d2t_singular/hnoether_lib.tex(,590) @expansion{}    [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,591) @expansion{}       -1,2
../singular_texi/./d2t_singular/hnoether_lib.tex(,592) // 3rd Example: input is a Hamburger-Noether expansion
../singular_texi/./d2t_singular/hnoether_lib.tex(,593) poly f=x3+2xy2+y2;
../singular_texi/./d2t_singular/hnoether_lib.tex(,594) list hne=develop(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,595) list hne_extended=extdevelop(hne,10);
../singular_texi/./d2t_singular/hnoether_lib.tex(,596) //   compare the matrices ...
../singular_texi/./d2t_singular/hnoether_lib.tex(,597) print(hne[1]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,598) @expansion{} 0,x,
../singular_texi/./d2t_singular/hnoether_lib.tex(,599) @expansion{} 0,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,600) print(hne_extended[1]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,601) @expansion{} 0,x, 0,0,0,0, 0,0,0,0, 
../singular_texi/./d2t_singular/hnoether_lib.tex(,602) @expansion{} 0,-1,0,2,0,-4,0,8,0,-16
../singular_texi/./d2t_singular/hnoether_lib.tex(,603) // ... and the resulting parametrizations:
../singular_texi/./d2t_singular/hnoether_lib.tex(,604) parametrisation(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,605) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,606) @expansion{}    _[1]=-t2
../singular_texi/./d2t_singular/hnoether_lib.tex(,607) @expansion{}    _[2]=-t3
../singular_texi/./d2t_singular/hnoether_lib.tex(,608) parametrisation(hne_extended);
../singular_texi/./d2t_singular/hnoether_lib.tex(,609) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,610) @expansion{}    _[1]=-t2+2t4-4t6+8t8-16t10
../singular_texi/./d2t_singular/hnoether_lib.tex(,611) @expansion{}    _[2]=-t3+2t5-4t7+8t9-16t11
../singular_texi/./d2t_singular/hnoether_lib.tex(,612) parametrisation(hne_extended,0);
../singular_texi/./d2t_singular/hnoether_lib.tex(,613) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,614) @expansion{}    [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,615) @expansion{}       _[1]=-t2+2t4-4t6+8t8-16t10
../singular_texi/./d2t_singular/hnoether_lib.tex(,616) @expansion{}       _[2]=-t3+2t5-4t7+8t9-16t11
../singular_texi/./d2t_singular/hnoether_lib.tex(,617) @expansion{}    [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,618) @expansion{}       10,11
../singular_texi/./d2t_singular/hnoether_lib.tex(,619) @c end example parametrisation d2t_singular/hnoether_lib.doc:449
../singular_texi/./d2t_singular/hnoether_lib.tex(,620) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,621) @c inserted refs from d2t_singular/hnoether_lib.doc:472
../singular_texi/./d2t_singular/hnoether_lib.tex(,630) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,631) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,632) @ref{extdevelop}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,634) @c end inserted refs from d2t_singular/hnoether_lib.doc:472
../singular_texi/./d2t_singular/hnoether_lib.tex(,635) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,636) @c ---end content parametrisation---
../singular_texi/./d2t_singular/hnoether_lib.tex(,637) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,638) @c ------------------- displayHNE -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,639) @node displayHNE, invariants, parametrisation, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,640) @subsubsection displayHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,641) @cindex displayHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,642) @c ---content displayHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,643) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,644) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,645) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,646) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,647) displayHNE(L[,n]); L list, n int
../singular_texi/./d2t_singular/hnoether_lib.tex(,648) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,649) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,650) L is the output of @code{develop(f)}, or of @code{exdevelop(f,n)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,651) or of @code{hnexpansion(f[,"ess"])}, or (one entry in) the list
../singular_texi/./d2t_singular/hnoether_lib.tex(,652) @code{hne} in the ring created by @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,653) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,654) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,655) - if only one argument is given, no return value, but
../singular_texi/./d2t_singular/hnoether_lib.tex(,656) display an ideal HNE of the following form:
../singular_texi/./d2t_singular/hnoether_lib.tex(,657) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,658)      HNE[1]=-y+[]*z(0)^1+[]*z(0)^2+...+z(0)^<>*z(1)
../singular_texi/./d2t_singular/hnoether_lib.tex(,659)      HNE[2]=-x+          []*z(1)^2+...+z(1)^<>*z(2)
../singular_texi/./d2t_singular/hnoether_lib.tex(,660)      HNE[3]=             []*z(2)^2+...+z(2)^<>*z(3)
../singular_texi/./d2t_singular/hnoether_lib.tex(,661)      .......             ..........................
../singular_texi/./d2t_singular/hnoether_lib.tex(,662)      HNE[r+1]=           []*z(r)^2+[]*z(r)^3+......
../singular_texi/./d2t_singular/hnoether_lib.tex(,663) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,664) where @code{x},@code{y} are the first 2 variables of the basering.
../singular_texi/./d2t_singular/hnoether_lib.tex(,665) The values of @code{[]} are the coefficients of the Hamburger-Noether
../singular_texi/./d2t_singular/hnoether_lib.tex(,666) matrix, the values of @code{<>} are represented by @code{x} in the
../singular_texi/./d2t_singular/hnoether_lib.tex(,667) HN-matrix.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,668) - if a second argument is given, create and export a new ring with
../singular_texi/./d2t_singular/hnoether_lib.tex(,669) name @code{displayring} containing an ideal @code{HNE} as described
../singular_texi/./d2t_singular/hnoether_lib.tex(,670) above.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,671) - if L corresponds to the output of @code{hnexpansion(f[,"ess"])}
../singular_texi/./d2t_singular/hnoether_lib.tex(,672) or to the list @code{hne} in the ring created by @code{hnexpansion(f[,"ess"])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,673) @code{displayHNE(L[,n])} shows the HNE's of all branches of f in the form
../singular_texi/./d2t_singular/hnoether_lib.tex(,674) described above. The optional parameter is then ignored.
../singular_texi/./d2t_singular/hnoether_lib.tex(,675) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,676) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,677) The 1st line of the above ideal (i.e., @code{HNE[1]}) means that
../singular_texi/./d2t_singular/hnoether_lib.tex(,678) @code{y=[]*z(0)^1+...}, the 2nd line (@code{HNE[2]}) means that
../singular_texi/./d2t_singular/hnoether_lib.tex(,679) @code{x=[]*z(1)^2+...}, so you can see which indeterminate
../singular_texi/./d2t_singular/hnoether_lib.tex(,680) corresponds to which line (it's also possible that @code{x} corresponds
../singular_texi/./d2t_singular/hnoether_lib.tex(,681) to the 1st line and @code{y} to the 2nd).
../singular_texi/./d2t_singular/hnoether_lib.tex(,682) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,683) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,684) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,685) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,686) @c computed example displayHNE d2t_singular/hnoether_lib.doc:526 
../singular_texi/./d2t_singular/hnoether_lib.tex(,687) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,688) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,689) poly f=x3+2xy2+y2;
../singular_texi/./d2t_singular/hnoether_lib.tex(,690) list hn=develop(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,691) displayHNE(hn);
../singular_texi/./d2t_singular/hnoether_lib.tex(,692) @expansion{} HNE[1]=-y+z(0)*z(1)
../singular_texi/./d2t_singular/hnoether_lib.tex(,693) @expansion{} HNE[2]=-x-z(1)^2
../singular_texi/./d2t_singular/hnoether_lib.tex(,694) @c end example displayHNE d2t_singular/hnoether_lib.doc:526
../singular_texi/./d2t_singular/hnoether_lib.tex(,695) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,696) @c inserted refs from d2t_singular/hnoether_lib.doc:534
../singular_texi/./d2t_singular/hnoether_lib.tex(,705) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,706) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,707) @ref{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,709) @c end inserted refs from d2t_singular/hnoether_lib.doc:534
../singular_texi/./d2t_singular/hnoether_lib.tex(,710) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,711) @c ---end content displayHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,712) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,713) @c ------------------- invariants -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,714) @node invariants, displayInvariants, displayHNE, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,715) @subsubsection invariants
../singular_texi/./d2t_singular/hnoether_lib.tex(,716) @cindex invariants
../singular_texi/./d2t_singular/hnoether_lib.tex(,717) @c ---content invariants---
../singular_texi/./d2t_singular/hnoether_lib.tex(,718) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,719) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,720) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,721) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,722) invariants(INPUT); INPUT list or poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,723) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,724) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,725) INPUT is the output of @code{develop(f)}, or of
../singular_texi/./d2t_singular/hnoether_lib.tex(,726) @code{extdevelop(develop(f),n)}, or one entry in the list @code{hne}
../singular_texi/./d2t_singular/hnoether_lib.tex(,727) of the HNEring created by @code{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,728) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,729) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,730) list, if INPUT contains a valid HNE:
../singular_texi/./d2t_singular/hnoether_lib.tex(,731) @format
../singular_texi/./d2t_singular/hnoether_lib.tex(,732)     invariants(INPUT)[1]:  intvec    (characteristic exponents)
../singular_texi/./d2t_singular/hnoether_lib.tex(,733)     invariants(INPUT)[2]:  intvec    (generators of the semigroup)
../singular_texi/./d2t_singular/hnoether_lib.tex(,734)     invariants(INPUT)[3]:  intvec    (Puiseux pairs, 1st components)
../singular_texi/./d2t_singular/hnoether_lib.tex(,735)     invariants(INPUT)[4]:  intvec    (Puiseux pairs, 2nd components)
../singular_texi/./d2t_singular/hnoether_lib.tex(,736)     invariants(INPUT)[5]:  int       (degree of the conductor)
../singular_texi/./d2t_singular/hnoether_lib.tex(,737)     invariants(INPUT)[6]:  intvec    (sequence of multiplicities)
../singular_texi/./d2t_singular/hnoether_lib.tex(,738) @end format
../singular_texi/./d2t_singular/hnoether_lib.tex(,739) an empty list, if INPUT contains no valid HNE.
../singular_texi/./d2t_singular/hnoether_lib.tex(,740) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,741) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,742) INPUT is bivariate polynomial f or the output of @code{hnexpansion(f[,"ess"])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,743) or the list @code{hne} in the HNEring created by @code{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,744) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,745) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,746) list INV, such that INV[i] is the output of @code{invariants(develop(f[i]))}
../singular_texi/./d2t_singular/hnoether_lib.tex(,747) as above, where f[i] is the ith branch of the curve f, and the last
../singular_texi/./d2t_singular/hnoether_lib.tex(,748) entry contains further invariants of f in the format:
../singular_texi/./d2t_singular/hnoether_lib.tex(,749) @format
../singular_texi/./d2t_singular/hnoether_lib.tex(,750)     INV[i][1]    : intvec    (characteristic exponents)
../singular_texi/./d2t_singular/hnoether_lib.tex(,751)     INV[i][2]    : intvec    (generators of the semigroup)
../singular_texi/./d2t_singular/hnoether_lib.tex(,752)     INV[i][3]    : intvec    (Puiseux pairs, 1st components)
../singular_texi/./d2t_singular/hnoether_lib.tex(,753)     INV[i][4]    : intvec    (Puiseux pairs, 2nd components)
../singular_texi/./d2t_singular/hnoether_lib.tex(,754)     INV[i][5]    : int       (degree of the conductor)
../singular_texi/./d2t_singular/hnoether_lib.tex(,755)     INV[i][6]    : intvec    (sequence of multiplicities)
../singular_texi/./d2t_singular/hnoether_lib.tex(,756)     INV[last][1] : intmat    (contact matrix of the branches)
../singular_texi/./d2t_singular/hnoether_lib.tex(,757)     INV[last][2] : intmat    (intersection multiplicities of the branches)
../singular_texi/./d2t_singular/hnoether_lib.tex(,758)     INV[last][3] : int       (delta invariant of f)
../singular_texi/./d2t_singular/hnoether_lib.tex(,759) @end format
../singular_texi/./d2t_singular/hnoether_lib.tex(,760) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,761) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,762) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,763) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,764) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,765) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,766) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,767) @cindex characteristic exponents
../singular_texi/./d2t_singular/hnoether_lib.tex(,768) @cindex semigroup of values
../singular_texi/./d2t_singular/hnoether_lib.tex(,769) @cindex Puiseux pairs
../singular_texi/./d2t_singular/hnoether_lib.tex(,770) @cindex conductor, degree
../singular_texi/./d2t_singular/hnoether_lib.tex(,771) @cindex multiplicities, sequence of
../singular_texi/./d2t_singular/hnoether_lib.tex(,772) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,773) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,774) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,775) @c computed example invariants d2t_singular/hnoether_lib.doc:602 
../singular_texi/./d2t_singular/hnoether_lib.tex(,776) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,777) ring exring=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,778) list hne=develop(y4+2x3y2+x6+x5y);
../singular_texi/./d2t_singular/hnoether_lib.tex(,779) list INV=invariants(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,780) INV[1];                   // the characteristic exponents
../singular_texi/./d2t_singular/hnoether_lib.tex(,781) @expansion{} 4,6,7
../singular_texi/./d2t_singular/hnoether_lib.tex(,782) INV[2];                   // the generators of the semigroup of values
../singular_texi/./d2t_singular/hnoether_lib.tex(,783) @expansion{} 4,6,13
../singular_texi/./d2t_singular/hnoether_lib.tex(,784) INV[3],INV[4];            // the Puiseux pairs in packed form
../singular_texi/./d2t_singular/hnoether_lib.tex(,785) @expansion{} 3,7 2,2
../singular_texi/./d2t_singular/hnoether_lib.tex(,786) INV[5] / 2;               // the delta-invariant
../singular_texi/./d2t_singular/hnoether_lib.tex(,787) @expansion{} 8
../singular_texi/./d2t_singular/hnoether_lib.tex(,788) INV[6];                   // the sequence of multiplicities
../singular_texi/./d2t_singular/hnoether_lib.tex(,789) @expansion{} 4,2,2,1,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,790) // To display the invariants more 'nicely':
../singular_texi/./d2t_singular/hnoether_lib.tex(,791) displayInvariants(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,792) @expansion{}  characteristic exponents  : 4,6,7
../singular_texi/./d2t_singular/hnoether_lib.tex(,793) @expansion{}  generators of semigroup   : 4,6,13
../singular_texi/./d2t_singular/hnoether_lib.tex(,794) @expansion{}  Puiseux pairs             : (3,2)(7,2)
../singular_texi/./d2t_singular/hnoether_lib.tex(,795) @expansion{}  degree of the conductor   : 16
../singular_texi/./d2t_singular/hnoether_lib.tex(,796) @expansion{}  delta invariant           : 8
../singular_texi/./d2t_singular/hnoether_lib.tex(,797) @expansion{}  sequence of multiplicities: 4,2,2,1,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,798) /////////////////////////////
../singular_texi/./d2t_singular/hnoether_lib.tex(,799) INV=invariants((x2-y3)*(x3-y5));
../singular_texi/./d2t_singular/hnoether_lib.tex(,800) INV[1][1];                // the characteristic exponents of the first branch
../singular_texi/./d2t_singular/hnoether_lib.tex(,801) @expansion{} 2,3
../singular_texi/./d2t_singular/hnoether_lib.tex(,802) INV[2][6];                // the sequence of multiplicities of the second branch
../singular_texi/./d2t_singular/hnoether_lib.tex(,803) @expansion{} 3,2,1,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,804) print(INV[size(INV)][1]);         // the contact matrix of the branches
../singular_texi/./d2t_singular/hnoether_lib.tex(,805) @expansion{}      0     3
../singular_texi/./d2t_singular/hnoether_lib.tex(,806) @expansion{}      3     0
../singular_texi/./d2t_singular/hnoether_lib.tex(,807) print(INV[size(INV)][2]);         // the intersection numbers of the branches
../singular_texi/./d2t_singular/hnoether_lib.tex(,808) @expansion{}      0     9
../singular_texi/./d2t_singular/hnoether_lib.tex(,809) @expansion{}      9     0
../singular_texi/./d2t_singular/hnoether_lib.tex(,810) INV[size(INV)][3];                // the delta invariant of the curve
../singular_texi/./d2t_singular/hnoether_lib.tex(,811) @expansion{} 14
../singular_texi/./d2t_singular/hnoether_lib.tex(,812) @c end example invariants d2t_singular/hnoether_lib.doc:602
../singular_texi/./d2t_singular/hnoether_lib.tex(,813) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,814) @c inserted refs from d2t_singular/hnoether_lib.doc:623
../singular_texi/./d2t_singular/hnoether_lib.tex(,825) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,826) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,827) @ref{displayInvariants};
../singular_texi/./d2t_singular/hnoether_lib.tex(,828) @ref{intersection};
../singular_texi/./d2t_singular/hnoether_lib.tex(,829) @ref{multsequence}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,831) @c end inserted refs from d2t_singular/hnoether_lib.doc:623
../singular_texi/./d2t_singular/hnoether_lib.tex(,832) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,833) @c ---end content invariants---
../singular_texi/./d2t_singular/hnoether_lib.tex(,834) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,835) @c ------------------- displayInvariants -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,836) @node displayInvariants, multsequence, invariants, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,837) @subsubsection displayInvariants
../singular_texi/./d2t_singular/hnoether_lib.tex(,838) @cindex displayInvariants
../singular_texi/./d2t_singular/hnoether_lib.tex(,839) @c ---content displayInvariants---
../singular_texi/./d2t_singular/hnoether_lib.tex(,840) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,841) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,842) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,843) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,844) displayInvariants(INPUT); INPUT list or poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,845) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,846) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,847) INPUT is a bivariate polynomial, or the output of @code{develop(f)}, or of
../singular_texi/./d2t_singular/hnoether_lib.tex(,848) @code{extdevelop(develop(f),n)}, or (one entry of) the list @code{hne}
../singular_texi/./d2t_singular/hnoether_lib.tex(,849) in the ring created by @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,850) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,851) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,852) none
../singular_texi/./d2t_singular/hnoether_lib.tex(,853) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,854) @item @strong{Display:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,855) invariants of the corresponding branch, resp. of all branches,
../singular_texi/./d2t_singular/hnoether_lib.tex(,856) in a better readable form.
../singular_texi/./d2t_singular/hnoether_lib.tex(,857) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,858) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,859) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,860) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,861) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,862) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,863) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,864) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,865) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,866) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,867) @c computed example displayInvariants d2t_singular/hnoether_lib.doc:661 
../singular_texi/./d2t_singular/hnoether_lib.tex(,868) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,869) ring exring=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,870) list hne=develop(y4+2x3y2+x6+x5y);
../singular_texi/./d2t_singular/hnoether_lib.tex(,871) displayInvariants(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,872) @expansion{}  characteristic exponents  : 4,6,7
../singular_texi/./d2t_singular/hnoether_lib.tex(,873) @expansion{}  generators of semigroup   : 4,6,13
../singular_texi/./d2t_singular/hnoether_lib.tex(,874) @expansion{}  Puiseux pairs             : (3,2)(7,2)
../singular_texi/./d2t_singular/hnoether_lib.tex(,875) @expansion{}  degree of the conductor   : 16
../singular_texi/./d2t_singular/hnoether_lib.tex(,876) @expansion{}  delta invariant           : 8
../singular_texi/./d2t_singular/hnoether_lib.tex(,877) @expansion{}  sequence of multiplicities: 4,2,2,1,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,878) @c end example displayInvariants d2t_singular/hnoether_lib.doc:661
../singular_texi/./d2t_singular/hnoether_lib.tex(,879) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,880) @c inserted refs from d2t_singular/hnoether_lib.doc:668
../singular_texi/./d2t_singular/hnoether_lib.tex(,891) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,892) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,893) @ref{hnexpansion};
../singular_texi/./d2t_singular/hnoether_lib.tex(,894) @ref{intersection};
../singular_texi/./d2t_singular/hnoether_lib.tex(,895) @ref{invariants}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,897) @c end inserted refs from d2t_singular/hnoether_lib.doc:668
../singular_texi/./d2t_singular/hnoether_lib.tex(,898) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,899) @c ---end content displayInvariants---
../singular_texi/./d2t_singular/hnoether_lib.tex(,900) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,901) @c ------------------- multsequence -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,902) @node multsequence, displayMultsequence, displayInvariants, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,903) @subsubsection multsequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,904) @cindex multsequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,905) @c ---content multsequence---
../singular_texi/./d2t_singular/hnoether_lib.tex(,906) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,907) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,908) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,909) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,910) multsequence(INPUT); INPUT list or poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,911) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,912) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,913) INPUT is the output of @code{develop(f)}, or of @code{extdevelop(develop(f),n)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,914) or one entry in the list @code{hne} of the ring created by @code{hnexpansion(f)}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,915) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,916) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,917) intvec corresponding to the multiplicity sequence of (a branch)
../singular_texi/./d2t_singular/hnoether_lib.tex(,918) of the curve (the same as @code{invariants(INPUT)[6]}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,919) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,920) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,921) INPUT is a bivariate polynomial, or the output of @code{hnexpansion(f)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,922) or the list @code{hne} in the ring created by @code{hnexpansion(f)}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,923) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,924) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,925) list of two integer matrices:
../singular_texi/./d2t_singular/hnoether_lib.tex(,926) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,927) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,928) @item  @code{multsequence(INPUT)[1][i,*]}
../singular_texi/./d2t_singular/hnoether_lib.tex(,929)    contains the multiplicities of the branches at their infinitely near point
../singular_texi/./d2t_singular/hnoether_lib.tex(,930)    of 0 in its (i-1) order neighbourhood (i.e., i=1: multiplicity of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,931)    branches themselves, i=2: multiplicity of their 1st quadratic transformed,
../singular_texi/./d2t_singular/hnoether_lib.tex(,932)    etc., @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,933)    Hence, @code{multsequence(INPUT)[1][*,j]} is the multiplicity sequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,934)    of branch j.
../singular_texi/./d2t_singular/hnoether_lib.tex(,935) @item  @code{multsequence(INPUT)[2][i,*]}:
../singular_texi/./d2t_singular/hnoether_lib.tex(,936)    contains the information which of these infinitely near points coincide.
../singular_texi/./d2t_singular/hnoether_lib.tex(,937) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,938) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,939) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,940) The order of elements of the list @code{hne} obtained from @code{hnexpansion(f[,"ess")}
../singular_texi/./d2t_singular/hnoether_lib.tex(,941) must not be changed (because then the coincident infinitely near points
../singular_texi/./d2t_singular/hnoether_lib.tex(,942) couldn't be grouped together, cf. meaning of 2nd intmat in example).
../singular_texi/./d2t_singular/hnoether_lib.tex(,943) Hence, it is not wise to compute the HNE of several polynomials
../singular_texi/./d2t_singular/hnoether_lib.tex(,944) separately, put them into a list INPUT and call @code{multsequence(INPUT)}. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,945) Use @code{displayMultsequence} to produce a better readable output for
../singular_texi/./d2t_singular/hnoether_lib.tex(,946) reducible curves on the screen. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,947) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,948) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,949) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,950) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,951) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,952) @cindex multiplicity sequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,953) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,954) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,955) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,956) @c computed example multsequence d2t_singular/hnoether_lib.doc:729 
../singular_texi/./d2t_singular/hnoether_lib.tex(,957) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,958) // -------- prepare for example ---------
../singular_texi/./d2t_singular/hnoether_lib.tex(,959) if (nameof(basering)=="HNEring") @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,960) def rettering=HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,961) kill HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,962) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,963) // ------ the example starts here -------
../singular_texi/./d2t_singular/hnoether_lib.tex(,964) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,965) list hn=hnexpansion((x6-y10)*(x+y2-y3)*(x+y2+y3));   // 4 branches
../singular_texi/./d2t_singular/hnoether_lib.tex(,966) def HNEring=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,967) setring HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,968) multsequence(hne[1]),"  |  ",multsequence(hne[2]),"  |  ",
../singular_texi/./d2t_singular/hnoether_lib.tex(,969) multsequence(hne[3]),"  |  ",multsequence(hne[4]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,970) @expansion{} 3,2,1,1   |   3,2,1,1   |   1   |   1
../singular_texi/./d2t_singular/hnoether_lib.tex(,971) multsequence(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,972) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,973) @expansion{}    3,3,1,1,
../singular_texi/./d2t_singular/hnoether_lib.tex(,974) @expansion{}    2,2,1,1,
../singular_texi/./d2t_singular/hnoether_lib.tex(,975) @expansion{}    1,1,1,1,
../singular_texi/./d2t_singular/hnoether_lib.tex(,976) @expansion{}    1,1,1,1,
../singular_texi/./d2t_singular/hnoether_lib.tex(,977) @expansion{}    1,1,1,1 
../singular_texi/./d2t_singular/hnoether_lib.tex(,978) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,979) @expansion{}    4,0,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,980) @expansion{}    4,0,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,981) @expansion{}    2,2,0,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,982) @expansion{}    2,1,1,0,
../singular_texi/./d2t_singular/hnoether_lib.tex(,983) @expansion{}    1,1,1,1 
../singular_texi/./d2t_singular/hnoether_lib.tex(,984) // The meaning of the entries of the 2nd matrix is as follows:
../singular_texi/./d2t_singular/hnoether_lib.tex(,985) displayMultsequence(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,986) @expansion{} [(3,3,1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,987) @expansion{} [(2,2,1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,988) @expansion{} [(1,1),(1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,989) @expansion{} [(1,1),(1),(1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,990) @expansion{} [(1),(1),(1),(1)]
../singular_texi/./d2t_singular/hnoether_lib.tex(,991) // --- restore HNEring if previously defined ---
../singular_texi/./d2t_singular/hnoether_lib.tex(,992) kill HNEring,r;
../singular_texi/./d2t_singular/hnoether_lib.tex(,993) if (defined(rettering)) @{
../singular_texi/./d2t_singular/hnoether_lib.tex(,994) setring rettering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,995) def HNEring=rettering;
../singular_texi/./d2t_singular/hnoether_lib.tex(,996) export HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,997) @}
../singular_texi/./d2t_singular/hnoether_lib.tex(,998) @c end example multsequence d2t_singular/hnoether_lib.doc:729
../singular_texi/./d2t_singular/hnoether_lib.tex(,999) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1000) @c inserted refs from d2t_singular/hnoether_lib.doc:755
../singular_texi/./d2t_singular/hnoether_lib.tex(,1011) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1012) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1013) @ref{displayMultsequence};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1014) @ref{hnexpansion};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1015) @ref{separateHNE}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1017) @c end inserted refs from d2t_singular/hnoether_lib.doc:755
../singular_texi/./d2t_singular/hnoether_lib.tex(,1018) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1019) @c ---end content multsequence---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1020) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1021) @c ------------------- displayMultsequence -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1022) @node displayMultsequence, intersection, multsequence, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1023) @subsubsection displayMultsequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,1024) @cindex displayMultsequence
../singular_texi/./d2t_singular/hnoether_lib.tex(,1025) @c ---content displayMultsequence---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1026) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1027) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1028) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1029) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1030) displayMultsequence(INPUT); INPUT list or poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1031) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1032) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1033) INPUT is a bivariate polynomial, or the output of @code{develop(f)},
../singular_texi/./d2t_singular/hnoether_lib.tex(,1034) or of @code{extdevelop(develop(f),n)}, or of of @code{hnexpansion(f[,"ess"])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,1035) or (one entry in) the list @code{hne} of the ring created by @code{hnexpansion(f[,"ess "])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1036) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1037) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1038) nothing
../singular_texi/./d2t_singular/hnoether_lib.tex(,1039) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1040) @item @strong{Display:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1041) the sequence of multiplicities:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1042) @format
../singular_texi/./d2t_singular/hnoether_lib.tex(,1043)  - if @code{INPUT=develop(f)} or @code{INPUT=extdevelop(develop(f),n)} or @code{INPUT=hne[i]}:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1044)                       @code{a , b , c , ....... , 1}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1045)  - if @code{INPUT=f} or @code{INPUT=hnexpansion(f[,"ess"])} or @code{INPUT=hne}:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1046)                       @code{[(a_1, .... , b_1 , .... , c_1)],}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1047)                       @code{[(a_2, ... ), ... , (... , c_2)],}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1048)                       @code{ ........................................ ,}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1049)                       @code{[(a_n),(b_n), ....., (c_n)]}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1050)      with:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1051)        @code{a_1 , ... , a_n} the sequence of multiplicities of the 1st branch,
../singular_texi/./d2t_singular/hnoether_lib.tex(,1052)        @code{[...]} the multiplicities of the j-th transformed of all branches,
../singular_texi/./d2t_singular/hnoether_lib.tex(,1053)        @code{(...)} indicating branches meeting in an infinitely near point.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1054) @end format
../singular_texi/./d2t_singular/hnoether_lib.tex(,1055) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1056) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1057) The same restrictions for INPUT as in @code{multsequence} apply.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1058) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,1059) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,1060) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1061) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1062) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1063) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1064) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1065) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1066) @c computed example displayMultsequence d2t_singular/hnoether_lib.doc:806 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1067) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1068) // ------ the example starts here -------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1069) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1070) //// Example 1: Input = output of develop
../singular_texi/./d2t_singular/hnoether_lib.tex(,1071) displayMultsequence(develop(x3-y5));
../singular_texi/./d2t_singular/hnoether_lib.tex(,1072) @expansion{} The sequence of multiplicities is   3,2,1,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1073) //// Example 2: Input = bivariate polynomial
../singular_texi/./d2t_singular/hnoether_lib.tex(,1074) displayMultsequence((x6-y10)*(x+y2-y3)*(x+y2+y3));
../singular_texi/./d2t_singular/hnoether_lib.tex(,1075) @expansion{} [(3,3,1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,1076) @expansion{} [(2,2,1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,1077) @expansion{} [(1,1),(1,1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,1078) @expansion{} [(1,1),(1),(1)],
../singular_texi/./d2t_singular/hnoether_lib.tex(,1079) @expansion{} [(1),(1),(1),(1)]
../singular_texi/./d2t_singular/hnoether_lib.tex(,1080) @c end example displayMultsequence d2t_singular/hnoether_lib.doc:806
../singular_texi/./d2t_singular/hnoether_lib.tex(,1081) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1082) @c inserted refs from d2t_singular/hnoether_lib.doc:816
../singular_texi/./d2t_singular/hnoether_lib.tex(,1093) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1094) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1095) @ref{hnexpansion};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1096) @ref{multsequence};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1097) @ref{separateHNE}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1099) @c end inserted refs from d2t_singular/hnoether_lib.doc:816
../singular_texi/./d2t_singular/hnoether_lib.tex(,1100) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1101) @c ---end content displayMultsequence---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1102) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1103) @c ------------------- intersection -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1104) @node intersection, stripHNE, displayMultsequence, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1105) @subsubsection intersection
../singular_texi/./d2t_singular/hnoether_lib.tex(,1106) @cindex intersection
../singular_texi/./d2t_singular/hnoether_lib.tex(,1107) @c ---content intersection---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1108) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1109) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1110) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1111) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1112) intersection(hne1,hne2); hne1, hne2 lists
../singular_texi/./d2t_singular/hnoether_lib.tex(,1113) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1114) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1115) hne1, hne2 represent a HNE (i.e., are the output of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1116) @code{develop(f)}, or of @code{extdevelop(develop(f),n)}, or
../singular_texi/./d2t_singular/hnoether_lib.tex(,1117) one entry of the list @code{hne} in the ring created by
../singular_texi/./d2t_singular/hnoether_lib.tex(,1118) @code{hnexpansion(f[,"ess"])}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1119) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1120) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1121) int, the intersection multiplicity of the branches corresponding to
../singular_texi/./d2t_singular/hnoether_lib.tex(,1122) hne1 and hne2.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1123) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1124) @cindex intersection multiplicity
../singular_texi/./d2t_singular/hnoether_lib.tex(,1125) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1126) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1127) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1128) @c computed example intersection d2t_singular/hnoether_lib.doc:847 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1129) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1130) // ------ the example starts here -------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1131) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1132) list hn=hnexpansion((x2-y3)*(x2+y3));
../singular_texi/./d2t_singular/hnoether_lib.tex(,1133) def HNEring=hn[1];
../singular_texi/./d2t_singular/hnoether_lib.tex(,1134) setring HNEring;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1135) intersection(hne[1],hne[2]);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1136) @expansion{} 6
../singular_texi/./d2t_singular/hnoether_lib.tex(,1137) @c end example intersection d2t_singular/hnoether_lib.doc:847
../singular_texi/./d2t_singular/hnoether_lib.tex(,1138) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1139) @c inserted refs from d2t_singular/hnoether_lib.doc:857
../singular_texi/./d2t_singular/hnoether_lib.tex(,1148) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1149) @ref{displayInvariants};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1150) @ref{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1152) @c end inserted refs from d2t_singular/hnoether_lib.doc:857
../singular_texi/./d2t_singular/hnoether_lib.tex(,1153) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1154) @c ---end content intersection---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1155) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1156) @c ------------------- stripHNE -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1157) @node stripHNE, is_irred, intersection, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1158) @subsubsection stripHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,1159) @cindex stripHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,1160) @c ---content stripHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1161) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1162) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1163) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1164) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1165) stripHNE(L); L list
../singular_texi/./d2t_singular/hnoether_lib.tex(,1166) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1167) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1168) L is the output of @code{develop(f)}, or of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1169) @code{extdevelop(develop(f),n)}, or (one entry of) the list
../singular_texi/./d2t_singular/hnoether_lib.tex(,1170) @code{hne} in the ring created by @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1171) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1172) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1173) list in the same format as L, but all polynomials L[4], resp.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1174) L[i][4], are set to zero.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1175) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1176) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1177) The purpose of this procedure is to remove huge amounts of data
../singular_texi/./d2t_singular/hnoether_lib.tex(,1178) no longer needed. It is useful, if one or more of the polynomials
../singular_texi/./d2t_singular/hnoether_lib.tex(,1179) in L consume much memory. It is still possible to compute invariants,
../singular_texi/./d2t_singular/hnoether_lib.tex(,1180) parametrizations etc. with the stripped HNE(s), but it is not possible
../singular_texi/./d2t_singular/hnoether_lib.tex(,1181) to use @code{extdevelop} with them.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1182) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1183) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1184) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1185) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1186) @c computed example stripHNE d2t_singular/hnoether_lib.doc:893 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1187) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1188) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1189) list hne=develop(x2+y3+y4);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1190) hne;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1191) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1192) @expansion{}    _[1,1]=0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1193) @expansion{}    _[1,2]=x
../singular_texi/./d2t_singular/hnoether_lib.tex(,1194) @expansion{}    _[2,1]=0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1195) @expansion{}    _[2,2]=-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1196) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1197) @expansion{}    1,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1198) @expansion{} [3]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1199) @expansion{}    1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1200) @expansion{} [4]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1201) @expansion{}    x4-2x2y+y2+y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1202) @expansion{} [5]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1203) @expansion{}    1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1204) stripHNE(hne);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1205) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1206) @expansion{}    _[1,1]=0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1207) @expansion{}    _[1,2]=x
../singular_texi/./d2t_singular/hnoether_lib.tex(,1208) @expansion{}    _[2,1]=0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1209) @expansion{}    _[2,2]=-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1210) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1211) @expansion{}    1,-1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1212) @expansion{} [3]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1213) @expansion{}    1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1214) @expansion{} [4]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1215) @expansion{}    0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1216) @expansion{} [5]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1217) @expansion{}    1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1218) @c end example stripHNE d2t_singular/hnoether_lib.doc:893
../singular_texi/./d2t_singular/hnoether_lib.tex(,1219) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1220) @c inserted refs from d2t_singular/hnoether_lib.doc:901
../singular_texi/./d2t_singular/hnoether_lib.tex(,1230) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1231) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1232) @ref{extdevelop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1233) @ref{hnexpansion}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1235) @c end inserted refs from d2t_singular/hnoether_lib.doc:901
../singular_texi/./d2t_singular/hnoether_lib.tex(,1236) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1237) @c ---end content stripHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1238) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1239) @c ------------------- is_irred -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1240) @node is_irred, delta, stripHNE, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1241) @subsubsection is_irred
../singular_texi/./d2t_singular/hnoether_lib.tex(,1242) @cindex is_irred
../singular_texi/./d2t_singular/hnoether_lib.tex(,1243) @c ---content is_irred---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1244) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1245) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1246) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1247) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1248) is_irred(f); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1249) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1250) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1251) f is a squarefree bivariate polynomial (in the first 2 ring
../singular_texi/./d2t_singular/hnoether_lib.tex(,1252) variables).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1253) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1254) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1255) int (0 or 1): @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1256) - @code{is_irred(f)=1} if f is irreducible as a formal power
../singular_texi/./d2t_singular/hnoether_lib.tex(,1257) series over the algebraic closure of its coefficient field (f
../singular_texi/./d2t_singular/hnoether_lib.tex(,1258) defines an analytically irreducible curve at zero), @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1259) - @code{is_irred(f)=0} otherwise.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1260) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1261) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1262) 0 and units in the ring of formal power series are considered to be
../singular_texi/./d2t_singular/hnoether_lib.tex(,1263) not irreducible.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1264) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1265) @cindex irreducible power series
../singular_texi/./d2t_singular/hnoether_lib.tex(,1266) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1267) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1268) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1269) @c computed example is_irred d2t_singular/hnoether_lib.doc:937 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1270) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1271) ring exring=0,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1272) is_irred(x2+y3);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1273) @expansion{} 1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1274) is_irred(x2+y2);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1275) @expansion{} 0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1276) is_irred(x2+y3+1);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1277) @expansion{} 0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1278) @c end example is_irred d2t_singular/hnoether_lib.doc:937
../singular_texi/./d2t_singular/hnoether_lib.tex(,1279) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1280) @c ---end content is_irred---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1281) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1282) @c ------------------- delta -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1283) @node delta, newtonpoly, is_irred, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1284) @subsubsection delta
../singular_texi/./d2t_singular/hnoether_lib.tex(,1285) @cindex delta
../singular_texi/./d2t_singular/hnoether_lib.tex(,1286) @c ---content delta---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1287) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1288) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1289) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1290) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1291) delta(INPUT); INPUT a polynomial defining an isolated plane curve
../singular_texi/./d2t_singular/hnoether_lib.tex(,1292) singularity at 0, or the Hamburger-Noether expansion thereof, i.e.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1293) the output of @code{develop(f)}, or the output of @code{hnexpansion(f[,"ess"])},
../singular_texi/./d2t_singular/hnoether_lib.tex(,1294) or (one of the entries of) the list @code{hne} in the ring created
../singular_texi/./d2t_singular/hnoether_lib.tex(,1295) by @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1296) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1297) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1298) the delta invariant of the singularity at 0, the vector space
../singular_texi/./d2t_singular/hnoether_lib.tex(,1299) dimension of R~/R, where R~ is the normalization of the
../singular_texi/./d2t_singular/hnoether_lib.tex(,1300) singularity R=basering/f
../singular_texi/./d2t_singular/hnoether_lib.tex(,1301) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1302) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1303) In case the Hamburger-Noether expansion of the curve f is needed
../singular_texi/./d2t_singular/hnoether_lib.tex(,1304) for other purposes as well it is better to calculate this first
../singular_texi/./d2t_singular/hnoether_lib.tex(,1305) with the aid of @code{hnexpansion} and use it as input instead of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1306) the polynomial itself.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1307) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1308) @cindex delta invariant
../singular_texi/./d2t_singular/hnoether_lib.tex(,1309) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1310) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1311) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1312) @c computed example delta d2t_singular/hnoether_lib.doc:977 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1313) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1314) ring r = 32003,(x,y),ds;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1315) poly f = x25+x24-4x23-1x22y+4x22+8x21y-2x21-12x20y-4x19y2+4x20+10x19y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1316) +12x18y2-24x18y-20x17y2-4x16y3+x18+60x16y2+20x15y3-9x16y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1317) -80x14y3-10x13y4+36x14y2+60x12y4+2x11y5-84x12y3-24x10y5
../singular_texi/./d2t_singular/hnoether_lib.tex(,1318) +126x10y4+4x8y6-126x8y5+84x6y6-36x4y7+9x2y8-1y9;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1319) delta(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1320) @expansion{} 96
../singular_texi/./d2t_singular/hnoether_lib.tex(,1321) @c end example delta d2t_singular/hnoether_lib.doc:977
../singular_texi/./d2t_singular/hnoether_lib.tex(,1322) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1323) @c inserted refs from d2t_singular/hnoether_lib.doc:987
../singular_texi/./d2t_singular/hnoether_lib.tex(,1332) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1333) @ref{deltaLoc};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1334) @ref{invariants}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1336) @c end inserted refs from d2t_singular/hnoether_lib.doc:987
../singular_texi/./d2t_singular/hnoether_lib.tex(,1337) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1338) @c ---end content delta---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1339) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1340) @c ------------------- newtonpoly -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1341) @node newtonpoly, is_NND, delta, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1342) @subsubsection newtonpoly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1343) @cindex newtonpoly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1344) @c ---content newtonpoly---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1345) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1346) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1347) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1348) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1349) newtonpoly(f); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1350) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1351) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1352) basering has exactly two variables; @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1353) f is convenient, that is, f(x,0) != 0 != f(0,y).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1354) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1355) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1356) list of intvecs (= coordinates x,y of the Newton polygon of f).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1357) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1358) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1359) Procedure uses @code{execute}; this can be avoided by calling
../singular_texi/./d2t_singular/hnoether_lib.tex(,1360) @code{newtonpoly(f,1)} if the ordering of the basering is @code{ls}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1361) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1362) @cindex Newton polygon
../singular_texi/./d2t_singular/hnoether_lib.tex(,1363) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1364) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1365) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1366) @c computed example newtonpoly d2t_singular/hnoether_lib.doc:1019 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1367) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1368) ring r=0,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1369) poly f=x5+2x3y-x2y2+3xy5+y6-y7;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1370) newtonpoly(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1371) @expansion{} [1]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1372) @expansion{}    0,6
../singular_texi/./d2t_singular/hnoether_lib.tex(,1373) @expansion{} [2]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1374) @expansion{}    2,2
../singular_texi/./d2t_singular/hnoether_lib.tex(,1375) @expansion{} [3]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1376) @expansion{}    3,1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1377) @expansion{} [4]:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1378) @expansion{}    5,0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1379) @c end example newtonpoly d2t_singular/hnoether_lib.doc:1019
../singular_texi/./d2t_singular/hnoether_lib.tex(,1380) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1381) @c ---end content newtonpoly---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1382) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1383) @c ------------------- is_NND -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1384) @node is_NND, puiseux2generators, newtonpoly, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1385) @subsubsection is_NND
../singular_texi/./d2t_singular/hnoether_lib.tex(,1386) @cindex is_NND
../singular_texi/./d2t_singular/hnoether_lib.tex(,1387) @c ---content is_NND---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1388) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1389) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1390) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1391) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1392) is_NND(f[,mu,NP]); f poly, mu int, NP list of intvecs
../singular_texi/./d2t_singular/hnoether_lib.tex(,1393) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1394) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1395) f is convenient, that is, f(x,0) != 0 != f(0,y);@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1396) mu (optional) is Milnor number of f.@*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1397) NP (optional) is output of @code{newtonpoly(f)}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1398) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1399) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1400) int: 1 if f in Newton non-degenerate, 0 otherwise.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1401) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1402) @cindex Newton non-degenerate
../singular_texi/./d2t_singular/hnoether_lib.tex(,1403) @cindex Newton polygon
../singular_texi/./d2t_singular/hnoether_lib.tex(,1404) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1405) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1406) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1407) @c computed example is_NND d2t_singular/hnoether_lib.doc:1052 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1408) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1409) ring r=0,(x,y),ls;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1410) poly f=x5+y3;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1411) is_NND(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1412) @expansion{} 1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1413) poly g=(x-y)^5+3xy5+y6-y7;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1414) is_NND(g);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1415) @expansion{} 0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1416) // if already computed, one should give the Minor number and Newton polygon
../singular_texi/./d2t_singular/hnoether_lib.tex(,1417) // as second and third input: 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1418) int mu=milnor(g);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1419) list NP=newtonpoly(g);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1420) is_NND(g,mu,NP);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1421) @expansion{} 0
../singular_texi/./d2t_singular/hnoether_lib.tex(,1422) @c end example is_NND d2t_singular/hnoether_lib.doc:1052
../singular_texi/./d2t_singular/hnoether_lib.tex(,1423) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1424) @c inserted refs from d2t_singular/hnoether_lib.doc:1066
../singular_texi/./d2t_singular/hnoether_lib.tex(,1432) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1433) @ref{newtonpoly}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1435) @c end inserted refs from d2t_singular/hnoether_lib.doc:1066
../singular_texi/./d2t_singular/hnoether_lib.tex(,1436) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1437) @c ---end content is_NND---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1438) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1439) @c ------------------- puiseux2generators -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1440) @node puiseux2generators, separateHNE, is_NND, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1441) @subsubsection puiseux2generators
../singular_texi/./d2t_singular/hnoether_lib.tex(,1442) @cindex puiseux2generators
../singular_texi/./d2t_singular/hnoether_lib.tex(,1443) @c ---content puiseux2generators---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1444) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1445) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1446) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1447) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1448) puiseux2generators(m,n); m,n intvec
../singular_texi/./d2t_singular/hnoether_lib.tex(,1449) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1450) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1451) m, resp. n, represent the 1st, resp. 2nd, components of Puiseux pairs
../singular_texi/./d2t_singular/hnoether_lib.tex(,1452) (e.g., @code{m=invariants(L)[3]}, @code{n=invariants(L)[4]}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1453) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1454) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1455) intvec of the generators of the semigroup of values.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1456) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1457) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1458) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1459) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1460) @c computed example puiseux2generators d2t_singular/hnoether_lib.doc:1093 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1461) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1462) // take (3,2),(7,2),(15,2),(31,2),(63,2),(127,2) as Puiseux pairs:
../singular_texi/./d2t_singular/hnoether_lib.tex(,1463) puiseux2generators(intvec(3,7,15,31,63,127),intvec(2,2,2,2,2,2));
../singular_texi/./d2t_singular/hnoether_lib.tex(,1464) @expansion{} 64,96,208,424,852,1706,3413
../singular_texi/./d2t_singular/hnoether_lib.tex(,1465) @c end example puiseux2generators d2t_singular/hnoether_lib.doc:1093
../singular_texi/./d2t_singular/hnoether_lib.tex(,1466) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1467) @c inserted refs from d2t_singular/hnoether_lib.doc:1099
../singular_texi/./d2t_singular/hnoether_lib.tex(,1475) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1476) @ref{invariants}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1478) @c end inserted refs from d2t_singular/hnoether_lib.doc:1099
../singular_texi/./d2t_singular/hnoether_lib.tex(,1479) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1480) @c ---end content puiseux2generators---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1481) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1482) @c ------------------- separateHNE -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1483) @node separateHNE, squarefree, puiseux2generators, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1484) @subsubsection separateHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,1485) @cindex separateHNE
../singular_texi/./d2t_singular/hnoether_lib.tex(,1486) @c ---content separateHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1487) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1488) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1489) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1490) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1491) separateHNE(hne1,hne2); hne1, hne2 lists
../singular_texi/./d2t_singular/hnoether_lib.tex(,1492) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1493) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1494) hne1, hne2 are HNEs (=output of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1495) @code{develop(f)}, @code{extdevelop(develop(f),n)}, or
../singular_texi/./d2t_singular/hnoether_lib.tex(,1496) one entry in the list @code{hne} in the ring created by
../singular_texi/./d2t_singular/hnoether_lib.tex(,1497) @code{hnexpansion(f[,"ess"])}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1498) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1499) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1500) number of quadratic transformations needed to separate both curves
../singular_texi/./d2t_singular/hnoether_lib.tex(,1501) (branches).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1502) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1503) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1504) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1505) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1506) @c computed example separateHNE d2t_singular/hnoether_lib.doc:1129 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1507) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1508) int p=printlevel; printlevel=-1;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1509) ring r=0,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1510) list hne1=develop(x);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1511) list hne2=develop(x+y);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1512) list hne3=develop(x+y2);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1513) separateHNE(hne1,hne2);  // two transversal lines
../singular_texi/./d2t_singular/hnoether_lib.tex(,1514) @expansion{} 1
../singular_texi/./d2t_singular/hnoether_lib.tex(,1515) separateHNE(hne1,hne3);  // one quadratic transform. gives 1st example
../singular_texi/./d2t_singular/hnoether_lib.tex(,1516) @expansion{} 2
../singular_texi/./d2t_singular/hnoether_lib.tex(,1517) printlevel=p;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1518) @c end example separateHNE d2t_singular/hnoether_lib.doc:1129
../singular_texi/./d2t_singular/hnoether_lib.tex(,1519) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1520) @c inserted refs from d2t_singular/hnoether_lib.doc:1141
../singular_texi/./d2t_singular/hnoether_lib.tex(,1531) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1532) @ref{develop};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1533) @ref{displayMultsequence};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1534) @ref{hnexpansion};
../singular_texi/./d2t_singular/hnoether_lib.tex(,1535) @ref{multsequence}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1537) @c end inserted refs from d2t_singular/hnoether_lib.doc:1141
../singular_texi/./d2t_singular/hnoether_lib.tex(,1538) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1539) @c ---end content separateHNE---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1540) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1541) @c ------------------- squarefree -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1542) @node squarefree, allsquarefree, separateHNE, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1543) @subsubsection squarefree
../singular_texi/./d2t_singular/hnoether_lib.tex(,1544) @cindex squarefree
../singular_texi/./d2t_singular/hnoether_lib.tex(,1545) @c ---content squarefree---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1546) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1547) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1548) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1549) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1550) squarefree(f); f poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1551) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1552) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1553) f is a bivariate polynomial (in the first 2 ring variables).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1554) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1555) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1556) poly, a squarefree divisor of f.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1557) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1558) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1559) Usually, the return value is the greatest squarefree divisor, but
../singular_texi/./d2t_singular/hnoether_lib.tex(,1560) there is one exception: factors with a p-th root, p the
../singular_texi/./d2t_singular/hnoether_lib.tex(,1561) characteristic of the basering, are lost.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1562) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1563) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1564) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1565) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1566) @c computed example squarefree d2t_singular/hnoether_lib.doc:1172 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1567) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1568) ring exring=3,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1569) squarefree((x3+y)^2);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1570) @expansion{} x3+y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1571) squarefree((x+y)^3*(x-y)^2); // Warning: (x+y)^3 is lost
../singular_texi/./d2t_singular/hnoether_lib.tex(,1572) @expansion{} x-y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1573) squarefree((x+y)^4*(x-y)^2); // result is (x+y)*(x-y)
../singular_texi/./d2t_singular/hnoether_lib.tex(,1574) @expansion{} x2-y2
../singular_texi/./d2t_singular/hnoether_lib.tex(,1575) @c end example squarefree d2t_singular/hnoether_lib.doc:1172
../singular_texi/./d2t_singular/hnoether_lib.tex(,1576) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1577) @c inserted refs from d2t_singular/hnoether_lib.doc:1180
../singular_texi/./d2t_singular/hnoether_lib.tex(,1585) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1586) @ref{allsquarefree}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1588) @c end inserted refs from d2t_singular/hnoether_lib.doc:1180
../singular_texi/./d2t_singular/hnoether_lib.tex(,1589) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1590) @c ---end content squarefree---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1591) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1592) @c ------------------- allsquarefree -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1593) @node allsquarefree, further_hn_proc, squarefree, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1594) @subsubsection allsquarefree
../singular_texi/./d2t_singular/hnoether_lib.tex(,1595) @cindex allsquarefree
../singular_texi/./d2t_singular/hnoether_lib.tex(,1596) @c ---content allsquarefree---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1597) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1598) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1599) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1600) @item @strong{Usage :}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1601) allsquarefree(f,g); f,g poly
../singular_texi/./d2t_singular/hnoether_lib.tex(,1602) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1603) @item @strong{Assume:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1604) g is the output of @code{squarefree(f)}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1605) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1606) @item @strong{Return:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1607) the greatest squarefree divisor of f.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1608) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1609) @item @strong{Note  :}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1610) This proc uses factorize to get the missing factors of f not in g and,
../singular_texi/./d2t_singular/hnoether_lib.tex(,1611) therefore, may be slow.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1612) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1613) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1614) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1615) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1616) @c computed example allsquarefree d2t_singular/hnoether_lib.doc:1210 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1617) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1618) ring exring=7,(x,y),dp;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1619) poly f=(x+y)^7*(x-y)^8;
../singular_texi/./d2t_singular/hnoether_lib.tex(,1620) poly g=squarefree(f);
../singular_texi/./d2t_singular/hnoether_lib.tex(,1621) g;                      // factor x+y lost, since characteristic=7
../singular_texi/./d2t_singular/hnoether_lib.tex(,1622) @expansion{} x-y
../singular_texi/./d2t_singular/hnoether_lib.tex(,1623) allsquarefree(f,g);     // all factors (x+y)*(x-y) found
../singular_texi/./d2t_singular/hnoether_lib.tex(,1624) @expansion{} x2-y2
../singular_texi/./d2t_singular/hnoether_lib.tex(,1625) @c end example allsquarefree d2t_singular/hnoether_lib.doc:1210
../singular_texi/./d2t_singular/hnoether_lib.tex(,1626) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1627) @c inserted refs from d2t_singular/hnoether_lib.doc:1219
../singular_texi/./d2t_singular/hnoether_lib.tex(,1635) @strong{See also:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1636) @ref{squarefree}.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1638) @c end inserted refs from d2t_singular/hnoether_lib.doc:1219
../singular_texi/./d2t_singular/hnoether_lib.tex(,1639) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1640) @c ---end content allsquarefree---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1641) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1642) @c ------------------- further_hn_proc -------------
../singular_texi/./d2t_singular/hnoether_lib.tex(,1643) @node further_hn_proc,, allsquarefree, hnoether_lib
../singular_texi/./d2t_singular/hnoether_lib.tex(,1644) @subsubsection further_hn_proc
../singular_texi/./d2t_singular/hnoether_lib.tex(,1645) @cindex further_hn_proc
../singular_texi/./d2t_singular/hnoether_lib.tex(,1646) @c ---content further_hn_proc---
../singular_texi/./d2t_singular/hnoether_lib.tex(,1647) Procedure from library @code{hnoether.lib} (@pxref{hnoether_lib}).
../singular_texi/./d2t_singular/hnoether_lib.tex(,1648) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1649) @table @asis
../singular_texi/./d2t_singular/hnoether_lib.tex(,1650) @item @strong{Usage:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1651) further_hn_proc();
../singular_texi/./d2t_singular/hnoether_lib.tex(,1652) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1653) @item @strong{Note:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1654) The library @code{hnoether.lib} contains some more procedures which
../singular_texi/./d2t_singular/hnoether_lib.tex(,1655) are not shown when typing @code{help hnoether.lib;}. They may be useful
../singular_texi/./d2t_singular/hnoether_lib.tex(,1656) for interactive use (e.g. if you want to do the calculation of an HN
../singular_texi/./d2t_singular/hnoether_lib.tex(,1657) development "by hand" to see the intermediate results), and they
../singular_texi/./d2t_singular/hnoether_lib.tex(,1658) can be enumerated by calling @code{further_hn_proc()}. @*
../singular_texi/./d2t_singular/hnoether_lib.tex(,1659) Use @code{help <procedure>;} for detailed information about each of
../singular_texi/./d2t_singular/hnoether_lib.tex(,1660) them.
../singular_texi/./d2t_singular/hnoether_lib.tex(,1661) 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1662) @end table
../singular_texi/./d2t_singular/hnoether_lib.tex(,1663) @strong{Example:}
../singular_texi/./d2t_singular/hnoether_lib.tex(,1664) @smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1665) @c computed example further_hn_proc d2t_singular/hnoether_lib.doc:1248 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1666) LIB "hnoether.lib";
../singular_texi/./d2t_singular/hnoether_lib.tex(,1667) further_hn_proc();
../singular_texi/./d2t_singular/hnoether_lib.tex(,1668) @expansion{} 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1669) @expansion{}  The following procedures are also part of `hnoether.lib':
../singular_texi/./d2t_singular/hnoether_lib.tex(,1670) @expansion{} 
../singular_texi/./d2t_singular/hnoether_lib.tex(,1671) @expansion{}  getnm(f);           intersection pts. of Newton polygon with axes
../singular_texi/./d2t_singular/hnoether_lib.tex(,1672) @expansion{}  T_Transform(f,Q,N); returns f(y,xy^Q)/y^NQ (f: poly, Q,N: int)
../singular_texi/./d2t_singular/hnoether_lib.tex(,1673) @expansion{}  T1_Transform(f,d,M); returns f(x,y+d*x^M)  (f: poly,d:number,M:int)
../singular_texi/./d2t_singular/hnoether_lib.tex(,1674) @expansion{}  T2_Transform(f,d,M,N,ref);   a composition of T1 & T
../singular_texi/./d2t_singular/hnoether_lib.tex(,1675) @expansion{}  koeff(f,I,J);       gets coefficient of indicated monomial of poly f
../singular_texi/./d2t_singular/hnoether_lib.tex(,1676) @expansion{}  redleit(f,S,E);     restriction of monomials of f to line (S-E)
../singular_texi/./d2t_singular/hnoether_lib.tex(,1677) @expansion{}  leit(f,n,m);        special case of redleit (for irred. polynomials)
../singular_texi/./d2t_singular/hnoether_lib.tex(,1678) @expansion{}  testreducible(f,n,m); tests whether f is reducible
../singular_texi/./d2t_singular/hnoether_lib.tex(,1679) @expansion{}  charPoly(f,M,N);    characteristic polynomial of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,1680) @expansion{}  find_in_list(L,p);  find int p in list L
../singular_texi/./d2t_singular/hnoether_lib.tex(,1681) @expansion{}  get_last_divisor(M,N); last divisor in Euclid's algorithm
../singular_texi/./d2t_singular/hnoether_lib.tex(,1682) @expansion{}  factorfirst(f,M,N); try to factor f without `factorize'
../singular_texi/./d2t_singular/hnoether_lib.tex(,1683) @expansion{}  factorlist(L);      factorize a list L of polynomials
../singular_texi/./d2t_singular/hnoether_lib.tex(,1684) @expansion{}  referencepoly(D);   a polynomial f s.t. D is the Newton diagram of f
../singular_texi/./d2t_singular/hnoether_lib.tex(,1685) @c end example further_hn_proc d2t_singular/hnoether_lib.doc:1248
../singular_texi/./d2t_singular/hnoether_lib.tex(,1686) @end smallexample
../singular_texi/./d2t_singular/hnoether_lib.tex(,1687) @c ---end content further_hn_proc---
../singular_texi/singular.tex(,475) @c ---------------------------------------------------------
../singular_texi/singular.tex(,476) @node mondromy_lib, qhmoduli_lib, hnoether_lib, Singularities
../singular_texi/singular.tex(,477) @subsection mondromy_lib
../singular_texi/singular.tex(,478) @c include of docu for mondromy.lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/mondromy_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/mondromy_lib.doc
../singular_texi/./d2t_singular/mondromy_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/mondromy_lib.doc INSTEAD
../singular_texi/./d2t_singular/mondromy_lib.tex(,4) @c library version: (1.22.2.2,2002/02/20)
../singular_texi/./d2t_singular/mondromy_lib.tex(,5) @c library file: ../Singular/LIB/mondromy.lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,6) @cindex mondromy.lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,7) @cindex mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,10) mondromy.lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,12)   Monodromy of an Isolated Hypersurface Singularity
../singular_texi/./d2t_singular/mondromy_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,14) Mathias Schulze, email: mschulze@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/mondromy_lib.tex(,15) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,16) @item @strong{Overview:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,17) A library to compute the monodromy of an isolated hypersurface singularity.
../singular_texi/./d2t_singular/mondromy_lib.tex(,18) It uses an algorithm by Brieskorn (manuscripta math. 2 (1970), 103-161) to
../singular_texi/./d2t_singular/mondromy_lib.tex(,19) compute a connection matrix of the meromorphic Gauss-Manin connection up to
../singular_texi/./d2t_singular/mondromy_lib.tex(,20) arbitrarily high order, and an algorithm of Gerard and Levelt (Ann. Inst.
../singular_texi/./d2t_singular/mondromy_lib.tex(,21) Fourier, Grenoble 23,1 (1973), pp. 157-195) to transform it to a simple pole.
../singular_texi/./d2t_singular/mondromy_lib.tex(,22) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,23) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,24) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,25) @strong{Procedures:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,26) @menu
../singular_texi/./d2t_singular/mondromy_lib.tex(,27) * detadj:: determinant and adjoint matrix of square matrix U
../singular_texi/./d2t_singular/mondromy_lib.tex(,28) * invunit:: series inverse of polynomial u up to order n
../singular_texi/./d2t_singular/mondromy_lib.tex(,29) * jacoblift:: lifts f^kappa in jacob(f) with minimal kappa
../singular_texi/./d2t_singular/mondromy_lib.tex(,30) * monodromyB:: monodromy of isolated hypersurface singularity f
../singular_texi/./d2t_singular/mondromy_lib.tex(,31) * H2basis:: basis of Brieskorn lattice H''
../singular_texi/./d2t_singular/mondromy_lib.tex(,32) @end menu
../singular_texi/./d2t_singular/mondromy_lib.tex(,33) @cindex Monodromy
../singular_texi/./d2t_singular/mondromy_lib.tex(,34) @cindex hypersurface singularity
../singular_texi/./d2t_singular/mondromy_lib.tex(,35) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/mondromy_lib.tex(,36) @cindex Brieskorn lattice
../singular_texi/./d2t_singular/mondromy_lib.tex(,37) @c inserted refs from d2t_singular/mondromy_lib.doc:35
../singular_texi/./d2t_singular/mondromy_lib.tex(,45) @strong{See also:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,46) @ref{gaussman_lib}.
../singular_texi/./d2t_singular/mondromy_lib.tex(,48) @c end inserted refs from d2t_singular/mondromy_lib.doc:35
../singular_texi/./d2t_singular/mondromy_lib.tex(,49) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,50) @c ---end content LibInfo---
../singular_texi/./d2t_singular/mondromy_lib.tex(,51) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,52) @c ------------------- detadj -------------
../singular_texi/./d2t_singular/mondromy_lib.tex(,53) @node detadj, invunit,, mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,54) @subsubsection detadj
../singular_texi/./d2t_singular/mondromy_lib.tex(,55) @cindex detadj
../singular_texi/./d2t_singular/mondromy_lib.tex(,56) @c ---content detadj---
../singular_texi/./d2t_singular/mondromy_lib.tex(,57) Procedure from library @code{mondromy.lib} (@pxref{mondromy_lib}).
../singular_texi/./d2t_singular/mondromy_lib.tex(,58) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,59) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,60) @item @strong{Usage:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,61) detadj(U); U matrix
../singular_texi/./d2t_singular/mondromy_lib.tex(,62) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,63) @item @strong{Assume:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,64) U is a square matrix with non zero determinant.
../singular_texi/./d2t_singular/mondromy_lib.tex(,65) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,66) @item @strong{Return:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,67) The procedure returns a list with at most 2 entries.
../singular_texi/./d2t_singular/mondromy_lib.tex(,68) @*If U is not a square matrix, the list is empty.
../singular_texi/./d2t_singular/mondromy_lib.tex(,69) @*If U is a square matrix, then the first entry is the determinant of U.
../singular_texi/./d2t_singular/mondromy_lib.tex(,70) If U is a square matrix and the determinant of U not zero,
../singular_texi/./d2t_singular/mondromy_lib.tex(,71) then the second entry is the adjoint matrix of U.
../singular_texi/./d2t_singular/mondromy_lib.tex(,72) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,73) @item @strong{Display:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,74) The procedure displays comments if printlevel>=1.
../singular_texi/./d2t_singular/mondromy_lib.tex(,75) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,76) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,77) @strong{Example:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,78) @smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,79) @c computed example detadj d2t_singular/mondromy_lib.doc:68 
../singular_texi/./d2t_singular/mondromy_lib.tex(,80) LIB "mondromy.lib";
../singular_texi/./d2t_singular/mondromy_lib.tex(,81) ring R=0,x,dp;
../singular_texi/./d2t_singular/mondromy_lib.tex(,82) matrix U[2][2]=1,1+x,1+x2,1+x3;
../singular_texi/./d2t_singular/mondromy_lib.tex(,83) list daU=detadj(U);
../singular_texi/./d2t_singular/mondromy_lib.tex(,84) daU[1];
../singular_texi/./d2t_singular/mondromy_lib.tex(,85) @expansion{} -x2-x
../singular_texi/./d2t_singular/mondromy_lib.tex(,86) print(daU[2]);
../singular_texi/./d2t_singular/mondromy_lib.tex(,87) @expansion{} x3+1, -x-1,
../singular_texi/./d2t_singular/mondromy_lib.tex(,88) @expansion{} -x2-1,1    
../singular_texi/./d2t_singular/mondromy_lib.tex(,89) @c end example detadj d2t_singular/mondromy_lib.doc:68
../singular_texi/./d2t_singular/mondromy_lib.tex(,90) @end smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,91) @c ---end content detadj---
../singular_texi/./d2t_singular/mondromy_lib.tex(,92) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,93) @c ------------------- invunit -------------
../singular_texi/./d2t_singular/mondromy_lib.tex(,94) @node invunit, jacoblift, detadj, mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,95) @subsubsection invunit
../singular_texi/./d2t_singular/mondromy_lib.tex(,96) @cindex invunit
../singular_texi/./d2t_singular/mondromy_lib.tex(,97) @c ---content invunit---
../singular_texi/./d2t_singular/mondromy_lib.tex(,98) Procedure from library @code{mondromy.lib} (@pxref{mondromy_lib}).
../singular_texi/./d2t_singular/mondromy_lib.tex(,99) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,100) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,101) @item @strong{Usage:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,102) invunit(u,n); u poly, n int
../singular_texi/./d2t_singular/mondromy_lib.tex(,103) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,104) @item @strong{Assume:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,105) The polynomial u is a series unit.
../singular_texi/./d2t_singular/mondromy_lib.tex(,106) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,107) @item @strong{Return:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,108) The procedure returns the series inverse of u up to order n
../singular_texi/./d2t_singular/mondromy_lib.tex(,109) or a zero polynomial if u is no series unit.
../singular_texi/./d2t_singular/mondromy_lib.tex(,110) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,111) @item @strong{Display:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,112) The procedure displays comments if printlevel>=1.
../singular_texi/./d2t_singular/mondromy_lib.tex(,113) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,114) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,115) @strong{Example:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,116) @smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,117) @c computed example invunit d2t_singular/mondromy_lib.doc:103 
../singular_texi/./d2t_singular/mondromy_lib.tex(,118) LIB "mondromy.lib";
../singular_texi/./d2t_singular/mondromy_lib.tex(,119) ring R=0,(x,y),dp;
../singular_texi/./d2t_singular/mondromy_lib.tex(,120) invunit(2+x3+xy4,10);
../singular_texi/./d2t_singular/mondromy_lib.tex(,121) @expansion{} 1/8x2y8-1/16x9+1/4x4y4+1/8x6-1/4xy4-1/4x3+1/2
../singular_texi/./d2t_singular/mondromy_lib.tex(,122) @c end example invunit d2t_singular/mondromy_lib.doc:103
../singular_texi/./d2t_singular/mondromy_lib.tex(,123) @end smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,124) @c ---end content invunit---
../singular_texi/./d2t_singular/mondromy_lib.tex(,125) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,126) @c ------------------- jacoblift -------------
../singular_texi/./d2t_singular/mondromy_lib.tex(,127) @node jacoblift, monodromyB, invunit, mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,128) @subsubsection jacoblift
../singular_texi/./d2t_singular/mondromy_lib.tex(,129) @cindex jacoblift
../singular_texi/./d2t_singular/mondromy_lib.tex(,130) @c ---content jacoblift---
../singular_texi/./d2t_singular/mondromy_lib.tex(,131) Procedure from library @code{mondromy.lib} (@pxref{mondromy_lib}).
../singular_texi/./d2t_singular/mondromy_lib.tex(,132) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,133) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,134) @item @strong{Usage:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,135) jacoblift(f); f poly
../singular_texi/./d2t_singular/mondromy_lib.tex(,136) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,137) @item @strong{Assume:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,138) The polynomial f in a series ring (local ordering) defines
../singular_texi/./d2t_singular/mondromy_lib.tex(,139) an isolated hypersurface singularity.
../singular_texi/./d2t_singular/mondromy_lib.tex(,140) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,141) @item @strong{Return:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,142) The procedure returns a list with entries kappa, xi, u of type
../singular_texi/./d2t_singular/mondromy_lib.tex(,143) int, vector, poly such that kappa is minimal with f^kappa in jacob(f),
../singular_texi/./d2t_singular/mondromy_lib.tex(,144) u is a unit, and u*f^kappa=(matrix(jacob(f))*xi)[1,1].
../singular_texi/./d2t_singular/mondromy_lib.tex(,145) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,146) @item @strong{Display:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,147) The procedure displays comments if printlevel>=1.
../singular_texi/./d2t_singular/mondromy_lib.tex(,148) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,149) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,150) @strong{Example:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,151) @smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,152) @c computed example jacoblift d2t_singular/mondromy_lib.doc:137 
../singular_texi/./d2t_singular/mondromy_lib.tex(,153) LIB "mondromy.lib";
../singular_texi/./d2t_singular/mondromy_lib.tex(,154) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/mondromy_lib.tex(,155) poly f=x2y2+x6+y6;
../singular_texi/./d2t_singular/mondromy_lib.tex(,156) jacoblift(f);
../singular_texi/./d2t_singular/mondromy_lib.tex(,157) @expansion{} [1]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,158) @expansion{}    2
../singular_texi/./d2t_singular/mondromy_lib.tex(,159) @expansion{} [2]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,160) @expansion{}    1/2x2y3*gen(2)+1/6x7*gen(1)+5/6x6y*gen(2)-2/3xy6*gen(1)+1/6y7*gen(2)-4\
../singular_texi/./d2t_singular/mondromy_lib.tex(,161)    x4y5*gen(2)-3/2x9y2*gen(1)-15/2x8y3*gen(2)+9/2x3y8*gen(1)-3/2x2y9*gen(2)
../singular_texi/./d2t_singular/mondromy_lib.tex(,162) @expansion{} [3]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,163) @expansion{}    1-9x2y2
../singular_texi/./d2t_singular/mondromy_lib.tex(,164) @c end example jacoblift d2t_singular/mondromy_lib.doc:137
../singular_texi/./d2t_singular/mondromy_lib.tex(,165) @end smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,166) @c ---end content jacoblift---
../singular_texi/./d2t_singular/mondromy_lib.tex(,167) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,168) @c ------------------- monodromyB -------------
../singular_texi/./d2t_singular/mondromy_lib.tex(,169) @node monodromyB, H2basis, jacoblift, mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,170) @subsubsection monodromyB
../singular_texi/./d2t_singular/mondromy_lib.tex(,171) @cindex monodromyB
../singular_texi/./d2t_singular/mondromy_lib.tex(,172) @c ---content monodromyB---
../singular_texi/./d2t_singular/mondromy_lib.tex(,173) Procedure from library @code{mondromy.lib} (@pxref{mondromy_lib}).
../singular_texi/./d2t_singular/mondromy_lib.tex(,174) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,175) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,176) @item @strong{Usage:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,177) monodromyB(f[,opt]); f poly, opt int
../singular_texi/./d2t_singular/mondromy_lib.tex(,178) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,179) @item @strong{Assume:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,180) The polynomial f in a series ring (local ordering) defines
../singular_texi/./d2t_singular/mondromy_lib.tex(,181) an isolated hypersurface singularity.
../singular_texi/./d2t_singular/mondromy_lib.tex(,182) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,183) @item @strong{Return:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,184) The procedure returns a residue matrix M of the meromorphic
../singular_texi/./d2t_singular/mondromy_lib.tex(,185) Gauss-Manin connection of the singularity defined by f
../singular_texi/./d2t_singular/mondromy_lib.tex(,186) or an empty matrix if the assumptions are not fulfilled.
../singular_texi/./d2t_singular/mondromy_lib.tex(,187) If opt=0 (default), exp(-2*pi*i*M) is a monodromy matrix of f,
../singular_texi/./d2t_singular/mondromy_lib.tex(,188) else, only the characteristic polynomial of exp(-2*pi*i*M) coincides
../singular_texi/./d2t_singular/mondromy_lib.tex(,189) with the characteristic polynomial of the monodromy of f.
../singular_texi/./d2t_singular/mondromy_lib.tex(,190) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,191) @item @strong{Display:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,192) The procedure displays more comments for higher printlevel.
../singular_texi/./d2t_singular/mondromy_lib.tex(,193) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,194) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,195) @strong{Example:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,196) @smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,197) @c computed example monodromyB d2t_singular/mondromy_lib.doc:175 
../singular_texi/./d2t_singular/mondromy_lib.tex(,198) LIB "mondromy.lib";
../singular_texi/./d2t_singular/mondromy_lib.tex(,199) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/mondromy_lib.tex(,200) poly f=x2y2+x6+y6;
../singular_texi/./d2t_singular/mondromy_lib.tex(,201) matrix M=monodromyB(f);
../singular_texi/./d2t_singular/mondromy_lib.tex(,202) print(M);
../singular_texi/./d2t_singular/mondromy_lib.tex(,203) @expansion{} 7/6,0,  0,0,  0,  0,0,   0,-1/2,0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,204) @expansion{} 0,  7/6,0,0,  0,  0,-1/2,0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,205) @expansion{} 0,  0,  1,0,  0,  0,0,   0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,206) @expansion{} 0,  0,  0,4/3,0,  0,0,   0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,207) @expansion{} 0,  0,  0,0,  4/3,0,0,   0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,208) @expansion{} 0,  0,  0,0,  0,  1,0,   0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,209) @expansion{} 0,  0,  0,0,  0,  0,5/6, 0,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,210) @expansion{} 0,  0,  0,0,  0,  0,0,   1,0,   0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,211) @expansion{} 0,  0,  0,0,  0,  0,0,   0,5/6, 0,  0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,212) @expansion{} 0,  0,  0,0,  0,  0,0,   0,0,   2/3,0,  0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,213) @expansion{} 0,  0,  0,0,  0,  0,0,   0,0,   0,  2/3,0,    0,       
../singular_texi/./d2t_singular/mondromy_lib.tex(,214) @expansion{} 0,  0,  0,0,  0,  0,0,   0,0,   0,  0,  47/44,-625/396,
../singular_texi/./d2t_singular/mondromy_lib.tex(,215) @expansion{} 0,  0,  0,0,  0,  0,0,   0,0,   0,  0,  9/44, -3/44    
../singular_texi/./d2t_singular/mondromy_lib.tex(,216) @c end example monodromyB d2t_singular/mondromy_lib.doc:175
../singular_texi/./d2t_singular/mondromy_lib.tex(,217) @end smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,218) @c ---end content monodromyB---
../singular_texi/./d2t_singular/mondromy_lib.tex(,219) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,220) @c ------------------- H2basis -------------
../singular_texi/./d2t_singular/mondromy_lib.tex(,221) @node H2basis,, monodromyB, mondromy_lib
../singular_texi/./d2t_singular/mondromy_lib.tex(,222) @subsubsection H2basis
../singular_texi/./d2t_singular/mondromy_lib.tex(,223) @cindex H2basis
../singular_texi/./d2t_singular/mondromy_lib.tex(,224) @c ---content H2basis---
../singular_texi/./d2t_singular/mondromy_lib.tex(,225) Procedure from library @code{mondromy.lib} (@pxref{mondromy_lib}).
../singular_texi/./d2t_singular/mondromy_lib.tex(,226) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,227) @table @asis
../singular_texi/./d2t_singular/mondromy_lib.tex(,228) @item @strong{Usage:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,229) H2basis(f); f poly
../singular_texi/./d2t_singular/mondromy_lib.tex(,230) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,231) @item @strong{Assume:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,232) The polynomial f in a series ring (local ordering) defines
../singular_texi/./d2t_singular/mondromy_lib.tex(,233) an isolated hypersurface singularity.
../singular_texi/./d2t_singular/mondromy_lib.tex(,234) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,235) @item @strong{Return:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,236) The procedure returns a list of representatives of a C@{f@}-basis of the
../singular_texi/./d2t_singular/mondromy_lib.tex(,237) Brieskorn lattice H''=Omega^(n+1)/df^dOmega^(n-1).
../singular_texi/./d2t_singular/mondromy_lib.tex(,238) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,239) @item @strong{Theory:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,240) H'' is a free C@{f@}-module of rank milnor(f).
../singular_texi/./d2t_singular/mondromy_lib.tex(,241) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,242) @item @strong{Display:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,243) The procedure displays more comments for higher printlevel.
../singular_texi/./d2t_singular/mondromy_lib.tex(,244) 
../singular_texi/./d2t_singular/mondromy_lib.tex(,245) @end table
../singular_texi/./d2t_singular/mondromy_lib.tex(,246) @strong{Example:}
../singular_texi/./d2t_singular/mondromy_lib.tex(,247) @smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,248) @c computed example H2basis d2t_singular/mondromy_lib.doc:213 
../singular_texi/./d2t_singular/mondromy_lib.tex(,249) LIB "mondromy.lib";
../singular_texi/./d2t_singular/mondromy_lib.tex(,250) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/mondromy_lib.tex(,251) poly f=x2y2+x6+y6;
../singular_texi/./d2t_singular/mondromy_lib.tex(,252) H2basis(f);
../singular_texi/./d2t_singular/mondromy_lib.tex(,253) @expansion{} [1]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,254) @expansion{}    x4
../singular_texi/./d2t_singular/mondromy_lib.tex(,255) @expansion{} [2]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,256) @expansion{}    x2y2
../singular_texi/./d2t_singular/mondromy_lib.tex(,257) @expansion{} [3]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,258) @expansion{}    y4
../singular_texi/./d2t_singular/mondromy_lib.tex(,259) @expansion{} [4]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,260) @expansion{}    x3
../singular_texi/./d2t_singular/mondromy_lib.tex(,261) @expansion{} [5]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,262) @expansion{}    x2y
../singular_texi/./d2t_singular/mondromy_lib.tex(,263) @expansion{} [6]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,264) @expansion{}    xy2
../singular_texi/./d2t_singular/mondromy_lib.tex(,265) @expansion{} [7]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,266) @expansion{}    y3
../singular_texi/./d2t_singular/mondromy_lib.tex(,267) @expansion{} [8]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,268) @expansion{}    x2
../singular_texi/./d2t_singular/mondromy_lib.tex(,269) @expansion{} [9]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,270) @expansion{}    xy
../singular_texi/./d2t_singular/mondromy_lib.tex(,271) @expansion{} [10]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,272) @expansion{}    y2
../singular_texi/./d2t_singular/mondromy_lib.tex(,273) @expansion{} [11]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,274) @expansion{}    x
../singular_texi/./d2t_singular/mondromy_lib.tex(,275) @expansion{} [12]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,276) @expansion{}    y
../singular_texi/./d2t_singular/mondromy_lib.tex(,277) @expansion{} [13]:
../singular_texi/./d2t_singular/mondromy_lib.tex(,278) @expansion{}    1
../singular_texi/./d2t_singular/mondromy_lib.tex(,279) @c end example H2basis d2t_singular/mondromy_lib.doc:213
../singular_texi/./d2t_singular/mondromy_lib.tex(,280) @end smallexample
../singular_texi/./d2t_singular/mondromy_lib.tex(,281) @c ---end content H2basis---
../singular_texi/singular.tex(,480) @c ---------------------------------------------------------
../singular_texi/singular.tex(,481) @node qhmoduli_lib, sing_lib, mondromy_lib, Singularities
../singular_texi/singular.tex(,482) @subsection qhmoduli_lib
../singular_texi/singular.tex(,483) @c include of docu for qhmoduli.lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/qhmoduli_lib.doc
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/qhmoduli_lib.doc INSTEAD
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,4) @c library version: (1.0,2000/12/12)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,5) @c library file: ../Singular/LIB/qhmoduli.lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,6) @cindex qhmoduli.lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,7) @cindex qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,10) qhmoduli.lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,12)     Moduli Spaces of Semi-Quasihomogeneous Singularities
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,14) Thomas Bayer, email: bayert@@in.tum.de
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,15) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,16) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,17) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,19) @menu
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,20) * ArnoldAction:: Induced action of G_f on T_.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,21) * ModEqn:: Equations of the moduli space for principal part f
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,22) * QuotientEquations:: Equations of Variety(I)/G w.r.t. action 'A'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,23) * StabEqn:: Equations of the stabilizer of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,24) * StabEqnId:: Equations of the stabilizer of the qhom. ideal I.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,25) * StabOrder:: Order of the stabilizer of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,26) * UpperMonomials:: Upper basis of the Milnor algebra of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,27) * Max:: maximal integer contained in 'data'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,28) * Min:: minimal integer contained in 'data'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,29) * Table:: list, i-th entry is cmd(i), lb <= i <= ub
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,30) @end menu
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,31) @c ---end content LibInfo---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,32) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,33) @c ------------------- ArnoldAction -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,34) @node ArnoldAction, ModEqn,, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,35) @subsubsection ArnoldAction
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,36) @cindex ArnoldAction
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,37) @c ---content ArnoldAction---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,38) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,39) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,40) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,41) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,42) ArnoldAction(f, [Gf, B]); poly f; list Gf, B;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,43) @*'Gf' is a list of two rings (coming from 'StabEqn')
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,44) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,45) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,46) compute the induced action of the stabilizer G of f on T_, where
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,47) T_ is given by the upper monomials B of the Milnor algebra of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,48) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,49) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,50) f is quasihomogeneous
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,51) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,52) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,53) polynomial ring over the same ground field, containing the ideals
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,54) 'actionid' and 'stabid'.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,55) @*- 'actionid' is the ideal defining the induced action of Gf on T_ @*
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,56) - 'stabid' is the ideal of the stabilizer Gf in the new ring
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,57) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,58) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,59) @strong{Example:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,60) @smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,61) @c computed example ArnoldAction d2t_singular/qhmoduli_lib.doc:59 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,62) LIB "qhmoduli.lib";
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,63) ring B   = 0,(x,y,z), ls;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,64) poly f = -z5+y5+x2z+x2y;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,65) def R = ArnoldAction(f);
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,66) setring R;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,67) actionid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,68) @expansion{} actionid[1]=-s(2)*t(1)+s(3)*t(1)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,69) @expansion{} actionid[2]=-s(2)^2*t(2)+2*s(2)^2*t(3)^2+s(3)^2*t(2)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,70) @expansion{} actionid[3]=s(2)*t(3)+s(3)*t(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,71) stabid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,72) @expansion{} stabid[1]=s(2)*s(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,73) @expansion{} stabid[2]=s(1)^2*s(2)+s(1)^2*s(3)-1
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,74) @expansion{} stabid[3]=s(1)^2*s(3)^2-s(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,75) @expansion{} stabid[4]=s(1)^2+s(2)^4-s(3)^4
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,76) @expansion{} stabid[5]=s(1)^4+s(2)^3-s(3)^3
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,77) @expansion{} stabid[6]=-s(1)^2*s(3)+s(3)^5
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,78) @c end example ArnoldAction d2t_singular/qhmoduli_lib.doc:59
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,79) @end smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,80) @c ---end content ArnoldAction---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,81) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,82) @c ------------------- ModEqn -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,83) @node ModEqn, QuotientEquations, ArnoldAction, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,84) @subsubsection ModEqn
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,85) @cindex ModEqn
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,86) @c ---content ModEqn---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,87) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,88) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,89) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,90) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,91) ModEqn(f [, opt]); poly f; int opt;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,92) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,93) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,94) compute equations of the moduli space of semiquasihomogeneous hypersurface singularity with principal part f w.r.t. right equivalence
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,95) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,96) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,97) f quasihomogeneous polynomial with an isolated singularity at 0
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,98) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,99) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,100) polynomial ring, possibly a simple extension of the ground field of
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,101) the basering, containing the ideal 'modid'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,102) @*- 'modid' is the ideal of the moduli space if opt is even (> 0).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,103) otherwise it contains generators of the coordinate ring R of the
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,104) moduli space (note : Spec(R) is the moduli space)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,105) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,106) @item @strong{Options:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,107) 1 compute equations of the mod. space,
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,108) @*2 use a primary decomposition
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,109) @*4 compute E_f0, i.e., the image of G_f0
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,110) @*To combine options, add their value, default: opt =7
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,111) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,112) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,113) @strong{Example:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,114) @smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,115) @c computed example ModEqn d2t_singular/qhmoduli_lib.doc:104 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,116) LIB "qhmoduli.lib";
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,117) ring B   = 0,(x,y), ls;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,118) poly f = -x4 + xy5;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,119) def R = ModEqn(f);
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,120) setring R;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,121) modid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,122) @expansion{} modid[1]=Y(5)^2-Y(4)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,123) @expansion{} modid[2]=Y(4)*Y(5)-Y(3)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,124) @expansion{} modid[3]=Y(3)*Y(5)-Y(2)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,125) @expansion{} modid[4]=Y(2)*Y(5)-Y(1)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,126) @expansion{} modid[5]=Y(4)^2-Y(2)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,127) @expansion{} modid[6]=Y(3)*Y(4)-Y(1)*Y(6)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,128) @expansion{} modid[7]=Y(2)*Y(4)-Y(1)*Y(5)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,129) @expansion{} modid[8]=Y(3)^2-Y(1)*Y(5)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,130) @expansion{} modid[9]=Y(2)*Y(3)-Y(1)*Y(4)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,131) @expansion{} modid[10]=Y(2)^2-Y(1)*Y(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,132) @c end example ModEqn d2t_singular/qhmoduli_lib.doc:104
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,133) @end smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,134) @c ---end content ModEqn---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,135) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,136) @c ------------------- QuotientEquations -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,137) @node QuotientEquations, StabEqn, ModEqn, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,138) @subsubsection QuotientEquations
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,139) @cindex QuotientEquations
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,140) @c ---content QuotientEquations---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,141) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,142) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,143) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,144) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,145) QuotientEquations(G,action,emb [, opt]); ideal G,action,emb;int opt
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,146) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,147) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,148) compute the quotient of the variety given by the parameterization
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,149) 'emb' by the linear action 'action' of the algebraic group G.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,150) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,151) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,152) 'action' is linear, G must be finite if the Reynolds operator is
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,153) needed (i.e., NullCone(G,action) returns some non-invariant polys)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,154) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,155) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,156) polynomial ring over a simple extension of the ground field of the
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,157) basering, containing the ideals 'id' and 'embedid'.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,158) @*- 'id' contains the equations of the quotient, if opt = 1;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,159) if opt = 0, 2, 'id' contains generators of the coordinate ring R
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,160) of the quotient (Spec(R) is the quotient)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,161) @*- 'embedid' = 0, if opt = 1;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,162) @*if opt = 0, 2, it is the ideal defining the equivariant embedding
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,163) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,164) @item @strong{Options:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,165) 1 compute equations of the quotient,
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,166) @*2 use a primary decomposition when computing the Reynolds operator @*
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,167) To combine options, add their value, default: opt =3.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,168) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,169) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,170) @c ---end content QuotientEquations---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,171) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,172) @c ------------------- StabEqn -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,173) @node StabEqn, StabEqnId, QuotientEquations, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,174) @subsubsection StabEqn
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,175) @cindex StabEqn
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,176) @c ---content StabEqn---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,177) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,178) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,179) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,180) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,181) StabEqn(f); f polynomial
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,182) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,183) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,184) compute the equations of the isometry group of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,185) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,186) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,187) f semiquasihomogeneous polynomial with an isolated singularity at 0
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,188) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,189) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,190) list of two ring 'S1', 'S2'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,191) @*- 'S1' contains the equations of the stabilizer (ideal 'stabid') @*
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,192) - 'S2' contains the action of the stabilizer (ideal 'actionid')
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,193) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,194) @item @strong{Global:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,195) varSubsList, contains the index j s.t. x(i) -> x(i)t(j) ...
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,196) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,197) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,198) @strong{Example:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,199) @smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,200) @c computed example StabEqn d2t_singular/qhmoduli_lib.doc:179 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,201) LIB "qhmoduli.lib";
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,202) ring B = 0,(x,y,z), ls;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,203) poly f = -z5+y5+x2z+x2y;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,204) list stab = StabEqn(f);
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,205) def S1 = stab[1]; setring S1;  stabid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,206) @expansion{} stabid[1]=s(2)*s(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,207) @expansion{} stabid[2]=s(1)^2*s(2)+s(1)^2*s(3)-1
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,208) @expansion{} stabid[3]=s(1)^2*s(3)^2-s(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,209) @expansion{} stabid[4]=s(2)^4-s(3)^4+s(1)^2
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,210) @expansion{} stabid[5]=s(1)^4+s(2)^3-s(3)^3
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,211) @expansion{} stabid[6]=s(3)^5-s(1)^2*s(3)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,212) def S2 = stab[2]; setring S2;  actionid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,213) @expansion{} actionid[1]=s(1)*x
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,214) @expansion{} actionid[2]=s(3)*y+s(2)*z
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,215) @expansion{} actionid[3]=s(2)*y+s(3)*z
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,216) @c end example StabEqn d2t_singular/qhmoduli_lib.doc:179
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,217) @end smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,218) @c ---end content StabEqn---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,219) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,220) @c ------------------- StabEqnId -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,221) @node StabEqnId, StabOrder, StabEqn, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,222) @subsubsection StabEqnId
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,223) @cindex StabEqnId
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,224) @c ---content StabEqnId---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,225) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,226) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,227) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,228) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,229) StabEqn(I, w); I ideal, w intvec
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,230) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,231) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,232) compute the equations of the isometry group of the ideal I
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,233) each generator of I is fixed by the stabilizer.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,234) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,235) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,236) I semiquasihomogeneous ideal wrt 'w' with an isolated singularity at 0
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,237) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,238) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,239) list of two ring 'S1', 'S2'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,240) @*- 'S1' contains the equations of the stabilizer (ideal 'stabid') @*
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,241) - 'S2' contains the action of the stabilizer (ideal 'actionid')
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,242) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,243) @item @strong{Global:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,244) varSubsList, contains the index j s.t. t(i) -> t(i)t(j) ...
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,245) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,246) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,247) @strong{Example:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,248) @smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,249) @c computed example StabEqnId d2t_singular/qhmoduli_lib.doc:219 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,250) LIB "qhmoduli.lib";
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,251) ring B   = 0,(x,y,z), ls;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,252) ideal I = x2,y3,z6;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,253) intvec w = 3,2,1;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,254) list stab = StabEqnId(I, w);
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,255) @expansion{} // ** redefining d **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,256) @expansion{} // ** redefining newcoMx **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,257) @expansion{} // ** redefining coMx **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,258) @expansion{} // ** redefining d **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,259) @expansion{} // ** redefining newcoMx **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,260) @expansion{} // ** redefining coMx **
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,261) def S1 = stab[1]; setring S1;  stabid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,262) @expansion{} stabid[1]=s(1)^2-1
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,263) @expansion{} stabid[2]=s(2)^3-1
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,264) @expansion{} stabid[3]=s(3)^6-1
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,265) def S2 = stab[2]; setring S2;  actionid;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,266) @expansion{} actionid[1]=s(1)*x
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,267) @expansion{} actionid[2]=s(2)*y
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,268) @expansion{} actionid[3]=s(3)*z
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,269) @c end example StabEqnId d2t_singular/qhmoduli_lib.doc:219
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,270) @end smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,271) @c ---end content StabEqnId---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,272) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,273) @c ------------------- StabOrder -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,274) @node StabOrder, UpperMonomials, StabEqnId, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,275) @subsubsection StabOrder
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,276) @cindex StabOrder
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,277) @c ---content StabOrder---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,278) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,279) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,280) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,281) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,282) StabOrder(f); poly f;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,283) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,284) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,285) compute the order of the stabilizer group of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,286) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,287) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,288) f quasihomogeneous polynomial with an isolated singularity at 0
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,289) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,290) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,291) int
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,292) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,293) @item @strong{Global:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,294) varSubsList
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,295) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,296) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,297) @c ---end content StabOrder---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,298) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,299) @c ------------------- UpperMonomials -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,300) @node UpperMonomials, Max, StabOrder, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,301) @subsubsection UpperMonomials
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,302) @cindex UpperMonomials
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,303) @c ---content UpperMonomials---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,304) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,305) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,306) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,307) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,308) UpperMonomials(poly f, [intvec w])
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,309) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,310) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,311) compute the upper monomials of the milnor algebra of f.
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,312) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,313) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,314) f is quasihomogeneous (w.r.t. w)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,315) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,316) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,317) ideal
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,318) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,319) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,320) @strong{Example:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,321) @smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,322) @c computed example UpperMonomials d2t_singular/qhmoduli_lib.doc:280 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,323) LIB "qhmoduli.lib";
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,324) ring B   = 0,(x,y,z), ls;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,325) poly f = -z5+y5+x2z+x2y;
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,326) UpperMonomials(f);
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,327) @expansion{} _[1]=y3z3
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,328) @expansion{} _[2]=x2y3
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,329) @expansion{} _[3]=x2y2
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,330) @c end example UpperMonomials d2t_singular/qhmoduli_lib.doc:280
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,331) @end smallexample
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,332) @c ---end content UpperMonomials---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,333) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,334) @c ------------------- Max -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,335) @node Max, Min, UpperMonomials, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,336) @subsubsection Max
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,337) @cindex Max
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,338) @c ---content Max---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,339) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,340) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,341) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,342) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,343) Max(data); intvec/list of integers data
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,344) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,345) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,346) find the maximal integer contained in 'data'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,347) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,348) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,349) list
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,350) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,351) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,352) 'data' contains only integers and is not empty
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,353) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,354) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,355) @c ---end content Max---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,356) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,357) @c ------------------- Min -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,358) @node Min, Table, Max, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,359) @subsubsection Min
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,360) @cindex Min
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,361) @c ---content Min---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,362) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,363) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,364) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,365) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,366) Min(data); intvec/list of integers data
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,367) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,368) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,369) find the minimal integer contained in 'data'
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,370) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,371) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,372) list
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,373) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,374) @item @strong{Assume:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,375) 'data' contains only integers and is not empty
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,376) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,377) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,378) @c ---end content Min---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,379) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,380) @c ------------------- Table -------------
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,381) @node Table,, Min, qhmoduli_lib
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,382) @subsubsection Table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,383) @cindex Table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,384) @c ---content Table---
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,385) Procedure from library @code{qhmoduli.lib} (@pxref{qhmoduli_lib}).
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,386) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,387) @table @asis
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,388) @item @strong{Usage:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,389) Table(cmd,i, lb, ub); string cmd, i; int lb, ub
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,390) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,391) @item @strong{Purpose:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,392) generate a list of size ub - lb + 1 s.t. _[i] = cmd(i)
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,393) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,394) @item @strong{Return:}
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,395) list
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,396) 
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,397) @end table
../singular_texi/./d2t_singular/qhmoduli_lib.tex(,398) @c ---end content Table---
../singular_texi/singular.tex(,485) @c ----------------------------------------------------------
../singular_texi/singular.tex(,486) @node sing_lib, spcurve_lib, qhmoduli_lib, Singularities
../singular_texi/singular.tex(,487) @subsection sing_lib
../singular_texi/singular.tex(,488) @c include of docu for sing.lib
../singular_texi/./d2t_singular/sing_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/sing_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/sing_lib.doc
../singular_texi/./d2t_singular/sing_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/sing_lib.doc INSTEAD
../singular_texi/./d2t_singular/sing_lib.tex(,4) @c library version: (1.24.2.5,2003/04/15)
../singular_texi/./d2t_singular/sing_lib.tex(,5) @c library file: ../Singular/LIB/sing.lib
../singular_texi/./d2t_singular/sing_lib.tex(,6) @cindex sing.lib
../singular_texi/./d2t_singular/sing_lib.tex(,7) @cindex sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/sing_lib.tex(,10) sing.lib
../singular_texi/./d2t_singular/sing_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/sing_lib.tex(,12)       Invariants of Singularities
../singular_texi/./d2t_singular/sing_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/sing_lib.tex(,14) Gert-Martin Greuel, email: greuel@@mathematik.uni-kl.de @*
../singular_texi/./d2t_singular/sing_lib.tex(,15) Bernd Martin, email: martin@@math.tu-cottbus.de
../singular_texi/./d2t_singular/sing_lib.tex(,16) 
../singular_texi/./d2t_singular/sing_lib.tex(,17) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,18) 
../singular_texi/./d2t_singular/sing_lib.tex(,19) @strong{Procedures:}
../singular_texi/./d2t_singular/sing_lib.tex(,20) @menu
../singular_texi/./d2t_singular/sing_lib.tex(,21) * deform:: infinitesimal deformations of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,22) * dim_slocus:: dimension of singular locus of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,23) * is_active:: is poly f an active element mod id? (id ideal/module)
../singular_texi/./d2t_singular/sing_lib.tex(,24) * is_ci:: is ideal i a complete intersection?
../singular_texi/./d2t_singular/sing_lib.tex(,25) * is_is:: is ideal i an isolated singularity?
../singular_texi/./d2t_singular/sing_lib.tex(,26) * is_reg:: is poly f a regular element mod id? (id ideal/module)
../singular_texi/./d2t_singular/sing_lib.tex(,27) * is_regs:: are gen's of ideal i regular sequence modulo id?
../singular_texi/./d2t_singular/sing_lib.tex(,28) * locstd:: SB for local degree ordering without cancelling units
../singular_texi/./d2t_singular/sing_lib.tex(,29) * milnor:: milnor number of ideal i; (assume i is ICIS in nf)
../singular_texi/./d2t_singular/sing_lib.tex(,30) * nf_icis:: generic combinations of generators; get ICIS in nf
../singular_texi/./d2t_singular/sing_lib.tex(,31) * slocus:: ideal of singular locus of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,32) * qhspectrum:: spectrum numbers of w-homogeneous polynomial f
../singular_texi/./d2t_singular/sing_lib.tex(,33) * Tjurina:: SB of Tjurina module of ideal i (assume i is ICIS)
../singular_texi/./d2t_singular/sing_lib.tex(,34) * tjurina:: Tjurina number of ideal i (assume i is ICIS)
../singular_texi/./d2t_singular/sing_lib.tex(,35) * T_1:: T^1-module of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,36) * T_2:: T^2-module of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,37) * T_12:: T^1- and T^2-module of ideal i
../singular_texi/./d2t_singular/sing_lib.tex(,38) * tangentcone:: compute tangent cone of id
../singular_texi/./d2t_singular/sing_lib.tex(,39) @end menu
../singular_texi/./d2t_singular/sing_lib.tex(,40) @c ---end content LibInfo---
../singular_texi/./d2t_singular/sing_lib.tex(,41) 
../singular_texi/./d2t_singular/sing_lib.tex(,42) @c ------------------- deform -------------
../singular_texi/./d2t_singular/sing_lib.tex(,43) @node deform, dim_slocus,, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,44) @subsubsection deform
../singular_texi/./d2t_singular/sing_lib.tex(,45) @cindex deform
../singular_texi/./d2t_singular/sing_lib.tex(,46) @c ---content deform---
../singular_texi/./d2t_singular/sing_lib.tex(,47) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,48) 
../singular_texi/./d2t_singular/sing_lib.tex(,49) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,50) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,51) deform(id); id=ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,52) 
../singular_texi/./d2t_singular/sing_lib.tex(,53) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,54) matrix, columns are kbase of infinitesimal deformations
../singular_texi/./d2t_singular/sing_lib.tex(,55) 
../singular_texi/./d2t_singular/sing_lib.tex(,56) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,57) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,58) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,59) @c computed example deform d2t_singular/sing_lib.doc:57 
../singular_texi/./d2t_singular/sing_lib.tex(,60) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,61) ring r   = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,62) ideal i  = xy,xz,yz;
../singular_texi/./d2t_singular/sing_lib.tex(,63) matrix T = deform(i);
../singular_texi/./d2t_singular/sing_lib.tex(,64) print(T);
../singular_texi/./d2t_singular/sing_lib.tex(,65) @expansion{} x,0,0,
../singular_texi/./d2t_singular/sing_lib.tex(,66) @expansion{} 0,0,z,
../singular_texi/./d2t_singular/sing_lib.tex(,67) @expansion{} 0,y,0 
../singular_texi/./d2t_singular/sing_lib.tex(,68) print(deform(x3+y5+z2));
../singular_texi/./d2t_singular/sing_lib.tex(,69) @expansion{} xy3,y3,xy2,y2,xy,y,x,1
../singular_texi/./d2t_singular/sing_lib.tex(,70) @c end example deform d2t_singular/sing_lib.doc:57
../singular_texi/./d2t_singular/sing_lib.tex(,71) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,72) @c ---end content deform---
../singular_texi/./d2t_singular/sing_lib.tex(,73) 
../singular_texi/./d2t_singular/sing_lib.tex(,74) @c ------------------- dim_slocus -------------
../singular_texi/./d2t_singular/sing_lib.tex(,75) @node dim_slocus, is_active, deform, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,76) @subsubsection dim_slocus
../singular_texi/./d2t_singular/sing_lib.tex(,77) @cindex dim_slocus
../singular_texi/./d2t_singular/sing_lib.tex(,78) @c ---content dim_slocus---
../singular_texi/./d2t_singular/sing_lib.tex(,79) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,80) 
../singular_texi/./d2t_singular/sing_lib.tex(,81) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,82) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,83) dim_slocus(i); i ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,84) 
../singular_texi/./d2t_singular/sing_lib.tex(,85) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,86) dimension of singular locus of i
../singular_texi/./d2t_singular/sing_lib.tex(,87) 
../singular_texi/./d2t_singular/sing_lib.tex(,88) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,89) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,90) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,91) @c computed example dim_slocus d2t_singular/sing_lib.doc:85 
../singular_texi/./d2t_singular/sing_lib.tex(,92) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,93) ring r  = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,94) ideal i = x5+y6+z6,x2+2y2+3z2;
../singular_texi/./d2t_singular/sing_lib.tex(,95) dim_slocus(i);
../singular_texi/./d2t_singular/sing_lib.tex(,96) @expansion{} 0
../singular_texi/./d2t_singular/sing_lib.tex(,97) @c end example dim_slocus d2t_singular/sing_lib.doc:85
../singular_texi/./d2t_singular/sing_lib.tex(,98) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,99) @c ---end content dim_slocus---
../singular_texi/./d2t_singular/sing_lib.tex(,100) 
../singular_texi/./d2t_singular/sing_lib.tex(,101) @c ------------------- is_active -------------
../singular_texi/./d2t_singular/sing_lib.tex(,102) @node is_active, is_ci, dim_slocus, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,103) @subsubsection is_active
../singular_texi/./d2t_singular/sing_lib.tex(,104) @cindex is_active
../singular_texi/./d2t_singular/sing_lib.tex(,105) @c ---content is_active---
../singular_texi/./d2t_singular/sing_lib.tex(,106) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,107) 
../singular_texi/./d2t_singular/sing_lib.tex(,108) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,109) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,110) is_active(f,id); f poly, id ideal or module
../singular_texi/./d2t_singular/sing_lib.tex(,111) 
../singular_texi/./d2t_singular/sing_lib.tex(,112) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,113) 1 if f is an active element modulo id (i.e. dim(id)=dim(id+f*R^n)+1,
../singular_texi/./d2t_singular/sing_lib.tex(,114) if id is a submodule of R^n) resp. 0 if f is not active.
../singular_texi/./d2t_singular/sing_lib.tex(,115) The basering may be a quotient ring
../singular_texi/./d2t_singular/sing_lib.tex(,116) 
../singular_texi/./d2t_singular/sing_lib.tex(,117) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,118) regular parameters are active but not vice versa (id may have embedded
../singular_texi/./d2t_singular/sing_lib.tex(,119) components). proc is_reg tests whether f is a regular parameter
../singular_texi/./d2t_singular/sing_lib.tex(,120) 
../singular_texi/./d2t_singular/sing_lib.tex(,121) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,122) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,123) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,124) @c computed example is_active d2t_singular/sing_lib.doc:117 
../singular_texi/./d2t_singular/sing_lib.tex(,125) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,126) ring r   =32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,127) ideal i  = yx3+y,yz3+y3z;
../singular_texi/./d2t_singular/sing_lib.tex(,128) poly f   = x;
../singular_texi/./d2t_singular/sing_lib.tex(,129) is_active(f,i);
../singular_texi/./d2t_singular/sing_lib.tex(,130) @expansion{} 1
../singular_texi/./d2t_singular/sing_lib.tex(,131) qring q  = std(x4y5);
../singular_texi/./d2t_singular/sing_lib.tex(,132) poly f   = x;
../singular_texi/./d2t_singular/sing_lib.tex(,133) module m = [yx3+x,yx3+y3x];
../singular_texi/./d2t_singular/sing_lib.tex(,134) is_active(f,m);
../singular_texi/./d2t_singular/sing_lib.tex(,135) @expansion{} 0
../singular_texi/./d2t_singular/sing_lib.tex(,136) @c end example is_active d2t_singular/sing_lib.doc:117
../singular_texi/./d2t_singular/sing_lib.tex(,137) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,138) @c ---end content is_active---
../singular_texi/./d2t_singular/sing_lib.tex(,139) 
../singular_texi/./d2t_singular/sing_lib.tex(,140) @c ------------------- is_ci -------------
../singular_texi/./d2t_singular/sing_lib.tex(,141) @node is_ci, is_is, is_active, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,142) @subsubsection is_ci
../singular_texi/./d2t_singular/sing_lib.tex(,143) @cindex is_ci
../singular_texi/./d2t_singular/sing_lib.tex(,144) @c ---content is_ci---
../singular_texi/./d2t_singular/sing_lib.tex(,145) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,146) 
../singular_texi/./d2t_singular/sing_lib.tex(,147) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,148) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,149) is_ci(i); i ideal
../singular_texi/./d2t_singular/sing_lib.tex(,150) 
../singular_texi/./d2t_singular/sing_lib.tex(,151) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,152) intvec = sequence of dimensions of ideals (j[1],...,j[k]), for
../singular_texi/./d2t_singular/sing_lib.tex(,153) k=1,...,size(j), where j is minimal base of i. i is a complete
../singular_texi/./d2t_singular/sing_lib.tex(,154) intersection if last number equals nvars-size(i)
../singular_texi/./d2t_singular/sing_lib.tex(,155) 
../singular_texi/./d2t_singular/sing_lib.tex(,156) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,157) dim(0-ideal) = -1. You may first apply simplify(i,10); in order to
../singular_texi/./d2t_singular/sing_lib.tex(,158) delete zeroes and multiples from set of generators
../singular_texi/./d2t_singular/sing_lib.tex(,159) @*printlevel >=0: display comments (default)
../singular_texi/./d2t_singular/sing_lib.tex(,160) 
../singular_texi/./d2t_singular/sing_lib.tex(,161) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,162) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,163) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,164) @c computed example is_ci d2t_singular/sing_lib.doc:155 
../singular_texi/./d2t_singular/sing_lib.tex(,165) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,166) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,167) printlevel = 1;                // display comments
../singular_texi/./d2t_singular/sing_lib.tex(,168) ring r     = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,169) ideal i    = x4+y5+z6,xyz,yx2+xz2+zy7;
../singular_texi/./d2t_singular/sing_lib.tex(,170) is_ci(i);
../singular_texi/./d2t_singular/sing_lib.tex(,171) @expansion{} // complete intersection of dim 0
../singular_texi/./d2t_singular/sing_lib.tex(,172) @expansion{} // dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,173) @expansion{} 2,1,0
../singular_texi/./d2t_singular/sing_lib.tex(,174) i          = xy,yz;
../singular_texi/./d2t_singular/sing_lib.tex(,175) is_ci(i);
../singular_texi/./d2t_singular/sing_lib.tex(,176) @expansion{} // no complete intersection
../singular_texi/./d2t_singular/sing_lib.tex(,177) @expansion{} // dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,178) @expansion{} 2,2
../singular_texi/./d2t_singular/sing_lib.tex(,179) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,180) @c end example is_ci d2t_singular/sing_lib.doc:155
../singular_texi/./d2t_singular/sing_lib.tex(,181) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,182) @c ---end content is_ci---
../singular_texi/./d2t_singular/sing_lib.tex(,183) 
../singular_texi/./d2t_singular/sing_lib.tex(,184) @c ------------------- is_is -------------
../singular_texi/./d2t_singular/sing_lib.tex(,185) @node is_is, is_reg, is_ci, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,186) @subsubsection is_is
../singular_texi/./d2t_singular/sing_lib.tex(,187) @cindex is_is
../singular_texi/./d2t_singular/sing_lib.tex(,188) @c ---content is_is---
../singular_texi/./d2t_singular/sing_lib.tex(,189) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,190) 
../singular_texi/./d2t_singular/sing_lib.tex(,191) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,192) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,193) is_is(id); id ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,194) 
../singular_texi/./d2t_singular/sing_lib.tex(,195) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,196) intvec = sequence of dimensions of singular loci of ideals
../singular_texi/./d2t_singular/sing_lib.tex(,197) generated by id[1]..id[i], k = 1..size(id); @*
../singular_texi/./d2t_singular/sing_lib.tex(,198) dim(0-ideal) = -1;
../singular_texi/./d2t_singular/sing_lib.tex(,199) @*id defines an isolated singularity if last number is 0
../singular_texi/./d2t_singular/sing_lib.tex(,200) 
../singular_texi/./d2t_singular/sing_lib.tex(,201) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,202) printlevel >=0: display comments (default)
../singular_texi/./d2t_singular/sing_lib.tex(,203) 
../singular_texi/./d2t_singular/sing_lib.tex(,204) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,205) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,206) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,207) @c computed example is_is d2t_singular/sing_lib.doc:192 
../singular_texi/./d2t_singular/sing_lib.tex(,208) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,209) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,210) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,211) ring r     = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,212) ideal i    = x2y,x4+y5+z6,yx2+xz2+zy7;
../singular_texi/./d2t_singular/sing_lib.tex(,213) is_is(i);
../singular_texi/./d2t_singular/sing_lib.tex(,214) @expansion{} // dim of singular locus = 0
../singular_texi/./d2t_singular/sing_lib.tex(,215) @expansion{} // isolated singularity if last number is 0 in dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,216) @expansion{} 2,1,0
../singular_texi/./d2t_singular/sing_lib.tex(,217) poly f     = xy+yz;
../singular_texi/./d2t_singular/sing_lib.tex(,218) is_is(f);
../singular_texi/./d2t_singular/sing_lib.tex(,219) @expansion{} // dim of singular locus = 1
../singular_texi/./d2t_singular/sing_lib.tex(,220) @expansion{} // isolated singularity if last number is 0 in dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,221) @expansion{} 1
../singular_texi/./d2t_singular/sing_lib.tex(,222) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,223) @c end example is_is d2t_singular/sing_lib.doc:192
../singular_texi/./d2t_singular/sing_lib.tex(,224) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,225) @c ---end content is_is---
../singular_texi/./d2t_singular/sing_lib.tex(,226) 
../singular_texi/./d2t_singular/sing_lib.tex(,227) @c ------------------- is_reg -------------
../singular_texi/./d2t_singular/sing_lib.tex(,228) @node is_reg, is_regs, is_is, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,229) @subsubsection is_reg
../singular_texi/./d2t_singular/sing_lib.tex(,230) @cindex is_reg
../singular_texi/./d2t_singular/sing_lib.tex(,231) @c ---content is_reg---
../singular_texi/./d2t_singular/sing_lib.tex(,232) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,233) 
../singular_texi/./d2t_singular/sing_lib.tex(,234) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,235) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,236) is_reg(f,id); f poly, id ideal or module
../singular_texi/./d2t_singular/sing_lib.tex(,237) 
../singular_texi/./d2t_singular/sing_lib.tex(,238) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,239) 1 if multiplication with f is injective modulo id, 0 otherwise
../singular_texi/./d2t_singular/sing_lib.tex(,240) 
../singular_texi/./d2t_singular/sing_lib.tex(,241) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,242) let R be the basering and id a submodule of R^n. The procedure checks
../singular_texi/./d2t_singular/sing_lib.tex(,243) injectivity of multiplication with f on R^n/id. The basering may be a
../singular_texi/./d2t_singular/sing_lib.tex(,244) quotient ring
../singular_texi/./d2t_singular/sing_lib.tex(,245) 
../singular_texi/./d2t_singular/sing_lib.tex(,246) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,247) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,248) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,249) @c computed example is_reg d2t_singular/sing_lib.doc:228 
../singular_texi/./d2t_singular/sing_lib.tex(,250) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,251) ring r  = 32003,(x,y),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,252) ideal i = x8,y8;
../singular_texi/./d2t_singular/sing_lib.tex(,253) ideal j = (x+y)^4;
../singular_texi/./d2t_singular/sing_lib.tex(,254) i       = intersect(i,j);
../singular_texi/./d2t_singular/sing_lib.tex(,255) poly f  = xy;
../singular_texi/./d2t_singular/sing_lib.tex(,256) is_reg(f,i);
../singular_texi/./d2t_singular/sing_lib.tex(,257) @expansion{} 0
../singular_texi/./d2t_singular/sing_lib.tex(,258) @c end example is_reg d2t_singular/sing_lib.doc:228
../singular_texi/./d2t_singular/sing_lib.tex(,259) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,260) @c ---end content is_reg---
../singular_texi/./d2t_singular/sing_lib.tex(,261) 
../singular_texi/./d2t_singular/sing_lib.tex(,262) @c ------------------- is_regs -------------
../singular_texi/./d2t_singular/sing_lib.tex(,263) @node is_regs, locstd, is_reg, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,264) @subsubsection is_regs
../singular_texi/./d2t_singular/sing_lib.tex(,265) @cindex is_regs
../singular_texi/./d2t_singular/sing_lib.tex(,266) @c ---content is_regs---
../singular_texi/./d2t_singular/sing_lib.tex(,267) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,268) 
../singular_texi/./d2t_singular/sing_lib.tex(,269) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,270) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,271) is_regs(i[,id]); i poly, id ideal or module (default: id=0)
../singular_texi/./d2t_singular/sing_lib.tex(,272) 
../singular_texi/./d2t_singular/sing_lib.tex(,273) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,274) 1 if generators of i are a regular sequence modulo id, 0 otherwise
../singular_texi/./d2t_singular/sing_lib.tex(,275) 
../singular_texi/./d2t_singular/sing_lib.tex(,276) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,277) let R be the basering and id a submodule of R^n. The procedure checks
../singular_texi/./d2t_singular/sing_lib.tex(,278) injectivity of multiplication with i[k] on R^n/id+i[1..k-1].
../singular_texi/./d2t_singular/sing_lib.tex(,279) The basering may be a quotient ring
../singular_texi/./d2t_singular/sing_lib.tex(,280) @*printlevel >=0: display comments (default)
../singular_texi/./d2t_singular/sing_lib.tex(,281) @*printlevel >=1: display comments during computation
../singular_texi/./d2t_singular/sing_lib.tex(,282) 
../singular_texi/./d2t_singular/sing_lib.tex(,283) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,284) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,285) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,286) @c computed example is_regs d2t_singular/sing_lib.doc:264 
../singular_texi/./d2t_singular/sing_lib.tex(,287) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,288) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,289) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,290) ring r1    = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,291) ideal i    = x8,y8,(x+y)^4;
../singular_texi/./d2t_singular/sing_lib.tex(,292) is_regs(i);
../singular_texi/./d2t_singular/sing_lib.tex(,293) @expansion{} // checking whether element 1 is regular mod 1 .. 0
../singular_texi/./d2t_singular/sing_lib.tex(,294) @expansion{} // checking whether element 2 is regular mod 1 .. 1
../singular_texi/./d2t_singular/sing_lib.tex(,295) @expansion{} // checking whether element 3 is regular mod 1 .. 2
../singular_texi/./d2t_singular/sing_lib.tex(,296) @expansion{} // elements 1..2 are regular, 3 is not regular mod 1..2
../singular_texi/./d2t_singular/sing_lib.tex(,297) @expansion{} 0
../singular_texi/./d2t_singular/sing_lib.tex(,298) module m   = [x,0,y];
../singular_texi/./d2t_singular/sing_lib.tex(,299) i          = x8,(x+z)^4;;
../singular_texi/./d2t_singular/sing_lib.tex(,300) is_regs(i,m);
../singular_texi/./d2t_singular/sing_lib.tex(,301) @expansion{} // checking whether element 1 is regular mod 1 .. 0
../singular_texi/./d2t_singular/sing_lib.tex(,302) @expansion{} // checking whether element 2 is regular mod 1 .. 1
../singular_texi/./d2t_singular/sing_lib.tex(,303) @expansion{} // elements are a regular sequence of length 2
../singular_texi/./d2t_singular/sing_lib.tex(,304) @expansion{} 1
../singular_texi/./d2t_singular/sing_lib.tex(,305) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,306) @c end example is_regs d2t_singular/sing_lib.doc:264
../singular_texi/./d2t_singular/sing_lib.tex(,307) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,308) @c ---end content is_regs---
../singular_texi/./d2t_singular/sing_lib.tex(,309) 
../singular_texi/./d2t_singular/sing_lib.tex(,310) @c ------------------- locstd -------------
../singular_texi/./d2t_singular/sing_lib.tex(,311) @node locstd, milnor, is_regs, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,312) @subsubsection locstd
../singular_texi/./d2t_singular/sing_lib.tex(,313) @cindex locstd
../singular_texi/./d2t_singular/sing_lib.tex(,314) @c ---content locstd---
../singular_texi/./d2t_singular/sing_lib.tex(,315) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,316) 
../singular_texi/./d2t_singular/sing_lib.tex(,317) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,318) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,319) locstd (id); id = ideal
../singular_texi/./d2t_singular/sing_lib.tex(,320) 
../singular_texi/./d2t_singular/sing_lib.tex(,321) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,322) a standard basis for a local degree ordering
../singular_texi/./d2t_singular/sing_lib.tex(,323) 
../singular_texi/./d2t_singular/sing_lib.tex(,324) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,325) the procedure homogenizes id w.r.t. a new 1st variable @@t@@, computes
../singular_texi/./d2t_singular/sing_lib.tex(,326) a SB wrt (dp(1),dp) and substitutes @@t@@ by 1.
../singular_texi/./d2t_singular/sing_lib.tex(,327) @*Hence the result is a SB with respect to an ordering which sorts
../singular_texi/./d2t_singular/sing_lib.tex(,328) first w.r.t. the order and then refines it with dp. This is a
../singular_texi/./d2t_singular/sing_lib.tex(,329) local degree ordering.
../singular_texi/./d2t_singular/sing_lib.tex(,330) @*This is done in order to avoid cancellation of units and thus
../singular_texi/./d2t_singular/sing_lib.tex(,331) be able to use option(contentSB);
../singular_texi/./d2t_singular/sing_lib.tex(,332) 
../singular_texi/./d2t_singular/sing_lib.tex(,333) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,334) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,335) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,336) @c computed example locstd d2t_singular/sing_lib.doc:305 
../singular_texi/./d2t_singular/sing_lib.tex(,337) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,338) ring R = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,339) ideal i  = xyz+z5,2x2+y3+z7,3z5+y5;
../singular_texi/./d2t_singular/sing_lib.tex(,340) locstd(i);
../singular_texi/./d2t_singular/sing_lib.tex(,341) @expansion{} _[1]=y5+3z5
../singular_texi/./d2t_singular/sing_lib.tex(,342) @expansion{} _[2]=3x4y3z8-4x3y3z9+6x2y4z9+3y5z10
../singular_texi/./d2t_singular/sing_lib.tex(,343) @expansion{} _[3]=3x4z13-4x3z14+6x2yz14+3y2z15
../singular_texi/./d2t_singular/sing_lib.tex(,344) @expansion{} _[4]=3x4yz12-4x3yz13+6x2y2z13+3y3z14
../singular_texi/./d2t_singular/sing_lib.tex(,345) @expansion{} _[5]=2x2z9+x2y2z8+y3z9
../singular_texi/./d2t_singular/sing_lib.tex(,346) @expansion{} _[6]=2x2y4z5+y7z5-3x2yz9
../singular_texi/./d2t_singular/sing_lib.tex(,347) @expansion{} _[7]=6y2z10-3x2y3z8+4xy3z9-3y4z9
../singular_texi/./d2t_singular/sing_lib.tex(,348) @expansion{} _[8]=3x2y2z8+3y3z9+2xy4z8
../singular_texi/./d2t_singular/sing_lib.tex(,349) @expansion{} _[9]=18z14-4xy6z8+3y7z8-9x2yz12
../singular_texi/./d2t_singular/sing_lib.tex(,350) @expansion{} _[10]=xyz+z5
../singular_texi/./d2t_singular/sing_lib.tex(,351) @expansion{} _[11]=3xz6-y4z5
../singular_texi/./d2t_singular/sing_lib.tex(,352) @expansion{} _[12]=3y3z6+2xy4z5-3xyz9
../singular_texi/./d2t_singular/sing_lib.tex(,353) @expansion{} _[13]=y4z5-2xz9-xy2z8
../singular_texi/./d2t_singular/sing_lib.tex(,354) @expansion{} _[14]=3z10+2xyz9+xy3z8
../singular_texi/./d2t_singular/sing_lib.tex(,355) @expansion{} _[15]=2x2z5+y3z5-xyz8
../singular_texi/./d2t_singular/sing_lib.tex(,356) @expansion{} _[16]=y4z-2xz5+yz8
../singular_texi/./d2t_singular/sing_lib.tex(,357) @expansion{} _[17]=3z6+2xyz5-y2z8
../singular_texi/./d2t_singular/sing_lib.tex(,358) @expansion{} _[18]=2x2+y3+z7
../singular_texi/./d2t_singular/sing_lib.tex(,359) @c end example locstd d2t_singular/sing_lib.doc:305
../singular_texi/./d2t_singular/sing_lib.tex(,360) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,361) @c ---end content locstd---
../singular_texi/./d2t_singular/sing_lib.tex(,362) 
../singular_texi/./d2t_singular/sing_lib.tex(,363) @c ------------------- milnor -------------
../singular_texi/./d2t_singular/sing_lib.tex(,364) @node milnor, nf_icis, locstd, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,365) @subsubsection milnor
../singular_texi/./d2t_singular/sing_lib.tex(,366) @cindex milnor
../singular_texi/./d2t_singular/sing_lib.tex(,367) @c ---content milnor---
../singular_texi/./d2t_singular/sing_lib.tex(,368) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,369) 
../singular_texi/./d2t_singular/sing_lib.tex(,370) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,371) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,372) milnor(i); i ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,373) 
../singular_texi/./d2t_singular/sing_lib.tex(,374) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,375) Milnor number of i, if i is ICIS (isolated complete intersection
../singular_texi/./d2t_singular/sing_lib.tex(,376) singularity) in generic form, resp. -1 if not
../singular_texi/./d2t_singular/sing_lib.tex(,377) 
../singular_texi/./d2t_singular/sing_lib.tex(,378) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,379) use proc nf_icis to put generators in generic form
../singular_texi/./d2t_singular/sing_lib.tex(,380) @*printlevel >=0: display comments (default)
../singular_texi/./d2t_singular/sing_lib.tex(,381) 
../singular_texi/./d2t_singular/sing_lib.tex(,382) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,383) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,384) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,385) @c computed example milnor d2t_singular/sing_lib.doc:336 
../singular_texi/./d2t_singular/sing_lib.tex(,386) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,387) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,388) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,389) ring r     = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,390) ideal j    = x5+y6+z6,x2+2y2+3z2,xyz+yx;
../singular_texi/./d2t_singular/sing_lib.tex(,391) milnor(j);
../singular_texi/./d2t_singular/sing_lib.tex(,392) @expansion{} //sequence of discriminant numbers: 100,149,70
../singular_texi/./d2t_singular/sing_lib.tex(,393) @expansion{} 21
../singular_texi/./d2t_singular/sing_lib.tex(,394) poly f     = x7+y7+(x-y)^2*x2y2+z2;
../singular_texi/./d2t_singular/sing_lib.tex(,395) milnor(f);
../singular_texi/./d2t_singular/sing_lib.tex(,396) @expansion{} 28
../singular_texi/./d2t_singular/sing_lib.tex(,397) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,398) @c end example milnor d2t_singular/sing_lib.doc:336
../singular_texi/./d2t_singular/sing_lib.tex(,399) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,400) @c ---end content milnor---
../singular_texi/./d2t_singular/sing_lib.tex(,401) 
../singular_texi/./d2t_singular/sing_lib.tex(,402) @c ------------------- nf_icis -------------
../singular_texi/./d2t_singular/sing_lib.tex(,403) @node nf_icis, slocus, milnor, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,404) @subsubsection nf_icis
../singular_texi/./d2t_singular/sing_lib.tex(,405) @cindex nf_icis
../singular_texi/./d2t_singular/sing_lib.tex(,406) @c ---content nf_icis---
../singular_texi/./d2t_singular/sing_lib.tex(,407) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,408) 
../singular_texi/./d2t_singular/sing_lib.tex(,409) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,410) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,411) nf_icis(i); i ideal
../singular_texi/./d2t_singular/sing_lib.tex(,412) 
../singular_texi/./d2t_singular/sing_lib.tex(,413) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,414) ideal = generic linear combination of generators of i if i is an ICIS
../singular_texi/./d2t_singular/sing_lib.tex(,415) (isolated complete intersection singularity), return i if not
../singular_texi/./d2t_singular/sing_lib.tex(,416) 
../singular_texi/./d2t_singular/sing_lib.tex(,417) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,418) this proc is useful in connection with proc milnor
../singular_texi/./d2t_singular/sing_lib.tex(,419) @*printlevel >=0: display comments (default)
../singular_texi/./d2t_singular/sing_lib.tex(,420) 
../singular_texi/./d2t_singular/sing_lib.tex(,421) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,422) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,423) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,424) @c computed example nf_icis d2t_singular/sing_lib.doc:372 
../singular_texi/./d2t_singular/sing_lib.tex(,425) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,426) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,427) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,428) ring r     = 32003,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,429) ideal i    = x3+y4,z4+yx;
../singular_texi/./d2t_singular/sing_lib.tex(,430) nf_icis(i);
../singular_texi/./d2t_singular/sing_lib.tex(,431) @expansion{} // complete intersection of dim 1
../singular_texi/./d2t_singular/sing_lib.tex(,432) @expansion{} // dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,433) @expansion{} // dim of singular locus = 0
../singular_texi/./d2t_singular/sing_lib.tex(,434) @expansion{} // isolated singularity if last number is 0 in dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,435) @expansion{} // dim of singular locus = 0
../singular_texi/./d2t_singular/sing_lib.tex(,436) @expansion{} // isolated singularity if last number is 0 in dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,437) @expansion{} // ICIS in generic form after 1 genericity loop(s)
../singular_texi/./d2t_singular/sing_lib.tex(,438) @expansion{} _[1]=2xy+x3+y4+2z4
../singular_texi/./d2t_singular/sing_lib.tex(,439) @expansion{} _[2]=xy+z4
../singular_texi/./d2t_singular/sing_lib.tex(,440) ideal j    = x3+y4,xy,yz;
../singular_texi/./d2t_singular/sing_lib.tex(,441) nf_icis(j);
../singular_texi/./d2t_singular/sing_lib.tex(,442) @expansion{} // no complete intersection
../singular_texi/./d2t_singular/sing_lib.tex(,443) @expansion{} // dim-sequence:
../singular_texi/./d2t_singular/sing_lib.tex(,444) @expansion{} // no complete intersection
../singular_texi/./d2t_singular/sing_lib.tex(,445) @expansion{} _[1]=x3+y4
../singular_texi/./d2t_singular/sing_lib.tex(,446) @expansion{} _[2]=xy
../singular_texi/./d2t_singular/sing_lib.tex(,447) @expansion{} _[3]=yz
../singular_texi/./d2t_singular/sing_lib.tex(,448) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,449) @c end example nf_icis d2t_singular/sing_lib.doc:372
../singular_texi/./d2t_singular/sing_lib.tex(,450) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,451) @c ---end content nf_icis---
../singular_texi/./d2t_singular/sing_lib.tex(,452) 
../singular_texi/./d2t_singular/sing_lib.tex(,453) @c ------------------- slocus -------------
../singular_texi/./d2t_singular/sing_lib.tex(,454) @node slocus, qhspectrum, nf_icis, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,455) @subsubsection slocus
../singular_texi/./d2t_singular/sing_lib.tex(,456) @cindex slocus
../singular_texi/./d2t_singular/sing_lib.tex(,457) @c ---content slocus---
../singular_texi/./d2t_singular/sing_lib.tex(,458) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,459) 
../singular_texi/./d2t_singular/sing_lib.tex(,460) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,461) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,462) slocus(i); i ideal
../singular_texi/./d2t_singular/sing_lib.tex(,463) 
../singular_texi/./d2t_singular/sing_lib.tex(,464) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,465) ideal of singular locus of i
../singular_texi/./d2t_singular/sing_lib.tex(,466) 
../singular_texi/./d2t_singular/sing_lib.tex(,467) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,468) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,469) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,470) @c computed example slocus d2t_singular/sing_lib.doc:403 
../singular_texi/./d2t_singular/sing_lib.tex(,471) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,472) ring r  = 0,(u,v,w,x,y,z),dp;
../singular_texi/./d2t_singular/sing_lib.tex(,473) ideal i = wx,wy,wz,vx,vy,vz,ux,uy,uz,y3-x2;;
../singular_texi/./d2t_singular/sing_lib.tex(,474) slocus(i);
../singular_texi/./d2t_singular/sing_lib.tex(,475) @expansion{} _[1]=x
../singular_texi/./d2t_singular/sing_lib.tex(,476) @expansion{} _[2]=w
../singular_texi/./d2t_singular/sing_lib.tex(,477) @expansion{} _[3]=v
../singular_texi/./d2t_singular/sing_lib.tex(,478) @expansion{} _[4]=u
../singular_texi/./d2t_singular/sing_lib.tex(,479) @expansion{} _[5]=y2
../singular_texi/./d2t_singular/sing_lib.tex(,480) @c end example slocus d2t_singular/sing_lib.doc:403
../singular_texi/./d2t_singular/sing_lib.tex(,481) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,482) @c ---end content slocus---
../singular_texi/./d2t_singular/sing_lib.tex(,483) 
../singular_texi/./d2t_singular/sing_lib.tex(,484) @c ------------------- qhspectrum -------------
../singular_texi/./d2t_singular/sing_lib.tex(,485) @node qhspectrum, Tjurina, slocus, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,486) @subsubsection qhspectrum
../singular_texi/./d2t_singular/sing_lib.tex(,487) @cindex qhspectrum
../singular_texi/./d2t_singular/sing_lib.tex(,488) @c ---content qhspectrum---
../singular_texi/./d2t_singular/sing_lib.tex(,489) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,490) 
../singular_texi/./d2t_singular/sing_lib.tex(,491) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,492) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,493) qhspectrum(f,w); f=poly, w=intvec;
../singular_texi/./d2t_singular/sing_lib.tex(,494) 
../singular_texi/./d2t_singular/sing_lib.tex(,495) @item @strong{Assume:}
../singular_texi/./d2t_singular/sing_lib.tex(,496) f is a weighted homogeneous isolated singularity w.r.t. the weights
../singular_texi/./d2t_singular/sing_lib.tex(,497) given by w; w must consist of as many positive integers as there
../singular_texi/./d2t_singular/sing_lib.tex(,498) are variables of the basering
../singular_texi/./d2t_singular/sing_lib.tex(,499) 
../singular_texi/./d2t_singular/sing_lib.tex(,500) @item @strong{Compute:}
../singular_texi/./d2t_singular/sing_lib.tex(,501) the spectral numbers of the w-homogeneous polynomial f, computed in a
../singular_texi/./d2t_singular/sing_lib.tex(,502) ring of characteristic 0
../singular_texi/./d2t_singular/sing_lib.tex(,503) 
../singular_texi/./d2t_singular/sing_lib.tex(,504) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,505) intvec d,s1,...,su where:
../singular_texi/./d2t_singular/sing_lib.tex(,506) @*d = w-degree(f) and si/d = i-th spectral-number(f)
../singular_texi/./d2t_singular/sing_lib.tex(,507) @*No return value if basering has parameters or if f is no isolated
../singular_texi/./d2t_singular/sing_lib.tex(,508) singularity, displays a warning in this case
../singular_texi/./d2t_singular/sing_lib.tex(,509) 
../singular_texi/./d2t_singular/sing_lib.tex(,510) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,511) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,512) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,513) @c computed example qhspectrum d2t_singular/sing_lib.doc:441 
../singular_texi/./d2t_singular/sing_lib.tex(,514) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,515) ring r;
../singular_texi/./d2t_singular/sing_lib.tex(,516) poly f=x3+y5+z2;
../singular_texi/./d2t_singular/sing_lib.tex(,517) intvec w=10,6,15;
../singular_texi/./d2t_singular/sing_lib.tex(,518) qhspectrum(f,w);
../singular_texi/./d2t_singular/sing_lib.tex(,519) @expansion{} 30,1,7,11,13,17,19,23,29
../singular_texi/./d2t_singular/sing_lib.tex(,520) // the spectrum numbers are:
../singular_texi/./d2t_singular/sing_lib.tex(,521) // 1/30,7/30,11/30,13/30,17/30,19/30,23/30,29/30
../singular_texi/./d2t_singular/sing_lib.tex(,522) @c end example qhspectrum d2t_singular/sing_lib.doc:441
../singular_texi/./d2t_singular/sing_lib.tex(,523) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,524) @c ---end content qhspectrum---
../singular_texi/./d2t_singular/sing_lib.tex(,525) 
../singular_texi/./d2t_singular/sing_lib.tex(,526) @c ------------------- Tjurina -------------
../singular_texi/./d2t_singular/sing_lib.tex(,527) @node Tjurina, tjurina, qhspectrum, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,528) @subsubsection Tjurina
../singular_texi/./d2t_singular/sing_lib.tex(,529) @cindex Tjurina
../singular_texi/./d2t_singular/sing_lib.tex(,530) @c ---content Tjurina---
../singular_texi/./d2t_singular/sing_lib.tex(,531) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,532) 
../singular_texi/./d2t_singular/sing_lib.tex(,533) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,534) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,535) Tjurina(id[,<any>]); id=ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,536) 
../singular_texi/./d2t_singular/sing_lib.tex(,537) @item @strong{Assume:}
../singular_texi/./d2t_singular/sing_lib.tex(,538) id=ICIS (isolated complete intersection singularity)
../singular_texi/./d2t_singular/sing_lib.tex(,539) 
../singular_texi/./d2t_singular/sing_lib.tex(,540) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,541) standard basis of Tjurina-module of id,
../singular_texi/./d2t_singular/sing_lib.tex(,542) @*of type module if id=ideal, resp. of type ideal if id=poly.
../singular_texi/./d2t_singular/sing_lib.tex(,543) If a second argument is present (of any type) return a list: @*
../singular_texi/./d2t_singular/sing_lib.tex(,544) [1] = Tjurina number,
../singular_texi/./d2t_singular/sing_lib.tex(,545) @*[2] = k-basis of miniversal deformation,
../singular_texi/./d2t_singular/sing_lib.tex(,546) @*[3] = SB of Tjurina module,
../singular_texi/./d2t_singular/sing_lib.tex(,547) @*[4] = Tjurina module
../singular_texi/./d2t_singular/sing_lib.tex(,548) 
../singular_texi/./d2t_singular/sing_lib.tex(,549) @item @strong{Display:}
../singular_texi/./d2t_singular/sing_lib.tex(,550) Tjurina number if printlevel >= 0 (default)
../singular_texi/./d2t_singular/sing_lib.tex(,551) 
../singular_texi/./d2t_singular/sing_lib.tex(,552) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,553) Tjurina number = -1 implies that id is not an ICIS
../singular_texi/./d2t_singular/sing_lib.tex(,554) 
../singular_texi/./d2t_singular/sing_lib.tex(,555) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,556) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,557) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,558) @c computed example Tjurina d2t_singular/sing_lib.doc:485 
../singular_texi/./d2t_singular/sing_lib.tex(,559) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,560) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,561) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,562) ring r     = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,563) poly f     = x5+y6+z7+xyz;        // singularity T[5,6,7]
../singular_texi/./d2t_singular/sing_lib.tex(,564) list T     = Tjurina(f,"");
../singular_texi/./d2t_singular/sing_lib.tex(,565) @expansion{} // Tjurina number = 16
../singular_texi/./d2t_singular/sing_lib.tex(,566) show(T[1]);                       // Tjurina number, should be 16
../singular_texi/./d2t_singular/sing_lib.tex(,567) @expansion{} // int, size 1
../singular_texi/./d2t_singular/sing_lib.tex(,568) @expansion{} 16
../singular_texi/./d2t_singular/sing_lib.tex(,569) show(T[2]);                       // basis of miniversal deformation
../singular_texi/./d2t_singular/sing_lib.tex(,570) @expansion{} // ideal, 16 generator(s)
../singular_texi/./d2t_singular/sing_lib.tex(,571) @expansion{} z6,
../singular_texi/./d2t_singular/sing_lib.tex(,572) @expansion{} z5,
../singular_texi/./d2t_singular/sing_lib.tex(,573) @expansion{} z4,
../singular_texi/./d2t_singular/sing_lib.tex(,574) @expansion{} z3,
../singular_texi/./d2t_singular/sing_lib.tex(,575) @expansion{} z2,
../singular_texi/./d2t_singular/sing_lib.tex(,576) @expansion{} z,
../singular_texi/./d2t_singular/sing_lib.tex(,577) @expansion{} y5,
../singular_texi/./d2t_singular/sing_lib.tex(,578) @expansion{} y4,
../singular_texi/./d2t_singular/sing_lib.tex(,579) @expansion{} y3,
../singular_texi/./d2t_singular/sing_lib.tex(,580) @expansion{} y2,
../singular_texi/./d2t_singular/sing_lib.tex(,581) @expansion{} y,
../singular_texi/./d2t_singular/sing_lib.tex(,582) @expansion{} x4,
../singular_texi/./d2t_singular/sing_lib.tex(,583) @expansion{} x3,
../singular_texi/./d2t_singular/sing_lib.tex(,584) @expansion{} x2,
../singular_texi/./d2t_singular/sing_lib.tex(,585) @expansion{} x,
../singular_texi/./d2t_singular/sing_lib.tex(,586) @expansion{} 1
../singular_texi/./d2t_singular/sing_lib.tex(,587) show(T[3]);                       // SB of Tjurina ideal
../singular_texi/./d2t_singular/sing_lib.tex(,588) @expansion{} // ideal, 6 generator(s)
../singular_texi/./d2t_singular/sing_lib.tex(,589) @expansion{} xy+7z6,
../singular_texi/./d2t_singular/sing_lib.tex(,590) @expansion{} xz+6y5,
../singular_texi/./d2t_singular/sing_lib.tex(,591) @expansion{} yz+5x4,
../singular_texi/./d2t_singular/sing_lib.tex(,592) @expansion{} 5x5-6y6,
../singular_texi/./d2t_singular/sing_lib.tex(,593) @expansion{} 6y6,
../singular_texi/./d2t_singular/sing_lib.tex(,594) @expansion{} z7
../singular_texi/./d2t_singular/sing_lib.tex(,595) show(T[4]); "";                   // Tjurina ideal
../singular_texi/./d2t_singular/sing_lib.tex(,596) @expansion{} // ideal, 4 generator(s)
../singular_texi/./d2t_singular/sing_lib.tex(,597) @expansion{} yz+5x4,
../singular_texi/./d2t_singular/sing_lib.tex(,598) @expansion{} xz+6y5,
../singular_texi/./d2t_singular/sing_lib.tex(,599) @expansion{} xy+7z6,
../singular_texi/./d2t_singular/sing_lib.tex(,600) @expansion{} xyz+x5+y6+z7
../singular_texi/./d2t_singular/sing_lib.tex(,601) @expansion{} 
../singular_texi/./d2t_singular/sing_lib.tex(,602) ideal j    = x2+y2+z2,x2+2y2+3z2;
../singular_texi/./d2t_singular/sing_lib.tex(,603) show(kbase(Tjurina(j)));          // basis of miniversal deformation
../singular_texi/./d2t_singular/sing_lib.tex(,604) @expansion{} // Tjurina number = 5
../singular_texi/./d2t_singular/sing_lib.tex(,605) @expansion{} // module, 5 generator(s)
../singular_texi/./d2t_singular/sing_lib.tex(,606) @expansion{} [z]
../singular_texi/./d2t_singular/sing_lib.tex(,607) @expansion{} [y]
../singular_texi/./d2t_singular/sing_lib.tex(,608) @expansion{} [x]
../singular_texi/./d2t_singular/sing_lib.tex(,609) @expansion{} [1]
../singular_texi/./d2t_singular/sing_lib.tex(,610) @expansion{} [0,1]
../singular_texi/./d2t_singular/sing_lib.tex(,611) hilb(Tjurina(j));                 // Hilbert series of Tjurina module
../singular_texi/./d2t_singular/sing_lib.tex(,612) @expansion{} // Tjurina number = 5
../singular_texi/./d2t_singular/sing_lib.tex(,613) @expansion{} //         2 t^0
../singular_texi/./d2t_singular/sing_lib.tex(,614) @expansion{} //        -3 t^1
../singular_texi/./d2t_singular/sing_lib.tex(,615) @expansion{} //        -3 t^2
../singular_texi/./d2t_singular/sing_lib.tex(,616) @expansion{} //         7 t^3
../singular_texi/./d2t_singular/sing_lib.tex(,617) @expansion{} //        -3 t^4
../singular_texi/./d2t_singular/sing_lib.tex(,618) @expansion{} 
../singular_texi/./d2t_singular/sing_lib.tex(,619) @expansion{} //         2 t^0
../singular_texi/./d2t_singular/sing_lib.tex(,620) @expansion{} //         3 t^1
../singular_texi/./d2t_singular/sing_lib.tex(,621) @expansion{} // dimension (local)   = 0
../singular_texi/./d2t_singular/sing_lib.tex(,622) @expansion{} // multiplicity = 5
../singular_texi/./d2t_singular/sing_lib.tex(,623) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,624) @c end example Tjurina d2t_singular/sing_lib.doc:485
../singular_texi/./d2t_singular/sing_lib.tex(,625) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,626) @c ---end content Tjurina---
../singular_texi/./d2t_singular/sing_lib.tex(,627) 
../singular_texi/./d2t_singular/sing_lib.tex(,628) @c ------------------- tjurina -------------
../singular_texi/./d2t_singular/sing_lib.tex(,629) @node tjurina, T_1, Tjurina, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,630) @subsubsection tjurina
../singular_texi/./d2t_singular/sing_lib.tex(,631) @cindex tjurina
../singular_texi/./d2t_singular/sing_lib.tex(,632) @c ---content tjurina---
../singular_texi/./d2t_singular/sing_lib.tex(,633) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,634) 
../singular_texi/./d2t_singular/sing_lib.tex(,635) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,636) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,637) tjurina(id); id=ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,638) 
../singular_texi/./d2t_singular/sing_lib.tex(,639) @item @strong{Assume:}
../singular_texi/./d2t_singular/sing_lib.tex(,640) id=ICIS (isolated complete intersection singularity)
../singular_texi/./d2t_singular/sing_lib.tex(,641) 
../singular_texi/./d2t_singular/sing_lib.tex(,642) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,643) int = Tjurina number of id
../singular_texi/./d2t_singular/sing_lib.tex(,644) 
../singular_texi/./d2t_singular/sing_lib.tex(,645) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,646) Tjurina number = -1 implies that id is not an ICIS
../singular_texi/./d2t_singular/sing_lib.tex(,647) 
../singular_texi/./d2t_singular/sing_lib.tex(,648) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,649) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,650) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,651) @c computed example tjurina d2t_singular/sing_lib.doc:527 
../singular_texi/./d2t_singular/sing_lib.tex(,652) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,653) ring r=32003,(x,y,z),(c,ds);
../singular_texi/./d2t_singular/sing_lib.tex(,654) ideal j=x2+y2+z2,x2+2y2+3z2;
../singular_texi/./d2t_singular/sing_lib.tex(,655) tjurina(j);
../singular_texi/./d2t_singular/sing_lib.tex(,656) @expansion{} 5
../singular_texi/./d2t_singular/sing_lib.tex(,657) @c end example tjurina d2t_singular/sing_lib.doc:527
../singular_texi/./d2t_singular/sing_lib.tex(,658) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,659) @c ---end content tjurina---
../singular_texi/./d2t_singular/sing_lib.tex(,660) 
../singular_texi/./d2t_singular/sing_lib.tex(,661) @c ------------------- T_1 -------------
../singular_texi/./d2t_singular/sing_lib.tex(,662) @node T_1, T_2, tjurina, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,663) @subsubsection T_1
../singular_texi/./d2t_singular/sing_lib.tex(,664) @cindex T_1
../singular_texi/./d2t_singular/sing_lib.tex(,665) @c ---content T_1---
../singular_texi/./d2t_singular/sing_lib.tex(,666) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,667) 
../singular_texi/./d2t_singular/sing_lib.tex(,668) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,669) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,670) T_1(id[,<any>]); id = ideal or poly
../singular_texi/./d2t_singular/sing_lib.tex(,671) 
../singular_texi/./d2t_singular/sing_lib.tex(,672) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,673) T_1(id): of type module/ideal if id is of type ideal/poly.
../singular_texi/./d2t_singular/sing_lib.tex(,674) We call T_1(id) the T_1-module of id. It is a std basis of the
../singular_texi/./d2t_singular/sing_lib.tex(,675) presentation of 1st order deformations of P/id, if P is the basering.
../singular_texi/./d2t_singular/sing_lib.tex(,676) If a second argument is present (of any type) return a list of
../singular_texi/./d2t_singular/sing_lib.tex(,677) 3 modules:
../singular_texi/./d2t_singular/sing_lib.tex(,678) @*[1]= T_1(id)
../singular_texi/./d2t_singular/sing_lib.tex(,679) @*[2]= generators of normal bundle of id, lifted to P
../singular_texi/./d2t_singular/sing_lib.tex(,680) @*[3]= module of relations of [2], lifted to P
../singular_texi/./d2t_singular/sing_lib.tex(,681) @*(note: transpose[3]*[2]=0 mod id)
../singular_texi/./d2t_singular/sing_lib.tex(,682) @*The list contains all non-easy objects which must be computed
../singular_texi/./d2t_singular/sing_lib.tex(,683) to get T_1(id).
../singular_texi/./d2t_singular/sing_lib.tex(,684) 
../singular_texi/./d2t_singular/sing_lib.tex(,685) @item @strong{Display:}
../singular_texi/./d2t_singular/sing_lib.tex(,686) k-dimension of T_1(id) if printlevel >= 0 (default)
../singular_texi/./d2t_singular/sing_lib.tex(,687) 
../singular_texi/./d2t_singular/sing_lib.tex(,688) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,689) T_1(id) itself is usually of minor importance. Nevertheless, from it
../singular_texi/./d2t_singular/sing_lib.tex(,690) all relevant information can be obtained. The most important are
../singular_texi/./d2t_singular/sing_lib.tex(,691) probably vdim(T_1(id)); (which computes the Tjurina number),
../singular_texi/./d2t_singular/sing_lib.tex(,692) hilb(T_1(id)); and kbase(T_1(id));
../singular_texi/./d2t_singular/sing_lib.tex(,693) @*If T_1 is called with two argument, then matrix([2])*(kbase([1]))
../singular_texi/./d2t_singular/sing_lib.tex(,694) represents a basis of 1st order semiuniversal deformation of id
../singular_texi/./d2t_singular/sing_lib.tex(,695) (use proc 'deform', to get this in a direct way).
../singular_texi/./d2t_singular/sing_lib.tex(,696) @*For a complete intersection the proc Tjurina is faster
../singular_texi/./d2t_singular/sing_lib.tex(,697) 
../singular_texi/./d2t_singular/sing_lib.tex(,698) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,699) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,700) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,701) @c computed example T_1 d2t_singular/sing_lib.doc:576 
../singular_texi/./d2t_singular/sing_lib.tex(,702) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,703) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,704) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,705) ring r     = 32003,(x,y,z),(c,ds);
../singular_texi/./d2t_singular/sing_lib.tex(,706) ideal i    = xy,xz,yz;
../singular_texi/./d2t_singular/sing_lib.tex(,707) module T   = T_1(i);
../singular_texi/./d2t_singular/sing_lib.tex(,708) @expansion{} // dim T_1 = 3
../singular_texi/./d2t_singular/sing_lib.tex(,709) vdim(T);                      // Tjurina number = dim_K(T_1), should be 3
../singular_texi/./d2t_singular/sing_lib.tex(,710) @expansion{} 3
../singular_texi/./d2t_singular/sing_lib.tex(,711) list L=T_1(i,"");
../singular_texi/./d2t_singular/sing_lib.tex(,712) @expansion{} // dim T_1 = 3
../singular_texi/./d2t_singular/sing_lib.tex(,713) module kB  = kbase(L[1]);
../singular_texi/./d2t_singular/sing_lib.tex(,714) print(L[2]*kB);               // basis of 1st order miniversal deformation
../singular_texi/./d2t_singular/sing_lib.tex(,715) @expansion{} 0,0,0,
../singular_texi/./d2t_singular/sing_lib.tex(,716) @expansion{} z,0,0,
../singular_texi/./d2t_singular/sing_lib.tex(,717) @expansion{} 0,y,z 
../singular_texi/./d2t_singular/sing_lib.tex(,718) show(L[2]);                   // presentation of normal bundle
../singular_texi/./d2t_singular/sing_lib.tex(,719) @expansion{} // module, 6 generator(s)
../singular_texi/./d2t_singular/sing_lib.tex(,720) @expansion{} [x]
../singular_texi/./d2t_singular/sing_lib.tex(,721) @expansion{} [y,z]
../singular_texi/./d2t_singular/sing_lib.tex(,722) @expansion{} [0,x,y]
../singular_texi/./d2t_singular/sing_lib.tex(,723) @expansion{} [0,z]
../singular_texi/./d2t_singular/sing_lib.tex(,724) @expansion{} [0,0,y]
../singular_texi/./d2t_singular/sing_lib.tex(,725) @expansion{} [0,0,z]
../singular_texi/./d2t_singular/sing_lib.tex(,726) print(L[3]);                  // relations of i
../singular_texi/./d2t_singular/sing_lib.tex(,727) @expansion{} z, 0,
../singular_texi/./d2t_singular/sing_lib.tex(,728) @expansion{} -y,y,
../singular_texi/./d2t_singular/sing_lib.tex(,729) @expansion{} 0, -x
../singular_texi/./d2t_singular/sing_lib.tex(,730) print(transpose(L[3])*L[2]);  // should be 0 (mod i)
../singular_texi/./d2t_singular/sing_lib.tex(,731) @expansion{} xz,0, -xy,-yz,0,  0, 
../singular_texi/./d2t_singular/sing_lib.tex(,732) @expansion{} 0, yz,0,  yz, -xy,-xz
../singular_texi/./d2t_singular/sing_lib.tex(,733) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,734) @c end example T_1 d2t_singular/sing_lib.doc:576
../singular_texi/./d2t_singular/sing_lib.tex(,735) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,736) @c ---end content T_1---
../singular_texi/./d2t_singular/sing_lib.tex(,737) 
../singular_texi/./d2t_singular/sing_lib.tex(,738) @c ------------------- T_2 -------------
../singular_texi/./d2t_singular/sing_lib.tex(,739) @node T_2, T_12, T_1, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,740) @subsubsection T_2
../singular_texi/./d2t_singular/sing_lib.tex(,741) @cindex T_2
../singular_texi/./d2t_singular/sing_lib.tex(,742) @c ---content T_2---
../singular_texi/./d2t_singular/sing_lib.tex(,743) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,744) 
../singular_texi/./d2t_singular/sing_lib.tex(,745) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,746) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,747) T_2(id[,<any>]); id = ideal
../singular_texi/./d2t_singular/sing_lib.tex(,748) 
../singular_texi/./d2t_singular/sing_lib.tex(,749) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,750) T_2(id): T_2-module of id . This is a std basis of a presentation of
../singular_texi/./d2t_singular/sing_lib.tex(,751) the module of obstructions of R=P/id, if P is the basering.
../singular_texi/./d2t_singular/sing_lib.tex(,752) If a second argument is present (of any type) return a list of
../singular_texi/./d2t_singular/sing_lib.tex(,753) 4 modules and 1 ideal:
../singular_texi/./d2t_singular/sing_lib.tex(,754) @*[1]= T_2(id)
../singular_texi/./d2t_singular/sing_lib.tex(,755) @*[2]= standard basis of id (ideal)
../singular_texi/./d2t_singular/sing_lib.tex(,756) @*[3]= module of relations of id (=1st syzygy module of id) @*
../singular_texi/./d2t_singular/sing_lib.tex(,757) [4]= presentation of syz/kos
../singular_texi/./d2t_singular/sing_lib.tex(,758) @*[5]= relations of Hom_P([3]/kos,R), lifted to P
../singular_texi/./d2t_singular/sing_lib.tex(,759) @*The list contains all non-easy objects which must be computed
../singular_texi/./d2t_singular/sing_lib.tex(,760) to get T_2(id).
../singular_texi/./d2t_singular/sing_lib.tex(,761) 
../singular_texi/./d2t_singular/sing_lib.tex(,762) @item @strong{Display:}
../singular_texi/./d2t_singular/sing_lib.tex(,763) k-dimension of T_2(id) if printlevel >= 0 (default)
../singular_texi/./d2t_singular/sing_lib.tex(,764) 
../singular_texi/./d2t_singular/sing_lib.tex(,765) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,766) The most important information is probably vdim(T_2(id)).
../singular_texi/./d2t_singular/sing_lib.tex(,767) Use proc miniversal to get equations of miniversal deformation.
../singular_texi/./d2t_singular/sing_lib.tex(,768) 
../singular_texi/./d2t_singular/sing_lib.tex(,769) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,770) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,771) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,772) @c computed example T_2 d2t_singular/sing_lib.doc:629 
../singular_texi/./d2t_singular/sing_lib.tex(,773) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,774) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,775) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,776) ring  r    = 32003,(x,y),(c,dp);
../singular_texi/./d2t_singular/sing_lib.tex(,777) ideal j    = x6-y4,x6y6,x2y4-x5y2;
../singular_texi/./d2t_singular/sing_lib.tex(,778) module T   = T_2(j);
../singular_texi/./d2t_singular/sing_lib.tex(,779) @expansion{} // dim T_2 = 6
../singular_texi/./d2t_singular/sing_lib.tex(,780) vdim(T);
../singular_texi/./d2t_singular/sing_lib.tex(,781) @expansion{} 6
../singular_texi/./d2t_singular/sing_lib.tex(,782) hilb(T);"";
../singular_texi/./d2t_singular/sing_lib.tex(,783) @expansion{} //         1 t^0
../singular_texi/./d2t_singular/sing_lib.tex(,784) @expansion{} //        -1 t^2
../singular_texi/./d2t_singular/sing_lib.tex(,785) @expansion{} //        -1 t^3
../singular_texi/./d2t_singular/sing_lib.tex(,786) @expansion{} //         1 t^5
../singular_texi/./d2t_singular/sing_lib.tex(,787) @expansion{} 
../singular_texi/./d2t_singular/sing_lib.tex(,788) @expansion{} //         1 t^0
../singular_texi/./d2t_singular/sing_lib.tex(,789) @expansion{} //         2 t^1
../singular_texi/./d2t_singular/sing_lib.tex(,790) @expansion{} //         2 t^2
../singular_texi/./d2t_singular/sing_lib.tex(,791) @expansion{} //         1 t^3
../singular_texi/./d2t_singular/sing_lib.tex(,792) @expansion{} // dimension (affine)  = 0
../singular_texi/./d2t_singular/sing_lib.tex(,793) @expansion{} // degree      = 6
../singular_texi/./d2t_singular/sing_lib.tex(,794) @expansion{} 
../singular_texi/./d2t_singular/sing_lib.tex(,795) ring r1    = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/sing_lib.tex(,796) ideal id   = xy,xz,yz;
../singular_texi/./d2t_singular/sing_lib.tex(,797) list L     = T_2(id,"");
../singular_texi/./d2t_singular/sing_lib.tex(,798) @expansion{} // dim T_2 = 0
../singular_texi/./d2t_singular/sing_lib.tex(,799) vdim(L[1]);                           // vdim of T_2
../singular_texi/./d2t_singular/sing_lib.tex(,800) @expansion{} 0
../singular_texi/./d2t_singular/sing_lib.tex(,801) print(L[3]);                          // syzygy module of id
../singular_texi/./d2t_singular/sing_lib.tex(,802) @expansion{} -z,-z,
../singular_texi/./d2t_singular/sing_lib.tex(,803) @expansion{} y, 0, 
../singular_texi/./d2t_singular/sing_lib.tex(,804) @expansion{} 0, x  
../singular_texi/./d2t_singular/sing_lib.tex(,805) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,806) @c end example T_2 d2t_singular/sing_lib.doc:629
../singular_texi/./d2t_singular/sing_lib.tex(,807) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,808) @c ---end content T_2---
../singular_texi/./d2t_singular/sing_lib.tex(,809) 
../singular_texi/./d2t_singular/sing_lib.tex(,810) @c ------------------- T_12 -------------
../singular_texi/./d2t_singular/sing_lib.tex(,811) @node T_12, tangentcone, T_2, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,812) @subsubsection T_12
../singular_texi/./d2t_singular/sing_lib.tex(,813) @cindex T_12
../singular_texi/./d2t_singular/sing_lib.tex(,814) @c ---content T_12---
../singular_texi/./d2t_singular/sing_lib.tex(,815) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,816) 
../singular_texi/./d2t_singular/sing_lib.tex(,817) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,818) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,819) T_12(i[,any]); i = ideal
../singular_texi/./d2t_singular/sing_lib.tex(,820) 
../singular_texi/./d2t_singular/sing_lib.tex(,821) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,822) T_12(i): list of 2 modules: @*
../singular_texi/./d2t_singular/sing_lib.tex(,823) * standard basis of T_1-module =T_1(i), 1st order deformations @*
../singular_texi/./d2t_singular/sing_lib.tex(,824) * standard basis of T_2-module =T_2(i), obstructions of R=P/i @*
../singular_texi/./d2t_singular/sing_lib.tex(,825) If a second argument is present (of any type) return a list of
../singular_texi/./d2t_singular/sing_lib.tex(,826) 9 modules, matrices, integers: @*
../singular_texi/./d2t_singular/sing_lib.tex(,827) [1]= standard basis of T_1-module
../singular_texi/./d2t_singular/sing_lib.tex(,828) @*[2]= standard basis of T_2-module
../singular_texi/./d2t_singular/sing_lib.tex(,829) @*[3]= vdim of T_1
../singular_texi/./d2t_singular/sing_lib.tex(,830) @*[4]= vdim of T_2
../singular_texi/./d2t_singular/sing_lib.tex(,831) @*[5]= matrix, whose cols present infinitesimal deformations @*
../singular_texi/./d2t_singular/sing_lib.tex(,832) [6]= matrix, whose cols are generators of relations of i(=syz(i)) @*
../singular_texi/./d2t_singular/sing_lib.tex(,833) [7]= matrix, presenting Hom_P(syz/kos,R), lifted to P @*
../singular_texi/./d2t_singular/sing_lib.tex(,834) [8]= presentation of T_1-module, no std basis
../singular_texi/./d2t_singular/sing_lib.tex(,835) @*[9]= presentation of T_2-module, no std basis
../singular_texi/./d2t_singular/sing_lib.tex(,836) 
../singular_texi/./d2t_singular/sing_lib.tex(,837) @item @strong{Display:}
../singular_texi/./d2t_singular/sing_lib.tex(,838) k-dimension of T_1 and T_2 if printlevel >= 0 (default)
../singular_texi/./d2t_singular/sing_lib.tex(,839) 
../singular_texi/./d2t_singular/sing_lib.tex(,840) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,841) Use proc miniversal from deform.lib to get miniversal deformation of i,
../singular_texi/./d2t_singular/sing_lib.tex(,842) the list contains all objects used by proc miniversal
../singular_texi/./d2t_singular/sing_lib.tex(,843) 
../singular_texi/./d2t_singular/sing_lib.tex(,844) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,845) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,846) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,847) @c computed example T_12 d2t_singular/sing_lib.doc:685 
../singular_texi/./d2t_singular/sing_lib.tex(,848) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,849) int p      = printlevel;
../singular_texi/./d2t_singular/sing_lib.tex(,850) printlevel = 1;
../singular_texi/./d2t_singular/sing_lib.tex(,851) ring r     = 200,(x,y,z,u,v),(c,ws(4,3,2,3,4));
../singular_texi/./d2t_singular/sing_lib.tex(,852) ideal i    = xz-y2,yz2-xu,xv-yzu,yu-z3,z2u-yv,zv-u2;
../singular_texi/./d2t_singular/sing_lib.tex(,853) //a cyclic quotient singularity
../singular_texi/./d2t_singular/sing_lib.tex(,854) list L     = T_12(i,1);
../singular_texi/./d2t_singular/sing_lib.tex(,855) @expansion{} // dim T_1 = 5
../singular_texi/./d2t_singular/sing_lib.tex(,856) @expansion{} // dim T_2 = 3
../singular_texi/./d2t_singular/sing_lib.tex(,857) print(L[5]);             //matrix of infin. deformations
../singular_texi/./d2t_singular/sing_lib.tex(,858) @expansion{} 0,  0,  0,  0,  0,  
../singular_texi/./d2t_singular/sing_lib.tex(,859) @expansion{} yz, y,  z2, 0,  0,  
../singular_texi/./d2t_singular/sing_lib.tex(,860) @expansion{} -z3,-z2,-zu,yz, yu, 
../singular_texi/./d2t_singular/sing_lib.tex(,861) @expansion{} -z2,-z, -u, 0,  0,  
../singular_texi/./d2t_singular/sing_lib.tex(,862) @expansion{} zu, u,  v,  -z2,-zu,
../singular_texi/./d2t_singular/sing_lib.tex(,863) @expansion{} 0,  0,  0,  u,  v   
../singular_texi/./d2t_singular/sing_lib.tex(,864) printlevel = p;
../singular_texi/./d2t_singular/sing_lib.tex(,865) @c end example T_12 d2t_singular/sing_lib.doc:685
../singular_texi/./d2t_singular/sing_lib.tex(,866) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,867) @c ---end content T_12---
../singular_texi/./d2t_singular/sing_lib.tex(,868) 
../singular_texi/./d2t_singular/sing_lib.tex(,869) @c ------------------- tangentcone -------------
../singular_texi/./d2t_singular/sing_lib.tex(,870) @node tangentcone,, T_12, sing_lib
../singular_texi/./d2t_singular/sing_lib.tex(,871) @subsubsection tangentcone
../singular_texi/./d2t_singular/sing_lib.tex(,872) @cindex tangentcone
../singular_texi/./d2t_singular/sing_lib.tex(,873) @c ---content tangentcone---
../singular_texi/./d2t_singular/sing_lib.tex(,874) Procedure from library @code{sing.lib} (@pxref{sing_lib}).
../singular_texi/./d2t_singular/sing_lib.tex(,875) 
../singular_texi/./d2t_singular/sing_lib.tex(,876) @table @asis
../singular_texi/./d2t_singular/sing_lib.tex(,877) @item @strong{Usage:}
../singular_texi/./d2t_singular/sing_lib.tex(,878) tangentcone(id [,n]); id = ideal, n = int
../singular_texi/./d2t_singular/sing_lib.tex(,879) 
../singular_texi/./d2t_singular/sing_lib.tex(,880) @item @strong{Return:}
../singular_texi/./d2t_singular/sing_lib.tex(,881) the tangent cone of id
../singular_texi/./d2t_singular/sing_lib.tex(,882) 
../singular_texi/./d2t_singular/sing_lib.tex(,883) @item @strong{Note:}
../singular_texi/./d2t_singular/sing_lib.tex(,884) the procedure works for any monomial ordering.
../singular_texi/./d2t_singular/sing_lib.tex(,885) @*If n=0 use std w.r.t. local ordering ds, if n=1 use locstd
../singular_texi/./d2t_singular/sing_lib.tex(,886) 
../singular_texi/./d2t_singular/sing_lib.tex(,887) @end table
../singular_texi/./d2t_singular/sing_lib.tex(,888) @strong{Example:}
../singular_texi/./d2t_singular/sing_lib.tex(,889) @smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,890) @c computed example tangentcone d2t_singular/sing_lib.doc:720 
../singular_texi/./d2t_singular/sing_lib.tex(,891) LIB "sing.lib";
../singular_texi/./d2t_singular/sing_lib.tex(,892) ring R = 0,(x,y,z),ds;
../singular_texi/./d2t_singular/sing_lib.tex(,893) ideal i  = 7xyz+z5,x2+y3+z7,5z5+y5;
../singular_texi/./d2t_singular/sing_lib.tex(,894) tangentcone(i);
../singular_texi/./d2t_singular/sing_lib.tex(,895) @expansion{} _[1]=x2
../singular_texi/./d2t_singular/sing_lib.tex(,896) @expansion{} _[2]=7xyz
../singular_texi/./d2t_singular/sing_lib.tex(,897) @expansion{} _[3]=y5+5z5
../singular_texi/./d2t_singular/sing_lib.tex(,898) @expansion{} _[4]=7y4z
../singular_texi/./d2t_singular/sing_lib.tex(,899) @expansion{} _[5]=35z6
../singular_texi/./d2t_singular/sing_lib.tex(,900) @c end example tangentcone d2t_singular/sing_lib.doc:720
../singular_texi/./d2t_singular/sing_lib.tex(,901) @end smallexample
../singular_texi/./d2t_singular/sing_lib.tex(,902) @c ---end content tangentcone---
../singular_texi/singular.tex(,490) @c ---------------------------------------------------------
../singular_texi/singular.tex(,491) @node spcurve_lib, spectrum_lib, sing_lib, Singularities
../singular_texi/singular.tex(,492) @subsection spcurve_lib
../singular_texi/singular.tex(,493) @c include of docu for spcurve.lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/spcurve_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/spcurve_lib.doc
../singular_texi/./d2t_singular/spcurve_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/spcurve_lib.doc INSTEAD
../singular_texi/./d2t_singular/spcurve_lib.tex(,4) @c library version: (1.15.2.1,2002/02/20)
../singular_texi/./d2t_singular/spcurve_lib.tex(,5) @c library file: ../Singular/LIB/spcurve.lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,6) @cindex spcurve.lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,7) @cindex spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,10) spcurve.lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,12)     Deformations and Invariants of CM-codim 2 Singularities
../singular_texi/./d2t_singular/spcurve_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,14) Anne Fruehbis-Krueger, anne@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/spcurve_lib.tex(,15) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,16) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,17) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,19) @menu
../singular_texi/./d2t_singular/spcurve_lib.tex(,20) * isCMcod2:: presentation matrix of the ideal i, if i is CM
../singular_texi/./d2t_singular/spcurve_lib.tex(,21) * CMtype:: Cohen-Macaulay type of the ideal i
../singular_texi/./d2t_singular/spcurve_lib.tex(,22) * matrixT1:: 1st order deformation T1 in matrix description
../singular_texi/./d2t_singular/spcurve_lib.tex(,23) * semiCMcod2:: semiuniversal deformation of maximal minors of M
../singular_texi/./d2t_singular/spcurve_lib.tex(,24) * discr:: discriminant of semiuniversal deformation
../singular_texi/./d2t_singular/spcurve_lib.tex(,25) * qhmatrix:: weights if M is quasihomogeneous
../singular_texi/./d2t_singular/spcurve_lib.tex(,26) * relweight:: relative matrix weight of N w.r.t. weights (W,a)
../singular_texi/./d2t_singular/spcurve_lib.tex(,27) * posweight:: deformation of coker(M) of non-negative weight
../singular_texi/./d2t_singular/spcurve_lib.tex(,28) * KSpencerKernel:: kernel of the Kodaira-Spencer map
../singular_texi/./d2t_singular/spcurve_lib.tex(,29) @end menu
../singular_texi/./d2t_singular/spcurve_lib.tex(,30) @c ---end content LibInfo---
../singular_texi/./d2t_singular/spcurve_lib.tex(,31) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,32) @c ------------------- isCMcod2 -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,33) @node isCMcod2, CMtype,, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,34) @subsubsection isCMcod2
../singular_texi/./d2t_singular/spcurve_lib.tex(,35) @cindex isCMcod2
../singular_texi/./d2t_singular/spcurve_lib.tex(,36) @c ---content isCMcod2---
../singular_texi/./d2t_singular/spcurve_lib.tex(,37) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,38) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,39) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,40) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,41) isCMcod2(i); i an ideal
../singular_texi/./d2t_singular/spcurve_lib.tex(,42) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,43) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,44) presentation matrix of i, if i is Cohen-Macaulay of codimension 2 @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,45) a zero matrix otherwise
../singular_texi/./d2t_singular/spcurve_lib.tex(,46) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,47) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,48) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,49) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,50) @c computed example isCMcod2 d2t_singular/spcurve_lib.doc:48 
../singular_texi/./d2t_singular/spcurve_lib.tex(,51) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,52) ring r=32003,(x,y,z),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,53) ideal i=xz,yz,x^3-y^4;
../singular_texi/./d2t_singular/spcurve_lib.tex(,54) print(isCMcod2(i));
../singular_texi/./d2t_singular/spcurve_lib.tex(,55) @expansion{} -y,-x2,
../singular_texi/./d2t_singular/spcurve_lib.tex(,56) @expansion{} x, y3, 
../singular_texi/./d2t_singular/spcurve_lib.tex(,57) @expansion{} 0, z   
../singular_texi/./d2t_singular/spcurve_lib.tex(,58) @c end example isCMcod2 d2t_singular/spcurve_lib.doc:48
../singular_texi/./d2t_singular/spcurve_lib.tex(,59) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,60) @c ---end content isCMcod2---
../singular_texi/./d2t_singular/spcurve_lib.tex(,61) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,62) @c ------------------- CMtype -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,63) @node CMtype, matrixT1, isCMcod2, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,64) @subsubsection CMtype
../singular_texi/./d2t_singular/spcurve_lib.tex(,65) @cindex CMtype
../singular_texi/./d2t_singular/spcurve_lib.tex(,66) @c ---content CMtype---
../singular_texi/./d2t_singular/spcurve_lib.tex(,67) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,68) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,69) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,70) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,71) CMtype(i); i an ideal, CM of codimension 2
../singular_texi/./d2t_singular/spcurve_lib.tex(,72) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,73) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,74) Cohen-Macaulay type of i (integer)
../singular_texi/./d2t_singular/spcurve_lib.tex(,75) @*(-1, if i is not Cohen-Macaulay of codimension 2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,76) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,77) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,78) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,79) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,80) @c computed example CMtype d2t_singular/spcurve_lib.doc:75 
../singular_texi/./d2t_singular/spcurve_lib.tex(,81) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,82) ring r=32003,(x,y,z),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,83) ideal i=xy,xz,yz;
../singular_texi/./d2t_singular/spcurve_lib.tex(,84) CMtype(i);
../singular_texi/./d2t_singular/spcurve_lib.tex(,85) @expansion{} 2
../singular_texi/./d2t_singular/spcurve_lib.tex(,86) @c end example CMtype d2t_singular/spcurve_lib.doc:75
../singular_texi/./d2t_singular/spcurve_lib.tex(,87) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,88) @c ---end content CMtype---
../singular_texi/./d2t_singular/spcurve_lib.tex(,89) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,90) @c ------------------- matrixT1 -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,91) @node matrixT1, semiCMcod2, CMtype, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,92) @subsubsection matrixT1
../singular_texi/./d2t_singular/spcurve_lib.tex(,93) @cindex matrixT1
../singular_texi/./d2t_singular/spcurve_lib.tex(,94) @c ---content matrixT1---
../singular_texi/./d2t_singular/spcurve_lib.tex(,95) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,96) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,97) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,98) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,99) matrixT1(M,n); M matrix, n integer
../singular_texi/./d2t_singular/spcurve_lib.tex(,100) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,101) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,102) M is a presentation matrix of an ideal i, CM of codimension 2;
../singular_texi/./d2t_singular/spcurve_lib.tex(,103) consider i as a family of ideals in a ring in the first n
../singular_texi/./d2t_singular/spcurve_lib.tex(,104) variables where the remaining variables are considered as
../singular_texi/./d2t_singular/spcurve_lib.tex(,105) parameters
../singular_texi/./d2t_singular/spcurve_lib.tex(,106) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,107) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,108) list consisting of the k x (k+1) matrix M and a module K_M such that
../singular_texi/./d2t_singular/spcurve_lib.tex(,109) T1=Mat(k,k+1;R)/K_M is the space of first order deformations of i
../singular_texi/./d2t_singular/spcurve_lib.tex(,110) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,111) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,112) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,113) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,114) @c computed example matrixT1 d2t_singular/spcurve_lib.doc:108 
../singular_texi/./d2t_singular/spcurve_lib.tex(,115) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,116) ring r=32003,(x(1),x(2),x(3)),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,117) ideal curve=x(1)*x(2),x(1)*x(3),x(2)*x(3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,118) matrix M=isCMcod2(curve);
../singular_texi/./d2t_singular/spcurve_lib.tex(,119) matrixT1(M,3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,120) @expansion{} [1]:
../singular_texi/./d2t_singular/spcurve_lib.tex(,121) @expansion{}    _[1,1]=0
../singular_texi/./d2t_singular/spcurve_lib.tex(,122) @expansion{}    _[1,2]=-x(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,123) @expansion{}    _[2,1]=-x(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,124) @expansion{}    _[2,2]=x(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,125) @expansion{}    _[3,1]=x(1)
../singular_texi/./d2t_singular/spcurve_lib.tex(,126) @expansion{}    _[3,2]=0
../singular_texi/./d2t_singular/spcurve_lib.tex(,127) @expansion{} [2]:
../singular_texi/./d2t_singular/spcurve_lib.tex(,128) @expansion{}    _[1]=gen(5)
../singular_texi/./d2t_singular/spcurve_lib.tex(,129) @expansion{}    _[2]=gen(4)-gen(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,130) @expansion{}    _[3]=-gen(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,131) @expansion{}    _[4]=x(1)*gen(5)-x(2)*gen(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,132) @expansion{}    _[5]=x(1)*gen(6)-x(2)*gen(4)
../singular_texi/./d2t_singular/spcurve_lib.tex(,133) @expansion{}    _[6]=x(2)*gen(3)-x(3)*gen(1)
../singular_texi/./d2t_singular/spcurve_lib.tex(,134) @expansion{}    _[7]=x(2)*gen(4)-x(3)*gen(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,135) @expansion{}    _[8]=-x(3)*gen(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,136) @expansion{}    _[9]=x(2)*gen(2)-x(2)*gen(1)
../singular_texi/./d2t_singular/spcurve_lib.tex(,137) @expansion{}    _[10]=x(1)*gen(1)
../singular_texi/./d2t_singular/spcurve_lib.tex(,138) @expansion{}    _[11]=-x(3)*gen(4)
../singular_texi/./d2t_singular/spcurve_lib.tex(,139) @expansion{}    _[12]=x(2)*gen(4)-x(2)*gen(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,140) @expansion{}    _[13]=x(1)*gen(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,141) @expansion{}    _[14]=-x(3)*gen(6)
../singular_texi/./d2t_singular/spcurve_lib.tex(,142) @expansion{}    _[15]=x(2)*gen(6)-x(2)*gen(5)
../singular_texi/./d2t_singular/spcurve_lib.tex(,143) @expansion{}    _[16]=x(1)*gen(5)
../singular_texi/./d2t_singular/spcurve_lib.tex(,144) @c end example matrixT1 d2t_singular/spcurve_lib.doc:108
../singular_texi/./d2t_singular/spcurve_lib.tex(,145) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,146) @c ---end content matrixT1---
../singular_texi/./d2t_singular/spcurve_lib.tex(,147) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,148) @c ------------------- semiCMcod2 -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,149) @node semiCMcod2, discr, matrixT1, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,150) @subsubsection semiCMcod2
../singular_texi/./d2t_singular/spcurve_lib.tex(,151) @cindex semiCMcod2
../singular_texi/./d2t_singular/spcurve_lib.tex(,152) @c ---content semiCMcod2---
../singular_texi/./d2t_singular/spcurve_lib.tex(,153) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,154) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,155) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,156) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,157) semiCMcod2(M,t1); M matrix, t1 module
../singular_texi/./d2t_singular/spcurve_lib.tex(,158) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,159) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,160) M is a presentation matrix of an ideal i, CM of codimension 2,
../singular_texi/./d2t_singular/spcurve_lib.tex(,161) and t1 is a presentation of the space of first order deformations
../singular_texi/./d2t_singular/spcurve_lib.tex(,162) of i ((M,t1) as returned by the procedure matrixT1)
../singular_texi/./d2t_singular/spcurve_lib.tex(,163) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,164) @item @strong{Create:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,165) new basering with name rneu
../singular_texi/./d2t_singular/spcurve_lib.tex(,166) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,167) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,168) ideal in rneu describing the semiuniversal deformation of i
../singular_texi/./d2t_singular/spcurve_lib.tex(,169) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,170) @item @strong{Note:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,171) The current basering should not contain any variables named
../singular_texi/./d2t_singular/spcurve_lib.tex(,172) A(j) where j is some integer!
../singular_texi/./d2t_singular/spcurve_lib.tex(,173) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,174) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,175) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,176) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,177) @c computed example semiCMcod2 d2t_singular/spcurve_lib.doc:147 
../singular_texi/./d2t_singular/spcurve_lib.tex(,178) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,179) ring r=32003,(x(1),x(2),x(3)),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,180) ideal curve=x(1)*x(2),x(1)*x(3),x(2)*x(3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,181) matrix M=isCMcod2(curve);
../singular_texi/./d2t_singular/spcurve_lib.tex(,182) list l=matrixT1(M,3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,183) semiCMcod2(l[1],std(l[2]));
../singular_texi/./d2t_singular/spcurve_lib.tex(,184) @expansion{} _[1]=A(2)*A(3)-x(2)*A(3)-x(1)*x(2)
../singular_texi/./d2t_singular/spcurve_lib.tex(,185) @expansion{} _[2]=A(1)*A(3)+x(1)*x(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,186) @expansion{} _[3]=-x(2)*A(1)-x(3)*A(2)+x(2)*x(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,187) @c end example semiCMcod2 d2t_singular/spcurve_lib.doc:147
../singular_texi/./d2t_singular/spcurve_lib.tex(,188) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,189) @c ---end content semiCMcod2---
../singular_texi/./d2t_singular/spcurve_lib.tex(,190) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,191) @c ------------------- discr -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,192) @node discr, qhmatrix, semiCMcod2, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,193) @subsubsection discr
../singular_texi/./d2t_singular/spcurve_lib.tex(,194) @cindex discr
../singular_texi/./d2t_singular/spcurve_lib.tex(,195) @c ---content discr---
../singular_texi/./d2t_singular/spcurve_lib.tex(,196) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,197) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,198) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,199) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,200) discr(sem,n); sem ideal, n integer
../singular_texi/./d2t_singular/spcurve_lib.tex(,201) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,202) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,203) sem is the versal deformation of an ideal of codimension 2. @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,204) the first n variables of the ring are treated as variables
../singular_texi/./d2t_singular/spcurve_lib.tex(,205) all the others as parameters
../singular_texi/./d2t_singular/spcurve_lib.tex(,206) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,207) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,208) ideal describing the discriminant
../singular_texi/./d2t_singular/spcurve_lib.tex(,209) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,210) @item @strong{Note:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,211) This is not a powerful algorithm!
../singular_texi/./d2t_singular/spcurve_lib.tex(,212) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,213) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,214) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,215) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,216) @c computed example discr d2t_singular/spcurve_lib.doc:183 
../singular_texi/./d2t_singular/spcurve_lib.tex(,217) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,218) ring r=32003,(x(1),x(2),x(3)),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,219) ideal curve=x(1)*x(2),x(1)*x(3),x(2)*x(3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,220) matrix M=isCMcod2(curve);
../singular_texi/./d2t_singular/spcurve_lib.tex(,221) list l=matrixT1(M,3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,222) def sem=semiCMcod2(l[1],std(l[2]));
../singular_texi/./d2t_singular/spcurve_lib.tex(,223) basering;
../singular_texi/./d2t_singular/spcurve_lib.tex(,224) @expansion{} //   characteristic : 32003
../singular_texi/./d2t_singular/spcurve_lib.tex(,225) @expansion{} //   number of vars : 6
../singular_texi/./d2t_singular/spcurve_lib.tex(,226) @expansion{} //        block   1 : ordering ds
../singular_texi/./d2t_singular/spcurve_lib.tex(,227) @expansion{} //                  : names    x(1) x(2) x(3) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,228) @expansion{} //        block   2 : ordering dp
../singular_texi/./d2t_singular/spcurve_lib.tex(,229) @expansion{} //                  : names    A(1) A(2) A(3) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,230) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/spcurve_lib.tex(,231) discr(sem,3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,232) @expansion{} _[1]=A(1)*A(2)*A(3)
../singular_texi/./d2t_singular/spcurve_lib.tex(,233) @c end example discr d2t_singular/spcurve_lib.doc:183
../singular_texi/./d2t_singular/spcurve_lib.tex(,234) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,235) @c ---end content discr---
../singular_texi/./d2t_singular/spcurve_lib.tex(,236) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,237) @c ------------------- qhmatrix -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,238) @node qhmatrix, relweight, discr, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,239) @subsubsection qhmatrix
../singular_texi/./d2t_singular/spcurve_lib.tex(,240) @cindex qhmatrix
../singular_texi/./d2t_singular/spcurve_lib.tex(,241) @c ---content qhmatrix---
../singular_texi/./d2t_singular/spcurve_lib.tex(,242) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,243) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,244) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,245) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,246) qhmatrix(M); M a k x (k+1) matrix
../singular_texi/./d2t_singular/spcurve_lib.tex(,247) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,248) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,249) list, consisting of an integer vector containing the weights of
../singular_texi/./d2t_singular/spcurve_lib.tex(,250) the variables of the basering and an integer matrix giving the
../singular_texi/./d2t_singular/spcurve_lib.tex(,251) weights of the entries of M, if M is quasihomogeneous;
../singular_texi/./d2t_singular/spcurve_lib.tex(,252) zero integer vector and zero integer matrix, if M is not
../singular_texi/./d2t_singular/spcurve_lib.tex(,253) quasihomogeneous, i.e. does not allow row and column weights
../singular_texi/./d2t_singular/spcurve_lib.tex(,254) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,255) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,256) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,257) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,258) @c computed example qhmatrix d2t_singular/spcurve_lib.doc:217 
../singular_texi/./d2t_singular/spcurve_lib.tex(,259) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,260) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,261) matrix M[3][2]=z,0,y,x,x^3,y;
../singular_texi/./d2t_singular/spcurve_lib.tex(,262) qhmatrix(M);
../singular_texi/./d2t_singular/spcurve_lib.tex(,263) @expansion{} [1]:
../singular_texi/./d2t_singular/spcurve_lib.tex(,264) @expansion{}    1,2,1
../singular_texi/./d2t_singular/spcurve_lib.tex(,265) @expansion{} [2]:
../singular_texi/./d2t_singular/spcurve_lib.tex(,266) @expansion{}    1,0,
../singular_texi/./d2t_singular/spcurve_lib.tex(,267) @expansion{}    2,1,
../singular_texi/./d2t_singular/spcurve_lib.tex(,268) @expansion{}    3,2 
../singular_texi/./d2t_singular/spcurve_lib.tex(,269) pmat(M);
../singular_texi/./d2t_singular/spcurve_lib.tex(,270) @expansion{} z,  0, 
../singular_texi/./d2t_singular/spcurve_lib.tex(,271) @expansion{} y,  x, 
../singular_texi/./d2t_singular/spcurve_lib.tex(,272) @expansion{} x3, y
../singular_texi/./d2t_singular/spcurve_lib.tex(,273) @c end example qhmatrix d2t_singular/spcurve_lib.doc:217
../singular_texi/./d2t_singular/spcurve_lib.tex(,274) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,275) @c ---end content qhmatrix---
../singular_texi/./d2t_singular/spcurve_lib.tex(,276) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,277) @c ------------------- relweight -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,278) @node relweight, posweight, qhmatrix, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,279) @subsubsection relweight
../singular_texi/./d2t_singular/spcurve_lib.tex(,280) @cindex relweight
../singular_texi/./d2t_singular/spcurve_lib.tex(,281) @c ---content relweight---
../singular_texi/./d2t_singular/spcurve_lib.tex(,282) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,283) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,284) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,285) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,286) N is a non-zero matrix
../singular_texi/./d2t_singular/spcurve_lib.tex(,287) @*W is an integer matrix of the same size as N
../singular_texi/./d2t_singular/spcurve_lib.tex(,288) @*a is an integer vector giving the weights of the variables
../singular_texi/./d2t_singular/spcurve_lib.tex(,289) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,290) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,291) integer, max(a-weighted order(N_ij) - W_ij | all entries ij) @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,292) string "ERROR" if sizes do not match
../singular_texi/./d2t_singular/spcurve_lib.tex(,293) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,294) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,295) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,296) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,297) @c computed example relweight d2t_singular/spcurve_lib.doc:247 
../singular_texi/./d2t_singular/spcurve_lib.tex(,298) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,299) ring r=32003,(x,y,z),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,300) matrix N[2][3]=z,0,y,x,x^3,y;
../singular_texi/./d2t_singular/spcurve_lib.tex(,301) intmat W[2][3]=1,1,1,1,1,1;
../singular_texi/./d2t_singular/spcurve_lib.tex(,302) intvec a=1,1,1;
../singular_texi/./d2t_singular/spcurve_lib.tex(,303) relweight(N,W,a);
../singular_texi/./d2t_singular/spcurve_lib.tex(,304) @expansion{} 2
../singular_texi/./d2t_singular/spcurve_lib.tex(,305) @c end example relweight d2t_singular/spcurve_lib.doc:247
../singular_texi/./d2t_singular/spcurve_lib.tex(,306) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,307) @c ---end content relweight---
../singular_texi/./d2t_singular/spcurve_lib.tex(,308) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,309) @c ------------------- posweight -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,310) @node posweight, KSpencerKernel, relweight, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,311) @subsubsection posweight
../singular_texi/./d2t_singular/spcurve_lib.tex(,312) @cindex posweight
../singular_texi/./d2t_singular/spcurve_lib.tex(,313) @c ---content posweight---
../singular_texi/./d2t_singular/spcurve_lib.tex(,314) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,315) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,316) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,317) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,318) posweight(M,t1,n[,s]); M matrix, t1 module, n int, s string @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,319) n=0 : all deformations of non-negative weight @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,320) n=1 : only non-constant deformations of non-negative weight @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,321) n=2 : all deformations of positive weight @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,322) As an optional parameter the name of a new ring may be
../singular_texi/./d2t_singular/spcurve_lib.tex(,323) specified.
../singular_texi/./d2t_singular/spcurve_lib.tex(,324) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,325) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,326) M is a presentation matrix of a Cohen-Macaulay codimension 2
../singular_texi/./d2t_singular/spcurve_lib.tex(,327) ideal and t1 is its T1 space in matrix notation
../singular_texi/./d2t_singular/spcurve_lib.tex(,328) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,329) @item @strong{Create:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,330) new basering (default name: rneu); a different name for this ring
../singular_texi/./d2t_singular/spcurve_lib.tex(,331) may be given as a 4th parameter
../singular_texi/./d2t_singular/spcurve_lib.tex(,332) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,333) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,334) list, consisting of a presentation matrix describing the deformation
../singular_texi/./d2t_singular/spcurve_lib.tex(,335) given by the generators of T1 of non-negative/positive weight
../singular_texi/./d2t_singular/spcurve_lib.tex(,336) and the weight vector for the new variables
../singular_texi/./d2t_singular/spcurve_lib.tex(,337) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,338) @item @strong{Note:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,339) The current basering should not contain any variables named
../singular_texi/./d2t_singular/spcurve_lib.tex(,340) T(i) where i is some integer!
../singular_texi/./d2t_singular/spcurve_lib.tex(,341) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,342) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,343) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,344) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,345) @c computed example posweight d2t_singular/spcurve_lib.doc:294 
../singular_texi/./d2t_singular/spcurve_lib.tex(,346) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,347) ring r=32003,(x(1),x(2),x(3)),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,348) ideal curve=(x(3)-x(1)^2)*x(3),(x(3)-x(1)^2)*x(2),x(2)^2-x(1)^7*x(3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,349) matrix M=isCMcod2(curve);
../singular_texi/./d2t_singular/spcurve_lib.tex(,350) list l=matrixT1(M,3);
../singular_texi/./d2t_singular/spcurve_lib.tex(,351) list li=posweight(l[1],std(l[2]),0);
../singular_texi/./d2t_singular/spcurve_lib.tex(,352) pmat(li[1]);
../singular_texi/./d2t_singular/spcurve_lib.tex(,353) @expansion{} T(2)+x(1)*T(1), -x(3)+x(1)^2, 
../singular_texi/./d2t_singular/spcurve_lib.tex(,354) @expansion{} -x(3),          x(2),         
../singular_texi/./d2t_singular/spcurve_lib.tex(,355) @expansion{} x(2),           -x(1)^7
../singular_texi/./d2t_singular/spcurve_lib.tex(,356) li[2];
../singular_texi/./d2t_singular/spcurve_lib.tex(,357) @expansion{} 3,1
../singular_texi/./d2t_singular/spcurve_lib.tex(,358) @c end example posweight d2t_singular/spcurve_lib.doc:294
../singular_texi/./d2t_singular/spcurve_lib.tex(,359) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,360) @c ---end content posweight---
../singular_texi/./d2t_singular/spcurve_lib.tex(,361) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,362) @c ------------------- KSpencerKernel -------------
../singular_texi/./d2t_singular/spcurve_lib.tex(,363) @node KSpencerKernel,, posweight, spcurve_lib
../singular_texi/./d2t_singular/spcurve_lib.tex(,364) @subsubsection KSpencerKernel
../singular_texi/./d2t_singular/spcurve_lib.tex(,365) @cindex KSpencerKernel
../singular_texi/./d2t_singular/spcurve_lib.tex(,366) @c ---content KSpencerKernel---
../singular_texi/./d2t_singular/spcurve_lib.tex(,367) Procedure from library @code{spcurve.lib} (@pxref{spcurve_lib}).
../singular_texi/./d2t_singular/spcurve_lib.tex(,368) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,369) @table @asis
../singular_texi/./d2t_singular/spcurve_lib.tex(,370) @item @strong{Usage:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,371) KSpencerKernel(M[,s][,v]); M matrix, s string, v intvec @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,372) optional parameters (please specify in this order, if both are
../singular_texi/./d2t_singular/spcurve_lib.tex(,373) present):
../singular_texi/./d2t_singular/spcurve_lib.tex(,374) @** s = first of the names of the new rings
../singular_texi/./d2t_singular/spcurve_lib.tex(,375) @*e.g. "R" leads to ring names R and R1
../singular_texi/./d2t_singular/spcurve_lib.tex(,376) @** v of size n(n+1) leads to the following module ordering @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,377) gen(v[1]) > gen(v[2]) > ... > gen(v[n(n+1)]) where the matrix
../singular_texi/./d2t_singular/spcurve_lib.tex(,378) entry ij corresponds to gen((i-1)*n+j)
../singular_texi/./d2t_singular/spcurve_lib.tex(,379) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,380) @item @strong{Assume:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,381) M is a quasihomogeneous n x (n+1) matrix where the n minors define
../singular_texi/./d2t_singular/spcurve_lib.tex(,382) an isolated space curve singularity
../singular_texi/./d2t_singular/spcurve_lib.tex(,383) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,384) @item @strong{Create:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,385) 2 new rings (default names: rneu and reneu)
../singular_texi/./d2t_singular/spcurve_lib.tex(,386) @*different ring names may be specified as a 2nd parameter
../singular_texi/./d2t_singular/spcurve_lib.tex(,387) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,388) @item @strong{Return:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,389) coefficient matrix representing the kernel of the Kodaira-
../singular_texi/./d2t_singular/spcurve_lib.tex(,390) Spencer map of the family of non-negative deformations
../singular_texi/./d2t_singular/spcurve_lib.tex(,391) having the given singularity as special fibre
../singular_texi/./d2t_singular/spcurve_lib.tex(,392) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,393) @item @strong{Note:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,394) * the initial basering should not contain variables with name
../singular_texi/./d2t_singular/spcurve_lib.tex(,395) e(i) or T(i), since those variable names will internally be
../singular_texi/./d2t_singular/spcurve_lib.tex(,396) used by the script
../singular_texi/./d2t_singular/spcurve_lib.tex(,397) @** setting an intvec with 5 entries and name watchProgress
../singular_texi/./d2t_singular/spcurve_lib.tex(,398) shows the progress of the computations: @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,399) watchProgress[1]>0 => option(prot) in groebner commands @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,400) watchProgress[2]>0 => trace output for highcorner @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,401) watchProgress[3]>0 => output of deformed matrix @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,402) watchProgress[4]>0 => result of elimination step @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,403) watchProgress[4]>1 => trace output of multiplications with xyz
../singular_texi/./d2t_singular/spcurve_lib.tex(,404) and subsequent reductions @*
../singular_texi/./d2t_singular/spcurve_lib.tex(,405) watchProgress[5]>0 => matrix representing the kernel using print
../singular_texi/./d2t_singular/spcurve_lib.tex(,406) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,407) @end table
../singular_texi/./d2t_singular/spcurve_lib.tex(,408) @strong{Example:}
../singular_texi/./d2t_singular/spcurve_lib.tex(,409) @smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,410) @c computed example KSpencerKernel d2t_singular/spcurve_lib.doc:355 
../singular_texi/./d2t_singular/spcurve_lib.tex(,411) LIB "spcurve.lib";
../singular_texi/./d2t_singular/spcurve_lib.tex(,412) ring r=0,(x,y,z),ds;
../singular_texi/./d2t_singular/spcurve_lib.tex(,413) matrix M[3][2]=z-x^7,0,y^2,z,x^9,y;
../singular_texi/./d2t_singular/spcurve_lib.tex(,414) def KS=KSpencerKernel(M,"ar");
../singular_texi/./d2t_singular/spcurve_lib.tex(,415) print(KS);
../singular_texi/./d2t_singular/spcurve_lib.tex(,416) @expansion{} T(7),   0,      0,      0,     0,     0,     0,     0,  
../singular_texi/./d2t_singular/spcurve_lib.tex(,417) @expansion{} KS[2,1],6*T(3), 3*T(7), 0,     0,     0,     0,     0,  
../singular_texi/./d2t_singular/spcurve_lib.tex(,418) @expansion{} KS[3,1],KS[3,2],KS[3,3],6*T(3),3*T(7),0,     0,     0,  
../singular_texi/./d2t_singular/spcurve_lib.tex(,419) @expansion{} 10*T(4),8*T(1), 7*T(5), 5*T(2),4*T(6),2*T(8),2*T(3),T(7)
../singular_texi/./d2t_singular/spcurve_lib.tex(,420) nameof(basering);
../singular_texi/./d2t_singular/spcurve_lib.tex(,421) @expansion{} ar
../singular_texi/./d2t_singular/spcurve_lib.tex(,422) basering;
../singular_texi/./d2t_singular/spcurve_lib.tex(,423) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/spcurve_lib.tex(,424) @expansion{} //   number of vars : 17
../singular_texi/./d2t_singular/spcurve_lib.tex(,425) @expansion{} //        block   1 : ordering Ws
../singular_texi/./d2t_singular/spcurve_lib.tex(,426) @expansion{} //                  : names    e(1) e(2) e(3) e(4) e(5) e(6) x y z 
../singular_texi/./d2t_singular/spcurve_lib.tex(,427) @expansion{} //                  : weights  -21 -10 -32 -21 -27 -16 3 16 21 
../singular_texi/./d2t_singular/spcurve_lib.tex(,428) @expansion{} //        block   2 : ordering wp
../singular_texi/./d2t_singular/spcurve_lib.tex(,429) @expansion{} //                  : names    T(1) T(2) T(3) T(4) T(5) T(6) T(7) T(8) 
../singular_texi/./d2t_singular/spcurve_lib.tex(,430) @expansion{} //                  : weights     8    5    2   10    7    4    1    2 
../singular_texi/./d2t_singular/spcurve_lib.tex(,431) @expansion{} //        block   3 : ordering C
../singular_texi/./d2t_singular/spcurve_lib.tex(,432) @c end example KSpencerKernel d2t_singular/spcurve_lib.doc:355
../singular_texi/./d2t_singular/spcurve_lib.tex(,433) @end smallexample
../singular_texi/./d2t_singular/spcurve_lib.tex(,434) @c ---end content KSpencerKernel---
../singular_texi/singular.tex(,495) @c ---------------------------------------------------------
../singular_texi/singular.tex(,496) @node spectrum_lib, , spcurve_lib, Singularities
../singular_texi/singular.tex(,497) @subsection spectrum_lib
../singular_texi/singular.tex(,498) @c include of docu for spectrum.lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/spectrum_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/spectrum_lib.doc
../singular_texi/./d2t_singular/spectrum_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/spectrum_lib.doc INSTEAD
../singular_texi/./d2t_singular/spectrum_lib.tex(,4) @c library version: (1.12.2.3,2002/03/06)
../singular_texi/./d2t_singular/spectrum_lib.tex(,5) @c library file: ../Singular/LIB/spectrum.lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,6) @cindex spectrum.lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,7) @cindex spectrum_lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/spectrum_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,10) spectrum.lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,12)   Singularity Spectrum for Nondegenerate Singularities
../singular_texi/./d2t_singular/spectrum_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,14) S. Endrass
../singular_texi/./d2t_singular/spectrum_lib.tex(,15) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,16) @end table
../singular_texi/./d2t_singular/spectrum_lib.tex(,17) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,19) @menu
../singular_texi/./d2t_singular/spectrum_lib.tex(,20) * spectrumnd:: spectrum of nondegenerate isolated singularity f
../singular_texi/./d2t_singular/spectrum_lib.tex(,21) @end menu
../singular_texi/./d2t_singular/spectrum_lib.tex(,22) @c ---end content LibInfo---
../singular_texi/./d2t_singular/spectrum_lib.tex(,23) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,24) @c ------------------- spectrumnd -------------
../singular_texi/./d2t_singular/spectrum_lib.tex(,25) @node spectrumnd,,, spectrum_lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,26) @subsubsection spectrumnd
../singular_texi/./d2t_singular/spectrum_lib.tex(,27) @cindex spectrumnd
../singular_texi/./d2t_singular/spectrum_lib.tex(,28) @c ---content spectrumnd---
../singular_texi/./d2t_singular/spectrum_lib.tex(,29) Procedure from library @code{spectrum.lib} (@pxref{spectrum_lib}).
../singular_texi/./d2t_singular/spectrum_lib.tex(,30) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,31) @table @asis
../singular_texi/./d2t_singular/spectrum_lib.tex(,32) @item @strong{Usage:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,33) spectrumnd(f[,1]); poly f
../singular_texi/./d2t_singular/spectrum_lib.tex(,34) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,35) @item @strong{Assume:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,36) basering has characteristic 0 and local ordering,
../singular_texi/./d2t_singular/spectrum_lib.tex(,37) @*f has isolated singularity at 0 and nondegenerate principal part
../singular_texi/./d2t_singular/spectrum_lib.tex(,38) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,39) @item @strong{Return:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,40) @format
../singular_texi/./d2t_singular/spectrum_lib.tex(,41) list S:
../singular_texi/./d2t_singular/spectrum_lib.tex(,42)   ideal S[1]: spectral numbers in increasing order
../singular_texi/./d2t_singular/spectrum_lib.tex(,43)   intvec S[2]:
../singular_texi/./d2t_singular/spectrum_lib.tex(,44)     int S[2][i]: multiplicity of spectral number S[1][i]
../singular_texi/./d2t_singular/spectrum_lib.tex(,45) @end format
../singular_texi/./d2t_singular/spectrum_lib.tex(,46) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,47) @item @strong{Note:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,48) if a second argument 1 is given,
../singular_texi/./d2t_singular/spectrum_lib.tex(,49) @*no test for a degenerate principal part will be done
../singular_texi/./d2t_singular/spectrum_lib.tex(,50) @*SEE_ALSO: gaussman_lib
../singular_texi/./d2t_singular/spectrum_lib.tex(,51) 
../singular_texi/./d2t_singular/spectrum_lib.tex(,52) @cindex singularities
../singular_texi/./d2t_singular/spectrum_lib.tex(,53) @cindex Gauss-Manin connection
../singular_texi/./d2t_singular/spectrum_lib.tex(,54) @cindex spectrum
../singular_texi/./d2t_singular/spectrum_lib.tex(,55) @end table
../singular_texi/./d2t_singular/spectrum_lib.tex(,56) @strong{Example:}
../singular_texi/./d2t_singular/spectrum_lib.tex(,57) @smallexample
../singular_texi/./d2t_singular/spectrum_lib.tex(,58) @c computed example spectrumnd d2t_singular/spectrum_lib.doc:56 
../singular_texi/./d2t_singular/spectrum_lib.tex(,59) LIB "spectrum.lib";
../singular_texi/./d2t_singular/spectrum_lib.tex(,60) ring R=0,(x,y),ds;
../singular_texi/./d2t_singular/spectrum_lib.tex(,61) poly f=x^31+x^6*y^7+x^2*y^12+x^13*y^2+y^29;
../singular_texi/./d2t_singular/spectrum_lib.tex(,62) spectrumnd(f);
../singular_texi/./d2t_singular/spectrum_lib.tex(,63) @expansion{} [1]:
../singular_texi/./d2t_singular/spectrum_lib.tex(,64) @expansion{}    _[1]=-67/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,65) @expansion{}    _[2]=-62/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,66) @expansion{}    _[3]=-45/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,67) @expansion{}    _[4]=-57/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,68) @expansion{}    _[5]=-41/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,69) @expansion{}    _[6]=-55/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,70) @expansion{}    _[7]=-52/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,71) @expansion{}    _[8]=-37/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,72) @expansion{}    _[9]=-50/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,73) @expansion{}    _[10]=-18/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,74) @expansion{}    _[11]=-47/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,75) @expansion{}    _[12]=-45/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,76) @expansion{}    _[13]=-33/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,77) @expansion{}    _[14]=-16/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,78) @expansion{}    _[15]=-43/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,79) @expansion{}    _[16]=-42/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,80) @expansion{}    _[17]=-40/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,81) @expansion{}    _[18]=-1/2
../singular_texi/./d2t_singular/spectrum_lib.tex(,82) @expansion{}    _[19]=-15/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,83) @expansion{}    _[20]=-14/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,84) @expansion{}    _[21]=-38/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,85) @expansion{}    _[22]=-27/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,86) @expansion{}    _[23]=-14/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,87) @expansion{}    _[24]=-35/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,88) @expansion{}    _[25]=-25/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,89) @expansion{}    _[26]=-13/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,90) @expansion{}    _[27]=-33/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,91) @expansion{}    _[28]=-12/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,92) @expansion{}    _[29]=-23/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,93) @expansion{}    _[30]=-31/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,94) @expansion{}    _[31]=-12/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,95) @expansion{}    _[32]=-30/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,96) @expansion{}    _[33]=-21/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,97) @expansion{}    _[34]=-11/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,98) @expansion{}    _[35]=-28/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,99) @expansion{}    _[36]=-10/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,100) @expansion{}    _[37]=-26/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,101) @expansion{}    _[38]=-19/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,102) @expansion{}    _[39]=-10/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,103) @expansion{}    _[40]=-25/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,104) @expansion{}    _[41]=-9/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,105) @expansion{}    _[42]=-17/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,106) @expansion{}    _[43]=-23/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,107) @expansion{}    _[44]=-9/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,108) @expansion{}    _[45]=-8/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,109) @expansion{}    _[46]=-21/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,110) @expansion{}    _[47]=-15/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,111) @expansion{}    _[48]=-8/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,112) @expansion{}    _[49]=-20/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,113) @expansion{}    _[50]=-7/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,114) @expansion{}    _[51]=-19/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,115) @expansion{}    _[52]=-18/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,116) @expansion{}    _[53]=-7/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,117) @expansion{}    _[54]=-13/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,118) @expansion{}    _[55]=-6/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,119) @expansion{}    _[56]=-16/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,120) @expansion{}    _[57]=-6/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,121) @expansion{}    _[58]=-15/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,122) @expansion{}    _[59]=-11/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,123) @expansion{}    _[60]=-14/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,124) @expansion{}    _[61]=-5/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,125) @expansion{}    _[62]=-13/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,126) @expansion{}    _[63]=-5/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,127) @expansion{}    _[64]=-9/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,128) @expansion{}    _[65]=-11/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,129) @expansion{}    _[66]=-4/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,130) @expansion{}    _[67]=-4/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,131) @expansion{}    _[68]=-10/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,132) @expansion{}    _[69]=-7/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,133) @expansion{}    _[70]=-9/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,134) @expansion{}    _[71]=-3/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,135) @expansion{}    _[72]=-8/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,136) @expansion{}    _[73]=-3/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,137) @expansion{}    _[74]=-7/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,138) @expansion{}    _[75]=-5/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,139) @expansion{}    _[76]=-6/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,140) @expansion{}    _[77]=-2/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,141) @expansion{}    _[78]=-2/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,142) @expansion{}    _[79]=-5/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,143) @expansion{}    _[80]=-3/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,144) @expansion{}    _[81]=-4/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,145) @expansion{}    _[82]=-3/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,146) @expansion{}    _[83]=-1/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,147) @expansion{}    _[84]=-1/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,148) @expansion{}    _[85]=-2/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,149) @expansion{}    _[86]=-1/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,150) @expansion{}    _[87]=-1/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,151) @expansion{}    _[88]=0
../singular_texi/./d2t_singular/spectrum_lib.tex(,152) @expansion{}    _[89]=1/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,153) @expansion{}    _[90]=1/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,154) @expansion{}    _[91]=2/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,155) @expansion{}    _[92]=1/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,156) @expansion{}    _[93]=1/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,157) @expansion{}    _[94]=3/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,158) @expansion{}    _[95]=4/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,159) @expansion{}    _[96]=3/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,160) @expansion{}    _[97]=5/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,161) @expansion{}    _[98]=2/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,162) @expansion{}    _[99]=2/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,163) @expansion{}    _[100]=6/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,164) @expansion{}    _[101]=5/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,165) @expansion{}    _[102]=7/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,166) @expansion{}    _[103]=3/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,167) @expansion{}    _[104]=8/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,168) @expansion{}    _[105]=3/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,169) @expansion{}    _[106]=9/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,170) @expansion{}    _[107]=7/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,171) @expansion{}    _[108]=10/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,172) @expansion{}    _[109]=4/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,173) @expansion{}    _[110]=4/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,174) @expansion{}    _[111]=11/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,175) @expansion{}    _[112]=9/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,176) @expansion{}    _[113]=5/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,177) @expansion{}    _[114]=13/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,178) @expansion{}    _[115]=5/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,179) @expansion{}    _[116]=14/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,180) @expansion{}    _[117]=11/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,181) @expansion{}    _[118]=15/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,182) @expansion{}    _[119]=6/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,183) @expansion{}    _[120]=16/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,184) @expansion{}    _[121]=6/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,185) @expansion{}    _[122]=13/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,186) @expansion{}    _[123]=7/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,187) @expansion{}    _[124]=18/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,188) @expansion{}    _[125]=19/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,189) @expansion{}    _[126]=7/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,190) @expansion{}    _[127]=20/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,191) @expansion{}    _[128]=8/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,192) @expansion{}    _[129]=15/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,193) @expansion{}    _[130]=21/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,194) @expansion{}    _[131]=8/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,195) @expansion{}    _[132]=9/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,196) @expansion{}    _[133]=23/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,197) @expansion{}    _[134]=17/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,198) @expansion{}    _[135]=9/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,199) @expansion{}    _[136]=25/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,200) @expansion{}    _[137]=10/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,201) @expansion{}    _[138]=19/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,202) @expansion{}    _[139]=26/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,203) @expansion{}    _[140]=10/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,204) @expansion{}    _[141]=28/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,205) @expansion{}    _[142]=11/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,206) @expansion{}    _[143]=21/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,207) @expansion{}    _[144]=30/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,208) @expansion{}    _[145]=12/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,209) @expansion{}    _[146]=31/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,210) @expansion{}    _[147]=23/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,211) @expansion{}    _[148]=12/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,212) @expansion{}    _[149]=33/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,213) @expansion{}    _[150]=13/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,214) @expansion{}    _[151]=25/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,215) @expansion{}    _[152]=35/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,216) @expansion{}    _[153]=14/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,217) @expansion{}    _[154]=27/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,218) @expansion{}    _[155]=38/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,219) @expansion{}    _[156]=14/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,220) @expansion{}    _[157]=15/31
../singular_texi/./d2t_singular/spectrum_lib.tex(,221) @expansion{}    _[158]=1/2
../singular_texi/./d2t_singular/spectrum_lib.tex(,222) @expansion{}    _[159]=40/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,223) @expansion{}    _[160]=42/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,224) @expansion{}    _[161]=43/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,225) @expansion{}    _[162]=16/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,226) @expansion{}    _[163]=33/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,227) @expansion{}    _[164]=45/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,228) @expansion{}    _[165]=47/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,229) @expansion{}    _[166]=18/29
../singular_texi/./d2t_singular/spectrum_lib.tex(,230) @expansion{}    _[167]=50/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,231) @expansion{}    _[168]=37/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,232) @expansion{}    _[169]=52/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,233) @expansion{}    _[170]=55/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,234) @expansion{}    _[171]=41/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,235) @expansion{}    _[172]=57/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,236) @expansion{}    _[173]=45/58
../singular_texi/./d2t_singular/spectrum_lib.tex(,237) @expansion{}    _[174]=62/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,238) @expansion{}    _[175]=67/79
../singular_texi/./d2t_singular/spectrum_lib.tex(,239) @expansion{} [2]:
../singular_texi/./d2t_singular/spectrum_lib.tex(,240) @expansion{}    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,\
../singular_texi/./d2t_singular/spectrum_lib.tex(,241)    1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1\
../singular_texi/./d2t_singular/spectrum_lib.tex(,242)    ,1,1,2,1,1,1,1,2,1,1,1,1,1,2,1,4,1,2,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,2,1,\
../singular_texi/./d2t_singular/spectrum_lib.tex(,243)    1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1\
../singular_texi/./d2t_singular/spectrum_lib.tex(,244)    ,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
../singular_texi/./d2t_singular/spectrum_lib.tex(,245) @c end example spectrumnd d2t_singular/spectrum_lib.doc:56
../singular_texi/./d2t_singular/spectrum_lib.tex(,246) @end smallexample
../singular_texi/./d2t_singular/spectrum_lib.tex(,247) @c ---end content spectrumnd---
../singular_texi/singular.tex(,500) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,501) @node Invariant theory, Symbolic-numerical solving, Singularities, SINGULAR libraries
../singular_texi/singular.tex(,502) @section Invariant theory
../singular_texi/singular.tex(,503) @cindex Invariant theory
../singular_texi/singular.tex(,504) 
../singular_texi/singular.tex(,505) @menu
../singular_texi/singular.tex(,506) * finvar_lib:: procedures to compute invariant rings of finite groups
../singular_texi/singular.tex(,507) * ainvar_lib:: procedures to compute invariants rings of the additive group
../singular_texi/singular.tex(,508) * rinvar_lib:: procedures to compute invariants ring of reductive groups
../singular_texi/singular.tex(,509) * stratify_lib:: algorithmic stratification by the Greuel-Pfister algorithm
../singular_texi/singular.tex(,510) @end menu
../singular_texi/singular.tex(,511) 
../singular_texi/singular.tex(,512) @c ----------------------------------------------------------
../singular_texi/singular.tex(,513) @node finvar_lib, ainvar_lib, Invariant theory, Invariant theory
../singular_texi/singular.tex(,514) @subsection finvar_lib
../singular_texi/singular.tex(,515) @c include of docu for finvar.lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/finvar_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/finvar_lib.doc
../singular_texi/./d2t_singular/finvar_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/finvar_lib.doc INSTEAD
../singular_texi/./d2t_singular/finvar_lib.tex(,4) @c library version: (1.32.2.2,2002/08/13)
../singular_texi/./d2t_singular/finvar_lib.tex(,5) @c library file: ../Singular/LIB/finvar.lib
../singular_texi/./d2t_singular/finvar_lib.tex(,6) @cindex finvar.lib
../singular_texi/./d2t_singular/finvar_lib.tex(,7) @cindex finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/finvar_lib.tex(,10) finvar.lib
../singular_texi/./d2t_singular/finvar_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/finvar_lib.tex(,12)     Invariant Rings of Finite Groups
../singular_texi/./d2t_singular/finvar_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/finvar_lib.tex(,14) Agnes E. Heydtmann, email: agnes@@math.uni-sb.de
../singular_texi/./d2t_singular/finvar_lib.tex(,15) 
../singular_texi/./d2t_singular/finvar_lib.tex(,16) @item @strong{Overview:}
../singular_texi/./d2t_singular/finvar_lib.tex(,17) A library for computing polynomial invariants of finite matrix groups and
../singular_texi/./d2t_singular/finvar_lib.tex(,18) generators of related varieties. The algorithms are based on B. Sturmfels,
../singular_texi/./d2t_singular/finvar_lib.tex(,19) G. Kemper and W. Decker et al..
../singular_texi/./d2t_singular/finvar_lib.tex(,20) 
../singular_texi/./d2t_singular/finvar_lib.tex(,21) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,22) 
../singular_texi/./d2t_singular/finvar_lib.tex(,23) @strong{Main procedures:}
../singular_texi/./d2t_singular/finvar_lib.tex(,24) @menu
../singular_texi/./d2t_singular/finvar_lib.tex(,25) * invariant_ring:: generators of the invariant ring (i.r.)
../singular_texi/./d2t_singular/finvar_lib.tex(,26) * invariant_ring_random:: generators of the i.r., randomized alg.
../singular_texi/./d2t_singular/finvar_lib.tex(,27) * primary_invariants:: primary invariants (p.i.)
../singular_texi/./d2t_singular/finvar_lib.tex(,28) * primary_invariants_random:: primary invariants, randomized alg.
../singular_texi/./d2t_singular/finvar_lib.tex(,29) @end menu
../singular_texi/./d2t_singular/finvar_lib.tex(,30) @strong{Auxiliary procedures:}
../singular_texi/./d2t_singular/finvar_lib.tex(,31) @menu
../singular_texi/./d2t_singular/finvar_lib.tex(,32) * cyclotomic:: cyclotomic polynomial
../singular_texi/./d2t_singular/finvar_lib.tex(,33) * group_reynolds:: finite group and Reynolds operator (R.o.)
../singular_texi/./d2t_singular/finvar_lib.tex(,34) * molien:: Molien series (M.s.)
../singular_texi/./d2t_singular/finvar_lib.tex(,35) * reynolds_molien:: Reynolds operator and Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,36) * partial_molien:: partial expansion of Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,37) * evaluate_reynolds:: image under the Reynolds operator
../singular_texi/./d2t_singular/finvar_lib.tex(,38) * invariant_basis:: basis of homogeneous invariants of a degree
../singular_texi/./d2t_singular/finvar_lib.tex(,39) * invariant_basis_reynolds:: as invariant_basis(), with R.o.
../singular_texi/./d2t_singular/finvar_lib.tex(,40) * primary_char0:: primary invariants in char 0
../singular_texi/./d2t_singular/finvar_lib.tex(,41) * primary_charp:: primary invariant in char p
../singular_texi/./d2t_singular/finvar_lib.tex(,42) * primary_char0_no_molien:: p.i., char 0, without Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,43) * primary_charp_no_molien:: p.i., char p, without Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,44) * primary_charp_without:: p.i., char p, without R.o. or Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,45) * primary_char0_random:: primary invariants in char 0, randomized
../singular_texi/./d2t_singular/finvar_lib.tex(,46) * primary_charp_random:: primary invariants in char p, randomized
../singular_texi/./d2t_singular/finvar_lib.tex(,47) * primary_char0_no_molien_random:: p.i., char 0, without M.s., randomized
../singular_texi/./d2t_singular/finvar_lib.tex(,48) * primary_charp_no_molien_random:: p.i., char p, without M.s., randomized
../singular_texi/./d2t_singular/finvar_lib.tex(,49) * primary_charp_without_random:: p.i., char p, without R.o. or M.s., random.
../singular_texi/./d2t_singular/finvar_lib.tex(,50) * power_products:: exponents for power products
../singular_texi/./d2t_singular/finvar_lib.tex(,51) * secondary_char0:: secondary (s.i.) invariants in char 0
../singular_texi/./d2t_singular/finvar_lib.tex(,52) * secondary_charp:: secondary invariants in char p
../singular_texi/./d2t_singular/finvar_lib.tex(,53) * secondary_no_molien:: secondary invariants, without Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,54) * secondary_and_irreducibles_no_molien:: s.i. & irreducible s.i., without M.s.
../singular_texi/./d2t_singular/finvar_lib.tex(,55) * secondary_not_cohen_macaulay:: s.i. when invariant ring not Cohen-Macaulay
../singular_texi/./d2t_singular/finvar_lib.tex(,56) * orbit_variety:: ideal of the orbit variety
../singular_texi/./d2t_singular/finvar_lib.tex(,57) * relative_orbit_variety:: ideal of a relative orbit variety
../singular_texi/./d2t_singular/finvar_lib.tex(,58) * image_of_variety:: ideal of the image of a variety
../singular_texi/./d2t_singular/finvar_lib.tex(,59) @end menu
../singular_texi/./d2t_singular/finvar_lib.tex(,60) @c ---end content LibInfo---
../singular_texi/./d2t_singular/finvar_lib.tex(,61) 
../singular_texi/./d2t_singular/finvar_lib.tex(,62) @c ------------------- invariant_ring -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,63) @node invariant_ring, invariant_ring_random,, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,64) @subsubsection invariant_ring
../singular_texi/./d2t_singular/finvar_lib.tex(,65) @cindex invariant_ring
../singular_texi/./d2t_singular/finvar_lib.tex(,66) @c ---content invariant_ring---
../singular_texi/./d2t_singular/finvar_lib.tex(,67) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,68) 
../singular_texi/./d2t_singular/finvar_lib.tex(,69) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,70) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,71) invariant_ring(G1,G2,...[,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,72) @*G1,G2,...: <matrices> generating a finite matrix group, flags: an
../singular_texi/./d2t_singular/finvar_lib.tex(,73) optional <intvec> with three entries: if the first one equals 0, the
../singular_texi/./d2t_singular/finvar_lib.tex(,74) program attempts to compute the Molien series and Reynolds operator,
../singular_texi/./d2t_singular/finvar_lib.tex(,75) if it equals 1, the program is told that the Molien series should not
../singular_texi/./d2t_singular/finvar_lib.tex(,76) be computed, if it equals -1 characteristic 0 is simulated, i.e. the
../singular_texi/./d2t_singular/finvar_lib.tex(,77) Molien series is computed as if the base field were characteristic 0
../singular_texi/./d2t_singular/finvar_lib.tex(,78) (the user must choose a field of large prime characteristic, e.g.
../singular_texi/./d2t_singular/finvar_lib.tex(,79) 32003) and if the first one is anything else, it means that the
../singular_texi/./d2t_singular/finvar_lib.tex(,80) characteristic of the base field divides the group order (i.e. it will
../singular_texi/./d2t_singular/finvar_lib.tex(,81) not even be attempted to compute the Reynolds operator or Molien
../singular_texi/./d2t_singular/finvar_lib.tex(,82) series), the second component should give the size of intervals
../singular_texi/./d2t_singular/finvar_lib.tex(,83) between canceling common factors in the expansion of Molien series, 0
../singular_texi/./d2t_singular/finvar_lib.tex(,84) (the default) means only once after generating all terms, in prime
../singular_texi/./d2t_singular/finvar_lib.tex(,85) characteristic also a negative number can be given to indicate that
../singular_texi/./d2t_singular/finvar_lib.tex(,86) common factors should always be canceled when the expansion is simple
../singular_texi/./d2t_singular/finvar_lib.tex(,87) (the root of the extension field occurs not among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,88) 
../singular_texi/./d2t_singular/finvar_lib.tex(,89) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,90) primary and secondary invariants (both of type <matrix>) generating
../singular_texi/./d2t_singular/finvar_lib.tex(,91) the invariant ring with respect to the matrix group generated by the
../singular_texi/./d2t_singular/finvar_lib.tex(,92) matrices in the input and irreducible secondary invariants (type
../singular_texi/./d2t_singular/finvar_lib.tex(,93) <matrix>) if the Molien series was available
../singular_texi/./d2t_singular/finvar_lib.tex(,94) 
../singular_texi/./d2t_singular/finvar_lib.tex(,95) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,96) information about the various stages of the program if the third flag
../singular_texi/./d2t_singular/finvar_lib.tex(,97) does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,98) 
../singular_texi/./d2t_singular/finvar_lib.tex(,99) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,100) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,101) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,102) generated by the previously found invariants (see "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,103) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,104) Decker, Heydtmann, Schreyer (1998)). In the
../singular_texi/./d2t_singular/finvar_lib.tex(,105) @*non-modular case secondary invariants are calculated by finding a
../singular_texi/./d2t_singular/finvar_lib.tex(,106) basis (in terms of monomials) of the basering modulo the primary
../singular_texi/./d2t_singular/finvar_lib.tex(,107) invariants, mapping to invariants with the Reynolds operator and using
../singular_texi/./d2t_singular/finvar_lib.tex(,108) those or their power products such that they are linearly independent
../singular_texi/./d2t_singular/finvar_lib.tex(,109) modulo the primary invariants (see "Some Algorithms in Invariant
../singular_texi/./d2t_singular/finvar_lib.tex(,110) Theory of Finite Groups" by Kemper and Steel (1997)). In the modular
../singular_texi/./d2t_singular/finvar_lib.tex(,111) case they are generated according to "Generating Invariant Rings of
../singular_texi/./d2t_singular/finvar_lib.tex(,112) Finite Groups over Arbitrary Fields" by Kemper (1996).
../singular_texi/./d2t_singular/finvar_lib.tex(,113) 
../singular_texi/./d2t_singular/finvar_lib.tex(,114) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,115) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,116) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,117) @c computed example invariant_ring d2t_singular/finvar_lib.doc:115 
../singular_texi/./d2t_singular/finvar_lib.tex(,118) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,119) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,120) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,121) matrix P,S,IS=invariant_ring(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,122) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,123) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,124) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,125) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,126) print(IS);
../singular_texi/./d2t_singular/finvar_lib.tex(,127) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,128) @c end example invariant_ring d2t_singular/finvar_lib.doc:115
../singular_texi/./d2t_singular/finvar_lib.tex(,129) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,130) @c ---end content invariant_ring---
../singular_texi/./d2t_singular/finvar_lib.tex(,131) 
../singular_texi/./d2t_singular/finvar_lib.tex(,132) @c ------------------- invariant_ring_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,133) @node invariant_ring_random, primary_invariants, invariant_ring, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,134) @subsubsection invariant_ring_random
../singular_texi/./d2t_singular/finvar_lib.tex(,135) @cindex invariant_ring_random
../singular_texi/./d2t_singular/finvar_lib.tex(,136) @c ---content invariant_ring_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,137) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,138) 
../singular_texi/./d2t_singular/finvar_lib.tex(,139) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,140) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,141) invariant_ring_random(G1,G2,...,r[,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,142) @*G1,G2,...: <matrices> generating a finite matrix group, r: an <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,143) where -|r| to |r| is the range of coefficients of random
../singular_texi/./d2t_singular/finvar_lib.tex(,144) combinations of bases elements that serve as primary invariants,
../singular_texi/./d2t_singular/finvar_lib.tex(,145) flags: an optional <intvec> with three entries: if the first equals 0,
../singular_texi/./d2t_singular/finvar_lib.tex(,146) the program attempts to compute the Molien series and Reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,147) operator, if it equals 1, the program is told that the Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,148) should not be computed, if it equals -1 characteristic 0 is simulated,
../singular_texi/./d2t_singular/finvar_lib.tex(,149) i.e. the Molien series is computed as if the base field were
../singular_texi/./d2t_singular/finvar_lib.tex(,150) characteristic 0 (the user must choose a field of large prime
../singular_texi/./d2t_singular/finvar_lib.tex(,151) characteristic, e.g. 32003) and if the first one is anything else,
../singular_texi/./d2t_singular/finvar_lib.tex(,152) then the characteristic of the base field divides the group order
../singular_texi/./d2t_singular/finvar_lib.tex(,153) (i.e. we will not even attempt to compute the Reynolds operator or
../singular_texi/./d2t_singular/finvar_lib.tex(,154) Molien series), the second component should give the size of intervals
../singular_texi/./d2t_singular/finvar_lib.tex(,155) between canceling common factors in the expansion of the Molien
../singular_texi/./d2t_singular/finvar_lib.tex(,156) series, 0 (the default) means only once after generating all terms,
../singular_texi/./d2t_singular/finvar_lib.tex(,157) in prime characteristic also a negative number can be given to
../singular_texi/./d2t_singular/finvar_lib.tex(,158) indicate that common factors should always be canceled when the
../singular_texi/./d2t_singular/finvar_lib.tex(,159) expansion is simple (the root of the extension field does not occur
../singular_texi/./d2t_singular/finvar_lib.tex(,160) among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,161) 
../singular_texi/./d2t_singular/finvar_lib.tex(,162) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,163) primary and secondary invariants (both of type <matrix>) generating
../singular_texi/./d2t_singular/finvar_lib.tex(,164) invariant ring with respect to the matrix group generated by the
../singular_texi/./d2t_singular/finvar_lib.tex(,165) matrices in the input and irreducible secondary invariants (type
../singular_texi/./d2t_singular/finvar_lib.tex(,166) <matrix>) if the Molien series was available
../singular_texi/./d2t_singular/finvar_lib.tex(,167) 
../singular_texi/./d2t_singular/finvar_lib.tex(,168) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,169) information about the various stages of the program if the third flag
../singular_texi/./d2t_singular/finvar_lib.tex(,170) does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,171) 
../singular_texi/./d2t_singular/finvar_lib.tex(,172) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,173) is the same as for invariant_ring except that random combinations of
../singular_texi/./d2t_singular/finvar_lib.tex(,174) basis elements are chosen as candidates for primary invariants and
../singular_texi/./d2t_singular/finvar_lib.tex(,175) hopefully they lower the dimension of the previously found primary
../singular_texi/./d2t_singular/finvar_lib.tex(,176) invariants by the right amount.
../singular_texi/./d2t_singular/finvar_lib.tex(,177) 
../singular_texi/./d2t_singular/finvar_lib.tex(,178) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,179) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,180) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,181) @c computed example invariant_ring_random d2t_singular/finvar_lib.doc:176 
../singular_texi/./d2t_singular/finvar_lib.tex(,182) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,183) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,184) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,185) matrix P,S,IS=invariant_ring_random(A,1);
../singular_texi/./d2t_singular/finvar_lib.tex(,186) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,187) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,188) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,189) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,190) print(IS);
../singular_texi/./d2t_singular/finvar_lib.tex(,191) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,192) @c end example invariant_ring_random d2t_singular/finvar_lib.doc:176
../singular_texi/./d2t_singular/finvar_lib.tex(,193) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,194) @c ---end content invariant_ring_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,195) 
../singular_texi/./d2t_singular/finvar_lib.tex(,196) @c ------------------- primary_invariants -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,197) @node primary_invariants, primary_invariants_random, invariant_ring_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,198) @subsubsection primary_invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,199) @cindex primary_invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,200) @c ---content primary_invariants---
../singular_texi/./d2t_singular/finvar_lib.tex(,201) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,202) 
../singular_texi/./d2t_singular/finvar_lib.tex(,203) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,204) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,205) primary_invariants(G1,G2,...[,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,206) @*G1,G2,...: <matrices> generating a finite matrix group, flags: an
../singular_texi/./d2t_singular/finvar_lib.tex(,207) optional <intvec> with three entries, if the first one equals 0 (also
../singular_texi/./d2t_singular/finvar_lib.tex(,208) the default), the program attempts to compute the Molien series and
../singular_texi/./d2t_singular/finvar_lib.tex(,209) Reynolds operator, if it equals 1, the program is told that the
../singular_texi/./d2t_singular/finvar_lib.tex(,210) Molien series should not be computed, if it equals -1 characteristic 0
../singular_texi/./d2t_singular/finvar_lib.tex(,211) is simulated, i.e. the Molien series is computed as if the base field
../singular_texi/./d2t_singular/finvar_lib.tex(,212) were characteristic 0 (the user must choose a field of large prime
../singular_texi/./d2t_singular/finvar_lib.tex(,213) characteristic, e.g. 32003) and if the first one is anything else, it
../singular_texi/./d2t_singular/finvar_lib.tex(,214) means that the characteristic of the base field divides the group
../singular_texi/./d2t_singular/finvar_lib.tex(,215) order, the second component should give the size of intervals between
../singular_texi/./d2t_singular/finvar_lib.tex(,216) canceling common factors in the expansion of the Molien series, 0 (the
../singular_texi/./d2t_singular/finvar_lib.tex(,217) default) means only once after generating all terms, in prime
../singular_texi/./d2t_singular/finvar_lib.tex(,218) characteristic also a negative number can be given to indicate that
../singular_texi/./d2t_singular/finvar_lib.tex(,219) common factors should always be canceled when the expansion is simple
../singular_texi/./d2t_singular/finvar_lib.tex(,220) (the root of the extension field occurs not among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,221) 
../singular_texi/./d2t_singular/finvar_lib.tex(,222) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,223) information about the various stages of the program if the third
../singular_texi/./d2t_singular/finvar_lib.tex(,224) flag does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,225) 
../singular_texi/./d2t_singular/finvar_lib.tex(,226) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,227) primary invariants (type <matrix>) of the invariant ring and if
../singular_texi/./d2t_singular/finvar_lib.tex(,228) computable Reynolds operator (type <matrix>) and Molien series (type
../singular_texi/./d2t_singular/finvar_lib.tex(,229) <matrix>) or ring name (type string) where the Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,230) can be found in the char p case; if the first flag is 1 and we are in
../singular_texi/./d2t_singular/finvar_lib.tex(,231) the non-modular case then an <intvec> is returned giving some of the
../singular_texi/./d2t_singular/finvar_lib.tex(,232) degrees where no non-trivial homogeneous invariants can be found
../singular_texi/./d2t_singular/finvar_lib.tex(,233) 
../singular_texi/./d2t_singular/finvar_lib.tex(,234) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,235) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,236) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,237) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,238) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,239) Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,240) 
../singular_texi/./d2t_singular/finvar_lib.tex(,241) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,242) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,243) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,244) @c computed example primary_invariants d2t_singular/finvar_lib.doc:236 
../singular_texi/./d2t_singular/finvar_lib.tex(,245) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,246) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,247) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,248) list L=primary_invariants(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,249) print(L[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,250) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,251) @c end example primary_invariants d2t_singular/finvar_lib.doc:236
../singular_texi/./d2t_singular/finvar_lib.tex(,252) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,253) @c ---end content primary_invariants---
../singular_texi/./d2t_singular/finvar_lib.tex(,254) 
../singular_texi/./d2t_singular/finvar_lib.tex(,255) @c ------------------- primary_invariants_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,256) @node primary_invariants_random, cyclotomic, primary_invariants, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,257) @subsubsection primary_invariants_random
../singular_texi/./d2t_singular/finvar_lib.tex(,258) @cindex primary_invariants_random
../singular_texi/./d2t_singular/finvar_lib.tex(,259) @c ---content primary_invariants_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,260) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,261) 
../singular_texi/./d2t_singular/finvar_lib.tex(,262) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,263) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,264) primary_invariants_random(G1,G2,...,r[,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,265) @*G1,G2,...: <matrices> generating a finite matrix group, r: an <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,266) where -|r| to |r| is the range of coefficients of the random
../singular_texi/./d2t_singular/finvar_lib.tex(,267) combinations of bases elements, flags: an optional <intvec> with three
../singular_texi/./d2t_singular/finvar_lib.tex(,268) entries, if the first one equals 0 (also the default), the program
../singular_texi/./d2t_singular/finvar_lib.tex(,269) attempts to compute the Molien series and Reynolds operator, if it
../singular_texi/./d2t_singular/finvar_lib.tex(,270) equals 1, the program is told that the Molien series should not be
../singular_texi/./d2t_singular/finvar_lib.tex(,271) computed, if it equals -1 characteristic 0 is simulated, i.e. the
../singular_texi/./d2t_singular/finvar_lib.tex(,272) Molien series is computed as if the base field were characteristic 0
../singular_texi/./d2t_singular/finvar_lib.tex(,273) (the user must choose a field of large prime characteristic, e.g.
../singular_texi/./d2t_singular/finvar_lib.tex(,274) 32003) and if the first one is anything else, it means that the
../singular_texi/./d2t_singular/finvar_lib.tex(,275) characteristic of the base field divides the group order, the second
../singular_texi/./d2t_singular/finvar_lib.tex(,276) component should give the size of intervals between canceling common
../singular_texi/./d2t_singular/finvar_lib.tex(,277) factors in the expansion of the Molien series, 0 (the default) means
../singular_texi/./d2t_singular/finvar_lib.tex(,278) only once after generating all terms, in prime characteristic also a
../singular_texi/./d2t_singular/finvar_lib.tex(,279) negative number can be given to indicate that common factors should
../singular_texi/./d2t_singular/finvar_lib.tex(,280) always be canceled when the expansion is simple (the root of the
../singular_texi/./d2t_singular/finvar_lib.tex(,281) extension field does not occur among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,282) 
../singular_texi/./d2t_singular/finvar_lib.tex(,283) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,284) information about the various stages of the program if the third
../singular_texi/./d2t_singular/finvar_lib.tex(,285) flag does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,286) 
../singular_texi/./d2t_singular/finvar_lib.tex(,287) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,288) primary invariants (type <matrix>) of the invariant ring and if
../singular_texi/./d2t_singular/finvar_lib.tex(,289) computable Reynolds operator (type <matrix>) and Molien series (type
../singular_texi/./d2t_singular/finvar_lib.tex(,290) <matrix>), if the first flag is 1 and we are in the non-modular case
../singular_texi/./d2t_singular/finvar_lib.tex(,291) then an <intvec> is returned giving some of the degrees where no
../singular_texi/./d2t_singular/finvar_lib.tex(,292) non-trivial homogeneous invariants can be found
../singular_texi/./d2t_singular/finvar_lib.tex(,293) 
../singular_texi/./d2t_singular/finvar_lib.tex(,294) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,295) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,296) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,297) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,298) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,299) a Finite Group" by Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,300) 
../singular_texi/./d2t_singular/finvar_lib.tex(,301) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,302) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,303) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,304) @c computed example primary_invariants_random d2t_singular/finvar_lib.doc:295 
../singular_texi/./d2t_singular/finvar_lib.tex(,305) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,306) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,307) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,308) list L=primary_invariants_random(A,1);
../singular_texi/./d2t_singular/finvar_lib.tex(,309) print(L[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,310) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,311) @c end example primary_invariants_random d2t_singular/finvar_lib.doc:295
../singular_texi/./d2t_singular/finvar_lib.tex(,312) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,313) @c ---end content primary_invariants_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,314) 
../singular_texi/./d2t_singular/finvar_lib.tex(,315) @c ------------------- cyclotomic -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,316) @node cyclotomic, group_reynolds, primary_invariants_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,317) @subsubsection cyclotomic
../singular_texi/./d2t_singular/finvar_lib.tex(,318) @cindex cyclotomic
../singular_texi/./d2t_singular/finvar_lib.tex(,319) @c ---content cyclotomic---
../singular_texi/./d2t_singular/finvar_lib.tex(,320) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,321) 
../singular_texi/./d2t_singular/finvar_lib.tex(,322) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,323) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,324) cyclotomic(i); i integer > 0
../singular_texi/./d2t_singular/finvar_lib.tex(,325) 
../singular_texi/./d2t_singular/finvar_lib.tex(,326) @item @strong{Returns:}
../singular_texi/./d2t_singular/finvar_lib.tex(,327) the i-th cyclotomic polynomial (type <poly>) as one in the first ring
../singular_texi/./d2t_singular/finvar_lib.tex(,328) variable
../singular_texi/./d2t_singular/finvar_lib.tex(,329) 
../singular_texi/./d2t_singular/finvar_lib.tex(,330) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,331) x^i-1 is divided by the j-th cyclotomic polynomial where j takes on
../singular_texi/./d2t_singular/finvar_lib.tex(,332) the value of proper divisors of i
../singular_texi/./d2t_singular/finvar_lib.tex(,333) 
../singular_texi/./d2t_singular/finvar_lib.tex(,334) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,335) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,336) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,337) @c computed example cyclotomic d2t_singular/finvar_lib.doc:327 
../singular_texi/./d2t_singular/finvar_lib.tex(,338) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,339) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,340) print(cyclotomic(25));
../singular_texi/./d2t_singular/finvar_lib.tex(,341) @expansion{} x20+x15+x10+x5+1
../singular_texi/./d2t_singular/finvar_lib.tex(,342) @c end example cyclotomic d2t_singular/finvar_lib.doc:327
../singular_texi/./d2t_singular/finvar_lib.tex(,343) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,344) @c ---end content cyclotomic---
../singular_texi/./d2t_singular/finvar_lib.tex(,345) 
../singular_texi/./d2t_singular/finvar_lib.tex(,346) @c ------------------- group_reynolds -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,347) @node group_reynolds, molien, cyclotomic, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,348) @subsubsection group_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,349) @cindex group_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,350) @c ---content group_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,351) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,352) 
../singular_texi/./d2t_singular/finvar_lib.tex(,353) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,354) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,355) group_reynolds(G1,G2,...[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,356) @*G1,G2,...: nxn <matrices> generating a finite matrix group, v: an
../singular_texi/./d2t_singular/finvar_lib.tex(,357) optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,358) 
../singular_texi/./d2t_singular/finvar_lib.tex(,359) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,360) n is the number of variables of the basering, g the number of group
../singular_texi/./d2t_singular/finvar_lib.tex(,361) elements
../singular_texi/./d2t_singular/finvar_lib.tex(,362) 
../singular_texi/./d2t_singular/finvar_lib.tex(,363) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,364) a <list>, the first list element will be a gxn <matrix> representing
../singular_texi/./d2t_singular/finvar_lib.tex(,365) the Reynolds operator if we are in the non-modular case; if the
../singular_texi/./d2t_singular/finvar_lib.tex(,366) characteristic is >0, minpoly==0 and the finite group non-cyclic the
../singular_texi/./d2t_singular/finvar_lib.tex(,367) second list element is an <int> giving the lowest common multiple of
../singular_texi/./d2t_singular/finvar_lib.tex(,368) the matrix group elements' order (used in molien); in general all
../singular_texi/./d2t_singular/finvar_lib.tex(,369) other list elements are nxn <matrices> listing all elements of the
../singular_texi/./d2t_singular/finvar_lib.tex(,370) finite group
../singular_texi/./d2t_singular/finvar_lib.tex(,371) 
../singular_texi/./d2t_singular/finvar_lib.tex(,372) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,373) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,374) 
../singular_texi/./d2t_singular/finvar_lib.tex(,375) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,376) The entire matrix group is generated by getting all left products of
../singular_texi/./d2t_singular/finvar_lib.tex(,377) generators with the new elements from the last run through the loop
../singular_texi/./d2t_singular/finvar_lib.tex(,378) (or the generators themselves during the first run). All the ones that
../singular_texi/./d2t_singular/finvar_lib.tex(,379) have been generated before are thrown out and the program terminates
../singular_texi/./d2t_singular/finvar_lib.tex(,380) when no new elements found in one run. Additionally each time a new
../singular_texi/./d2t_singular/finvar_lib.tex(,381) group element is found the corresponding ring mapping of which the
../singular_texi/./d2t_singular/finvar_lib.tex(,382) Reynolds operator is made up is generated. They are stored in the rows
../singular_texi/./d2t_singular/finvar_lib.tex(,383) of the first return value.
../singular_texi/./d2t_singular/finvar_lib.tex(,384) 
../singular_texi/./d2t_singular/finvar_lib.tex(,385) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,386) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,387) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,388) @c computed example group_reynolds d2t_singular/finvar_lib.doc:377 
../singular_texi/./d2t_singular/finvar_lib.tex(,389) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,390) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,391) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,392) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,393) print(L[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,394) @expansion{} y, -x,-z,
../singular_texi/./d2t_singular/finvar_lib.tex(,395) @expansion{} -x,-y,z, 
../singular_texi/./d2t_singular/finvar_lib.tex(,396) @expansion{} -y,x, -z,
../singular_texi/./d2t_singular/finvar_lib.tex(,397) @expansion{} x, y, z  
../singular_texi/./d2t_singular/finvar_lib.tex(,398) print(L[2..size(L)]);
../singular_texi/./d2t_singular/finvar_lib.tex(,399) @expansion{} 0, 1,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,400) @expansion{} -1,0,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,401) @expansion{} 0, 0,-1
../singular_texi/./d2t_singular/finvar_lib.tex(,402) @expansion{} -1,0, 0,
../singular_texi/./d2t_singular/finvar_lib.tex(,403) @expansion{} 0, -1,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,404) @expansion{} 0, 0, 1 
../singular_texi/./d2t_singular/finvar_lib.tex(,405) @expansion{} 0,-1,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,406) @expansion{} 1,0, 0,
../singular_texi/./d2t_singular/finvar_lib.tex(,407) @expansion{} 0,0, -1
../singular_texi/./d2t_singular/finvar_lib.tex(,408) @expansion{} 1,0,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,409) @expansion{} 0,1,0,
../singular_texi/./d2t_singular/finvar_lib.tex(,410) @expansion{} 0,0,1 
../singular_texi/./d2t_singular/finvar_lib.tex(,411) @c end example group_reynolds d2t_singular/finvar_lib.doc:377
../singular_texi/./d2t_singular/finvar_lib.tex(,412) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,413) @c ---end content group_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,414) 
../singular_texi/./d2t_singular/finvar_lib.tex(,415) @c ------------------- molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,416) @node molien, reynolds_molien, group_reynolds, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,417) @subsubsection molien
../singular_texi/./d2t_singular/finvar_lib.tex(,418) @cindex molien
../singular_texi/./d2t_singular/finvar_lib.tex(,419) @c ---content molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,420) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,421) 
../singular_texi/./d2t_singular/finvar_lib.tex(,422) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,423) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,424) molien(G1,G2,...[,ringname,lcm,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,425) @*G1,G2,...: nxn <matrices>, all elements of a finite matrix group,
../singular_texi/./d2t_singular/finvar_lib.tex(,426) ringname: a <string> giving a name for a new ring of characteristic 0
../singular_texi/./d2t_singular/finvar_lib.tex(,427) for the Molien series in case of prime characteristic, lcm: an <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,428) giving the lowest common multiple of the elements' orders in case of
../singular_texi/./d2t_singular/finvar_lib.tex(,429) prime characteristic, minpoly==0 and a non-cyclic group, flags: an
../singular_texi/./d2t_singular/finvar_lib.tex(,430) optional <intvec> with three components: if the first element is not
../singular_texi/./d2t_singular/finvar_lib.tex(,431) equal to 0 characteristic 0 is simulated, i.e. the Molien series is
../singular_texi/./d2t_singular/finvar_lib.tex(,432) computed as if the base field were characteristic 0 (the user must
../singular_texi/./d2t_singular/finvar_lib.tex(,433) choose a field of large prime characteristic, e.g. 32003), the second
../singular_texi/./d2t_singular/finvar_lib.tex(,434) component should give the size of intervals between canceling common
../singular_texi/./d2t_singular/finvar_lib.tex(,435) factors in the expansion of the Molien series, 0 (the default) means
../singular_texi/./d2t_singular/finvar_lib.tex(,436) only once after generating all terms, in prime characteristic also a
../singular_texi/./d2t_singular/finvar_lib.tex(,437) negative number can be given to indicate that common factors should
../singular_texi/./d2t_singular/finvar_lib.tex(,438) always be canceled when the expansion is simple (the root of the
../singular_texi/./d2t_singular/finvar_lib.tex(,439) extension field does not occur among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,440) 
../singular_texi/./d2t_singular/finvar_lib.tex(,441) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,442) n is the number of variables of the basering, G1,G2... are the group
../singular_texi/./d2t_singular/finvar_lib.tex(,443) elements generated by group_reynolds(), lcm is the second return value
../singular_texi/./d2t_singular/finvar_lib.tex(,444) of group_reynolds()
../singular_texi/./d2t_singular/finvar_lib.tex(,445) 
../singular_texi/./d2t_singular/finvar_lib.tex(,446) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,447) in case of characteristic 0 a 1x2 <matrix> giving enumerator and
../singular_texi/./d2t_singular/finvar_lib.tex(,448) denominator of Molien series; in case of prime characteristic a ring
../singular_texi/./d2t_singular/finvar_lib.tex(,449) with the name `ringname` of characteristic 0 is created where the same
../singular_texi/./d2t_singular/finvar_lib.tex(,450) Molien series (named M) is stored
../singular_texi/./d2t_singular/finvar_lib.tex(,451) 
../singular_texi/./d2t_singular/finvar_lib.tex(,452) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,453) information if the third component of flags does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,454) 
../singular_texi/./d2t_singular/finvar_lib.tex(,455) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,456) In characteristic 0 the terms 1/det(1-xE) for all group elements of
../singular_texi/./d2t_singular/finvar_lib.tex(,457) the Molien series are computed in a straight forward way. In prime
../singular_texi/./d2t_singular/finvar_lib.tex(,458) characteristic a Brauer lift is involved. The returned matrix gives
../singular_texi/./d2t_singular/finvar_lib.tex(,459) enumerator and denominator of the expanded version where common
../singular_texi/./d2t_singular/finvar_lib.tex(,460) factors have been canceled.
../singular_texi/./d2t_singular/finvar_lib.tex(,461) 
../singular_texi/./d2t_singular/finvar_lib.tex(,462) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,463) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,464) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,465) @c computed example molien d2t_singular/finvar_lib.doc:438 
../singular_texi/./d2t_singular/finvar_lib.tex(,466) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,467) "         note the case of prime characteristic"; 
../singular_texi/./d2t_singular/finvar_lib.tex(,468) @expansion{}          note the case of prime characteristic
../singular_texi/./d2t_singular/finvar_lib.tex(,469) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,470) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,471) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,472) matrix M=molien(L[2..size(L)]);
../singular_texi/./d2t_singular/finvar_lib.tex(,473) print(M);
../singular_texi/./d2t_singular/finvar_lib.tex(,474) @expansion{} x3+x2-x+1,-x7+x6+x5-x4+x3-x2-x+1
../singular_texi/./d2t_singular/finvar_lib.tex(,475) ring S=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,476) string newring="alksdfjlaskdjf";
../singular_texi/./d2t_singular/finvar_lib.tex(,477) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,478) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,479) molien(L[2..size(L)],newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,480) setring alksdfjlaskdjf;
../singular_texi/./d2t_singular/finvar_lib.tex(,481) print(M);
../singular_texi/./d2t_singular/finvar_lib.tex(,482) @expansion{} x3+x2-x+1,-x7+x6+x5-x4+x3-x2-x+1
../singular_texi/./d2t_singular/finvar_lib.tex(,483) setring S;
../singular_texi/./d2t_singular/finvar_lib.tex(,484) kill alksdfjlaskdjf;
../singular_texi/./d2t_singular/finvar_lib.tex(,485) @c end example molien d2t_singular/finvar_lib.doc:438
../singular_texi/./d2t_singular/finvar_lib.tex(,486) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,487) @c ---end content molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,488) 
../singular_texi/./d2t_singular/finvar_lib.tex(,489) @c ------------------- reynolds_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,490) @node reynolds_molien, partial_molien, molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,491) @subsubsection reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,492) @cindex reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,493) @c ---content reynolds_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,494) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,495) 
../singular_texi/./d2t_singular/finvar_lib.tex(,496) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,497) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,498) reynolds_molien(G1,G2,...[,ringname,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,499) @*G1,G2,...: nxn <matrices> generating a finite matrix group, ringname:
../singular_texi/./d2t_singular/finvar_lib.tex(,500) a <string> giving a name for a new ring of characteristic 0 for the
../singular_texi/./d2t_singular/finvar_lib.tex(,501) Molien series in case of prime characteristic, flags: an optional
../singular_texi/./d2t_singular/finvar_lib.tex(,502) <intvec> with three components: if the first element is not equal to 0
../singular_texi/./d2t_singular/finvar_lib.tex(,503) characteristic 0 is simulated, i.e. the Molien series is computed as
../singular_texi/./d2t_singular/finvar_lib.tex(,504) if the base field were characteristic 0 (the user must choose a field
../singular_texi/./d2t_singular/finvar_lib.tex(,505) of large prime characteristic, e.g. 32003) the second component should
../singular_texi/./d2t_singular/finvar_lib.tex(,506) give the size of intervals between canceling common factors in the
../singular_texi/./d2t_singular/finvar_lib.tex(,507) expansion of the Molien series, 0 (the default) means only once after
../singular_texi/./d2t_singular/finvar_lib.tex(,508) generating all terms, in prime characteristic also a negative number
../singular_texi/./d2t_singular/finvar_lib.tex(,509) can be given to indicate that common factors should always be canceled
../singular_texi/./d2t_singular/finvar_lib.tex(,510) when the expansion is simple (the root of the extension field does not
../singular_texi/./d2t_singular/finvar_lib.tex(,511) occur among the coefficients)
../singular_texi/./d2t_singular/finvar_lib.tex(,512) 
../singular_texi/./d2t_singular/finvar_lib.tex(,513) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,514) n is the number of variables of the basering, G1,G2... are the group
../singular_texi/./d2t_singular/finvar_lib.tex(,515) elements generated by group_reynolds(), g is the size of the group
../singular_texi/./d2t_singular/finvar_lib.tex(,516) 
../singular_texi/./d2t_singular/finvar_lib.tex(,517) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,518) a gxn <matrix> representing the Reynolds operator is the first return
../singular_texi/./d2t_singular/finvar_lib.tex(,519) value and in case of characteristic 0 a 1x2 <matrix> giving enumerator
../singular_texi/./d2t_singular/finvar_lib.tex(,520) and denominator of Molien series is the second one; in case of prime
../singular_texi/./d2t_singular/finvar_lib.tex(,521) characteristic a ring with the name `ringname` of characteristic 0 is
../singular_texi/./d2t_singular/finvar_lib.tex(,522) created where the same Molien series (named M) is stored
../singular_texi/./d2t_singular/finvar_lib.tex(,523) 
../singular_texi/./d2t_singular/finvar_lib.tex(,524) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,525) information if the third component of flags does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,526) 
../singular_texi/./d2t_singular/finvar_lib.tex(,527) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,528) The entire matrix group is generated by getting all left products of
../singular_texi/./d2t_singular/finvar_lib.tex(,529) the generators with new elements from the last run through the loop
../singular_texi/./d2t_singular/finvar_lib.tex(,530) (or the generators themselves during the first run). All the ones that
../singular_texi/./d2t_singular/finvar_lib.tex(,531) have been generated before are thrown out and the program terminates
../singular_texi/./d2t_singular/finvar_lib.tex(,532) when are no new elements found in one run. Additionally each time a
../singular_texi/./d2t_singular/finvar_lib.tex(,533) new group element is found the corresponding ring mapping of which the
../singular_texi/./d2t_singular/finvar_lib.tex(,534) Reynolds operator is made up is generated. They are stored in the rows
../singular_texi/./d2t_singular/finvar_lib.tex(,535) of the first return value. In characteristic 0 the terms 1/det(1-xE)
../singular_texi/./d2t_singular/finvar_lib.tex(,536) is computed whenever a new element E is found. In prime characteristic
../singular_texi/./d2t_singular/finvar_lib.tex(,537) a Brauer lift is involved and the terms are only computed after the
../singular_texi/./d2t_singular/finvar_lib.tex(,538) entire matrix group is generated (to avoid the modular case). The
../singular_texi/./d2t_singular/finvar_lib.tex(,539) returned matrix gives enumerator and denominator of the expanded
../singular_texi/./d2t_singular/finvar_lib.tex(,540) version where common factors have been canceled.
../singular_texi/./d2t_singular/finvar_lib.tex(,541) 
../singular_texi/./d2t_singular/finvar_lib.tex(,542) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,543) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,544) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,545) @c computed example reynolds_molien d2t_singular/finvar_lib.doc:515 
../singular_texi/./d2t_singular/finvar_lib.tex(,546) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,547) "         note the case of prime characteristic"; 
../singular_texi/./d2t_singular/finvar_lib.tex(,548) @expansion{}          note the case of prime characteristic
../singular_texi/./d2t_singular/finvar_lib.tex(,549) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,550) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,551) matrix REY,M=reynolds_molien(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,552) print(REY);
../singular_texi/./d2t_singular/finvar_lib.tex(,553) @expansion{} y, -x,-z,
../singular_texi/./d2t_singular/finvar_lib.tex(,554) @expansion{} -x,-y,z, 
../singular_texi/./d2t_singular/finvar_lib.tex(,555) @expansion{} -y,x, -z,
../singular_texi/./d2t_singular/finvar_lib.tex(,556) @expansion{} x, y, z  
../singular_texi/./d2t_singular/finvar_lib.tex(,557) print(M);
../singular_texi/./d2t_singular/finvar_lib.tex(,558) @expansion{} x3+x2-x+1,-x7+x6+x5-x4+x3-x2-x+1
../singular_texi/./d2t_singular/finvar_lib.tex(,559) ring S=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,560) string newring="Qadjoint";
../singular_texi/./d2t_singular/finvar_lib.tex(,561) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,562) matrix REY=reynolds_molien(A,newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,563) print(REY);
../singular_texi/./d2t_singular/finvar_lib.tex(,564) @expansion{} y, -x,-z,
../singular_texi/./d2t_singular/finvar_lib.tex(,565) @expansion{} -x,-y,z, 
../singular_texi/./d2t_singular/finvar_lib.tex(,566) @expansion{} -y,x, -z,
../singular_texi/./d2t_singular/finvar_lib.tex(,567) @expansion{} x, y, z  
../singular_texi/./d2t_singular/finvar_lib.tex(,568) setring Qadjoint;
../singular_texi/./d2t_singular/finvar_lib.tex(,569) print(M);
../singular_texi/./d2t_singular/finvar_lib.tex(,570) @expansion{} x3+x2-x+1,-x7+x6+x5-x4+x3-x2-x+1
../singular_texi/./d2t_singular/finvar_lib.tex(,571) setring S;
../singular_texi/./d2t_singular/finvar_lib.tex(,572) kill Qadjoint;
../singular_texi/./d2t_singular/finvar_lib.tex(,573) @c end example reynolds_molien d2t_singular/finvar_lib.doc:515
../singular_texi/./d2t_singular/finvar_lib.tex(,574) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,575) @c ---end content reynolds_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,576) 
../singular_texi/./d2t_singular/finvar_lib.tex(,577) @c ------------------- partial_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,578) @node partial_molien, evaluate_reynolds, reynolds_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,579) @subsubsection partial_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,580) @cindex partial_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,581) @c ---content partial_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,582) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,583) 
../singular_texi/./d2t_singular/finvar_lib.tex(,584) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,585) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,586) partial_molien(M,n[,p]);
../singular_texi/./d2t_singular/finvar_lib.tex(,587) @*M: a 1x2 <matrix>, n: an <int> indicating number of terms in the
../singular_texi/./d2t_singular/finvar_lib.tex(,588) expansion, p: an optional <poly>
../singular_texi/./d2t_singular/finvar_lib.tex(,589) 
../singular_texi/./d2t_singular/finvar_lib.tex(,590) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,591) M is the return value of molien or the second return value of
../singular_texi/./d2t_singular/finvar_lib.tex(,592) reynolds_molien, p ought to be the second return value of a previous
../singular_texi/./d2t_singular/finvar_lib.tex(,593) run of partial_molien and avoids recalculating known terms
../singular_texi/./d2t_singular/finvar_lib.tex(,594) 
../singular_texi/./d2t_singular/finvar_lib.tex(,595) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,596) n terms (type <poly>) of the partial expansion of the Molien series
../singular_texi/./d2t_singular/finvar_lib.tex(,597) (first n if there is no third parameter given, otherwise the next n
../singular_texi/./d2t_singular/finvar_lib.tex(,598) terms depending on a previous calculation) and an intermediate result
../singular_texi/./d2t_singular/finvar_lib.tex(,599) (type <poly>) of the calculation to be used as third parameter in a
../singular_texi/./d2t_singular/finvar_lib.tex(,600) next run of partial_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,601) 
../singular_texi/./d2t_singular/finvar_lib.tex(,602) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,603) The following calculation is implemented:
../singular_texi/./d2t_singular/finvar_lib.tex(,604) @format
../singular_texi/./d2t_singular/finvar_lib.tex(,605) (1+a1x+a2x^2+...+anx^n)/(1+b1x+b2x^2+...+bmx^m)=(1+(a1-b1)x+...
../singular_texi/./d2t_singular/finvar_lib.tex(,606) (1+b1x+b2x^2+...+bmx^m)
../singular_texi/./d2t_singular/finvar_lib.tex(,607) -----------------------
../singular_texi/./d2t_singular/finvar_lib.tex(,608)    (a1-b1)x+(a2-b2)x^2+...
../singular_texi/./d2t_singular/finvar_lib.tex(,609)    (a1-b1)x+b1(a1-b1)x^2+...
../singular_texi/./d2t_singular/finvar_lib.tex(,610) @end format
../singular_texi/./d2t_singular/finvar_lib.tex(,611) 
../singular_texi/./d2t_singular/finvar_lib.tex(,612) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,613) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,614) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,615) @c computed example partial_molien d2t_singular/finvar_lib.doc:574 
../singular_texi/./d2t_singular/finvar_lib.tex(,616) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,617) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,618) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,619) matrix REY,M=reynolds_molien(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,620) poly p(1..2);
../singular_texi/./d2t_singular/finvar_lib.tex(,621) p(1..2)=partial_molien(M,5);
../singular_texi/./d2t_singular/finvar_lib.tex(,622) p(1);
../singular_texi/./d2t_singular/finvar_lib.tex(,623) @expansion{} 4x5+5x4+2x3+2x2+1
../singular_texi/./d2t_singular/finvar_lib.tex(,624) p(1..2)=partial_molien(M,5,p(2));
../singular_texi/./d2t_singular/finvar_lib.tex(,625) p(1);
../singular_texi/./d2t_singular/finvar_lib.tex(,626) @expansion{} 18x10+12x9+13x8+8x7+8x6
../singular_texi/./d2t_singular/finvar_lib.tex(,627) @c end example partial_molien d2t_singular/finvar_lib.doc:574
../singular_texi/./d2t_singular/finvar_lib.tex(,628) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,629) @c ---end content partial_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,630) 
../singular_texi/./d2t_singular/finvar_lib.tex(,631) @c ------------------- evaluate_reynolds -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,632) @node evaluate_reynolds, invariant_basis, partial_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,633) @subsubsection evaluate_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,634) @cindex evaluate_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,635) @c ---content evaluate_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,636) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,637) 
../singular_texi/./d2t_singular/finvar_lib.tex(,638) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,639) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,640) evaluate_reynolds(REY,I);
../singular_texi/./d2t_singular/finvar_lib.tex(,641) @*REY: a <matrix> representing the Reynolds operator, I: an arbitrary
../singular_texi/./d2t_singular/finvar_lib.tex(,642) <ideal>
../singular_texi/./d2t_singular/finvar_lib.tex(,643) 
../singular_texi/./d2t_singular/finvar_lib.tex(,644) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,645) REY is the first return value of group_reynolds() or reynolds_molien()
../singular_texi/./d2t_singular/finvar_lib.tex(,646) 
../singular_texi/./d2t_singular/finvar_lib.tex(,647) @item @strong{Returns:}
../singular_texi/./d2t_singular/finvar_lib.tex(,648) image of the polynomials defining I under the Reynolds operator
../singular_texi/./d2t_singular/finvar_lib.tex(,649) (type <ideal>)
../singular_texi/./d2t_singular/finvar_lib.tex(,650) 
../singular_texi/./d2t_singular/finvar_lib.tex(,651) @item @strong{Note:}
../singular_texi/./d2t_singular/finvar_lib.tex(,652) the characteristic of the coefficient field of the polynomial ring
../singular_texi/./d2t_singular/finvar_lib.tex(,653) should not divide the order of the finite matrix group
../singular_texi/./d2t_singular/finvar_lib.tex(,654) 
../singular_texi/./d2t_singular/finvar_lib.tex(,655) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,656) REY has been constructed in such a way that each row serves as a ring
../singular_texi/./d2t_singular/finvar_lib.tex(,657) mapping of which the Reynolds operator is made up.
../singular_texi/./d2t_singular/finvar_lib.tex(,658) 
../singular_texi/./d2t_singular/finvar_lib.tex(,659) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,660) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,661) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,662) @c computed example evaluate_reynolds d2t_singular/finvar_lib.doc:619 
../singular_texi/./d2t_singular/finvar_lib.tex(,663) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,664) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,665) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,666) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,667) ideal I=x2,y2,z2;
../singular_texi/./d2t_singular/finvar_lib.tex(,668) print(evaluate_reynolds(L[1],I));
../singular_texi/./d2t_singular/finvar_lib.tex(,669) @expansion{} 1/2x2+1/2y2,
../singular_texi/./d2t_singular/finvar_lib.tex(,670) @expansion{} 1/2x2+1/2y2,
../singular_texi/./d2t_singular/finvar_lib.tex(,671) @expansion{} z2
../singular_texi/./d2t_singular/finvar_lib.tex(,672) @c end example evaluate_reynolds d2t_singular/finvar_lib.doc:619
../singular_texi/./d2t_singular/finvar_lib.tex(,673) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,674) @c ---end content evaluate_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,675) 
../singular_texi/./d2t_singular/finvar_lib.tex(,676) @c ------------------- invariant_basis -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,677) @node invariant_basis, invariant_basis_reynolds, evaluate_reynolds, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,678) @subsubsection invariant_basis
../singular_texi/./d2t_singular/finvar_lib.tex(,679) @cindex invariant_basis
../singular_texi/./d2t_singular/finvar_lib.tex(,680) @c ---content invariant_basis---
../singular_texi/./d2t_singular/finvar_lib.tex(,681) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,682) 
../singular_texi/./d2t_singular/finvar_lib.tex(,683) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,684) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,685) invariant_basis(g,G1,G2,...);
../singular_texi/./d2t_singular/finvar_lib.tex(,686) @*g: an <int> indicating of which degree (>0) the homogeneous basis
../singular_texi/./d2t_singular/finvar_lib.tex(,687) should be, G1,G2,...: <matrices> generating a finite matrix group
../singular_texi/./d2t_singular/finvar_lib.tex(,688) 
../singular_texi/./d2t_singular/finvar_lib.tex(,689) @item @strong{Returns:}
../singular_texi/./d2t_singular/finvar_lib.tex(,690) the basis (type <ideal>) of the space of invariants of degree g
../singular_texi/./d2t_singular/finvar_lib.tex(,691) 
../singular_texi/./d2t_singular/finvar_lib.tex(,692) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,693) A general polynomial of degree g is generated and the generators of
../singular_texi/./d2t_singular/finvar_lib.tex(,694) the matrix group applied. The difference ought to be 0 and this way a
../singular_texi/./d2t_singular/finvar_lib.tex(,695) system of linear equations is created. It is solved by computing
../singular_texi/./d2t_singular/finvar_lib.tex(,696) syzygies.
../singular_texi/./d2t_singular/finvar_lib.tex(,697) 
../singular_texi/./d2t_singular/finvar_lib.tex(,698) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,699) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,700) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,701) @c computed example invariant_basis d2t_singular/finvar_lib.doc:655 
../singular_texi/./d2t_singular/finvar_lib.tex(,702) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,703) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,704) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,705) print(invariant_basis(2,A));
../singular_texi/./d2t_singular/finvar_lib.tex(,706) @expansion{} x2+y2,
../singular_texi/./d2t_singular/finvar_lib.tex(,707) @expansion{} z2
../singular_texi/./d2t_singular/finvar_lib.tex(,708) @c end example invariant_basis d2t_singular/finvar_lib.doc:655
../singular_texi/./d2t_singular/finvar_lib.tex(,709) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,710) @c ---end content invariant_basis---
../singular_texi/./d2t_singular/finvar_lib.tex(,711) 
../singular_texi/./d2t_singular/finvar_lib.tex(,712) @c ------------------- invariant_basis_reynolds -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,713) @node invariant_basis_reynolds, primary_char0, invariant_basis, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,714) @subsubsection invariant_basis_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,715) @cindex invariant_basis_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,716) @c ---content invariant_basis_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,717) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,718) 
../singular_texi/./d2t_singular/finvar_lib.tex(,719) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,720) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,721) invariant_basis_reynolds(REY,d[,flags]);
../singular_texi/./d2t_singular/finvar_lib.tex(,722) @*REY: a <matrix> representing the Reynolds operator, d: an <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,723) indicating of which degree (>0) the homogeneous basis should be, flags:
../singular_texi/./d2t_singular/finvar_lib.tex(,724) an optional <intvec> with two entries: its first component gives the
../singular_texi/./d2t_singular/finvar_lib.tex(,725) dimension of the space (default <0 meaning unknown) and its second
../singular_texi/./d2t_singular/finvar_lib.tex(,726) component is used as the number of polynomials that should be mapped
../singular_texi/./d2t_singular/finvar_lib.tex(,727) to invariants during one call of evaluate_reynolds if the dimension of
../singular_texi/./d2t_singular/finvar_lib.tex(,728) the space is unknown or the number such that number x dimension
../singular_texi/./d2t_singular/finvar_lib.tex(,729) polynomials are mapped to invariants during one call of
../singular_texi/./d2t_singular/finvar_lib.tex(,730) evaluate_reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,731) 
../singular_texi/./d2t_singular/finvar_lib.tex(,732) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,733) REY is the first return value of group_reynolds() or reynolds_molien()
../singular_texi/./d2t_singular/finvar_lib.tex(,734) and flags[1] given by partial_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,735) 
../singular_texi/./d2t_singular/finvar_lib.tex(,736) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,737) the basis (type <ideal>) of the space of invariants of degree d
../singular_texi/./d2t_singular/finvar_lib.tex(,738) 
../singular_texi/./d2t_singular/finvar_lib.tex(,739) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,740) Monomials of degree d are mapped to invariants with the Reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,741) operator. A linearly independent set is generated with the help of
../singular_texi/./d2t_singular/finvar_lib.tex(,742) minbase.
../singular_texi/./d2t_singular/finvar_lib.tex(,743) 
../singular_texi/./d2t_singular/finvar_lib.tex(,744) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,745) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,746) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,747) @c computed example invariant_basis_reynolds d2t_singular/finvar_lib.doc:699 
../singular_texi/./d2t_singular/finvar_lib.tex(,748) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,749) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,750) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,751) intvec flags=0,1,0;
../singular_texi/./d2t_singular/finvar_lib.tex(,752) matrix REY,M=reynolds_molien(A,flags);
../singular_texi/./d2t_singular/finvar_lib.tex(,753) flags=8,6;
../singular_texi/./d2t_singular/finvar_lib.tex(,754) print(invariant_basis_reynolds(REY,6,flags));
../singular_texi/./d2t_singular/finvar_lib.tex(,755) @expansion{} z6,
../singular_texi/./d2t_singular/finvar_lib.tex(,756) @expansion{} x2z4+y2z4,
../singular_texi/./d2t_singular/finvar_lib.tex(,757) @expansion{} x2y2z2,
../singular_texi/./d2t_singular/finvar_lib.tex(,758) @expansion{} x3yz2-xy3z2,
../singular_texi/./d2t_singular/finvar_lib.tex(,759) @expansion{} x4z2+y4z2,
../singular_texi/./d2t_singular/finvar_lib.tex(,760) @expansion{} x4y2+x2y4,
../singular_texi/./d2t_singular/finvar_lib.tex(,761) @expansion{} x5y-xy5,
../singular_texi/./d2t_singular/finvar_lib.tex(,762) @expansion{} x6+y6
../singular_texi/./d2t_singular/finvar_lib.tex(,763) @c end example invariant_basis_reynolds d2t_singular/finvar_lib.doc:699
../singular_texi/./d2t_singular/finvar_lib.tex(,764) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,765) @c ---end content invariant_basis_reynolds---
../singular_texi/./d2t_singular/finvar_lib.tex(,766) 
../singular_texi/./d2t_singular/finvar_lib.tex(,767) @c ------------------- primary_char0 -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,768) @node primary_char0, primary_charp, invariant_basis_reynolds, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,769) @subsubsection primary_char0
../singular_texi/./d2t_singular/finvar_lib.tex(,770) @cindex primary_char0
../singular_texi/./d2t_singular/finvar_lib.tex(,771) @c ---content primary_char0---
../singular_texi/./d2t_singular/finvar_lib.tex(,772) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,773) 
../singular_texi/./d2t_singular/finvar_lib.tex(,774) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,775) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,776) primary_char0(REY,M[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,777) @*REY: a <matrix> representing the Reynolds operator, M: a 1x2 <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,778) representing the Molien series, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,779) 
../singular_texi/./d2t_singular/finvar_lib.tex(,780) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,781) REY is the first return value of group_reynolds or reynolds_molien and
../singular_texi/./d2t_singular/finvar_lib.tex(,782) M the one of molien or the second one of reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,783) 
../singular_texi/./d2t_singular/finvar_lib.tex(,784) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,785) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,786) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,787) 
../singular_texi/./d2t_singular/finvar_lib.tex(,788) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,789) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,790) 
../singular_texi/./d2t_singular/finvar_lib.tex(,791) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,792) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,793) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,794) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,795) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,796) Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,797) 
../singular_texi/./d2t_singular/finvar_lib.tex(,798) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,799) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,800) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,801) @c computed example primary_char0 d2t_singular/finvar_lib.doc:745 
../singular_texi/./d2t_singular/finvar_lib.tex(,802) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,803) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,804) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,805) matrix REY,M=reynolds_molien(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,806) matrix P=primary_char0(REY,M);
../singular_texi/./d2t_singular/finvar_lib.tex(,807) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,808) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,809) @c end example primary_char0 d2t_singular/finvar_lib.doc:745
../singular_texi/./d2t_singular/finvar_lib.tex(,810) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,811) @c ---end content primary_char0---
../singular_texi/./d2t_singular/finvar_lib.tex(,812) 
../singular_texi/./d2t_singular/finvar_lib.tex(,813) @c ------------------- primary_charp -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,814) @node primary_charp, primary_char0_no_molien, primary_char0, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,815) @subsubsection primary_charp
../singular_texi/./d2t_singular/finvar_lib.tex(,816) @cindex primary_charp
../singular_texi/./d2t_singular/finvar_lib.tex(,817) @c ---content primary_charp---
../singular_texi/./d2t_singular/finvar_lib.tex(,818) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,819) 
../singular_texi/./d2t_singular/finvar_lib.tex(,820) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,821) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,822) primary_charp(REY,ringname[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,823) @*REY: a <matrix> representing the Reynolds operator, ringname: a
../singular_texi/./d2t_singular/finvar_lib.tex(,824) <string> giving the name of a ring where the Molien series is stored,
../singular_texi/./d2t_singular/finvar_lib.tex(,825) v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,826) 
../singular_texi/./d2t_singular/finvar_lib.tex(,827) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,828) REY is the first return value of group_reynolds or reynolds_molien and
../singular_texi/./d2t_singular/finvar_lib.tex(,829) ringname gives the name of a ring of characteristic 0 that has been
../singular_texi/./d2t_singular/finvar_lib.tex(,830) created by molien or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,831) 
../singular_texi/./d2t_singular/finvar_lib.tex(,832) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,833) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,834) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,835) 
../singular_texi/./d2t_singular/finvar_lib.tex(,836) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,837) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,838) 
../singular_texi/./d2t_singular/finvar_lib.tex(,839) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,840) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,841) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,842) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,843) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,844) Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,845) 
../singular_texi/./d2t_singular/finvar_lib.tex(,846) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,847) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,848) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,849) @c computed example primary_charp d2t_singular/finvar_lib.doc:792 
../singular_texi/./d2t_singular/finvar_lib.tex(,850) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,851) ring R=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,852) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,853) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,854) string newring="alskdfj";
../singular_texi/./d2t_singular/finvar_lib.tex(,855) molien(L[2..size(L)],newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,856) matrix P=primary_charp(L[1],newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,857) if(system("with","Namespaces")) @{ kill Top::`newring`; @}
../singular_texi/./d2t_singular/finvar_lib.tex(,858) kill `newring`;
../singular_texi/./d2t_singular/finvar_lib.tex(,859) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,860) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,861) @c end example primary_charp d2t_singular/finvar_lib.doc:792
../singular_texi/./d2t_singular/finvar_lib.tex(,862) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,863) @c ---end content primary_charp---
../singular_texi/./d2t_singular/finvar_lib.tex(,864) 
../singular_texi/./d2t_singular/finvar_lib.tex(,865) @c ------------------- primary_char0_no_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,866) @node primary_char0_no_molien, primary_charp_no_molien, primary_charp, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,867) @subsubsection primary_char0_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,868) @cindex primary_char0_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,869) @c ---content primary_char0_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,870) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,871) 
../singular_texi/./d2t_singular/finvar_lib.tex(,872) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,873) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,874) primary_char0_no_molien(REY[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,875) @*REY: a <matrix> representing the Reynolds operator, v: an optional
../singular_texi/./d2t_singular/finvar_lib.tex(,876) <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,877) 
../singular_texi/./d2t_singular/finvar_lib.tex(,878) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,879) REY is the first return value of group_reynolds or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,880) 
../singular_texi/./d2t_singular/finvar_lib.tex(,881) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,882) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,883) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,884) 
../singular_texi/./d2t_singular/finvar_lib.tex(,885) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,886) primary invariants (type <matrix>) of the invariant ring and an
../singular_texi/./d2t_singular/finvar_lib.tex(,887) <intvec> listing some of the degrees where no non-trivial homogeneous
../singular_texi/./d2t_singular/finvar_lib.tex(,888) invariants are to be found
../singular_texi/./d2t_singular/finvar_lib.tex(,889) 
../singular_texi/./d2t_singular/finvar_lib.tex(,890) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,891) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,892) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,893) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,894) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,895) Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,896) 
../singular_texi/./d2t_singular/finvar_lib.tex(,897) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,898) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,899) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,900) @c computed example primary_char0_no_molien d2t_singular/finvar_lib.doc:842 
../singular_texi/./d2t_singular/finvar_lib.tex(,901) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,902) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,903) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,904) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,905) list l=primary_char0_no_molien(L[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,906) print(l[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,907) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,908) @c end example primary_char0_no_molien d2t_singular/finvar_lib.doc:842
../singular_texi/./d2t_singular/finvar_lib.tex(,909) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,910) @c ---end content primary_char0_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,911) 
../singular_texi/./d2t_singular/finvar_lib.tex(,912) @c ------------------- primary_charp_no_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,913) @node primary_charp_no_molien, primary_charp_without, primary_char0_no_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,914) @subsubsection primary_charp_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,915) @cindex primary_charp_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,916) @c ---content primary_charp_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,917) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,918) 
../singular_texi/./d2t_singular/finvar_lib.tex(,919) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,920) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,921) primary_charp_no_molien(REY[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,922) @*REY: a <matrix> representing the Reynolds operator, v: an optional
../singular_texi/./d2t_singular/finvar_lib.tex(,923) <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,924) 
../singular_texi/./d2t_singular/finvar_lib.tex(,925) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,926) REY is the first return value of group_reynolds or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,927) 
../singular_texi/./d2t_singular/finvar_lib.tex(,928) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,929) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,930) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,931) 
../singular_texi/./d2t_singular/finvar_lib.tex(,932) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,933) primary invariants (type <matrix>) of the invariant ring and an
../singular_texi/./d2t_singular/finvar_lib.tex(,934) <intvec> listing some of the degrees where no non-trivial homogeneous
../singular_texi/./d2t_singular/finvar_lib.tex(,935) invariants are to be found
../singular_texi/./d2t_singular/finvar_lib.tex(,936) 
../singular_texi/./d2t_singular/finvar_lib.tex(,937) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,938) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,939) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,940) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,941) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,942) Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,943) 
../singular_texi/./d2t_singular/finvar_lib.tex(,944) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,945) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,946) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,947) @c computed example primary_charp_no_molien d2t_singular/finvar_lib.doc:888 
../singular_texi/./d2t_singular/finvar_lib.tex(,948) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,949) ring R=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,950) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,951) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,952) list l=primary_charp_no_molien(L[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,953) print(l[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,954) @expansion{} z2,x2+y2,x2y2
../singular_texi/./d2t_singular/finvar_lib.tex(,955) @c end example primary_charp_no_molien d2t_singular/finvar_lib.doc:888
../singular_texi/./d2t_singular/finvar_lib.tex(,956) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,957) @c ---end content primary_charp_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,958) 
../singular_texi/./d2t_singular/finvar_lib.tex(,959) @c ------------------- primary_charp_without -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,960) @node primary_charp_without, primary_char0_random, primary_charp_no_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,961) @subsubsection primary_charp_without
../singular_texi/./d2t_singular/finvar_lib.tex(,962) @cindex primary_charp_without
../singular_texi/./d2t_singular/finvar_lib.tex(,963) @c ---content primary_charp_without---
../singular_texi/./d2t_singular/finvar_lib.tex(,964) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,965) 
../singular_texi/./d2t_singular/finvar_lib.tex(,966) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,967) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,968) primary_charp_without(G1,G2,...[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,969) @*G1,G2,...: <matrices> generating a finite matrix group, v: an optional
../singular_texi/./d2t_singular/finvar_lib.tex(,970) <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,971) 
../singular_texi/./d2t_singular/finvar_lib.tex(,972) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,973) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,974) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,975) 
../singular_texi/./d2t_singular/finvar_lib.tex(,976) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,977) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,978) 
../singular_texi/./d2t_singular/finvar_lib.tex(,979) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,980) Bases of homogeneous invariants are generated successively and those
../singular_texi/./d2t_singular/finvar_lib.tex(,981) are chosen as primary invariants that lower the dimension of the ideal
../singular_texi/./d2t_singular/finvar_lib.tex(,982) generated by the previously found invariants (see paper "Generating a
../singular_texi/./d2t_singular/finvar_lib.tex(,983) Noetherian Normalization of the Invariant Ring of a Finite Group" by
../singular_texi/./d2t_singular/finvar_lib.tex(,984) Decker, Heydtmann, Schreyer (1998)). No Reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,985) @*operator or Molien series is used.
../singular_texi/./d2t_singular/finvar_lib.tex(,986) 
../singular_texi/./d2t_singular/finvar_lib.tex(,987) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,988) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,989) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,990) @c computed example primary_charp_without d2t_singular/finvar_lib.doc:930 
../singular_texi/./d2t_singular/finvar_lib.tex(,991) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,992) ring R=2,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,993) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,994) matrix P=primary_charp_without(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,995) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,996) @expansion{} x+y,z,xy
../singular_texi/./d2t_singular/finvar_lib.tex(,997) @c end example primary_charp_without d2t_singular/finvar_lib.doc:930
../singular_texi/./d2t_singular/finvar_lib.tex(,998) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,999) @c ---end content primary_charp_without---
../singular_texi/./d2t_singular/finvar_lib.tex(,1000) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1001) @c ------------------- primary_char0_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1002) @node primary_char0_random, primary_charp_random, primary_charp_without, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1003) @subsubsection primary_char0_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1004) @cindex primary_char0_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1005) @c ---content primary_char0_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1006) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1007) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1008) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1009) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1010) primary_char0_random(REY,M,r[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1011) @*REY: a <matrix> representing the Reynolds operator, M: a 1x2 <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,1012) representing the Molien series, r: an <int> where -|r| to |r| is the
../singular_texi/./d2t_singular/finvar_lib.tex(,1013) range of coefficients of the random combinations of bases elements,
../singular_texi/./d2t_singular/finvar_lib.tex(,1014) v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1015) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1016) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1017) REY is the first return value of group_reynolds or reynolds_molien and
../singular_texi/./d2t_singular/finvar_lib.tex(,1018) M the one of molien or the second one of reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1019) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1020) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1021) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,1022) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1023) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1024) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1025) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1026) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1027) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1028) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,1029) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,1030) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,1031) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1032) a Finite Group" by Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1033) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1034) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1035) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1036) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1037) @c computed example primary_char0_random d2t_singular/finvar_lib.doc:976 
../singular_texi/./d2t_singular/finvar_lib.tex(,1038) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1039) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1040) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1041) matrix REY,M=reynolds_molien(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1042) matrix P=primary_char0_random(REY,M,1);
../singular_texi/./d2t_singular/finvar_lib.tex(,1043) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,1044) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,1045) @c end example primary_char0_random d2t_singular/finvar_lib.doc:976
../singular_texi/./d2t_singular/finvar_lib.tex(,1046) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1047) @c ---end content primary_char0_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1048) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1049) @c ------------------- primary_charp_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1050) @node primary_charp_random, primary_char0_no_molien_random, primary_char0_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1051) @subsubsection primary_charp_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1052) @cindex primary_charp_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1053) @c ---content primary_charp_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1054) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1055) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1056) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1057) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1058) primary_charp_random(REY,ringname,r[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1059) @*REY: a <matrix> representing the Reynolds operator, ringname: a
../singular_texi/./d2t_singular/finvar_lib.tex(,1060) <string> giving the name of a ring where the Molien series is stored,
../singular_texi/./d2t_singular/finvar_lib.tex(,1061) r: an <int> where -|r| to |r| is the range of coefficients of the
../singular_texi/./d2t_singular/finvar_lib.tex(,1062) random combinations of bases elements, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1063) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1064) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1065) REY is the first return value of group_reynolds or reynolds_molien and
../singular_texi/./d2t_singular/finvar_lib.tex(,1066) ringname gives the name of a ring of characteristic 0 that has been
../singular_texi/./d2t_singular/finvar_lib.tex(,1067) created by molien or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1068) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1069) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1070) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,1071) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1072) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1073) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1074) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1075) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1076) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1077) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,1078) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,1079) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,1080) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1081) a Finite Group" by Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1082) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1083) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1084) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1085) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1086) @c computed example primary_charp_random d2t_singular/finvar_lib.doc:1024 
../singular_texi/./d2t_singular/finvar_lib.tex(,1087) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1088) ring R=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1089) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1090) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1091) string newring="alskdfj";
../singular_texi/./d2t_singular/finvar_lib.tex(,1092) molien(L[2..size(L)],newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,1093) matrix P=primary_charp_random(L[1],newring,1);
../singular_texi/./d2t_singular/finvar_lib.tex(,1094) if(system("with","Namespaces")) @{ kill Top::`newring`; @}
../singular_texi/./d2t_singular/finvar_lib.tex(,1095) kill `newring`;
../singular_texi/./d2t_singular/finvar_lib.tex(,1096) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,1097) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,1098) @c end example primary_charp_random d2t_singular/finvar_lib.doc:1024
../singular_texi/./d2t_singular/finvar_lib.tex(,1099) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1100) @c ---end content primary_charp_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1101) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1102) @c ------------------- primary_char0_no_molien_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1103) @node primary_char0_no_molien_random, primary_charp_no_molien_random, primary_charp_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1104) @subsubsection primary_char0_no_molien_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1105) @cindex primary_char0_no_molien_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1106) @c ---content primary_char0_no_molien_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1107) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1108) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1109) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1110) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1111) primary_char0_no_molien_random(REY,r[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1112) @*REY: a <matrix> representing the Reynolds operator, r: an <int> where
../singular_texi/./d2t_singular/finvar_lib.tex(,1113) -|r| to |r| is the range of coefficients of the random combinations of
../singular_texi/./d2t_singular/finvar_lib.tex(,1114) bases elements, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1115) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1116) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1117) REY is the first return value of group_reynolds or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1118) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1119) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1120) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,1121) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1122) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1123) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1124) primary invariants (type <matrix>) of the invariant ring and an
../singular_texi/./d2t_singular/finvar_lib.tex(,1125) <intvec> listing some of the degrees where no non-trivial homogeneous
../singular_texi/./d2t_singular/finvar_lib.tex(,1126) invariants are to be found
../singular_texi/./d2t_singular/finvar_lib.tex(,1127) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1128) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1129) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,1130) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,1131) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,1132) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1133) a Finite Group" by Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1134) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1135) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1136) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1137) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1138) @c computed example primary_char0_no_molien_random d2t_singular/finvar_lib.doc:1075 
../singular_texi/./d2t_singular/finvar_lib.tex(,1139) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1140) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1141) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1142) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1143) list l=primary_char0_no_molien_random(L[1],1);
../singular_texi/./d2t_singular/finvar_lib.tex(,1144) print(l[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1145) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,1146) @c end example primary_char0_no_molien_random d2t_singular/finvar_lib.doc:1075
../singular_texi/./d2t_singular/finvar_lib.tex(,1147) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1148) @c ---end content primary_char0_no_molien_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1149) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1150) @c ------------------- primary_charp_no_molien_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1151) @node primary_charp_no_molien_random, primary_charp_without_random, primary_char0_no_molien_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1152) @subsubsection primary_charp_no_molien_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1153) @cindex primary_charp_no_molien_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1154) @c ---content primary_charp_no_molien_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1155) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1156) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1157) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1158) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1159) primary_charp_no_molien_random(REY,r[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1160) @*REY: a <matrix> representing the Reynolds operator, r: an <int> where
../singular_texi/./d2t_singular/finvar_lib.tex(,1161) -|r| to |r| is the range of coefficients of the random combinations of
../singular_texi/./d2t_singular/finvar_lib.tex(,1162) bases elements, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1163) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1164) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1165) REY is the first return value of group_reynolds or reynolds_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1166) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1167) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1168) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,1169) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1170) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1171) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1172) primary invariants (type <matrix>) of the invariant ring and an
../singular_texi/./d2t_singular/finvar_lib.tex(,1173) <intvec> listing some of the degrees where no non-trivial homogeneous
../singular_texi/./d2t_singular/finvar_lib.tex(,1174) invariants are to be found
../singular_texi/./d2t_singular/finvar_lib.tex(,1175) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1176) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1177) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,1178) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,1179) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,1180) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1181) a Finite Group" by Decker, Heydtmann, Schreyer (1998)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1182) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1183) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1184) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1185) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1186) @c computed example primary_charp_no_molien_random d2t_singular/finvar_lib.doc:1122 
../singular_texi/./d2t_singular/finvar_lib.tex(,1187) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1188) ring R=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1189) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1190) list L=group_reynolds(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1191) list l=primary_charp_no_molien_random(L[1],1);
../singular_texi/./d2t_singular/finvar_lib.tex(,1192) print(l[1]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1193) @expansion{} z2,x2+y2,x4+y4-z4
../singular_texi/./d2t_singular/finvar_lib.tex(,1194) @c end example primary_charp_no_molien_random d2t_singular/finvar_lib.doc:1122
../singular_texi/./d2t_singular/finvar_lib.tex(,1195) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1196) @c ---end content primary_charp_no_molien_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1197) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1198) @c ------------------- primary_charp_without_random -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1199) @node primary_charp_without_random, power_products, primary_charp_no_molien_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1200) @subsubsection primary_charp_without_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1201) @cindex primary_charp_without_random
../singular_texi/./d2t_singular/finvar_lib.tex(,1202) @c ---content primary_charp_without_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1203) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1204) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1205) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1206) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1207) primary_charp_without_random(G1,G2,...,r[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1208) @*G1,G2,...: <matrices> generating a finite matrix group, r: an <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1209) where -|r| to |r| is the range of coefficients of the random
../singular_texi/./d2t_singular/finvar_lib.tex(,1210) combinations of bases elements, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1211) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1212) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1213) information about the various stages of the program if v does not
../singular_texi/./d2t_singular/finvar_lib.tex(,1214) equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1215) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1216) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1217) primary invariants (type <matrix>) of the invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1218) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1219) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1220) Bases of homogeneous invariants are generated successively and random
../singular_texi/./d2t_singular/finvar_lib.tex(,1221) linear combinations are chosen as primary invariants that lower the
../singular_texi/./d2t_singular/finvar_lib.tex(,1222) dimension of the ideal generated by the previously found invariants
../singular_texi/./d2t_singular/finvar_lib.tex(,1223) (see "Generating a Noetherian Normalization of the Invariant Ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1224) a Finite Group" by Decker, Heydtmann, Schreyer (1998)). No Reynolds
../singular_texi/./d2t_singular/finvar_lib.tex(,1225) operator or Molien series is used.
../singular_texi/./d2t_singular/finvar_lib.tex(,1226) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1227) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1228) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1229) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1230) @c computed example primary_charp_without_random d2t_singular/finvar_lib.doc:1165 
../singular_texi/./d2t_singular/finvar_lib.tex(,1231) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1232) ring R=2,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1233) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1234) matrix P=primary_charp_without_random(A,1);
../singular_texi/./d2t_singular/finvar_lib.tex(,1235) print(P);
../singular_texi/./d2t_singular/finvar_lib.tex(,1236) @expansion{} x+y,z,xy
../singular_texi/./d2t_singular/finvar_lib.tex(,1237) @c end example primary_charp_without_random d2t_singular/finvar_lib.doc:1165
../singular_texi/./d2t_singular/finvar_lib.tex(,1238) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1239) @c ---end content primary_charp_without_random---
../singular_texi/./d2t_singular/finvar_lib.tex(,1240) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1241) @c ------------------- power_products -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1242) @node power_products, secondary_char0, primary_charp_without_random, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1243) @subsubsection power_products
../singular_texi/./d2t_singular/finvar_lib.tex(,1244) @cindex power_products
../singular_texi/./d2t_singular/finvar_lib.tex(,1245) @c ---content power_products---
../singular_texi/./d2t_singular/finvar_lib.tex(,1246) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1247) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1248) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1249) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1250) power_products(dv,d);
../singular_texi/./d2t_singular/finvar_lib.tex(,1251) @*dv: an <intvec> giving the degrees of homogeneous polynomials, d: the
../singular_texi/./d2t_singular/finvar_lib.tex(,1252) degree of the desired power products
../singular_texi/./d2t_singular/finvar_lib.tex(,1253) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1254) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1255) a size(dv)*m <intmat> where each column ought to be interpreted as
../singular_texi/./d2t_singular/finvar_lib.tex(,1256) containing the exponents of the corresponding polynomials. The product
../singular_texi/./d2t_singular/finvar_lib.tex(,1257) of the powers is then homogeneous of degree d.
../singular_texi/./d2t_singular/finvar_lib.tex(,1258) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1259) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1260) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1261) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1262) @c computed example power_products d2t_singular/finvar_lib.doc:1196 
../singular_texi/./d2t_singular/finvar_lib.tex(,1263) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1264) intvec dv=5,5,5,10,10;
../singular_texi/./d2t_singular/finvar_lib.tex(,1265) print(power_products(dv,10));
../singular_texi/./d2t_singular/finvar_lib.tex(,1266) @expansion{}      2     1     1     0     0     0     0     0
../singular_texi/./d2t_singular/finvar_lib.tex(,1267) @expansion{}      0     1     0     2     1     0     0     0
../singular_texi/./d2t_singular/finvar_lib.tex(,1268) @expansion{}      0     0     1     0     1     2     0     0
../singular_texi/./d2t_singular/finvar_lib.tex(,1269) @expansion{}      0     0     0     0     0     0     1     0
../singular_texi/./d2t_singular/finvar_lib.tex(,1270) @expansion{}      0     0     0     0     0     0     0     1
../singular_texi/./d2t_singular/finvar_lib.tex(,1271) print(power_products(dv,7));
../singular_texi/./d2t_singular/finvar_lib.tex(,1272) @expansion{}      0
../singular_texi/./d2t_singular/finvar_lib.tex(,1273) @expansion{}      0
../singular_texi/./d2t_singular/finvar_lib.tex(,1274) @expansion{}      0
../singular_texi/./d2t_singular/finvar_lib.tex(,1275) @expansion{}      0
../singular_texi/./d2t_singular/finvar_lib.tex(,1276) @expansion{}      0
../singular_texi/./d2t_singular/finvar_lib.tex(,1277) @c end example power_products d2t_singular/finvar_lib.doc:1196
../singular_texi/./d2t_singular/finvar_lib.tex(,1278) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1279) @c ---end content power_products---
../singular_texi/./d2t_singular/finvar_lib.tex(,1280) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1281) @c ------------------- secondary_char0 -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1282) @node secondary_char0, secondary_charp, power_products, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1283) @subsubsection secondary_char0
../singular_texi/./d2t_singular/finvar_lib.tex(,1284) @cindex secondary_char0
../singular_texi/./d2t_singular/finvar_lib.tex(,1285) @c ---content secondary_char0---
../singular_texi/./d2t_singular/finvar_lib.tex(,1286) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1287) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1288) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1289) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1290) secondary_char0(P,REY,M[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1291) @*P: a 1xn <matrix> with primary invariants, REY: a gxn <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,1292) representing the Reynolds operator, M: a 1x2 <matrix> giving numerator
../singular_texi/./d2t_singular/finvar_lib.tex(,1293) and denominator of the Molien series, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1294) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1295) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1296) n is the number of variables of the basering, g the size of the group,
../singular_texi/./d2t_singular/finvar_lib.tex(,1297) REY is the 1st return value of group_reynolds(), reynolds_molien() or
../singular_texi/./d2t_singular/finvar_lib.tex(,1298) the second one of primary_invariants(), M the return value of molien()
../singular_texi/./d2t_singular/finvar_lib.tex(,1299) or the second one of reynolds_molien() or the third one of
../singular_texi/./d2t_singular/finvar_lib.tex(,1300) primary_invariants()
../singular_texi/./d2t_singular/finvar_lib.tex(,1301) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1302) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1303) secondary invariants of the invariant ring (type <matrix>) and
../singular_texi/./d2t_singular/finvar_lib.tex(,1304) irreducible secondary invariants (type <matrix>)
../singular_texi/./d2t_singular/finvar_lib.tex(,1305) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1306) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1307) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1308) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1309) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1310) The secondary invariants are calculated by finding a basis (in terms
../singular_texi/./d2t_singular/finvar_lib.tex(,1311) of monomials) of the basering modulo the primary invariants, mapping
../singular_texi/./d2t_singular/finvar_lib.tex(,1312) those to invariants with the Reynolds operator and using these images
../singular_texi/./d2t_singular/finvar_lib.tex(,1313) or their power products such that they are linearly independent modulo
../singular_texi/./d2t_singular/finvar_lib.tex(,1314) the primary invariants (see paper "Some Algorithms in Invariant
../singular_texi/./d2t_singular/finvar_lib.tex(,1315) Theory of Finite Groups" by Kemper and Steel (1997)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1316) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1317) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1318) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1319) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1320) @c computed example secondary_char0 d2t_singular/finvar_lib.doc:1244 
../singular_texi/./d2t_singular/finvar_lib.tex(,1321) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1322) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1323) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1324) list L=primary_invariants(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1325) matrix S,IS=secondary_char0(L[1..3]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1326) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,1327) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1328) print(IS);
../singular_texi/./d2t_singular/finvar_lib.tex(,1329) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1330) @c end example secondary_char0 d2t_singular/finvar_lib.doc:1244
../singular_texi/./d2t_singular/finvar_lib.tex(,1331) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1332) @c ---end content secondary_char0---
../singular_texi/./d2t_singular/finvar_lib.tex(,1333) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1334) @c ------------------- secondary_charp -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1335) @node secondary_charp, secondary_no_molien, secondary_char0, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1336) @subsubsection secondary_charp
../singular_texi/./d2t_singular/finvar_lib.tex(,1337) @cindex secondary_charp
../singular_texi/./d2t_singular/finvar_lib.tex(,1338) @c ---content secondary_charp---
../singular_texi/./d2t_singular/finvar_lib.tex(,1339) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1340) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1341) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1342) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1343) secondary_charp(P,REY,ringname[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1344) @*P: a 1xn <matrix> with primary invariants, REY: a gxn <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,1345) representing the Reynolds operator, ringname: a <string> giving the
../singular_texi/./d2t_singular/finvar_lib.tex(,1346) name of a ring of characteristic 0 where the Molien series is stored,
../singular_texi/./d2t_singular/finvar_lib.tex(,1347) v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1348) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1349) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1350) n is the number of variables of the basering, g the size of the group,
../singular_texi/./d2t_singular/finvar_lib.tex(,1351) REY is the 1st return value of group_reynolds(), reynolds_molien() or
../singular_texi/./d2t_singular/finvar_lib.tex(,1352) the second one of primary_invariants(), `ringname` is a ring of
../singular_texi/./d2t_singular/finvar_lib.tex(,1353) char 0 that has been created by molien() or reynolds_molien() or
../singular_texi/./d2t_singular/finvar_lib.tex(,1354) primary_invariants()
../singular_texi/./d2t_singular/finvar_lib.tex(,1355) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1356) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1357) secondary invariants of the invariant ring (type <matrix>) and
../singular_texi/./d2t_singular/finvar_lib.tex(,1358) irreducible secondary invariants (type <matrix>)
../singular_texi/./d2t_singular/finvar_lib.tex(,1359) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1360) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1361) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1362) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1363) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1364) Secondary invariants are calculated by finding a basis (in terms of
../singular_texi/./d2t_singular/finvar_lib.tex(,1365) monomials) of the basering modulo primary invariants, mapping those
../singular_texi/./d2t_singular/finvar_lib.tex(,1366) to invariants with the Reynolds operator and using these images or
../singular_texi/./d2t_singular/finvar_lib.tex(,1367) their power products such that they are linearly independent modulo
../singular_texi/./d2t_singular/finvar_lib.tex(,1368) the primary invariants (see paper "Some Algorithms in Invariant
../singular_texi/./d2t_singular/finvar_lib.tex(,1369) Theory of Finite Groups" by Kemper and Steel (1997)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1370) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1371) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1372) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1373) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1374) @c computed example secondary_charp d2t_singular/finvar_lib.doc:1296 
../singular_texi/./d2t_singular/finvar_lib.tex(,1375) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1376) ring R=3,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1377) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1378) list L=primary_invariants(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1379) matrix S,IS=secondary_charp(L[1..size(L)]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1380) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,1381) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1382) print(IS);
../singular_texi/./d2t_singular/finvar_lib.tex(,1383) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1384) @c end example secondary_charp d2t_singular/finvar_lib.doc:1296
../singular_texi/./d2t_singular/finvar_lib.tex(,1385) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1386) @c ---end content secondary_charp---
../singular_texi/./d2t_singular/finvar_lib.tex(,1387) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1388) @c ------------------- secondary_no_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1389) @node secondary_no_molien, secondary_and_irreducibles_no_molien, secondary_charp, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1390) @subsubsection secondary_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1391) @cindex secondary_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1392) @c ---content secondary_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,1393) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1394) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1395) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1396) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1397) secondary_no_molien(P,REY[,deg_vec,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1398) @*P: a 1xn <matrix> with primary invariants, REY: a gxn <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,1399) representing the Reynolds operator, deg_vec: an optional <intvec>
../singular_texi/./d2t_singular/finvar_lib.tex(,1400) listing some degrees where no non-trivial homogeneous invariants can
../singular_texi/./d2t_singular/finvar_lib.tex(,1401) be found, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1402) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1403) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1404) n is the number of variables of the basering, g the size of the group,
../singular_texi/./d2t_singular/finvar_lib.tex(,1405) REY is the 1st return value of group_reynolds(), reynolds_molien() or
../singular_texi/./d2t_singular/finvar_lib.tex(,1406) the second one of primary_invariants(), deg_vec is the second return
../singular_texi/./d2t_singular/finvar_lib.tex(,1407) value of primary_char0_no_molien(), primary_charp_no_molien(),
../singular_texi/./d2t_singular/finvar_lib.tex(,1408) primary_char0_no_molien_random() or primary_charp_no_molien_random()
../singular_texi/./d2t_singular/finvar_lib.tex(,1409) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1410) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1411) secondary invariants of the invariant ring (type <matrix>)
../singular_texi/./d2t_singular/finvar_lib.tex(,1412) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1413) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1414) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1415) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1416) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1417) Secondary invariants are calculated by finding a basis (in terms of
../singular_texi/./d2t_singular/finvar_lib.tex(,1418) monomials) of the basering modulo primary invariants, mapping those to
../singular_texi/./d2t_singular/finvar_lib.tex(,1419) invariants with the Reynolds operator and using these images as
../singular_texi/./d2t_singular/finvar_lib.tex(,1420) candidates for secondary invariants.
../singular_texi/./d2t_singular/finvar_lib.tex(,1421) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1422) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1423) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1424) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1425) @c computed example secondary_no_molien d2t_singular/finvar_lib.doc:1345 
../singular_texi/./d2t_singular/finvar_lib.tex(,1426) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1427) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1428) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1429) list L=primary_invariants(A,intvec(1,1,0));
../singular_texi/./d2t_singular/finvar_lib.tex(,1430) matrix S=secondary_no_molien(L[1..3]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1431) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,1432) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1433) @c end example secondary_no_molien d2t_singular/finvar_lib.doc:1345
../singular_texi/./d2t_singular/finvar_lib.tex(,1434) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1435) @c ---end content secondary_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,1436) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1437) @c ------------------- secondary_and_irreducibles_no_molien -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1438) @node secondary_and_irreducibles_no_molien, secondary_not_cohen_macaulay, secondary_no_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1439) @subsubsection secondary_and_irreducibles_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1440) @cindex secondary_and_irreducibles_no_molien
../singular_texi/./d2t_singular/finvar_lib.tex(,1441) @c ---content secondary_and_irreducibles_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,1442) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1443) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1444) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1445) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1446) secondary_and_irreducibles_no_molien(P,REY[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1447) @*P: a 1xn <matrix> with primary invariants, REY: a gxn <matrix>
../singular_texi/./d2t_singular/finvar_lib.tex(,1448) representing the Reynolds operator, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1449) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1450) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1451) n is the number of variables of the basering, g the size of the group,
../singular_texi/./d2t_singular/finvar_lib.tex(,1452) REY is the 1st return value of group_reynolds(), reynolds_molien() or
../singular_texi/./d2t_singular/finvar_lib.tex(,1453) the second one of primary_invariants()
../singular_texi/./d2t_singular/finvar_lib.tex(,1454) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1455) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1456) secondary invariants of the invariant ring (type <matrix>) and
../singular_texi/./d2t_singular/finvar_lib.tex(,1457) irreducible secondary invariants (type <matrix>)
../singular_texi/./d2t_singular/finvar_lib.tex(,1458) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1459) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1460) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1461) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1462) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1463) Secondary invariants are calculated by finding a basis (in terms of
../singular_texi/./d2t_singular/finvar_lib.tex(,1464) monomials) of the basering modulo primary invariants, mapping those to
../singular_texi/./d2t_singular/finvar_lib.tex(,1465) invariants with the Reynolds operator and using these images or their
../singular_texi/./d2t_singular/finvar_lib.tex(,1466) power products such that they are linearly independent modulo the
../singular_texi/./d2t_singular/finvar_lib.tex(,1467) primary invariants (see paper "Some Algorithms in Invariant Theory of
../singular_texi/./d2t_singular/finvar_lib.tex(,1468) Finite Groups" by Kemper and Steel (1997)).
../singular_texi/./d2t_singular/finvar_lib.tex(,1469) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1470) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1471) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1472) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1473) @c computed example secondary_and_irreducibles_no_molien d2t_singular/finvar_lib.doc:1392 
../singular_texi/./d2t_singular/finvar_lib.tex(,1474) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1475) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1476) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1477) list L=primary_invariants(A,intvec(1,1,0));
../singular_texi/./d2t_singular/finvar_lib.tex(,1478) matrix S,IS=secondary_and_irreducibles_no_molien(L[1..2]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1479) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,1480) @expansion{} 1,xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1481) print(IS);
../singular_texi/./d2t_singular/finvar_lib.tex(,1482) @expansion{} xyz,x2z-y2z,x3y-xy3
../singular_texi/./d2t_singular/finvar_lib.tex(,1483) @c end example secondary_and_irreducibles_no_molien d2t_singular/finvar_lib.doc:1392
../singular_texi/./d2t_singular/finvar_lib.tex(,1484) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1485) @c ---end content secondary_and_irreducibles_no_molien---
../singular_texi/./d2t_singular/finvar_lib.tex(,1486) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1487) @c ------------------- secondary_not_cohen_macaulay -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1488) @node secondary_not_cohen_macaulay, orbit_variety, secondary_and_irreducibles_no_molien, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1489) @subsubsection secondary_not_cohen_macaulay
../singular_texi/./d2t_singular/finvar_lib.tex(,1490) @cindex secondary_not_cohen_macaulay
../singular_texi/./d2t_singular/finvar_lib.tex(,1491) @c ---content secondary_not_cohen_macaulay---
../singular_texi/./d2t_singular/finvar_lib.tex(,1492) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1493) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1494) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1495) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1496) secondary_not_cohen_macaulay(P,G1,G2,...[,v]);
../singular_texi/./d2t_singular/finvar_lib.tex(,1497) @*P: a 1xn <matrix> with primary invariants, G1,G2,...: nxn <matrices>
../singular_texi/./d2t_singular/finvar_lib.tex(,1498) generating a finite matrix group, v: an optional <int>
../singular_texi/./d2t_singular/finvar_lib.tex(,1499) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1500) @item @strong{Assume:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1501) n is the number of variables of the basering
../singular_texi/./d2t_singular/finvar_lib.tex(,1502) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1503) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1504) secondary invariants of the invariant ring (type <matrix>)
../singular_texi/./d2t_singular/finvar_lib.tex(,1505) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1506) @item @strong{Display:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1507) information if v does not equal 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1508) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1509) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1510) Secondary invariants are generated following "Generating Invariant
../singular_texi/./d2t_singular/finvar_lib.tex(,1511) Rings of Finite Groups over Arbitrary Fields" by Kemper (1996).
../singular_texi/./d2t_singular/finvar_lib.tex(,1512) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1513) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1514) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1515) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1516) @c computed example secondary_not_cohen_macaulay d2t_singular/finvar_lib.doc:1433 
../singular_texi/./d2t_singular/finvar_lib.tex(,1517) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1518) ring R=2,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1519) matrix A[3][3]=0,1,0,-1,0,0,0,0,-1;
../singular_texi/./d2t_singular/finvar_lib.tex(,1520) list L=primary_invariants(A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1521) matrix S=secondary_not_cohen_macaulay(L[1],A);
../singular_texi/./d2t_singular/finvar_lib.tex(,1522) print(S);
../singular_texi/./d2t_singular/finvar_lib.tex(,1523) @expansion{} 1
../singular_texi/./d2t_singular/finvar_lib.tex(,1524) @c end example secondary_not_cohen_macaulay d2t_singular/finvar_lib.doc:1433
../singular_texi/./d2t_singular/finvar_lib.tex(,1525) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1526) @c ---end content secondary_not_cohen_macaulay---
../singular_texi/./d2t_singular/finvar_lib.tex(,1527) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1528) @c ------------------- orbit_variety -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1529) @node orbit_variety, relative_orbit_variety, secondary_not_cohen_macaulay, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1530) @subsubsection orbit_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1531) @cindex orbit_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1532) @c ---content orbit_variety---
../singular_texi/./d2t_singular/finvar_lib.tex(,1533) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1534) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1535) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1536) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1537) orbit_variety(F,s);
../singular_texi/./d2t_singular/finvar_lib.tex(,1538) @*F: a 1xm <matrix> defining an invariant ring, s: a <string> giving the
../singular_texi/./d2t_singular/finvar_lib.tex(,1539) name for a new ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1540) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1541) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1542) a Groebner basis (type <ideal>, named G) for the ideal defining the
../singular_texi/./d2t_singular/finvar_lib.tex(,1543) orbit variety (i.e. the syzygy ideal) in the new ring (named `s`)
../singular_texi/./d2t_singular/finvar_lib.tex(,1544) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1545) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1546) The ideal of algebraic relations of the invariant ring generators is
../singular_texi/./d2t_singular/finvar_lib.tex(,1547) calculated, then the variables of the original ring are eliminated and
../singular_texi/./d2t_singular/finvar_lib.tex(,1548) the polynomials that are left over define the orbit variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1549) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1550) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1551) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1552) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1553) @c computed example orbit_variety d2t_singular/finvar_lib.doc:1469 
../singular_texi/./d2t_singular/finvar_lib.tex(,1554) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1555) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1556) matrix F[1][7]=x2+y2,z2,x4+y4,1,x2z-1y2z,xyz,x3y-1xy3;
../singular_texi/./d2t_singular/finvar_lib.tex(,1557) string newring="E";
../singular_texi/./d2t_singular/finvar_lib.tex(,1558) orbit_variety(F,newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,1559) print(G);
../singular_texi/./d2t_singular/finvar_lib.tex(,1560) @expansion{} y(4)-1,
../singular_texi/./d2t_singular/finvar_lib.tex(,1561) @expansion{} y(5)*y(6)-y(2)*y(7),
../singular_texi/./d2t_singular/finvar_lib.tex(,1562) @expansion{} y(2)*y(3)-y(5)^2-2*y(6)^2,
../singular_texi/./d2t_singular/finvar_lib.tex(,1563) @expansion{} y(1)^2*y(6)-2*y(3)*y(6)+y(5)*y(7),
../singular_texi/./d2t_singular/finvar_lib.tex(,1564) @expansion{} y(1)^2*y(5)-y(3)*y(5)-2*y(6)*y(7),
../singular_texi/./d2t_singular/finvar_lib.tex(,1565) @expansion{} y(1)^2*y(2)-y(2)*y(3)-2*y(6)^2,
../singular_texi/./d2t_singular/finvar_lib.tex(,1566) @expansion{} y(1)^4-3*y(1)^2*y(3)+2*y(3)^2+2*y(7)^2
../singular_texi/./d2t_singular/finvar_lib.tex(,1567) basering;
../singular_texi/./d2t_singular/finvar_lib.tex(,1568) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1569) @expansion{} //   number of vars : 7
../singular_texi/./d2t_singular/finvar_lib.tex(,1570) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/finvar_lib.tex(,1571) @expansion{} //                  : names    y(1) y(2) y(3) y(4) y(5) y(6) y(7) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1572) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/finvar_lib.tex(,1573) @c end example orbit_variety d2t_singular/finvar_lib.doc:1469
../singular_texi/./d2t_singular/finvar_lib.tex(,1574) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1575) @c ---end content orbit_variety---
../singular_texi/./d2t_singular/finvar_lib.tex(,1576) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1577) @c ------------------- relative_orbit_variety -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1578) @node relative_orbit_variety, image_of_variety, orbit_variety, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1579) @subsubsection relative_orbit_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1580) @cindex relative_orbit_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1581) @c ---content relative_orbit_variety---
../singular_texi/./d2t_singular/finvar_lib.tex(,1582) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1583) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1584) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1585) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1586) relative_orbit_variety(I,F,s);
../singular_texi/./d2t_singular/finvar_lib.tex(,1587) @*I: an <ideal> invariant under the action of a group, F: a 1xm
../singular_texi/./d2t_singular/finvar_lib.tex(,1588) <matrix> defining the invariant ring of this group, s: a <string>
../singular_texi/./d2t_singular/finvar_lib.tex(,1589) giving a name for a new ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1590) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1591) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1592) a Groebner basis (type <ideal>, named G) for the ideal defining the
../singular_texi/./d2t_singular/finvar_lib.tex(,1593) relative orbit variety with respect to I in the new ring (named s)
../singular_texi/./d2t_singular/finvar_lib.tex(,1594) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1595) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1596) A Groebner basis of the ideal of algebraic relations of the invariant
../singular_texi/./d2t_singular/finvar_lib.tex(,1597) ring generators is calculated, then one of the basis elements plus the
../singular_texi/./d2t_singular/finvar_lib.tex(,1598) ideal generators. The variables of the original ring are eliminated
../singular_texi/./d2t_singular/finvar_lib.tex(,1599) and the polynomials that are left define the relative orbit variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1600) with respect to I.
../singular_texi/./d2t_singular/finvar_lib.tex(,1601) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1602) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1603) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1604) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1605) @c computed example relative_orbit_variety d2t_singular/finvar_lib.doc:1509 
../singular_texi/./d2t_singular/finvar_lib.tex(,1606) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1607) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1608) matrix F[1][3]=x+y+z,xy+xz+yz,xyz;
../singular_texi/./d2t_singular/finvar_lib.tex(,1609) ideal I=x2+y2+z2-1,x2y+y2z+z2x-2x-2y-2z,xy2+yz2+zx2-2x-2y-2z;
../singular_texi/./d2t_singular/finvar_lib.tex(,1610) string newring="E";
../singular_texi/./d2t_singular/finvar_lib.tex(,1611) relative_orbit_variety(I,F,newring);
../singular_texi/./d2t_singular/finvar_lib.tex(,1612) print(G);
../singular_texi/./d2t_singular/finvar_lib.tex(,1613) @expansion{} 27*y(3)^6-513*y(3)^4+33849*y(3)^2-784,
../singular_texi/./d2t_singular/finvar_lib.tex(,1614) @expansion{} 1475*y(2)+9*y(3)^4-264*y(3)^2+736,
../singular_texi/./d2t_singular/finvar_lib.tex(,1615) @expansion{} 8260*y(1)+9*y(3)^5-87*y(3)^3+5515*y(3)
../singular_texi/./d2t_singular/finvar_lib.tex(,1616) basering;
../singular_texi/./d2t_singular/finvar_lib.tex(,1617) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/finvar_lib.tex(,1618) @expansion{} //   number of vars : 3
../singular_texi/./d2t_singular/finvar_lib.tex(,1619) @expansion{} //        block   1 : ordering lp
../singular_texi/./d2t_singular/finvar_lib.tex(,1620) @expansion{} //                  : names    y(1) y(2) y(3) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1621) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/finvar_lib.tex(,1622) @c end example relative_orbit_variety d2t_singular/finvar_lib.doc:1509
../singular_texi/./d2t_singular/finvar_lib.tex(,1623) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1624) @c ---end content relative_orbit_variety---
../singular_texi/./d2t_singular/finvar_lib.tex(,1625) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1626) @c ------------------- image_of_variety -------------
../singular_texi/./d2t_singular/finvar_lib.tex(,1627) @node image_of_variety,, relative_orbit_variety, finvar_lib
../singular_texi/./d2t_singular/finvar_lib.tex(,1628) @subsubsection image_of_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1629) @cindex image_of_variety
../singular_texi/./d2t_singular/finvar_lib.tex(,1630) @c ---content image_of_variety---
../singular_texi/./d2t_singular/finvar_lib.tex(,1631) Procedure from library @code{finvar.lib} (@pxref{finvar_lib}).
../singular_texi/./d2t_singular/finvar_lib.tex(,1632) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1633) @table @asis
../singular_texi/./d2t_singular/finvar_lib.tex(,1634) @item @strong{Usage:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1635) image_of_variety(I,F);
../singular_texi/./d2t_singular/finvar_lib.tex(,1636) @*I: an arbitrary <ideal>, F: a 1xm <matrix> defining an invariant ring
../singular_texi/./d2t_singular/finvar_lib.tex(,1637) of a some matrix group
../singular_texi/./d2t_singular/finvar_lib.tex(,1638) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1639) @item @strong{Return:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1640) the <ideal> defining the image under that group of the variety defined
../singular_texi/./d2t_singular/finvar_lib.tex(,1641) by I
../singular_texi/./d2t_singular/finvar_lib.tex(,1642) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1643) @item @strong{Theory:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1644) relative_orbit_variety(I,F,s) is called and the newly introduced
../singular_texi/./d2t_singular/finvar_lib.tex(,1645) variables in the output are replaced by the generators of the
../singular_texi/./d2t_singular/finvar_lib.tex(,1646) invariant ring. This ideal in the original variables defines the image
../singular_texi/./d2t_singular/finvar_lib.tex(,1647) of the variety defined by I
../singular_texi/./d2t_singular/finvar_lib.tex(,1648) 
../singular_texi/./d2t_singular/finvar_lib.tex(,1649) @end table
../singular_texi/./d2t_singular/finvar_lib.tex(,1650) @strong{Example:}
../singular_texi/./d2t_singular/finvar_lib.tex(,1651) @smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1652) @c computed example image_of_variety d2t_singular/finvar_lib.doc:1548 
../singular_texi/./d2t_singular/finvar_lib.tex(,1653) LIB "finvar.lib";
../singular_texi/./d2t_singular/finvar_lib.tex(,1654) ring R=0,(x,y,z),dp;
../singular_texi/./d2t_singular/finvar_lib.tex(,1655) matrix F[1][3]=x+y+z,xy+xz+yz,xyz;
../singular_texi/./d2t_singular/finvar_lib.tex(,1656) ideal I=xy;
../singular_texi/./d2t_singular/finvar_lib.tex(,1657) print(image_of_variety(I,F));
../singular_texi/./d2t_singular/finvar_lib.tex(,1658) @expansion{} xyz
../singular_texi/./d2t_singular/finvar_lib.tex(,1659) @c end example image_of_variety d2t_singular/finvar_lib.doc:1548
../singular_texi/./d2t_singular/finvar_lib.tex(,1660) @end smallexample
../singular_texi/./d2t_singular/finvar_lib.tex(,1661) @c ---end content image_of_variety---
../singular_texi/singular.tex(,517) @c ----------------------------------------------------------
../singular_texi/singular.tex(,518) @node ainvar_lib, rinvar_lib, finvar_lib, Invariant theory
../singular_texi/singular.tex(,519) @subsection ainvar_lib
../singular_texi/singular.tex(,520) @c include of docu for ainvar.lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/ainvar_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/ainvar_lib.doc
../singular_texi/./d2t_singular/ainvar_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/ainvar_lib.doc INSTEAD
../singular_texi/./d2t_singular/ainvar_lib.tex(,4) @c library version: (1.6.2.2,2002/04/12)
../singular_texi/./d2t_singular/ainvar_lib.tex(,5) @c library file: ../Singular/LIB/ainvar.lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,6) @cindex ainvar.lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,7) @cindex ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,10) ainvar.lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,12)     Invariant Rings of the Additive Group
../singular_texi/./d2t_singular/ainvar_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,14) Gerhard Pfister (email: pfister@@mathematik.uni-kl.de),
../singular_texi/./d2t_singular/ainvar_lib.tex(,15) Gert-Martin Greuel (email: greuel@@mathematik.uni-kl.de)
../singular_texi/./d2t_singular/ainvar_lib.tex(,16) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,17) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,18) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,19) @strong{Procedures:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,20) @menu
../singular_texi/./d2t_singular/ainvar_lib.tex(,21) * invariantRing:: compute ring of invariants of (K,+)-action given by m
../singular_texi/./d2t_singular/ainvar_lib.tex(,22) * derivate:: derivation of f with respect to the vector field m
../singular_texi/./d2t_singular/ainvar_lib.tex(,23) * actionIsProper:: tests whether action defined by m is proper
../singular_texi/./d2t_singular/ainvar_lib.tex(,24) * reduction:: SAGBI reduction of p in the subring generated by I
../singular_texi/./d2t_singular/ainvar_lib.tex(,25) * completeReduction:: complete SAGBI reduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,26) * localInvar:: invariant polynomial under m computed from p,...
../singular_texi/./d2t_singular/ainvar_lib.tex(,27) * furtherInvar:: compute further invariants of m from the given ones
../singular_texi/./d2t_singular/ainvar_lib.tex(,28) * sortier:: sorts generators of id by increasing leading terms
../singular_texi/./d2t_singular/ainvar_lib.tex(,29) @end menu
../singular_texi/./d2t_singular/ainvar_lib.tex(,30) @c ---end content LibInfo---
../singular_texi/./d2t_singular/ainvar_lib.tex(,31) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,32) @c ------------------- invariantRing -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,33) @node invariantRing, derivate,, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,34) @subsubsection invariantRing
../singular_texi/./d2t_singular/ainvar_lib.tex(,35) @cindex invariantRing
../singular_texi/./d2t_singular/ainvar_lib.tex(,36) @c ---content invariantRing---
../singular_texi/./d2t_singular/ainvar_lib.tex(,37) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,38) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,39) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,40) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,41) invariantRing(m,p,q,b[,r,pa]); m matrix, p,q poly, b,r int, pa string
../singular_texi/./d2t_singular/ainvar_lib.tex(,42) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,43) @item @strong{Assume:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,44) p,q variables with m(p)=q and q invariant under m
../singular_texi/./d2t_singular/ainvar_lib.tex(,45) @*i.e. if p=x(i) and q=x(j) then m[j,1]=0 and m[i,1]=x(j)
../singular_texi/./d2t_singular/ainvar_lib.tex(,46) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,47) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,48) ideal, containing generators of the ring of invariants of the
../singular_texi/./d2t_singular/ainvar_lib.tex(,49) additive group (K,+) given by the vector field
../singular_texi/./d2t_singular/ainvar_lib.tex(,50) @format
../singular_texi/./d2t_singular/ainvar_lib.tex(,51)          m = m[1,1]*d/dx(1) +...+ m[n,1]*d/dx(n).
../singular_texi/./d2t_singular/ainvar_lib.tex(,52) @end format
../singular_texi/./d2t_singular/ainvar_lib.tex(,53) If b>0 the computation stops after all invariants of degree <= b
../singular_texi/./d2t_singular/ainvar_lib.tex(,54) (and at least one of higher degree) are found or when all invariants
../singular_texi/./d2t_singular/ainvar_lib.tex(,55) are computed.
../singular_texi/./d2t_singular/ainvar_lib.tex(,56) @*If b<=0, the computation continues until all generators
../singular_texi/./d2t_singular/ainvar_lib.tex(,57) of the ring of invariants are computed (should be used only if the
../singular_texi/./d2t_singular/ainvar_lib.tex(,58) ring of invariants is known to be finitely generated otherwise the
../singular_texi/./d2t_singular/ainvar_lib.tex(,59) algorithm might not stop).
../singular_texi/./d2t_singular/ainvar_lib.tex(,60) @*If r=1 a different reduction is used which is sometimes faster
../singular_texi/./d2t_singular/ainvar_lib.tex(,61) (default r=0).
../singular_texi/./d2t_singular/ainvar_lib.tex(,62) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,63) @item @strong{Display:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,64) if pa is given (any string as 5th or 6th argument), the computation
../singular_texi/./d2t_singular/ainvar_lib.tex(,65) pauses whenever new invariants are found and displays them
../singular_texi/./d2t_singular/ainvar_lib.tex(,66) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,67) @item @strong{Theory:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,68) The algorithm to compute the ring of invariants works in char 0
../singular_texi/./d2t_singular/ainvar_lib.tex(,69) or big enough characteristic. (K,+) acts as the exponential of the
../singular_texi/./d2t_singular/ainvar_lib.tex(,70) vector field defined by the matrix m. For background see G.-M. Greuel,
../singular_texi/./d2t_singular/ainvar_lib.tex(,71) G. Pfister, Geometric quotients of unipotent group actions, Proc.
../singular_texi/./d2t_singular/ainvar_lib.tex(,72) London Math. Soc. (3) 67, 75-105 (1993).
../singular_texi/./d2t_singular/ainvar_lib.tex(,73) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,74) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,75) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,76) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,77) @c computed example invariantRing d2t_singular/ainvar_lib.doc:75 
../singular_texi/./d2t_singular/ainvar_lib.tex(,78) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,79) //Winkelmann: free action but Spec(k[x(1),...,x(5)]) --> Spec(invariant ring)
../singular_texi/./d2t_singular/ainvar_lib.tex(,80) //is not surjective
../singular_texi/./d2t_singular/ainvar_lib.tex(,81) ring rw=0,(x(1..5)),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,82) matrix m[5][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,83) m[3,1]=x(1);
../singular_texi/./d2t_singular/ainvar_lib.tex(,84) m[4,1]=x(2);
../singular_texi/./d2t_singular/ainvar_lib.tex(,85) m[5,1]=1+x(1)*x(4)+x(2)*x(3);
../singular_texi/./d2t_singular/ainvar_lib.tex(,86) ideal in=invariantRing(m,x(3),x(1),0);      //compute full invarint ring
../singular_texi/./d2t_singular/ainvar_lib.tex(,87) in;
../singular_texi/./d2t_singular/ainvar_lib.tex(,88) @expansion{} in[1]=x(1)
../singular_texi/./d2t_singular/ainvar_lib.tex(,89) @expansion{} in[2]=x(2)
../singular_texi/./d2t_singular/ainvar_lib.tex(,90) @expansion{} in[3]=x(2)*x(3)*x(4)-x(2)*x(5)+x(4)
../singular_texi/./d2t_singular/ainvar_lib.tex(,91) @expansion{} in[4]=x(1)*x(3)*x(4)-x(1)*x(5)+x(3)
../singular_texi/./d2t_singular/ainvar_lib.tex(,92) //Deveney/Finston: The ring of invariants is not finitely generated
../singular_texi/./d2t_singular/ainvar_lib.tex(,93) ring rf=0,(x(1..7)),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,94) matrix m[7][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,95) m[4,1]=x(1)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,96) m[5,1]=x(2)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,97) m[6,1]=x(3)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,98) m[7,1]=(x(1)*x(2)*x(3))^2;
../singular_texi/./d2t_singular/ainvar_lib.tex(,99) ideal in=invariantRing(m,x(4),x(1),6);      //all invariants up to degree 6
../singular_texi/./d2t_singular/ainvar_lib.tex(,100) in;
../singular_texi/./d2t_singular/ainvar_lib.tex(,101) @expansion{} in[1]=x(1)
../singular_texi/./d2t_singular/ainvar_lib.tex(,102) @expansion{} in[2]=x(3)
../singular_texi/./d2t_singular/ainvar_lib.tex(,103) @expansion{} in[3]=x(2)
../singular_texi/./d2t_singular/ainvar_lib.tex(,104) @expansion{} in[4]=x(3)^3*x(4)-x(1)^3*x(6)
../singular_texi/./d2t_singular/ainvar_lib.tex(,105) @expansion{} in[5]=x(2)^3*x(4)-x(1)^3*x(5)
../singular_texi/./d2t_singular/ainvar_lib.tex(,106) @expansion{} in[6]=x(2)^2*x(3)^2*x(4)-x(1)*x(7)
../singular_texi/./d2t_singular/ainvar_lib.tex(,107) @expansion{} in[7]=x(1)^2*x(2)^2*x(6)-x(3)*x(7)
../singular_texi/./d2t_singular/ainvar_lib.tex(,108) @expansion{} in[8]=x(1)^2*x(3)^2*x(5)-x(2)*x(7)
../singular_texi/./d2t_singular/ainvar_lib.tex(,109) @expansion{} in[9]=x(1)^2*x(2)*x(3)^4*x(4)*x(5)+x(1)^2*x(2)^4*x(3)*x(4)*x(6)-x(1)^5*x(\
../singular_texi/./d2t_singular/ainvar_lib.tex(,110)    2)*x(3)*x(5)*x(6)-2*x(2)^2*x(3)^2*x(4)*x(7)+x(1)*x(7)^2
../singular_texi/./d2t_singular/ainvar_lib.tex(,111) @c end example invariantRing d2t_singular/ainvar_lib.doc:75
../singular_texi/./d2t_singular/ainvar_lib.tex(,112) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,113) @c ---end content invariantRing---
../singular_texi/./d2t_singular/ainvar_lib.tex(,114) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,115) @c ------------------- derivate -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,116) @node derivate, actionIsProper, invariantRing, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,117) @subsubsection derivate
../singular_texi/./d2t_singular/ainvar_lib.tex(,118) @cindex derivate
../singular_texi/./d2t_singular/ainvar_lib.tex(,119) @c ---content derivate---
../singular_texi/./d2t_singular/ainvar_lib.tex(,120) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,121) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,122) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,123) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,124) derivate(m,id); m matrix, id poly/vector/ideal
../singular_texi/./d2t_singular/ainvar_lib.tex(,125) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,126) @item @strong{Assume:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,127) m is a nx1 matrix, where n = number of variables of the basering
../singular_texi/./d2t_singular/ainvar_lib.tex(,128) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,129) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,130) poly/vector/ideal (same type as input), result of applying the
../singular_texi/./d2t_singular/ainvar_lib.tex(,131) vector field by the matrix m componentwise to id;
../singular_texi/./d2t_singular/ainvar_lib.tex(,132) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,133) @item @strong{Note:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,134) the vector field is m[1,1]*d/dx(1) +...+ m[1,n]*d/dx(n)
../singular_texi/./d2t_singular/ainvar_lib.tex(,135) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,136) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,137) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,138) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,139) @c computed example derivate d2t_singular/ainvar_lib.doc:123 
../singular_texi/./d2t_singular/ainvar_lib.tex(,140) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,141) ring q=0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,142) poly f=2xz-y2;
../singular_texi/./d2t_singular/ainvar_lib.tex(,143) matrix m[6][1] =x,y,0,u,v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,144) derivate(m,f);
../singular_texi/./d2t_singular/ainvar_lib.tex(,145) @expansion{} -2y2+2xz
../singular_texi/./d2t_singular/ainvar_lib.tex(,146) vector v = [2xz-y2,u6-3];
../singular_texi/./d2t_singular/ainvar_lib.tex(,147) derivate(m,v);
../singular_texi/./d2t_singular/ainvar_lib.tex(,148) @expansion{} 6u6*gen(2)-2y2*gen(1)+2xz*gen(1)
../singular_texi/./d2t_singular/ainvar_lib.tex(,149) derivate(m,ideal(2xz-y2,u6-3));
../singular_texi/./d2t_singular/ainvar_lib.tex(,150) @expansion{} _[1]=-2y2+2xz
../singular_texi/./d2t_singular/ainvar_lib.tex(,151) @expansion{} _[2]=6u6
../singular_texi/./d2t_singular/ainvar_lib.tex(,152) @c end example derivate d2t_singular/ainvar_lib.doc:123
../singular_texi/./d2t_singular/ainvar_lib.tex(,153) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,154) @c ---end content derivate---
../singular_texi/./d2t_singular/ainvar_lib.tex(,155) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,156) @c ------------------- actionIsProper -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,157) @node actionIsProper, reduction, derivate, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,158) @subsubsection actionIsProper
../singular_texi/./d2t_singular/ainvar_lib.tex(,159) @cindex actionIsProper
../singular_texi/./d2t_singular/ainvar_lib.tex(,160) @c ---content actionIsProper---
../singular_texi/./d2t_singular/ainvar_lib.tex(,161) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,162) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,163) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,164) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,165) actionIsProper(m); m matrix
../singular_texi/./d2t_singular/ainvar_lib.tex(,166) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,167) @item @strong{Assume:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,168) m is a nx1 matrix, where n = number of variables of the basering
../singular_texi/./d2t_singular/ainvar_lib.tex(,169) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,170) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,171) int = 1, if the action defined by m is proper, 0 if not
../singular_texi/./d2t_singular/ainvar_lib.tex(,172) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,173) @item @strong{Note:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,174) m defines a group action which is the exponential of the vector
../singular_texi/./d2t_singular/ainvar_lib.tex(,175) field m[1,1]*d/dx(1) +...+ m[1,n]*d/dx(n)
../singular_texi/./d2t_singular/ainvar_lib.tex(,176) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,177) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,178) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,179) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,180) @c computed example actionIsProper d2t_singular/ainvar_lib.doc:160 
../singular_texi/./d2t_singular/ainvar_lib.tex(,181) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,182) ring rf=0,x(1..7),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,183) matrix m[7][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,184) m[4,1]=x(1)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,185) m[5,1]=x(2)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,186) m[6,1]=x(3)^3;
../singular_texi/./d2t_singular/ainvar_lib.tex(,187) m[7,1]=(x(1)*x(2)*x(3))^2;
../singular_texi/./d2t_singular/ainvar_lib.tex(,188) actionIsProper(m);
../singular_texi/./d2t_singular/ainvar_lib.tex(,189) @expansion{} 0
../singular_texi/./d2t_singular/ainvar_lib.tex(,190) ring rd=0,x(1..5),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,191) matrix m[5][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,192) m[3,1]=x(1);
../singular_texi/./d2t_singular/ainvar_lib.tex(,193) m[4,1]=x(2);
../singular_texi/./d2t_singular/ainvar_lib.tex(,194) m[5,1]=1+x(1)*x(4)^2;
../singular_texi/./d2t_singular/ainvar_lib.tex(,195) actionIsProper(m);
../singular_texi/./d2t_singular/ainvar_lib.tex(,196) @expansion{} 1
../singular_texi/./d2t_singular/ainvar_lib.tex(,197) @c end example actionIsProper d2t_singular/ainvar_lib.doc:160
../singular_texi/./d2t_singular/ainvar_lib.tex(,198) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,199) @c ---end content actionIsProper---
../singular_texi/./d2t_singular/ainvar_lib.tex(,200) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,201) @c ------------------- reduction -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,202) @node reduction, completeReduction, actionIsProper, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,203) @subsubsection reduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,204) @cindex reduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,205) @c ---content reduction---
../singular_texi/./d2t_singular/ainvar_lib.tex(,206) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,207) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,208) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,209) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,210) reduction(p,I[,q,n]); p poly, I ideal, [q monomial, n int (optional)]
../singular_texi/./d2t_singular/ainvar_lib.tex(,211) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,212) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,213) a polynomial equal to p-H(f1,...,fr), in case the leading
../singular_texi/./d2t_singular/ainvar_lib.tex(,214) term LT(p) of p is of the form H(LT(f1),...,LT(fr)) for some
../singular_texi/./d2t_singular/ainvar_lib.tex(,215) polynomial H in r variables over the base field, I=f1,...,fr;
../singular_texi/./d2t_singular/ainvar_lib.tex(,216) if q is given, a maximal power a is computed such that q^a divides
../singular_texi/./d2t_singular/ainvar_lib.tex(,217) p-H(f1,...,fr), and then (p-H(f1,...,fr))/q^a is returned;
../singular_texi/./d2t_singular/ainvar_lib.tex(,218) return p if no H is found
../singular_texi/./d2t_singular/ainvar_lib.tex(,219) @*if n=1, a different algorithm is chosen which is sometimes faster
../singular_texi/./d2t_singular/ainvar_lib.tex(,220) (default: n=0; q and n can be given (or not) in any order)
../singular_texi/./d2t_singular/ainvar_lib.tex(,221) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,222) @item @strong{Note:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,223) this is a kind of SAGBI reduction in the subalgebra K[f1,...,fr] of
../singular_texi/./d2t_singular/ainvar_lib.tex(,224) the basering
../singular_texi/./d2t_singular/ainvar_lib.tex(,225) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,226) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,227) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,228) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,229) @c computed example reduction d2t_singular/ainvar_lib.doc:207 
../singular_texi/./d2t_singular/ainvar_lib.tex(,230) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,231) ring q=0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,232) poly p=x2yz-x2v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,233) ideal dom =x-w,u2w+1,yz-v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,234) reduction(p,dom);
../singular_texi/./d2t_singular/ainvar_lib.tex(,235) @expansion{} 2xyzw-yzw2-2xvw+vw2
../singular_texi/./d2t_singular/ainvar_lib.tex(,236) reduction(p,dom,w);
../singular_texi/./d2t_singular/ainvar_lib.tex(,237) @expansion{} 2xyz-yzw-2xv+vw
../singular_texi/./d2t_singular/ainvar_lib.tex(,238) @c end example reduction d2t_singular/ainvar_lib.doc:207
../singular_texi/./d2t_singular/ainvar_lib.tex(,239) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,240) @c ---end content reduction---
../singular_texi/./d2t_singular/ainvar_lib.tex(,241) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,242) @c ------------------- completeReduction -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,243) @node completeReduction, localInvar, reduction, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,244) @subsubsection completeReduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,245) @cindex completeReduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,246) @c ---content completeReduction---
../singular_texi/./d2t_singular/ainvar_lib.tex(,247) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,248) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,249) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,250) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,251) completeReduction(p,I[,q,n]); p poly, I ideal, [q monomial, n int]
../singular_texi/./d2t_singular/ainvar_lib.tex(,252) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,253) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,254) a polynomial, the SAGBI reduction of the polynomial p with I
../singular_texi/./d2t_singular/ainvar_lib.tex(,255) via the procedure 'reduction' as long as possible
../singular_texi/./d2t_singular/ainvar_lib.tex(,256) @*if n=1, a different algorithm is chosen which is sometimes faster
../singular_texi/./d2t_singular/ainvar_lib.tex(,257) (default: n=0; q and n can be given (or not) in any order)
../singular_texi/./d2t_singular/ainvar_lib.tex(,258) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,259) @item @strong{Note:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,260) help reduction; shows an explanation of SAGBI reduction
../singular_texi/./d2t_singular/ainvar_lib.tex(,261) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,262) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,263) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,264) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,265) @c computed example completeReduction d2t_singular/ainvar_lib.doc:241 
../singular_texi/./d2t_singular/ainvar_lib.tex(,266) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,267) ring q=0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,268) poly p=x2yz-x2v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,269) ideal dom =x-w,u2w+1,yz-v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,270) completeReduction(p,dom);
../singular_texi/./d2t_singular/ainvar_lib.tex(,271) @expansion{} 2xyzw-yzw2-2xvw+vw2
../singular_texi/./d2t_singular/ainvar_lib.tex(,272) completeReduction(p,dom,w);
../singular_texi/./d2t_singular/ainvar_lib.tex(,273) @expansion{} 0
../singular_texi/./d2t_singular/ainvar_lib.tex(,274) @c end example completeReduction d2t_singular/ainvar_lib.doc:241
../singular_texi/./d2t_singular/ainvar_lib.tex(,275) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,276) @c ---end content completeReduction---
../singular_texi/./d2t_singular/ainvar_lib.tex(,277) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,278) @c ------------------- localInvar -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,279) @node localInvar, furtherInvar, completeReduction, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,280) @subsubsection localInvar
../singular_texi/./d2t_singular/ainvar_lib.tex(,281) @cindex localInvar
../singular_texi/./d2t_singular/ainvar_lib.tex(,282) @c ---content localInvar---
../singular_texi/./d2t_singular/ainvar_lib.tex(,283) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,284) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,285) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,286) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,287) localInvar(m,p,q,h); m matrix, p,q,h polynomials
../singular_texi/./d2t_singular/ainvar_lib.tex(,288) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,289) @item @strong{Assume:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,290) m(q) and h are invariant under the vector field m, i.e. m(m(q))=m(h)=0
../singular_texi/./d2t_singular/ainvar_lib.tex(,291) h must be a ring variable
../singular_texi/./d2t_singular/ainvar_lib.tex(,292) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,293) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,294) a polynomial, the invariant polynomial of the vector field
../singular_texi/./d2t_singular/ainvar_lib.tex(,295) @format
../singular_texi/./d2t_singular/ainvar_lib.tex(,296)          m = m[1,1]*d/dx(1) +...+ m[n,1]*d/dx(n)
../singular_texi/./d2t_singular/ainvar_lib.tex(,297) @end format
../singular_texi/./d2t_singular/ainvar_lib.tex(,298) with respect to p,q,h. It is defined as follows: set inv = p if p is
../singular_texi/./d2t_singular/ainvar_lib.tex(,299) invariant, and else as
../singular_texi/./d2t_singular/ainvar_lib.tex(,300) @*inv = m(q)^N * sum_i=1..N-1@{ (-1)^i*(1/i!)*m^i(p)*(q/m(q))^i @}
../singular_texi/./d2t_singular/ainvar_lib.tex(,301) where m^N(p) = 0, m^(N-1)(p) != 0;
../singular_texi/./d2t_singular/ainvar_lib.tex(,302) @*the result is inv divided by h as much as possible
../singular_texi/./d2t_singular/ainvar_lib.tex(,303) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,304) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,305) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,306) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,307) @c computed example localInvar d2t_singular/ainvar_lib.doc:281 
../singular_texi/./d2t_singular/ainvar_lib.tex(,308) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,309) ring q=0,(x,y,z),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,310) matrix m[3][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,311) m[2,1]=x;
../singular_texi/./d2t_singular/ainvar_lib.tex(,312) m[3,1]=y;
../singular_texi/./d2t_singular/ainvar_lib.tex(,313) poly in=localInvar(m,z,y,x);
../singular_texi/./d2t_singular/ainvar_lib.tex(,314) in;
../singular_texi/./d2t_singular/ainvar_lib.tex(,315) @expansion{} -1/2y2+xz
../singular_texi/./d2t_singular/ainvar_lib.tex(,316) @c end example localInvar d2t_singular/ainvar_lib.doc:281
../singular_texi/./d2t_singular/ainvar_lib.tex(,317) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,318) @c ---end content localInvar---
../singular_texi/./d2t_singular/ainvar_lib.tex(,319) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,320) @c ------------------- furtherInvar -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,321) @node furtherInvar, sortier, localInvar, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,322) @subsubsection furtherInvar
../singular_texi/./d2t_singular/ainvar_lib.tex(,323) @cindex furtherInvar
../singular_texi/./d2t_singular/ainvar_lib.tex(,324) @c ---content furtherInvar---
../singular_texi/./d2t_singular/ainvar_lib.tex(,325) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,326) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,327) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,328) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,329) furtherInvar(m,id,karl,q); m matrix, id,karl ideals, q poly, n int
../singular_texi/./d2t_singular/ainvar_lib.tex(,330) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,331) @item @strong{Assume:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,332) karl,id,q are invariant under the vector field m,
../singular_texi/./d2t_singular/ainvar_lib.tex(,333) @*moreover, q must be a variable
../singular_texi/./d2t_singular/ainvar_lib.tex(,334) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,335) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,336) list of two ideals, the first ideal contains further invariants of
../singular_texi/./d2t_singular/ainvar_lib.tex(,337) the vector field
../singular_texi/./d2t_singular/ainvar_lib.tex(,338) @format
../singular_texi/./d2t_singular/ainvar_lib.tex(,339)          m = sum m[i,1]*d/dx(i) with respect to id,p,q,
../singular_texi/./d2t_singular/ainvar_lib.tex(,340) @end format
../singular_texi/./d2t_singular/ainvar_lib.tex(,341) i.e. we compute elements in the (invariant) subring generated by id
../singular_texi/./d2t_singular/ainvar_lib.tex(,342) which are divisible by q and divide them by q as much as possible
../singular_texi/./d2t_singular/ainvar_lib.tex(,343) the second ideal contains all invariants given before
../singular_texi/./d2t_singular/ainvar_lib.tex(,344) if n=1, a different algorithm is chosen which is sometimes faster
../singular_texi/./d2t_singular/ainvar_lib.tex(,345) (default: n=0)
../singular_texi/./d2t_singular/ainvar_lib.tex(,346) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,347) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,348) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,349) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,350) @c computed example furtherInvar d2t_singular/ainvar_lib.doc:323 
../singular_texi/./d2t_singular/ainvar_lib.tex(,351) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,352) ring r=0,(x,y,z,u),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,353) matrix m[4][1];
../singular_texi/./d2t_singular/ainvar_lib.tex(,354) m[2,1]=x;
../singular_texi/./d2t_singular/ainvar_lib.tex(,355) m[3,1]=y;
../singular_texi/./d2t_singular/ainvar_lib.tex(,356) m[4,1]=z;
../singular_texi/./d2t_singular/ainvar_lib.tex(,357) ideal id=localInvar(m,z,y,x),localInvar(m,u,y,x);
../singular_texi/./d2t_singular/ainvar_lib.tex(,358) ideal karl=id,x;
../singular_texi/./d2t_singular/ainvar_lib.tex(,359) list in=furtherInvar(m,id,karl,x);
../singular_texi/./d2t_singular/ainvar_lib.tex(,360) in;
../singular_texi/./d2t_singular/ainvar_lib.tex(,361) @expansion{} [1]:
../singular_texi/./d2t_singular/ainvar_lib.tex(,362) @expansion{}    _[1]=y2z2-8/3xz3-2y3u+6xyzu-3x2u2
../singular_texi/./d2t_singular/ainvar_lib.tex(,363) @expansion{} [2]:
../singular_texi/./d2t_singular/ainvar_lib.tex(,364) @expansion{}    _[1]=-1/2y2+xz
../singular_texi/./d2t_singular/ainvar_lib.tex(,365) @expansion{}    _[2]=1/3y3-xyz+x2u
../singular_texi/./d2t_singular/ainvar_lib.tex(,366) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/ainvar_lib.tex(,367) @c end example furtherInvar d2t_singular/ainvar_lib.doc:323
../singular_texi/./d2t_singular/ainvar_lib.tex(,368) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,369) @c ---end content furtherInvar---
../singular_texi/./d2t_singular/ainvar_lib.tex(,370) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,371) @c ------------------- sortier -------------
../singular_texi/./d2t_singular/ainvar_lib.tex(,372) @node sortier,, furtherInvar, ainvar_lib
../singular_texi/./d2t_singular/ainvar_lib.tex(,373) @subsubsection sortier
../singular_texi/./d2t_singular/ainvar_lib.tex(,374) @cindex sortier
../singular_texi/./d2t_singular/ainvar_lib.tex(,375) @c ---content sortier---
../singular_texi/./d2t_singular/ainvar_lib.tex(,376) Procedure from library @code{ainvar.lib} (@pxref{ainvar_lib}).
../singular_texi/./d2t_singular/ainvar_lib.tex(,377) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,378) @table @asis
../singular_texi/./d2t_singular/ainvar_lib.tex(,379) @item @strong{Usage:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,380) sortier(id); id ideal/module
../singular_texi/./d2t_singular/ainvar_lib.tex(,381) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,382) @item @strong{Return:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,383) the same ideal/module but with generators ordered by there
../singular_texi/./d2t_singular/ainvar_lib.tex(,384) leading term, starting with the smallest
../singular_texi/./d2t_singular/ainvar_lib.tex(,385) 
../singular_texi/./d2t_singular/ainvar_lib.tex(,386) @end table
../singular_texi/./d2t_singular/ainvar_lib.tex(,387) @strong{Example:}
../singular_texi/./d2t_singular/ainvar_lib.tex(,388) @smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,389) @c computed example sortier d2t_singular/ainvar_lib.doc:356 
../singular_texi/./d2t_singular/ainvar_lib.tex(,390) LIB "ainvar.lib";
../singular_texi/./d2t_singular/ainvar_lib.tex(,391) ring q=0,(x,y,z,u,v,w),dp;
../singular_texi/./d2t_singular/ainvar_lib.tex(,392) ideal i=w,x,z,y,v;
../singular_texi/./d2t_singular/ainvar_lib.tex(,393) sortier(i);
../singular_texi/./d2t_singular/ainvar_lib.tex(,394) @expansion{} _[1]=w
../singular_texi/./d2t_singular/ainvar_lib.tex(,395) @expansion{} _[2]=v
../singular_texi/./d2t_singular/ainvar_lib.tex(,396) @expansion{} _[3]=z
../singular_texi/./d2t_singular/ainvar_lib.tex(,397) @expansion{} _[4]=y
../singular_texi/./d2t_singular/ainvar_lib.tex(,398) @expansion{} _[5]=x
../singular_texi/./d2t_singular/ainvar_lib.tex(,399) @c end example sortier d2t_singular/ainvar_lib.doc:356
../singular_texi/./d2t_singular/ainvar_lib.tex(,400) @end smallexample
../singular_texi/./d2t_singular/ainvar_lib.tex(,401) @c ---end content sortier---
../singular_texi/singular.tex(,522) @c ----------------------------------------------------------
../singular_texi/singular.tex(,523) @node rinvar_lib, stratify_lib, ainvar_lib, Invariant theory
../singular_texi/singular.tex(,524) @subsection rinvar_lib
../singular_texi/singular.tex(,525) @c include of docu for rinvar.lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/rinvar_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/rinvar_lib.doc
../singular_texi/./d2t_singular/rinvar_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/rinvar_lib.doc INSTEAD
../singular_texi/./d2t_singular/rinvar_lib.tex(,4) @c library version: (1.7.2.3,2002/02/20)
../singular_texi/./d2t_singular/rinvar_lib.tex(,5) @c library file: ../Singular/LIB/rinvar.lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,6) @cindex rinvar.lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,7) @cindex rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,10) rinvar.lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,12)       Invariant Rings of Reductive Groups
../singular_texi/./d2t_singular/rinvar_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,14) Thomas Bayer, tbayer@@in.tum.de
../singular_texi/./d2t_singular/rinvar_lib.tex(,15) @*http://wwwmayr.informatik.tu-muenchen.de/personen/bayert/
../singular_texi/./d2t_singular/rinvar_lib.tex(,16) Current Adress: Institut fuer Informatik, TU Muenchen
../singular_texi/./d2t_singular/rinvar_lib.tex(,17) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,18) @item @strong{Overview:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,19) Implementation based on Derksen's algorithm. Written in the frame of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,20) diploma thesis (advisor: Prof. Gert-Martin Greuel) 'Computations of moduli
../singular_texi/./d2t_singular/rinvar_lib.tex(,21) spaces of semiquasihomogeneous singularities and an implementation in Singular'
../singular_texi/./d2t_singular/rinvar_lib.tex(,22) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,23) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,24) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,25) @strong{Procedures:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,26) @menu
../singular_texi/./d2t_singular/rinvar_lib.tex(,27) * HilbertSeries:: Hilbert series of the ideal I w.r.t. weight w
../singular_texi/./d2t_singular/rinvar_lib.tex(,28) * HilbertWeights:: weighted degrees of the generators of I
../singular_texi/./d2t_singular/rinvar_lib.tex(,29) * ImageVariety:: ideal of the image variety F(variety(I))
../singular_texi/./d2t_singular/rinvar_lib.tex(,30) * ImageGroup:: ideal of G w.r.t. the induced representation
../singular_texi/./d2t_singular/rinvar_lib.tex(,31) * InvariantRing:: generators of the invariant ring of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,32) * InvariantQ:: decide if f is invariant w.r.t. G
../singular_texi/./d2t_singular/rinvar_lib.tex(,33) * LinearizeAction:: linearization of the action 'Gaction' of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,34) * LinearActionQ:: decide if action is linear in var(s..nvars)
../singular_texi/./d2t_singular/rinvar_lib.tex(,35) * LinearCombinationQ:: decide if f is in the linear hull of 'base'
../singular_texi/./d2t_singular/rinvar_lib.tex(,36) * MinimalDecomposition:: minimal decomposition of f (like coef)
../singular_texi/./d2t_singular/rinvar_lib.tex(,37) * NullCone:: ideal of the null cone of the action 'act' of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,38) * ReynoldsImage:: image of f under the Reynolds operator 'RO'
../singular_texi/./d2t_singular/rinvar_lib.tex(,39) * ReynoldsOperator:: Reynolds operator of the group G
../singular_texi/./d2t_singular/rinvar_lib.tex(,40) * SimplifyIdeal:: simplify the ideal I (try to reduce variables)
../singular_texi/./d2t_singular/rinvar_lib.tex(,41) * TransferIdeal:: transfer the ideal 'name' from R to basering
../singular_texi/./d2t_singular/rinvar_lib.tex(,42) @end menu
../singular_texi/./d2t_singular/rinvar_lib.tex(,43) @c inserted refs from d2t_singular/rinvar_lib.doc:41
../singular_texi/./d2t_singular/rinvar_lib.tex(,52) @strong{See also:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,53) @ref{qhmoduli_lib};
../singular_texi/./d2t_singular/rinvar_lib.tex(,54) @ref{zeroset_lib}.
../singular_texi/./d2t_singular/rinvar_lib.tex(,56) @c end inserted refs from d2t_singular/rinvar_lib.doc:41
../singular_texi/./d2t_singular/rinvar_lib.tex(,57) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,58) @c ---end content LibInfo---
../singular_texi/./d2t_singular/rinvar_lib.tex(,59) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,60) @c ------------------- HilbertSeries -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,61) @node HilbertSeries, HilbertWeights,, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,62) @subsubsection HilbertSeries
../singular_texi/./d2t_singular/rinvar_lib.tex(,63) @cindex HilbertSeries
../singular_texi/./d2t_singular/rinvar_lib.tex(,64) @c ---content HilbertSeries---
../singular_texi/./d2t_singular/rinvar_lib.tex(,65) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,66) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,67) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,68) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,69) HilbertSeries(I, w); ideal I, intvec wt
../singular_texi/./d2t_singular/rinvar_lib.tex(,70) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,71) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,72) compute the polynomial p of the Hilbert Series,represented by p/q, of
../singular_texi/./d2t_singular/rinvar_lib.tex(,73) the ring K[t_1,...,t_m,y_1,...,y_r]/I1 where 'w' are the weights of
../singular_texi/./d2t_singular/rinvar_lib.tex(,74) the variables, computed, e.g., by 'HilbertWeights', 'I1' is of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,75) form I[1] - y_1,...,I[r] - y_r and is quasihomogeneous w.r.t. 'w'
../singular_texi/./d2t_singular/rinvar_lib.tex(,76) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,77) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,78) intvec
../singular_texi/./d2t_singular/rinvar_lib.tex(,79) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,80) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,81) the leading 0 of the result does not belong to p, but is needed in
../singular_texi/./d2t_singular/rinvar_lib.tex(,82) the hilbert-driven 'std'.
../singular_texi/./d2t_singular/rinvar_lib.tex(,83) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,84) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,85) @c ---end content HilbertSeries---
../singular_texi/./d2t_singular/rinvar_lib.tex(,86) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,87) @c ------------------- HilbertWeights -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,88) @node HilbertWeights, ImageVariety, HilbertSeries, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,89) @subsubsection HilbertWeights
../singular_texi/./d2t_singular/rinvar_lib.tex(,90) @cindex HilbertWeights
../singular_texi/./d2t_singular/rinvar_lib.tex(,91) @c ---content HilbertWeights---
../singular_texi/./d2t_singular/rinvar_lib.tex(,92) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,93) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,94) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,95) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,96) compute the weights of the "slack" variables needed for the
../singular_texi/./d2t_singular/rinvar_lib.tex(,97) computation of the algebraic relations of the generators of 'I' s.t.
../singular_texi/./d2t_singular/rinvar_lib.tex(,98) the Hilbert driven 'std' can be used.
../singular_texi/./d2t_singular/rinvar_lib.tex(,99) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,100) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,101) intvec
../singular_texi/./d2t_singular/rinvar_lib.tex(,102) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,103) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,104) basering = K[t_1,...,t_m,...], 'I' is quasihomogeneous w.r.t. 'w' and
../singular_texi/./d2t_singular/rinvar_lib.tex(,105) contains only polynomials in t_1,...,t_m
../singular_texi/./d2t_singular/rinvar_lib.tex(,106) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,107) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,108) @c ---end content HilbertWeights---
../singular_texi/./d2t_singular/rinvar_lib.tex(,109) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,110) @c ------------------- ImageVariety -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,111) @node ImageVariety, ImageGroup, HilbertWeights, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,112) @subsubsection ImageVariety
../singular_texi/./d2t_singular/rinvar_lib.tex(,113) @cindex ImageVariety
../singular_texi/./d2t_singular/rinvar_lib.tex(,114) @c ---content ImageVariety---
../singular_texi/./d2t_singular/rinvar_lib.tex(,115) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,116) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,117) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,118) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,119) ImageVariety(ideal I, F [, w]);ideal I; F is a list/ideal, intvec w.
../singular_texi/./d2t_singular/rinvar_lib.tex(,120) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,121) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,122) compute the Zariski closure of the image of the variety of I under
../singular_texi/./d2t_singular/rinvar_lib.tex(,123) the morphism F.
../singular_texi/./d2t_singular/rinvar_lib.tex(,124) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,125) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,126) if 'I' and 'F' are quasihomogeneous w.r.t. 'w' then the Hilbert-driven
../singular_texi/./d2t_singular/rinvar_lib.tex(,127) 'std' is used.
../singular_texi/./d2t_singular/rinvar_lib.tex(,128) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,129) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,130) polynomial ring over the same ground field, containing the ideal
../singular_texi/./d2t_singular/rinvar_lib.tex(,131) 'imageid'. The variables are Y(1),...,Y(k) where k = size(F)
../singular_texi/./d2t_singular/rinvar_lib.tex(,132) - 'imageid' is the ideal of the Zariski closure of F(X) where
../singular_texi/./d2t_singular/rinvar_lib.tex(,133) X is the variety of I.
../singular_texi/./d2t_singular/rinvar_lib.tex(,134) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,135) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,136) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,137) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,138) @c computed example ImageVariety d2t_singular/rinvar_lib.doc:125 
../singular_texi/./d2t_singular/rinvar_lib.tex(,139) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,140) ring B   = 0,(x,y),dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,141) ideal I  = x4 - y4;
../singular_texi/./d2t_singular/rinvar_lib.tex(,142) ideal F  = x2, y2, x*y;
../singular_texi/./d2t_singular/rinvar_lib.tex(,143) def R = ImageVariety(I, F);
../singular_texi/./d2t_singular/rinvar_lib.tex(,144) setring R;
../singular_texi/./d2t_singular/rinvar_lib.tex(,145) imageid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,146) @expansion{} imageid[1]=Y(1)*Y(2)-Y(3)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,147) @expansion{} imageid[2]=Y(1)^2-Y(2)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,148) @expansion{} imageid[3]=Y(2)^3-Y(1)*Y(3)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,149) @c end example ImageVariety d2t_singular/rinvar_lib.doc:125
../singular_texi/./d2t_singular/rinvar_lib.tex(,150) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,151) @c ---end content ImageVariety---
../singular_texi/./d2t_singular/rinvar_lib.tex(,152) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,153) @c ------------------- ImageGroup -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,154) @node ImageGroup, InvariantRing, ImageVariety, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,155) @subsubsection ImageGroup
../singular_texi/./d2t_singular/rinvar_lib.tex(,156) @cindex ImageGroup
../singular_texi/./d2t_singular/rinvar_lib.tex(,157) @c ---content ImageGroup---
../singular_texi/./d2t_singular/rinvar_lib.tex(,158) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,159) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,160) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,161) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,162) ImageGroup(G, action); ideal G, action;
../singular_texi/./d2t_singular/rinvar_lib.tex(,163) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,164) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,165) compute the ideal of the image of G in GL(m,K) induced by the linear
../singular_texi/./d2t_singular/rinvar_lib.tex(,166) action 'action', where G is an algebraic group and 'action' defines
../singular_texi/./d2t_singular/rinvar_lib.tex(,167) an action of G on K^m (size(action) = m).
../singular_texi/./d2t_singular/rinvar_lib.tex(,168) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,169) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,170) ring, a polynomial ring over the same ground field as the basering,
../singular_texi/./d2t_singular/rinvar_lib.tex(,171) containing the ideals 'groupid' and 'actionid'.
../singular_texi/./d2t_singular/rinvar_lib.tex(,172) @*- 'groupid' is the ideal of the image of G (order <= order of G)
../singular_texi/./d2t_singular/rinvar_lib.tex(,173) - 'actionid' defines the linear action of 'groupid' on K^m.
../singular_texi/./d2t_singular/rinvar_lib.tex(,174) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,175) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,176) 'action' and 'actionid' have the same orbits
../singular_texi/./d2t_singular/rinvar_lib.tex(,177) @*all variables which give only rise to 0's in the m x m matrices of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,178) have been omitted.
../singular_texi/./d2t_singular/rinvar_lib.tex(,179) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,180) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,181) basering K[s(1..r),t(1..m)] has r + m variables, G is the ideal of an
../singular_texi/./d2t_singular/rinvar_lib.tex(,182) algebraic group and F is an action of G on K^m. G contains only the
../singular_texi/./d2t_singular/rinvar_lib.tex(,183) variables s(1)...s(r). The action 'action' is given by polynomials
../singular_texi/./d2t_singular/rinvar_lib.tex(,184) f_1,...,f_m in basering, s.t. on the ring level we have
../singular_texi/./d2t_singular/rinvar_lib.tex(,185) K[t_1,...,t_m] --> K[s_1,...,s_r,t_1,...,t_m]/G
../singular_texi/./d2t_singular/rinvar_lib.tex(,186) @*t_i --> f_i(s_1,...,s_r,t_1,...,t_m)
../singular_texi/./d2t_singular/rinvar_lib.tex(,187) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,188) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,189) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,190) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,191) @c computed example ImageGroup d2t_singular/rinvar_lib.doc:175 
../singular_texi/./d2t_singular/rinvar_lib.tex(,192) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,193) ring B   = 0,(s(1..2), t(1..2)),dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,194) ideal G = s(1)^3-1, s(2)^10-1;
../singular_texi/./d2t_singular/rinvar_lib.tex(,195) ideal action = s(1)*s(2)^8*t(1), s(1)*s(2)^7*t(2);
../singular_texi/./d2t_singular/rinvar_lib.tex(,196) def R = ImageGroup(G, action);
../singular_texi/./d2t_singular/rinvar_lib.tex(,197) setring R;
../singular_texi/./d2t_singular/rinvar_lib.tex(,198) groupid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,199) @expansion{} groupid[1]=-s(1)+s(2)^4
../singular_texi/./d2t_singular/rinvar_lib.tex(,200) @expansion{} groupid[2]=s(1)^8-s(2)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,201) @expansion{} groupid[3]=s(1)^7*s(2)^2-1
../singular_texi/./d2t_singular/rinvar_lib.tex(,202) actionid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,203) @expansion{} actionid[1]=s(1)*t(1)
../singular_texi/./d2t_singular/rinvar_lib.tex(,204) @expansion{} actionid[2]=s(2)*t(2)
../singular_texi/./d2t_singular/rinvar_lib.tex(,205) @c end example ImageGroup d2t_singular/rinvar_lib.doc:175
../singular_texi/./d2t_singular/rinvar_lib.tex(,206) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,207) @c ---end content ImageGroup---
../singular_texi/./d2t_singular/rinvar_lib.tex(,208) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,209) @c ------------------- InvariantRing -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,210) @node InvariantRing, InvariantQ, ImageGroup, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,211) @subsubsection InvariantRing
../singular_texi/./d2t_singular/rinvar_lib.tex(,212) @cindex InvariantRing
../singular_texi/./d2t_singular/rinvar_lib.tex(,213) @c ---content InvariantRing---
../singular_texi/./d2t_singular/rinvar_lib.tex(,214) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,215) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,216) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,217) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,218) InvariantRing(G, Gact [, opt]); ideal G, Gact; int opt
../singular_texi/./d2t_singular/rinvar_lib.tex(,219) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,220) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,221) compute generators of the invariant ring of G w.r.t. the action 'Gact'
../singular_texi/./d2t_singular/rinvar_lib.tex(,222) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,223) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,224) G is a finite group and 'Gact' is a linear action.
../singular_texi/./d2t_singular/rinvar_lib.tex(,225) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,226) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,227) polynomial ring over a simple extension of the ground field of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,228) basering (the extension might be trivial), containing the ideals
../singular_texi/./d2t_singular/rinvar_lib.tex(,229) 'invars' and 'groupid' and the poly 'newA'
../singular_texi/./d2t_singular/rinvar_lib.tex(,230) @*- 'invars' contains the algebra-generators of the invariant ring
../singular_texi/./d2t_singular/rinvar_lib.tex(,231) - 'groupid' is the ideal of G in the new ring
../singular_texi/./d2t_singular/rinvar_lib.tex(,232) @*- 'newA' if the minpoly changes this is the new representation of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,233) algebraic number, otherwise it is set to 'a'.
../singular_texi/./d2t_singular/rinvar_lib.tex(,234) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,235) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,236) the delivered ring might have a different minimal polynomial
../singular_texi/./d2t_singular/rinvar_lib.tex(,237) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,238) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,239) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,240) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,241) @c computed example InvariantRing d2t_singular/rinvar_lib.doc:220 
../singular_texi/./d2t_singular/rinvar_lib.tex(,242) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,243) ring B = 0, (s(1..2), t(1..2)), dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,244) ideal G = -s(1)+s(2)^3, s(1)^4-1;
../singular_texi/./d2t_singular/rinvar_lib.tex(,245) ideal action = s(1)*t(1), s(2)*t(2);
../singular_texi/./d2t_singular/rinvar_lib.tex(,246) def R = InvariantRing(std(G), action);
../singular_texi/./d2t_singular/rinvar_lib.tex(,247) setring R;
../singular_texi/./d2t_singular/rinvar_lib.tex(,248) invars;
../singular_texi/./d2t_singular/rinvar_lib.tex(,249) @expansion{} invars[1]=t(1)^4
../singular_texi/./d2t_singular/rinvar_lib.tex(,250) @expansion{} invars[2]=t(1)^3*t(2)^3
../singular_texi/./d2t_singular/rinvar_lib.tex(,251) @expansion{} invars[3]=t(1)^2*t(2)^6
../singular_texi/./d2t_singular/rinvar_lib.tex(,252) @expansion{} invars[4]=t(1)*t(2)^9
../singular_texi/./d2t_singular/rinvar_lib.tex(,253) @expansion{} invars[5]=t(2)^12
../singular_texi/./d2t_singular/rinvar_lib.tex(,254) @c end example InvariantRing d2t_singular/rinvar_lib.doc:220
../singular_texi/./d2t_singular/rinvar_lib.tex(,255) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,256) @c ---end content InvariantRing---
../singular_texi/./d2t_singular/rinvar_lib.tex(,257) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,258) @c ------------------- InvariantQ -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,259) @node InvariantQ, LinearizeAction, InvariantRing, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,260) @subsubsection InvariantQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,261) @cindex InvariantQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,262) @c ---content InvariantQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,263) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,264) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,265) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,266) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,267) InvariantQ(f, G, action); poly f; ideal G, action
../singular_texi/./d2t_singular/rinvar_lib.tex(,268) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,269) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,270) check if the polynomial f is invariant w.r.t. G where G acts via
../singular_texi/./d2t_singular/rinvar_lib.tex(,271) 'action' on K^m.
../singular_texi/./d2t_singular/rinvar_lib.tex(,272) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,273) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,274) basering = K[s_1,...,s_m,t_1,...,t_m] where K = Q of K = Q(a) and
../singular_texi/./d2t_singular/rinvar_lib.tex(,275) minpoly != 0, f contains only t_1,...,t_m, G is the ideal of an
../singular_texi/./d2t_singular/rinvar_lib.tex(,276) algebraic group and a standard basis.
../singular_texi/./d2t_singular/rinvar_lib.tex(,277) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,278) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,279) int;
../singular_texi/./d2t_singular/rinvar_lib.tex(,280) @*0 if f is not invariant,
../singular_texi/./d2t_singular/rinvar_lib.tex(,281) @*1 if f is invariant
../singular_texi/./d2t_singular/rinvar_lib.tex(,282) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,283) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,284) G need not be finite
../singular_texi/./d2t_singular/rinvar_lib.tex(,285) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,286) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,287) @c ---end content InvariantQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,288) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,289) @c ------------------- LinearizeAction -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,290) @node LinearizeAction, LinearActionQ, InvariantQ, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,291) @subsubsection LinearizeAction
../singular_texi/./d2t_singular/rinvar_lib.tex(,292) @cindex LinearizeAction
../singular_texi/./d2t_singular/rinvar_lib.tex(,293) @c ---content LinearizeAction---
../singular_texi/./d2t_singular/rinvar_lib.tex(,294) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,295) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,296) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,297) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,298) LinearizeAction(G,action,r); ideal G, action; int r
../singular_texi/./d2t_singular/rinvar_lib.tex(,299) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,300) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,301) linearize the group action 'action' and find an equivariant embedding
../singular_texi/./d2t_singular/rinvar_lib.tex(,302) of K^m where m = size(action).
../singular_texi/./d2t_singular/rinvar_lib.tex(,303) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,304) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,305) G contains only variables var(1..r) (r = nrs)
../singular_texi/./d2t_singular/rinvar_lib.tex(,306) @*basering = K[s(1..r),t(1..m)], K = Q or K = Q(a) and minpoly != 0.
../singular_texi/./d2t_singular/rinvar_lib.tex(,307) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,308) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,309) polynomial ring containing the ideals 'actionid', 'embedid', 'groupid'
../singular_texi/./d2t_singular/rinvar_lib.tex(,310) - 'actionid' is the ideal defining the linearized action of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,311) - 'embedid' is a parameterization of an equivariant embedding (closed)
../singular_texi/./d2t_singular/rinvar_lib.tex(,312) - 'groupid' is the ideal of G in the new ring
../singular_texi/./d2t_singular/rinvar_lib.tex(,313) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,314) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,315) set printlevel > 0 to see a trace
../singular_texi/./d2t_singular/rinvar_lib.tex(,316) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,317) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,318) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,319) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,320) @c computed example LinearizeAction d2t_singular/rinvar_lib.doc:294 
../singular_texi/./d2t_singular/rinvar_lib.tex(,321) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,322) ring B   = 0,(s(1..5), t(1..3)),dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,323) ideal G =  s(3)-s(4), s(2)-s(5), s(4)*s(5), s(1)^2*s(4)+s(1)^2*s(5)-1, s(1)^2*s(5)^2-s(5), s(4)^4-s(5)^4+s(1)^2, s(1)^4+s(4)^3-s(5)^3, s(5)^5-s(1)^2*s(5);
../singular_texi/./d2t_singular/rinvar_lib.tex(,324) ideal action = -s(4)*t(1)+s(5)*t(1), -s(4)^2*t(2)+2*s(4)^2*t(3)^2+s(5)^2*t(2), s(4)*t(3)+s(5)*t(3);
../singular_texi/./d2t_singular/rinvar_lib.tex(,325) LinearActionQ(action, 5);
../singular_texi/./d2t_singular/rinvar_lib.tex(,326) @expansion{} 0
../singular_texi/./d2t_singular/rinvar_lib.tex(,327) def R = LinearizeAction(G, action, 5);
../singular_texi/./d2t_singular/rinvar_lib.tex(,328) setring R;
../singular_texi/./d2t_singular/rinvar_lib.tex(,329) R;
../singular_texi/./d2t_singular/rinvar_lib.tex(,330) @expansion{} //   characteristic : 0
../singular_texi/./d2t_singular/rinvar_lib.tex(,331) @expansion{} //   number of vars : 9
../singular_texi/./d2t_singular/rinvar_lib.tex(,332) @expansion{} //        block   1 : ordering dp
../singular_texi/./d2t_singular/rinvar_lib.tex(,333) @expansion{} //                  : names    s(1) s(2) s(3) s(4) s(5) t(1) t(2) t(3) t(\
../singular_texi/./d2t_singular/rinvar_lib.tex(,334)    4) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,335) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/rinvar_lib.tex(,336) actionid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,337) @expansion{} actionid[1]=-s(4)*t(1)+s(5)*t(1)
../singular_texi/./d2t_singular/rinvar_lib.tex(,338) @expansion{} actionid[2]=-s(4)^2*t(2)+s(5)^2*t(2)+2*s(4)^2*t(4)
../singular_texi/./d2t_singular/rinvar_lib.tex(,339) @expansion{} actionid[3]=s(4)*t(3)+s(5)*t(3)
../singular_texi/./d2t_singular/rinvar_lib.tex(,340) @expansion{} actionid[4]=s(4)^2*t(4)+s(5)^2*t(4)
../singular_texi/./d2t_singular/rinvar_lib.tex(,341) embedid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,342) @expansion{} embedid[1]=t(1)
../singular_texi/./d2t_singular/rinvar_lib.tex(,343) @expansion{} embedid[2]=t(2)
../singular_texi/./d2t_singular/rinvar_lib.tex(,344) @expansion{} embedid[3]=t(3)
../singular_texi/./d2t_singular/rinvar_lib.tex(,345) @expansion{} embedid[4]=t(3)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,346) groupid;
../singular_texi/./d2t_singular/rinvar_lib.tex(,347) @expansion{} groupid[1]=s(3)-s(4)
../singular_texi/./d2t_singular/rinvar_lib.tex(,348) @expansion{} groupid[2]=s(2)-s(5)
../singular_texi/./d2t_singular/rinvar_lib.tex(,349) @expansion{} groupid[3]=s(4)*s(5)
../singular_texi/./d2t_singular/rinvar_lib.tex(,350) @expansion{} groupid[4]=s(1)^2*s(4)+s(1)^2*s(5)-1
../singular_texi/./d2t_singular/rinvar_lib.tex(,351) @expansion{} groupid[5]=s(1)^2*s(5)^2-s(5)
../singular_texi/./d2t_singular/rinvar_lib.tex(,352) @expansion{} groupid[6]=s(4)^4-s(5)^4+s(1)^2
../singular_texi/./d2t_singular/rinvar_lib.tex(,353) @expansion{} groupid[7]=s(1)^4+s(4)^3-s(5)^3
../singular_texi/./d2t_singular/rinvar_lib.tex(,354) @expansion{} groupid[8]=s(5)^5-s(1)^2*s(5)
../singular_texi/./d2t_singular/rinvar_lib.tex(,355) LinearActionQ(actionid, 5);
../singular_texi/./d2t_singular/rinvar_lib.tex(,356) @expansion{} 1
../singular_texi/./d2t_singular/rinvar_lib.tex(,357) @c end example LinearizeAction d2t_singular/rinvar_lib.doc:294
../singular_texi/./d2t_singular/rinvar_lib.tex(,358) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,359) @c ---end content LinearizeAction---
../singular_texi/./d2t_singular/rinvar_lib.tex(,360) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,361) @c ------------------- LinearActionQ -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,362) @node LinearActionQ, LinearCombinationQ, LinearizeAction, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,363) @subsubsection LinearActionQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,364) @cindex LinearActionQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,365) @c ---content LinearActionQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,366) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,367) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,368) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,369) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,370) LinearActionQ(action,nrs,nrt); ideal action, int nrs
../singular_texi/./d2t_singular/rinvar_lib.tex(,371) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,372) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,373) check if the action defined by 'action' is linear w.r.t. the variables
../singular_texi/./d2t_singular/rinvar_lib.tex(,374) var(nrs + 1...nvars(basering)).
../singular_texi/./d2t_singular/rinvar_lib.tex(,375) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,376) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,377) 0 action not linear
../singular_texi/./d2t_singular/rinvar_lib.tex(,378) @*1 action is linear
../singular_texi/./d2t_singular/rinvar_lib.tex(,379) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,380) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,381) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,382) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,383) @c computed example LinearActionQ d2t_singular/rinvar_lib.doc:333 
../singular_texi/./d2t_singular/rinvar_lib.tex(,384) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,385) ring R   = 0,(s(1..5), t(1..3)),dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,386) ideal G =  s(3)-s(4), s(2)-s(5), s(4)*s(5), s(1)^2*s(4)+s(1)^2*s(5)-1, s(1)^2*s(5)^2-s(5), s(4)^4-s(5)^4+s(1)^2, s(1)^4+s(4)^3-s(5)^3, s(5)^5-s(1)^2*s(5);
../singular_texi/./d2t_singular/rinvar_lib.tex(,387) ideal Gaction = -s(4)*t(1)+s(5)*t(1), -s(4)^2*t(2)+2*s(4)^2*t(3)^2+s(5)^2*t(2), s(4)*t(3)+s(5)*t(3);
../singular_texi/./d2t_singular/rinvar_lib.tex(,388) LinearActionQ(Gaction, 5, 3);
../singular_texi/./d2t_singular/rinvar_lib.tex(,389) @expansion{} // ** too many arguments for LinearActionQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,390) @expansion{} 0
../singular_texi/./d2t_singular/rinvar_lib.tex(,391) @c end example LinearActionQ d2t_singular/rinvar_lib.doc:333
../singular_texi/./d2t_singular/rinvar_lib.tex(,392) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,393) @c ---end content LinearActionQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,394) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,395) @c ------------------- LinearCombinationQ -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,396) @node LinearCombinationQ, MinimalDecomposition, LinearActionQ, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,397) @subsubsection LinearCombinationQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,398) @cindex LinearCombinationQ
../singular_texi/./d2t_singular/rinvar_lib.tex(,399) @c ---content LinearCombinationQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,400) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,401) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,402) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,403) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,404) LinearCombination(I, f); ideal I, poly f
../singular_texi/./d2t_singular/rinvar_lib.tex(,405) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,406) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,407) test if f can be written as a linear combination of the generators of I.
../singular_texi/./d2t_singular/rinvar_lib.tex(,408) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,409) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,410) 0 f is not a linear combination
../singular_texi/./d2t_singular/rinvar_lib.tex(,411) @*1 f is a linear combination
../singular_texi/./d2t_singular/rinvar_lib.tex(,412) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,413) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,414) @c ---end content LinearCombinationQ---
../singular_texi/./d2t_singular/rinvar_lib.tex(,415) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,416) @c ------------------- MinimalDecomposition -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,417) @node MinimalDecomposition, NullCone, LinearCombinationQ, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,418) @subsubsection MinimalDecomposition
../singular_texi/./d2t_singular/rinvar_lib.tex(,419) @cindex MinimalDecomposition
../singular_texi/./d2t_singular/rinvar_lib.tex(,420) @c ---content MinimalDecomposition---
../singular_texi/./d2t_singular/rinvar_lib.tex(,421) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,422) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,423) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,424) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,425) MinimalDecomposition(f,a,b); poly f; int a, b.
../singular_texi/./d2t_singular/rinvar_lib.tex(,426) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,427) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,428) decompose f as a sum M[1,1]*M[2,1] + ... + M[1,r]*M[2,r] where M[1,i]
../singular_texi/./d2t_singular/rinvar_lib.tex(,429) contains only s(1..a), M[2,i] contains only t(1...b) s.t. r is minimal
../singular_texi/./d2t_singular/rinvar_lib.tex(,430) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,431) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,432) f polynomial in K[s(1..a),t(1..b)], K = Q or K = Q(a) and minpoly != 0
../singular_texi/./d2t_singular/rinvar_lib.tex(,433) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,434) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,435) 2 x r matrix M s.t. f = M[1,1]*M[2,1] + ... + M[1,r]*M[2,r]
../singular_texi/./d2t_singular/rinvar_lib.tex(,436) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,437) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,438) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,439) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,440) @c computed example MinimalDecomposition d2t_singular/rinvar_lib.doc:388 
../singular_texi/./d2t_singular/rinvar_lib.tex(,441) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,442) ring R = 0, (s(1..2), t(1..2)), dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,443) poly h = s(1)*(t(1) + t(1)^2) +  (t(2) + t(2)^2)*(s(1)^2 + s(2));
../singular_texi/./d2t_singular/rinvar_lib.tex(,444) matrix M = MinimalDecomposition(h, 2, 2);
../singular_texi/./d2t_singular/rinvar_lib.tex(,445) M;
../singular_texi/./d2t_singular/rinvar_lib.tex(,446) @expansion{} M[1,1]=s(1)^2+s(2)
../singular_texi/./d2t_singular/rinvar_lib.tex(,447) @expansion{} M[1,2]=s(1)
../singular_texi/./d2t_singular/rinvar_lib.tex(,448) @expansion{} M[2,1]=t(2)^2+t(2)
../singular_texi/./d2t_singular/rinvar_lib.tex(,449) @expansion{} M[2,2]=t(1)^2+t(1)
../singular_texi/./d2t_singular/rinvar_lib.tex(,450) M[1,1]*M[2,1] + M[1,2]*M[2,2] - h;
../singular_texi/./d2t_singular/rinvar_lib.tex(,451) @expansion{} 0
../singular_texi/./d2t_singular/rinvar_lib.tex(,452) @c end example MinimalDecomposition d2t_singular/rinvar_lib.doc:388
../singular_texi/./d2t_singular/rinvar_lib.tex(,453) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,454) @c ---end content MinimalDecomposition---
../singular_texi/./d2t_singular/rinvar_lib.tex(,455) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,456) @c ------------------- NullCone -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,457) @node NullCone, ReynoldsImage, MinimalDecomposition, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,458) @subsubsection NullCone
../singular_texi/./d2t_singular/rinvar_lib.tex(,459) @cindex NullCone
../singular_texi/./d2t_singular/rinvar_lib.tex(,460) @c ---content NullCone---
../singular_texi/./d2t_singular/rinvar_lib.tex(,461) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,462) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,463) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,464) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,465) NullCone(G, action); ideal G, action
../singular_texi/./d2t_singular/rinvar_lib.tex(,466) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,467) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,468) compute the ideal of the null cone of the linear action of G on K^n,
../singular_texi/./d2t_singular/rinvar_lib.tex(,469) given by 'action', by means of Derksen's algorithm
../singular_texi/./d2t_singular/rinvar_lib.tex(,470) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,471) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,472) basering = K[s(1..r),t(1..n)], K = Q or K = Q(a) and minpoly != 0,
../singular_texi/./d2t_singular/rinvar_lib.tex(,473) G is an ideal of a reductive algebraic group in K[s(1..r)],
../singular_texi/./d2t_singular/rinvar_lib.tex(,474) 'action' is a linear group action of G on K^n (n = ncols(action))
../singular_texi/./d2t_singular/rinvar_lib.tex(,475) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,476) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,477) ideal of the null cone of G.
../singular_texi/./d2t_singular/rinvar_lib.tex(,478) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,479) @item @strong{Note:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,480) the generators of the null cone are homogeneous, but i.g. not invariant
../singular_texi/./d2t_singular/rinvar_lib.tex(,481) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,482) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,483) @strong{Example:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,484) @smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,485) @c computed example NullCone d2t_singular/rinvar_lib.doc:428 
../singular_texi/./d2t_singular/rinvar_lib.tex(,486) LIB "rinvar.lib";
../singular_texi/./d2t_singular/rinvar_lib.tex(,487) ring R = 0, (s(1..2), x, y), dp;
../singular_texi/./d2t_singular/rinvar_lib.tex(,488) ideal G = -s(1)+s(2)^3, s(1)^4-1;
../singular_texi/./d2t_singular/rinvar_lib.tex(,489) ideal action = s(1)*x, s(2)*y;
../singular_texi/./d2t_singular/rinvar_lib.tex(,490) ideal inv = NullCone(G, action);
../singular_texi/./d2t_singular/rinvar_lib.tex(,491) inv;
../singular_texi/./d2t_singular/rinvar_lib.tex(,492) @expansion{} inv[1]=x^4
../singular_texi/./d2t_singular/rinvar_lib.tex(,493) @expansion{} inv[2]=x^3*y^3
../singular_texi/./d2t_singular/rinvar_lib.tex(,494) @expansion{} inv[3]=x^2*y^6
../singular_texi/./d2t_singular/rinvar_lib.tex(,495) @expansion{} inv[4]=x*y^9
../singular_texi/./d2t_singular/rinvar_lib.tex(,496) @expansion{} inv[5]=y^12
../singular_texi/./d2t_singular/rinvar_lib.tex(,497) @c end example NullCone d2t_singular/rinvar_lib.doc:428
../singular_texi/./d2t_singular/rinvar_lib.tex(,498) @end smallexample
../singular_texi/./d2t_singular/rinvar_lib.tex(,499) @c ---end content NullCone---
../singular_texi/./d2t_singular/rinvar_lib.tex(,500) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,501) @c ------------------- ReynoldsImage -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,502) @node ReynoldsImage, ReynoldsOperator, NullCone, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,503) @subsubsection ReynoldsImage
../singular_texi/./d2t_singular/rinvar_lib.tex(,504) @cindex ReynoldsImage
../singular_texi/./d2t_singular/rinvar_lib.tex(,505) @c ---content ReynoldsImage---
../singular_texi/./d2t_singular/rinvar_lib.tex(,506) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,507) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,508) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,509) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,510) ReynoldsImage(RO, f); list RO, poly f
../singular_texi/./d2t_singular/rinvar_lib.tex(,511) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,512) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,513) compute the Reynolds image of the polynomial f where RO represents
../singular_texi/./d2t_singular/rinvar_lib.tex(,514) the Reynolds operator
../singular_texi/./d2t_singular/rinvar_lib.tex(,515) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,516) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,517) poly
../singular_texi/./d2t_singular/rinvar_lib.tex(,518) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,519) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,520) @c ---end content ReynoldsImage---
../singular_texi/./d2t_singular/rinvar_lib.tex(,521) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,522) @c ------------------- ReynoldsOperator -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,523) @node ReynoldsOperator, SimplifyIdeal, ReynoldsImage, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,524) @subsubsection ReynoldsOperator
../singular_texi/./d2t_singular/rinvar_lib.tex(,525) @cindex ReynoldsOperator
../singular_texi/./d2t_singular/rinvar_lib.tex(,526) @c ---content ReynoldsOperator---
../singular_texi/./d2t_singular/rinvar_lib.tex(,527) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,528) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,529) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,530) @item @strong{Usage:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,531) ReynoldsOperator(G, action [, opt); ideal G, action; int opt
../singular_texi/./d2t_singular/rinvar_lib.tex(,532) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,533) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,534) compute the Reynolds operator of the group G which act via 'action'
../singular_texi/./d2t_singular/rinvar_lib.tex(,535) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,536) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,537) polynomial ring R over a simple extension of the ground field of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,538) basering (the extension might be trivial), containing a list
../singular_texi/./d2t_singular/rinvar_lib.tex(,539) 'ROelements', the ideals 'id', 'actionid' and the polynomial 'newA'.
../singular_texi/./d2t_singular/rinvar_lib.tex(,540) R = K(a)[s(1..r),t(1..n)].
../singular_texi/./d2t_singular/rinvar_lib.tex(,541) @*- 'ROelements' is a list of ideal, each ideal represents a
../singular_texi/./d2t_singular/rinvar_lib.tex(,542) substitution map F : R -> R according to the zero-set of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,543) - 'id' is the ideal of G in the new ring
../singular_texi/./d2t_singular/rinvar_lib.tex(,544) @*- 'newA' is the new representation of a' in terms of a. If the
../singular_texi/./d2t_singular/rinvar_lib.tex(,545) basering does not contain a parameter then 'newA' = 'a'.
../singular_texi/./d2t_singular/rinvar_lib.tex(,546) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,547) @item @strong{Assume:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,548) basering = K[s(1..r),t(1..n)], K = Q or K = Q(a') and minpoly != 0,
../singular_texi/./d2t_singular/rinvar_lib.tex(,549) G is the ideal of a finite group in K[s(1..r)], 'action' is a linear
../singular_texi/./d2t_singular/rinvar_lib.tex(,550) group action of G
../singular_texi/./d2t_singular/rinvar_lib.tex(,551) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,552) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,553) @c ---end content ReynoldsOperator---
../singular_texi/./d2t_singular/rinvar_lib.tex(,554) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,555) @c ------------------- SimplifyIdeal -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,556) @node SimplifyIdeal, TransferIdeal, ReynoldsOperator, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,557) @subsubsection SimplifyIdeal
../singular_texi/./d2t_singular/rinvar_lib.tex(,558) @cindex SimplifyIdeal
../singular_texi/./d2t_singular/rinvar_lib.tex(,559) @c ---content SimplifyIdeal---
../singular_texi/./d2t_singular/rinvar_lib.tex(,560) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,561) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,562) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,563) @item @strong{Purpose:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,564) simplify ideal I to the ideal I', do not change the names of the
../singular_texi/./d2t_singular/rinvar_lib.tex(,565) first m variables, new ideal I' might contain less variables.
../singular_texi/./d2t_singular/rinvar_lib.tex(,566) I' contains variables var(1..m)
../singular_texi/./d2t_singular/rinvar_lib.tex(,567) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,568) @item @strong{Return:}
../singular_texi/./d2t_singular/rinvar_lib.tex(,569) list
../singular_texi/./d2t_singular/rinvar_lib.tex(,570) @*_[1] ideal I'
../singular_texi/./d2t_singular/rinvar_lib.tex(,571) @*_[2] ideal representing a map phi to a ring with probably less vars. s.t.
../singular_texi/./d2t_singular/rinvar_lib.tex(,572) phi(I) = I'
../singular_texi/./d2t_singular/rinvar_lib.tex(,573) @*_[3] list of variables
../singular_texi/./d2t_singular/rinvar_lib.tex(,574) @*_[4] list from 'elimpart'
../singular_texi/./d2t_singular/rinvar_lib.tex(,575) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,576) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,577) @c ---end content SimplifyIdeal---
../singular_texi/./d2t_singular/rinvar_lib.tex(,578) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,579) @c ------------------- TransferIdeal -------------
../singular_texi/./d2t_singular/rinvar_lib.tex(,580) @node TransferIdeal,, SimplifyIdeal, rinvar_lib
../singular_texi/./d2t_singular/rinvar_lib.tex(,581) @subsubsection TransferIdeal
../singular_texi/./d2t_singular/rinvar_lib.tex(,582) @cindex TransferIdeal
../singular_texi/./d2t_singular/rinvar_lib.tex(,583) @c ---content TransferIdeal---
../singular_texi/./d2t_singular/rinvar_lib.tex(,584) Procedure from library @code{rinvar.lib} (@pxref{rinvar_lib}).
../singular_texi/./d2t_singular/rinvar_lib.tex(,585) 
../singular_texi/./d2t_singular/rinvar_lib.tex(,586) @table @asis
../singular_texi/./d2t_singular/rinvar_lib.tex(,587) @end table
../singular_texi/./d2t_singular/rinvar_lib.tex(,588) @c ---end content TransferIdeal---
../singular_texi/singular.tex(,527) @c ----------------------------------------------------------
../singular_texi/singular.tex(,528) @node stratify_lib, ,rinvar_lib, Invariant theory
../singular_texi/singular.tex(,529) @subsection stratify_lib
../singular_texi/singular.tex(,530) @c include of docu for stratify.lib
../singular_texi/./d2t_singular/stratify_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/stratify_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/stratify_lib.doc
../singular_texi/./d2t_singular/stratify_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/stratify_lib.doc INSTEAD
../singular_texi/./d2t_singular/stratify_lib.tex(,4) @c library version: (1.7.2.4,2002/04/11)
../singular_texi/./d2t_singular/stratify_lib.tex(,5) @c library file: ../Singular/LIB/stratify.lib
../singular_texi/./d2t_singular/stratify_lib.tex(,6) @cindex stratify.lib
../singular_texi/./d2t_singular/stratify_lib.tex(,7) @cindex stratify_lib
../singular_texi/./d2t_singular/stratify_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/stratify_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/stratify_lib.tex(,10) stratify.lib
../singular_texi/./d2t_singular/stratify_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/stratify_lib.tex(,12)    Algorithmic Stratification for Unipotent Group-Actions
../singular_texi/./d2t_singular/stratify_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/stratify_lib.tex(,14) Anne Fruehbis-Krueger, anne@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/stratify_lib.tex(,15) 
../singular_texi/./d2t_singular/stratify_lib.tex(,16) @item @strong{Overview:}
../singular_texi/./d2t_singular/stratify_lib.tex(,17) This library provides an implementation of the algorithm
../singular_texi/./d2t_singular/stratify_lib.tex(,18) of Greuel and Pfister introduced in the article <Geometric
../singular_texi/./d2t_singular/stratify_lib.tex(,19) quotients of unipotent group actions>.
../singular_texi/./d2t_singular/stratify_lib.tex(,20) 
../singular_texi/./d2t_singular/stratify_lib.tex(,21) @end table
../singular_texi/./d2t_singular/stratify_lib.tex(,22) 
../singular_texi/./d2t_singular/stratify_lib.tex(,23) @strong{Procedures:}
../singular_texi/./d2t_singular/stratify_lib.tex(,24) @menu
../singular_texi/./d2t_singular/stratify_lib.tex(,25) * prepMat:: list of submatrices corresp. to given filtration
../singular_texi/./d2t_singular/stratify_lib.tex(,26) * stratify:: algorithmic stratification (main procedure)
../singular_texi/./d2t_singular/stratify_lib.tex(,27) @end menu
../singular_texi/./d2t_singular/stratify_lib.tex(,28) @c ---end content LibInfo---
../singular_texi/./d2t_singular/stratify_lib.tex(,29) 
../singular_texi/./d2t_singular/stratify_lib.tex(,30) @c ------------------- prepMat -------------
../singular_texi/./d2t_singular/stratify_lib.tex(,31) @node prepMat, stratify,, stratify_lib
../singular_texi/./d2t_singular/stratify_lib.tex(,32) @subsubsection prepMat
../singular_texi/./d2t_singular/stratify_lib.tex(,33) @cindex prepMat
../singular_texi/./d2t_singular/stratify_lib.tex(,34) @c ---content prepMat---
../singular_texi/./d2t_singular/stratify_lib.tex(,35) Procedure from library @code{stratify.lib} (@pxref{stratify_lib}).
../singular_texi/./d2t_singular/stratify_lib.tex(,36) 
../singular_texi/./d2t_singular/stratify_lib.tex(,37) @table @asis
../singular_texi/./d2t_singular/stratify_lib.tex(,38) @item @strong{Usage:}
../singular_texi/./d2t_singular/stratify_lib.tex(,39) prepMat(M,wr,ws,step);
../singular_texi/./d2t_singular/stratify_lib.tex(,40) @*where M is a matrix, wr is an intvec of size ncols(M),
../singular_texi/./d2t_singular/stratify_lib.tex(,41) ws an intvec of size nrows(M) and step is an integer
../singular_texi/./d2t_singular/stratify_lib.tex(,42) 
../singular_texi/./d2t_singular/stratify_lib.tex(,43) @item @strong{Return:}
../singular_texi/./d2t_singular/stratify_lib.tex(,44) 2 lists of submatrices corresponding to the filtrations
../singular_texi/./d2t_singular/stratify_lib.tex(,45) specified by wr and ws
../singular_texi/./d2t_singular/stratify_lib.tex(,46) @*the first list corresponds to the list for the filtration
../singular_texi/./d2t_singular/stratify_lib.tex(,47) of AdA, i.e. the ranks of these matrices will be the r_i,
../singular_texi/./d2t_singular/stratify_lib.tex(,48) the second one to the list for the filtration of L, i.e.
../singular_texi/./d2t_singular/stratify_lib.tex(,49) the ranks of these matrices will be the s_i
../singular_texi/./d2t_singular/stratify_lib.tex(,50) 
../singular_texi/./d2t_singular/stratify_lib.tex(,51) @item @strong{Note:}
../singular_texi/./d2t_singular/stratify_lib.tex(,52) * the entries of the matrix M are M_ij=delta_i(x_j),
../singular_texi/./d2t_singular/stratify_lib.tex(,53) @** wr is used to determine what subset of the set of all dx_i is
../singular_texi/./d2t_singular/stratify_lib.tex(,54) generating AdF^l(A):
../singular_texi/./d2t_singular/stratify_lib.tex(,55) @*if (k-1)*step <= wr[i] < k*step, then dx_i is in the set of
../singular_texi/./d2t_singular/stratify_lib.tex(,56) generators of AdF^l(A) for all l>=k and the i-th column
../singular_texi/./d2t_singular/stratify_lib.tex(,57) of M appears in each submatrix starting from the k-th
../singular_texi/./d2t_singular/stratify_lib.tex(,58) @** ws is used to determine what subset of the set of all delta_i
../singular_texi/./d2t_singular/stratify_lib.tex(,59) is generating Z_l(L):
../singular_texi/./d2t_singular/stratify_lib.tex(,60) @*if (k-1)*step <= ws[i] < k*step, then delta_i is in the set
../singular_texi/./d2t_singular/stratify_lib.tex(,61) of generators of Z_l(A) for l < k and the i-th row of M
../singular_texi/./d2t_singular/stratify_lib.tex(,62) appears in each submatrix up to the (k-1)th
../singular_texi/./d2t_singular/stratify_lib.tex(,63) @** the entries of wr and ws as well as step should be positive
../singular_texi/./d2t_singular/stratify_lib.tex(,64) integers
../singular_texi/./d2t_singular/stratify_lib.tex(,65) 
../singular_texi/./d2t_singular/stratify_lib.tex(,66) @end table
../singular_texi/./d2t_singular/stratify_lib.tex(,67) @strong{Example:}
../singular_texi/./d2t_singular/stratify_lib.tex(,68) @smallexample
../singular_texi/./d2t_singular/stratify_lib.tex(,69) @c computed example prepMat d2t_singular/stratify_lib.doc:67 
../singular_texi/./d2t_singular/stratify_lib.tex(,70) LIB "stratify.lib";
../singular_texi/./d2t_singular/stratify_lib.tex(,71) ring r=0,(t(1..3)),dp;
../singular_texi/./d2t_singular/stratify_lib.tex(,72) matrix M[2][3]=0,t(1),3*t(2),0,0,t(1);
../singular_texi/./d2t_singular/stratify_lib.tex(,73) print(M);
../singular_texi/./d2t_singular/stratify_lib.tex(,74) @expansion{} 0,t(1),3*t(2),
../singular_texi/./d2t_singular/stratify_lib.tex(,75) @expansion{} 0,0,   t(1)   
../singular_texi/./d2t_singular/stratify_lib.tex(,76) intvec wr=1,3,5;
../singular_texi/./d2t_singular/stratify_lib.tex(,77) intvec ws=2,4;
../singular_texi/./d2t_singular/stratify_lib.tex(,78) int step=2;
../singular_texi/./d2t_singular/stratify_lib.tex(,79) prepMat(M,wr,ws,step);
../singular_texi/./d2t_singular/stratify_lib.tex(,80) @expansion{} [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,81) @expansion{}    [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,82) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,83) @expansion{}       _[2,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,84) @expansion{}    [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,85) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,86) @expansion{}       _[1,2]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,87) @expansion{}       _[2,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,88) @expansion{}       _[2,2]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,89) @expansion{}    [3]:
../singular_texi/./d2t_singular/stratify_lib.tex(,90) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,91) @expansion{}       _[1,2]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,92) @expansion{}       _[1,3]=3*t(2)
../singular_texi/./d2t_singular/stratify_lib.tex(,93) @expansion{}       _[2,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,94) @expansion{}       _[2,2]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,95) @expansion{}       _[2,3]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,96) @expansion{} [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,97) @expansion{}    [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,98) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,99) @expansion{}       _[1,2]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,100) @expansion{}       _[1,3]=3*t(2)
../singular_texi/./d2t_singular/stratify_lib.tex(,101) @expansion{}       _[2,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,102) @expansion{}       _[2,2]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,103) @expansion{}       _[2,3]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,104) @expansion{}    [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,105) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,106) @expansion{}       _[1,2]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,107) @expansion{}       _[1,3]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,108) @c end example prepMat d2t_singular/stratify_lib.doc:67
../singular_texi/./d2t_singular/stratify_lib.tex(,109) @end smallexample
../singular_texi/./d2t_singular/stratify_lib.tex(,110) @c ---end content prepMat---
../singular_texi/./d2t_singular/stratify_lib.tex(,111) 
../singular_texi/./d2t_singular/stratify_lib.tex(,112) @c ------------------- stratify -------------
../singular_texi/./d2t_singular/stratify_lib.tex(,113) @node stratify,, prepMat, stratify_lib
../singular_texi/./d2t_singular/stratify_lib.tex(,114) @subsubsection stratify
../singular_texi/./d2t_singular/stratify_lib.tex(,115) @cindex stratify
../singular_texi/./d2t_singular/stratify_lib.tex(,116) @c ---content stratify---
../singular_texi/./d2t_singular/stratify_lib.tex(,117) Procedure from library @code{stratify.lib} (@pxref{stratify_lib}).
../singular_texi/./d2t_singular/stratify_lib.tex(,118) 
../singular_texi/./d2t_singular/stratify_lib.tex(,119) @table @asis
../singular_texi/./d2t_singular/stratify_lib.tex(,120) @item @strong{Usage:}
../singular_texi/./d2t_singular/stratify_lib.tex(,121) stratify(M,wr,ws,step);
../singular_texi/./d2t_singular/stratify_lib.tex(,122) @*where M is a matrix, wr is an intvec of size ncols(M),
../singular_texi/./d2t_singular/stratify_lib.tex(,123) ws an intvec of size nrows(M) and step is an integer
../singular_texi/./d2t_singular/stratify_lib.tex(,124) 
../singular_texi/./d2t_singular/stratify_lib.tex(,125) @item @strong{Return:}
../singular_texi/./d2t_singular/stratify_lib.tex(,126) list of lists, each entry of the big list corresponds to one
../singular_texi/./d2t_singular/stratify_lib.tex(,127) locally closed set and has the following entries:
../singular_texi/./d2t_singular/stratify_lib.tex(,128) @*1) intvec giving the corresponding rs-vector
../singular_texi/./d2t_singular/stratify_lib.tex(,129) @*2) ideal determining the closed set
../singular_texi/./d2t_singular/stratify_lib.tex(,130) @*3) list d of polynomials determining the open set D(d[1])
../singular_texi/./d2t_singular/stratify_lib.tex(,131) empty list if there is more than one open set
../singular_texi/./d2t_singular/stratify_lib.tex(,132) @*4-n) lists of polynomials determining open sets which all lead
../singular_texi/./d2t_singular/stratify_lib.tex(,133) to the same rs-vector
../singular_texi/./d2t_singular/stratify_lib.tex(,134) 
../singular_texi/./d2t_singular/stratify_lib.tex(,135) @item @strong{Note:}
../singular_texi/./d2t_singular/stratify_lib.tex(,136) * ring ordering should be global, i.e. the ring should be a
../singular_texi/./d2t_singular/stratify_lib.tex(,137) polynomial ring
../singular_texi/./d2t_singular/stratify_lib.tex(,138) @** the entries of the matrix M are M_ij=delta_i(x_j),
../singular_texi/./d2t_singular/stratify_lib.tex(,139) @** wr is used to determine what subset of the set of all dx_i is
../singular_texi/./d2t_singular/stratify_lib.tex(,140) generating AdF^l(A):
../singular_texi/./d2t_singular/stratify_lib.tex(,141) @*if (k-1)*step < wr[i] <= k*step, then dx_i is in the set of
../singular_texi/./d2t_singular/stratify_lib.tex(,142) generators of AdF^l(A) for all l>=k
../singular_texi/./d2t_singular/stratify_lib.tex(,143) @** ws is used to determine what subset of the set of all delta_i
../singular_texi/./d2t_singular/stratify_lib.tex(,144) is generating Z_l(L):
../singular_texi/./d2t_singular/stratify_lib.tex(,145) @*if (k-1)*step <= ws[i] < k*step, then delta_i is in the set
../singular_texi/./d2t_singular/stratify_lib.tex(,146) of generators of Z_l(A) for l < k
../singular_texi/./d2t_singular/stratify_lib.tex(,147) @** the entries of wr and ws as well as step should be positive
../singular_texi/./d2t_singular/stratify_lib.tex(,148) integers
../singular_texi/./d2t_singular/stratify_lib.tex(,149) @** the filtrations have to be known, no sanity checks concerning
../singular_texi/./d2t_singular/stratify_lib.tex(,150) the filtrations are performed !!!
../singular_texi/./d2t_singular/stratify_lib.tex(,151) 
../singular_texi/./d2t_singular/stratify_lib.tex(,152) @end table
../singular_texi/./d2t_singular/stratify_lib.tex(,153) @strong{Example:}
../singular_texi/./d2t_singular/stratify_lib.tex(,154) @smallexample
../singular_texi/./d2t_singular/stratify_lib.tex(,155) @c computed example stratify d2t_singular/stratify_lib.doc:123 
../singular_texi/./d2t_singular/stratify_lib.tex(,156) LIB "stratify.lib";
../singular_texi/./d2t_singular/stratify_lib.tex(,157) ring r=0,(t(1..3)),dp;
../singular_texi/./d2t_singular/stratify_lib.tex(,158) matrix M[2][3]=0,t(1),3*t(2),0,0,t(1);
../singular_texi/./d2t_singular/stratify_lib.tex(,159) intvec wr=1,3,5;
../singular_texi/./d2t_singular/stratify_lib.tex(,160) intvec ws=2,4;
../singular_texi/./d2t_singular/stratify_lib.tex(,161) int step=2;
../singular_texi/./d2t_singular/stratify_lib.tex(,162) stratify(M,wr,ws,step);
../singular_texi/./d2t_singular/stratify_lib.tex(,163) @expansion{} [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,164) @expansion{}    [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,165) @expansion{}       0,0,0,0
../singular_texi/./d2t_singular/stratify_lib.tex(,166) @expansion{}    [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,167) @expansion{}       _[1]=t(2)
../singular_texi/./d2t_singular/stratify_lib.tex(,168) @expansion{}       _[2]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,169) @expansion{}    [3]:
../singular_texi/./d2t_singular/stratify_lib.tex(,170) @expansion{}       [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,171) @expansion{}          1
../singular_texi/./d2t_singular/stratify_lib.tex(,172) @expansion{} [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,173) @expansion{}    [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,174) @expansion{}       0,1,0,1
../singular_texi/./d2t_singular/stratify_lib.tex(,175) @expansion{}    [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,176) @expansion{}       _[1]=t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,177) @expansion{}    [3]:
../singular_texi/./d2t_singular/stratify_lib.tex(,178) @expansion{}       [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,179) @expansion{}          t(2)
../singular_texi/./d2t_singular/stratify_lib.tex(,180) @expansion{}       [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,181) @expansion{}          t(2)
../singular_texi/./d2t_singular/stratify_lib.tex(,182) @expansion{} [3]:
../singular_texi/./d2t_singular/stratify_lib.tex(,183) @expansion{}    [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,184) @expansion{}       1,2,1,2
../singular_texi/./d2t_singular/stratify_lib.tex(,185) @expansion{}    [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,186) @expansion{}       _[1]=0
../singular_texi/./d2t_singular/stratify_lib.tex(,187) @expansion{}    [3]:
../singular_texi/./d2t_singular/stratify_lib.tex(,188) @expansion{}       [1]:
../singular_texi/./d2t_singular/stratify_lib.tex(,189) @expansion{}          t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,190) @expansion{}       [2]:
../singular_texi/./d2t_singular/stratify_lib.tex(,191) @expansion{}          t(1)
../singular_texi/./d2t_singular/stratify_lib.tex(,192) @c end example stratify d2t_singular/stratify_lib.doc:123
../singular_texi/./d2t_singular/stratify_lib.tex(,193) @end smallexample
../singular_texi/./d2t_singular/stratify_lib.tex(,194) @c ---end content stratify---
../singular_texi/singular.tex(,532) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,533) @node Symbolic-numerical solving, Visualization, Invariant theory, SINGULAR libraries
../singular_texi/singular.tex(,534) @section Symbolic-numerical solving
../singular_texi/singular.tex(,535) @cindex Symbolic-numerical solving
../singular_texi/singular.tex(,536) 
../singular_texi/singular.tex(,537) @menu
../singular_texi/singular.tex(,538) * presolve_lib:: procedures for pre-solving polynomial equations
../singular_texi/singular.tex(,539) * solve_lib:: procedures to solve polynomial systems
../singular_texi/singular.tex(,540) * triang_lib:: procedures for decomposing zero-dimensional ideals
../singular_texi/singular.tex(,541) * ntsolve_lib:: one real solution of polynomial systems (Newton iteration)
../singular_texi/singular.tex(,542) * zeroset_lib:: procedures for roots and factorization
../singular_texi/singular.tex(,543) @end menu
../singular_texi/singular.tex(,544) 
../singular_texi/singular.tex(,545) @c ---------------------------------------------------------
../singular_texi/singular.tex(,546) @node presolve_lib, solve_lib, Symbolic-numerical solving, Symbolic-numerical solving
../singular_texi/singular.tex(,547) @subsection presolve_lib
../singular_texi/singular.tex(,548) @c include of docu for presolve.lib
../singular_texi/./d2t_singular/presolve_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/presolve_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/presolve_lib.doc
../singular_texi/./d2t_singular/presolve_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/presolve_lib.doc INSTEAD
../singular_texi/./d2t_singular/presolve_lib.tex(,4) @c library version: (1.17.2.7,2003/06/12)
../singular_texi/./d2t_singular/presolve_lib.tex(,5) @c library file: ../Singular/LIB/presolve.lib
../singular_texi/./d2t_singular/presolve_lib.tex(,6) @cindex presolve.lib
../singular_texi/./d2t_singular/presolve_lib.tex(,7) @cindex presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/presolve_lib.tex(,10) presolve.lib
../singular_texi/./d2t_singular/presolve_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/presolve_lib.tex(,12)      Pre-Solving of Polynomial Equations
../singular_texi/./d2t_singular/presolve_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/presolve_lib.tex(,14) Gert-Martin Greuel, email: greuel@@mathematik.uni-kl.de,
../singular_texi/./d2t_singular/presolve_lib.tex(,15) 
../singular_texi/./d2t_singular/presolve_lib.tex(,16) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,17) 
../singular_texi/./d2t_singular/presolve_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/presolve_lib.tex(,19) @menu
../singular_texi/./d2t_singular/presolve_lib.tex(,20) * degreepart:: elements of id of total degree >= d1 and <= d2
../singular_texi/./d2t_singular/presolve_lib.tex(,21) * elimlinearpart:: linear part eliminated from id
../singular_texi/./d2t_singular/presolve_lib.tex(,22) * elimpart:: partial elimination of vars [among first n vars]
../singular_texi/./d2t_singular/presolve_lib.tex(,23) * elimpartanyr:: factors of p partially eliminated from i in any ring
../singular_texi/./d2t_singular/presolve_lib.tex(,24) * fastelim:: fast elimination of factors of p from i [options]
../singular_texi/./d2t_singular/presolve_lib.tex(,25) * findvars:: ideal of variables occurring in id [more information]
../singular_texi/./d2t_singular/presolve_lib.tex(,26) * hilbvec:: intvec of Hilbert-series of id [in char c and ord o]
../singular_texi/./d2t_singular/presolve_lib.tex(,27) * linearpart:: elements of id of total degree <=1
../singular_texi/./d2t_singular/presolve_lib.tex(,28) * tolessvars:: maps id to new basering having only vars occurring in id
../singular_texi/./d2t_singular/presolve_lib.tex(,29) * solvelinearpart:: reduced std-basis of linear part of id
../singular_texi/./d2t_singular/presolve_lib.tex(,30) * sortandmap:: map to new basering with vars sorted w.r.t. complexity
../singular_texi/./d2t_singular/presolve_lib.tex(,31) * sortvars:: sort vars w.r.t. complexity in id [different blocks]
../singular_texi/./d2t_singular/presolve_lib.tex(,32) * shortid:: generators of id having <= n terms
../singular_texi/./d2t_singular/presolve_lib.tex(,33) * valvars:: valuation of vars w.r.t. to their complexity in id
../singular_texi/./d2t_singular/presolve_lib.tex(,34) * idealSimplify:: eliminates variables which are linear in id
../singular_texi/./d2t_singular/presolve_lib.tex(,35) * idealSplit:: intersection of the ideals has the same radical as id
../singular_texi/./d2t_singular/presolve_lib.tex(,36) @end menu
../singular_texi/./d2t_singular/presolve_lib.tex(,37) @c ---end content LibInfo---
../singular_texi/./d2t_singular/presolve_lib.tex(,38) 
../singular_texi/./d2t_singular/presolve_lib.tex(,39) @c ------------------- degreepart -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,40) @node degreepart, elimlinearpart,, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,41) @subsubsection degreepart
../singular_texi/./d2t_singular/presolve_lib.tex(,42) @cindex degreepart
../singular_texi/./d2t_singular/presolve_lib.tex(,43) @c ---content degreepart---
../singular_texi/./d2t_singular/presolve_lib.tex(,44) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,45) 
../singular_texi/./d2t_singular/presolve_lib.tex(,46) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,47) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,48) degreepart(id,d1,d2[,v]); id=ideal/module, d1,d1=integers, v=intvec
../singular_texi/./d2t_singular/presolve_lib.tex(,49) 
../singular_texi/./d2t_singular/presolve_lib.tex(,50) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,51) generators of id of [v-weighted] total degree >= d1 and <= d2
../singular_texi/./d2t_singular/presolve_lib.tex(,52) (default: v = 1,...,1)
../singular_texi/./d2t_singular/presolve_lib.tex(,53) 
../singular_texi/./d2t_singular/presolve_lib.tex(,54) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,55) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,56) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,57) @c reused example degreepart d2t_singular/presolve_lib.doc:55 
../singular_texi/./d2t_singular/presolve_lib.tex(,58) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,59) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,60) ideal i=1+x+x2+x3+x4,3,xz+y3+z8;
../singular_texi/./d2t_singular/presolve_lib.tex(,61) degreepart(i,0,4);
../singular_texi/./d2t_singular/presolve_lib.tex(,62) @expansion{} _[1]=x4+x3+x2+x+1
../singular_texi/./d2t_singular/presolve_lib.tex(,63) @expansion{} _[2]=3
../singular_texi/./d2t_singular/presolve_lib.tex(,64) module m=[x,y,z],x*[x3,y2,z],[1,x2,z3,0,1];
../singular_texi/./d2t_singular/presolve_lib.tex(,65) intvec v=2,3,6;
../singular_texi/./d2t_singular/presolve_lib.tex(,66) show(degreepart(m,8,8,v));
../singular_texi/./d2t_singular/presolve_lib.tex(,67) @expansion{} // module, 1 generator(s)
../singular_texi/./d2t_singular/presolve_lib.tex(,68) @expansion{} [x4,xy2,xz]
../singular_texi/./d2t_singular/presolve_lib.tex(,69) @c end example degreepart d2t_singular/presolve_lib.doc:55
../singular_texi/./d2t_singular/presolve_lib.tex(,70) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,71) @c ---end content degreepart---
../singular_texi/./d2t_singular/presolve_lib.tex(,72) 
../singular_texi/./d2t_singular/presolve_lib.tex(,73) @c ------------------- elimlinearpart -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,74) @node elimlinearpart, elimpart, degreepart, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,75) @subsubsection elimlinearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,76) @cindex elimlinearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,77) @c ---content elimlinearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,78) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,79) 
../singular_texi/./d2t_singular/presolve_lib.tex(,80) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,81) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,82) elimlinearpart(i[,n]); i=ideal, n=integer,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,83) default: n=nvars(basering)
../singular_texi/./d2t_singular/presolve_lib.tex(,84) 
../singular_texi/./d2t_singular/presolve_lib.tex(,85) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,86) list L with 5 entries:
../singular_texi/./d2t_singular/presolve_lib.tex(,87)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,88)   L[1]: (interreduced) ideal obtained from i by substituing
../singular_texi/./d2t_singular/presolve_lib.tex(,89)         from the first n variables those, which appear in a linear part
../singular_texi/./d2t_singular/presolve_lib.tex(,90)         of i, by putting this part into triangular form
../singular_texi/./d2t_singular/presolve_lib.tex(,91)   L[2]: ideal of variables which have been substituted
../singular_texi/./d2t_singular/presolve_lib.tex(,92)   L[3]: ideal, j-th element defines substitution of j-th var in [2]
../singular_texi/./d2t_singular/presolve_lib.tex(,93)   L[4]: ideal of variables of basering, eliminated ones are set to 0
../singular_texi/./d2t_singular/presolve_lib.tex(,94)   L[5]: ideal, describing the map from the basering to itself such that
../singular_texi/./d2t_singular/presolve_lib.tex(,95)         L[1] is the image of i
../singular_texi/./d2t_singular/presolve_lib.tex(,96)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,97) 
../singular_texi/./d2t_singular/presolve_lib.tex(,98) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,99) the procedure does always interreduce the ideal i internally w.r.t.
../singular_texi/./d2t_singular/presolve_lib.tex(,100) ordering dp.
../singular_texi/./d2t_singular/presolve_lib.tex(,101) 
../singular_texi/./d2t_singular/presolve_lib.tex(,102) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,103) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,104) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,105) @c reused example elimlinearpart d2t_singular/presolve_lib.doc:99 
../singular_texi/./d2t_singular/presolve_lib.tex(,106) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,107) ring s=0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,108) ideal i = x3+y2+z,x2y2+z3,y+z+1;
../singular_texi/./d2t_singular/presolve_lib.tex(,109) elimlinearpart(i);
../singular_texi/./d2t_singular/presolve_lib.tex(,110) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,111) @expansion{}    _[1]=x3+z2+3z+1
../singular_texi/./d2t_singular/presolve_lib.tex(,112) @expansion{}    _[2]=x2z2+2x2z+z3+x2
../singular_texi/./d2t_singular/presolve_lib.tex(,113) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,114) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,115) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,116) @expansion{}    _[1]=y+z+1
../singular_texi/./d2t_singular/presolve_lib.tex(,117) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,118) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,119) @expansion{}    _[2]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,120) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,121) @expansion{} [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,122) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,123) @expansion{}    _[2]=-z-1
../singular_texi/./d2t_singular/presolve_lib.tex(,124) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,125) @c end example elimlinearpart d2t_singular/presolve_lib.doc:99
../singular_texi/./d2t_singular/presolve_lib.tex(,126) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,127) @c ---end content elimlinearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,128) 
../singular_texi/./d2t_singular/presolve_lib.tex(,129) @c ------------------- elimpart -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,130) @node elimpart, elimpartanyr, elimlinearpart, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,131) @subsubsection elimpart
../singular_texi/./d2t_singular/presolve_lib.tex(,132) @cindex elimpart
../singular_texi/./d2t_singular/presolve_lib.tex(,133) @c ---content elimpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,134) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,135) 
../singular_texi/./d2t_singular/presolve_lib.tex(,136) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,137) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,138) elimpart(i [,n,e] ); i=ideal, n,e=integers
../singular_texi/./d2t_singular/presolve_lib.tex(,139) @*n : only the first n vars are considered for substitution,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,140) e =0: substitute from linear part of i (same as elimlinearpart)@*
../singular_texi/./d2t_singular/presolve_lib.tex(,141) e!=0: eliminate also by direct substitution@*
../singular_texi/./d2t_singular/presolve_lib.tex(,142) (default: n = nvars(basering), e = 1)
../singular_texi/./d2t_singular/presolve_lib.tex(,143) 
../singular_texi/./d2t_singular/presolve_lib.tex(,144) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,145) list of 5 objects:
../singular_texi/./d2t_singular/presolve_lib.tex(,146)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,147)   [1]: ideal obtained by substituting from the first n variables those
../singular_texi/./d2t_singular/presolve_lib.tex(,148)        from i, which appear in the linear part of i (or, if e!=0, which
../singular_texi/./d2t_singular/presolve_lib.tex(,149)        can be expressed directly in the remaining vars)
../singular_texi/./d2t_singular/presolve_lib.tex(,150)   [2]: ideal, variables which have been substituted
../singular_texi/./d2t_singular/presolve_lib.tex(,151)   [3]: ideal, i-th element defines substitution of i-th var in [2]
../singular_texi/./d2t_singular/presolve_lib.tex(,152)   [4]: ideal of variables of basering, substituted ones are set to 0
../singular_texi/./d2t_singular/presolve_lib.tex(,153)   [5]: ideal, describing the map from the basering, say k[x(1..m)], to
../singular_texi/./d2t_singular/presolve_lib.tex(,154)        itself onto k[..variables fom [4]..] and [1] is the image of i
../singular_texi/./d2t_singular/presolve_lib.tex(,155)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,156) The ideal i is generated by [1] and [3] in k[x(1..m)], the map [5]
../singular_texi/./d2t_singular/presolve_lib.tex(,157) maps [3] to 0, hence induces an isomorphism
../singular_texi/./d2t_singular/presolve_lib.tex(,158)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,159)             k[x(1..m)]/i -> k[..variables fom [4]..]/[1]
../singular_texi/./d2t_singular/presolve_lib.tex(,160)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,161) 
../singular_texi/./d2t_singular/presolve_lib.tex(,162) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,163) If the basering has ordering (c,dp), this is faster for big ideals,
../singular_texi/./d2t_singular/presolve_lib.tex(,164) since it avoids internal ring change and mapping.
../singular_texi/./d2t_singular/presolve_lib.tex(,165) 
../singular_texi/./d2t_singular/presolve_lib.tex(,166) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,167) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,168) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,169) @c reused example elimpart d2t_singular/presolve_lib.doc:148 
../singular_texi/./d2t_singular/presolve_lib.tex(,170) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,171) ring s=0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,172) ideal i =x2+y2,x2+y+1;
../singular_texi/./d2t_singular/presolve_lib.tex(,173) elimpart(i,3,0);
../singular_texi/./d2t_singular/presolve_lib.tex(,174) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,175) @expansion{}    _[1]=y2-y-1
../singular_texi/./d2t_singular/presolve_lib.tex(,176) @expansion{}    _[2]=x2+y+1
../singular_texi/./d2t_singular/presolve_lib.tex(,177) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,178) @expansion{}    _[1]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,179) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,180) @expansion{}    _[1]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,181) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,182) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,183) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,184) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,185) @expansion{} [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,186) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,187) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,188) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,189) elimpart(i,3,1);
../singular_texi/./d2t_singular/presolve_lib.tex(,190) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,191) @expansion{}    _[1]=x4+3x2+1
../singular_texi/./d2t_singular/presolve_lib.tex(,192) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,193) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,194) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,195) @expansion{}    _[1]=x2+y+1
../singular_texi/./d2t_singular/presolve_lib.tex(,196) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,197) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,198) @expansion{}    _[2]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,199) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,200) @expansion{} [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,201) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,202) @expansion{}    _[2]=-x2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,203) @expansion{}    _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,204) @c end example elimpart d2t_singular/presolve_lib.doc:148
../singular_texi/./d2t_singular/presolve_lib.tex(,205) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,206) @c ---end content elimpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,207) 
../singular_texi/./d2t_singular/presolve_lib.tex(,208) @c ------------------- elimpartanyr -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,209) @node elimpartanyr, fastelim, elimpart, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,210) @subsubsection elimpartanyr
../singular_texi/./d2t_singular/presolve_lib.tex(,211) @cindex elimpartanyr
../singular_texi/./d2t_singular/presolve_lib.tex(,212) @c ---content elimpartanyr---
../singular_texi/./d2t_singular/presolve_lib.tex(,213) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,214) 
../singular_texi/./d2t_singular/presolve_lib.tex(,215) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,216) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,217) elimpartanyr(i [,p,e] ); i=ideal, p=polynomial, e=integer@*
../singular_texi/./d2t_singular/presolve_lib.tex(,218) p: product of vars to be eliminated,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,219) e =0: substitute from linear part of i (same as elimlinearpart)@*
../singular_texi/./d2t_singular/presolve_lib.tex(,220) e!=0: eliminate also by direct substitution@*
../singular_texi/./d2t_singular/presolve_lib.tex(,221) (default: p=product of all vars, e=1)
../singular_texi/./d2t_singular/presolve_lib.tex(,222) 
../singular_texi/./d2t_singular/presolve_lib.tex(,223) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,224) list of 6 objects:
../singular_texi/./d2t_singular/presolve_lib.tex(,225)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,226)   [1]: (interreduced) ideal obtained by substituting from i those vars
../singular_texi/./d2t_singular/presolve_lib.tex(,227)        appearing in p, which occur in the linear part of i (or which can
../singular_texi/./d2t_singular/presolve_lib.tex(,228)        be expressed directly in the remaining variables, if e!=0)
../singular_texi/./d2t_singular/presolve_lib.tex(,229)   [2]: ideal, variables which have been substituted
../singular_texi/./d2t_singular/presolve_lib.tex(,230)   [3]: ideal, i-th element defines substitution of i-th var in [2]
../singular_texi/./d2t_singular/presolve_lib.tex(,231)   [4]: ideal of variables of basering, substituted ones are set to 0
../singular_texi/./d2t_singular/presolve_lib.tex(,232)   [5]: ideal, describing the map from the basering, say k[x(1..m)], to
../singular_texi/./d2t_singular/presolve_lib.tex(,233)        itself onto k[..variables fom [4]..] and [1] is the image of i
../singular_texi/./d2t_singular/presolve_lib.tex(,234)   [6]: int, # of vars considered for substitution (= # of factors of p)
../singular_texi/./d2t_singular/presolve_lib.tex(,235)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,236) The ideal i is generated by [1] and [3] in k[x(1..m)], the map [5]
../singular_texi/./d2t_singular/presolve_lib.tex(,237) maps [3] to 0, hence induces an isomorphism
../singular_texi/./d2t_singular/presolve_lib.tex(,238)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,239)             k[x(1..m)]/i -> k[..variables fom [4]..]/[1]
../singular_texi/./d2t_singular/presolve_lib.tex(,240)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,241) 
../singular_texi/./d2t_singular/presolve_lib.tex(,242) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,243) the proc uses @code{execute} to create a ring with ordering dp and vars
../singular_texi/./d2t_singular/presolve_lib.tex(,244) placed correctly and then applies @code{elimpart}.
../singular_texi/./d2t_singular/presolve_lib.tex(,245) 
../singular_texi/./d2t_singular/presolve_lib.tex(,246) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,247) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,248) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,249) @c reused example elimpartanyr d2t_singular/presolve_lib.doc:199 
../singular_texi/./d2t_singular/presolve_lib.tex(,250) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,251) ring s=0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,252) ideal i = x3+y2+z,x2y2+z3,y+z+1;
../singular_texi/./d2t_singular/presolve_lib.tex(,253) elimpartanyr(i,z);
../singular_texi/./d2t_singular/presolve_lib.tex(,254) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,255) @expansion{}    _[1]=x3+y2-y-1
../singular_texi/./d2t_singular/presolve_lib.tex(,256) @expansion{}    _[2]=x2y2-y3-3y2-3y-1
../singular_texi/./d2t_singular/presolve_lib.tex(,257) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,258) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,259) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,260) @expansion{}    _[1]=y+z+1
../singular_texi/./d2t_singular/presolve_lib.tex(,261) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,262) @expansion{}    _[1]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,263) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,264) @expansion{}    _[3]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,265) @expansion{} [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,266) @expansion{}    _[1]=-y-1
../singular_texi/./d2t_singular/presolve_lib.tex(,267) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,268) @expansion{}    _[3]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,269) @expansion{} [6]:
../singular_texi/./d2t_singular/presolve_lib.tex(,270) @expansion{}    1
../singular_texi/./d2t_singular/presolve_lib.tex(,271) @c end example elimpartanyr d2t_singular/presolve_lib.doc:199
../singular_texi/./d2t_singular/presolve_lib.tex(,272) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,273) @c ---end content elimpartanyr---
../singular_texi/./d2t_singular/presolve_lib.tex(,274) 
../singular_texi/./d2t_singular/presolve_lib.tex(,275) @c ------------------- fastelim -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,276) @node fastelim, findvars, elimpartanyr, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,277) @subsubsection fastelim
../singular_texi/./d2t_singular/presolve_lib.tex(,278) @cindex fastelim
../singular_texi/./d2t_singular/presolve_lib.tex(,279) @c ---content fastelim---
../singular_texi/./d2t_singular/presolve_lib.tex(,280) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,281) 
../singular_texi/./d2t_singular/presolve_lib.tex(,282) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,283) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,284) fastelim(i,p[h,o,a,b,e,m]); i=ideal, p=polynomial; h,o,a,b,e=integers
../singular_texi/./d2t_singular/presolve_lib.tex(,285) p: product of variables to be eliminated;@*
../singular_texi/./d2t_singular/presolve_lib.tex(,286) Optional parameters:
../singular_texi/./d2t_singular/presolve_lib.tex(,287)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,288)   - h !=0: use Hilbert-series driven std-basis computation
../singular_texi/./d2t_singular/presolve_lib.tex(,289)   - o !=0: use proc @code{valvars} for a - hopefully - optimal ordering of vars
../singular_texi/./d2t_singular/presolve_lib.tex(,290)   - a !=0: order vars to be eliminated w.r.t. increasing complexity
../singular_texi/./d2t_singular/presolve_lib.tex(,291)   - b !=0: order vars not to be eliminated w.r.t. increasing complexity
../singular_texi/./d2t_singular/presolve_lib.tex(,292)   - e !=0: use @code{elimpart} first to eliminate easy part
../singular_texi/./d2t_singular/presolve_lib.tex(,293)   - m !=0: compute a minimal system of generators
../singular_texi/./d2t_singular/presolve_lib.tex(,294)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,295) (default: h,o,a,b,e,m = 0,1,0,0,0,0)
../singular_texi/./d2t_singular/presolve_lib.tex(,296) 
../singular_texi/./d2t_singular/presolve_lib.tex(,297) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,298) ideal obtained from i by eliminating those variables, which occur in p
../singular_texi/./d2t_singular/presolve_lib.tex(,299) 
../singular_texi/./d2t_singular/presolve_lib.tex(,300) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,301) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,302) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,303) @c reused example fastelim d2t_singular/presolve_lib.doc:236 
../singular_texi/./d2t_singular/presolve_lib.tex(,304) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,305) ring s=31991,(e,f,x,y,z,t,u,v,w,a,b,c,d),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,306) ideal i = w2+f2-1, x2+t2+a2-1,  y2+u2+b2-1, z2+v2+c2-1,
../singular_texi/./d2t_singular/presolve_lib.tex(,307) d2+e2-1, f4+2u, wa+tf, xy+tu+ab;
../singular_texi/./d2t_singular/presolve_lib.tex(,308) fastelim(i,xytua,1,1);       //with hilb,valvars
../singular_texi/./d2t_singular/presolve_lib.tex(,309) @expansion{} _[1]=f2+w2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,310) @expansion{} _[2]=z2+v2+c2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,311) @expansion{} _[3]=e2+d2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,312) fastelim(i,xytua,1,0,1);     //with hilb,minbase
../singular_texi/./d2t_singular/presolve_lib.tex(,313) @expansion{} _[1]=z2+v2+c2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,314) @expansion{} _[2]=f2+w2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,315) @expansion{} _[3]=e2+d2-1
../singular_texi/./d2t_singular/presolve_lib.tex(,316) @c end example fastelim d2t_singular/presolve_lib.doc:236
../singular_texi/./d2t_singular/presolve_lib.tex(,317) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,318) @c ---end content fastelim---
../singular_texi/./d2t_singular/presolve_lib.tex(,319) 
../singular_texi/./d2t_singular/presolve_lib.tex(,320) @c ------------------- findvars -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,321) @node findvars, hilbvec, fastelim, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,322) @subsubsection findvars
../singular_texi/./d2t_singular/presolve_lib.tex(,323) @cindex findvars
../singular_texi/./d2t_singular/presolve_lib.tex(,324) @c ---content findvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,325) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,326) 
../singular_texi/./d2t_singular/presolve_lib.tex(,327) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,328) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,329) findvars(id [,any] ); id=poly/ideal/vector/module/matrix, any=any type
../singular_texi/./d2t_singular/presolve_lib.tex(,330) 
../singular_texi/./d2t_singular/presolve_lib.tex(,331) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,332) if no second argument is present: ideal of variables occurring in id,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,333) if a second argument is given (of any type): list L with 4 entries:
../singular_texi/./d2t_singular/presolve_lib.tex(,334)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,335)   L[1]: ideal of variables occurring in id
../singular_texi/./d2t_singular/presolve_lib.tex(,336)   L[2]: intvec of variables occurring in id
../singular_texi/./d2t_singular/presolve_lib.tex(,337)   L[3]: ideal of variables not occurring in id
../singular_texi/./d2t_singular/presolve_lib.tex(,338)   L[4]: intvec of variables not occurring in id
../singular_texi/./d2t_singular/presolve_lib.tex(,339)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,340) 
../singular_texi/./d2t_singular/presolve_lib.tex(,341) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,342) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,343) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,344) @c reused example findvars d2t_singular/presolve_lib.doc:271 
../singular_texi/./d2t_singular/presolve_lib.tex(,345) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,346) ring s  = 0,(e,f,x,y,t,u,v,w,a,d),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,347) ideal i = w2+f2-1, x2+t2+a2-1;
../singular_texi/./d2t_singular/presolve_lib.tex(,348) findvars(i);
../singular_texi/./d2t_singular/presolve_lib.tex(,349) @expansion{} _[1]=f
../singular_texi/./d2t_singular/presolve_lib.tex(,350) @expansion{} _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,351) @expansion{} _[3]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,352) @expansion{} _[4]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,353) @expansion{} _[5]=a
../singular_texi/./d2t_singular/presolve_lib.tex(,354) findvars(i,1);
../singular_texi/./d2t_singular/presolve_lib.tex(,355) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,356) @expansion{}    _[1]=f
../singular_texi/./d2t_singular/presolve_lib.tex(,357) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,358) @expansion{}    _[3]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,359) @expansion{}    _[4]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,360) @expansion{}    _[5]=a
../singular_texi/./d2t_singular/presolve_lib.tex(,361) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,362) @expansion{}    2,3,5,8,9
../singular_texi/./d2t_singular/presolve_lib.tex(,363) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,364) @expansion{}    _[1]=e
../singular_texi/./d2t_singular/presolve_lib.tex(,365) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,366) @expansion{}    _[3]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,367) @expansion{}    _[4]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,368) @expansion{}    _[5]=d
../singular_texi/./d2t_singular/presolve_lib.tex(,369) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,370) @expansion{}    1,4,6,7,10
../singular_texi/./d2t_singular/presolve_lib.tex(,371) @c end example findvars d2t_singular/presolve_lib.doc:271
../singular_texi/./d2t_singular/presolve_lib.tex(,372) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,373) @c ---end content findvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,374) 
../singular_texi/./d2t_singular/presolve_lib.tex(,375) @c ------------------- hilbvec -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,376) @node hilbvec, linearpart, findvars, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,377) @subsubsection hilbvec
../singular_texi/./d2t_singular/presolve_lib.tex(,378) @cindex hilbvec
../singular_texi/./d2t_singular/presolve_lib.tex(,379) @c ---content hilbvec---
../singular_texi/./d2t_singular/presolve_lib.tex(,380) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,381) 
../singular_texi/./d2t_singular/presolve_lib.tex(,382) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,383) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,384) hilbvec(id[,c,o]); id=poly/ideal/vector/module/matrix, c,o=strings,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,385) c=char, o=ordering used by @code{hilb}@*
../singular_texi/./d2t_singular/presolve_lib.tex(,386) (default: c="32003", o="dp")
../singular_texi/./d2t_singular/presolve_lib.tex(,387) 
../singular_texi/./d2t_singular/presolve_lib.tex(,388) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,389) intvec of 1-st Hilbert-series of id, computed in char c and ordering o
../singular_texi/./d2t_singular/presolve_lib.tex(,390) 
../singular_texi/./d2t_singular/presolve_lib.tex(,391) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,392) id must be homogeneous (i.e. all vars have weight 1)
../singular_texi/./d2t_singular/presolve_lib.tex(,393) 
../singular_texi/./d2t_singular/presolve_lib.tex(,394) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,395) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,396) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,397) @c reused example hilbvec d2t_singular/presolve_lib.doc:303 
../singular_texi/./d2t_singular/presolve_lib.tex(,398) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,399) ring s   = 0,(e,f,x,y,z,t,u,v,w,a,b,c,d,H),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,400) ideal id = w2+f2-1, x2+t2+a2-1,  y2+u2+b2-1, z2+v2+c2-1,
../singular_texi/./d2t_singular/presolve_lib.tex(,401) d2+e2-1, f4+2u, wa+tf, xy+tu+ab;
../singular_texi/./d2t_singular/presolve_lib.tex(,402) id = homog(id,H);
../singular_texi/./d2t_singular/presolve_lib.tex(,403) hilbvec(id);
../singular_texi/./d2t_singular/presolve_lib.tex(,404) @expansion{} 1,0,-7,0,20,0,-28,0,14,0,14,0,-28,0,20,0,-7,0,1,0
../singular_texi/./d2t_singular/presolve_lib.tex(,405) @c end example hilbvec d2t_singular/presolve_lib.doc:303
../singular_texi/./d2t_singular/presolve_lib.tex(,406) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,407) @c ---end content hilbvec---
../singular_texi/./d2t_singular/presolve_lib.tex(,408) 
../singular_texi/./d2t_singular/presolve_lib.tex(,409) @c ------------------- linearpart -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,410) @node linearpart, tolessvars, hilbvec, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,411) @subsubsection linearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,412) @cindex linearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,413) @c ---content linearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,414) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,415) 
../singular_texi/./d2t_singular/presolve_lib.tex(,416) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,417) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,418) linearpart(id); id=ideal/module
../singular_texi/./d2t_singular/presolve_lib.tex(,419) 
../singular_texi/./d2t_singular/presolve_lib.tex(,420) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,421) generators of id of total degree <= 1
../singular_texi/./d2t_singular/presolve_lib.tex(,422) 
../singular_texi/./d2t_singular/presolve_lib.tex(,423) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,424) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,425) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,426) @c reused example linearpart d2t_singular/presolve_lib.doc:331 
../singular_texi/./d2t_singular/presolve_lib.tex(,427) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,428) ring r=0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,429) ideal i=1+x+x2+x3,3,x+3y+5z;
../singular_texi/./d2t_singular/presolve_lib.tex(,430) linearpart(i);
../singular_texi/./d2t_singular/presolve_lib.tex(,431) @expansion{} _[1]=3
../singular_texi/./d2t_singular/presolve_lib.tex(,432) @expansion{} _[2]=x+3y+5z
../singular_texi/./d2t_singular/presolve_lib.tex(,433) module m=[x,y,z],x*[x3,y2,z],[1,x2,z3,0,1];
../singular_texi/./d2t_singular/presolve_lib.tex(,434) show(linearpart(m));
../singular_texi/./d2t_singular/presolve_lib.tex(,435) @expansion{} // module, 1 generator(s)
../singular_texi/./d2t_singular/presolve_lib.tex(,436) @expansion{} [x,y,z]
../singular_texi/./d2t_singular/presolve_lib.tex(,437) @c end example linearpart d2t_singular/presolve_lib.doc:331
../singular_texi/./d2t_singular/presolve_lib.tex(,438) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,439) @c ---end content linearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,440) 
../singular_texi/./d2t_singular/presolve_lib.tex(,441) @c ------------------- tolessvars -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,442) @node tolessvars, solvelinearpart, linearpart, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,443) @subsubsection tolessvars
../singular_texi/./d2t_singular/presolve_lib.tex(,444) @cindex tolessvars
../singular_texi/./d2t_singular/presolve_lib.tex(,445) @c ---content tolessvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,446) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,447) 
../singular_texi/./d2t_singular/presolve_lib.tex(,448) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,449) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,450) tolessvars(id [,s1,s2] ); id poly/ideal/vector/module/matrix,
../singular_texi/./d2t_singular/presolve_lib.tex(,451) s1,s2=strings@*
../singular_texi/./d2t_singular/presolve_lib.tex(,452) s1: name of new ring,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,453) s2: new ordering@*
../singular_texi/./d2t_singular/presolve_lib.tex(,454) (default: s1="R(n)" where n is the # of vars in the new ring,
../singular_texi/./d2t_singular/presolve_lib.tex(,455) s2="dp" or "ds" depending whether the first block of the old
../singular_texi/./d2t_singular/presolve_lib.tex(,456) ordering is a p- resp. an s-ordering)
../singular_texi/./d2t_singular/presolve_lib.tex(,457) 
../singular_texi/./d2t_singular/presolve_lib.tex(,458) @item @strong{Create:}
../singular_texi/./d2t_singular/presolve_lib.tex(,459) nothing, if id contains all vars of the basering.@*
../singular_texi/./d2t_singular/presolve_lib.tex(,460) Else, create a ring with same char as the basering, but possibly less
../singular_texi/./d2t_singular/presolve_lib.tex(,461) variables (only those variables which actually occur in id) and map
../singular_texi/./d2t_singular/presolve_lib.tex(,462) id to the new ring, which will be the basering after the proc has
../singular_texi/./d2t_singular/presolve_lib.tex(,463) finished.
../singular_texi/./d2t_singular/presolve_lib.tex(,464) 
../singular_texi/./d2t_singular/presolve_lib.tex(,465) @item @strong{Display:}
../singular_texi/./d2t_singular/presolve_lib.tex(,466) If printlevel >=0, display ideal of vars, which have been omitted from
../singular_texi/./d2t_singular/presolve_lib.tex(,467) the old ring
../singular_texi/./d2t_singular/presolve_lib.tex(,468) 
../singular_texi/./d2t_singular/presolve_lib.tex(,469) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,470) the original ideal id (see NOTE)
../singular_texi/./d2t_singular/presolve_lib.tex(,471) 
../singular_texi/./d2t_singular/presolve_lib.tex(,472) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,473) You must not type, say, 'ideal id=tolessvars(id);' since the ring
../singular_texi/./d2t_singular/presolve_lib.tex(,474) to which 'id' would belong will only be defined by the r.h.s.. But you
../singular_texi/./d2t_singular/presolve_lib.tex(,475) may type 'def id=tolessvars(id);' or 'list id=tolessvars(id);'
../singular_texi/./d2t_singular/presolve_lib.tex(,476) since then 'id' does not a priory belong to a ring, its type will
../singular_texi/./d2t_singular/presolve_lib.tex(,477) be defined by the right hand side. Moreover, do not use a name which
../singular_texi/./d2t_singular/presolve_lib.tex(,478) occurs in the old ring, for the same reason.
../singular_texi/./d2t_singular/presolve_lib.tex(,479) 
../singular_texi/./d2t_singular/presolve_lib.tex(,480) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,481) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,482) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,483) @c reused example tolessvars d2t_singular/presolve_lib.doc:384 
../singular_texi/./d2t_singular/presolve_lib.tex(,484) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,485) ring r  = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,486) ideal i = y2-x3,x-3,y-2x;
../singular_texi/./d2t_singular/presolve_lib.tex(,487) def j   = tolessvars(i,"R_r","lp");
../singular_texi/./d2t_singular/presolve_lib.tex(,488) @expansion{} 
../singular_texi/./d2t_singular/presolve_lib.tex(,489) @expansion{} // variables which did not occur:
../singular_texi/./d2t_singular/presolve_lib.tex(,490) @expansion{} z
../singular_texi/./d2t_singular/presolve_lib.tex(,491) @expansion{} // basering is now R_r
../singular_texi/./d2t_singular/presolve_lib.tex(,492) show(basering);
../singular_texi/./d2t_singular/presolve_lib.tex(,493) @expansion{} // ring: (0),(x,y),(lp(2),C);
../singular_texi/./d2t_singular/presolve_lib.tex(,494) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/presolve_lib.tex(,495) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/presolve_lib.tex(,496) @expansion{} // j                    [0]  ideal, 3 generator(s)
../singular_texi/./d2t_singular/presolve_lib.tex(,497) j;
../singular_texi/./d2t_singular/presolve_lib.tex(,498) @expansion{} j[1]=-x3+y2
../singular_texi/./d2t_singular/presolve_lib.tex(,499) @expansion{} j[2]=x-3
../singular_texi/./d2t_singular/presolve_lib.tex(,500) @expansion{} j[3]=-2x+y
../singular_texi/./d2t_singular/presolve_lib.tex(,501) kill R_r;
../singular_texi/./d2t_singular/presolve_lib.tex(,502) @c end example tolessvars d2t_singular/presolve_lib.doc:384
../singular_texi/./d2t_singular/presolve_lib.tex(,503) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,504) @c ---end content tolessvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,505) 
../singular_texi/./d2t_singular/presolve_lib.tex(,506) @c ------------------- solvelinearpart -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,507) @node solvelinearpart, sortandmap, tolessvars, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,508) @subsubsection solvelinearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,509) @cindex solvelinearpart
../singular_texi/./d2t_singular/presolve_lib.tex(,510) @c ---content solvelinearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,511) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,512) 
../singular_texi/./d2t_singular/presolve_lib.tex(,513) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,514) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,515) solvelinearpart(id [,n] ); id=ideal/module, n=integer,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,516) (default: n=0)
../singular_texi/./d2t_singular/presolve_lib.tex(,517) 
../singular_texi/./d2t_singular/presolve_lib.tex(,518) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,519) (interreduced) generators of id of degree <=1 in reduced triangular
../singular_texi/./d2t_singular/presolve_lib.tex(,520) form if n=0 [non-reduced triangular form if n!=0]
../singular_texi/./d2t_singular/presolve_lib.tex(,521) 
../singular_texi/./d2t_singular/presolve_lib.tex(,522) @item @strong{Assume:}
../singular_texi/./d2t_singular/presolve_lib.tex(,523) monomial ordering is a global ordering (p-ordering)
../singular_texi/./d2t_singular/presolve_lib.tex(,524) 
../singular_texi/./d2t_singular/presolve_lib.tex(,525) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,526) may be used to solve a system of linear equations
../singular_texi/./d2t_singular/presolve_lib.tex(,527) see proc @code{gauss_row} from 'matrix.lib' for a different method
../singular_texi/./d2t_singular/presolve_lib.tex(,528) 
../singular_texi/./d2t_singular/presolve_lib.tex(,529) @item @strong{Warning:}
../singular_texi/./d2t_singular/presolve_lib.tex(,530) the result is very likely to be false for 'real' coefficients, use
../singular_texi/./d2t_singular/presolve_lib.tex(,531) char 0 instead!
../singular_texi/./d2t_singular/presolve_lib.tex(,532) 
../singular_texi/./d2t_singular/presolve_lib.tex(,533) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,534) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,535) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,536) @c reused example solvelinearpart d2t_singular/presolve_lib.doc:426 
../singular_texi/./d2t_singular/presolve_lib.tex(,537) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,538) // Solve the system of linear equations:
../singular_texi/./d2t_singular/presolve_lib.tex(,539) //         3x +   y +  z -  u = 2
../singular_texi/./d2t_singular/presolve_lib.tex(,540) //         3x +  8y + 6z - 7u = 1
../singular_texi/./d2t_singular/presolve_lib.tex(,541) //        14x + 10y + 6z - 7u = 0
../singular_texi/./d2t_singular/presolve_lib.tex(,542) //         7x +  4y + 3z - 3u = 3
../singular_texi/./d2t_singular/presolve_lib.tex(,543) ring r = 0,(x,y,z,u),lp;
../singular_texi/./d2t_singular/presolve_lib.tex(,544) ideal i= 3x +   y +  z -  u,
../singular_texi/./d2t_singular/presolve_lib.tex(,545) 13x +  8y + 6z - 7u,
../singular_texi/./d2t_singular/presolve_lib.tex(,546) 14x + 10y + 6z - 7u,
../singular_texi/./d2t_singular/presolve_lib.tex(,547) 7x +  4y + 3z - 3u;
../singular_texi/./d2t_singular/presolve_lib.tex(,548) ideal j= 2,1,0,3;
../singular_texi/./d2t_singular/presolve_lib.tex(,549) j = i-j;                        // difference of 1x4 matrices
../singular_texi/./d2t_singular/presolve_lib.tex(,550) // compute reduced triangular form, setting
../singular_texi/./d2t_singular/presolve_lib.tex(,551) solvelinearpart(j);             // the RHS equal 0 gives the solutions!
../singular_texi/./d2t_singular/presolve_lib.tex(,552) @expansion{} _[1]=u-4
../singular_texi/./d2t_singular/presolve_lib.tex(,553) @expansion{} _[2]=z-4
../singular_texi/./d2t_singular/presolve_lib.tex(,554) @expansion{} _[3]=y+1
../singular_texi/./d2t_singular/presolve_lib.tex(,555) @expansion{} _[4]=x-1
../singular_texi/./d2t_singular/presolve_lib.tex(,556) solvelinearpart(j,1); "";       // triangular form, not reduced
../singular_texi/./d2t_singular/presolve_lib.tex(,557) @expansion{} _[1]=u-4
../singular_texi/./d2t_singular/presolve_lib.tex(,558) @expansion{} _[2]=3z-8u+20
../singular_texi/./d2t_singular/presolve_lib.tex(,559) @expansion{} _[3]=18y-6z+7u+14
../singular_texi/./d2t_singular/presolve_lib.tex(,560) @expansion{} _[4]=13x+8y+6z-7u-1
../singular_texi/./d2t_singular/presolve_lib.tex(,561) @expansion{} 
../singular_texi/./d2t_singular/presolve_lib.tex(,562) @c end example solvelinearpart d2t_singular/presolve_lib.doc:426
../singular_texi/./d2t_singular/presolve_lib.tex(,563) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,564) @c ---end content solvelinearpart---
../singular_texi/./d2t_singular/presolve_lib.tex(,565) 
../singular_texi/./d2t_singular/presolve_lib.tex(,566) @c ------------------- sortandmap -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,567) @node sortandmap, sortvars, solvelinearpart, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,568) @subsubsection sortandmap
../singular_texi/./d2t_singular/presolve_lib.tex(,569) @cindex sortandmap
../singular_texi/./d2t_singular/presolve_lib.tex(,570) @c ---content sortandmap---
../singular_texi/./d2t_singular/presolve_lib.tex(,571) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,572) 
../singular_texi/./d2t_singular/presolve_lib.tex(,573) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,574) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,575) sortandmap(id,s1,s2[,n1,p1,n2,p2...,o1,m1,o2,m2...]);@*
../singular_texi/./d2t_singular/presolve_lib.tex(,576) id=poly/ideal/vector/module,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,577) s1,s2 = strings (names for new ring and mapped id),@*
../singular_texi/./d2t_singular/presolve_lib.tex(,578) p1,p2,...= polynomials (product of variables),@*
../singular_texi/./d2t_singular/presolve_lib.tex(,579) n1,n2,...= integers,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,580) o1,o2,...= strings,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,581) m1,m2,...= integers@*
../singular_texi/./d2t_singular/presolve_lib.tex(,582) (default: p1=product of all vars, n1=0, o1="dp",m1=0)
../singular_texi/./d2t_singular/presolve_lib.tex(,583) @*the last pi (containing the remaining vars) may be omitted
../singular_texi/./d2t_singular/presolve_lib.tex(,584) 
../singular_texi/./d2t_singular/presolve_lib.tex(,585) @item @strong{Create:}
../singular_texi/./d2t_singular/presolve_lib.tex(,586) a new ring and map id into it, the new ring has same char as basering
../singular_texi/./d2t_singular/presolve_lib.tex(,587) but with new ordering and vars sorted in the following manner:
../singular_texi/./d2t_singular/presolve_lib.tex(,588)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,589)   - each block of vars occurring in pi is sorted w.r.t. its complexity in id,
../singular_texi/./d2t_singular/presolve_lib.tex(,590)   - ni controls the sorting in i-th block (= vars occurring in pi):
../singular_texi/./d2t_singular/presolve_lib.tex(,591)     ni=0 (resp.!=0) means that less (resp. more) complex vars come first
../singular_texi/./d2t_singular/presolve_lib.tex(,592)   - oi and mi define the monomial ordering of the i-th block:
../singular_texi/./d2t_singular/presolve_lib.tex(,593)     if mi =0, oi=ordstr(i-th block)
../singular_texi/./d2t_singular/presolve_lib.tex(,594)     if mi!=0, the ordering of the i-th block itself is a blockordering,
../singular_texi/./d2t_singular/presolve_lib.tex(,595)       each subblock having ordstr=oi, such that vars of same complexity are
../singular_texi/./d2t_singular/presolve_lib.tex(,596)       in one block
../singular_texi/./d2t_singular/presolve_lib.tex(,597)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,598) Note that only simple ordstrings oi are allowed:
../singular_texi/./d2t_singular/presolve_lib.tex(,599) @*"lp","dp","Dp","ls","ds","Ds".
../singular_texi/./d2t_singular/presolve_lib.tex(,600) 
../singular_texi/./d2t_singular/presolve_lib.tex(,601) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,602) nothing
../singular_texi/./d2t_singular/presolve_lib.tex(,603) 
../singular_texi/./d2t_singular/presolve_lib.tex(,604) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,605) We define a variable x to be more complex than y (with respect to id)
../singular_texi/./d2t_singular/presolve_lib.tex(,606) if val(x) > val(y) lexicographically, where val(x) denotes the
../singular_texi/./d2t_singular/presolve_lib.tex(,607) valuation vector of x:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,608) consider id as list of polynomials in x with coefficients in the
../singular_texi/./d2t_singular/presolve_lib.tex(,609) remaining variables. Then:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,610) val(x) = (maximal occurring power of x, # of all monomials in leading
../singular_texi/./d2t_singular/presolve_lib.tex(,611) coefficient, # of all monomials in coefficient of next smaller power
../singular_texi/./d2t_singular/presolve_lib.tex(,612) of x,...).
../singular_texi/./d2t_singular/presolve_lib.tex(,613) 
../singular_texi/./d2t_singular/presolve_lib.tex(,614) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,615) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,616) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,617) @c reused example sortandmap d2t_singular/presolve_lib.doc:498 
../singular_texi/./d2t_singular/presolve_lib.tex(,618) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,619) ring s = 32003,(x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,620) ideal i=x3+y2,xz+z2;
../singular_texi/./d2t_singular/presolve_lib.tex(,621) sortandmap(i,"R_r","i");
../singular_texi/./d2t_singular/presolve_lib.tex(,622) // i is now an ideal in the new basering R_r
../singular_texi/./d2t_singular/presolve_lib.tex(,623) show(R_r);
../singular_texi/./d2t_singular/presolve_lib.tex(,624) @expansion{} // ring: (32003),(y,z,x),(dp(3),C);
../singular_texi/./d2t_singular/presolve_lib.tex(,625) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/presolve_lib.tex(,626) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/presolve_lib.tex(,627) @expansion{} // i                    [0]  ideal, 2 generator(s)
../singular_texi/./d2t_singular/presolve_lib.tex(,628) kill R_r; setring s;
../singular_texi/./d2t_singular/presolve_lib.tex(,629) sortandmap(i,"R_r","i",1,xy,0,z,0,"ds",0,"lp",0);
../singular_texi/./d2t_singular/presolve_lib.tex(,630) show(R_r);
../singular_texi/./d2t_singular/presolve_lib.tex(,631) @expansion{} // ring: (32003),(x,y,z),(ds(2),lp(1),C);
../singular_texi/./d2t_singular/presolve_lib.tex(,632) @expansion{} // minpoly = 0
../singular_texi/./d2t_singular/presolve_lib.tex(,633) @expansion{} // objects belonging to this ring:
../singular_texi/./d2t_singular/presolve_lib.tex(,634) @expansion{} // i                    [0]  ideal, 2 generator(s)
../singular_texi/./d2t_singular/presolve_lib.tex(,635) kill R_r;
../singular_texi/./d2t_singular/presolve_lib.tex(,636) @c end example sortandmap d2t_singular/presolve_lib.doc:498
../singular_texi/./d2t_singular/presolve_lib.tex(,637) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,638) @c ---end content sortandmap---
../singular_texi/./d2t_singular/presolve_lib.tex(,639) 
../singular_texi/./d2t_singular/presolve_lib.tex(,640) @c ------------------- sortvars -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,641) @node sortvars, shortid, sortandmap, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,642) @subsubsection sortvars
../singular_texi/./d2t_singular/presolve_lib.tex(,643) @cindex sortvars
../singular_texi/./d2t_singular/presolve_lib.tex(,644) @c ---content sortvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,645) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,646) 
../singular_texi/./d2t_singular/presolve_lib.tex(,647) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,648) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,649) sortvars(id[,n1,p1,n2,p2,...]);@*
../singular_texi/./d2t_singular/presolve_lib.tex(,650) id=poly/ideal/vector/module,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,651) p1,p2,...= polynomials (product of vars),@*
../singular_texi/./d2t_singular/presolve_lib.tex(,652) n1,n2,...=integers@*
../singular_texi/./d2t_singular/presolve_lib.tex(,653) (default: p1=product of all vars, n1=0)
../singular_texi/./d2t_singular/presolve_lib.tex(,654) @*the last pi (containing the remaining vars) may be omitted
../singular_texi/./d2t_singular/presolve_lib.tex(,655) 
../singular_texi/./d2t_singular/presolve_lib.tex(,656) @item @strong{Compute:}
../singular_texi/./d2t_singular/presolve_lib.tex(,657) sort variables with respect to their complexity in id
../singular_texi/./d2t_singular/presolve_lib.tex(,658) 
../singular_texi/./d2t_singular/presolve_lib.tex(,659) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,660) list of two elements, an ideal and a list:
../singular_texi/./d2t_singular/presolve_lib.tex(,661)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,662)   [1]: ideal, variables of basering sorted w.r.t their complexity in id
../singular_texi/./d2t_singular/presolve_lib.tex(,663)        ni controls the ordering in i-th block (= vars occurring in pi):
../singular_texi/./d2t_singular/presolve_lib.tex(,664)        ni=0 (resp.!=0) means that less (resp. more) complex vars come first
../singular_texi/./d2t_singular/presolve_lib.tex(,665)   [2]: a list with 4 entries for each pi:
../singular_texi/./d2t_singular/presolve_lib.tex(,666)        ideal ai : vars of pi in correct order,
../singular_texi/./d2t_singular/presolve_lib.tex(,667)        intvec vi: permutation vector describing the ordering in ai,
../singular_texi/./d2t_singular/presolve_lib.tex(,668)        intmat Mi: valuation matrix of ai, the columns of Mi being the
../singular_texi/./d2t_singular/presolve_lib.tex(,669)                   valuation vectors of the vars in ai
../singular_texi/./d2t_singular/presolve_lib.tex(,670)        intvec wi: size of 1-st, 2-nd,... block of identical columns of Mi
../singular_texi/./d2t_singular/presolve_lib.tex(,671)                   (vars with same valuation)
../singular_texi/./d2t_singular/presolve_lib.tex(,672)   @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,673) 
../singular_texi/./d2t_singular/presolve_lib.tex(,674) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,675) We define a variable x to be more complex than y (with respect to id)
../singular_texi/./d2t_singular/presolve_lib.tex(,676) if val(x) > val(y) lexicographically, where val(x) denotes the
../singular_texi/./d2t_singular/presolve_lib.tex(,677) valuation vector of x:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,678) consider id as list of polynomials in x with coefficients in the
../singular_texi/./d2t_singular/presolve_lib.tex(,679) remaining variables. Then:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,680) val(x) = (maximal occurring power of x, # of all monomials in leading
../singular_texi/./d2t_singular/presolve_lib.tex(,681) coefficient, # of all monomials in coefficient of next smaller power
../singular_texi/./d2t_singular/presolve_lib.tex(,682) of x,...).
../singular_texi/./d2t_singular/presolve_lib.tex(,683) 
../singular_texi/./d2t_singular/presolve_lib.tex(,684) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,685) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,686) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,687) @c reused example sortvars d2t_singular/presolve_lib.doc:560 
../singular_texi/./d2t_singular/presolve_lib.tex(,688) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,689) ring s=0,(x,y,z,w),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,690) ideal i = x3+y2+yw2,xz+z2,xyz-w2;
../singular_texi/./d2t_singular/presolve_lib.tex(,691) sortvars(i,0,xy,1,zw);
../singular_texi/./d2t_singular/presolve_lib.tex(,692) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,693) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,694) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,695) @expansion{}    _[3]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,696) @expansion{}    _[4]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,697) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,698) @expansion{}    [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,699) @expansion{}       _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,700) @expansion{}       _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,701) @expansion{}    [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,702) @expansion{}       2,1
../singular_texi/./d2t_singular/presolve_lib.tex(,703) @expansion{}    [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,704) @expansion{}       2,3,
../singular_texi/./d2t_singular/presolve_lib.tex(,705) @expansion{}       1,1,
../singular_texi/./d2t_singular/presolve_lib.tex(,706) @expansion{}       2,0,
../singular_texi/./d2t_singular/presolve_lib.tex(,707) @expansion{}       0,2 
../singular_texi/./d2t_singular/presolve_lib.tex(,708) @expansion{}    [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,709) @expansion{}       1,1
../singular_texi/./d2t_singular/presolve_lib.tex(,710) @expansion{}    [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,711) @expansion{}       _[1]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,712) @expansion{}       _[2]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,713) @expansion{}    [6]:
../singular_texi/./d2t_singular/presolve_lib.tex(,714) @expansion{}       2,1
../singular_texi/./d2t_singular/presolve_lib.tex(,715) @expansion{}    [7]:
../singular_texi/./d2t_singular/presolve_lib.tex(,716) @expansion{}       2,2,
../singular_texi/./d2t_singular/presolve_lib.tex(,717) @expansion{}       2,1,
../singular_texi/./d2t_singular/presolve_lib.tex(,718) @expansion{}       0,2 
../singular_texi/./d2t_singular/presolve_lib.tex(,719) @expansion{}    [8]:
../singular_texi/./d2t_singular/presolve_lib.tex(,720) @expansion{}       1,1
../singular_texi/./d2t_singular/presolve_lib.tex(,721) @c end example sortvars d2t_singular/presolve_lib.doc:560
../singular_texi/./d2t_singular/presolve_lib.tex(,722) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,723) @c ---end content sortvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,724) 
../singular_texi/./d2t_singular/presolve_lib.tex(,725) @c ------------------- shortid -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,726) @node shortid, valvars, sortvars, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,727) @subsubsection shortid
../singular_texi/./d2t_singular/presolve_lib.tex(,728) @cindex shortid
../singular_texi/./d2t_singular/presolve_lib.tex(,729) @c ---content shortid---
../singular_texi/./d2t_singular/presolve_lib.tex(,730) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,731) 
../singular_texi/./d2t_singular/presolve_lib.tex(,732) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,733) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,734) shortid(id,n[,e]); id= ideal/module, n,e=integers
../singular_texi/./d2t_singular/presolve_lib.tex(,735) 
../singular_texi/./d2t_singular/presolve_lib.tex(,736) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,737) - if called with two arguments or e=0:
../singular_texi/./d2t_singular/presolve_lib.tex(,738) @* same type as id, containing generators of id having <= n terms.
../singular_texi/./d2t_singular/presolve_lib.tex(,739) @* - if called with three arguments and e!=0:
../singular_texi/./d2t_singular/presolve_lib.tex(,740) @* a list L:
../singular_texi/./d2t_singular/presolve_lib.tex(,741) @* L[1]: same type as id, containing generators of id having <= n terms.
../singular_texi/./d2t_singular/presolve_lib.tex(,742) @* L[2]: number of corresponding generator of id
../singular_texi/./d2t_singular/presolve_lib.tex(,743) 
../singular_texi/./d2t_singular/presolve_lib.tex(,744) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,745) May be used to compute partial standard basis in case id is to hard
../singular_texi/./d2t_singular/presolve_lib.tex(,746) 
../singular_texi/./d2t_singular/presolve_lib.tex(,747) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,748) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,749) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,750) @c reused example shortid d2t_singular/presolve_lib.doc:594 
../singular_texi/./d2t_singular/presolve_lib.tex(,751) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,752) ring s=0,(x,y,z,w),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,753) ideal i = (x3+y2+yw2)^2,(xz+z2)^2,xyz-w2-xzw; 
../singular_texi/./d2t_singular/presolve_lib.tex(,754) shortid(i,3);
../singular_texi/./d2t_singular/presolve_lib.tex(,755) @expansion{} _[1]=x2z2+2xz3+z4
../singular_texi/./d2t_singular/presolve_lib.tex(,756) @expansion{} _[2]=xyz-xzw-w2
../singular_texi/./d2t_singular/presolve_lib.tex(,757) @c end example shortid d2t_singular/presolve_lib.doc:594
../singular_texi/./d2t_singular/presolve_lib.tex(,758) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,759) @c ---end content shortid---
../singular_texi/./d2t_singular/presolve_lib.tex(,760) 
../singular_texi/./d2t_singular/presolve_lib.tex(,761) @c ------------------- valvars -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,762) @node valvars, idealSimplify, shortid, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,763) @subsubsection valvars
../singular_texi/./d2t_singular/presolve_lib.tex(,764) @cindex valvars
../singular_texi/./d2t_singular/presolve_lib.tex(,765) @c ---content valvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,766) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,767) 
../singular_texi/./d2t_singular/presolve_lib.tex(,768) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,769) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,770) valvars(id[,n1,p1,n2,p2,...]);@*
../singular_texi/./d2t_singular/presolve_lib.tex(,771) id=poly/ideal/vector/module,@*
../singular_texi/./d2t_singular/presolve_lib.tex(,772) p1,p2,...= polynomials (product of vars),@*
../singular_texi/./d2t_singular/presolve_lib.tex(,773) n1,n2,...= integers,
../singular_texi/./d2t_singular/presolve_lib.tex(,774) 
../singular_texi/./d2t_singular/presolve_lib.tex(,775) ni controls the ordering of vars occurring in pi: ni=0 (resp.!=0) means
../singular_texi/./d2t_singular/presolve_lib.tex(,776) that less (resp. more) complex vars come first@*
../singular_texi/./d2t_singular/presolve_lib.tex(,777) (default: p1=product of all vars, n1=0)
../singular_texi/./d2t_singular/presolve_lib.tex(,778) @*the last pi (containing the remaining vars) may be omitted
../singular_texi/./d2t_singular/presolve_lib.tex(,779) 
../singular_texi/./d2t_singular/presolve_lib.tex(,780) @item @strong{Compute:}
../singular_texi/./d2t_singular/presolve_lib.tex(,781) valuation (complexity) of variables with respect to id.@*
../singular_texi/./d2t_singular/presolve_lib.tex(,782) ni controls the ordering of vars occurring in pi:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,783) ni=0 (resp.!=0) means that less (resp. more) complex vars come first.
../singular_texi/./d2t_singular/presolve_lib.tex(,784) 
../singular_texi/./d2t_singular/presolve_lib.tex(,785) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,786) list with 3 entries:
../singular_texi/./d2t_singular/presolve_lib.tex(,787)   @format
../singular_texi/./d2t_singular/presolve_lib.tex(,788)   [1]: intvec, say v, describing the permutation such that the permuted
../singular_texi/./d2t_singular/presolve_lib.tex(,789)        ringvariables are ordered with respect to their complexity in id
../singular_texi/./d2t_singular/presolve_lib.tex(,790)   [2]: list of intvecs, i-th intvec, say v(i) describing permutation
../singular_texi/./d2t_singular/presolve_lib.tex(,791)        of vars in a(i) such that v=v(1),v(2),...
../singular_texi/./d2t_singular/presolve_lib.tex(,792)   [3]: list of ideals and intmat's, say a(i) and M(i), where
../singular_texi/./d2t_singular/presolve_lib.tex(,793)        a(i): factors of pi,
../singular_texi/./d2t_singular/presolve_lib.tex(,794)        M(i): valuation matrix of a(i), such that the j-th column of M(i)
../singular_texi/./d2t_singular/presolve_lib.tex(,795)              is the valuation vector of j-th generator of a(i)
../singular_texi/./d2t_singular/presolve_lib.tex(,796)          @end format
../singular_texi/./d2t_singular/presolve_lib.tex(,797) 
../singular_texi/./d2t_singular/presolve_lib.tex(,798) @item @strong{Note:}
../singular_texi/./d2t_singular/presolve_lib.tex(,799) Use @code{sortvars} in order to actually sort the variables!
../singular_texi/./d2t_singular/presolve_lib.tex(,800) We define a variable x to be more complex than y (with respect to id)
../singular_texi/./d2t_singular/presolve_lib.tex(,801) if val(x) > val(y) lexicographically, where val(x) denotes the
../singular_texi/./d2t_singular/presolve_lib.tex(,802) valuation vector of x:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,803) consider id as list of polynomials in x with coefficients in the
../singular_texi/./d2t_singular/presolve_lib.tex(,804) remaining variables. Then:@*
../singular_texi/./d2t_singular/presolve_lib.tex(,805) val(x) = (maximal occurring power of x, # of all monomials in leading
../singular_texi/./d2t_singular/presolve_lib.tex(,806) coefficient, # of all monomials in coefficient of next smaller power
../singular_texi/./d2t_singular/presolve_lib.tex(,807) of x,...).
../singular_texi/./d2t_singular/presolve_lib.tex(,808) 
../singular_texi/./d2t_singular/presolve_lib.tex(,809) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,810) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,811) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,812) @c reused example valvars d2t_singular/presolve_lib.doc:654 
../singular_texi/./d2t_singular/presolve_lib.tex(,813) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,814) ring s=0,(x,y,z,a,b),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,815) ideal i=ax2+ay3-b2x,abz+by2;
../singular_texi/./d2t_singular/presolve_lib.tex(,816) valvars (i,0,xyz);
../singular_texi/./d2t_singular/presolve_lib.tex(,817) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,818) @expansion{}    3,1,2,4,5
../singular_texi/./d2t_singular/presolve_lib.tex(,819) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,820) @expansion{}    [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,821) @expansion{}       3,1,2
../singular_texi/./d2t_singular/presolve_lib.tex(,822) @expansion{}    [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,823) @expansion{}       1,2
../singular_texi/./d2t_singular/presolve_lib.tex(,824) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,825) @expansion{}    [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,826) @expansion{}       _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,827) @expansion{}       _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,828) @expansion{}       _[3]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,829) @expansion{}    [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,830) @expansion{}       2,3,1,
../singular_texi/./d2t_singular/presolve_lib.tex(,831) @expansion{}       1,1,1,
../singular_texi/./d2t_singular/presolve_lib.tex(,832) @expansion{}       1,1,0 
../singular_texi/./d2t_singular/presolve_lib.tex(,833) @expansion{}    [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,834) @expansion{}       _[1]=a
../singular_texi/./d2t_singular/presolve_lib.tex(,835) @expansion{}       _[2]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,836) @expansion{}    [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,837) @expansion{}       1,2,
../singular_texi/./d2t_singular/presolve_lib.tex(,838) @expansion{}       3,1,
../singular_texi/./d2t_singular/presolve_lib.tex(,839) @expansion{}       0,2 
../singular_texi/./d2t_singular/presolve_lib.tex(,840) @c end example valvars d2t_singular/presolve_lib.doc:654
../singular_texi/./d2t_singular/presolve_lib.tex(,841) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,842) @c ---end content valvars---
../singular_texi/./d2t_singular/presolve_lib.tex(,843) 
../singular_texi/./d2t_singular/presolve_lib.tex(,844) @c ------------------- idealSimplify -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,845) @node idealSimplify, idealSplit, valvars, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,846) @subsubsection idealSimplify
../singular_texi/./d2t_singular/presolve_lib.tex(,847) @cindex idealSimplify
../singular_texi/./d2t_singular/presolve_lib.tex(,848) @c ---content idealSimplify---
../singular_texi/./d2t_singular/presolve_lib.tex(,849) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,850) 
../singular_texi/./d2t_singular/presolve_lib.tex(,851) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,852) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,853) idealSimplify(id); id ideal
../singular_texi/./d2t_singular/presolve_lib.tex(,854) 
../singular_texi/./d2t_singular/presolve_lib.tex(,855) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,856) ideal I = eliminate(Id,m) m is a product of variables
../singular_texi/./d2t_singular/presolve_lib.tex(,857) which are only linearly involved in the generators of id
../singular_texi/./d2t_singular/presolve_lib.tex(,858) 
../singular_texi/./d2t_singular/presolve_lib.tex(,859) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,860) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,861) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,862) @c reused example idealSimplify d2t_singular/presolve_lib.doc:681 
../singular_texi/./d2t_singular/presolve_lib.tex(,863) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,864) ring r=0,(x,y,z,w,t),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,865) ideal i=
../singular_texi/./d2t_singular/presolve_lib.tex(,866) t,
../singular_texi/./d2t_singular/presolve_lib.tex(,867) x3+y2+2z,
../singular_texi/./d2t_singular/presolve_lib.tex(,868) x2+3y,
../singular_texi/./d2t_singular/presolve_lib.tex(,869) x2+y2+z2,
../singular_texi/./d2t_singular/presolve_lib.tex(,870) w2+z;
../singular_texi/./d2t_singular/presolve_lib.tex(,871) ideal j=idealSimplify(i);
../singular_texi/./d2t_singular/presolve_lib.tex(,872) ideal k=eliminate(i,zyt);
../singular_texi/./d2t_singular/presolve_lib.tex(,873) reduce(k,std(j));
../singular_texi/./d2t_singular/presolve_lib.tex(,874) @expansion{} _[1]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,875) @expansion{} _[2]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,876) reduce(j,std(k));
../singular_texi/./d2t_singular/presolve_lib.tex(,877) @expansion{} _[1]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,878) @expansion{} _[2]=0
../singular_texi/./d2t_singular/presolve_lib.tex(,879) @c end example idealSimplify d2t_singular/presolve_lib.doc:681
../singular_texi/./d2t_singular/presolve_lib.tex(,880) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,881) @c ---end content idealSimplify---
../singular_texi/./d2t_singular/presolve_lib.tex(,882) 
../singular_texi/./d2t_singular/presolve_lib.tex(,883) @c ------------------- idealSplit -------------
../singular_texi/./d2t_singular/presolve_lib.tex(,884) @node idealSplit,, idealSimplify, presolve_lib
../singular_texi/./d2t_singular/presolve_lib.tex(,885) @subsubsection idealSplit
../singular_texi/./d2t_singular/presolve_lib.tex(,886) @cindex idealSplit
../singular_texi/./d2t_singular/presolve_lib.tex(,887) @c ---content idealSplit---
../singular_texi/./d2t_singular/presolve_lib.tex(,888) Procedure from library @code{presolve.lib} (@pxref{presolve_lib}).
../singular_texi/./d2t_singular/presolve_lib.tex(,889) 
../singular_texi/./d2t_singular/presolve_lib.tex(,890) @table @asis
../singular_texi/./d2t_singular/presolve_lib.tex(,891) @item @strong{Usage:}
../singular_texi/./d2t_singular/presolve_lib.tex(,892) idealSplit(id,timeF,timeS); id ideal and optional
../singular_texi/./d2t_singular/presolve_lib.tex(,893) @*timeF ,timeS integers to bound the time which can be used
../singular_texi/./d2t_singular/presolve_lib.tex(,894) for factorization resp. standard basis computation
../singular_texi/./d2t_singular/presolve_lib.tex(,895) 
../singular_texi/./d2t_singular/presolve_lib.tex(,896) @item @strong{Return:}
../singular_texi/./d2t_singular/presolve_lib.tex(,897) a list of ideals such that their intersection
../singular_texi/./d2t_singular/presolve_lib.tex(,898) @*has the same radical as id
../singular_texi/./d2t_singular/presolve_lib.tex(,899) 
../singular_texi/./d2t_singular/presolve_lib.tex(,900) @end table
../singular_texi/./d2t_singular/presolve_lib.tex(,901) @strong{Example:}
../singular_texi/./d2t_singular/presolve_lib.tex(,902) @smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,903) @c reused example idealSplit d2t_singular/presolve_lib.doc:718 
../singular_texi/./d2t_singular/presolve_lib.tex(,904) LIB "presolve.lib";
../singular_texi/./d2t_singular/presolve_lib.tex(,905) ring r=32003,(b,s,t,u,v,w,x,y,z),dp;
../singular_texi/./d2t_singular/presolve_lib.tex(,906) ideal i=
../singular_texi/./d2t_singular/presolve_lib.tex(,907) bv+su,
../singular_texi/./d2t_singular/presolve_lib.tex(,908) bw+tu,
../singular_texi/./d2t_singular/presolve_lib.tex(,909) sw+tv,
../singular_texi/./d2t_singular/presolve_lib.tex(,910) by+sx,
../singular_texi/./d2t_singular/presolve_lib.tex(,911) bz+tx,
../singular_texi/./d2t_singular/presolve_lib.tex(,912) sz+ty,
../singular_texi/./d2t_singular/presolve_lib.tex(,913) uy+vx,
../singular_texi/./d2t_singular/presolve_lib.tex(,914) uz+wx,
../singular_texi/./d2t_singular/presolve_lib.tex(,915) vz+wy,
../singular_texi/./d2t_singular/presolve_lib.tex(,916) bvz;
../singular_texi/./d2t_singular/presolve_lib.tex(,917) idealSplit(i);
../singular_texi/./d2t_singular/presolve_lib.tex(,918) @expansion{} [1]:
../singular_texi/./d2t_singular/presolve_lib.tex(,919) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,920) @expansion{}    _[2]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,921) @expansion{}    _[3]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,922) @expansion{}    _[4]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,923) @expansion{}    _[5]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,924) @expansion{}    _[6]=wy+vz
../singular_texi/./d2t_singular/presolve_lib.tex(,925) @expansion{} [2]:
../singular_texi/./d2t_singular/presolve_lib.tex(,926) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,927) @expansion{}    _[2]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,928) @expansion{}    _[3]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,929) @expansion{}    _[4]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,930) @expansion{}    _[5]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,931) @expansion{}    _[6]=vx+uy
../singular_texi/./d2t_singular/presolve_lib.tex(,932) @expansion{} [3]:
../singular_texi/./d2t_singular/presolve_lib.tex(,933) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,934) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,935) @expansion{}    _[3]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,936) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,937) @expansion{}    _[5]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,938) @expansion{}    _[6]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,939) @expansion{} [4]:
../singular_texi/./d2t_singular/presolve_lib.tex(,940) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,941) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,942) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,943) @expansion{}    _[4]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,944) @expansion{}    _[5]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,945) @expansion{}    _[6]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,946) @expansion{} [5]:
../singular_texi/./d2t_singular/presolve_lib.tex(,947) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,948) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,949) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,950) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,951) @expansion{}    _[5]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,952) @expansion{}    _[6]=tv+sw
../singular_texi/./d2t_singular/presolve_lib.tex(,953) @expansion{} [6]:
../singular_texi/./d2t_singular/presolve_lib.tex(,954) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,955) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,956) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,957) @expansion{}    _[4]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,958) @expansion{}    _[5]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,959) @expansion{}    _[6]=su+bv
../singular_texi/./d2t_singular/presolve_lib.tex(,960) @expansion{} [7]:
../singular_texi/./d2t_singular/presolve_lib.tex(,961) @expansion{}    _[1]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,962) @expansion{}    _[2]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,963) @expansion{}    _[3]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,964) @expansion{}    _[4]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,965) @expansion{}    _[5]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,966) @expansion{}    _[6]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,967) @expansion{} [8]:
../singular_texi/./d2t_singular/presolve_lib.tex(,968) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,969) @expansion{}    _[2]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,970) @expansion{}    _[3]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,971) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,972) @expansion{}    _[5]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,973) @expansion{}    _[6]=ty+sz
../singular_texi/./d2t_singular/presolve_lib.tex(,974) @expansion{} [9]:
../singular_texi/./d2t_singular/presolve_lib.tex(,975) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,976) @expansion{}    _[2]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,977) @expansion{}    _[3]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,978) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,979) @expansion{}    _[5]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,980) @expansion{}    _[6]=sx+by
../singular_texi/./d2t_singular/presolve_lib.tex(,981) @expansion{} [10]:
../singular_texi/./d2t_singular/presolve_lib.tex(,982) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,983) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,984) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,985) @expansion{}    _[4]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,986) @expansion{}    _[5]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,987) @expansion{}    _[6]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,988) @expansion{} [11]:
../singular_texi/./d2t_singular/presolve_lib.tex(,989) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,990) @expansion{}    _[2]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,991) @expansion{}    _[3]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,992) @expansion{}    _[4]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,993) @expansion{}    _[5]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,994) @expansion{}    _[6]=wx+uz
../singular_texi/./d2t_singular/presolve_lib.tex(,995) @expansion{} [12]:
../singular_texi/./d2t_singular/presolve_lib.tex(,996) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,997) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,998) @expansion{}    _[3]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,999) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,1000) @expansion{}    _[5]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,1001) @expansion{}    _[6]=b
../singular_texi/./d2t_singular/presolve_lib.tex(,1002) @expansion{} [13]:
../singular_texi/./d2t_singular/presolve_lib.tex(,1003) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,1004) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,1005) @expansion{}    _[3]=x
../singular_texi/./d2t_singular/presolve_lib.tex(,1006) @expansion{}    _[4]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,1007) @expansion{}    _[5]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,1008) @expansion{}    _[6]=tu+bw
../singular_texi/./d2t_singular/presolve_lib.tex(,1009) @expansion{} [14]:
../singular_texi/./d2t_singular/presolve_lib.tex(,1010) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/presolve_lib.tex(,1011) @expansion{}    _[2]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,1012) @expansion{}    _[3]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,1013) @expansion{}    _[4]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,1014) @expansion{}    _[5]=t
../singular_texi/./d2t_singular/presolve_lib.tex(,1015) @expansion{}    _[6]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,1016) @expansion{} [15]:
../singular_texi/./d2t_singular/presolve_lib.tex(,1017) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/presolve_lib.tex(,1018) @expansion{}    _[2]=w
../singular_texi/./d2t_singular/presolve_lib.tex(,1019) @expansion{}    _[3]=v
../singular_texi/./d2t_singular/presolve_lib.tex(,1020) @expansion{}    _[4]=u
../singular_texi/./d2t_singular/presolve_lib.tex(,1021) @expansion{}    _[5]=s
../singular_texi/./d2t_singular/presolve_lib.tex(,1022) @expansion{}    _[6]=tx+bz
../singular_texi/./d2t_singular/presolve_lib.tex(,1023) @c end example idealSplit d2t_singular/presolve_lib.doc:718
../singular_texi/./d2t_singular/presolve_lib.tex(,1024) @end smallexample
../singular_texi/./d2t_singular/presolve_lib.tex(,1025) @c ---end content idealSplit---
../singular_texi/singular.tex(,550) @c ---------------------------------------------------------
../singular_texi/singular.tex(,551) @node solve_lib, triang_lib, presolve_lib, Symbolic-numerical solving
../singular_texi/singular.tex(,552) @subsection solve_lib
../singular_texi/singular.tex(,553) @c include of docu for solve.lib
../singular_texi/./d2t_singular/solve_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/solve_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/solve_lib.doc
../singular_texi/./d2t_singular/solve_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/solve_lib.doc INSTEAD
../singular_texi/./d2t_singular/solve_lib.tex(,4) @c library version: (1.21.2.14,2003/05/16)
../singular_texi/./d2t_singular/solve_lib.tex(,5) @c library file: ../Singular/LIB/solve.lib
../singular_texi/./d2t_singular/solve_lib.tex(,6) @cindex solve.lib
../singular_texi/./d2t_singular/solve_lib.tex(,7) @cindex solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/solve_lib.tex(,10) solve.lib
../singular_texi/./d2t_singular/solve_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/solve_lib.tex(,12)      Complex Solving of Polynomial Systems
../singular_texi/./d2t_singular/solve_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/solve_lib.tex(,14) Moritz Wenk, email: wenk@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/solve_lib.tex(,15) @*Wilfred Pohl, email: pohl@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/solve_lib.tex(,16) 
../singular_texi/./d2t_singular/solve_lib.tex(,17) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,18) 
../singular_texi/./d2t_singular/solve_lib.tex(,19) @strong{Procedures:}
../singular_texi/./d2t_singular/solve_lib.tex(,20) @menu
../singular_texi/./d2t_singular/solve_lib.tex(,21) * laguerre_solve:: find all roots of univariate polynomial p
../singular_texi/./d2t_singular/solve_lib.tex(,22) * solve:: all roots of 0-dim. ideal i using triangular sets
../singular_texi/./d2t_singular/solve_lib.tex(,23) * ures_solve:: find all roots of 0-dimensional ideal i with resultants
../singular_texi/./d2t_singular/solve_lib.tex(,24) * mp_res_mat:: multipolynomial resultant matrix of ideal i
../singular_texi/./d2t_singular/solve_lib.tex(,25) * interpolate:: interpolate poly from evaluation points i and results j
../singular_texi/./d2t_singular/solve_lib.tex(,26) * fglm_solve:: find roots of 0-dim. ideal using FGLM and lex_solve
../singular_texi/./d2t_singular/solve_lib.tex(,27) * lex_solve:: find roots of reduced lexicographic standard basis
../singular_texi/./d2t_singular/solve_lib.tex(,28) * simplexOut:: prints solution of simplex in nice format
../singular_texi/./d2t_singular/solve_lib.tex(,29) * triangLf_solve:: find roots using triangular sys. (factorizing Lazard)
../singular_texi/./d2t_singular/solve_lib.tex(,30) * triangM_solve:: find roots of given triangular system (Moeller)
../singular_texi/./d2t_singular/solve_lib.tex(,31) * triangL_solve:: find roots using triangular system (Lazard)
../singular_texi/./d2t_singular/solve_lib.tex(,32) * triang_solve:: find roots of given triangular system
../singular_texi/./d2t_singular/solve_lib.tex(,33) @end menu
../singular_texi/./d2t_singular/solve_lib.tex(,34) @c ---end content LibInfo---
../singular_texi/./d2t_singular/solve_lib.tex(,35) 
../singular_texi/./d2t_singular/solve_lib.tex(,36) @c ------------------- laguerre_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,37) @node laguerre_solve, solve,, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,38) @subsubsection laguerre_solve
../singular_texi/./d2t_singular/solve_lib.tex(,39) @cindex laguerre_solve
../singular_texi/./d2t_singular/solve_lib.tex(,40) @c ---content laguerre_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,41) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,42) 
../singular_texi/./d2t_singular/solve_lib.tex(,43) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,44) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,45) laguerre_solve(f [, m, l, n, s] ); f = polynomial,@*
../singular_texi/./d2t_singular/solve_lib.tex(,46) m, l, n, s = integers (control parameters of the method)
../singular_texi/./d2t_singular/solve_lib.tex(,47) @format
../singular_texi/./d2t_singular/solve_lib.tex(,48)  m: precision of output in digits ( 4 <= m), if basering is not ring of 
../singular_texi/./d2t_singular/solve_lib.tex(,49)       complex numbers;
../singular_texi/./d2t_singular/solve_lib.tex(,50)  l: precision of internal computation in decimal digits ( l >=8 )
../singular_texi/./d2t_singular/solve_lib.tex(,51)       only if the basering is not complex or complex with smaller precision;
../singular_texi/./d2t_singular/solve_lib.tex(,52)  n: control of multiplicity of roots or of splitting of f into
../singular_texi/./d2t_singular/solve_lib.tex(,53)       squarefree factors
../singular_texi/./d2t_singular/solve_lib.tex(,54)       n < 0, no split of f (good, if all roots are simple)
../singular_texi/./d2t_singular/solve_lib.tex(,55)       n >= 0, try to split
../singular_texi/./d2t_singular/solve_lib.tex(,56)       n = 0, return only different roots
../singular_texi/./d2t_singular/solve_lib.tex(,57)       n > 0, find all roots (with multiplicity)
../singular_texi/./d2t_singular/solve_lib.tex(,58)  s: s != 0, returns ERROR if  | f(root) | > 0.1^m (when computing in the 
../singular_texi/./d2t_singular/solve_lib.tex(,59)       current ring)
../singular_texi/./d2t_singular/solve_lib.tex(,60)  ( default: m, l, n, s = 8, 30, 1, 0 )
../singular_texi/./d2t_singular/solve_lib.tex(,61) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,62) 
../singular_texi/./d2t_singular/solve_lib.tex(,63) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,64) f is a univariate polynomial;@*
../singular_texi/./d2t_singular/solve_lib.tex(,65) basering has characteristic 0 and is either complex or without
../singular_texi/./d2t_singular/solve_lib.tex(,66) parameters.
../singular_texi/./d2t_singular/solve_lib.tex(,67) 
../singular_texi/./d2t_singular/solve_lib.tex(,68) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,69) list of (complex) roots of the polynomial f, depending on n. The
../singular_texi/./d2t_singular/solve_lib.tex(,70) result is of type
../singular_texi/./d2t_singular/solve_lib.tex(,71) @format
../singular_texi/./d2t_singular/solve_lib.tex(,72)  string: if the basering is not complex,
../singular_texi/./d2t_singular/solve_lib.tex(,73)  number: otherwise.
../singular_texi/./d2t_singular/solve_lib.tex(,74) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,75) 
../singular_texi/./d2t_singular/solve_lib.tex(,76) @item @strong{Note:}
../singular_texi/./d2t_singular/solve_lib.tex(,77) If printlevel >0: displays comments ( default = 0 ).
../singular_texi/./d2t_singular/solve_lib.tex(,78) @*If s != 0 and if the procedure stops with ERROR, try a higher
../singular_texi/./d2t_singular/solve_lib.tex(,79) internal precision m.
../singular_texi/./d2t_singular/solve_lib.tex(,80) 
../singular_texi/./d2t_singular/solve_lib.tex(,81) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,82) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,83) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,84) @c reused example laguerre_solve d2t_singular/solve_lib.doc:82 
../singular_texi/./d2t_singular/solve_lib.tex(,85) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,86) // Find all roots of an univariate polynomial using Laguerre's method:
../singular_texi/./d2t_singular/solve_lib.tex(,87) ring rs1= 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,88) poly f = 15x5 + x3 + x2 - 10;
../singular_texi/./d2t_singular/solve_lib.tex(,89) // 10 digits precision
../singular_texi/./d2t_singular/solve_lib.tex(,90) laguerre_solve(f,10);
../singular_texi/./d2t_singular/solve_lib.tex(,91) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,92) @expansion{}    (0.2930464644-i*0.9003002396)
../singular_texi/./d2t_singular/solve_lib.tex(,93) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,94) @expansion{}    (0.2930464644+i*0.9003002396)
../singular_texi/./d2t_singular/solve_lib.tex(,95) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,96) @expansion{}    (-0.7392783383-i*0.5355190078)
../singular_texi/./d2t_singular/solve_lib.tex(,97) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,98) @expansion{}    (-0.7392783383+i*0.5355190078)
../singular_texi/./d2t_singular/solve_lib.tex(,99) @expansion{} [5]:
../singular_texi/./d2t_singular/solve_lib.tex(,100) @expansion{}    0.8924637479
../singular_texi/./d2t_singular/solve_lib.tex(,101) // Now with complex coefficients,
../singular_texi/./d2t_singular/solve_lib.tex(,102) // internal precision is 30 digits (default)
../singular_texi/./d2t_singular/solve_lib.tex(,103) printlevel=2;
../singular_texi/./d2t_singular/solve_lib.tex(,104) ring rsc= (real,10,i),x,lp;
../singular_texi/./d2t_singular/solve_lib.tex(,105) poly f = (15.4+i*5)*x^5 + (25.0e-2+i*2)*x^3 + x2 - 10*i;
../singular_texi/./d2t_singular/solve_lib.tex(,106) list l = laguerre_solve(f);
../singular_texi/./d2t_singular/solve_lib.tex(,107) @expansion{} //BEGIN laguerre_solve
../singular_texi/./d2t_singular/solve_lib.tex(,108) @expansion{} //control: complex ring with precision 30
../singular_texi/./d2t_singular/solve_lib.tex(,109) @expansion{} //working in:  ring lagc=(complex,30,30),x,lp;
../singular_texi/./d2t_singular/solve_lib.tex(,110) @expansion{} //         polynomial has complex coefficients
../singular_texi/./d2t_singular/solve_lib.tex(,111) @expansion{} //split in working ring:
../singular_texi/./d2t_singular/solve_lib.tex(,112) @expansion{} // split without result
../singular_texi/./d2t_singular/solve_lib.tex(,113) @expansion{} //END laguerre_solve
../singular_texi/./d2t_singular/solve_lib.tex(,114) l;
../singular_texi/./d2t_singular/solve_lib.tex(,115) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,116) @expansion{}    (0.04588498039+i*0.9133296179)
../singular_texi/./d2t_singular/solve_lib.tex(,117) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,118) @expansion{}    (0.5037408279-i*0.8058051828)
../singular_texi/./d2t_singular/solve_lib.tex(,119) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,120) @expansion{}    (-0.5462895588-i*0.6796668873)
../singular_texi/./d2t_singular/solve_lib.tex(,121) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,122) @expansion{}    (0.8524014357+i*0.2163760334)
../singular_texi/./d2t_singular/solve_lib.tex(,123) @expansion{} [5]:
../singular_texi/./d2t_singular/solve_lib.tex(,124) @expansion{}    (-0.8557376852+i*0.3557664188)
../singular_texi/./d2t_singular/solve_lib.tex(,125) // check result, value of substituted poly should be near to zero
../singular_texi/./d2t_singular/solve_lib.tex(,126) // remember that l contains a list of strings
../singular_texi/./d2t_singular/solve_lib.tex(,127) // in the case of a different ring
../singular_texi/./d2t_singular/solve_lib.tex(,128) subst(f,x,l[1]);
../singular_texi/./d2t_singular/solve_lib.tex(,129) @expansion{} 0
../singular_texi/./d2t_singular/solve_lib.tex(,130) subst(f,x,l[2]);
../singular_texi/./d2t_singular/solve_lib.tex(,131) @expansion{} 0
../singular_texi/./d2t_singular/solve_lib.tex(,132) @c end example laguerre_solve d2t_singular/solve_lib.doc:82
../singular_texi/./d2t_singular/solve_lib.tex(,133) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,134) @c ---end content laguerre_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,135) 
../singular_texi/./d2t_singular/solve_lib.tex(,136) @c ------------------- solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,137) @node solve, ures_solve, laguerre_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,138) @subsubsection solve
../singular_texi/./d2t_singular/solve_lib.tex(,139) @cindex solve
../singular_texi/./d2t_singular/solve_lib.tex(,140) @c ---content solve---
../singular_texi/./d2t_singular/solve_lib.tex(,141) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,142) 
../singular_texi/./d2t_singular/solve_lib.tex(,143) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,144) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,145) the ideal is 0-dimensional;@*
../singular_texi/./d2t_singular/solve_lib.tex(,146) basering has characteristic 0 and is either complex or
../singular_texi/./d2t_singular/solve_lib.tex(,147) without parameters;
../singular_texi/./d2t_singular/solve_lib.tex(,148) 
../singular_texi/./d2t_singular/solve_lib.tex(,149) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,150) list of solutions of the ideal G, depending on n; one solution is a
../singular_texi/./d2t_singular/solve_lib.tex(,151) list of complex numbers in the generated output ring (the new
../singular_texi/./d2t_singular/solve_lib.tex(,152) basering).
../singular_texi/./d2t_singular/solve_lib.tex(,153) @format
../singular_texi/./d2t_singular/solve_lib.tex(,154)  The result is a list L
../singular_texi/./d2t_singular/solve_lib.tex(,155)     n  = 0: a list of all different solutions (L[i]),
../singular_texi/./d2t_singular/solve_lib.tex(,156)     n != 0: a list of two elements,
../singular_texi/./d2t_singular/solve_lib.tex(,157)             L[i][1] contains all different solutions with the same multiplicity
../singular_texi/./d2t_singular/solve_lib.tex(,158)             L[i][2] the multiplicity
../singular_texi/./d2t_singular/solve_lib.tex(,159)  L is ordered w.r.t. multiplicity (the smallest first).
../singular_texi/./d2t_singular/solve_lib.tex(,160) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,161) 
../singular_texi/./d2t_singular/solve_lib.tex(,162) @item @strong{Note:}
../singular_texi/./d2t_singular/solve_lib.tex(,163) If the problem is not 0-dim. the procedure stops with ERROR, if the
../singular_texi/./d2t_singular/solve_lib.tex(,164) ideal G is not a lex. standard basis, it is generated with internal
../singular_texi/./d2t_singular/solve_lib.tex(,165) computation (Hilbert driven), if the input-ring (with char 0) has
../singular_texi/./d2t_singular/solve_lib.tex(,166) the name "<A>", the lexicographical and complex output-ring has the
../singular_texi/./d2t_singular/solve_lib.tex(,167) name "<A>C".
../singular_texi/./d2t_singular/solve_lib.tex(,168) 
../singular_texi/./d2t_singular/solve_lib.tex(,169) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,170) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,171) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,172) @c reused example solve d2t_singular/solve_lib.doc:141 
../singular_texi/./d2t_singular/solve_lib.tex(,173) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,174) // Find all roots of a multivariate ideal using triangular sets:
../singular_texi/./d2t_singular/solve_lib.tex(,175) int d=4;// with these 3 parameters you may construct
../singular_texi/./d2t_singular/solve_lib.tex(,176) int t=3;// very hard problems for 'solve'
../singular_texi/./d2t_singular/solve_lib.tex(,177) int s=2;
../singular_texi/./d2t_singular/solve_lib.tex(,178) int i;
../singular_texi/./d2t_singular/solve_lib.tex(,179) ring A=0,(x(1..d)),dp;
../singular_texi/./d2t_singular/solve_lib.tex(,180) poly p=-1;
../singular_texi/./d2t_singular/solve_lib.tex(,181) for(i=d;i>0;i--)@{p=p+x(i)^s;@}
../singular_texi/./d2t_singular/solve_lib.tex(,182) ideal I=x(d)^t-x(d)^s+p;
../singular_texi/./d2t_singular/solve_lib.tex(,183) for(i=d-1;i>0;i--)@{I=x(i)^t-x(i)^s+p,I;@}
../singular_texi/./d2t_singular/solve_lib.tex(,184) I;
../singular_texi/./d2t_singular/solve_lib.tex(,185) @expansion{} I[1]=x(1)^3+x(2)^2+x(3)^2+x(4)^2-1
../singular_texi/./d2t_singular/solve_lib.tex(,186) @expansion{} I[2]=x(2)^3+x(1)^2+x(3)^2+x(4)^2-1
../singular_texi/./d2t_singular/solve_lib.tex(,187) @expansion{} I[3]=x(3)^3+x(1)^2+x(2)^2+x(4)^2-1
../singular_texi/./d2t_singular/solve_lib.tex(,188) @expansion{} I[4]=x(4)^3+x(1)^2+x(2)^2+x(3)^2-1
../singular_texi/./d2t_singular/solve_lib.tex(,189) // the mutiplicity is
../singular_texi/./d2t_singular/solve_lib.tex(,190) vdim(std(I));
../singular_texi/./d2t_singular/solve_lib.tex(,191) @expansion{} 81
../singular_texi/./d2t_singular/solve_lib.tex(,192) list l1=solve(I,6,0);
../singular_texi/./d2t_singular/solve_lib.tex(,193) @expansion{} // name of new current ring: AC
../singular_texi/./d2t_singular/solve_lib.tex(,194) // the current ring is
../singular_texi/./d2t_singular/solve_lib.tex(,195) AC;
../singular_texi/./d2t_singular/solve_lib.tex(,196) @expansion{} //   characteristic : 0 (complex:6 digits, additional 6 digits)
../singular_texi/./d2t_singular/solve_lib.tex(,197) @expansion{} //   1 parameter    : i 
../singular_texi/./d2t_singular/solve_lib.tex(,198) @expansion{} //   minpoly        : (i^2+1)
../singular_texi/./d2t_singular/solve_lib.tex(,199) @expansion{} //   number of vars : 4
../singular_texi/./d2t_singular/solve_lib.tex(,200) @expansion{} //        block   1 : ordering lp
../singular_texi/./d2t_singular/solve_lib.tex(,201) @expansion{} //                  : names    x(1) x(2) x(3) x(4) 
../singular_texi/./d2t_singular/solve_lib.tex(,202) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/solve_lib.tex(,203) // you must start with char. 0
../singular_texi/./d2t_singular/solve_lib.tex(,204) setring A;
../singular_texi/./d2t_singular/solve_lib.tex(,205) list l2=solve(I,6,1);
../singular_texi/./d2t_singular/solve_lib.tex(,206) @expansion{} // name of current ring: AC
../singular_texi/./d2t_singular/solve_lib.tex(,207) // the number of different solutions is
../singular_texi/./d2t_singular/solve_lib.tex(,208) size(l1);
../singular_texi/./d2t_singular/solve_lib.tex(,209) @expansion{} 37
../singular_texi/./d2t_singular/solve_lib.tex(,210) // this is equal to
../singular_texi/./d2t_singular/solve_lib.tex(,211) size(l2[1][1])+size(l2[2][1]);
../singular_texi/./d2t_singular/solve_lib.tex(,212) @expansion{} 37
../singular_texi/./d2t_singular/solve_lib.tex(,213) // the number of solutions with multiplicity is
../singular_texi/./d2t_singular/solve_lib.tex(,214) size(l2[1][1])*l2[1][2]+size(l2[2][1])*l2[2][2];
../singular_texi/./d2t_singular/solve_lib.tex(,215) @expansion{} 81
../singular_texi/./d2t_singular/solve_lib.tex(,216) // the solutions with multiplicity
../singular_texi/./d2t_singular/solve_lib.tex(,217) l2[2][2];
../singular_texi/./d2t_singular/solve_lib.tex(,218) @expansion{} 12
../singular_texi/./d2t_singular/solve_lib.tex(,219) // are
../singular_texi/./d2t_singular/solve_lib.tex(,220) l2[2][1];
../singular_texi/./d2t_singular/solve_lib.tex(,221) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,222) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,223) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,224) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,225) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,226) @expansion{}    [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,227) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,228) @expansion{}    [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,229) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,230) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,231) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,232) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,233) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,234) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,235) @expansion{}    [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,236) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,237) @expansion{}    [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,238) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,239) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,240) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,241) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,242) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,243) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,244) @expansion{}    [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,245) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,246) @expansion{}    [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,247) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,248) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,249) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,250) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,251) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,252) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,253) @expansion{}    [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,254) @expansion{}       0
../singular_texi/./d2t_singular/solve_lib.tex(,255) @expansion{}    [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,256) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,257) @c end example solve d2t_singular/solve_lib.doc:141
../singular_texi/./d2t_singular/solve_lib.tex(,258) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,259) @c ---end content solve---
../singular_texi/./d2t_singular/solve_lib.tex(,260) 
../singular_texi/./d2t_singular/solve_lib.tex(,261) @c ------------------- ures_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,262) @node ures_solve, mp_res_mat, solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,263) @subsubsection ures_solve
../singular_texi/./d2t_singular/solve_lib.tex(,264) @cindex ures_solve
../singular_texi/./d2t_singular/solve_lib.tex(,265) @c ---content ures_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,266) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,267) 
../singular_texi/./d2t_singular/solve_lib.tex(,268) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,269) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,270) ures_solve(i [, k, p] ); i = ideal, k, p = integers
../singular_texi/./d2t_singular/solve_lib.tex(,271) @format
../singular_texi/./d2t_singular/solve_lib.tex(,272)    k=0: use sparse resultant matrix of Gelfand, Kapranov and Zelevinsky,
../singular_texi/./d2t_singular/solve_lib.tex(,273)    k=1: use resultant matrix of Macaulay which works only for
../singular_texi/./d2t_singular/solve_lib.tex(,274)           homogeneous ideals,
../singular_texi/./d2t_singular/solve_lib.tex(,275)    p>0: defines precision of the long floats for internal computation
../singular_texi/./d2t_singular/solve_lib.tex(,276)           if the basering is not complex (in decimal digits),
../singular_texi/./d2t_singular/solve_lib.tex(,277)    (default: k=0, p=30)
../singular_texi/./d2t_singular/solve_lib.tex(,278) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,279) 
../singular_texi/./d2t_singular/solve_lib.tex(,280) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,281) i is a zerodimensional ideal with
../singular_texi/./d2t_singular/solve_lib.tex(,282) @*nvars(basering) = ncols(i) = number of vars
../singular_texi/./d2t_singular/solve_lib.tex(,283) @*actually occurring in i,
../singular_texi/./d2t_singular/solve_lib.tex(,284) 
../singular_texi/./d2t_singular/solve_lib.tex(,285) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,286) list of all (complex) roots of the polynomial system i = 0; the
../singular_texi/./d2t_singular/solve_lib.tex(,287) result is of type
../singular_texi/./d2t_singular/solve_lib.tex(,288) @format
../singular_texi/./d2t_singular/solve_lib.tex(,289)    string: if the basering is not complex,
../singular_texi/./d2t_singular/solve_lib.tex(,290)    number: otherwise.
../singular_texi/./d2t_singular/solve_lib.tex(,291) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,292) 
../singular_texi/./d2t_singular/solve_lib.tex(,293) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,294) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,295) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,296) @c reused example ures_solve d2t_singular/solve_lib.doc:211 
../singular_texi/./d2t_singular/solve_lib.tex(,297) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,298) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,299) ring rsq = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,300) ideal gls=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,301) ures_solve(gls,0,16);
../singular_texi/./d2t_singular/solve_lib.tex(,302) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,303) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,304) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,305) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,306) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,307) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,308) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,309) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,310) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,311) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,312) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,313) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,314) @expansion{}       2.82842712474619
../singular_texi/./d2t_singular/solve_lib.tex(,315) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,316) @expansion{}       1.414213562373095
../singular_texi/./d2t_singular/solve_lib.tex(,317) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,318) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,319) @expansion{}       -2.82842712474619
../singular_texi/./d2t_singular/solve_lib.tex(,320) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,321) @expansion{}       -1.414213562373095
../singular_texi/./d2t_singular/solve_lib.tex(,322) // result is a list (x,y)-coordinates as strings
../singular_texi/./d2t_singular/solve_lib.tex(,323) // now with complex coefficient field, precision is 20 digits
../singular_texi/./d2t_singular/solve_lib.tex(,324) ring rsc= (real,20,I),(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,325) ideal i = (2+3*I)*x2 + (0.35+I*45.0e-2)*y2 - 8, x2 + xy + (42.7)*y2;
../singular_texi/./d2t_singular/solve_lib.tex(,326) list l= ures_solve(i,0,10);
../singular_texi/./d2t_singular/solve_lib.tex(,327) // result is a list of (x,y)-coordinates of complex numbers
../singular_texi/./d2t_singular/solve_lib.tex(,328) l;
../singular_texi/./d2t_singular/solve_lib.tex(,329) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,330) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,331) @expansion{}       (-1.315392899374542198+I*0.70468233142752928117)
../singular_texi/./d2t_singular/solve_lib.tex(,332) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,333) @expansion{}       (0.12292646536251281054+I*0.19245727404407015049)
../singular_texi/./d2t_singular/solve_lib.tex(,334) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,335) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,336) @expansion{}       (1.315392899374542198-I*0.70468233142752928117)
../singular_texi/./d2t_singular/solve_lib.tex(,337) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,338) @expansion{}       (-0.12292646536251281054-I*0.19245727404407015049)
../singular_texi/./d2t_singular/solve_lib.tex(,339) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,340) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,341) @expansion{}       (1.31584587549391830705-I*0.70396753310002259573)
../singular_texi/./d2t_singular/solve_lib.tex(,342) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,343) @expansion{}       (0.092006639590217681983+I*0.20902112035965287775)
../singular_texi/./d2t_singular/solve_lib.tex(,344) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,345) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,346) @expansion{}       (-1.31584587549391830705+I*0.70396753310002259573)
../singular_texi/./d2t_singular/solve_lib.tex(,347) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,348) @expansion{}       (-0.092006639590217681983-I*0.20902112035965287775)
../singular_texi/./d2t_singular/solve_lib.tex(,349) // check the result
../singular_texi/./d2t_singular/solve_lib.tex(,350) subst(subst(i[1],x,l[1][1]),y,l[1][2]);
../singular_texi/./d2t_singular/solve_lib.tex(,351) @expansion{} 0
../singular_texi/./d2t_singular/solve_lib.tex(,352) @c end example ures_solve d2t_singular/solve_lib.doc:211
../singular_texi/./d2t_singular/solve_lib.tex(,353) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,354) @c ---end content ures_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,355) 
../singular_texi/./d2t_singular/solve_lib.tex(,356) @c ------------------- mp_res_mat -------------
../singular_texi/./d2t_singular/solve_lib.tex(,357) @node mp_res_mat, interpolate, ures_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,358) @subsubsection mp_res_mat
../singular_texi/./d2t_singular/solve_lib.tex(,359) @cindex mp_res_mat
../singular_texi/./d2t_singular/solve_lib.tex(,360) @c ---content mp_res_mat---
../singular_texi/./d2t_singular/solve_lib.tex(,361) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,362) 
../singular_texi/./d2t_singular/solve_lib.tex(,363) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,364) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,365) mp_res_mat(i [, k] ); i ideal, k integer,
../singular_texi/./d2t_singular/solve_lib.tex(,366) @format
../singular_texi/./d2t_singular/solve_lib.tex(,367)     k=0: sparse resultant matrix of Gelfand, Kapranov and Zelevinsky,
../singular_texi/./d2t_singular/solve_lib.tex(,368)     k=1: resultant matrix of Macaulay (k=0 is default)
../singular_texi/./d2t_singular/solve_lib.tex(,369) @end format
../singular_texi/./d2t_singular/solve_lib.tex(,370) 
../singular_texi/./d2t_singular/solve_lib.tex(,371) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,372) The number of elements in the input system must be the number of
../singular_texi/./d2t_singular/solve_lib.tex(,373) variables in the basering plus one;
../singular_texi/./d2t_singular/solve_lib.tex(,374) @*if k=1 then i must be homogeneous.
../singular_texi/./d2t_singular/solve_lib.tex(,375) 
../singular_texi/./d2t_singular/solve_lib.tex(,376) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,377) module representing the multipolynomial resultant matrix
../singular_texi/./d2t_singular/solve_lib.tex(,378) 
../singular_texi/./d2t_singular/solve_lib.tex(,379) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,380) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,381) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,382) @c reused example mp_res_mat d2t_singular/solve_lib.doc:256 
../singular_texi/./d2t_singular/solve_lib.tex(,383) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,384) // compute resultant matrix in ring with parameters (sparse resultant matrix)
../singular_texi/./d2t_singular/solve_lib.tex(,385) ring rsq= (0,u0,u1,u2),(x1,x2),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,386) ideal i= u0+u1*x1+u2*x2,x1^2 + x2^2 - 10,x1^2 + x1*x2 + 2*x2^2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,387) module m = mp_res_mat(i);
../singular_texi/./d2t_singular/solve_lib.tex(,388) print(m);
../singular_texi/./d2t_singular/solve_lib.tex(,389) @expansion{} -16,0,  -10,0,  (u0),0,   0,  0,   0,   0,  
../singular_texi/./d2t_singular/solve_lib.tex(,390) @expansion{} 0,  -16,0,  -10,(u2),(u0),0,  0,   0,   0,  
../singular_texi/./d2t_singular/solve_lib.tex(,391) @expansion{} 2,  0,  1,  0,  0,   (u2),0,  0,   0,   0,  
../singular_texi/./d2t_singular/solve_lib.tex(,392) @expansion{} 0,  2,  0,  1,  0,   0,   0,  0,   0,   0,  
../singular_texi/./d2t_singular/solve_lib.tex(,393) @expansion{} 0,  0,  0,  0,  (u1),0,   -10,(u0),0,   -16,
../singular_texi/./d2t_singular/solve_lib.tex(,394) @expansion{} 1,  0,  0,  0,  0,   (u1),0,  (u2),(u0),0,  
../singular_texi/./d2t_singular/solve_lib.tex(,395) @expansion{} 0,  1,  0,  0,  0,   0,   1,  0,   (u2),2,  
../singular_texi/./d2t_singular/solve_lib.tex(,396) @expansion{} 1,  0,  1,  0,  0,   0,   0,  (u1),0,   0,  
../singular_texi/./d2t_singular/solve_lib.tex(,397) @expansion{} 0,  1,  0,  1,  0,   0,   0,  0,   (u1),1,  
../singular_texi/./d2t_singular/solve_lib.tex(,398) @expansion{} 0,  0,  0,  0,  0,   0,   1,  0,   0,   1   
../singular_texi/./d2t_singular/solve_lib.tex(,399) // computing sparse resultant
../singular_texi/./d2t_singular/solve_lib.tex(,400) det(m);
../singular_texi/./d2t_singular/solve_lib.tex(,401) @expansion{} (-2*u0^4+18*u0^2*u1^2+4*u0^2*u1*u2+22*u0^2*u2^2-16*u1^4+80*u1^3*u2-52*u1^\
../singular_texi/./d2t_singular/solve_lib.tex(,402)    2*u2^2-120*u1*u2^3-36*u2^4)
../singular_texi/./d2t_singular/solve_lib.tex(,403) // compute resultant matrix (Macaulay resultant matrix)
../singular_texi/./d2t_singular/solve_lib.tex(,404) ring rdq= (0,u0,u1,u2),(x0,x1,x2),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,405) ideal h=  homog(imap(rsq,i),x0);
../singular_texi/./d2t_singular/solve_lib.tex(,406) h;
../singular_texi/./d2t_singular/solve_lib.tex(,407) @expansion{} h[1]=(u0)*x0+(u1)*x1+(u2)*x2
../singular_texi/./d2t_singular/solve_lib.tex(,408) @expansion{} h[2]=-10*x0^2+x1^2+x2^2
../singular_texi/./d2t_singular/solve_lib.tex(,409) @expansion{} h[3]=-16*x0^2+x1^2+x1*x2+2*x2^2
../singular_texi/./d2t_singular/solve_lib.tex(,410) module m = mp_res_mat(h,1);
../singular_texi/./d2t_singular/solve_lib.tex(,411) print(m);
../singular_texi/./d2t_singular/solve_lib.tex(,412) @expansion{} x0, x1, x2, 0, 0, 0, 0,0, 0, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,413) @expansion{} 0,  x0, 0,  x1,x2,0, 0,0, 0, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,414) @expansion{} 0,  0,  x0, 0, x1,x2,0,0, 0, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,415) @expansion{} -10,0,  0,  1, 0, 1, 0,0, 0, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,416) @expansion{} 0,  0,  0,  0, x0,0, 0,x1,x2,0,
../singular_texi/./d2t_singular/solve_lib.tex(,417) @expansion{} -16,0,  0,  1, 1, 2, 0,0, 0, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,418) @expansion{} 0,  -10,0,  0, 0, 0, 1,0, 1, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,419) @expansion{} 0,  0,  -10,0, 0, 0, 0,1, 0, 1,
../singular_texi/./d2t_singular/solve_lib.tex(,420) @expansion{} 0,  -16,0,  0, 0, 0, 1,1, 2, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,421) @expansion{} 0,  0,  -16,0, 0, 0, 0,1, 1, 2 
../singular_texi/./d2t_singular/solve_lib.tex(,422) // computing Macaulay resultant (should be the same as above!)
../singular_texi/./d2t_singular/solve_lib.tex(,423) det(m);
../singular_texi/./d2t_singular/solve_lib.tex(,424) @expansion{} 2*x0^4-18*x0^2*x1^2-4*x0^2*x1*x2-22*x0^2*x2^2+16*x1^4-80*x1^3*x2+52*x1^2*\
../singular_texi/./d2t_singular/solve_lib.tex(,425)    x2^2+120*x1*x2^3+36*x2^4
../singular_texi/./d2t_singular/solve_lib.tex(,426) // compute numerical sparse resultant matrix
../singular_texi/./d2t_singular/solve_lib.tex(,427) setring rsq;
../singular_texi/./d2t_singular/solve_lib.tex(,428) ideal ir= 15+2*x1+5*x2,x1^2 + x2^2 - 10,x1^2 + x1*x2 + 2*x2^2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,429) module mn = mp_res_mat(ir);
../singular_texi/./d2t_singular/solve_lib.tex(,430) print(mn);
../singular_texi/./d2t_singular/solve_lib.tex(,431) @expansion{} 15,0, -10,0,  0, 0, 0,  -16,0,  0,  
../singular_texi/./d2t_singular/solve_lib.tex(,432) @expansion{} 5, 15,0,  -10,0, 0, 0,  0,  -16,0,  
../singular_texi/./d2t_singular/solve_lib.tex(,433) @expansion{} 0, 5, 1,  0,  0, 0, 0,  2,  0,  0,  
../singular_texi/./d2t_singular/solve_lib.tex(,434) @expansion{} 0, 0, 0,  1,  0, 0, 0,  0,  2,  0,  
../singular_texi/./d2t_singular/solve_lib.tex(,435) @expansion{} 2, 0, 0,  0,  15,0, -10,0,  0,  -16,
../singular_texi/./d2t_singular/solve_lib.tex(,436) @expansion{} 0, 2, 0,  0,  5, 15,0,  1,  0,  0,  
../singular_texi/./d2t_singular/solve_lib.tex(,437) @expansion{} 0, 0, 0,  0,  0, 5, 1,  0,  1,  2,  
../singular_texi/./d2t_singular/solve_lib.tex(,438) @expansion{} 0, 0, 1,  0,  2, 0, 0,  1,  0,  0,  
../singular_texi/./d2t_singular/solve_lib.tex(,439) @expansion{} 0, 0, 0,  1,  0, 2, 0,  0,  1,  1,  
../singular_texi/./d2t_singular/solve_lib.tex(,440) @expansion{} 0, 0, 0,  0,  0, 0, 1,  0,  0,  1   
../singular_texi/./d2t_singular/solve_lib.tex(,441) // computing sparse resultant
../singular_texi/./d2t_singular/solve_lib.tex(,442) det(mn);
../singular_texi/./d2t_singular/solve_lib.tex(,443) @expansion{} -7056
../singular_texi/./d2t_singular/solve_lib.tex(,444) @c end example mp_res_mat d2t_singular/solve_lib.doc:256
../singular_texi/./d2t_singular/solve_lib.tex(,445) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,446) @c ---end content mp_res_mat---
../singular_texi/./d2t_singular/solve_lib.tex(,447) 
../singular_texi/./d2t_singular/solve_lib.tex(,448) @c ------------------- interpolate -------------
../singular_texi/./d2t_singular/solve_lib.tex(,449) @node interpolate, fglm_solve, mp_res_mat, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,450) @subsubsection interpolate
../singular_texi/./d2t_singular/solve_lib.tex(,451) @cindex interpolate
../singular_texi/./d2t_singular/solve_lib.tex(,452) @c ---content interpolate---
../singular_texi/./d2t_singular/solve_lib.tex(,453) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,454) 
../singular_texi/./d2t_singular/solve_lib.tex(,455) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,456) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,457) interpolate(p,v,d); p,v=ideals of numbers, d=integer
../singular_texi/./d2t_singular/solve_lib.tex(,458) 
../singular_texi/./d2t_singular/solve_lib.tex(,459) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,460) Ground field K is the field of rational numbers, p and v are lists
../singular_texi/./d2t_singular/solve_lib.tex(,461) of elements of the ground field K with p[j] != -1,0,1, size(p) = n
../singular_texi/./d2t_singular/solve_lib.tex(,462) (= number of vars) and size(v)=N=(d+1)^n.
../singular_texi/./d2t_singular/solve_lib.tex(,463) 
../singular_texi/./d2t_singular/solve_lib.tex(,464) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,465) poly f, the unique polynomial f of degree n*d with prescribed values
../singular_texi/./d2t_singular/solve_lib.tex(,466) v[i] at the points p(i)=(p[1]^(i-1),..,p[n]^(i-1)), i=1,..,N.
../singular_texi/./d2t_singular/solve_lib.tex(,467) 
../singular_texi/./d2t_singular/solve_lib.tex(,468) @item @strong{Note:}
../singular_texi/./d2t_singular/solve_lib.tex(,469) mainly useful when n=1, i.e. f is satisfying f(p^(i-1)) = v[i],
../singular_texi/./d2t_singular/solve_lib.tex(,470) i=1..d+1.
../singular_texi/./d2t_singular/solve_lib.tex(,471) 
../singular_texi/./d2t_singular/solve_lib.tex(,472) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,473) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,474) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,475) @c reused example interpolate d2t_singular/solve_lib.doc:311 
../singular_texi/./d2t_singular/solve_lib.tex(,476) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,477) ring r1 = 0,(x),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,478) // determine f with deg(f) = 4 and
../singular_texi/./d2t_singular/solve_lib.tex(,479) // v = values of f at points 3^0, 3^1, 3^2, 3^3, 3^4
../singular_texi/./d2t_singular/solve_lib.tex(,480) ideal v=16,0,11376,1046880,85949136;
../singular_texi/./d2t_singular/solve_lib.tex(,481) interpolate( 3, v, 4 );
../singular_texi/./d2t_singular/solve_lib.tex(,482) @expansion{} 2x4-22x2+36
../singular_texi/./d2t_singular/solve_lib.tex(,483) @c end example interpolate d2t_singular/solve_lib.doc:311
../singular_texi/./d2t_singular/solve_lib.tex(,484) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,485) @c inserted refs from d2t_singular/solve_lib.doc:320
../singular_texi/./d2t_singular/solve_lib.tex(,493) @strong{See also:}
../singular_texi/./d2t_singular/solve_lib.tex(,494) @ref{vandermonde}.
../singular_texi/./d2t_singular/solve_lib.tex(,496) @c end inserted refs from d2t_singular/solve_lib.doc:320
../singular_texi/./d2t_singular/solve_lib.tex(,497) 
../singular_texi/./d2t_singular/solve_lib.tex(,498) @c ---end content interpolate---
../singular_texi/./d2t_singular/solve_lib.tex(,499) 
../singular_texi/./d2t_singular/solve_lib.tex(,500) @c ------------------- fglm_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,501) @node fglm_solve, lex_solve, interpolate, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,502) @subsubsection fglm_solve
../singular_texi/./d2t_singular/solve_lib.tex(,503) @cindex fglm_solve
../singular_texi/./d2t_singular/solve_lib.tex(,504) @c ---content fglm_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,505) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,506) 
../singular_texi/./d2t_singular/solve_lib.tex(,507) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,508) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,509) fglm_solve(i [, p] ); i ideal, p integer
../singular_texi/./d2t_singular/solve_lib.tex(,510) 
../singular_texi/./d2t_singular/solve_lib.tex(,511) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,512) the ground field has char 0.
../singular_texi/./d2t_singular/solve_lib.tex(,513) 
../singular_texi/./d2t_singular/solve_lib.tex(,514) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,515) a list of numbers, the complex roots of i;
../singular_texi/./d2t_singular/solve_lib.tex(,516) @*p>0: gives precision of complex numbers in decimal digits (default:
../singular_texi/./d2t_singular/solve_lib.tex(,517) p=30).
../singular_texi/./d2t_singular/solve_lib.tex(,518) 
../singular_texi/./d2t_singular/solve_lib.tex(,519) @item @strong{Note:}
../singular_texi/./d2t_singular/solve_lib.tex(,520) The procedure uses a standard basis of i to determine all complex
../singular_texi/./d2t_singular/solve_lib.tex(,521) roots of i.
../singular_texi/./d2t_singular/solve_lib.tex(,522) @*It creates a ring rC with the same number of variables but with
../singular_texi/./d2t_singular/solve_lib.tex(,523) complex coefficients (and precision p).
../singular_texi/./d2t_singular/solve_lib.tex(,524) 
../singular_texi/./d2t_singular/solve_lib.tex(,525) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,526) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,527) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,528) @c reused example fglm_solve d2t_singular/solve_lib.doc:354 
../singular_texi/./d2t_singular/solve_lib.tex(,529) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,530) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,531) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,532) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,533) fglm_solve(s,10);
../singular_texi/./d2t_singular/solve_lib.tex(,534) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,535) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,536) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,537) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,538) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,539) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,540) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,541) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,542) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,543) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,544) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,545) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,546) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,547) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,548) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,549) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,550) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,551) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,552) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,553) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,554) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,555) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,556) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,557) @c end example fglm_solve d2t_singular/solve_lib.doc:354
../singular_texi/./d2t_singular/solve_lib.tex(,558) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,559) @c ---end content fglm_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,560) 
../singular_texi/./d2t_singular/solve_lib.tex(,561) @c ------------------- lex_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,562) @node lex_solve, simplexOut, fglm_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,563) @subsubsection lex_solve
../singular_texi/./d2t_singular/solve_lib.tex(,564) @cindex lex_solve
../singular_texi/./d2t_singular/solve_lib.tex(,565) @c ---content lex_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,566) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,567) 
../singular_texi/./d2t_singular/solve_lib.tex(,568) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,569) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,570) lex_solve( i[,p] ); i=ideal, p=integer,
../singular_texi/./d2t_singular/solve_lib.tex(,571)  @format
../singular_texi/./d2t_singular/solve_lib.tex(,572)   p>0: gives precision of complex numbers in decimal digits (default: p=30).
../singular_texi/./d2t_singular/solve_lib.tex(,573)  @end format
../singular_texi/./d2t_singular/solve_lib.tex(,574) 
../singular_texi/./d2t_singular/solve_lib.tex(,575) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,576) i is a reduced lexicographical Groebner bases of a zero-dimensional
../singular_texi/./d2t_singular/solve_lib.tex(,577) ideal, sorted by increasing leading terms.
../singular_texi/./d2t_singular/solve_lib.tex(,578) 
../singular_texi/./d2t_singular/solve_lib.tex(,579) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,580) nothing
../singular_texi/./d2t_singular/solve_lib.tex(,581) 
../singular_texi/./d2t_singular/solve_lib.tex(,582) @item @strong{Create:}
../singular_texi/./d2t_singular/solve_lib.tex(,583) The procedure creates a complec ring with the same variables but
../singular_texi/./d2t_singular/solve_lib.tex(,584) with complex coefficients (and precision p).
../singular_texi/./d2t_singular/solve_lib.tex(,585) @*In this ring a list rlist of numbers is created, in which the complex
../singular_texi/./d2t_singular/solve_lib.tex(,586) roots of i are stored.
../singular_texi/./d2t_singular/solve_lib.tex(,587) 
../singular_texi/./d2t_singular/solve_lib.tex(,588) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,589) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,590) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,591) @c reused example lex_solve d2t_singular/solve_lib.doc:395 
../singular_texi/./d2t_singular/solve_lib.tex(,592) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,593) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,594) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,595) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,596) lex_solve(stdfglm(s),10);
../singular_texi/./d2t_singular/solve_lib.tex(,597) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,598) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,599) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,600) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,601) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,602) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,603) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,604) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,605) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,606) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,607) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,608) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,609) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,610) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,611) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,612) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,613) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,614) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,615) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,616) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,617) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,618) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,619) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,620) @c end example lex_solve d2t_singular/solve_lib.doc:395
../singular_texi/./d2t_singular/solve_lib.tex(,621) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,622) @c ---end content lex_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,623) 
../singular_texi/./d2t_singular/solve_lib.tex(,624) @c ------------------- simplexOut -------------
../singular_texi/./d2t_singular/solve_lib.tex(,625) @node simplexOut, triangLf_solve, lex_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,626) @subsubsection simplexOut
../singular_texi/./d2t_singular/solve_lib.tex(,627) @cindex simplexOut
../singular_texi/./d2t_singular/solve_lib.tex(,628) @c ---content simplexOut---
../singular_texi/./d2t_singular/solve_lib.tex(,629) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,630) 
../singular_texi/./d2t_singular/solve_lib.tex(,631) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,632) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,633) simplexOut(l); l list
../singular_texi/./d2t_singular/solve_lib.tex(,634) 
../singular_texi/./d2t_singular/solve_lib.tex(,635) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,636) l is the output of simplex.
../singular_texi/./d2t_singular/solve_lib.tex(,637) 
../singular_texi/./d2t_singular/solve_lib.tex(,638) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,639) nothing. The procedure prints the computed solution of simplex
../singular_texi/./d2t_singular/solve_lib.tex(,640) (as strings) in a nice format.
../singular_texi/./d2t_singular/solve_lib.tex(,641) 
../singular_texi/./d2t_singular/solve_lib.tex(,642) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,643) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,644) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,645) @c reused example simplexOut d2t_singular/solve_lib.doc:427 
../singular_texi/./d2t_singular/solve_lib.tex(,646) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,647) ring r = (real,10),(x),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,648) // consider the max. problem:
../singular_texi/./d2t_singular/solve_lib.tex(,649) //
../singular_texi/./d2t_singular/solve_lib.tex(,650) //    maximize  x(1) + x(2) + 3*x(3) - 0.5*x(4)
../singular_texi/./d2t_singular/solve_lib.tex(,651) //
../singular_texi/./d2t_singular/solve_lib.tex(,652) //  with constraints:   x(1) +          2*x(3)          <= 740
../singular_texi/./d2t_singular/solve_lib.tex(,653) //                             2*x(2)          - 7*x(4) <=   0
../singular_texi/./d2t_singular/solve_lib.tex(,654) //                               x(2) -   x(3) + 2*x(4) >=   0.5
../singular_texi/./d2t_singular/solve_lib.tex(,655) //                      x(1) +   x(2) +   x(3) +   x(4)  =   9
../singular_texi/./d2t_singular/solve_lib.tex(,656) //
../singular_texi/./d2t_singular/solve_lib.tex(,657) matrix sm[5][5]=   0, 1, 1, 3,-0.5,
../singular_texi/./d2t_singular/solve_lib.tex(,658) 740,-1, 0,-2, 0,
../singular_texi/./d2t_singular/solve_lib.tex(,659) 0, 0,-2, 0, 7,
../singular_texi/./d2t_singular/solve_lib.tex(,660) 0.5, 0,-1, 1,-2,
../singular_texi/./d2t_singular/solve_lib.tex(,661) 9,-1,-1,-1,-1;
../singular_texi/./d2t_singular/solve_lib.tex(,662) int n = 4;  // number of constraints
../singular_texi/./d2t_singular/solve_lib.tex(,663) int m = 4;  // number of variables
../singular_texi/./d2t_singular/solve_lib.tex(,664) int m1= 2;  // number of <= constraints
../singular_texi/./d2t_singular/solve_lib.tex(,665) int m2= 1;  // number of >= constraints
../singular_texi/./d2t_singular/solve_lib.tex(,666) int m3= 1;  // number of == constraints
../singular_texi/./d2t_singular/solve_lib.tex(,667) list sol=simplex(sm, n, m, m1, m2, m3);
../singular_texi/./d2t_singular/solve_lib.tex(,668) simplexOut(sol);
../singular_texi/./d2t_singular/solve_lib.tex(,669) @expansion{} z = 17.025
../singular_texi/./d2t_singular/solve_lib.tex(,670) @expansion{} x2 = 3.325
../singular_texi/./d2t_singular/solve_lib.tex(,671) @expansion{} x4 = 0.95
../singular_texi/./d2t_singular/solve_lib.tex(,672) @expansion{} x3 = 4.725
../singular_texi/./d2t_singular/solve_lib.tex(,673) @c end example simplexOut d2t_singular/solve_lib.doc:427
../singular_texi/./d2t_singular/solve_lib.tex(,674) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,675) @c inserted refs from d2t_singular/solve_lib.doc:453
../singular_texi/./d2t_singular/solve_lib.tex(,683) @strong{See also:}
../singular_texi/./d2t_singular/solve_lib.tex(,684) @ref{simplex}.
../singular_texi/./d2t_singular/solve_lib.tex(,686) @c end inserted refs from d2t_singular/solve_lib.doc:453
../singular_texi/./d2t_singular/solve_lib.tex(,687) 
../singular_texi/./d2t_singular/solve_lib.tex(,688) @c ---end content simplexOut---
../singular_texi/./d2t_singular/solve_lib.tex(,689) 
../singular_texi/./d2t_singular/solve_lib.tex(,690) @c ------------------- triangLf_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,691) @node triangLf_solve, triangM_solve, simplexOut, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,692) @subsubsection triangLf_solve
../singular_texi/./d2t_singular/solve_lib.tex(,693) @cindex triangLf_solve
../singular_texi/./d2t_singular/solve_lib.tex(,694) @c ---content triangLf_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,695) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,696) 
../singular_texi/./d2t_singular/solve_lib.tex(,697) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,698) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,699) triangLf_solve(i [, p] ); i ideal, p integer,
../singular_texi/./d2t_singular/solve_lib.tex(,700) @*p>0: gives precision of complex numbers in digits (default: p=30).
../singular_texi/./d2t_singular/solve_lib.tex(,701) 
../singular_texi/./d2t_singular/solve_lib.tex(,702) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,703) the ground field has char 0; i is a zero-dimensional ideal
../singular_texi/./d2t_singular/solve_lib.tex(,704) 
../singular_texi/./d2t_singular/solve_lib.tex(,705) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,706) nothing
../singular_texi/./d2t_singular/solve_lib.tex(,707) 
../singular_texi/./d2t_singular/solve_lib.tex(,708) @item @strong{Create:}
../singular_texi/./d2t_singular/solve_lib.tex(,709) The procedure creates a ring rC with the same number of variables but
../singular_texi/./d2t_singular/solve_lib.tex(,710) with complex coefficients (and precision p).@*
../singular_texi/./d2t_singular/solve_lib.tex(,711) In rC a list rlist of numbers is created, in which the complex
../singular_texi/./d2t_singular/solve_lib.tex(,712) roots of i are stored.@*
../singular_texi/./d2t_singular/solve_lib.tex(,713) The proc uses a triangular system (Lazard's Algorithm with
../singular_texi/./d2t_singular/solve_lib.tex(,714) factorization) computed from a standard basis to determine recursively
../singular_texi/./d2t_singular/solve_lib.tex(,715) all complex roots with Laguerre's algorithm of input ideal i.
../singular_texi/./d2t_singular/solve_lib.tex(,716) 
../singular_texi/./d2t_singular/solve_lib.tex(,717) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,718) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,719) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,720) @c reused example triangLf_solve d2t_singular/solve_lib.doc:489 
../singular_texi/./d2t_singular/solve_lib.tex(,721) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,722) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,723) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,724) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,725) triangLf_solve(s,10);
../singular_texi/./d2t_singular/solve_lib.tex(,726) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,727) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,728) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,729) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,730) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,731) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,732) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,733) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,734) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,735) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,736) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,737) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,738) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,739) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,740) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,741) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,742) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,743) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,744) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,745) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,746) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,747) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,748) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,749) @c end example triangLf_solve d2t_singular/solve_lib.doc:489
../singular_texi/./d2t_singular/solve_lib.tex(,750) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,751) @c ---end content triangLf_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,752) 
../singular_texi/./d2t_singular/solve_lib.tex(,753) @c ------------------- triangM_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,754) @node triangM_solve, triangL_solve, triangLf_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,755) @subsubsection triangM_solve
../singular_texi/./d2t_singular/solve_lib.tex(,756) @cindex triangM_solve
../singular_texi/./d2t_singular/solve_lib.tex(,757) @c ---content triangM_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,758) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,759) 
../singular_texi/./d2t_singular/solve_lib.tex(,760) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,761) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,762) triangM_solve(i [, p ] ); i=ideal, p=integer,
../singular_texi/./d2t_singular/solve_lib.tex(,763) @*p>0: gives precision of complex numbers in digits (default: p=30).
../singular_texi/./d2t_singular/solve_lib.tex(,764) 
../singular_texi/./d2t_singular/solve_lib.tex(,765) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,766) the ground field has char 0;@*
../singular_texi/./d2t_singular/solve_lib.tex(,767) i zero-dimensional ideal
../singular_texi/./d2t_singular/solve_lib.tex(,768) 
../singular_texi/./d2t_singular/solve_lib.tex(,769) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,770) nothing
../singular_texi/./d2t_singular/solve_lib.tex(,771) 
../singular_texi/./d2t_singular/solve_lib.tex(,772) @item @strong{Create:}
../singular_texi/./d2t_singular/solve_lib.tex(,773) The procedure creates a ring rC with the same number of variables but
../singular_texi/./d2t_singular/solve_lib.tex(,774) with complex coefficients (and precision p).@*
../singular_texi/./d2t_singular/solve_lib.tex(,775) In rC a list rlist of numbers is created, in which the complex
../singular_texi/./d2t_singular/solve_lib.tex(,776) roots of i are stored.@*
../singular_texi/./d2t_singular/solve_lib.tex(,777) The proc uses a triangular system (Moellers Algorithm) computed from a
../singular_texi/./d2t_singular/solve_lib.tex(,778) standard basis to determine recursively all complex roots with
../singular_texi/./d2t_singular/solve_lib.tex(,779) Laguerre's algorithm of input ideal i.
../singular_texi/./d2t_singular/solve_lib.tex(,780) 
../singular_texi/./d2t_singular/solve_lib.tex(,781) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,782) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,783) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,784) @c reused example triangM_solve d2t_singular/solve_lib.doc:531 
../singular_texi/./d2t_singular/solve_lib.tex(,785) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,786) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,787) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,788) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,789) triangM_solve(s,10);
../singular_texi/./d2t_singular/solve_lib.tex(,790) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,791) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,792) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,793) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,794) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,795) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,796) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,797) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,798) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,799) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,800) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,801) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,802) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,803) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,804) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,805) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,806) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,807) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,808) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,809) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,810) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,811) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,812) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,813) @c end example triangM_solve d2t_singular/solve_lib.doc:531
../singular_texi/./d2t_singular/solve_lib.tex(,814) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,815) @c ---end content triangM_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,816) 
../singular_texi/./d2t_singular/solve_lib.tex(,817) @c ------------------- triangL_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,818) @node triangL_solve, triang_solve, triangM_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,819) @subsubsection triangL_solve
../singular_texi/./d2t_singular/solve_lib.tex(,820) @cindex triangL_solve
../singular_texi/./d2t_singular/solve_lib.tex(,821) @c ---content triangL_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,822) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,823) 
../singular_texi/./d2t_singular/solve_lib.tex(,824) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,825) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,826) triangL_solve(i [, p] ); i=ideal, p=integer,@*
../singular_texi/./d2t_singular/solve_lib.tex(,827) p>0: gives precision of complex numbers in digits (default: p=30).
../singular_texi/./d2t_singular/solve_lib.tex(,828) 
../singular_texi/./d2t_singular/solve_lib.tex(,829) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,830) the ground field has char 0; i is a zero-dimensional ideal.
../singular_texi/./d2t_singular/solve_lib.tex(,831) 
../singular_texi/./d2t_singular/solve_lib.tex(,832) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,833) nothing
../singular_texi/./d2t_singular/solve_lib.tex(,834) 
../singular_texi/./d2t_singular/solve_lib.tex(,835) @item @strong{Create:}
../singular_texi/./d2t_singular/solve_lib.tex(,836) The procedure creates a ring rC with the same number of variables but
../singular_texi/./d2t_singular/solve_lib.tex(,837) with complex coefficients (and precision p).@*
../singular_texi/./d2t_singular/solve_lib.tex(,838) In rC a list rlist of numbers is created, in which the complex
../singular_texi/./d2t_singular/solve_lib.tex(,839) roots of i are stored.@*
../singular_texi/./d2t_singular/solve_lib.tex(,840) The proc uses a triangular system (Lazard's Algorithm) computed from
../singular_texi/./d2t_singular/solve_lib.tex(,841) a standard basis to determine recursively all complex roots with
../singular_texi/./d2t_singular/solve_lib.tex(,842) Laguerre's algorithm of input ideal i.
../singular_texi/./d2t_singular/solve_lib.tex(,843) 
../singular_texi/./d2t_singular/solve_lib.tex(,844) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,845) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,846) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,847) @c reused example triangL_solve d2t_singular/solve_lib.doc:572 
../singular_texi/./d2t_singular/solve_lib.tex(,848) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,849) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,850) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,851) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,852) triangL_solve(s,10);
../singular_texi/./d2t_singular/solve_lib.tex(,853) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,854) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,855) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,856) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,857) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,858) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,859) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,860) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,861) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,862) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,863) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,864) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,865) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,866) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,867) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,868) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,869) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,870) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,871) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,872) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,873) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,874) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,875) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,876) @c end example triangL_solve d2t_singular/solve_lib.doc:572
../singular_texi/./d2t_singular/solve_lib.tex(,877) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,878) @c ---end content triangL_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,879) 
../singular_texi/./d2t_singular/solve_lib.tex(,880) @c ------------------- triang_solve -------------
../singular_texi/./d2t_singular/solve_lib.tex(,881) @node triang_solve,, triangL_solve, solve_lib
../singular_texi/./d2t_singular/solve_lib.tex(,882) @subsubsection triang_solve
../singular_texi/./d2t_singular/solve_lib.tex(,883) @cindex triang_solve
../singular_texi/./d2t_singular/solve_lib.tex(,884) @c ---content triang_solve---
../singular_texi/./d2t_singular/solve_lib.tex(,885) Procedure from library @code{solve.lib} (@pxref{solve_lib}).
../singular_texi/./d2t_singular/solve_lib.tex(,886) 
../singular_texi/./d2t_singular/solve_lib.tex(,887) @table @asis
../singular_texi/./d2t_singular/solve_lib.tex(,888) @item @strong{Usage:}
../singular_texi/./d2t_singular/solve_lib.tex(,889) triang_solve(l,p [, d] ); l=list, p,d=integers,@*
../singular_texi/./d2t_singular/solve_lib.tex(,890) l a list of finitely many triangular systems, such that the union of
../singular_texi/./d2t_singular/solve_lib.tex(,891) their varieties equals the variety of the initial ideal.@*
../singular_texi/./d2t_singular/solve_lib.tex(,892) p>0: gives precision of complex numbers in digits,@*
../singular_texi/./d2t_singular/solve_lib.tex(,893) d>0: gives precision (1<d<p) for near-zero-determination,@*
../singular_texi/./d2t_singular/solve_lib.tex(,894) (default: d=1/2*p).
../singular_texi/./d2t_singular/solve_lib.tex(,895) 
../singular_texi/./d2t_singular/solve_lib.tex(,896) @item @strong{Assume:}
../singular_texi/./d2t_singular/solve_lib.tex(,897) the ground field has char 0;@*
../singular_texi/./d2t_singular/solve_lib.tex(,898) l was computed using Algorithm of Lazard or Algorithm of Moeller
../singular_texi/./d2t_singular/solve_lib.tex(,899) (see triang.lib).
../singular_texi/./d2t_singular/solve_lib.tex(,900) 
../singular_texi/./d2t_singular/solve_lib.tex(,901) @item @strong{Return:}
../singular_texi/./d2t_singular/solve_lib.tex(,902) nothing
../singular_texi/./d2t_singular/solve_lib.tex(,903) 
../singular_texi/./d2t_singular/solve_lib.tex(,904) @item @strong{Create:}
../singular_texi/./d2t_singular/solve_lib.tex(,905) The procedure creates a ring rC with the same number of variables but
../singular_texi/./d2t_singular/solve_lib.tex(,906) with complex coefficients (and precision p).@*
../singular_texi/./d2t_singular/solve_lib.tex(,907) In rC a list rlist of numbers is created, in which the complex
../singular_texi/./d2t_singular/solve_lib.tex(,908) roots of i are stored.@*
../singular_texi/./d2t_singular/solve_lib.tex(,909) 
../singular_texi/./d2t_singular/solve_lib.tex(,910) @end table
../singular_texi/./d2t_singular/solve_lib.tex(,911) @strong{Example:}
../singular_texi/./d2t_singular/solve_lib.tex(,912) @smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,913) @c reused example triang_solve d2t_singular/solve_lib.doc:616 
../singular_texi/./d2t_singular/solve_lib.tex(,914) LIB "solve.lib";
../singular_texi/./d2t_singular/solve_lib.tex(,915) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/solve_lib.tex(,916) // compute the intersection points of two curves
../singular_texi/./d2t_singular/solve_lib.tex(,917) ideal s=  x2 + y2 - 10, x2 + xy + 2y2 - 16;
../singular_texi/./d2t_singular/solve_lib.tex(,918) triang_solve(triangLfak(stdfglm(s)),10);
../singular_texi/./d2t_singular/solve_lib.tex(,919) @expansion{} // name of new ring: rC
../singular_texi/./d2t_singular/solve_lib.tex(,920) @expansion{} // list of roots: rlist
../singular_texi/./d2t_singular/solve_lib.tex(,921) rlist;
../singular_texi/./d2t_singular/solve_lib.tex(,922) @expansion{} [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,923) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,924) @expansion{}       -1
../singular_texi/./d2t_singular/solve_lib.tex(,925) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,926) @expansion{}       3
../singular_texi/./d2t_singular/solve_lib.tex(,927) @expansion{} [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,928) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,929) @expansion{}       1
../singular_texi/./d2t_singular/solve_lib.tex(,930) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,931) @expansion{}       -3
../singular_texi/./d2t_singular/solve_lib.tex(,932) @expansion{} [3]:
../singular_texi/./d2t_singular/solve_lib.tex(,933) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,934) @expansion{}       2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,935) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,936) @expansion{}       1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,937) @expansion{} [4]:
../singular_texi/./d2t_singular/solve_lib.tex(,938) @expansion{}    [1]:
../singular_texi/./d2t_singular/solve_lib.tex(,939) @expansion{}       -2.8284271247
../singular_texi/./d2t_singular/solve_lib.tex(,940) @expansion{}    [2]:
../singular_texi/./d2t_singular/solve_lib.tex(,941) @expansion{}       -1.4142135624
../singular_texi/./d2t_singular/solve_lib.tex(,942) @c end example triang_solve d2t_singular/solve_lib.doc:616
../singular_texi/./d2t_singular/solve_lib.tex(,943) @end smallexample
../singular_texi/./d2t_singular/solve_lib.tex(,944) @c ---end content triang_solve---
../singular_texi/singular.tex(,555) @c ---------------------------------------------------------
../singular_texi/singular.tex(,556) @node triang_lib, ntsolve_lib,  solve_lib, Symbolic-numerical solving
../singular_texi/singular.tex(,557) @subsection triang_lib
../singular_texi/singular.tex(,558) @c include of docu for triang.lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/triang_lib.doc
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/triang_lib.doc INSTEAD
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,4) @c library version: (1.7,2001/02/19)
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,5) @c library file: ../Singular/LIB/triang.lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,6) @cindex triang.lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,7) @cindex triang_lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,8) @table @asis
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,10) triang.lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,12)    Decompose Zero-dimensional Ideals into Triangular Sets
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,14) D. Hillebrand
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,15) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,16) @end table
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,17) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,19) @menu
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,20) * triangL:: Decomposition of (G) into triangular systems (Lazard).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,21) * triangLfak:: Decomp. of (G) into tri. systems plus factorization.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,22) * triangM:: Decomposition of (G) into triangular systems (Moeller).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,23) * triangMH:: Decomp. of (G) into tri. syst. with disjoint varieties.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,24) @end menu
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,25) @c ---end content LibInfo---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,26) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,27) @c ------------------- triangL -------------
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,28) @node triangL, triangLfak,, triang_lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,29) @subsubsection triangL
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,30) @cindex triangL
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,31) @c ---content triangL---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,32) Procedure from library @code{triang.lib} (@pxref{triang_lib}).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,33) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,34) @table @asis
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,35) @item @strong{Usage:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,36) triangL(G); G=ideal
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,37) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,38) @item @strong{Assume:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,39) G is the reduced lexicographical Groebner bases of the
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,40) zero-dimensional ideal (G), sorted by increasing leading terms.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,41) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,42) @item @strong{Return:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,43) a list of finitely many triangular systems, such that
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,44) the union of their varieties equals the variety of (G).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,45) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,46) @item @strong{Note:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,47) Algorithm of Lazard (see: Lazard, D.: Solving zero-dimensional
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,48) algebraic systems, J. Symb. Comp. 13, 117 - 132, 1992).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,49) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,50) @end table
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,51) @strong{Example:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,52) @smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,53) @c skipped computation of example triangL d2t_singular/triang_lib.doc:51 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,54) LIB "triang.lib";
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,55) ring rC5 = 0,(e,d,c,b,a),lp;
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,56) triangL(stdfglm(cyclic(5)));
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,57) @end smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,58) @c ---end content triangL---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,59) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,60) @c ------------------- triangLfak -------------
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,61) @node triangLfak, triangM, triangL, triang_lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,62) @subsubsection triangLfak
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,63) @cindex triangLfak
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,64) @c ---content triangLfak---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,65) Procedure from library @code{triang.lib} (@pxref{triang_lib}).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,66) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,67) @table @asis
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,68) @item @strong{Usage:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,69) triangLfak(G); G=ideal
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,70) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,71) @item @strong{Assume:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,72) G is the reduced lexicographical Groebner bases of the
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,73) zero-dimensional ideal (G), sorted by increasing leading terms.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,74) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,75) @item @strong{Return:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,76) a list of finitely many triangular systems, such that
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,77) the union of their varieties equals the variety of (G).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,78) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,79) @item @strong{Note:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,80) Algorithm of Lazard with factorization (see: Lazard, D.: Solving
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,81) zero-dimensional algebraic systems, J. Symb. Comp. 13, 117 - 132, 1992).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,82) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,83) @item @strong{Remark:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,84) each polynomial of the triangular systems is factorized.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,85) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,86) @end table
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,87) @strong{Example:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,88) @smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,89) @c skipped computation of example triangLfak d2t_singular/triang_lib.doc:88 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,90) LIB "triang.lib";
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,91) ring rC5 = 0,(e,d,c,b,a),lp;
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,92) triangLfak(stdfglm(cyclic(5)));
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,93) @end smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,94) @c ---end content triangLfak---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,95) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,96) @c ------------------- triangM -------------
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,97) @node triangM, triangMH, triangLfak, triang_lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,98) @subsubsection triangM
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,99) @cindex triangM
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,100) @c ---content triangM---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,101) Procedure from library @code{triang.lib} (@pxref{triang_lib}).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,102) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,103) @table @asis
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,104) @item @strong{Usage:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,105) triangM(G[,i]); G=ideal, i=integer,@*
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,106) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,107) @item @strong{Assume:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,108) G is the reduced lexicographical Groebner bases of the
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,109) zero-dimensional ideal (G), sorted by increasing leading terms.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,110) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,111) @item @strong{Return:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,112) a list of finitely many triangular systems, such that
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,113) the union of their varieties equals the variety of (G).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,114) If i = 2, then each polynomial of the triangular systems
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,115) is factorized.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,116) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,117) @item @strong{Note:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,118) Algorithm of Moeller (see: Moeller, H.M.:
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,119) @*On decomposing systems of polynomial equations with
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,120) @*finitely many solutions, Appl. Algebra Eng. Commun. Comput. 4,
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,121) 217 - 230, 1993).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,122) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,123) @end table
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,124) @strong{Example:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,125) @smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,126) @c skipped computation of example triangM d2t_singular/triang_lib.doc:126 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,127) LIB "triang.lib";
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,128) ring rC5 = 0,(e,d,c,b,a),lp;
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,129) triangM(stdfglm(cyclic(5))); //oder: triangM(stdfglm(cyclic(5)),2);
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,130) @end smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,131) @c ---end content triangM---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,132) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,133) @c ------------------- triangMH -------------
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,134) @node triangMH,, triangM, triang_lib
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,135) @subsubsection triangMH
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,136) @cindex triangMH
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,137) @c ---content triangMH---
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,138) Procedure from library @code{triang.lib} (@pxref{triang_lib}).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,139) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,140) @table @asis
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,141) @item @strong{Usage:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,142) triangMH(G[,i]); G=ideal, i=integer
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,143) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,144) @item @strong{Assume:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,145) G is the reduced lexicographical Groebner bases of the
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,146) zero-dimensional ideal (G), sorted by increasing leading terms.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,147) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,148) @item @strong{Return:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,149) a list of finitely many triangular systems, such that
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,150) the disjoint union of their varieties equals the variety of (G).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,151) If i = 2, then each polynomial of the triangular systems is factorized.
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,152) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,153) @item @strong{Note:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,154) Algorithm of Moeller and Hillebrand (see: Moeller, H.M.:
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,155) On decomposing systems of polynomial equations with finitely many
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,156) solutions, Appl. Algebra Eng. Commun. Comput. 4, 217 - 230, 1993 and
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,157) Hillebrand, D.: Triangulierung nulldimensionaler Ideale -
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,158) Implementierung und Vergleich zweier Algorithmen, master thesis,
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,159) Universitaet Dortmund, Fachbereich Mathematik, Prof. Dr. H.M. Moeller,
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,160) 1999).
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,161) 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,162) @end table
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,163) @strong{Example:}
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,164) @smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,165) @c skipped computation of example triangMH d2t_singular/triang_lib.doc:166 
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,166) LIB "triang.lib";
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,167) ring rC5 = 0,(e,d,c,b,a),lp;
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,168) triangMH(stdfglm(cyclic(5)));
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,169) @end smallexample
../singular_texi/./d2t_singular/triang_lib_noEx.tex(,170) @c ---end content triangMH---
../singular_texi/singular.tex(,560) @c ---------------------------------------------------------
../singular_texi/singular.tex(,561) @node ntsolve_lib, zeroset_lib, triang_lib, Symbolic-numerical solving
../singular_texi/singular.tex(,562) @subsection ntsolve_lib
../singular_texi/singular.tex(,563) @c include of docu for ntsolve.lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/ntsolve_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/ntsolve_lib.doc
../singular_texi/./d2t_singular/ntsolve_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/ntsolve_lib.doc INSTEAD
../singular_texi/./d2t_singular/ntsolve_lib.tex(,4) @c library version: (1.12.2.1,2002/04/12)
../singular_texi/./d2t_singular/ntsolve_lib.tex(,5) @c library file: ../Singular/LIB/ntsolve.lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,6) @cindex ntsolve.lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,7) @cindex ntsolve_lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/ntsolve_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,10) ntsolve.lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,12)      Real Newton Solving of Polynomial Systems
../singular_texi/./d2t_singular/ntsolve_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,14) Wilfred Pohl, email: pohl@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/ntsolve_lib.tex(,15) @*Dietmar Hillebrand
../singular_texi/./d2t_singular/ntsolve_lib.tex(,16) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,17) @end table
../singular_texi/./d2t_singular/ntsolve_lib.tex(,18) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,19) @strong{Procedures:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,20) @menu
../singular_texi/./d2t_singular/ntsolve_lib.tex(,21) * nt_solve:: find one real root of 0-dimensional ideal G
../singular_texi/./d2t_singular/ntsolve_lib.tex(,22) * triMNewton:: find one real root for 0-dim triangular system G
../singular_texi/./d2t_singular/ntsolve_lib.tex(,23) @end menu
../singular_texi/./d2t_singular/ntsolve_lib.tex(,24) @c ---end content LibInfo---
../singular_texi/./d2t_singular/ntsolve_lib.tex(,25) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,26) @c ------------------- nt_solve -------------
../singular_texi/./d2t_singular/ntsolve_lib.tex(,27) @node nt_solve, triMNewton,, ntsolve_lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,28) @subsubsection nt_solve
../singular_texi/./d2t_singular/ntsolve_lib.tex(,29) @cindex nt_solve
../singular_texi/./d2t_singular/ntsolve_lib.tex(,30) @c ---content nt_solve---
../singular_texi/./d2t_singular/ntsolve_lib.tex(,31) Procedure from library @code{ntsolve.lib} (@pxref{ntsolve_lib}).
../singular_texi/./d2t_singular/ntsolve_lib.tex(,32) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,33) @table @asis
../singular_texi/./d2t_singular/ntsolve_lib.tex(,34) @item @strong{Usage:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,35) nt_solve(gls,ini[,ipar]); gls,ini= ideals, ipar=list/intvec,@*
../singular_texi/./d2t_singular/ntsolve_lib.tex(,36) gls: contains the equations, for which a solution will be computed
../singular_texi/./d2t_singular/ntsolve_lib.tex(,37) ini: ideal of initial values (approximate solutions to start with),@*
../singular_texi/./d2t_singular/ntsolve_lib.tex(,38) ipar: control integers (default: ipar = 100,10)
../singular_texi/./d2t_singular/ntsolve_lib.tex(,39)   @format
../singular_texi/./d2t_singular/ntsolve_lib.tex(,40)  ipar[1]: max. number of iterations
../singular_texi/./d2t_singular/ntsolve_lib.tex(,41)  ipar[2]: accuracy (we have the l_2-norm ||.||): accept solution @code{sol}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,42)           if ||gls(sol)|| < eps0*(0.1^ipar[2])
../singular_texi/./d2t_singular/ntsolve_lib.tex(,43)           where eps0 = ||gls(ini)|| is the initial error
../singular_texi/./d2t_singular/ntsolve_lib.tex(,44)   @end format
../singular_texi/./d2t_singular/ntsolve_lib.tex(,45) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,46) @item @strong{Assume:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,47) gls is a zerodimensional ideal with nvars(basering) = size(gls) (>1)
../singular_texi/./d2t_singular/ntsolve_lib.tex(,48) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,49) @item @strong{Return:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,50) ideal, coordinates of one solution (if found), 0 else
../singular_texi/./d2t_singular/ntsolve_lib.tex(,51) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,52) @item @strong{Note:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,53) if printlevel >0: displays comments (default =0)
../singular_texi/./d2t_singular/ntsolve_lib.tex(,54) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,55) @end table
../singular_texi/./d2t_singular/ntsolve_lib.tex(,56) @strong{Example:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,57) @smallexample
../singular_texi/./d2t_singular/ntsolve_lib.tex(,58) @c computed example nt_solve d2t_singular/ntsolve_lib.doc:56 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,59) LIB "ntsolve.lib";
../singular_texi/./d2t_singular/ntsolve_lib.tex(,60) ring rsq = (real,40),(x,y,z,w),lp;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,61) ideal gls =  x2+y2+z2-10, y2+z3+w-8, xy+yz+xz+w5 - 1,w3+y;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,62) ideal ini = 3.1,2.9,1.1,0.5;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,63) intvec ipar = 200,0;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,64) ideal sol = nt_solve(gls,ini,ipar);
../singular_texi/./d2t_singular/ntsolve_lib.tex(,65) sol;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,66) @expansion{} sol[1]=0.8698104581550055082008024750939710335537
../singular_texi/./d2t_singular/ntsolve_lib.tex(,67) @expansion{} sol[2]=2.8215774457503246008496262517717182369409
../singular_texi/./d2t_singular/ntsolve_lib.tex(,68) @expansion{} sol[3]=1.1323120084664179900060940157112668717318
../singular_texi/./d2t_singular/ntsolve_lib.tex(,69) @expansion{} sol[4]=-1.413071026406678849397999475590194239628
../singular_texi/./d2t_singular/ntsolve_lib.tex(,70) @c end example nt_solve d2t_singular/ntsolve_lib.doc:56
../singular_texi/./d2t_singular/ntsolve_lib.tex(,71) @end smallexample
../singular_texi/./d2t_singular/ntsolve_lib.tex(,72) @c ---end content nt_solve---
../singular_texi/./d2t_singular/ntsolve_lib.tex(,73) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,74) @c ------------------- triMNewton -------------
../singular_texi/./d2t_singular/ntsolve_lib.tex(,75) @node triMNewton,, nt_solve, ntsolve_lib
../singular_texi/./d2t_singular/ntsolve_lib.tex(,76) @subsubsection triMNewton
../singular_texi/./d2t_singular/ntsolve_lib.tex(,77) @cindex triMNewton
../singular_texi/./d2t_singular/ntsolve_lib.tex(,78) @c ---content triMNewton---
../singular_texi/./d2t_singular/ntsolve_lib.tex(,79) Procedure from library @code{ntsolve.lib} (@pxref{ntsolve_lib}).
../singular_texi/./d2t_singular/ntsolve_lib.tex(,80) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,81) @table @asis
../singular_texi/./d2t_singular/ntsolve_lib.tex(,82) @item @strong{Usage:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,83) triMNewton(G,a[,ipar]); G,a= ideals, ipar=list/intvec
../singular_texi/./d2t_singular/ntsolve_lib.tex(,84) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,85) @item @strong{Assume:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,86) G: g1,..,gn, a triangular system of n equations in n vars, i.e.
../singular_texi/./d2t_singular/ntsolve_lib.tex(,87) gi=gi(var(n-i+1),..,var(n)),@*
../singular_texi/./d2t_singular/ntsolve_lib.tex(,88) a: ideal of numbers, coordinates of an approximation of a common
../singular_texi/./d2t_singular/ntsolve_lib.tex(,89) zero of G to start with (with a[i] to be substituted in var(i)),@*
../singular_texi/./d2t_singular/ntsolve_lib.tex(,90) ipar: control integer vector (default: ipar = 100,10)
../singular_texi/./d2t_singular/ntsolve_lib.tex(,91)   @format
../singular_texi/./d2t_singular/ntsolve_lib.tex(,92)   ipar[1]: max. number of iterations
../singular_texi/./d2t_singular/ntsolve_lib.tex(,93)   ipar[2]: accuracy (we have as norm |.| absolute value ):
../singular_texi/./d2t_singular/ntsolve_lib.tex(,94)            accept solution @code{sol} if |G(sol)| < |G(a)|*(0.1^ipar[2]).
../singular_texi/./d2t_singular/ntsolve_lib.tex(,95)   @end format
../singular_texi/./d2t_singular/ntsolve_lib.tex(,96) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,97) @item @strong{Return:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,98) an ideal, coordinates of a better approximation of a zero of G
../singular_texi/./d2t_singular/ntsolve_lib.tex(,99) 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,100) @end table
../singular_texi/./d2t_singular/ntsolve_lib.tex(,101) @strong{Example:}
../singular_texi/./d2t_singular/ntsolve_lib.tex(,102) @smallexample
../singular_texi/./d2t_singular/ntsolve_lib.tex(,103) @c computed example triMNewton d2t_singular/ntsolve_lib.doc:97 
../singular_texi/./d2t_singular/ntsolve_lib.tex(,104) LIB "ntsolve.lib";
../singular_texi/./d2t_singular/ntsolve_lib.tex(,105) ring r = (real,30),(z,y,x),(lp);
../singular_texi/./d2t_singular/ntsolve_lib.tex(,106) ideal i = x^2-1,y^2+x4-3,z2-y4+x-1;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,107) ideal a = 2,3,4;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,108) intvec e = 20,10;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,109) ideal l = triMNewton(i,a,e);
../singular_texi/./d2t_singular/ntsolve_lib.tex(,110) l;
../singular_texi/./d2t_singular/ntsolve_lib.tex(,111) @expansion{} l[1]=-2.000000000042265738880279143423
../singular_texi/./d2t_singular/ntsolve_lib.tex(,112) @expansion{} l[2]=1.41421356237309504880168872421
../singular_texi/./d2t_singular/ntsolve_lib.tex(,113) @expansion{} l[3]=1
../singular_texi/./d2t_singular/ntsolve_lib.tex(,114) @c end example triMNewton d2t_singular/ntsolve_lib.doc:97
../singular_texi/./d2t_singular/ntsolve_lib.tex(,115) @end smallexample
../singular_texi/./d2t_singular/ntsolve_lib.tex(,116) @c ---end content triMNewton---
../singular_texi/singular.tex(,565) @c ---------------------------------------------------------
../singular_texi/singular.tex(,566) @node zeroset_lib, , ntsolve_lib, Symbolic-numerical solving
../singular_texi/singular.tex(,567) @subsection zeroset_lib
../singular_texi/singular.tex(,568) @c include of docu for zeroset.lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/zeroset_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/zeroset_lib.doc
../singular_texi/./d2t_singular/zeroset_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/zeroset_lib.doc INSTEAD
../singular_texi/./d2t_singular/zeroset_lib.tex(,4) @c library version: (1.7.2.2,2002/02/20)
../singular_texi/./d2t_singular/zeroset_lib.tex(,5) @c library file: ../Singular/LIB/zeroset.lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,6) @cindex zeroset.lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,7) @cindex zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,10) zeroset.lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,12)       Procedures For Roots and Factorization
../singular_texi/./d2t_singular/zeroset_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,14) Thomas Bayer, email: tbayer@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/zeroset_lib.tex(,15) @*http://wwwmayr.informatik.tu-muenchen.de/personen/bayert/
../singular_texi/./d2t_singular/zeroset_lib.tex(,16) Current Adress: Institut fuer Informatik, TU Muenchen
../singular_texi/./d2t_singular/zeroset_lib.tex(,17) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,18) @item @strong{Overview:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,19) Algorithms for finding the zero-set of a zero-dim. ideal in Q(a)[x_1,..,x_n],
../singular_texi/./d2t_singular/zeroset_lib.tex(,20) Roots and Factorization of univariate polynomials over Q(a)[t]
../singular_texi/./d2t_singular/zeroset_lib.tex(,21) where a is an algebraic number. Written in the frame of the
../singular_texi/./d2t_singular/zeroset_lib.tex(,22) diploma thesis (advisor: Prof. Gert-Martin Greuel) 'Computations of moduli
../singular_texi/./d2t_singular/zeroset_lib.tex(,23) spaces of semiquasihomogeneous singularities and an implementation in Singular'.
../singular_texi/./d2t_singular/zeroset_lib.tex(,24) This library is meant as a preliminary extension of the functionality
../singular_texi/./d2t_singular/zeroset_lib.tex(,25) of Singular for univariate factorization of polynomials over simple algebraic
../singular_texi/./d2t_singular/zeroset_lib.tex(,26) extensions in characteristic 0.
../singular_texi/./d2t_singular/zeroset_lib.tex(,27) @*Subprocedures with postfix 'Main' require that the ring contains a variable
../singular_texi/./d2t_singular/zeroset_lib.tex(,28) 'a' and no parameters, and the ideal 'mpoly', where 'minpoly' from the
../singular_texi/./d2t_singular/zeroset_lib.tex(,29) basering is stored.
../singular_texi/./d2t_singular/zeroset_lib.tex(,30) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,31) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,32) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,33) @strong{Procedures:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,34) @menu
../singular_texi/./d2t_singular/zeroset_lib.tex(,35) * EGCD:: gcd over an algebraic extension field of Q
../singular_texi/./d2t_singular/zeroset_lib.tex(,36) * Factor:: factorization of f over an algebraic extension field
../singular_texi/./d2t_singular/zeroset_lib.tex(,37) * Quotient:: quotient q of f w.r.t. g (in f = q*g + remainder)
../singular_texi/./d2t_singular/zeroset_lib.tex(,38) * Remainder:: remainder of the division of f by g
../singular_texi/./d2t_singular/zeroset_lib.tex(,39) * Roots:: computes all roots of f in an extension field of Q
../singular_texi/./d2t_singular/zeroset_lib.tex(,40) * SQFRNorm:: norm of f (f must be squarefree)
../singular_texi/./d2t_singular/zeroset_lib.tex(,41) * ZeroSet:: zero-set of the 0-dim. ideal I
../singular_texi/./d2t_singular/zeroset_lib.tex(,42) @end menu
../singular_texi/./d2t_singular/zeroset_lib.tex(,43) @strong{Auxiliary procedures:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,44) @menu
../singular_texi/./d2t_singular/zeroset_lib.tex(,45) * EGCDMain:: gcd over an algebraic extension field of Q
../singular_texi/./d2t_singular/zeroset_lib.tex(,46) * FactorMain:: factorization of f over an algebraic extension field
../singular_texi/./d2t_singular/zeroset_lib.tex(,47) * InvertNumberMain:: inverts an element of an algebraic extension field
../singular_texi/./d2t_singular/zeroset_lib.tex(,48) * QuotientMain:: quotient of f w.r.t. g
../singular_texi/./d2t_singular/zeroset_lib.tex(,49) * RemainderMain:: remainder of the division of f by g
../singular_texi/./d2t_singular/zeroset_lib.tex(,50) * RootsMain:: computes all roots of f, might extend the ground field
../singular_texi/./d2t_singular/zeroset_lib.tex(,51) * SQFRNormMain:: norm of f (f must be squarefree)
../singular_texi/./d2t_singular/zeroset_lib.tex(,52) * ContainedQ:: f in data ?
../singular_texi/./d2t_singular/zeroset_lib.tex(,53) * SameQ:: a == b (list a,b)
../singular_texi/./d2t_singular/zeroset_lib.tex(,54) @end menu
../singular_texi/./d2t_singular/zeroset_lib.tex(,55) @c ---end content LibInfo---
../singular_texi/./d2t_singular/zeroset_lib.tex(,56) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,57) @c ------------------- EGCD -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,58) @node EGCD, Factor,, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,59) @subsubsection EGCD
../singular_texi/./d2t_singular/zeroset_lib.tex(,60) @cindex EGCD
../singular_texi/./d2t_singular/zeroset_lib.tex(,61) @c ---content EGCD---
../singular_texi/./d2t_singular/zeroset_lib.tex(,62) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,63) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,64) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,65) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,66) EGCD(f, g); where f,g are polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,67) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,68) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,69) compute the polynomial gcd of f and g over Q(a)[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,70) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,71) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,72) polynomial h s.t. h is a greatest common divisor of f and g (not nec.
../singular_texi/./d2t_singular/zeroset_lib.tex(,73) monic)
../singular_texi/./d2t_singular/zeroset_lib.tex(,74) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,75) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,76) basering = Q(a)[t]
../singular_texi/./d2t_singular/zeroset_lib.tex(,77) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,78) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,79) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,80) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,81) @c computed example EGCD d2t_singular/zeroset_lib.doc:79 
../singular_texi/./d2t_singular/zeroset_lib.tex(,82) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,83) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,84) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,85) poly f =  x4 - 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,86) poly g = x2 - 2*a*x - 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,87) EGCD(f, g);
../singular_texi/./d2t_singular/zeroset_lib.tex(,88) @expansion{} (-4a)*x-4
../singular_texi/./d2t_singular/zeroset_lib.tex(,89) @c end example EGCD d2t_singular/zeroset_lib.doc:79
../singular_texi/./d2t_singular/zeroset_lib.tex(,90) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,91) @c ---end content EGCD---
../singular_texi/./d2t_singular/zeroset_lib.tex(,92) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,93) @c ------------------- Factor -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,94) @node Factor, Quotient, EGCD, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,95) @subsubsection Factor
../singular_texi/./d2t_singular/zeroset_lib.tex(,96) @cindex Factor
../singular_texi/./d2t_singular/zeroset_lib.tex(,97) @c ---content Factor---
../singular_texi/./d2t_singular/zeroset_lib.tex(,98) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,99) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,100) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,101) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,102) Factor(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,103) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,104) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,105) compute the factorization of the squarefree poly f over Q(a)[t]
../singular_texi/./d2t_singular/zeroset_lib.tex(,106) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,107) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,108) list with two entries
../singular_texi/./d2t_singular/zeroset_lib.tex(,109)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,110)   _[1] = factors (monic), first entry is the leading coefficient
../singular_texi/./d2t_singular/zeroset_lib.tex(,111)   _[2] = multiplicities (not yet implemented)
../singular_texi/./d2t_singular/zeroset_lib.tex(,112)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,113) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,114) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,115) basering must be the univariate polynomial ring over a field, which
../singular_texi/./d2t_singular/zeroset_lib.tex(,116) is Q or a simple extension of Q given by a minpoly.
../singular_texi/./d2t_singular/zeroset_lib.tex(,117) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,118) @item @strong{Note:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,119) if basering = Q[t] then this is the built-in @code{factorize}
../singular_texi/./d2t_singular/zeroset_lib.tex(,120) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,121) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,122) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,123) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,124) @c computed example Factor d2t_singular/zeroset_lib.doc:121 
../singular_texi/./d2t_singular/zeroset_lib.tex(,125) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,126) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,127) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,128) poly f =  x4 - 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,129) list fl = Factor(f);
../singular_texi/./d2t_singular/zeroset_lib.tex(,130) fl;
../singular_texi/./d2t_singular/zeroset_lib.tex(,131) @expansion{} [1]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,132) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,133) @expansion{}    _[2]=(40a+60)*x+(40a+60)
../singular_texi/./d2t_singular/zeroset_lib.tex(,134) @expansion{}    _[3]=(1/65a-29/130)*x+(-1/65a+29/130)
../singular_texi/./d2t_singular/zeroset_lib.tex(,135) @expansion{}    _[4]=(4a)*x+4
../singular_texi/./d2t_singular/zeroset_lib.tex(,136) @expansion{}    _[5]=(7/520a+1/130)*x+(1/130a-7/520)
../singular_texi/./d2t_singular/zeroset_lib.tex(,137) @expansion{} [2]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,138) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,139) @expansion{}    _[2]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,140) @expansion{}    _[3]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,141) @expansion{}    _[4]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,142) @expansion{}    _[5]=1
../singular_texi/./d2t_singular/zeroset_lib.tex(,143) fl[1][1]*fl[1][2]*fl[1][3]*fl[1][4]*fl[1][5] - f;
../singular_texi/./d2t_singular/zeroset_lib.tex(,144) @expansion{} 0
../singular_texi/./d2t_singular/zeroset_lib.tex(,145) @c end example Factor d2t_singular/zeroset_lib.doc:121
../singular_texi/./d2t_singular/zeroset_lib.tex(,146) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,147) @c ---end content Factor---
../singular_texi/./d2t_singular/zeroset_lib.tex(,148) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,149) @c ------------------- Quotient -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,150) @node Quotient, Remainder, Factor, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,151) @subsubsection Quotient
../singular_texi/./d2t_singular/zeroset_lib.tex(,152) @cindex Quotient
../singular_texi/./d2t_singular/zeroset_lib.tex(,153) @c ---content Quotient---
../singular_texi/./d2t_singular/zeroset_lib.tex(,154) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,155) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,156) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,157) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,158) Quotient(f, g); where f,g are polynomials;
../singular_texi/./d2t_singular/zeroset_lib.tex(,159) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,160) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,161) compute the quotient q and remainder r s.t. f = g*q + r, deg(r) < deg(g)
../singular_texi/./d2t_singular/zeroset_lib.tex(,162) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,163) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,164) list of polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,165)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,166)   _[1] = quotient  q
../singular_texi/./d2t_singular/zeroset_lib.tex(,167)   _[2] = remainder r
../singular_texi/./d2t_singular/zeroset_lib.tex(,168)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,169) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,170) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,171) basering = Q[x] or Q(a)[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,172) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,173) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,174) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,175) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,176) @c computed example Quotient d2t_singular/zeroset_lib.doc:160 
../singular_texi/./d2t_singular/zeroset_lib.tex(,177) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,178) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,179) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,180) poly f =  x4 - 2;
../singular_texi/./d2t_singular/zeroset_lib.tex(,181) poly g = x - a;
../singular_texi/./d2t_singular/zeroset_lib.tex(,182) list qr = Quotient(f, g);
../singular_texi/./d2t_singular/zeroset_lib.tex(,183) qr;
../singular_texi/./d2t_singular/zeroset_lib.tex(,184) @expansion{} [1]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,185) @expansion{}    x3+(a)*x2-x+(-a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,186) @expansion{} [2]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,187) @expansion{}    0
../singular_texi/./d2t_singular/zeroset_lib.tex(,188) qr[1]*g + qr[2] - f;
../singular_texi/./d2t_singular/zeroset_lib.tex(,189) @expansion{} 1
../singular_texi/./d2t_singular/zeroset_lib.tex(,190) @c end example Quotient d2t_singular/zeroset_lib.doc:160
../singular_texi/./d2t_singular/zeroset_lib.tex(,191) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,192) @c ---end content Quotient---
../singular_texi/./d2t_singular/zeroset_lib.tex(,193) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,194) @c ------------------- Remainder -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,195) @node Remainder, Roots, Quotient, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,196) @subsubsection Remainder
../singular_texi/./d2t_singular/zeroset_lib.tex(,197) @cindex Remainder
../singular_texi/./d2t_singular/zeroset_lib.tex(,198) @c ---content Remainder---
../singular_texi/./d2t_singular/zeroset_lib.tex(,199) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,200) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,201) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,202) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,203) Remainder(f, g); where f,g are polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,204) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,205) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,206) compute the remainder of the division of f by g, i.e. a polynomial r
../singular_texi/./d2t_singular/zeroset_lib.tex(,207) s.t. f = g*q + r, deg(r) < deg(g).
../singular_texi/./d2t_singular/zeroset_lib.tex(,208) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,209) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,210) poly
../singular_texi/./d2t_singular/zeroset_lib.tex(,211) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,212) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,213) basering = Q[x] or Q(a)[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,214) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,215) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,216) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,217) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,218) @c computed example Remainder d2t_singular/zeroset_lib.doc:197 
../singular_texi/./d2t_singular/zeroset_lib.tex(,219) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,220) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,221) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,222) poly f =  x4 - 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,223) poly g = x3 - 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,224) Remainder(f, g);
../singular_texi/./d2t_singular/zeroset_lib.tex(,225) @expansion{} x-1
../singular_texi/./d2t_singular/zeroset_lib.tex(,226) @c end example Remainder d2t_singular/zeroset_lib.doc:197
../singular_texi/./d2t_singular/zeroset_lib.tex(,227) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,228) @c ---end content Remainder---
../singular_texi/./d2t_singular/zeroset_lib.tex(,229) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,230) @c ------------------- Roots -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,231) @node Roots, SQFRNorm, Remainder, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,232) @subsubsection Roots
../singular_texi/./d2t_singular/zeroset_lib.tex(,233) @cindex Roots
../singular_texi/./d2t_singular/zeroset_lib.tex(,234) @c ---content Roots---
../singular_texi/./d2t_singular/zeroset_lib.tex(,235) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,236) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,237) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,238) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,239) Roots(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,240) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,241) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,242) compute all roots of f in a finite extension of the ground field
../singular_texi/./d2t_singular/zeroset_lib.tex(,243) without multiplicities.
../singular_texi/./d2t_singular/zeroset_lib.tex(,244) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,245) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,246) ring, a polynomial ring over an extension field of the ground field,
../singular_texi/./d2t_singular/zeroset_lib.tex(,247) containing a list 'roots' and polynomials 'newA' and 'f':
../singular_texi/./d2t_singular/zeroset_lib.tex(,248)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,249)   - 'roots' is the list of roots of the polynomial f (no multiplicities)
../singular_texi/./d2t_singular/zeroset_lib.tex(,250)   - if the ground field is Q(a') and the extension field is Q(a), then
../singular_texi/./d2t_singular/zeroset_lib.tex(,251)     'newA' is the representation of a' in Q(a). 
../singular_texi/./d2t_singular/zeroset_lib.tex(,252)     If the basering contains a parameter 'a' and the minpoly remains unchanged
../singular_texi/./d2t_singular/zeroset_lib.tex(,253)     then 'newA' = 'a'.
../singular_texi/./d2t_singular/zeroset_lib.tex(,254)     If the basering does not contain a parameter then 'newA' = 'a' (default).
../singular_texi/./d2t_singular/zeroset_lib.tex(,255)   - 'f' is the polynomial f in Q(a) (a' being substituted by 'newA')
../singular_texi/./d2t_singular/zeroset_lib.tex(,256)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,257) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,258) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,259) ground field to be Q or a simple extension of Q given by a minpoly
../singular_texi/./d2t_singular/zeroset_lib.tex(,260) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,261) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,262) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,263) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,264) @c computed example Roots d2t_singular/zeroset_lib.doc:242 
../singular_texi/./d2t_singular/zeroset_lib.tex(,265) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,266) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,267) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,268) poly f = x3 - a;
../singular_texi/./d2t_singular/zeroset_lib.tex(,269) def R1 = Roots(f);
../singular_texi/./d2t_singular/zeroset_lib.tex(,270) @expansion{} 
../singular_texi/./d2t_singular/zeroset_lib.tex(,271) @expansion{} // 'Roots' created a new ring which contains the list 'roots' and
../singular_texi/./d2t_singular/zeroset_lib.tex(,272) @expansion{} // the polynomials 'f' and 'newA'
../singular_texi/./d2t_singular/zeroset_lib.tex(,273) @expansion{} // To access the roots, newA and the new representation of f, type
../singular_texi/./d2t_singular/zeroset_lib.tex(,274) @expansion{}    def R = Roots(f); setring R; roots; newA; f;
../singular_texi/./d2t_singular/zeroset_lib.tex(,275) @expansion{} 
../singular_texi/./d2t_singular/zeroset_lib.tex(,276) setring R1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,277) minpoly;
../singular_texi/./d2t_singular/zeroset_lib.tex(,278) @expansion{} (a4-a2+1)
../singular_texi/./d2t_singular/zeroset_lib.tex(,279) newA;
../singular_texi/./d2t_singular/zeroset_lib.tex(,280) @expansion{} (a3)
../singular_texi/./d2t_singular/zeroset_lib.tex(,281) f;
../singular_texi/./d2t_singular/zeroset_lib.tex(,282) @expansion{} x3+(-a3)
../singular_texi/./d2t_singular/zeroset_lib.tex(,283) roots;
../singular_texi/./d2t_singular/zeroset_lib.tex(,284) @expansion{} [1]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,285) @expansion{}    (-a3)
../singular_texi/./d2t_singular/zeroset_lib.tex(,286) @expansion{} [2]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,287) @expansion{}    (a3-a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,288) @expansion{} [3]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,289) @expansion{}    (a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,290) map F;
../singular_texi/./d2t_singular/zeroset_lib.tex(,291) F[1] = roots[1];
../singular_texi/./d2t_singular/zeroset_lib.tex(,292) F(f);
../singular_texi/./d2t_singular/zeroset_lib.tex(,293) @expansion{} 0
../singular_texi/./d2t_singular/zeroset_lib.tex(,294) @c end example Roots d2t_singular/zeroset_lib.doc:242
../singular_texi/./d2t_singular/zeroset_lib.tex(,295) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,296) @c ---end content Roots---
../singular_texi/./d2t_singular/zeroset_lib.tex(,297) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,298) @c ------------------- SQFRNorm -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,299) @node SQFRNorm, ZeroSet, Roots, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,300) @subsubsection SQFRNorm
../singular_texi/./d2t_singular/zeroset_lib.tex(,301) @cindex SQFRNorm
../singular_texi/./d2t_singular/zeroset_lib.tex(,302) @c ---content SQFRNorm---
../singular_texi/./d2t_singular/zeroset_lib.tex(,303) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,304) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,305) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,306) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,307) SQFRNorm(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,308) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,309) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,310) compute the norm of the squarefree polynomial f in Q(a)[x].
../singular_texi/./d2t_singular/zeroset_lib.tex(,311) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,312) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,313) list with 3 entries
../singular_texi/./d2t_singular/zeroset_lib.tex(,314)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,315)   _[1] = squarefree norm of g (poly)
../singular_texi/./d2t_singular/zeroset_lib.tex(,316)   _[2] = g (= f(x - s*a)) (poly)
../singular_texi/./d2t_singular/zeroset_lib.tex(,317)   _[3] = s (int)
../singular_texi/./d2t_singular/zeroset_lib.tex(,318)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,319) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,320) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,321) f must be squarefree, basering = Q(a)[x] and minpoly != 0.
../singular_texi/./d2t_singular/zeroset_lib.tex(,322) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,323) @item @strong{Note:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,324) the norm is an element of Q[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,325) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,326) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,327) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,328) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,329) @c computed example SQFRNorm d2t_singular/zeroset_lib.doc:291 
../singular_texi/./d2t_singular/zeroset_lib.tex(,330) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,331) ring R = (0,a), x, lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,332) minpoly = a2+1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,333) poly f =  x4 - 2*x + 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,334) SQFRNorm(f);
../singular_texi/./d2t_singular/zeroset_lib.tex(,335) @expansion{} [1]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,336) @expansion{}    x8+4*x6-4*x5+8*x4+8*x3-4*x2+8*x+8
../singular_texi/./d2t_singular/zeroset_lib.tex(,337) @expansion{} [2]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,338) @expansion{}    x4+(-4a)*x3-6*x2+(4a-2)*x+(2a+2)
../singular_texi/./d2t_singular/zeroset_lib.tex(,339) @expansion{} [3]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,340) @expansion{}    1
../singular_texi/./d2t_singular/zeroset_lib.tex(,341) @c end example SQFRNorm d2t_singular/zeroset_lib.doc:291
../singular_texi/./d2t_singular/zeroset_lib.tex(,342) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,343) @c ---end content SQFRNorm---
../singular_texi/./d2t_singular/zeroset_lib.tex(,344) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,345) @c ------------------- ZeroSet -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,346) @node ZeroSet, EGCDMain, SQFRNorm, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,347) @subsubsection ZeroSet
../singular_texi/./d2t_singular/zeroset_lib.tex(,348) @cindex ZeroSet
../singular_texi/./d2t_singular/zeroset_lib.tex(,349) @c ---content ZeroSet---
../singular_texi/./d2t_singular/zeroset_lib.tex(,350) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,351) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,352) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,353) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,354) ZeroSet(I [,opt] ); I=ideal, opt=integer
../singular_texi/./d2t_singular/zeroset_lib.tex(,355) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,356) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,357) compute the zero-set of the zero-dim. ideal I, in a finite extension
../singular_texi/./d2t_singular/zeroset_lib.tex(,358) of the ground field.
../singular_texi/./d2t_singular/zeroset_lib.tex(,359) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,360) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,361) ring, a polynomial ring over an extension field of the ground field,
../singular_texi/./d2t_singular/zeroset_lib.tex(,362) containing a list 'zeroset', a polynomial 'newA', and an
../singular_texi/./d2t_singular/zeroset_lib.tex(,363) ideal 'id':
../singular_texi/./d2t_singular/zeroset_lib.tex(,364)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,365)   - 'zeroset' is the list of the zeros of the ideal I, each zero is an ideal.
../singular_texi/./d2t_singular/zeroset_lib.tex(,366)   - if the ground field is Q(a') and the extension field is Q(a), then
../singular_texi/./d2t_singular/zeroset_lib.tex(,367)     'newA' is the representation of a' in Q(a).
../singular_texi/./d2t_singular/zeroset_lib.tex(,368)     If the basering contains a parameter 'a' and the minpoly remains unchanged
../singular_texi/./d2t_singular/zeroset_lib.tex(,369)     then 'newA' = 'a'.
../singular_texi/./d2t_singular/zeroset_lib.tex(,370)     If the basering does not contain a parameter then 'newA' = 'a' (default).    
../singular_texi/./d2t_singular/zeroset_lib.tex(,371)   - 'id' is the ideal I in Q(a)[x_1,...] (a' substituted by 'newA')
../singular_texi/./d2t_singular/zeroset_lib.tex(,372)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,373) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,374) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,375) dim(I) = 0, and ground field to be Q or a simple extension of Q given
../singular_texi/./d2t_singular/zeroset_lib.tex(,376) by a minpoly.
../singular_texi/./d2t_singular/zeroset_lib.tex(,377) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,378) @item @strong{Options:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,379) opt = 0 no primary decomposition (default)
../singular_texi/./d2t_singular/zeroset_lib.tex(,380) @*opt > 0 primary decomposition
../singular_texi/./d2t_singular/zeroset_lib.tex(,381) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,382) @item @strong{Note:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,383) If I contains an algebraic number (parameter) then 'I' must be
../singular_texi/./d2t_singular/zeroset_lib.tex(,384) transformed w.r.t. 'newA' in the new ring.
../singular_texi/./d2t_singular/zeroset_lib.tex(,385) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,386) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,387) @strong{Example:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,388) @smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,389) @c computed example ZeroSet d2t_singular/zeroset_lib.doc:345 
../singular_texi/./d2t_singular/zeroset_lib.tex(,390) LIB "zeroset.lib";
../singular_texi/./d2t_singular/zeroset_lib.tex(,391) ring R = (0,a), (x,y,z), lp;
../singular_texi/./d2t_singular/zeroset_lib.tex(,392) minpoly = a2 + 1;
../singular_texi/./d2t_singular/zeroset_lib.tex(,393) ideal I = x2 - 1/2, a*z - 1, y - 2;
../singular_texi/./d2t_singular/zeroset_lib.tex(,394) def T = ZeroSet(I);
../singular_texi/./d2t_singular/zeroset_lib.tex(,395) @expansion{} 1
../singular_texi/./d2t_singular/zeroset_lib.tex(,396) setring T;
../singular_texi/./d2t_singular/zeroset_lib.tex(,397) minpoly;
../singular_texi/./d2t_singular/zeroset_lib.tex(,398) @expansion{} (4a4+4a2+9)
../singular_texi/./d2t_singular/zeroset_lib.tex(,399) newA;
../singular_texi/./d2t_singular/zeroset_lib.tex(,400) @expansion{} (1/3a3+5/6a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,401) id;
../singular_texi/./d2t_singular/zeroset_lib.tex(,402) @expansion{} id[1]=(1/3a3+5/6a)*z-1
../singular_texi/./d2t_singular/zeroset_lib.tex(,403) @expansion{} id[2]=y-2
../singular_texi/./d2t_singular/zeroset_lib.tex(,404) @expansion{} id[3]=2*x2-1
../singular_texi/./d2t_singular/zeroset_lib.tex(,405) zeroset;
../singular_texi/./d2t_singular/zeroset_lib.tex(,406) @expansion{} [1]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,407) @expansion{}    _[1]=(1/3a3-1/6a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,408) @expansion{}    _[2]=2
../singular_texi/./d2t_singular/zeroset_lib.tex(,409) @expansion{}    _[3]=(-1/3a3-5/6a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,410) @expansion{} [2]:
../singular_texi/./d2t_singular/zeroset_lib.tex(,411) @expansion{}    _[1]=(-1/3a3+1/6a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,412) @expansion{}    _[2]=2
../singular_texi/./d2t_singular/zeroset_lib.tex(,413) @expansion{}    _[3]=(-1/3a3-5/6a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,414) map F1 = basering, zeroset[1];
../singular_texi/./d2t_singular/zeroset_lib.tex(,415) map F2 = basering, zeroset[2];
../singular_texi/./d2t_singular/zeroset_lib.tex(,416) F1(id);
../singular_texi/./d2t_singular/zeroset_lib.tex(,417) @expansion{} _[1]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,418) @expansion{} _[2]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,419) @expansion{} _[3]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,420) F2(id);
../singular_texi/./d2t_singular/zeroset_lib.tex(,421) @expansion{} _[1]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,422) @expansion{} _[2]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,423) @expansion{} _[3]=0
../singular_texi/./d2t_singular/zeroset_lib.tex(,424) @c end example ZeroSet d2t_singular/zeroset_lib.doc:345
../singular_texi/./d2t_singular/zeroset_lib.tex(,425) @end smallexample
../singular_texi/./d2t_singular/zeroset_lib.tex(,426) @c ---end content ZeroSet---
../singular_texi/./d2t_singular/zeroset_lib.tex(,427) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,428) @c ------------------- EGCDMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,429) @node EGCDMain, FactorMain, ZeroSet, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,430) @subsubsection EGCDMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,431) @cindex EGCDMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,432) @c ---content EGCDMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,433) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,434) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,435) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,436) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,437) compute the polynomial gcd of f and g over Q(a)[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,438) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,439) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,440) poly
../singular_texi/./d2t_singular/zeroset_lib.tex(,441) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,442) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,443) basering = Q[x,a] and ideal mpoly is defined (it might be 0),
../singular_texi/./d2t_singular/zeroset_lib.tex(,444) this represents the ring Q(a)[x] together with its minimal polynomial.
../singular_texi/./d2t_singular/zeroset_lib.tex(,445) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,446) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,447) @c ---end content EGCDMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,448) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,449) @c ------------------- FactorMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,450) @node FactorMain, InvertNumberMain, EGCDMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,451) @subsubsection FactorMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,452) @cindex FactorMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,453) @c ---content FactorMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,454) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,455) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,456) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,457) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,458) compute the factorization of the squarefree poly f over Q(a)[t],
../singular_texi/./d2t_singular/zeroset_lib.tex(,459) minpoly = p(a).
../singular_texi/./d2t_singular/zeroset_lib.tex(,460) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,461) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,462) list with 2 entries
../singular_texi/./d2t_singular/zeroset_lib.tex(,463)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,464)   _[1] = factors, first is a constant
../singular_texi/./d2t_singular/zeroset_lib.tex(,465)   _[2] = multiplicities (not yet implemented)
../singular_texi/./d2t_singular/zeroset_lib.tex(,466)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,467) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,468) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,469) basering = Q[x,a], representing Q(a)[x]. An ideal mpoly must
../singular_texi/./d2t_singular/zeroset_lib.tex(,470) be defined, representing the minimal polynomial (it might be 0!).
../singular_texi/./d2t_singular/zeroset_lib.tex(,471) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,472) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,473) @c ---end content FactorMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,474) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,475) @c ------------------- InvertNumberMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,476) @node InvertNumberMain, QuotientMain, FactorMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,477) @subsubsection InvertNumberMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,478) @cindex InvertNumberMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,479) @c ---content InvertNumberMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,480) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,481) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,482) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,483) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,484) InvertNumberMain(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,485) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,486) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,487) compute 1/f if f is a number in Q(a) i.e., f is represented by a
../singular_texi/./d2t_singular/zeroset_lib.tex(,488) polynomial in Q[a].
../singular_texi/./d2t_singular/zeroset_lib.tex(,489) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,490) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,491) poly 1/f
../singular_texi/./d2t_singular/zeroset_lib.tex(,492) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,493) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,494) basering = Q[x_1,...,x_n,a], ideal mpoly must be defined and != 0 !
../singular_texi/./d2t_singular/zeroset_lib.tex(,495) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,496) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,497) @c ---end content InvertNumberMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,498) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,499) @c ------------------- QuotientMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,500) @node QuotientMain, RemainderMain, InvertNumberMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,501) @subsubsection QuotientMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,502) @cindex QuotientMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,503) @c ---content QuotientMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,504) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,505) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,506) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,507) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,508) QuotientMain(f, g); where f,g are polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,509) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,510) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,511) compute the quotient q and remainder r s.t. f = g*q + r, deg(r) < deg(g)
../singular_texi/./d2t_singular/zeroset_lib.tex(,512) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,513) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,514) list of polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,515)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,516)   _[1] = quotient  q
../singular_texi/./d2t_singular/zeroset_lib.tex(,517)   _[2] = remainder r
../singular_texi/./d2t_singular/zeroset_lib.tex(,518)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,519) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,520) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,521) basering = Q[x,a] and ideal mpoly is defined (it might be 0),
../singular_texi/./d2t_singular/zeroset_lib.tex(,522) this represents the ring Q(a)[x] together with its minimal polynomial.
../singular_texi/./d2t_singular/zeroset_lib.tex(,523) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,524) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,525) @c ---end content QuotientMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,526) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,527) @c ------------------- RemainderMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,528) @node RemainderMain, RootsMain, QuotientMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,529) @subsubsection RemainderMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,530) @cindex RemainderMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,531) @c ---content RemainderMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,532) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,533) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,534) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,535) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,536) RemainderMain(f, g); where f,g are polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,537) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,538) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,539) compute the remainder r s.t. f = g*q + r, deg(r) < deg(g)
../singular_texi/./d2t_singular/zeroset_lib.tex(,540) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,541) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,542) poly
../singular_texi/./d2t_singular/zeroset_lib.tex(,543) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,544) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,545) basering = Q[x,a] and ideal mpoly is defined (it might be 0),
../singular_texi/./d2t_singular/zeroset_lib.tex(,546) this represents the ring Q(a)[x] together with its minimal polynomial.
../singular_texi/./d2t_singular/zeroset_lib.tex(,547) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,548) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,549) @c ---end content RemainderMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,550) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,551) @c ------------------- RootsMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,552) @node RootsMain, SQFRNormMain, RemainderMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,553) @subsubsection RootsMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,554) @cindex RootsMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,555) @c ---content RootsMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,556) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,557) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,558) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,559) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,560) RootsMain(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,561) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,562) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,563) compute all roots of f in a finite extension of the ground field
../singular_texi/./d2t_singular/zeroset_lib.tex(,564) without multiplicities.
../singular_texi/./d2t_singular/zeroset_lib.tex(,565) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,566) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,567) list, all entries are polynomials
../singular_texi/./d2t_singular/zeroset_lib.tex(,568)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,569)   _[1] = roots of f, each entry is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,570)   _[2] = 'newA' - if the ground field is Q(a') and the extension field
../singular_texi/./d2t_singular/zeroset_lib.tex(,571)          is Q(a), then 'newA' is the representation of a' in Q(a)
../singular_texi/./d2t_singular/zeroset_lib.tex(,572)   _[3] = minpoly of the algebraic extension of the ground field
../singular_texi/./d2t_singular/zeroset_lib.tex(,573)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,574) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,575) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,576) basering = Q[x,a] ideal mpoly must be defined, it might be 0!
../singular_texi/./d2t_singular/zeroset_lib.tex(,577) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,578) @item @strong{Note:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,579) might change the ideal mpoly !!
../singular_texi/./d2t_singular/zeroset_lib.tex(,580) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,581) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,582) @c ---end content RootsMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,583) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,584) @c ------------------- SQFRNormMain -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,585) @node SQFRNormMain, ContainedQ, RootsMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,586) @subsubsection SQFRNormMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,587) @cindex SQFRNormMain
../singular_texi/./d2t_singular/zeroset_lib.tex(,588) @c ---content SQFRNormMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,589) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,590) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,591) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,592) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,593) SQFRNorm(f); where f is a polynomial
../singular_texi/./d2t_singular/zeroset_lib.tex(,594) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,595) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,596) compute the norm of the squarefree polynomial f in Q(a)[x].
../singular_texi/./d2t_singular/zeroset_lib.tex(,597) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,598) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,599) list with 3 entries
../singular_texi/./d2t_singular/zeroset_lib.tex(,600)   @format
../singular_texi/./d2t_singular/zeroset_lib.tex(,601)   _[1] = squarefree norm of g (poly)
../singular_texi/./d2t_singular/zeroset_lib.tex(,602)   _[2] = g (= f(x - s*a)) (poly)
../singular_texi/./d2t_singular/zeroset_lib.tex(,603)   _[3] = s (int)
../singular_texi/./d2t_singular/zeroset_lib.tex(,604)   @end format
../singular_texi/./d2t_singular/zeroset_lib.tex(,605) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,606) @item @strong{Assume:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,607) f must be squarefree, basering = Q[x,a] and ideal mpoly is equal to
../singular_texi/./d2t_singular/zeroset_lib.tex(,608) 'minpoly',this represents the ring Q(a)[x] together with 'minpoly'.
../singular_texi/./d2t_singular/zeroset_lib.tex(,609) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,610) @item @strong{Note:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,611) the norm is an element of Q[x]
../singular_texi/./d2t_singular/zeroset_lib.tex(,612) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,613) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,614) @c ---end content SQFRNormMain---
../singular_texi/./d2t_singular/zeroset_lib.tex(,615) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,616) @c ------------------- ContainedQ -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,617) @node ContainedQ, SameQ, SQFRNormMain, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,618) @subsubsection ContainedQ
../singular_texi/./d2t_singular/zeroset_lib.tex(,619) @cindex ContainedQ
../singular_texi/./d2t_singular/zeroset_lib.tex(,620) @c ---content ContainedQ---
../singular_texi/./d2t_singular/zeroset_lib.tex(,621) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,622) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,623) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,624) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,625) ContainedQ(data, f [, opt]); data=list; f=any type, opt=integer
../singular_texi/./d2t_singular/zeroset_lib.tex(,626) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,627) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,628) test if f is an element of data.
../singular_texi/./d2t_singular/zeroset_lib.tex(,629) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,630) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,631) int
../singular_texi/./d2t_singular/zeroset_lib.tex(,632) @*0 if f not contained in data
../singular_texi/./d2t_singular/zeroset_lib.tex(,633) @*1 if f contained in data
../singular_texi/./d2t_singular/zeroset_lib.tex(,634) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,635) @item @strong{Options:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,636) opt = 0 : use '==' for comparing f with elements from data@*
../singular_texi/./d2t_singular/zeroset_lib.tex(,637) opt = 1 : use @code{SameQ} for comparing f with elements from data
../singular_texi/./d2t_singular/zeroset_lib.tex(,638) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,639) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,640) @c ---end content ContainedQ---
../singular_texi/./d2t_singular/zeroset_lib.tex(,641) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,642) @c ------------------- SameQ -------------
../singular_texi/./d2t_singular/zeroset_lib.tex(,643) @node SameQ,, ContainedQ, zeroset_lib
../singular_texi/./d2t_singular/zeroset_lib.tex(,644) @subsubsection SameQ
../singular_texi/./d2t_singular/zeroset_lib.tex(,645) @cindex SameQ
../singular_texi/./d2t_singular/zeroset_lib.tex(,646) @c ---content SameQ---
../singular_texi/./d2t_singular/zeroset_lib.tex(,647) Procedure from library @code{zeroset.lib} (@pxref{zeroset_lib}).
../singular_texi/./d2t_singular/zeroset_lib.tex(,648) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,649) @table @asis
../singular_texi/./d2t_singular/zeroset_lib.tex(,650) @item @strong{Usage:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,651) SameQ(a, b); a,b=list/intvec
../singular_texi/./d2t_singular/zeroset_lib.tex(,652) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,653) @item @strong{Purpose:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,654) test a == b elementwise, i.e., a[i] = b[i].
../singular_texi/./d2t_singular/zeroset_lib.tex(,655) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,656) @item @strong{Return:}
../singular_texi/./d2t_singular/zeroset_lib.tex(,657) int
../singular_texi/./d2t_singular/zeroset_lib.tex(,658) @*0 if a != b
../singular_texi/./d2t_singular/zeroset_lib.tex(,659) @*1 if a == b
../singular_texi/./d2t_singular/zeroset_lib.tex(,660) 
../singular_texi/./d2t_singular/zeroset_lib.tex(,661) @end table
../singular_texi/./d2t_singular/zeroset_lib.tex(,662) @c ---end content SameQ---
../singular_texi/singular.tex(,570) 
../singular_texi/singular.tex(,571) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,572) @node Visualization, Coding theory, Symbolic-numerical solving, SINGULAR libraries
../singular_texi/singular.tex(,573) @section Visualization
../singular_texi/singular.tex(,574) @cindex Visualization
../singular_texi/singular.tex(,575) 
../singular_texi/singular.tex(,576) @menu
../singular_texi/singular.tex(,577) * graphics_lib:: procedures to draw  with Mathematica
../singular_texi/singular.tex(,578) * latex_lib:: procedures for typesetting in TeX
../singular_texi/singular.tex(,579) * paramet_lib:: procedures for parametrizations
../singular_texi/singular.tex(,580) * surf_lib:: interface to the surf program
../singular_texi/singular.tex(,581) @end menu
../singular_texi/singular.tex(,582) 
../singular_texi/singular.tex(,583) @c ---------------------------------------------------------
../singular_texi/singular.tex(,584) @node graphics_lib, latex_lib, Visualization, Visualization
../singular_texi/singular.tex(,585) @subsection graphics_lib
../singular_texi/singular.tex(,586) @c include of docu for graphics.lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/graphics_lib.doc
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/graphics_lib.doc INSTEAD
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,4) @c library version: (1.10,2001/02/19)
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,5) @c library file: ../Singular/LIB/graphics.lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,6) @cindex graphics.lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,7) @cindex graphics_lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,8) @table @asis
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,10) graphics.lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,12)     Procedures to use Graphics with Mathematica
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,14) Christian Gorzel, gorzelc@@math.uni-muenster.de
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,15) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,16) @end table
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,17) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,19) @menu
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,20) * staircase:: Mathematica text for displaying staircase of I
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,21) * mathinit:: string for loading Mathematica's ImplicitPlot
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,22) * mplot:: Mathematica text for various plots
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,23) @end menu
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,24) @c ---end content LibInfo---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,25) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,26) @c ------------------- staircase -------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,27) @node staircase, mathinit,, graphics_lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,28) @subsubsection staircase
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,29) @cindex staircase
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,30) @c ---content staircase---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,31) Procedure from library @code{graphics.lib} (@pxref{graphics_lib}).
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,32) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,33) @table @asis
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,34) @item @strong{Usage:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,35) staircase(s,I); s a string, I ideal in two variables
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,36) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,37) @item @strong{Return:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,38) string with Mathematica input for displaying staircase diagrams of an
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,39) ideal I, i.e. exponent vectors of the initial ideal of I
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,40) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,41) @item @strong{Note:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,42) ideal I should be given by a standard basis. Let s="" and copy and
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,43) paste the result into a Mathematica notebook.
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,44) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,45) @end table
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,46) @strong{Example:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,47) @smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,48) @c skipped computation of example staircase d2t_singular/graphics_lib.doc:46 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,49) LIB "graphics.lib";
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,50) ring r0 = 0,(x,y),ls;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,51) ideal I = -1x2y6-1x4y2, 7x6y5+1/2x7y4+6x4y6;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,52) staircase("",std(I));
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,53) ring r1 = 0,(x,y),dp;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,54) ideal I = fetch(r0,I);
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,55) staircase("",std(I));
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,56) ring r2 = 0,(x,y),wp(2,3);
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,57) ideal I = fetch(r0,I);
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,58) staircase("",std(I));
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,59) // Paste the output into a Mathematica notebook
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,60) // active evalutation of the cell with SHIFT RETURN
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,61) @end smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,62) @c ---end content staircase---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,63) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,64) @c ------------------- mathinit -------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,65) @node mathinit, mplot, staircase, graphics_lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,66) @subsubsection mathinit
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,67) @cindex mathinit
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,68) @c ---content mathinit---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,69) Procedure from library @code{graphics.lib} (@pxref{graphics_lib}).
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,70) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,71) @table @asis
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,72) @item @strong{Usage:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,73) mathinit();
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,74) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,75) @item @strong{Return:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,76) initializing string for loading Mathematica's ImplicitPlot
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,77) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,78) @end table
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,79) @strong{Example:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,80) @smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,81) @c skipped computation of example mathinit d2t_singular/graphics_lib.doc:80 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,82) LIB "graphics.lib";
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,83) mathinit();
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,84) // Paste the output into a Mathematica notebook
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,85) // active evalutation of the cell with SHIFT RETURN
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,86) @end smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,87) @c ---end content mathinit---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,88) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,89) @c ------------------- mplot -------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,90) @node mplot,, mathinit, graphics_lib
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,91) @subsubsection mplot
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,92) @cindex mplot
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,93) @c ---content mplot---
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,94) Procedure from library @code{graphics.lib} (@pxref{graphics_lib}).
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,95) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,96) @table @asis
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,97) @item @strong{Usage:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,98) mplot(fname, I [,I1,I2,..,s] ); fname=string; I,I1,I2,..=ideals,
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,99) s=string representing the plot region.@*
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,100) Use the ideals I1,I2,.. in order to produce multiple plots (they need
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,101) to have the same number of entries as I!).
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,102) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,103) @item @strong{Return:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,104) string, text with Mathematica commands to display a plot
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,105) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,106) @item @strong{Note:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,107) The plotregion is defaulted to -1,1 around zero.
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,108) @*For implicit given curves enter first the string returned by
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,109) proc mathinit into Mathematica in order to load ImplicitPlot.
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,110) The following conventions for I are used:
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,111)   @format
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,112)   - ideal with 2 entries in one variable means a parametrised plane curve,
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,113)   - ideal with 3 entries in one variable means a parametrised space curve,
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,114)   - ideal with 3 entries in two variables means a parametrised surface,
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,115)   - ideal with 2 entries in two variables means an implicit curve
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,116)     given as I[1]==I[2],
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,117)   - ideal with 1 entry (or one polynomial) in two variables means
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,118)     an implicit curve given as  f == 0,
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,119)   @end format
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,120) 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,121) @end table
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,122) @strong{Example:}
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,123) @smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,124) @c skipped computation of example mplot d2t_singular/graphics_lib.doc:124 
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,125) LIB "graphics.lib";
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,126) // ---------  plane curves ------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,127) ring rr0 = 0,x,dp; export rr0;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,128) ideal I = x3 + x, x2;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,129) ideal J = x2, -x+x3;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,130) mplot("",I,J,"-2,2");
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,131) // Paste the output into a Mathematica notebook
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,132) // active evalutation of the cell with SHIFT RETURN
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,133) // --------- space curves --------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,134) I = x3,-1/10x3+x2,x2;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,135) mplot("",I);
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,136) // Paste the output into a Mathematica notebook
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,137) // active evalutation of the cell with SHIFT RETURN
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,138) // ----------- surfaces -------------------
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,139) ring rr1 = 0,(x,y),dp; export rr1;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,140) ideal J = xy,y,x2;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,141) mplot("",J,"-2,1","1,2");
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,142) // Paste the output into a Mathematica notebook
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,143) // active evalutation of the cell with SHIFT RETURN
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,144) kill rr0,rr1;
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,145) @end smallexample
../singular_texi/./d2t_singular/graphics_lib_noEx.tex(,146) @c ---end content mplot---
../singular_texi/singular.tex(,588) @c ---------------------------------------------------------
../singular_texi/singular.tex(,589) @node latex_lib, paramet_lib, graphics_lib, Visualization
../singular_texi/singular.tex(,590) @subsection latex_lib
../singular_texi/singular.tex(,591) @c include of docu for latex.lib
../singular_texi/./d2t_singular/latex_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/latex_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/latex_lib.doc
../singular_texi/./d2t_singular/latex_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/latex_lib.doc INSTEAD
../singular_texi/./d2t_singular/latex_lib.tex(,4) @c library version: (1.19.2.1,2002/02/20)
../singular_texi/./d2t_singular/latex_lib.tex(,5) @c library file: ../Singular/LIB/latex.lib
../singular_texi/./d2t_singular/latex_lib.tex(,6) @cindex latex.lib
../singular_texi/./d2t_singular/latex_lib.tex(,7) @cindex latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/latex_lib.tex(,10) latex.lib
../singular_texi/./d2t_singular/latex_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/latex_lib.tex(,12)     Typesetting of Singular-Objects in LaTeX2e
../singular_texi/./d2t_singular/latex_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/latex_lib.tex(,14) Christian Gorzel, gorzelc@@math.uni-muenster.de
../singular_texi/./d2t_singular/latex_lib.tex(,15) 
../singular_texi/./d2t_singular/latex_lib.tex(,16) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,17) 
../singular_texi/./d2t_singular/latex_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/latex_lib.tex(,19) @menu
../singular_texi/./d2t_singular/latex_lib.tex(,20) * closetex:: writes closing line for LaTeX-document
../singular_texi/./d2t_singular/latex_lib.tex(,21) * opentex:: writes header for LaTeX-file fnm
../singular_texi/./d2t_singular/latex_lib.tex(,22) * tex:: calls LaTeX2e for LaTeX-file fnm
../singular_texi/./d2t_singular/latex_lib.tex(,23) * texdemo:: produces a file explaining the features of this lib
../singular_texi/./d2t_singular/latex_lib.tex(,24) * texfactorize:: creates string in LaTeX-format for factors of poly f
../singular_texi/./d2t_singular/latex_lib.tex(,25) * texmap:: creates string in LaTeX-format for map m:r1->r2
../singular_texi/./d2t_singular/latex_lib.tex(,26) * texname:: creates string in LaTeX-format for identifier
../singular_texi/./d2t_singular/latex_lib.tex(,27) * texobj:: creates string in LaTeX-format for any (basic) type
../singular_texi/./d2t_singular/latex_lib.tex(,28) * texpoly:: creates string in LaTeX-format for poly
../singular_texi/./d2t_singular/latex_lib.tex(,29) * texproc:: creates string in LaTeX-format of text from proc p
../singular_texi/./d2t_singular/latex_lib.tex(,30) * texring:: creates string in LaTeX-format for ring/qring
../singular_texi/./d2t_singular/latex_lib.tex(,31) * rmx:: removes .aux and .log files of LaTeX-files
../singular_texi/./d2t_singular/latex_lib.tex(,32) * xdvi:: calls xdvi for dvi-files
../singular_texi/./d2t_singular/latex_lib.tex(,33) @end menu
../singular_texi/./d2t_singular/latex_lib.tex(,34) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,35) @item @strong{Global variables:}
../singular_texi/./d2t_singular/latex_lib.tex(,36) TeXwidth, TeXnofrac, TeXbrack, TeXproj, TeXaligned, TeXreplace, NoDollars
../singular_texi/./d2t_singular/latex_lib.tex(,37) are used to control the typesetting.
../singular_texi/./d2t_singular/latex_lib.tex(,38) Call @code{texdemo();} to obtain a LaTeX2e file @code{texlibdemo.tex}
../singular_texi/./d2t_singular/latex_lib.tex(,39) explaining the features of @code{latex.lib} and its global variables.
../singular_texi/./d2t_singular/latex_lib.tex(,40) @format
../singular_texi/./d2t_singular/latex_lib.tex(,41)   @code{TeXwidth} (int) -1, 0, 1..9, >9:  controls breaking of long polynomials
../singular_texi/./d2t_singular/latex_lib.tex(,42)   @code{TeXnofrac} (int) flag:  write 1/2 instead of \frac@{1@}@{2@}
../singular_texi/./d2t_singular/latex_lib.tex(,43)   @code{TeXbrack} (string) "@{", "(", "<", "|", empty string: 
../singular_texi/./d2t_singular/latex_lib.tex(,44)                                    controls brackets around ideals and matrices
../singular_texi/./d2t_singular/latex_lib.tex(,45)   @code{TeXproj} (int) flag:  write ":" instead of "," in vectors
../singular_texi/./d2t_singular/latex_lib.tex(,46)   @code{TeXaligned} (int) flag:  write maps (and ideals) aligned
../singular_texi/./d2t_singular/latex_lib.tex(,47)   @code{TeXreplace} (list) list entries = 2 strings:  replacing symbols
../singular_texi/./d2t_singular/latex_lib.tex(,48)   @code{NoDollars} (int) flag:  suppresses surrounding $ signs
../singular_texi/./d2t_singular/latex_lib.tex(,49) @end format
../singular_texi/./d2t_singular/latex_lib.tex(,50) 
../singular_texi/./d2t_singular/latex_lib.tex(,51) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,52) @c ---end content LibInfo---
../singular_texi/./d2t_singular/latex_lib.tex(,53) 
../singular_texi/./d2t_singular/latex_lib.tex(,54) @c ------------------- closetex -------------
../singular_texi/./d2t_singular/latex_lib.tex(,55) @node closetex, opentex,, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,56) @subsubsection closetex
../singular_texi/./d2t_singular/latex_lib.tex(,57) @cindex closetex
../singular_texi/./d2t_singular/latex_lib.tex(,58) @c ---content closetex---
../singular_texi/./d2t_singular/latex_lib.tex(,59) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,60) 
../singular_texi/./d2t_singular/latex_lib.tex(,61) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,62) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,63) closetex(fname); fname string
../singular_texi/./d2t_singular/latex_lib.tex(,64) 
../singular_texi/./d2t_singular/latex_lib.tex(,65) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,66) nothing; writes a LaTeX2e closing line into file @code{<fname>}.
../singular_texi/./d2t_singular/latex_lib.tex(,67) 
../singular_texi/./d2t_singular/latex_lib.tex(,68) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,69) preceding ">>" are deleted and suffix ".tex" (if not given)
../singular_texi/./d2t_singular/latex_lib.tex(,70) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,71) 
../singular_texi/./d2t_singular/latex_lib.tex(,72) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,73) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,74) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,75) @c computed example closetex d2t_singular/latex_lib.doc:73 
../singular_texi/./d2t_singular/latex_lib.tex(,76) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,77) opentex("exmpl");
../singular_texi/./d2t_singular/latex_lib.tex(,78) texobj("exmpl","@{\\large \\bf hello@}");
../singular_texi/./d2t_singular/latex_lib.tex(,79) closetex("exmpl");
../singular_texi/./d2t_singular/latex_lib.tex(,80) @c end example closetex d2t_singular/latex_lib.doc:73
../singular_texi/./d2t_singular/latex_lib.tex(,81) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,82) @c ---end content closetex---
../singular_texi/./d2t_singular/latex_lib.tex(,83) 
../singular_texi/./d2t_singular/latex_lib.tex(,84) @c ------------------- opentex -------------
../singular_texi/./d2t_singular/latex_lib.tex(,85) @node opentex, tex, closetex, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,86) @subsubsection opentex
../singular_texi/./d2t_singular/latex_lib.tex(,87) @cindex opentex
../singular_texi/./d2t_singular/latex_lib.tex(,88) @c ---content opentex---
../singular_texi/./d2t_singular/latex_lib.tex(,89) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,90) 
../singular_texi/./d2t_singular/latex_lib.tex(,91) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,92) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,93) opentex(fname); fname string
../singular_texi/./d2t_singular/latex_lib.tex(,94) 
../singular_texi/./d2t_singular/latex_lib.tex(,95) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,96) nothing; writes a LaTeX2e header into a new file @code{<fname>}.
../singular_texi/./d2t_singular/latex_lib.tex(,97) 
../singular_texi/./d2t_singular/latex_lib.tex(,98) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,99) preceding ">>" are deleted and suffix ".tex" (if not given)
../singular_texi/./d2t_singular/latex_lib.tex(,100) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,101) 
../singular_texi/./d2t_singular/latex_lib.tex(,102) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,103) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,104) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,105) @c computed example opentex d2t_singular/latex_lib.doc:103 
../singular_texi/./d2t_singular/latex_lib.tex(,106) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,107) opentex("exmpl");
../singular_texi/./d2t_singular/latex_lib.tex(,108) texobj("exmpl","hello");
../singular_texi/./d2t_singular/latex_lib.tex(,109) closetex("exmpl");
../singular_texi/./d2t_singular/latex_lib.tex(,110) @c end example opentex d2t_singular/latex_lib.doc:103
../singular_texi/./d2t_singular/latex_lib.tex(,111) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,112) @c ---end content opentex---
../singular_texi/./d2t_singular/latex_lib.tex(,113) 
../singular_texi/./d2t_singular/latex_lib.tex(,114) @c ------------------- tex -------------
../singular_texi/./d2t_singular/latex_lib.tex(,115) @node tex, texdemo, opentex, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,116) @subsubsection tex
../singular_texi/./d2t_singular/latex_lib.tex(,117) @cindex tex
../singular_texi/./d2t_singular/latex_lib.tex(,118) @c ---content tex---
../singular_texi/./d2t_singular/latex_lib.tex(,119) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,120) 
../singular_texi/./d2t_singular/latex_lib.tex(,121) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,122) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,123) tex(fname); fname string
../singular_texi/./d2t_singular/latex_lib.tex(,124) 
../singular_texi/./d2t_singular/latex_lib.tex(,125) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,126) nothing; calls latex (LaTeX2e) for compiling the file fname
../singular_texi/./d2t_singular/latex_lib.tex(,127) 
../singular_texi/./d2t_singular/latex_lib.tex(,128) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,129) preceding ">>" are deleted and suffix ".tex" (if not given)
../singular_texi/./d2t_singular/latex_lib.tex(,130) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,131) 
../singular_texi/./d2t_singular/latex_lib.tex(,132) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,133) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,134) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,135) @c computed example tex d2t_singular/latex_lib.doc:133 
../singular_texi/./d2t_singular/latex_lib.tex(,136) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,137) ring r;
../singular_texi/./d2t_singular/latex_lib.tex(,138) ideal I = maxideal(7);
../singular_texi/./d2t_singular/latex_lib.tex(,139) opentex("exp001");              // open latex2e document
../singular_texi/./d2t_singular/latex_lib.tex(,140) texobj("exp001","An ideal ",I);
../singular_texi/./d2t_singular/latex_lib.tex(,141) closetex("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,142) tex("exp001"); 
../singular_texi/./d2t_singular/latex_lib.tex(,143) @expansion{} calling  latex2e  for : exp001.tex 
../singular_texi/./d2t_singular/latex_lib.tex(,144) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,145) @expansion{} This is TeX, Version 3.14159 (Web2C 7.3.1)
../singular_texi/./d2t_singular/latex_lib.tex(,146) @expansion{} (exp001.tex
../singular_texi/./d2t_singular/latex_lib.tex(,147) @expansion{} LaTeX2e <1998/12/01> patch level 1
../singular_texi/./d2t_singular/latex_lib.tex(,148) @expansion{} Babel <v3.6x> and hyphenation patterns for american, french, german, nger\
../singular_texi/./d2t_singular/latex_lib.tex(,149)    man, i
../singular_texi/./d2t_singular/latex_lib.tex(,150) @expansion{} talian, nohyphenation, loaded.
../singular_texi/./d2t_singular/latex_lib.tex(,151) @expansion{} (/usr/share/texmf/tex/latex/base/article.cls
../singular_texi/./d2t_singular/latex_lib.tex(,152) @expansion{} Document Class: article 1999/01/07 v1.4a Standard LaTeX document class
../singular_texi/./d2t_singular/latex_lib.tex(,153) @expansion{} (/usr/share/texmf/tex/latex/base/size10.clo))
../singular_texi/./d2t_singular/latex_lib.tex(,154) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsmath.sty
../singular_texi/./d2t_singular/latex_lib.tex(,155) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amstext.sty
../singular_texi/./d2t_singular/latex_lib.tex(,156) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsgen.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,157) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsbsy.sty)
../singular_texi/./d2t_singular/latex_lib.tex(,158) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsopn.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,159) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amssymb.sty
../singular_texi/./d2t_singular/latex_lib.tex(,160) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amsfonts.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,161) @expansion{} No file exp001.aux.
../singular_texi/./d2t_singular/latex_lib.tex(,162) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsa.fd)
../singular_texi/./d2t_singular/latex_lib.tex(,163) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsb.fd) [1] (exp001.aux) )
../singular_texi/./d2t_singular/latex_lib.tex(,164) @expansion{} Output written on exp001.dvi (1 page, 2912 bytes).
../singular_texi/./d2t_singular/latex_lib.tex(,165) @expansion{} Transcript written on exp001.log.
../singular_texi/./d2t_singular/latex_lib.tex(,166) system("sh","rm exp001.*");
../singular_texi/./d2t_singular/latex_lib.tex(,167) @expansion{} 0
../singular_texi/./d2t_singular/latex_lib.tex(,168) @c end example tex d2t_singular/latex_lib.doc:133
../singular_texi/./d2t_singular/latex_lib.tex(,169) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,170) @c ---end content tex---
../singular_texi/./d2t_singular/latex_lib.tex(,171) 
../singular_texi/./d2t_singular/latex_lib.tex(,172) @c ------------------- texdemo -------------
../singular_texi/./d2t_singular/latex_lib.tex(,173) @node texdemo, texfactorize, tex, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,174) @subsubsection texdemo
../singular_texi/./d2t_singular/latex_lib.tex(,175) @cindex texdemo
../singular_texi/./d2t_singular/latex_lib.tex(,176) @c ---content texdemo---
../singular_texi/./d2t_singular/latex_lib.tex(,177) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,178) 
../singular_texi/./d2t_singular/latex_lib.tex(,179) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,180) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,181) texdemo();
../singular_texi/./d2t_singular/latex_lib.tex(,182) 
../singular_texi/./d2t_singular/latex_lib.tex(,183) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,184) nothing; generates a LaTeX2e file called @code{texlibdemo.tex}
../singular_texi/./d2t_singular/latex_lib.tex(,185) explaining the features of @code{latex.lib} and its global variables.
../singular_texi/./d2t_singular/latex_lib.tex(,186) 
../singular_texi/./d2t_singular/latex_lib.tex(,187) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,188) this proc may take some time.
../singular_texi/./d2t_singular/latex_lib.tex(,189) 
../singular_texi/./d2t_singular/latex_lib.tex(,190) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,191) @c ---end content texdemo---
../singular_texi/./d2t_singular/latex_lib.tex(,192) 
../singular_texi/./d2t_singular/latex_lib.tex(,193) @c ------------------- texfactorize -------------
../singular_texi/./d2t_singular/latex_lib.tex(,194) @node texfactorize, texmap, texdemo, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,195) @subsubsection texfactorize
../singular_texi/./d2t_singular/latex_lib.tex(,196) @cindex texfactorize
../singular_texi/./d2t_singular/latex_lib.tex(,197) @c ---content texfactorize---
../singular_texi/./d2t_singular/latex_lib.tex(,198) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,199) 
../singular_texi/./d2t_singular/latex_lib.tex(,200) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,201) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,202) texfactorize(fname,f); fname string, f poly
../singular_texi/./d2t_singular/latex_lib.tex(,203) 
../singular_texi/./d2t_singular/latex_lib.tex(,204) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,205) if @code{fname=""}: string, f as a product of its irreducible
../singular_texi/./d2t_singular/latex_lib.tex(,206) factors@*
../singular_texi/./d2t_singular/latex_lib.tex(,207) otherwise: append this string to the file @code{<fname>}, and
../singular_texi/./d2t_singular/latex_lib.tex(,208) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,209) 
../singular_texi/./d2t_singular/latex_lib.tex(,210) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,211) preceding ">>" are deleted and suffix ".tex" (if not given)
../singular_texi/./d2t_singular/latex_lib.tex(,212) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,213) 
../singular_texi/./d2t_singular/latex_lib.tex(,214) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,215) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,216) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,217) @c computed example texfactorize d2t_singular/latex_lib.doc:191 
../singular_texi/./d2t_singular/latex_lib.tex(,218) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,219) ring r2 = 13,(x,y),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,220) poly f = (x+1+y)^2*x3y*(2x-2y)*y12;
../singular_texi/./d2t_singular/latex_lib.tex(,221) texfactorize("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,222) @expansion{} $-2\cdot x^@{3@}\cdot y^@{13@}\cdot (-x+y)\cdot (x+y+1)^@{2@}$
../singular_texi/./d2t_singular/latex_lib.tex(,223) ring R49 = (7,a),x,dp;
../singular_texi/./d2t_singular/latex_lib.tex(,224) minpoly = a2+a+3;
../singular_texi/./d2t_singular/latex_lib.tex(,225) poly f = (a24x5+x3)*a2x6*(x+1)^2;
../singular_texi/./d2t_singular/latex_lib.tex(,226) f;
../singular_texi/./d2t_singular/latex_lib.tex(,227) @expansion{} (a+3)*x13+(2a-1)*x12+(-2a+1)*x10+(-a-3)*x9
../singular_texi/./d2t_singular/latex_lib.tex(,228) texfactorize("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,229) @expansion{} $(a+3)\cdot (x-1)\cdot (x+1)^@{3@}\cdot x^@{9@}$
../singular_texi/./d2t_singular/latex_lib.tex(,230) @c end example texfactorize d2t_singular/latex_lib.doc:191
../singular_texi/./d2t_singular/latex_lib.tex(,231) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,232) @c ---end content texfactorize---
../singular_texi/./d2t_singular/latex_lib.tex(,233) 
../singular_texi/./d2t_singular/latex_lib.tex(,234) @c ------------------- texmap -------------
../singular_texi/./d2t_singular/latex_lib.tex(,235) @node texmap, texname, texfactorize, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,236) @subsubsection texmap
../singular_texi/./d2t_singular/latex_lib.tex(,237) @cindex texmap
../singular_texi/./d2t_singular/latex_lib.tex(,238) @c ---content texmap---
../singular_texi/./d2t_singular/latex_lib.tex(,239) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,240) 
../singular_texi/./d2t_singular/latex_lib.tex(,241) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,242) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,243) texmap(fname,m,@@r1,@@r2); fname string, m string/map, @@r1,@@r2 rings
../singular_texi/./d2t_singular/latex_lib.tex(,244) 
../singular_texi/./d2t_singular/latex_lib.tex(,245) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,246) if @code{fname=""}: string, the map m from @@r1 to @@r2 (preceded
../singular_texi/./d2t_singular/latex_lib.tex(,247) by its name if m = string) in TeX-typesetting;@*
../singular_texi/./d2t_singular/latex_lib.tex(,248) otherwise: append this string to the file @code{<fname>}, and
../singular_texi/./d2t_singular/latex_lib.tex(,249) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,250) 
../singular_texi/./d2t_singular/latex_lib.tex(,251) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,252) preceding ">>" are deleted in @code{fname}, and suffix ".tex"
../singular_texi/./d2t_singular/latex_lib.tex(,253) (if not given) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,254) If m is a string then it has to be the name of an existing map
../singular_texi/./d2t_singular/latex_lib.tex(,255) from @@r1 to @@r2.
../singular_texi/./d2t_singular/latex_lib.tex(,256) 
../singular_texi/./d2t_singular/latex_lib.tex(,257) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,258) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,259) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,260) @c computed example texmap d2t_singular/latex_lib.doc:231 
../singular_texi/./d2t_singular/latex_lib.tex(,261) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,262) // -------- prepare for example ---------
../singular_texi/./d2t_singular/latex_lib.tex(,263) if (defined(TeXaligned)) @{int Teali=TeXaligned; kill TeXaligned;@}
../singular_texi/./d2t_singular/latex_lib.tex(,264) if (defined(TeXreplace)) @{list Terep=TeXreplace; kill TeXreplace;@}
../singular_texi/./d2t_singular/latex_lib.tex(,265) // -------- the example starts here ---------
../singular_texi/./d2t_singular/latex_lib.tex(,266) //
../singular_texi/./d2t_singular/latex_lib.tex(,267) string fname = "tldemo";
../singular_texi/./d2t_singular/latex_lib.tex(,268) ring @@r1=0,(x,y,z),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,269) if(system("with","Namespaces")) @{ exportto(Current, @@r1); @}
../singular_texi/./d2t_singular/latex_lib.tex(,270) else @{ export @@r1; @}
../singular_texi/./d2t_singular/latex_lib.tex(,271) @expansion{} // ** `@@r1` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,272) ring r2=0,(u,v),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,273) map @@phi =(@@r1,u2,uv -v,v2); export @@phi;
../singular_texi/./d2t_singular/latex_lib.tex(,274) @expansion{} // ** `@@phi` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,275) list TeXreplace;
../singular_texi/./d2t_singular/latex_lib.tex(,276) TeXreplace[1] = list("@@phi","\\phi");    // @@phi --> \phi
../singular_texi/./d2t_singular/latex_lib.tex(,277) export TeXreplace;
../singular_texi/./d2t_singular/latex_lib.tex(,278) @expansion{} // ** `TeXreplace` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,279) texmap("","@@phi",@@r1,r2);                // standard form
../singular_texi/./d2t_singular/latex_lib.tex(,280) @expansion{} $$
../singular_texi/./d2t_singular/latex_lib.tex(,281) @expansion{} \begin@{array@}@{rcc@}
../singular_texi/./d2t_singular/latex_lib.tex(,282) @expansion{} \phi:\Q[x,y,z] & \longrightarrow & \Q[u,v]\\[2mm]
../singular_texi/./d2t_singular/latex_lib.tex(,283) @expansion{} \left(x,y,z\right) & \longmapsto & 
../singular_texi/./d2t_singular/latex_lib.tex(,284) @expansion{}  \left(
../singular_texi/./d2t_singular/latex_lib.tex(,285) @expansion{} \begin@{array@}@{c@}
../singular_texi/./d2t_singular/latex_lib.tex(,286) @expansion{} u^@{2@}\\
../singular_texi/./d2t_singular/latex_lib.tex(,287) @expansion{} uv-v\\
../singular_texi/./d2t_singular/latex_lib.tex(,288) @expansion{} v^@{2@}
../singular_texi/./d2t_singular/latex_lib.tex(,289) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,290) @expansion{} \right)
../singular_texi/./d2t_singular/latex_lib.tex(,291) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,292) @expansion{} $$
../singular_texi/./d2t_singular/latex_lib.tex(,293) //
../singular_texi/./d2t_singular/latex_lib.tex(,294) int TeXaligned; export TeXaligned;       // map in one line
../singular_texi/./d2t_singular/latex_lib.tex(,295) @expansion{} // ** `TeXaligned` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,296) texmap("",@@phi,@@r1,r2);
../singular_texi/./d2t_singular/latex_lib.tex(,297) @expansion{} $\Q[x,y,z]\longrightarrow\Q[u,v], \ \left(x,y,z\right)\longmapsto \left(u\
../singular_texi/./d2t_singular/latex_lib.tex(,298)    ^@{2@},uv-v,v^@{2@}\right)$
../singular_texi/./d2t_singular/latex_lib.tex(,299) //
../singular_texi/./d2t_singular/latex_lib.tex(,300) kill @@r1,TeXreplace,TeXaligned;
../singular_texi/./d2t_singular/latex_lib.tex(,301) //
../singular_texi/./d2t_singular/latex_lib.tex(,302) // --- restore global variables if previously defined ---
../singular_texi/./d2t_singular/latex_lib.tex(,303) if (defined(Teali)) @{int TeXaligned=Teali; export TeXaligned; kill Teali;@}
../singular_texi/./d2t_singular/latex_lib.tex(,304) if (defined(Terep)) @{list TeXreplace=Terep; export TeXreplace; kill Terep;@}
../singular_texi/./d2t_singular/latex_lib.tex(,305) @c end example texmap d2t_singular/latex_lib.doc:231
../singular_texi/./d2t_singular/latex_lib.tex(,306) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,307) @c ---end content texmap---
../singular_texi/./d2t_singular/latex_lib.tex(,308) 
../singular_texi/./d2t_singular/latex_lib.tex(,309) @c ------------------- texname -------------
../singular_texi/./d2t_singular/latex_lib.tex(,310) @node texname, texobj, texmap, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,311) @subsubsection texname
../singular_texi/./d2t_singular/latex_lib.tex(,312) @cindex texname
../singular_texi/./d2t_singular/latex_lib.tex(,313) @c ---content texname---
../singular_texi/./d2t_singular/latex_lib.tex(,314) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,315) 
../singular_texi/./d2t_singular/latex_lib.tex(,316) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,317) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,318) texname(fname,s); fname,s strings
../singular_texi/./d2t_singular/latex_lib.tex(,319) 
../singular_texi/./d2t_singular/latex_lib.tex(,320) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,321) if @code{fname=""}: string, the transformed string s, where the
../singular_texi/./d2t_singular/latex_lib.tex(,322) following rules apply:
../singular_texi/./d2t_singular/latex_lib.tex(,323) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,324)       s' + "~"             -->  "\\tilde@{"+ s' +"@}"
../singular_texi/./d2t_singular/latex_lib.tex(,325)      "_" + int             -->       "_@{" + int +"@}" 
../singular_texi/./d2t_singular/latex_lib.tex(,326)   "[" + s' + "]"           -->      "_@{" + s' + "@}"
../singular_texi/./d2t_singular/latex_lib.tex(,327)    "A..Z" + int            --> "A..Z" + "^@{" + int + "@}"    
../singular_texi/./d2t_singular/latex_lib.tex(,328)    "a..z" + int            --> "a..z" + "_@{" + int + "@}"
../singular_texi/./d2t_singular/latex_lib.tex(,329) "(" + int + "," + s' + ")" --> "_@{"+ int +"@}" + "^@{" + s'+"@}"
../singular_texi/./d2t_singular/latex_lib.tex(,330) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,331) Anyhow, strings which begin with a @code{"@{"} are only changed
../singular_texi/./d2t_singular/latex_lib.tex(,332) by deleting the first and last character (intended to remove the
../singular_texi/./d2t_singular/latex_lib.tex(,333) surrounding curly brackets).
../singular_texi/./d2t_singular/latex_lib.tex(,334) 
../singular_texi/./d2t_singular/latex_lib.tex(,335) if @code{fname!=""}: append the transformed string s to the file
../singular_texi/./d2t_singular/latex_lib.tex(,336) @code{<fname>}, and return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,337) 
../singular_texi/./d2t_singular/latex_lib.tex(,338) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,339) preceding ">>" are deleted in @code{fname}, and suffix ".tex"
../singular_texi/./d2t_singular/latex_lib.tex(,340) (if not given) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,341) 
../singular_texi/./d2t_singular/latex_lib.tex(,342) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,343) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,344) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,345) @c computed example texname d2t_singular/latex_lib.doc:297 
../singular_texi/./d2t_singular/latex_lib.tex(,346) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,347) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/latex_lib.tex(,348) poly f = 3xy4 + 2xy2 + x5y3 + x + y6;
../singular_texi/./d2t_singular/latex_lib.tex(,349) texname("","@{f(10)@}");
../singular_texi/./d2t_singular/latex_lib.tex(,350) @expansion{} f(10)
../singular_texi/./d2t_singular/latex_lib.tex(,351) texname("","f(10) =");
../singular_texi/./d2t_singular/latex_lib.tex(,352) @expansion{} f_@{10@} =
../singular_texi/./d2t_singular/latex_lib.tex(,353) texname("","n1");
../singular_texi/./d2t_singular/latex_lib.tex(,354) @expansion{} n_@{1@}
../singular_texi/./d2t_singular/latex_lib.tex(,355) texname("","T1_12");
../singular_texi/./d2t_singular/latex_lib.tex(,356) @expansion{} T^@{1@}_@{12@}
../singular_texi/./d2t_singular/latex_lib.tex(,357) texname("","g'_11");
../singular_texi/./d2t_singular/latex_lib.tex(,358) @expansion{} g'_@{11@}
../singular_texi/./d2t_singular/latex_lib.tex(,359) texname("","f23");
../singular_texi/./d2t_singular/latex_lib.tex(,360) @expansion{} f_@{23@}
../singular_texi/./d2t_singular/latex_lib.tex(,361) texname("","M[2,3]");
../singular_texi/./d2t_singular/latex_lib.tex(,362) @expansion{} M_@{2,3@}
../singular_texi/./d2t_singular/latex_lib.tex(,363) texname("","A(0,3);");
../singular_texi/./d2t_singular/latex_lib.tex(,364) @expansion{} A_@{0@}^@{3@};
../singular_texi/./d2t_singular/latex_lib.tex(,365) texname("","E~(3)");
../singular_texi/./d2t_singular/latex_lib.tex(,366) @expansion{} \tilde@{E@}_@{3@}
../singular_texi/./d2t_singular/latex_lib.tex(,367) @c end example texname d2t_singular/latex_lib.doc:297
../singular_texi/./d2t_singular/latex_lib.tex(,368) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,369) @c ---end content texname---
../singular_texi/./d2t_singular/latex_lib.tex(,370) 
../singular_texi/./d2t_singular/latex_lib.tex(,371) @c ------------------- texobj -------------
../singular_texi/./d2t_singular/latex_lib.tex(,372) @node texobj, texpoly, texname, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,373) @subsubsection texobj
../singular_texi/./d2t_singular/latex_lib.tex(,374) @cindex texobj
../singular_texi/./d2t_singular/latex_lib.tex(,375) @c ---content texobj---
../singular_texi/./d2t_singular/latex_lib.tex(,376) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,377) 
../singular_texi/./d2t_singular/latex_lib.tex(,378) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,379) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,380) texobj(fname,l); fname string, l list
../singular_texi/./d2t_singular/latex_lib.tex(,381) 
../singular_texi/./d2t_singular/latex_lib.tex(,382) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,383) if @code{fname=""}: string, the entries of l in LaTeX-typesetting;@*
../singular_texi/./d2t_singular/latex_lib.tex(,384) otherwise: append this string to the file @code{<fname>}, and
../singular_texi/./d2t_singular/latex_lib.tex(,385) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,386) 
../singular_texi/./d2t_singular/latex_lib.tex(,387) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,388) preceding ">>" are deleted in @code{fname}, and suffix ".tex"
../singular_texi/./d2t_singular/latex_lib.tex(,389) (if not given) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,390) 
../singular_texi/./d2t_singular/latex_lib.tex(,391) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,392) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,393) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,394) @c computed example texobj d2t_singular/latex_lib.doc:337 
../singular_texi/./d2t_singular/latex_lib.tex(,395) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,396) // -------- prepare for example ---------
../singular_texi/./d2t_singular/latex_lib.tex(,397) if (defined(TeXaligned)) @{int Teali=TeXaligned; kill TeXaligned;@}
../singular_texi/./d2t_singular/latex_lib.tex(,398) if (defined(TeXbrack))@{string Tebra=TeXbrack; kill TeXbrack;@}
../singular_texi/./d2t_singular/latex_lib.tex(,399) //
../singular_texi/./d2t_singular/latex_lib.tex(,400) //  --------------  typesetting for polynomials ----------
../singular_texi/./d2t_singular/latex_lib.tex(,401) ring r = 0,(x,y),lp;
../singular_texi/./d2t_singular/latex_lib.tex(,402) poly f = x5y3 + 3xy4 + 2xy2 + y6;
../singular_texi/./d2t_singular/latex_lib.tex(,403) f;
../singular_texi/./d2t_singular/latex_lib.tex(,404) @expansion{} x5y3+3xy4+2xy2+y6
../singular_texi/./d2t_singular/latex_lib.tex(,405) texobj("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,406) @expansion{} $$\begin@{array@}@{rl@}
../singular_texi/./d2t_singular/latex_lib.tex(,407) @expansion{} & x^@{5@}y^@{3@}+3xy^@{4@}+2xy^@{2@}+y^@{6@}\\
../singular_texi/./d2t_singular/latex_lib.tex(,408) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,409) @expansion{} $$
../singular_texi/./d2t_singular/latex_lib.tex(,410) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,411) //  --------------  typesetting for ideals ----------
../singular_texi/./d2t_singular/latex_lib.tex(,412) ideal G = jacob(f);
../singular_texi/./d2t_singular/latex_lib.tex(,413) G;
../singular_texi/./d2t_singular/latex_lib.tex(,414) @expansion{} G[1]=5x4y3+3y4+2y2
../singular_texi/./d2t_singular/latex_lib.tex(,415) @expansion{} G[2]=3x5y2+12xy3+4xy+6y5
../singular_texi/./d2t_singular/latex_lib.tex(,416) texobj("",G);
../singular_texi/./d2t_singular/latex_lib.tex(,417) @expansion{} $$\left(
../singular_texi/./d2t_singular/latex_lib.tex(,418) @expansion{} \begin@{array@}@{c@}
../singular_texi/./d2t_singular/latex_lib.tex(,419) @expansion{} 5x^@{4@}y^@{3@}+3y^@{4@}+2y^@{2@}, \\
../singular_texi/./d2t_singular/latex_lib.tex(,420) @expansion{} 3x^@{5@}y^@{2@}+12xy^@{3@}+4xy+6y^@{5@}
../singular_texi/./d2t_singular/latex_lib.tex(,421) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,422) @expansion{} \right)$$
../singular_texi/./d2t_singular/latex_lib.tex(,423) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,424) //  --------------  variation of typesetting for ideals ----------
../singular_texi/./d2t_singular/latex_lib.tex(,425) int TeXaligned = 1; export TeXaligned;
../singular_texi/./d2t_singular/latex_lib.tex(,426) @expansion{} // ** `TeXaligned` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,427) string TeXbrack = "<"; export TeXbrack;
../singular_texi/./d2t_singular/latex_lib.tex(,428) @expansion{} // ** `TeXbrack` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,429) texobj("",G);
../singular_texi/./d2t_singular/latex_lib.tex(,430) @expansion{} $\left<5x^@{4@}y^@{3@}+3y^@{4@}+2y^@{2@},3x^@{5@}y^@{2@}+12xy^@{3@}+4xy+6y^@{5@}\right>$
../singular_texi/./d2t_singular/latex_lib.tex(,431) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,432) kill TeXaligned, TeXbrack;
../singular_texi/./d2t_singular/latex_lib.tex(,433) //  --------------  typesetting for matrices ----------
../singular_texi/./d2t_singular/latex_lib.tex(,434) matrix J = jacob(G);
../singular_texi/./d2t_singular/latex_lib.tex(,435) texobj("",J);
../singular_texi/./d2t_singular/latex_lib.tex(,436) @expansion{} $$\left(
../singular_texi/./d2t_singular/latex_lib.tex(,437) @expansion{} \begin@{array@}@{*@{2@}@{c@}@}
../singular_texi/./d2t_singular/latex_lib.tex(,438) @expansion{} 20x^@{3@}y^@{3@} & 15x^@{4@}y^@{2@}+12y^@{3@}+4y \\
../singular_texi/./d2t_singular/latex_lib.tex(,439) @expansion{} 15x^@{4@}y^@{2@}+12y^@{3@}+4y & 6x^@{5@}y+36xy^@{2@}+4x+30y^@{4@}
../singular_texi/./d2t_singular/latex_lib.tex(,440) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,441) @expansion{} \right)
../singular_texi/./d2t_singular/latex_lib.tex(,442) @expansion{} $$
../singular_texi/./d2t_singular/latex_lib.tex(,443) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,444) //  --------------  typesetting for intmats ----------
../singular_texi/./d2t_singular/latex_lib.tex(,445) intmat m[3][4] = 9,2,4,5,2,5,-2,4,-6,10,-1,2,7;
../singular_texi/./d2t_singular/latex_lib.tex(,446) texobj("",m);
../singular_texi/./d2t_singular/latex_lib.tex(,447) @expansion{} $$\left(
../singular_texi/./d2t_singular/latex_lib.tex(,448) @expansion{} \begin@{array@}@{*@{4@}@{r@}@}
../singular_texi/./d2t_singular/latex_lib.tex(,449) @expansion{} 9 & 2 & 4 & 5\\
../singular_texi/./d2t_singular/latex_lib.tex(,450) @expansion{} 2 & 5 & -2 & 4\\
../singular_texi/./d2t_singular/latex_lib.tex(,451) @expansion{} -6 & 10 & -1 & 2
../singular_texi/./d2t_singular/latex_lib.tex(,452) @expansion{} \end@{array@}
../singular_texi/./d2t_singular/latex_lib.tex(,453) @expansion{} \right)
../singular_texi/./d2t_singular/latex_lib.tex(,454) @expansion{} $$
../singular_texi/./d2t_singular/latex_lib.tex(,455) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,456) //
../singular_texi/./d2t_singular/latex_lib.tex(,457) // --- restore global variables if previously defined ---
../singular_texi/./d2t_singular/latex_lib.tex(,458) if (defined(Teali))@{int TeXaligned=Teali; export TeXaligned; kill Teali;@}
../singular_texi/./d2t_singular/latex_lib.tex(,459) if (defined(Tebra))@{string TeXbrack=Tebra; export TeXbrack; kill Tebra;@}
../singular_texi/./d2t_singular/latex_lib.tex(,460) @c end example texobj d2t_singular/latex_lib.doc:337
../singular_texi/./d2t_singular/latex_lib.tex(,461) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,462) @c ---end content texobj---
../singular_texi/./d2t_singular/latex_lib.tex(,463) 
../singular_texi/./d2t_singular/latex_lib.tex(,464) @c ------------------- texpoly -------------
../singular_texi/./d2t_singular/latex_lib.tex(,465) @node texpoly, texproc, texobj, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,466) @subsubsection texpoly
../singular_texi/./d2t_singular/latex_lib.tex(,467) @cindex texpoly
../singular_texi/./d2t_singular/latex_lib.tex(,468) @c ---content texpoly---
../singular_texi/./d2t_singular/latex_lib.tex(,469) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,470) 
../singular_texi/./d2t_singular/latex_lib.tex(,471) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,472) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,473) texpoly(fname,p); fname string, p poly
../singular_texi/./d2t_singular/latex_lib.tex(,474) 
../singular_texi/./d2t_singular/latex_lib.tex(,475) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,476) if @code{fname=""}: string, the poly p in LaTeX-typesetting;@*
../singular_texi/./d2t_singular/latex_lib.tex(,477) otherwise: append this string to the file @code{<fname>}, and
../singular_texi/./d2t_singular/latex_lib.tex(,478) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,479) 
../singular_texi/./d2t_singular/latex_lib.tex(,480) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,481) preceding ">>" are deleted in @code{fname}, and suffix ".tex"
../singular_texi/./d2t_singular/latex_lib.tex(,482) (if not given) is added to @code{fname}.
../singular_texi/./d2t_singular/latex_lib.tex(,483) 
../singular_texi/./d2t_singular/latex_lib.tex(,484) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,485) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,486) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,487) @c computed example texpoly d2t_singular/latex_lib.doc:394 
../singular_texi/./d2t_singular/latex_lib.tex(,488) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,489) ring r0=0,(x,y,z),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,490) poly f = -1x^2 + 2;
../singular_texi/./d2t_singular/latex_lib.tex(,491) texpoly("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,492) @expansion{} $-x^@{2@}+2$
../singular_texi/./d2t_singular/latex_lib.tex(,493) ring rr= real,(x,y,z),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,494) texpoly("",2x2y23z);
../singular_texi/./d2t_singular/latex_lib.tex(,495) @expansion{} $2.000x^@{2@}y^@{23@}z$
../singular_texi/./d2t_singular/latex_lib.tex(,496) ring r7= 7,(x,y,z),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,497) poly f = 2x2y23z;
../singular_texi/./d2t_singular/latex_lib.tex(,498) texpoly("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,499) @expansion{} $2x^@{2@}y^@{23@}z$
../singular_texi/./d2t_singular/latex_lib.tex(,500) ring rab =(0,a,b),(x,y,z),dp;
../singular_texi/./d2t_singular/latex_lib.tex(,501) poly f = (-2a2 +b3 -2)/a * x2y4z5 + (a2+1)*x + a+1;
../singular_texi/./d2t_singular/latex_lib.tex(,502) f;
../singular_texi/./d2t_singular/latex_lib.tex(,503) @expansion{} (-2a2+b3-2)/(a)*x2y4z5+(a2+1)*x+(a+1)
../singular_texi/./d2t_singular/latex_lib.tex(,504) texpoly("",f);
../singular_texi/./d2t_singular/latex_lib.tex(,505) @expansion{} $-\frac@{2a^@{2@}-b^@{3@}+2@}@{a@}x^@{2@}y^@{4@}z^@{5@}+(a^@{2@}+1)x+(a+1)$
../singular_texi/./d2t_singular/latex_lib.tex(,506) @c end example texpoly d2t_singular/latex_lib.doc:394
../singular_texi/./d2t_singular/latex_lib.tex(,507) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,508) @c ---end content texpoly---
../singular_texi/./d2t_singular/latex_lib.tex(,509) 
../singular_texi/./d2t_singular/latex_lib.tex(,510) @c ------------------- texproc -------------
../singular_texi/./d2t_singular/latex_lib.tex(,511) @node texproc, texring, texpoly, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,512) @subsubsection texproc
../singular_texi/./d2t_singular/latex_lib.tex(,513) @cindex texproc
../singular_texi/./d2t_singular/latex_lib.tex(,514) @c ---content texproc---
../singular_texi/./d2t_singular/latex_lib.tex(,515) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,516) 
../singular_texi/./d2t_singular/latex_lib.tex(,517) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,518) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,519) texproc(fname,pname); fname,pname strings
../singular_texi/./d2t_singular/latex_lib.tex(,520) 
../singular_texi/./d2t_singular/latex_lib.tex(,521) @item @strong{Assume:}
../singular_texi/./d2t_singular/latex_lib.tex(,522) @code{`pname`} is a procedure.
../singular_texi/./d2t_singular/latex_lib.tex(,523) 
../singular_texi/./d2t_singular/latex_lib.tex(,524) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,525) if @code{fname=""}: string, the proc @code{`pname`} in a verbatim
../singular_texi/./d2t_singular/latex_lib.tex(,526) environment in LaTeX-typesetting;@*
../singular_texi/./d2t_singular/latex_lib.tex(,527) otherwise: append this string to the file @code{<fname>}, and
../singular_texi/./d2t_singular/latex_lib.tex(,528) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,529) 
../singular_texi/./d2t_singular/latex_lib.tex(,530) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,531) preceding ">>" are deleted in @code{fname}, and suffix ".tex"
../singular_texi/./d2t_singular/latex_lib.tex(,532) (if not given) is added to @code{fname}.@*
../singular_texi/./d2t_singular/latex_lib.tex(,533) @code{texproc} cannot be applied to itself correctly.
../singular_texi/./d2t_singular/latex_lib.tex(,534) 
../singular_texi/./d2t_singular/latex_lib.tex(,535) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,536) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,537) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,538) @c computed example texproc d2t_singular/latex_lib.doc:440 
../singular_texi/./d2t_singular/latex_lib.tex(,539) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,540) proc exp(int i,int j,list #)
../singular_texi/./d2t_singular/latex_lib.tex(,541) @{ string s;
../singular_texi/./d2t_singular/latex_lib.tex(,542) if (size(#))
../singular_texi/./d2t_singular/latex_lib.tex(,543) @{
../singular_texi/./d2t_singular/latex_lib.tex(,544) for(i;i<=j;i++)
../singular_texi/./d2t_singular/latex_lib.tex(,545) @{ s = s + string(j) + string(#); @}
../singular_texi/./d2t_singular/latex_lib.tex(,546) @}
../singular_texi/./d2t_singular/latex_lib.tex(,547) return(s);
../singular_texi/./d2t_singular/latex_lib.tex(,548) @}
../singular_texi/./d2t_singular/latex_lib.tex(,549) export exp;
../singular_texi/./d2t_singular/latex_lib.tex(,550) @expansion{} // ** `exp` is already global
../singular_texi/./d2t_singular/latex_lib.tex(,551) texproc("","exp");
../singular_texi/./d2t_singular/latex_lib.tex(,552) @expansion{} \begin@{verbatim@}
../singular_texi/./d2t_singular/latex_lib.tex(,553) @expansion{} proc exp(int i,int j,list #)
../singular_texi/./d2t_singular/latex_lib.tex(,554) @expansion{} @{ 
../singular_texi/./d2t_singular/latex_lib.tex(,555) @expansion{}  string s;
../singular_texi/./d2t_singular/latex_lib.tex(,556) @expansion{} if (size(#))
../singular_texi/./d2t_singular/latex_lib.tex(,557) @expansion{} @{
../singular_texi/./d2t_singular/latex_lib.tex(,558) @expansion{} for(i;i<=j;i++)
../singular_texi/./d2t_singular/latex_lib.tex(,559) @expansion{} @{ s = s + string(j) + string(#); @}
../singular_texi/./d2t_singular/latex_lib.tex(,560) @expansion{} @}
../singular_texi/./d2t_singular/latex_lib.tex(,561) @expansion{} return(s);
../singular_texi/./d2t_singular/latex_lib.tex(,562) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,563) @expansion{} @}
../singular_texi/./d2t_singular/latex_lib.tex(,564) @expansion{} \end@{verbatim@}
../singular_texi/./d2t_singular/latex_lib.tex(,565) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,566) kill exp;
../singular_texi/./d2t_singular/latex_lib.tex(,567) @c end example texproc d2t_singular/latex_lib.doc:440
../singular_texi/./d2t_singular/latex_lib.tex(,568) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,569) @c ---end content texproc---
../singular_texi/./d2t_singular/latex_lib.tex(,570) 
../singular_texi/./d2t_singular/latex_lib.tex(,571) @c ------------------- texring -------------
../singular_texi/./d2t_singular/latex_lib.tex(,572) @node texring, rmx, texproc, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,573) @subsubsection texring
../singular_texi/./d2t_singular/latex_lib.tex(,574) @cindex texring
../singular_texi/./d2t_singular/latex_lib.tex(,575) @c ---content texring---
../singular_texi/./d2t_singular/latex_lib.tex(,576) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,577) 
../singular_texi/./d2t_singular/latex_lib.tex(,578) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,579) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,580) texring(fname, r[,L]); fname string, r ring, L list
../singular_texi/./d2t_singular/latex_lib.tex(,581) 
../singular_texi/./d2t_singular/latex_lib.tex(,582) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,583) if @code{fname=""}: string, the ring in TeX-typesetting;@*
../singular_texi/./d2t_singular/latex_lib.tex(,584) otherwise: append this string to the file @code{<fname>} and
../singular_texi/./d2t_singular/latex_lib.tex(,585) return nothing.
../singular_texi/./d2t_singular/latex_lib.tex(,586) 
../singular_texi/./d2t_singular/latex_lib.tex(,587) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,588) preceding ">>" are deleted and suffix ".tex" (if not given)
../singular_texi/./d2t_singular/latex_lib.tex(,589) is added to @code{fname}.@*
../singular_texi/./d2t_singular/latex_lib.tex(,590) The optional list L is assumed to be a list of strings which control,
../singular_texi/./d2t_singular/latex_lib.tex(,591) e.g., the symbol for the field of coefficients.@*
../singular_texi/./d2t_singular/latex_lib.tex(,592) For more details call @code{texdemo();} (generates a LaTeX2e
../singular_texi/./d2t_singular/latex_lib.tex(,593) file called @code{texlibdemo.tex} which explains all features of
../singular_texi/./d2t_singular/latex_lib.tex(,594) @code{texring}).
../singular_texi/./d2t_singular/latex_lib.tex(,595) 
../singular_texi/./d2t_singular/latex_lib.tex(,596) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,597) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,598) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,599) @c computed example texring d2t_singular/latex_lib.doc:486 
../singular_texi/./d2t_singular/latex_lib.tex(,600) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,601) ring r0 = 0,(x,y),dp;                // char = 0, polynomial ordering
../singular_texi/./d2t_singular/latex_lib.tex(,602) texring("",r0);
../singular_texi/./d2t_singular/latex_lib.tex(,603) @expansion{} $\Q[x,y]$
../singular_texi/./d2t_singular/latex_lib.tex(,604) //
../singular_texi/./d2t_singular/latex_lib.tex(,605) ring r7 =7,(x(0..2)),ds;             // char = 7, local ordering
../singular_texi/./d2t_singular/latex_lib.tex(,606) texring("",r7);
../singular_texi/./d2t_singular/latex_lib.tex(,607) @expansion{} $\Z_@{7@}[[x_@{0@},x_@{1@},x_@{2@}]]$
../singular_texi/./d2t_singular/latex_lib.tex(,608) //
../singular_texi/./d2t_singular/latex_lib.tex(,609) ring r1 = 0,(x1,x2,y1,y2),wp(1,2,3,4);
../singular_texi/./d2t_singular/latex_lib.tex(,610) texring("",r1);
../singular_texi/./d2t_singular/latex_lib.tex(,611) @expansion{} $\Q[x_@{1@},x_@{2@},y_@{1@},y_@{2@}]$
../singular_texi/./d2t_singular/latex_lib.tex(,612) //
../singular_texi/./d2t_singular/latex_lib.tex(,613) ring rr = real,(x),dp;               // real numbers
../singular_texi/./d2t_singular/latex_lib.tex(,614) texring("",rr);
../singular_texi/./d2t_singular/latex_lib.tex(,615) @expansion{} $\R[x]$
../singular_texi/./d2t_singular/latex_lib.tex(,616) //
../singular_texi/./d2t_singular/latex_lib.tex(,617) ring rabc =(0,t1,t2,t3),(x,y),dp;    // ring with parameters
../singular_texi/./d2t_singular/latex_lib.tex(,618) texring("",rabc);
../singular_texi/./d2t_singular/latex_lib.tex(,619) @expansion{} $\Q(t_@{1@},t_@{2@},t_@{3@})[x,y]$
../singular_texi/./d2t_singular/latex_lib.tex(,620) //
../singular_texi/./d2t_singular/latex_lib.tex(,621) ring ralg = (7,a),(x1,x2),ds;        // algebraic extension
../singular_texi/./d2t_singular/latex_lib.tex(,622) minpoly = a2-a+3;
../singular_texi/./d2t_singular/latex_lib.tex(,623) texring("",ralg);
../singular_texi/./d2t_singular/latex_lib.tex(,624) @expansion{} $\Z_@{7@}(a)[[x_@{1@},x_@{2@}]]$
../singular_texi/./d2t_singular/latex_lib.tex(,625) texring("",ralg,"mipo");
../singular_texi/./d2t_singular/latex_lib.tex(,626) @expansion{} $\Z_@{7@}(a)/(a^@{2@}-a+3)[[x_@{1@},x_@{2@}]]$
../singular_texi/./d2t_singular/latex_lib.tex(,627) //
../singular_texi/./d2t_singular/latex_lib.tex(,628) ring r49=(49,a),x,dp;                // Galois field  
../singular_texi/./d2t_singular/latex_lib.tex(,629) texring("",r49);
../singular_texi/./d2t_singular/latex_lib.tex(,630) @expansion{} $\F_@{49@}[x]$
../singular_texi/./d2t_singular/latex_lib.tex(,631) //
../singular_texi/./d2t_singular/latex_lib.tex(,632) setring r0;                          // quotient ring
../singular_texi/./d2t_singular/latex_lib.tex(,633) ideal i = x2-y3;
../singular_texi/./d2t_singular/latex_lib.tex(,634) qring q = std(i);
../singular_texi/./d2t_singular/latex_lib.tex(,635) texring("",q);
../singular_texi/./d2t_singular/latex_lib.tex(,636) @expansion{} $\Q[x,y]/\left(y^@{3@}-x^@{2@}\right)
../singular_texi/./d2t_singular/latex_lib.tex(,637) @expansion{} $
../singular_texi/./d2t_singular/latex_lib.tex(,638) //
../singular_texi/./d2t_singular/latex_lib.tex(,639) // ------------------ additional features -------------------
../singular_texi/./d2t_singular/latex_lib.tex(,640) ring r9 =0,(x(0..9)),ds;
../singular_texi/./d2t_singular/latex_lib.tex(,641) texring("",r9,1);
../singular_texi/./d2t_singular/latex_lib.tex(,642) @expansion{} $\Q[[x_@{0@},\ldots,x_@{9@}]]$
../singular_texi/./d2t_singular/latex_lib.tex(,643) texring("",r9,"C","@{","^G");
../singular_texi/./d2t_singular/latex_lib.tex(,644) @expansion{} $\C\@{x_@{0@},x_@{1@},x_@{2@},x_@{3@},x_@{4@},x_@{5@},x_@{6@},x_@{7@},x_@{8@},x_@{9@}\@}^G$
../singular_texi/./d2t_singular/latex_lib.tex(,645) //
../singular_texi/./d2t_singular/latex_lib.tex(,646) ring rxy = 0,(x(1..5),y(1..6)),ds;
../singular_texi/./d2t_singular/latex_lib.tex(,647) intvec v = 5,6;
../singular_texi/./d2t_singular/latex_lib.tex(,648) texring("",rxy,v);
../singular_texi/./d2t_singular/latex_lib.tex(,649) @expansion{} $\Q[[x_@{1@},\ldots,x_@{5@},y_@{1@},\ldots,y_@{6@}]]$
../singular_texi/./d2t_singular/latex_lib.tex(,650) @c end example texring d2t_singular/latex_lib.doc:486
../singular_texi/./d2t_singular/latex_lib.tex(,651) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,652) @c ---end content texring---
../singular_texi/./d2t_singular/latex_lib.tex(,653) 
../singular_texi/./d2t_singular/latex_lib.tex(,654) @c ------------------- rmx -------------
../singular_texi/./d2t_singular/latex_lib.tex(,655) @node rmx, xdvi, texring, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,656) @subsubsection rmx
../singular_texi/./d2t_singular/latex_lib.tex(,657) @cindex rmx
../singular_texi/./d2t_singular/latex_lib.tex(,658) @c ---content rmx---
../singular_texi/./d2t_singular/latex_lib.tex(,659) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,660) 
../singular_texi/./d2t_singular/latex_lib.tex(,661) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,662) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,663) rmx(fname); fname string
../singular_texi/./d2t_singular/latex_lib.tex(,664) 
../singular_texi/./d2t_singular/latex_lib.tex(,665) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,666) nothing; removes the @code{.log} and @code{.aux} files associated to
../singular_texi/./d2t_singular/latex_lib.tex(,667) the LaTeX file <fname>.@*
../singular_texi/./d2t_singular/latex_lib.tex(,668) 
../singular_texi/./d2t_singular/latex_lib.tex(,669) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,670) If @code{fname} ends by @code{".dvi"} or @code{".tex"}, the
../singular_texi/./d2t_singular/latex_lib.tex(,671) @code{.dvi} or @code{.tex} file will be deleted, too.
../singular_texi/./d2t_singular/latex_lib.tex(,672) 
../singular_texi/./d2t_singular/latex_lib.tex(,673) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,674) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,675) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,676) @c computed example rmx d2t_singular/latex_lib.doc:550 
../singular_texi/./d2t_singular/latex_lib.tex(,677) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,678) ring r;
../singular_texi/./d2t_singular/latex_lib.tex(,679) poly f = x+y+z;
../singular_texi/./d2t_singular/latex_lib.tex(,680) opentex("exp001");              // defaulted latex2e document
../singular_texi/./d2t_singular/latex_lib.tex(,681) texobj("exp001","A polynom",f);
../singular_texi/./d2t_singular/latex_lib.tex(,682) closetex("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,683) tex("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,684) @expansion{} calling  latex2e  for : exp001.tex 
../singular_texi/./d2t_singular/latex_lib.tex(,685) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,686) @expansion{} This is TeX, Version 3.14159 (Web2C 7.3.1)
../singular_texi/./d2t_singular/latex_lib.tex(,687) @expansion{} (exp001.tex
../singular_texi/./d2t_singular/latex_lib.tex(,688) @expansion{} LaTeX2e <1998/12/01> patch level 1
../singular_texi/./d2t_singular/latex_lib.tex(,689) @expansion{} Babel <v3.6x> and hyphenation patterns for american, french, german, nger\
../singular_texi/./d2t_singular/latex_lib.tex(,690)    man, i
../singular_texi/./d2t_singular/latex_lib.tex(,691) @expansion{} talian, nohyphenation, loaded.
../singular_texi/./d2t_singular/latex_lib.tex(,692) @expansion{} (/usr/share/texmf/tex/latex/base/article.cls
../singular_texi/./d2t_singular/latex_lib.tex(,693) @expansion{} Document Class: article 1999/01/07 v1.4a Standard LaTeX document class
../singular_texi/./d2t_singular/latex_lib.tex(,694) @expansion{} (/usr/share/texmf/tex/latex/base/size10.clo))
../singular_texi/./d2t_singular/latex_lib.tex(,695) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsmath.sty
../singular_texi/./d2t_singular/latex_lib.tex(,696) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amstext.sty
../singular_texi/./d2t_singular/latex_lib.tex(,697) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsgen.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,698) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsbsy.sty)
../singular_texi/./d2t_singular/latex_lib.tex(,699) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsopn.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,700) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amssymb.sty
../singular_texi/./d2t_singular/latex_lib.tex(,701) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amsfonts.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,702) @expansion{} No file exp001.aux.
../singular_texi/./d2t_singular/latex_lib.tex(,703) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsa.fd)
../singular_texi/./d2t_singular/latex_lib.tex(,704) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsb.fd) [1] (exp001.aux) )
../singular_texi/./d2t_singular/latex_lib.tex(,705) @expansion{} Output written on exp001.dvi (1 page, 308 bytes).
../singular_texi/./d2t_singular/latex_lib.tex(,706) @expansion{} Transcript written on exp001.log.
../singular_texi/./d2t_singular/latex_lib.tex(,707) rmx("exp001");   // removes aux and log file of exp001
../singular_texi/./d2t_singular/latex_lib.tex(,708) system("sh","rm exp001.*");
../singular_texi/./d2t_singular/latex_lib.tex(,709) @expansion{} 0
../singular_texi/./d2t_singular/latex_lib.tex(,710) @c end example rmx d2t_singular/latex_lib.doc:550
../singular_texi/./d2t_singular/latex_lib.tex(,711) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,712) @c ---end content rmx---
../singular_texi/./d2t_singular/latex_lib.tex(,713) 
../singular_texi/./d2t_singular/latex_lib.tex(,714) @c ------------------- xdvi -------------
../singular_texi/./d2t_singular/latex_lib.tex(,715) @node xdvi,, rmx, latex_lib
../singular_texi/./d2t_singular/latex_lib.tex(,716) @subsubsection xdvi
../singular_texi/./d2t_singular/latex_lib.tex(,717) @cindex xdvi
../singular_texi/./d2t_singular/latex_lib.tex(,718) @c ---content xdvi---
../singular_texi/./d2t_singular/latex_lib.tex(,719) Procedure from library @code{latex.lib} (@pxref{latex_lib}).
../singular_texi/./d2t_singular/latex_lib.tex(,720) 
../singular_texi/./d2t_singular/latex_lib.tex(,721) @table @asis
../singular_texi/./d2t_singular/latex_lib.tex(,722) @item @strong{Usage:}
../singular_texi/./d2t_singular/latex_lib.tex(,723) xdvi(fname[,style]); fname,style = string
../singular_texi/./d2t_singular/latex_lib.tex(,724) 
../singular_texi/./d2t_singular/latex_lib.tex(,725) @item @strong{Return:}
../singular_texi/./d2t_singular/latex_lib.tex(,726) nothing; displays dvi-file fname.dvi with previewer xdvi
../singular_texi/./d2t_singular/latex_lib.tex(,727) 
../singular_texi/./d2t_singular/latex_lib.tex(,728) @item @strong{Note:}
../singular_texi/./d2t_singular/latex_lib.tex(,729) ending .dvi may miss in fname
../singular_texi/./d2t_singular/latex_lib.tex(,730) @*style overwrites the default setting xdvi
../singular_texi/./d2t_singular/latex_lib.tex(,731) 
../singular_texi/./d2t_singular/latex_lib.tex(,732) @end table
../singular_texi/./d2t_singular/latex_lib.tex(,733) @strong{Example:}
../singular_texi/./d2t_singular/latex_lib.tex(,734) @smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,735) @c computed example xdvi d2t_singular/latex_lib.doc:585 
../singular_texi/./d2t_singular/latex_lib.tex(,736) LIB "latex.lib";
../singular_texi/./d2t_singular/latex_lib.tex(,737) intmat m[3][4] = 9,2,4,5,2,5,-2,4,-6,10,-1,2,7;
../singular_texi/./d2t_singular/latex_lib.tex(,738) opentex("exp001"); 
../singular_texi/./d2t_singular/latex_lib.tex(,739) texobj("exp001","An intmat:  ",m);
../singular_texi/./d2t_singular/latex_lib.tex(,740) closetex("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,741) tex("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,742) @expansion{} calling  latex2e  for : exp001.tex 
../singular_texi/./d2t_singular/latex_lib.tex(,743) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,744) @expansion{} This is TeX, Version 3.14159 (Web2C 7.3.1)
../singular_texi/./d2t_singular/latex_lib.tex(,745) @expansion{} (exp001.tex
../singular_texi/./d2t_singular/latex_lib.tex(,746) @expansion{} LaTeX2e <1998/12/01> patch level 1
../singular_texi/./d2t_singular/latex_lib.tex(,747) @expansion{} Babel <v3.6x> and hyphenation patterns for american, french, german, nger\
../singular_texi/./d2t_singular/latex_lib.tex(,748)    man, i
../singular_texi/./d2t_singular/latex_lib.tex(,749) @expansion{} talian, nohyphenation, loaded.
../singular_texi/./d2t_singular/latex_lib.tex(,750) @expansion{} (/usr/share/texmf/tex/latex/base/article.cls
../singular_texi/./d2t_singular/latex_lib.tex(,751) @expansion{} Document Class: article 1999/01/07 v1.4a Standard LaTeX document class
../singular_texi/./d2t_singular/latex_lib.tex(,752) @expansion{} (/usr/share/texmf/tex/latex/base/size10.clo))
../singular_texi/./d2t_singular/latex_lib.tex(,753) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsmath.sty
../singular_texi/./d2t_singular/latex_lib.tex(,754) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amstext.sty
../singular_texi/./d2t_singular/latex_lib.tex(,755) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsgen.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,756) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsbsy.sty)
../singular_texi/./d2t_singular/latex_lib.tex(,757) @expansion{} (/usr/share/texmf/tex/latex/amslatex/amsopn.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,758) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amssymb.sty
../singular_texi/./d2t_singular/latex_lib.tex(,759) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/amsfonts.sty))
../singular_texi/./d2t_singular/latex_lib.tex(,760) @expansion{} No file exp001.aux.
../singular_texi/./d2t_singular/latex_lib.tex(,761) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsa.fd)
../singular_texi/./d2t_singular/latex_lib.tex(,762) @expansion{} (/usr/share/texmf/tex/latex/amsfonts/umsb.fd) [1] (exp001.aux) )
../singular_texi/./d2t_singular/latex_lib.tex(,763) @expansion{} Output written on exp001.dvi (1 page, 524 bytes).
../singular_texi/./d2t_singular/latex_lib.tex(,764) @expansion{} Transcript written on exp001.log.
../singular_texi/./d2t_singular/latex_lib.tex(,765) xdvi("exp001");
../singular_texi/./d2t_singular/latex_lib.tex(,766) @expansion{} calling  xdvi  for : exp001 
../singular_texi/./d2t_singular/latex_lib.tex(,767) @expansion{} 
../singular_texi/./d2t_singular/latex_lib.tex(,768) system("sh","rm exp001.*");
../singular_texi/./d2t_singular/latex_lib.tex(,769) @expansion{} 0
../singular_texi/./d2t_singular/latex_lib.tex(,770) @c end example xdvi d2t_singular/latex_lib.doc:585
../singular_texi/./d2t_singular/latex_lib.tex(,771) @end smallexample
../singular_texi/./d2t_singular/latex_lib.tex(,772) @c ---end content xdvi---
../singular_texi/singular.tex(,593) @c ---------------------------------------------------------
../singular_texi/singular.tex(,594) @node paramet_lib, surf_lib, latex_lib, Visualization
../singular_texi/singular.tex(,595) @subsection paramet_lib
../singular_texi/singular.tex(,596) @c include of docu for paramet.lib
../singular_texi/./d2t_singular/paramet_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/paramet_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/paramet_lib.doc
../singular_texi/./d2t_singular/paramet_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/paramet_lib.doc INSTEAD
../singular_texi/./d2t_singular/paramet_lib.tex(,4) @c library version: (1.11.2.1,2002/10/21)
../singular_texi/./d2t_singular/paramet_lib.tex(,5) @c library file: ../Singular/LIB/paramet.lib
../singular_texi/./d2t_singular/paramet_lib.tex(,6) @cindex paramet.lib
../singular_texi/./d2t_singular/paramet_lib.tex(,7) @cindex paramet_lib
../singular_texi/./d2t_singular/paramet_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/paramet_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/paramet_lib.tex(,10) paramet.lib
../singular_texi/./d2t_singular/paramet_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/paramet_lib.tex(,12)    Parametrization of Varieties
../singular_texi/./d2t_singular/paramet_lib.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/paramet_lib.tex(,14) Thomas Keilen, keilen@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/paramet_lib.tex(,15) 
../singular_texi/./d2t_singular/paramet_lib.tex(,16) @end table
../singular_texi/./d2t_singular/paramet_lib.tex(,17) 
../singular_texi/./d2t_singular/paramet_lib.tex(,18) @strong{Procedures:}
../singular_texi/./d2t_singular/paramet_lib.tex(,19) @menu
../singular_texi/./d2t_singular/paramet_lib.tex(,20) * parametrize:: parametrizes a prime ideal via the normalization
../singular_texi/./d2t_singular/paramet_lib.tex(,21) * parametrizepd:: calculates the prim.dec. and parametrizes the components
../singular_texi/./d2t_singular/paramet_lib.tex(,22) * parametrizesing:: parametrizes an isolated plane curve singularity
../singular_texi/./d2t_singular/paramet_lib.tex(,23) @end menu
../singular_texi/./d2t_singular/paramet_lib.tex(,24) @table @asis
../singular_texi/./d2t_singular/paramet_lib.tex(,25) @item @strong{Overview:}
../singular_texi/./d2t_singular/paramet_lib.tex(,26) A library to compute parametrizations of algebraic varieties (if possible)
../singular_texi/./d2t_singular/paramet_lib.tex(,27) with the aid of a normalization, or a primary decomposition, resp. to compute
../singular_texi/./d2t_singular/paramet_lib.tex(,28) a parametrization of a plane curve singularity with the aid of a
../singular_texi/./d2t_singular/paramet_lib.tex(,29) Hamburger-Noether expansion.
../singular_texi/./d2t_singular/paramet_lib.tex(,30) 
../singular_texi/./d2t_singular/paramet_lib.tex(,31) @end table
../singular_texi/./d2t_singular/paramet_lib.tex(,32) @c inserted refs from d2t_singular/paramet_lib.doc:30
../singular_texi/./d2t_singular/paramet_lib.tex(,42) @strong{See also:}
../singular_texi/./d2t_singular/paramet_lib.tex(,43) @ref{hnoether_lib};
../singular_texi/./d2t_singular/paramet_lib.tex(,44) @ref{normal_lib};
../singular_texi/./d2t_singular/paramet_lib.tex(,45) @ref{primdec_lib}.
../singular_texi/./d2t_singular/paramet_lib.tex(,47) @c end inserted refs from d2t_singular/paramet_lib.doc:30
../singular_texi/./d2t_singular/paramet_lib.tex(,48) 
../singular_texi/./d2t_singular/paramet_lib.tex(,49) @c ---end content LibInfo---
../singular_texi/./d2t_singular/paramet_lib.tex(,50) 
../singular_texi/./d2t_singular/paramet_lib.tex(,51) @c ------------------- parametrize -------------
../singular_texi/./d2t_singular/paramet_lib.tex(,52) @node parametrize, parametrizepd,, paramet_lib
../singular_texi/./d2t_singular/paramet_lib.tex(,53) @subsubsection parametrize
../singular_texi/./d2t_singular/paramet_lib.tex(,54) @cindex parametrize
../singular_texi/./d2t_singular/paramet_lib.tex(,55) @c ---content parametrize---
../singular_texi/./d2t_singular/paramet_lib.tex(,56) Procedure from library @code{paramet.lib} (@pxref{paramet_lib}).
../singular_texi/./d2t_singular/paramet_lib.tex(,57) 
../singular_texi/./d2t_singular/paramet_lib.tex(,58) @table @asis
../singular_texi/./d2t_singular/paramet_lib.tex(,59) @item @strong{Usage:}
../singular_texi/./d2t_singular/paramet_lib.tex(,60) parametrize(I); I ideal in an arbitrary number of variables,
../singular_texi/./d2t_singular/paramet_lib.tex(,61) whose radical is prime, in a ring with global ordering
../singular_texi/./d2t_singular/paramet_lib.tex(,62) 
../singular_texi/./d2t_singular/paramet_lib.tex(,63) @item @strong{Create:}
../singular_texi/./d2t_singular/paramet_lib.tex(,64) If the parametrization is successful, the basering will be changed to
../singular_texi/./d2t_singular/paramet_lib.tex(,65) the parametrization ring, that is to the ring PR=0,(s,t),dp;
../singular_texi/./d2t_singular/paramet_lib.tex(,66) respectively PR=0,t(1..d),dp;, depending on the dimension of the
../singular_texi/./d2t_singular/paramet_lib.tex(,67) parametrized variety.
../singular_texi/./d2t_singular/paramet_lib.tex(,68) 
../singular_texi/./d2t_singular/paramet_lib.tex(,69) @item @strong{Return:}
../singular_texi/./d2t_singular/paramet_lib.tex(,70) a list containing the parametrization ideal resp. the original ideal,
../singular_texi/./d2t_singular/paramet_lib.tex(,71) the number of variables needed for the parametrization resp. 0, and
../singular_texi/./d2t_singular/paramet_lib.tex(,72) 1 resp. 0 depending on whether the parametrization was successful
../singular_texi/./d2t_singular/paramet_lib.tex(,73) or not
../singular_texi/./d2t_singular/paramet_lib.tex(,74) 
../singular_texi/./d2t_singular/paramet_lib.tex(,75) @cindex parametrization
../singular_texi/./d2t_singular/paramet_lib.tex(,76) @cindex normalization
../singular_texi/./d2t_singular/paramet_lib.tex(,77) @end table
../singular_texi/./d2t_singular/paramet_lib.tex(,78) @strong{Example:}
../singular_texi/./d2t_singular/paramet_lib.tex(,79) @smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,80) @c computed example parametrize d2t_singular/paramet_lib.doc:65 
../singular_texi/./d2t_singular/paramet_lib.tex(,81) LIB "paramet.lib";
../singular_texi/./d2t_singular/paramet_lib.tex(,82) ring RING=0,(x,y,z),dp;
../singular_texi/./d2t_singular/paramet_lib.tex(,83) ideal I=z2-y2x2+x3;
../singular_texi/./d2t_singular/paramet_lib.tex(,84) parametrize(I);
../singular_texi/./d2t_singular/paramet_lib.tex(,85) @expansion{} [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,86) @expansion{}    _[1]=s2-t2
../singular_texi/./d2t_singular/paramet_lib.tex(,87) @expansion{}    _[2]=s
../singular_texi/./d2t_singular/paramet_lib.tex(,88) @expansion{}    _[3]=s2t-t3
../singular_texi/./d2t_singular/paramet_lib.tex(,89) @expansion{} [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,90) @expansion{}    2
../singular_texi/./d2t_singular/paramet_lib.tex(,91) @expansion{} [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,92) @expansion{}    1
../singular_texi/./d2t_singular/paramet_lib.tex(,93) @c end example parametrize d2t_singular/paramet_lib.doc:65
../singular_texi/./d2t_singular/paramet_lib.tex(,94) @end smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,95) @c inserted refs from d2t_singular/paramet_lib.doc:72
../singular_texi/./d2t_singular/paramet_lib.tex(,106) @strong{See also:}
../singular_texi/./d2t_singular/paramet_lib.tex(,107) @ref{normal};
../singular_texi/./d2t_singular/paramet_lib.tex(,108) @ref{parametrizepd};
../singular_texi/./d2t_singular/paramet_lib.tex(,109) @ref{primdecGTZ};
../singular_texi/./d2t_singular/paramet_lib.tex(,110) @ref{radical}.
../singular_texi/./d2t_singular/paramet_lib.tex(,112) @c end inserted refs from d2t_singular/paramet_lib.doc:72
../singular_texi/./d2t_singular/paramet_lib.tex(,113) 
../singular_texi/./d2t_singular/paramet_lib.tex(,114) @c ---end content parametrize---
../singular_texi/./d2t_singular/paramet_lib.tex(,115) 
../singular_texi/./d2t_singular/paramet_lib.tex(,116) @c ------------------- parametrizepd -------------
../singular_texi/./d2t_singular/paramet_lib.tex(,117) @node parametrizepd, parametrizesing, parametrize, paramet_lib
../singular_texi/./d2t_singular/paramet_lib.tex(,118) @subsubsection parametrizepd
../singular_texi/./d2t_singular/paramet_lib.tex(,119) @cindex parametrizepd
../singular_texi/./d2t_singular/paramet_lib.tex(,120) @c ---content parametrizepd---
../singular_texi/./d2t_singular/paramet_lib.tex(,121) Procedure from library @code{paramet.lib} (@pxref{paramet_lib}).
../singular_texi/./d2t_singular/paramet_lib.tex(,122) 
../singular_texi/./d2t_singular/paramet_lib.tex(,123) @table @asis
../singular_texi/./d2t_singular/paramet_lib.tex(,124) @item @strong{Usage:}
../singular_texi/./d2t_singular/paramet_lib.tex(,125) parametrizepd(I); I ideal in a polynomial ring with global ordering
../singular_texi/./d2t_singular/paramet_lib.tex(,126) 
../singular_texi/./d2t_singular/paramet_lib.tex(,127) @item @strong{Create:}
../singular_texi/./d2t_singular/paramet_lib.tex(,128) If the parametrization is successful, the basering will be changed to
../singular_texi/./d2t_singular/paramet_lib.tex(,129) the parametrization ring, that is to the ring PR=0,(s,t),dp;
../singular_texi/./d2t_singular/paramet_lib.tex(,130) respectively PR=0,t(1..d),dp;, depending on the dimension of the
../singular_texi/./d2t_singular/paramet_lib.tex(,131) parametrized variety.
../singular_texi/./d2t_singular/paramet_lib.tex(,132) 
../singular_texi/./d2t_singular/paramet_lib.tex(,133) @item @strong{Return:}
../singular_texi/./d2t_singular/paramet_lib.tex(,134) a list of lists, where each entry contains the parametrization
../singular_texi/./d2t_singular/paramet_lib.tex(,135) of a primary component of I resp. 0, the number of variables
../singular_texi/./d2t_singular/paramet_lib.tex(,136) resp. 0, and 1 resp. 0 depending on whether the parametrization
../singular_texi/./d2t_singular/paramet_lib.tex(,137) of the component was successful or not
../singular_texi/./d2t_singular/paramet_lib.tex(,138) 
../singular_texi/./d2t_singular/paramet_lib.tex(,139) @cindex parametrization
../singular_texi/./d2t_singular/paramet_lib.tex(,140) @cindex normalization
../singular_texi/./d2t_singular/paramet_lib.tex(,141) @end table
../singular_texi/./d2t_singular/paramet_lib.tex(,142) @strong{Example:}
../singular_texi/./d2t_singular/paramet_lib.tex(,143) @smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,144) @c computed example parametrizepd d2t_singular/paramet_lib.doc:106 
../singular_texi/./d2t_singular/paramet_lib.tex(,145) LIB "paramet.lib";
../singular_texi/./d2t_singular/paramet_lib.tex(,146) ring RING=0,(x,y,z),dp;
../singular_texi/./d2t_singular/paramet_lib.tex(,147) ideal I=(x2-y2z2+z3)*(x2-z2-z3),(x2-y2z2+z3)*yz;
../singular_texi/./d2t_singular/paramet_lib.tex(,148) parametrizepd(I);
../singular_texi/./d2t_singular/paramet_lib.tex(,149) @expansion{} [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,150) @expansion{}    [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,151) @expansion{}       _[1]=s2t-t3
../singular_texi/./d2t_singular/paramet_lib.tex(,152) @expansion{}       _[2]=s
../singular_texi/./d2t_singular/paramet_lib.tex(,153) @expansion{}       _[3]=s2-t2
../singular_texi/./d2t_singular/paramet_lib.tex(,154) @expansion{}    [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,155) @expansion{}       2
../singular_texi/./d2t_singular/paramet_lib.tex(,156) @expansion{}    [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,157) @expansion{}       1
../singular_texi/./d2t_singular/paramet_lib.tex(,158) @expansion{} [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,159) @expansion{}    [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,160) @expansion{}       _[1]=0
../singular_texi/./d2t_singular/paramet_lib.tex(,161) @expansion{}       _[2]=s
../singular_texi/./d2t_singular/paramet_lib.tex(,162) @expansion{}       _[3]=0
../singular_texi/./d2t_singular/paramet_lib.tex(,163) @expansion{}    [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,164) @expansion{}       1
../singular_texi/./d2t_singular/paramet_lib.tex(,165) @expansion{}    [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,166) @expansion{}       1
../singular_texi/./d2t_singular/paramet_lib.tex(,167) @expansion{} [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,168) @expansion{}    [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,169) @expansion{}       _[1]=s3-s
../singular_texi/./d2t_singular/paramet_lib.tex(,170) @expansion{}       _[2]=0
../singular_texi/./d2t_singular/paramet_lib.tex(,171) @expansion{}       _[3]=s2-1
../singular_texi/./d2t_singular/paramet_lib.tex(,172) @expansion{}    [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,173) @expansion{}       1
../singular_texi/./d2t_singular/paramet_lib.tex(,174) @expansion{}    [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,175) @expansion{}       1
../singular_texi/./d2t_singular/paramet_lib.tex(,176) @c end example parametrizepd d2t_singular/paramet_lib.doc:106
../singular_texi/./d2t_singular/paramet_lib.tex(,177) @end smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,178) @c inserted refs from d2t_singular/paramet_lib.doc:113
../singular_texi/./d2t_singular/paramet_lib.tex(,188) @strong{See also:}
../singular_texi/./d2t_singular/paramet_lib.tex(,189) @ref{normal};
../singular_texi/./d2t_singular/paramet_lib.tex(,190) @ref{parametrize};
../singular_texi/./d2t_singular/paramet_lib.tex(,191) @ref{primdecGTZ}.
../singular_texi/./d2t_singular/paramet_lib.tex(,193) @c end inserted refs from d2t_singular/paramet_lib.doc:113
../singular_texi/./d2t_singular/paramet_lib.tex(,194) 
../singular_texi/./d2t_singular/paramet_lib.tex(,195) @c ---end content parametrizepd---
../singular_texi/./d2t_singular/paramet_lib.tex(,196) 
../singular_texi/./d2t_singular/paramet_lib.tex(,197) @c ------------------- parametrizesing -------------
../singular_texi/./d2t_singular/paramet_lib.tex(,198) @node parametrizesing,, parametrizepd, paramet_lib
../singular_texi/./d2t_singular/paramet_lib.tex(,199) @subsubsection parametrizesing
../singular_texi/./d2t_singular/paramet_lib.tex(,200) @cindex parametrizesing
../singular_texi/./d2t_singular/paramet_lib.tex(,201) @c ---content parametrizesing---
../singular_texi/./d2t_singular/paramet_lib.tex(,202) Procedure from library @code{paramet.lib} (@pxref{paramet_lib}).
../singular_texi/./d2t_singular/paramet_lib.tex(,203) 
../singular_texi/./d2t_singular/paramet_lib.tex(,204) @table @asis
../singular_texi/./d2t_singular/paramet_lib.tex(,205) @item @strong{Usage:}
../singular_texi/./d2t_singular/paramet_lib.tex(,206) parametrizesing(f); f a polynomial in two variables, ordering ls or ds
../singular_texi/./d2t_singular/paramet_lib.tex(,207) 
../singular_texi/./d2t_singular/paramet_lib.tex(,208) @item @strong{Create:}
../singular_texi/./d2t_singular/paramet_lib.tex(,209) If the parametrization is successful, the basering will be changed to
../singular_texi/./d2t_singular/paramet_lib.tex(,210) the parametrization ring, that is to the ring 0,(x,y),ls;
../singular_texi/./d2t_singular/paramet_lib.tex(,211) 
../singular_texi/./d2t_singular/paramet_lib.tex(,212) @item @strong{Return:}
../singular_texi/./d2t_singular/paramet_lib.tex(,213) a list containing the parametrizations of the different branches of the
../singular_texi/./d2t_singular/paramet_lib.tex(,214) singularity at the origin resp. 0, if f was not of the desired kind
../singular_texi/./d2t_singular/paramet_lib.tex(,215) 
../singular_texi/./d2t_singular/paramet_lib.tex(,216) @cindex parametrization
../singular_texi/./d2t_singular/paramet_lib.tex(,217) @cindex curve singularities
../singular_texi/./d2t_singular/paramet_lib.tex(,218) @end table
../singular_texi/./d2t_singular/paramet_lib.tex(,219) @strong{Example:}
../singular_texi/./d2t_singular/paramet_lib.tex(,220) @smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,221) @c computed example parametrizesing d2t_singular/paramet_lib.doc:143 
../singular_texi/./d2t_singular/paramet_lib.tex(,222) LIB "paramet.lib";
../singular_texi/./d2t_singular/paramet_lib.tex(,223) ring RING=0,(x,y),ls;
../singular_texi/./d2t_singular/paramet_lib.tex(,224) poly f=(x^2-y^3)*(x^2-y^2-y^3);
../singular_texi/./d2t_singular/paramet_lib.tex(,225) parametrizesing(f);
../singular_texi/./d2t_singular/paramet_lib.tex(,226) @expansion{} [1]:
../singular_texi/./d2t_singular/paramet_lib.tex(,227) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/paramet_lib.tex(,228) @expansion{}    _[2]=x-1/2x2
../singular_texi/./d2t_singular/paramet_lib.tex(,229) @expansion{} [2]:
../singular_texi/./d2t_singular/paramet_lib.tex(,230) @expansion{}    _[1]=x
../singular_texi/./d2t_singular/paramet_lib.tex(,231) @expansion{}    _[2]=-x-1/2x2
../singular_texi/./d2t_singular/paramet_lib.tex(,232) @expansion{} [3]:
../singular_texi/./d2t_singular/paramet_lib.tex(,233) @expansion{}    _[1]=x3
../singular_texi/./d2t_singular/paramet_lib.tex(,234) @expansion{}    _[2]=x2
../singular_texi/./d2t_singular/paramet_lib.tex(,235) @c end example parametrizesing d2t_singular/paramet_lib.doc:143
../singular_texi/./d2t_singular/paramet_lib.tex(,236) @end smallexample
../singular_texi/./d2t_singular/paramet_lib.tex(,237) @c inserted refs from d2t_singular/paramet_lib.doc:150
../singular_texi/./d2t_singular/paramet_lib.tex(,247) @strong{See also:}
../singular_texi/./d2t_singular/paramet_lib.tex(,248) @ref{develop};
../singular_texi/./d2t_singular/paramet_lib.tex(,249) @ref{hnexpansion};
../singular_texi/./d2t_singular/paramet_lib.tex(,250) @ref{hnoether_lib}.
../singular_texi/./d2t_singular/paramet_lib.tex(,252) @c end inserted refs from d2t_singular/paramet_lib.doc:150
../singular_texi/./d2t_singular/paramet_lib.tex(,253) 
../singular_texi/./d2t_singular/paramet_lib.tex(,254) @c ---end content parametrizesing---
../singular_texi/singular.tex(,598) @c ---------------------------------------------------------
../singular_texi/singular.tex(,599) @node surf_lib,, paramet_lib, Visualization
../singular_texi/singular.tex(,600) @subsection surf_lib
../singular_texi/singular.tex(,601) @c include of docu for surf.lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/surf_lib.doc
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/surf_lib.doc INSTEAD
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,4) @c library version: (1.19.2.6,2002/07/17)
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,5) @c library file: ../Singular/LIB/surf.lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,6) @cindex surf.lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,7) @cindex surf_lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,8) @table @asis
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,10) surf.lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,12)     Procedures for Graphics with Surf
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,13) @item @strong{Author:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,14) Hans Schoenemann,
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,15) @*the program surf is written by Stefan Endrass
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,16) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,17) @item @strong{Note:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,18) To use this library requires the program @code{surf} to be installed.
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,19)  @code{surf} is only available for Linux PCs and Sun workstations.
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,20)  You can download @code{surf} either from
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,21)   @uref{http://sourceforge.net/projects/surf}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,22)   or from @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/utils/}.
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,23) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,24) @end table
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,25) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,26) @strong{Procedures:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,27) @menu
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,28) * plot:: plots plane curves and surfaces
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,29) @end menu
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,30) @c ---end content LibInfo---
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,31) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,32) @c ------------------- plot -------------
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,33) @node plot,,, surf_lib
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,34) @subsubsection plot
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,35) @cindex plot
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,36) @c ---content plot---
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,37) Procedure from library @code{surf.lib} (@pxref{surf_lib}).
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,38) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,39) @table @asis
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,40) @item @strong{Usage:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,41) plot(I); I ideal or poly
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,42) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,43) @item @strong{Assume:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,44) I defines a plane curve or a surface given by one equation
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,45) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,46) @item @strong{Return:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,47) nothing
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,48) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,49) @item @strong{Note:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,50) requires the external program 'surf' to be installed
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,51) 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,52) @end table
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,53) @strong{Example:}
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,54) @smallexample
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,55) @c skipped computation of example plot d2t_singular/surf_lib.doc:53 
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,56) LIB "surf.lib";
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,57) // ---------  plane curves ------------
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,58) ring rr0 = 0,(x1,x2),dp;
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,59) ideal I = x1^3 - x2^2;
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,60) plot(I);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,61) ring rr1 = 0,(x,y,z),dp;
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,62) ideal I(1) = 2x2-1/2x3 +1-y+1;
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,63) plot(I(1));
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,64) //  ---- Singular Logo --------------
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,65) poly logo = ((x+3)^3 + 2*(x+3)^2 - y^2)*(x^3 - y^2)*((x-3)^3-2*(x-3)^2-y^2);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,66) plot(logo);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,67) // Steiner surface
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,68) ideal J(2) = x^2*y^2+x^2*z^2+y^2*z^2-17*x*y*z;
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,69) plot(J(2));
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,70) // --------------------
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,71) plot(x*(x2-y2)+z2);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,72) // E7
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,73) plot(x^3-x*y^3+z^2);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,74) // Whitney umbrella
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,75) plot(z^2-x^2*y);
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,76) @end smallexample
../singular_texi/./d2t_singular/surf_lib_noEx.tex(,77) @c ---end content plot---
../singular_texi/singular.tex(,603) 
../singular_texi/singular.tex(,604) @c ----------------------------------------------------------------------------
../singular_texi/singular.tex(,605) @node Coding theory, , Visualization, SINGULAR libraries
../singular_texi/singular.tex(,606) @section Coding theory
../singular_texi/singular.tex(,607) @cindex Coding theory
../singular_texi/singular.tex(,608) 
../singular_texi/singular.tex(,609) @menu
../singular_texi/singular.tex(,610) * brnoeth_lib:: Brill-Noether algorithm, Weierstrass semigroups and AG codes
../singular_texi/singular.tex(,611) @end menu
../singular_texi/singular.tex(,612) 
../singular_texi/singular.tex(,613) @c ---------------------------------------------------------
../singular_texi/singular.tex(,614) @node brnoeth_lib, , , Coding theory
../singular_texi/singular.tex(,615) @subsection brnoeth_lib
../singular_texi/singular.tex(,616) @c include of docu for brnoeth.lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1) @c ---content LibInfo---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,2) @comment This file was generated by doc2tex.pl from d2t_singular/brnoeth_lib.doc
../singular_texi/./d2t_singular/brnoeth_lib.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT d2t_singular/brnoeth_lib.doc INSTEAD
../singular_texi/./d2t_singular/brnoeth_lib.tex(,4) @c library version: (1.11.2.5,2002/10/18)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,5) @c library file: ../Singular/LIB/brnoeth.lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,6) @cindex brnoeth.lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,7) @cindex brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,8) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,9) @item @strong{Library:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,10) brnoeth.lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,11) @item @strong{Purpose:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,12)   Brill-Noether Algorithm, Weierstrass-SG and AG-codes
../singular_texi/./d2t_singular/brnoeth_lib.tex(,13) @item @strong{Authors:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,14) Jose Ignacio Farran Martin, ignfar@@eis.uva.es
../singular_texi/./d2t_singular/brnoeth_lib.tex(,15) @*Christoph Lossen, lossen@@mathematik.uni-kl.de
../singular_texi/./d2t_singular/brnoeth_lib.tex(,16) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,17) @item @strong{Overview:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,18) Implementation of the Brill-Noether algorithm for solving the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,19) Riemann-Roch problem and applications in Algebraic Geometry codes.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,20) The computation of Weierstrass semigroups is also implemented.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,21) The procedures are intended only for plane (singular) curves defined over
../singular_texi/./d2t_singular/brnoeth_lib.tex(,22) a prime field of positive characteristic.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,23) For more information about the library see the end of the file brnoeth.lib.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,24) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,25) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,26) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,27) @strong{Main procedures:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,28) @menu
../singular_texi/./d2t_singular/brnoeth_lib.tex(,29) * Adj_div:: computes the conductor of a curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,30) * NSplaces:: computes non-singular places with given degrees
../singular_texi/./d2t_singular/brnoeth_lib.tex(,31) * BrillNoether:: computes a vector space basis of the linear system L(D)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,32) * Weierstrass:: computes the Weierstrass semigroup of C at P up to m
../singular_texi/./d2t_singular/brnoeth_lib.tex(,33) * extcurve:: extends the curve C to an extension of degree d
../singular_texi/./d2t_singular/brnoeth_lib.tex(,34) * AGcode_L:: computes the evaluation AG code with divisors G and D
../singular_texi/./d2t_singular/brnoeth_lib.tex(,35) * AGcode_Omega:: computes the residual AG code with divisors G and D
../singular_texi/./d2t_singular/brnoeth_lib.tex(,36) * prepSV:: preprocessing for the basic decoding algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,37) * decodeSV:: decoding of a word with the basic decoding algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,38) @end menu
../singular_texi/./d2t_singular/brnoeth_lib.tex(,39) @strong{Auxiliary procedures:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,40) @menu
../singular_texi/./d2t_singular/brnoeth_lib.tex(,41) * closed_points:: computes the zero-set of a zero-dim. ideal in 2 vars
../singular_texi/./d2t_singular/brnoeth_lib.tex(,42) * dual_code:: computes the dual code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,43) * sys_code:: computes an equivalent systematic code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,44) * permute_L:: applies a permutation to a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,45) @end menu
../singular_texi/./d2t_singular/brnoeth_lib.tex(,46) @cindex Weierstrass semigroup
../singular_texi/./d2t_singular/brnoeth_lib.tex(,47) @cindex Algebraic Geometry codes
../singular_texi/./d2t_singular/brnoeth_lib.tex(,48) @cindex Brill-Noether algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,49) @c inserted refs from d2t_singular/brnoeth_lib.doc:47
../singular_texi/./d2t_singular/brnoeth_lib.tex(,58) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,59) @ref{hnoether_lib};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,60) @ref{triang_lib}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,62) @c end inserted refs from d2t_singular/brnoeth_lib.doc:47
../singular_texi/./d2t_singular/brnoeth_lib.tex(,63) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,64) @c ---end content LibInfo---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,65) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,66) @c ------------------- Adj_div -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,67) @node Adj_div, NSplaces,, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,68) @subsubsection Adj_div
../singular_texi/./d2t_singular/brnoeth_lib.tex(,69) @cindex Adj_div
../singular_texi/./d2t_singular/brnoeth_lib.tex(,70) @c ---content Adj_div---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,71) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,72) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,73) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,74) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,75) Adj_div( f [,l] ); f a poly, [l a list]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,76) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,77) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,78) list L with the computed data:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,79)   @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,80)   L[1] a list of rings: L[1][1]=aff_r (affine), L[1][2]=Proj_R (projective),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,81)   L[2] an intvec with 2 entries (degree, genus),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,82)   L[3] a list of intvec (closed places),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,83)   L[4] an intvec (conductor),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,84)   L[5] a list of lists:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,85)      L[5][d][1] a (local) ring over an extension of degree d,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,86)      L[5][d][2] an intvec (degrees of base points of places of degree d)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,87)   @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,88) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,89) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,90) @code{Adj_div(f);} computes and stores the fundamental data of the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,91) plane curve defined by f as needed for AG codes.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,92) @*In the affine ring you can find the following data:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,93)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,94)    poly CHI:  affine equation of the curve,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,95)    ideal Aff_SLocus:  affine singular locus (std),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,96)    list Inf_Points:  points at infinity
../singular_texi/./d2t_singular/brnoeth_lib.tex(,97)             Inf_Points[1]:  singular points
../singular_texi/./d2t_singular/brnoeth_lib.tex(,98)             Inf_Points[2]:  non-singular points,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,99)    list Aff_SPoints:  affine singular points (if not empty).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,100)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,101) In the projective ring you can find the projective equation
../singular_texi/./d2t_singular/brnoeth_lib.tex(,102) CHI of the curve (poly).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,103) @*In the local rings L[5][d][1] you find:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,104)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,105)    list POINTS:  base points of the places of degree d,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,106)    list LOC_EQS:  local equations of the curve at the base points,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,107)    list BRANCHES:  Hamburger-Noether developments of the places,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,108)    list PARAMETRIZATIONS:  local parametrizations of the places,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,109)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,110) Each entry of the list L[3] corresponds to one closed place (i.e.,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,111) a place and all its conjugates) which is represented by an intvec
../singular_texi/./d2t_singular/brnoeth_lib.tex(,112) of size two, the first entry is the degree of the place (in
../singular_texi/./d2t_singular/brnoeth_lib.tex(,113) particular, it tells the local ring where to find the data
../singular_texi/./d2t_singular/brnoeth_lib.tex(,114) describing one representative of the closed place), and the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,115) second one is the position of those data in the lists POINTS, etc.,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,116) inside this local ring.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,117) In the intvec L[4] (conductor) the i-th entry corresponds to the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,118) i-th entry in the list of places L[3].
../singular_texi/./d2t_singular/brnoeth_lib.tex(,119) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,120) With no optional arguments, the conductor is computed by
../singular_texi/./d2t_singular/brnoeth_lib.tex(,121) local invariants of the singularities; otherwise it is computed
../singular_texi/./d2t_singular/brnoeth_lib.tex(,122) by the Dedekind formula. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,123) An affine point is represented by a list P where P[1] is std
../singular_texi/./d2t_singular/brnoeth_lib.tex(,124) of a prime ideal and P[2] is an intvec containing the position
../singular_texi/./d2t_singular/brnoeth_lib.tex(,125) of the places above P in the list of closed places L[3]. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,126) If the point is at infinity, P[1] is a homogeneous irreducible
../singular_texi/./d2t_singular/brnoeth_lib.tex(,127) polynomial in two variables.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,128) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,129) If @code{printlevel>=0} additional comments are displayed (default:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,130) @code{printlevel=0}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,131) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,132) @cindex Hamburger-Noether expansions
../singular_texi/./d2t_singular/brnoeth_lib.tex(,133) @cindex adjunction divisor
../singular_texi/./d2t_singular/brnoeth_lib.tex(,134) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,135) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,136) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,137) @c computed example Adj_div d2t_singular/brnoeth_lib.doc:124 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,138) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,139) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,140) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,141) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,142) list C=Adj_div(y9+y8+xy6+x2y3+y2+x3);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,143) @expansion{} The genus of the curve is 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,144) def aff_R=C[1][1];      // the affine ring
../singular_texi/./d2t_singular/brnoeth_lib.tex(,145) setring aff_R;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,146) listvar(aff_R);         // data in the affine ring
../singular_texi/./d2t_singular/brnoeth_lib.tex(,147) @expansion{} // aff_R                [0]  *ring
../singular_texi/./d2t_singular/brnoeth_lib.tex(,148) @expansion{} // Inf_Points           [0]  list, size: 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,149) @expansion{} // Aff_SPoints          [0]  list, size: 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,150) @expansion{} // Aff_SLocus           [0]  ideal (SB), 2 generator(s)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,151) @expansion{} // CHI                  [0]  poly
../singular_texi/./d2t_singular/brnoeth_lib.tex(,152) CHI;                    // affine equation of the curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,153) @expansion{} x3+x2y3+xy6+y9+y8+y2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,154) Aff_SLocus;             // ideal of the affine singular locus
../singular_texi/./d2t_singular/brnoeth_lib.tex(,155) @expansion{} Aff_SLocus[1]=y8+y2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,156) @expansion{} Aff_SLocus[2]=x2+y6
../singular_texi/./d2t_singular/brnoeth_lib.tex(,157) Aff_SPoints[1];         // 1st affine singular point: (1:1:1), no.1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,158) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,159) @expansion{}    _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,160) @expansion{}    _[2]=x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,161) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,162) @expansion{}    1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,163) Inf_Points[1];          // singular point(s) at infinity: (1:0:0), no.4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,164) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,165) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,166) @expansion{}       y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,167) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,168) @expansion{}       4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,169) Inf_Points[2];          // list of non-singular points at infinity
../singular_texi/./d2t_singular/brnoeth_lib.tex(,170) @expansion{} empty list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,171) //
../singular_texi/./d2t_singular/brnoeth_lib.tex(,172) def proj_R=C[1][2];     // the projective ring
../singular_texi/./d2t_singular/brnoeth_lib.tex(,173) setring proj_R;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,174) CHI;                    // projective equation of the curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,175) @expansion{} x3z6+x2y3z4+xy6z2+y9+y8z+y2z7
../singular_texi/./d2t_singular/brnoeth_lib.tex(,176) C[2][1];                // degree of the curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,177) @expansion{} 9
../singular_texi/./d2t_singular/brnoeth_lib.tex(,178) C[2][2];                // genus of the curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,179) @expansion{} 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,180) C[3];                   // list of computed places
../singular_texi/./d2t_singular/brnoeth_lib.tex(,181) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,182) @expansion{}    2,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,183) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,184) @expansion{}    1,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,185) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,186) @expansion{}    1,2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,187) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,188) @expansion{}    1,3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,189) C[4];                   // adjunction divisor (all points are singular!)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,190) @expansion{} 2,2,2,42
../singular_texi/./d2t_singular/brnoeth_lib.tex(,191) //
../singular_texi/./d2t_singular/brnoeth_lib.tex(,192) // we look at the place(s) of degree 2 by changing to the ring
../singular_texi/./d2t_singular/brnoeth_lib.tex(,193) C[5][2][1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,194) @expansion{} //   characteristic : 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,195) @expansion{} //   1 parameter    : a 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,196) @expansion{} //   minpoly        : ...
../singular_texi/./d2t_singular/brnoeth_lib.tex(,197) @expansion{} //   number of vars : 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,198) @expansion{} //        block   1 : ordering ls
../singular_texi/./d2t_singular/brnoeth_lib.tex(,199) @expansion{} //                  : names    x y t 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,200) @expansion{} //        block   2 : ordering C
../singular_texi/./d2t_singular/brnoeth_lib.tex(,201) def S(2)=C[5][2][1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,202) setring S(2);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,203) POINTS;                // base point(s) of place(s) of degree 2: (1:a:1)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,204) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,205) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,206) @expansion{}       1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,207) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,208) @expansion{}       (a)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,209) @expansion{}    [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,210) @expansion{}       1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,211) LOC_EQS;               // local equation(s)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,212) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,213) @expansion{}    y2+y3+(a+1)*y4+y6+(a+1)*y8+y9+(a)*xy2+(a+1)*xy4+xy6+(a+1)*x2y+(a)*x2y2\
../singular_texi/./d2t_singular/brnoeth_lib.tex(,214)    +x2y3+x3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,215) PARAMETRIZATIONS;      // parametrization(s) and exactness
../singular_texi/./d2t_singular/brnoeth_lib.tex(,216) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,217) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,218) @expansion{}       _[1]=t2+(a+1)*t3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,219) @expansion{}       _[2]=t3+(a+1)*t4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,220) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,221) @expansion{}       3,4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,222) BRANCHES;              // Hamburger-Noether development
../singular_texi/./d2t_singular/brnoeth_lib.tex(,223) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,224) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,225) @expansion{}       _[1,1]=0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,226) @expansion{}       _[1,2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,227) @expansion{}       _[1,3]=0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,228) @expansion{}       _[2,1]=0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,229) @expansion{}       _[2,2]=1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,230) @expansion{}       _[2,3]=(a+1)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,231) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,232) @expansion{}       1,-4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,233) @expansion{}    [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,234) @expansion{}       0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,235) @expansion{}    [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,236) @expansion{}       y+(a+1)*xy+(a)*x2y+(a)*x2y2+(a+1)*x3+x3y+x3y3+(a)*x4+(a+1)*x4y2+(a+\
../singular_texi/./d2t_singular/brnoeth_lib.tex(,237)    1)*x4y3+x5+x5y2+(a)*x6+(a+1)*x6y2+x6y4+x6y5+x7y+(a+1)*x8+(a+1)*x8y+x8y4+(\
../singular_texi/./d2t_singular/brnoeth_lib.tex(,238)    a+1)*x8y6+x9+x9y7+(a+1)*x10+x11y6+(a+1)*x12y4+x13y5+x14+x14y+x15y4+x16+(a\
../singular_texi/./d2t_singular/brnoeth_lib.tex(,239)    +1)*x16y2+x17y3+x19y2+(a+1)*x20+x21y+x23
../singular_texi/./d2t_singular/brnoeth_lib.tex(,240) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,241) @c end example Adj_div d2t_singular/brnoeth_lib.doc:124
../singular_texi/./d2t_singular/brnoeth_lib.tex(,242) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,243) @c inserted refs from d2t_singular/brnoeth_lib.doc:158
../singular_texi/./d2t_singular/brnoeth_lib.tex(,252) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,253) @ref{NSplaces};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,254) @ref{closed_points}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,256) @c end inserted refs from d2t_singular/brnoeth_lib.doc:158
../singular_texi/./d2t_singular/brnoeth_lib.tex(,257) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,258) @c ---end content Adj_div---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,259) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,260) @c ------------------- NSplaces -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,261) @node NSplaces, BrillNoether, Adj_div, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,262) @subsubsection NSplaces
../singular_texi/./d2t_singular/brnoeth_lib.tex(,263) @cindex NSplaces
../singular_texi/./d2t_singular/brnoeth_lib.tex(,264) @c ---content NSplaces---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,265) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,266) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,267) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,268) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,269) NSplaces( h, CURVE ), where h is an intvec and CURVE is a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,270) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,271) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,272) list L with updated data of CURVE after computing all non-singular
../singular_texi/./d2t_singular/brnoeth_lib.tex(,273) affine closed places whose degrees are in the intvec h: @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,274)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,275)    in L[1][1]: (affine ring) lists Aff_Points(d) with affine non-singular
../singular_texi/./d2t_singular/brnoeth_lib.tex(,276)                (closed) points of degree d (if non-empty),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,277)    in L[3]:    the newly computed closed places are added,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,278)    in L[5]:    local rings created/updated to store (repres. of) new places.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,279)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,280) See @ref{Adj_div} for a description of the entries in L.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,281) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,282) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,283) The list_expression should be the output of the procedure Adj_div.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,284) If @code{printlevel>=0} additional comments are displayed (default:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,285) @code{printlevel=0}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,286) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,287) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,288) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,289) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,290) @c computed example NSplaces d2t_singular/brnoeth_lib.doc:194 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,291) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,292) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,293) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,294) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,295) list C=Adj_div(x3y+y3+x);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,296) @expansion{} The genus of the curve is 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,297) // The list of computed places:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,298) C[3];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,299) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,300) @expansion{}    1,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,301) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,302) @expansion{}    1,2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,303) // create places up to degree 4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,304) list L=NSplaces(1..4,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,305) // The list of computed places is now:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,306) L[3];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,307) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,308) @expansion{}    1,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,309) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,310) @expansion{}    1,2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,311) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,312) @expansion{}    1,3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,313) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,314) @expansion{}    2,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,315) @expansion{} [5]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,316) @expansion{}    3,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,317) @expansion{} [6]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,318) @expansion{}    3,2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,319) @expansion{} [7]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,320) @expansion{}    3,3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,321) @expansion{} [8]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,322) @expansion{}    3,4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,323) @expansion{} [9]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,324) @expansion{}    3,5
../singular_texi/./d2t_singular/brnoeth_lib.tex(,325) @expansion{} [10]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,326) @expansion{}    3,6
../singular_texi/./d2t_singular/brnoeth_lib.tex(,327) @expansion{} [11]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,328) @expansion{}    3,7
../singular_texi/./d2t_singular/brnoeth_lib.tex(,329) @expansion{} [12]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,330) @expansion{}    4,1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,331) @expansion{} [13]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,332) @expansion{}    4,2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,333) @expansion{} [14]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,334) @expansion{}    4,3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,335) // e.g., affine non-singular points of degree 4 :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,336) def aff_r=L[1][1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,337) setring aff_r;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,338) Aff_Points(4);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,339) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,340) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,341) @expansion{}       _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,342) @expansion{}       _[2]=x2+xy+x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,343) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,344) @expansion{}       12
../singular_texi/./d2t_singular/brnoeth_lib.tex(,345) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,346) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,347) @expansion{}       _[1]=y4+y3+y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,348) @expansion{}       _[2]=x+y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,349) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,350) @expansion{}       13
../singular_texi/./d2t_singular/brnoeth_lib.tex(,351) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,352) @expansion{}    [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,353) @expansion{}       _[1]=y4+y3+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,354) @expansion{}       _[2]=x+y3+y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,355) @expansion{}    [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,356) @expansion{}       14
../singular_texi/./d2t_singular/brnoeth_lib.tex(,357) // e.g., base point of the 1st place of degree 4 :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,358) def S(4)=L[5][4][1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,359) setring S(4);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,360) POINTS[1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,361) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,362) @expansion{}    (a3)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,363) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,364) @expansion{}    (a2+a)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,365) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,366) @expansion{}    1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,367) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,368) @c end example NSplaces d2t_singular/brnoeth_lib.doc:194
../singular_texi/./d2t_singular/brnoeth_lib.tex(,369) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,370) @c inserted refs from d2t_singular/brnoeth_lib.doc:217
../singular_texi/./d2t_singular/brnoeth_lib.tex(,379) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,380) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,381) @ref{closed_points}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,383) @c end inserted refs from d2t_singular/brnoeth_lib.doc:217
../singular_texi/./d2t_singular/brnoeth_lib.tex(,384) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,385) @c ---end content NSplaces---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,386) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,387) @c ------------------- BrillNoether -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,388) @node BrillNoether, Weierstrass, NSplaces, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,389) @subsubsection BrillNoether
../singular_texi/./d2t_singular/brnoeth_lib.tex(,390) @cindex BrillNoether
../singular_texi/./d2t_singular/brnoeth_lib.tex(,391) @c ---content BrillNoether---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,392) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,393) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,394) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,395) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,396) BrillNoether(G,CURVE); G an intvec, CURVE a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,397) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,398) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,399) list of ideals (each of them with two homogeneous generators,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,400) which represent the numerator, resp. denominator, of a rational
../singular_texi/./d2t_singular/brnoeth_lib.tex(,401) function).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,402) The corresponding rational functions form a vector basis of the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,403) linear system L(G), G a rational divisor over a non-singular curve.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,404) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,405) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,406) The procedure must be called from the ring CURVE[1][2], where
../singular_texi/./d2t_singular/brnoeth_lib.tex(,407) CURVE is the output of the procedure @code{NSplaces}. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,408) The intvec G represents a rational divisor supported on the closed
../singular_texi/./d2t_singular/brnoeth_lib.tex(,409) places of CURVE[3] (e.g. @code{G=2,0,-1;} means 2 times the closed
../singular_texi/./d2t_singular/brnoeth_lib.tex(,410) place 1 minus 1 times the closed place 3).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,411) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,412) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,413) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,414) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,415) @c computed example BrillNoether d2t_singular/brnoeth_lib.doc:251 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,416) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,417) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,418) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,419) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,420) list C=Adj_div(x3y+y3+x);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,421) @expansion{} The genus of the curve is 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,422) C=NSplaces(1..4,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,423) // the first 3 Places in C[3] are of degree 1.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,424) // we define the rational divisor G = 4*C[3][1]+4*C[3][3] (of degree 8):
../singular_texi/./d2t_singular/brnoeth_lib.tex(,425) intvec G=4,0,4;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,426) def R=C[1][2];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,427) setring R;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,428) list LG=BrillNoether(G,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,429) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,430) // here is the vector basis of L(G):
../singular_texi/./d2t_singular/brnoeth_lib.tex(,431) LG;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,432) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,433) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,434) @expansion{}    _[2]=1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,435) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,436) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,437) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,438) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,439) @expansion{}    _[1]=z
../singular_texi/./d2t_singular/brnoeth_lib.tex(,440) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,441) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,442) @expansion{}    _[1]=y2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,443) @expansion{}    _[2]=x2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,444) @expansion{} [5]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,445) @expansion{}    _[1]=xz2+y3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,446) @expansion{}    _[2]=x3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,447) @expansion{} [6]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,448) @expansion{}    _[1]=xyz2+y4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,449) @expansion{}    _[2]=x4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,450) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,451) @c end example BrillNoether d2t_singular/brnoeth_lib.doc:251
../singular_texi/./d2t_singular/brnoeth_lib.tex(,452) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,453) @c inserted refs from d2t_singular/brnoeth_lib.doc:269
../singular_texi/./d2t_singular/brnoeth_lib.tex(,463) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,464) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,465) @ref{NSplaces};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,466) @ref{Weierstrass}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,468) @c end inserted refs from d2t_singular/brnoeth_lib.doc:269
../singular_texi/./d2t_singular/brnoeth_lib.tex(,469) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,470) @c ---end content BrillNoether---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,471) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,472) @c ------------------- Weierstrass -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,473) @node Weierstrass, extcurve, BrillNoether, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,474) @subsubsection Weierstrass
../singular_texi/./d2t_singular/brnoeth_lib.tex(,475) @cindex Weierstrass
../singular_texi/./d2t_singular/brnoeth_lib.tex(,476) @c ---content Weierstrass---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,477) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,478) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,479) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,480) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,481) Weierstrass( i, m, CURVE ); i,m integers and CURVE a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,482) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,483) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,484) list WS of two lists:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,485)   @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,486)   WS[1] list of integers (Weierstr. semigroup of the curve at place i up to m)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,487)   WS[2] list of ideals (the associated rational functions)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,488)   @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,489) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,490) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,491) The procedure must be called from the ring CURVE[1][2],
../singular_texi/./d2t_singular/brnoeth_lib.tex(,492) where CURVE is the output of the procedure @code{NSplaces}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,493) @* i represents the place CURVE[3][i].
../singular_texi/./d2t_singular/brnoeth_lib.tex(,494) @* Rational functions are represented by numerator/denominator
../singular_texi/./d2t_singular/brnoeth_lib.tex(,495) in form of ideals with two homogeneous generators.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,496) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,497) @item @strong{Warning:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,498) The place must be rational, i.e., necessarily CURVE[3][i][1]=1. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,499) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,500) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,501) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,502) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,503) @c computed example Weierstrass d2t_singular/brnoeth_lib.doc:306 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,504) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,505) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,506) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,507) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,508) list C=Adj_div(x3y+y3+x);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,509) @expansion{} The genus of the curve is 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,510) C=NSplaces(1..4,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,511) def R=C[1][2];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,512) setring R;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,513) // Place C[3][1] has degree 1 (i.e it is rational);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,514) list WS=Weierstrass(1,7,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,515) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,516) // the first part of the list is the Weierstrass semigroup up to 7 :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,517) WS[1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,518) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,519) @expansion{}    0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,520) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,521) @expansion{}    3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,522) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,523) @expansion{}    5
../singular_texi/./d2t_singular/brnoeth_lib.tex(,524) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,525) @expansion{}    6
../singular_texi/./d2t_singular/brnoeth_lib.tex(,526) @expansion{} [5]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,527) @expansion{}    7
../singular_texi/./d2t_singular/brnoeth_lib.tex(,528) // and the second part are the corresponding functions :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,529) WS[2];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,530) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,531) @expansion{}    _[1]=1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,532) @expansion{}    _[2]=1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,533) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,534) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,535) @expansion{}    _[2]=z
../singular_texi/./d2t_singular/brnoeth_lib.tex(,536) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,537) @expansion{}    _[1]=xy
../singular_texi/./d2t_singular/brnoeth_lib.tex(,538) @expansion{}    _[2]=z2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,539) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,540) @expansion{}    _[1]=y2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,541) @expansion{}    _[2]=z2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,542) @expansion{} [5]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,543) @expansion{}    _[1]=y3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,544) @expansion{}    _[2]=xz2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,545) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,546) @c end example Weierstrass d2t_singular/brnoeth_lib.doc:306
../singular_texi/./d2t_singular/brnoeth_lib.tex(,547) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,548) @c inserted refs from d2t_singular/brnoeth_lib.doc:324
../singular_texi/./d2t_singular/brnoeth_lib.tex(,558) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,559) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,560) @ref{BrillNoether};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,561) @ref{NSplaces}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,563) @c end inserted refs from d2t_singular/brnoeth_lib.doc:324
../singular_texi/./d2t_singular/brnoeth_lib.tex(,564) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,565) @c ---end content Weierstrass---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,566) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,567) @c ------------------- extcurve -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,568) @node extcurve, AGcode_L, Weierstrass, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,569) @subsubsection extcurve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,570) @cindex extcurve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,571) @c ---content extcurve---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,572) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,573) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,574) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,575) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,576) extcurve( d, CURVE ); d an integer, CURVE a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,577) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,578) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,579) list L which is the update of the list CURVE with additional entries
../singular_texi/./d2t_singular/brnoeth_lib.tex(,580)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,581)    L[1][3]: ring (p,a),(x,y),lp (affine),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,582)    L[1][4]: ring (p,a),(x,y,z),lp (projective),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,583)    L[1][5]: ring (p,a),(x,y,t),ls (local),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,584)    L[2][3]: int  (the number of rational places),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,585)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,586) the rings being defined over a field extension of degree d. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,587) If d<2 then @code{extcurve(d,CURVE);} creates a list L which
../singular_texi/./d2t_singular/brnoeth_lib.tex(,588) is the update of the list CURVE with additional entries
../singular_texi/./d2t_singular/brnoeth_lib.tex(,589)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,590)    L[1][5]: ring p,(x,y,t),ls,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,591)    L[2][3]: int  (the number of computed places over the base field).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,592)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,593) In both cases, in the ring L[1][5] lists with the data for all the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,594) computed rational places (after a field extension of degree d) are
../singular_texi/./d2t_singular/brnoeth_lib.tex(,595) created (see @ref{Adj_div}):
../singular_texi/./d2t_singular/brnoeth_lib.tex(,596)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,597)    lists POINTS, LOC_EQS, BRANCHES, PARAMETRIZATIONS.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,598)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,599) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,600) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,601) The list CURVE should be the output of @code{NSplaces},
../singular_texi/./d2t_singular/brnoeth_lib.tex(,602) and must contain (at least) one place of degree d. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,603) You actually need all the places with degree dividing d.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,604) Otherwise, not all the places are computed, but only part of them. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,605) This procedure must be executed before constructing AG codes,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,606) even if no extension is needed. The ring L[1][4] must be active
../singular_texi/./d2t_singular/brnoeth_lib.tex(,607) when constructing codes over the field extension.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,608) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,609) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,610) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,611) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,612) @c computed example extcurve d2t_singular/brnoeth_lib.doc:375 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,613) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,614) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,615) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,616) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,617) list C=Adj_div(x5+y2+y);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,618) @expansion{} The genus of the curve is 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,619) C=NSplaces(1..4,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,620) // since we have all points up to degree 4, we can extend the curve
../singular_texi/./d2t_singular/brnoeth_lib.tex(,621) // to that extension, in order to get rational points over F_16;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,622) C=extcurve(4,C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,623) @expansion{} Total number of rational places : NrRatPl = 33
../singular_texi/./d2t_singular/brnoeth_lib.tex(,624) // e.g., display the basepoint of place no. 32:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,625) def R=C[1][5];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,626) setring R;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,627) POINTS[32];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,628) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,629) @expansion{}    (a3+a2+a+1)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,630) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,631) @expansion{}    (a2+a)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,632) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,633) @expansion{}    1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,634) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,635) @c end example extcurve d2t_singular/brnoeth_lib.doc:375
../singular_texi/./d2t_singular/brnoeth_lib.tex(,636) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,637) @c inserted refs from d2t_singular/brnoeth_lib.doc:392
../singular_texi/./d2t_singular/brnoeth_lib.tex(,649) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,650) @ref{AGcode_L};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,651) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,652) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,653) @ref{NSplaces};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,654) @ref{closed_points}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,656) @c end inserted refs from d2t_singular/brnoeth_lib.doc:392
../singular_texi/./d2t_singular/brnoeth_lib.tex(,657) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,658) @c ---end content extcurve---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,659) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,660) @c ------------------- AGcode_L -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,661) @node AGcode_L, AGcode_Omega, extcurve, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,662) @subsubsection AGcode_L
../singular_texi/./d2t_singular/brnoeth_lib.tex(,663) @cindex AGcode_L
../singular_texi/./d2t_singular/brnoeth_lib.tex(,664) @c ---content AGcode_L---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,665) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,666) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,667) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,668) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,669) AGcode_L( G, D, EC ); G,D intvec, EC a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,670) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,671) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,672) a generator matrix for the evaluation AG code defined by the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,673) divisors G and D.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,674) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,675) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,676) The procedure must be called within the ring EC[1][4],
../singular_texi/./d2t_singular/brnoeth_lib.tex(,677) where EC is the output of @code{extcurve(d)} (or within
../singular_texi/./d2t_singular/brnoeth_lib.tex(,678) the ring EC[1][2] if d=1). @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,679) The entry i in the intvec D refers to the i-th rational
../singular_texi/./d2t_singular/brnoeth_lib.tex(,680) place in EC[1][5] (i.e., to POINTS[i], etc., see @ref{extcurve}).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,681) The intvec G represents a rational divisor (see @ref{BrillNoether}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,682) for more details).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,683) The code evaluates the vector basis of L(G) at the rational
../singular_texi/./d2t_singular/brnoeth_lib.tex(,684) places given by D.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,685) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,686) @item @strong{Warnings:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,687) G should satisfy 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,691) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,692) $ 2*genus-2 < deg(G) < size(D) $
../singular_texi/./d2t_singular/brnoeth_lib.tex(,693) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,694) , which is
../singular_texi/./d2t_singular/brnoeth_lib.tex(,695) not checked by the algorithm.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,696) @*G and D should have disjoint supports (checked by the algorithm).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,697) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,698) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,699) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,700) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,701) @c computed example AGcode_L d2t_singular/brnoeth_lib.doc:432 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,702) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,703) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,704) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,705) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,706) list HC=Adj_div(x3+y2+y);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,707) @expansion{} The genus of the curve is 1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,708) HC=NSplaces(1..2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,709) HC=extcurve(2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,710) @expansion{} Total number of rational places : NrRatPl = 9
../singular_texi/./d2t_singular/brnoeth_lib.tex(,711) def ER=HC[1][4];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,712) setring ER;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,713) intvec G=5;      // the rational divisor G = 5*HC[3][1]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,714) intvec D=2..9;   // D = sum of the rational places no. 2..9 over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,715) // let us construct the corresponding evaluation AG code :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,716) matrix C=AGcode_L(G,D,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,717) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,718) // here is a linear code of type [8,5,>=3] over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,719) print(C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,720) @expansion{} 0,0,(a),  (a+1),1,  1,    (a+1),(a),  
../singular_texi/./d2t_singular/brnoeth_lib.tex(,721) @expansion{} 1,0,(a),  (a+1),(a),(a+1),(a),  (a+1),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,722) @expansion{} 1,1,1,    1,    1,  1,    1,    1,    
../singular_texi/./d2t_singular/brnoeth_lib.tex(,723) @expansion{} 0,0,(a+1),(a),  1,  1,    (a),  (a+1),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,724) @expansion{} 0,0,(a+1),(a),  (a),(a+1),1,    1     
../singular_texi/./d2t_singular/brnoeth_lib.tex(,725) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,726) @c end example AGcode_L d2t_singular/brnoeth_lib.doc:432
../singular_texi/./d2t_singular/brnoeth_lib.tex(,727) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,728) @c inserted refs from d2t_singular/brnoeth_lib.doc:451
../singular_texi/./d2t_singular/brnoeth_lib.tex(,739) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,740) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,741) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,742) @ref{BrillNoether};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,743) @ref{extcurve}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,745) @c end inserted refs from d2t_singular/brnoeth_lib.doc:451
../singular_texi/./d2t_singular/brnoeth_lib.tex(,746) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,747) @c ---end content AGcode_L---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,748) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,749) @c ------------------- AGcode_Omega -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,750) @node AGcode_Omega, prepSV, AGcode_L, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,751) @subsubsection AGcode_Omega
../singular_texi/./d2t_singular/brnoeth_lib.tex(,752) @cindex AGcode_Omega
../singular_texi/./d2t_singular/brnoeth_lib.tex(,753) @c ---content AGcode_Omega---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,754) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,755) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,756) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,757) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,758) AGcode_Omega( G, D, EC ); G,D intvec, EC a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,759) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,760) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,761) a generator matrix for the residual AG code defined by the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,762) divisors G and D.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,763) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,764) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,765) The procedure must be called within the ring EC[1][4],
../singular_texi/./d2t_singular/brnoeth_lib.tex(,766) where EC is the output of @code{extcurve(d)} (or within
../singular_texi/./d2t_singular/brnoeth_lib.tex(,767) the ring EC[1][2] if d=1). @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,768) The entry i in the intvec D refers to the i-th rational
../singular_texi/./d2t_singular/brnoeth_lib.tex(,769) place in EC[1][5] (i.e., to POINTS[i], etc., see @ref{extcurve}).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,770) The intvec G represents a rational divisor (see @ref{BrillNoether}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,771) for more details).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,772) The code computes the residues of a vector space basis of
../singular_texi/./d2t_singular/brnoeth_lib.tex(,773) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,777) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,778) $\Omega(G-D)$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,779) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,780)  at the rational places given by D.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,781) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,782) @item @strong{Warnings:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,783) G should satisfy 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,787) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,788) $ 2*genus-2 < deg(G) < size(D) $
../singular_texi/./d2t_singular/brnoeth_lib.tex(,789) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,790) , which is
../singular_texi/./d2t_singular/brnoeth_lib.tex(,791) not checked by the algorithm.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,792) @*G and D should have disjoint supports (checked by the algorithm).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,793) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,794) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,795) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,796) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,797) @c computed example AGcode_Omega d2t_singular/brnoeth_lib.doc:491 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,798) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,799) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,800) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,801) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,802) list HC=Adj_div(x3+y2+y);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,803) @expansion{} The genus of the curve is 1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,804) HC=NSplaces(1..2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,805) HC=extcurve(2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,806) @expansion{} Total number of rational places : NrRatPl = 9
../singular_texi/./d2t_singular/brnoeth_lib.tex(,807) def ER=HC[1][4];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,808) setring ER;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,809) intvec G=5;      // the rational divisor G = 5*HC[3][1]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,810) intvec D=2..9;   // D = sum of the rational places no. 2..9 over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,811) // let us construct the corresponding residual AG code :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,812) matrix C=AGcode_Omega(G,D,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,813) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,814) // here is a linear code of type [8,3,>=5] over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,815) print(C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,816) @expansion{} 0,    (a),(a),(a),  (a+1),1,0,  0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,817) @expansion{} (a+1),1,  (a),0,    (a),  0,(a),0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,818) @expansion{} (a+1),0,  (a),(a+1),(a+1),0,0,  1 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,819) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,820) @c end example AGcode_Omega d2t_singular/brnoeth_lib.doc:491
../singular_texi/./d2t_singular/brnoeth_lib.tex(,821) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,822) @c inserted refs from d2t_singular/brnoeth_lib.doc:510
../singular_texi/./d2t_singular/brnoeth_lib.tex(,833) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,834) @ref{AGcode_L};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,835) @ref{Adj_div};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,836) @ref{BrillNoether};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,837) @ref{extcurve}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,839) @c end inserted refs from d2t_singular/brnoeth_lib.doc:510
../singular_texi/./d2t_singular/brnoeth_lib.tex(,840) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,841) @c ---end content AGcode_Omega---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,842) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,843) @c ------------------- prepSV -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,844) @node prepSV, decodeSV, AGcode_Omega, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,845) @subsubsection prepSV
../singular_texi/./d2t_singular/brnoeth_lib.tex(,846) @cindex prepSV
../singular_texi/./d2t_singular/brnoeth_lib.tex(,847) @c ---content prepSV---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,848) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,849) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,850) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,851) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,852) prepSV( G, D, F, EC ); G,D,F intvecs and EC a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,853) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,854) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,855) list E of size n+3, where n=size(D). All its entries but E[n+3]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,856) are matrices:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,857)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,858)    E[1]:  parity check matrix for the current AG code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,859)    E[2] ... E[n+2]:  matrices used in the procedure decodeSV
../singular_texi/./d2t_singular/brnoeth_lib.tex(,860)    E[n+3]:  intvec with
../singular_texi/./d2t_singular/brnoeth_lib.tex(,861)        E[n+3][1]: correction capacity 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,865) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,866) $epsilon$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,867) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,868)  of the algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,869)        E[n+3][2]: designed Goppa distance 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,873) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,874) $delta$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,875) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,876)  of the current AG code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,877)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,878) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,879) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,880) Computes the preprocessing for the basic (Skorobogatov-Vladut)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,881) decoding algorithm.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,882) The procedure must be called within the ring EC[1][4], where EC is
../singular_texi/./d2t_singular/brnoeth_lib.tex(,883) the output of @code{extcurve(d)} (or in the ring EC[1][2] if d=1) @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,884) The intvec G and F represent rational divisors (see
../singular_texi/./d2t_singular/brnoeth_lib.tex(,885) @ref{BrillNoether} for more details).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,886) The intvec D refers to rational places (see @ref{AGcode_Omega}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,887) for more details.).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,888) The current AG code is @code{AGcode_Omega(G,D,EC)}.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,889) If you know the exact minimum distance d and you want to use it in
../singular_texi/./d2t_singular/brnoeth_lib.tex(,890) @code{decodeSV} instead of 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,894) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,895) $delta$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,896) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,897) , you can change the value
../singular_texi/./d2t_singular/brnoeth_lib.tex(,898) of E[n+3][2] to d before applying decodeSV.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,899) @*If you have a systematic encoding for the current code and want to
../singular_texi/./d2t_singular/brnoeth_lib.tex(,900) keep it during the decoding, you must previously permute D (using
../singular_texi/./d2t_singular/brnoeth_lib.tex(,901) @code{permute_L(D,P);}), e.g., according to the permutation
../singular_texi/./d2t_singular/brnoeth_lib.tex(,902) P=L[3], L being the output of @code{sys_code}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,903) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,904) @item @strong{Warnings:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,905) F must be a divisor with support disjoint from the support of D and
../singular_texi/./d2t_singular/brnoeth_lib.tex(,906) with degree 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,910) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,911) $epsilon + genus$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,912) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,913) , where
../singular_texi/./d2t_singular/brnoeth_lib.tex(,914) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,918) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,919) $epsilon:=[(deg(G)-3*genus+1)/2]$
../singular_texi/./d2t_singular/brnoeth_lib.tex(,920) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,921) .@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,922) G should satisfy 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,926) @tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,927) $ 2*genus-2 < deg(G) < size(D) $
../singular_texi/./d2t_singular/brnoeth_lib.tex(,928) @end tex
../singular_texi/./d2t_singular/brnoeth_lib.tex(,929) , which is
../singular_texi/./d2t_singular/brnoeth_lib.tex(,930) not checked by the algorithm.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,931) @*G and D should also have disjoint supports (checked by the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,932) algorithm).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,933) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,934) @cindex SV-decoding algorithm, preprocessing
../singular_texi/./d2t_singular/brnoeth_lib.tex(,935) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,936) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,937) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,938) @c computed example prepSV d2t_singular/brnoeth_lib.doc:569 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,939) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,940) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,941) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,942) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,943) list HC=Adj_div(x3+y2+y);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,944) @expansion{} The genus of the curve is 1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,945) HC=NSplaces(1..2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,946) HC=extcurve(2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,947) @expansion{} Total number of rational places : NrRatPl = 9
../singular_texi/./d2t_singular/brnoeth_lib.tex(,948) def ER=HC[1][4];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,949) setring ER;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,950) intvec G=5;      // the rational divisor G = 5*HC[3][1]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,951) intvec D=2..9;   // D = sum of the rational places no. 2..9 over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,952) // construct the corresp. residual AG code of type [8,3,>=5] over F_4:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,953) matrix C=AGcode_Omega(G,D,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,954) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,955) // we can correct 1 error and the genus is 1, thus F must have degree 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,956) // and support disjoint from that of D;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,957) intvec F=2;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,958) list SV=prepSV(G,D,F,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,959) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,960) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,961) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,962) // now everything is prepared to decode with the basic algorithm;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,963) // for example, here is a parity check matrix to compute the syndrome :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,964) print(SV[1]);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,965) @expansion{} 0,0,(a),  (a+1),1,  1,    (a+1),(a),  
../singular_texi/./d2t_singular/brnoeth_lib.tex(,966) @expansion{} 1,0,(a),  (a+1),(a),(a+1),(a),  (a+1),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,967) @expansion{} 1,1,1,    1,    1,  1,    1,    1,    
../singular_texi/./d2t_singular/brnoeth_lib.tex(,968) @expansion{} 0,0,(a+1),(a),  1,  1,    (a),  (a+1),
../singular_texi/./d2t_singular/brnoeth_lib.tex(,969) @expansion{} 0,0,(a+1),(a),  (a),(a+1),1,    1     
../singular_texi/./d2t_singular/brnoeth_lib.tex(,970) // and here you have the correction capacity of the algorithm :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,971) int epsilon=SV[size(D)+3][1];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,972) epsilon;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,973) @expansion{} 1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,974) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,975) @c end example prepSV d2t_singular/brnoeth_lib.doc:569
../singular_texi/./d2t_singular/brnoeth_lib.tex(,976) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,977) @c inserted refs from d2t_singular/brnoeth_lib.doc:596
../singular_texi/./d2t_singular/brnoeth_lib.tex(,989) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,990) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,991) @ref{decodeSV};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,992) @ref{extcurve};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,993) @ref{permute_L};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,994) @ref{sys_code}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,996) @c end inserted refs from d2t_singular/brnoeth_lib.doc:596
../singular_texi/./d2t_singular/brnoeth_lib.tex(,997) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,998) @c ---end content prepSV---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,999) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1000) @c ------------------- decodeSV -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1001) @node decodeSV, closed_points, prepSV, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1002) @subsubsection decodeSV
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1003) @cindex decodeSV
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1004) @c ---content decodeSV---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1005) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1006) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1007) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1008) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1009) decodeSV( y, K ); y a row-matrix and K a list
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1010) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1011) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1012) a codeword (row-matrix) if possible, resp. the 0-matrix (of size
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1013) 1) if decoding is impossible.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1014) @*For decoding the basic (Skorobogatov-Vladut) decoding algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1015) is applied.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1016) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1017) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1018) The list_expression should be the output K of the procedure
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1019) @code{prepSV}.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1020) The matrix_expression should be a (1 x n)-matrix, where
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1021) n = ncols(K[1]).@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1022) The decoding may fail if the number of errors is greater than
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1023) the correction capacity of the algorithm.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1024) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1025) @cindex SV-decoding algorithm
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1026) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1027) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1028) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1029) @c computed example decodeSV d2t_singular/brnoeth_lib.doc:631 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1030) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1031) int plevel=printlevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1032) printlevel=-1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1033) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1034) list HC=Adj_div(x3+y2+y);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1035) @expansion{} The genus of the curve is 1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1036) HC=NSplaces(1..2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1037) HC=extcurve(2,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1038) @expansion{} Total number of rational places : NrRatPl = 9
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1039) def ER=HC[1][4];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1040) setring ER;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1041) intvec G=5;      // the rational divisor G = 5*HC[3][1]
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1042) intvec D=2..9;   // D = sum of the rational places no. 2..9 over F_4
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1043) // construct the corresp. residual AG code of type [8,3,>=5] over F_4:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1044) matrix C=AGcode_Omega(G,D,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1045) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1046) // we can correct 1 error and the genus is 1, thus F must have degree 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1047) // and support disjoint from that of D
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1048) intvec F=2;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1049) list SV=prepSV(G,D,F,HC);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1050) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1051) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1052) @expansion{} Vector basis successfully computed 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1053) // now we produce 1 error on the zero-codeword :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1054) matrix y[1][8];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1055) y[1,3]=a;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1056) // and then we decode :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1057) print(decodeSV(y,SV));
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1058) @expansion{} 0,0,0,0,0,0,0,0
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1059) printlevel=plevel;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1060) @c end example decodeSV d2t_singular/brnoeth_lib.doc:631
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1061) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1062) @c inserted refs from d2t_singular/brnoeth_lib.doc:657
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1072) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1073) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1074) @ref{extcurve};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1075) @ref{prepSV}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1077) @c end inserted refs from d2t_singular/brnoeth_lib.doc:657
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1078) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1079) @c ---end content decodeSV---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1080) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1081) @c ------------------- closed_points -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1082) @node closed_points, dual_code, decodeSV, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1083) @subsubsection closed_points
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1084) @cindex closed_points
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1085) @c ---content closed_points---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1086) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1087) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1088) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1089) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1090) closed_points(I); I an ideal
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1091) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1092) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1093) list of prime ideals (each a Groebner basis), corresponding to
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1094) the (distinct affine closed) points of V(I)
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1095) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1096) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1097) The ideal must have dimension 0, the basering must have 2
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1098) variables, the ordering must be lp, and the base field must
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1099) be finite and prime.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1100) It might be convenient to set the option(redSB) in advance.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1101) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1102) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1103) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1104) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1105) @c computed example closed_points d2t_singular/brnoeth_lib.doc:687 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1106) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1107) ring s=2,(x,y),lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1108) // this is just the affine plane over F_4 :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1109) ideal I=x4+x,y4+y;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1110) list L=closed_points(I);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1111) // and here you have all the points :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1112) L;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1113) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1114) @expansion{}    _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1115) @expansion{}    _[2]=x+y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1116) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1117) @expansion{}    _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1118) @expansion{}    _[2]=x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1119) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1120) @expansion{}    _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1121) @expansion{}    _[2]=x+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1122) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1123) @expansion{}    _[1]=y2+y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1124) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1125) @expansion{} [5]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1126) @expansion{}    _[1]=y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1127) @expansion{}    _[2]=x2+x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1128) @expansion{} [6]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1129) @expansion{}    _[1]=y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1130) @expansion{}    _[2]=x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1131) @expansion{} [7]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1132) @expansion{}    _[1]=y+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1133) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1134) @expansion{} [8]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1135) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1136) @expansion{}    _[2]=x2+x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1137) @expansion{} [9]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1138) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1139) @expansion{}    _[2]=x+1
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1140) @expansion{} [10]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1141) @expansion{}    _[1]=y
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1142) @expansion{}    _[2]=x
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1143) @c end example closed_points d2t_singular/brnoeth_lib.doc:687
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1144) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1145) @c inserted refs from d2t_singular/brnoeth_lib.doc:697
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1153) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1154) @ref{triang_lib}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1156) @c end inserted refs from d2t_singular/brnoeth_lib.doc:697
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1157) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1158) @c ---end content closed_points---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1159) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1160) @c ------------------- dual_code -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1161) @node dual_code, sys_code, closed_points, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1162) @subsubsection dual_code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1163) @cindex dual_code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1164) @c ---content dual_code---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1165) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1166) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1167) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1168) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1169) dual_code(G); G a matrix of numbers
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1170) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1171) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1172) a generator matrix of the dual code generated by G
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1173) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1174) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1175) The input should be a matrix G of numbers. @*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1176) The output is also a parity check matrix for the code defined by G
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1177) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1178) @cindex linear code, dual
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1179) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1180) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1181) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1182) @c computed example dual_code d2t_singular/brnoeth_lib.doc:725 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1183) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1184) ring s=2,T,lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1185) // here is the Hamming code of length 7 and dimension 3
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1186) matrix G[3][7]=1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1187) print(G);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1188) @expansion{} 1,0,1,0,1,0,1,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1189) @expansion{} 0,1,1,0,0,1,1,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1190) @expansion{} 0,0,0,1,1,1,1 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1191) matrix H=dual_code(G);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1192) print(H);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1193) @expansion{} 1,1,1,0,0,0,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1194) @expansion{} 1,0,0,1,1,0,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1195) @expansion{} 0,1,0,1,0,1,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1196) @expansion{} 1,1,0,1,0,0,1 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1197) @c end example dual_code d2t_singular/brnoeth_lib.doc:725
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1198) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1199) @c ---end content dual_code---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1200) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1201) @c ------------------- sys_code -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1202) @node sys_code, permute_L, dual_code, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1203) @subsubsection sys_code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1204) @cindex sys_code
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1205) @c ---content sys_code---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1206) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1207) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1208) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1209) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1210) sys_code(C); C is a matrix of constants
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1211) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1212) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1213) list L with:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1214)    @format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1215)    L[1] is the generator matrix in standard form of an equivalent code,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1216)    L[2] is the parity check matrix in standard form of such code,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1217)    L[3] is an intvec which represents the needed permutation.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1218)    @end format
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1219) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1220) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1221) Computes a systematic code which is equivalent to the given one.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1222) The input should be a matrix of numbers.@*
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1223) The output has to be interpreted as follows: if the input was
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1224) the generator matrix of an AG code then one should apply the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1225) permutation L[3] to the divisor D of rational points by means
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1226) of @code{permute_L(D,L[3]);} before continuing to work with the
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1227) code (for instance, if you want to use the systematic encoding
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1228) together with a decoding algorithm).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1229) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1230) @cindex linear code, systematic
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1231) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1232) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1233) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1234) @c computed example sys_code d2t_singular/brnoeth_lib.doc:770 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1235) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1236) ring s=3,T,lp;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1237) matrix C[2][5]=0,1,0,1,1,0,1,0,0,1;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1238) print(C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1239) @expansion{} 0,1,0,1,1,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1240) @expansion{} 0,1,0,0,1 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1241) list L=sys_code(C);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1242) L[3];
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1243) @expansion{} 2,4,3,1,5
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1244) // here is the generator matrix in standard form
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1245) print(L[1]);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1246) @expansion{} 1,0,0,0,1,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1247) @expansion{} 0,1,0,0,0 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1248) // here is the control matrix in standard form
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1249) print(L[2]);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1250) @expansion{} 0, 0,1,0,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1251) @expansion{} 0, 0,0,1,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1252) @expansion{} -1,0,0,0,1 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1253) // we can check that both codes are dual to each other
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1254) print(L[1]*transpose(L[2]));
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1255) @expansion{} 0,0,0,
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1256) @expansion{} 0,0,0 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1257) @c end example sys_code d2t_singular/brnoeth_lib.doc:770
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1258) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1259) @c inserted refs from d2t_singular/brnoeth_lib.doc:785
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1269) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1270) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1271) @ref{permute_L};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1272) @ref{prepSV}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1274) @c end inserted refs from d2t_singular/brnoeth_lib.doc:785
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1275) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1276) @c ---end content sys_code---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1277) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1278) @c ------------------- permute_L -------------
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1279) @node permute_L,, sys_code, brnoeth_lib
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1280) @subsubsection permute_L
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1281) @cindex permute_L
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1282) @c ---content permute_L---
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1283) Procedure from library @code{brnoeth.lib} (@pxref{brnoeth_lib}).
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1284) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1285) @table @asis
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1286) @item @strong{Usage:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1287) permute_L( L, P ); L,P either intvecs or lists
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1288) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1289) @item @strong{Return:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1290) list obtained from L by applying the permutation given by P.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1291) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1292) @item @strong{Note:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1293) If P is a list, all entries must be integers.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1294) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1295) @end table
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1296) @strong{Example:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1297) @smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1298) @c computed example permute_L d2t_singular/brnoeth_lib.doc:811 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1299) LIB "brnoeth.lib";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1300) list L=list();
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1301) L[1]="a";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1302) L[2]="b";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1303) L[3]="c";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1304) L[4]="d";
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1305) intvec P=1,3,4,2;
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1306) // the list L is permuted according to P :
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1307) permute_L(L,P);
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1308) @expansion{} [1]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1309) @expansion{}    a
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1310) @expansion{} [2]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1311) @expansion{}    c
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1312) @expansion{} [3]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1313) @expansion{}    d
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1314) @expansion{} [4]:
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1315) @expansion{}    b
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1316) @c end example permute_L d2t_singular/brnoeth_lib.doc:811
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1317) @end smallexample
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1318) @c inserted refs from d2t_singular/brnoeth_lib.doc:823
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1328) @strong{See also:}
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1329) @ref{AGcode_Omega};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1330) @ref{prepSV};
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1331) @ref{sys_code}.
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1333) @c end inserted refs from d2t_singular/brnoeth_lib.doc:823
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1334) 
../singular_texi/./d2t_singular/brnoeth_lib.tex(,1335) @c ---end content permute_L---
../singular_texi/singular.tex(,618) @c ----------------------------------------------------------
../singular_texi/singular.tex(,619) @node Release Notes, Index, SINGULAR libraries, Top
../singular_texi/singular.tex(,620) @chapter Release Notes
../singular_texi/singular.tex(,621) @cindex Release Notes
../singular_texi/platform.tex(,1) @comment -*-texinfo-*-
../singular_texi/platform.tex(,2) @comment This file was generated by doc2tex.pl from platform.doc
../singular_texi/platform.tex(,3) @comment DO NOT EDIT DIRECTLY, BUT EDIT platform.doc INSTEAD
../singular_texi/platform.tex(,4) @comment Id: platform.tex,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/platform.tex(,5) @comment this file contains Release notes and various howto's
../singular_texi/platform.tex(,6) 
../singular_texi/platform.tex(,7) @c The following directives are necessary for proper compilation
../singular_texi/platform.tex(,8) @c with emacs (C-c C-e C-r).  Please keep it as it is.  Since it
../singular_texi/platform.tex(,9) @c is wrapped in `@ignore' and `@end ignore' it does not harm `tex' or
../singular_texi/platform.tex(,10) @c `makeinfo' but is a great help in editing this file (emacs
../singular_texi/platform.tex(,11) @c ignores the `@ignore').
../singular_texi/platform.tex(,24) 
../singular_texi/platform.tex(,25) @menu
../singular_texi/platform.tex(,26) * News and changes::
../singular_texi/platform.tex(,27) * Downloading instructions::
../singular_texi/platform.tex(,28) * Unix installation instructions::
../singular_texi/platform.tex(,29) * Windows installation instructions::
../singular_texi/platform.tex(,30) * Macintosh installation instructions::
../singular_texi/platform.tex(,31) @end menu
../singular_texi/platform.tex(,32) 
../singular_texi/platform.tex(,33) @c ----------------------------------------------------------
../singular_texi/platform.tex(,34) @node News and changes, Downloading instructions,,Release Notes
../singular_texi/platform.tex(,35) @section News and changes
../singular_texi/platform.tex(,36) @cindex news
../singular_texi/platform.tex(,37) @cindex changes
../singular_texi/platform.tex(,38) 
../singular_texi/NEWS.texi(,1) @comment -*-texinfo-*-
../singular_texi/NEWS.texi(,2) @comment Id: NEWS.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/NEWS.texi(,3) @comment this file contains the News about Singular versions
../singular_texi/NEWS.texi(,4) @comment Unix
../singular_texi/NEWS.texi(,8) 
../singular_texi/NEWS.texi(,9) @majorheading NEWS in SINGULAR 2-0-4
../singular_texi/NEWS.texi(,10) 
../singular_texi/NEWS.texi(,16) 
../singular_texi/NEWS.texi(,22) 
../singular_texi/NEWS.texi(,23) The current version 2-0-4 is an update to the 
../singular_texi/NEWS.texi(,24) release series version 2-0. 
../singular_texi/NEWS.texi(,25) 
../singular_texi/NEWS.texi(,26) Changes with respect to version 2-0-3:
../singular_texi/NEWS.texi(,27) 
../singular_texi/NEWS.texi(,28) @heading Factorizing algorithms revisited
../singular_texi/NEWS.texi(,29) Starting with version 2-0-4, we use NTL (by Victor Shoup) for factoring
../singular_texi/NEWS.texi(,30) univariate polynomials. The multivariate factoring code in libfac/factory
../singular_texi/NEWS.texi(,31) does now also work over algebraic extension fields.
../singular_texi/NEWS.texi(,32) 
../singular_texi/NEWS.texi(,33) @heading Help system is configurable via LIB/help.cnf
../singular_texi/NEWS.texi(,34) The help browsers of Singular can be configured via the file
../singular_texi/NEWS.texi(,35) LIB/help.cnf, also the addition of new help browsers is possible.
../singular_texi/NEWS.texi(,36) 
../singular_texi/NEWS.texi(,37) @heading Extensions of the ring concept
../singular_texi/NEWS.texi(,38) 
../singular_texi/NEWS.texi(,39) @table @asis
../singular_texi/NEWS.texi(,40) @item new coefficient domains: arbitrary long real and complex numbers
../singular_texi/NEWS.texi(,41) @item no restriction on number of parameters
../singular_texi/NEWS.texi(,42) @item degree bound on exponent values (maximum is now 2^31, standard 2^15)
../singular_texi/NEWS.texi(,43) @item non-positives weights get a better handling (converts wp/Wp to ws/Ws)
../singular_texi/NEWS.texi(,44) @item handle blocks of mixed orders correctly
../singular_texi/NEWS.texi(,45) @item maximal prime characteristic is now 2147483629 instead of 32003
../singular_texi/NEWS.texi(,46) @c @item TBC: parameters over real/complex
../singular_texi/NEWS.texi(,47) @c @item TBC: declaration with "ring of ring".
../singular_texi/NEWS.texi(,48) @end table
../singular_texi/NEWS.texi(,49) 
../singular_texi/NEWS.texi(,50) @heading Changes in @sc{Singular} libraries
../singular_texi/NEWS.texi(,51) The documentation of libraries was generally improved.
../singular_texi/NEWS.texi(,52) @table @asis
../singular_texi/NEWS.texi(nref,53) @item ../singular_texi/NEWS.texi(nref,53) @ref{equising_lib}../singular_texi/NEWS.texi(nref,53) 
../singular_texi/NEWS.texi(,54) procedures esStratum, isEquising now also for reducible polynomials
../singular_texi/NEWS.texi(,55) @*new procedures: tau_es (codim of mu-const stratum in semi-universal def. base);
../singular_texi/NEWS.texi(,56) esIdeal ((Wahl's) equisingularity ideal)
../singular_texi/NEWS.texi(nref,57) @item ../singular_texi/NEWS.texi(nref,57) @ref{gaussman_lib}../singular_texi/NEWS.texi(nref,57) 
../singular_texi/NEWS.texi(,58) added bernstein: roots of the Bernstein polynomial of t
../singular_texi/NEWS.texi(nref,59) @item ../singular_texi/NEWS.texi(nref,59) @ref{hnoether_lib}../singular_texi/NEWS.texi(nref,59) 
../singular_texi/NEWS.texi(,60) HNdevelop, reddevelop, essdevelop are obsolete, replaced by hnexpansion
../singular_texi/NEWS.texi(,61) @*multsequence is "repaired" (since branches computed by hnexpansion
../singular_texi/NEWS.texi(,62) et al) are now ordered according to the needs of multsequence.
../singular_texi/NEWS.texi(,63) @*newtonpoly needs no longer that ordering of the basering is ls
../singular_texi/NEWS.texi(,64) @*new procedures: is_NND      test if f is Newton non-degenerate
../singular_texi/NEWS.texi(nref,65) @item ../singular_texi/NEWS.texi(nref,65) @ref{homolog_lib}../singular_texi/NEWS.texi(nref,65) 
../singular_texi/NEWS.texi(,66) new procedures: depth, fitting, flatteningStrat, isCM, isFlat, isLocallyFree,
../singular_texi/NEWS.texi(,67) isReg, KoszulHomology, tensorMod, Tor
../singular_texi/NEWS.texi(nref,68) @item ../singular_texi/NEWS.texi(nref,68) @ref{matrix_lib}../singular_texi/NEWS.texi(nref,68) 
../singular_texi/NEWS.texi(,69) in proc tensor(A,B):  check if ncols(A)==0
../singular_texi/NEWS.texi(nref,70) @item ../singular_texi/NEWS.texi(nref,70) @ref{normal_lib}../singular_texi/NEWS.texi(nref,70) 
../singular_texi/NEWS.texi(,71) new procedure: deltaLoc(f,S);      (sum of) delta invariant(s) at conjugated
../singular_texi/NEWS.texi(,72) singular points
../singular_texi/NEWS.texi(,73) @*proc genus makes now use of is_NND of hnoether.lib
../singular_texi/NEWS.texi(nref,74) @item ../singular_texi/NEWS.texi(nref,74) @ref{primdec_lib}../singular_texi/NEWS.texi(nref,74) 
../singular_texi/NEWS.texi(,75) optimizations again
../singular_texi/NEWS.texi(nref,76) @item ../singular_texi/NEWS.texi(nref,76) @ref{solve_lib}../singular_texi/NEWS.texi(nref,76) 
../singular_texi/NEWS.texi(,77) procedure laguerre_solve ignores no longer the 2nd parameter (precision of 
../singular_texi/NEWS.texi(,78) internal computation)
../singular_texi/NEWS.texi(,79) @* new procedure simplexOut:     prints solution of simplex in nice format
../singular_texi/NEWS.texi(,80) @end table
../singular_texi/NEWS.texi(,81) 
../singular_texi/NEWS.texi(,82) @heading Internal Changes
../singular_texi/NEWS.texi(,83) @table @asis
../singular_texi/NEWS.texi(,84) @item normal form computation uses
../singular_texi/NEWS.texi(,85) Bucket representation of polynomials.
../singular_texi/NEWS.texi(,86) @item factorization
../singular_texi/NEWS.texi(,87) revisited, missing cases implemented
../singular_texi/NEWS.texi(,88) @item NTL
../singular_texi/NEWS.texi(,89) NTL is used for univariate factorization
../singular_texi/NEWS.texi(,90) @item source code
../singular_texi/NEWS.texi(,91) adapted for use with gcc 3.1/3.2, gmp 4.x
../singular_texi/NEWS.texi(,92) @end table
../singular_texi/NEWS.texi(,93) 
../singular_texi/NEWS.texi(,94) @heading Porting
../singular_texi/NEWS.texi(,95) @itemize @bullet
../singular_texi/NEWS.texi(,96) @item Singular is available for ix86-libc5, ix86-libc6, HPUX_9, HPUX_10,
../singular_texi/NEWS.texi(,97) SunOS-4, SunOS-5, IRIX-6, ix86-Win (Windows 95/98/ME/NT/2K/XP),
../singular_texi/NEWS.texi(,98) FreeBSD 4.x, MacOS X
../singular_texi/NEWS.texi(,99) @c @item @code{dbm} functionality is not available on 
../singular_texi/NEWS.texi(,100) Windows 95/98/ME/NT/2K/XP and MacOS X
../singular_texi/NEWS.texi(,101) @item @code{MP} functionality is not available on
../singular_texi/NEWS.texi(,102) Windows 95/98/ME/NT/2K/XP and MacOS X.
../singular_texi/NEWS.texi(,103) @item Singular 2-0-2 was the last version for MacOS 9
../singular_texi/NEWS.texi(,104) @end itemize
../singular_texi/platform.tex(,40) 
../singular_texi/platform.tex(,41) @c ----------------------------------------------------------
../singular_texi/platform.tex(,42) @node Downloading instructions, Unix installation instructions, News and changes, Release Notes
../singular_texi/platform.tex(,43) @section Downloading instructions
../singular_texi/platform.tex(,44) @cindex downloading
../singular_texi/platform.tex(,45) @cindex instructions, downloading
../singular_texi/platform.tex(,46) @cindex howto, download
../singular_texi/platform.tex(,47) 
../singular_texi/platform.tex(,48) @sc{Singular} is available as binary program for most common hard-
../singular_texi/platform.tex(,49) and software platforms. Release versions of @sc{Singular} can be
../singular_texi/platform.tex(,50) downloaded with ftp from our FTP site
../singular_texi/platform.tex(,51) @display
../singular_texi/platform.tex(,52) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/},
../singular_texi/platform.tex(,53) @end display
../singular_texi/platform.tex(,54) or, using your favorite WWW browser, from
../singular_texi/platform.tex(,55) @display
../singular_texi/platform.tex(,56) @uref{http://www.mathematik.uni-kl.de/ftp/pub/Math/Singular/}.
../singular_texi/platform.tex(,57) @end display
../singular_texi/platform.tex(,58) 
../singular_texi/README_download.texi(,1) @comment -*-texinfo-*-
../singular_texi/README_download.texi(,2) @comment Id: README_download.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/README_download.texi(,3) @c FILE: README_download.texi
../singular_texi/README_download.texi(,4) @c PURPOSE: downloading instructions, to be includeded in manual and README_ftp
../singular_texi/README_download.texi(,5) @c
../singular_texi/README_download.texi(,6) 
../singular_texi/README_download.texi(,10) 
../singular_texi/README_download.texi(,11) @heading To download @sc{Singular} for a Unix platform
../singular_texi/README_download.texi(,12) 
../singular_texi/README_download.texi(,13) Make sure that you have approximately 20 MByte of free disk space and follow
../singular_texi/README_download.texi(,14) these steps.
../singular_texi/README_download.texi(,15) 
../singular_texi/README_download.texi(,16) @enumerate
../singular_texi/README_download.texi(,17) @item
../singular_texi/README_download.texi(,18) You need to download two (archive) files:
../singular_texi/README_download.texi(,19) @table @code
../singular_texi/README_download.texi(,20) @item Singular-2-0-4-share.tar.gz 
../singular_texi/README_download.texi(,21) contains architecture independent data like documentation and libraries
../singular_texi/README_download.texi(,22) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-share.tar.gz}
../singular_texi/README_download.texi(,23) @item Singular-2-0-4-<uname>.tar.gz
../singular_texi/README_download.texi(,24) contains architecture dependent executables, like the @sc{Singular}
../singular_texi/README_download.texi(,25) program.
../singular_texi/README_download.texi(,26) @end table
../singular_texi/README_download.texi(,27) @code{<uname>} is a description of the processor and operating
../singular_texi/README_download.texi(,28) system for which @sc{Singular} is compiled. Choose one of the following:
../singular_texi/README_download.texi(,29) @multitable @columnfractions .2 .8
../singular_texi/README_download.texi(,30) @item @code{ix86-Linux}
../singular_texi/README_download.texi(,31) @tab PC's running under Linux with @code{libc} version 6 (e.g., for SuSe
../singular_texi/README_download.texi(,32) Linux distribution version >= 6; RedHat Linux distribution version >= 5.2).
../singular_texi/README_download.texi(,33) @*
../singular_texi/README_download.texi(,34) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-ix86-Linux.tar.gz}
../singular_texi/README_download.texi(,35) @item @code{ix86-Linux-libc5}
../singular_texi/README_download.texi(,36) @tab PC's running under Linux with @code{libc} version 5 (if you are not 
../singular_texi/README_download.texi(,37) sure which @code{libc} version you have, run @code{ldd /bin/ls}).
../singular_texi/README_download.texi(,38) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-ix86-Linux-libc5.tar.gz}
../singular_texi/README_download.texi(,39) @item @code{ix86-freebsd}
../singular_texi/README_download.texi(,40) @tab 's running under FreeBSD
../singular_texi/README_download.texi(,41) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-ix86-freebsd.tar.gz}
../singular_texi/README_download.texi(,42) @item @code{ix86-Win}
../singular_texi/README_download.texi(,43) @tab PC's running Windows 95/98/ME/NT/2K/XP which have Cygwin version 1.3.9 (or
../singular_texi/README_download.texi(,44) higher) already installed. Unless you are familiar with Cygwin, we
../singular_texi/README_download.texi(,45) recommend that you download one of the self-extracting archives as
../singular_texi/README_download.texi(,46) described below.
../singular_texi/README_download.texi(,47) @item @code{HPUX-9}
../singular_texi/README_download.texi(,48) @tab HP workstations running under HPUX version 9
../singular_texi/README_download.texi(,49) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-HPUX-9.tar.gz}
../singular_texi/README_download.texi(,50) @item @code{HPUX-10}
../singular_texi/README_download.texi(,51) @tab HP workstations running under HPUX version 10
../singular_texi/README_download.texi(,52) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-HPUX-10.tar.gz}
../singular_texi/README_download.texi(,53) @item @code{SunOS-5}
../singular_texi/README_download.texi(,54) @tab Sun workstations running Solaris version 5
../singular_texi/README_download.texi(,55) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-SunOS-5.tar.gz}
../singular_texi/README_download.texi(,56) @item @code{IRIX-6}
../singular_texi/README_download.texi(,57) @tab IRIX workstations running IRIX version 6
../singular_texi/README_download.texi(,58) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-IRIX-6.tar.gz}
../singular_texi/README_download.texi(,59) @item @code{AIX-4}
../singular_texi/README_download.texi(,60) @tab AIX workstations running AIX version 4
../singular_texi/README_download.texi(,61) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-AIX-4.tar.gz}
../singular_texi/README_download.texi(,62) @item @code{PowerMacintosh-darwin}
../singular_texi/README_download.texi(,63) @tab PowerMacintosh running Mac OS X
../singular_texi/README_download.texi(,64) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/OsX/Singular-2-0-4-PowerMacintosh-darwin.tar.gz}
../singular_texi/README_download.texi(,65) @item @code{DecAlpha-Linux}
../singular_texi/README_download.texi(,66) @tab Digital Dec Alpha running Linux (RedHat 5.2)
../singular_texi/README_download.texi(,67) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-DecAlpha-Linux.tar.gz}
../singular_texi/README_download.texi(,68) @item @code{DecAlpha-OSF1}
../singular_texi/README_download.texi(,69) @tab Digital Dec Alpha running OSF 1
../singular_texi/README_download.texi(,70) @*@uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/UNIX/Singular-2-0-4-DecAlpha-OSF1.tar.gz}
../singular_texi/README_download.texi(,71) @end multitable
../singular_texi/README_download.texi(,72) Please contact us if
../singular_texi/README_download.texi(,73) you can not find an appropriate architecture dependent archive.
../singular_texi/README_download.texi(,74) 
../singular_texi/README_download.texi(,75) @item
../singular_texi/README_download.texi(,76) Simply change to the directory in which you wish to install
../singular_texi/README_download.texi(,77) @sc{Singular} (usually wherever you install 3rd-party software):
../singular_texi/README_download.texi(,78) @smallexample
../singular_texi/README_download.texi(,79) cd /usr/local/	
../singular_texi/README_download.texi(,80) @end smallexample
../singular_texi/README_download.texi(,81) 
../singular_texi/README_download.texi(,82) @sc{Singular} specific subdirectories will be created in such a way
../singular_texi/README_download.texi(,83) that multiple versions and multiple architecture dependent files
../singular_texi/README_download.texi(,84) of @sc{Singular} can peaceably coexist under the same @code{/usr/local/}
../singular_texi/README_download.texi(,85) tree.
../singular_texi/README_download.texi(,86) 
../singular_texi/README_download.texi(,87) @item
../singular_texi/README_download.texi(,88) Unpack the archives:
../singular_texi/README_download.texi(,89) @smallexample
../singular_texi/README_download.texi(,90) gzip -dc Singular-2-0-4-<uname>.tar.gz | tar -pxf -
../singular_texi/README_download.texi(,91) gzip -dc Singular-2-0-4-share.tar.gz | tar -pxf -
../singular_texi/README_download.texi(,92) @end smallexample
../singular_texi/README_download.texi(,93) If you have downloaded @code{Singular-2-0-4-share.zip},
../singular_texi/README_download.texi(,94) unpack with 
../singular_texi/README_download.texi(,95) @smallexample
../singular_texi/README_download.texi(,96) unzip -u Singular-2-0-4-share.zip
../singular_texi/README_download.texi(,97) @end smallexample
../singular_texi/README_download.texi(,98) 
../singular_texi/README_download.texi(,99) @item 
../singular_texi/README_download.texi(,100) After unpacking, see the created file
../singular_texi/README_download.texi(,101) @code{Singular/2-0-4/INSTALL} (which is also located at
../singular_texi/README_download.texi(,102) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/INSTALL_unix.html}
../singular_texi/README_download.texi(,103) for details on how to finish the installation.
../singular_texi/README_download.texi(,104) @end enumerate
../singular_texi/README_download.texi(,105) 
../singular_texi/README_download.texi(,106) @heading To download @sc{Singular} for Windows 95/98/ME/NT/2K/XP
../singular_texi/README_download.texi(,107) 
../singular_texi/README_download.texi(,108) @enumerate
../singular_texi/README_download.texi(,109) @item
../singular_texi/README_download.texi(,110) Download one of the following self-extracting archives:
../singular_texi/README_download.texi(,111) @table @code
../singular_texi/README_download.texi(,112) @item @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/WINDOWS/Singular-2-0-4-Compact.exe,Singular-2-0-4-Compact.exe}
../singular_texi/README_download.texi(,113) Minimal archive to download. Installs Singular and minimal set of needed
../singular_texi/README_download.texi(,114) tools and DLLs.
../singular_texi/README_download.texi(,115) @item @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/WINDOWS/Singular-2-0-4-Typical.exe,Singular-2-0-4-Typical.exe}
../singular_texi/README_download.texi(,116) Typical archive to download. Installs Singular and the XEmacs editor to
../singular_texi/README_download.texi(,117) run ESingular.
../singular_texi/README_download.texi(,118) @end table
../singular_texi/README_download.texi(,119) 
../singular_texi/README_download.texi(,120) @item 
../singular_texi/README_download.texi(,121) Double-click (or, execute), the self-extracting archives, and
../singular_texi/README_download.texi(,122) @strong{carefully} follow the instructions given there.
../singular_texi/README_download.texi(,123) 
../singular_texi/README_download.texi(,124) @item 
../singular_texi/README_download.texi(,125) If, while running setup, you obtain the following message 
../singular_texi/README_download.texi(,126) @code{Setup failed to launch installation engine:} 
../singular_texi/README_download.texi(,127) @code{Error loading type library/DLL}, then you need to download and execute Microsoft DCOM98 package
../singular_texi/README_download.texi(,128) @uref{http://www.microsoft.com/com/dcom/dcom98/download.asp}. 
../singular_texi/README_download.texi(,129) Such a problem could appear on Win 95/98.
../singular_texi/README_download.texi(,130) 
../singular_texi/README_download.texi(,131) @item
../singular_texi/README_download.texi(,132) In case of problems, see the created file 
../singular_texi/README_download.texi(,133) @code{/etc/INSTALL.txt} (which is also located at
../singular_texi/README_download.texi(,134) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/WINDOWS/INSTALL_win.htm}
../singular_texi/README_download.texi(,135) for details on how to finish the installation.
../singular_texi/README_download.texi(,136) @end enumerate
../singular_texi/README_download.texi(,137) 
../singular_texi/README_download.texi(,138) @heading To download @sc{Singular} for the Macintosh
../singular_texi/README_download.texi(,139) For the @sc{Singular} version for Mac OS X refer to the Unix section.
../singular_texi/README_download.texi(,140) @*The @sc{Singular} version for Mac OS 9 is available as 
../singular_texi/README_download.texi(,141) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/Singular-2-0-2-html.sea.hqx} (documentation) and @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/Singular-2-0-2-ppc-MPW.sea.hqx} (binaries and libraries). 
../singular_texi/README_download.texi(,142) The file @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/INSTALL_mac.html}
../singular_texi/README_download.texi(,143) gives details on how to finish the installation.
../singular_texi/README_download.texi(,144) 
../singular_texi/README_download.texi(,145) 
../singular_texi/README_download.texi(,146) 
../singular_texi/platform.tex(,60) 
../singular_texi/platform.tex(,61) @c ----------------------------------------------------------
../singular_texi/platform.tex(,62) @node Unix installation instructions, Windows installation instructions,Downloading instructions, Release Notes
../singular_texi/platform.tex(,63) @section Unix installation instructions
../singular_texi/platform.tex(,64) @cindex Unix installation
../singular_texi/platform.tex(,65) @cindex instructions, Unix installation
../singular_texi/platform.tex(,66) @cindex howto, install on Unix
../singular_texi/platform.tex(,67) 
../singular_texi/INSTALL_unix.texi(,1) @comment -*-texinfo-*-
../singular_texi/INSTALL_unix.texi(,2) @comment Id: INSTALL_unix.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/INSTALL_unix.texi(,3) @c FILE: INSTALL_unix.texi
../singular_texi/INSTALL_unix.texi(,4) @c PURPOSE: Installation instruction for Singular on Unix
../singular_texi/INSTALL_unix.texi(,5) @c
../singular_texi/INSTALL_unix.texi(,6) 
../singular_texi/INSTALL_unix.texi(,10) 
../singular_texi/INSTALL_unix.texi(,14) 
../singular_texi/INSTALL_unix.texi(,16) @set _UNAME <uname>
../singular_texi/INSTALL_unix.texi(,18) 
../singular_texi/INSTALL_unix.texi(,22) 
../singular_texi/INSTALL_unix.texi(,23) To install @sc{Singular} on a
../singular_texi/INSTALL_unix.texi(,28) Unix
../singular_texi/INSTALL_unix.texi(,30) platform, you need the following two
../singular_texi/INSTALL_unix.texi(,31) archives:
../singular_texi/INSTALL_unix.texi(,32) @table @code
../singular_texi/INSTALL_unix.texi(,33) @item Singular-2-0-4-share.tar.gz
../singular_texi/INSTALL_unix.texi(,34) contains architecture independent data like documentation and libraries
../singular_texi/INSTALL_unix.texi(,35) (alternatively, you may also download
../singular_texi/INSTALL_unix.texi(,36) @code{Singular-2-0-4-share.zip}).
../singular_texi/INSTALL_unix.texi(,37) @item Singular-2-0-4-<uname>.tar.gz
../singular_texi/INSTALL_unix.texi(,38) contains architecture dependent executables, like the @sc{Singular}
../singular_texi/INSTALL_unix.texi(,39) program.
../singular_texi/INSTALL_unix.texi(,40) @end table
../singular_texi/INSTALL_unix.texi(,42) @*
../singular_texi/INSTALL_unix.texi(,43) @code{<uname>} is a description of the processor and operating system
../singular_texi/INSTALL_unix.texi(,44) for which @sc{Singular} is compiled (e.g, @code{ix86-Linux}). Please contact us if
../singular_texi/INSTALL_unix.texi(,45) you can not find an appropriate architecture dependent archive.
../singular_texi/INSTALL_unix.texi(,47) 
../singular_texi/INSTALL_unix.texi(,48) You can obtain these (and other) archives from
../singular_texi/INSTALL_unix.texi(,49) @display
../singular_texi/INSTALL_unix.texi(,50) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular}.
../singular_texi/INSTALL_unix.texi(,51) @end display
../singular_texi/INSTALL_unix.texi(,52) 
../singular_texi/INSTALL_unix.texi(,54) 
../singular_texi/INSTALL_unix.texi(,55) @heading To install SINGULAR
../singular_texi/INSTALL_unix.texi(,56) 
../singular_texi/INSTALL_unix.texi(,57) Make sure that you have approximately 12MByte of free disk space and follow
../singular_texi/INSTALL_unix.texi(,58) these steps.
../singular_texi/INSTALL_unix.texi(,59) @enumerate
../singular_texi/INSTALL_unix.texi(,60) @item
../singular_texi/INSTALL_unix.texi(,61) Simply change to the directory in which you wish to install
../singular_texi/INSTALL_unix.texi(,62) @sc{Singular} (usually wherever you install 3rd-party software), for example:
../singular_texi/INSTALL_unix.texi(,63) @smallexample
../singular_texi/INSTALL_unix.texi(,64) cd /usr/local
../singular_texi/INSTALL_unix.texi(,65) or
../singular_texi/INSTALL_unix.texi(,66) mkdir install;cd install 
../singular_texi/INSTALL_unix.texi(,67) (you do not need root privileges in this case)
../singular_texi/INSTALL_unix.texi(,68) @end smallexample
../singular_texi/INSTALL_unix.texi(,69) 
../singular_texi/INSTALL_unix.texi(,70) @sc{Singular} specific subdirectories will be created in such a way
../singular_texi/INSTALL_unix.texi(,71) that multiple versions and multiple architecture dependent files
../singular_texi/INSTALL_unix.texi(,72) of @sc{Singular} can peaceably coexist under the same @code{/usr/local}
../singular_texi/INSTALL_unix.texi(,73) tree.
../singular_texi/INSTALL_unix.texi(,74) 
../singular_texi/INSTALL_unix.texi(,75) @item
../singular_texi/INSTALL_unix.texi(,76) Unpack the archives:
../singular_texi/INSTALL_unix.texi(,77) @smallexample
../singular_texi/INSTALL_unix.texi(,78) gzip -dc <path_to>/Singular-2-0-4-<uname>.tar.gz | tar -pxf -
../singular_texi/INSTALL_unix.texi(,79) gzip -dc <path_to>/Singular-2-0-4-share.tar.gz | tar -pxf -
../singular_texi/INSTALL_unix.texi(,80) @end smallexample
../singular_texi/INSTALL_unix.texi(,81) @c version 2-0-x does not have *-share.zip:
../singular_texi/INSTALL_unix.texi(,82) @c If you have downloaded @code{Singular-@value{VERSION}-share.zip},
../singular_texi/INSTALL_unix.texi(,83) @c unpack with
../singular_texi/INSTALL_unix.texi(,84) @c @smallexample
../singular_texi/INSTALL_unix.texi(,85) @c unzip -u Singular-@value{VERSION}-share.zip
../singular_texi/INSTALL_unix.texi(,86) @c @end smallexample
../singular_texi/INSTALL_unix.texi(,87) 
../singular_texi/INSTALL_unix.texi(,88) This creates the the directory Singular/2-0-4 with 
../singular_texi/INSTALL_unix.texi(,89) @multitable @columnfractions .36 .64
../singular_texi/INSTALL_unix.texi(,90) @item (sub)directories
../singular_texi/INSTALL_unix.texi(,91) @tab  which contain
../singular_texi/INSTALL_unix.texi(,92) @item @code{<uname>}
../singular_texi/INSTALL_unix.texi(,93) @tab @code{Singular} and @code{ESingular} executables
../singular_texi/INSTALL_unix.texi(,94) @item @code{LIB}
../singular_texi/INSTALL_unix.texi(,95) @tab @sc{Singular} libraries (@code{*.lib} files)
../singular_texi/INSTALL_unix.texi(,96) @item @code{emacs}
../singular_texi/INSTALL_unix.texi(,97) @tab files for the @sc{Singular} Emacs user interface
../singular_texi/INSTALL_unix.texi(,98) @item @code{info}
../singular_texi/INSTALL_unix.texi(,99) @tab info files of @sc{Singular} manual
../singular_texi/INSTALL_unix.texi(,100) @item @code{html}
../singular_texi/INSTALL_unix.texi(,101) @tab html files of @sc{Singular} manual
../singular_texi/INSTALL_unix.texi(,102) @item @code{doc}
../singular_texi/INSTALL_unix.texi(,103) @tab miscellaneous documentation files
../singular_texi/INSTALL_unix.texi(,104) @item @code{examples}
../singular_texi/INSTALL_unix.texi(,105) @tab @sc{Singular} examples (@code{*.sing} files)
../singular_texi/INSTALL_unix.texi(,106) @end multitable
../singular_texi/INSTALL_unix.texi(,107) 
../singular_texi/INSTALL_unix.texi(,108) For the executable to work, the directory layout must look pretty much
../singular_texi/INSTALL_unix.texi(,109) like this; the executable looks for "sibling" directories at run-time
../singular_texi/INSTALL_unix.texi(,110) to figure out where its @sc{Singular} libraries and on-line
../singular_texi/INSTALL_unix.texi(,111) documentation files are. These constraints on the local directory layout
../singular_texi/INSTALL_unix.texi(,112) are necessary to avoid having to hard-code pathnames into the
../singular_texi/INSTALL_unix.texi(,113) executables, or require that environment variables be set before
../singular_texi/INSTALL_unix.texi(,114) running the executable. In particular, you @strong{must not move or copy}
../singular_texi/INSTALL_unix.texi(,115) the @sc{Singular} executables to another place, but use soft-links
../singular_texi/INSTALL_unix.texi(,116) instead.
../singular_texi/INSTALL_unix.texi(,117) @end enumerate
../singular_texi/INSTALL_unix.texi(,118) 
../singular_texi/INSTALL_unix.texi(,119) The following steps are optional:
../singular_texi/INSTALL_unix.texi(,120) 
../singular_texi/INSTALL_unix.texi(,121) @itemize @bullet
../singular_texi/INSTALL_unix.texi(,122) @item
../singular_texi/INSTALL_unix.texi(,123) Arrange that typing @code{Singular} at the shell prompt starts up the
../singular_texi/INSTALL_unix.texi(,124) installed @sc{Singular} executable.
../singular_texi/INSTALL_unix.texi(,125) 
../singular_texi/INSTALL_unix.texi(,126) If you have root permission, do:
../singular_texi/INSTALL_unix.texi(,127) @smallexample
../singular_texi/INSTALL_unix.texi(,128) ln -s `pwd`/Singular/2-0-4/<uname>/Singular  /usr/local/bin/Singular-2-0-4
../singular_texi/INSTALL_unix.texi(,129) ln -s `pwd`/Singular/2-0-4/<uname>/ESingular  /usr/local/bin/ESingular-2-0-4
../singular_texi/INSTALL_unix.texi(,130) ln -s /usr/local/bin/Singular-2-0-4 /usr/local/bin/Singular
../singular_texi/INSTALL_unix.texi(,131) ln -s /usr/local/bin/ESingular-2-0-4 /usr/local/bin/ESingular
../singular_texi/INSTALL_unix.texi(,132) @end smallexample
../singular_texi/INSTALL_unix.texi(,133) 	
../singular_texi/INSTALL_unix.texi(,134) Otherwise, append the directory
../singular_texi/INSTALL_unix.texi(,135) @code{`pwd`/Singular/2-0-4/<uname>/} to your @code{$PATH}
../singular_texi/INSTALL_unix.texi(,136) environment variable. For the @code{csh} (or, @code{tcsh}) shell do:
../singular_texi/INSTALL_unix.texi(,137) @smallexample
../singular_texi/INSTALL_unix.texi(,138) set path=(`pwd`/Singular/2-0-4/<uname> $path)
../singular_texi/INSTALL_unix.texi(,139) @end smallexample
../singular_texi/INSTALL_unix.texi(,140) For the @code{bash} (or, @code{ksh}) shell do:
../singular_texi/INSTALL_unix.texi(,141) @smallexample
../singular_texi/INSTALL_unix.texi(,142) export PATH=`pwd`/Singular/2-0-4/<uname>/:$PATH
../singular_texi/INSTALL_unix.texi(,143) @end smallexample
../singular_texi/INSTALL_unix.texi(,144) 
../singular_texi/INSTALL_unix.texi(,145) You also might want to adjust your personal start-up files
../singular_texi/INSTALL_unix.texi(,146) (@code{~/.cshrc} for @code{csh}, @code{~/.tcshrc} for @code{tcsh}, or
../singular_texi/INSTALL_unix.texi(,147) @code{~/.profile} for @code{bash}) accordingly,
../singular_texi/INSTALL_unix.texi(,148) so that the @code{$PATH} variable is set automatically each time you login.
../singular_texi/INSTALL_unix.texi(,149) 
../singular_texi/INSTALL_unix.texi(,150) @strong{IMPORTANT:} Do @emph{never} move or copy the file
../singular_texi/INSTALL_unix.texi(,151) @code{Singular/2-0-4/<uname>/Singular} to another
../singular_texi/INSTALL_unix.texi(,152) place, but use soft-links instead.
../singular_texi/INSTALL_unix.texi(,153) 
../singular_texi/INSTALL_unix.texi(,154) @item
../singular_texi/INSTALL_unix.texi(,155) If you wish to use any of following features of
../singular_texi/INSTALL_unix.texi(,156) @sc{Singular}, make sure that the respective programs are installed on your system:
../singular_texi/INSTALL_unix.texi(,157) 
../singular_texi/INSTALL_unix.texi(,158) @multitable @columnfractions .5 .5
../singular_texi/INSTALL_unix.texi(,159) @item @strong{Feature} @tab @strong{Requires}
../singular_texi/INSTALL_unix.texi(,160) @item running @code{ESingular}, or @code{Singular} within Emacs
../singular_texi/INSTALL_unix.texi(,161) @tab @uref{http://www.fsf.org/software/emacs/emacs.html,,Emacs} version
../singular_texi/INSTALL_unix.texi(,162) 20 or higher, or, @uref{http://www.xemacs.org,,XEmacs} version 20.3 or
../singular_texi/INSTALL_unix.texi(,163) higher (ESingular is only included in the Linux distribution,
../singular_texi/INSTALL_unix.texi(,164) on other Unix platforms you can download the
../singular_texi/INSTALL_unix.texi(,165) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/src/,,
../singular_texi/INSTALL_unix.texi(,166) Singular emacs lisp files} but we give no warranties for specific platforms).
../singular_texi/INSTALL_unix.texi(,167) @item on-line @code{html} help
../singular_texi/INSTALL_unix.texi(,168) @tab @uref{http://www.netscape.com,,netscape} browser
../singular_texi/INSTALL_unix.texi(,169) @item on-line @code{info} help
../singular_texi/INSTALL_unix.texi(,170) @tab @uref{http://www.texinfo.org,,info}, or
../singular_texi/INSTALL_unix.texi(,171) @uref{http://math-www.uni-paderborn.de/~axel/tkinfo/,,tkinfo} texinfo browser programs
../singular_texi/INSTALL_unix.texi(,172) @item TAB completion and history mechanism of ASCII-terminal interface
../singular_texi/INSTALL_unix.texi(,173) @tab shared @uref{ftp://ftp.de.uu.net/pub/gnu/readline/,,readline}
../singular_texi/INSTALL_unix.texi(,174) library, i.e. @code{/usr/lib/libreadline.so}
../singular_texi/INSTALL_unix.texi(,175) @item visualization of curves and surfaces
../singular_texi/INSTALL_unix.texi(,176) @tab
../singular_texi/INSTALL_unix.texi(,177) @uref{http://www.mathematik.uni-mainz.de/AlgebraischeGeometrie/surf/surf.shtml,,surf}
../singular_texi/INSTALL_unix.texi(,178) version 0.9 or higher (only available for Linux and Solaris).
../singular_texi/INSTALL_unix.texi(,179) @end multitable
../singular_texi/INSTALL_unix.texi(,180) 
../singular_texi/INSTALL_unix.texi(,181) You may download most of these programs from
../singular_texi/INSTALL_unix.texi(,182) @display
../singular_texi/INSTALL_unix.texi(,183) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/utils/}.
../singular_texi/INSTALL_unix.texi(,184) @end display
../singular_texi/INSTALL_unix.texi(,185) 
../singular_texi/INSTALL_unix.texi(,186) @item Customize the on-line help system:
../singular_texi/INSTALL_unix.texi(,187) 
../singular_texi/INSTALL_unix.texi(,188) By default, on-line help is displayed in the @code{html} format using
../singular_texi/INSTALL_unix.texi(,189) the @code{netscape} program.
../singular_texi/INSTALL_unix.texi(,190) 
../singular_texi/INSTALL_unix.texi(,191) However, this behavior can be customized in several ways
../singular_texi/INSTALL_unix.texi(,192) using the @sc{Singular} commands @code{system("--browser",<browser>)}
../singular_texi/INSTALL_unix.texi(,193) and @code{system("--allow-net", 1)} (or, by starting up @sc{Singular}
../singular_texi/INSTALL_unix.texi(,194) with the respective command line options).
../singular_texi/INSTALL_unix.texi(,195) 
../singular_texi/INSTALL_unix.texi(,196) In particular, creating the file
../singular_texi/INSTALL_unix.texi(,197) @code{Singular/2-0-4/LIB/.singularrc} and putting the
../singular_texi/INSTALL_unix.texi(,198) @sc{Singular} command
../singular_texi/INSTALL_unix.texi(,199) @smallexample
../singular_texi/INSTALL_unix.texi(,200) system("--allow-net", 1);
../singular_texi/INSTALL_unix.texi(,201) @end smallexample
../singular_texi/INSTALL_unix.texi(,202) in it, allows the on-line help system to fetch its @code{html} pages
../singular_texi/INSTALL_unix.texi(,203) from @uref{http://www.singular.uni-kl.de, Singular's WWW
../singular_texi/INSTALL_unix.texi(,204) home site}
../singular_texi/INSTALL_unix.texi(,205) in case its local html pages are not found. That is, you may delete your
../singular_texi/INSTALL_unix.texi(,206) local html pages, after setting this option.
../singular_texi/INSTALL_unix.texi(,207) 
../singular_texi/INSTALL_unix.texi(,208) See also
../singular_texi/INSTALL_unix.texi(,210) @ref{The online help system}, @ref{Command line options}, and
../singular_texi/INSTALL_unix.texi(,211) @ref{Startup sequence},
../singular_texi/INSTALL_unix.texi(,217) for more details on customizing the on-line help system.
../singular_texi/INSTALL_unix.texi(,218) 
../singular_texi/INSTALL_unix.texi(,219) @item
../singular_texi/INSTALL_unix.texi(,220) Add the line
../singular_texi/INSTALL_unix.texi(,221) @smallexample
../singular_texi/INSTALL_unix.texi(,222) * Singular:(singular.hlp).     A system for polynomial computations
../singular_texi/INSTALL_unix.texi(,223) @end smallexample
../singular_texi/INSTALL_unix.texi(,224) to your system-wide @code{dir} file (usually @code{/usr/info/dir} or
../singular_texi/INSTALL_unix.texi(,225) @code{/usr/local/info/dir} and  copy or soft-link the file
../singular_texi/INSTALL_unix.texi(,226) @code{Singular/2-0-4/info/singular.hlp}
../singular_texi/INSTALL_unix.texi(,227) to the directory of your @code{dir} file.
../singular_texi/INSTALL_unix.texi(,228) @*This assures that the
../singular_texi/INSTALL_unix.texi(,229) @sc{Singular} manual can be  accessed from stand-alone texinfo
../singular_texi/INSTALL_unix.texi(,230) browser programs such as @code{info} or @code{Emacs}.
../singular_texi/INSTALL_unix.texi(,231) (It is not necessary for the use of the help system from within @code{Singular}.)
../singular_texi/INSTALL_unix.texi(,232) @end itemize
../singular_texi/INSTALL_unix.texi(,233) 
../singular_texi/INSTALL_unix.texi(,234) @heading Troubleshooting
../singular_texi/INSTALL_unix.texi(,235) 
../singular_texi/INSTALL_unix.texi(,236) @itemize @bullet
../singular_texi/INSTALL_unix.texi(,237) @item General: @sc{Singular} can not find its libraries or on-line help
../singular_texi/INSTALL_unix.texi(,238) @enumerate
../singular_texi/INSTALL_unix.texi(,239) @item
../singular_texi/INSTALL_unix.texi(,240) Make sure that you have read and/or execute permission the files and
../singular_texi/INSTALL_unix.texi(,241) directories of the Singular distribution. If in doubt, @code{cd} to the
../singular_texi/INSTALL_unix.texi(,242) directory where you unpacked @sc{Singular}, and do (as root, if
../singular_texi/INSTALL_unix.texi(,243) necessary):
../singular_texi/INSTALL_unix.texi(,244) @smallexample
../singular_texi/INSTALL_unix.texi(,245) chmod -R a+rX Singular
../singular_texi/INSTALL_unix.texi(,246) @end smallexample
../singular_texi/INSTALL_unix.texi(,247) 
../singular_texi/INSTALL_unix.texi(,248) @item
../singular_texi/INSTALL_unix.texi(,249) Start up @sc{Singular}, and issue the command @code{system("Singular");}.
../singular_texi/INSTALL_unix.texi(,250) If this does not return the correct and expanded location of the
../singular_texi/INSTALL_unix.texi(,251) @sc{Singular} executable, then you found a bug in @sc{Singular}, which we
../singular_texi/INSTALL_unix.texi(,252) ask you to report (see below).
../singular_texi/INSTALL_unix.texi(,253) @item
../singular_texi/INSTALL_unix.texi(,254) Check whether the directories containing the libraries and on-line help
../singular_texi/INSTALL_unix.texi(,255) files can be found by @sc{Singular}: If @code{$bindir} denotes the
../singular_texi/INSTALL_unix.texi(,256) directory where the @sc{Singular} executable resides, then @sc{Singular}
../singular_texi/INSTALL_unix.texi(,257) looks for library files as follows:
../singular_texi/INSTALL_unix.texi(,258) @* (0) the current directory
../singular_texi/INSTALL_unix.texi(,259) @* (1) all dirs of the environment variable SINGULARPATH
../singular_texi/INSTALL_unix.texi(,260) @* (2) @code{$bindir/LIB}
../singular_texi/INSTALL_unix.texi(,261) @* (3) @code{$bindir/../LIB}
../singular_texi/INSTALL_unix.texi(,262) @* (4) @code{/usr/local/Singular/2-0-4/LIB}
../singular_texi/INSTALL_unix.texi(,263) @* (4) @code{/usr/local/Singular/LIB}
../singular_texi/INSTALL_unix.texi(,264) @* The on-line @code{info} files need to be at  @code{$bindir/../info} and the
../singular_texi/INSTALL_unix.texi(,265) @code{html} pages at @code{$bindir/../html}.
../singular_texi/INSTALL_unix.texi(,266) @end enumerate
../singular_texi/INSTALL_unix.texi(,267) 
../singular_texi/INSTALL_unix.texi(,268) You can inspect the found library and @code{info}/@code{html}
../singular_texi/INSTALL_unix.texi(,269) directories by starting up @sc{Singular} with the
../singular_texi/INSTALL_unix.texi(,270) @code{--version} option, or by issuing the @sc{Singular} command
../singular_texi/INSTALL_unix.texi(,271) @code{system("--version");}.
../singular_texi/INSTALL_unix.texi(,272) 
../singular_texi/INSTALL_unix.texi(,273) @item Under SuSE-Linux, @sc{ESingular} does not display a prompt:
../singular_texi/INSTALL_unix.texi(,274) @cindex SuSE, ESingular bug
../singular_texi/INSTALL_unix.texi(,275) @cindex ESingular, no prompt
../singular_texi/INSTALL_unix.texi(,276) @cindex bug, ESingular
../singular_texi/INSTALL_unix.texi(,277) This is due to the very restrictive access rights of @code{/dev/pty*} of
../singular_texi/INSTALL_unix.texi(,278) the standard @uref{http:/www.suse.de,SuSE} distribution (starting from
../singular_texi/INSTALL_unix.texi(,279) version 6.3 on). As root, do one of the following: Either
../singular_texi/INSTALL_unix.texi(,280) @example
../singular_texi/INSTALL_unix.texi(,281) chmod 666 /dev/pty*
../singular_texi/INSTALL_unix.texi(,282) @end example
../singular_texi/INSTALL_unix.texi(,283) or,
../singular_texi/INSTALL_unix.texi(,284) @example
../singular_texi/INSTALL_unix.texi(,285) chmod g+s $(which emacs)
../singular_texi/INSTALL_unix.texi(,286) chgrp tty $(which emacs)
../singular_texi/INSTALL_unix.texi(,287) chmod g+s $(which xemacs)
../singular_texi/INSTALL_unix.texi(,288) chgrp tty $(which xemacs)
../singular_texi/INSTALL_unix.texi(,289) @end example
../singular_texi/INSTALL_unix.texi(,290) See also @uref{http://sdb.suse.de/sdb/de/html/ke_devpts-63.html} for
../singular_texi/INSTALL_unix.texi(,291) details.
../singular_texi/INSTALL_unix.texi(,292) 
../singular_texi/INSTALL_unix.texi(,293) @item For @code{HPUX} systems:
../singular_texi/INSTALL_unix.texi(,294) @*The /etc/termcap files which are pre-installed on these systems are
../singular_texi/INSTALL_unix.texi(,295) broken which leads to messages like
../singular_texi/INSTALL_unix.texi(,296) @example
../singular_texi/INSTALL_unix.texi(,297) Name collision between 9826 9836
../singular_texi/INSTALL_unix.texi(,298) @end example
../singular_texi/INSTALL_unix.texi(,299) when @sc{Singular} is started. To fix this, you can get fixed termcap
../singular_texi/INSTALL_unix.texi(,300) files from @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/utils}
../singular_texi/INSTALL_unix.texi(,301) by downloading the files termcap-<uname-description> and either
../singular_texi/INSTALL_unix.texi(,302) replace your /etc/termcap file by the file found there, or view, and
../singular_texi/INSTALL_unix.texi(,303) redo the respective changes by @code{diff}'ing the downloaded and the
../singular_texi/INSTALL_unix.texi(,304) original file.
../singular_texi/INSTALL_unix.texi(,305) 
../singular_texi/INSTALL_unix.texi(,306) @item For @code{ix86-Linux} systems:
../singular_texi/INSTALL_unix.texi(,307) @*Due to some incompatibilities of shared libraries, the start-up of
../singular_texi/INSTALL_unix.texi(,308) @sc{Singular} might fail with messages like
../singular_texi/INSTALL_unix.texi(,309) @example
../singular_texi/INSTALL_unix.texi(,310)   Can not find shared library ...
../singular_texi/INSTALL_unix.texi(,311) @end example
../singular_texi/INSTALL_unix.texi(,312) For DEBIAN systems, try to do
../singular_texi/INSTALL_unix.texi(,313) @code{ln -s /usr/lib/libncurses.so /usr/lib/libncurses.so.4}.
../singular_texi/INSTALL_unix.texi(,314) @*If this fails (and on other systems)
../singular_texi/INSTALL_unix.texi(,315) download and install
../singular_texi/INSTALL_unix.texi(,316) @code{Singular-2-0-4-ix86-Linux-static.tar.gz}.
../singular_texi/INSTALL_unix.texi(,317) 
../singular_texi/INSTALL_unix.texi(,318) @item For @code{AIX} systems:
../singular_texi/INSTALL_unix.texi(,319) @*The default @code{info} program of the system is not GNU's texinfo
../singular_texi/INSTALL_unix.texi(,320) browser which is used to display the on-line documentation in the
../singular_texi/INSTALL_unix.texi(,321) @code{info} format. Therefore, the distribution of the AIX executable
../singular_texi/INSTALL_unix.texi(,322) already contains the @code{info} browser program.
../singular_texi/INSTALL_unix.texi(,323) If you remove this program, make sure that the GNU
../singular_texi/INSTALL_unix.texi(,324) @code{info} program is executed if you call '@code{info}' from your shell.
../singular_texi/INSTALL_unix.texi(,325) 
../singular_texi/INSTALL_unix.texi(,326) @item For any other troubles:
../singular_texi/INSTALL_unix.texi(,327) @*Please send an email to @email{singular@@mathematik.uni-kl.de}
../singular_texi/INSTALL_unix.texi(,328) and include the header which is displayed by starting up @sc{Singular}
../singular_texi/INSTALL_unix.texi(,329) with the @code{-v} option, and a description of your machine (issue the
../singular_texi/INSTALL_unix.texi(,330) command @code{uname -a} on your shell) in your report.
../singular_texi/INSTALL_unix.texi(,331) @end itemize
../singular_texi/INSTALL_unix.texi(,332) 
../singular_texi/INSTALL_unix.texi(,334) 
../singular_texi/INSTALL_unix.texi(,339) 
../singular_texi/platform.tex(,69) 
../singular_texi/platform.tex(,70) @c ----------------------------------------------------------
../singular_texi/platform.tex(,71) @node Windows installation instructions, Macintosh installation instructions, Unix installation instructions, Release Notes
../singular_texi/platform.tex(,72) @section Windows installation instructions
../singular_texi/platform.tex(,73) @cindex Windows installation
../singular_texi/platform.tex(,74) @cindex instructions, Windows installation
../singular_texi/platform.tex(,75) @cindex howto, install on Windows
../singular_texi/platform.tex(,76) 
../singular_texi/INSTALL_win.texi(,1) @comment -*-texinfo-*-
../singular_texi/INSTALL_win.texi(,2) @comment Id: INSTALL_win.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/INSTALL_win.texi(,3) @c FILE:    INSTALL.texi
../singular_texi/INSTALL_win.texi(,4) @c PURPOSE: Installation instructions for Singular on MSWindows
../singular_texi/INSTALL_win.texi(,5) @c          This file is displayed during installation and copied to
../singular_texi/INSTALL_win.texi(,6) @c          /etc/INSTALL
../singular_texi/INSTALL_win.texi(,7) 
../singular_texi/INSTALL_win.texi(,8) @c use set CD for producing a special INSTALL_win which will be opened
../singular_texi/INSTALL_win.texi(,9) @c by the autorun on the Singular CD
../singular_texi/INSTALL_win.texi(,10) 
../singular_texi/INSTALL_win.texi(,14) 
../singular_texi/INSTALL_win.texi(,18) 
../singular_texi/INSTALL_win.texi(,22) 
../singular_texi/INSTALL_win.texi(,23) @heading For the impatient:
../singular_texi/INSTALL_win.texi(,24) @itemize
../singular_texi/INSTALL_win.texi(,25) @item
../singular_texi/INSTALL_win.texi(,26) If you run Windows NT/2K/XP, make sure you are logged in with the
../singular_texi/INSTALL_win.texi(,27) @code{Administrator} rights.
../singular_texi/INSTALL_win.texi(,28) @item
../singular_texi/INSTALL_win.texi(,29) If you have some older version of @code{Singular} installed, please uninstall it
../singular_texi/INSTALL_win.texi(,30) before installing @code{Singular-2-0-4}. It is recommended to
../singular_texi/INSTALL_win.texi(,31) install the new @code{Singular} in the same directory where the previous
../singular_texi/INSTALL_win.texi(,32) version was installed. Thus your existing environment will be used automatically.
../singular_texi/INSTALL_win.texi(,33) @item 
../singular_texi/INSTALL_win.texi(,34) If you have @code{Cygwin} or @code{XEmacs} installed and they do not belong
../singular_texi/INSTALL_win.texi(,35) of some previous @code{Singular} installation,
../singular_texi/INSTALL_win.texi(,36) please read the information below.
../singular_texi/INSTALL_win.texi(,37) @item
../singular_texi/INSTALL_win.texi(,38) Execute the self-extracting installation archive and
../singular_texi/INSTALL_win.texi(,39) @strong{carefully} follow the instructions given there. 
../singular_texi/INSTALL_win.texi(,40) Setup will analyze your system, create the corresponding configuration
../singular_texi/INSTALL_win.texi(,41) and give you further tips on the installation process.
../singular_texi/INSTALL_win.texi(,42) @item
../singular_texi/INSTALL_win.texi(,43) In case of troubles, see the installed files @code{/etc/INSTALL.txt},
../singular_texi/INSTALL_win.texi(,44) @code{/etc/TROUBLESHOOTING.txt} or visit
../singular_texi/INSTALL_win.texi(,45) the @strong{Singular Forum} at @uref{http://www.singular.uni-kl.de/forum}.
../singular_texi/INSTALL_win.texi(,46) @end itemize
../singular_texi/INSTALL_win.texi(,47) 
../singular_texi/INSTALL_win.texi(,53) 
../singular_texi/INSTALL_win.texi(,54) @heading Installation preliminaries
../singular_texi/INSTALL_win.texi(,55) 
../singular_texi/INSTALL_win.texi(,56) Running @code{Singular} on MS Windows requires that the Cygwin DLL
../singular_texi/INSTALL_win.texi(,57) (dynamically linked library) version 1.3.9 or higher is installed on your
../singular_texi/INSTALL_win.texi(,58) system (see @uref{http://sources.redhat.com/cygwin/} for details about
../singular_texi/INSTALL_win.texi(,59) Cygwin). We install and configure @code{Cygwin} version 1.3.9 automatically, if
../singular_texi/INSTALL_win.texi(,60) the @code{BasicCygwin} component is selected (default setting).
../singular_texi/INSTALL_win.texi(,61) 
../singular_texi/INSTALL_win.texi(,62) To run @code{ESingular} (i.e. @code{Singular} within its Emacs interface) on
../singular_texi/INSTALL_win.texi(,63) MS Windows requires furthermore that the @code{XEmacs} editor is installed on
../singular_texi/INSTALL_win.texi(,64) your system. We install and configure @code{XEmacs} version 21.1.13 automatically, if the @code{XEmacs} component is selected.
../singular_texi/INSTALL_win.texi(,65) 
../singular_texi/INSTALL_win.texi(,66) @cindex Windows installation, components
../singular_texi/INSTALL_win.texi(,67) @cindex Components of Windows installation
../singular_texi/INSTALL_win.texi(,68) 
../singular_texi/INSTALL_win.texi(,69) The @code{Singular} installation is divided into the following
../singular_texi/INSTALL_win.texi(,70) components (you see them explicitly if you choose the Custom Setup Type
../singular_texi/INSTALL_win.texi(,71) during the installation):
../singular_texi/INSTALL_win.texi(,72) @table @code
../singular_texi/INSTALL_win.texi(,73) @item @strong{Program Files:}
../singular_texi/INSTALL_win.texi(,74)         @table @code
../singular_texi/INSTALL_win.texi(,75) @item Singular
../singular_texi/INSTALL_win.texi(,76) Contains the @code{Singular} Program, documentation and example files.
../singular_texi/INSTALL_win.texi(,77) @*All files of this component are installed under the directory
../singular_texi/INSTALL_win.texi(,78) @code{/usr/local/Singular/2-0-4}
../singular_texi/INSTALL_win.texi(,79) @item BasicCygwin
../singular_texi/INSTALL_win.texi(,80) Contains the Cygwin DLL and basic tools/programs (like @code{bash} or
../singular_texi/INSTALL_win.texi(,81) @code{info}) of the  Cygwin environment.
../singular_texi/INSTALL_win.texi(,82) @*The Cygwin DLL and programs are installed in the directory
../singular_texi/INSTALL_win.texi(,83) @code{/bin}. Miscellaneous documentation and configuration files are
../singular_texi/INSTALL_win.texi(,84) installed into the directory @code{/etc}.
../singular_texi/INSTALL_win.texi(,85) @item XEmacs
../singular_texi/INSTALL_win.texi(,86) Contains the Cygwin port of the @code{XEmacs} editor (see
../singular_texi/INSTALL_win.texi(,87) @url{http://www.xemacs.org} for more about @code{XEmacs}) version 21.1.13.
../singular_texi/INSTALL_win.texi(,88) @*All files of this component are installed under the directory
../singular_texi/INSTALL_win.texi(,89) @code{/usr/local}.
../singular_texi/INSTALL_win.texi(,90) @item ESingular
../singular_texi/INSTALL_win.texi(,91) Contains the @code{ESingular}, the most comfortable Singular interface.
../singular_texi/INSTALL_win.texi(,92) Requires @code{XEmacs} to run.
../singular_texi/INSTALL_win.texi(,93)         @end table
../singular_texi/INSTALL_win.texi(,94) @item @strong{Remark:}
../singular_texi/INSTALL_win.texi(,95) All essential DLLs, some programs and symbolic links are installed in the directory
../singular_texi/INSTALL_win.texi(,96) @code{/usr/local/Singular/2-0-4/ix86-Win}, which must be present in your @code{PATH} system variable.
../singular_texi/INSTALL_win.texi(,97) @item @strong{Help Files:}
../singular_texi/INSTALL_win.texi(,98) @table @code
../singular_texi/INSTALL_win.texi(,99) @item WinHelp
../singular_texi/INSTALL_win.texi(,100) Contains Singular Manual, converted to Windows help format (.hlp).
../singular_texi/INSTALL_win.texi(,101) We recommend to install it, because it is small in size. Moreover,
../singular_texi/INSTALL_win.texi(,102) we set it as default help browser in all the Singular executables.
../singular_texi/INSTALL_win.texi(,103) @item HTML Help
../singular_texi/INSTALL_win.texi(,104) Contains the "native" Singular Manual. It's not included by default,
../singular_texi/INSTALL_win.texi(,105) because it is much bigger than WinHelp, though it has better typesetting
../singular_texi/INSTALL_win.texi(,106) of mathematical formulae.
../singular_texi/INSTALL_win.texi(,107) @end table
../singular_texi/INSTALL_win.texi(,108) @end table
../singular_texi/INSTALL_win.texi(,109) 
../singular_texi/INSTALL_win.texi(,110) The Typical Setup Type of the Singular-2-0-4-Typical.exe contains
../singular_texi/INSTALL_win.texi(,111) @code{BasicCygwin}, @code{Singular}, 
../singular_texi/INSTALL_win.texi(,112) @code{XEmacs}, @code{ESingular}, @code{WinHelp} and @code{HTML Help} 
../singular_texi/INSTALL_win.texi(,113) components. The Compact Setup Type does not contain only the @code{HTML Help} component.
../singular_texi/INSTALL_win.texi(,114) 
../singular_texi/INSTALL_win.texi(,116) @heading Downloading preliminaries
../singular_texi/INSTALL_win.texi(,117) 
../singular_texi/INSTALL_win.texi(,118) To install @code{Singular} on a PC running Windows 95/98/ME/NT/2K/XP, you need
../singular_texi/INSTALL_win.texi(,119) to download @strong{one} of the following archive files:
../singular_texi/INSTALL_win.texi(,120) 
../singular_texi/INSTALL_win.texi(,121) Minimal archive: @uref{Singular-2-0-4-Compact.exe, Singular-2-0-4-Compact.exe}      (@code{BasicCygwin}, @code{Singular}, @code{WinHelp} components)
../singular_texi/INSTALL_win.texi(,122) 
../singular_texi/INSTALL_win.texi(,123) Typical archive : @uref{Singular-2-0-4-Typical.exe, Singular-2-0-4-Typical.exe}      (@code{BasicCygwin}, @code{Singular}, @code{XEmacs}, @code{ESingular}, @code{WinHelp}, @code{HTML Help} components)
../singular_texi/INSTALL_win.texi(,124) 
../singular_texi/INSTALL_win.texi(,125) You can obtain these (and other) archives 
../singular_texi/INSTALL_win.texi(,126) either from the @code{WINDOWS} directory on the @code{Singular} CD or from
../singular_texi/INSTALL_win.texi(,127) @display
../singular_texi/INSTALL_win.texi(,128) @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular/}.
../singular_texi/INSTALL_win.texi(,129) @end display
../singular_texi/INSTALL_win.texi(,130) 
../singular_texi/INSTALL_win.texi(,132) 
../singular_texi/INSTALL_win.texi(,149) 
../singular_texi/INSTALL_win.texi(,150) @heading Installing Singular
../singular_texi/INSTALL_win.texi(,151) 
../singular_texi/INSTALL_win.texi(,152) The recent Setup program analyzes your system, e.g. it detects
../singular_texi/INSTALL_win.texi(,153) whether Cygwin and XEmacs are present and functional. Then it gives you
../singular_texi/INSTALL_win.texi(,154) hints and/or error messages with instructions during the installation.
../singular_texi/INSTALL_win.texi(,155) 
../singular_texi/INSTALL_win.texi(,156) @table @code
../singular_texi/INSTALL_win.texi(,157) @item If you have Cygwin installed
../singular_texi/INSTALL_win.texi(,158)         If the version of @code{cygwin1.dll} is not less than 1.3.9,
../singular_texi/INSTALL_win.texi(,159)         you will be prompted that the @code{BasicCygwin} component will not
../singular_texi/INSTALL_win.texi(,160)         be installed. Moreover, the existing Cygwin root directory will be proposed as
../singular_texi/INSTALL_win.texi(,161)         the default installation directory. You can accept it, then
../singular_texi/INSTALL_win.texi(,162)         @code{Singular} will be placed into the existing Cygwin environment.
../singular_texi/INSTALL_win.texi(,163)         If you choose another destination, @code{Singular} will use Cygwin
../singular_texi/INSTALL_win.texi(,164)         programs anyway. If your Cygwin has incorrect settings (like
../singular_texi/INSTALL_win.texi(,165)         inconsistent mount points among the important ones), @code{Singular}
../singular_texi/INSTALL_win.texi(,166)         Setup will correct them. 
../singular_texi/INSTALL_win.texi(,167) @*      If setup could not detect @code{cygwin}, present in the system, you
../singular_texi/INSTALL_win.texi(,168)         can try to break the installation, start it once more, choose the
../singular_texi/INSTALL_win.texi(,169)         "Custom" setup type and unselect the @code{BasicCygwin} component.
../singular_texi/INSTALL_win.texi(,170) 
../singular_texi/INSTALL_win.texi(,171) @item If you have XEmacs installed
../singular_texi/INSTALL_win.texi(,172)         The @code{Cygwin} port of @code{XEmacs} version 21.1.13 together 
../singular_texi/INSTALL_win.texi(,173)         with the most
../singular_texi/INSTALL_win.texi(,174)         important packages is included in the distribution. The use of 
../singular_texi/INSTALL_win.texi(,175)         non-@code{Cygwin} ports or earlier @code{Cygwin} ports has some 
../singular_texi/INSTALL_win.texi(,176)         quirks and does not work 
../singular_texi/INSTALL_win.texi(,177)         properly together with @code{Singular} (i.e., running @code{ESingular} 
../singular_texi/INSTALL_win.texi(,178)         results in problems). Nevertheless, if you want to test the
../singular_texi/INSTALL_win.texi(,179)         compatibility of @code{ESingular} with your own @code{XEmacs}, just
../singular_texi/INSTALL_win.texi(,180)         de-select the XEmacs component, but leave @code{ESingular} selected.
../singular_texi/INSTALL_win.texi(,181)         If your @code{XEmacs} happens to be incompatible with ESingular, you can
../singular_texi/INSTALL_win.texi(,182)         install just the XEmacs component and use in fact two different
../singular_texi/INSTALL_win.texi(,183)         @code{XEmacs} programs. 
../singular_texi/INSTALL_win.texi(,184)         The setup program will search for @code{XEmacs} and packages 
../singular_texi/INSTALL_win.texi(,185)         in @code{<TARGETDIR>/usr/local/lib} (here @code{<TARGETDIR>} is the directory which you selected while running setup). If you have @code{Cygwin} and the Cygwin port of
../singular_texi/INSTALL_win.texi(,186)         @code{XEmacs}, you might have @code{XEmacs} installed there. To avoid overwriting your @code{XEmacs} files, setup will ask you what to do.
../singular_texi/INSTALL_win.texi(,187) @end table
../singular_texi/INSTALL_win.texi(,188) 
../singular_texi/INSTALL_win.texi(,194) 
../singular_texi/INSTALL_win.texi(,195) @heading Customizing Singular
../singular_texi/INSTALL_win.texi(,196) 
../singular_texi/INSTALL_win.texi(,197) The following step(s) are optional:
../singular_texi/INSTALL_win.texi(,198) @itemize
../singular_texi/INSTALL_win.texi(,199) @item
../singular_texi/INSTALL_win.texi(,200) To conveniently access all files on your computer, mount the drives of
../singular_texi/INSTALL_win.texi(,201) your disk(s):
../singular_texi/INSTALL_win.texi(,202) @enumerate
../singular_texi/INSTALL_win.texi(,203) @item
../singular_texi/INSTALL_win.texi(,204) Open a rxvt terminal (from Start->Programs->Singular 2.0->Tools).
../singular_texi/INSTALL_win.texi(,205) @item
../singular_texi/INSTALL_win.texi(,206) For each drive (letter) issue the following command (the drive @code{C:}
../singular_texi/INSTALL_win.texi(,207) is used in the example):
../singular_texi/INSTALL_win.texi(,208) @example
../singular_texi/INSTALL_win.texi(,209) mount -f -s -t C: /C
../singular_texi/INSTALL_win.texi(,210) @end example
../singular_texi/INSTALL_win.texi(,211) @end enumerate
../singular_texi/INSTALL_win.texi(,212) After mounting the drive(s) this way, you can conveniently access the
../singular_texi/INSTALL_win.texi(,213) files on a drive from the @code{bash} shell and from @code{XEmacs} using the @code{/C/} prefix. Otherwise, you need to type @code{/cygdrive/C} - that is
../singular_texi/INSTALL_win.texi(,214) the Cygwin convention. You can get more information on @code{mount} command by invoking @code{mount --help}. Command @code{umount} unmount the selected
../singular_texi/INSTALL_win.texi(,215) mount point.
../singular_texi/INSTALL_win.texi(,216) 
../singular_texi/INSTALL_win.texi(,217) 
../singular_texi/INSTALL_win.texi(,218) @item
../singular_texi/INSTALL_win.texi(,219) Create your personal @code{HOME} directory.
../singular_texi/INSTALL_win.texi(,220) @*Various applications (e.g., @code{bash} or @code{XEmacs}) store
../singular_texi/INSTALL_win.texi(,221) user-specific configuration/customization files in the @code{HOME}
../singular_texi/INSTALL_win.texi(,222) directory of the current user. During the installation, the @code{HOME}
../singular_texi/INSTALL_win.texi(,223) directory is globally set for all users to @code{/home/Singular}. To
../singular_texi/INSTALL_win.texi(,224) create your individual  @code{HOME} directory follow these steps:
../singular_texi/INSTALL_win.texi(,225) @enumerate
../singular_texi/INSTALL_win.texi(,226) @item
../singular_texi/INSTALL_win.texi(,227) Create a directory (folder), say, @code{C:\home\MyHome}.
../singular_texi/INSTALL_win.texi(,228) @item
../singular_texi/INSTALL_win.texi(,229) Copy all files from @code{/home/Singular} to @code{C:\home\MyHome}.
../singular_texi/INSTALL_win.texi(,230) @item
../singular_texi/INSTALL_win.texi(,231) Set the @emph{user} environment variable @code{HOME} to @code{C:\home\MyHome}:
../singular_texi/INSTALL_win.texi(,232) @*On Windows 95/98/ME, edit the respective line the @code{AUTOEXEC.BAT}
../singular_texi/INSTALL_win.texi(,233) file.
../singular_texi/INSTALL_win.texi(,234) @*On Windows NT/2K/XP add an entry in your @code{Environment} control
../singular_texi/INSTALL_win.texi(,235) panel.
../singular_texi/INSTALL_win.texi(,236) @item
../singular_texi/INSTALL_win.texi(,237) Restart your computer (On Windows 95/98/ME).
../singular_texi/INSTALL_win.texi(,238) @end enumerate
../singular_texi/INSTALL_win.texi(,239) You may furthermore examine the files copied into your @code{HOME}
../singular_texi/INSTALL_win.texi(,240) directory and adjust (i.e. edit) them to your personal
../singular_texi/INSTALL_win.texi(,241) preferences/needs. System-wide settings are stored in the file 
../singular_texi/INSTALL_win.texi(,242) @code{/etc/profile}.
../singular_texi/INSTALL_win.texi(,243) 
../singular_texi/INSTALL_win.texi(,244) @end itemize
../singular_texi/INSTALL_win.texi(,245) 
../singular_texi/INSTALL_win.texi(,246) @heading Uninstalling Singular
../singular_texi/INSTALL_win.texi(,247) 
../singular_texi/INSTALL_win.texi(,248) You can uninstall individual or all installed components by opening the
../singular_texi/INSTALL_win.texi(,249) @code{Software} shortcut of the @code{Control panel}. 
../singular_texi/INSTALL_win.texi(,250) Simply double-click the @code{Singular} item and
../singular_texi/INSTALL_win.texi(,251) follow the instructions given there.
../singular_texi/INSTALL_win.texi(,252) 
../singular_texi/INSTALL_win.texi(,253) 
../singular_texi/INSTALL_win.texi(,254) For any other troubles,
../singular_texi/INSTALL_win.texi(,255) please send an email to @email{singular@@mathematik.uni-kl.de}
../singular_texi/INSTALL_win.texi(,256) and include the header which is displayed by starting up @code{Singular}
../singular_texi/INSTALL_win.texi(,257) with the @code{-v} option, and a description of your machine and
../singular_texi/INSTALL_win.texi(,258) operating system.
../singular_texi/INSTALL_win.texi(,259) 
../singular_texi/INSTALL_win.texi(,261) 
../singular_texi/INSTALL_win.texi(,266) 
../singular_texi/platform.tex(,78) 
../singular_texi/platform.tex(,79) @c ----------------------------------------------------------
../singular_texi/platform.tex(,80) @node Macintosh installation instructions,,Windows installation instructions, Release Notes
../singular_texi/platform.tex(,81) @section Macintosh installation instructions
../singular_texi/platform.tex(,82) @cindex Macintosh installation
../singular_texi/platform.tex(,83) @cindex instructions, Macintosh installation
../singular_texi/platform.tex(,84) @cindex howto, install on Macintosh
../singular_texi/platform.tex(,85) 
../singular_texi/platform.tex(,86) For the SINGULAR version for Mac OS X refer to the Unix section.
../singular_texi/platform.tex(,87) The SINGULAR version for Mac OS 9 is available as
../singular_texi/platform.tex(,88) `ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/Singular-2-0-4-html.sea.hqx'
../singular_texi/platform.tex(,89) (documentation) and
../singular_texi/platform.tex(,90) `ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/Singular-2-0-4-ppc-MPW.sea.hqx'
../singular_texi/platform.tex(,91) (binaries and libraries).  The file
../singular_texi/platform.tex(,92) `ftp://www.mathematik.uni-kl.de/pub/Math/Singular/MAC/classic/INSTALL_mac.txt'
../singular_texi/platform.tex(,93) gives details on how to finish the installation.
../singular_texi/platform.tex(,94) 
../singular_texi/INSTALL_mac.texi(,1) @comment -*-texinfo-*-
../singular_texi/INSTALL_mac.texi(,2) @comment Id: INSTALL_mac.texi,v 1.1 2003/08/08 14:27:06 pertusus Exp $
../singular_texi/INSTALL_mac.texi(,3) @c FILE:    INSTALL_classicMac.texi
../singular_texi/INSTALL_mac.texi(,4) @c PURPOSE: Installation instructions for Singular on Macintosh
../singular_texi/INSTALL_mac.texi(,5) 
../singular_texi/INSTALL_mac.texi(,9) 
../singular_texi/INSTALL_mac.texi(,13) 
../singular_texi/INSTALL_mac.texi(,14) @heading Installation preliminaries
../singular_texi/INSTALL_mac.texi(,15) 
../singular_texi/INSTALL_mac.texi(,16) This is the final distribution of @sc{Singular} as MPW tool.
../singular_texi/INSTALL_mac.texi(,17) Newer versions of @sc{Singular} will only be available for MacOS X (which is handled like other @sc{Unix}-systems).
../singular_texi/INSTALL_mac.texi(,18) To install @sc{Singular} on a Macintosh (PPC only), you need the file @code{Singular-2-0-2-ppc-MPW.sea.hqx} resp. @code{Singular-2-0-2-ppc-MPW.hqx} which you can obtain by public ftp from @uref{ftp://www.mathematik.uni-kl.de/pub/Math/Singular}.
../singular_texi/INSTALL_mac.texi(,19) Furthermore, you need MacOS version >= 8.5 with an installed MPW shell. 
../singular_texi/INSTALL_mac.texi(,20) This version works also without Carbon.
../singular_texi/INSTALL_mac.texi(,21) 
../singular_texi/INSTALL_mac.texi(,23) 
../singular_texi/INSTALL_mac.texi(,24) 
../singular_texi/INSTALL_mac.texi(,25) @heading Installing @sc{Singular} on MacOS X
../singular_texi/INSTALL_mac.texi(,26) 
../singular_texi/INSTALL_mac.texi(,27) Please see @uref{INSTALL_unix.html}. 
../singular_texi/INSTALL_mac.texi(,28) In contrast to other Unix systems, under MacOS X, @sc{Singular} is only available as a shell command and there is no Emacs interface.
../singular_texi/INSTALL_mac.texi(,29) Enter @code{Singular} in a terminal under Aqua to run @sc{Singular}.
../singular_texi/INSTALL_mac.texi(,30) Alternatively, you may choose @code{Terminal} as the application to open the file @code{Singular} with and put it into the dock.
../singular_texi/INSTALL_mac.texi(,31) 
../singular_texi/INSTALL_mac.texi(,32) 
../singular_texi/INSTALL_mac.texi(,33) @heading Installing Singular
../singular_texi/INSTALL_mac.texi(,34) 
../singular_texi/INSTALL_mac.texi(,35) @enumerate
../singular_texi/INSTALL_mac.texi(,36) 
../singular_texi/INSTALL_mac.texi(,37) @item
../singular_texi/INSTALL_mac.texi(,38) Make sure that you have MPW  installed on your system. 
../singular_texi/INSTALL_mac.texi(,39) See below for instructions on how to install MPW and how to avoid conflicts with the @code{Carbon.lib}.
../singular_texi/INSTALL_mac.texi(,40) 
../singular_texi/INSTALL_mac.texi(,41) @item
../singular_texi/INSTALL_mac.texi(,42) Download the file @code{Singular-2-0-2-ppc-MPW.sea.hqx}.
../singular_texi/INSTALL_mac.texi(,43) 
../singular_texi/INSTALL_mac.texi(,44) @item
../singular_texi/INSTALL_mac.texi(,45) Expand the downloaded file using a standard Expander (like Compact Pro or StuffIt) to obtain the corresponding self-extracting @code{Singular-2-0-2-ppc-MPW.sea} file.
../singular_texi/INSTALL_mac.texi(,46) 
../singular_texi/INSTALL_mac.texi(,47) @item
../singular_texi/INSTALL_mac.texi(,48) Click on the self-extracting @code{Singular-2-0-2-ppc-MPW.sea} file. 
../singular_texi/INSTALL_mac.texi(,49) This  will create a new folder named @code{Singular:} which contains the @sc{Singular} program in the subfolder @code{2-0-2:ppc-MPW:}. 
../singular_texi/INSTALL_mac.texi(,50) Do not change the structure of the subfolders.
../singular_texi/INSTALL_mac.texi(,51) 
../singular_texi/INSTALL_mac.texi(,52) @item
../singular_texi/INSTALL_mac.texi(,53) Make the folder which contains the executable to the working directory of the MPW shell. 
../singular_texi/INSTALL_mac.texi(,54) To start @sc{Singular}, you need to type @code{Singular} in the MPW worksheet. 
../singular_texi/INSTALL_mac.texi(,55) Clicking on the @sc{Singular} icon on the desktop, starts up the MPW shell (the working directory of the MPW shell is then the directory of the executable). 
../singular_texi/INSTALL_mac.texi(,56) If you start the MPW shell manually, you must set the working directory to the directory of the @sc{Singular} program. 
../singular_texi/INSTALL_mac.texi(,57) You may use the directory menu or write into the startup file of the MPW shell the line
../singular_texi/INSTALL_mac.texi(,58) @smallexample
../singular_texi/INSTALL_mac.texi(,59) setdirectory "@{Boot@}"Singular:2-0-2:ppc-MPW:
../singular_texi/INSTALL_mac.texi(,60) @end smallexample
../singular_texi/INSTALL_mac.texi(,61) if @code{"@{Boot@}"Singular:2-0-2:ppc-MPW:} is the folder of the executable.
../singular_texi/INSTALL_mac.texi(,62) 
../singular_texi/INSTALL_mac.texi(,63) After unpacking, you will have a directory structure like:
../singular_texi/INSTALL_mac.texi(,64) @table @code
../singular_texi/INSTALL_mac.texi(,65) @item Singular:2-0-2:ppc-MPW:Singular
../singular_texi/INSTALL_mac.texi(,66) Singular executable
../singular_texi/INSTALL_mac.texi(,67) @item Singular:2-0-2:ppc-MPW:libparse
../singular_texi/INSTALL_mac.texi(,68) parser for Singular libraries
../singular_texi/INSTALL_mac.texi(,69) @item Singular:2-0-2:LIB:
../singular_texi/INSTALL_mac.texi(,70) Singular libraries
../singular_texi/INSTALL_mac.texi(,71) @item Singular:2-0-2:LIB:gftables:
../singular_texi/INSTALL_mac.texi(,72) Singular gftables
../singular_texi/INSTALL_mac.texi(,73) @item Singular:2-0-2:doc:singular.idx
../singular_texi/INSTALL_mac.texi(,74) index of inline help
../singular_texi/INSTALL_mac.texi(,75) @item Singular:2-0-2:doc:singular.hlp
../singular_texi/INSTALL_mac.texi(,76) file for inline help
../singular_texi/INSTALL_mac.texi(,77) @item Singular:2-0-2:README
../singular_texi/INSTALL_mac.texi(,78) information of the distribution
../singular_texi/INSTALL_mac.texi(,79) @item Singular:2-0-2:README.hlml
../singular_texi/INSTALL_mac.texi(,80) @item Singular:2-0-2:COPYING
../singular_texi/INSTALL_mac.texi(,81) license information
../singular_texi/INSTALL_mac.texi(,82) @item Singular:2-0-2:COPYING.html
../singular_texi/INSTALL_mac.texi(,83) @item Singular:2-0-2:NEWS
../singular_texi/INSTALL_mac.texi(,84) news in the distribution
../singular_texi/INSTALL_mac.texi(,85) @item Singular:2-0-2:NEWS.html
../singular_texi/INSTALL_mac.texi(,86) @item Singular:2-0-2:INSTALL
../singular_texi/INSTALL_mac.texi(,87) instructions like this file
../singular_texi/INSTALL_mac.texi(,88) @end table
../singular_texi/INSTALL_mac.texi(,89) 
../singular_texi/INSTALL_mac.texi(,90) The @sc{Singular} libraries have a special form to work here. 
../singular_texi/INSTALL_mac.texi(,91) Do not use the libraries from other distributions. 
../singular_texi/INSTALL_mac.texi(,92) They are not compatible. 
../singular_texi/INSTALL_mac.texi(,93) A supplementary file is @code{Singular-2-0-2-html.sea.hqx} which contains the html pages. 
../singular_texi/INSTALL_mac.texi(,94) You can use this with a browser but not from the program @sc{Singular}.
../singular_texi/INSTALL_mac.texi(,95) The self-extracting archive will create the folder @code{html:} and you may extract it at @code{"@{Boot@}"Singular:2-0-2:}.
../singular_texi/INSTALL_mac.texi(,96) 
../singular_texi/INSTALL_mac.texi(,97) @end enumerate
../singular_texi/INSTALL_mac.texi(,98) 
../singular_texi/INSTALL_mac.texi(,99) 
../singular_texi/INSTALL_mac.texi(,100) @heading Installing MPW
../singular_texi/INSTALL_mac.texi(,101) 
../singular_texi/INSTALL_mac.texi(,102) The final version of MPW is downloadable from Apple at @uref{ftp://ftp.apple.com/developer/Tool_Chest/Core_Mac_OS_Tools/MPW_etc./MPW-GM_Images/}.
../singular_texi/INSTALL_mac.texi(,103) Older versions of @code{Carbon.lib} may conflict with the latest MPW. 
../singular_texi/INSTALL_mac.texi(,104) In this case, you need to update @code{Carbon.lib} or work without it.
../singular_texi/INSTALL_mac.texi(,105) 
../singular_texi/INSTALL_mac.texi(,106) 
../singular_texi/INSTALL_mac.texi(,107) @heading Restrictions
../singular_texi/INSTALL_mac.texi(,108) 
../singular_texi/INSTALL_mac.texi(,109) Some typical Unix features of @sc{Singular} are not working with MPW, e.g. links and cooperation with other programs like XEmacs and xterm.
../singular_texi/INSTALL_mac.texi(,110) 
../singular_texi/INSTALL_mac.texi(,111) For any other troubles, please send an email to @email{singular@@mathematik.uni-kl.de} and include the header which is displayed by starting up @sc{Singular}
../singular_texi/INSTALL_mac.texi(,112) with the @code{-v} option, and a description of your machine and operating system.
../singular_texi/INSTALL_mac.texi(,113) 
../singular_texi/INSTALL_mac.texi(,114) 
../singular_texi/INSTALL_mac.texi(,116) 
../singular_texi/singular.tex(,623) 
../singular_texi/singular.tex(,624) @c ----------------------------------------------------------
../singular_texi/singular.tex(,625) @node Index, , Release Notes, Top
../singular_texi/singular.tex(,626) @chapter Index
../singular_texi/singular.tex(,627) @cindex Index
../singular_texi/singular.tex(,628) @printindex cp
../singular_texi/singular.tex(,629) @c ---------------------------------------------------------
../singular_texi/singular.tex(,630) 
../singular_texi/singular.tex(,631) @c generate table of content and short table of content
../singular_texi/singular.tex(,632) @contents
../singular_texi/singular.tex(,633) @bye
