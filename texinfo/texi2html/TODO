This file contains a list of things yet to be done (see also in doc/TODO):

* Create detailed texinfo documentation (see in doc)

* add sample init files for different layouts
  - use events (onmousover, etc) for anchors
  - use style-sheets for formatting of various elements (like @example,
  etc).
  - xhtml with in line style
  - Singular manual style
  - How complicated could it be to get a creation of SGML ?
  - to LaTeX
  - to RTF
  - to open document

* document css classes, and have similar classes with makeinfo
-  makeinfo classes:
ul menu, 
ul index-cp index-*, 
div node (navigation bar), 

- texi2html classes:
table index-cp index-*, 
table menu, 
h3 node
ul toc,

- same classes:
pre verbatim, 
pre example display...,
table cartouche, 
small dots, small enddots, 
div contents shortcontents, div footnote, 
h? unnumbered chapter appendix...,
h1 settitle (title before contents, if not set by titlefont),
h1 titlefont (@titlefont),

* Document 
  Texi2HTML::THIS_ELEMENT
  $NEW_CROSSREF_STYLE, $EXTERNAL_CROSSREF_SPLIT, $INLINE_INSERTCOPYING
  $OVERVIEW_LINK_TO_TOC
  $Texi2HTML::THISDOC{'htmlxref'}
  $Texi2HTML::THISDOC{macro name}
  $Texi2HTML::THISDOC{'hyphenation'}
  $Texi2HTML::THISDOC{'do_about'}
  $Texi2HTML::THISDOC{'split_level'}
  $Texi2HTML::THISDOC{'line_nr'}

  $empty_preformatted
  $copying_comment, $titlepage better and $documentdescription
  $program_string, $footnote_texi
  $heading arguments $begin_paragraph_texi $tab_item_texi $begin_style_texi
  $begin_special_region $end_special_region $simple_command $thing_command
  Also element formatting documentation, especially print_foot_navigation
  is not up to date.
  new arguments and return args of index_summary_letter
  new argument of def
  new argument of def_item
  new arguments of list_item
  new argument of inline_content
  $shortcontents and $contents
  $misc_command_line
  new argument of printindex
  new arguments of $unknown_style
  NODE_FILENAMES
  $Texi2HTML::THISDOC{'format_from_command_line'}
  language_codes
  region_codes
  

* document the 'math' in 'args', in style_map, and simple_*math*. It
  could also be more flexible and similar with other environments, that
  is not only add a fixed key, but duplicate all the keys and add one.
  Documentation should only done once the interface is stable.

* document the new $image arguments/API

* the following is erroneous, but maybe it could be better handled anyway
-> error with @item on same line than @table
@xref{node,
@table @emph
@item line
text
@end table
}

* test @printindex in diverse contexts and handle right, or complain about
  things like
@code{
@printindex cp
}

* @macro definition in @ifset is parsed but ignored. So in the following, the
@end ifset appearing in the macro is ignored if 'a' is not set, and the 
macro isn't defined.

@ifset a
@macro bidule
@end ifset
@end macro
@end ifset

* in chm.init (Jose Fonseca)

[WINDOWS]
 
Default=,"ug.hhc","ug.hhk","ug.html","ug.html",,,,,0x22520,,0x384e,,,,,,,,0

The numbers are a bitmask of the enabled buttons. The ones here are
IMO a good default. In the future you may also add that as an
option, as the Docbook XSL stylesheets do (see in
http://docbook.sourceforge.net/release/xsl/snapshot/doc/html/rn20.html
all the CHM related parameters one can change).

* many FIXME in the code

* in index_split the section associated with indices is the numbered section
  not the associated node where the @cindex are. Good or bad?

* antispam @email
<script type="text/javascript">
<!--
/* This hacks the DOM so that copy&paste in Firefox ignores the "nospam"
   spans. */
function clean_antispam() {
  document.getElementById("span1").firstChild.nodeValue = "";
  document.getElementById("span2").firstChild.nodeValue = "";
}
//-->
</script>

<body onLoad="clean_antispam()">
<tt>&lt;bug-gnulib<span id="span1" style="display:none;">-nospam</span>&#64;<span id="span2" style="display:none;">nospam.</span>gnu.org&gt;</tt>
</body>

* menu_description is menucomment in xml. 
  menuentry is the menunode+menutitle+menucomment
  menu_comment in makeinfo --xml treated as normal text.
  the documentation, however uses the same words than in texi2html.

* roff is not uptodate. At least the @quote* and @guillem* and many 
  others.

* the code of xml.c in makeinfo shows specific treatement of & in 
  definition arguments. I don't know what it corresponds with. The
  formal definition argument parsing stuff is certainly worth asking
  on the texinfo list.

* something like
@math{@minus{} {\frac{1}{2}}} 
  leads to errors in makeinfo about misplaced { } because it seems that
  @minus turns on texinfo mode or the like, while
@math{{\frac{1}{2}} @minus{}}
  is error free.

* formatting/nodename_parentheses.texi gives wrong output.

* add @detailmenu in coverage, and @group

* makeinfo doesn't warn for empty heading commands, like
** unnumberedsubsec without name (l. 284)

* makeinfo warn when there is no @settitle nor @top where it finds its title
in texi2tml there is no warning, and also the title is constructed
differently.

* makeinfo don't warn for empty deffn, but texi2dvi cannot process them

* enable_encoding.init is certainly dependent on USE_UNICODE through
the use of non 8 bit representation of characters.

* makeinfo in title, for @code{something} leads to `something'. In 
texi2html all the style commands are removed without extra formatting.

* test for @deffn with end of line protected in @footnote (to test 
  end of line protection in keep_texi).

* empty lines in @hyphenation are not valid for texi2dvi

* manuals/mini_ker result is not valid, but it looks like a validate bug?
  In any case, it may make sense to have @tex not starting paragraph,
  like @html, at least when expanding it.

* texinfo expands @-commands normally in @documentdescription, but keeps --,
  texi2html uses simple_format which removes most @commands but uses 
  entities

* texi2dvi doesn't accept @table in @format

* warnings and errors are somewhat random at present. Also it would be nice
  to have the same error messages than makeinfo.

* when there are nested complex_formats, a small format that doesn't have
  style, like smalldisplay in a format with style, like example, the
  smalldisplay will use the class of the above format, and lose the 
  small font property.

* decide @documentencoding @. And maybe change regexp. (?)

* html32 
For headings. In normal it is strong.
Error at line 2616, character 4:  element "H1" not allowed here; check
        which elements this element may be contained within
Error at line 2619, character 4:  element "H1" not allowed here; check
        which elements this element may be contained within
Error at line 2622, character 4:  element "H2" not allowed here; check
        which elements this element may be contained within
Error at line 2625, character 4:  element "H3" not allowed here; check
        which elements this element may be contained within
Error at line 2628, character 4:  element "H4" not allowed here; check
        which elements this element may be contained within

* verify that code_style is used for code_style style @-commands 
  in remove_texi.

* test for something along:
@setfilename ../../info/xemacs.info

* docbook: in function no style. 
  replaceable is for @var or function argument. Only characters.

  Instead of synopsis may use specialized synopsis, funcsynopsis/funcprototype
  for deftype*, funcdef for defffn, ooclass for object oriented.

  also informalfigure in @float

  also use informaltable or table, for multitable?

* to solve above issue (first issue), the definition arg formatted with 
  simple_format should alo be passed down

* in docbook, when there is only one section <article> should be better
  than book. Maybe the best way to do that would be passing the 
  information that there is only one section to the functions formatting
  the page header and page footer.

* makeinfo has a lot of other short command line switches, but implement
  only those that are documented, in --help or info makeinfo.

* does --document-language cmd line apply to first or all files? 
  ask on bug-texinfo.

* now config variables are read-only after command line switches
  expansion. If defined, they set $Texi2HTML::THISDOC{'VAR'}
  and if not defined, $Texi2HTML::THISDOC{'VAR'} is autodetected.
  $Texi2HTML::THISDOC{'VAR'} is then used in the code.

  This means that, if a variable that was not autodetected becomes
  autodetected, the code will have to switch to using 
  $Texi2HTML::THISDOC{'VAR'} instead of $VAR. This is very bad since it
  means API breaking.

  All that is now more or less encapsulated in get_conf, but the 
  problem remains.

* makeinfo.init not uptodate with makeinfo --html. Index entries link back
  now. And also look at floats?
  menu name is used instead of node in menu links url text.
  see Karl post on mailing list.

* change LINK_BUTTONS for makeinfo.init to have next, up... nodes.
  Or have a config variable for the header style (like makeinfo, or
  like texi2html) and have the LINK_BUTTONS match.

* ignore spaces after @ command, before {, like texi2dvi does?

* failures with split index between node and section in indices/
  makeinfo_index_split first.html is missing
  makeinfo_nodes_before_top_and_sections needs to be checkedd (first 
                              should be in first.html?).

* add --command command line that gives inserted lines.

* @ogonek has 2 test files, and is in coverage. Maybe add it to encoding/*
  where other accents are used too. Or maybe tests should be more focused?

* for makeinfo, the following are not the same, looks like -I is not taken
  into account with a leading ./:
@include ./d2t_singular/surf_lib_noEx.tex
@include d2t_singular/surf_lib_noEx.tex
  for texi2html they are the same.

* @chapter following a @appendix still uses a number for numbering, and
  is not affected by the @appendix number. Karl is ok with that.

* @kbdinputstyle should be taken into account in html output, which
  means distinguish between preformatted, code_style and normal text 
  when formatting @kbd. Should this distinction hold for every command?
  Also it should be dynamical, ie in pass 2 too (FIXME in the code).
  In info it is right to have it always in quotes.

* have a special debug mode where text processing is traced. It means
  that PASS_TEXT/SCAN_TEXT is shown and substitute_line (and maybe 
  other like substitute_text) and shown, now that there is a nice 
  context information.

* when closing @-commands with braces in first passes, the braces are not
  output in order to correct the document. However, end of formats are output
  in the first pass (and therefore these formats cannot be wrong in 
  other passes, and nothing is done to close them). Also it is not clear where
  error messages should appear. Indeed in the first pass the line count
  are less precise since commands are closed at the end of file, not when 
  finding a @node or @section. If error messages are done in pass_text, 
  they won't be output when only macros are expanded, but maybe it is better
  like that? (and in makeinfo compatibility mode, a normal processing
  will be done with -E).

* there is also undocumented features @hsep and @vsep to insert
  horizontal and vertical rules.

* @anchor{} should always ignore following whitespace (including newlines)

* in info, @. @! and @? should always be followed by at least 2 spaces
  even in text, not only on end of lines.

* add tests for -o - and input coming from stdin, including check of 
  out file names.
  also -o /dev/null and similar.
  There is also a check in layout/formatting_exotic with 
  --internal-links=/dev/null which is not portable

* when determining the different letters and later sorting them, there 
  should not be transliteration, but instead perl sorting and i18n stuff
  should be used. Cf testcases in encoding/encoding_index*.
  Currently, for example for encoding_index-latin1 accented letters are
  at the end. And degree is at o...

* formatting/indicateurl_paragraph.texi there should be a warning that
  a simple_style was cut by a paragraph.

* utf8.init doesn't work with info.init (see encodings/nodetest_to_utf8_latin1)

* makeinfo: multiple index entries have <1>... appended.
  or they are removed. Ask on the list.

* A lone node without associated sectionning command nor directions leads
  to an error message in makeinfo. Since there is no way to go out of the 
  node, it should certainly be noticed. Another possibility would be to
  have automatic directions set in that case too, and use the @menu stuff
  to determine the directions
../../node_footnote.texi:14: Node `@'a' requires a sectioning command (e.g., @top).

* ../../sectionning.texi:4: warning: Must specify a title with least one of @settitle or @top.

* Perhaps we should also make an option -Werror which turns all warnings
  into errors.

* only texi2html warns about:
** Empty index entry for @vtable (l. 26)

* What are the encodings known by info/makeinfo? 
  unrecognized encoding name `ascii'.

* invalid/node_in_copying there is no error message

* info/long_uref_after_item.texi report from Kevin Ryde,
  it would be logical to treat the space after the itemize mark as 
  a tie instead of a breakpoint.

* certainly not a big deal, but in invalid/verb_not_closed @verb content
  is not output

* certainly not a big deal, but in invalid/bad_tab_nesting, the @code quotes
  are not surrounding the @tab, although there is no error message

* Should there be an error message with node only in @detailmenu? Asked
  on bug-texinfo. See info output of texi2html_manual.

* @insertcopying in @copying doesn't lead to error message with 
  INLINE_INSERTCOPYING. See invalid/recursive_copying

* encodings/accentenc.texi.
../..//accent-text.txi:45: warning: invalid encoded character `oelig'.
../..//accent-text.txi:45: warning: invalid encoded character `OElig'.
  Also OE is associated with both '00D8' and '0152'?

* should include files be searched in current directory, input manual
  directory or both?

* error messages
  ** `second node' doesn't appear in menus
  warning: unreferenced node `second node'.

  ** node_prev `nonexistant node in prev for @@top' for `lop' not found (l. 13)
  Prev reference to nonexistent node `nonexistant node in prev for @@top' (perhaps incorrect sectioning?).

  ** `node1' is up for `node below node1', but has no menu entry for this node
  Node `node1' lacks menu item for `node below node1' despite being its Up target.

  *** Unknown node in menu entry `node inexistant in menu' (l. 19)
  Menu reference to nonexistent node `node inexistant in menu' (perhaps incorrect sectioning?).

  ** macro `splitrcskeyword' already defined (l. 86) redefined (l. 103)
  ../../cvs.texi:106: warning: macro `splitrcskeyword' previously defined.
  ../../cvs.texi:86: warning: here is the previous definition of `splitrcskeyword'.


  ** Bad index name: bidule (l. 11)
  ../../index_no_node.texi:11: Unknown index `bidule' in @printindex.

  *** '}' without opening '{' before:  (l. 8)
  ../../brace_not_closed.texi:8: Unmatched }.

  *** '{' without macro. Before: truc@} @anchor{truc}. (l. 10)
  ../../brace_not_closed.texi:10: Misplaced {.

  *** waiting for end of quotation, found @end cartouche (l. 12)
  ../../bad_nesting.texi:13: `@end' expected `quotation', but saw `cartouche'.

  *** closing `group' (l. 36)
  ../../bad_nesting.texi:34: No matching `@end group'.

  closing @-command code (l. 18)
  ../../code_not_closed.texi:16: @code missing close brace.

  ** closing @-command footnote (l. 17)
  ../../footnote_not_closed.texi:30: No closing brace for footnote `'.

  *** closing `quotation' (l. 24)
  ../../footnote_not_closed.texi:54: No matching `@end quotation'.

  ** 2 @titlepage not closed (l. 16)
  ../../titlepage_not_closed.texi:17: Expected `
@end titlepage'.
  
  ** Unknown float style Text (l. 19)
  ../../caption_not_closed.texi:20: warning: Requested float type `Text' not previously used.

  not done in texi2html:
  ../../invalid_command_in_table.texi:8: table requires an argument: the formatter for @item.

  *** Undefined node `EExpansion' in @xref (l. 263)
  ../../templates.texi:287: Cross reference to nonexistent node `EExpansion' (perhaps incorrect sectioning?).

* in formatting/table_in_table_item.texi, some lines maybe have too much 
  leading spaces (precisely in @code in @table in @table @item, line
in nested table line

* in coverage/formats_titles.texi, a construct like

@table @emph
before first table
@item tab
@end table

  leads to

    before first table
_tab_

  without an empty line added after the title. Maybe there should be one.

* In japanese.texi lines are not cut right.

* formatting/float_copying index entries in insertcopying are not right.
  Maybe it is because they are in footnotes. Or maybe because they are
  in a caption.

* it would better to output just the basenames in the Info preamble.

* This input:

---------------------------
@float Figure,a44
First figure.
@caption{Example caption.}
@end float

List of figures:
@listoffloats Figure
@bye
--------------------

should actually produce something like:

------------------------------
First figure.

Figure 1: Example caption.

   List of figures:

* Menu:

* Figure 1: a44.            Example caption.



