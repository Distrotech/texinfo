This file contains a list of things yet to be done (see also in doc/TODO):

* Create detailed texinfo documentation (see in doc)

* add sample init files for different layouts
  - use events (onmousover, etc) for anchors
  - use style-sheets for formatting of various elements (like @example,
  etc).
  - xhtml with in line style
  - Singular manual style
  - How complicated could it be to get a creation of XML, what about SGML ?
  - to LaTeX
  - to RTF
  - to open document

* document css classes, and have similar classes with makeinfo
-  makeinfo classes:
ul menu, 
ul index-cp index-*, 
div node (navigation bar), 

- texi2html classes:
table index-cp index-*, 
table menu, 
h3 node
ul toc,

- same classes:
pre verbatim, 
pre example display...,
table cartouche, 
small dots, small enddots, 
div contents shortcontents, div footnote, 
h? unnumbered chapter appendix...,
h1 settitle (title before contents, if not set by titlefont),
h1 titlefont (@titlefont),

* Document 
  Texi2HTML::THIS_ELEMENT
  $NEW_CROSSREF_STYLE, $EXTERNAL_CROSSREF_SPLIT, $INLINE_INSERTCOPYING
  $Texi2HTML::THISDOC{'htmlxref'}
  $Texi2HTML::THISDOC{'current_lang'}
  $Texi2HTML::THISDOC{macro name}
  $Texi2HTML::THISDOC{'hyphenation'}

  $copying_comment, $titlepage better and $documentdescription
  $program_string

* document the 'math' in 'args', in style_map, and simple_*math*. It
  could also be more flexible and similar with other environments, that
  is not only add a fixed key, but duplicate all the keys and add one.
  Documentation should only done once the interface is stable.


* don't double in title when the @top and @settitle are the same

* the following is erroneous, but maybe it could be better handled anyway
-> error with @item on same line than @table
@xref{node,
@table @emph
@item line
text
@end table
}

* handle right things like
@code{
@printindex cp
}

* maybe some @-commands appearing on lines should stop paragraphs, namely
@page or @indent. That's not sure. More likely this should be up to the 
writer to add a line. There is a Config hash now for @style_map commands.
formats automatically stop paragraphs.

* honor stop_paragraph_command for misc_commands?

* handle better things like
@itemize @bullet
@cindex example
@item
In the example
@end itemize

* @macro definition in @ifset is parsed but ignored. So in the following, the
@end ifset appearing in the macro is ignored, and the macro isn't defined.
Don't know if it's right.

@ifset a
@macro bidule
@end ifset
@end macro
@end ifset

* in chm.init (Jose Fonseca)

[WINDOWS]
 
Default=,"ug.hhc","ug.hhk","ug.html","ug.html",,,,,0x22520,,0x384e,,,,,,,,0

The numbers are a bitmask of the enabled buttons. The ones here are
IMO a good default. In the future you may also add that as an
option, as the Docbook XSL stylesheets do (see in
http://docbook.sourceforge.net/release/xsl/snapshot/doc/html/rn20.html
all the CHM related parameters one can change).

* handling of images should be more configurable for other formats.

* add f--ile to the repository, and do a test in another directory for
  test of missing files.

* many FIXME in the code

* test @printindex in diverse contexts

* in index_split the section associated with indices is the numbered section
  not the associated node where the @cindex are. Good or bad?


* maybe be quiet during special region expansion outside of document. It
  is not very clear that it is wrong, though. multiple_pass could be passed
  down to echo_warn/echo_error and no warning would be produced with
  multiple_pass > 1.

* antispam @email
<script type="text/javascript">
<!--
/* This hacks the DOM so that copy&paste in Firefox ignores the "nospam"
   spans. */
function clean_antispam() {
  document.getElementById("span1").firstChild.nodeValue = "";
  document.getElementById("span2").firstChild.nodeValue = "";
}
//-->
</script>

<body onLoad="clean_antispam()">
<tt>&lt;bug-gnulib<span id="span1" style="display:none;">-nospam</span>&#64;<span id="span2" style="display:none;">nospam.</span>gnu.org&gt;</tt>
</body>

* menu_description is menucomment in makeinfo. It is stopped by an empty line
  or a command with $format_type{$command} eq 'menu'
  menuentry is the menunode+menutitle+menucomment
  menu_comment has no name in makeinfo and is treated as normal text.

* Tests/formatting/code_not_closed.texi should trigger 2 errors, none
  are triggered currently.

* a FIXME in Tests/formatting/detailmenus.texi with a warning missing 
  for a menu entry for a spurious entry with no corresponding node entry.

* roff is certainly not uptodate. At least the @quote* and @guillem*

* the code of xml.c in makeinfo shows specific treatement of & in 
  definition arguments. I don't know what it corresponds with. All
  the definition argument parsing stuff is certainly worth asking
  on the texinfo list.

* makeinfo can proceed more than one file on the command line. The options
  that are for one file (like -o ) apply to the first file only.

* something like
@math{@minus{} {\frac{1}{2}}} 
  leads to errors in makeinfo about misplaced { } because it seems that
  @minus turns on texinfo mode or the like, while
@math{{\frac{1}{2}} @minus{}}
  is error free.

* formatting/nodename_parentheses.texi gives wrong output.

* in @example, makeinfo --xml 

@ followed by a space
&space;@ followed by a tab
&space;@ followed 

texi2html
@ followed by a space
&space;
@ followed by a tab
&space;
@ followed 

* in xml 
@itemize
@item i--temize
@end itemize

makeinfo:
<itemize><itemfunction>&bullet;</itemfunction><item>
i--temize
</item>
        </itemize>
texi2html:
<itemize><itemfunction>&bullet;</itemfunction><item> i--temize
</item>
</itemize>

* in xml
@itemize @bullet{} a--n itemize line
@item i--tem 1
@item i--tem 2
@end itemize

makeinfo:
<itemize><itemfunction>&bullet; a--n itemize line</itemfunction><item>
i--tem 1
</item>
<item>
i--tem 2
</item>
        </itemize>
texi2html:
<itemize><itemfunction>&bullet; a&ndash;n itemize line</itemfunction><item> i--tem 1
</item>
<item> i--tem 2
</item>
</itemize>

* in xml
@enumerate
@item e--numerate
@end enumerate

makeinfo:
<enumerate first="1"><item>
e--numerate
</item>
        </enumerate>
texi2html:
<enumerate first="1"><item> e--numerate
</item>
</enumerate>

* add @detailmenu in coverage, and @group

* in imbrications.texi there should be a warning for
@defun aaaa
@deffnx bbbb
@end deffn
@end defun
 Makeinfo gives:
imbrications.texi:241: Must be in `@deffn' environment to use `@deffnx'.
imbrications.texi:259: `@end' expected `defun', but saw `deffn'.

* the following leads to an empty def item, this is wrong
@deffn a b 
@c aaaa
@deffnx
aaa
@end 

@item
@something
@itemx should also be tested

* makeinfo doesn't warn for empty heading commands, like
** unnumberedsubsec without name (l. 284)

* makeinfo warn when there is no @settitle nor @top where it finds its title
in texi2tml there is no warning, and also the title is constructed
differently.

* makeinfo don't warn for empty deffn, but texi2dvi cannot process them

* copy relevant makeinfo tests

* with the 8bit maps, the following FIXME could be fixed.
FIXME to be fixed with unicode to 8bit tables

* enable_encoding.init is certainly dependent on USE_UNICODE through
the use of non 8 bit representation of characters.

* makeinfo in title, for @code{something} leads to `something'. In 
texi2html all the style commands are removed without extra formatting.

* include-value.texi is broken. And a test of substitution of @value and
@macro is other commands, like syncodeindex and similar is missing. Done
in mny misc commands, remains to be done in pass0 macros and for coverage.

* test for @deffn with end of line protected in @footnote (to test 
end of line protection in keep_texi).

* empty lines in @hyphenation are not vaild for texi2dvi

* texinfo expands @-commands normally in @documentdescription, but keeps --,
texi2html uses simple_format which removes most @commands but uses entities

* in menu-whitespace, with --xml (also seen in the html output), 
in Top <nodenext>first</nodenext> in texi2html, not in makeinfo

* clean formatting/def_cmds.texi to remove invalid texinfo and put it
in an ifset.

* in book.init there are li missing in ul in pre-toc or the like.

* in float.texi result, there is
1.1 A section
and
1.1 Section within unnumbered

* document the new $image arguments

* if a 'term' triggers no_paragraph, the ouput may be more valid, but the 
center won't have effect in it.
