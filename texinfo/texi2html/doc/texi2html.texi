\input texinfo @c -*-texinfo-*-
@c This is the ``Texinfo to HTML Converter'' manual which
@c which is part of the ``texi2html'' distribution.
@setfilename texi2html.info

@copying
@multitable @columnfractions .12 .88
@item Portions of @command{texi2html}
@item @tab Copyright @copyright{} 1999, 2000 Lionel Cons@*
@item @tab Copyright @copyright{} 1999, 2000 Karl Berry@*
@item @tab Copyright @copyright{} 1999, 2000 Olaf Bachmann@*
@item @tab Copyright @copyright{} 2002, 2003, 2004, 2005, 2006, 2007 Patrice Dumas@*
@item @tab Copyright @copyright{} 2001, 2002, 2003, 2004, 2005, 2006 Derek Price@*
@item @tab Copyright @copyright{} many others.@*
@item @tab
@item @tab
@item Portions of this manual
@item @tab Copyright @copyright{} 1999, 2000 Karl Heinz Marbaise (manual)@*
@item @tab Copyright @copyright{} 2003, 2007 Derek Price (manual)@*
@item @tab Copyright @copyright{} 2003, 2004, 2005, 2006, 2007 Patrice Dumas (manual)@*
@end multitable

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and
print the results, provided the printed document carries
copying permission notice identical to this one except for
the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified
versions of this manual under the conditions for verbatim
copying, provided that the entire resulting derived work is
distributed under the terms of a permission notice
identical to this one.

Permission is granted to copy and distribute translations
of this manual into another language, under the above
conditions for modified versions, except that this
permission notice may be stated in a translation approved
by the Free Software Foundation.
@c Author:
@c   Karl Heinz Marbaise <khmarbaise@gmx.de>
@c   Patrice Dumas
@c   Derek Price
@end copying

@c The following is the Texi2HTML program license, not the manual
@c license. The manual license is stated above.
@c
@c --------------------------------------------------------
@c    This file is part of the Texi2HTML distribution.
@c
@c    Texi2HTML is free software; you can redistribute it
@c    and/or modify it under the terms of the GNU General Public
@c    License as published by the Free Software Foundation;
@c    either version 2 of the License, or (at your option) any
@c    later version.
@c
@c    Texi2HTML is distributed in the hope that it will be
@c    useful, but WITHOUT ANY WARRANTY; without even the implied
@c    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
@c    PURPOSE.  See the GNU General Public License for more
@c    details.
@c
@c    You should have received a copy of the GNU General
@c    Public License along with this program; if not, write to
@c    the Free Software Foundation, Inc., 59 Temple Place, Suite
@c    330, Boston, MA  02110-1301  USA
@c
@c --------------------------------------------------------

@c --------------------------------------------------------
@c Get the version of the script and the last update time
@c of this manual.
@c
@c version.texi is automatically generated through
@c configure/autoconf.
@include version.texi
@c --------------------------------------------------------

@c --------------------------------------------------------
@c Define an index for command line options
@defindex op

@c  Define some macros which affect markup and add to the
@c  index simultaneously.
@macro longopt {arg}
@opindex \arg\
@option{--\arg\}
@end macro

@macro shortopt {arg}
@opindex \arg\
@option{-\arg\}
@end macro

@macro variable {arg}
@vindex \arg\
@code{\arg\}
@end macro
@c --------------------------------------------------------

@settitle Texi2HTML -- Texinfo to HTML v@value{VERSION}
@setchapternewpage odd
@footnotestyle separate
@ifset shorttitlepage-enabled
@shorttitlepage Texi2HTML -- Texinfo to HTML v@value{VERSION}
@end ifset

@c --------------------------------------------------------
@c support old style Info Dir entries.
@ifset OLDSTYLE-INFO-DIR
@ifinfo
@format
START-INFO-DIR-ENTRY
* Texi2HTML: (texi2html).  Texinfo 2 HTML Converter (texi2html).
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@end ifset
@c --------------------------------------------------------
@c Informations for install-info.
@c I think the conversion script should be found
@c where the documentation system lives.
@c What do you think?
@dircategory Texinfo documentation system
@direntry
* Texi2HTML: (texi2html).  Texinfo to HTML Converter.
@end direntry
@c --------------------------------------------------------

@ifnottex
@ifnothtml
This file, last updated @value{UPDATED}, documents the @command{texi2html}
script which converts @uref{http://www.texinfo.org,Texinfo} into
@uref{http://w3c.org,HTML}.  This edition is for @command{texi2html} version
@value{VERSION}.
@end ifnothtml

@insertcopying
@end ifnottex
@c --------------------------------------------------------
@titlepage
@title Texi2HTML -- Texinfo to HTML v@value{VERSION}
@subtitle Last Update: @value{UPDATED}
@subtitle for Version @value{VERSION} of the @command{texi2html} script.
@author Lionel Cons
@author Karl Berry
@author Olaf Bachmann
@author Patrice Dumas
@author Derek Price
@author and many others.
@author Karl Heinz Marbaise (manual)
@author Patrice Dumas (manual)
@author Derek Price (manual)
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@comment ========================================================
@comment             The real text starts here.
@comment ========================================================

@summarycontents
@contents

@ifnottex
@c ========================================================
@node Top
@top Texi2HTML

@cindex bug report

This manual, last updated @value{UPDATED}, describes version @value{VERSION}
of the @command{texi2html} Perl script which converts
@c The following construct allows me to get
@c real URL link in HTML and working refs in
@c info.
@c
@c pertusus: support for html cross manual now
@c exists in texi2html, but it implies having Texinfo's
@c HTML manual at the right place, which isn't usually the case.
@c The resulting ref is also less pretty in info.
@ifnotinfo
@uref{http://www.texinfo.org,Texinfo} into @uref{http://w3c.org,HTML}.
@end ifnotinfo
@ifinfo
Texinfo (@pxref{Top,,Texinfo,Texinfo}) into @acronym{HTML}.
@end ifinfo

Please send bug reports concerning this manual to the Texi2HTML developement
list @email{texi2html-bug@@nongnu.org}. Please state the exact
version of the manual which contains the bug, as given above.

@ifinfo
@insertcopying
@end ifinfo

@example
@strong{This manual is currently under construction and of course incomplete.  ;-)}
@end example

@menu
@c * MenuName:NodeName.       Description
* Overview::
* Obtaining texi2html::
                              Obtaining a copy of the @command{texi2html}
                              source code distribution
* Installation::              Installing @command{texi2html}
* Invoking texi2html::        Description of the command line options
* Initialization files::      What kind of variables and subroutines appear
                              in init files and how they are called
* Changing the page layout::  Fine tuning of the page layout
* Customizing HTML::          Fine tuning of the @acronym{HTML} elements
                              associated with the texinfo constructs
* Internationalization::      Help translating!
* Incompatibilities::         Incompatibilities with previous versions
* Specificities::             The minor differences with regard with texinfo
                              valid for makeinfo or texi2dvi
* Indexop::                   Command Line Option Index
* Indexvr::                   Variable Index
* Indexcp::                   Concept Index

@end menu
@end ifnottex
@c ========================================================
@node Overview
@chapter Overview

@cindex Texinfo
@cindex examples of manuals

@uref{http://www.texinfo.org,Texinfo} is the official
documentation format of the @uref{http://www.gnu.org,GNU}
project.  It uses a single source file to produce both
online information and printed output.

It is often desirable to have a way to produce
@acronym{HTML} from Texinfo sources, as GNU-Info files are
produced.  It is much simpler to run a converter than it is to
rewrite all the documentation in @acronym{HTML}, especially
considering that there is so much Texinfo documentation in
the world.

Some time ago @command{makeinfo} wasn't able to produce
@acronym{HTML} output format, but people still wanted documentation in
@acronym{HTML}.  This was the birthing hour for
@command{texi2html}.  The basic purpose of @command{texi2html}
is to convert Texinfo documents into @acronym{HTML}.

Since then, @acronym{HTML} support in @command{makeinfo} has improved, but
@command{texi2html} is still stronger in many areas, including the degree to
which it allows customization.  With @command{texi2html}, some important
aspects of the resulting @acronym{HTML} files may be specified via command
line options, and configuration files provide an even finer degree of control
over the final output, allowing most every aspect of the final output not
specified in the Texinfo input file to be specified.  Configuration files are
written in @command{perl}, like the main program, and anything which may be
specified on the command line may also be specified within a configuration
file.

For an example of the kind of pages @command{texi2html} is capable of
producing, have a look at the following sites:
@uref{http://www.singular.uni-kl.de/Manual/html/,the Singular Manual},
@uref{http://ccvs.cvshome.org/docs/manual,the Cederqvist (CVS Manual)}.

@menu
* whytexi2html::       Why @command{texi2html} and not @command{makeinfo}?.
@end menu
@c --------------------------------------------------------

@node whytexi2html
@section Why @command{texi2html} and not @command{makeinfo}?

@cindex makeinfo

You would like to produce @acronym{HTML} files from your existing Texinfo
files?  There are two programs you can use to do this.  The first is
@command{makeinfo} (@pxref{Generating HTML,,,texinfo,GNU Texinfo}).
The second is @command{texi2html}.

The design goal of @command{makeinfo}'s @acronym{HTML} output was to produce
readable @acronym{HTML} output. It is now possible to use @acronym{CSS}
for @acronym{HTML} customization. Another possibility is to use intermediate 
formats, like docbook or @command{makeinfo} @acronym{XML} 
and @acronym{XSL} stylesheets to customize the resulting document. Still the 
output produced by @command{makeinfo} isn't customizable.

The current development of @command{texi2html} tries to
provide for producing the more interesting and sophisticated @acronym{HTML}
pages that today's Internet users have come to expect.
The goal behind @command{texi2html} is to generate attractive @acronym{HTML} by
default but also to allow users considerable freedom to affect the final
style and design of the output @acronym{HTML} pages.  This is achieved via
command line options and flexible configuration files. 

@c The main disadvantage of @command{makeinfo}'s
@c @acronym{HTML} output is that it is only available as one big file.
@c This is of course readable but not very usable.  This would be hard to
@c remedy in @command{makeinfo}, as the Texinfo source has to be read in at
@c least twice to implement split nodes.  This would require a major
@c rewrite of the @command{makeinfo} source.

@c think more about this????
In contrast to the @acronym{HTML} produced by @command{makeinfo --html} (the
@command{makeinfo} program is part of the Texinfo distribution), the
@command{texi2html} program, among other differences, allows for the
customization of the entire page layout, including headers, footers, style
sheets, etc., allows for customization of the low level @acronym{HTML}
formatting, provides for splitting documents at various levels, and provides
for using the @command{latex2html} program to convert @code{@@tex} sections of
the Texinfo source.

The focus on @acronym{HTML} is still present but with the help of the
customization files it is now possible to use @command{texi2html} to
produce other formats as well. @command{texi2html} may for example be
turned into a texinfo to roff translator with the help of a customization file 
provided with the distribution.

@command{texi2html} should reasonably convert all Texinfo
4.8 constructs.  If you find it does not, please send a bug report to the
@email{texi2html-bug@@nongnu.org} email list.

@c ========================================================
@node Obtaining texi2html
@chapter Obtaining @command{texi2html}
@cindex downloading @command{texi2html} source
@cindex @command{texi2html} source, downloading
@cindex source code for @command{texi2html}, downloading

The latest version of the source code for @command{texi2html} should be
available from
@uref{http://www.nongnu.org/texi2html/,www.nongnu.org/texi2html/}.
@command{texi2html} is also available with 
@uref{http://www.tug.org/teTeX/,teTeX} and 
@uref{http://www.tug.org/texlive/, TeX Live}.

@c ========================================================
@node Installation
@chapter Installation of @command{texi2html}
@cindex Installation
@cindex configure

@menu
* Requirements::
* Configuring and rebuilding::
* Installing::
* Advanced build features::
@end menu

@node Requirements
@section Requirements

To install @command{texi2html}, you must first obtain a copy of the
source distribution.  @xref{Obtaining texi2html}.

@command{texi2html} requires @command{perl} version 
5.00405 or above to be run. An older perl 5 version with 
@code{File::Spec} is also likely to work.  The current version has 
been lightly tested on a wide range of perl, but has not been 
tested extensively on versions of @command{perl} below 5.6.
To play nice with encodings you 
also need the @code{Encode} and @code{Unicode::Normalize} modules.

To rebuild the script perl isn't required in most cases. For more
information about advanced build features, see @ref{Advanced build features}.

@node Configuring and rebuilding
@section Configuring the source and rebuilding

@command{texi2html} is a standard Automake-based distribution.
If you have a source version, you should run @command{./configure}
to configure the sources and @command{make} to build the script.  

@command{./configure}
accepts options to select the installation directory for the @file{texi2html}
file, the default directories @command{texi2html} will use to look for
configuration files, and other details.  Run @command{./configure --help} for
more information.
Running @command{./configure} creates @file{texi2html_configured.pl} from
@file{texi2html.pl}, and also builds the @command{make} configuration
files (@file{Makefile}s).

Running @command{make} combines five files into the final
@file{texi2html} program file:
@itemize
@item @file{texi2html_configured.pl} contains the base program,
@item @file{MySimple.pm} handles the command line options, 
@item @file{texi2html.init} is the default configuration file, and 
@item @file{T2h_i18n.pm} is used for internationalization.
@item @file{translations.pl} contains the translations of the strings used in
documents.
@end itemize

Running @command{make} also rebuilds the documentation if needed.
 
@node Installing
@section Installing

@command{make install} performs the installation to the locations specified to
the @command{./configure} script.  This usually involves placing the actual
@file{texi2html} file someplace in your path, such as @file{/usr/local/bin} or
@file{/usr/bin}.

Installing @command{texi2html} in your path should be sufficient 
to run it.  To use default initialization files, or a configuration file for
La@TeX{}2HTML when using @command{latex2html} to convert @code{@@tex} sections
(@pxref{Expanding TeX regions}), install them in the package data directory
specified to configure.  This is @file{/usr/local/share/texi2html/} by default,
but depends on the value of the @longopt{pkgdatadir=@var{dir}} option passed to
the @command{./configure} script. Files used for strings customization and
internationalization are also searched for in the @file{i18n} directory
of this directory. @xref{Using init files} for more. 

@node Advanced build features
@section Advanced build features

This section documents features that are unlikely to be used but deserve
a bit of documentation. 

A @command{./configure} switch, 
@longopt{with-unicode} allows to choose whether the unicode code should
be used or not. The default is to detect it with a test. This
code requires @code{Encode} and @code{Unicode::Normalize} modules.

A similar @command{./configure} switch, 
@longopt{with-unidecode} allows to choose whether the perl module
@code{Text::Unidecode} should be used or not. The default is to detect it 
with a test. This code requires the @code{Text::Unidecode} module.

@command{perl} isn't 
needed to build the script. the script is build by @file{./configure} 
and a shell script launched by @command{make} which is a simple 
wrapper around a @command{sed} one-liner. The @command{perl} command
can be specified with the environment variable @code{$PERL}, otherwise
it is detected. @command{perl} is required to rebuild the documentation
as the @acronym{HTML} documentation is rebuild with @command{texi2html}
itself.

The translations are managed by a script @command{manage_i18n.pl}, created
by @command{./configure}. @command{manage_i18n.pl} requires 
@code{Data::Dumper} to function normally. If this module isn't there 
@command{./configure} detects it and @command{manage_i18n.pl} doesn't
really rebuild the translations, but only copy files. It is possible
to use the @command{./configure} switch @longopt{enable-translations}
to override the @command{./configure} detection. For more about 
translations, see @ref{Internationalization}.

It is possible to build from outside of the source directory, for example
the following should work:

@example
tar xzvf texi2html-@value{VERSION}.tar.gz
mkdir texi2html_build
cd texi2html_build
../texi2html-@value{VERSION}/configure && make
@end example

All these features enables to build @command{texi2html} on a platform 
in order to run it on another platform, a kind of cross-building. The 
@command{./configure} switches and @code{$PERL} allows to specify 
everything needed for the build of the @command{texi2html} script.

@c ========================================================
@node Invoking texi2html
@chapter Invoking @command{texi2html}

To produce an @acronym{HTML} manual, run @command{texi2html} with a Texinfo
file as an argument.  For example, this manual is created with:

@example
$ texi2html texi2html.texi
@end example

@command{texi2html} can accept more than one manual on the command line, and
will proceed with each of the manuals in turn.

The behaviour of @command{texi2html} may be changed with command line
options.  These command line options are always associated with corresponding
@command{perl} variables which may appear in init files, and these 
variables are presented in this chapter each time a switch is described. 

Boolean command line switches always have a corresponding negated switch,
obtained by prepending @samp{no} or @samp{no-} to the switch name. For example
@c PAT maybe it should be better to have @option{--nomenu} and @option{--menu}
@c as it is not needed and maybe harmfull to have an index entry for these
@c options here
@longopt{nomenu} does the reverse of @longopt{menu}.

When more than one manual is processed, the command line apply to all the 
manuals, except for command-line switches setting the output file names.

@menu
* General options::
* Splitting output::          The @acronym{HTML} output may be split at 
                              different levels
* Output files::
* Expansion::
* Texinfo related options::
* Page layout options::       Customizing page layout
* Style options::             Customizing the @acronym{HTML} and text style
* Expanding TeX regions::
* Using init files::          Specifying initialization files for fine tuning
@end menu

@c --------------------------------------------------------
@node General options
@section General options

Miscellaneous general options:
@table @asis
@item @longopt{error-limit=@var{num}}
Quit after @var{num} errors (default 1000), (variable @variable{$ERROR_LIMIT}).
@item @longopt{help}
Display a short help and exit.
@item @longopt{verbose}
Be verbose.
@item @longopt{version}
Display version information and exit.
@end table

@c --------------------------------------------------------
@node Splitting output
@section Specifying where to split the generated document

The @acronym{HTML} manual resulting from the processing of the Texinfo source
may be split into files at different levels.  This is specified with the
option @longopt{split} which takes an argument, namely the level of splitting
(variable: @variable{$SPLIT}). This level may be: 

@table @asis
@item @samp{chapter}
The document is split at @code{@@chapter}, @code{@@appendix}, or @code{@@unnumbered}.
@item @samp{section}
The document is split at the same places as it is using the @samp{chapter}
argument, and also at @code{@@section}, @code{@@appendixsec} or
@code{@@unnumberedsec}.
@item @samp{node}
The document is split at every sectioning command.  It is not necessarily 
split at each node, if the @code{@@node} structure doesn't correspond with
the sectioning command structure (see below).
@item @samp{none}
The document isn't split.  This is the default.
@end table

There are two kinds of commands which may be used to define sectioning
elements in Texinfo: @code{@@node} and the structuring commands (@code{@@top},
@code{@@section}, @code{@@appendixsubsec},  and so on).  A node just preceding
a structuring command is considered to be part of the same sectioning element
as that command.  If the @code{@@node Top} isn't associated with a structuring
command it also defines a sectioning element.

By default, nodes which aren't associated with a structuring command are not
considered to be sectioning commands.  They are always considered to be part
of a sectioning element defined by a structuring command.  It is possible to
change this behaviour via the @longopt{use-nodes} option (variable
@variable{$USE_NODES}).  In this case, nodes not associated with structuring
commands are also considered to be sectioning commands defining a sectioning
element. 

This default behaviour mimics @command{texi2dvi} behaviour, which ignores 
@code{@@node} commands for the purprose of sectioning, while the second
looks like @command{makeinfo} behaviour (@pxref{Two Paths,,,texinfo,GNU Texinfo}). 

As an illustration, the following table shows how a sample Texinfo document is
divided into sectioning elements when @longopt{use-nodes} is used and not:

@multitable @columnfractions .2 .1 .2 .1 .2
@item Texinfo code
@tab
@tab
default case
@tab
@tab
with @longopt{use-nodes}
@item
@*
@*
@example
@@node node1
@@chapter node 1
node1 text

@@node node2
node2 text

@@node node3
node3 text
@@chapter node 3
chapter text
@end example
@tab
@tab
first element:

@example
@@node node1
@@chapter node 1
node1 text

@@node node2
node2 text
@end example

second element:

@example
@@node node3
node3 text
@@chapter node 3
chapter text
@end example

@tab
@tab
first element:

@example
@@node node1
@@chapter node 1
node1 text
@end example

second element:

@example
@@node node2
node2 text
@end example

third element:

@example
@@node node3
node3 text
@@chapter node 3
chapter text
@end example

@end multitable

@c --------------------------------------------------------
@node Output files
@section Setting output file and directory names

The manual name is constructed by stripping the @samp{.texi},
@samp{.txi}, @samp{.texinfo}, or @samp{.txinfo} extension from the Texinfo file
name. 

By default, @command{texi2html} generates the manual file in the current 
directory if the manual isn't split. A @samp{.html} file extension is appended
to the manual name.

If the manual is split the files are put in a directory named after the
manual name. The file name is constructed using the manual name as basename.
An underscore followed by a number is appended
to the basename for each files corresponding with sectioning elements, with the
exception of the top element. For the top element there is nothing appended.
The files containing special elements pages
have an underscore and a 3 letter code corresponding to their content
(@samp{toc} for table of contents, @samp{abt} for about, @samp{ovr} for
overview, @samp{fot} for footnotes if they are separated) appended.  
Lastly, an @samp{.html} file extension is appended.

Thus, if the texinfo file @file{afile.texi} is processed and split at chapters
into 3 files, the generated files (in directory @file{afile}) will be:

@example
afile.html         --> @code{@@node Top} or @code{@@top} section
afile_1.html       --> Chapter 1
afile_2.html       --> Chapter 2
afile_toc.html     --> Table of Contents
afile_abt.html     --> About Page
@end example

This default behavior may be modified by several command line options. If the
output isn't split, the prefix file name may be overrided by the
@longopt{output} command line option (variable @variable{$OUT}). If the output
is split, and @longopt{output} is set, the files are placed in the directory
specified by the argument to the option.

The basename may be overridden with @longopt{prefix} (variable
@variable{$PREFIX}).  If @longopt{short-ext} is given, @samp{.htm} is appended
instead of @samp{.html} in the final step (variable @variable{$SHORTEXTN}).  
The @longopt{top-file} option
overrides the top element file name (variable @variable{$TOP_FILE}).  This can
be used to name the top element file @samp{index.html}.  Similarly,
@longopt{toc-file} changes the name of the table of contents file (variable
@variable{$TOC_FILE}).

Reusing the example above, but this time calling @command{texi2html} like so:

@example
$ texi2html -split chapter -prefix manual -short-ext -top-file index.htm -toc-file contents.htm afile.texi
@end example

we get, in @file{manual}:

@example
index.htm          --> @code{@@node Top} or @code{@@top} section
manual_1.htm       --> Chapter 1
manual_2.htm       --> Chapter 2
contents.htm       --> Table of Contents
manual_abt.htm     --> About Page
@end example

The file names generated by @command{texi2html} differ from those generated
by @command{makeinfo}. @command{makeinfo} uses the @code{@@setfilename}
to determine the manual name@footnote{This behaviour is triggered only by a 
variable set in an init file,  @variable{$USE_SETFILENAME} 
(@pxref{Using init files}).}. 
Also @command{makeinfo} uses the node name to construct
the file names while splitting at nodes.  

It is possible to get the same
behaviour out of @command{texi2html} by specifying the
@longopt{node-files} option (variable @variable{$NODE_FILES}).  
The default is false for this option.
If the output
isn't split at nodes, @command{texi2html} will still output files named after
the nodes, without real content but redirecting to the right file.
@c Is this true?  It wasn't in the last version.  -DRP
This trick enables the generated @acronym{HTML} manual to be a
target for the cross-references of other manuals generated by
@command{makeinfo} or @command{texi2html}. 

In case the files are named after the node names, 
another command-line option, @longopt{transliterate-file-names}
can be set to trigger ASCII transliteration of node file names 
(variable @variable{$TRANSLITERATE_NODE}). Transliteration is set in the 
default case.

@c --------------------------------------------------------
@node Expansion
@section Specifying which regions get expanded

The default for @command{texi2html} is to expand the @code{@@ifhtml}, 
@code{@@html}, and @code{@@menu} regions, all the @code{@@ifnot} regions 
except @code{@@ifnothtml}, and no other @code{@@if} regions.

It is possible to expand other regions by setting @longopt{if<region>},
where @samp{<region>} is replaced by the literal name of the region (for
example, @samp{--iftex}).  Symetrically, if @longopt{no-if<region>} is
specified, the @samp{<region>} region is ignored.  The configuration file
array, @variable{@@EXPAND}, holds the names of regions which should be 
expanded. The only region name present in @code{@@EXPAND} in the default case 
is @samp{html}. 

If @longopt{nomenu} is set, the @code{@@menu} sections are not expanded
(variable @variable{$SHOW_MENU}). The default is to expand @code{@@menu}
sections.
@c How is --no-ifhtml specified?  -DRP

@c --------------------------------------------------------
@node Texinfo related options
@section Command line options related to Texinfo language features
  
Miscalleneous Texinfo related things may be specified via command line options. 

@table @asis
@item @longopt{lang=@var{lang}}
Sets the document language similar to the Texinfo directive,
@code{@@documentlanguage @var{lang}} (variable @variable{$LANG}).
The default is @samp{en}, that is, use the english language strings.
@item @shortopt{D@var{var}}
Sets @var{var}.  Equivalent to, @code{@@set @var{var} 1}, in Texinfo.
@item @shortopt{U@var{var}}
Clears @var{var}.  Equivalent to, @code{@@clear @var{var}}, in Texinfo.
@item @shortopt{P@var{dir}}
Prepend @var{dir} to the list of directories to search for
@code{@@include} files (the associated array is @variable{@@PREPEND_DIRS},
empty in the default case).
@item @shortopt{I@var{dir}}
Append @var{dir} to the list of directories to search for 
@code{@@include} files (the associated array is @variable{@@INCLUDE_DIRS},
empty in the default case).
@end table

The include files are always searched for in the current directory.

@c --------------------------------------------------------
@node Page layout options
@section Page layout related command line options

If the @longopt{frames} option is specified, @acronym{HTML} frames 
are used.  A file describing the frame layout is generated, and the
document page is associated with a frame where the short table of
content appears (variable @variable{$FRAMES}). The default is not
to use frames.

It is also possible to suppress the section navigation panel with
@longopt{no-headers} (variable @variable{$SECTION_NAVIGATION}, the default
is to output all the navigation panels), and to specify
whether footnotes should appear at the foot of the same page which contains
the reference to the note with @longopt{footnote-style} set to
@samp{end} or on a separate page with @option{--footnote-style} 
set to @samp{separate} (variable @variable{$SEPARATED_FOOTNOTES} set to 0 
or 1).
The default is to have separated footnotes.

@c --------------------------------------------------------
@node Style options
@section Customizing the @acronym{HTML} and text style

@cindex @acronym{CSS}

Miscalleneous style changes may be achieved with command line options. 

@table @asis
@item @longopt{doctype=@var{DTD}}
@itemx @longopt{frameset-doctype=@var{DTD}}
You can specify the document DTD by setting these options. 
@longopt{frameset-doctype} applies to the file describing the frames when 
frames are used (corresponding variables are @variable{$DOCTYPE} and 
@variable{$FRAMESET_DOCTYPE}).

The default for the document doctype is:
@example
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html401/loose.dtd">
@end example
And for the frameset doctype:
@example
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html401/frameset.dtd">
@end example

@item @longopt{iso}
If this option is set, ISO8859 entities are used for some special symbols,
like Copyright @copyright{} (variable @variable{$USE_ISO}). It is the default.

@item @longopt{css-include=@var{file}}
This command line switch provides for the inclusion of an external
Cascading Style Sheet (@acronym{CSS}) file.  More than one file may be
specified, and @samp{-} stands for the standard input (array
@variable{@@CSS_FILES}). 

The option use is the same than for @command{makeinfo} and is described
extensively in @ref{HTML CSS,,,texinfo,GNU Texinfo}.
Briefly, the @acronym{CSS} @code{@@import} lines from the external file
@acronym{CSS} file are pasted  before the
@c What does this mean?  I don't think I clarified this one much.  -DRP
@c Is it better ? -PAT
@command{texi2html} @acronym{CSS} rules, and the external file @acronym{CSS}
rules are pasted after the @command{texi2html} @acronym{CSS} rules.  

@item @longopt{css-ref=@var{URL}}
This command line switch provides for the inclusion of an reference
to a Cascading Style Sheet (@acronym{CSS}) URL.  More than one URL may be
specified (array @variable{@@CSS_REFS}). 

@item @longopt{html-xref-prefix=@var{path}}
This option sets the base directory for external @acronym{HTML} texinfo manuals 
(variable @variable{$EXTERNAL_DIR}).  Defaults to @samp{../}.

@item @longopt{def-table}
If this option is set, @acronym{HTML} tables are used to format definition 
commands, rather than @acronym{HTML} definition tables (variable
@variable{$DEF_TABLE}). Default is false.

@item @longopt{short-ref}
If this option is set, cross-references are given without section numbers
(variable @variable{$SHORT_REF}). Default is false.

@item @longopt{number-sections}
If this option is set, sections are numbered (variable
@variable{$NUMBER_SECTIONS}).  This is the default.

@item @longopt{toc-links}
If this option is set, links from headings to @acronym{TOC} entries are
created (variable @variable{$TOC_LINKS}). Default is false.
@end table

@c --------------------------------------------------------
@node Expanding TeX regions
@section Expanding @code{@@tex} and @code{@@math} regions using La@TeX{}2HTML

It is possible to use @uref{http://www.latex2html.org/,La@TeX{}2HTML}  
to process @code{@@tex} regions and @code{@@math@{@}} commands.  This is an
attractive way to display mathematical constructs in the @acronym{HTML}
manual.  The @longopt{l2h} option activates this feature (variable
@var{$L2H}).  It is usually desirable to expand @code{@@tex} sections when this
option is specified (@pxref{Expansion}). The default is not to use this
feature.

The @longopt{l2h-l2h=@var{program}} option enables changing the name/location
of the La@TeX{}2HTML program processing @TeX{} regions (variable
@variable{$L2H_L2H}). The default is @command{latex2html}.

@longopt{l2h-tmp} sets the directory used for temporary
files, this name shouldn't contain a dot @samp{.}
@c Why not?  -DRP
(variable is @variable{$L2H_TMP}). Defaults to the current dir.

The file specified by @longopt{l2h-file} is
used as La@TeX{}2HTML init file. It is searched at the same places than
init files (@pxref{Using init files}), and the default is @file{l2h.init}.

@c --------------------------------------------------------
@node Using init files
@section Use initialization files for fine tuning

@cindex internationalization
@cindex @file{Config}

Initialization variables are read first from
@file{/usr/local/share/texi2html/Config} (the exact location being
changeable with the @longopt{pkgdatadir=dir} option of the
@command{configure} script, see @ref{Installation}),
@file{/usr/local/etc/texi2html/Config} (the exact location being
changeable with the @longopt{sysconfdir=dir} option of the
@command{configure} script, see @ref{Installation}), from @file{./Config}
then from @file{$HOME/.texi2html/Config}. Any command-line option 
can override the corresponding option set in init file, and the 
option @longopt{init-file} specifies an init file to be loaded, with 
later settings overriding earlier ones.

The init files specified with @longopt{init-file} are searched
first in the current directory, then in the @file{$HOME/.texi2html/}
directory, in the @file{/usr/local/etc/texi2html/} directory and lastly 
in the @file{/usr/local/share/texi2html/} directory.

A file is also included based on the language selected,
by @variable{$LANG}, @longopt{document-language} or 
@code{@@documentlanguage}.
If no language was selected @samp{en} is considered to be
the language. All the files with name the language name in 
@file{/usr/local/share/texi2html/i18n/}, 
@file{/usr/local/etc/texi2html/i18n/},
@file{$HOME/.texi2html/i18n/} and then @file{./i18n/} are included.

The default initialization options are defined in the
@file{texi2html.init} file contained in the @command{texi2html}
distribution (which gets included near the beginning of the
@command{texi2html} script that gets installed).

To customize @command{texi2html} it is best if you copy the
appropriate sections from the @file{texi2html.init}
contents into an appropriate local initialization file,
make the necessary changes there, and then have
@command{texi2html} read this initialization file by one of
the means described above.

Some init files are provided with @command{texi2html}, for example
@file{book.init} which produces an output more in line with 
what could be in a book, or @file{chm.init} outputs files
that can be used to produce a CHM file.

@c ========================================================
@node Initialization files
@chapter Overview of initialization files content and loading

The initialization files are @command{perl} files, read as explained 
in @ref{Using init files}. You don't need to know much of @command{perl}
to do some simple changes in variable values, however, to be able to 
really take advantage of all the features of the initialization file,
a good knowledge of @command{perl} is required.

In initialization file two kind of variables appear. These are normal
variables (including arrays and hashes) and references on functions. 
The later permits the dynamic redefinition of functions used to produce
the @acronym{HTML} manual. You should be able to change the value of some  
normal variables without a deep knowledge of @command{perl}, by looking
at the existing examples. The possible mistakes in that case could be
omitted @samp{;}, and bad quoting.

Initialization file are loaded from the main program by
the mean of a @code{require}, while in the @code{Texi2HTML::Config}
namespace. This means that the namespace of the main program and
the namespace of initialization files are distinct, which ensures
that no name clash should happen. The variables are declared with
@code{use vars}, such that it should be possible to use the 
@code{use strict} pragma in the initialization file code.

To avoid messing with the variables in the @code{main} namespace
all the global variables which could be of use in the init files 
are in the @code{Texi2HTML} namespace. Notice that the functions 
of the main program are still in the @code{main} namespace.

Since @command{texi2html} can proceed more than one file on the
command line, you should make sure that you initialize the variables
that are used during a manual formatting. The handlers explained
later can be used for that (@pxref{Bypassing normal formatting}).

@menu
* Encodings::                 Setting the encodings.
* Redefining functions::      Function redefinition is achieved with 
                              redefinition of references on functions.
* Function prototypes::       Conventions used in that manual for function 
                              reference prototypes display.
@end menu

@c --------------------------------------------------------
@node Encodings
@section Setting the encodings

There are four encodings relevant for @command{texi2html}, they are
associated with corresponding configuration variables. If these 
variables are defined they
determine a corresponding value in @code{%Texi2HTML::THISDOC}
which is otherwise autodetected:
@enumerate 
@item The variable @variable{$DOCUMENT_ENCODING} corresponds with 
the document encoding.
If defined, this variable sets 
@variable{$Texi2HTML::THISDOC@{'DOCUMENT_ENCODING'@}}.
If not defined, the encoding appearing in @code{@@documentencoding} will
be used to set @variable{$Texi2HTML::THISDOC@{'DOCUMENT_ENCODING'@}}.
The @code{@@documentencoding} value appears in 
@variable{$Texi2HTML::THISDOC@{'documentencoding'@}}.
@item The texinfo files encoding.
If @variable{$IN_ENCODING} is set, this sets 
@variable{$Texi2HTML::THISDOC@{'IN_ENCODING'@}}.
Otherwise, when @code{$Texi2HTML::THISDOC@{'DOCUMENT_ENCODING'@}}
is set, @code{$Texi2HTML::THISDOC@{'IN_ENCODING'@}} is also set
if the encoding is supported by perl.
@item The out files encoding. It is associated with the variable
@variable{$OUT_ENCODING}. If defined, 
@variable{$Texi2HTML::THISDOC@{'OUT_ENCODING'@}} is set accordingly.
If not defined, the value of
@code{$Texi2HTML::THISDOC@{'ENCODING_NAME'@}} 
or 
@code{$Texi2HTML::THISDOC@{'IN_ENCODING'@}}
is used if one of these variables is set.
@item The encoding advertized in out files, associated with the variable
@variable{$ENCODING_NAME}. It sets 
@variable{$Texi2HTML::THISDOC@{'ENCODING_NAME'@}} if defined.

If unset the value of this variable is based on the
other ENCODING values, and if they are all undefined, the variable
@variable{$DEFAULT_ENCODING} is used.
@end enumerate

The values for the encoding related variables are set in the default 
@code{init_out} function reference (@pxref{Output initialization}).

In general the @code{$DOCUMENT_ENCODING} and @code{$IN_ENCODING} are
set to the right values. @code{$OUT_ENCODING} is also rightly set
according to @code{$ENCODING_NAME}. 
To force a given encoding for the output, the
@code{$ENCODING_NAME} value may be set. The current default output encoding
is UTF-8. 

@c --------------------------------------------------------
@node Redefining functions
@section Redefining functions in initialization files

To redefine a function you must replace the corresponding funtion
reference with a reference on your function. 
Thus you should write your function, give it a name you
are certain it is unique in the @code{Texi2HTML::Config} namespace,
and override the value of the function reference with your own 
function reference. When another function from the main program
(or from another functions of an initialization file) calls the reference,
your function will be used. 

For example the function
reference corresponding with the function called when doing an
anchor is called @code{$anchor}. Thus if you want to override the
corresponding function
you could write:

@example
# override the function reference
$anchor = \&my_own_function;

# the function reference now refers to
sub my_own_function @{
# process arguments and return an html anchor
@}
@end example

@c --------------------------------------------------------
@node Function prototypes
@section Conventions used for function prototypes

As the functions are defined by a reference name, we will always
use the reference name in function prototypes. For the function arguments
we will use @code{\@@array} for a reference on an array and similarly 
@code{\%hash} for a reference on a hash.

Thus, the prototype for the function associated with the function
reference @samp{$formatting_function} will be:

@deftypefn {Function Reference} $text formatting_function $arg1 \@@arg2
@code{formatting_function} takes as first argument @var{$arg2},
as second argument a reference on an array @var{\@@arg2}
and returns the formatted text @var{$text}.
@end deftypefn

To redefined the corresponding function, you should write:

@example
$formatting_function = \&my_formatting_function

sub my_formatting_function($ $)
@{
    my $arg1 = shift;
    my $arg2 = shift;
    # prepare $formatted_text
    .....
    return $formatted_text
@}
@end example

@c --------------------------------------------------------
@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@c ========================================================
@c @include custpage.texi
@node Changing the page layout
@chapter Fine tuning of the page layout

Some features of the page layout might be specified with command line
options, the corresponding variables are described in 
@ref{Page layout options}.
Fine tuning of the page layout may be achieved
with redefinition of other variables and function references in the 
initialization files.

@menu
* The different pages::       The different categories of pages.
* The page layout::           The elements of a page.
* Navigation panel::          How to change the navigation panel.
* Program variables::         The available main program variables and some 
                              usefull functions from the main program.
* Output initialization::     Setting variables before the document
                              production but after the texinfo parsing.
* Output finalization::       Cleaning after document generation.
* css::                       Customizing css lines.
* Customizing header::
* Customizing section::
* Customizing footer::
* Special pages::             Customizing table of contents, top, about page.
* File and target names::     Customizing the file and target names.
* External index files::      Putting index entries in external files.
@end menu

@c --------------------------------------------------------
@node The different pages
@section The different categories of pages and sectioning elements

The following sectioning elements can be associated with pages:

@table @emph
@item Normal elements
These are normal sections or nodes. Their association with pages is
determined by the splitting of the document. @xref{Splitting output}.
@item Top element
The top element is the higher element in the document structure.
If there is a @code{@@top} section it is the element associated with
that section. Otherwise it is the element associated with the 
@code{@@node Top}. If there is no @code{@@node Top} the first element is the 
top element.

The top element is formatted differently than a normal element if there
is a @code{@@top} section or the @code{@@node Top} isn't associated 
with a sectioning command.
@item Misc elements
These elements are associated with pages if the document is split.
There are four misc elements:
@enumerate
@item Table of contents
@item Short table of contents, also called Overview
@item Footnotes page
@item About page
@end enumerate

The @emph{About page} shouldn't be present for documents consisting
in only one sectioning element, or for documents unsplit and without
navigation information. The @emph{Footnote page} should only
be present if the footnotes appear on a separated page 
(@pxref{Page layout options}), however a footnote element is present if
the document isn't split. The @emph{Table of contents} should only
be formatted if @code{@@contents} is present in the document.
Similarly the @emph{Overview} should only appear if @code{@@shortcontents}
or @code{@@summarycontents} is present. The Table of contents and 
the Overview may also be directly included within the document, not
as separate pages (@pxref{Contents and Overview text}).
@end table

@c --------------------------------------------------------
@node The page layout
@section Page layout and navigation panel overview

A page is broken up in three parts. A page header, the sections 
and a page footer. A common element in the page layout is a navigation
panel with icons or text linking to other sections or pages. Another
common element is a rule, separating sections or footer. The navigation
panel and the rules may be part of the sections or part of headers or
footers. You may use the variables @variable{$SMALL_RULE}, 
@variable{$DEFAULT_RULE}, @variable{$MIDDLE_RULE} and @variable{$BIG_RULE} 
for rules of different sizes.
The defaults are 
@example
$SMALL_RULE = '<hr size="1">';
$DEFAULT_RULE = '<hr>';
$MIDDLE_RULE = '<hr size="2">';
$BIG_RULE = '<hr size="6">';
@end example 

In the header some important meta data may be defined, like the
title or style information, and textual informations may be present
in comments. All this doesn't appear directly in the displayed 
@acronym{HTML}, though.

The page layout is mainly controlled by functions, the precise functions 
called depending on the document splitting. The navigation panel, however,
can be customized with variables.

@subheading Element labels
@anchor{Element labels}

There are 19 items associated with elements. Each of these
is associated with a name and a reference to the 
element they represent, when such an element exists. 
The element is either a global element or an element relative to the current
element. The relative elements are found with respect with the document
structure defined by the section structuring commands (@code{@@chapter}, 
@code{@@unnumbered}@dots{}) or by the nodes (in that case the node 
directions are specified on node line or in menu organization).
These items are called @dfn{element labels}. They may be associated with 
a button (@pxref{Button specifications}), and used in the formatting functions 
(@pxref{Program variables}).

Here is the list:

@table @emph
@item @samp{@ }
An empty button
@item Top
Top element. The associated name is @variable{$TOP_HEADING} if that variable is 
defined. This variable is not set by default.
@item Contents
Table of contents
@item About
About (help) page
@item Overview
Overview, short table of contents
@item First
First element in reading order
@item Last
Last element in reading order
@item Index
The first chapter with @code{@@printindex}. The associated name 
is  @variable{$INDEX_CHAPTER}, if the variable is set. This variable is not set
by default.
@item This
The current element
@item Back
Preceding element in reading order
@item FastBack
Beginning of this chapter or previous chapter if the element is a chapter
@item Prev
Previous section on the same level 
@item NodePrev
Previous node
@item Forward 
Next element in reading order
@item FastForward
Next chapter
@item Next
Next section on the same level
@item NodeNext
Next node
@item Following
Next node in node reading order
@item Up
Up section
@item NodeUp
Up node
@item FileNext
Forward element first in the next page (or file)
@item FilePrev
Backward element first in the previous page (or file)
@end table

@c --------------------------------------------------------
@node Navigation panel
@section Customization of the navigation panels buttons

A lot of customization of the navigation panel may be achieved without
redefining functions, with variables redefinition. 
In case it isn't enough, it is also possible to redefine the function 
doing the navigation panel formatting.

@menu 
* General purpose variables::      Variables controlling the navigation panel
                                   at a global level
* Button specifications::
* Panel formatting function::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node General purpose variables
@subsection Controlling the navigation panel panel at a high level

The global formatting of the navigation panels may be
changed with the following variables:

@vtable @code
@item $VERTICAL_HEAD_NAVIGATION
A vertical navigation panel will be used for the header navigation 
panel if this variable is true.
@item $ICONS
Icons are used instead of
textual buttons if this variable is true.
@item $SECTION_NAVIGATION
If this variable is false there is no section navigation, no navigation 
panels for the elements within the pages, only at 
the beginning and the end of the page (@pxref{Page layout options}).
@end vtable

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Button specifications
@subsection Specifying the buttons formatting

Several arrays and hashes enable a precise control on the buttons and 
their display. 
The following arrays determine the buttons present in navigation panels:

@vtable @code
@item @@SECTION_BUTTONS
This array is used for the navigation panel buttons present at the begining
of sectioning elements. If split at node or section they are also used 
at the page footer, and in the case of section navigation at the page header.
@item @@SECTION_FOOTER_BUTTONS
@itemx @@NODE_FOOTER_BUTTONS
This array is used for the navigation panel buttons present at the footer
of pages when split at node or at section. 

If @variable{$WORDS_IN_PAGE} is set and the output is split at nodes, these 
buttons are only present if there are more than @variable{$WORDS_IN_PAGE}
words in the sectioning element text. This counting is very rough and include
punctuation marks, html elements, numbers.  The default is to include the
buttons after 300 words.
@item @@CHAPTER_BUTTONS
This array is used for the buttons appearing at the page footer if split at 
chapter, and at the page header if split at chapter and there is no section
navigation.
@item @@MISC_BUTTONS
These buttons appear at the beginning of special and sections  
and at the end of these section pages if the output is split.
@item @@LINKS_BUTTONS
These are used for @code{<link>} elements if they are output in the
headers.
@end vtable

The array specify the buttons displayed in navigation panels, 
and how the button is displayed.
Each element is associated with
a button of the navigation panel from left to right.
The signification of the array element value is the following:

@table @emph
@item reference on a function
The function is called with argument a boolean true if the navigation 
panel should be vertical. Should return the formatted button text.
@item reference on a scalar
The scalar value is printed. For some possibly
usefull scalars, @ref{Elements hashes}.
@item reference on an array
In this case the first array element should be a reference on text and the 
second element an element label. In that case a link to the 
element associated with the element label with the scalar value
text is generated.

For example if the buttons array element is
@example
[ 'Next', \$Texi2HTML::NODE@{Next@} ] 
@end example

The button will be a link to the next section with text 
@variable{$Texi2HTML::NODE@{Next@}}.
@item element label
If icons are not used, the button is a link to the corresponding
element which text is defined by the value associated with the 
element label in the @variable{%NAVIGATION_TEXT} hash, surrounded
by @samp{[} and @samp{]}. If the element label is @samp{ }, there is
no @samp{[} and @samp{]}. 
The element of the @code{%NAVIGATION_TEXT} hash are defined 
dynamically, in the @code{init_out} function reference
(@pxref{Output initialization}).

If icons are used, the button is an image with file determined by
the value associated with the element label in the @variable{%ACTIVE_ICONS}
hash if the the link really leads to an element, or in the @variable{%PASSIVE_ICONS}
hash if there is no element to link to. Of course if there is a link to the 
element the icon links to that element. The button name and 
the button description are used in HTML attributes to have a textual 
description of the icon. The corresponding strings are in 
@variable{%BUTTONS_NAME}  for the button name and  @code{%NAVIGATION_TEXT}
for the description.
@end table

If @variable{$USE_ACCESSKEY} is set, the @code{accesskey} attribute 
is used in navigation. In that case the @variable{%BUTTONS_ACCESSKEY} 
hash is used for the access key.

Similarly, if 
If @variable{$USE_REL_REV} is set, the @code{rel} attribute is used 
in navigation. In that case the @variable{%BUTTONS_REL} hash is used for 
the rel attribute.


@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Panel formatting function
@subsection Changing the navigation panel formatting

If you are not satisfied with this scheme, it is possible to
control exactly the formatting of navigation panels by redefining a function 
reference. The function controlling the display of navigation panel is 
associated with the following function reference:

@deftypefn {Function Reference} $navigation_text print_navigation \@@buttons $vertical
@var{\@@buttons} is an array reference which should hold the specification of 
the buttons for that navigation panel. @var{$vertical} is true if the 
navigation panel should be vertical.
Returns the formatted navigation panel in @var{$navigation_text}.
@end deftypefn

@c --------------------------------------------------------
@node Program variables
@section Main program variables and usefull functions

In the functions 
controlling the page layout some global variables set by the main
program are available, with value corresponding with the current
layout element.

@menu 
* Elements hashes::             Accessing information related with the 
                                different elements   
* Global informations::         Accessing global informations, like date, 
                                title@dots{}
* Global functions::            main program usefull functions
@end menu


@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Elements hashes
@subsection Accessing elements informations

Four hashes are available, with key the elements labels (as described
in @ref{Element labels}) and values:

@vtable @code
@item %Texi2HTML::NAME
The formatted element name
@item %Texi2HTML::HREF
The element hypertext reference
@item %Texi2HTML::NODE
The element node name
@item %Texi2HTML::NO_TEXI
The element name after removal of texi commands
@end vtable

If @variable{$USE_NODE_TARGET} is set, the node anchors are used as 
target for the section HREF, if there is a node associated to
that section.

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Global informations
@subsection Accessing global informations

Three kinds of global informations are available, miscalleneous global
strings, flags set by @code{@@set} and special flags and section lines.

@subsubheading Global strings
The @variable{%Texi2HTML::THISDOC} hash holds some global informations:

@table @code
@item fulltitle
title set by @code{@@settitle}. If there is no @code{@@settitle} other 
possibilities are tried (@code{@@title}, @code{@@shorttitlepage}@dots{}).
@item fulltitle_no_texi
fulltitle without texi formatting
@item fulltitle_texi
fulltitle with texi commands
@item title
@c title set by @code{@@settitle}, or @code{fulltitle}.
title set by @code{@@title}.
@item title_no_texi
title without texi formatting
@item title_texi
title with texi commands
@item author
Authors list set by @code{@@author}.
@item authors
A reference on an array containing each author set by @code{@@author}.
@item copying_comment
Text appearing in @code{@@copying} with all the texinfo commands removed,
put in comments.
@item program
The name and version of @command{texi2html}.
@item program_homepage
Homepage for @command{texi2html}.
@item program_authors
Authors of @command{texi2html}.
@item file_base_name
base name of the texinfo manual file.
@item filename
This is a reference on a hash that holds the filenames for special elements.
These files may not be used in certain cases, for example the @code{toc}
element file name may not be relevant if table of contents is not output 
separately.
The keys are
@table @code
@item doc
the document file if not split, if split should be the top element file. 
@item top
Top element file name.
@item toc 
Table of contents element file name.
@item stoc
Overview (also called short table of contents) element file name.
@item about
About element file name.
@item foot
Footnotes element file name.
@item frame
Main frame file.
@item toc_frame
Table of contents frame file name.
@end table
@item input_file_name
Name of the texinfo manual file given on the command line.
@item destination_directory
Destination directory for the resulting files.
@item extension
Extension for the output files.
@item toc_file
The file name of the table of contents, should always be valid, even 
when table of contents are output directly in the document.
@item inline_contents
A reference on a hash containing two key, one for each type of table
of contents:
@table @code
@item contents
The associated value is a 
reference on an array containg the line resulting from formatting
the table of contents, including a heading and a reference.
@item shortcontents
The associated value is a 
reference on an array containg the line resulting from formatting
the short table of contents, including a heading and a reference.
@end table
@item today
The date. May be overriden by @code{$DATE}.
@item user
The user running @command{texi2html}. Maybe overriden by @code{$USER}.
@item css_import_lines
reference on an array containing the @code{@@import} lines of 
@acronym{CSS} files.
@item css_lines
reference on an array containing the normal lines of 
@acronym{CSS} files.
@end table

It also holds the arg of the following commands, associated with the command 
name: kbdinputstyle, paragraphindent, setchapternewpage, headings,
footnotestyle,
 exampleindent, firstparagraphindent, everyheading, everyfooting,
 evenheading, evenfooting, oddheading, oddfooting, setcontentsaftertitlepage,
setshortcontentsaftertitlepage, frenchspacing.
If the command doesn't have any arg, it will be true is it was set.


@subsubheading Flags
Flags defined by @code{@@set} may be accessed through the 
@variable{%main::value} hash. The key is the flag name, the value is the
flag value at the end of the document. 

Special flags are set by the main program. They correspond with a texinfo
command, like @code{@@setfilename}, or @code{@@settitle}, 
@code{@@author}@dots{} The corresponding flag is the command name with 
@samp{_} appended, for example, @code{_titlefont} corresponds with 
@code{@@titlefont}. Like other flags they are available in 
@variable{%main::value}.


@subsubheading Section lines

The following array references or arrays holds formatted lines:

@vtable @code
@item $Texi2HTML::THIS_SECTION
Lines of the current element.
@item $Texi2HTML::OVERVIEW
Lines of short table of contents. @xref{Special pages}.
@item $Texi2HTML::TOC_LINES
Lines of table of contents. @xref{Special pages}.
@item $Texi2HTML::TITLEPAGE
The title page formatted with special title commands (@code{@@author},
@code{@@title}) expanded. @xref{Title page}.
@end vtable

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Global functions
@subsection Function usefull in page formatting

The usefull function is a function used to print an array of lines, which 
also counts the number of words in the array, if needed.

@deftypefun $words_number  main::print_lines $filehandle \@@lines_array
@var{$filehandle} is the opened filehandle the function should write to.
@var{\@@lines_array} is the array line the function should write to the file.
If this argument is omitted, the function uses @variable{$Texi2HTML::THIS_SECTION}.
@var{$words_number} is the number of words in the array, only defined if
split at nodes and @variable{$WORDS_IN_PAGE} is defined.
@end deftypefun

@c --------------------------------------------------------
@node Output initialization
@section Preparing the output

After the texinfo file has been parsed, some information is available
which can be used to modify some variables and prepare the outputting.
For example the document language, the document encoding, 
values set with @code{@@set} or @code{@@setfilename} and other similar 
@@-commands are not known before the texinfo parsing. 

The following function reference may be redefined to be called after 
texinfo processing and before document generation:

@deffn {Function Reference} init_out
This function perform the initialization of variables and any other
task before document outputting. 
@c It returns the encoding used for the
@c output files.
@end deffn

In the default case the @variable{$BODYTEXT} (@pxref{Customizing header}) 
and the hashes @variable{%NAVIGATION_TEXT},
@variable{%BUTTONS_NAME}  (@pxref{Button specifications}),   
@variable{%BUTTONS_GOTO} (@pxref{About text}) are initialized.
Indeed the initialization of these variables is dependent upon 
the document language selection. Similarly the encoding variables are set
based on the information now available (@pxref{Encodings}).

To perform the default initializations and also add more code, you could
do as in the following example (save the default function reference and call 
it in your own function) :

@example
my $default_init_out = $init_out;
$init_out = \&makeinfo_like_init_out;
sub makeinfo_like_init_out() 
@{
   &$default_init_out();
   $NAVIGATION_TEXT@{'Following'@} = ' &gt; ';
@}
@end example

@c --------------------------------------------------------
@node Output finalization
@section Finalizing the output

If you want to do some cleaning after the document was generated (close
files, write at the end of files and so on), the following function 
reference may be redefined:

@deffn {Function Reference} finish_out
This function is called after the document generation.
@end deffn

The default is to do nothing.

@c --------------------------------------------------------
@node css
@section Customizing the @command{texi2html} css lines

@cindex @acronym{CSS}


If the variable @variable{$CSS_LINES} is set it is used for the css
entries.  For example if you don't want any css entries, set

@example
$CSS_LINES = '';
@end example

If this variable is @code{undef} (as in th edefault case),
it is possible to modify the @command{texi2html} css lines by modifying
the entries or adding to the @variable{%css_map} hash. Each key is a css
selector, the corresponding value is a style string.

Another possiblility is to modify the array corresponding with the array 
reference @code{$Texi2HTML::THISDOC@{'css_import_lines'@}} that contains the
@code{@@import} lines of @acronym{CSS} files, and similarly it is possible
to modify the array corresponding with the array 
reference @code{$Texi2HTML::THISDOC@{'css_lines'@}}  that contains 
the normal @acronym{CSS} files lines (for details on what corresponds with
those different lines, see @ref{HTML CSS,,,texinfo,GNU Texinfo}).
The right place to modify these arrays is in a function appearing in 
the @code{@@command_handler_process} array 
(@pxref{Bypassing normal formatting}). Later, the @acronym{CSS} lines
are allready expanded, by the function reference below. 


In th edefault case, the resulting css lines are in @variable{$Texi2html::THISDOC@{'CSS_LINES'@}}. 
It is also possible to change completely the way @code{$Texi2html::THISDOC@{'CSS_LINES'@}} are
generated by redefining the following function reference:


@deffn {Function Reference} css_lines \@@import_lines \@@rule_lines
This function should be used to construct the variable 
@code{$Texi2html::THISDOC@{'CSS_LINES'@}}.
@var{\@@import_lines} are the @code{@@import} lines of the 
files specified with @longopt{include-css}, 
and @var{\@@rule_lines} are the css commands lines of these files.
@xref{Style options}.
@end deffn

@c --------------------------------------------------------
@node Customizing header
@section Customizing the page header 

It is possible to add lines to the text within the @code{<head>} 
@acronym{HTML} elements, by defining the variable @variable{$EXTRA_HEAD}.
Similarly it is possible to add text just after the @code{<body>} 
element with the variable @variable{$AFTER_BODY_OPEN}.
These variables are empty by default.

The HTML encoding of the resulting document is defined by
@variable{$ENCODING_NAME}. If the variable isn't defined,
the @code{@@documentencoding} value is used, or the 
@variable{$OUT_ENCODING} value, if set. @code{$ENCODING_NAME} may
influence the value of @code{$OUT_ENCODING}, which corresponds with
the encoding used when writing to the resulting files.
@xref{Encodings}.

The description of the document may be specified in 
@variable{$DOCUMENT_DESCRIPTION}. 
If this variable is undef, the text 
associated with @code{@@documentdescription} is used, and if there isn't 
such test a default description is constructed using the document title and 
the name of the first section of the file.
The value used during document formatting
is @variable{$Texi2HTML::THISDOC@{'DOCUMENT_DESCRIPTION'@}}. 

The @code{<body>} element attributes may be set by defining the
variable @variable{$BODYTEXT}.  The resulting attributes are 
in @variable{$Texi2HTML::THISDOC@{'BODYTEXT'@}}.
If you want to define that variable
dynamically, you should use the @code{init_out} function reference
(@pxref{Output initialization}).

@code{<link>} element are used in the header if @variable{$USE_LINKS}
is set. @variable{@@LINKS_BUTTONS} determines which links are used.
@variable{%BUTTONS_REL} determines the link type associated with the
@code{rel} attribute.

The default functions call the function associated with 
@variable{$print_head_navigation} to format the navigation panel for the 
page header. Thus you can control parts of the formatting by
redefining the function reference.

@deffn {Function Reference} print_head_navigation $filehandle \@@buttons
@var{$filehandle} is the opened filehandle the function should write to.
@var{\@@buttons} is an array reference which should hold the specification of 
the buttons for the navigation panel. 
@end deffn

If you want even more control, you can have full control over the page header 
formatting by redefining three function references. The function associated
with @variable{$print_page_head} is called for all the pages, and after that,
the function associated with @variable{$print_chapter_header} is called
if the document is split at chapters, or the function associated with
@variable{$print_section_header} is called if the document is split at sections.

@deffn {Function Reference} print_page_head $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function should print the page head, including the @code{<body>}
element.
@end deffn

@deffn {Function Reference} print_chapter_header $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function is called if the document is split at chapters, after 
@code{print_page_head}.
@end deffn

@deffn {Function Reference} print_section_header $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function is called if the document is split at sections, after 
@code{print_page_head}.
@end deffn

@c --------------------------------------------------------
@node Customizing section
@section Customizing the sections

The functions associated with the following function references are used for 
the formatting of sections:

@deftypefn {Function Reference} $element_header print_element_header $first_in_page $previous_is_top
@var{$first_in_page} is true if this section is the first section in the page.
@var{$previous_is_top} is true if this section is the section following the 
Top section.
This function should return @var{$element_header}, the current section header.
@end deftypefn

@deffn {Function Reference} print_section $filehandle $first_in_page $previous_is_top
@var{$filehandle} is the opened filehandle the function should write to.
@var{$first_in_page} is true if this section is the first section in the page.
@var{$previous_is_top} is true if this section is the section following the 
Top section.
This function should print the current section contents.
@end deffn

@deffn {Function Reference} end_section $filehandle $last_element_or_before_top
@var{$filehandle} is the opened filehandle the function should write to.
@var{$last_element_or_before_top} is true if this section precedes the top 
element or is the last one in page, or before the special elements.
@end deffn

@c --------------------------------------------------------
@node Customizing footer
@section Customizing the page footer

It is possible to add text just before the @code{</body>} 
element with the variable @variable{$PRE_BODY_CLOSE}. Nothing is added
by default.

@ignore
The footer text may be influenced by @variable{$ADDRESS} which should hold
information about who created the document and how.
If you want to define that variable
dynamically, you could redefine the following function reference:

@deftypefn {Function Reference} $address_text address $user $date
This function should return the address. @var{$user} is the user name
of the user running @command{texi2html}, @var{$date} is the date of the day.
@end deftypefn
@end ignore

A user name and  a date are collected to be output in the footer.
You can change them by defining @variable{$USER} and @variable{$DATE}
in the initialization file.

The default functions call the function associated with 
@variable{$print_foot_navigation} to format the navigation panel for the 
page footer. Thus you can control parts of the formatting by
redefining the function reference.

@deffn {Function Reference} print_foot_navigation $filehandle \@@buttons
@var{$filehandle} is the opened filehandle the function should write to.
@var{\@@buttons} is an array reference which should hold the specification of 
the buttons for the navigation panel. 
@end deffn

If you want even more control, you can have more control over the page footer 
formatting by redefining three function references.
The function associated with @variable{$print_chapter_footer} is called
if the document is split at chapters, or the function associated with
@variable{$print_section_footer} is called if the document is split at sections.
 After that the function associated
with @variable{$print_page_foot} is called.

@deffn {Function Reference} print_page_foot $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function should print the page foot, including the @code{</body>}
element.
@end deffn

@deffn {Function Reference} print_chapter_footer $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function is called if the document is split at chapters, before 
@code{print_page_foot}.
@end deffn

@deffn {Function Reference} print_section_footer $filehandle
@var{$filehandle} is the opened filehandle the function should write to.
This function is called if the document is split at sections, before
@code{print_page_foot}.
@end deffn


@c --------------------------------------------------------
@node Special pages
@section Special pages formatting

For the special elements, two things must be formatted: the content
and the page layout

@menu
* Special pages content::
* Special pages layout::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Special pages content
@subsection Customizing the content of the special pages

The label for the special elements, except for the Top element
is formatted according to the function reference @variable{$misc_element_label}:

@deftypefn {Function Reference} $misc_element_label misc_element_label $identifier $page_name
@var{$identifier} is the identifier associated with the special element.
@var{$page_name} is the special element name. It should return a label that
can be used for references to the special element.
@end deftypefn

@menu
* Top element text::
* Contents and Overview text::
* Footnotes text::
* About text::
* Title page::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Top element text
@subsubsection Top element text formatting
The top element formatting is controlled by three function which also
controls the layout of the top element page or section. The associated
function references are:

@deffn {Function Reference} print_Top_header $filehandle $begin_page
@var{$filehandle} is the opened filehandle the function should write to.
@var{$begin_page} is true if the element is the first in a page.
This function should begin the Top element. At the time this function is called
the top element text hasn't been parsed.
@end deffn

@deffn {Function Reference} print_Top $filehandle $has_top_heading
@var{$filehandle} is the opened filehandle the function should write to.
@var{$has_top_heading} is true if there is a @code{@@heading} command or
@code{@@titlefont} command appearing in the Top element text.
This function should be used to format the Top element text and navigation
panel.
@end deffn

@deffn {Function Reference} print_Top_footer $filehandle $end_page
@var{$filehandle} is the opened filehandle the function should write to.
@var{$end_page} is true if the element is the last in a page.
This function should end the Top element. 
@end deffn

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Contents and Overview text
@subsubsection Table of contents and Short table of contents

Two possibilities exist for the formatting of table of contents (and 
short table of contents). In the default case, the table of contents 
are in separate elements, at the end of the document if the document 
is unsplit or in separate files. This is consistent with @command{makeinfo}
where menus are used for navigation. Another mode may be selected by
setting @variable{$INLINE_CONTENTS}. In that case the table of contents
are not output as separate elements but 
are instead output where the corresponding @@-command, 
for example @code{@@contents},
is set. This behaviour is more consistent with @command{texi2dvi}. 
If @code{@@setcontentsaftertitlepage} appears in the document,
and even if @code{$INLINE_CONTENTS} is set, the table of contents are 
merged in the title (which isn't output in the default case, see 
@ref{Title page}).

Several variables may be used to control the formatting of table of contents 
and short table of contents:

@vtable @code
@item $DO_CONTENTS
If the variable is true a table of contents is done even if there is no
@code{@@contents} command. 
If it is defined and false, no table of contents 
is done even if there is a @code{@@contents} command.
@item $DO_SCONTENTS
If the variable is true a short table of contents is done even if there is no
@code{@@summarycontents} command.
If it is defined and false, no short table of contents 
is done even if there is a @code{@@summarycontents} command.
@item $BEFORE_OVERVIEW
The variable value is inserted before the short table of contents text.
@item $AFTER_OVERVIEW
The variable value is inserted after the short table of contents text.
@item $BEFORE_TOC_LINES
The variable value is inserted before the table of contents text.
@item $AFTER_TOC_LINES
The variable value is inserted after the table of contents text.
@item $NO_BULLET_LIST_STYLE
This should contain a css style used for the list style when there
is no bullet.
@item $NO_BULLET_LIST_ATTRIBUTE
This should contain an attribute text used for the list element when there
is no bullet. For example it is used in the tables of if they are 
formatted with a list.
@end vtable

More control on the table of contents and short table of contents formatting
may be achieved by redefining a function with the following associated 
function reference:

@deffn {Function Reference} toc_body \@@elements 
@var{\@@elements} is an array reference contining informations about
all the elements of the document. Each of the entry of this array is an hash
reference which entries correspond with different informations
about the element. Interesting keys have the following meaning:

@table @code
@item top
true if the element is the top element,
@item index_page
true if the element is an index page added because of index splitting,
@item toc_level
level of the element in the table of content. Highest level
is 1 for the top element and for chapters, appendix and so on,
2 for section, unnumberedsec and so on...
@item tocid
label used for reference linking to the element in table of
contents,
@item file 
the file containing the element, usefull to do href to that file
in case the document is split,
@item text
text of the element, with section number,
@item name
text of the element, without section number.
@end table

This function doesn't return anything but should fill the array corresponding
with the 
@variable{$Texi2HTML::TOC_LINES} and
@variable{$Texi2HTML::OVERVIEW} references with the table of contents and short 
table of contents.

@end deffn

Another function reference is used to add a heading and a reference, to
be used with @code{$INLINE_CONTENTS} or merged in the title. Its output
is not used when the table of contents are separate elements.

@deftypefn {Function Reference} \@@inline_contents_lines inline_contents $filehandle $command $element
This function reference returns a reference on an array holding 
the lines containing the contents, heading and reference.
@var{$filehandle} is a reference on the currently opened file if
the function is called because a @code{@@contents} or
@code{@@shortcontents} command was encountered, it is undef otherwise.
@var{$command} is either @samp{contents} or  @samp{shortcontents}.
@var{$element} is a hash reference containing informations about the
table of contents context. Relevant keys are:
@table @code
@item target
The identifier associated with the table of contents, used for example
to do references to the table of contents using href in @acronym{HTML}.
@item id
The identifier associated with the element, used to do labels. In 
general the same than the @code{target}, but not necessarily.
@item file
The file name containing the table of contents.
@end table

@end deftypefn

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Footnotes text
@subsubsection Formatting of footnotes text

The footnotes text is allready formatting when @code{@@footnote} commands
are expanded. @xref{Footnotes}.

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node About text
@subsubsection Formatting of about text

The default about element contains an explaination of the buttons used
in the document (@code{@@SECTION_BUTTONS}, @ref{Button specifications}) and 
an example locating the buttons targets in an example.
The formatting of this text may be influenced by the following 
hashes and variables:

@table @code
@item $PRE_ABOUT 
@itemx $AFTER_ABOUT
This variable may be a scalar or a function reference. 
If it is a scalar, the value is used.
If this is a function reference it is expanded and the returned text is
used. The text is added before or after the main about text.
@item %BUTTONS_GOTO

The keys of this hash are element labels (@pxref{Element labels}). The value
is the text associated with the element label in the about text.
The element of the hash are defined 
dynamically, you should in the @code{init_out} function reference
(@pxref{Output initialization}).


@item %BUTTONS_EXAMPLE

The keys of this hash are  element labels (@pxref{Element labels}). The value
is the text associated with the element label in the about example, 
typically a section number.

@end table

If this is not enough and you want to control exactly the formatting of
the about text, you can redefine the function associated with the following 
function reference:

@deftypefn {Function Reference} $about_text print_about
This function should return the about text.
@end deftypefn

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Title page
@subsubsection Formatting of title page

The title page is first formatted using the text appearing in 
the @code{@@titlepage} section, and put in @variable{$Texi2HTML::TITLEPAGE}.
The information appearing in @code{@@title}, @code{@@subtitle} or 
@code{@@author} is then added using the following
function reference:

@deffn {Function Reference} titlepage 
This function should complete @code{$Texi2HTML::TITLEPAGE}.
@end deffn

In the default case, in this function the table of contents and short
table of contents are also added if they are to be output and 
@code{@@setcontentsaftertitlepage}
or @code{@@setshortcontentsaftertitlepage} appear in the document
(@pxref{Contents and Overview text}).

In the default case the resulting title page output is not used in 
the document, except if the top node is not associated with any 
content.

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Special pages layout
@subsection Customizing the layout of the special pages

The formatting of each of the special pages, or section in case 
the document is not split, is controlled by a function.
The associated function reference is called accordingly:

@ftable @code
@item print_Top
@item print_Top_header
@item print_Top_footer
Formatting of top element page or section. It is also used for the formatting
of the top element text (@pxref{Top element text}).
@item print_Toc
Formatting of table of contents page or section
@item print_Overview
Formatting of short table of contents page or section
@item print_About
Formatting of about (help) page or section
@item print_Footnotes
Formatting of footnotes section or page in case footnotes are on a 
separated page or the document isn't split.
@end ftable

In the default case, @variable{$print_Top} calls @variable{$print_Top_header} for
the header and @variable{$print_Top_footer} for the footer of top element.
All the other function call @variable{$print_misc} which in turn calls
@variable{$print_misc_header} for the headers and  @variable{$print_misc_footer} 
for the footers.

@c --------------------------------------------------------
@node File and target names
@section Customizing the file and target names

@subheading File names

It is possible to specify the file names with more control than with the
command line options (@pxref{Output files}). 
First the extension may be overrided by the variable @variable{$EXTENSION}
value. The variable should be @code{undef} if no extension is
to be added.
Two function references enable 
further customization. One is usefull in case @variable{$NODE_FILES} is true
and it is used to customize the node file name. 

@deftypefn {Function Reference} $node_file node_file_name \%node
@var{\%node} is a hash reference with the following interesting keys (there
are much more keys):
@table @code
@item texi
The texinfo node name.
@item with_section
True if associated with a section.
@end table
The result is the node file name @var{$node_file}.
@end deftypefn

The other is used to
customize the file names associated with each element, and the 
name of the file associated with the special elements.
@deftypefn {Function Reference} $file element_file_name \%element $type $docu_name
@var{\%element} is undefined for the special elements (about, overview, 
table of contents, footnotes).
Otherwise it is a hash reference with the following interesting keys (there
are much more keys):
@table @code
@item texi
The texinfo element name.
@item number
The number associated with a section.
@item doc_nr
A number incremented whenever a new file should begin, based on how the 
document is split (@pxref{Splitting output}).
@item text
The element text.
@item name
The element text without section number.
@end table
@var{$type} is empty for normal elements. 
For the top element it is @samp{top}, for the table of contents it 
is @samp{toc}, for the overview it is @samp{stoc}, for the
footnotes it is @samp{foot} and for about is @samp{about}. If 
frames are used (@pxref{Page layout options}), the function reference
is also called for @samp{frame}, the frame file name, and 
@samp{toc_frame} the table of content frame file name.
@var{$docu_name} is the basename of the texinfo manual.
The result is the element or special element file name.
@end deftypefn

@subheading target names

Similarly target and id may be set. The @dfn{id} is placed where the 
item is located, the @dfn{target} is used to construct references to
that item. In general they should be equal, but not always, for example
in the default case, the target for a section is the node id.
The following function reference, is
for target items (nodes, anchors, floats):

@deftypefn {Function Reference} {($target,$id)} node_target_name \%node, $default_target, $default_id
@var{\%node} is the same as in the @code{node_file_name} function reference
above.
@var{$default_target} is the target already set (it is also 
in @code{$node->@{'target'@}}), and @var{$default_id} is similarly
the id already set.
@end deftypefn

For element associated with files (which may be nodes), the function 
reference is:

@deftypefn {Function Reference} {($target,$id)} element_target_name \%element, $default_target, $default_id
the @var{\%element} is the same than in @code{element_file_name}, and
@var{$default_target} and @var{$default_id} are the target and id already set.
@end deftypefn

Placed items 
(floats, footnotes, index entries, anchors, contents,
shortcontents and headings)
file and target may also be set. In the default case, they should 
be rightly set, so be careful when changing them. The following 
function reference can be used:

@deftypefn {Function Reference} {($target, $id, $file)} placed_target_file_name \%placed_item, \%element, $default_target, $default_id, $default_file, $context
@var{\%placed_item} is a hash reference describing the placed item,
in the same vein than above.
the @var{\%element} is the same than in @code{element_file_name}, 
corresponding with the element containing the placed item.
@var{$default_file}, @var{default_id} and
@var{$default_target} are the file, id and target already set.
@var{$context} describes the context, it is empty in the normal cases, 
and can also be set to @samp{footnotes} if in footnotes, or to
@samp{no_associated_element} if the placed item is out of any element
(typically in @code{@@titlepage}, @code{@@copying}).
@end deftypefn

For special elements, the @variable{%misc_pages_targets} hash is 
used to set the target and id. The possibilities for the keys 
are @samp{Overview},
@samp{Contents}, @samp{Footnotes} and @samp{About}.

@c --------------------------------------------------------
@node External index files
@section Generation of external files for index entries

Within the document, @code{@@printindex} commands are expanded as explained
in @ref{Index list}. In case you want to do something special with index 
entries, outside of the document, you should first set the variable
@variable{$IDX_SUMMARY} true. After that some function reference will be called
for each non empty index. For each index there are 3 function 
references, one called for initialization, one called for each index entry
and the last one called for finalization.

@deffn {Function Reference} index_summary_file_begin $index_name $is_printed $manual_name
@var{$index_name} is the two letters name for the index. 
This function
is called for each index 
appearing in the document, before 
@code{index_summary_file_entry}.
@var{$is_printed} is true if there is a @code{@@printindex} for that index.
@var{$manual_name} is the manual basename.
@end deffn

@deffn {Function Reference} index_summary_file_entry $index_name $entry_text $entry_reference $formatted_entry $texi_entry $entry_element_reference  $entry_element_header $is_printed $manual_name
This function is called for each entry of an index. @var{index_name} is the
name of the index. @var{$entry_text} is the entry in plain text,
@var{$formatted_entry} is the index entry formatted, @var{$texi_entry} is the
entry with texinfo commands. @var{$entry_reference} is the reference placed 
at the index entry place, in the form @samp{file#id}.
@var{$entry_element_header} is the formatted header of the element containing 
the index entry. @var{entry_element_header} is the reference to the
beginning of the element containing the index entry, in the form
@samp{file#id}. 
@var{$is_printed} is true if there is a @code{@@printindex} for that index.
@var{$manual_name} is the manual basename.
@end deffn

@deffn {Function Reference} index_summary_file_end $index_name $is_printed $manual_name
@var{$index_name} is the two letters name for the index. This function
is called for each index appearing in the document, after
@code{index_summary_file_entry}.
@var{$is_printed} is true if there is a @code{@@printindex} for that index.
@var{$manual_name} is the manual basename.
@end deffn

@c ========================================================
@node Customizing HTML
@chapter Customizing @acronym{HTML} and text style in init files

Some simple customization may be achieved with the redefinition of the 
variables 
associated with the command line options. For the description and an 
explanation of the meaning of these variables, @ref{Style options}.

Other variables and hash entries can be modified in initialization file
to achieve more customization.
Lastly, functions references corresponding with functions called from 
the main program and initialization files may 
be redefined.

@menu
* Three contexts::               there are three different contexts for command
                                 expansion: normal text, preformatted text and
                                 strings.
* Three passes::                 @command{texi2html} process texinfo in 3 passes.
                                 In almost every cases, you shouldn't care.
* Commands without argument:: 
* Punctuation commands::         @code{@@:}
* Style and accent commands::    
* Anchors images and spaces::    Formatting of @code{@@anchor}, @code{@@image}, @code{@@sp}, @code{@@acronym}, @code{@@abbr}
* Text::                         Some characters are processed specially
* Strings::                      @command{texi2html} write some strings in the output
                                 different for each languages
@c * Skipped commands::           
* References::
* Alignement commands::           @code{@@center}, @code{@@flushleft}@dots{}
* Paragraph and preformatted region::
* Complex formats::              @code{@@example}, @code{@@display}@dots{}
* Lists tables::
* Definitions::
* Headings::
* Special regions::              @code{@@verbatim}, @code{@@cartouche}, @code{@@quotation}
* Menus::                    
* Indices::
* Floats and lists of floats::   @code{@@float} and @code{@@listoffloats}
* Footnotes::
* Customizing format opening::   How to run some code when a format is opened
                                 (like @code{@@table}, @code{@@flushleft}, @code{@@example}@dots{}
* Bypassing normal formatting:: 
* Handling special regions::     Keep @code{@@titlepage}, @code{@@documentdescription} or @code{@@copying}
                                 and format @code{@@insertcopying}
* Other and unknown commands::   You can handle specifically other commands

@end menu

@c --------------------------------------------------------
@node Three contexts
@section Three contexts for expansions: preformatted, normal and string

There are three contexts of interest, one is the normal context, the other
is a special context, called the @dfn{preformatted} context and the last is
the string context. The preformatted
context occurs when the spacing between words is kept. This is the
case, for example, in @code{@@display} or @code{@@example} regions, and in 
menu comments (@pxref{Menus}). The preformatted regions are usually
rendered in @code{<pre>} elements in @acronym{HTML}.
The string context occurs when rendering strings without formatting elements,
in comments or titles for example.

@c --------------------------------------------------------
@node Three passes
@section Three passes: macro expansion, document structure and output

There are three passes in @command{texi2html}. During 
pass 0, the @code{@@macro} are 
expanded, in pass 1 the document structure is gathered and in pass 2
the result is output. In most cases you shouldn't care about
it, as almost all of the output customization is done in pass 2.
Only if you want to do something before the pass 2 should you care.

@c --------------------------------------------------------
@node Commands without argument
@section Customizing the formatting of commands without argument

This includes the commands whose name is a nonletter character like @code{@@@@}, 
the commands with lettered characters and braces
but whose braces should be empty, like @code{@@TeX@{@}}, or some commands
associated with accentted letters like @code{@@AA@{@}}. If there happens to
be something within the braces, it is put after the command, thus
@example
@@TeX@{something@}
@end example
leads to the same than
@example
@@TeX@{@} something
@end example

Each of these categories of commands have three associated hashes, one 
for normal
context, the other for preformatted context and the last in strings. The 
keys of the hashes are the 
command names, the associated value is the text replacing the command.

The hashes are:
@multitable {one nonlettered character} {normal text} {preformatted text} {string}
@item command type @tab normal text @tab preformatted text @tab string
@item one nonlettered character @tab @variable{%simple_map} @tab @variable{%simple_map_pre} @tab @variable{%simple_map_texi}
@item nothing in braces @tab @variable{%things_map} @tab @variable{%pre_map} @tab @variable{%texi_map}
@end multitable

To change the @acronym{HTML} resulting from these constructs, just change the
value. For example, if you want @code{&shy;} to be outputted for @code{@@-}
in normal and preformatted context, write in your init file:

@example
$simple_map@{'-'@} = '&shy;';
$simple_map_pre@{'-'@} = '&shy;';
@end example


@c --------------------------------------------------------
@node Punctuation commands
@section Punctuation commands

The formatting of a punctuation character followed by @code{@:} is determined
by the hash @variable{%colon_command_punctuation_characters}. If a @code{@:}
command is preceded by a character in th is hash, it is replaced by the 
associated value. In the default case, the associated value is also the 
character, so this leave the punctuation character unmodified.

The following function reference may be redefined to handle characters
that are in @code{%colon_command_punctuation_characters}:

@deftypefn {Function Reference} $punctuation $colon_command $character
The @var{$character} is a character appearing in 
@code{%colon_command_punctuation_characters} and preceding a @code{@:} 
command. In the default case the associated value in
@code{%colon_command_punctuation_characters} is returned.
@end deftypefn

@c --------------------------------------------------------
@node Style and accent commands
@section Customizing accent, style and other simple commands

The formatting of the @acronym{HTML} produced by style and indicatric 
commands (@code{@@tt}, @code{@@code}, 
@code{@@email}, @code{@@titlefont}), the accentuation related
commands taking argument (@code{@@'}, @code{@@udotaccent}, @code{@@dotless})
and miscalleneous commands (@code{@@email}, @code{@@verb}, @code{@@w}, 
@code{@@uref}, @code{@@math}, @code{@@asis}) is controlled by two hash in the
default case, 
@variable{%style_map} for normal context, @variable{%style_map_pre} for
preformatted context and @variable{%style_map_texi} in string context. 

The key of the hashes are the command names. There are two possibilities for
the values corresponding with two interfaces. The values may be strings or 
hash references, and you can chose the interface depending on the one you 
prefer. The interface with hash reference is a bit more flexible but might also
be regarded as more complex. If you don't like either of these interfaces you
can define your own.

Some remarks are in order:

@itemize
@item 
The nonlettered accent commands which following character is considered
to be the argument (like in @code{@@`a}) should be keys of the
hash @variable{%accent_map} hash, even if no value is associated.
@item
@code{@@math} is handled differently if La@TeX{}2HTML is used.
@end itemize

@menu
* Hash reference interface::
* String interface::
* Define your own interface::
@end menu

@node Hash reference interface
@subsection An interface for commands formatting with a hash reference

The key of the hashes are the command names. The value determine how the command argument
is formatted. This value is a reference on a hash. In this hash each key 
corresponds with a type of information for the formatting, and the value is 
the corresponding information. For example, in 

@example
$style_map@{'command'@} = @{ 'args' => ['code'], 'attribute' => 'code'@};
@end example

the arguments for @code{@@command} are interpreted as specified by 
the values associated with the @samp{args} key while the attribute associated 
with that command is @samp{code}.

The following keys in the hashes associated with each command have the
following meaning:

@table @samp
@item args
@anchor{Reference hash args}
The value associated is a reference on an array. Each element of the array
defines how the arguments (separated by @samp{,} in the texinfo code) for 
the @@-command should be 
formatted. The possibilities are 
@table @code
@item normal
for normal text,
@item code
for text with @samp{---}, @samp{--}, @samp{''} and  @samp{``} kept as is,
@item keep
if the texinfo should be kept as is, without interpretation of the @@-commands.
@end table

For example, we have
@example 
$style_map@{'email'@}->@{'args'@} = ['code', 'normal'];
@end example

because @samp{---}, @samp{--}, @samp{''} and  @samp{``} should be kept as is in
the first argument of @code{@@email}.

The default is @samp{['normal']}.

@item attribute

If the associated value is a word, it is considered to be an @acronym{HTML} 
element name, and the argument is enclosed between the element opening
and the element closing. For example, if the value is @code{elem}, the
resulting @acronym{HTML} is @code{<elem>@var{arg}</elem>}.

If the text is a word followed by some text,
the word and is interpreted as above, and the
text is considered to be the attributes text of the element. 
Thus @code{elem class="elem"} leads to 
@code{<elem class="elem">@var{arg}</elem>}.

This works only if there is only one argument.

@item begin

The associated value is added in front of the text.

@item begin

The associated value is added after the text. 

@item quotes

If the corresponding value is true, the result is 
enclosed in quotes @variable{$OPEN_QUOTE_SYMBOL} and 
@variable{$CLOSE_QUOTE_SYMBOL}, with defaults 
@samp{`} and @samp{'}. 

@item function 

The corresponding value should be a function reference. The corresponding
function is called with the following arguments:

@table @code
@item $command
The @@-command name
@item $args
A reference on an array containing the arguments of the @@-command.
@item $command_stack
A reference on an array containing the name of the @@-commands containing 
the @@-command being formatted, latest on top.
@item $state
A reference on a hash containing a lot of informations about the context
of the @@-command.
@item $line_nr
An opaque structure containing the information about the line number of the 
@@-command. It can be used to call @code{main::echo_error} or
@code{main::echo_warning} with first argument a message, and second argument 
@code{$line_nr}. 
@end table
@end table

@node String interface
@subsection An interface for commands formatting with a string

The keys of the hashes are the command names. The value determine 
how the command argument
is formatted. If the value begins with @samp{"}, the result is 
enclosed in quotes @variable{$OPEN_QUOTE_SYMBOL} and 
@variable{$CLOSE_QUOTE_SYMBOL}, with defaults 
@samp{`} and @samp{'}. 

The command argument is allready formatted as @acronym{HTML}.
The remaining of the value text
(or the value text if there were no @samp{"}) is interpreted as follow:

@itemize @bullet
@item
If the text is empty the argument of the command is left as is. 
@item
If the text is a @samp{&} followed by a name,
like @samp{&function}, the name is considered to be a function name, 
and this function is called to format the argument of the command. The
first argument of the function is the command name, the second is 
the command argument. For example, if the value associated with the
(fictituous) command @code{@@foo} is @code{&my_func}
and we have:

@example
sub my_func
@{
    my @@args = split /,\s*/ $_[1];
    return "$_[0]: $args[0]" if ($args[1] = 1);
    return "$args[0]";
@}
@end example

The result of 
@example 
@@foo@{truc, 1@}
@@foo@{truc, bidule@}
@end example 
will be
@example
foo: truc
truc
@end example
@item
If the text is a word, it is considered to be an @acronym{HTML} element
name, and the argument is enclosed between the element opening
and the element closing. For example, if the value is @code{elem}, the
resulting @acronym{HTML} is @code{<elem>@var{arg}</elem>}.
Similarly @code{"quoted} leads to
@code{`<quoted>@var{arg}</quoted>'}.
@item
If the text is a word followed by some text, 
the word and is interpreted as above, and the
text is considered to be the attributes text of the element. 
Thus @code{elem class="elem"} leads to 
@code{<elem class="elem">@var{arg}</elem>}.
@end itemize

@node Define your own interface
@subsection Defining the style and indicatric commands interface

If you don't like this scheme, it is possible to change how those commands
are processed by redefining the following function reference:

@deftypefn {Function Reference} $resulting_text style $style $command $text $args $no_close $no_open $line_nr $state $command_stack
@var{$command} is the @@-command, @var{$style} is the value associated with 
the @var{$command} in the @code{%style_map}, @code{%style_map_pre} 
or @code{%style_map_texi} hashes.
The @var{$text} is the text appearing within the @@-command braces.
@var{args} is a reference on an array contening the command arguments 
formatted according to the same conventions than with the reference hash style
(provided the value associated with the @@-command is a hash reference with a
@var{$arg} key as described in @ref{Reference hash args}).
If @var{$text} is split in paragraphs each paragraph is passed through
the function, and @var{$no_close} is true if it is not the last paragraph,
while @var{$no_open} is true if it is not the first paragraph.
@var{$line_nr}
is an opaque structure containing the information about the line number of the 
@@-command. It can be used to call @code{main::echo_error} or
@code{main::echo_warning} with first argument a message, and second argument 
@code{$line_nr}.
@var{$state}
is a reference on a hash containing a lot of informations about the context
of the @@-command.
@var{$command_stack}
is a reference on an array containing the name of the @@-commands containing 
the @@-command being formatted.

@end deftypefn

@c --------------------------------------------------------
@node Anchors images and spaces
@section Formatting of special simple commands

The formatting of special simple commands is controlled by functions. To
customize the output, the corresponding function references should be
redefined. All these functions return a formatted text.

The formatting of anchors is controlled by @variable{$anchor_label}.

@deftypefn {Function Reference} $anchor_label anchor_label $identifier $anchor
@var{$identifier} is the anchor identifier, @var{$anchor}is the @code{@@anchor}
argument.
@end deftypefn

In the default case, it uses a function reference,  @variable{$anchor}
 that can do
a reference target or link. It is especially relevant for @acronym{HTML}
but can be used in other formats, it is a rather common element
of different formats.
@deftypefn {Function Reference} $anchor anchor $identifier $href $text $attributes
If @var{$identifier} is not empty, this value should be used to create
a target for links (typically associated with a name or id 
attribute in @acronym{HTML}).
The @var{$href} argument specifies a hpertextual reference which should be
used to link to a target.
In case both @var{$identifier} and  @var{$href} are given the text produced
should be both a target for @var{$identifier} and a link to @var{$href}.
@var{$text} is the text to be displayed. 
@var{$attributes} are additional attributes.
It should be reasonable to assume that the attributes are for a @code{<a>}
@acronym{HTML} element. 
@end deftypefn

To customize the images produced by @code{@@image}, the first possibility 
is to modify the @variable{@@IMAGE_EXTENSIONS}, which holds a list of 
filename extensions for image files. It is also possible to redefine
the function used to determine the filename of the image:

@quotation Warning
This description is wrong. The API is still moving, so don't count on it.
@end quotation

@deftypefn {Function Reference} $filename image_files $basename $extension
@var{$basename} is the first @code{@@image} argument, @var{$extension}
is the corresponding @code{@@image} argument. This function reference 
should return an array of image filenames without path that the main 
program should look for.
@end deftypefn

Last, it is possible to control 
the formatting of @code{@@image} by redefining:
@deftypefn {Function Reference} $image image $file_path $basename $preformatted $file_name $alt_text $width $height $raw_alt $extension $working_dir $file_relative_path
@var{$file_path} is the image file name with the path from the output directory
to the source manual directory prepended, @var{$basename}  
the file name without extension (the first @code{@@image} argument). 
@var{$preformatted} is true if the image 
appears in preformatted text. @var{$file_name} is the file name without path 
but with extension. @var{$alt_text} is the alternate text, it may be 
undefined. @var{$width} and @var{$height} are the corresponding arguments 
of @code{@@image}, @var{$raw_alt} is the unmodified alt argument of 
@code{@@image} and @var{$extension} holds the corresponding 
@code{@@image} argument.
@var{$working_dir} is the path to working dir relative to the output
directory. @var{$file_relative_path} is the file name relative to the 
@var{$working_dir}.
@end deftypefn

The formatting of @code{@@sp} is controlled by:
@deftypefn {Function Reference} $sp sp $number $preformatted
@var{$number} is the numeric argument of @code{@@sp}.
@var{$preformatted} is true if the @code{@@sp} appears in preformatted text.
@end deftypefn

The formatting of @code{@@acronym} and @code{@@abbr} is controlled by:
@deftypefn {Function Reference} $acronym acronym_like $acronym_texi $acronym_text $with_explanation \@@explanation_lines $explanation_text $explanation_simply_formatted
@var{$acronym_texi} is the acronym argument with texinfo @@-commands, 
@var{$acronym_text} is formatted. 

The other arguments are related with
the explanation, the second arg of the acronym. @var{$with_explanation} is 
true if the second argument of the acronym command is present. If an
explanation exists, coming from previous @code{@@acronym} or as an arg of 
this command, the other args are defined: @var{\@@explanation_lines} is a 
reference on an array containing the simply fomatted explanation lines, 
@var{$explanation_text} is the explanation text formatted,
@var{$explanation_simply_formatted} is the explanation with a light 
formatting, unabling in @acronym{HTML} (or @acronym{XML}) the explanation 
to be in an attribute.
@end deftypefn

@c --------------------------------------------------------
@node Text
@section Processing special characters in text

Some characters are processed especially in text: @samp{---}, @samp{--},
@samp{``} and @samp{''}. This is done only if in normal text and not in 
some commands (@code{@@code}, @code{@@env}@dots{}). A function reference
is called to process the text and should take care of those constructs.
It may also be used to transform the text, for example set it in upper
case if it is in @code{@@sc}. This function should also take care
of protecting special characters


@deftypefn {Function Reference} $processed_text normal_text $text $in_raw_text $in_preformatted $in_code $in_simple $command_stack 
The function processes @var{$text} and returns @var{$processed_text}. 
The other arguments give some information about the context of the text.
@var{$in_raw_text} is true if the text appears in special place where
there is no formatting, typically in comments. @var{$in_preformatted}
is true if in a preformatted environemnt, and @var{$in_code} is true
if in a special command like @code{@@code}, @code{@@env} where
@samp{---}, @samp{--}, @samp{``} and @samp{''} should not be
touched. @var{$in_simple} is true if in string context.
 @var{$command_stack} is an array containing the name of the 
formatting @@-command that enclose the text.  

In the default case the @samp{---}, @samp{--}, @samp{``} and @samp{''}
constructs are expanded if needed and the text is upper-cased if in 
@code{@@sc}. Special characters (@samp{&}, @samp{"},
@samp{<} and @samp{>} in @acronym{HTML}) are protected if needed. 
@end deftypefn

Some characters are special, for example we have  @samp{&}, @samp{"}, 
@samp{<} and @samp{>} in @acronym{HTML}. In some cases some
pieces of text don't go through the above function, but still 
needs to be protected to appear in text.
This is done by the function associated with the function reference

@deftypefn {Function Reference} $protected_text protect_text $text
The function processes the unprotected text @var{$text} and returns
the resulting protected text @var{$protected_text}.
@end deftypefn

Empty lines are processed by the following function reference, which could
be usefull if empty lines are to be removed for example

@deftypefn {Function Reference} $resulting_text empty_line $empty_line $state
This function processes an @var{$empty_line} and returns the resulting
text @var{$resulting_text}. @var{$state} is a structure that holds informations
about the state of the parsing.
Empty lines are left as is by default except right after a definition 
@@-command.
@end deftypefn

@c --------------------------------------------------------
@node Strings
@section Customizing strings written by @command{texi2html}

@cindex i18n

@command{texi2html} writes some strings in the generated document at
various places, at the page footers, on the help page, for special 
section headings, buttons alt text and so on. These strings are
customizable. The string chosen depends on the language of the
document (set by @longopt{document-language}, @variable{$LANG} or 
@code{@@documentlanguage}). This is the basis for internationalization
as it allows for strings translations.

The strings are found in a hash reference, @variable{$LANGUAGES}. 
Each key is a language code. The associated value is also a hash
reference. The key is an english string and the associated value
is the string replacing the english string, if present. For example,
we have

@example
$LANGUAGES->@{'fr'@} = @{
              ' Up ' => 'Plus haut',
@};
@end example

It means that whenever the string @samp{@ Up@ } is to be written
and the language is @samp{fr}, @samp{Plus haut} is written. It is possible
to customize the english strings by redefining the @samp{en} language hash.

When a string contains a @samp{%} followed by @samp{@{} @var{name} @samp{@}}
it means that the string will be expanded by @command{texi2html}. For
example, if we have

@example
$LANGUAGES->@{'fr'@} = @{
              'See %@{node_file_href@}' => 'Voir %@{node_file_href@}',
@};
@end example

@samp{%@{node_file_href@}} will be expanded to an href for a node in a 
file by @command{texi2html} in the string. A @samp{%%} will be expanded
as @samp{%}.

When a @code{@@documentlanguage} appears in the document and the language
wasn't set on the command line, it may be convenient for the user to
redefine some variables based on the new language. There is a function 
reference that may be used for that, it is called each time  a 
@code{@@documentlanguage} is encountered:

@deffn {Function Reference} $translate_names
This function is called each time @code{@@documentlanguage} is encountered
and the language wasn't seet on the command line. It should be used
to retranslate some strings based on the new language.
@end deffn


For more on internationalization, see @ref{Internationalization}.

@c --------------------------------------------------------
@node References
@section References
@cindex reference

@menu 
* Reference to external manual::
* Internal reference::
@end menu

@node Reference to external manual
@subsection Reference to external manual
@cindex external manual

The references are produced with two function references, one for the
hypertextual reference construction, the other for the full reference to 
external manual. 

@deftypefn {Function Reference} $href external_href $node $node_identifier $xml_node_identifier $manual_file_name
@var{$node} is the node name, with @@-commands. @var{$node_identifer} is the
node name mapped to an identifier acceptable as a file name. 
@var{$xml_node_identifier} is the
node name mapped to an identifier acceptable as an @acronym{XML} identifier.
Those identifiers are built as explained in @ref{HTML Xref,,,texinfo,GNU Texinfo},
thus allowing for cross references to external manuals. @var{$file} is the
manual or file name of the external reference. This function should return an
href leading to the external manual.

The default for this function is to make a reference compatible with 
@command{makeinfo}  (@pxref{HTML Xref,,,texinfo,GNU Texinfo}).
@end deftypefn

@deftypefn {Function Reference} $text external_ref $command $section $book $node_and_file $href $cross_ref_name \@@args_texi \@@formatted_args
This function formats a reference to an external texinfo manual.
The @var{$command} is the ref command (@code{ref}, @code{xref} or 
@code{pxref}, in text, at sentence beginning or in parenthesis).
The optionnal @var{$section} argument is the section in the book and 
 @var{book} is the book title.
@var{$node_and_file} is the node and file name formatted according to the 
convention used in info: @samp{(file)node}. @var{$href} it an hypertextual
reference to the distant manual constructed using the above function. 
@var{$cross_ref_name} is an optionnal cross
reference name appearing in the reference command. 
@var{\@@args_texi} is a reference on an array containing the @@-command
arguments, not formatted, with @var{\@@formatted_args} contains the formatted
@@-command arguments.
This function returns
the text corresponding with the external html manual reference.
This function returns the full formatted text of the external reference.
@end deftypefn

@node Internal reference
@subsection Reference to an internal node

A function reference is available for internal references.

@deftypefn {Function Reference} $text internal_ref $command $href $short_name $name $is_section \@@args_texi \@@formatted_args
This function formats a reference to a node in the current manual.
The @var{$command} is the ref command (@code{ref}, @code{xref} or 
@code{pxref}, in text, at sentence beginning or in parenthesis).
@var{$href} it an hypertextual reference linking to the corresponding
node or section. @var{$short_name} and @var{$name} hold the text for the 
reference but @var{$short_name} can be the node name which is assumed to 
be shorter than the section name.
@var{$is_section} is a boolean true if the reference is a reference to a 
section. 
@var{\@@args_texi} is a reference on an array containing the @@-command
arguments, not formatted, with @var{\@@formatted_args} contains the formatted
@@-command arguments.
This function returns the full formatted text of the internal 
reference.
@end deftypefn


@c --------------------------------------------------------
@node Alignement commands
@section Commands used for centering and flushing of text

@cindex centering
@cindex flushing text
@cindex text alignement

When a command controlling the alignement of text is used (@code{@@center},
@code{@@flushleft} and @code{@@flushright}), the main program takes
care of opening and closing paragraphs. The alignement commands are the
key of the @variable{%paragraph_style} hash. 
The value is used in the function doing the formatting of the paragraphs. 
@xref{Paragraph and preformatted region}.

A function references allows for a customization of the formatting of the text 
appearing in the command block.

@deftypefn {Function Reference} $result paragraph_style_command $command $text
@var{$command} is the command name, @var{$text} is the text appearing within
the command. This function returns a formatted text.
The default is to return the text unmodified.
@end deftypefn

@c --------------------------------------------------------
@node Paragraph and preformatted region
@section Formatting (or not) a paragraph and a preformatted region


@menu
* Paragraph and preformatted formatting::
* Avoiding paragraphs::
@end menu

@node Paragraph and preformatted formatting
@subsection Paragraph and preformatted region formatting

@cindex paragraph 
@cindex preformatted region 

The formatting of a paragraph region or a preformatted region, is controlled
by function references:

@deftypefn {Function Reference} $paragraph_text paragraph $text $alignement $index $formatting_command $formatting_command_formatted \$paragraph_number $format $item_number $enumerate_style $number $command_stack_at_end $command_stack_at_begin
This function formats a paragraph. @var{$text} is the text of the paragraph,
@var{$alignement} is the empty string when no alignement command has
been seen, otherwise it is the current alignement command name.
@xref{Alignement commands}.
@var{$indent} holds @samp{noindent} or @samp{indent} if the corresponding 
@@-command appeared in the paragraph.
@var{$command_stack_at_end} and @var{$command_stack_at_begin} are arrays
containing the opened @@-commands at end and at beginning of the paragraph,
latest on top.

The remaining arguments are usefull when the paragraph appears within a
list or table. It is usefull whenever the paragraph has to be formatted
differently when appearing in such environments. 
Moreover in that case the format command (@code{@@itemize}@dots{}) 
may have
an associated formatting command.
@var{$formatting_command} is this  formatting command
(like @code{@@minus}).
@var{$formatting_command_formatted} is the command formatted in html
in case the formatting command is a leading command (like @code{@@minus})
which should be leading the first paragraph.
@var{\$paragraph_number} is a reference on the number of
paragraphs in that format command. The corresponding variable should be 
increased when a paragraph is added. @var{$format} is the format command. 
@xref{Table and list items}.

If the @var{$format} is an enumerate, @var{$item_number} is the number of 
the item in the list, @var{$enumerate_style} is the argument of the enumerate,
@var{$number} is the number or letter corresponding with this item. 
@end deftypefn

@deftypefn {Function Reference} $preformatted_text preformatted $text $style $region_name $formatting_command $formatting_command_formatted \$preformatted_number $format $item_number $enumerate_style $number $command_stack_at_end $command_stack_at_begin
This function formats a preformatted region. @var{$text} is the text of the
preformatted region, @var{$style} is the css style associated with that
preformatted region (@pxref{css}). @var{$region_name} is the 
name of the command opening        
the preformatted region (@code{example}@dots{}, see @ref{Complex formats}) 
or a identifier for the preformatted context (for example 
@code{menu-comment}, see @ref{Menus}).
The alignment commands are not taken into account, as the spaces are
preserved in preformatted regions, you should flush and center by hand.
@var{$command_stack_at_end} and @var{$command_stack_at_begin} are arrays
containing the opened @@-commands at end and at beginning of the preformatted
region, latest on top.

The remaining arguments are usefull when the preformatted region appears 
within a list or table. It is usefull whenever the preformatted region 
has to be formatted
differently when appearing in such environments. 
Moreover in that case the format command (@code{@@itemize}@dots{}) 
may have
an associated formatting command.
@var{$formatting_command} is this  formatting command
(like @code{@@minus}).
@var{$formatting_command_formatted} is the command formatted in html
in case the formatting command is a leading command (like @code{@@minus})
which should be leading the first preformatted region.
@var{\$preformatted_number} is a reference on the number of
preformatted regions in that format command. The corresponding variable 
should be increased when a preformatted region is added. @var{$format} is the 
format command. 
@xref{Table and list items}.

If the @var{$format} is an enumerate, @var{$item_number} is the number of 
the item in the list, @var{$enumerate_style} is the argument of the enumerate,
@var{$number} is the number or letter corresponding with this item. 
@end deftypefn

@node Avoiding paragraphs
@subsection Avoiding paragraphs in formats

@cindex Avoid paragraph opening

It is possible to avoid that a format closes the previous paragraph or
preformatted region and reopens one, by putting the format command in a 
hash, @variable{%format_in_paragraph} with a true value. This only 
makes sense for few commands since otherwise the nesting of formats and
paragraphs could become wrong.

If the value of @variable{%no_paragraph_commands} associated with a command is
true, no paragraph is started by the command if outside of a paragraph
(after an empty line, for example). If the value is set to 0, it will start
a paragraph. If the value is not set, reasonable defaults are
set.

It is also possible to stop a paragraph when an @@-command happens by
putting the @@-command in the @variable{%stop_paragraph_command} hash
associated with a true value.


@c --------------------------------------------------------
@node Complex formats
@section Formatting of complex formats (@code{@@example}, @code{@@display}@dots{})

@cindex complex format

Here we see how a whole complex format is formatted. For the formatting
of the text, see @ref{Paragraph and preformatted region}.

The formatting of the complex formats is ultimately controlled by a
function, however the default for this function uses a hash reference and 
changing the hash reference values should be enough in most cases. This
hash reference is called @variable{$complex_format_map}. It has a key for each
of the complex format commands (@code{example}, @code{smallexample}, 
@code{lisp}, @code{smalllisp}, @code{display}, @code{smalldisplay}, 
@code{format}, @code{smallformat}).

The associated value is also a reference on a hash. The keys are:

@table @code
@item begin
An eval of @code{begin} should lead to the beginning of the
formatted @acronym{HTML}.
@item end
An eval of @code{end} should lead to the end of the 
formatted @acronym{HTML}.
@item class
The @acronym{HTML} class. If not defined, the command name.
@item pre_style
The preformatted style. If not defined the corresponding @acronym{CSS} style
is used.
@item style
If the associated value is @code{code}, the format is assumed to be in 
code style, where 
with @samp{---}, @samp{--}, @samp{''} and  @samp{``} kept as is.
If the key is absent the format  inherits the code style
and the font from the enclosing context.
@end table 
The enclosed text will be formatted as described in
@ref{Paragraph and preformatted region}, and the name of the complex
format will be available to the function formatting the text.

If you aren't satisfied with this scheme, you can redefine the following
function reference for a better control over the complex format formatting:

@deftypefn {Function Reference} $complex_format_text complex_format $format_name $preformatted_text

@var{$format_name} is the complex format name, @var{$preformatted_text} is the 
text allready formatted as described in @ref{Paragraph and preformatted region}.
This function returns the whole complex format.
@end deftypefn

@c --------------------------------------------------------
@node Lists tables
@section Customizing the formatting of lists and tables

The formatting of lists and tables is done at two levels:
@itemize
@item 
At the level of the whole region (table or list),
@item
At the level of the individual items, rows or cells of the list or table.
@end itemize

@menu
* Table and list items::
* Whole table list::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Table and list items
@subsection Formatting individual table and list items

In texinfo it is possible to give @code{@@itemize} or table command (hereafter
called a @dfn{format command}) a @dfn{formatting command}. 
For example @code{@@minus} is the formatting command here:
@example
@@table @@minus
@end example

The default is to apply the command to the text item, however it is possible
to avoid it.
The hash @variable{%special_list_commands} has an entry for each of the 
format command. Each of these entries is a hash reference. If a formatting
command is a key of the hash reference, then the formatting command is not
applied to the text item for that format command. For example, if we have:

@example
$special_list_commands@{'itemize'@} = @{ 'bullet' => '' @};
@end example

and we have the following @code{@@itemize}:
@example
@@itemize @@bullet
@@item an item
@@end itemize
@end example

then @code{@@bullet} will not be applied to @code{an item}.

More control of the text before formatting of the line or the item is 
achieved with the following function reference:

@deftypefn {Function Reference} ($result_line, $open_command) format_list_item_texi $format $line $prepended $command
The @var{$format} is the list or table @@-command, 
@var{$line} is the item line, @var{$command} is the @dfn{format command},
@var{$prepended} is set to the text folllowing the @dfn{format command}
on the format argumlent line.
The @var{$result_line} replaces the item argument, and if @var{$open_command}
is true, the @dfn{format command} is opened for the line.
@end deftypefn

@table @emph
@item lists
The items of lists are formatted using the following function reference:
@deftypefn {Function Reference} $list_item list_item $text $format $command $formatted_command $item_number $enumerate_style $number $prepended_texi $prepended_formatted
This function formats the text between @code{@@item} commands. @var{$text} 
is the text corresponding with the item. @var{$format} is the type of format,
@samp{itemize} or @samp{enumerate}. @var{$command} is the formatting command
given in argument to @code{@@itemize}, @var{$formatted_command} is this command
formatted if it is a leading command, like @code{@@minus}.

If the @var{$format} is an enumerate, @var{$item_number} is the number of 
the item in the list, @var{$enumerate_style} is the argument of the enumerate,
@var{$number} is the number or letter corresponding with this item. 

If the @var{$format} is an itemize, @var{$prepended_texi} is the text that
appeared on the itemize line, maybe after the formatting command
(if any), and @var{$prepended_formatted} is the corresponding text, 
formatted.
@end deftypefn

@item two column tables
The two columns tables (@code{@@table}, @code{@@ftable} and @code{@@vtable}), 
items are formatted using two function references,
one for the first line located on the @code{@@item} line corresponding
with the first column, the other for the text appearing on the
following lines, corresponding with the second column text.

@deftypefn {Function Reference} $table_item table_item $item_text $index_label_text $format $command $formatted_command $command_stack $text_formatted $text_formatted_leading_spaces $text_formatted_trailing_spaces $item_command
This function is used to format the text on the @code{@@item} line.
@var{$text_item} is the text line. In case there is an index entry 
associated with the @code{@@item} (as with @code{@@ftable} and 
@code{@@vtable}), @var{$index_label_text} is the text inserted at 
the place where an index entry appears. @xref{Index entry place}.
@var{$format} is the type of format,
@samp{table}, @samp{ftable} or @samp{vtable}. @var{$command} is the formatting command
given in argument to the table format command, @var{$formatted_command} is 
this command formatted if it is a leading command, like @code{@@minus}.
@var{$command_stack} is an array with all the @@-commands opened, latest
on top.
@var{$text_formatted} is the text formatted by the formatting command if
the command is a command with braces like @code{@@code}.
@var{$text_formatted_leading_spaces} and @var{$text_formatted_trailing_spaces}
are the spaces removed before closing the format.
@var{$item_command} is the item command, @samp{@@item} or @samp{@@itemx}.
@end deftypefn

@deftypefn {Function Reference} $table_line table_line $text
This function is used to format the text on the lines following
the @code{@@item} line. @var{$text} is the corresponding text. 
@end deftypefn

@item multitable
@anchor{Multitable formatting}
The multitable elements formatting is controlled by the functions associated
with two function references. One for a cell, and the other for a row.

@deftypefn {Function Reference} $multitable_cell cell $text $item_command \@@columnfractions \@@prototype_row \@@prototype_lengths $column_number
This function is used to format the text of a multitable cell, the text 
following a @code{@@item} or a @code{@@tab}.
@var{$text} is the corresponding text. @var{$item_command} is the command 
used to introduce the row, such that it is possible to distinguish 
between @code{@@item} and @code{@@headitem}.
@var{\@@columnfractions} is a reference on an array 
containing the @code{@@columnfraction} arguments, if any, and 
@var{\@@prototype_row} is a reference on an array containing the row prototypes
given on the @code{@@multitable} line, if any.
@var{\@@prototype_lengths} array contains the lengths of the row prototypes
formatted.
@var{$column_number} is the maximal number of columns.
@end deftypefn

@deftypefn {Function Reference} $multitable_row row $text $item_command \@@columnfractions \@@prototype_row \@@prototype_lengths $column_number
This function is used to format a multitable row. @var{$text} is
the row text, with cells allready formatted with the @variable{$cell}
function reference. @var{$item_command}, @var{\@@columnfractions}, 
@var{\@@prototype_row}, @var{\@@prototype_lengths}
and @var{$column_number} are the same than in the function reference above.

@end deftypefn
@end table

In the default case, this function is interlinked with 
@code{$begin_format_texi} (@pxref{Customizing format opening})
and @code{@@multitable} formatting
since a stack of possible nested 
multitables is kept to know the cell number.

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Whole table list
@subsection Formatting of a whole table or list

If the Texinfo command is a key of the @variable{%format_map}, the associated
value is used to specify the formatting of the construct, otherwise a function 
is called. 
The value in @code{%format_map} associated with a command is interpreted 
similarly with values associated with more simpler commands:

@itemize
@item
If the text is a word, it is considered to be an @acronym{HTML} element
name, and the whole table or list is enclosed between the element opening
and the element closing.
@item
If the text is a word followed by some text, 
the word and is interpreted as above, and the
text is considered to be the attributes text of the element. 
@item
If the text is empty nothing is added to the text.
@end itemize

In case the @code{%format_map} isn't used, a function reference called
@code{$table_list}
should be redefined, the associated function will be called each time
a command isn't found in @code{%format_map}.

@deftypefn {Function Reference} $whole_table_list table_list $format_command $text $command $formatted_command $item_nr $enumerate_style $prepended_texi $prepended_formatted \@@columnfractions \@@prototype_row \@@prototype_lengths $column_number
@var{$format_command} is the Texinfo command name, @var{$text} is the 
formatted items. @var{$command} is the @dfn{format command} given in argument
to the format command, @var{$formatted_command} is the same, but formatted.
@var{$prepended_texi} is the remaining text on the format command line,
@var{$prepended_formatted} is the same, but formatted.
Only relevant in @code{@@enumerate}, @var{$item_nr} is the item number, and 
@var{$enumerate_style} is the @code{@@enumerate} style. Only relevant in 
@code{@@multitable}
@var{\@@columnfractions} is a reference on an array 
containing the @code{@@columnfraction} arguments, if any, 
@var{\@@prototype_row} is a reference on an array containing the row prototypes
given on the @code{@@multitable} line, if any,
@var{\@@prototype_lengths} array contains the lengths of the row prototypes
formatted and
@var{$column_number} is the maximal number of columns.
@end deftypefn

If you still want to use @variable{%format_map} but differently from 
the default, it is possible to redefine the following function reference:

@deftypefn {Function Reference} $whole_table_list format $command $format $text
@var{$command} is the @@-command, @var{$format} is the entry associated with
@var{$command} in @code{%format_map}. @var{$text} is the formatted items.
@end deftypefn

@c --------------------------------------------------------
@node Definitions
@section Definition commands formatting

The formatting of definition commands is controlled by a main hash,
3 strings and another hash, and and five
functions. The mainhash describes how the text on the definition line is 
interpreted, the functions control the formatting of the definition line
and the definition function text.

@menu
* Definition line::
* Definition formatting::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Definition line 
@subsection Customizing the interpretation of a definition line

The keys of the hash @variable{%def_map} are definition command names.
There are two types of entries:

@itemize

@item If the command is a shortcut for 
another definition command the value is a text and the definition 
command is replaced by the text.

For example if we have:
@example
$def_map@{'deftruc'@} = '@@defvr @{A truc@}';
@end example

and a line like
@example 
@@deftruc var
@end example

the line will be transformed in
@example
@@defvr @{A truc@} var
@end example

@item
If the command isn't a shortcut, it is associated with an array
reference. The first element is @samp{f}, @samp{v} or @samp{t} corresponding
with the index type (@samp{f} for function, @samp{v} for variable,
@samp{t} for type).

The remaining of the array describes how to interpret the text following
the definition command on the definition command line. 
The entry item specify what corresponds
with the next bracketed item or word. Currently the possibilities are
@samp{category}, @samp{name}, @samp{type}, @samp{class}, @samp{arg} 
and @samp{argtype}.  @samp{arg} means that the arguments are not mixed 
with type definitions, with @samp{argtype} types are mixed with 
definitions. When there is no @samp{arg} nor @samp{argtype} it is 
the same than  @samp{argtype} (like makeinfo).

For example if we have
@example
def_map@{'defvr'@} = [ 'v', 'category', 'name' ];
@end example

The first bracketed item following @code{@@defvr} is considered
to be the category and the next one is the name. The index associated
with the definition line is the variables index.
@end itemize

Some characters are special with regard with definition parsing, they
are delimiters, the can have a role in definition argument determination, 
and also hae a special meaning in arguments parsing. 
This is not very well documented in the texinfo manual,
so it is subject to change. Strings allow to determine the delimiters:

@vtable @code
@item $def_argument_separator_delimiters
Characters that separate arguments, currently @code{()[],}.
@item $def_always_delimiters
Character that are always delimiters, if they appear in a type or a 
parameter,
@code{()[]}.
@item $def_in_type_delimiters
Character that are considered as delimiters only if in a type. In
a parameter they are part of the parameter.
@end vtable


@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Definition formatting
@subsection Customization of the definition formatting

Five functions are used when formatting a definition command:

@table @strong
@item category name
@deftypefn {Function Reference} $category definition_category $category $class $style $command
This function precise a category name associating a class 
@var{$class} (if given) with @var{$category}. The @var{$style} of the
definition may be @samp{f}, for function, @samp{v}, for variable or @samp{t}, 
for type. The @var{$command} is the definition @@-command.
@end deftypefn

@deftypefn {Function Reference} $entry definition_index_entry $name $class $style $command
This function precise a name associating a class 
@var{$class} (if given) with @var{$name}. This is used to do an index
enntry associated with th edefinition command. The @var{$style} of the
definition may be @samp{f}, for function, @samp{v}, for variable or @samp{t}, 
for type. The @var{$command} is the definition @@-command.
@end deftypefn

@item formatting of the definition line
@deftypefn {Function Reference} $line def_line $class_category_class $name $type $arguments $index_label \@@arguments_array \@@arguments_type_array \@@unformatted_arguments_array $command $class_name $category $class $style $original_command
This function formats the definition line. @var{$class_category} is the category
formatted with @variable{$definition_category}, @var{$name}, @var{$type} and 
@var{arguments} are the element of the definition line. @var{$index_label} is
the text inserted at the place where an index entry appears. 
@xref{Index entry place}.
@var{\@@arguments_array} is an array holding the definition arguments, 
formatted. @var{\@@arguments_type_array} holds the type of the definition
arguments, like @samp{name}, @samp{type} and similar arguments, 
@samp{paramtype}.
@samp{delimiter} and  @samp{param}. @var{\@@unformatted_arguments_array} 
holds the arguments without @@-command substitution. @var{$command} is the
definition command, after substitution. 
@var{$class_name} is the class applied on name, formatted
as specified in @code{definition_index_entry}. @var{$category} and 
@var{$class} are the corresponding arguments. @var{$style} corresponds with the
index style, as explained above. @var{$original_command} is the unmodified
definition @@-command.
@end deftypefn

@item definition text
@deftypefn {Function Reference} $definition_text def_item $text
This function formats the definition text, @var{$text}.
@end deftypefn

@item the whole definition
@deftypefn {Function Reference} $definition def $text
This function formats the whole definition. The definition line and text 
formatted by the above functions are in @var{$text}.
@end deftypefn

@end table

@c --------------------------------------------------------
@node Headings
@section Customizing headings formatting

A function controls the formatting of sectioning element headings, 
with the corresponding function reference:
@deftypefn {Function Reference} $heading_text heading \%element_reference
The @var{\%element_reference} is a reference on a hash corresponding
with the sectioning element. The following keys are of interest:
@table @code
@item text
The heading text
@item name
The heading text without section number
@item node
true if the sectioning element is a node without associated structuring command
@item level
The level of the element in the document tree. @samp{0} is for @code{@@top},
@samp{1} for @code{@@chapter} and so on
@item tag_level
the sectioning element name, with @code{@@raisesections} and 
@code{@@lowersections} taken into account
@item top
true if it is the top element
@end table
@end deftypefn

It is also possible to customize the heading text with section number
with the following function reference (called for headings and nodes):
@deftypefn {Function Reference} $result_texi heading_texi $heading_command $heading $number
@var{$heading_command} is the sectioning @@-command of that heading. 
@var{$heading} is the texinfo for that heading. @var{$number} is the
heading number classicaly computed with dots between numbers, and
letters for top level appendix numbering. This function should return the 
texinfo text corresponding with the numbered heading.
@end deftypefn

The label associated with the heading that can appear before the 
heading itself and even before the navigation panel is customized with the
following function reference:
@deftypefn {Function Reference} $element_label element_label $identifier \%element_reference $command $unformatted_line
@var{$identifier} is the identifier associated with the heading.
@var{\%element_reference} is the same as above. @var{$command} is the @@-command
appearing on the line, and @var{$unformatted_line} is the line, 
unformatted.
@end deftypefn

Additionally, for @code{@@node} and sectionning @@-commands the formatting
of the label, navigation panel and heading is controlled by:
@deftypefn {Function Reference} $element_heagin_text element_heading \%element_reference $command $command_texi_arg $formatted_arg $in_preformatted $one_section $element_heading $first_in_page $is_top $previous_is_top $unformatted_line $element_id $new_element
@var{\%element_reference} is the same as above. @var{$command} is the heading @@-command.
@var{$command_texi_arg} is the argument of the @@-command, unformatted. @var{$formatted_arg}
is is the argument of the @@-command, formatted. @var{$in_preformatted} is true
if in preformatted environment. @var{$one_section} is true if there is only one 
section. @var{$first_in_page} is true if this is the first heading  in a page.
@var{$is_top} is true if the heading is considered as a top element heading.
@var{$previous_is_top} is true if the previous helement was a top element.
@var{$unformatted_line} holds the whole line, unformatted. @var{$element_id}
is the id of the heading. @var{$new_element} is true if the heading is the first
of an element block.
@end deftypefn

@c --------------------------------------------------------
@node Special regions
@section Formatting of special regions (@code{@@verbatim}, @code{@@cartouche}, @code{@@quotation})

Regions corresponding with raw text, like @code{@@verbatim}, @code{@@html}
or @code{@@tex} are formatted according to the following function reference:

@deftypefn {Function Reference} $raw_region raw $command $text
@var{$command} is the command name, @var{$text} is the raw text.
@end deftypefn

If La@TeX{}2HTML is used, @code{@@tex} regions are handled differently,
(@pxref{Bypassing normal formatting}).

The @code{@@cartouche} command formatting is controlled by the
function reference:

@deftypefn {Function Reference} $cartouche cartouche $text
@var{$text} is the text appearing within the cartouche.
@end deftypefn

The formatting of @code{@@quotation} and @code{@@smallquotation} 
is controlled by two function references.
The first one is usefull in case the @code{@@quotation} has an argument, as
it allows to prepend a string to the quotation text:

@deftypefn {Function Reference} $prepended_string quotation_prepend_text $command $text
@var{$command} is the @@-command.
@var{$text} is the argument of the quotation with @@-commands not 
interpreted. This function
can return a string which will be prepended to the quotation text.
@end deftypefn

@ignore
@deftypefn {Function Reference} $prepended_string quotation_prepend_text $style $text
@var{$style} is the first argument of the @code{@@quotation} if there are
two arguments. @var{$text} is the second argument or the first if there is
one argument. There are still @@-commands in these strings. This function
can return a string which will be prepended to the quotation text.
@end deftypefn
@end ignore

The whole quotation is formatted by:

@deftypefn {Function Reference} $quotation quotation $command $quotation_text $argument_text $argument_text_texi
@var{$command} is the @@-command.
@var{$quotation_text} is the quotation text, formatted, with the text 
prepended by the function above. @var{$argument_text} is the argument 
of the @code{@@quotation}, formatted. @var{$argument_text_texi} is the argument
of the @code{@@quotation}, simply formatted.
@end deftypefn

@ignore
@deftypefn {Function Reference} $quotation quotation $quotation_text $argument_text $argument_style_texi $argument_style_id
@var{$quotation_text} is the quotation text, formatted, with the text 
prepended by the function above. @var{$argument_text} is the second argument 
of the @code{@@quotation} or the first if there is one argument, formatted.
The other arguments are defiend if there are two arguments for the 
@code{@@quotation}, @var{$argument_style_texi} is this argument, with 
@@-commands, and  @var{$argument_style_id} is this argument transformed in 
an identifier which can be used as an @acronym{XML} identifier.
@end deftypefn
@end ignore

@c --------------------------------------------------------
@node Menus
@section Menu formatting

There are two possibilities for menu formatting:

@itemize @bullet
@item format the whole menu in a preformatted environment, like 
in @ref{Complex formats};
@item format the menu in table with more specialized formatting for each
part of the menu; 
@end itemize

The simple formatting in a preformatted is used if 
@variable{$SIMPLE_MENU} is true, 
otherwise the format with tables is used (this is the default).

If @variable{$USE_ACCESSKEY} is set, the @code{accesskey} attribute 
is used in anchors. In that case the @variable{%BUTTONS_ACCESSKEY}
hash is used for the access key.

To understand how the formatting of menus is controlled, the different
parts of a menu are first described, then how to control the formatting
of each of these parts, for each possible formatting.

@menu
* Menu parts::                  A menu consists in menu entry and menu 
                                comments
* Menu components formatting::  
* Simple menu formatting::      formatting of a whole menu in a simple 
                                preformatted environement
* Table menu formatting::       formatting of a whole menu in a
                                table environment
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Menu parts
@subsection The structure of a menu

In @command{texi2html}, a menu is considered to be composed of 2 parts, the
@dfn{menu entries} and the @dfn{menu comments}. Menu entries are further 
divided in an @dfn{entry link} and optionnaly an @dfn{entry description}.
The entry link consists in a node name and an optionnal menu entry
name.

A menu entry begins with @samp{*} at the beginning of the line. It begins
with the entry link, followed by the description. The description spans until
the next menu entry, 
or an empty line not contained within a command block which begun in the 
description. An empty line or
starts a menu comment, which spans until the next menu entry.

Here is an illustration of these rules:

@example
@@menu
* entry name: node name.        description begins
   description continues
* another menu entry::
   description begins
                    description continues

   A menu comment, after an empty line

* node::                        description begins
still in description.

* last entry::         description begins @@emph@{text

of the description, even if there is an empty line,
because we are in @@emph@}.
@@end menu
@end example

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Menu components formatting
@subsection The formatting of the different menu components

If in a preformatted context (and @code{$SIMPLE_MENU} isn't set), the 
menu link and description are put in the same preformatted environment.
This can be avoided with @variable{$SEPARATE_DESCRIPTION}.

Two function references are associated with the formatting of the 
different parts of a menu:
@deftypefn {Function Reference} $link menu_link $section \%state $href $node $name $ending $has_name $command_stack $preformatted
@var{$section} is the section name corresponding with the link, @var{$href}
is the link hypertextual reference. @var{$href} may be absent. @var{\%state}
holds informations about the current context. 
@c The only key which could be
@c of interest is @code{preformatted}, true if the context is a preformatted
@c context. 
@var{$node} is the node name, @var{$name} is the
name of the node. @var{$ending} is the text ending the link entry, 
in general @samp{::} followed by some spaces.
@var{$has_name} is true if the entry has an explicit name, otherwise
@var{$name} has been constructed using the formatted node name.
@var{$command_stack} is an array containing the commands enclosing
the menu link. It is used in the default case to detect if the 
menu link is right in the @command{@@menu} or not, since if it is not 
right below the menu the formatting is simpler.
@var{$preformatted} is true if in preformatted context.
@xref{Three contexts}. 
@end deftypefn

This command is not called if @code{$SIMPLE_MENU} is set.

@deftypefn {Function Reference} $description menu_description $description_text \%state $element_text
@var{$description_text} is the text of the menu description. 
The formatted link is also here if in preformatted context and 
@code{$SEPARATE_DESCRIPTION} is not set.
@var{\%state}
should be used similarly than for the menu link. @var{$element_text}
is the heading of the element associated with the node.
@var{$command_stack} and @var{$preformatted} are the same than for the
menu link.
@end deftypefn

The @dfn{menu comment} part is formatted like a normal command, 
called @code{menu_comment}. It is only used if not in preformatted 
environment and if just below a @code{@@menu} since otherwise one
cannot tell if it is a menu commment or normal text.
The default is to have it be formatted
like a @ref{Complex formats}, with
@example
$complex_format_map->@{'menu_comment'@} =
@{
   'begin' => q@{"<tr><th colspan=\"3\" align=\"left\" valign=\"top\">"@},
   'end' => q@{"</th></tr>"@}, 'pre_style' => "$MENU_PRE_STYLE", 'class' => 'menu-comment',
@}
@end example

@c @deftypefn {Function Reference} $menu_comment menu_comment $text
@c @var{$text} is the text of the menu comment. It is always in a preformatted 
@c environment.
@c @end deftypefn

@c Another function reference corresponds with a special case. It
@c is used when a menu entry appears within another block command, to
@c avoid the possibilities of invalid @acronym{HTML} production.
@c In that case the menu description and menu comments are not formatted 
@c specially, but treated like normal text.
@c @deftypefn {Function Reference} $link simple_menu_link $link_text $href $node $name $ending $has_name
@c @var{$link_text} is the text corresponding with the link name, @var{$href}
@c is the link hypertextual reference.
@c @var{$node} is the node name, @var{$name} is the
@c name of the node, and @var{$ending} is the text ending the link entry.
@c @var{$has_name} is true if the entry has an explicit name, otherwise
@c @var{$name} has been constructed using the formatted node name.
@c @end deftypefn

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Simple menu formatting
@subsection  Simple menu formatting in a preformatted environment

If the menu is to be formatted in a single preformatted environment,
an entry for @samp{menu} and @samp{detailmenu} 
should be added to the @code{$complex_format_map}
hash reference (@pxref{Complex formats}).
In the default case, if the user didn't add an entry himself, a very simple 
entry is used, with:

@example
$complex_format_map->@{'menu'@} = @{ 'begin' => q@{''@} , 'end' => q@{''@},
    'pre_style' => "$MENU_PRE_STYLE", 'class' => 'menu-preformatted' @};
@end example

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Table menu formatting
@subsection The formatting of the menu in a table

In the default case, the name of the section corresponding with the 
node is used instead of the node name. If @variable{$NODE_NAME_IN_MENU} is 
true, however, node names are used. If @variable{$AVOID_MENU_REDUNDANCY}
is true and menu entry equal menu description the description isn't printed.
This is the default. Likewise, if node or section name equal entry name, 
do not print entry name.

A symbol, @variable{$MENU_SYMBOL} is put at the beginning of menu entries
when the node name is used. The default is @samp{&bull;}.
If @variable{$UNNUMBERED_SYMBOL_IN_MENU} is true it is 
also put at the beginning of unnumbered section names. This is not
done by default.

The menu comments are considered to be preformatted text. The style 
associated with this preformatted text is determined by 
@variable{$MENU_PRE_STYLE}. Default is @samp{font-family: serif}.
The entry similar with an entry in @code{$complex_format_map} 
(@pxref{Complex formats}) used when the menu appears in a preformatted
enviroment is in
@variable{$MENU_PRE_COMPLEX_FORMAT}, and, in the default case is:
@example
$MENU_PRE_COMPLEX_FORMAT = @{
              'pre_style' => $MENU_PRE_STYLE, 
              'class' => 'menu-preformatted'
   @};
@end example

The css class associated with menu comments is @code{menu-comments}.

The following function reference controls the formatting of a wole menu
or a detailmenu in that case:

@deftypefn {Function Reference} $menu menu_command $command $menu_components_text
@var{$command} is the menu command, currently @samp{menu} or @samp{detailmenu}.
@var{$menu_components_text} is the formatted menu components text, obtained
as explained above.
@end deftypefn

@c --------------------------------------------------------
@node Indices
@section Indices formatting

Two different things needs to be handled for indices formatting, the place
where the index term appears, the index entry, and the index list itself.
The indexing commands like @code{@@cindex} determines where index entries
appear, and the index list is printed with a @code{@@printindex} command. 

@menu
* Index entry place::             Index entries in the main document are 
                                  targets for hypertext references
* Index list::                    Customizing the formatting of the index list
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Index entry place
@subsection Formatting of index entries

Index entry places in the main text may be the target for hypertext 
references. Their formatting
is controlled by the function associated with the following function 
reference:

@deftypefn {Function Reference} $target index_entry_label $identifier $preformatted $entry $index_name  $index_command $texi_entry $formatted_entry
@var{$identifier} should be used to create
a target for links (typically associated with a name or id 
attribute in @acronym{HTML}).
@var{$preformatted} is true if the index entry appeared in preformatted text.
@var{$entry} is the index entry with all the @@-commands removed.
@var{$index_name} is the index name, @var{$command} is the index command which
may be a index command like @code{@@cindex}, but also a definition or 
a table. @var{$texi_entry} is th eindex entry with @@-commands, and 
@var{$formatted_entry} the entry formatted.
@end deftypefn

Regular index entries are (like @code{@@cindex}) are 
formatted using the following function reference:
@deftypefn {Function Reference} $index_entry index_entry_command $command $index_name $label $entry_texi $entry_formatted
@var{$command}, @var{$index_name}, @var{$entry_texi} and @var{$entry_formatted}
are the same as above, and @var{$label} is what could be used as a label,
formatted using the function above. 
@end deftypefn

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Index list
@subsection Customizing the formatting of index lists

There is an elaborate default index formatting in texi2html, with
index summary by letter linking to index entries grouped by letters too,
with the possibility of index pages split accross files. This system may be 
completly bypassed by redefining the function reference that is called when
@code{@@printindex} is encountered:

@deftypefn {Function Reference} $index_text printindex $index_name
@var{$index_name} is the index name appearing on the 
@code{@@printindex} line. The index formatted should be returned
by this function reference.
@end deftypefn

If the default index formatting is used, there are still possibilities
to customize part of the formatting.
The index entries are sorted alphabetically. A whole index list is 
considered to be composed of letter entries. A letter entry is composed
by all the index entries beginning with that letter. A letter may
be a non alphabetical character, but we call it letter here.

An index summary appears at the beginning and at the end of an index list,
and should be used to jump directly to a letter entry. Indices lists
may be split across pages, thus the different letters may appear on different
files. The number of index entries appearing on each page is determined
by a variable @variable{$SPLIT_INDEX} if set. The default is to split
indices after 100 entries.

The formatting of all these elements is controlled by the following
function references:

@table @emph
@item formatting of a letter in a summary
@deftypefn {Function Reference} $letter summary_letter $letter $file $identifier
This function is used to format a letter appearing in a summary, refering
to a letter entry in the index list.
@var{$letter} is the letter. @var{$file} is the file name where the letter
entry appears. More precisely, it is empty when the letter entry is on the 
same page than the summary, it contains the file name when the index page
is split accross page. @var{$identifier} is an identifier for the target 
letter entry. 
@end deftypefn

@item formatting of a summary
@deftypefn {Function Reference} $summary index_summary \@@alphabetical_letters \@@nonalphabetical_letters
@var{\@@alphabetical_letters} and @var{\@@nonalphabetical_letters} contain the
formatted summary letters, formatted with the above function.
@end deftypefn

@item formatting of an index entry
@deftypefn {Function Reference} $entry index_entry $entry_href $entry_text $section_href $section_heading
@var{$entry_href} is a reference to the place where the index entry 
appeared, @var{$entry_text} is the corresponding text. @var{$section_href}
is a reference to the beginning of the sectioning element containing 
the index entry, @var{$section_heading} is the heading of the element.
@end deftypefn

@item formatting of letter entry
@deftypefn {Function Reference} $letter_entry index_letter $letter $identifier $index_entries_text
This function formats a letter entry, consisting in all the index entries 
beginning with this letter. @var{$letter} is the letter, @var{$identifier} 
should be used to create a target for links (typically links from summaries),
and @var{$index_entries_text} is the text of the index entries formatted as 
described above.
@end deftypefn

@item formatting of whole index
@deftypefn {Function Reference} $index print_index $index_text $index_name
@var{$index_text} is the text of all the index entries grouped by letter
appearing in that page formatted as above. It is undef if there are
no entries or theindex name isn't known. @var{index_name} is the name of
the index, the argument of @code{@@printindex}.
@end deftypefn
@end table

@c --------------------------------------------------------
@node Floats and lists of floats
@section Floats and lists of floats

Floats appear in the @code{@@float} environment, optionaly with a style
and a label, and with optionnal @code{@@caption} and @code{@@shortcaption}. 
Their list appear after a @code{@@listoffloats}. 

A hash reference is associated with each float, it is available in some
formatting functions. The keys are:
@table @code
@item caption_texi
@itemx shortcaption_texi
A reference on an array containing the caption or shortcaption lines,
with texi @@-commands.
@item style_texi
The style with texi @@-commands.
@item style_id
The unique identifier associated with the style.
@item style
The style formatted.
@item nr
The number with the same conventions than makeinfo (use the chapter number a 
dot and then the number of the float of that style in the chapter, or an
absolute number if in unnumbered).
@item chapter_nr
The number of the chapter containing the float.
@item nr_in_chapter
The number of the float in the chapter.
@item absolut_nr
The number of the float in the document.
@item texi
The label with @@-commands.
@item name
The label formatted.
@item id
The unique identifier associated with the label. Usefull to make an anchor
or a reference.
@item target
The target that can be used to refer to that float.
@item element
A reference on a structure representing the element the float appear in.
@end table

@menu
* Floats::                           Formatting of floats
* Lists of floats::                  Formatting the lists of floats 
@end menu

@node Floats
@subsection Formatting a float

First there is an occasion to construct a texinfo text for the caption, using
the caption texinfo lines and the informations in the float structure.
The returned lines will be formatted in the main program. A function reference
is used here:

@deftypefn {Function Reference} {(\@@caption_lines_returned, \@@shortcaption_lines_returned)} caption_shortcaption \%float \@@caption_lines \@@shortcaption_lines
@var{\%float} is the structure defined above. @var{\@@caption_lines} and 
@var{\@@shortcaption_lines} are references on arrays containing the 
texinfo lines for caption and short caption. @var{\@@caption_lines_returned}
and @var{\@@shortcaption_lines_returned} are references on an array 
containing the texinfo lines for the caption and shortcaption.
@end deftypefn

Then the float is formatted with the following function reference:

@deftypefn {Function Reference} $text float $float_text \%float $caption_text $shortcaption_text
@var{$float_text} is the text appearing within the @code{@@float}, formatted.
@var{\%float} is still the structure defined above. @var{$caption_text} and
@var{$shortcaption_text} are the caption and short caption build with the
above function and formatted.
@end deftypefn

It is also possible to do something when a caption or a shortcaption appear
with t hefollowing function reference:

@deftypefn {Function Reference} $text caption_shortcaption_command $command $formatted_caption \@@texi_lines \%float
@var{$command} is the @@-command, @samp{caption} or @samp{shortcaption}.
@var{$formatted_caption} is the caption text, formatted, while 
@var{\@@texi_lines} is a reference on an array containing the caption lines,
this time without any formatting.
@var{\%float} is still the structure defined above. 

In the default case this function reference returns an empty string.
@end deftypefn


@node Lists of floats
@subsection Formatting lists of floats

A list of floats is introduced by @code{@@listoffloats}. The argument of
@code{@@listoffloats} is the @dfn{style}. First the style texinfo can be 
modified with the following function reference:

@deftypefn {Function Reference} $style_texi_returned listoffloats_style $style_texi
@var{$style_texi} is the @code{@@listoffloats} argument with texinfo 
@@-commands kept. It is possible to make changes to the @var{$style_texi} and
return a modified string, still with @@-commands. The modified string
is formatted in the main program.
@end deftypefn

After that, for each of the floats with that style, first there is a 
possibility to modify the float style and the float caption before they 
are formatted in the main program, with the following function references:

@deftypefn {Function Reference} $float_style_texi_returned listoffloats_float_style $style_texi \%float
@var{$style_texi} is the style, and @var{\%float} is the structure described 
above. This function reference returns a style to be formatted in the
main program.
@end deftypefn

@deftypefn {Function Reference} $caption_texi_returned listoffloats_caption \%float
@var{\%float} is the structure described 
above. This function reference returns a caption to be formatted in the
main program.
@end deftypefn

Each entry is formatted by:

@deftypefn {Function Reference} $listoffloats_entry listoffloats_entry $style_texi \%float $float_style $caption $href
@var{$style_texi} is the style with @@-commands, @var{$float_style} is the
style returned by the above function and formatted. @var{$caption} is the
caption returned by the above function formatted. @var{\%float} is the 
structure corresponding with the float, and @var{$href} is an href pointing to
the float location.
@end deftypefn

Lastly, the whole @code{@@listoffloats} is formatted by:

@deftypefn {Function Reference} $listoffloats listoffloats $style_texi $style \@@listoffloats_entries
@var{$style_texi} is the style with @@-commands, @var{$style} is the
style returned by the above function and formatted. The array reference 
@var{\@@listoffloats_entries} holds the entries formatted by the above
function.
@end deftypefn

@c --------------------------------------------------------
@node Footnotes
@section Customizing the footnotes formatting

Each footnote is associated with a footnote entry. Several footnote entries
are grouped in a footnote section. When a footnote appears, two things must
be formatted: in the main text the place where the footnote appear
and the footnote text. 

Two functions, with corresponding function references control the formatting
of the footnotes:

@deftypefn {Function Reference} {(\@@lines $text_for_document)} foot_line_and_ref $number_in_doc $number_in_page $footnote_id $place_id $document_file $footnote_file \@@lines \%state
@var{$number_in_doc} is the footnote number in the whole document, 
@var{$number_in_page} is the footnote number in the current page.
@var{$footnote_id} is an identifier for the footnote in the footnote text
which should be used to make target for references to that footnote,
while @var{$place_id} is an identifier for the location of the footnote
in the main document. Similarly, @var{$document_file} is the file name
of the file containing the text where the footnote appears in the main 
document, while @var{$footnote_file} is the file name of the file where 
the footnote text appears. 

@var{\@@lines} is a reference on an array containing the footnote text
lines, allready formatted.
And @var{\%state} holds informations about the context at the footnote
place in the main document. As usual the most usefull entry is 
@code{preformatted} which is true if the footnote appears in a preformatted 
context. 

This function returns a reference on an array, @var{\@@lines} containing
the updated footnote text for the footnote entry, and @var{$text_for_document},
the text appearing at the footnote place in the main document, linking
to the footnote entry.
@end deftypefn

The following function is only used when footnotes are at the bottom
of a page and the document is split. 
For customization of the footnotes page in case they are on a separated 
page or section, @ref{Special pages layout}. For 
the determination of the footnote locations, @ref{Page layout options}.

@deffn {Function Reference} foot_section \@@footnotes_lines
This function formats a group of footnotes. @var{\@@footnotes_lines} is a
reference on an array holding the lines of all the footnote entries
formatted as explained above. This function modifies the reference.
@end deffn

@c --------------------------------------------------------
@node Customizing format opening
@section Customizing format opening

The following function reference is called when a format is opened.
A format is any @@-command that ends with a @code{@@end} except 
@@-commands that only select if the input is processed (like 
@code{@@ignore} or @code{@@ifhtml}) or raw @@-commands (like @code{@@verbatim}
and @code{@@html}).

@deftypefn {Function Reference} $line begin_format_texi $command $line \%state
The @var{$command} is the format command, the @var{$line} is the 
line following the @@-command, @var{\%state} is a reference on
a hash containing many formatting information. It can modify the 
line and return something else.

In the default case, it is used to keep track of the multitable nesting.
As a consequence, it is linked with the multitable formating. 
@xref{Multitable formatting}.
@end deftypefn

@c --------------------------------------------------------
@node Bypassing normal formatting
@section Bypassing normal formatting

It is possible to bypass completely the normal formatting of @@-commands 
with braces and raw regions 
(@code{@@html}, @code{@@tex}, @code{@@xml}@dots{} regions). 
In that case the @@-commands and the text within 
are passed to a user defined function early, in a pass when no expansion
of output takes place, called the collecting pass. Another user defined 
function is called during the output expansion phase.

Moreover, arbitrary user defined functions may be called between the 
different texinfo parsing and outputting passes. This could be used, for
example to initialize some things before collecting the @@-commands and their
text, expanding them between the collecting and expansion phase and doing
some cleaning after the expansion pass. These possibilities are used for
the interface to La@TeX{}2HTML 
(@pxref{Expanding TeX regions}), and the examples are taken from that use.  

The @@-commands that are keys of the @variable{%command_handler} hash 
are collected in the collecting pass and expanded in the expansion
pass using user defined functions. The associated value is a reference on
a hash used to specify the user defined function references. 
The key of the hash reference are @code{'init'} for the function
reference called during the collecting pass, and @code{'expand'}
during the expansion pass. Here is an example for an @@-command with
braces:

@example
$command_handler@{'math'@} =
     @{ 'init' => \&Texi2HTML::LaTeX2HTML::to_latex,
       'expand' => \&Texi2HTML::LaTeX2HTML::do_tex
     @};
@end example

And an example for a raw region @@-command:

@example
$command_handler@{'tex'@} =
     @{ 'init' => \&Texi2HTML::LaTeX2HTML::to_latex,
       'expand' => \&Texi2HTML::LaTeX2HTML::do_tex
     @};
@end example

The function references are called like:

@deftypefn {Function Reference} $status $command_handler@{'$command'@}->@{'init'@} $command $text $count
@var{$command} is the @@-command name, @var{$text} is the text appearing 
within the @@-command. @var{$count} is a counter counting how many times
this @@-command appeared. @var{$status} is a boolean which should be true if 
the collecting was succesfull. If false the @@-command and the text is 
discarded.
@end deftypefn

@deftypefn {Function Reference} $result $command_handler@{'$command'@}->@{'expand'@} $command $count $state $text
@var{$command} is the @@-command name, @var{$count} is a counter counting 
how many times this @@-command appeared. @var{$state} is a reference on a 
hash containing many informations about the context. @var{$text} should be
empty. @var{$result} is the expanded resulting text.
@end deftypefn

There are three places for user defined functions, associated with arrays:
@vtable @code
@item @@command_handler_init
The function references in that array are called before the collecting pass.
At that time the information available is essentially the file names.
@item @@command_handler_process 
The function references in that array are called between the collecting
pass and the expansion pass. At that time all the special @@-commands  
have been collected as explained above but no output has been produced.
@item @@command_handler_finish
he function references in that array are called after the end of the
output generation.
@end vtable 

Here is an example of these arrays use:

@example
push @@command_handler_init, \&Texi2HTML::LaTeX2HTML::init;
push @@command_handler_process, \&Texi2HTML::LaTeX2HTML::latex2html;
push @@command_handler_finish, \&Texi2HTML::LaTeX2HTML::finish;
@end example

@c --------------------------------------------------------
@node  Handling special regions
@section Handling special regions

Special regions @code{@@titlepage}, @code{@@documentdescription} and
 @code{@@copying} are removed from the document before the last pass in the
default case. They can be kept if the value associated with the @@-command
in the @variable{%region_formats_kept} hash is true.

The @code{@@insertcopying} @@-command is formatted by 
@deftypefn {Function Reference} $insertcopying insertcopying $text $comment $simple_text
@var{$text} is the text appearing in @code{@@copying}, formatted.
@var{$comment} is the text with texi removed, should be very simple
text. @var{$simple_text} is the text formatted in string context.
@end deftypefn

The title page handling is described in @ref{Title page}.

@c --------------------------------------------------------

@node Other and unknown commands
@section Customizing other commands, and unknown commands 

@ignore
# The command_handler arrays are for commands formatted externally.
# The function references in @command_handler_init are called
# before the second pass, before the @-commands text collection.
# Those in @command_handler_process are called between the second pass
# and the third pass, after collection of @-commands text and before their
# expansion.
# Those in @command_handler_process are called after the third pass,
# after the document generation.
@command_handler_init = ();
@command_handler_process = ();
@command_handler_finish = ();
@end ignore

@c --------------------------------------------------------
@c @node Skipped commands
@c @section Customizing ignored commands and text

@cindex skipped command
@cindex unknown command

Many commands without braces are available in texinfo, sometimes with
a specific syntax. For example we have @code{@@sp}, @code{@@noindent},
@code{@@documentlanguage}, @code{@@oddheading}, @code{@@headings},
@code{@@shortcontents}, @code{@@shorttitlepage} or @code{@@comment}. 
@command{texi2html} interprets
some of these commands and some functions or variables are used for
their formatting or to access their information.
In the default case, however, most of these constructs are ignored.

It is possible to change how the things following these commands
on the line are handled, what is considered to be an arg for those
commands and it is also possible to keep them instead of discarding
them such that it is possible to handle them specially, with the
same function than the one used for unknown commands.

Those special commands without braces are the key of a hash:
@variable{%misc_command}. The associated value is a reference on a
hash enabling to set the properties of these commands. The
keys of this hash reference is the name of a property, the value
is the value of the property. For example here we have @code{line}
for the @code{arg} property for the @code{command} @@-command.

@example
$misc_command@{'command'@} = @{'arg' => 'line', 'skip' => 'space'@};
@end example

The properties and possible values are:

@table @code
@item skip
This property enables to set what is skipped after the command arguments.
Here are the possible values:
@table @code
@item line
The remaining of the line is skipped.
@item space 
Spaces are skipped but not newline.
@item whitespace 
Spaces are skipped
@item linewhitespace
Spaces are skipped if there are only spaces remaining on the line.
@item linespace
Spaces are skipped, but not newline if
there are only spaces remaining on the line
@end table

@item arg
If the associated value is @code{line} the line is considered to be the
argument. If it is a number it is the number of args (separated by spaces).
@item keep
If true the args and the macro are kept, otherwise they are discarded.
The defaut is to have @code{keep} undef for all the commands.
If @code{keep} is true for @code{@@verbatiminclude} the default
action for this macro isn't done.
@end table


Commands which don't appear in the hashes 
@c @variable{%things_map} @variable{%pre_map}
@variable{%simple_map}, @variable{%simple_map_pre},
@variable{%simple_map_texi} and @code{%misc_command}, or that appear in
@code{%misc_command} but with @code{keep} true are processed by the 
following function reference:

@deftypefn {Function Reference} {($result_line, $result, $result_text, $message)} unknown $command $line $pass
@var{$command} is the @@-command, @var{$line} is the line following the 
@var{$command}. @var{$pass} is the pass of texi2html (@pxref{Three passes}). 
@var{$result} is a boolean. If it is true then the other return
values are taken into account otherwise the default actions are
used. In case @var{$result} is true, @var{$result_line} is the new line 
to be processed further, @var{$result_text} is the resulting formatted text 
and @var{$message}, if defined is a message outputted to the output
with line number added by @command{texi2html}.
@end deftypefn

Commands with braces not specified above 
nor in @variable{%style_map}, @variable{%style_map_pre} and
@variable{%style_map_texi} are processed 
by the following function reference

@deftypefn {Function Reference} {($result, $result_text, $message)} unknown_style $command $text
@var{$command} is the @@-command, @var{$text} is the text appearing within 
the braces (allready formatted). @var{$result} is a boolean. If it is true then
the other return
values are taken into account otherwise the default actions are
used. In case @var{$result} is true, @var{$result_text} is the resulting
formatted text
and @var{$message}, if defined is a message outputted to the output
with line number added by @command{texi2html}.
@end deftypefn


@c --------------------------------------------------------
@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@c ========================================================
@c ========================================================

@node Internationalization
@appendix Internationalization

The strings written in the document are selected based on the
document language. This can be used to customize the strings, 
as described in @ref{Strings}. This also enables translation of the
strings. 

@menu
* Translating strings::
* Adding new strings::
@end menu

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Translating strings
@appendixsec Translating strings

@cindex Translation
@cindex i18n
@vindex $LANGUAGES
@vindex $T2H_OBSOLETE_STRINGS


@menu
* Supported language::
* New language::
@end menu

@node Supported language
@appendixsubsec Contributing to existing translations

If the language is allready supported, then there will be a file 
in the @file{i18n} directory with name the two-letter 
ISO-639 language code. In that case you can enhance the translations by 
editing this file. There is a @code{$LANGUAGES->@{'@var{language}'@}}
hash in that file. The keys are the english strings, in @code{''}, the 
values (in @code{''} after @code{=>}) are the translations.
When a string contains a @samp{%} followed by @samp{@{} @var{name} @samp{@}}
it means that the string will be expanded by @command{texi2html}. For
an example, see @ref{Strings}.

After that you should run the command @command{./manage_i18n.pl merge} in
the top directory, it should merge your file with the existing files in
@file{translations.pl}, which is incorporated to the @file{texi2html} script
by @command{make}.

@node New language
@appendixsubsec Contributing translations to another language

If the language isn't currently supported, copy the @file{en} file in 
@file{i18n} to a file with name the two-letter ISO-639 
language code of your language
 and then add your translations to the strings. You could also add your 
two-letter language code in the @file{manage_i18n.pl} file in the
@code{@@known_languages} array. 

After that you should run the command 
@command{./manage_i18n.pl update @var{lang}} and 
@command{./manage_i18n.pl merge} in
the top directory.

Obsoleted strings are not removed from the files, they are still present
in the @code{$T2H_OBSOLETE_STRINGS->@{'@var{language}'@}} hash in case
the string is reused later.

If you made change to strings specified in installed files
(@pxref{Installation})
you will have to reinstall them otherwise the installated files will 
take precedence (@pxref{Using init files}).

@c -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@node Adding new strings
@appendixsec Adding new strings written to document

@cindex internationalized strings
@cindex @command{manage_i18n.pl}

If you need to write strings, for example the new string @var{a string} 
to the resulting document, call @code{&$I('a string')}. Use simple quotes.
If you want to substitute a value in the string put 
@code{%@{@var{string_value}@}}, in the string, and give a second argument 
to @code{&$I}, a hash reference with key @var{string_value} and value 
the what you want to substitute.
Here is an example:

@example
return &$I('%@{name@} of %@{class@}', 
       @{ 'name' => $name, 'class' => $class @});
@end example

In that case @code{%@{name@}} is substituted by @code{$name} in the translated
string.

After that you should run the command @command{./manage_i18n.pl} in the top
directory, to add your new strings to the template file, that is the 
file for english and to all the files in the @file{i18n}
directory. This is achieved with

@example
./manage_i18n.pl template
./manage_i18n.pl update
@end example

These two commands won't work if you don't have the 
@code{Data::Dumper} module installed.
And to merge the new translation files in @file{translations.pl}, do

@example
./manage_i18n.pl merge
@end example

All these steps may be performed by @command{make}, once the language file
is added to @file{Makefile.am} in the @code{i18n_files} variable.

@c --------------------------------------------------------
@node Incompatibilities
@chapter Incompatibilities with previous versions

@command{texi2html} has accumulated a lot of incompatibilities with previous
versions. They are documented in the @file{NEWS} file, we discuss them
here nevertheless. Most of the incompatibilities were introduced in 
version 1.68. API changed also a lot between 1.78 and 1.80.

@itemize @bullet
@item API changes between 1.78 and 1.80: 
@itemize @bullet
@item what was done in the beginning of the $print_section 
function reference is now done in $print_element_header.
@item there is a new argument for $normal_text.
@item there is a new argument for $menu_link and $simple_menu_link, and the 
name argument is always set, even if there is no explicit name. The new 
argument is true if there really was an explicit name.
@item $internal_ref and $external_ref don't change inforef to xref anymore.
@item in $table_item the text is not formatted with the format command,
  the text_formatted argument is.
@item definition index entries are now formatted with $definition_index_entry,
  not with $definition_category anymore.
@item $printindex is called if an index appears, even if the index is not 
defined or there are no index entries.
@item  new argument (@@-command name) for $quotation and $quotation_prepend_text.
@item change in the heading API. THIS_HEADER is not used anymore.
  New function reference, element_heading  to format a node or a section 
  heading, including navigation and label. Accordingly, print_Top and 
  one_section don't print the element header anymore. Also it is
  reported if the element is a new element, is the main element and
  more arguments, and top element heading is always done in heading.
@item  print_element_header and print_navigation now return their result.	
@item the @code{copying} key of %Texi2HTML::THISDOC is now called
@code{copying_comment}.
@item TOC_LIST_ATTRIBUTE is now called NO_BULLET_LIST_ATTRIBUTE.
@item TOC_LIST_STYLE is now called NO_BULLET_LIST_STYLE.
@item the $unknown function reference has a new argument, the pass number.
@item @option{--sec-nav} is replaced by @option{--headers}.
@item @option{--Verbose} is replaced by @option{--verbose}.
@item @option{--lang} is replaced by @option{--document-language}.
@item @option{--separated-footnotes} is replaced by @option{--footnote-style}.
@item @option{--lang} is replaced by @option{--document-language}.
@item @code{&$menu_comment} is removed, @code{menu_comment} is now handled
  like an @@-command.
@item @code{@@detailmenu} is now formatted more like @code{@@menu}, and
the @code{&$menu} function reference is replaced by @code{&$menu_command}.
@code{&$menu} is kept for backward compatibility. If @code{&$menu} is defined, 
@code{@@detailmenu} is ignored.
@item the API for the formatting of menus completly changed. $simple_menu_link
  is removed, everything should be done in $menu_link.
@item image API changed, and is unstable, so not documented.
@item image file paths are not completed anymore in the default case. 
  The previous
  behaviour can be restored with @code{$COMPLETE_IMAGE_PATHS} set to true.
@item in %misc_command @samp{texi} is not used anymore. The value and macros
are expanded as they should be unconditionnally.
@item there is a new 'style' key in $complex_format_map, to be able to 
  differentiate complex formats inheriting fonts and code_style (like 
  @@format, @@display).
@item $EXTENSION should be undef if one doesn't want an extension to be added.
@item THISDOC@{'title'@} and similar are now for @@title since only one @@title
  should appear in the document. @@settitle is tried first to set fulltitle.
@item Configuration variables are modified anymore, instead the variable
  value is put in $Texi2HTML::THISDOC@{'VAR'@}. This is the case for
  DO_CONTENTS, DO_SCONTENTS, CSS_LINES, BODYTEXT, DOCUMENT_DESCRIPTION,
  DOCUMENT_ENCODING, IN_ENCODING, ENCODING_NAME, OUT_ENCODING.

  For example, if $CSS_LINES is defined, the value is put in 
  $Texi2HTML::THISDOC@{'CSS_LINES'@} which is used for formatting, and if
  $CSS_LINES is not defined, $Texi2HTML::THISDOC@{'CSS_LINES'@} is 
  autodetected.
@item  When there is no section and $USE_NODES is not set don't split by node.
This behaviour and the previous aren't documented, so it could change
in the future.
@end itemize
@item API changes between 1.76 and 1.78: 
@itemize @bullet
@item paragraph has new arguments
with indentation information, added as the third argument, and
other context information. The formatting linked with commands
opened before the paragraph and closed after the paragraph are done
in the formatting function. Similar
things are done for preformatted.
@item normal_text 
changed completely. There
are much more arguments to give informations about the context, and
normal_text now does more text manipulation. 
@item New arguments for image the alt text, the height and width, 
the path to working dir and the path to image file relative 
to working dir. More image formatting is
done in the formatting function.
@item New argument for empty_line.
@item End of line removal is done in formatting function of definition line
formatting.
@item node_file_name now should only returns the node file, since the 
redirection file isn't used anymore. element_file_name only is used for 
file names, whatever NODES_FILES is.
@end itemize
@item changes between 1.66 and 1.68:
@itemize @bullet
@item When the manual is split the default is to put resulting files in 
a directory with name the manual file basename (previously they were left in
 the current directory). To avoid that, call texi2html with 
@option{-output .}. This has been changed to be compatible with 
@command{makeinfo} and also because it fits better with the cross
manuals reference scheme.
@item The option @option{--output} signification changed. It now
has the same meaning than for @command{makeinfo}. It seems
that in 1.66 it was the same than @option{-out-file}. 
@option{--output} new meaning allows to replace @option{-out-file} and 
@option{-subdir} with a unique option. 

More precisely @option{-out-file} forces the output to be unsplit 
while @option{--output} behaves differently when split (it specifies
the directory
where the manual files should be outputted) and unsplit (it specifies
the output file). @option{-subdir} is retained for backward compatibility.

If you want a backward compatibility you can use @option{-subdir} 
for the output directory if the document is split, and @option{-out-file}
if the document isn't split. This hasn't been tested extensively though.
@item Many options has been obsoleted but they are retained for
backward compatibility.
@item The init files are searched in new directories, however they 
are still searched for in the old directories for backward
compatibility.
@item the option @option{--glossary} doesn't do anything. Likely
nothing specific is done regarding bibliographies. This has been
decided because this added some semantics to the texinfo formatting 
language that weren't part of texinfo. 

It should be possible to do
something similar with macros. See for example @file{glossary.texi} 
for glossary and @file{my-bib-macros.texi} for bibliography
in the directory @file{examples}. In the web2c package there is
an example of use of BibTeX, see @url{http://tug.org/texlive/devsrc/Build/source/TeX/texk/web2c/doc/} (the examples for bibliography are taken from the
texinfo home page @url{http://www.gnu.org/software/texinfo/texinfo.html}).
@item don't use @code{T2H_CENTER_IMAGE}. @code{@@center} should be used
insead, it will give the right output for all the formats.
@item If a directory creation fails the program aborts. This is much safer.
@item The interface for internationalisation changed, although
the previous wasn't documented a lot.
@item the API described in this manual changed a lot. A important
change was to use the @code{Texi2HTML::Config} names space instead of
variables prefixed with @samp{T2H_} or  @samp{t2h_}. To cope with
the change the prefix should be removed from variables in init files.
Some variables are now in @code{%Texi2HTML::THISDOC}.
@item @code{@@ifinfo} regions are not expanded by default. This may lead
to warnings or errors especially if the Top node is enclosed in 
@code{@@ifinfo}, as some node won't appear in menus. The quick fix
is to call @command{texi2html} with the option @option{--ifinfo} and
the right way should be to make more use of @code{@@ifnottex}.
@item The code appearing before the first node is now outputted, it was
ignored before. @option{--ignore-preamble-text} revert to the previous
behaviour. Enclosing in @code{@@ifnothtml} would be much cleaner.

@end itemize
@end itemize

@c --------------------------------------------------------
@node Specificities
@chapter How little texi2html texinfo differs from GNU texinfo

For features documented in the texinfo manual, the texinfo interpretation
by @command{texi2html} shouldn't differ from the interpretation of
@command{makeinfo} or @command{texi2dvi}. However for constructs with 
unspecified behaviour @command{texi2html} often doesn't lead to the 
same result than @command{makeinfo} or @command{texi2dvi}. @command{makeinfo}
and @command{texi2dvi} are also inconsistent in most of these cases (or
broken). You are urged not to use these features unless absolutely necessary.
This information is only here to help understand why @command{texi2html}
differ from other texinfo interpreters, it may be inacurate and the 
@command{texi2html} behaviour may change in the future and was different
in the past.

@table @asis
@item @@-commands with text on the line
In the texinfo manual it is specified that block @@-commands should appear
on a line without text and the closing @code{@@end} should also be on a 
line by himself. With @command{texi2html} it is possible to add
text before and after the command, so the following is right:

@example
something @@example the example @@end example after the example
@end example

@command{makeinfo} and @command{texi2dvi} may also accept text before
the command and text after the @code{@@end} command, sometimes ignoring 
it after the @code{@@end}.

This is a feature you should especially not rely on.

@item special @@-commands handling
The special @@-commands are commands like @code{@@pagesizes}, @code{@@sp},
@code{@@evenheading}, @code{@@raisesections}, @code{@@defindex} and a lot
more. In many cases @command{makeinfo} and @code{texi2dvi} 
don't parse those commands the same way too. @command{texi2html} may also
show some differences in parsing of the arguments of these commands, 
in case there are wrong arguments, and also ignore differently things
following those commands. How user defined macros, set and values
are expanded in those commands may also be different.
Part of the specification of how these commands are handled is 
configureable (@pxref{Other and unknown commands}), but not what 
happens during the beginning of the parsing for some of those commands. 

@item features different between @command{makeinfo} and @command{texi2dvi}
When @command{makeinfo} or @command{texi2dvi} use a feature which
is reserved for one or the other translator, @command{texi2html} uses that
feature. So for example @code{@@definfoenclose} which is ignored by 
@command{texi2dvi} is taken into account and @code{@@kbdinputstyle} which
is ignored by @command{makeinfo} is taken into account. 

@item user defined macros and values
In this area @command{makeinfo} and @command{texi2dvi} also differ a lot.
The reference implementation is the @command{makeinfo} implementation as
@command{texi2dvi} is easily broken when macros are not used simply.

@itemize @bullet
@item @code{@@rmacro} and @code{@@macro} behave exactly the same. In fact
this goes against a documented behaviour, however if a user don't
want a recursive macro he can simply avoid reusing the macro in the 
definition. If somebody report that the feature is usefull we could try
to implement it.
@item It is possible to escape the end of a macro definition with
@example
\@@end macro
@end example
with the @samp{\} being removed after the first expansion. Otherwise
it is not possible to produce a @code{\@@end macro} in a macro.
@item @code{@@unmacro} is interpreted during the macro argument expansion.
Don't know what @command{makeinfo} exactly do.
@item Some @code{@@value} may be expanded later than the others, those
that are in special commands, like @code{@@node}.
@end itemize

@item @code{@@,} in @code{@@node}
Like @command{texi2dvi} but unlike @command{makeinfo} @code{@@,} don't 
break @code{@@node} arguments like a regular @samp{,}.
@item Things before first node or preamble
Things before the first node or before the preamble may not be exactly 
interpreted or discarded as @command{makeinfo} or @command{texi2dvi} do.
@item encodings
@command{texi2html} knows more encodings, in fact all encodings @command{perl}
knows about.
@item commands in @code{@@ifset} and @code{@@ifclear}
@command{texi2html} doesn't need a proper nesting of internal @code{@@ifset}
or @code{@@ifclear} if they are in ignored or raw regions (like @code{@@html}
or @code{@@verbatim}). For example the following is accepted by 
@command{texi2html} and not by @command{makeinfo}:

@example
@@ifset notset
@@ignore
@@ifset
@@end ignore
@@end ifset
@end example

In @code{@@ifset} and @code{@@ifclear} texi2html also accepts
a lot more of invalid constructs. For example the following is accepted
by @command{texi2html} but not by @command{makeinfo}:

@example
@@set flag
@@ifset flag
@@itemize
@@item my item
@@end ifset
text
@@ifset flag
@@end itemize
@@end ifset
@end example
@end table

@c --------------------------------------------------------
@c commandline option index.
@node Indexop
@appendix Command Line Option Index
@printindex op
@c --------------------------------------------------------
@node Indexvr
@appendix Variable Index
@printindex vr
@c --------------------------------------------------------
@node Indexcp
@appendix Concept Index
@printindex cp
@bye
