export XML_CATALOG_FILES=~/src/texinfo/tp/catalog.xml
perl -w t/02coverage.t -o
xmllint --nonet --noout --valid commands.xml

Before next release
===================


Bugs
====

(A) sectioning/next_in_menu_is_below there should certainly be a warning for
the subsection that is both below and next the section, because it is 
next in menu.  Bug or not?

In singular manual, the first node is the Top node, it has no associated
sectioning command.  The up_section for this node is set to the first
sectioning element, the Preface, which is also associated with that node but
is below, and maybe they are in the same element?  In any case it seems to
be wrong.


Delayed bugs
============

Punctuation and spaces before @image do not lead to a doubling of space.
In fact @image is completly formatted outside of usual formatting containers.
Not sure what should be the right way?
test in info_test/image_and_punctuation

Instead of _set_global_multiple_commands and _unset_global_multiple_commands
have a better granularity and do something per command, with the possibility
to really revert everything, including things that are not set by set_conf.
(There is a FIXME in the code).

There should be a warning for something like
@example text
...

Following should be an error:
@example
@heading A heading
@end example

Image on sectioning command line haven't their length ignored correctly.
Not sure it is a big deal.  An example in sectioning/at_commands_in_refs.

warn when a @noindent/@indent appears within a paragraph.

in info_tests/error_in_footnote there is an error message for each 
listoffloats;  Line numbers are right, though, so maybe this is not
an issue.


Missing tests
=============

Test for the handling of #line.

Test tree leading to non empty preamble_before_setfilename.  Currently there
are none in the test suite, maybe require a real file as input.

In html, test 
 empty lines at the begining, 
 content ignored before setfilename, 
for the different cases of element/no element.  This is to be done with 
real input files, or test_utils.pl should be changed to parse entry like 
a file.
In html test empty @top for title, with different cases for 
setcontentsaftertit* and for anchors.

Tests in contents/ are incorporated?

test an lone @contents without any sectioning command.

Test @sc{@aa{}} and @sc{@'e} in HTML with 8bit and utf_, with and without
enable encoding and entities.

Test end_line_count in Texinfo/Convert/ containers.

Test no empty line before and after a sectioning command.  With text, but
also commands.

Test character lengths and encoding.  For instance tests in 
encodings/at_commands_in_refs_utf8.texi

use test ogoutf.texi ogolat2.texi for html.

test empty line in block or brace command in menu description.

in html test footnotestyle separate.


Future features
===============

(A) Warning for obsolete/unused customization variables like USE_SECTIONS
(a FIXME in Texinfo/Common.pm).?

Right now VERBOSE is almost not used.

Handle better @exdent in html? (there is a FIXME in the code)

Check the design of the HTML.pm API.  Document the API, in particular
everything in Texinfo::Config.  Add an API for everything used in the 
default functions, for example in page_head, use $self->title_string() 
and so on and so forth.  

add --output-encoding.  Design better the encoding handling.


DocBook
=======

* Instead of synopsis may use specialized synopsis, funcsynopsis/funcprototype
  for deftype*, funcdef for defffn, ooclass for object oriented.
  deffn:
  <funcsynopsis><funcprototype><funcdef role=...><function>d--effn_name</function></funcdef><paramdef><parameter>args</parameter></paramdef></funcprototype></funcsynopsis>
  defvr, deftypevr: varname, and type and not returnvalue
  deftypefn:
  <funcsynopsis><funcprototype><funcdef role=...>type <function>d--eftypefn_name</function></funcdef><paramdef>a type<parameter>in var..</parameter></paramdef></funcprototype></funcsynopsis>
  deftp: structname/structfield. Both contains a replaceable. Problem with
  structfield is that there should be one by field.
  defcv: classname + property, and category in synopsis
  deftypecv: classname + type + property, and category in synopsis
    fieldsynopsis?
  defop: <classsynopsis><classsynopsisinfo>category</classsynopsisinfo><ooclass><classname>class<><><methodsynopsis><methodname><replaceable><></methodname><methodparam><parameter>...<><><>
  deftypeop: same with type in methodparam.

  also informalfigure in @float

  also use informaltable or table, for multitable?

  What is before the first sectioning command is put in <bookinfo><abstract>.

  what about @titlefont in docbook?

  maybe use simpara instead of para. Indeed, simpara is for paragraph without
  block elent within, and it should be that way in generated output.

  put <title> in <articleinfo>?

  how to handle @sc in docbook?

* in docbook, when there is only one section <article> should be better
  than book. Maybe the best way to do that would be passing the
  information that there is only one section to the functions formatting
  the page header and page footer.


Interrogations and remarks
==========================

Should more Converter ignore the last new line (with type 
last_raw_newline) of a raw block format?

In a first step, close when the the command to be closed is at the 
top of the tree, not when it should be closed theoretically.
Then it could be possible to come back to the place where the command
should be closed and give an error message.
This is certainly only an issue for @footnote and similar not a general issue.

There is no forward looking code anymore, so maybe a lex/yacc parser
could be used for the main loop.  More simply, a binary tokenizer, at 
least, could make for a notable speedup.

@ protecting end of lines in @def* is not kept in any way in the tree.
Maybe it could be possible to have it as a 'type'?

def/end_of_lines_protected_in_footnote.pl the footnote is
   (1)  -- category: deffn_name arguments arg2 more args with end of line
and not 
   (1)
 -- category: deffn_name arguments arg2 more args with end of line
It happens this way because the paragraph starts right after the footnote 
number.

in HTML, the argument of a quotation is ignored if the quotation is empty,
as in
 @quotation thing
 @end quotation
Is it really a bug?

In @copying things like some raw formats may be expanded.  However it is
not clear that it should be the same than in the main converter.  Maybe a 
specific list of formats could be passed to Convert::Text::convert, which
would be different (for example Info and Plaintext even if converting HTML).
This requires a test, to begin with.

Use INLINE_INSERTCOPYING as the default for some formats?

In HTML, HEADERS is used.  But not in other modules, especially not in
Plaintext.pm or Info.pm, this is determined by the module used (Plaintext.pm
or Info.pm).  No idea whether it is right or wrong.

in hyphenation: only text and accent commands, and should
only appear in toplevel

use definfoenclose information in Convert::Text?

From vincent Bela√Øche. About svg image files in HTML:

I don't think that supporting svg would be easy: its seems that to embed an
svg picture you need to declare the width x height of the frame in
which you embed it, and this information cannot be derived quite
straightforwardly from the picture.
With @image you can declare width and height but this is intended for
scaling. I am not sure whether or not that these arguments can be used
for the purpose of defining that frame...
What I did in 5x5 is that coded the height of the frame directly in
the macro @FIGURE with which I embed the figure, without going through
an argument.
The @FIGURE @macro is, for html:
@macro FIGURE {F,W}
@html
<div align="center">
<embed src="5x5_\F\.svg" height="276"
 type="image/svg+xml"
 pluginspage="http://www.adobe.com/svg/viewer/install/" /></div>
@end html
@end macro

Add @value to the corresponding commands categories?

Functions to document (?):
sectioning_command_target_name
node_target_name

tests .init file not relevant since indices cannot be split anymore
indices/index_test.init     



Incorporation of texi2html tests
================================

tests in test/macros, not incorporated
glossary.texi
bib-example.texi (big test)

tests of the command:
macros/
cond_no-ifhtml_no-ifinfo_no-iftex cond.texi --no-ifhtml --no-ifinfo --no-iftex
cond_ifhtml_ifinfo_iftex cond.texi --ifhtml --ifinfo --iftex
Maybe:
defcondx_Ubar defcondx_Dbar
space_in_setfilename

sectioning/
node_footnote_end
--> following changed when element_next for special elements became
set.  Nothing tests that in the test suite.
  node_footnote_use_node
  no_node_chapter_split
  nodes_after_top_before_section_use_nodes_chapter
  nodes_after_top_before_chapter_use_nodes_chapter
  test_refs_chapter
  test_refs_nodes

equivalent_nodes mainly for equivalent_nodes-noderename.cnf parsing and renamed
nodes handling.

singular_manual
SHORTEXTN and TOP_FILE, although those options should not necessarily be
used anymore.

formatting/
inter_item_commands.texi

HTML command:
sectioning/test_refs.texi with USE_NODES and split at nodes for testing 
nodes without sectioning commands below a chapter.

@verbatiminclude formatting/simplest.texi

@@verbatiminclude dot.
@verbatiminclude ./formatting/simplest.texi

NO_MONOLITHIC
in layout/no_monolithic
          no_monolithic_only_toc_out
   layout/navigation_*

done: test/invalid. Not completly incorporated
error_in_footnote_caption.texi    (at least partly done in 
                    info_tests/error_in_footnote.  More shouldn't be needed)
tex_in_copying.texi               (this is not invalid and not
                                   such an interesting construct to test)

partly done:
indices/recursive_synindex.texi (only done: @synindex aaa bbb
                                            @synindex bbb aaa)
indices/index_special_region.texi  (in HTML, split output test. For 
                                    anchor in @titlepage, for example.
                                    It is mostly in 25regions.t too)
                                   also tests for the footnotes in 
                                   titlepage/copying. 

done: info_coverage
code.texi                 certainly not needed
commentexample.texi       the comment is in fact in comments_in_example
                          but no test for vertical spacing (but not needed)
split_nocopying.texi      this requires not using the test suite since 
                          the test suite inhibits splitting

done:
formatting/def_end_of_line.texi
formatting/def_end_of_line_footnote.texi
formatting/empty_deftype.texi
formatting/def_cmds.texi
formatting/paragraph_in_samp.texi
formatting/test_w.texi            (done especially in t/paragraph.t)

sectioning/other_at_comands_in_nodes_refs.texi
sectioning/at_commands_in_refs.texi
sectioning/test_refs.texi
sectioning/nodename_parentheses.texi
sectioning/double_node_anchor_float.texi
sectioning/double_top.texi
sectioning/nodes_test.texi   (done: unknown entry in menu and * (info)::
                              and errors.  Not sure the remaining is 
                              interesting)
sectioning/rec_nodes.texi
sectioning/semi_auto.texi
sectioning/novalidate.texi    (errors that aren't flagged by novalidate
                               done. Not sure the remaining is interesting)
sectioning/test_two_include.texi (not done at all, but it tests 
          -I .@PATH_SEPARATOR@../manuals@PATH_SEPARATOR@../macros)
sectioning/node-whitespace.tex   (but not @ref)
sectioning/loop_nodes.texi
sectioning/sectioning.texi
sectioning/text_before_line_command.texi
sectioning/empty_nodes.texi
sectioning/node_footnote.texi   (not interesting for Parser or Info, but 
                                 maybe for html)
sectioning/nodes_before_top.texi
sectioning/no_element.texi
sectioning/no_section.texi      (no test for the whole, but it is not interesting
                                 for Structuring and Info)
sectioning/only_documentencoding.texi
sectioning/part_before_section.texi
sectioning/part_node_before_top.texi
sectioning/part_node_chapter_after_top.texi
sectioning/node_part_chapter_after_chapter.texi
sectioning/section_before_chapter.texi
sectioning/section_before_part.texi
sectioning/section_before_top.texi
sectioning/section_before_top_no_node.texi
sectioning/section_chapter_before_top.texi
sectioning/section_chapter_before_top_nodes.texi
sectioning/section_in_unnumbered.texi


indices/unknown_index_entry.texi
indices/more_unknown_index_entry.texi (but without the document structure)
indices/double_index_entry.texi

invalid/at_after_accent_command.texi
invalid/author_outside_titlepage_quotation.texi
invalid/bad_documentencoding.texi
invalid/bad_nesting.texi
invalid/bad_style_nesting.texi
invalid/bad_tab_nesting.texi
invalid/brace_not_closed.texi
invalid/caption_not_closed.texi
invalid/code_not_closed_no_newline.texi
invalid/code_not_closed.texi 
invalid/commands_not_closed.texi (but maybe still things to test)
invalid/command_without_open_brace.texi
invalid/copying_not_closed.texi
invalid/def_bad_defx_command.texi
invalid/def_braces_and_empty.texi
invalid/def_cmd_dble.texi
invalid/direntry_dircategory_after_first_node.texi
invalid/double_top_section.texi
invalid/empty_ifclear.texi
invalid/footnote_not_closed.texi
invalid/formats_not_closed.texi
invalid/html_not_closed.texi
invalid/ignored_not_closed.texi
invalid/invalid_command_in_table.texi
invalid/itemx_in_itemize.texi
invalid/macro_call_not_closed.texi
invalid/macro_def_not_closed.texi
invalid/math_not_closed.texi
invalid/multitable_begin_with_tab.texi
invalid/multitable_too_much_col.texi
invalid/node_in_copying.texi
invalid/node_too_much_arguments.texi
invalid/not_closed_in_menu.texi
invalid/recursive_copying.texi             (but not the expansion)
invalid/style_not_closed_in_cartouche.texi
invalid/style_not_closed_in_table_line.texi
invalid/tab_in_index.texi                  (but not the printindex)
invalid/tex_not_closed.texi
invalid/titlepage_not_closed.texi
invalid/unclosed_verb_line_commands.texi   (but the result is different since
                                            ignored until end of file).
invalid/unknown_command_with_braces.texi
invalid/verb_and_char_end_of_line.texi
invalid/verb_end_of_line.texi
invalid/verb_not_closed.texi
invalid/verbatim_not_closed.texi


coverage/pass0_macro.texi     (not everything, but tests are redundant)

