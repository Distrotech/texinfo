export XML_CATALOG_FILES=~/src/texinfo/tp/maintain/catalog.xml
xmllint --nonet --noout --valid commands.xml


Before next release
===================

Document TEXTCONTENT_COMMENT.

pod2texi: remove :: in node to avoid confusing @ref in info.


Bugs
====


Delayed bugs
============

Punctuation and spaces before @image do not lead to a doubling of space.
In fact @image is completly formatted outside of usual formatting containers.
Not sure what should be the right way?
test in info_test/image_and_punctuation

Instead of _set_global_multiple_commands and _unset_global_multiple_commands
have a better granularity and do something per command, with the possibility
to really revert everything, including things that are not set by set_conf.
(There is a FIXME in the code).

There should be a warning for something like
@example text
...

Following should be an error:
@example
@heading A heading
@end example

Image on sectioning command line haven't their length ignored correctly.
Not sure it is a big deal.  An example in sectioning/at_commands_in_refs.

warn when a @noindent/@indent appears within a paragraph.

in info_tests/error_in_footnote there is an error message for each 
listoffloats;  Line numbers are right, though, so maybe this is not
an issue.

warn nested footnotes.

coverage_braces/verb_in_xref there should certainly be an error
message, and the *Note is stuck with the following word.

converters_tests/things_before_setfilename there is no error
for anchor and footnote before setfilename.  It is not completly
clear that there should be, though.


Missing tests
=============

Unit test of end_line_count for Texinfo/Convert/Paragraph.pm .... containers.

Test no empty line before and after a sectioning command.  With text, but
also commands.

In html test empty @top for title, with different cases for 
setcontentsaftertit* and for anchors.

Test @sc{@aa{}} and @sc{@'e} in HTML with 8bit and utf8, with and without
enable encoding and entities.

in html test footnotestyle separate.  There are such tests in tp/tests,
mayeb they are sufficient, but they are only done for long checks.


Future features
===============

Add some elements of texinfo that are not of interest in the
tree, like beginning and end of included file, @ protecting
end of line in @def*, begin and end of user defined macro
or value expansion.  Maybe call the key for these elements
'sourcemark'?

In a similar way, keep the information about aliases in the tree?
And about @setfilename in included files which is for now completly
removed (consistently with documentation).

New command to modify/transform a texinfo manual, for now to fix
a tree by adding empty unnumbered commands.

Right now VERBOSE is almost not used.

Handle better @exdent in html? (there is a FIXME in the code)

Check the design of the HTML.pm API.  Document the API, in particular
everything in Texinfo::Config.  Add an API for everything used in the 
default functions, for example in page_head, use $self->title_string() 
and so on and so forth.  
Functions to document for HTML API (many more are missing!):
sectioning_command_target_name
node_target_name


DocBook
=======

* Instead of synopsis may use specialized synopsis, funcsynopsis/funcprototype
  for deftype*, funcdef for defffn, ooclass for object oriented.
  deffn:
  <funcsynopsis><funcprototype><funcdef role=...><function>d--effn_name</function></funcdef><paramdef><parameter>args</parameter></paramdef></funcprototype></funcsynopsis>
  defvr, deftypevr: varname, and type and not returnvalue
  deftypefn:
  <funcsynopsis><funcprototype><funcdef role=...>type <function>d--eftypefn_name</function></funcdef><paramdef>a type<parameter>in var..</parameter></paramdef></funcprototype></funcsynopsis>
  deftp: structname/structfield. Both contains a replaceable. Problem with
  structfield is that there should be one by field.
  defcv: classname + property, and category in synopsis
  deftypecv: classname + type + property, and category in synopsis
    fieldsynopsis?
  defop: <classsynopsis><classsynopsisinfo>category</classsynopsisinfo><ooclass><classname>class<><><methodsynopsis><methodname><replaceable><></methodname><methodparam><parameter>...<><><>
  deftypeop: same with type in methodparam.

  also informalfigure in @float

  also use informaltable or table, for multitable?

  What is before the first sectioning command is put in <bookinfo><abstract>.

  what about @titlefont in docbook?

  maybe use simpara instead of para. Indeed, simpara is for paragraph without
  block elent within, and it should be that way in generated output.

  put <title> in <articleinfo>?

  how to handle @sc in docbook?

* in docbook, when there is only one section <article> should be better
  than book. Maybe the best way to do that would be passing the
  information that there is only one section to the functions formatting
  the page header and page footer.


Interrogations and remarks
==========================

Should more Converter ignore the last new line (with type 
last_raw_newline) of a raw block format?

In a first step, close when the the command to be closed is at the 
top of the tree, not when it should be closed theoretically.
Then it could be possible to come back to the place where the command
should be closed and give an error message.
This is certainly only an issue for @footnote and similar not a general issue.

There is no forward looking code anymore, so maybe a lex/yacc parser
could be used for the main loop.  More simply, a binary tokenizer, at 
least, could make for a notable speedup.

@ protecting end of lines in @def* is not kept in any way in the tree.
Maybe it could be possible to have it as a 'type'?

def/end_of_lines_protected_in_footnote.pl the footnote is
   (1)  -- category: deffn_name arguments arg2 more args with end of line
and not 
   (1)
 -- category: deffn_name arguments arg2 more args with end of line
It happens this way because the paragraph starts right after the footnote 
number.

in HTML, the argument of a quotation is ignored if the quotation is empty,
as in
 @quotation thing
 @end quotation
Is it really a bug?

In @copying things like some raw formats may be expanded.  However it is
not clear that it should be the same than in the main converter.  Maybe a 
specific list of formats could be passed to Convert::Text::convert, which
would be different (for example Info and Plaintext even if converting HTML).
This requires a test, to begin with.

Use INLINE_INSERTCOPYING as the default for some formats?

In HTML, HEADERS is used.  But not in other modules, especially not in
Plaintext.pm or Info.pm, this is determined by the module used (Plaintext.pm
or Info.pm).  No idea whether it is right or wrong.

in hyphenation: only text and accent commands, and should
only appear in toplevel

use definfoenclose information in Convert::Text?

From vincent Bela√Øche. About svg image files in HTML:

I don't think that supporting svg would be easy: its seems that to embed an
svg picture you need to declare the width x height of the frame in
which you embed it, and this information cannot be derived quite
straightforwardly from the picture.
With @image you can declare width and height but this is intended for
scaling. I am not sure whether or not that these arguments can be used
for the purpose of defining that frame...
What I did in 5x5 is that coded the height of the frame directly in
the macro @FIGURE with which I embed the figure, without going through
an argument.
The @FIGURE @macro is, for html:
@macro FIGURE {F,W}
@html
<div align="center">
<embed src="5x5_\F\.svg" height="276"
 type="image/svg+xml"
 pluginspage="http://www.adobe.com/svg/viewer/install/" /></div>
@end html
@end macro

Add @value to the corresponding commands categories?

tests .init file not relevant since indices cannot be split anymore
indices/index_test.init     



Missing test outputs  in t/
===========================

output files split (node or not split) could be interesting +texi2html 
style for
sectioning/
 chapter_between_nodes (more_nodes_than_sections renamed)
 more_sections_than_nodes
 two_nodes_between_chapters
 two_nodes_at_the_end
 character_and_spaces_in_refs
 character_and_spaces_in_node
 some_at_commands_in_ref_nodes
 at_commands_in_refs  
 character_and_spaces_in_refs <- split/mono (chapter/node+node-files+USE_NODES/docbook?)
 rec_nodes (with USE_NODES and without)
 loop_nodes?
 nodes_before_top?
 no_element
 top_node_no_menu_direction? (with USE_NODES and without?)
 anchor_in_footnote
 anchor_in_footnote_separate
 placed_things_before_node    (with USE_NODES and without?)
 placed_things_before_element (with USE_NODES and without?)
 top_no_argument_and_node
 top_no_argument_and_top_node
 nodes_after_top_before_chapter_(nodes/sections) (with USE_NODES and --split chapter)
 nodes_after_top_before_section_(nodes/sections) (with USE_NODES and --split chapter and only --split chapter)
 sectioning_part_appendix   (--split chapter)
 nodes_no_node_top_explicit_directions (with USE_NODES and without)
 one_node_explicit_directions_anchor (with USE_NODES and without) Really useful?
 top_without_node_sections

info_tests
 space_in_setfilename


Tests in tests and missing tests in t/
======================================

--> following changed when element_next for special elements became
set.  Nothing tests that in the t/ test suite, notably because nothing tests
the texi2html output.  All are in tests/sectioning/
  node_footnote_use_node
  no_node_chapter_split
  nodes_after_top_before_section_use_nodes_chapter
  nodes_after_top_before_chapter_use_nodes_chapter

equivalent_nodes mainly for equivalent_nodes-noderename.cnf parsing and renamed
nodes handling.

HTML command:
sectioning/test_refs.texi with USE_NODES and split at nodes for testing 
nodes without sectioning commands below a chapter.

NO_MONOLITHIC
in layout/no_monolithic
          no_monolithic_only_toc_out
   layout/navigation_*

partly done:
indices/index_special_region.texi  (in HTML, split output test.)

split_nocopying.texi      this requires not using the test suite in t/ since 
                          the test suite inhibits splitting

