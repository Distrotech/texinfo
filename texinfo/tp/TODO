In a first step, close when the the command to be closed is at the 
top of the tree, not when it should be closed theoretically.
Then it could be possible to come back to the place where the command
should be closed and give an error message.

Karl idea to keep the information on the exact location of the @mymacro:
(pertusus had the same idea).
here's a crazy idea that just popped into my head: what if we kept track
of column numbers as well as line numbers?  Then whether the macro was
involved would be a matter of checking if the column number was < or >
the place where the error occurred.

Following should be an error:
@example
@heading A heading
@end example

test invalid, especially commands not closed/bad nesting

in t/57invalid_nestings.t in_table, no warning for bad stuff on @item line.

in hyphenation: only text and accent commands, and should
only appear in toplevel

dotless:
"%c%s expects `i' or `j' as argument, not `%s'"

Texinfo::Convert::Text
@c in menu lines (and maybe at other places) should be replaced by 
\n and not eat the end of line.

use definfoenclose information in Convert::Text?

tests in test/macros, not incorporated
glossary.texi
bib-example.texi (big test)
macro-at.texi (the macro part is already done)
double_setfilename.texi
bad_setfilename.texi

from test_paths.texi:
@image{formatting/f--ile}

@@image dot.
@image{./formatting/f--ile}

@@image dot parent.
@image{../test/formatting/f--ile}

@verbatiminclude formatting/simplest.texi

@@verbatiminclude dot.
@verbatiminclude ./formatting/simplest.texi

done:
formatting/def_end_of_line.texi
formatting/def_end_of_line_footnote.texi
formatting/empty_deftype.texi
formatting/def_cmds.texi (but printindex not tested)
formatting/paragraph_in_samp.texi

invalid/at_after_accent_command.texi
invalid/bad_nesting.texi
invalid/bad_style_nesting.texi
invalid/bad_tab_nesting.texi
invalid/brace_not_closed.texi
invalid/caption_not_closed.texi
invalid/code_not_closed_no_newline.texi
invalid/code_not_closed.texi 
